
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a7d8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000049f8  0802a898  0802a898  0002b898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f290  0802f290  0003143c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802f290  0802f290  00030290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802f298  0802f298  0003143c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802f298  0802f298  00030298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802f29c  0802f29c  0003029c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000043c  20000000  0802f2a0  00031000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034dc  2000043c  0802f6dc  0003143c  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20003918  0802f6dc  00031918  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003143c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036fe7  00000000  00000000  00031464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009f03  00000000  00000000  0006844b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002dd0  00000000  00000000  00072350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000222b  00000000  00000000  00075120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024659  00000000  00000000  0007734b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046a30  00000000  00000000  0009b9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a35d6  00000000  00000000  000e23d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  001859aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc1c  00000000  00000000  00185a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00191678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  001916e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  00193c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000043c 	.word	0x2000043c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0802a880 	.word	0x0802a880

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000440 	.word	0x20000440
 8000104:	0802a880 	.word	0x0802a880

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f9e9 	bl	8002878 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f002 f92d 	bl	8002710 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f9db 	bl	8002878 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f9d1 	bl	8002878 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f002 f957 	bl	8002798 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f002 f94d 	bl	8002798 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fd4b 	bl	8000fb0 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fcd3 	bl	8000ed0 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fd3d 	bl	8000fb0 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fd33 	bl	8000fb0 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fce1 	bl	8000f20 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fcd7 	bl	8000f20 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f001 f8db 	bl	80017e8 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fe5b 	bl	80012f4 <__aeabi_fsub>
 800063e:	f001 f8d3 	bl	80017e8 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f003 f889 	bl	8003778 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 fc56 	bl	8002f20 <__aeabi_dsub>
 8000674:	f003 f880 	bl	8003778 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f002 f943 	bl	8002954 <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f003 f8ba 	bl	800384c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f002 f93a 	bl	8002954 <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fc1a 	bl	8002f20 <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f003 f875 	bl	80037f0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f002 f923 	bl	8002954 <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f003 f89a 	bl	800384c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f001 f91a 	bl	8001954 <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f003 f98c 	bl	8003a64 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f003 f987 	bl	8003a64 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	024b      	lsls	r3, r1, #9
 80008c4:	0a5a      	lsrs	r2, r3, #9
 80008c6:	4694      	mov	ip, r2
 80008c8:	004a      	lsls	r2, r1, #1
 80008ca:	0fc9      	lsrs	r1, r1, #31
 80008cc:	46ce      	mov	lr, r9
 80008ce:	4647      	mov	r7, r8
 80008d0:	4689      	mov	r9, r1
 80008d2:	0045      	lsls	r5, r0, #1
 80008d4:	0246      	lsls	r6, r0, #9
 80008d6:	0e2d      	lsrs	r5, r5, #24
 80008d8:	0e12      	lsrs	r2, r2, #24
 80008da:	b580      	push	{r7, lr}
 80008dc:	0999      	lsrs	r1, r3, #6
 80008de:	0a77      	lsrs	r7, r6, #9
 80008e0:	0fc4      	lsrs	r4, r0, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1aab      	subs	r3, r5, r2
 80008e6:	454c      	cmp	r4, r9
 80008e8:	d020      	beq.n	800092c <__aeabi_fadd+0x6c>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd0c      	ble.n	8000908 <__aeabi_fadd+0x48>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d134      	bne.n	800095c <__aeabi_fadd+0x9c>
 80008f2:	2900      	cmp	r1, #0
 80008f4:	d02a      	beq.n	800094c <__aeabi_fadd+0x8c>
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x3e>
 80008fc:	e08f      	b.n	8000a1e <__aeabi_fadd+0x15e>
 80008fe:	2bff      	cmp	r3, #255	@ 0xff
 8000900:	d100      	bne.n	8000904 <__aeabi_fadd+0x44>
 8000902:	e0cd      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000904:	0013      	movs	r3, r2
 8000906:	e02f      	b.n	8000968 <__aeabi_fadd+0xa8>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d060      	beq.n	80009ce <__aeabi_fadd+0x10e>
 800090c:	1b53      	subs	r3, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x54>
 8000912:	e0ee      	b.n	8000af2 <__aeabi_fadd+0x232>
 8000914:	2e00      	cmp	r6, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x5a>
 8000918:	e13e      	b.n	8000b98 <__aeabi_fadd+0x2d8>
 800091a:	1e5c      	subs	r4, r3, #1
 800091c:	2b01      	cmp	r3, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_fadd+0x62>
 8000920:	e16b      	b.n	8000bfa <__aeabi_fadd+0x33a>
 8000922:	2bff      	cmp	r3, #255	@ 0xff
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x68>
 8000926:	e0b9      	b.n	8000a9c <__aeabi_fadd+0x1dc>
 8000928:	0023      	movs	r3, r4
 800092a:	e0e7      	b.n	8000afc <__aeabi_fadd+0x23c>
 800092c:	2b00      	cmp	r3, #0
 800092e:	dc00      	bgt.n	8000932 <__aeabi_fadd+0x72>
 8000930:	e0a4      	b.n	8000a7c <__aeabi_fadd+0x1bc>
 8000932:	2a00      	cmp	r2, #0
 8000934:	d069      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000936:	2dff      	cmp	r5, #255	@ 0xff
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x7c>
 800093a:	e0b1      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4311      	orrs	r1, r2
 8000942:	2b1b      	cmp	r3, #27
 8000944:	dc00      	bgt.n	8000948 <__aeabi_fadd+0x88>
 8000946:	e0e9      	b.n	8000b1c <__aeabi_fadd+0x25c>
 8000948:	002b      	movs	r3, r5
 800094a:	3605      	adds	r6, #5
 800094c:	08f7      	lsrs	r7, r6, #3
 800094e:	2bff      	cmp	r3, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e0a5      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000954:	027a      	lsls	r2, r7, #9
 8000956:	0a52      	lsrs	r2, r2, #9
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	e030      	b.n	80009be <__aeabi_fadd+0xfe>
 800095c:	2dff      	cmp	r5, #255	@ 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fadd+0xa2>
 8000960:	e09e      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	04d2      	lsls	r2, r2, #19
 8000966:	4311      	orrs	r1, r2
 8000968:	2001      	movs	r0, #1
 800096a:	2b1b      	cmp	r3, #27
 800096c:	dc08      	bgt.n	8000980 <__aeabi_fadd+0xc0>
 800096e:	0008      	movs	r0, r1
 8000970:	2220      	movs	r2, #32
 8000972:	40d8      	lsrs	r0, r3
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4099      	lsls	r1, r3
 8000978:	000b      	movs	r3, r1
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	4193      	sbcs	r3, r2
 800097e:	4318      	orrs	r0, r3
 8000980:	1a36      	subs	r6, r6, r0
 8000982:	0173      	lsls	r3, r6, #5
 8000984:	d400      	bmi.n	8000988 <__aeabi_fadd+0xc8>
 8000986:	e071      	b.n	8000a6c <__aeabi_fadd+0x1ac>
 8000988:	01b6      	lsls	r6, r6, #6
 800098a:	09b7      	lsrs	r7, r6, #6
 800098c:	0038      	movs	r0, r7
 800098e:	f003 f84b 	bl	8003a28 <__clzsi2>
 8000992:	003b      	movs	r3, r7
 8000994:	3805      	subs	r0, #5
 8000996:	4083      	lsls	r3, r0
 8000998:	4285      	cmp	r5, r0
 800099a:	dd4d      	ble.n	8000a38 <__aeabi_fadd+0x178>
 800099c:	4eb4      	ldr	r6, [pc, #720]	@ (8000c70 <__aeabi_fadd+0x3b0>)
 800099e:	1a2d      	subs	r5, r5, r0
 80009a0:	401e      	ands	r6, r3
 80009a2:	075a      	lsls	r2, r3, #29
 80009a4:	d068      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009a6:	220f      	movs	r2, #15
 80009a8:	4013      	ands	r3, r2
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d064      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009ae:	3604      	adds	r6, #4
 80009b0:	0173      	lsls	r3, r6, #5
 80009b2:	d561      	bpl.n	8000a78 <__aeabi_fadd+0x1b8>
 80009b4:	1c68      	adds	r0, r5, #1
 80009b6:	2dfe      	cmp	r5, #254	@ 0xfe
 80009b8:	d154      	bne.n	8000a64 <__aeabi_fadd+0x1a4>
 80009ba:	20ff      	movs	r0, #255	@ 0xff
 80009bc:	2200      	movs	r2, #0
 80009be:	05c0      	lsls	r0, r0, #23
 80009c0:	4310      	orrs	r0, r2
 80009c2:	07e4      	lsls	r4, r4, #31
 80009c4:	4320      	orrs	r0, r4
 80009c6:	bcc0      	pop	{r6, r7}
 80009c8:	46b9      	mov	r9, r7
 80009ca:	46b0      	mov	r8, r6
 80009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ce:	22fe      	movs	r2, #254	@ 0xfe
 80009d0:	4690      	mov	r8, r2
 80009d2:	1c68      	adds	r0, r5, #1
 80009d4:	0002      	movs	r2, r0
 80009d6:	4640      	mov	r0, r8
 80009d8:	4210      	tst	r0, r2
 80009da:	d16b      	bne.n	8000ab4 <__aeabi_fadd+0x1f4>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x122>
 80009e0:	e0dd      	b.n	8000b9e <__aeabi_fadd+0x2de>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x128>
 80009e6:	e102      	b.n	8000bee <__aeabi_fadd+0x32e>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d0b3      	beq.n	8000954 <__aeabi_fadd+0x94>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	1a77      	subs	r7, r6, r1
 80009f0:	04d2      	lsls	r2, r2, #19
 80009f2:	4217      	tst	r7, r2
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fadd+0x138>
 80009f6:	e136      	b.n	8000c66 <__aeabi_fadd+0x3a6>
 80009f8:	464c      	mov	r4, r9
 80009fa:	1b8e      	subs	r6, r1, r6
 80009fc:	d061      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 80009fe:	2001      	movs	r0, #1
 8000a00:	4216      	tst	r6, r2
 8000a02:	d130      	bne.n	8000a66 <__aeabi_fadd+0x1a6>
 8000a04:	2300      	movs	r3, #0
 8000a06:	08f7      	lsrs	r7, r6, #3
 8000a08:	e7a4      	b.n	8000954 <__aeabi_fadd+0x94>
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d09e      	beq.n	800094c <__aeabi_fadd+0x8c>
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fadd+0x156>
 8000a14:	e0ca      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a16:	2bff      	cmp	r3, #255	@ 0xff
 8000a18:	d042      	beq.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	e791      	b.n	8000942 <__aeabi_fadd+0x82>
 8000a1e:	1a71      	subs	r1, r6, r1
 8000a20:	014b      	lsls	r3, r1, #5
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_fadd+0x166>
 8000a24:	e0d1      	b.n	8000bca <__aeabi_fadd+0x30a>
 8000a26:	018f      	lsls	r7, r1, #6
 8000a28:	09bf      	lsrs	r7, r7, #6
 8000a2a:	0038      	movs	r0, r7
 8000a2c:	f002 fffc 	bl	8003a28 <__clzsi2>
 8000a30:	003b      	movs	r3, r7
 8000a32:	3805      	subs	r0, #5
 8000a34:	4083      	lsls	r3, r0
 8000a36:	2501      	movs	r5, #1
 8000a38:	2220      	movs	r2, #32
 8000a3a:	1b40      	subs	r0, r0, r5
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	001e      	movs	r6, r3
 8000a42:	4093      	lsls	r3, r2
 8000a44:	40c6      	lsrs	r6, r0
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	4193      	sbcs	r3, r2
 8000a4a:	431e      	orrs	r6, r3
 8000a4c:	d039      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 8000a4e:	0773      	lsls	r3, r6, #29
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fadd+0x194>
 8000a52:	e11b      	b.n	8000c8c <__aeabi_fadd+0x3cc>
 8000a54:	230f      	movs	r3, #15
 8000a56:	2500      	movs	r5, #0
 8000a58:	4033      	ands	r3, r6
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d1a7      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	0172      	lsls	r2, r6, #5
 8000a62:	d57c      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000a64:	b2c0      	uxtb	r0, r0
 8000a66:	01b2      	lsls	r2, r6, #6
 8000a68:	0a52      	lsrs	r2, r2, #9
 8000a6a:	e7a8      	b.n	80009be <__aeabi_fadd+0xfe>
 8000a6c:	0773      	lsls	r3, r6, #29
 8000a6e:	d003      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a70:	230f      	movs	r3, #15
 8000a72:	4033      	ands	r3, r6
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d19a      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a78:	002b      	movs	r3, r5
 8000a7a:	e767      	b.n	800094c <__aeabi_fadd+0x8c>
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <__aeabi_fadd+0x208>
 8000a80:	1b53      	subs	r3, r2, r5
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d17b      	bne.n	8000b7e <__aeabi_fadd+0x2be>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x1cc>
 8000a8a:	e086      	b.n	8000b9a <__aeabi_fadd+0x2da>
 8000a8c:	1e5d      	subs	r5, r3, #1
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fadd+0x1d4>
 8000a92:	e08b      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a94:	2bff      	cmp	r3, #255	@ 0xff
 8000a96:	d002      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000a98:	002b      	movs	r3, r5
 8000a9a:	e075      	b.n	8000b88 <__aeabi_fadd+0x2c8>
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	4667      	mov	r7, ip
 8000aa0:	2f00      	cmp	r7, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000aa4:	e789      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	0252      	lsls	r2, r2, #9
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	0a52      	lsrs	r2, r2, #9
 8000ab2:	e784      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ab4:	1a77      	subs	r7, r6, r1
 8000ab6:	017b      	lsls	r3, r7, #5
 8000ab8:	d46b      	bmi.n	8000b92 <__aeabi_fadd+0x2d2>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fadd+0x200>
 8000abe:	e765      	b.n	800098c <__aeabi_fadd+0xcc>
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e77a      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ac8:	22fe      	movs	r2, #254	@ 0xfe
 8000aca:	1c6b      	adds	r3, r5, #1
 8000acc:	421a      	tst	r2, r3
 8000ace:	d149      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fadd+0x216>
 8000ad4:	e09f      	b.n	8000c16 <__aeabi_fadd+0x356>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fadd+0x21c>
 8000ada:	e0ba      	b.n	8000c52 <__aeabi_fadd+0x392>
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_fadd+0x222>
 8000ae0:	e0cf      	b.n	8000c82 <__aeabi_fadd+0x3c2>
 8000ae2:	1872      	adds	r2, r6, r1
 8000ae4:	0153      	lsls	r3, r2, #5
 8000ae6:	d400      	bmi.n	8000aea <__aeabi_fadd+0x22a>
 8000ae8:	e0cd      	b.n	8000c86 <__aeabi_fadd+0x3c6>
 8000aea:	0192      	lsls	r2, r2, #6
 8000aec:	2001      	movs	r0, #1
 8000aee:	0a52      	lsrs	r2, r2, #9
 8000af0:	e765      	b.n	80009be <__aeabi_fadd+0xfe>
 8000af2:	2aff      	cmp	r2, #255	@ 0xff
 8000af4:	d0d2      	beq.n	8000a9c <__aeabi_fadd+0x1dc>
 8000af6:	2080      	movs	r0, #128	@ 0x80
 8000af8:	04c0      	lsls	r0, r0, #19
 8000afa:	4306      	orrs	r6, r0
 8000afc:	2001      	movs	r0, #1
 8000afe:	2b1b      	cmp	r3, #27
 8000b00:	dc08      	bgt.n	8000b14 <__aeabi_fadd+0x254>
 8000b02:	0030      	movs	r0, r6
 8000b04:	2420      	movs	r4, #32
 8000b06:	40d8      	lsrs	r0, r3
 8000b08:	1ae3      	subs	r3, r4, r3
 8000b0a:	409e      	lsls	r6, r3
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	1e5c      	subs	r4, r3, #1
 8000b10:	41a3      	sbcs	r3, r4
 8000b12:	4318      	orrs	r0, r3
 8000b14:	464c      	mov	r4, r9
 8000b16:	0015      	movs	r5, r2
 8000b18:	1a0e      	subs	r6, r1, r0
 8000b1a:	e732      	b.n	8000982 <__aeabi_fadd+0xc2>
 8000b1c:	0008      	movs	r0, r1
 8000b1e:	2220      	movs	r2, #32
 8000b20:	40d8      	lsrs	r0, r3
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	4099      	lsls	r1, r3
 8000b26:	000b      	movs	r3, r1
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	4193      	sbcs	r3, r2
 8000b2c:	4303      	orrs	r3, r0
 8000b2e:	18f6      	adds	r6, r6, r3
 8000b30:	0173      	lsls	r3, r6, #5
 8000b32:	d59b      	bpl.n	8000a6c <__aeabi_fadd+0x1ac>
 8000b34:	3501      	adds	r5, #1
 8000b36:	2dff      	cmp	r5, #255	@ 0xff
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fadd+0x27c>
 8000b3a:	e73e      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	494d      	ldr	r1, [pc, #308]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000b40:	0872      	lsrs	r2, r6, #1
 8000b42:	4033      	ands	r3, r6
 8000b44:	400a      	ands	r2, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	0016      	movs	r6, r2
 8000b4a:	0753      	lsls	r3, r2, #29
 8000b4c:	d004      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b4e:	230f      	movs	r3, #15
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d000      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b56:	e72a      	b.n	80009ae <__aeabi_fadd+0xee>
 8000b58:	0173      	lsls	r3, r6, #5
 8000b5a:	d500      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e72a      	b.n	80009b4 <__aeabi_fadd+0xf4>
 8000b5e:	002b      	movs	r3, r5
 8000b60:	08f7      	lsrs	r7, r6, #3
 8000b62:	e6f7      	b.n	8000954 <__aeabi_fadd+0x94>
 8000b64:	2bff      	cmp	r3, #255	@ 0xff
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fadd+0x2aa>
 8000b68:	e727      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b6a:	1871      	adds	r1, r6, r1
 8000b6c:	0849      	lsrs	r1, r1, #1
 8000b6e:	074a      	lsls	r2, r1, #29
 8000b70:	d02f      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b72:	220f      	movs	r2, #15
 8000b74:	400a      	ands	r2, r1
 8000b76:	2a04      	cmp	r2, #4
 8000b78:	d02b      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b7a:	1d0e      	adds	r6, r1, #4
 8000b7c:	e6e6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b7e:	2aff      	cmp	r2, #255	@ 0xff
 8000b80:	d08d      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000b82:	2080      	movs	r0, #128	@ 0x80
 8000b84:	04c0      	lsls	r0, r0, #19
 8000b86:	4306      	orrs	r6, r0
 8000b88:	2b1b      	cmp	r3, #27
 8000b8a:	dd24      	ble.n	8000bd6 <__aeabi_fadd+0x316>
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	1d4e      	adds	r6, r1, #5
 8000b90:	e6dc      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b92:	464c      	mov	r4, r9
 8000b94:	1b8f      	subs	r7, r1, r6
 8000b96:	e6f9      	b.n	800098c <__aeabi_fadd+0xcc>
 8000b98:	464c      	mov	r4, r9
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	e6d6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d149      	bne.n	8000c36 <__aeabi_fadd+0x376>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d068      	beq.n	8000c78 <__aeabi_fadd+0x3b8>
 8000ba6:	4667      	mov	r7, ip
 8000ba8:	464c      	mov	r4, r9
 8000baa:	e77c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000bac:	1870      	adds	r0, r6, r1
 8000bae:	0143      	lsls	r3, r0, #5
 8000bb0:	d574      	bpl.n	8000c9c <__aeabi_fadd+0x3dc>
 8000bb2:	4930      	ldr	r1, [pc, #192]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	4001      	ands	r1, r0
 8000bb8:	0743      	lsls	r3, r0, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	1d0e      	adds	r6, r1, #4
 8000bc8:	e6c0      	b.n	800094c <__aeabi_fadd+0x8c>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	08cf      	lsrs	r7, r1, #3
 8000bce:	e6c1      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	08cf      	lsrs	r7, r1, #3
 8000bd4:	e6be      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd6:	2520      	movs	r5, #32
 8000bd8:	0030      	movs	r0, r6
 8000bda:	40d8      	lsrs	r0, r3
 8000bdc:	1aeb      	subs	r3, r5, r3
 8000bde:	409e      	lsls	r6, r3
 8000be0:	0033      	movs	r3, r6
 8000be2:	1e5d      	subs	r5, r3, #1
 8000be4:	41ab      	sbcs	r3, r5
 8000be6:	4303      	orrs	r3, r0
 8000be8:	0015      	movs	r5, r2
 8000bea:	185e      	adds	r6, r3, r1
 8000bec:	e7a0      	b.n	8000b30 <__aeabi_fadd+0x270>
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fadd+0x334>
 8000bf2:	e765      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000bf4:	464c      	mov	r4, r9
 8000bf6:	4667      	mov	r7, ip
 8000bf8:	e6ac      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bfa:	1b8f      	subs	r7, r1, r6
 8000bfc:	017b      	lsls	r3, r7, #5
 8000bfe:	d52e      	bpl.n	8000c5e <__aeabi_fadd+0x39e>
 8000c00:	01bf      	lsls	r7, r7, #6
 8000c02:	09bf      	lsrs	r7, r7, #6
 8000c04:	0038      	movs	r0, r7
 8000c06:	f002 ff0f 	bl	8003a28 <__clzsi2>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	3805      	subs	r0, #5
 8000c0e:	4083      	lsls	r3, r0
 8000c10:	464c      	mov	r4, r9
 8000c12:	3501      	adds	r5, #1
 8000c14:	e710      	b.n	8000a38 <__aeabi_fadd+0x178>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fadd+0x35c>
 8000c1a:	e740      	b.n	8000a9e <__aeabi_fadd+0x1de>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fadd+0x362>
 8000c20:	e741      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c22:	2380      	movs	r3, #128	@ 0x80
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d200      	bcs.n	8000c2c <__aeabi_fadd+0x36c>
 8000c2a:	e73c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c2c:	459c      	cmp	ip, r3
 8000c2e:	d300      	bcc.n	8000c32 <__aeabi_fadd+0x372>
 8000c30:	e739      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c32:	4667      	mov	r7, ip
 8000c34:	e737      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fadd+0x37c>
 8000c3a:	e734      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	03db      	lsls	r3, r3, #15
 8000c40:	429f      	cmp	r7, r3
 8000c42:	d200      	bcs.n	8000c46 <__aeabi_fadd+0x386>
 8000c44:	e72f      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c46:	459c      	cmp	ip, r3
 8000c48:	d300      	bcc.n	8000c4c <__aeabi_fadd+0x38c>
 8000c4a:	e72c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4667      	mov	r7, ip
 8000c50:	e729      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fadd+0x398>
 8000c56:	e734      	b.n	8000ac2 <__aeabi_fadd+0x202>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	08cf      	lsrs	r7, r1, #3
 8000c5c:	e67a      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c5e:	464c      	mov	r4, r9
 8000c60:	2301      	movs	r3, #1
 8000c62:	08ff      	lsrs	r7, r7, #3
 8000c64:	e676      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fadd+0x3ac>
 8000c6a:	e729      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000c6c:	08ff      	lsrs	r7, r7, #3
 8000c6e:	e671      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c70:	fbffffff 	.word	0xfbffffff
 8000c74:	7dffffff 	.word	0x7dffffff
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	20ff      	movs	r0, #255	@ 0xff
 8000c7e:	03d2      	lsls	r2, r2, #15
 8000c80:	e69d      	b.n	80009be <__aeabi_fadd+0xfe>
 8000c82:	2300      	movs	r3, #0
 8000c84:	e666      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c86:	2300      	movs	r3, #0
 8000c88:	08d7      	lsrs	r7, r2, #3
 8000c8a:	e663      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	0172      	lsls	r2, r6, #5
 8000c90:	d500      	bpl.n	8000c94 <__aeabi_fadd+0x3d4>
 8000c92:	e6e7      	b.n	8000a64 <__aeabi_fadd+0x1a4>
 8000c94:	0031      	movs	r1, r6
 8000c96:	2300      	movs	r3, #0
 8000c98:	08cf      	lsrs	r7, r1, #3
 8000c9a:	e65b      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	08c7      	lsrs	r7, r0, #3
 8000ca0:	e658      	b.n	8000954 <__aeabi_fadd+0x94>
 8000ca2:	46c0      	nop			@ (mov r8, r8)

08000ca4 <__aeabi_fdiv>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4646      	mov	r6, r8
 8000ca8:	464f      	mov	r7, r9
 8000caa:	46d6      	mov	lr, sl
 8000cac:	0245      	lsls	r5, r0, #9
 8000cae:	b5c0      	push	{r6, r7, lr}
 8000cb0:	0fc3      	lsrs	r3, r0, #31
 8000cb2:	0047      	lsls	r7, r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	1c0e      	adds	r6, r1, #0
 8000cb8:	0a6d      	lsrs	r5, r5, #9
 8000cba:	0e3f      	lsrs	r7, r7, #24
 8000cbc:	d05b      	beq.n	8000d76 <__aeabi_fdiv+0xd2>
 8000cbe:	2fff      	cmp	r7, #255	@ 0xff
 8000cc0:	d021      	beq.n	8000d06 <__aeabi_fdiv+0x62>
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	00ed      	lsls	r5, r5, #3
 8000cc6:	04db      	lsls	r3, r3, #19
 8000cc8:	431d      	orrs	r5, r3
 8000cca:	2300      	movs	r3, #0
 8000ccc:	4699      	mov	r9, r3
 8000cce:	469a      	mov	sl, r3
 8000cd0:	3f7f      	subs	r7, #127	@ 0x7f
 8000cd2:	0274      	lsls	r4, r6, #9
 8000cd4:	0073      	lsls	r3, r6, #1
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	0e1b      	lsrs	r3, r3, #24
 8000cda:	0ff6      	lsrs	r6, r6, #31
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d020      	beq.n	8000d22 <__aeabi_fdiv+0x7e>
 8000ce0:	2bff      	cmp	r3, #255	@ 0xff
 8000ce2:	d043      	beq.n	8000d6c <__aeabi_fdiv+0xc8>
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	00e4      	lsls	r4, r4, #3
 8000cea:	04d2      	lsls	r2, r2, #19
 8000cec:	4314      	orrs	r4, r2
 8000cee:	3b7f      	subs	r3, #127	@ 0x7f
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	1aff      	subs	r7, r7, r3
 8000cf4:	464b      	mov	r3, r9
 8000cf6:	4072      	eors	r2, r6
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d900      	bls.n	8000cfe <__aeabi_fdiv+0x5a>
 8000cfc:	e09d      	b.n	8000e3a <__aeabi_fdiv+0x196>
 8000cfe:	4971      	ldr	r1, [pc, #452]	@ (8000ec4 <__aeabi_fdiv+0x220>)
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	58cb      	ldr	r3, [r1, r3]
 8000d04:	469f      	mov	pc, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d15a      	bne.n	8000dc0 <__aeabi_fdiv+0x11c>
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	4699      	mov	r9, r3
 8000d0e:	3b06      	subs	r3, #6
 8000d10:	0274      	lsls	r4, r6, #9
 8000d12:	469a      	mov	sl, r3
 8000d14:	0073      	lsls	r3, r6, #1
 8000d16:	27ff      	movs	r7, #255	@ 0xff
 8000d18:	0a64      	lsrs	r4, r4, #9
 8000d1a:	0e1b      	lsrs	r3, r3, #24
 8000d1c:	0ff6      	lsrs	r6, r6, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1de      	bne.n	8000ce0 <__aeabi_fdiv+0x3c>
 8000d22:	2c00      	cmp	r4, #0
 8000d24:	d13b      	bne.n	8000d9e <__aeabi_fdiv+0xfa>
 8000d26:	2301      	movs	r3, #1
 8000d28:	4642      	mov	r2, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	4072      	eors	r2, r6
 8000d2e:	4319      	orrs	r1, r3
 8000d30:	290e      	cmp	r1, #14
 8000d32:	d818      	bhi.n	8000d66 <__aeabi_fdiv+0xc2>
 8000d34:	4864      	ldr	r0, [pc, #400]	@ (8000ec8 <__aeabi_fdiv+0x224>)
 8000d36:	0089      	lsls	r1, r1, #2
 8000d38:	5841      	ldr	r1, [r0, r1]
 8000d3a:	468f      	mov	pc, r1
 8000d3c:	4653      	mov	r3, sl
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fdiv+0xa0>
 8000d42:	e0b8      	b.n	8000eb6 <__aeabi_fdiv+0x212>
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d06e      	beq.n	8000e26 <__aeabi_fdiv+0x182>
 8000d48:	4642      	mov	r2, r8
 8000d4a:	002c      	movs	r4, r5
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d140      	bne.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000d50:	2000      	movs	r0, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	05c0      	lsls	r0, r0, #23
 8000d56:	4320      	orrs	r0, r4
 8000d58:	07d2      	lsls	r2, r2, #31
 8000d5a:	4310      	orrs	r0, r2
 8000d5c:	bce0      	pop	{r5, r6, r7}
 8000d5e:	46ba      	mov	sl, r7
 8000d60:	46b1      	mov	r9, r6
 8000d62:	46a8      	mov	r8, r5
 8000d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d66:	20ff      	movs	r0, #255	@ 0xff
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e7f3      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d120      	bne.n	8000db2 <__aeabi_fdiv+0x10e>
 8000d70:	2302      	movs	r3, #2
 8000d72:	3fff      	subs	r7, #255	@ 0xff
 8000d74:	e7d8      	b.n	8000d28 <__aeabi_fdiv+0x84>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d105      	bne.n	8000d86 <__aeabi_fdiv+0xe2>
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	4699      	mov	r9, r3
 8000d7e:	3b03      	subs	r3, #3
 8000d80:	2700      	movs	r7, #0
 8000d82:	469a      	mov	sl, r3
 8000d84:	e7a5      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d86:	0028      	movs	r0, r5
 8000d88:	f002 fe4e 	bl	8003a28 <__clzsi2>
 8000d8c:	2776      	movs	r7, #118	@ 0x76
 8000d8e:	1f43      	subs	r3, r0, #5
 8000d90:	409d      	lsls	r5, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	427f      	negs	r7, r7
 8000d96:	4699      	mov	r9, r3
 8000d98:	469a      	mov	sl, r3
 8000d9a:	1a3f      	subs	r7, r7, r0
 8000d9c:	e799      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f002 fe42 	bl	8003a28 <__clzsi2>
 8000da4:	1f43      	subs	r3, r0, #5
 8000da6:	409c      	lsls	r4, r3
 8000da8:	2376      	movs	r3, #118	@ 0x76
 8000daa:	425b      	negs	r3, r3
 8000dac:	1a1b      	subs	r3, r3, r0
 8000dae:	2000      	movs	r0, #0
 8000db0:	e79e      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000db2:	2303      	movs	r3, #3
 8000db4:	464a      	mov	r2, r9
 8000db6:	431a      	orrs	r2, r3
 8000db8:	4691      	mov	r9, r2
 8000dba:	2003      	movs	r0, #3
 8000dbc:	33fc      	adds	r3, #252	@ 0xfc
 8000dbe:	e797      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	3b09      	subs	r3, #9
 8000dc6:	27ff      	movs	r7, #255	@ 0xff
 8000dc8:	469a      	mov	sl, r3
 8000dca:	e782      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d02c      	beq.n	8000e2a <__aeabi_fdiv+0x186>
 8000dd0:	0032      	movs	r2, r6
 8000dd2:	0038      	movs	r0, r7
 8000dd4:	307f      	adds	r0, #127	@ 0x7f
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	dd47      	ble.n	8000e6a <__aeabi_fdiv+0x1c6>
 8000dda:	0763      	lsls	r3, r4, #29
 8000ddc:	d004      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000dde:	230f      	movs	r3, #15
 8000de0:	4023      	ands	r3, r4
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000de6:	3404      	adds	r4, #4
 8000de8:	0123      	lsls	r3, r4, #4
 8000dea:	d503      	bpl.n	8000df4 <__aeabi_fdiv+0x150>
 8000dec:	0038      	movs	r0, r7
 8000dee:	4b37      	ldr	r3, [pc, #220]	@ (8000ecc <__aeabi_fdiv+0x228>)
 8000df0:	3080      	adds	r0, #128	@ 0x80
 8000df2:	401c      	ands	r4, r3
 8000df4:	28fe      	cmp	r0, #254	@ 0xfe
 8000df6:	dcb6      	bgt.n	8000d66 <__aeabi_fdiv+0xc2>
 8000df8:	01a4      	lsls	r4, r4, #6
 8000dfa:	0a64      	lsrs	r4, r4, #9
 8000dfc:	b2c0      	uxtb	r0, r0
 8000dfe:	e7a9      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e00:	2480      	movs	r4, #128	@ 0x80
 8000e02:	2200      	movs	r2, #0
 8000e04:	20ff      	movs	r0, #255	@ 0xff
 8000e06:	03e4      	lsls	r4, r4, #15
 8000e08:	e7a4      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e0a:	2380      	movs	r3, #128	@ 0x80
 8000e0c:	03db      	lsls	r3, r3, #15
 8000e0e:	421d      	tst	r5, r3
 8000e10:	d001      	beq.n	8000e16 <__aeabi_fdiv+0x172>
 8000e12:	421c      	tst	r4, r3
 8000e14:	d00b      	beq.n	8000e2e <__aeabi_fdiv+0x18a>
 8000e16:	2480      	movs	r4, #128	@ 0x80
 8000e18:	03e4      	lsls	r4, r4, #15
 8000e1a:	432c      	orrs	r4, r5
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	4642      	mov	r2, r8
 8000e20:	20ff      	movs	r0, #255	@ 0xff
 8000e22:	0a64      	lsrs	r4, r4, #9
 8000e24:	e796      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e26:	4646      	mov	r6, r8
 8000e28:	002c      	movs	r4, r5
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	03db      	lsls	r3, r3, #15
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0264      	lsls	r4, r4, #9
 8000e32:	0032      	movs	r2, r6
 8000e34:	20ff      	movs	r0, #255	@ 0xff
 8000e36:	0a64      	lsrs	r4, r4, #9
 8000e38:	e78c      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e3a:	016d      	lsls	r5, r5, #5
 8000e3c:	0160      	lsls	r0, r4, #5
 8000e3e:	4285      	cmp	r5, r0
 8000e40:	d22d      	bcs.n	8000e9e <__aeabi_fdiv+0x1fa>
 8000e42:	231b      	movs	r3, #27
 8000e44:	2400      	movs	r4, #0
 8000e46:	3f01      	subs	r7, #1
 8000e48:	2601      	movs	r6, #1
 8000e4a:	0029      	movs	r1, r5
 8000e4c:	0064      	lsls	r4, r4, #1
 8000e4e:	006d      	lsls	r5, r5, #1
 8000e50:	2900      	cmp	r1, #0
 8000e52:	db01      	blt.n	8000e58 <__aeabi_fdiv+0x1b4>
 8000e54:	4285      	cmp	r5, r0
 8000e56:	d301      	bcc.n	8000e5c <__aeabi_fdiv+0x1b8>
 8000e58:	1a2d      	subs	r5, r5, r0
 8000e5a:	4334      	orrs	r4, r6
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f3      	bne.n	8000e4a <__aeabi_fdiv+0x1a6>
 8000e62:	1e6b      	subs	r3, r5, #1
 8000e64:	419d      	sbcs	r5, r3
 8000e66:	432c      	orrs	r4, r5
 8000e68:	e7b3      	b.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	1a1b      	subs	r3, r3, r0
 8000e6e:	2b1b      	cmp	r3, #27
 8000e70:	dd00      	ble.n	8000e74 <__aeabi_fdiv+0x1d0>
 8000e72:	e76d      	b.n	8000d50 <__aeabi_fdiv+0xac>
 8000e74:	0021      	movs	r1, r4
 8000e76:	379e      	adds	r7, #158	@ 0x9e
 8000e78:	40d9      	lsrs	r1, r3
 8000e7a:	40bc      	lsls	r4, r7
 8000e7c:	000b      	movs	r3, r1
 8000e7e:	1e61      	subs	r1, r4, #1
 8000e80:	418c      	sbcs	r4, r1
 8000e82:	4323      	orrs	r3, r4
 8000e84:	0759      	lsls	r1, r3, #29
 8000e86:	d004      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e88:	210f      	movs	r1, #15
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	2904      	cmp	r1, #4
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e90:	3304      	adds	r3, #4
 8000e92:	0159      	lsls	r1, r3, #5
 8000e94:	d413      	bmi.n	8000ebe <__aeabi_fdiv+0x21a>
 8000e96:	019b      	lsls	r3, r3, #6
 8000e98:	2000      	movs	r0, #0
 8000e9a:	0a5c      	lsrs	r4, r3, #9
 8000e9c:	e75a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e9e:	231a      	movs	r3, #26
 8000ea0:	2401      	movs	r4, #1
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	e7d0      	b.n	8000e48 <__aeabi_fdiv+0x1a4>
 8000ea6:	1e98      	subs	r0, r3, #2
 8000ea8:	4243      	negs	r3, r0
 8000eaa:	4158      	adcs	r0, r3
 8000eac:	4240      	negs	r0, r0
 8000eae:	0032      	movs	r2, r6
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	b2c0      	uxtb	r0, r0
 8000eb4:	e74e      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000eb6:	4642      	mov	r2, r8
 8000eb8:	20ff      	movs	r0, #255	@ 0xff
 8000eba:	2400      	movs	r4, #0
 8000ebc:	e74a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	e747      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ec4:	0802e070 	.word	0x0802e070
 8000ec8:	0802e0b0 	.word	0x0802e0b0
 8000ecc:	f7ffffff 	.word	0xf7ffffff

08000ed0 <__eqsf2>:
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	0042      	lsls	r2, r0, #1
 8000ed4:	024e      	lsls	r6, r1, #9
 8000ed6:	004c      	lsls	r4, r1, #1
 8000ed8:	0245      	lsls	r5, r0, #9
 8000eda:	0a6d      	lsrs	r5, r5, #9
 8000edc:	0e12      	lsrs	r2, r2, #24
 8000ede:	0fc3      	lsrs	r3, r0, #31
 8000ee0:	0a76      	lsrs	r6, r6, #9
 8000ee2:	0e24      	lsrs	r4, r4, #24
 8000ee4:	0fc9      	lsrs	r1, r1, #31
 8000ee6:	2aff      	cmp	r2, #255	@ 0xff
 8000ee8:	d010      	beq.n	8000f0c <__eqsf2+0x3c>
 8000eea:	2cff      	cmp	r4, #255	@ 0xff
 8000eec:	d00c      	beq.n	8000f08 <__eqsf2+0x38>
 8000eee:	2001      	movs	r0, #1
 8000ef0:	42a2      	cmp	r2, r4
 8000ef2:	d10a      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef4:	42b5      	cmp	r5, r6
 8000ef6:	d108      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	d00f      	beq.n	8000f1c <__eqsf2+0x4c>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d104      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f00:	0028      	movs	r0, r5
 8000f02:	1e43      	subs	r3, r0, #1
 8000f04:	4198      	sbcs	r0, r3
 8000f06:	e000      	b.n	8000f0a <__eqsf2+0x3a>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	2cff      	cmp	r4, #255	@ 0xff
 8000f10:	d1fb      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f12:	4335      	orrs	r5, r6
 8000f14:	d1f9      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f16:	404b      	eors	r3, r1
 8000f18:	0018      	movs	r0, r3
 8000f1a:	e7f6      	b.n	8000f0a <__eqsf2+0x3a>
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e7f4      	b.n	8000f0a <__eqsf2+0x3a>

08000f20 <__gesf2>:
 8000f20:	b530      	push	{r4, r5, lr}
 8000f22:	0042      	lsls	r2, r0, #1
 8000f24:	0244      	lsls	r4, r0, #9
 8000f26:	024d      	lsls	r5, r1, #9
 8000f28:	0fc3      	lsrs	r3, r0, #31
 8000f2a:	0048      	lsls	r0, r1, #1
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	0a6d      	lsrs	r5, r5, #9
 8000f32:	0e00      	lsrs	r0, r0, #24
 8000f34:	0fc9      	lsrs	r1, r1, #31
 8000f36:	2aff      	cmp	r2, #255	@ 0xff
 8000f38:	d018      	beq.n	8000f6c <__gesf2+0x4c>
 8000f3a:	28ff      	cmp	r0, #255	@ 0xff
 8000f3c:	d00a      	beq.n	8000f54 <__gesf2+0x34>
 8000f3e:	2a00      	cmp	r2, #0
 8000f40:	d11e      	bne.n	8000f80 <__gesf2+0x60>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d10a      	bne.n	8000f5c <__gesf2+0x3c>
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d029      	beq.n	8000f9e <__gesf2+0x7e>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d12d      	bne.n	8000faa <__gesf2+0x8a>
 8000f4e:	0048      	lsls	r0, r1, #1
 8000f50:	3801      	subs	r0, #1
 8000f52:	bd30      	pop	{r4, r5, pc}
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d125      	bne.n	8000fa4 <__gesf2+0x84>
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	d101      	bne.n	8000f60 <__gesf2+0x40>
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d0f6      	beq.n	8000f4e <__gesf2+0x2e>
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d019      	beq.n	8000f98 <__gesf2+0x78>
 8000f64:	2001      	movs	r0, #1
 8000f66:	425b      	negs	r3, r3
 8000f68:	4318      	orrs	r0, r3
 8000f6a:	e7f2      	b.n	8000f52 <__gesf2+0x32>
 8000f6c:	2c00      	cmp	r4, #0
 8000f6e:	d119      	bne.n	8000fa4 <__gesf2+0x84>
 8000f70:	28ff      	cmp	r0, #255	@ 0xff
 8000f72:	d1f7      	bne.n	8000f64 <__gesf2+0x44>
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d115      	bne.n	8000fa4 <__gesf2+0x84>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d1f2      	bne.n	8000f64 <__gesf2+0x44>
 8000f7e:	e7e8      	b.n	8000f52 <__gesf2+0x32>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d0ef      	beq.n	8000f64 <__gesf2+0x44>
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d1ed      	bne.n	8000f64 <__gesf2+0x44>
 8000f88:	4282      	cmp	r2, r0
 8000f8a:	dceb      	bgt.n	8000f64 <__gesf2+0x44>
 8000f8c:	db04      	blt.n	8000f98 <__gesf2+0x78>
 8000f8e:	42ac      	cmp	r4, r5
 8000f90:	d8e8      	bhi.n	8000f64 <__gesf2+0x44>
 8000f92:	2000      	movs	r0, #0
 8000f94:	42ac      	cmp	r4, r5
 8000f96:	d2dc      	bcs.n	8000f52 <__gesf2+0x32>
 8000f98:	0058      	lsls	r0, r3, #1
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7d9      	b.n	8000f52 <__gesf2+0x32>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d0d7      	beq.n	8000f52 <__gesf2+0x32>
 8000fa2:	e7df      	b.n	8000f64 <__gesf2+0x44>
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	4240      	negs	r0, r0
 8000fa8:	e7d3      	b.n	8000f52 <__gesf2+0x32>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d1da      	bne.n	8000f64 <__gesf2+0x44>
 8000fae:	e7ee      	b.n	8000f8e <__gesf2+0x6e>

08000fb0 <__lesf2>:
 8000fb0:	b530      	push	{r4, r5, lr}
 8000fb2:	0042      	lsls	r2, r0, #1
 8000fb4:	0244      	lsls	r4, r0, #9
 8000fb6:	024d      	lsls	r5, r1, #9
 8000fb8:	0fc3      	lsrs	r3, r0, #31
 8000fba:	0048      	lsls	r0, r1, #1
 8000fbc:	0a64      	lsrs	r4, r4, #9
 8000fbe:	0e12      	lsrs	r2, r2, #24
 8000fc0:	0a6d      	lsrs	r5, r5, #9
 8000fc2:	0e00      	lsrs	r0, r0, #24
 8000fc4:	0fc9      	lsrs	r1, r1, #31
 8000fc6:	2aff      	cmp	r2, #255	@ 0xff
 8000fc8:	d017      	beq.n	8000ffa <__lesf2+0x4a>
 8000fca:	28ff      	cmp	r0, #255	@ 0xff
 8000fcc:	d00a      	beq.n	8000fe4 <__lesf2+0x34>
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	d11b      	bne.n	800100a <__lesf2+0x5a>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d10a      	bne.n	8000fec <__lesf2+0x3c>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d01d      	beq.n	8001016 <__lesf2+0x66>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d12d      	bne.n	800103a <__lesf2+0x8a>
 8000fde:	0048      	lsls	r0, r1, #1
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e011      	b.n	8001008 <__lesf2+0x58>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d10e      	bne.n	8001006 <__lesf2+0x56>
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	d101      	bne.n	8000ff0 <__lesf2+0x40>
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d0f6      	beq.n	8000fde <__lesf2+0x2e>
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d10c      	bne.n	800100e <__lesf2+0x5e>
 8000ff4:	0058      	lsls	r0, r3, #1
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e006      	b.n	8001008 <__lesf2+0x58>
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	d103      	bne.n	8001006 <__lesf2+0x56>
 8000ffe:	28ff      	cmp	r0, #255	@ 0xff
 8001000:	d105      	bne.n	800100e <__lesf2+0x5e>
 8001002:	2d00      	cmp	r5, #0
 8001004:	d015      	beq.n	8001032 <__lesf2+0x82>
 8001006:	2002      	movs	r0, #2
 8001008:	bd30      	pop	{r4, r5, pc}
 800100a:	2800      	cmp	r0, #0
 800100c:	d106      	bne.n	800101c <__lesf2+0x6c>
 800100e:	2001      	movs	r0, #1
 8001010:	425b      	negs	r3, r3
 8001012:	4318      	orrs	r0, r3
 8001014:	e7f8      	b.n	8001008 <__lesf2+0x58>
 8001016:	2c00      	cmp	r4, #0
 8001018:	d0f6      	beq.n	8001008 <__lesf2+0x58>
 800101a:	e7f8      	b.n	800100e <__lesf2+0x5e>
 800101c:	428b      	cmp	r3, r1
 800101e:	d1f6      	bne.n	800100e <__lesf2+0x5e>
 8001020:	4282      	cmp	r2, r0
 8001022:	dcf4      	bgt.n	800100e <__lesf2+0x5e>
 8001024:	dbe6      	blt.n	8000ff4 <__lesf2+0x44>
 8001026:	42ac      	cmp	r4, r5
 8001028:	d8f1      	bhi.n	800100e <__lesf2+0x5e>
 800102a:	2000      	movs	r0, #0
 800102c:	42ac      	cmp	r4, r5
 800102e:	d2eb      	bcs.n	8001008 <__lesf2+0x58>
 8001030:	e7e0      	b.n	8000ff4 <__lesf2+0x44>
 8001032:	2000      	movs	r0, #0
 8001034:	428b      	cmp	r3, r1
 8001036:	d1ea      	bne.n	800100e <__lesf2+0x5e>
 8001038:	e7e6      	b.n	8001008 <__lesf2+0x58>
 800103a:	428b      	cmp	r3, r1
 800103c:	d1e7      	bne.n	800100e <__lesf2+0x5e>
 800103e:	e7f2      	b.n	8001026 <__lesf2+0x76>

08001040 <__aeabi_fmul>:
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	464f      	mov	r7, r9
 8001044:	4646      	mov	r6, r8
 8001046:	46d6      	mov	lr, sl
 8001048:	0044      	lsls	r4, r0, #1
 800104a:	b5c0      	push	{r6, r7, lr}
 800104c:	0246      	lsls	r6, r0, #9
 800104e:	1c0f      	adds	r7, r1, #0
 8001050:	0a76      	lsrs	r6, r6, #9
 8001052:	0e24      	lsrs	r4, r4, #24
 8001054:	0fc5      	lsrs	r5, r0, #31
 8001056:	2c00      	cmp	r4, #0
 8001058:	d100      	bne.n	800105c <__aeabi_fmul+0x1c>
 800105a:	e0da      	b.n	8001212 <__aeabi_fmul+0x1d2>
 800105c:	2cff      	cmp	r4, #255	@ 0xff
 800105e:	d074      	beq.n	800114a <__aeabi_fmul+0x10a>
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	00f6      	lsls	r6, r6, #3
 8001064:	04db      	lsls	r3, r3, #19
 8001066:	431e      	orrs	r6, r3
 8001068:	2300      	movs	r3, #0
 800106a:	4699      	mov	r9, r3
 800106c:	469a      	mov	sl, r3
 800106e:	3c7f      	subs	r4, #127	@ 0x7f
 8001070:	027b      	lsls	r3, r7, #9
 8001072:	0a5b      	lsrs	r3, r3, #9
 8001074:	4698      	mov	r8, r3
 8001076:	007b      	lsls	r3, r7, #1
 8001078:	0e1b      	lsrs	r3, r3, #24
 800107a:	0fff      	lsrs	r7, r7, #31
 800107c:	2b00      	cmp	r3, #0
 800107e:	d074      	beq.n	800116a <__aeabi_fmul+0x12a>
 8001080:	2bff      	cmp	r3, #255	@ 0xff
 8001082:	d100      	bne.n	8001086 <__aeabi_fmul+0x46>
 8001084:	e08e      	b.n	80011a4 <__aeabi_fmul+0x164>
 8001086:	4642      	mov	r2, r8
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	00d2      	lsls	r2, r2, #3
 800108c:	04c9      	lsls	r1, r1, #19
 800108e:	4311      	orrs	r1, r2
 8001090:	3b7f      	subs	r3, #127	@ 0x7f
 8001092:	002a      	movs	r2, r5
 8001094:	18e4      	adds	r4, r4, r3
 8001096:	464b      	mov	r3, r9
 8001098:	407a      	eors	r2, r7
 800109a:	4688      	mov	r8, r1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	2b0a      	cmp	r3, #10
 80010a0:	dc75      	bgt.n	800118e <__aeabi_fmul+0x14e>
 80010a2:	464b      	mov	r3, r9
 80010a4:	2000      	movs	r0, #0
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	dd0f      	ble.n	80010ca <__aeabi_fmul+0x8a>
 80010aa:	4649      	mov	r1, r9
 80010ac:	2301      	movs	r3, #1
 80010ae:	408b      	lsls	r3, r1
 80010b0:	21a6      	movs	r1, #166	@ 0xa6
 80010b2:	00c9      	lsls	r1, r1, #3
 80010b4:	420b      	tst	r3, r1
 80010b6:	d169      	bne.n	800118c <__aeabi_fmul+0x14c>
 80010b8:	2190      	movs	r1, #144	@ 0x90
 80010ba:	0089      	lsls	r1, r1, #2
 80010bc:	420b      	tst	r3, r1
 80010be:	d000      	beq.n	80010c2 <__aeabi_fmul+0x82>
 80010c0:	e100      	b.n	80012c4 <__aeabi_fmul+0x284>
 80010c2:	2188      	movs	r1, #136	@ 0x88
 80010c4:	4219      	tst	r1, r3
 80010c6:	d000      	beq.n	80010ca <__aeabi_fmul+0x8a>
 80010c8:	e0f5      	b.n	80012b6 <__aeabi_fmul+0x276>
 80010ca:	4641      	mov	r1, r8
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	0c09      	lsrs	r1, r1, #16
 80010d0:	4643      	mov	r3, r8
 80010d2:	0008      	movs	r0, r1
 80010d4:	0c35      	lsrs	r5, r6, #16
 80010d6:	0436      	lsls	r6, r6, #16
 80010d8:	0c1b      	lsrs	r3, r3, #16
 80010da:	0c36      	lsrs	r6, r6, #16
 80010dc:	4370      	muls	r0, r6
 80010de:	4369      	muls	r1, r5
 80010e0:	435e      	muls	r6, r3
 80010e2:	435d      	muls	r5, r3
 80010e4:	1876      	adds	r6, r6, r1
 80010e6:	0c03      	lsrs	r3, r0, #16
 80010e8:	199b      	adds	r3, r3, r6
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d903      	bls.n	80010f6 <__aeabi_fmul+0xb6>
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	0249      	lsls	r1, r1, #9
 80010f2:	468c      	mov	ip, r1
 80010f4:	4465      	add	r5, ip
 80010f6:	0400      	lsls	r0, r0, #16
 80010f8:	0419      	lsls	r1, r3, #16
 80010fa:	0c00      	lsrs	r0, r0, #16
 80010fc:	1809      	adds	r1, r1, r0
 80010fe:	018e      	lsls	r6, r1, #6
 8001100:	1e70      	subs	r0, r6, #1
 8001102:	4186      	sbcs	r6, r0
 8001104:	0c1b      	lsrs	r3, r3, #16
 8001106:	0e89      	lsrs	r1, r1, #26
 8001108:	195b      	adds	r3, r3, r5
 800110a:	430e      	orrs	r6, r1
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	431e      	orrs	r6, r3
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	d46c      	bmi.n	80011ee <__aeabi_fmul+0x1ae>
 8001114:	0023      	movs	r3, r4
 8001116:	337f      	adds	r3, #127	@ 0x7f
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_fmul+0xde>
 800111c:	e0b1      	b.n	8001282 <__aeabi_fmul+0x242>
 800111e:	0015      	movs	r5, r2
 8001120:	0771      	lsls	r1, r6, #29
 8001122:	d00b      	beq.n	800113c <__aeabi_fmul+0xfc>
 8001124:	200f      	movs	r0, #15
 8001126:	0021      	movs	r1, r4
 8001128:	4030      	ands	r0, r6
 800112a:	2804      	cmp	r0, #4
 800112c:	d006      	beq.n	800113c <__aeabi_fmul+0xfc>
 800112e:	3604      	adds	r6, #4
 8001130:	0132      	lsls	r2, r6, #4
 8001132:	d503      	bpl.n	800113c <__aeabi_fmul+0xfc>
 8001134:	4b6e      	ldr	r3, [pc, #440]	@ (80012f0 <__aeabi_fmul+0x2b0>)
 8001136:	401e      	ands	r6, r3
 8001138:	000b      	movs	r3, r1
 800113a:	3380      	adds	r3, #128	@ 0x80
 800113c:	2bfe      	cmp	r3, #254	@ 0xfe
 800113e:	dd00      	ble.n	8001142 <__aeabi_fmul+0x102>
 8001140:	e0bd      	b.n	80012be <__aeabi_fmul+0x27e>
 8001142:	01b2      	lsls	r2, r6, #6
 8001144:	0a52      	lsrs	r2, r2, #9
 8001146:	b2db      	uxtb	r3, r3
 8001148:	e048      	b.n	80011dc <__aeabi_fmul+0x19c>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fmul+0x110>
 800114e:	e092      	b.n	8001276 <__aeabi_fmul+0x236>
 8001150:	2308      	movs	r3, #8
 8001152:	4699      	mov	r9, r3
 8001154:	3b06      	subs	r3, #6
 8001156:	469a      	mov	sl, r3
 8001158:	027b      	lsls	r3, r7, #9
 800115a:	0a5b      	lsrs	r3, r3, #9
 800115c:	4698      	mov	r8, r3
 800115e:	007b      	lsls	r3, r7, #1
 8001160:	24ff      	movs	r4, #255	@ 0xff
 8001162:	0e1b      	lsrs	r3, r3, #24
 8001164:	0fff      	lsrs	r7, r7, #31
 8001166:	2b00      	cmp	r3, #0
 8001168:	d18a      	bne.n	8001080 <__aeabi_fmul+0x40>
 800116a:	4642      	mov	r2, r8
 800116c:	2a00      	cmp	r2, #0
 800116e:	d164      	bne.n	800123a <__aeabi_fmul+0x1fa>
 8001170:	4649      	mov	r1, r9
 8001172:	3201      	adds	r2, #1
 8001174:	4311      	orrs	r1, r2
 8001176:	4689      	mov	r9, r1
 8001178:	290a      	cmp	r1, #10
 800117a:	dc08      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800117c:	407d      	eors	r5, r7
 800117e:	2001      	movs	r0, #1
 8001180:	b2ea      	uxtb	r2, r5
 8001182:	2902      	cmp	r1, #2
 8001184:	dc91      	bgt.n	80010aa <__aeabi_fmul+0x6a>
 8001186:	0015      	movs	r5, r2
 8001188:	2200      	movs	r2, #0
 800118a:	e027      	b.n	80011dc <__aeabi_fmul+0x19c>
 800118c:	0015      	movs	r5, r2
 800118e:	4653      	mov	r3, sl
 8001190:	2b02      	cmp	r3, #2
 8001192:	d100      	bne.n	8001196 <__aeabi_fmul+0x156>
 8001194:	e093      	b.n	80012be <__aeabi_fmul+0x27e>
 8001196:	2b03      	cmp	r3, #3
 8001198:	d01a      	beq.n	80011d0 <__aeabi_fmul+0x190>
 800119a:	2b01      	cmp	r3, #1
 800119c:	d12c      	bne.n	80011f8 <__aeabi_fmul+0x1b8>
 800119e:	2300      	movs	r3, #0
 80011a0:	2200      	movs	r2, #0
 80011a2:	e01b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80011a4:	4643      	mov	r3, r8
 80011a6:	34ff      	adds	r4, #255	@ 0xff
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d055      	beq.n	8001258 <__aeabi_fmul+0x218>
 80011ac:	2103      	movs	r1, #3
 80011ae:	464b      	mov	r3, r9
 80011b0:	430b      	orrs	r3, r1
 80011b2:	0019      	movs	r1, r3
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	dc00      	bgt.n	80011ba <__aeabi_fmul+0x17a>
 80011b8:	e092      	b.n	80012e0 <__aeabi_fmul+0x2a0>
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d000      	beq.n	80011c0 <__aeabi_fmul+0x180>
 80011be:	e08c      	b.n	80012da <__aeabi_fmul+0x29a>
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	03d2      	lsls	r2, r2, #15
 80011c4:	4216      	tst	r6, r2
 80011c6:	d003      	beq.n	80011d0 <__aeabi_fmul+0x190>
 80011c8:	4643      	mov	r3, r8
 80011ca:	4213      	tst	r3, r2
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fmul+0x190>
 80011ce:	e07d      	b.n	80012cc <__aeabi_fmul+0x28c>
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	03d2      	lsls	r2, r2, #15
 80011d4:	4332      	orrs	r2, r6
 80011d6:	0252      	lsls	r2, r2, #9
 80011d8:	0a52      	lsrs	r2, r2, #9
 80011da:	23ff      	movs	r3, #255	@ 0xff
 80011dc:	05d8      	lsls	r0, r3, #23
 80011de:	07ed      	lsls	r5, r5, #31
 80011e0:	4310      	orrs	r0, r2
 80011e2:	4328      	orrs	r0, r5
 80011e4:	bce0      	pop	{r5, r6, r7}
 80011e6:	46ba      	mov	sl, r7
 80011e8:	46b1      	mov	r9, r6
 80011ea:	46a8      	mov	r8, r5
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	2301      	movs	r3, #1
 80011f0:	0015      	movs	r5, r2
 80011f2:	0871      	lsrs	r1, r6, #1
 80011f4:	401e      	ands	r6, r3
 80011f6:	430e      	orrs	r6, r1
 80011f8:	0023      	movs	r3, r4
 80011fa:	3380      	adds	r3, #128	@ 0x80
 80011fc:	1c61      	adds	r1, r4, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dd41      	ble.n	8001286 <__aeabi_fmul+0x246>
 8001202:	0772      	lsls	r2, r6, #29
 8001204:	d094      	beq.n	8001130 <__aeabi_fmul+0xf0>
 8001206:	220f      	movs	r2, #15
 8001208:	4032      	ands	r2, r6
 800120a:	2a04      	cmp	r2, #4
 800120c:	d000      	beq.n	8001210 <__aeabi_fmul+0x1d0>
 800120e:	e78e      	b.n	800112e <__aeabi_fmul+0xee>
 8001210:	e78e      	b.n	8001130 <__aeabi_fmul+0xf0>
 8001212:	2e00      	cmp	r6, #0
 8001214:	d105      	bne.n	8001222 <__aeabi_fmul+0x1e2>
 8001216:	2304      	movs	r3, #4
 8001218:	4699      	mov	r9, r3
 800121a:	3b03      	subs	r3, #3
 800121c:	2400      	movs	r4, #0
 800121e:	469a      	mov	sl, r3
 8001220:	e726      	b.n	8001070 <__aeabi_fmul+0x30>
 8001222:	0030      	movs	r0, r6
 8001224:	f002 fc00 	bl	8003a28 <__clzsi2>
 8001228:	2476      	movs	r4, #118	@ 0x76
 800122a:	1f43      	subs	r3, r0, #5
 800122c:	409e      	lsls	r6, r3
 800122e:	2300      	movs	r3, #0
 8001230:	4264      	negs	r4, r4
 8001232:	4699      	mov	r9, r3
 8001234:	469a      	mov	sl, r3
 8001236:	1a24      	subs	r4, r4, r0
 8001238:	e71a      	b.n	8001070 <__aeabi_fmul+0x30>
 800123a:	4640      	mov	r0, r8
 800123c:	f002 fbf4 	bl	8003a28 <__clzsi2>
 8001240:	464b      	mov	r3, r9
 8001242:	1a24      	subs	r4, r4, r0
 8001244:	3c76      	subs	r4, #118	@ 0x76
 8001246:	2b0a      	cmp	r3, #10
 8001248:	dca1      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800124a:	4643      	mov	r3, r8
 800124c:	3805      	subs	r0, #5
 800124e:	4083      	lsls	r3, r0
 8001250:	407d      	eors	r5, r7
 8001252:	4698      	mov	r8, r3
 8001254:	b2ea      	uxtb	r2, r5
 8001256:	e724      	b.n	80010a2 <__aeabi_fmul+0x62>
 8001258:	464a      	mov	r2, r9
 800125a:	3302      	adds	r3, #2
 800125c:	4313      	orrs	r3, r2
 800125e:	002a      	movs	r2, r5
 8001260:	407a      	eors	r2, r7
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	2b0a      	cmp	r3, #10
 8001266:	dc92      	bgt.n	800118e <__aeabi_fmul+0x14e>
 8001268:	4649      	mov	r1, r9
 800126a:	0015      	movs	r5, r2
 800126c:	2900      	cmp	r1, #0
 800126e:	d026      	beq.n	80012be <__aeabi_fmul+0x27e>
 8001270:	4699      	mov	r9, r3
 8001272:	2002      	movs	r0, #2
 8001274:	e719      	b.n	80010aa <__aeabi_fmul+0x6a>
 8001276:	230c      	movs	r3, #12
 8001278:	4699      	mov	r9, r3
 800127a:	3b09      	subs	r3, #9
 800127c:	24ff      	movs	r4, #255	@ 0xff
 800127e:	469a      	mov	sl, r3
 8001280:	e6f6      	b.n	8001070 <__aeabi_fmul+0x30>
 8001282:	0015      	movs	r5, r2
 8001284:	0021      	movs	r1, r4
 8001286:	2201      	movs	r2, #1
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b1b      	cmp	r3, #27
 800128c:	dd00      	ble.n	8001290 <__aeabi_fmul+0x250>
 800128e:	e786      	b.n	800119e <__aeabi_fmul+0x15e>
 8001290:	319e      	adds	r1, #158	@ 0x9e
 8001292:	0032      	movs	r2, r6
 8001294:	408e      	lsls	r6, r1
 8001296:	40da      	lsrs	r2, r3
 8001298:	1e73      	subs	r3, r6, #1
 800129a:	419e      	sbcs	r6, r3
 800129c:	4332      	orrs	r2, r6
 800129e:	0753      	lsls	r3, r2, #29
 80012a0:	d004      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012a2:	230f      	movs	r3, #15
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d000      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012aa:	3204      	adds	r2, #4
 80012ac:	0153      	lsls	r3, r2, #5
 80012ae:	d510      	bpl.n	80012d2 <__aeabi_fmul+0x292>
 80012b0:	2301      	movs	r3, #1
 80012b2:	2200      	movs	r2, #0
 80012b4:	e792      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012b6:	003d      	movs	r5, r7
 80012b8:	4646      	mov	r6, r8
 80012ba:	4682      	mov	sl, r0
 80012bc:	e767      	b.n	800118e <__aeabi_fmul+0x14e>
 80012be:	23ff      	movs	r3, #255	@ 0xff
 80012c0:	2200      	movs	r2, #0
 80012c2:	e78b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	2500      	movs	r5, #0
 80012c8:	03d2      	lsls	r2, r2, #15
 80012ca:	e786      	b.n	80011da <__aeabi_fmul+0x19a>
 80012cc:	003d      	movs	r5, r7
 80012ce:	431a      	orrs	r2, r3
 80012d0:	e783      	b.n	80011da <__aeabi_fmul+0x19a>
 80012d2:	0192      	lsls	r2, r2, #6
 80012d4:	2300      	movs	r3, #0
 80012d6:	0a52      	lsrs	r2, r2, #9
 80012d8:	e780      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012da:	003d      	movs	r5, r7
 80012dc:	4646      	mov	r6, r8
 80012de:	e777      	b.n	80011d0 <__aeabi_fmul+0x190>
 80012e0:	002a      	movs	r2, r5
 80012e2:	2301      	movs	r3, #1
 80012e4:	407a      	eors	r2, r7
 80012e6:	408b      	lsls	r3, r1
 80012e8:	2003      	movs	r0, #3
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	e6e9      	b.n	80010c2 <__aeabi_fmul+0x82>
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	f7ffffff 	.word	0xf7ffffff

080012f4 <__aeabi_fsub>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	4647      	mov	r7, r8
 80012f8:	46ce      	mov	lr, r9
 80012fa:	0243      	lsls	r3, r0, #9
 80012fc:	b580      	push	{r7, lr}
 80012fe:	0a5f      	lsrs	r7, r3, #9
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	0045      	lsls	r5, r0, #1
 8001304:	004a      	lsls	r2, r1, #1
 8001306:	469c      	mov	ip, r3
 8001308:	024b      	lsls	r3, r1, #9
 800130a:	0fc4      	lsrs	r4, r0, #31
 800130c:	0fce      	lsrs	r6, r1, #31
 800130e:	0e2d      	lsrs	r5, r5, #24
 8001310:	0a58      	lsrs	r0, r3, #9
 8001312:	0e12      	lsrs	r2, r2, #24
 8001314:	0999      	lsrs	r1, r3, #6
 8001316:	2aff      	cmp	r2, #255	@ 0xff
 8001318:	d06b      	beq.n	80013f2 <__aeabi_fsub+0xfe>
 800131a:	2301      	movs	r3, #1
 800131c:	405e      	eors	r6, r3
 800131e:	1aab      	subs	r3, r5, r2
 8001320:	42b4      	cmp	r4, r6
 8001322:	d04b      	beq.n	80013bc <__aeabi_fsub+0xc8>
 8001324:	2b00      	cmp	r3, #0
 8001326:	dc00      	bgt.n	800132a <__aeabi_fsub+0x36>
 8001328:	e0ff      	b.n	800152a <__aeabi_fsub+0x236>
 800132a:	2a00      	cmp	r2, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x3c>
 800132e:	e088      	b.n	8001442 <__aeabi_fsub+0x14e>
 8001330:	2dff      	cmp	r5, #255	@ 0xff
 8001332:	d100      	bne.n	8001336 <__aeabi_fsub+0x42>
 8001334:	e0ef      	b.n	8001516 <__aeabi_fsub+0x222>
 8001336:	2280      	movs	r2, #128	@ 0x80
 8001338:	04d2      	lsls	r2, r2, #19
 800133a:	4311      	orrs	r1, r2
 800133c:	2001      	movs	r0, #1
 800133e:	2b1b      	cmp	r3, #27
 8001340:	dc08      	bgt.n	8001354 <__aeabi_fsub+0x60>
 8001342:	0008      	movs	r0, r1
 8001344:	2220      	movs	r2, #32
 8001346:	40d8      	lsrs	r0, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4099      	lsls	r1, r3
 800134c:	000b      	movs	r3, r1
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	4193      	sbcs	r3, r2
 8001352:	4318      	orrs	r0, r3
 8001354:	4663      	mov	r3, ip
 8001356:	1a1b      	subs	r3, r3, r0
 8001358:	469c      	mov	ip, r3
 800135a:	4663      	mov	r3, ip
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	d400      	bmi.n	8001362 <__aeabi_fsub+0x6e>
 8001360:	e0cd      	b.n	80014fe <__aeabi_fsub+0x20a>
 8001362:	4663      	mov	r3, ip
 8001364:	019f      	lsls	r7, r3, #6
 8001366:	09bf      	lsrs	r7, r7, #6
 8001368:	0038      	movs	r0, r7
 800136a:	f002 fb5d 	bl	8003a28 <__clzsi2>
 800136e:	003b      	movs	r3, r7
 8001370:	3805      	subs	r0, #5
 8001372:	4083      	lsls	r3, r0
 8001374:	4285      	cmp	r5, r0
 8001376:	dc00      	bgt.n	800137a <__aeabi_fsub+0x86>
 8001378:	e0a2      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800137a:	4ab7      	ldr	r2, [pc, #732]	@ (8001658 <__aeabi_fsub+0x364>)
 800137c:	1a2d      	subs	r5, r5, r0
 800137e:	401a      	ands	r2, r3
 8001380:	4694      	mov	ip, r2
 8001382:	075a      	lsls	r2, r3, #29
 8001384:	d100      	bne.n	8001388 <__aeabi_fsub+0x94>
 8001386:	e0c3      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001388:	220f      	movs	r2, #15
 800138a:	4013      	ands	r3, r2
 800138c:	2b04      	cmp	r3, #4
 800138e:	d100      	bne.n	8001392 <__aeabi_fsub+0x9e>
 8001390:	e0be      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001392:	2304      	movs	r3, #4
 8001394:	4698      	mov	r8, r3
 8001396:	44c4      	add	ip, r8
 8001398:	4663      	mov	r3, ip
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	d400      	bmi.n	80013a0 <__aeabi_fsub+0xac>
 800139e:	e0b7      	b.n	8001510 <__aeabi_fsub+0x21c>
 80013a0:	1c68      	adds	r0, r5, #1
 80013a2:	2dfe      	cmp	r5, #254	@ 0xfe
 80013a4:	d000      	beq.n	80013a8 <__aeabi_fsub+0xb4>
 80013a6:	e0a5      	b.n	80014f4 <__aeabi_fsub+0x200>
 80013a8:	20ff      	movs	r0, #255	@ 0xff
 80013aa:	2200      	movs	r2, #0
 80013ac:	05c0      	lsls	r0, r0, #23
 80013ae:	4310      	orrs	r0, r2
 80013b0:	07e4      	lsls	r4, r4, #31
 80013b2:	4320      	orrs	r0, r4
 80013b4:	bcc0      	pop	{r6, r7}
 80013b6:	46b9      	mov	r9, r7
 80013b8:	46b0      	mov	r8, r6
 80013ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_fsub+0xce>
 80013c0:	e1eb      	b.n	800179a <__aeabi_fsub+0x4a6>
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	d046      	beq.n	8001454 <__aeabi_fsub+0x160>
 80013c6:	2dff      	cmp	r5, #255	@ 0xff
 80013c8:	d100      	bne.n	80013cc <__aeabi_fsub+0xd8>
 80013ca:	e0a4      	b.n	8001516 <__aeabi_fsub+0x222>
 80013cc:	2280      	movs	r2, #128	@ 0x80
 80013ce:	04d2      	lsls	r2, r2, #19
 80013d0:	4311      	orrs	r1, r2
 80013d2:	2b1b      	cmp	r3, #27
 80013d4:	dc00      	bgt.n	80013d8 <__aeabi_fsub+0xe4>
 80013d6:	e0fb      	b.n	80015d0 <__aeabi_fsub+0x2dc>
 80013d8:	2305      	movs	r3, #5
 80013da:	4698      	mov	r8, r3
 80013dc:	002b      	movs	r3, r5
 80013de:	44c4      	add	ip, r8
 80013e0:	4662      	mov	r2, ip
 80013e2:	08d7      	lsrs	r7, r2, #3
 80013e4:	2bff      	cmp	r3, #255	@ 0xff
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0xf6>
 80013e8:	e095      	b.n	8001516 <__aeabi_fsub+0x222>
 80013ea:	027a      	lsls	r2, r7, #9
 80013ec:	0a52      	lsrs	r2, r2, #9
 80013ee:	b2d8      	uxtb	r0, r3
 80013f0:	e7dc      	b.n	80013ac <__aeabi_fsub+0xb8>
 80013f2:	002b      	movs	r3, r5
 80013f4:	3bff      	subs	r3, #255	@ 0xff
 80013f6:	4699      	mov	r9, r3
 80013f8:	2900      	cmp	r1, #0
 80013fa:	d118      	bne.n	800142e <__aeabi_fsub+0x13a>
 80013fc:	2301      	movs	r3, #1
 80013fe:	405e      	eors	r6, r3
 8001400:	42b4      	cmp	r4, r6
 8001402:	d100      	bne.n	8001406 <__aeabi_fsub+0x112>
 8001404:	e0ca      	b.n	800159c <__aeabi_fsub+0x2a8>
 8001406:	464b      	mov	r3, r9
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02d      	beq.n	8001468 <__aeabi_fsub+0x174>
 800140c:	2d00      	cmp	r5, #0
 800140e:	d000      	beq.n	8001412 <__aeabi_fsub+0x11e>
 8001410:	e13c      	b.n	800168c <__aeabi_fsub+0x398>
 8001412:	23ff      	movs	r3, #255	@ 0xff
 8001414:	4664      	mov	r4, ip
 8001416:	2c00      	cmp	r4, #0
 8001418:	d100      	bne.n	800141c <__aeabi_fsub+0x128>
 800141a:	e15f      	b.n	80016dc <__aeabi_fsub+0x3e8>
 800141c:	1e5d      	subs	r5, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d100      	bne.n	8001424 <__aeabi_fsub+0x130>
 8001422:	e174      	b.n	800170e <__aeabi_fsub+0x41a>
 8001424:	0034      	movs	r4, r6
 8001426:	2bff      	cmp	r3, #255	@ 0xff
 8001428:	d074      	beq.n	8001514 <__aeabi_fsub+0x220>
 800142a:	002b      	movs	r3, r5
 800142c:	e103      	b.n	8001636 <__aeabi_fsub+0x342>
 800142e:	42b4      	cmp	r4, r6
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x140>
 8001432:	e09c      	b.n	800156e <__aeabi_fsub+0x27a>
 8001434:	2b00      	cmp	r3, #0
 8001436:	d017      	beq.n	8001468 <__aeabi_fsub+0x174>
 8001438:	2d00      	cmp	r5, #0
 800143a:	d0ea      	beq.n	8001412 <__aeabi_fsub+0x11e>
 800143c:	0007      	movs	r7, r0
 800143e:	0034      	movs	r4, r6
 8001440:	e06c      	b.n	800151c <__aeabi_fsub+0x228>
 8001442:	2900      	cmp	r1, #0
 8001444:	d0cc      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d02b      	beq.n	80014a4 <__aeabi_fsub+0x1b0>
 800144c:	2bff      	cmp	r3, #255	@ 0xff
 800144e:	d062      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001450:	0013      	movs	r3, r2
 8001452:	e773      	b.n	800133c <__aeabi_fsub+0x48>
 8001454:	2900      	cmp	r1, #0
 8001456:	d0c3      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	d100      	bne.n	8001460 <__aeabi_fsub+0x16c>
 800145e:	e11e      	b.n	800169e <__aeabi_fsub+0x3aa>
 8001460:	2bff      	cmp	r3, #255	@ 0xff
 8001462:	d058      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001464:	0013      	movs	r3, r2
 8001466:	e7b4      	b.n	80013d2 <__aeabi_fsub+0xde>
 8001468:	22fe      	movs	r2, #254	@ 0xfe
 800146a:	1c6b      	adds	r3, r5, #1
 800146c:	421a      	tst	r2, r3
 800146e:	d10d      	bne.n	800148c <__aeabi_fsub+0x198>
 8001470:	2d00      	cmp	r5, #0
 8001472:	d060      	beq.n	8001536 <__aeabi_fsub+0x242>
 8001474:	4663      	mov	r3, ip
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <__aeabi_fsub+0x188>
 800147a:	e120      	b.n	80016be <__aeabi_fsub+0x3ca>
 800147c:	2900      	cmp	r1, #0
 800147e:	d000      	beq.n	8001482 <__aeabi_fsub+0x18e>
 8001480:	e128      	b.n	80016d4 <__aeabi_fsub+0x3e0>
 8001482:	2280      	movs	r2, #128	@ 0x80
 8001484:	2400      	movs	r4, #0
 8001486:	20ff      	movs	r0, #255	@ 0xff
 8001488:	03d2      	lsls	r2, r2, #15
 800148a:	e78f      	b.n	80013ac <__aeabi_fsub+0xb8>
 800148c:	4663      	mov	r3, ip
 800148e:	1a5f      	subs	r7, r3, r1
 8001490:	017b      	lsls	r3, r7, #5
 8001492:	d500      	bpl.n	8001496 <__aeabi_fsub+0x1a2>
 8001494:	e0fe      	b.n	8001694 <__aeabi_fsub+0x3a0>
 8001496:	2f00      	cmp	r7, #0
 8001498:	d000      	beq.n	800149c <__aeabi_fsub+0x1a8>
 800149a:	e765      	b.n	8001368 <__aeabi_fsub+0x74>
 800149c:	2400      	movs	r4, #0
 800149e:	2000      	movs	r0, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	e783      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014a4:	4663      	mov	r3, ip
 80014a6:	1a59      	subs	r1, r3, r1
 80014a8:	014b      	lsls	r3, r1, #5
 80014aa:	d400      	bmi.n	80014ae <__aeabi_fsub+0x1ba>
 80014ac:	e119      	b.n	80016e2 <__aeabi_fsub+0x3ee>
 80014ae:	018f      	lsls	r7, r1, #6
 80014b0:	09bf      	lsrs	r7, r7, #6
 80014b2:	0038      	movs	r0, r7
 80014b4:	f002 fab8 	bl	8003a28 <__clzsi2>
 80014b8:	003b      	movs	r3, r7
 80014ba:	3805      	subs	r0, #5
 80014bc:	4083      	lsls	r3, r0
 80014be:	2501      	movs	r5, #1
 80014c0:	2220      	movs	r2, #32
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	3001      	adds	r0, #1
 80014c6:	1a12      	subs	r2, r2, r0
 80014c8:	0019      	movs	r1, r3
 80014ca:	4093      	lsls	r3, r2
 80014cc:	40c1      	lsrs	r1, r0
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	4193      	sbcs	r3, r2
 80014d2:	4319      	orrs	r1, r3
 80014d4:	468c      	mov	ip, r1
 80014d6:	1e0b      	subs	r3, r1, #0
 80014d8:	d0e1      	beq.n	800149e <__aeabi_fsub+0x1aa>
 80014da:	075b      	lsls	r3, r3, #29
 80014dc:	d100      	bne.n	80014e0 <__aeabi_fsub+0x1ec>
 80014de:	e152      	b.n	8001786 <__aeabi_fsub+0x492>
 80014e0:	230f      	movs	r3, #15
 80014e2:	2500      	movs	r5, #0
 80014e4:	400b      	ands	r3, r1
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d000      	beq.n	80014ec <__aeabi_fsub+0x1f8>
 80014ea:	e752      	b.n	8001392 <__aeabi_fsub+0x9e>
 80014ec:	2001      	movs	r0, #1
 80014ee:	014a      	lsls	r2, r1, #5
 80014f0:	d400      	bmi.n	80014f4 <__aeabi_fsub+0x200>
 80014f2:	e092      	b.n	800161a <__aeabi_fsub+0x326>
 80014f4:	b2c0      	uxtb	r0, r0
 80014f6:	4663      	mov	r3, ip
 80014f8:	019a      	lsls	r2, r3, #6
 80014fa:	0a52      	lsrs	r2, r2, #9
 80014fc:	e756      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014fe:	4663      	mov	r3, ip
 8001500:	075b      	lsls	r3, r3, #29
 8001502:	d005      	beq.n	8001510 <__aeabi_fsub+0x21c>
 8001504:	230f      	movs	r3, #15
 8001506:	4662      	mov	r2, ip
 8001508:	4013      	ands	r3, r2
 800150a:	2b04      	cmp	r3, #4
 800150c:	d000      	beq.n	8001510 <__aeabi_fsub+0x21c>
 800150e:	e740      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001510:	002b      	movs	r3, r5
 8001512:	e765      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001514:	0007      	movs	r7, r0
 8001516:	2f00      	cmp	r7, #0
 8001518:	d100      	bne.n	800151c <__aeabi_fsub+0x228>
 800151a:	e745      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	03d2      	lsls	r2, r2, #15
 8001520:	433a      	orrs	r2, r7
 8001522:	0252      	lsls	r2, r2, #9
 8001524:	20ff      	movs	r0, #255	@ 0xff
 8001526:	0a52      	lsrs	r2, r2, #9
 8001528:	e740      	b.n	80013ac <__aeabi_fsub+0xb8>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d179      	bne.n	8001622 <__aeabi_fsub+0x32e>
 800152e:	22fe      	movs	r2, #254	@ 0xfe
 8001530:	1c6b      	adds	r3, r5, #1
 8001532:	421a      	tst	r2, r3
 8001534:	d1aa      	bne.n	800148c <__aeabi_fsub+0x198>
 8001536:	4663      	mov	r3, ip
 8001538:	2b00      	cmp	r3, #0
 800153a:	d100      	bne.n	800153e <__aeabi_fsub+0x24a>
 800153c:	e0f5      	b.n	800172a <__aeabi_fsub+0x436>
 800153e:	2900      	cmp	r1, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_fsub+0x250>
 8001542:	e0d1      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 8001544:	1a5f      	subs	r7, r3, r1
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	04db      	lsls	r3, r3, #19
 800154a:	421f      	tst	r7, r3
 800154c:	d100      	bne.n	8001550 <__aeabi_fsub+0x25c>
 800154e:	e10e      	b.n	800176e <__aeabi_fsub+0x47a>
 8001550:	4662      	mov	r2, ip
 8001552:	2401      	movs	r4, #1
 8001554:	1a8a      	subs	r2, r1, r2
 8001556:	4694      	mov	ip, r2
 8001558:	2000      	movs	r0, #0
 800155a:	4034      	ands	r4, r6
 800155c:	2a00      	cmp	r2, #0
 800155e:	d100      	bne.n	8001562 <__aeabi_fsub+0x26e>
 8001560:	e724      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001562:	2001      	movs	r0, #1
 8001564:	421a      	tst	r2, r3
 8001566:	d1c6      	bne.n	80014f6 <__aeabi_fsub+0x202>
 8001568:	2300      	movs	r3, #0
 800156a:	08d7      	lsrs	r7, r2, #3
 800156c:	e73d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d017      	beq.n	80015a2 <__aeabi_fsub+0x2ae>
 8001572:	2d00      	cmp	r5, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_fsub+0x284>
 8001576:	e0af      	b.n	80016d8 <__aeabi_fsub+0x3e4>
 8001578:	23ff      	movs	r3, #255	@ 0xff
 800157a:	4665      	mov	r5, ip
 800157c:	2d00      	cmp	r5, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_fsub+0x28e>
 8001580:	e0ad      	b.n	80016de <__aeabi_fsub+0x3ea>
 8001582:	1e5e      	subs	r6, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d100      	bne.n	800158a <__aeabi_fsub+0x296>
 8001588:	e089      	b.n	800169e <__aeabi_fsub+0x3aa>
 800158a:	2bff      	cmp	r3, #255	@ 0xff
 800158c:	d0c2      	beq.n	8001514 <__aeabi_fsub+0x220>
 800158e:	2e1b      	cmp	r6, #27
 8001590:	dc00      	bgt.n	8001594 <__aeabi_fsub+0x2a0>
 8001592:	e0ab      	b.n	80016ec <__aeabi_fsub+0x3f8>
 8001594:	1d4b      	adds	r3, r1, #5
 8001596:	469c      	mov	ip, r3
 8001598:	0013      	movs	r3, r2
 800159a:	e721      	b.n	80013e0 <__aeabi_fsub+0xec>
 800159c:	464b      	mov	r3, r9
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d170      	bne.n	8001684 <__aeabi_fsub+0x390>
 80015a2:	22fe      	movs	r2, #254	@ 0xfe
 80015a4:	1c6b      	adds	r3, r5, #1
 80015a6:	421a      	tst	r2, r3
 80015a8:	d15e      	bne.n	8001668 <__aeabi_fsub+0x374>
 80015aa:	2d00      	cmp	r5, #0
 80015ac:	d000      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 80015ae:	e0c3      	b.n	8001738 <__aeabi_fsub+0x444>
 80015b0:	4663      	mov	r3, ip
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_fsub+0x2c4>
 80015b6:	e0d0      	b.n	800175a <__aeabi_fsub+0x466>
 80015b8:	2900      	cmp	r1, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_fsub+0x2ca>
 80015bc:	e094      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 80015be:	000a      	movs	r2, r1
 80015c0:	4462      	add	r2, ip
 80015c2:	0153      	lsls	r3, r2, #5
 80015c4:	d400      	bmi.n	80015c8 <__aeabi_fsub+0x2d4>
 80015c6:	e0d8      	b.n	800177a <__aeabi_fsub+0x486>
 80015c8:	0192      	lsls	r2, r2, #6
 80015ca:	2001      	movs	r0, #1
 80015cc:	0a52      	lsrs	r2, r2, #9
 80015ce:	e6ed      	b.n	80013ac <__aeabi_fsub+0xb8>
 80015d0:	0008      	movs	r0, r1
 80015d2:	2220      	movs	r2, #32
 80015d4:	40d8      	lsrs	r0, r3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4099      	lsls	r1, r3
 80015da:	000b      	movs	r3, r1
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	4193      	sbcs	r3, r2
 80015e0:	4303      	orrs	r3, r0
 80015e2:	449c      	add	ip, r3
 80015e4:	4663      	mov	r3, ip
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	d589      	bpl.n	80014fe <__aeabi_fsub+0x20a>
 80015ea:	3501      	adds	r5, #1
 80015ec:	2dff      	cmp	r5, #255	@ 0xff
 80015ee:	d100      	bne.n	80015f2 <__aeabi_fsub+0x2fe>
 80015f0:	e6da      	b.n	80013a8 <__aeabi_fsub+0xb4>
 80015f2:	4662      	mov	r2, ip
 80015f4:	2301      	movs	r3, #1
 80015f6:	4919      	ldr	r1, [pc, #100]	@ (800165c <__aeabi_fsub+0x368>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	0852      	lsrs	r2, r2, #1
 80015fc:	400a      	ands	r2, r1
 80015fe:	431a      	orrs	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	4694      	mov	ip, r2
 8001604:	075b      	lsls	r3, r3, #29
 8001606:	d004      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001608:	230f      	movs	r3, #15
 800160a:	4013      	ands	r3, r2
 800160c:	2b04      	cmp	r3, #4
 800160e:	d000      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001610:	e6bf      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001612:	4663      	mov	r3, ip
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	d500      	bpl.n	800161a <__aeabi_fsub+0x326>
 8001618:	e6c2      	b.n	80013a0 <__aeabi_fsub+0xac>
 800161a:	4663      	mov	r3, ip
 800161c:	08df      	lsrs	r7, r3, #3
 800161e:	002b      	movs	r3, r5
 8001620:	e6e3      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001622:	1b53      	subs	r3, r2, r5
 8001624:	2d00      	cmp	r5, #0
 8001626:	d100      	bne.n	800162a <__aeabi_fsub+0x336>
 8001628:	e6f4      	b.n	8001414 <__aeabi_fsub+0x120>
 800162a:	2080      	movs	r0, #128	@ 0x80
 800162c:	4664      	mov	r4, ip
 800162e:	04c0      	lsls	r0, r0, #19
 8001630:	4304      	orrs	r4, r0
 8001632:	46a4      	mov	ip, r4
 8001634:	0034      	movs	r4, r6
 8001636:	2001      	movs	r0, #1
 8001638:	2b1b      	cmp	r3, #27
 800163a:	dc09      	bgt.n	8001650 <__aeabi_fsub+0x35c>
 800163c:	2520      	movs	r5, #32
 800163e:	4660      	mov	r0, ip
 8001640:	40d8      	lsrs	r0, r3
 8001642:	1aeb      	subs	r3, r5, r3
 8001644:	4665      	mov	r5, ip
 8001646:	409d      	lsls	r5, r3
 8001648:	002b      	movs	r3, r5
 800164a:	1e5d      	subs	r5, r3, #1
 800164c:	41ab      	sbcs	r3, r5
 800164e:	4318      	orrs	r0, r3
 8001650:	1a0b      	subs	r3, r1, r0
 8001652:	469c      	mov	ip, r3
 8001654:	0015      	movs	r5, r2
 8001656:	e680      	b.n	800135a <__aeabi_fsub+0x66>
 8001658:	fbffffff 	.word	0xfbffffff
 800165c:	7dffffff 	.word	0x7dffffff
 8001660:	22fe      	movs	r2, #254	@ 0xfe
 8001662:	1c6b      	adds	r3, r5, #1
 8001664:	4213      	tst	r3, r2
 8001666:	d0a3      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 8001668:	2bff      	cmp	r3, #255	@ 0xff
 800166a:	d100      	bne.n	800166e <__aeabi_fsub+0x37a>
 800166c:	e69c      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800166e:	4461      	add	r1, ip
 8001670:	0849      	lsrs	r1, r1, #1
 8001672:	074a      	lsls	r2, r1, #29
 8001674:	d049      	beq.n	800170a <__aeabi_fsub+0x416>
 8001676:	220f      	movs	r2, #15
 8001678:	400a      	ands	r2, r1
 800167a:	2a04      	cmp	r2, #4
 800167c:	d045      	beq.n	800170a <__aeabi_fsub+0x416>
 800167e:	1d0a      	adds	r2, r1, #4
 8001680:	4694      	mov	ip, r2
 8001682:	e6ad      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001684:	2d00      	cmp	r5, #0
 8001686:	d100      	bne.n	800168a <__aeabi_fsub+0x396>
 8001688:	e776      	b.n	8001578 <__aeabi_fsub+0x284>
 800168a:	e68d      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800168c:	0034      	movs	r4, r6
 800168e:	20ff      	movs	r0, #255	@ 0xff
 8001690:	2200      	movs	r2, #0
 8001692:	e68b      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001694:	4663      	mov	r3, ip
 8001696:	2401      	movs	r4, #1
 8001698:	1acf      	subs	r7, r1, r3
 800169a:	4034      	ands	r4, r6
 800169c:	e664      	b.n	8001368 <__aeabi_fsub+0x74>
 800169e:	4461      	add	r1, ip
 80016a0:	014b      	lsls	r3, r1, #5
 80016a2:	d56d      	bpl.n	8001780 <__aeabi_fsub+0x48c>
 80016a4:	0848      	lsrs	r0, r1, #1
 80016a6:	4944      	ldr	r1, [pc, #272]	@ (80017b8 <__aeabi_fsub+0x4c4>)
 80016a8:	4001      	ands	r1, r0
 80016aa:	0743      	lsls	r3, r0, #29
 80016ac:	d02c      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016ae:	230f      	movs	r3, #15
 80016b0:	4003      	ands	r3, r0
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d028      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016b6:	1d0b      	adds	r3, r1, #4
 80016b8:	469c      	mov	ip, r3
 80016ba:	2302      	movs	r3, #2
 80016bc:	e690      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016be:	2900      	cmp	r1, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_fsub+0x3d0>
 80016c2:	e72b      	b.n	800151c <__aeabi_fsub+0x228>
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	03db      	lsls	r3, r3, #15
 80016c8:	429f      	cmp	r7, r3
 80016ca:	d200      	bcs.n	80016ce <__aeabi_fsub+0x3da>
 80016cc:	e726      	b.n	800151c <__aeabi_fsub+0x228>
 80016ce:	4298      	cmp	r0, r3
 80016d0:	d300      	bcc.n	80016d4 <__aeabi_fsub+0x3e0>
 80016d2:	e723      	b.n	800151c <__aeabi_fsub+0x228>
 80016d4:	2401      	movs	r4, #1
 80016d6:	4034      	ands	r4, r6
 80016d8:	0007      	movs	r7, r0
 80016da:	e71f      	b.n	800151c <__aeabi_fsub+0x228>
 80016dc:	0034      	movs	r4, r6
 80016de:	468c      	mov	ip, r1
 80016e0:	e67e      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016e2:	2301      	movs	r3, #1
 80016e4:	08cf      	lsrs	r7, r1, #3
 80016e6:	e680      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e67e      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016ec:	2020      	movs	r0, #32
 80016ee:	4665      	mov	r5, ip
 80016f0:	1b80      	subs	r0, r0, r6
 80016f2:	4085      	lsls	r5, r0
 80016f4:	4663      	mov	r3, ip
 80016f6:	0028      	movs	r0, r5
 80016f8:	40f3      	lsrs	r3, r6
 80016fa:	1e45      	subs	r5, r0, #1
 80016fc:	41a8      	sbcs	r0, r5
 80016fe:	4303      	orrs	r3, r0
 8001700:	469c      	mov	ip, r3
 8001702:	0015      	movs	r5, r2
 8001704:	448c      	add	ip, r1
 8001706:	e76d      	b.n	80015e4 <__aeabi_fsub+0x2f0>
 8001708:	2302      	movs	r3, #2
 800170a:	08cf      	lsrs	r7, r1, #3
 800170c:	e66d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800170e:	1b0f      	subs	r7, r1, r4
 8001710:	017b      	lsls	r3, r7, #5
 8001712:	d528      	bpl.n	8001766 <__aeabi_fsub+0x472>
 8001714:	01bf      	lsls	r7, r7, #6
 8001716:	09bf      	lsrs	r7, r7, #6
 8001718:	0038      	movs	r0, r7
 800171a:	f002 f985 	bl	8003a28 <__clzsi2>
 800171e:	003b      	movs	r3, r7
 8001720:	3805      	subs	r0, #5
 8001722:	4083      	lsls	r3, r0
 8001724:	0034      	movs	r4, r6
 8001726:	2501      	movs	r5, #1
 8001728:	e6ca      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800172a:	2900      	cmp	r1, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_fsub+0x43c>
 800172e:	e6b5      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001730:	2401      	movs	r4, #1
 8001732:	0007      	movs	r7, r0
 8001734:	4034      	ands	r4, r6
 8001736:	e658      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001738:	4663      	mov	r3, ip
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <__aeabi_fsub+0x44c>
 800173e:	e6e9      	b.n	8001514 <__aeabi_fsub+0x220>
 8001740:	2900      	cmp	r1, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_fsub+0x452>
 8001744:	e6ea      	b.n	800151c <__aeabi_fsub+0x228>
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	03db      	lsls	r3, r3, #15
 800174a:	429f      	cmp	r7, r3
 800174c:	d200      	bcs.n	8001750 <__aeabi_fsub+0x45c>
 800174e:	e6e5      	b.n	800151c <__aeabi_fsub+0x228>
 8001750:	4298      	cmp	r0, r3
 8001752:	d300      	bcc.n	8001756 <__aeabi_fsub+0x462>
 8001754:	e6e2      	b.n	800151c <__aeabi_fsub+0x228>
 8001756:	0007      	movs	r7, r0
 8001758:	e6e0      	b.n	800151c <__aeabi_fsub+0x228>
 800175a:	2900      	cmp	r1, #0
 800175c:	d100      	bne.n	8001760 <__aeabi_fsub+0x46c>
 800175e:	e69e      	b.n	800149e <__aeabi_fsub+0x1aa>
 8001760:	2300      	movs	r3, #0
 8001762:	08cf      	lsrs	r7, r1, #3
 8001764:	e641      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001766:	0034      	movs	r4, r6
 8001768:	2301      	movs	r3, #1
 800176a:	08ff      	lsrs	r7, r7, #3
 800176c:	e63d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800176e:	2f00      	cmp	r7, #0
 8001770:	d100      	bne.n	8001774 <__aeabi_fsub+0x480>
 8001772:	e693      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001774:	2300      	movs	r3, #0
 8001776:	08ff      	lsrs	r7, r7, #3
 8001778:	e637      	b.n	80013ea <__aeabi_fsub+0xf6>
 800177a:	2300      	movs	r3, #0
 800177c:	08d7      	lsrs	r7, r2, #3
 800177e:	e634      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001780:	2301      	movs	r3, #1
 8001782:	08cf      	lsrs	r7, r1, #3
 8001784:	e631      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	000b      	movs	r3, r1
 800178a:	04d2      	lsls	r2, r2, #19
 800178c:	2001      	movs	r0, #1
 800178e:	4013      	ands	r3, r2
 8001790:	4211      	tst	r1, r2
 8001792:	d000      	beq.n	8001796 <__aeabi_fsub+0x4a2>
 8001794:	e6ae      	b.n	80014f4 <__aeabi_fsub+0x200>
 8001796:	08cf      	lsrs	r7, r1, #3
 8001798:	e627      	b.n	80013ea <__aeabi_fsub+0xf6>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <__aeabi_fsub+0x4ac>
 800179e:	e75f      	b.n	8001660 <__aeabi_fsub+0x36c>
 80017a0:	1b56      	subs	r6, r2, r5
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d101      	bne.n	80017aa <__aeabi_fsub+0x4b6>
 80017a6:	0033      	movs	r3, r6
 80017a8:	e6e7      	b.n	800157a <__aeabi_fsub+0x286>
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	4660      	mov	r0, ip
 80017ae:	04db      	lsls	r3, r3, #19
 80017b0:	4318      	orrs	r0, r3
 80017b2:	4684      	mov	ip, r0
 80017b4:	e6eb      	b.n	800158e <__aeabi_fsub+0x29a>
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	7dffffff 	.word	0x7dffffff

080017bc <__aeabi_fcmpun>:
 80017bc:	0243      	lsls	r3, r0, #9
 80017be:	024a      	lsls	r2, r1, #9
 80017c0:	0040      	lsls	r0, r0, #1
 80017c2:	0049      	lsls	r1, r1, #1
 80017c4:	0a5b      	lsrs	r3, r3, #9
 80017c6:	0a52      	lsrs	r2, r2, #9
 80017c8:	0e09      	lsrs	r1, r1, #24
 80017ca:	0e00      	lsrs	r0, r0, #24
 80017cc:	28ff      	cmp	r0, #255	@ 0xff
 80017ce:	d006      	beq.n	80017de <__aeabi_fcmpun+0x22>
 80017d0:	2000      	movs	r0, #0
 80017d2:	29ff      	cmp	r1, #255	@ 0xff
 80017d4:	d102      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017d6:	1e53      	subs	r3, r2, #1
 80017d8:	419a      	sbcs	r2, r3
 80017da:	0010      	movs	r0, r2
 80017dc:	4770      	bx	lr
 80017de:	38fe      	subs	r0, #254	@ 0xfe
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1fb      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017e4:	e7f4      	b.n	80017d0 <__aeabi_fcmpun+0x14>
 80017e6:	46c0      	nop			@ (mov r8, r8)

080017e8 <__aeabi_f2iz>:
 80017e8:	0241      	lsls	r1, r0, #9
 80017ea:	0042      	lsls	r2, r0, #1
 80017ec:	0fc3      	lsrs	r3, r0, #31
 80017ee:	0a49      	lsrs	r1, r1, #9
 80017f0:	2000      	movs	r0, #0
 80017f2:	0e12      	lsrs	r2, r2, #24
 80017f4:	2a7e      	cmp	r2, #126	@ 0x7e
 80017f6:	dd03      	ble.n	8001800 <__aeabi_f2iz+0x18>
 80017f8:	2a9d      	cmp	r2, #157	@ 0x9d
 80017fa:	dd02      	ble.n	8001802 <__aeabi_f2iz+0x1a>
 80017fc:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <__aeabi_f2iz+0x3c>)
 80017fe:	1898      	adds	r0, r3, r2
 8001800:	4770      	bx	lr
 8001802:	2080      	movs	r0, #128	@ 0x80
 8001804:	0400      	lsls	r0, r0, #16
 8001806:	4301      	orrs	r1, r0
 8001808:	2a95      	cmp	r2, #149	@ 0x95
 800180a:	dc07      	bgt.n	800181c <__aeabi_f2iz+0x34>
 800180c:	2096      	movs	r0, #150	@ 0x96
 800180e:	1a82      	subs	r2, r0, r2
 8001810:	40d1      	lsrs	r1, r2
 8001812:	4248      	negs	r0, r1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f3      	bne.n	8001800 <__aeabi_f2iz+0x18>
 8001818:	0008      	movs	r0, r1
 800181a:	e7f1      	b.n	8001800 <__aeabi_f2iz+0x18>
 800181c:	3a96      	subs	r2, #150	@ 0x96
 800181e:	4091      	lsls	r1, r2
 8001820:	e7f7      	b.n	8001812 <__aeabi_f2iz+0x2a>
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	7fffffff 	.word	0x7fffffff

08001828 <__aeabi_i2f>:
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	2800      	cmp	r0, #0
 800182c:	d012      	beq.n	8001854 <__aeabi_i2f+0x2c>
 800182e:	17c3      	asrs	r3, r0, #31
 8001830:	18c5      	adds	r5, r0, r3
 8001832:	405d      	eors	r5, r3
 8001834:	0fc4      	lsrs	r4, r0, #31
 8001836:	0028      	movs	r0, r5
 8001838:	f002 f8f6 	bl	8003a28 <__clzsi2>
 800183c:	239e      	movs	r3, #158	@ 0x9e
 800183e:	1a1b      	subs	r3, r3, r0
 8001840:	2b96      	cmp	r3, #150	@ 0x96
 8001842:	dc0f      	bgt.n	8001864 <__aeabi_i2f+0x3c>
 8001844:	2808      	cmp	r0, #8
 8001846:	d038      	beq.n	80018ba <__aeabi_i2f+0x92>
 8001848:	3808      	subs	r0, #8
 800184a:	4085      	lsls	r5, r0
 800184c:	026d      	lsls	r5, r5, #9
 800184e:	0a6d      	lsrs	r5, r5, #9
 8001850:	b2d8      	uxtb	r0, r3
 8001852:	e002      	b.n	800185a <__aeabi_i2f+0x32>
 8001854:	2400      	movs	r4, #0
 8001856:	2000      	movs	r0, #0
 8001858:	2500      	movs	r5, #0
 800185a:	05c0      	lsls	r0, r0, #23
 800185c:	4328      	orrs	r0, r5
 800185e:	07e4      	lsls	r4, r4, #31
 8001860:	4320      	orrs	r0, r4
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	2b99      	cmp	r3, #153	@ 0x99
 8001866:	dc14      	bgt.n	8001892 <__aeabi_i2f+0x6a>
 8001868:	1f42      	subs	r2, r0, #5
 800186a:	4095      	lsls	r5, r2
 800186c:	002a      	movs	r2, r5
 800186e:	4915      	ldr	r1, [pc, #84]	@ (80018c4 <__aeabi_i2f+0x9c>)
 8001870:	4011      	ands	r1, r2
 8001872:	0755      	lsls	r5, r2, #29
 8001874:	d01c      	beq.n	80018b0 <__aeabi_i2f+0x88>
 8001876:	250f      	movs	r5, #15
 8001878:	402a      	ands	r2, r5
 800187a:	2a04      	cmp	r2, #4
 800187c:	d018      	beq.n	80018b0 <__aeabi_i2f+0x88>
 800187e:	3104      	adds	r1, #4
 8001880:	08ca      	lsrs	r2, r1, #3
 8001882:	0149      	lsls	r1, r1, #5
 8001884:	d515      	bpl.n	80018b2 <__aeabi_i2f+0x8a>
 8001886:	239f      	movs	r3, #159	@ 0x9f
 8001888:	0252      	lsls	r2, r2, #9
 800188a:	1a18      	subs	r0, r3, r0
 800188c:	0a55      	lsrs	r5, r2, #9
 800188e:	b2c0      	uxtb	r0, r0
 8001890:	e7e3      	b.n	800185a <__aeabi_i2f+0x32>
 8001892:	2205      	movs	r2, #5
 8001894:	0029      	movs	r1, r5
 8001896:	1a12      	subs	r2, r2, r0
 8001898:	40d1      	lsrs	r1, r2
 800189a:	0002      	movs	r2, r0
 800189c:	321b      	adds	r2, #27
 800189e:	4095      	lsls	r5, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	1e55      	subs	r5, r2, #1
 80018a4:	41aa      	sbcs	r2, r5
 80018a6:	430a      	orrs	r2, r1
 80018a8:	4906      	ldr	r1, [pc, #24]	@ (80018c4 <__aeabi_i2f+0x9c>)
 80018aa:	4011      	ands	r1, r2
 80018ac:	0755      	lsls	r5, r2, #29
 80018ae:	d1e2      	bne.n	8001876 <__aeabi_i2f+0x4e>
 80018b0:	08ca      	lsrs	r2, r1, #3
 80018b2:	0252      	lsls	r2, r2, #9
 80018b4:	0a55      	lsrs	r5, r2, #9
 80018b6:	b2d8      	uxtb	r0, r3
 80018b8:	e7cf      	b.n	800185a <__aeabi_i2f+0x32>
 80018ba:	026d      	lsls	r5, r5, #9
 80018bc:	0a6d      	lsrs	r5, r5, #9
 80018be:	308e      	adds	r0, #142	@ 0x8e
 80018c0:	e7cb      	b.n	800185a <__aeabi_i2f+0x32>
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	fbffffff 	.word	0xfbffffff

080018c8 <__aeabi_ui2f>:
 80018c8:	b510      	push	{r4, lr}
 80018ca:	1e04      	subs	r4, r0, #0
 80018cc:	d00d      	beq.n	80018ea <__aeabi_ui2f+0x22>
 80018ce:	f002 f8ab 	bl	8003a28 <__clzsi2>
 80018d2:	239e      	movs	r3, #158	@ 0x9e
 80018d4:	1a1b      	subs	r3, r3, r0
 80018d6:	2b96      	cmp	r3, #150	@ 0x96
 80018d8:	dc0c      	bgt.n	80018f4 <__aeabi_ui2f+0x2c>
 80018da:	2808      	cmp	r0, #8
 80018dc:	d034      	beq.n	8001948 <__aeabi_ui2f+0x80>
 80018de:	3808      	subs	r0, #8
 80018e0:	4084      	lsls	r4, r0
 80018e2:	0264      	lsls	r4, r4, #9
 80018e4:	0a64      	lsrs	r4, r4, #9
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	e001      	b.n	80018ee <__aeabi_ui2f+0x26>
 80018ea:	2000      	movs	r0, #0
 80018ec:	2400      	movs	r4, #0
 80018ee:	05c0      	lsls	r0, r0, #23
 80018f0:	4320      	orrs	r0, r4
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	2b99      	cmp	r3, #153	@ 0x99
 80018f6:	dc13      	bgt.n	8001920 <__aeabi_ui2f+0x58>
 80018f8:	1f42      	subs	r2, r0, #5
 80018fa:	4094      	lsls	r4, r2
 80018fc:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <__aeabi_ui2f+0x88>)
 80018fe:	4022      	ands	r2, r4
 8001900:	0761      	lsls	r1, r4, #29
 8001902:	d01c      	beq.n	800193e <__aeabi_ui2f+0x76>
 8001904:	210f      	movs	r1, #15
 8001906:	4021      	ands	r1, r4
 8001908:	2904      	cmp	r1, #4
 800190a:	d018      	beq.n	800193e <__aeabi_ui2f+0x76>
 800190c:	3204      	adds	r2, #4
 800190e:	08d4      	lsrs	r4, r2, #3
 8001910:	0152      	lsls	r2, r2, #5
 8001912:	d515      	bpl.n	8001940 <__aeabi_ui2f+0x78>
 8001914:	239f      	movs	r3, #159	@ 0x9f
 8001916:	0264      	lsls	r4, r4, #9
 8001918:	1a18      	subs	r0, r3, r0
 800191a:	0a64      	lsrs	r4, r4, #9
 800191c:	b2c0      	uxtb	r0, r0
 800191e:	e7e6      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001920:	0002      	movs	r2, r0
 8001922:	0021      	movs	r1, r4
 8001924:	321b      	adds	r2, #27
 8001926:	4091      	lsls	r1, r2
 8001928:	000a      	movs	r2, r1
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	418a      	sbcs	r2, r1
 800192e:	2105      	movs	r1, #5
 8001930:	1a09      	subs	r1, r1, r0
 8001932:	40cc      	lsrs	r4, r1
 8001934:	4314      	orrs	r4, r2
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <__aeabi_ui2f+0x88>)
 8001938:	4022      	ands	r2, r4
 800193a:	0761      	lsls	r1, r4, #29
 800193c:	d1e2      	bne.n	8001904 <__aeabi_ui2f+0x3c>
 800193e:	08d4      	lsrs	r4, r2, #3
 8001940:	0264      	lsls	r4, r4, #9
 8001942:	0a64      	lsrs	r4, r4, #9
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	e7d2      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001948:	0264      	lsls	r4, r4, #9
 800194a:	0a64      	lsrs	r4, r4, #9
 800194c:	308e      	adds	r0, #142	@ 0x8e
 800194e:	e7ce      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001950:	fbffffff 	.word	0xfbffffff

08001954 <__aeabi_dadd>:
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	464f      	mov	r7, r9
 8001958:	4646      	mov	r6, r8
 800195a:	46d6      	mov	lr, sl
 800195c:	b5c0      	push	{r6, r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	9000      	str	r0, [sp, #0]
 8001962:	9101      	str	r1, [sp, #4]
 8001964:	030e      	lsls	r6, r1, #12
 8001966:	004c      	lsls	r4, r1, #1
 8001968:	0fcd      	lsrs	r5, r1, #31
 800196a:	0a71      	lsrs	r1, r6, #9
 800196c:	9e00      	ldr	r6, [sp, #0]
 800196e:	005f      	lsls	r7, r3, #1
 8001970:	0f76      	lsrs	r6, r6, #29
 8001972:	430e      	orrs	r6, r1
 8001974:	9900      	ldr	r1, [sp, #0]
 8001976:	9200      	str	r2, [sp, #0]
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	00c9      	lsls	r1, r1, #3
 800197c:	4689      	mov	r9, r1
 800197e:	0319      	lsls	r1, r3, #12
 8001980:	0d7b      	lsrs	r3, r7, #21
 8001982:	4698      	mov	r8, r3
 8001984:	9b01      	ldr	r3, [sp, #4]
 8001986:	0a49      	lsrs	r1, r1, #9
 8001988:	0fdb      	lsrs	r3, r3, #31
 800198a:	469c      	mov	ip, r3
 800198c:	9b00      	ldr	r3, [sp, #0]
 800198e:	9a00      	ldr	r2, [sp, #0]
 8001990:	0f5b      	lsrs	r3, r3, #29
 8001992:	430b      	orrs	r3, r1
 8001994:	4641      	mov	r1, r8
 8001996:	0d64      	lsrs	r4, r4, #21
 8001998:	00d2      	lsls	r2, r2, #3
 800199a:	1a61      	subs	r1, r4, r1
 800199c:	4565      	cmp	r5, ip
 800199e:	d100      	bne.n	80019a2 <__aeabi_dadd+0x4e>
 80019a0:	e0a6      	b.n	8001af0 <__aeabi_dadd+0x19c>
 80019a2:	2900      	cmp	r1, #0
 80019a4:	dd72      	ble.n	8001a8c <__aeabi_dadd+0x138>
 80019a6:	4647      	mov	r7, r8
 80019a8:	2f00      	cmp	r7, #0
 80019aa:	d100      	bne.n	80019ae <__aeabi_dadd+0x5a>
 80019ac:	e0dd      	b.n	8001b6a <__aeabi_dadd+0x216>
 80019ae:	4fcc      	ldr	r7, [pc, #816]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 80019b0:	42bc      	cmp	r4, r7
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dadd+0x62>
 80019b4:	e19a      	b.n	8001cec <__aeabi_dadd+0x398>
 80019b6:	2701      	movs	r7, #1
 80019b8:	2938      	cmp	r1, #56	@ 0x38
 80019ba:	dc17      	bgt.n	80019ec <__aeabi_dadd+0x98>
 80019bc:	2780      	movs	r7, #128	@ 0x80
 80019be:	043f      	lsls	r7, r7, #16
 80019c0:	433b      	orrs	r3, r7
 80019c2:	291f      	cmp	r1, #31
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dadd+0x74>
 80019c6:	e1dd      	b.n	8001d84 <__aeabi_dadd+0x430>
 80019c8:	2720      	movs	r7, #32
 80019ca:	1a78      	subs	r0, r7, r1
 80019cc:	001f      	movs	r7, r3
 80019ce:	4087      	lsls	r7, r0
 80019d0:	46ba      	mov	sl, r7
 80019d2:	0017      	movs	r7, r2
 80019d4:	40cf      	lsrs	r7, r1
 80019d6:	4684      	mov	ip, r0
 80019d8:	0038      	movs	r0, r7
 80019da:	4657      	mov	r7, sl
 80019dc:	4307      	orrs	r7, r0
 80019de:	4660      	mov	r0, ip
 80019e0:	4082      	lsls	r2, r0
 80019e2:	40cb      	lsrs	r3, r1
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	1af6      	subs	r6, r6, r3
 80019ea:	4317      	orrs	r7, r2
 80019ec:	464b      	mov	r3, r9
 80019ee:	1bdf      	subs	r7, r3, r7
 80019f0:	45b9      	cmp	r9, r7
 80019f2:	4180      	sbcs	r0, r0
 80019f4:	4240      	negs	r0, r0
 80019f6:	1a36      	subs	r6, r6, r0
 80019f8:	0233      	lsls	r3, r6, #8
 80019fa:	d400      	bmi.n	80019fe <__aeabi_dadd+0xaa>
 80019fc:	e0ff      	b.n	8001bfe <__aeabi_dadd+0x2aa>
 80019fe:	0276      	lsls	r6, r6, #9
 8001a00:	0a76      	lsrs	r6, r6, #9
 8001a02:	2e00      	cmp	r6, #0
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0xb4>
 8001a06:	e13c      	b.n	8001c82 <__aeabi_dadd+0x32e>
 8001a08:	0030      	movs	r0, r6
 8001a0a:	f002 f80d 	bl	8003a28 <__clzsi2>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	3b08      	subs	r3, #8
 8001a12:	2120      	movs	r1, #32
 8001a14:	0038      	movs	r0, r7
 8001a16:	1aca      	subs	r2, r1, r3
 8001a18:	40d0      	lsrs	r0, r2
 8001a1a:	409e      	lsls	r6, r3
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	409f      	lsls	r7, r3
 8001a20:	4332      	orrs	r2, r6
 8001a22:	429c      	cmp	r4, r3
 8001a24:	dd00      	ble.n	8001a28 <__aeabi_dadd+0xd4>
 8001a26:	e1a6      	b.n	8001d76 <__aeabi_dadd+0x422>
 8001a28:	1b18      	subs	r0, r3, r4
 8001a2a:	3001      	adds	r0, #1
 8001a2c:	1a09      	subs	r1, r1, r0
 8001a2e:	003e      	movs	r6, r7
 8001a30:	408f      	lsls	r7, r1
 8001a32:	40c6      	lsrs	r6, r0
 8001a34:	1e7b      	subs	r3, r7, #1
 8001a36:	419f      	sbcs	r7, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	408b      	lsls	r3, r1
 8001a3c:	4337      	orrs	r7, r6
 8001a3e:	431f      	orrs	r7, r3
 8001a40:	40c2      	lsrs	r2, r0
 8001a42:	003b      	movs	r3, r7
 8001a44:	0016      	movs	r6, r2
 8001a46:	2400      	movs	r4, #0
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dadd+0xfa>
 8001a4c:	e1df      	b.n	8001e0e <__aeabi_dadd+0x4ba>
 8001a4e:	077b      	lsls	r3, r7, #29
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x100>
 8001a52:	e332      	b.n	80020ba <__aeabi_dadd+0x766>
 8001a54:	230f      	movs	r3, #15
 8001a56:	003a      	movs	r2, r7
 8001a58:	403b      	ands	r3, r7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d004      	beq.n	8001a68 <__aeabi_dadd+0x114>
 8001a5e:	1d3a      	adds	r2, r7, #4
 8001a60:	42ba      	cmp	r2, r7
 8001a62:	41bf      	sbcs	r7, r7
 8001a64:	427f      	negs	r7, r7
 8001a66:	19f6      	adds	r6, r6, r7
 8001a68:	0233      	lsls	r3, r6, #8
 8001a6a:	d400      	bmi.n	8001a6e <__aeabi_dadd+0x11a>
 8001a6c:	e323      	b.n	80020b6 <__aeabi_dadd+0x762>
 8001a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001a70:	3401      	adds	r4, #1
 8001a72:	429c      	cmp	r4, r3
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dadd+0x124>
 8001a76:	e0b4      	b.n	8001be2 <__aeabi_dadd+0x28e>
 8001a78:	4b9a      	ldr	r3, [pc, #616]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001a7a:	0564      	lsls	r4, r4, #21
 8001a7c:	401e      	ands	r6, r3
 8001a7e:	0d64      	lsrs	r4, r4, #21
 8001a80:	0777      	lsls	r7, r6, #29
 8001a82:	08d2      	lsrs	r2, r2, #3
 8001a84:	0276      	lsls	r6, r6, #9
 8001a86:	4317      	orrs	r7, r2
 8001a88:	0b36      	lsrs	r6, r6, #12
 8001a8a:	e0ac      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x13e>
 8001a90:	e07e      	b.n	8001b90 <__aeabi_dadd+0x23c>
 8001a92:	4641      	mov	r1, r8
 8001a94:	1b09      	subs	r1, r1, r4
 8001a96:	2c00      	cmp	r4, #0
 8001a98:	d000      	beq.n	8001a9c <__aeabi_dadd+0x148>
 8001a9a:	e160      	b.n	8001d5e <__aeabi_dadd+0x40a>
 8001a9c:	0034      	movs	r4, r6
 8001a9e:	4648      	mov	r0, r9
 8001aa0:	4304      	orrs	r4, r0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x152>
 8001aa4:	e1c9      	b.n	8001e3a <__aeabi_dadd+0x4e6>
 8001aa6:	1e4c      	subs	r4, r1, #1
 8001aa8:	2901      	cmp	r1, #1
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dadd+0x15a>
 8001aac:	e22e      	b.n	8001f0c <__aeabi_dadd+0x5b8>
 8001aae:	4d8c      	ldr	r5, [pc, #560]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001ab0:	42a9      	cmp	r1, r5
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dadd+0x162>
 8001ab4:	e224      	b.n	8001f00 <__aeabi_dadd+0x5ac>
 8001ab6:	2701      	movs	r7, #1
 8001ab8:	2c38      	cmp	r4, #56	@ 0x38
 8001aba:	dc11      	bgt.n	8001ae0 <__aeabi_dadd+0x18c>
 8001abc:	0021      	movs	r1, r4
 8001abe:	291f      	cmp	r1, #31
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dadd+0x170>
 8001ac2:	e20b      	b.n	8001edc <__aeabi_dadd+0x588>
 8001ac4:	2420      	movs	r4, #32
 8001ac6:	0037      	movs	r7, r6
 8001ac8:	4648      	mov	r0, r9
 8001aca:	1a64      	subs	r4, r4, r1
 8001acc:	40a7      	lsls	r7, r4
 8001ace:	40c8      	lsrs	r0, r1
 8001ad0:	4307      	orrs	r7, r0
 8001ad2:	4648      	mov	r0, r9
 8001ad4:	40a0      	lsls	r0, r4
 8001ad6:	40ce      	lsrs	r6, r1
 8001ad8:	1e44      	subs	r4, r0, #1
 8001ada:	41a0      	sbcs	r0, r4
 8001adc:	1b9b      	subs	r3, r3, r6
 8001ade:	4307      	orrs	r7, r0
 8001ae0:	1bd7      	subs	r7, r2, r7
 8001ae2:	42ba      	cmp	r2, r7
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	4665      	mov	r5, ip
 8001aea:	4644      	mov	r4, r8
 8001aec:	1a9e      	subs	r6, r3, r2
 8001aee:	e783      	b.n	80019f8 <__aeabi_dadd+0xa4>
 8001af0:	2900      	cmp	r1, #0
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dadd+0x1a2>
 8001af4:	e09c      	b.n	8001c30 <__aeabi_dadd+0x2dc>
 8001af6:	4647      	mov	r7, r8
 8001af8:	2f00      	cmp	r7, #0
 8001afa:	d167      	bne.n	8001bcc <__aeabi_dadd+0x278>
 8001afc:	001f      	movs	r7, r3
 8001afe:	4317      	orrs	r7, r2
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dadd+0x1b0>
 8001b02:	e0e4      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b04:	1e48      	subs	r0, r1, #1
 8001b06:	2901      	cmp	r1, #1
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dadd+0x1b8>
 8001b0a:	e19b      	b.n	8001e44 <__aeabi_dadd+0x4f0>
 8001b0c:	4f74      	ldr	r7, [pc, #464]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b0e:	42b9      	cmp	r1, r7
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dadd+0x1c0>
 8001b12:	e0eb      	b.n	8001cec <__aeabi_dadd+0x398>
 8001b14:	2701      	movs	r7, #1
 8001b16:	0001      	movs	r1, r0
 8001b18:	2838      	cmp	r0, #56	@ 0x38
 8001b1a:	dc11      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001b1c:	291f      	cmp	r1, #31
 8001b1e:	dd00      	ble.n	8001b22 <__aeabi_dadd+0x1ce>
 8001b20:	e1c7      	b.n	8001eb2 <__aeabi_dadd+0x55e>
 8001b22:	2720      	movs	r7, #32
 8001b24:	1a78      	subs	r0, r7, r1
 8001b26:	001f      	movs	r7, r3
 8001b28:	4684      	mov	ip, r0
 8001b2a:	4087      	lsls	r7, r0
 8001b2c:	0010      	movs	r0, r2
 8001b2e:	40c8      	lsrs	r0, r1
 8001b30:	4307      	orrs	r7, r0
 8001b32:	4660      	mov	r0, ip
 8001b34:	4082      	lsls	r2, r0
 8001b36:	40cb      	lsrs	r3, r1
 8001b38:	1e50      	subs	r0, r2, #1
 8001b3a:	4182      	sbcs	r2, r0
 8001b3c:	18f6      	adds	r6, r6, r3
 8001b3e:	4317      	orrs	r7, r2
 8001b40:	444f      	add	r7, r9
 8001b42:	454f      	cmp	r7, r9
 8001b44:	4180      	sbcs	r0, r0
 8001b46:	4240      	negs	r0, r0
 8001b48:	1836      	adds	r6, r6, r0
 8001b4a:	0233      	lsls	r3, r6, #8
 8001b4c:	d557      	bpl.n	8001bfe <__aeabi_dadd+0x2aa>
 8001b4e:	4b64      	ldr	r3, [pc, #400]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b50:	3401      	adds	r4, #1
 8001b52:	429c      	cmp	r4, r3
 8001b54:	d045      	beq.n	8001be2 <__aeabi_dadd+0x28e>
 8001b56:	2101      	movs	r1, #1
 8001b58:	4b62      	ldr	r3, [pc, #392]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001b5a:	087a      	lsrs	r2, r7, #1
 8001b5c:	401e      	ands	r6, r3
 8001b5e:	4039      	ands	r1, r7
 8001b60:	430a      	orrs	r2, r1
 8001b62:	07f7      	lsls	r7, r6, #31
 8001b64:	4317      	orrs	r7, r2
 8001b66:	0876      	lsrs	r6, r6, #1
 8001b68:	e771      	b.n	8001a4e <__aeabi_dadd+0xfa>
 8001b6a:	001f      	movs	r7, r3
 8001b6c:	4317      	orrs	r7, r2
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x21e>
 8001b70:	e0ad      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b72:	1e4f      	subs	r7, r1, #1
 8001b74:	46bc      	mov	ip, r7
 8001b76:	2901      	cmp	r1, #1
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dadd+0x228>
 8001b7a:	e182      	b.n	8001e82 <__aeabi_dadd+0x52e>
 8001b7c:	4f58      	ldr	r7, [pc, #352]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b7e:	42b9      	cmp	r1, r7
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dadd+0x230>
 8001b82:	e190      	b.n	8001ea6 <__aeabi_dadd+0x552>
 8001b84:	4661      	mov	r1, ip
 8001b86:	2701      	movs	r7, #1
 8001b88:	2938      	cmp	r1, #56	@ 0x38
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_dadd+0x23a>
 8001b8c:	e72e      	b.n	80019ec <__aeabi_dadd+0x98>
 8001b8e:	e718      	b.n	80019c2 <__aeabi_dadd+0x6e>
 8001b90:	4f55      	ldr	r7, [pc, #340]	@ (8001ce8 <__aeabi_dadd+0x394>)
 8001b92:	1c61      	adds	r1, r4, #1
 8001b94:	4239      	tst	r1, r7
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dadd+0x246>
 8001b98:	e0d0      	b.n	8001d3c <__aeabi_dadd+0x3e8>
 8001b9a:	0031      	movs	r1, r6
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	001f      	movs	r7, r3
 8001ba0:	4301      	orrs	r1, r0
 8001ba2:	4317      	orrs	r7, r2
 8001ba4:	2c00      	cmp	r4, #0
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dadd+0x256>
 8001ba8:	e13d      	b.n	8001e26 <__aeabi_dadd+0x4d2>
 8001baa:	2900      	cmp	r1, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dadd+0x25c>
 8001bae:	e1bc      	b.n	8001f2a <__aeabi_dadd+0x5d6>
 8001bb0:	2f00      	cmp	r7, #0
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dadd+0x262>
 8001bb4:	e1bf      	b.n	8001f36 <__aeabi_dadd+0x5e2>
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	2100      	movs	r1, #0
 8001bba:	08d8      	lsrs	r0, r3, #3
 8001bbc:	0777      	lsls	r7, r6, #29
 8001bbe:	4307      	orrs	r7, r0
 8001bc0:	08f0      	lsrs	r0, r6, #3
 8001bc2:	0306      	lsls	r6, r0, #12
 8001bc4:	054c      	lsls	r4, r1, #21
 8001bc6:	0b36      	lsrs	r6, r6, #12
 8001bc8:	0d64      	lsrs	r4, r4, #21
 8001bca:	e00c      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001bcc:	4f44      	ldr	r7, [pc, #272]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001bce:	42bc      	cmp	r4, r7
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dadd+0x280>
 8001bd2:	e08b      	b.n	8001cec <__aeabi_dadd+0x398>
 8001bd4:	2701      	movs	r7, #1
 8001bd6:	2938      	cmp	r1, #56	@ 0x38
 8001bd8:	dcb2      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001bda:	2780      	movs	r7, #128	@ 0x80
 8001bdc:	043f      	lsls	r7, r7, #16
 8001bde:	433b      	orrs	r3, r7
 8001be0:	e79c      	b.n	8001b1c <__aeabi_dadd+0x1c8>
 8001be2:	2600      	movs	r6, #0
 8001be4:	2700      	movs	r7, #0
 8001be6:	0524      	lsls	r4, r4, #20
 8001be8:	4334      	orrs	r4, r6
 8001bea:	07ed      	lsls	r5, r5, #31
 8001bec:	432c      	orrs	r4, r5
 8001bee:	0038      	movs	r0, r7
 8001bf0:	0021      	movs	r1, r4
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bce0      	pop	{r5, r6, r7}
 8001bf6:	46ba      	mov	sl, r7
 8001bf8:	46b1      	mov	r9, r6
 8001bfa:	46a8      	mov	r8, r5
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfe:	077b      	lsls	r3, r7, #29
 8001c00:	d004      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c02:	230f      	movs	r3, #15
 8001c04:	403b      	ands	r3, r7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c0a:	e728      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001c0c:	08f8      	lsrs	r0, r7, #3
 8001c0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c10:	0777      	lsls	r7, r6, #29
 8001c12:	4307      	orrs	r7, r0
 8001c14:	08f0      	lsrs	r0, r6, #3
 8001c16:	429c      	cmp	r4, r3
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dadd+0x2c8>
 8001c1a:	e24a      	b.n	80020b2 <__aeabi_dadd+0x75e>
 8001c1c:	003b      	movs	r3, r7
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	d059      	beq.n	8001cd6 <__aeabi_dadd+0x382>
 8001c22:	2680      	movs	r6, #128	@ 0x80
 8001c24:	0336      	lsls	r6, r6, #12
 8001c26:	4306      	orrs	r6, r0
 8001c28:	0336      	lsls	r6, r6, #12
 8001c2a:	4c2d      	ldr	r4, [pc, #180]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c2c:	0b36      	lsrs	r6, r6, #12
 8001c2e:	e7da      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001c30:	2900      	cmp	r1, #0
 8001c32:	d061      	beq.n	8001cf8 <__aeabi_dadd+0x3a4>
 8001c34:	4641      	mov	r1, r8
 8001c36:	1b09      	subs	r1, r1, r4
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dadd+0x2ea>
 8001c3c:	e0b9      	b.n	8001db2 <__aeabi_dadd+0x45e>
 8001c3e:	4c28      	ldr	r4, [pc, #160]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c40:	45a0      	cmp	r8, r4
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dadd+0x2f2>
 8001c44:	e1a5      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001c46:	2701      	movs	r7, #1
 8001c48:	2938      	cmp	r1, #56	@ 0x38
 8001c4a:	dc13      	bgt.n	8001c74 <__aeabi_dadd+0x320>
 8001c4c:	2480      	movs	r4, #128	@ 0x80
 8001c4e:	0424      	lsls	r4, r4, #16
 8001c50:	4326      	orrs	r6, r4
 8001c52:	291f      	cmp	r1, #31
 8001c54:	dd00      	ble.n	8001c58 <__aeabi_dadd+0x304>
 8001c56:	e1c8      	b.n	8001fea <__aeabi_dadd+0x696>
 8001c58:	2420      	movs	r4, #32
 8001c5a:	0037      	movs	r7, r6
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	1a64      	subs	r4, r4, r1
 8001c60:	40a7      	lsls	r7, r4
 8001c62:	40c8      	lsrs	r0, r1
 8001c64:	4307      	orrs	r7, r0
 8001c66:	4648      	mov	r0, r9
 8001c68:	40a0      	lsls	r0, r4
 8001c6a:	40ce      	lsrs	r6, r1
 8001c6c:	1e44      	subs	r4, r0, #1
 8001c6e:	41a0      	sbcs	r0, r4
 8001c70:	199b      	adds	r3, r3, r6
 8001c72:	4307      	orrs	r7, r0
 8001c74:	18bf      	adds	r7, r7, r2
 8001c76:	4297      	cmp	r7, r2
 8001c78:	4192      	sbcs	r2, r2
 8001c7a:	4252      	negs	r2, r2
 8001c7c:	4644      	mov	r4, r8
 8001c7e:	18d6      	adds	r6, r2, r3
 8001c80:	e763      	b.n	8001b4a <__aeabi_dadd+0x1f6>
 8001c82:	0038      	movs	r0, r7
 8001c84:	f001 fed0 	bl	8003a28 <__clzsi2>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	3318      	adds	r3, #24
 8001c8c:	2b1f      	cmp	r3, #31
 8001c8e:	dc00      	bgt.n	8001c92 <__aeabi_dadd+0x33e>
 8001c90:	e6bf      	b.n	8001a12 <__aeabi_dadd+0xbe>
 8001c92:	003a      	movs	r2, r7
 8001c94:	3808      	subs	r0, #8
 8001c96:	4082      	lsls	r2, r0
 8001c98:	429c      	cmp	r4, r3
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dadd+0x34a>
 8001c9c:	e083      	b.n	8001da6 <__aeabi_dadd+0x452>
 8001c9e:	1b1b      	subs	r3, r3, r4
 8001ca0:	1c58      	adds	r0, r3, #1
 8001ca2:	281f      	cmp	r0, #31
 8001ca4:	dc00      	bgt.n	8001ca8 <__aeabi_dadd+0x354>
 8001ca6:	e1b4      	b.n	8002012 <__aeabi_dadd+0x6be>
 8001ca8:	0017      	movs	r7, r2
 8001caa:	3b1f      	subs	r3, #31
 8001cac:	40df      	lsrs	r7, r3
 8001cae:	2820      	cmp	r0, #32
 8001cb0:	d005      	beq.n	8001cbe <__aeabi_dadd+0x36a>
 8001cb2:	2340      	movs	r3, #64	@ 0x40
 8001cb4:	1a1b      	subs	r3, r3, r0
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	1e53      	subs	r3, r2, #1
 8001cba:	419a      	sbcs	r2, r3
 8001cbc:	4317      	orrs	r7, r2
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	2f00      	cmp	r7, #0
 8001cc2:	d00a      	beq.n	8001cda <__aeabi_dadd+0x386>
 8001cc4:	077b      	lsls	r3, r7, #29
 8001cc6:	d000      	beq.n	8001cca <__aeabi_dadd+0x376>
 8001cc8:	e6c4      	b.n	8001a54 <__aeabi_dadd+0x100>
 8001cca:	0026      	movs	r6, r4
 8001ccc:	e79e      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001cce:	464b      	mov	r3, r9
 8001cd0:	000c      	movs	r4, r1
 8001cd2:	08d8      	lsrs	r0, r3, #3
 8001cd4:	e79b      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001cd6:	2700      	movs	r7, #0
 8001cd8:	4c01      	ldr	r4, [pc, #4]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001cda:	2600      	movs	r6, #0
 8001cdc:	e783      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	000007ff 	.word	0x000007ff
 8001ce4:	ff7fffff 	.word	0xff7fffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	464b      	mov	r3, r9
 8001cee:	0777      	lsls	r7, r6, #29
 8001cf0:	08d8      	lsrs	r0, r3, #3
 8001cf2:	4307      	orrs	r7, r0
 8001cf4:	08f0      	lsrs	r0, r6, #3
 8001cf6:	e791      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001cf8:	4fcd      	ldr	r7, [pc, #820]	@ (8002030 <__aeabi_dadd+0x6dc>)
 8001cfa:	1c61      	adds	r1, r4, #1
 8001cfc:	4239      	tst	r1, r7
 8001cfe:	d16b      	bne.n	8001dd8 <__aeabi_dadd+0x484>
 8001d00:	0031      	movs	r1, r6
 8001d02:	4648      	mov	r0, r9
 8001d04:	4301      	orrs	r1, r0
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dadd+0x3b8>
 8001d0a:	e14b      	b.n	8001fa4 <__aeabi_dadd+0x650>
 8001d0c:	001f      	movs	r7, r3
 8001d0e:	4317      	orrs	r7, r2
 8001d10:	2900      	cmp	r1, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dadd+0x3c2>
 8001d14:	e181      	b.n	800201a <__aeabi_dadd+0x6c6>
 8001d16:	2f00      	cmp	r7, #0
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dadd+0x3c8>
 8001d1a:	e74c      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d1c:	444a      	add	r2, r9
 8001d1e:	454a      	cmp	r2, r9
 8001d20:	4180      	sbcs	r0, r0
 8001d22:	18f6      	adds	r6, r6, r3
 8001d24:	4240      	negs	r0, r0
 8001d26:	1836      	adds	r6, r6, r0
 8001d28:	0233      	lsls	r3, r6, #8
 8001d2a:	d500      	bpl.n	8001d2e <__aeabi_dadd+0x3da>
 8001d2c:	e1b0      	b.n	8002090 <__aeabi_dadd+0x73c>
 8001d2e:	0017      	movs	r7, r2
 8001d30:	4691      	mov	r9, r2
 8001d32:	4337      	orrs	r7, r6
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dadd+0x3e4>
 8001d36:	e73e      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d38:	2600      	movs	r6, #0
 8001d3a:	e754      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	1a89      	subs	r1, r1, r2
 8001d40:	4688      	mov	r8, r1
 8001d42:	45c1      	cmp	r9, r8
 8001d44:	41bf      	sbcs	r7, r7
 8001d46:	1af1      	subs	r1, r6, r3
 8001d48:	427f      	negs	r7, r7
 8001d4a:	1bc9      	subs	r1, r1, r7
 8001d4c:	020f      	lsls	r7, r1, #8
 8001d4e:	d461      	bmi.n	8001e14 <__aeabi_dadd+0x4c0>
 8001d50:	4647      	mov	r7, r8
 8001d52:	430f      	orrs	r7, r1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dadd+0x404>
 8001d56:	e0bd      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8001d58:	000e      	movs	r6, r1
 8001d5a:	4647      	mov	r7, r8
 8001d5c:	e651      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001d5e:	4cb5      	ldr	r4, [pc, #724]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001d60:	45a0      	cmp	r8, r4
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dadd+0x412>
 8001d64:	e100      	b.n	8001f68 <__aeabi_dadd+0x614>
 8001d66:	2701      	movs	r7, #1
 8001d68:	2938      	cmp	r1, #56	@ 0x38
 8001d6a:	dd00      	ble.n	8001d6e <__aeabi_dadd+0x41a>
 8001d6c:	e6b8      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001d6e:	2480      	movs	r4, #128	@ 0x80
 8001d70:	0424      	lsls	r4, r4, #16
 8001d72:	4326      	orrs	r6, r4
 8001d74:	e6a3      	b.n	8001abe <__aeabi_dadd+0x16a>
 8001d76:	4eb0      	ldr	r6, [pc, #704]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001d78:	1ae4      	subs	r4, r4, r3
 8001d7a:	4016      	ands	r6, r2
 8001d7c:	077b      	lsls	r3, r7, #29
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dadd+0x42e>
 8001d80:	e73f      	b.n	8001c02 <__aeabi_dadd+0x2ae>
 8001d82:	e743      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001d84:	000f      	movs	r7, r1
 8001d86:	0018      	movs	r0, r3
 8001d88:	3f20      	subs	r7, #32
 8001d8a:	40f8      	lsrs	r0, r7
 8001d8c:	4684      	mov	ip, r0
 8001d8e:	2920      	cmp	r1, #32
 8001d90:	d003      	beq.n	8001d9a <__aeabi_dadd+0x446>
 8001d92:	2740      	movs	r7, #64	@ 0x40
 8001d94:	1a79      	subs	r1, r7, r1
 8001d96:	408b      	lsls	r3, r1
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	1e53      	subs	r3, r2, #1
 8001d9c:	419a      	sbcs	r2, r3
 8001d9e:	4663      	mov	r3, ip
 8001da0:	0017      	movs	r7, r2
 8001da2:	431f      	orrs	r7, r3
 8001da4:	e622      	b.n	80019ec <__aeabi_dadd+0x98>
 8001da6:	48a4      	ldr	r0, [pc, #656]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001da8:	1ae1      	subs	r1, r4, r3
 8001daa:	4010      	ands	r0, r2
 8001dac:	0747      	lsls	r7, r0, #29
 8001dae:	08c0      	lsrs	r0, r0, #3
 8001db0:	e707      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001db2:	0034      	movs	r4, r6
 8001db4:	4648      	mov	r0, r9
 8001db6:	4304      	orrs	r4, r0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dadd+0x468>
 8001dba:	e0fa      	b.n	8001fb2 <__aeabi_dadd+0x65e>
 8001dbc:	1e4c      	subs	r4, r1, #1
 8001dbe:	2901      	cmp	r1, #1
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dadd+0x470>
 8001dc2:	e0d7      	b.n	8001f74 <__aeabi_dadd+0x620>
 8001dc4:	4f9b      	ldr	r7, [pc, #620]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dc6:	42b9      	cmp	r1, r7
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dadd+0x478>
 8001dca:	e0e2      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001dcc:	2701      	movs	r7, #1
 8001dce:	2c38      	cmp	r4, #56	@ 0x38
 8001dd0:	dd00      	ble.n	8001dd4 <__aeabi_dadd+0x480>
 8001dd2:	e74f      	b.n	8001c74 <__aeabi_dadd+0x320>
 8001dd4:	0021      	movs	r1, r4
 8001dd6:	e73c      	b.n	8001c52 <__aeabi_dadd+0x2fe>
 8001dd8:	4c96      	ldr	r4, [pc, #600]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dda:	42a1      	cmp	r1, r4
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dadd+0x48c>
 8001dde:	e0dd      	b.n	8001f9c <__aeabi_dadd+0x648>
 8001de0:	444a      	add	r2, r9
 8001de2:	454a      	cmp	r2, r9
 8001de4:	4180      	sbcs	r0, r0
 8001de6:	18f3      	adds	r3, r6, r3
 8001de8:	4240      	negs	r0, r0
 8001dea:	1818      	adds	r0, r3, r0
 8001dec:	07c7      	lsls	r7, r0, #31
 8001dee:	0852      	lsrs	r2, r2, #1
 8001df0:	4317      	orrs	r7, r2
 8001df2:	0846      	lsrs	r6, r0, #1
 8001df4:	0752      	lsls	r2, r2, #29
 8001df6:	d005      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001df8:	220f      	movs	r2, #15
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	403a      	ands	r2, r7
 8001dfe:	2a04      	cmp	r2, #4
 8001e00:	d000      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001e02:	e62c      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001e04:	0776      	lsls	r6, r6, #29
 8001e06:	08ff      	lsrs	r7, r7, #3
 8001e08:	4337      	orrs	r7, r6
 8001e0a:	0900      	lsrs	r0, r0, #4
 8001e0c:	e6d9      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001e0e:	2700      	movs	r7, #0
 8001e10:	2600      	movs	r6, #0
 8001e12:	e6e8      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e14:	4649      	mov	r1, r9
 8001e16:	1a57      	subs	r7, r2, r1
 8001e18:	42ba      	cmp	r2, r7
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	1b9e      	subs	r6, r3, r6
 8001e1e:	4252      	negs	r2, r2
 8001e20:	4665      	mov	r5, ip
 8001e22:	1ab6      	subs	r6, r6, r2
 8001e24:	e5ed      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001e26:	2900      	cmp	r1, #0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dadd+0x4d8>
 8001e2a:	e0c6      	b.n	8001fba <__aeabi_dadd+0x666>
 8001e2c:	2f00      	cmp	r7, #0
 8001e2e:	d167      	bne.n	8001f00 <__aeabi_dadd+0x5ac>
 8001e30:	2680      	movs	r6, #128	@ 0x80
 8001e32:	2500      	movs	r5, #0
 8001e34:	4c7f      	ldr	r4, [pc, #508]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001e36:	0336      	lsls	r6, r6, #12
 8001e38:	e6d5      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e3a:	4665      	mov	r5, ip
 8001e3c:	000c      	movs	r4, r1
 8001e3e:	001e      	movs	r6, r3
 8001e40:	08d0      	lsrs	r0, r2, #3
 8001e42:	e6e4      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001e44:	444a      	add	r2, r9
 8001e46:	454a      	cmp	r2, r9
 8001e48:	4180      	sbcs	r0, r0
 8001e4a:	18f3      	adds	r3, r6, r3
 8001e4c:	4240      	negs	r0, r0
 8001e4e:	1818      	adds	r0, r3, r0
 8001e50:	0011      	movs	r1, r2
 8001e52:	0203      	lsls	r3, r0, #8
 8001e54:	d400      	bmi.n	8001e58 <__aeabi_dadd+0x504>
 8001e56:	e096      	b.n	8001f86 <__aeabi_dadd+0x632>
 8001e58:	4b77      	ldr	r3, [pc, #476]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001e5a:	0849      	lsrs	r1, r1, #1
 8001e5c:	4018      	ands	r0, r3
 8001e5e:	07c3      	lsls	r3, r0, #31
 8001e60:	430b      	orrs	r3, r1
 8001e62:	0844      	lsrs	r4, r0, #1
 8001e64:	0749      	lsls	r1, r1, #29
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dadd+0x516>
 8001e68:	e129      	b.n	80020be <__aeabi_dadd+0x76a>
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2a04      	cmp	r2, #4
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dadd+0x520>
 8001e72:	e0ea      	b.n	800204a <__aeabi_dadd+0x6f6>
 8001e74:	1d1f      	adds	r7, r3, #4
 8001e76:	429f      	cmp	r7, r3
 8001e78:	41b6      	sbcs	r6, r6
 8001e7a:	4276      	negs	r6, r6
 8001e7c:	1936      	adds	r6, r6, r4
 8001e7e:	2402      	movs	r4, #2
 8001e80:	e6c4      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001e82:	4649      	mov	r1, r9
 8001e84:	1a8f      	subs	r7, r1, r2
 8001e86:	45b9      	cmp	r9, r7
 8001e88:	4180      	sbcs	r0, r0
 8001e8a:	1af6      	subs	r6, r6, r3
 8001e8c:	4240      	negs	r0, r0
 8001e8e:	1a36      	subs	r6, r6, r0
 8001e90:	0233      	lsls	r3, r6, #8
 8001e92:	d406      	bmi.n	8001ea2 <__aeabi_dadd+0x54e>
 8001e94:	0773      	lsls	r3, r6, #29
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	2101      	movs	r1, #1
 8001e9a:	431f      	orrs	r7, r3
 8001e9c:	08f0      	lsrs	r0, r6, #3
 8001e9e:	e690      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001ea0:	4665      	mov	r5, ip
 8001ea2:	2401      	movs	r4, #1
 8001ea4:	e5ab      	b.n	80019fe <__aeabi_dadd+0xaa>
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	0777      	lsls	r7, r6, #29
 8001eaa:	08d8      	lsrs	r0, r3, #3
 8001eac:	4307      	orrs	r7, r0
 8001eae:	08f0      	lsrs	r0, r6, #3
 8001eb0:	e6b4      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001eb2:	000f      	movs	r7, r1
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	3f20      	subs	r7, #32
 8001eb8:	40f8      	lsrs	r0, r7
 8001eba:	4684      	mov	ip, r0
 8001ebc:	2920      	cmp	r1, #32
 8001ebe:	d003      	beq.n	8001ec8 <__aeabi_dadd+0x574>
 8001ec0:	2740      	movs	r7, #64	@ 0x40
 8001ec2:	1a79      	subs	r1, r7, r1
 8001ec4:	408b      	lsls	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	1e53      	subs	r3, r2, #1
 8001eca:	419a      	sbcs	r2, r3
 8001ecc:	4663      	mov	r3, ip
 8001ece:	0017      	movs	r7, r2
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	e635      	b.n	8001b40 <__aeabi_dadd+0x1ec>
 8001ed4:	2500      	movs	r5, #0
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	2600      	movs	r6, #0
 8001eda:	e684      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001edc:	000c      	movs	r4, r1
 8001ede:	0035      	movs	r5, r6
 8001ee0:	3c20      	subs	r4, #32
 8001ee2:	40e5      	lsrs	r5, r4
 8001ee4:	2920      	cmp	r1, #32
 8001ee6:	d005      	beq.n	8001ef4 <__aeabi_dadd+0x5a0>
 8001ee8:	2440      	movs	r4, #64	@ 0x40
 8001eea:	1a61      	subs	r1, r4, r1
 8001eec:	408e      	lsls	r6, r1
 8001eee:	4649      	mov	r1, r9
 8001ef0:	4331      	orrs	r1, r6
 8001ef2:	4689      	mov	r9, r1
 8001ef4:	4648      	mov	r0, r9
 8001ef6:	1e41      	subs	r1, r0, #1
 8001ef8:	4188      	sbcs	r0, r1
 8001efa:	0007      	movs	r7, r0
 8001efc:	432f      	orrs	r7, r5
 8001efe:	e5ef      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	075f      	lsls	r7, r3, #29
 8001f04:	4665      	mov	r5, ip
 8001f06:	4317      	orrs	r7, r2
 8001f08:	08d8      	lsrs	r0, r3, #3
 8001f0a:	e687      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f0c:	1a17      	subs	r7, r2, r0
 8001f0e:	42ba      	cmp	r2, r7
 8001f10:	4192      	sbcs	r2, r2
 8001f12:	1b9e      	subs	r6, r3, r6
 8001f14:	4252      	negs	r2, r2
 8001f16:	1ab6      	subs	r6, r6, r2
 8001f18:	0233      	lsls	r3, r6, #8
 8001f1a:	d4c1      	bmi.n	8001ea0 <__aeabi_dadd+0x54c>
 8001f1c:	0773      	lsls	r3, r6, #29
 8001f1e:	08ff      	lsrs	r7, r7, #3
 8001f20:	4665      	mov	r5, ip
 8001f22:	2101      	movs	r1, #1
 8001f24:	431f      	orrs	r7, r3
 8001f26:	08f0      	lsrs	r0, r6, #3
 8001f28:	e64b      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f2a:	2f00      	cmp	r7, #0
 8001f2c:	d07b      	beq.n	8002026 <__aeabi_dadd+0x6d2>
 8001f2e:	4665      	mov	r5, ip
 8001f30:	001e      	movs	r6, r3
 8001f32:	4691      	mov	r9, r2
 8001f34:	e63f      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001f36:	1a81      	subs	r1, r0, r2
 8001f38:	4688      	mov	r8, r1
 8001f3a:	45c1      	cmp	r9, r8
 8001f3c:	41a4      	sbcs	r4, r4
 8001f3e:	1af1      	subs	r1, r6, r3
 8001f40:	4264      	negs	r4, r4
 8001f42:	1b09      	subs	r1, r1, r4
 8001f44:	2480      	movs	r4, #128	@ 0x80
 8001f46:	0424      	lsls	r4, r4, #16
 8001f48:	4221      	tst	r1, r4
 8001f4a:	d077      	beq.n	800203c <__aeabi_dadd+0x6e8>
 8001f4c:	1a10      	subs	r0, r2, r0
 8001f4e:	4282      	cmp	r2, r0
 8001f50:	4192      	sbcs	r2, r2
 8001f52:	0007      	movs	r7, r0
 8001f54:	1b9e      	subs	r6, r3, r6
 8001f56:	4252      	negs	r2, r2
 8001f58:	1ab6      	subs	r6, r6, r2
 8001f5a:	4337      	orrs	r7, r6
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_dadd+0x60c>
 8001f5e:	e0a0      	b.n	80020a2 <__aeabi_dadd+0x74e>
 8001f60:	4665      	mov	r5, ip
 8001f62:	2400      	movs	r4, #0
 8001f64:	2600      	movs	r6, #0
 8001f66:	e63e      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001f68:	075f      	lsls	r7, r3, #29
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	4665      	mov	r5, ip
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	08d8      	lsrs	r0, r3, #3
 8001f72:	e653      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f74:	1881      	adds	r1, r0, r2
 8001f76:	4291      	cmp	r1, r2
 8001f78:	4192      	sbcs	r2, r2
 8001f7a:	18f0      	adds	r0, r6, r3
 8001f7c:	4252      	negs	r2, r2
 8001f7e:	1880      	adds	r0, r0, r2
 8001f80:	0203      	lsls	r3, r0, #8
 8001f82:	d500      	bpl.n	8001f86 <__aeabi_dadd+0x632>
 8001f84:	e768      	b.n	8001e58 <__aeabi_dadd+0x504>
 8001f86:	0747      	lsls	r7, r0, #29
 8001f88:	08c9      	lsrs	r1, r1, #3
 8001f8a:	430f      	orrs	r7, r1
 8001f8c:	08c0      	lsrs	r0, r0, #3
 8001f8e:	2101      	movs	r1, #1
 8001f90:	e617      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f92:	08d2      	lsrs	r2, r2, #3
 8001f94:	075f      	lsls	r7, r3, #29
 8001f96:	4317      	orrs	r7, r2
 8001f98:	08d8      	lsrs	r0, r3, #3
 8001f9a:	e63f      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f9c:	000c      	movs	r4, r1
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	2700      	movs	r7, #0
 8001fa2:	e620      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001fa4:	2900      	cmp	r1, #0
 8001fa6:	d156      	bne.n	8002056 <__aeabi_dadd+0x702>
 8001fa8:	075f      	lsls	r7, r3, #29
 8001faa:	08d2      	lsrs	r2, r2, #3
 8001fac:	4317      	orrs	r7, r2
 8001fae:	08d8      	lsrs	r0, r3, #3
 8001fb0:	e634      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fb2:	000c      	movs	r4, r1
 8001fb4:	001e      	movs	r6, r3
 8001fb6:	08d0      	lsrs	r0, r2, #3
 8001fb8:	e629      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001fba:	08c1      	lsrs	r1, r0, #3
 8001fbc:	0770      	lsls	r0, r6, #29
 8001fbe:	4301      	orrs	r1, r0
 8001fc0:	08f0      	lsrs	r0, r6, #3
 8001fc2:	2f00      	cmp	r7, #0
 8001fc4:	d062      	beq.n	800208c <__aeabi_dadd+0x738>
 8001fc6:	2480      	movs	r4, #128	@ 0x80
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	4220      	tst	r0, r4
 8001fcc:	d007      	beq.n	8001fde <__aeabi_dadd+0x68a>
 8001fce:	08de      	lsrs	r6, r3, #3
 8001fd0:	4226      	tst	r6, r4
 8001fd2:	d104      	bne.n	8001fde <__aeabi_dadd+0x68a>
 8001fd4:	4665      	mov	r5, ip
 8001fd6:	0030      	movs	r0, r6
 8001fd8:	08d1      	lsrs	r1, r2, #3
 8001fda:	075b      	lsls	r3, r3, #29
 8001fdc:	4319      	orrs	r1, r3
 8001fde:	0f4f      	lsrs	r7, r1, #29
 8001fe0:	00c9      	lsls	r1, r1, #3
 8001fe2:	08c9      	lsrs	r1, r1, #3
 8001fe4:	077f      	lsls	r7, r7, #29
 8001fe6:	430f      	orrs	r7, r1
 8001fe8:	e618      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fea:	000c      	movs	r4, r1
 8001fec:	0030      	movs	r0, r6
 8001fee:	3c20      	subs	r4, #32
 8001ff0:	40e0      	lsrs	r0, r4
 8001ff2:	4684      	mov	ip, r0
 8001ff4:	2920      	cmp	r1, #32
 8001ff6:	d005      	beq.n	8002004 <__aeabi_dadd+0x6b0>
 8001ff8:	2440      	movs	r4, #64	@ 0x40
 8001ffa:	1a61      	subs	r1, r4, r1
 8001ffc:	408e      	lsls	r6, r1
 8001ffe:	4649      	mov	r1, r9
 8002000:	4331      	orrs	r1, r6
 8002002:	4689      	mov	r9, r1
 8002004:	4648      	mov	r0, r9
 8002006:	1e41      	subs	r1, r0, #1
 8002008:	4188      	sbcs	r0, r1
 800200a:	4661      	mov	r1, ip
 800200c:	0007      	movs	r7, r0
 800200e:	430f      	orrs	r7, r1
 8002010:	e630      	b.n	8001c74 <__aeabi_dadd+0x320>
 8002012:	2120      	movs	r1, #32
 8002014:	2700      	movs	r7, #0
 8002016:	1a09      	subs	r1, r1, r0
 8002018:	e50e      	b.n	8001a38 <__aeabi_dadd+0xe4>
 800201a:	001e      	movs	r6, r3
 800201c:	2f00      	cmp	r7, #0
 800201e:	d000      	beq.n	8002022 <__aeabi_dadd+0x6ce>
 8002020:	e522      	b.n	8001a68 <__aeabi_dadd+0x114>
 8002022:	2400      	movs	r4, #0
 8002024:	e758      	b.n	8001ed8 <__aeabi_dadd+0x584>
 8002026:	2500      	movs	r5, #0
 8002028:	2400      	movs	r4, #0
 800202a:	2600      	movs	r6, #0
 800202c:	e5db      	b.n	8001be6 <__aeabi_dadd+0x292>
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	000007fe 	.word	0x000007fe
 8002034:	000007ff 	.word	0x000007ff
 8002038:	ff7fffff 	.word	0xff7fffff
 800203c:	4647      	mov	r7, r8
 800203e:	430f      	orrs	r7, r1
 8002040:	d100      	bne.n	8002044 <__aeabi_dadd+0x6f0>
 8002042:	e747      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8002044:	000e      	movs	r6, r1
 8002046:	46c1      	mov	r9, r8
 8002048:	e5b5      	b.n	8001bb6 <__aeabi_dadd+0x262>
 800204a:	08df      	lsrs	r7, r3, #3
 800204c:	0764      	lsls	r4, r4, #29
 800204e:	2102      	movs	r1, #2
 8002050:	4327      	orrs	r7, r4
 8002052:	0900      	lsrs	r0, r0, #4
 8002054:	e5b5      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8002056:	0019      	movs	r1, r3
 8002058:	08c0      	lsrs	r0, r0, #3
 800205a:	0777      	lsls	r7, r6, #29
 800205c:	4307      	orrs	r7, r0
 800205e:	4311      	orrs	r1, r2
 8002060:	08f0      	lsrs	r0, r6, #3
 8002062:	2900      	cmp	r1, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_dadd+0x714>
 8002066:	e5d9      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0309      	lsls	r1, r1, #12
 800206c:	4208      	tst	r0, r1
 800206e:	d007      	beq.n	8002080 <__aeabi_dadd+0x72c>
 8002070:	08dc      	lsrs	r4, r3, #3
 8002072:	420c      	tst	r4, r1
 8002074:	d104      	bne.n	8002080 <__aeabi_dadd+0x72c>
 8002076:	08d2      	lsrs	r2, r2, #3
 8002078:	075b      	lsls	r3, r3, #29
 800207a:	431a      	orrs	r2, r3
 800207c:	0017      	movs	r7, r2
 800207e:	0020      	movs	r0, r4
 8002080:	0f7b      	lsrs	r3, r7, #29
 8002082:	00ff      	lsls	r7, r7, #3
 8002084:	08ff      	lsrs	r7, r7, #3
 8002086:	075b      	lsls	r3, r3, #29
 8002088:	431f      	orrs	r7, r3
 800208a:	e5c7      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 800208c:	000f      	movs	r7, r1
 800208e:	e5c5      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <__aeabi_dadd+0x788>)
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4033      	ands	r3, r6
 8002096:	075f      	lsls	r7, r3, #29
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	2401      	movs	r4, #1
 800209c:	4317      	orrs	r7, r2
 800209e:	0b1e      	lsrs	r6, r3, #12
 80020a0:	e5a1      	b.n	8001be6 <__aeabi_dadd+0x292>
 80020a2:	4226      	tst	r6, r4
 80020a4:	d012      	beq.n	80020cc <__aeabi_dadd+0x778>
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <__aeabi_dadd+0x788>)
 80020a8:	4665      	mov	r5, ip
 80020aa:	0002      	movs	r2, r0
 80020ac:	2401      	movs	r4, #1
 80020ae:	401e      	ands	r6, r3
 80020b0:	e4e6      	b.n	8001a80 <__aeabi_dadd+0x12c>
 80020b2:	0021      	movs	r1, r4
 80020b4:	e585      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020b6:	0017      	movs	r7, r2
 80020b8:	e5a8      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 80020ba:	003a      	movs	r2, r7
 80020bc:	e4d4      	b.n	8001a68 <__aeabi_dadd+0x114>
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	0764      	lsls	r4, r4, #29
 80020c2:	431c      	orrs	r4, r3
 80020c4:	0027      	movs	r7, r4
 80020c6:	2102      	movs	r1, #2
 80020c8:	0900      	lsrs	r0, r0, #4
 80020ca:	e57a      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020cc:	08c0      	lsrs	r0, r0, #3
 80020ce:	0777      	lsls	r7, r6, #29
 80020d0:	4307      	orrs	r7, r0
 80020d2:	4665      	mov	r5, ip
 80020d4:	2100      	movs	r1, #0
 80020d6:	08f0      	lsrs	r0, r6, #3
 80020d8:	e573      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	ff7fffff 	.word	0xff7fffff

080020e0 <__aeabi_ddiv>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	46de      	mov	lr, fp
 80020e4:	4645      	mov	r5, r8
 80020e6:	4657      	mov	r7, sl
 80020e8:	464e      	mov	r6, r9
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	b087      	sub	sp, #28
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	030b      	lsls	r3, r1, #12
 80020f4:	0b1b      	lsrs	r3, r3, #12
 80020f6:	469b      	mov	fp, r3
 80020f8:	0fca      	lsrs	r2, r1, #31
 80020fa:	004b      	lsls	r3, r1, #1
 80020fc:	0004      	movs	r4, r0
 80020fe:	4680      	mov	r8, r0
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	9202      	str	r2, [sp, #8]
 8002104:	d100      	bne.n	8002108 <__aeabi_ddiv+0x28>
 8002106:	e098      	b.n	800223a <__aeabi_ddiv+0x15a>
 8002108:	4a7c      	ldr	r2, [pc, #496]	@ (80022fc <__aeabi_ddiv+0x21c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d037      	beq.n	800217e <__aeabi_ddiv+0x9e>
 800210e:	4659      	mov	r1, fp
 8002110:	0f42      	lsrs	r2, r0, #29
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	430a      	orrs	r2, r1
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0409      	lsls	r1, r1, #16
 800211a:	4311      	orrs	r1, r2
 800211c:	00c2      	lsls	r2, r0, #3
 800211e:	4690      	mov	r8, r2
 8002120:	4a77      	ldr	r2, [pc, #476]	@ (8002300 <__aeabi_ddiv+0x220>)
 8002122:	4689      	mov	r9, r1
 8002124:	4692      	mov	sl, r2
 8002126:	449a      	add	sl, r3
 8002128:	2300      	movs	r3, #0
 800212a:	2400      	movs	r4, #0
 800212c:	9303      	str	r3, [sp, #12]
 800212e:	9e00      	ldr	r6, [sp, #0]
 8002130:	9f01      	ldr	r7, [sp, #4]
 8002132:	033b      	lsls	r3, r7, #12
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	469b      	mov	fp, r3
 8002138:	007b      	lsls	r3, r7, #1
 800213a:	0030      	movs	r0, r6
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	0ffd      	lsrs	r5, r7, #31
 8002140:	2b00      	cmp	r3, #0
 8002142:	d059      	beq.n	80021f8 <__aeabi_ddiv+0x118>
 8002144:	4a6d      	ldr	r2, [pc, #436]	@ (80022fc <__aeabi_ddiv+0x21c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d048      	beq.n	80021dc <__aeabi_ddiv+0xfc>
 800214a:	4659      	mov	r1, fp
 800214c:	0f72      	lsrs	r2, r6, #29
 800214e:	00c9      	lsls	r1, r1, #3
 8002150:	430a      	orrs	r2, r1
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0409      	lsls	r1, r1, #16
 8002156:	4311      	orrs	r1, r2
 8002158:	468b      	mov	fp, r1
 800215a:	4969      	ldr	r1, [pc, #420]	@ (8002300 <__aeabi_ddiv+0x220>)
 800215c:	00f2      	lsls	r2, r6, #3
 800215e:	468c      	mov	ip, r1
 8002160:	4651      	mov	r1, sl
 8002162:	4463      	add	r3, ip
 8002164:	1acb      	subs	r3, r1, r3
 8002166:	469a      	mov	sl, r3
 8002168:	2100      	movs	r1, #0
 800216a:	9e02      	ldr	r6, [sp, #8]
 800216c:	406e      	eors	r6, r5
 800216e:	b2f6      	uxtb	r6, r6
 8002170:	2c0f      	cmp	r4, #15
 8002172:	d900      	bls.n	8002176 <__aeabi_ddiv+0x96>
 8002174:	e0ce      	b.n	8002314 <__aeabi_ddiv+0x234>
 8002176:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <__aeabi_ddiv+0x224>)
 8002178:	00a4      	lsls	r4, r4, #2
 800217a:	591b      	ldr	r3, [r3, r4]
 800217c:	469f      	mov	pc, r3
 800217e:	465a      	mov	r2, fp
 8002180:	4302      	orrs	r2, r0
 8002182:	4691      	mov	r9, r2
 8002184:	d000      	beq.n	8002188 <__aeabi_ddiv+0xa8>
 8002186:	e090      	b.n	80022aa <__aeabi_ddiv+0x1ca>
 8002188:	469a      	mov	sl, r3
 800218a:	2302      	movs	r3, #2
 800218c:	4690      	mov	r8, r2
 800218e:	2408      	movs	r4, #8
 8002190:	9303      	str	r3, [sp, #12]
 8002192:	e7cc      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002194:	46cb      	mov	fp, r9
 8002196:	4642      	mov	r2, r8
 8002198:	9d02      	ldr	r5, [sp, #8]
 800219a:	9903      	ldr	r1, [sp, #12]
 800219c:	2902      	cmp	r1, #2
 800219e:	d100      	bne.n	80021a2 <__aeabi_ddiv+0xc2>
 80021a0:	e1de      	b.n	8002560 <__aeabi_ddiv+0x480>
 80021a2:	2903      	cmp	r1, #3
 80021a4:	d100      	bne.n	80021a8 <__aeabi_ddiv+0xc8>
 80021a6:	e08d      	b.n	80022c4 <__aeabi_ddiv+0x1e4>
 80021a8:	2901      	cmp	r1, #1
 80021aa:	d000      	beq.n	80021ae <__aeabi_ddiv+0xce>
 80021ac:	e179      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 80021ae:	002e      	movs	r6, r5
 80021b0:	2200      	movs	r2, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2400      	movs	r4, #0
 80021b6:	4690      	mov	r8, r2
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	4323      	orrs	r3, r4
 80021bc:	07f6      	lsls	r6, r6, #31
 80021be:	4333      	orrs	r3, r6
 80021c0:	4640      	mov	r0, r8
 80021c2:	0019      	movs	r1, r3
 80021c4:	b007      	add	sp, #28
 80021c6:	bcf0      	pop	{r4, r5, r6, r7}
 80021c8:	46bb      	mov	fp, r7
 80021ca:	46b2      	mov	sl, r6
 80021cc:	46a9      	mov	r9, r5
 80021ce:	46a0      	mov	r8, r4
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d2:	2200      	movs	r2, #0
 80021d4:	2400      	movs	r4, #0
 80021d6:	4690      	mov	r8, r2
 80021d8:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80021da:	e7ed      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80021dc:	465a      	mov	r2, fp
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <__aeabi_ddiv+0x228>)
 80021e4:	469c      	mov	ip, r3
 80021e6:	44e2      	add	sl, ip
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d159      	bne.n	80022a0 <__aeabi_ddiv+0x1c0>
 80021ec:	2302      	movs	r3, #2
 80021ee:	431c      	orrs	r4, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	2102      	movs	r1, #2
 80021f4:	469b      	mov	fp, r3
 80021f6:	e7b8      	b.n	800216a <__aeabi_ddiv+0x8a>
 80021f8:	465a      	mov	r2, fp
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	d049      	beq.n	8002294 <__aeabi_ddiv+0x1b4>
 8002200:	465b      	mov	r3, fp
 8002202:	2b00      	cmp	r3, #0
 8002204:	d100      	bne.n	8002208 <__aeabi_ddiv+0x128>
 8002206:	e19c      	b.n	8002542 <__aeabi_ddiv+0x462>
 8002208:	4658      	mov	r0, fp
 800220a:	f001 fc0d 	bl	8003a28 <__clzsi2>
 800220e:	0002      	movs	r2, r0
 8002210:	0003      	movs	r3, r0
 8002212:	3a0b      	subs	r2, #11
 8002214:	271d      	movs	r7, #29
 8002216:	9e00      	ldr	r6, [sp, #0]
 8002218:	1aba      	subs	r2, r7, r2
 800221a:	0019      	movs	r1, r3
 800221c:	4658      	mov	r0, fp
 800221e:	40d6      	lsrs	r6, r2
 8002220:	3908      	subs	r1, #8
 8002222:	4088      	lsls	r0, r1
 8002224:	0032      	movs	r2, r6
 8002226:	4302      	orrs	r2, r0
 8002228:	4693      	mov	fp, r2
 800222a:	9a00      	ldr	r2, [sp, #0]
 800222c:	408a      	lsls	r2, r1
 800222e:	4937      	ldr	r1, [pc, #220]	@ (800230c <__aeabi_ddiv+0x22c>)
 8002230:	4453      	add	r3, sl
 8002232:	468a      	mov	sl, r1
 8002234:	2100      	movs	r1, #0
 8002236:	449a      	add	sl, r3
 8002238:	e797      	b.n	800216a <__aeabi_ddiv+0x8a>
 800223a:	465b      	mov	r3, fp
 800223c:	4303      	orrs	r3, r0
 800223e:	4699      	mov	r9, r3
 8002240:	d021      	beq.n	8002286 <__aeabi_ddiv+0x1a6>
 8002242:	465b      	mov	r3, fp
 8002244:	2b00      	cmp	r3, #0
 8002246:	d100      	bne.n	800224a <__aeabi_ddiv+0x16a>
 8002248:	e169      	b.n	800251e <__aeabi_ddiv+0x43e>
 800224a:	4658      	mov	r0, fp
 800224c:	f001 fbec 	bl	8003a28 <__clzsi2>
 8002250:	230b      	movs	r3, #11
 8002252:	425b      	negs	r3, r3
 8002254:	469c      	mov	ip, r3
 8002256:	0002      	movs	r2, r0
 8002258:	4484      	add	ip, r0
 800225a:	4666      	mov	r6, ip
 800225c:	231d      	movs	r3, #29
 800225e:	1b9b      	subs	r3, r3, r6
 8002260:	0026      	movs	r6, r4
 8002262:	0011      	movs	r1, r2
 8002264:	4658      	mov	r0, fp
 8002266:	40de      	lsrs	r6, r3
 8002268:	3908      	subs	r1, #8
 800226a:	4088      	lsls	r0, r1
 800226c:	0033      	movs	r3, r6
 800226e:	4303      	orrs	r3, r0
 8002270:	4699      	mov	r9, r3
 8002272:	0023      	movs	r3, r4
 8002274:	408b      	lsls	r3, r1
 8002276:	4698      	mov	r8, r3
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <__aeabi_ddiv+0x230>)
 800227a:	2400      	movs	r4, #0
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	469a      	mov	sl, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9303      	str	r3, [sp, #12]
 8002284:	e753      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002286:	2300      	movs	r3, #0
 8002288:	4698      	mov	r8, r3
 800228a:	469a      	mov	sl, r3
 800228c:	3301      	adds	r3, #1
 800228e:	2404      	movs	r4, #4
 8002290:	9303      	str	r3, [sp, #12]
 8002292:	e74c      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002294:	2301      	movs	r3, #1
 8002296:	431c      	orrs	r4, r3
 8002298:	2300      	movs	r3, #0
 800229a:	2101      	movs	r1, #1
 800229c:	469b      	mov	fp, r3
 800229e:	e764      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022a0:	2303      	movs	r3, #3
 80022a2:	0032      	movs	r2, r6
 80022a4:	2103      	movs	r1, #3
 80022a6:	431c      	orrs	r4, r3
 80022a8:	e75f      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022aa:	469a      	mov	sl, r3
 80022ac:	2303      	movs	r3, #3
 80022ae:	46d9      	mov	r9, fp
 80022b0:	240c      	movs	r4, #12
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	e73b      	b.n	800212e <__aeabi_ddiv+0x4e>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2480      	movs	r4, #128	@ 0x80
 80022ba:	4698      	mov	r8, r3
 80022bc:	2600      	movs	r6, #0
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022c0:	0324      	lsls	r4, r4, #12
 80022c2:	e779      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022c4:	2480      	movs	r4, #128	@ 0x80
 80022c6:	465b      	mov	r3, fp
 80022c8:	0324      	lsls	r4, r4, #12
 80022ca:	431c      	orrs	r4, r3
 80022cc:	0324      	lsls	r4, r4, #12
 80022ce:	002e      	movs	r6, r5
 80022d0:	4690      	mov	r8, r2
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022d4:	0b24      	lsrs	r4, r4, #12
 80022d6:	e76f      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022d8:	2480      	movs	r4, #128	@ 0x80
 80022da:	464b      	mov	r3, r9
 80022dc:	0324      	lsls	r4, r4, #12
 80022de:	4223      	tst	r3, r4
 80022e0:	d002      	beq.n	80022e8 <__aeabi_ddiv+0x208>
 80022e2:	465b      	mov	r3, fp
 80022e4:	4223      	tst	r3, r4
 80022e6:	d0f0      	beq.n	80022ca <__aeabi_ddiv+0x1ea>
 80022e8:	2480      	movs	r4, #128	@ 0x80
 80022ea:	464b      	mov	r3, r9
 80022ec:	0324      	lsls	r4, r4, #12
 80022ee:	431c      	orrs	r4, r3
 80022f0:	0324      	lsls	r4, r4, #12
 80022f2:	9e02      	ldr	r6, [sp, #8]
 80022f4:	4b01      	ldr	r3, [pc, #4]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022f6:	0b24      	lsrs	r4, r4, #12
 80022f8:	e75e      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	000007ff 	.word	0x000007ff
 8002300:	fffffc01 	.word	0xfffffc01
 8002304:	0802e0ec 	.word	0x0802e0ec
 8002308:	fffff801 	.word	0xfffff801
 800230c:	000003f3 	.word	0x000003f3
 8002310:	fffffc0d 	.word	0xfffffc0d
 8002314:	45cb      	cmp	fp, r9
 8002316:	d200      	bcs.n	800231a <__aeabi_ddiv+0x23a>
 8002318:	e0f8      	b.n	800250c <__aeabi_ddiv+0x42c>
 800231a:	d100      	bne.n	800231e <__aeabi_ddiv+0x23e>
 800231c:	e0f3      	b.n	8002506 <__aeabi_ddiv+0x426>
 800231e:	2301      	movs	r3, #1
 8002320:	425b      	negs	r3, r3
 8002322:	469c      	mov	ip, r3
 8002324:	4644      	mov	r4, r8
 8002326:	4648      	mov	r0, r9
 8002328:	2500      	movs	r5, #0
 800232a:	44e2      	add	sl, ip
 800232c:	465b      	mov	r3, fp
 800232e:	0e17      	lsrs	r7, r2, #24
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	431f      	orrs	r7, r3
 8002334:	0c19      	lsrs	r1, r3, #16
 8002336:	043b      	lsls	r3, r7, #16
 8002338:	0212      	lsls	r2, r2, #8
 800233a:	9700      	str	r7, [sp, #0]
 800233c:	0c1f      	lsrs	r7, r3, #16
 800233e:	4691      	mov	r9, r2
 8002340:	9102      	str	r1, [sp, #8]
 8002342:	9703      	str	r7, [sp, #12]
 8002344:	f7fd ffb4 	bl	80002b0 <__aeabi_uidivmod>
 8002348:	0002      	movs	r2, r0
 800234a:	437a      	muls	r2, r7
 800234c:	040b      	lsls	r3, r1, #16
 800234e:	0c21      	lsrs	r1, r4, #16
 8002350:	4680      	mov	r8, r0
 8002352:	4319      	orrs	r1, r3
 8002354:	428a      	cmp	r2, r1
 8002356:	d909      	bls.n	800236c <__aeabi_ddiv+0x28c>
 8002358:	9f00      	ldr	r7, [sp, #0]
 800235a:	2301      	movs	r3, #1
 800235c:	46bc      	mov	ip, r7
 800235e:	425b      	negs	r3, r3
 8002360:	4461      	add	r1, ip
 8002362:	469c      	mov	ip, r3
 8002364:	44e0      	add	r8, ip
 8002366:	428f      	cmp	r7, r1
 8002368:	d800      	bhi.n	800236c <__aeabi_ddiv+0x28c>
 800236a:	e15c      	b.n	8002626 <__aeabi_ddiv+0x546>
 800236c:	1a88      	subs	r0, r1, r2
 800236e:	9902      	ldr	r1, [sp, #8]
 8002370:	f7fd ff9e 	bl	80002b0 <__aeabi_uidivmod>
 8002374:	9a03      	ldr	r2, [sp, #12]
 8002376:	0424      	lsls	r4, r4, #16
 8002378:	4342      	muls	r2, r0
 800237a:	0409      	lsls	r1, r1, #16
 800237c:	0c24      	lsrs	r4, r4, #16
 800237e:	0003      	movs	r3, r0
 8002380:	430c      	orrs	r4, r1
 8002382:	42a2      	cmp	r2, r4
 8002384:	d906      	bls.n	8002394 <__aeabi_ddiv+0x2b4>
 8002386:	9900      	ldr	r1, [sp, #0]
 8002388:	3b01      	subs	r3, #1
 800238a:	468c      	mov	ip, r1
 800238c:	4464      	add	r4, ip
 800238e:	42a1      	cmp	r1, r4
 8002390:	d800      	bhi.n	8002394 <__aeabi_ddiv+0x2b4>
 8002392:	e142      	b.n	800261a <__aeabi_ddiv+0x53a>
 8002394:	1aa0      	subs	r0, r4, r2
 8002396:	4642      	mov	r2, r8
 8002398:	0412      	lsls	r2, r2, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	4693      	mov	fp, r2
 800239e:	464b      	mov	r3, r9
 80023a0:	4659      	mov	r1, fp
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	001f      	movs	r7, r3
 80023a6:	9304      	str	r3, [sp, #16]
 80023a8:	040b      	lsls	r3, r1, #16
 80023aa:	4649      	mov	r1, r9
 80023ac:	0409      	lsls	r1, r1, #16
 80023ae:	0c09      	lsrs	r1, r1, #16
 80023b0:	000c      	movs	r4, r1
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	435c      	muls	r4, r3
 80023b6:	0c12      	lsrs	r2, r2, #16
 80023b8:	437b      	muls	r3, r7
 80023ba:	4688      	mov	r8, r1
 80023bc:	4351      	muls	r1, r2
 80023be:	437a      	muls	r2, r7
 80023c0:	0c27      	lsrs	r7, r4, #16
 80023c2:	46bc      	mov	ip, r7
 80023c4:	185b      	adds	r3, r3, r1
 80023c6:	4463      	add	r3, ip
 80023c8:	4299      	cmp	r1, r3
 80023ca:	d903      	bls.n	80023d4 <__aeabi_ddiv+0x2f4>
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0249      	lsls	r1, r1, #9
 80023d0:	468c      	mov	ip, r1
 80023d2:	4462      	add	r2, ip
 80023d4:	0c19      	lsrs	r1, r3, #16
 80023d6:	0424      	lsls	r4, r4, #16
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	0c24      	lsrs	r4, r4, #16
 80023dc:	188a      	adds	r2, r1, r2
 80023de:	191c      	adds	r4, r3, r4
 80023e0:	4290      	cmp	r0, r2
 80023e2:	d302      	bcc.n	80023ea <__aeabi_ddiv+0x30a>
 80023e4:	d116      	bne.n	8002414 <__aeabi_ddiv+0x334>
 80023e6:	42a5      	cmp	r5, r4
 80023e8:	d214      	bcs.n	8002414 <__aeabi_ddiv+0x334>
 80023ea:	465b      	mov	r3, fp
 80023ec:	9f00      	ldr	r7, [sp, #0]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	444d      	add	r5, r9
 80023f2:	9305      	str	r3, [sp, #20]
 80023f4:	454d      	cmp	r5, r9
 80023f6:	419b      	sbcs	r3, r3
 80023f8:	46bc      	mov	ip, r7
 80023fa:	425b      	negs	r3, r3
 80023fc:	4463      	add	r3, ip
 80023fe:	18c0      	adds	r0, r0, r3
 8002400:	4287      	cmp	r7, r0
 8002402:	d300      	bcc.n	8002406 <__aeabi_ddiv+0x326>
 8002404:	e102      	b.n	800260c <__aeabi_ddiv+0x52c>
 8002406:	4282      	cmp	r2, r0
 8002408:	d900      	bls.n	800240c <__aeabi_ddiv+0x32c>
 800240a:	e129      	b.n	8002660 <__aeabi_ddiv+0x580>
 800240c:	d100      	bne.n	8002410 <__aeabi_ddiv+0x330>
 800240e:	e124      	b.n	800265a <__aeabi_ddiv+0x57a>
 8002410:	9b05      	ldr	r3, [sp, #20]
 8002412:	469b      	mov	fp, r3
 8002414:	1b2c      	subs	r4, r5, r4
 8002416:	42a5      	cmp	r5, r4
 8002418:	41ad      	sbcs	r5, r5
 800241a:	9b00      	ldr	r3, [sp, #0]
 800241c:	1a80      	subs	r0, r0, r2
 800241e:	426d      	negs	r5, r5
 8002420:	1b40      	subs	r0, r0, r5
 8002422:	4283      	cmp	r3, r0
 8002424:	d100      	bne.n	8002428 <__aeabi_ddiv+0x348>
 8002426:	e10f      	b.n	8002648 <__aeabi_ddiv+0x568>
 8002428:	9902      	ldr	r1, [sp, #8]
 800242a:	f7fd ff41 	bl	80002b0 <__aeabi_uidivmod>
 800242e:	9a03      	ldr	r2, [sp, #12]
 8002430:	040b      	lsls	r3, r1, #16
 8002432:	4342      	muls	r2, r0
 8002434:	0c21      	lsrs	r1, r4, #16
 8002436:	0005      	movs	r5, r0
 8002438:	4319      	orrs	r1, r3
 800243a:	428a      	cmp	r2, r1
 800243c:	d900      	bls.n	8002440 <__aeabi_ddiv+0x360>
 800243e:	e0cb      	b.n	80025d8 <__aeabi_ddiv+0x4f8>
 8002440:	1a88      	subs	r0, r1, r2
 8002442:	9902      	ldr	r1, [sp, #8]
 8002444:	f7fd ff34 	bl	80002b0 <__aeabi_uidivmod>
 8002448:	9a03      	ldr	r2, [sp, #12]
 800244a:	0424      	lsls	r4, r4, #16
 800244c:	4342      	muls	r2, r0
 800244e:	0409      	lsls	r1, r1, #16
 8002450:	0c24      	lsrs	r4, r4, #16
 8002452:	0003      	movs	r3, r0
 8002454:	430c      	orrs	r4, r1
 8002456:	42a2      	cmp	r2, r4
 8002458:	d900      	bls.n	800245c <__aeabi_ddiv+0x37c>
 800245a:	e0ca      	b.n	80025f2 <__aeabi_ddiv+0x512>
 800245c:	4641      	mov	r1, r8
 800245e:	1aa4      	subs	r4, r4, r2
 8002460:	042a      	lsls	r2, r5, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	9f04      	ldr	r7, [sp, #16]
 8002466:	0413      	lsls	r3, r2, #16
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	4359      	muls	r1, r3
 800246c:	4640      	mov	r0, r8
 800246e:	437b      	muls	r3, r7
 8002470:	469c      	mov	ip, r3
 8002472:	0c15      	lsrs	r5, r2, #16
 8002474:	4368      	muls	r0, r5
 8002476:	0c0b      	lsrs	r3, r1, #16
 8002478:	4484      	add	ip, r0
 800247a:	4463      	add	r3, ip
 800247c:	437d      	muls	r5, r7
 800247e:	4298      	cmp	r0, r3
 8002480:	d903      	bls.n	800248a <__aeabi_ddiv+0x3aa>
 8002482:	2080      	movs	r0, #128	@ 0x80
 8002484:	0240      	lsls	r0, r0, #9
 8002486:	4684      	mov	ip, r0
 8002488:	4465      	add	r5, ip
 800248a:	0c18      	lsrs	r0, r3, #16
 800248c:	0409      	lsls	r1, r1, #16
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	0c09      	lsrs	r1, r1, #16
 8002492:	1940      	adds	r0, r0, r5
 8002494:	185b      	adds	r3, r3, r1
 8002496:	4284      	cmp	r4, r0
 8002498:	d327      	bcc.n	80024ea <__aeabi_ddiv+0x40a>
 800249a:	d023      	beq.n	80024e4 <__aeabi_ddiv+0x404>
 800249c:	2301      	movs	r3, #1
 800249e:	0035      	movs	r5, r6
 80024a0:	431a      	orrs	r2, r3
 80024a2:	4b94      	ldr	r3, [pc, #592]	@ (80026f4 <__aeabi_ddiv+0x614>)
 80024a4:	4453      	add	r3, sl
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	dd60      	ble.n	800256c <__aeabi_ddiv+0x48c>
 80024aa:	0751      	lsls	r1, r2, #29
 80024ac:	d000      	beq.n	80024b0 <__aeabi_ddiv+0x3d0>
 80024ae:	e086      	b.n	80025be <__aeabi_ddiv+0x4de>
 80024b0:	002e      	movs	r6, r5
 80024b2:	08d1      	lsrs	r1, r2, #3
 80024b4:	465a      	mov	r2, fp
 80024b6:	01d2      	lsls	r2, r2, #7
 80024b8:	d506      	bpl.n	80024c8 <__aeabi_ddiv+0x3e8>
 80024ba:	465a      	mov	r2, fp
 80024bc:	4b8e      	ldr	r3, [pc, #568]	@ (80026f8 <__aeabi_ddiv+0x618>)
 80024be:	401a      	ands	r2, r3
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	4693      	mov	fp, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4453      	add	r3, sl
 80024c8:	4a8c      	ldr	r2, [pc, #560]	@ (80026fc <__aeabi_ddiv+0x61c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_ddiv+0x3f0>
 80024ce:	e680      	b.n	80021d2 <__aeabi_ddiv+0xf2>
 80024d0:	465a      	mov	r2, fp
 80024d2:	0752      	lsls	r2, r2, #29
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4690      	mov	r8, r2
 80024d8:	465a      	mov	r2, fp
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	0254      	lsls	r4, r2, #9
 80024de:	0b24      	lsrs	r4, r4, #12
 80024e0:	0d5b      	lsrs	r3, r3, #21
 80024e2:	e669      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80024e4:	0035      	movs	r5, r6
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0db      	beq.n	80024a2 <__aeabi_ddiv+0x3c2>
 80024ea:	9d00      	ldr	r5, [sp, #0]
 80024ec:	1e51      	subs	r1, r2, #1
 80024ee:	46ac      	mov	ip, r5
 80024f0:	4464      	add	r4, ip
 80024f2:	42ac      	cmp	r4, r5
 80024f4:	d200      	bcs.n	80024f8 <__aeabi_ddiv+0x418>
 80024f6:	e09e      	b.n	8002636 <__aeabi_ddiv+0x556>
 80024f8:	4284      	cmp	r4, r0
 80024fa:	d200      	bcs.n	80024fe <__aeabi_ddiv+0x41e>
 80024fc:	e0e1      	b.n	80026c2 <__aeabi_ddiv+0x5e2>
 80024fe:	d100      	bne.n	8002502 <__aeabi_ddiv+0x422>
 8002500:	e0ee      	b.n	80026e0 <__aeabi_ddiv+0x600>
 8002502:	000a      	movs	r2, r1
 8002504:	e7ca      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002506:	4542      	cmp	r2, r8
 8002508:	d900      	bls.n	800250c <__aeabi_ddiv+0x42c>
 800250a:	e708      	b.n	800231e <__aeabi_ddiv+0x23e>
 800250c:	464b      	mov	r3, r9
 800250e:	07dc      	lsls	r4, r3, #31
 8002510:	0858      	lsrs	r0, r3, #1
 8002512:	4643      	mov	r3, r8
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	431c      	orrs	r4, r3
 8002518:	4643      	mov	r3, r8
 800251a:	07dd      	lsls	r5, r3, #31
 800251c:	e706      	b.n	800232c <__aeabi_ddiv+0x24c>
 800251e:	f001 fa83 	bl	8003a28 <__clzsi2>
 8002522:	2315      	movs	r3, #21
 8002524:	469c      	mov	ip, r3
 8002526:	4484      	add	ip, r0
 8002528:	0002      	movs	r2, r0
 800252a:	4663      	mov	r3, ip
 800252c:	3220      	adds	r2, #32
 800252e:	2b1c      	cmp	r3, #28
 8002530:	dc00      	bgt.n	8002534 <__aeabi_ddiv+0x454>
 8002532:	e692      	b.n	800225a <__aeabi_ddiv+0x17a>
 8002534:	0023      	movs	r3, r4
 8002536:	3808      	subs	r0, #8
 8002538:	4083      	lsls	r3, r0
 800253a:	4699      	mov	r9, r3
 800253c:	2300      	movs	r3, #0
 800253e:	4698      	mov	r8, r3
 8002540:	e69a      	b.n	8002278 <__aeabi_ddiv+0x198>
 8002542:	f001 fa71 	bl	8003a28 <__clzsi2>
 8002546:	0002      	movs	r2, r0
 8002548:	0003      	movs	r3, r0
 800254a:	3215      	adds	r2, #21
 800254c:	3320      	adds	r3, #32
 800254e:	2a1c      	cmp	r2, #28
 8002550:	dc00      	bgt.n	8002554 <__aeabi_ddiv+0x474>
 8002552:	e65f      	b.n	8002214 <__aeabi_ddiv+0x134>
 8002554:	9900      	ldr	r1, [sp, #0]
 8002556:	3808      	subs	r0, #8
 8002558:	4081      	lsls	r1, r0
 800255a:	2200      	movs	r2, #0
 800255c:	468b      	mov	fp, r1
 800255e:	e666      	b.n	800222e <__aeabi_ddiv+0x14e>
 8002560:	2200      	movs	r2, #0
 8002562:	002e      	movs	r6, r5
 8002564:	2400      	movs	r4, #0
 8002566:	4690      	mov	r8, r2
 8002568:	4b65      	ldr	r3, [pc, #404]	@ (8002700 <__aeabi_ddiv+0x620>)
 800256a:	e625      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 800256c:	002e      	movs	r6, r5
 800256e:	2101      	movs	r1, #1
 8002570:	1ac9      	subs	r1, r1, r3
 8002572:	2938      	cmp	r1, #56	@ 0x38
 8002574:	dd00      	ble.n	8002578 <__aeabi_ddiv+0x498>
 8002576:	e61b      	b.n	80021b0 <__aeabi_ddiv+0xd0>
 8002578:	291f      	cmp	r1, #31
 800257a:	dc7e      	bgt.n	800267a <__aeabi_ddiv+0x59a>
 800257c:	4861      	ldr	r0, [pc, #388]	@ (8002704 <__aeabi_ddiv+0x624>)
 800257e:	0014      	movs	r4, r2
 8002580:	4450      	add	r0, sl
 8002582:	465b      	mov	r3, fp
 8002584:	4082      	lsls	r2, r0
 8002586:	4083      	lsls	r3, r0
 8002588:	40cc      	lsrs	r4, r1
 800258a:	1e50      	subs	r0, r2, #1
 800258c:	4182      	sbcs	r2, r0
 800258e:	4323      	orrs	r3, r4
 8002590:	431a      	orrs	r2, r3
 8002592:	465b      	mov	r3, fp
 8002594:	40cb      	lsrs	r3, r1
 8002596:	0751      	lsls	r1, r2, #29
 8002598:	d009      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 800259a:	210f      	movs	r1, #15
 800259c:	4011      	ands	r1, r2
 800259e:	2904      	cmp	r1, #4
 80025a0:	d005      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 80025a2:	1d11      	adds	r1, r2, #4
 80025a4:	4291      	cmp	r1, r2
 80025a6:	4192      	sbcs	r2, r2
 80025a8:	4252      	negs	r2, r2
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	000a      	movs	r2, r1
 80025ae:	0219      	lsls	r1, r3, #8
 80025b0:	d400      	bmi.n	80025b4 <__aeabi_ddiv+0x4d4>
 80025b2:	e09b      	b.n	80026ec <__aeabi_ddiv+0x60c>
 80025b4:	2200      	movs	r2, #0
 80025b6:	2301      	movs	r3, #1
 80025b8:	2400      	movs	r4, #0
 80025ba:	4690      	mov	r8, r2
 80025bc:	e5fc      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80025be:	210f      	movs	r1, #15
 80025c0:	4011      	ands	r1, r2
 80025c2:	2904      	cmp	r1, #4
 80025c4:	d100      	bne.n	80025c8 <__aeabi_ddiv+0x4e8>
 80025c6:	e773      	b.n	80024b0 <__aeabi_ddiv+0x3d0>
 80025c8:	1d11      	adds	r1, r2, #4
 80025ca:	4291      	cmp	r1, r2
 80025cc:	4192      	sbcs	r2, r2
 80025ce:	4252      	negs	r2, r2
 80025d0:	002e      	movs	r6, r5
 80025d2:	08c9      	lsrs	r1, r1, #3
 80025d4:	4493      	add	fp, r2
 80025d6:	e76d      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 80025d8:	9b00      	ldr	r3, [sp, #0]
 80025da:	3d01      	subs	r5, #1
 80025dc:	469c      	mov	ip, r3
 80025de:	4461      	add	r1, ip
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d900      	bls.n	80025e6 <__aeabi_ddiv+0x506>
 80025e4:	e72c      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025e6:	428a      	cmp	r2, r1
 80025e8:	d800      	bhi.n	80025ec <__aeabi_ddiv+0x50c>
 80025ea:	e729      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025ec:	1e85      	subs	r5, r0, #2
 80025ee:	4461      	add	r1, ip
 80025f0:	e726      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025f2:	9900      	ldr	r1, [sp, #0]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	468c      	mov	ip, r1
 80025f8:	4464      	add	r4, ip
 80025fa:	42a1      	cmp	r1, r4
 80025fc:	d900      	bls.n	8002600 <__aeabi_ddiv+0x520>
 80025fe:	e72d      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002600:	42a2      	cmp	r2, r4
 8002602:	d800      	bhi.n	8002606 <__aeabi_ddiv+0x526>
 8002604:	e72a      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002606:	1e83      	subs	r3, r0, #2
 8002608:	4464      	add	r4, ip
 800260a:	e727      	b.n	800245c <__aeabi_ddiv+0x37c>
 800260c:	4287      	cmp	r7, r0
 800260e:	d000      	beq.n	8002612 <__aeabi_ddiv+0x532>
 8002610:	e6fe      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002612:	45a9      	cmp	r9, r5
 8002614:	d900      	bls.n	8002618 <__aeabi_ddiv+0x538>
 8002616:	e6fb      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002618:	e6f5      	b.n	8002406 <__aeabi_ddiv+0x326>
 800261a:	42a2      	cmp	r2, r4
 800261c:	d800      	bhi.n	8002620 <__aeabi_ddiv+0x540>
 800261e:	e6b9      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002620:	1e83      	subs	r3, r0, #2
 8002622:	4464      	add	r4, ip
 8002624:	e6b6      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002626:	428a      	cmp	r2, r1
 8002628:	d800      	bhi.n	800262c <__aeabi_ddiv+0x54c>
 800262a:	e69f      	b.n	800236c <__aeabi_ddiv+0x28c>
 800262c:	46bc      	mov	ip, r7
 800262e:	1e83      	subs	r3, r0, #2
 8002630:	4698      	mov	r8, r3
 8002632:	4461      	add	r1, ip
 8002634:	e69a      	b.n	800236c <__aeabi_ddiv+0x28c>
 8002636:	000a      	movs	r2, r1
 8002638:	4284      	cmp	r4, r0
 800263a:	d000      	beq.n	800263e <__aeabi_ddiv+0x55e>
 800263c:	e72e      	b.n	800249c <__aeabi_ddiv+0x3bc>
 800263e:	454b      	cmp	r3, r9
 8002640:	d000      	beq.n	8002644 <__aeabi_ddiv+0x564>
 8002642:	e72b      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002644:	0035      	movs	r5, r6
 8002646:	e72c      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <__aeabi_ddiv+0x614>)
 800264a:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <__aeabi_ddiv+0x628>)
 800264c:	4453      	add	r3, sl
 800264e:	4592      	cmp	sl, r2
 8002650:	db43      	blt.n	80026da <__aeabi_ddiv+0x5fa>
 8002652:	2201      	movs	r2, #1
 8002654:	2100      	movs	r1, #0
 8002656:	4493      	add	fp, r2
 8002658:	e72c      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 800265a:	42ac      	cmp	r4, r5
 800265c:	d800      	bhi.n	8002660 <__aeabi_ddiv+0x580>
 800265e:	e6d7      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002660:	2302      	movs	r3, #2
 8002662:	425b      	negs	r3, r3
 8002664:	469c      	mov	ip, r3
 8002666:	9900      	ldr	r1, [sp, #0]
 8002668:	444d      	add	r5, r9
 800266a:	454d      	cmp	r5, r9
 800266c:	419b      	sbcs	r3, r3
 800266e:	44e3      	add	fp, ip
 8002670:	468c      	mov	ip, r1
 8002672:	425b      	negs	r3, r3
 8002674:	4463      	add	r3, ip
 8002676:	18c0      	adds	r0, r0, r3
 8002678:	e6cc      	b.n	8002414 <__aeabi_ddiv+0x334>
 800267a:	201f      	movs	r0, #31
 800267c:	4240      	negs	r0, r0
 800267e:	1ac3      	subs	r3, r0, r3
 8002680:	4658      	mov	r0, fp
 8002682:	40d8      	lsrs	r0, r3
 8002684:	2920      	cmp	r1, #32
 8002686:	d004      	beq.n	8002692 <__aeabi_ddiv+0x5b2>
 8002688:	4659      	mov	r1, fp
 800268a:	4b20      	ldr	r3, [pc, #128]	@ (800270c <__aeabi_ddiv+0x62c>)
 800268c:	4453      	add	r3, sl
 800268e:	4099      	lsls	r1, r3
 8002690:	430a      	orrs	r2, r1
 8002692:	1e53      	subs	r3, r2, #1
 8002694:	419a      	sbcs	r2, r3
 8002696:	2307      	movs	r3, #7
 8002698:	0019      	movs	r1, r3
 800269a:	4302      	orrs	r2, r0
 800269c:	2400      	movs	r4, #0
 800269e:	4011      	ands	r1, r2
 80026a0:	4213      	tst	r3, r2
 80026a2:	d009      	beq.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026a4:	3308      	adds	r3, #8
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d01d      	beq.n	80026e8 <__aeabi_ddiv+0x608>
 80026ac:	1d13      	adds	r3, r2, #4
 80026ae:	4293      	cmp	r3, r2
 80026b0:	4189      	sbcs	r1, r1
 80026b2:	001a      	movs	r2, r3
 80026b4:	4249      	negs	r1, r1
 80026b6:	0749      	lsls	r1, r1, #29
 80026b8:	08d2      	lsrs	r2, r2, #3
 80026ba:	430a      	orrs	r2, r1
 80026bc:	4690      	mov	r8, r2
 80026be:	2300      	movs	r3, #0
 80026c0:	e57a      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80026c2:	4649      	mov	r1, r9
 80026c4:	9f00      	ldr	r7, [sp, #0]
 80026c6:	004d      	lsls	r5, r1, #1
 80026c8:	454d      	cmp	r5, r9
 80026ca:	4189      	sbcs	r1, r1
 80026cc:	46bc      	mov	ip, r7
 80026ce:	4249      	negs	r1, r1
 80026d0:	4461      	add	r1, ip
 80026d2:	46a9      	mov	r9, r5
 80026d4:	3a02      	subs	r2, #2
 80026d6:	1864      	adds	r4, r4, r1
 80026d8:	e7ae      	b.n	8002638 <__aeabi_ddiv+0x558>
 80026da:	2201      	movs	r2, #1
 80026dc:	4252      	negs	r2, r2
 80026de:	e746      	b.n	800256e <__aeabi_ddiv+0x48e>
 80026e0:	4599      	cmp	r9, r3
 80026e2:	d3ee      	bcc.n	80026c2 <__aeabi_ddiv+0x5e2>
 80026e4:	000a      	movs	r2, r1
 80026e6:	e7aa      	b.n	800263e <__aeabi_ddiv+0x55e>
 80026e8:	2100      	movs	r1, #0
 80026ea:	e7e5      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026ec:	0759      	lsls	r1, r3, #29
 80026ee:	025b      	lsls	r3, r3, #9
 80026f0:	0b1c      	lsrs	r4, r3, #12
 80026f2:	e7e1      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026f4:	000003ff 	.word	0x000003ff
 80026f8:	feffffff 	.word	0xfeffffff
 80026fc:	000007fe 	.word	0x000007fe
 8002700:	000007ff 	.word	0x000007ff
 8002704:	0000041e 	.word	0x0000041e
 8002708:	fffffc02 	.word	0xfffffc02
 800270c:	0000043e 	.word	0x0000043e

08002710 <__eqdf2>:
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	4657      	mov	r7, sl
 8002714:	46de      	mov	lr, fp
 8002716:	464e      	mov	r6, r9
 8002718:	4645      	mov	r5, r8
 800271a:	b5e0      	push	{r5, r6, r7, lr}
 800271c:	000d      	movs	r5, r1
 800271e:	0004      	movs	r4, r0
 8002720:	0fe8      	lsrs	r0, r5, #31
 8002722:	4683      	mov	fp, r0
 8002724:	0309      	lsls	r1, r1, #12
 8002726:	0fd8      	lsrs	r0, r3, #31
 8002728:	0b09      	lsrs	r1, r1, #12
 800272a:	4682      	mov	sl, r0
 800272c:	4819      	ldr	r0, [pc, #100]	@ (8002794 <__eqdf2+0x84>)
 800272e:	468c      	mov	ip, r1
 8002730:	031f      	lsls	r7, r3, #12
 8002732:	0069      	lsls	r1, r5, #1
 8002734:	005e      	lsls	r6, r3, #1
 8002736:	0d49      	lsrs	r1, r1, #21
 8002738:	0b3f      	lsrs	r7, r7, #12
 800273a:	0d76      	lsrs	r6, r6, #21
 800273c:	4281      	cmp	r1, r0
 800273e:	d018      	beq.n	8002772 <__eqdf2+0x62>
 8002740:	4286      	cmp	r6, r0
 8002742:	d00f      	beq.n	8002764 <__eqdf2+0x54>
 8002744:	2001      	movs	r0, #1
 8002746:	42b1      	cmp	r1, r6
 8002748:	d10d      	bne.n	8002766 <__eqdf2+0x56>
 800274a:	45bc      	cmp	ip, r7
 800274c:	d10b      	bne.n	8002766 <__eqdf2+0x56>
 800274e:	4294      	cmp	r4, r2
 8002750:	d109      	bne.n	8002766 <__eqdf2+0x56>
 8002752:	45d3      	cmp	fp, sl
 8002754:	d01c      	beq.n	8002790 <__eqdf2+0x80>
 8002756:	2900      	cmp	r1, #0
 8002758:	d105      	bne.n	8002766 <__eqdf2+0x56>
 800275a:	4660      	mov	r0, ip
 800275c:	4320      	orrs	r0, r4
 800275e:	1e43      	subs	r3, r0, #1
 8002760:	4198      	sbcs	r0, r3
 8002762:	e000      	b.n	8002766 <__eqdf2+0x56>
 8002764:	2001      	movs	r0, #1
 8002766:	bcf0      	pop	{r4, r5, r6, r7}
 8002768:	46bb      	mov	fp, r7
 800276a:	46b2      	mov	sl, r6
 800276c:	46a9      	mov	r9, r5
 800276e:	46a0      	mov	r8, r4
 8002770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002772:	2001      	movs	r0, #1
 8002774:	428e      	cmp	r6, r1
 8002776:	d1f6      	bne.n	8002766 <__eqdf2+0x56>
 8002778:	4661      	mov	r1, ip
 800277a:	4339      	orrs	r1, r7
 800277c:	000f      	movs	r7, r1
 800277e:	4317      	orrs	r7, r2
 8002780:	4327      	orrs	r7, r4
 8002782:	d1f0      	bne.n	8002766 <__eqdf2+0x56>
 8002784:	465b      	mov	r3, fp
 8002786:	4652      	mov	r2, sl
 8002788:	1a98      	subs	r0, r3, r2
 800278a:	1e43      	subs	r3, r0, #1
 800278c:	4198      	sbcs	r0, r3
 800278e:	e7ea      	b.n	8002766 <__eqdf2+0x56>
 8002790:	2000      	movs	r0, #0
 8002792:	e7e8      	b.n	8002766 <__eqdf2+0x56>
 8002794:	000007ff 	.word	0x000007ff

08002798 <__gedf2>:
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	4657      	mov	r7, sl
 800279c:	464e      	mov	r6, r9
 800279e:	4645      	mov	r5, r8
 80027a0:	46de      	mov	lr, fp
 80027a2:	b5e0      	push	{r5, r6, r7, lr}
 80027a4:	000d      	movs	r5, r1
 80027a6:	030e      	lsls	r6, r1, #12
 80027a8:	0049      	lsls	r1, r1, #1
 80027aa:	0d49      	lsrs	r1, r1, #21
 80027ac:	468a      	mov	sl, r1
 80027ae:	0fdf      	lsrs	r7, r3, #31
 80027b0:	0fe9      	lsrs	r1, r5, #31
 80027b2:	46bc      	mov	ip, r7
 80027b4:	b083      	sub	sp, #12
 80027b6:	4f2f      	ldr	r7, [pc, #188]	@ (8002874 <__gedf2+0xdc>)
 80027b8:	0004      	movs	r4, r0
 80027ba:	4680      	mov	r8, r0
 80027bc:	9101      	str	r1, [sp, #4]
 80027be:	0058      	lsls	r0, r3, #1
 80027c0:	0319      	lsls	r1, r3, #12
 80027c2:	4691      	mov	r9, r2
 80027c4:	0b36      	lsrs	r6, r6, #12
 80027c6:	0b09      	lsrs	r1, r1, #12
 80027c8:	0d40      	lsrs	r0, r0, #21
 80027ca:	45ba      	cmp	sl, r7
 80027cc:	d01d      	beq.n	800280a <__gedf2+0x72>
 80027ce:	42b8      	cmp	r0, r7
 80027d0:	d00d      	beq.n	80027ee <__gedf2+0x56>
 80027d2:	4657      	mov	r7, sl
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	d12a      	bne.n	800282e <__gedf2+0x96>
 80027d8:	4334      	orrs	r4, r6
 80027da:	2800      	cmp	r0, #0
 80027dc:	d124      	bne.n	8002828 <__gedf2+0x90>
 80027de:	430a      	orrs	r2, r1
 80027e0:	d036      	beq.n	8002850 <__gedf2+0xb8>
 80027e2:	2c00      	cmp	r4, #0
 80027e4:	d141      	bne.n	800286a <__gedf2+0xd2>
 80027e6:	4663      	mov	r3, ip
 80027e8:	0058      	lsls	r0, r3, #1
 80027ea:	3801      	subs	r0, #1
 80027ec:	e015      	b.n	800281a <__gedf2+0x82>
 80027ee:	4311      	orrs	r1, r2
 80027f0:	d138      	bne.n	8002864 <__gedf2+0xcc>
 80027f2:	4653      	mov	r3, sl
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <__gedf2+0x64>
 80027f8:	4326      	orrs	r6, r4
 80027fa:	d0f4      	beq.n	80027e6 <__gedf2+0x4e>
 80027fc:	9b01      	ldr	r3, [sp, #4]
 80027fe:	4563      	cmp	r3, ip
 8002800:	d107      	bne.n	8002812 <__gedf2+0x7a>
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	0058      	lsls	r0, r3, #1
 8002806:	3801      	subs	r0, #1
 8002808:	e007      	b.n	800281a <__gedf2+0x82>
 800280a:	4326      	orrs	r6, r4
 800280c:	d12a      	bne.n	8002864 <__gedf2+0xcc>
 800280e:	4550      	cmp	r0, sl
 8002810:	d021      	beq.n	8002856 <__gedf2+0xbe>
 8002812:	2001      	movs	r0, #1
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	425f      	negs	r7, r3
 8002818:	4338      	orrs	r0, r7
 800281a:	b003      	add	sp, #12
 800281c:	bcf0      	pop	{r4, r5, r6, r7}
 800281e:	46bb      	mov	fp, r7
 8002820:	46b2      	mov	sl, r6
 8002822:	46a9      	mov	r9, r5
 8002824:	46a0      	mov	r8, r4
 8002826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002828:	2c00      	cmp	r4, #0
 800282a:	d0dc      	beq.n	80027e6 <__gedf2+0x4e>
 800282c:	e7e6      	b.n	80027fc <__gedf2+0x64>
 800282e:	2800      	cmp	r0, #0
 8002830:	d0ef      	beq.n	8002812 <__gedf2+0x7a>
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	4563      	cmp	r3, ip
 8002836:	d1ec      	bne.n	8002812 <__gedf2+0x7a>
 8002838:	4582      	cmp	sl, r0
 800283a:	dcea      	bgt.n	8002812 <__gedf2+0x7a>
 800283c:	dbe1      	blt.n	8002802 <__gedf2+0x6a>
 800283e:	428e      	cmp	r6, r1
 8002840:	d8e7      	bhi.n	8002812 <__gedf2+0x7a>
 8002842:	d1de      	bne.n	8002802 <__gedf2+0x6a>
 8002844:	45c8      	cmp	r8, r9
 8002846:	d8e4      	bhi.n	8002812 <__gedf2+0x7a>
 8002848:	2000      	movs	r0, #0
 800284a:	45c8      	cmp	r8, r9
 800284c:	d2e5      	bcs.n	800281a <__gedf2+0x82>
 800284e:	e7d8      	b.n	8002802 <__gedf2+0x6a>
 8002850:	2c00      	cmp	r4, #0
 8002852:	d0e2      	beq.n	800281a <__gedf2+0x82>
 8002854:	e7dd      	b.n	8002812 <__gedf2+0x7a>
 8002856:	4311      	orrs	r1, r2
 8002858:	d104      	bne.n	8002864 <__gedf2+0xcc>
 800285a:	9b01      	ldr	r3, [sp, #4]
 800285c:	4563      	cmp	r3, ip
 800285e:	d1d8      	bne.n	8002812 <__gedf2+0x7a>
 8002860:	2000      	movs	r0, #0
 8002862:	e7da      	b.n	800281a <__gedf2+0x82>
 8002864:	2002      	movs	r0, #2
 8002866:	4240      	negs	r0, r0
 8002868:	e7d7      	b.n	800281a <__gedf2+0x82>
 800286a:	9b01      	ldr	r3, [sp, #4]
 800286c:	4563      	cmp	r3, ip
 800286e:	d0e6      	beq.n	800283e <__gedf2+0xa6>
 8002870:	e7cf      	b.n	8002812 <__gedf2+0x7a>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	000007ff 	.word	0x000007ff

08002878 <__ledf2>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	4657      	mov	r7, sl
 800287c:	464e      	mov	r6, r9
 800287e:	4645      	mov	r5, r8
 8002880:	46de      	mov	lr, fp
 8002882:	b5e0      	push	{r5, r6, r7, lr}
 8002884:	000d      	movs	r5, r1
 8002886:	030e      	lsls	r6, r1, #12
 8002888:	0049      	lsls	r1, r1, #1
 800288a:	0d49      	lsrs	r1, r1, #21
 800288c:	468a      	mov	sl, r1
 800288e:	0fdf      	lsrs	r7, r3, #31
 8002890:	0fe9      	lsrs	r1, r5, #31
 8002892:	46bc      	mov	ip, r7
 8002894:	b083      	sub	sp, #12
 8002896:	4f2e      	ldr	r7, [pc, #184]	@ (8002950 <__ledf2+0xd8>)
 8002898:	0004      	movs	r4, r0
 800289a:	4680      	mov	r8, r0
 800289c:	9101      	str	r1, [sp, #4]
 800289e:	0058      	lsls	r0, r3, #1
 80028a0:	0319      	lsls	r1, r3, #12
 80028a2:	4691      	mov	r9, r2
 80028a4:	0b36      	lsrs	r6, r6, #12
 80028a6:	0b09      	lsrs	r1, r1, #12
 80028a8:	0d40      	lsrs	r0, r0, #21
 80028aa:	45ba      	cmp	sl, r7
 80028ac:	d01e      	beq.n	80028ec <__ledf2+0x74>
 80028ae:	42b8      	cmp	r0, r7
 80028b0:	d00d      	beq.n	80028ce <__ledf2+0x56>
 80028b2:	4657      	mov	r7, sl
 80028b4:	2f00      	cmp	r7, #0
 80028b6:	d127      	bne.n	8002908 <__ledf2+0x90>
 80028b8:	4334      	orrs	r4, r6
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d133      	bne.n	8002926 <__ledf2+0xae>
 80028be:	430a      	orrs	r2, r1
 80028c0:	d034      	beq.n	800292c <__ledf2+0xb4>
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d140      	bne.n	8002948 <__ledf2+0xd0>
 80028c6:	4663      	mov	r3, ip
 80028c8:	0058      	lsls	r0, r3, #1
 80028ca:	3801      	subs	r0, #1
 80028cc:	e015      	b.n	80028fa <__ledf2+0x82>
 80028ce:	4311      	orrs	r1, r2
 80028d0:	d112      	bne.n	80028f8 <__ledf2+0x80>
 80028d2:	4653      	mov	r3, sl
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <__ledf2+0x64>
 80028d8:	4326      	orrs	r6, r4
 80028da:	d0f4      	beq.n	80028c6 <__ledf2+0x4e>
 80028dc:	9b01      	ldr	r3, [sp, #4]
 80028de:	4563      	cmp	r3, ip
 80028e0:	d01d      	beq.n	800291e <__ledf2+0xa6>
 80028e2:	2001      	movs	r0, #1
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	425f      	negs	r7, r3
 80028e8:	4338      	orrs	r0, r7
 80028ea:	e006      	b.n	80028fa <__ledf2+0x82>
 80028ec:	4326      	orrs	r6, r4
 80028ee:	d103      	bne.n	80028f8 <__ledf2+0x80>
 80028f0:	4550      	cmp	r0, sl
 80028f2:	d1f6      	bne.n	80028e2 <__ledf2+0x6a>
 80028f4:	4311      	orrs	r1, r2
 80028f6:	d01c      	beq.n	8002932 <__ledf2+0xba>
 80028f8:	2002      	movs	r0, #2
 80028fa:	b003      	add	sp, #12
 80028fc:	bcf0      	pop	{r4, r5, r6, r7}
 80028fe:	46bb      	mov	fp, r7
 8002900:	46b2      	mov	sl, r6
 8002902:	46a9      	mov	r9, r5
 8002904:	46a0      	mov	r8, r4
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	2800      	cmp	r0, #0
 800290a:	d0ea      	beq.n	80028e2 <__ledf2+0x6a>
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	4563      	cmp	r3, ip
 8002910:	d1e7      	bne.n	80028e2 <__ledf2+0x6a>
 8002912:	4582      	cmp	sl, r0
 8002914:	dce5      	bgt.n	80028e2 <__ledf2+0x6a>
 8002916:	db02      	blt.n	800291e <__ledf2+0xa6>
 8002918:	428e      	cmp	r6, r1
 800291a:	d8e2      	bhi.n	80028e2 <__ledf2+0x6a>
 800291c:	d00e      	beq.n	800293c <__ledf2+0xc4>
 800291e:	9b01      	ldr	r3, [sp, #4]
 8002920:	0058      	lsls	r0, r3, #1
 8002922:	3801      	subs	r0, #1
 8002924:	e7e9      	b.n	80028fa <__ledf2+0x82>
 8002926:	2c00      	cmp	r4, #0
 8002928:	d0cd      	beq.n	80028c6 <__ledf2+0x4e>
 800292a:	e7d7      	b.n	80028dc <__ledf2+0x64>
 800292c:	2c00      	cmp	r4, #0
 800292e:	d0e4      	beq.n	80028fa <__ledf2+0x82>
 8002930:	e7d7      	b.n	80028e2 <__ledf2+0x6a>
 8002932:	9b01      	ldr	r3, [sp, #4]
 8002934:	2000      	movs	r0, #0
 8002936:	4563      	cmp	r3, ip
 8002938:	d0df      	beq.n	80028fa <__ledf2+0x82>
 800293a:	e7d2      	b.n	80028e2 <__ledf2+0x6a>
 800293c:	45c8      	cmp	r8, r9
 800293e:	d8d0      	bhi.n	80028e2 <__ledf2+0x6a>
 8002940:	2000      	movs	r0, #0
 8002942:	45c8      	cmp	r8, r9
 8002944:	d2d9      	bcs.n	80028fa <__ledf2+0x82>
 8002946:	e7ea      	b.n	800291e <__ledf2+0xa6>
 8002948:	9b01      	ldr	r3, [sp, #4]
 800294a:	4563      	cmp	r3, ip
 800294c:	d0e4      	beq.n	8002918 <__ledf2+0xa0>
 800294e:	e7c8      	b.n	80028e2 <__ledf2+0x6a>
 8002950:	000007ff 	.word	0x000007ff

08002954 <__aeabi_dmul>:
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	4657      	mov	r7, sl
 8002958:	464e      	mov	r6, r9
 800295a:	46de      	mov	lr, fp
 800295c:	4645      	mov	r5, r8
 800295e:	b5e0      	push	{r5, r6, r7, lr}
 8002960:	001f      	movs	r7, r3
 8002962:	030b      	lsls	r3, r1, #12
 8002964:	0b1b      	lsrs	r3, r3, #12
 8002966:	0016      	movs	r6, r2
 8002968:	469a      	mov	sl, r3
 800296a:	0fca      	lsrs	r2, r1, #31
 800296c:	004b      	lsls	r3, r1, #1
 800296e:	0004      	movs	r4, r0
 8002970:	4691      	mov	r9, r2
 8002972:	b085      	sub	sp, #20
 8002974:	0d5b      	lsrs	r3, r3, #21
 8002976:	d100      	bne.n	800297a <__aeabi_dmul+0x26>
 8002978:	e1cf      	b.n	8002d1a <__aeabi_dmul+0x3c6>
 800297a:	4acd      	ldr	r2, [pc, #820]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d055      	beq.n	8002a2c <__aeabi_dmul+0xd8>
 8002980:	4651      	mov	r1, sl
 8002982:	0f42      	lsrs	r2, r0, #29
 8002984:	00c9      	lsls	r1, r1, #3
 8002986:	430a      	orrs	r2, r1
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	0409      	lsls	r1, r1, #16
 800298c:	4311      	orrs	r1, r2
 800298e:	00c2      	lsls	r2, r0, #3
 8002990:	4690      	mov	r8, r2
 8002992:	4ac8      	ldr	r2, [pc, #800]	@ (8002cb4 <__aeabi_dmul+0x360>)
 8002994:	468a      	mov	sl, r1
 8002996:	4693      	mov	fp, r2
 8002998:	449b      	add	fp, r3
 800299a:	2300      	movs	r3, #0
 800299c:	2500      	movs	r5, #0
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	033c      	lsls	r4, r7, #12
 80029a2:	007b      	lsls	r3, r7, #1
 80029a4:	0ffa      	lsrs	r2, r7, #31
 80029a6:	9601      	str	r6, [sp, #4]
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d5b      	lsrs	r3, r3, #21
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	d100      	bne.n	80029b2 <__aeabi_dmul+0x5e>
 80029b0:	e188      	b.n	8002cc4 <__aeabi_dmul+0x370>
 80029b2:	4abf      	ldr	r2, [pc, #764]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <__aeabi_dmul+0x66>
 80029b8:	e092      	b.n	8002ae0 <__aeabi_dmul+0x18c>
 80029ba:	4abe      	ldr	r2, [pc, #760]	@ (8002cb4 <__aeabi_dmul+0x360>)
 80029bc:	4694      	mov	ip, r2
 80029be:	4463      	add	r3, ip
 80029c0:	449b      	add	fp, r3
 80029c2:	2d0a      	cmp	r5, #10
 80029c4:	dc42      	bgt.n	8002a4c <__aeabi_dmul+0xf8>
 80029c6:	00e4      	lsls	r4, r4, #3
 80029c8:	0f73      	lsrs	r3, r6, #29
 80029ca:	4323      	orrs	r3, r4
 80029cc:	2480      	movs	r4, #128	@ 0x80
 80029ce:	4649      	mov	r1, r9
 80029d0:	0424      	lsls	r4, r4, #16
 80029d2:	431c      	orrs	r4, r3
 80029d4:	00f3      	lsls	r3, r6, #3
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9b00      	ldr	r3, [sp, #0]
 80029da:	2000      	movs	r0, #0
 80029dc:	4059      	eors	r1, r3
 80029de:	b2cb      	uxtb	r3, r1
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	2d02      	cmp	r5, #2
 80029e4:	dc00      	bgt.n	80029e8 <__aeabi_dmul+0x94>
 80029e6:	e094      	b.n	8002b12 <__aeabi_dmul+0x1be>
 80029e8:	2301      	movs	r3, #1
 80029ea:	40ab      	lsls	r3, r5
 80029ec:	001d      	movs	r5, r3
 80029ee:	23a6      	movs	r3, #166	@ 0xa6
 80029f0:	002a      	movs	r2, r5
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	401a      	ands	r2, r3
 80029f6:	421d      	tst	r5, r3
 80029f8:	d000      	beq.n	80029fc <__aeabi_dmul+0xa8>
 80029fa:	e229      	b.n	8002e50 <__aeabi_dmul+0x4fc>
 80029fc:	2390      	movs	r3, #144	@ 0x90
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	421d      	tst	r5, r3
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dmul+0xb2>
 8002a04:	e24d      	b.n	8002ea2 <__aeabi_dmul+0x54e>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2480      	movs	r4, #128	@ 0x80
 8002a0a:	4699      	mov	r9, r3
 8002a0c:	0324      	lsls	r4, r4, #12
 8002a0e:	4ba8      	ldr	r3, [pc, #672]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002a10:	0010      	movs	r0, r2
 8002a12:	464a      	mov	r2, r9
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	4323      	orrs	r3, r4
 8002a18:	07d2      	lsls	r2, r2, #31
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	b005      	add	sp, #20
 8002a20:	bcf0      	pop	{r4, r5, r6, r7}
 8002a22:	46bb      	mov	fp, r7
 8002a24:	46b2      	mov	sl, r6
 8002a26:	46a9      	mov	r9, r5
 8002a28:	46a0      	mov	r8, r4
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2c:	4652      	mov	r2, sl
 8002a2e:	4302      	orrs	r2, r0
 8002a30:	4690      	mov	r8, r2
 8002a32:	d000      	beq.n	8002a36 <__aeabi_dmul+0xe2>
 8002a34:	e1ac      	b.n	8002d90 <__aeabi_dmul+0x43c>
 8002a36:	469b      	mov	fp, r3
 8002a38:	2302      	movs	r3, #2
 8002a3a:	4692      	mov	sl, r2
 8002a3c:	2508      	movs	r5, #8
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	e7ae      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002a42:	9b00      	ldr	r3, [sp, #0]
 8002a44:	46a2      	mov	sl, r4
 8002a46:	4699      	mov	r9, r3
 8002a48:	9b01      	ldr	r3, [sp, #4]
 8002a4a:	4698      	mov	r8, r3
 8002a4c:	9b02      	ldr	r3, [sp, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dmul+0x100>
 8002a52:	e1ca      	b.n	8002dea <__aeabi_dmul+0x496>
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dmul+0x106>
 8002a58:	e192      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d110      	bne.n	8002a80 <__aeabi_dmul+0x12c>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2400      	movs	r4, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	e7d4      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002a66:	2201      	movs	r2, #1
 8002a68:	087b      	lsrs	r3, r7, #1
 8002a6a:	403a      	ands	r2, r7
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4652      	mov	r2, sl
 8002a70:	07d2      	lsls	r2, r2, #31
 8002a72:	4313      	orrs	r3, r2
 8002a74:	4698      	mov	r8, r3
 8002a76:	4653      	mov	r3, sl
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	469a      	mov	sl, r3
 8002a7c:	9b03      	ldr	r3, [sp, #12]
 8002a7e:	4699      	mov	r9, r3
 8002a80:	465b      	mov	r3, fp
 8002a82:	1c58      	adds	r0, r3, #1
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	445b      	add	r3, fp
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dc00      	bgt.n	8002a90 <__aeabi_dmul+0x13c>
 8002a8e:	e1b1      	b.n	8002df4 <__aeabi_dmul+0x4a0>
 8002a90:	4642      	mov	r2, r8
 8002a92:	0752      	lsls	r2, r2, #29
 8002a94:	d00b      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002a96:	220f      	movs	r2, #15
 8002a98:	4641      	mov	r1, r8
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	2a04      	cmp	r2, #4
 8002a9e:	d006      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	1d11      	adds	r1, r2, #4
 8002aa4:	4541      	cmp	r1, r8
 8002aa6:	4192      	sbcs	r2, r2
 8002aa8:	4688      	mov	r8, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	4492      	add	sl, r2
 8002aae:	4652      	mov	r2, sl
 8002ab0:	01d2      	lsls	r2, r2, #7
 8002ab2:	d506      	bpl.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ab4:	4652      	mov	r2, sl
 8002ab6:	4b80      	ldr	r3, [pc, #512]	@ (8002cb8 <__aeabi_dmul+0x364>)
 8002ab8:	401a      	ands	r2, r3
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	4692      	mov	sl, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	18c3      	adds	r3, r0, r3
 8002ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cbc <__aeabi_dmul+0x368>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	dd00      	ble.n	8002aca <__aeabi_dmul+0x176>
 8002ac8:	e18f      	b.n	8002dea <__aeabi_dmul+0x496>
 8002aca:	4642      	mov	r2, r8
 8002acc:	08d1      	lsrs	r1, r2, #3
 8002ace:	4652      	mov	r2, sl
 8002ad0:	0752      	lsls	r2, r2, #29
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	024c      	lsls	r4, r1, #9
 8002ada:	0b24      	lsrs	r4, r4, #12
 8002adc:	0d5b      	lsrs	r3, r3, #21
 8002ade:	e797      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ae0:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002ae2:	4326      	orrs	r6, r4
 8002ae4:	469c      	mov	ip, r3
 8002ae6:	44e3      	add	fp, ip
 8002ae8:	2e00      	cmp	r6, #0
 8002aea:	d100      	bne.n	8002aee <__aeabi_dmul+0x19a>
 8002aec:	e16f      	b.n	8002dce <__aeabi_dmul+0x47a>
 8002aee:	2303      	movs	r3, #3
 8002af0:	4649      	mov	r1, r9
 8002af2:	431d      	orrs	r5, r3
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	4059      	eors	r1, r3
 8002af8:	b2cb      	uxtb	r3, r1
 8002afa:	9303      	str	r3, [sp, #12]
 8002afc:	2d0a      	cmp	r5, #10
 8002afe:	dd00      	ble.n	8002b02 <__aeabi_dmul+0x1ae>
 8002b00:	e133      	b.n	8002d6a <__aeabi_dmul+0x416>
 8002b02:	2301      	movs	r3, #1
 8002b04:	40ab      	lsls	r3, r5
 8002b06:	001d      	movs	r5, r3
 8002b08:	2303      	movs	r3, #3
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2288      	movs	r2, #136	@ 0x88
 8002b0e:	422a      	tst	r2, r5
 8002b10:	d197      	bne.n	8002a42 <__aeabi_dmul+0xee>
 8002b12:	4642      	mov	r2, r8
 8002b14:	4643      	mov	r3, r8
 8002b16:	0412      	lsls	r2, r2, #16
 8002b18:	0c12      	lsrs	r2, r2, #16
 8002b1a:	0016      	movs	r6, r2
 8002b1c:	9801      	ldr	r0, [sp, #4]
 8002b1e:	0c1d      	lsrs	r5, r3, #16
 8002b20:	0c03      	lsrs	r3, r0, #16
 8002b22:	0400      	lsls	r0, r0, #16
 8002b24:	0c00      	lsrs	r0, r0, #16
 8002b26:	4346      	muls	r6, r0
 8002b28:	46b4      	mov	ip, r6
 8002b2a:	001e      	movs	r6, r3
 8002b2c:	436e      	muls	r6, r5
 8002b2e:	9600      	str	r6, [sp, #0]
 8002b30:	0016      	movs	r6, r2
 8002b32:	0007      	movs	r7, r0
 8002b34:	435e      	muls	r6, r3
 8002b36:	4661      	mov	r1, ip
 8002b38:	46b0      	mov	r8, r6
 8002b3a:	436f      	muls	r7, r5
 8002b3c:	0c0e      	lsrs	r6, r1, #16
 8002b3e:	44b8      	add	r8, r7
 8002b40:	4446      	add	r6, r8
 8002b42:	42b7      	cmp	r7, r6
 8002b44:	d905      	bls.n	8002b52 <__aeabi_dmul+0x1fe>
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0249      	lsls	r1, r1, #9
 8002b4a:	4688      	mov	r8, r1
 8002b4c:	9f00      	ldr	r7, [sp, #0]
 8002b4e:	4447      	add	r7, r8
 8002b50:	9700      	str	r7, [sp, #0]
 8002b52:	4661      	mov	r1, ip
 8002b54:	0409      	lsls	r1, r1, #16
 8002b56:	0c09      	lsrs	r1, r1, #16
 8002b58:	0c37      	lsrs	r7, r6, #16
 8002b5a:	0436      	lsls	r6, r6, #16
 8002b5c:	468c      	mov	ip, r1
 8002b5e:	0031      	movs	r1, r6
 8002b60:	4461      	add	r1, ip
 8002b62:	9101      	str	r1, [sp, #4]
 8002b64:	0011      	movs	r1, r2
 8002b66:	0c26      	lsrs	r6, r4, #16
 8002b68:	0424      	lsls	r4, r4, #16
 8002b6a:	0c24      	lsrs	r4, r4, #16
 8002b6c:	4361      	muls	r1, r4
 8002b6e:	468c      	mov	ip, r1
 8002b70:	0021      	movs	r1, r4
 8002b72:	4369      	muls	r1, r5
 8002b74:	4689      	mov	r9, r1
 8002b76:	4661      	mov	r1, ip
 8002b78:	0c09      	lsrs	r1, r1, #16
 8002b7a:	4688      	mov	r8, r1
 8002b7c:	4372      	muls	r2, r6
 8002b7e:	444a      	add	r2, r9
 8002b80:	4442      	add	r2, r8
 8002b82:	4375      	muls	r5, r6
 8002b84:	4591      	cmp	r9, r2
 8002b86:	d903      	bls.n	8002b90 <__aeabi_dmul+0x23c>
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	0249      	lsls	r1, r1, #9
 8002b8c:	4688      	mov	r8, r1
 8002b8e:	4445      	add	r5, r8
 8002b90:	0c11      	lsrs	r1, r2, #16
 8002b92:	4688      	mov	r8, r1
 8002b94:	4661      	mov	r1, ip
 8002b96:	0409      	lsls	r1, r1, #16
 8002b98:	0c09      	lsrs	r1, r1, #16
 8002b9a:	468c      	mov	ip, r1
 8002b9c:	0412      	lsls	r2, r2, #16
 8002b9e:	4462      	add	r2, ip
 8002ba0:	18b9      	adds	r1, r7, r2
 8002ba2:	9102      	str	r1, [sp, #8]
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	0c09      	lsrs	r1, r1, #16
 8002ba8:	468c      	mov	ip, r1
 8002baa:	4651      	mov	r1, sl
 8002bac:	040f      	lsls	r7, r1, #16
 8002bae:	0c3f      	lsrs	r7, r7, #16
 8002bb0:	0039      	movs	r1, r7
 8002bb2:	4341      	muls	r1, r0
 8002bb4:	4445      	add	r5, r8
 8002bb6:	4688      	mov	r8, r1
 8002bb8:	4661      	mov	r1, ip
 8002bba:	4341      	muls	r1, r0
 8002bbc:	468a      	mov	sl, r1
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	4660      	mov	r0, ip
 8002bc2:	0c09      	lsrs	r1, r1, #16
 8002bc4:	4689      	mov	r9, r1
 8002bc6:	4358      	muls	r0, r3
 8002bc8:	437b      	muls	r3, r7
 8002bca:	4453      	add	r3, sl
 8002bcc:	444b      	add	r3, r9
 8002bce:	459a      	cmp	sl, r3
 8002bd0:	d903      	bls.n	8002bda <__aeabi_dmul+0x286>
 8002bd2:	2180      	movs	r1, #128	@ 0x80
 8002bd4:	0249      	lsls	r1, r1, #9
 8002bd6:	4689      	mov	r9, r1
 8002bd8:	4448      	add	r0, r9
 8002bda:	0c19      	lsrs	r1, r3, #16
 8002bdc:	4689      	mov	r9, r1
 8002bde:	4641      	mov	r1, r8
 8002be0:	0409      	lsls	r1, r1, #16
 8002be2:	0c09      	lsrs	r1, r1, #16
 8002be4:	4688      	mov	r8, r1
 8002be6:	0039      	movs	r1, r7
 8002be8:	4361      	muls	r1, r4
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	4443      	add	r3, r8
 8002bee:	4688      	mov	r8, r1
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	434c      	muls	r4, r1
 8002bf4:	4371      	muls	r1, r6
 8002bf6:	468c      	mov	ip, r1
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	4377      	muls	r7, r6
 8002bfc:	0c0e      	lsrs	r6, r1, #16
 8002bfe:	193f      	adds	r7, r7, r4
 8002c00:	19f6      	adds	r6, r6, r7
 8002c02:	4448      	add	r0, r9
 8002c04:	42b4      	cmp	r4, r6
 8002c06:	d903      	bls.n	8002c10 <__aeabi_dmul+0x2bc>
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	0249      	lsls	r1, r1, #9
 8002c0c:	4689      	mov	r9, r1
 8002c0e:	44cc      	add	ip, r9
 8002c10:	9902      	ldr	r1, [sp, #8]
 8002c12:	9f00      	ldr	r7, [sp, #0]
 8002c14:	4689      	mov	r9, r1
 8002c16:	0431      	lsls	r1, r6, #16
 8002c18:	444f      	add	r7, r9
 8002c1a:	4689      	mov	r9, r1
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	4297      	cmp	r7, r2
 8002c20:	4192      	sbcs	r2, r2
 8002c22:	040c      	lsls	r4, r1, #16
 8002c24:	0c24      	lsrs	r4, r4, #16
 8002c26:	444c      	add	r4, r9
 8002c28:	18ff      	adds	r7, r7, r3
 8002c2a:	4252      	negs	r2, r2
 8002c2c:	1964      	adds	r4, r4, r5
 8002c2e:	18a1      	adds	r1, r4, r2
 8002c30:	429f      	cmp	r7, r3
 8002c32:	419b      	sbcs	r3, r3
 8002c34:	4688      	mov	r8, r1
 8002c36:	4682      	mov	sl, r0
 8002c38:	425b      	negs	r3, r3
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	4590      	cmp	r8, r2
 8002c3e:	4192      	sbcs	r2, r2
 8002c40:	42ac      	cmp	r4, r5
 8002c42:	41a4      	sbcs	r4, r4
 8002c44:	44c2      	add	sl, r8
 8002c46:	44d1      	add	r9, sl
 8002c48:	4252      	negs	r2, r2
 8002c4a:	4264      	negs	r4, r4
 8002c4c:	4314      	orrs	r4, r2
 8002c4e:	4599      	cmp	r9, r3
 8002c50:	419b      	sbcs	r3, r3
 8002c52:	4582      	cmp	sl, r0
 8002c54:	4192      	sbcs	r2, r2
 8002c56:	425b      	negs	r3, r3
 8002c58:	4252      	negs	r2, r2
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	464a      	mov	r2, r9
 8002c5e:	0c36      	lsrs	r6, r6, #16
 8002c60:	19a4      	adds	r4, r4, r6
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	4463      	add	r3, ip
 8002c66:	025b      	lsls	r3, r3, #9
 8002c68:	0dd2      	lsrs	r2, r2, #23
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	9901      	ldr	r1, [sp, #4]
 8002c6e:	4692      	mov	sl, r2
 8002c70:	027a      	lsls	r2, r7, #9
 8002c72:	430a      	orrs	r2, r1
 8002c74:	1e50      	subs	r0, r2, #1
 8002c76:	4182      	sbcs	r2, r0
 8002c78:	0dff      	lsrs	r7, r7, #23
 8002c7a:	4317      	orrs	r7, r2
 8002c7c:	464a      	mov	r2, r9
 8002c7e:	0252      	lsls	r2, r2, #9
 8002c80:	4317      	orrs	r7, r2
 8002c82:	46b8      	mov	r8, r7
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	d500      	bpl.n	8002c8a <__aeabi_dmul+0x336>
 8002c88:	e6ed      	b.n	8002a66 <__aeabi_dmul+0x112>
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <__aeabi_dmul+0x36c>)
 8002c8c:	9a03      	ldr	r2, [sp, #12]
 8002c8e:	445b      	add	r3, fp
 8002c90:	4691      	mov	r9, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dc00      	bgt.n	8002c98 <__aeabi_dmul+0x344>
 8002c96:	e0ac      	b.n	8002df2 <__aeabi_dmul+0x49e>
 8002c98:	003a      	movs	r2, r7
 8002c9a:	0752      	lsls	r2, r2, #29
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dmul+0x34c>
 8002c9e:	e710      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	4658      	mov	r0, fp
 8002ca4:	403a      	ands	r2, r7
 8002ca6:	2a04      	cmp	r2, #4
 8002ca8:	d000      	beq.n	8002cac <__aeabi_dmul+0x358>
 8002caa:	e6f9      	b.n	8002aa0 <__aeabi_dmul+0x14c>
 8002cac:	e709      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	000007ff 	.word	0x000007ff
 8002cb4:	fffffc01 	.word	0xfffffc01
 8002cb8:	feffffff 	.word	0xfeffffff
 8002cbc:	000007fe 	.word	0x000007fe
 8002cc0:	000003ff 	.word	0x000003ff
 8002cc4:	0022      	movs	r2, r4
 8002cc6:	4332      	orrs	r2, r6
 8002cc8:	d06f      	beq.n	8002daa <__aeabi_dmul+0x456>
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dmul+0x37c>
 8002cce:	e0c2      	b.n	8002e56 <__aeabi_dmul+0x502>
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	f000 fea9 	bl	8003a28 <__clzsi2>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	0003      	movs	r3, r0
 8002cda:	3a0b      	subs	r2, #11
 8002cdc:	201d      	movs	r0, #29
 8002cde:	1a82      	subs	r2, r0, r2
 8002ce0:	0030      	movs	r0, r6
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	40d0      	lsrs	r0, r2
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	408c      	lsls	r4, r1
 8002cea:	0002      	movs	r2, r0
 8002cec:	4322      	orrs	r2, r4
 8002cee:	0034      	movs	r4, r6
 8002cf0:	408c      	lsls	r4, r1
 8002cf2:	4659      	mov	r1, fp
 8002cf4:	1acb      	subs	r3, r1, r3
 8002cf6:	4986      	ldr	r1, [pc, #536]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002cf8:	468b      	mov	fp, r1
 8002cfa:	449b      	add	fp, r3
 8002cfc:	2d0a      	cmp	r5, #10
 8002cfe:	dd00      	ble.n	8002d02 <__aeabi_dmul+0x3ae>
 8002d00:	e6a4      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002d02:	4649      	mov	r1, r9
 8002d04:	9b00      	ldr	r3, [sp, #0]
 8002d06:	9401      	str	r4, [sp, #4]
 8002d08:	4059      	eors	r1, r3
 8002d0a:	b2cb      	uxtb	r3, r1
 8002d0c:	0014      	movs	r4, r2
 8002d0e:	2000      	movs	r0, #0
 8002d10:	9303      	str	r3, [sp, #12]
 8002d12:	2d02      	cmp	r5, #2
 8002d14:	dd00      	ble.n	8002d18 <__aeabi_dmul+0x3c4>
 8002d16:	e667      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002d18:	e6fb      	b.n	8002b12 <__aeabi_dmul+0x1be>
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	4303      	orrs	r3, r0
 8002d1e:	4698      	mov	r8, r3
 8002d20:	d03c      	beq.n	8002d9c <__aeabi_dmul+0x448>
 8002d22:	4653      	mov	r3, sl
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d100      	bne.n	8002d2a <__aeabi_dmul+0x3d6>
 8002d28:	e0a3      	b.n	8002e72 <__aeabi_dmul+0x51e>
 8002d2a:	4650      	mov	r0, sl
 8002d2c:	f000 fe7c 	bl	8003a28 <__clzsi2>
 8002d30:	230b      	movs	r3, #11
 8002d32:	425b      	negs	r3, r3
 8002d34:	469c      	mov	ip, r3
 8002d36:	0002      	movs	r2, r0
 8002d38:	4484      	add	ip, r0
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	3908      	subs	r1, #8
 8002d40:	4088      	lsls	r0, r1
 8002d42:	231d      	movs	r3, #29
 8002d44:	4680      	mov	r8, r0
 8002d46:	4660      	mov	r0, ip
 8002d48:	1a1b      	subs	r3, r3, r0
 8002d4a:	0020      	movs	r0, r4
 8002d4c:	40d8      	lsrs	r0, r3
 8002d4e:	0003      	movs	r3, r0
 8002d50:	4640      	mov	r0, r8
 8002d52:	4303      	orrs	r3, r0
 8002d54:	469a      	mov	sl, r3
 8002d56:	0023      	movs	r3, r4
 8002d58:	408b      	lsls	r3, r1
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002d5e:	2500      	movs	r5, #0
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	469b      	mov	fp, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	e61a      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d6a:	2d0f      	cmp	r5, #15
 8002d6c:	d000      	beq.n	8002d70 <__aeabi_dmul+0x41c>
 8002d6e:	e0c9      	b.n	8002f04 <__aeabi_dmul+0x5b0>
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	4652      	mov	r2, sl
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	421a      	tst	r2, r3
 8002d78:	d002      	beq.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7a:	421c      	tst	r4, r3
 8002d7c:	d100      	bne.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7e:	e092      	b.n	8002ea6 <__aeabi_dmul+0x552>
 8002d80:	2480      	movs	r4, #128	@ 0x80
 8002d82:	4653      	mov	r3, sl
 8002d84:	0324      	lsls	r4, r4, #12
 8002d86:	431c      	orrs	r4, r3
 8002d88:	0324      	lsls	r4, r4, #12
 8002d8a:	4642      	mov	r2, r8
 8002d8c:	0b24      	lsrs	r4, r4, #12
 8002d8e:	e63e      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002d90:	469b      	mov	fp, r3
 8002d92:	2303      	movs	r3, #3
 8002d94:	4680      	mov	r8, r0
 8002d96:	250c      	movs	r5, #12
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	e601      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	469a      	mov	sl, r3
 8002da0:	469b      	mov	fp, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	2504      	movs	r5, #4
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	e5fa      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002daa:	2101      	movs	r1, #1
 8002dac:	430d      	orrs	r5, r1
 8002dae:	2d0a      	cmp	r5, #10
 8002db0:	dd00      	ble.n	8002db4 <__aeabi_dmul+0x460>
 8002db2:	e64b      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002db4:	4649      	mov	r1, r9
 8002db6:	9800      	ldr	r0, [sp, #0]
 8002db8:	4041      	eors	r1, r0
 8002dba:	b2c9      	uxtb	r1, r1
 8002dbc:	9103      	str	r1, [sp, #12]
 8002dbe:	2d02      	cmp	r5, #2
 8002dc0:	dc00      	bgt.n	8002dc4 <__aeabi_dmul+0x470>
 8002dc2:	e096      	b.n	8002ef2 <__aeabi_dmul+0x59e>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	2001      	movs	r0, #1
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	e60c      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002dce:	4649      	mov	r1, r9
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9a00      	ldr	r2, [sp, #0]
 8002dd4:	432b      	orrs	r3, r5
 8002dd6:	4051      	eors	r1, r2
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	9203      	str	r2, [sp, #12]
 8002ddc:	2b0a      	cmp	r3, #10
 8002dde:	dd00      	ble.n	8002de2 <__aeabi_dmul+0x48e>
 8002de0:	e634      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	d157      	bne.n	8002e96 <__aeabi_dmul+0x542>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	4699      	mov	r9, r3
 8002dea:	2400      	movs	r4, #0
 8002dec:	2200      	movs	r2, #0
 8002dee:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <__aeabi_dmul+0x5c0>)
 8002df0:	e60e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002df2:	4658      	mov	r0, fp
 8002df4:	2101      	movs	r1, #1
 8002df6:	1ac9      	subs	r1, r1, r3
 8002df8:	2938      	cmp	r1, #56	@ 0x38
 8002dfa:	dd00      	ble.n	8002dfe <__aeabi_dmul+0x4aa>
 8002dfc:	e62f      	b.n	8002a5e <__aeabi_dmul+0x10a>
 8002dfe:	291f      	cmp	r1, #31
 8002e00:	dd56      	ble.n	8002eb0 <__aeabi_dmul+0x55c>
 8002e02:	221f      	movs	r2, #31
 8002e04:	4654      	mov	r4, sl
 8002e06:	4252      	negs	r2, r2
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	40dc      	lsrs	r4, r3
 8002e0c:	2920      	cmp	r1, #32
 8002e0e:	d007      	beq.n	8002e20 <__aeabi_dmul+0x4cc>
 8002e10:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <__aeabi_dmul+0x5c4>)
 8002e12:	4642      	mov	r2, r8
 8002e14:	469c      	mov	ip, r3
 8002e16:	4653      	mov	r3, sl
 8002e18:	4460      	add	r0, ip
 8002e1a:	4083      	lsls	r3, r0
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	4690      	mov	r8, r2
 8002e20:	4642      	mov	r2, r8
 8002e22:	2107      	movs	r1, #7
 8002e24:	1e53      	subs	r3, r2, #1
 8002e26:	419a      	sbcs	r2, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	4322      	orrs	r2, r4
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2400      	movs	r4, #0
 8002e30:	4211      	tst	r1, r2
 8002e32:	d009      	beq.n	8002e48 <__aeabi_dmul+0x4f4>
 8002e34:	230f      	movs	r3, #15
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d05d      	beq.n	8002ef8 <__aeabi_dmul+0x5a4>
 8002e3c:	1d11      	adds	r1, r2, #4
 8002e3e:	4291      	cmp	r1, r2
 8002e40:	419b      	sbcs	r3, r3
 8002e42:	000a      	movs	r2, r1
 8002e44:	425b      	negs	r3, r3
 8002e46:	075b      	lsls	r3, r3, #29
 8002e48:	08d2      	lsrs	r2, r2, #3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e5df      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	4699      	mov	r9, r3
 8002e54:	e5fa      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002e56:	9801      	ldr	r0, [sp, #4]
 8002e58:	f000 fde6 	bl	8003a28 <__clzsi2>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	0003      	movs	r3, r0
 8002e60:	3215      	adds	r2, #21
 8002e62:	3320      	adds	r3, #32
 8002e64:	2a1c      	cmp	r2, #28
 8002e66:	dc00      	bgt.n	8002e6a <__aeabi_dmul+0x516>
 8002e68:	e738      	b.n	8002cdc <__aeabi_dmul+0x388>
 8002e6a:	9a01      	ldr	r2, [sp, #4]
 8002e6c:	3808      	subs	r0, #8
 8002e6e:	4082      	lsls	r2, r0
 8002e70:	e73f      	b.n	8002cf2 <__aeabi_dmul+0x39e>
 8002e72:	f000 fdd9 	bl	8003a28 <__clzsi2>
 8002e76:	2315      	movs	r3, #21
 8002e78:	469c      	mov	ip, r3
 8002e7a:	4484      	add	ip, r0
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	4663      	mov	r3, ip
 8002e80:	3220      	adds	r2, #32
 8002e82:	2b1c      	cmp	r3, #28
 8002e84:	dc00      	bgt.n	8002e88 <__aeabi_dmul+0x534>
 8002e86:	e758      	b.n	8002d3a <__aeabi_dmul+0x3e6>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	0023      	movs	r3, r4
 8002e8e:	3808      	subs	r0, #8
 8002e90:	4083      	lsls	r3, r0
 8002e92:	469a      	mov	sl, r3
 8002e94:	e762      	b.n	8002d5c <__aeabi_dmul+0x408>
 8002e96:	001d      	movs	r5, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	e5a2      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002ea2:	9002      	str	r0, [sp, #8]
 8002ea4:	e632      	b.n	8002b0c <__aeabi_dmul+0x1b8>
 8002ea6:	431c      	orrs	r4, r3
 8002ea8:	9b00      	ldr	r3, [sp, #0]
 8002eaa:	9a01      	ldr	r2, [sp, #4]
 8002eac:	4699      	mov	r9, r3
 8002eae:	e5ae      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <__aeabi_dmul+0x5c8>)
 8002eb2:	4652      	mov	r2, sl
 8002eb4:	18c3      	adds	r3, r0, r3
 8002eb6:	4640      	mov	r0, r8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	40c8      	lsrs	r0, r1
 8002ebc:	4302      	orrs	r2, r0
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4098      	lsls	r0, r3
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	4183      	sbcs	r3, r0
 8002ec8:	4654      	mov	r4, sl
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	40cc      	lsrs	r4, r1
 8002ece:	0753      	lsls	r3, r2, #29
 8002ed0:	d009      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d005      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002eda:	1d13      	adds	r3, r2, #4
 8002edc:	4293      	cmp	r3, r2
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	4252      	negs	r2, r2
 8002ee2:	18a4      	adds	r4, r4, r2
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	0223      	lsls	r3, r4, #8
 8002ee8:	d508      	bpl.n	8002efc <__aeabi_dmul+0x5a8>
 8002eea:	2301      	movs	r3, #1
 8002eec:	2400      	movs	r4, #0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	e58e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef2:	4689      	mov	r9, r1
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	e58b      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e7a5      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002efc:	0763      	lsls	r3, r4, #29
 8002efe:	0264      	lsls	r4, r4, #9
 8002f00:	0b24      	lsrs	r4, r4, #12
 8002f02:	e7a1      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002f04:	9b00      	ldr	r3, [sp, #0]
 8002f06:	46a2      	mov	sl, r4
 8002f08:	4699      	mov	r9, r3
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	4698      	mov	r8, r3
 8002f0e:	e737      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002f10:	fffffc0d 	.word	0xfffffc0d
 8002f14:	000007ff 	.word	0x000007ff
 8002f18:	0000043e 	.word	0x0000043e
 8002f1c:	0000041e 	.word	0x0000041e

08002f20 <__aeabi_dsub>:
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f22:	4657      	mov	r7, sl
 8002f24:	464e      	mov	r6, r9
 8002f26:	4645      	mov	r5, r8
 8002f28:	46de      	mov	lr, fp
 8002f2a:	b5e0      	push	{r5, r6, r7, lr}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	9000      	str	r0, [sp, #0]
 8002f30:	9101      	str	r1, [sp, #4]
 8002f32:	030c      	lsls	r4, r1, #12
 8002f34:	004d      	lsls	r5, r1, #1
 8002f36:	0fce      	lsrs	r6, r1, #31
 8002f38:	0a61      	lsrs	r1, r4, #9
 8002f3a:	9c00      	ldr	r4, [sp, #0]
 8002f3c:	005f      	lsls	r7, r3, #1
 8002f3e:	0f64      	lsrs	r4, r4, #29
 8002f40:	430c      	orrs	r4, r1
 8002f42:	9900      	ldr	r1, [sp, #0]
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	00c8      	lsls	r0, r1, #3
 8002f4a:	0319      	lsls	r1, r3, #12
 8002f4c:	0d7b      	lsrs	r3, r7, #21
 8002f4e:	4699      	mov	r9, r3
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	4fcc      	ldr	r7, [pc, #816]	@ (8003284 <__aeabi_dsub+0x364>)
 8002f54:	0fdb      	lsrs	r3, r3, #31
 8002f56:	469c      	mov	ip, r3
 8002f58:	0a4b      	lsrs	r3, r1, #9
 8002f5a:	9900      	ldr	r1, [sp, #0]
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	0f49      	lsrs	r1, r1, #29
 8002f60:	4319      	orrs	r1, r3
 8002f62:	9b00      	ldr	r3, [sp, #0]
 8002f64:	468b      	mov	fp, r1
 8002f66:	00da      	lsls	r2, r3, #3
 8002f68:	4692      	mov	sl, r2
 8002f6a:	0d6d      	lsrs	r5, r5, #21
 8002f6c:	45b9      	cmp	r9, r7
 8002f6e:	d100      	bne.n	8002f72 <__aeabi_dsub+0x52>
 8002f70:	e0bf      	b.n	80030f2 <__aeabi_dsub+0x1d2>
 8002f72:	2301      	movs	r3, #1
 8002f74:	4661      	mov	r1, ip
 8002f76:	4059      	eors	r1, r3
 8002f78:	464b      	mov	r3, r9
 8002f7a:	468c      	mov	ip, r1
 8002f7c:	1aeb      	subs	r3, r5, r3
 8002f7e:	428e      	cmp	r6, r1
 8002f80:	d075      	beq.n	800306e <__aeabi_dsub+0x14e>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc00      	bgt.n	8002f88 <__aeabi_dsub+0x68>
 8002f86:	e2a3      	b.n	80034d0 <__aeabi_dsub+0x5b0>
 8002f88:	4649      	mov	r1, r9
 8002f8a:	2900      	cmp	r1, #0
 8002f8c:	d100      	bne.n	8002f90 <__aeabi_dsub+0x70>
 8002f8e:	e0ce      	b.n	800312e <__aeabi_dsub+0x20e>
 8002f90:	42bd      	cmp	r5, r7
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x76>
 8002f94:	e200      	b.n	8003398 <__aeabi_dsub+0x478>
 8002f96:	2701      	movs	r7, #1
 8002f98:	2b38      	cmp	r3, #56	@ 0x38
 8002f9a:	dc19      	bgt.n	8002fd0 <__aeabi_dsub+0xb0>
 8002f9c:	2780      	movs	r7, #128	@ 0x80
 8002f9e:	4659      	mov	r1, fp
 8002fa0:	043f      	lsls	r7, r7, #16
 8002fa2:	4339      	orrs	r1, r7
 8002fa4:	468b      	mov	fp, r1
 8002fa6:	2b1f      	cmp	r3, #31
 8002fa8:	dd00      	ble.n	8002fac <__aeabi_dsub+0x8c>
 8002faa:	e1fa      	b.n	80033a2 <__aeabi_dsub+0x482>
 8002fac:	2720      	movs	r7, #32
 8002fae:	1af9      	subs	r1, r7, r3
 8002fb0:	468c      	mov	ip, r1
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	4667      	mov	r7, ip
 8002fb6:	40b9      	lsls	r1, r7
 8002fb8:	000f      	movs	r7, r1
 8002fba:	0011      	movs	r1, r2
 8002fbc:	40d9      	lsrs	r1, r3
 8002fbe:	430f      	orrs	r7, r1
 8002fc0:	4661      	mov	r1, ip
 8002fc2:	408a      	lsls	r2, r1
 8002fc4:	1e51      	subs	r1, r2, #1
 8002fc6:	418a      	sbcs	r2, r1
 8002fc8:	4659      	mov	r1, fp
 8002fca:	40d9      	lsrs	r1, r3
 8002fcc:	4317      	orrs	r7, r2
 8002fce:	1a64      	subs	r4, r4, r1
 8002fd0:	1bc7      	subs	r7, r0, r7
 8002fd2:	42b8      	cmp	r0, r7
 8002fd4:	4180      	sbcs	r0, r0
 8002fd6:	4240      	negs	r0, r0
 8002fd8:	1a24      	subs	r4, r4, r0
 8002fda:	0223      	lsls	r3, r4, #8
 8002fdc:	d400      	bmi.n	8002fe0 <__aeabi_dsub+0xc0>
 8002fde:	e140      	b.n	8003262 <__aeabi_dsub+0x342>
 8002fe0:	0264      	lsls	r4, r4, #9
 8002fe2:	0a64      	lsrs	r4, r4, #9
 8002fe4:	2c00      	cmp	r4, #0
 8002fe6:	d100      	bne.n	8002fea <__aeabi_dsub+0xca>
 8002fe8:	e154      	b.n	8003294 <__aeabi_dsub+0x374>
 8002fea:	0020      	movs	r0, r4
 8002fec:	f000 fd1c 	bl	8003a28 <__clzsi2>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	3b08      	subs	r3, #8
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	0038      	movs	r0, r7
 8002ff8:	1aca      	subs	r2, r1, r3
 8002ffa:	40d0      	lsrs	r0, r2
 8002ffc:	409c      	lsls	r4, r3
 8002ffe:	0002      	movs	r2, r0
 8003000:	409f      	lsls	r7, r3
 8003002:	4322      	orrs	r2, r4
 8003004:	429d      	cmp	r5, r3
 8003006:	dd00      	ble.n	800300a <__aeabi_dsub+0xea>
 8003008:	e1a6      	b.n	8003358 <__aeabi_dsub+0x438>
 800300a:	1b58      	subs	r0, r3, r5
 800300c:	3001      	adds	r0, #1
 800300e:	1a09      	subs	r1, r1, r0
 8003010:	003c      	movs	r4, r7
 8003012:	408f      	lsls	r7, r1
 8003014:	40c4      	lsrs	r4, r0
 8003016:	1e7b      	subs	r3, r7, #1
 8003018:	419f      	sbcs	r7, r3
 800301a:	0013      	movs	r3, r2
 800301c:	408b      	lsls	r3, r1
 800301e:	4327      	orrs	r7, r4
 8003020:	431f      	orrs	r7, r3
 8003022:	40c2      	lsrs	r2, r0
 8003024:	003b      	movs	r3, r7
 8003026:	0014      	movs	r4, r2
 8003028:	2500      	movs	r5, #0
 800302a:	4313      	orrs	r3, r2
 800302c:	d100      	bne.n	8003030 <__aeabi_dsub+0x110>
 800302e:	e1f7      	b.n	8003420 <__aeabi_dsub+0x500>
 8003030:	077b      	lsls	r3, r7, #29
 8003032:	d100      	bne.n	8003036 <__aeabi_dsub+0x116>
 8003034:	e377      	b.n	8003726 <__aeabi_dsub+0x806>
 8003036:	230f      	movs	r3, #15
 8003038:	0038      	movs	r0, r7
 800303a:	403b      	ands	r3, r7
 800303c:	2b04      	cmp	r3, #4
 800303e:	d004      	beq.n	800304a <__aeabi_dsub+0x12a>
 8003040:	1d38      	adds	r0, r7, #4
 8003042:	42b8      	cmp	r0, r7
 8003044:	41bf      	sbcs	r7, r7
 8003046:	427f      	negs	r7, r7
 8003048:	19e4      	adds	r4, r4, r7
 800304a:	0223      	lsls	r3, r4, #8
 800304c:	d400      	bmi.n	8003050 <__aeabi_dsub+0x130>
 800304e:	e368      	b.n	8003722 <__aeabi_dsub+0x802>
 8003050:	4b8c      	ldr	r3, [pc, #560]	@ (8003284 <__aeabi_dsub+0x364>)
 8003052:	3501      	adds	r5, #1
 8003054:	429d      	cmp	r5, r3
 8003056:	d100      	bne.n	800305a <__aeabi_dsub+0x13a>
 8003058:	e0f4      	b.n	8003244 <__aeabi_dsub+0x324>
 800305a:	4b8b      	ldr	r3, [pc, #556]	@ (8003288 <__aeabi_dsub+0x368>)
 800305c:	056d      	lsls	r5, r5, #21
 800305e:	401c      	ands	r4, r3
 8003060:	0d6d      	lsrs	r5, r5, #21
 8003062:	0767      	lsls	r7, r4, #29
 8003064:	08c0      	lsrs	r0, r0, #3
 8003066:	0264      	lsls	r4, r4, #9
 8003068:	4307      	orrs	r7, r0
 800306a:	0b24      	lsrs	r4, r4, #12
 800306c:	e0ec      	b.n	8003248 <__aeabi_dsub+0x328>
 800306e:	2b00      	cmp	r3, #0
 8003070:	dc00      	bgt.n	8003074 <__aeabi_dsub+0x154>
 8003072:	e329      	b.n	80036c8 <__aeabi_dsub+0x7a8>
 8003074:	4649      	mov	r1, r9
 8003076:	2900      	cmp	r1, #0
 8003078:	d000      	beq.n	800307c <__aeabi_dsub+0x15c>
 800307a:	e0d6      	b.n	800322a <__aeabi_dsub+0x30a>
 800307c:	4659      	mov	r1, fp
 800307e:	4311      	orrs	r1, r2
 8003080:	d100      	bne.n	8003084 <__aeabi_dsub+0x164>
 8003082:	e12e      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d100      	bne.n	800308c <__aeabi_dsub+0x16c>
 800308a:	e1e6      	b.n	800345a <__aeabi_dsub+0x53a>
 800308c:	42bb      	cmp	r3, r7
 800308e:	d100      	bne.n	8003092 <__aeabi_dsub+0x172>
 8003090:	e182      	b.n	8003398 <__aeabi_dsub+0x478>
 8003092:	2701      	movs	r7, #1
 8003094:	000b      	movs	r3, r1
 8003096:	2938      	cmp	r1, #56	@ 0x38
 8003098:	dc14      	bgt.n	80030c4 <__aeabi_dsub+0x1a4>
 800309a:	2b1f      	cmp	r3, #31
 800309c:	dd00      	ble.n	80030a0 <__aeabi_dsub+0x180>
 800309e:	e23c      	b.n	800351a <__aeabi_dsub+0x5fa>
 80030a0:	2720      	movs	r7, #32
 80030a2:	1af9      	subs	r1, r7, r3
 80030a4:	468c      	mov	ip, r1
 80030a6:	4659      	mov	r1, fp
 80030a8:	4667      	mov	r7, ip
 80030aa:	40b9      	lsls	r1, r7
 80030ac:	000f      	movs	r7, r1
 80030ae:	0011      	movs	r1, r2
 80030b0:	40d9      	lsrs	r1, r3
 80030b2:	430f      	orrs	r7, r1
 80030b4:	4661      	mov	r1, ip
 80030b6:	408a      	lsls	r2, r1
 80030b8:	1e51      	subs	r1, r2, #1
 80030ba:	418a      	sbcs	r2, r1
 80030bc:	4659      	mov	r1, fp
 80030be:	40d9      	lsrs	r1, r3
 80030c0:	4317      	orrs	r7, r2
 80030c2:	1864      	adds	r4, r4, r1
 80030c4:	183f      	adds	r7, r7, r0
 80030c6:	4287      	cmp	r7, r0
 80030c8:	4180      	sbcs	r0, r0
 80030ca:	4240      	negs	r0, r0
 80030cc:	1824      	adds	r4, r4, r0
 80030ce:	0223      	lsls	r3, r4, #8
 80030d0:	d400      	bmi.n	80030d4 <__aeabi_dsub+0x1b4>
 80030d2:	e0c6      	b.n	8003262 <__aeabi_dsub+0x342>
 80030d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003284 <__aeabi_dsub+0x364>)
 80030d6:	3501      	adds	r5, #1
 80030d8:	429d      	cmp	r5, r3
 80030da:	d100      	bne.n	80030de <__aeabi_dsub+0x1be>
 80030dc:	e0b2      	b.n	8003244 <__aeabi_dsub+0x324>
 80030de:	2101      	movs	r1, #1
 80030e0:	4b69      	ldr	r3, [pc, #420]	@ (8003288 <__aeabi_dsub+0x368>)
 80030e2:	087a      	lsrs	r2, r7, #1
 80030e4:	401c      	ands	r4, r3
 80030e6:	4039      	ands	r1, r7
 80030e8:	430a      	orrs	r2, r1
 80030ea:	07e7      	lsls	r7, r4, #31
 80030ec:	4317      	orrs	r7, r2
 80030ee:	0864      	lsrs	r4, r4, #1
 80030f0:	e79e      	b.n	8003030 <__aeabi_dsub+0x110>
 80030f2:	4b66      	ldr	r3, [pc, #408]	@ (800328c <__aeabi_dsub+0x36c>)
 80030f4:	4311      	orrs	r1, r2
 80030f6:	468a      	mov	sl, r1
 80030f8:	18eb      	adds	r3, r5, r3
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d028      	beq.n	8003150 <__aeabi_dsub+0x230>
 80030fe:	4566      	cmp	r6, ip
 8003100:	d02c      	beq.n	800315c <__aeabi_dsub+0x23c>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d05b      	beq.n	80031be <__aeabi_dsub+0x29e>
 8003106:	2d00      	cmp	r5, #0
 8003108:	d100      	bne.n	800310c <__aeabi_dsub+0x1ec>
 800310a:	e12c      	b.n	8003366 <__aeabi_dsub+0x446>
 800310c:	465b      	mov	r3, fp
 800310e:	4666      	mov	r6, ip
 8003110:	075f      	lsls	r7, r3, #29
 8003112:	08d2      	lsrs	r2, r2, #3
 8003114:	4317      	orrs	r7, r2
 8003116:	08dd      	lsrs	r5, r3, #3
 8003118:	003b      	movs	r3, r7
 800311a:	432b      	orrs	r3, r5
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x200>
 800311e:	e0e2      	b.n	80032e6 <__aeabi_dsub+0x3c6>
 8003120:	2480      	movs	r4, #128	@ 0x80
 8003122:	0324      	lsls	r4, r4, #12
 8003124:	432c      	orrs	r4, r5
 8003126:	0324      	lsls	r4, r4, #12
 8003128:	4d56      	ldr	r5, [pc, #344]	@ (8003284 <__aeabi_dsub+0x364>)
 800312a:	0b24      	lsrs	r4, r4, #12
 800312c:	e08c      	b.n	8003248 <__aeabi_dsub+0x328>
 800312e:	4659      	mov	r1, fp
 8003130:	4311      	orrs	r1, r2
 8003132:	d100      	bne.n	8003136 <__aeabi_dsub+0x216>
 8003134:	e0d5      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d100      	bne.n	800313e <__aeabi_dsub+0x21e>
 800313c:	e1b9      	b.n	80034b2 <__aeabi_dsub+0x592>
 800313e:	42bb      	cmp	r3, r7
 8003140:	d100      	bne.n	8003144 <__aeabi_dsub+0x224>
 8003142:	e1b1      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003144:	2701      	movs	r7, #1
 8003146:	000b      	movs	r3, r1
 8003148:	2938      	cmp	r1, #56	@ 0x38
 800314a:	dd00      	ble.n	800314e <__aeabi_dsub+0x22e>
 800314c:	e740      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 800314e:	e72a      	b.n	8002fa6 <__aeabi_dsub+0x86>
 8003150:	4661      	mov	r1, ip
 8003152:	2701      	movs	r7, #1
 8003154:	4079      	eors	r1, r7
 8003156:	468c      	mov	ip, r1
 8003158:	4566      	cmp	r6, ip
 800315a:	d1d2      	bne.n	8003102 <__aeabi_dsub+0x1e2>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d100      	bne.n	8003162 <__aeabi_dsub+0x242>
 8003160:	e0c5      	b.n	80032ee <__aeabi_dsub+0x3ce>
 8003162:	2d00      	cmp	r5, #0
 8003164:	d000      	beq.n	8003168 <__aeabi_dsub+0x248>
 8003166:	e155      	b.n	8003414 <__aeabi_dsub+0x4f4>
 8003168:	464b      	mov	r3, r9
 800316a:	0025      	movs	r5, r4
 800316c:	4305      	orrs	r5, r0
 800316e:	d100      	bne.n	8003172 <__aeabi_dsub+0x252>
 8003170:	e212      	b.n	8003598 <__aeabi_dsub+0x678>
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	468c      	mov	ip, r1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d100      	bne.n	800317c <__aeabi_dsub+0x25c>
 800317a:	e249      	b.n	8003610 <__aeabi_dsub+0x6f0>
 800317c:	4d41      	ldr	r5, [pc, #260]	@ (8003284 <__aeabi_dsub+0x364>)
 800317e:	42ab      	cmp	r3, r5
 8003180:	d100      	bne.n	8003184 <__aeabi_dsub+0x264>
 8003182:	e28f      	b.n	80036a4 <__aeabi_dsub+0x784>
 8003184:	2701      	movs	r7, #1
 8003186:	2938      	cmp	r1, #56	@ 0x38
 8003188:	dc11      	bgt.n	80031ae <__aeabi_dsub+0x28e>
 800318a:	4663      	mov	r3, ip
 800318c:	2b1f      	cmp	r3, #31
 800318e:	dd00      	ble.n	8003192 <__aeabi_dsub+0x272>
 8003190:	e25b      	b.n	800364a <__aeabi_dsub+0x72a>
 8003192:	4661      	mov	r1, ip
 8003194:	2320      	movs	r3, #32
 8003196:	0027      	movs	r7, r4
 8003198:	1a5b      	subs	r3, r3, r1
 800319a:	0005      	movs	r5, r0
 800319c:	4098      	lsls	r0, r3
 800319e:	409f      	lsls	r7, r3
 80031a0:	40cd      	lsrs	r5, r1
 80031a2:	1e43      	subs	r3, r0, #1
 80031a4:	4198      	sbcs	r0, r3
 80031a6:	40cc      	lsrs	r4, r1
 80031a8:	432f      	orrs	r7, r5
 80031aa:	4307      	orrs	r7, r0
 80031ac:	44a3      	add	fp, r4
 80031ae:	18bf      	adds	r7, r7, r2
 80031b0:	4297      	cmp	r7, r2
 80031b2:	4192      	sbcs	r2, r2
 80031b4:	4252      	negs	r2, r2
 80031b6:	445a      	add	r2, fp
 80031b8:	0014      	movs	r4, r2
 80031ba:	464d      	mov	r5, r9
 80031bc:	e787      	b.n	80030ce <__aeabi_dsub+0x1ae>
 80031be:	4f34      	ldr	r7, [pc, #208]	@ (8003290 <__aeabi_dsub+0x370>)
 80031c0:	1c6b      	adds	r3, r5, #1
 80031c2:	423b      	tst	r3, r7
 80031c4:	d000      	beq.n	80031c8 <__aeabi_dsub+0x2a8>
 80031c6:	e0b6      	b.n	8003336 <__aeabi_dsub+0x416>
 80031c8:	4659      	mov	r1, fp
 80031ca:	0023      	movs	r3, r4
 80031cc:	4311      	orrs	r1, r2
 80031ce:	000f      	movs	r7, r1
 80031d0:	4303      	orrs	r3, r0
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	d000      	beq.n	80031d8 <__aeabi_dsub+0x2b8>
 80031d6:	e126      	b.n	8003426 <__aeabi_dsub+0x506>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d100      	bne.n	80031de <__aeabi_dsub+0x2be>
 80031dc:	e1c0      	b.n	8003560 <__aeabi_dsub+0x640>
 80031de:	2900      	cmp	r1, #0
 80031e0:	d100      	bne.n	80031e4 <__aeabi_dsub+0x2c4>
 80031e2:	e0a1      	b.n	8003328 <__aeabi_dsub+0x408>
 80031e4:	1a83      	subs	r3, r0, r2
 80031e6:	4698      	mov	r8, r3
 80031e8:	465b      	mov	r3, fp
 80031ea:	4540      	cmp	r0, r8
 80031ec:	41ad      	sbcs	r5, r5
 80031ee:	1ae3      	subs	r3, r4, r3
 80031f0:	426d      	negs	r5, r5
 80031f2:	1b5b      	subs	r3, r3, r5
 80031f4:	2580      	movs	r5, #128	@ 0x80
 80031f6:	042d      	lsls	r5, r5, #16
 80031f8:	422b      	tst	r3, r5
 80031fa:	d100      	bne.n	80031fe <__aeabi_dsub+0x2de>
 80031fc:	e14b      	b.n	8003496 <__aeabi_dsub+0x576>
 80031fe:	465b      	mov	r3, fp
 8003200:	1a10      	subs	r0, r2, r0
 8003202:	4282      	cmp	r2, r0
 8003204:	4192      	sbcs	r2, r2
 8003206:	1b1c      	subs	r4, r3, r4
 8003208:	0007      	movs	r7, r0
 800320a:	2601      	movs	r6, #1
 800320c:	4663      	mov	r3, ip
 800320e:	4252      	negs	r2, r2
 8003210:	1aa4      	subs	r4, r4, r2
 8003212:	4327      	orrs	r7, r4
 8003214:	401e      	ands	r6, r3
 8003216:	2f00      	cmp	r7, #0
 8003218:	d100      	bne.n	800321c <__aeabi_dsub+0x2fc>
 800321a:	e142      	b.n	80034a2 <__aeabi_dsub+0x582>
 800321c:	422c      	tst	r4, r5
 800321e:	d100      	bne.n	8003222 <__aeabi_dsub+0x302>
 8003220:	e26d      	b.n	80036fe <__aeabi_dsub+0x7de>
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <__aeabi_dsub+0x368>)
 8003224:	2501      	movs	r5, #1
 8003226:	401c      	ands	r4, r3
 8003228:	e71b      	b.n	8003062 <__aeabi_dsub+0x142>
 800322a:	42bd      	cmp	r5, r7
 800322c:	d100      	bne.n	8003230 <__aeabi_dsub+0x310>
 800322e:	e13b      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003230:	2701      	movs	r7, #1
 8003232:	2b38      	cmp	r3, #56	@ 0x38
 8003234:	dd00      	ble.n	8003238 <__aeabi_dsub+0x318>
 8003236:	e745      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003238:	2780      	movs	r7, #128	@ 0x80
 800323a:	4659      	mov	r1, fp
 800323c:	043f      	lsls	r7, r7, #16
 800323e:	4339      	orrs	r1, r7
 8003240:	468b      	mov	fp, r1
 8003242:	e72a      	b.n	800309a <__aeabi_dsub+0x17a>
 8003244:	2400      	movs	r4, #0
 8003246:	2700      	movs	r7, #0
 8003248:	052d      	lsls	r5, r5, #20
 800324a:	4325      	orrs	r5, r4
 800324c:	07f6      	lsls	r6, r6, #31
 800324e:	4335      	orrs	r5, r6
 8003250:	0038      	movs	r0, r7
 8003252:	0029      	movs	r1, r5
 8003254:	b003      	add	sp, #12
 8003256:	bcf0      	pop	{r4, r5, r6, r7}
 8003258:	46bb      	mov	fp, r7
 800325a:	46b2      	mov	sl, r6
 800325c:	46a9      	mov	r9, r5
 800325e:	46a0      	mov	r8, r4
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	077b      	lsls	r3, r7, #29
 8003264:	d004      	beq.n	8003270 <__aeabi_dsub+0x350>
 8003266:	230f      	movs	r3, #15
 8003268:	403b      	ands	r3, r7
 800326a:	2b04      	cmp	r3, #4
 800326c:	d000      	beq.n	8003270 <__aeabi_dsub+0x350>
 800326e:	e6e7      	b.n	8003040 <__aeabi_dsub+0x120>
 8003270:	002b      	movs	r3, r5
 8003272:	08f8      	lsrs	r0, r7, #3
 8003274:	4a03      	ldr	r2, [pc, #12]	@ (8003284 <__aeabi_dsub+0x364>)
 8003276:	0767      	lsls	r7, r4, #29
 8003278:	4307      	orrs	r7, r0
 800327a:	08e5      	lsrs	r5, r4, #3
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <__aeabi_dsub+0x362>
 8003280:	e74a      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003282:	e0a5      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003284:	000007ff 	.word	0x000007ff
 8003288:	ff7fffff 	.word	0xff7fffff
 800328c:	fffff801 	.word	0xfffff801
 8003290:	000007fe 	.word	0x000007fe
 8003294:	0038      	movs	r0, r7
 8003296:	f000 fbc7 	bl	8003a28 <__clzsi2>
 800329a:	0003      	movs	r3, r0
 800329c:	3318      	adds	r3, #24
 800329e:	2b1f      	cmp	r3, #31
 80032a0:	dc00      	bgt.n	80032a4 <__aeabi_dsub+0x384>
 80032a2:	e6a7      	b.n	8002ff4 <__aeabi_dsub+0xd4>
 80032a4:	003a      	movs	r2, r7
 80032a6:	3808      	subs	r0, #8
 80032a8:	4082      	lsls	r2, r0
 80032aa:	429d      	cmp	r5, r3
 80032ac:	dd00      	ble.n	80032b0 <__aeabi_dsub+0x390>
 80032ae:	e08a      	b.n	80033c6 <__aeabi_dsub+0x4a6>
 80032b0:	1b5b      	subs	r3, r3, r5
 80032b2:	1c58      	adds	r0, r3, #1
 80032b4:	281f      	cmp	r0, #31
 80032b6:	dc00      	bgt.n	80032ba <__aeabi_dsub+0x39a>
 80032b8:	e1d8      	b.n	800366c <__aeabi_dsub+0x74c>
 80032ba:	0017      	movs	r7, r2
 80032bc:	3b1f      	subs	r3, #31
 80032be:	40df      	lsrs	r7, r3
 80032c0:	2820      	cmp	r0, #32
 80032c2:	d005      	beq.n	80032d0 <__aeabi_dsub+0x3b0>
 80032c4:	2340      	movs	r3, #64	@ 0x40
 80032c6:	1a1b      	subs	r3, r3, r0
 80032c8:	409a      	lsls	r2, r3
 80032ca:	1e53      	subs	r3, r2, #1
 80032cc:	419a      	sbcs	r2, r3
 80032ce:	4317      	orrs	r7, r2
 80032d0:	2500      	movs	r5, #0
 80032d2:	2f00      	cmp	r7, #0
 80032d4:	d100      	bne.n	80032d8 <__aeabi_dsub+0x3b8>
 80032d6:	e0e5      	b.n	80034a4 <__aeabi_dsub+0x584>
 80032d8:	077b      	lsls	r3, r7, #29
 80032da:	d000      	beq.n	80032de <__aeabi_dsub+0x3be>
 80032dc:	e6ab      	b.n	8003036 <__aeabi_dsub+0x116>
 80032de:	002c      	movs	r4, r5
 80032e0:	e7c6      	b.n	8003270 <__aeabi_dsub+0x350>
 80032e2:	08c0      	lsrs	r0, r0, #3
 80032e4:	e7c6      	b.n	8003274 <__aeabi_dsub+0x354>
 80032e6:	2700      	movs	r7, #0
 80032e8:	2400      	movs	r4, #0
 80032ea:	4dd1      	ldr	r5, [pc, #836]	@ (8003630 <__aeabi_dsub+0x710>)
 80032ec:	e7ac      	b.n	8003248 <__aeabi_dsub+0x328>
 80032ee:	4fd1      	ldr	r7, [pc, #836]	@ (8003634 <__aeabi_dsub+0x714>)
 80032f0:	1c6b      	adds	r3, r5, #1
 80032f2:	423b      	tst	r3, r7
 80032f4:	d171      	bne.n	80033da <__aeabi_dsub+0x4ba>
 80032f6:	0023      	movs	r3, r4
 80032f8:	4303      	orrs	r3, r0
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	d000      	beq.n	8003300 <__aeabi_dsub+0x3e0>
 80032fe:	e14e      	b.n	800359e <__aeabi_dsub+0x67e>
 8003300:	4657      	mov	r7, sl
 8003302:	2b00      	cmp	r3, #0
 8003304:	d100      	bne.n	8003308 <__aeabi_dsub+0x3e8>
 8003306:	e1b5      	b.n	8003674 <__aeabi_dsub+0x754>
 8003308:	2f00      	cmp	r7, #0
 800330a:	d00d      	beq.n	8003328 <__aeabi_dsub+0x408>
 800330c:	1883      	adds	r3, r0, r2
 800330e:	4283      	cmp	r3, r0
 8003310:	4180      	sbcs	r0, r0
 8003312:	445c      	add	r4, fp
 8003314:	4240      	negs	r0, r0
 8003316:	1824      	adds	r4, r4, r0
 8003318:	0222      	lsls	r2, r4, #8
 800331a:	d500      	bpl.n	800331e <__aeabi_dsub+0x3fe>
 800331c:	e1c8      	b.n	80036b0 <__aeabi_dsub+0x790>
 800331e:	001f      	movs	r7, r3
 8003320:	4698      	mov	r8, r3
 8003322:	4327      	orrs	r7, r4
 8003324:	d100      	bne.n	8003328 <__aeabi_dsub+0x408>
 8003326:	e0bc      	b.n	80034a2 <__aeabi_dsub+0x582>
 8003328:	4643      	mov	r3, r8
 800332a:	0767      	lsls	r7, r4, #29
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	431f      	orrs	r7, r3
 8003330:	08e5      	lsrs	r5, r4, #3
 8003332:	2300      	movs	r3, #0
 8003334:	e04c      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003336:	1a83      	subs	r3, r0, r2
 8003338:	4698      	mov	r8, r3
 800333a:	465b      	mov	r3, fp
 800333c:	4540      	cmp	r0, r8
 800333e:	41bf      	sbcs	r7, r7
 8003340:	1ae3      	subs	r3, r4, r3
 8003342:	427f      	negs	r7, r7
 8003344:	1bdb      	subs	r3, r3, r7
 8003346:	021f      	lsls	r7, r3, #8
 8003348:	d47c      	bmi.n	8003444 <__aeabi_dsub+0x524>
 800334a:	4647      	mov	r7, r8
 800334c:	431f      	orrs	r7, r3
 800334e:	d100      	bne.n	8003352 <__aeabi_dsub+0x432>
 8003350:	e0a6      	b.n	80034a0 <__aeabi_dsub+0x580>
 8003352:	001c      	movs	r4, r3
 8003354:	4647      	mov	r7, r8
 8003356:	e645      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 8003358:	4cb7      	ldr	r4, [pc, #732]	@ (8003638 <__aeabi_dsub+0x718>)
 800335a:	1aed      	subs	r5, r5, r3
 800335c:	4014      	ands	r4, r2
 800335e:	077b      	lsls	r3, r7, #29
 8003360:	d000      	beq.n	8003364 <__aeabi_dsub+0x444>
 8003362:	e780      	b.n	8003266 <__aeabi_dsub+0x346>
 8003364:	e784      	b.n	8003270 <__aeabi_dsub+0x350>
 8003366:	464b      	mov	r3, r9
 8003368:	0025      	movs	r5, r4
 800336a:	4305      	orrs	r5, r0
 800336c:	d066      	beq.n	800343c <__aeabi_dsub+0x51c>
 800336e:	1e5f      	subs	r7, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d100      	bne.n	8003376 <__aeabi_dsub+0x456>
 8003374:	e0fc      	b.n	8003570 <__aeabi_dsub+0x650>
 8003376:	4dae      	ldr	r5, [pc, #696]	@ (8003630 <__aeabi_dsub+0x710>)
 8003378:	42ab      	cmp	r3, r5
 800337a:	d100      	bne.n	800337e <__aeabi_dsub+0x45e>
 800337c:	e15e      	b.n	800363c <__aeabi_dsub+0x71c>
 800337e:	4666      	mov	r6, ip
 8003380:	2f38      	cmp	r7, #56	@ 0x38
 8003382:	dc00      	bgt.n	8003386 <__aeabi_dsub+0x466>
 8003384:	e0b4      	b.n	80034f0 <__aeabi_dsub+0x5d0>
 8003386:	2001      	movs	r0, #1
 8003388:	1a17      	subs	r7, r2, r0
 800338a:	42ba      	cmp	r2, r7
 800338c:	4192      	sbcs	r2, r2
 800338e:	465b      	mov	r3, fp
 8003390:	4252      	negs	r2, r2
 8003392:	464d      	mov	r5, r9
 8003394:	1a9c      	subs	r4, r3, r2
 8003396:	e620      	b.n	8002fda <__aeabi_dsub+0xba>
 8003398:	0767      	lsls	r7, r4, #29
 800339a:	08c0      	lsrs	r0, r0, #3
 800339c:	4307      	orrs	r7, r0
 800339e:	08e5      	lsrs	r5, r4, #3
 80033a0:	e6ba      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80033a2:	001f      	movs	r7, r3
 80033a4:	4659      	mov	r1, fp
 80033a6:	3f20      	subs	r7, #32
 80033a8:	40f9      	lsrs	r1, r7
 80033aa:	000f      	movs	r7, r1
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d005      	beq.n	80033bc <__aeabi_dsub+0x49c>
 80033b0:	2140      	movs	r1, #64	@ 0x40
 80033b2:	1acb      	subs	r3, r1, r3
 80033b4:	4659      	mov	r1, fp
 80033b6:	4099      	lsls	r1, r3
 80033b8:	430a      	orrs	r2, r1
 80033ba:	4692      	mov	sl, r2
 80033bc:	4653      	mov	r3, sl
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	4193      	sbcs	r3, r2
 80033c2:	431f      	orrs	r7, r3
 80033c4:	e604      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 80033c6:	1aeb      	subs	r3, r5, r3
 80033c8:	4d9b      	ldr	r5, [pc, #620]	@ (8003638 <__aeabi_dsub+0x718>)
 80033ca:	4015      	ands	r5, r2
 80033cc:	076f      	lsls	r7, r5, #29
 80033ce:	08ed      	lsrs	r5, r5, #3
 80033d0:	032c      	lsls	r4, r5, #12
 80033d2:	055d      	lsls	r5, r3, #21
 80033d4:	0b24      	lsrs	r4, r4, #12
 80033d6:	0d6d      	lsrs	r5, r5, #21
 80033d8:	e736      	b.n	8003248 <__aeabi_dsub+0x328>
 80033da:	4d95      	ldr	r5, [pc, #596]	@ (8003630 <__aeabi_dsub+0x710>)
 80033dc:	42ab      	cmp	r3, r5
 80033de:	d100      	bne.n	80033e2 <__aeabi_dsub+0x4c2>
 80033e0:	e0d6      	b.n	8003590 <__aeabi_dsub+0x670>
 80033e2:	1882      	adds	r2, r0, r2
 80033e4:	0021      	movs	r1, r4
 80033e6:	4282      	cmp	r2, r0
 80033e8:	4180      	sbcs	r0, r0
 80033ea:	4459      	add	r1, fp
 80033ec:	4240      	negs	r0, r0
 80033ee:	1808      	adds	r0, r1, r0
 80033f0:	07c7      	lsls	r7, r0, #31
 80033f2:	0852      	lsrs	r2, r2, #1
 80033f4:	4317      	orrs	r7, r2
 80033f6:	0844      	lsrs	r4, r0, #1
 80033f8:	0752      	lsls	r2, r2, #29
 80033fa:	d400      	bmi.n	80033fe <__aeabi_dsub+0x4de>
 80033fc:	e185      	b.n	800370a <__aeabi_dsub+0x7ea>
 80033fe:	220f      	movs	r2, #15
 8003400:	001d      	movs	r5, r3
 8003402:	403a      	ands	r2, r7
 8003404:	2a04      	cmp	r2, #4
 8003406:	d000      	beq.n	800340a <__aeabi_dsub+0x4ea>
 8003408:	e61a      	b.n	8003040 <__aeabi_dsub+0x120>
 800340a:	08ff      	lsrs	r7, r7, #3
 800340c:	0764      	lsls	r4, r4, #29
 800340e:	4327      	orrs	r7, r4
 8003410:	0905      	lsrs	r5, r0, #4
 8003412:	e7dd      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003414:	465b      	mov	r3, fp
 8003416:	08d2      	lsrs	r2, r2, #3
 8003418:	075f      	lsls	r7, r3, #29
 800341a:	4317      	orrs	r7, r2
 800341c:	08dd      	lsrs	r5, r3, #3
 800341e:	e67b      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003420:	2700      	movs	r7, #0
 8003422:	2400      	movs	r4, #0
 8003424:	e710      	b.n	8003248 <__aeabi_dsub+0x328>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d000      	beq.n	800342c <__aeabi_dsub+0x50c>
 800342a:	e0d6      	b.n	80035da <__aeabi_dsub+0x6ba>
 800342c:	2900      	cmp	r1, #0
 800342e:	d000      	beq.n	8003432 <__aeabi_dsub+0x512>
 8003430:	e12f      	b.n	8003692 <__aeabi_dsub+0x772>
 8003432:	2480      	movs	r4, #128	@ 0x80
 8003434:	2600      	movs	r6, #0
 8003436:	4d7e      	ldr	r5, [pc, #504]	@ (8003630 <__aeabi_dsub+0x710>)
 8003438:	0324      	lsls	r4, r4, #12
 800343a:	e705      	b.n	8003248 <__aeabi_dsub+0x328>
 800343c:	4666      	mov	r6, ip
 800343e:	465c      	mov	r4, fp
 8003440:	08d0      	lsrs	r0, r2, #3
 8003442:	e717      	b.n	8003274 <__aeabi_dsub+0x354>
 8003444:	465b      	mov	r3, fp
 8003446:	1a17      	subs	r7, r2, r0
 8003448:	42ba      	cmp	r2, r7
 800344a:	4192      	sbcs	r2, r2
 800344c:	1b1c      	subs	r4, r3, r4
 800344e:	2601      	movs	r6, #1
 8003450:	4663      	mov	r3, ip
 8003452:	4252      	negs	r2, r2
 8003454:	1aa4      	subs	r4, r4, r2
 8003456:	401e      	ands	r6, r3
 8003458:	e5c4      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 800345a:	1883      	adds	r3, r0, r2
 800345c:	4283      	cmp	r3, r0
 800345e:	4180      	sbcs	r0, r0
 8003460:	445c      	add	r4, fp
 8003462:	4240      	negs	r0, r0
 8003464:	1825      	adds	r5, r4, r0
 8003466:	022a      	lsls	r2, r5, #8
 8003468:	d400      	bmi.n	800346c <__aeabi_dsub+0x54c>
 800346a:	e0da      	b.n	8003622 <__aeabi_dsub+0x702>
 800346c:	4a72      	ldr	r2, [pc, #456]	@ (8003638 <__aeabi_dsub+0x718>)
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	4015      	ands	r5, r2
 8003472:	07ea      	lsls	r2, r5, #31
 8003474:	431a      	orrs	r2, r3
 8003476:	0869      	lsrs	r1, r5, #1
 8003478:	075b      	lsls	r3, r3, #29
 800347a:	d400      	bmi.n	800347e <__aeabi_dsub+0x55e>
 800347c:	e14a      	b.n	8003714 <__aeabi_dsub+0x7f4>
 800347e:	230f      	movs	r3, #15
 8003480:	4013      	ands	r3, r2
 8003482:	2b04      	cmp	r3, #4
 8003484:	d100      	bne.n	8003488 <__aeabi_dsub+0x568>
 8003486:	e0fc      	b.n	8003682 <__aeabi_dsub+0x762>
 8003488:	1d17      	adds	r7, r2, #4
 800348a:	4297      	cmp	r7, r2
 800348c:	41a4      	sbcs	r4, r4
 800348e:	4264      	negs	r4, r4
 8003490:	2502      	movs	r5, #2
 8003492:	1864      	adds	r4, r4, r1
 8003494:	e6ec      	b.n	8003270 <__aeabi_dsub+0x350>
 8003496:	4647      	mov	r7, r8
 8003498:	001c      	movs	r4, r3
 800349a:	431f      	orrs	r7, r3
 800349c:	d000      	beq.n	80034a0 <__aeabi_dsub+0x580>
 800349e:	e743      	b.n	8003328 <__aeabi_dsub+0x408>
 80034a0:	2600      	movs	r6, #0
 80034a2:	2500      	movs	r5, #0
 80034a4:	2400      	movs	r4, #0
 80034a6:	e6cf      	b.n	8003248 <__aeabi_dsub+0x328>
 80034a8:	08c0      	lsrs	r0, r0, #3
 80034aa:	0767      	lsls	r7, r4, #29
 80034ac:	4307      	orrs	r7, r0
 80034ae:	08e5      	lsrs	r5, r4, #3
 80034b0:	e632      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80034b2:	1a87      	subs	r7, r0, r2
 80034b4:	465b      	mov	r3, fp
 80034b6:	42b8      	cmp	r0, r7
 80034b8:	4180      	sbcs	r0, r0
 80034ba:	1ae4      	subs	r4, r4, r3
 80034bc:	4240      	negs	r0, r0
 80034be:	1a24      	subs	r4, r4, r0
 80034c0:	0223      	lsls	r3, r4, #8
 80034c2:	d428      	bmi.n	8003516 <__aeabi_dsub+0x5f6>
 80034c4:	0763      	lsls	r3, r4, #29
 80034c6:	08ff      	lsrs	r7, r7, #3
 80034c8:	431f      	orrs	r7, r3
 80034ca:	08e5      	lsrs	r5, r4, #3
 80034cc:	2301      	movs	r3, #1
 80034ce:	e77f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d100      	bne.n	80034d6 <__aeabi_dsub+0x5b6>
 80034d4:	e673      	b.n	80031be <__aeabi_dsub+0x29e>
 80034d6:	464b      	mov	r3, r9
 80034d8:	1b5f      	subs	r7, r3, r5
 80034da:	003b      	movs	r3, r7
 80034dc:	2d00      	cmp	r5, #0
 80034de:	d100      	bne.n	80034e2 <__aeabi_dsub+0x5c2>
 80034e0:	e742      	b.n	8003368 <__aeabi_dsub+0x448>
 80034e2:	2f38      	cmp	r7, #56	@ 0x38
 80034e4:	dd00      	ble.n	80034e8 <__aeabi_dsub+0x5c8>
 80034e6:	e0ec      	b.n	80036c2 <__aeabi_dsub+0x7a2>
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	000e      	movs	r6, r1
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	431c      	orrs	r4, r3
 80034f0:	2f1f      	cmp	r7, #31
 80034f2:	dc25      	bgt.n	8003540 <__aeabi_dsub+0x620>
 80034f4:	2520      	movs	r5, #32
 80034f6:	0023      	movs	r3, r4
 80034f8:	1bed      	subs	r5, r5, r7
 80034fa:	0001      	movs	r1, r0
 80034fc:	40a8      	lsls	r0, r5
 80034fe:	40ab      	lsls	r3, r5
 8003500:	40f9      	lsrs	r1, r7
 8003502:	1e45      	subs	r5, r0, #1
 8003504:	41a8      	sbcs	r0, r5
 8003506:	430b      	orrs	r3, r1
 8003508:	40fc      	lsrs	r4, r7
 800350a:	4318      	orrs	r0, r3
 800350c:	465b      	mov	r3, fp
 800350e:	1b1b      	subs	r3, r3, r4
 8003510:	469b      	mov	fp, r3
 8003512:	e739      	b.n	8003388 <__aeabi_dsub+0x468>
 8003514:	4666      	mov	r6, ip
 8003516:	2501      	movs	r5, #1
 8003518:	e562      	b.n	8002fe0 <__aeabi_dsub+0xc0>
 800351a:	001f      	movs	r7, r3
 800351c:	4659      	mov	r1, fp
 800351e:	3f20      	subs	r7, #32
 8003520:	40f9      	lsrs	r1, r7
 8003522:	468c      	mov	ip, r1
 8003524:	2b20      	cmp	r3, #32
 8003526:	d005      	beq.n	8003534 <__aeabi_dsub+0x614>
 8003528:	2740      	movs	r7, #64	@ 0x40
 800352a:	4659      	mov	r1, fp
 800352c:	1afb      	subs	r3, r7, r3
 800352e:	4099      	lsls	r1, r3
 8003530:	430a      	orrs	r2, r1
 8003532:	4692      	mov	sl, r2
 8003534:	4657      	mov	r7, sl
 8003536:	1e7b      	subs	r3, r7, #1
 8003538:	419f      	sbcs	r7, r3
 800353a:	4663      	mov	r3, ip
 800353c:	431f      	orrs	r7, r3
 800353e:	e5c1      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003540:	003b      	movs	r3, r7
 8003542:	0025      	movs	r5, r4
 8003544:	3b20      	subs	r3, #32
 8003546:	40dd      	lsrs	r5, r3
 8003548:	2f20      	cmp	r7, #32
 800354a:	d004      	beq.n	8003556 <__aeabi_dsub+0x636>
 800354c:	2340      	movs	r3, #64	@ 0x40
 800354e:	1bdb      	subs	r3, r3, r7
 8003550:	409c      	lsls	r4, r3
 8003552:	4320      	orrs	r0, r4
 8003554:	4680      	mov	r8, r0
 8003556:	4640      	mov	r0, r8
 8003558:	1e43      	subs	r3, r0, #1
 800355a:	4198      	sbcs	r0, r3
 800355c:	4328      	orrs	r0, r5
 800355e:	e713      	b.n	8003388 <__aeabi_dsub+0x468>
 8003560:	2900      	cmp	r1, #0
 8003562:	d09d      	beq.n	80034a0 <__aeabi_dsub+0x580>
 8003564:	2601      	movs	r6, #1
 8003566:	4663      	mov	r3, ip
 8003568:	465c      	mov	r4, fp
 800356a:	4690      	mov	r8, r2
 800356c:	401e      	ands	r6, r3
 800356e:	e6db      	b.n	8003328 <__aeabi_dsub+0x408>
 8003570:	1a17      	subs	r7, r2, r0
 8003572:	465b      	mov	r3, fp
 8003574:	42ba      	cmp	r2, r7
 8003576:	4192      	sbcs	r2, r2
 8003578:	1b1c      	subs	r4, r3, r4
 800357a:	4252      	negs	r2, r2
 800357c:	1aa4      	subs	r4, r4, r2
 800357e:	0223      	lsls	r3, r4, #8
 8003580:	d4c8      	bmi.n	8003514 <__aeabi_dsub+0x5f4>
 8003582:	0763      	lsls	r3, r4, #29
 8003584:	08ff      	lsrs	r7, r7, #3
 8003586:	431f      	orrs	r7, r3
 8003588:	4666      	mov	r6, ip
 800358a:	2301      	movs	r3, #1
 800358c:	08e5      	lsrs	r5, r4, #3
 800358e:	e71f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003590:	001d      	movs	r5, r3
 8003592:	2400      	movs	r4, #0
 8003594:	2700      	movs	r7, #0
 8003596:	e657      	b.n	8003248 <__aeabi_dsub+0x328>
 8003598:	465c      	mov	r4, fp
 800359a:	08d0      	lsrs	r0, r2, #3
 800359c:	e66a      	b.n	8003274 <__aeabi_dsub+0x354>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d100      	bne.n	80035a4 <__aeabi_dsub+0x684>
 80035a2:	e737      	b.n	8003414 <__aeabi_dsub+0x4f4>
 80035a4:	4653      	mov	r3, sl
 80035a6:	08c0      	lsrs	r0, r0, #3
 80035a8:	0767      	lsls	r7, r4, #29
 80035aa:	4307      	orrs	r7, r0
 80035ac:	08e5      	lsrs	r5, r4, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d100      	bne.n	80035b4 <__aeabi_dsub+0x694>
 80035b2:	e5b1      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	031b      	lsls	r3, r3, #12
 80035b8:	421d      	tst	r5, r3
 80035ba:	d008      	beq.n	80035ce <__aeabi_dsub+0x6ae>
 80035bc:	4659      	mov	r1, fp
 80035be:	08c8      	lsrs	r0, r1, #3
 80035c0:	4218      	tst	r0, r3
 80035c2:	d104      	bne.n	80035ce <__aeabi_dsub+0x6ae>
 80035c4:	08d2      	lsrs	r2, r2, #3
 80035c6:	0749      	lsls	r1, r1, #29
 80035c8:	430a      	orrs	r2, r1
 80035ca:	0017      	movs	r7, r2
 80035cc:	0005      	movs	r5, r0
 80035ce:	0f7b      	lsrs	r3, r7, #29
 80035d0:	00ff      	lsls	r7, r7, #3
 80035d2:	08ff      	lsrs	r7, r7, #3
 80035d4:	075b      	lsls	r3, r3, #29
 80035d6:	431f      	orrs	r7, r3
 80035d8:	e59e      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035da:	08c0      	lsrs	r0, r0, #3
 80035dc:	0763      	lsls	r3, r4, #29
 80035de:	4318      	orrs	r0, r3
 80035e0:	08e5      	lsrs	r5, r4, #3
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d053      	beq.n	800368e <__aeabi_dsub+0x76e>
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	031b      	lsls	r3, r3, #12
 80035ea:	421d      	tst	r5, r3
 80035ec:	d00a      	beq.n	8003604 <__aeabi_dsub+0x6e4>
 80035ee:	4659      	mov	r1, fp
 80035f0:	08cc      	lsrs	r4, r1, #3
 80035f2:	421c      	tst	r4, r3
 80035f4:	d106      	bne.n	8003604 <__aeabi_dsub+0x6e4>
 80035f6:	2601      	movs	r6, #1
 80035f8:	4663      	mov	r3, ip
 80035fa:	0025      	movs	r5, r4
 80035fc:	08d0      	lsrs	r0, r2, #3
 80035fe:	0749      	lsls	r1, r1, #29
 8003600:	4308      	orrs	r0, r1
 8003602:	401e      	ands	r6, r3
 8003604:	0f47      	lsrs	r7, r0, #29
 8003606:	00c0      	lsls	r0, r0, #3
 8003608:	08c0      	lsrs	r0, r0, #3
 800360a:	077f      	lsls	r7, r7, #29
 800360c:	4307      	orrs	r7, r0
 800360e:	e583      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003610:	1883      	adds	r3, r0, r2
 8003612:	4293      	cmp	r3, r2
 8003614:	4192      	sbcs	r2, r2
 8003616:	445c      	add	r4, fp
 8003618:	4252      	negs	r2, r2
 800361a:	18a5      	adds	r5, r4, r2
 800361c:	022a      	lsls	r2, r5, #8
 800361e:	d500      	bpl.n	8003622 <__aeabi_dsub+0x702>
 8003620:	e724      	b.n	800346c <__aeabi_dsub+0x54c>
 8003622:	076f      	lsls	r7, r5, #29
 8003624:	08db      	lsrs	r3, r3, #3
 8003626:	431f      	orrs	r7, r3
 8003628:	08ed      	lsrs	r5, r5, #3
 800362a:	2301      	movs	r3, #1
 800362c:	e6d0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	000007ff 	.word	0x000007ff
 8003634:	000007fe 	.word	0x000007fe
 8003638:	ff7fffff 	.word	0xff7fffff
 800363c:	465b      	mov	r3, fp
 800363e:	08d2      	lsrs	r2, r2, #3
 8003640:	075f      	lsls	r7, r3, #29
 8003642:	4666      	mov	r6, ip
 8003644:	4317      	orrs	r7, r2
 8003646:	08dd      	lsrs	r5, r3, #3
 8003648:	e566      	b.n	8003118 <__aeabi_dsub+0x1f8>
 800364a:	0025      	movs	r5, r4
 800364c:	3b20      	subs	r3, #32
 800364e:	40dd      	lsrs	r5, r3
 8003650:	4663      	mov	r3, ip
 8003652:	2b20      	cmp	r3, #32
 8003654:	d005      	beq.n	8003662 <__aeabi_dsub+0x742>
 8003656:	2340      	movs	r3, #64	@ 0x40
 8003658:	4661      	mov	r1, ip
 800365a:	1a5b      	subs	r3, r3, r1
 800365c:	409c      	lsls	r4, r3
 800365e:	4320      	orrs	r0, r4
 8003660:	4680      	mov	r8, r0
 8003662:	4647      	mov	r7, r8
 8003664:	1e7b      	subs	r3, r7, #1
 8003666:	419f      	sbcs	r7, r3
 8003668:	432f      	orrs	r7, r5
 800366a:	e5a0      	b.n	80031ae <__aeabi_dsub+0x28e>
 800366c:	2120      	movs	r1, #32
 800366e:	2700      	movs	r7, #0
 8003670:	1a09      	subs	r1, r1, r0
 8003672:	e4d2      	b.n	800301a <__aeabi_dsub+0xfa>
 8003674:	2f00      	cmp	r7, #0
 8003676:	d100      	bne.n	800367a <__aeabi_dsub+0x75a>
 8003678:	e713      	b.n	80034a2 <__aeabi_dsub+0x582>
 800367a:	465c      	mov	r4, fp
 800367c:	0017      	movs	r7, r2
 800367e:	2500      	movs	r5, #0
 8003680:	e5f6      	b.n	8003270 <__aeabi_dsub+0x350>
 8003682:	08d7      	lsrs	r7, r2, #3
 8003684:	0749      	lsls	r1, r1, #29
 8003686:	2302      	movs	r3, #2
 8003688:	430f      	orrs	r7, r1
 800368a:	092d      	lsrs	r5, r5, #4
 800368c:	e6a0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800368e:	0007      	movs	r7, r0
 8003690:	e542      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003692:	465b      	mov	r3, fp
 8003694:	2601      	movs	r6, #1
 8003696:	075f      	lsls	r7, r3, #29
 8003698:	08dd      	lsrs	r5, r3, #3
 800369a:	4663      	mov	r3, ip
 800369c:	08d2      	lsrs	r2, r2, #3
 800369e:	4317      	orrs	r7, r2
 80036a0:	401e      	ands	r6, r3
 80036a2:	e539      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036a4:	465b      	mov	r3, fp
 80036a6:	08d2      	lsrs	r2, r2, #3
 80036a8:	075f      	lsls	r7, r3, #29
 80036aa:	4317      	orrs	r7, r2
 80036ac:	08dd      	lsrs	r5, r3, #3
 80036ae:	e533      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036b0:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <__aeabi_dsub+0x80c>)
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	4022      	ands	r2, r4
 80036b6:	0757      	lsls	r7, r2, #29
 80036b8:	0252      	lsls	r2, r2, #9
 80036ba:	2501      	movs	r5, #1
 80036bc:	431f      	orrs	r7, r3
 80036be:	0b14      	lsrs	r4, r2, #12
 80036c0:	e5c2      	b.n	8003248 <__aeabi_dsub+0x328>
 80036c2:	000e      	movs	r6, r1
 80036c4:	2001      	movs	r0, #1
 80036c6:	e65f      	b.n	8003388 <__aeabi_dsub+0x468>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <__aeabi_dsub+0x7c8>
 80036cc:	464b      	mov	r3, r9
 80036ce:	1b5b      	subs	r3, r3, r5
 80036d0:	469c      	mov	ip, r3
 80036d2:	2d00      	cmp	r5, #0
 80036d4:	d100      	bne.n	80036d8 <__aeabi_dsub+0x7b8>
 80036d6:	e548      	b.n	800316a <__aeabi_dsub+0x24a>
 80036d8:	2701      	movs	r7, #1
 80036da:	2b38      	cmp	r3, #56	@ 0x38
 80036dc:	dd00      	ble.n	80036e0 <__aeabi_dsub+0x7c0>
 80036de:	e566      	b.n	80031ae <__aeabi_dsub+0x28e>
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431c      	orrs	r4, r3
 80036e6:	e550      	b.n	800318a <__aeabi_dsub+0x26a>
 80036e8:	1c6b      	adds	r3, r5, #1
 80036ea:	4d11      	ldr	r5, [pc, #68]	@ (8003730 <__aeabi_dsub+0x810>)
 80036ec:	422b      	tst	r3, r5
 80036ee:	d000      	beq.n	80036f2 <__aeabi_dsub+0x7d2>
 80036f0:	e673      	b.n	80033da <__aeabi_dsub+0x4ba>
 80036f2:	4659      	mov	r1, fp
 80036f4:	0023      	movs	r3, r4
 80036f6:	4311      	orrs	r1, r2
 80036f8:	468a      	mov	sl, r1
 80036fa:	4303      	orrs	r3, r0
 80036fc:	e600      	b.n	8003300 <__aeabi_dsub+0x3e0>
 80036fe:	0767      	lsls	r7, r4, #29
 8003700:	08c0      	lsrs	r0, r0, #3
 8003702:	2300      	movs	r3, #0
 8003704:	4307      	orrs	r7, r0
 8003706:	08e5      	lsrs	r5, r4, #3
 8003708:	e662      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800370a:	0764      	lsls	r4, r4, #29
 800370c:	08ff      	lsrs	r7, r7, #3
 800370e:	4327      	orrs	r7, r4
 8003710:	0905      	lsrs	r5, r0, #4
 8003712:	e65d      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003714:	08d2      	lsrs	r2, r2, #3
 8003716:	0749      	lsls	r1, r1, #29
 8003718:	4311      	orrs	r1, r2
 800371a:	000f      	movs	r7, r1
 800371c:	2302      	movs	r3, #2
 800371e:	092d      	lsrs	r5, r5, #4
 8003720:	e656      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003722:	0007      	movs	r7, r0
 8003724:	e5a4      	b.n	8003270 <__aeabi_dsub+0x350>
 8003726:	0038      	movs	r0, r7
 8003728:	e48f      	b.n	800304a <__aeabi_dsub+0x12a>
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	ff7fffff 	.word	0xff7fffff
 8003730:	000007fe 	.word	0x000007fe

08003734 <__aeabi_dcmpun>:
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	46c6      	mov	lr, r8
 8003738:	031e      	lsls	r6, r3, #12
 800373a:	0b36      	lsrs	r6, r6, #12
 800373c:	46b0      	mov	r8, r6
 800373e:	4e0d      	ldr	r6, [pc, #52]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003740:	030c      	lsls	r4, r1, #12
 8003742:	004d      	lsls	r5, r1, #1
 8003744:	005f      	lsls	r7, r3, #1
 8003746:	b500      	push	{lr}
 8003748:	0b24      	lsrs	r4, r4, #12
 800374a:	0d6d      	lsrs	r5, r5, #21
 800374c:	0d7f      	lsrs	r7, r7, #21
 800374e:	42b5      	cmp	r5, r6
 8003750:	d00b      	beq.n	800376a <__aeabi_dcmpun+0x36>
 8003752:	4908      	ldr	r1, [pc, #32]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003754:	2000      	movs	r0, #0
 8003756:	428f      	cmp	r7, r1
 8003758:	d104      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 800375a:	4646      	mov	r6, r8
 800375c:	4316      	orrs	r6, r2
 800375e:	0030      	movs	r0, r6
 8003760:	1e43      	subs	r3, r0, #1
 8003762:	4198      	sbcs	r0, r3
 8003764:	bc80      	pop	{r7}
 8003766:	46b8      	mov	r8, r7
 8003768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800376a:	4304      	orrs	r4, r0
 800376c:	2001      	movs	r0, #1
 800376e:	2c00      	cmp	r4, #0
 8003770:	d1f8      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 8003772:	e7ee      	b.n	8003752 <__aeabi_dcmpun+0x1e>
 8003774:	000007ff 	.word	0x000007ff

08003778 <__aeabi_d2iz>:
 8003778:	000b      	movs	r3, r1
 800377a:	0002      	movs	r2, r0
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d16      	ldr	r5, [pc, #88]	@ (80037d8 <__aeabi_d2iz+0x60>)
 8003780:	030c      	lsls	r4, r1, #12
 8003782:	b082      	sub	sp, #8
 8003784:	0049      	lsls	r1, r1, #1
 8003786:	2000      	movs	r0, #0
 8003788:	9200      	str	r2, [sp, #0]
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	0b24      	lsrs	r4, r4, #12
 800378e:	0d49      	lsrs	r1, r1, #21
 8003790:	0fde      	lsrs	r6, r3, #31
 8003792:	42a9      	cmp	r1, r5
 8003794:	dd04      	ble.n	80037a0 <__aeabi_d2iz+0x28>
 8003796:	4811      	ldr	r0, [pc, #68]	@ (80037dc <__aeabi_d2iz+0x64>)
 8003798:	4281      	cmp	r1, r0
 800379a:	dd03      	ble.n	80037a4 <__aeabi_d2iz+0x2c>
 800379c:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <__aeabi_d2iz+0x68>)
 800379e:	18f0      	adds	r0, r6, r3
 80037a0:	b002      	add	sp, #8
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	2080      	movs	r0, #128	@ 0x80
 80037a6:	0340      	lsls	r0, r0, #13
 80037a8:	4320      	orrs	r0, r4
 80037aa:	4c0e      	ldr	r4, [pc, #56]	@ (80037e4 <__aeabi_d2iz+0x6c>)
 80037ac:	1a64      	subs	r4, r4, r1
 80037ae:	2c1f      	cmp	r4, #31
 80037b0:	dd08      	ble.n	80037c4 <__aeabi_d2iz+0x4c>
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <__aeabi_d2iz+0x70>)
 80037b4:	1a5b      	subs	r3, r3, r1
 80037b6:	40d8      	lsrs	r0, r3
 80037b8:	0003      	movs	r3, r0
 80037ba:	4258      	negs	r0, r3
 80037bc:	2e00      	cmp	r6, #0
 80037be:	d1ef      	bne.n	80037a0 <__aeabi_d2iz+0x28>
 80037c0:	0018      	movs	r0, r3
 80037c2:	e7ed      	b.n	80037a0 <__aeabi_d2iz+0x28>
 80037c4:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <__aeabi_d2iz+0x74>)
 80037c6:	9a00      	ldr	r2, [sp, #0]
 80037c8:	469c      	mov	ip, r3
 80037ca:	0003      	movs	r3, r0
 80037cc:	4461      	add	r1, ip
 80037ce:	408b      	lsls	r3, r1
 80037d0:	40e2      	lsrs	r2, r4
 80037d2:	4313      	orrs	r3, r2
 80037d4:	e7f1      	b.n	80037ba <__aeabi_d2iz+0x42>
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	000003fe 	.word	0x000003fe
 80037dc:	0000041d 	.word	0x0000041d
 80037e0:	7fffffff 	.word	0x7fffffff
 80037e4:	00000433 	.word	0x00000433
 80037e8:	00000413 	.word	0x00000413
 80037ec:	fffffbed 	.word	0xfffffbed

080037f0 <__aeabi_i2d>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d016      	beq.n	8003824 <__aeabi_i2d+0x34>
 80037f6:	17c3      	asrs	r3, r0, #31
 80037f8:	18c5      	adds	r5, r0, r3
 80037fa:	405d      	eors	r5, r3
 80037fc:	0fc4      	lsrs	r4, r0, #31
 80037fe:	0028      	movs	r0, r5
 8003800:	f000 f912 	bl	8003a28 <__clzsi2>
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <__aeabi_i2d+0x58>)
 8003806:	1a1b      	subs	r3, r3, r0
 8003808:	055b      	lsls	r3, r3, #21
 800380a:	0d5b      	lsrs	r3, r3, #21
 800380c:	280a      	cmp	r0, #10
 800380e:	dc14      	bgt.n	800383a <__aeabi_i2d+0x4a>
 8003810:	0002      	movs	r2, r0
 8003812:	002e      	movs	r6, r5
 8003814:	3215      	adds	r2, #21
 8003816:	4096      	lsls	r6, r2
 8003818:	220b      	movs	r2, #11
 800381a:	1a12      	subs	r2, r2, r0
 800381c:	40d5      	lsrs	r5, r2
 800381e:	032d      	lsls	r5, r5, #12
 8003820:	0b2d      	lsrs	r5, r5, #12
 8003822:	e003      	b.n	800382c <__aeabi_i2d+0x3c>
 8003824:	2400      	movs	r4, #0
 8003826:	2300      	movs	r3, #0
 8003828:	2500      	movs	r5, #0
 800382a:	2600      	movs	r6, #0
 800382c:	051b      	lsls	r3, r3, #20
 800382e:	432b      	orrs	r3, r5
 8003830:	07e4      	lsls	r4, r4, #31
 8003832:	4323      	orrs	r3, r4
 8003834:	0030      	movs	r0, r6
 8003836:	0019      	movs	r1, r3
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	380b      	subs	r0, #11
 800383c:	4085      	lsls	r5, r0
 800383e:	032d      	lsls	r5, r5, #12
 8003840:	2600      	movs	r6, #0
 8003842:	0b2d      	lsrs	r5, r5, #12
 8003844:	e7f2      	b.n	800382c <__aeabi_i2d+0x3c>
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	0000041e 	.word	0x0000041e

0800384c <__aeabi_ui2d>:
 800384c:	b510      	push	{r4, lr}
 800384e:	1e04      	subs	r4, r0, #0
 8003850:	d010      	beq.n	8003874 <__aeabi_ui2d+0x28>
 8003852:	f000 f8e9 	bl	8003a28 <__clzsi2>
 8003856:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <__aeabi_ui2d+0x44>)
 8003858:	1a1b      	subs	r3, r3, r0
 800385a:	055b      	lsls	r3, r3, #21
 800385c:	0d5b      	lsrs	r3, r3, #21
 800385e:	280a      	cmp	r0, #10
 8003860:	dc0f      	bgt.n	8003882 <__aeabi_ui2d+0x36>
 8003862:	220b      	movs	r2, #11
 8003864:	0021      	movs	r1, r4
 8003866:	1a12      	subs	r2, r2, r0
 8003868:	40d1      	lsrs	r1, r2
 800386a:	3015      	adds	r0, #21
 800386c:	030a      	lsls	r2, r1, #12
 800386e:	4084      	lsls	r4, r0
 8003870:	0b12      	lsrs	r2, r2, #12
 8003872:	e001      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003874:	2300      	movs	r3, #0
 8003876:	2200      	movs	r2, #0
 8003878:	051b      	lsls	r3, r3, #20
 800387a:	4313      	orrs	r3, r2
 800387c:	0020      	movs	r0, r4
 800387e:	0019      	movs	r1, r3
 8003880:	bd10      	pop	{r4, pc}
 8003882:	0022      	movs	r2, r4
 8003884:	380b      	subs	r0, #11
 8003886:	4082      	lsls	r2, r0
 8003888:	0312      	lsls	r2, r2, #12
 800388a:	2400      	movs	r4, #0
 800388c:	0b12      	lsrs	r2, r2, #12
 800388e:	e7f3      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003890:	0000041e 	.word	0x0000041e

08003894 <__aeabi_f2d>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	0242      	lsls	r2, r0, #9
 8003898:	0043      	lsls	r3, r0, #1
 800389a:	0fc4      	lsrs	r4, r0, #31
 800389c:	20fe      	movs	r0, #254	@ 0xfe
 800389e:	0e1b      	lsrs	r3, r3, #24
 80038a0:	1c59      	adds	r1, r3, #1
 80038a2:	0a55      	lsrs	r5, r2, #9
 80038a4:	4208      	tst	r0, r1
 80038a6:	d00c      	beq.n	80038c2 <__aeabi_f2d+0x2e>
 80038a8:	21e0      	movs	r1, #224	@ 0xe0
 80038aa:	0089      	lsls	r1, r1, #2
 80038ac:	468c      	mov	ip, r1
 80038ae:	076d      	lsls	r5, r5, #29
 80038b0:	0b12      	lsrs	r2, r2, #12
 80038b2:	4463      	add	r3, ip
 80038b4:	051b      	lsls	r3, r3, #20
 80038b6:	4313      	orrs	r3, r2
 80038b8:	07e4      	lsls	r4, r4, #31
 80038ba:	4323      	orrs	r3, r4
 80038bc:	0028      	movs	r0, r5
 80038be:	0019      	movs	r1, r3
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d114      	bne.n	80038f0 <__aeabi_f2d+0x5c>
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d01b      	beq.n	8003902 <__aeabi_f2d+0x6e>
 80038ca:	0028      	movs	r0, r5
 80038cc:	f000 f8ac 	bl	8003a28 <__clzsi2>
 80038d0:	280a      	cmp	r0, #10
 80038d2:	dc1c      	bgt.n	800390e <__aeabi_f2d+0x7a>
 80038d4:	230b      	movs	r3, #11
 80038d6:	002a      	movs	r2, r5
 80038d8:	1a1b      	subs	r3, r3, r0
 80038da:	40da      	lsrs	r2, r3
 80038dc:	0003      	movs	r3, r0
 80038de:	3315      	adds	r3, #21
 80038e0:	409d      	lsls	r5, r3
 80038e2:	4b0e      	ldr	r3, [pc, #56]	@ (800391c <__aeabi_f2d+0x88>)
 80038e4:	0312      	lsls	r2, r2, #12
 80038e6:	1a1b      	subs	r3, r3, r0
 80038e8:	055b      	lsls	r3, r3, #21
 80038ea:	0b12      	lsrs	r2, r2, #12
 80038ec:	0d5b      	lsrs	r3, r3, #21
 80038ee:	e7e1      	b.n	80038b4 <__aeabi_f2d+0x20>
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	d009      	beq.n	8003908 <__aeabi_f2d+0x74>
 80038f4:	0b13      	lsrs	r3, r2, #12
 80038f6:	2280      	movs	r2, #128	@ 0x80
 80038f8:	0312      	lsls	r2, r2, #12
 80038fa:	431a      	orrs	r2, r3
 80038fc:	076d      	lsls	r5, r5, #29
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <__aeabi_f2d+0x8c>)
 8003900:	e7d8      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003902:	2300      	movs	r3, #0
 8003904:	2200      	movs	r2, #0
 8003906:	e7d5      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003908:	2200      	movs	r2, #0
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <__aeabi_f2d+0x8c>)
 800390c:	e7d2      	b.n	80038b4 <__aeabi_f2d+0x20>
 800390e:	0003      	movs	r3, r0
 8003910:	002a      	movs	r2, r5
 8003912:	3b0b      	subs	r3, #11
 8003914:	409a      	lsls	r2, r3
 8003916:	2500      	movs	r5, #0
 8003918:	e7e3      	b.n	80038e2 <__aeabi_f2d+0x4e>
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	00000389 	.word	0x00000389
 8003920:	000007ff 	.word	0x000007ff

08003924 <__aeabi_d2f>:
 8003924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003926:	004b      	lsls	r3, r1, #1
 8003928:	030f      	lsls	r7, r1, #12
 800392a:	0d5b      	lsrs	r3, r3, #21
 800392c:	4c3a      	ldr	r4, [pc, #232]	@ (8003a18 <__aeabi_d2f+0xf4>)
 800392e:	0f45      	lsrs	r5, r0, #29
 8003930:	b083      	sub	sp, #12
 8003932:	0a7f      	lsrs	r7, r7, #9
 8003934:	1c5e      	adds	r6, r3, #1
 8003936:	432f      	orrs	r7, r5
 8003938:	9000      	str	r0, [sp, #0]
 800393a:	9101      	str	r1, [sp, #4]
 800393c:	0fca      	lsrs	r2, r1, #31
 800393e:	00c5      	lsls	r5, r0, #3
 8003940:	4226      	tst	r6, r4
 8003942:	d00b      	beq.n	800395c <__aeabi_d2f+0x38>
 8003944:	4935      	ldr	r1, [pc, #212]	@ (8003a1c <__aeabi_d2f+0xf8>)
 8003946:	185c      	adds	r4, r3, r1
 8003948:	2cfe      	cmp	r4, #254	@ 0xfe
 800394a:	dd13      	ble.n	8003974 <__aeabi_d2f+0x50>
 800394c:	20ff      	movs	r0, #255	@ 0xff
 800394e:	2300      	movs	r3, #0
 8003950:	05c0      	lsls	r0, r0, #23
 8003952:	4318      	orrs	r0, r3
 8003954:	07d2      	lsls	r2, r2, #31
 8003956:	4310      	orrs	r0, r2
 8003958:	b003      	add	sp, #12
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395c:	433d      	orrs	r5, r7
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <__aeabi_d2f+0x42>
 8003962:	2000      	movs	r0, #0
 8003964:	e7f4      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003966:	2d00      	cmp	r5, #0
 8003968:	d0f0      	beq.n	800394c <__aeabi_d2f+0x28>
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	03db      	lsls	r3, r3, #15
 800396e:	20ff      	movs	r0, #255	@ 0xff
 8003970:	433b      	orrs	r3, r7
 8003972:	e7ed      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003974:	2c00      	cmp	r4, #0
 8003976:	dd0c      	ble.n	8003992 <__aeabi_d2f+0x6e>
 8003978:	9b00      	ldr	r3, [sp, #0]
 800397a:	00ff      	lsls	r7, r7, #3
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	4183      	sbcs	r3, r0
 8003982:	0f69      	lsrs	r1, r5, #29
 8003984:	433b      	orrs	r3, r7
 8003986:	430b      	orrs	r3, r1
 8003988:	0759      	lsls	r1, r3, #29
 800398a:	d127      	bne.n	80039dc <__aeabi_d2f+0xb8>
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	b2e0      	uxtb	r0, r4
 8003990:	e7de      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003992:	0021      	movs	r1, r4
 8003994:	3117      	adds	r1, #23
 8003996:	db31      	blt.n	80039fc <__aeabi_d2f+0xd8>
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	201e      	movs	r0, #30
 800399c:	0409      	lsls	r1, r1, #16
 800399e:	4339      	orrs	r1, r7
 80039a0:	1b00      	subs	r0, r0, r4
 80039a2:	281f      	cmp	r0, #31
 80039a4:	dd2d      	ble.n	8003a02 <__aeabi_d2f+0xde>
 80039a6:	2602      	movs	r6, #2
 80039a8:	4276      	negs	r6, r6
 80039aa:	1b34      	subs	r4, r6, r4
 80039ac:	000e      	movs	r6, r1
 80039ae:	40e6      	lsrs	r6, r4
 80039b0:	0034      	movs	r4, r6
 80039b2:	2820      	cmp	r0, #32
 80039b4:	d004      	beq.n	80039c0 <__aeabi_d2f+0x9c>
 80039b6:	481a      	ldr	r0, [pc, #104]	@ (8003a20 <__aeabi_d2f+0xfc>)
 80039b8:	4684      	mov	ip, r0
 80039ba:	4463      	add	r3, ip
 80039bc:	4099      	lsls	r1, r3
 80039be:	430d      	orrs	r5, r1
 80039c0:	002b      	movs	r3, r5
 80039c2:	1e59      	subs	r1, r3, #1
 80039c4:	418b      	sbcs	r3, r1
 80039c6:	4323      	orrs	r3, r4
 80039c8:	0759      	lsls	r1, r3, #29
 80039ca:	d003      	beq.n	80039d4 <__aeabi_d2f+0xb0>
 80039cc:	210f      	movs	r1, #15
 80039ce:	4019      	ands	r1, r3
 80039d0:	2904      	cmp	r1, #4
 80039d2:	d10b      	bne.n	80039ec <__aeabi_d2f+0xc8>
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	2000      	movs	r0, #0
 80039d8:	0a5b      	lsrs	r3, r3, #9
 80039da:	e7b9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039dc:	210f      	movs	r1, #15
 80039de:	4019      	ands	r1, r3
 80039e0:	2904      	cmp	r1, #4
 80039e2:	d104      	bne.n	80039ee <__aeabi_d2f+0xca>
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	b2e0      	uxtb	r0, r4
 80039ea:	e7b1      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039ec:	2400      	movs	r4, #0
 80039ee:	3304      	adds	r3, #4
 80039f0:	0159      	lsls	r1, r3, #5
 80039f2:	d5f7      	bpl.n	80039e4 <__aeabi_d2f+0xc0>
 80039f4:	3401      	adds	r4, #1
 80039f6:	2300      	movs	r3, #0
 80039f8:	b2e0      	uxtb	r0, r4
 80039fa:	e7a9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039fc:	2000      	movs	r0, #0
 80039fe:	2300      	movs	r3, #0
 8003a00:	e7a6      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003a02:	4c08      	ldr	r4, [pc, #32]	@ (8003a24 <__aeabi_d2f+0x100>)
 8003a04:	191c      	adds	r4, r3, r4
 8003a06:	002b      	movs	r3, r5
 8003a08:	40a5      	lsls	r5, r4
 8003a0a:	40c3      	lsrs	r3, r0
 8003a0c:	40a1      	lsls	r1, r4
 8003a0e:	1e68      	subs	r0, r5, #1
 8003a10:	4185      	sbcs	r5, r0
 8003a12:	4329      	orrs	r1, r5
 8003a14:	430b      	orrs	r3, r1
 8003a16:	e7d7      	b.n	80039c8 <__aeabi_d2f+0xa4>
 8003a18:	000007fe 	.word	0x000007fe
 8003a1c:	fffffc80 	.word	0xfffffc80
 8003a20:	fffffca2 	.word	0xfffffca2
 8003a24:	fffffc82 	.word	0xfffffc82

08003a28 <__clzsi2>:
 8003a28:	211c      	movs	r1, #28
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	4298      	cmp	r0, r3
 8003a30:	d301      	bcc.n	8003a36 <__clzsi2+0xe>
 8003a32:	0c00      	lsrs	r0, r0, #16
 8003a34:	3910      	subs	r1, #16
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	d301      	bcc.n	8003a40 <__clzsi2+0x18>
 8003a3c:	0a00      	lsrs	r0, r0, #8
 8003a3e:	3908      	subs	r1, #8
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	4298      	cmp	r0, r3
 8003a44:	d301      	bcc.n	8003a4a <__clzsi2+0x22>
 8003a46:	0900      	lsrs	r0, r0, #4
 8003a48:	3904      	subs	r1, #4
 8003a4a:	a202      	add	r2, pc, #8	@ (adr r2, 8003a54 <__clzsi2+0x2c>)
 8003a4c:	5c10      	ldrb	r0, [r2, r0]
 8003a4e:	1840      	adds	r0, r0, r1
 8003a50:	4770      	bx	lr
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	02020304 	.word	0x02020304
 8003a58:	01010101 	.word	0x01010101
	...

08003a64 <__clzdi2>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	2900      	cmp	r1, #0
 8003a68:	d103      	bne.n	8003a72 <__clzdi2+0xe>
 8003a6a:	f7ff ffdd 	bl	8003a28 <__clzsi2>
 8003a6e:	3020      	adds	r0, #32
 8003a70:	e002      	b.n	8003a78 <__clzdi2+0x14>
 8003a72:	0008      	movs	r0, r1
 8003a74:	f7ff ffd8 	bl	8003a28 <__clzsi2>
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)

08003a7c <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	0004      	movs	r4, r0
 8003a84:	0008      	movs	r0, r1
 8003a86:	60ba      	str	r2, [r7, #8]
 8003a88:	0019      	movs	r1, r3
 8003a8a:	260e      	movs	r6, #14
 8003a8c:	19bb      	adds	r3, r7, r6
 8003a8e:	1c22      	adds	r2, r4, #0
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	230c      	movs	r3, #12
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	1c02      	adds	r2, r0, #0
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	1dbb      	adds	r3, r7, #6
 8003a9c:	1c0a      	adds	r2, r1, #0
 8003a9e:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aaa:	681c      	ldr	r4, [r3, #0]
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <WriteMemRegister+0x5c>)
 8003aae:	7918      	ldrb	r0, [r3, #4]
 8003ab0:	68bd      	ldr	r5, [r7, #8]
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	19bb      	adds	r3, r7, r6
 8003aba:	8819      	ldrh	r1, [r3, #0]
 8003abc:	1dbb      	adds	r3, r7, #6
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	002b      	movs	r3, r5
 8003ac4:	47a0      	blx	r4
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	e000      	b.n	8003acc <WriteMemRegister+0x50>
  }
  return false;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b005      	add	sp, #20
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad4:	20000468 	.word	0x20000468
 8003ad8:	20000498 	.word	0x20000498

08003adc <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	0004      	movs	r4, r0
 8003ae4:	0008      	movs	r0, r1
 8003ae6:	60ba      	str	r2, [r7, #8]
 8003ae8:	0019      	movs	r1, r3
 8003aea:	260e      	movs	r6, #14
 8003aec:	19bb      	adds	r3, r7, r6
 8003aee:	1c22      	adds	r2, r4, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	230c      	movs	r3, #12
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	1c02      	adds	r2, r0, #0
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	1dbb      	adds	r3, r7, #6
 8003afc:	1c0a      	adds	r2, r1, #0
 8003afe:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 8003b00:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b0a:	681c      	ldr	r4, [r3, #0]
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <ReadMemRegister+0x5c>)
 8003b0e:	7918      	ldrb	r0, [r3, #4]
 8003b10:	68bd      	ldr	r5, [r7, #8]
 8003b12:	230c      	movs	r3, #12
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	19bb      	adds	r3, r7, r6
 8003b1a:	8819      	ldrh	r1, [r3, #0]
 8003b1c:	1dbb      	adds	r3, r7, #6
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	002b      	movs	r3, r5
 8003b24:	47a0      	blx	r4
 8003b26:	0003      	movs	r3, r0
 8003b28:	e000      	b.n	8003b2c <ReadMemRegister+0x50>
  }
  return false;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b005      	add	sp, #20
 8003b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b34:	20000464 	.word	0x20000464
 8003b38:	20000498 	.word	0x20000498

08003b3c <ResetENS160samplecounter>:

void ResetENS160samplecounter() {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  enscnt = 0;
 8003b40:	4b02      	ldr	r3, [pc, #8]	@ (8003b4c <ResetENS160samplecounter+0x10>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000460 	.word	0x20000460

08003b50 <setENS160TimeStamp>:
void setENS160TimeStamp(uint32_t ticks) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 8003b58:	f010 ff2e 	bl	80149b8 <HAL_GetTick>
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	18d2      	adds	r2, r2, r3
 8003b62:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <setENS160TimeStamp+0x20>)
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	2000045c 	.word	0x2000045c

08003b74 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <ENS_Init+0x20>)
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <ENS_Init+0x24>)
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
}	
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000464 	.word	0x20000464
 8003b98:	20000468 	.word	0x20000468

08003b9c <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003ba2:	1dbb      	adds	r3, r7, #6
 8003ba4:	22f0      	movs	r2, #240	@ 0xf0
 8003ba6:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 8003ba8:	1dba      	adds	r2, r7, #6
 8003baa:	2301      	movs	r3, #1
 8003bac:	2101      	movs	r1, #1
 8003bae:	2010      	movs	r0, #16
 8003bb0:	f7ff ff64 	bl	8003a7c <WriteMemRegister>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	1dfb      	adds	r3, r7, #7
 8003bba:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 8003bbc:	201e      	movs	r0, #30
 8003bbe:	f010 ff05 	bl	80149cc <HAL_Delay>
	return result;
 8003bc2:	1dfb      	adds	r3, r7, #7
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	4193      	sbcs	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 8003bda:	003b      	movs	r3, r7
 8003bdc:	2200      	movs	r2, #0
 8003bde:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 8003be6:	003a      	movs	r2, r7
 8003be8:	2302      	movs	r3, #2
 8003bea:	2101      	movs	r1, #1
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7ff ff75 	bl	8003adc <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 8003bf2:	003b      	movs	r3, r7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	003b      	movs	r3, r7
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b21a      	sxth	r2, r3
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <ENS160_checkPartID+0xa8>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d015      	beq.n	8003c3e <ENS160_checkPartID+0x6a>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	23b0      	movs	r3, #176	@ 0xb0
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d009      	beq.n	8003c32 <ENS160_checkPartID+0x5e>
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	2362      	movs	r3, #98	@ 0x62
 8003c24:	33ff      	adds	r3, #255	@ 0xff
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d101      	bne.n	8003c2e <ENS160_checkPartID+0x5a>
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <ENS160_checkPartID+0xac>)
 8003c2c:	e002      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <ENS160_checkPartID+0xb0>)
 8003c30:	e000      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <ENS160_checkPartID+0xb4>)
 8003c34:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <ENS160_checkPartID+0xb8>)
 8003c36:	4916      	ldr	r1, [pc, #88]	@ (8003c90 <ENS160_checkPartID+0xbc>)
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f010 f93d 	bl	8013eb8 <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	23b0      	movs	r3, #176	@ 0xb0
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d106      	bne.n	8003c58 <ENS160_checkPartID+0x84>
	  hwsw._revENS16x = 0;
 8003c4a:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e00b      	b.n	8003c70 <ENS160_checkPartID+0x9c>
	}
	else if (part_id == ENS161_PARTID) {
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	2362      	movs	r3, #98	@ 0x62
 8003c5e:	33ff      	adds	r3, #255	@ 0xff
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d105      	bne.n	8003c70 <ENS160_checkPartID+0x9c>
	  hwsw._revENS16x = 1;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8003c70:	1dfb      	adds	r3, r7, #7
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000458 	.word	0x20000458
 8003c80:	0802a898 	.word	0x0802a898
 8003c84:	0802a8a4 	.word	0x0802a8a4
 8003c88:	0802a8a8 	.word	0x0802a8a8
 8003c8c:	0802a8b4 	.word	0x0802a8b4
 8003c90:	0802a8d4 	.word	0x0802a8d4
 8003c94:	20000498 	.word	0x20000498

08003c98 <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003c9e:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	2012      	movs	r0, #18
 8003ca6:	f7ff fee9 	bl	8003a7c <WriteMemRegister>
 8003caa:	0003      	movs	r3, r0
 8003cac:	001a      	movs	r2, r3
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cb0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003cb2:	200a      	movs	r0, #10
 8003cb4:	f010 fe8a 	bl	80149cc <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 8003cb8:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cba:	22cc      	movs	r2, #204	@ 0xcc
 8003cbc:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	2012      	movs	r0, #18
 8003cc6:	f7ff fed9 	bl	8003a7c <WriteMemRegister>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	001a      	movs	r2, r3
 8003cce:	4b1c      	ldr	r3, [pc, #112]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003cda:	200a      	movs	r0, #10
 8003cdc:	f010 fe76 	bl	80149cc <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 8003ce0:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2020      	movs	r0, #32
 8003ce8:	f7ff fef8 	bl	8003adc <ReadMemRegister>
 8003cec:	0003      	movs	r3, r0
 8003cee:	001a      	movs	r2, r3
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cfa:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <ENS160_clearCommand+0xac>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 8003d04:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <ENS160_clearCommand+0x7e>
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <ENS160_clearCommand+0xb0>)
 8003d14:	e000      	b.n	8003d18 <ENS160_clearCommand+0x80>
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <ENS160_clearCommand+0xb4>)
 8003d18:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <ENS160_clearCommand+0xb8>)
 8003d1a:	490e      	ldr	r1, [pc, #56]	@ (8003d54 <ENS160_clearCommand+0xbc>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	0003      	movs	r3, r0
 8003d20:	2003      	movs	r0, #3
 8003d22:	f010 f8c9 	bl	8013eb8 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d26:	200a      	movs	r0, #10
 8003d28:	f010 fe50 	bl	80149cc <HAL_Delay>
		
	return result;
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	4193      	sbcs	r3, r2
 8003d34:	b2db      	uxtb	r3, r3
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	200004a0 	.word	0x200004a0
 8003d40:	200004a1 	.word	0x200004a1
 8003d44:	20000458 	.word	0x20000458
 8003d48:	0802a8d8 	.word	0x0802a8d8
 8003d4c:	0802a8a4 	.word	0x0802a8a4
 8003d50:	0802a8dc 	.word	0x0802a8dc
 8003d54:	0802a8d4 	.word	0x0802a8d4

08003d58 <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 8003d5e:	f7ff ff9b 	bl	8003c98 <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d62:	200a      	movs	r0, #10
 8003d64:	f010 fe32 	bl	80149cc <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	220e      	movs	r2, #14
 8003d6c:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 8003d6e:	1d3a      	adds	r2, r7, #4
 8003d70:	2301      	movs	r3, #1
 8003d72:	2101      	movs	r1, #1
 8003d74:	2012      	movs	r0, #18
 8003d76:	f7ff fe81 	bl	8003a7c <WriteMemRegister>

	HAL_Delay(10);
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	f010 fe26 	bl	80149cc <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003d80:	1d3a      	adds	r2, r7, #4
 8003d82:	2303      	movs	r3, #3
 8003d84:	2101      	movs	r1, #1
 8003d86:	204c      	movs	r0, #76	@ 0x4c
 8003d88:	f7ff fea8 	bl	8003adc <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d92:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	785a      	ldrb	r2, [r3, #1]
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d9a:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	789a      	ldrb	r2, [r3, #2]
 8003da0:	4b16      	ldr	r3, [pc, #88]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da2:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003da4:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d903      	bls.n	8003db4 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 8003dac:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	70da      	strb	r2, [r3, #3]
 8003db2:	e002      	b.n	8003dba <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <ENS160_getFirmware+0xa8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00f      	beq.n	8003de2 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	001c      	movs	r4, r3
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <ENS160_getFirmware+0xac>)
 8003dd4:	490c      	ldr	r1, [pc, #48]	@ (8003e08 <ENS160_getFirmware+0xb0>)
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	9000      	str	r0, [sp, #0]
 8003dda:	0023      	movs	r3, r4
 8003ddc:	2003      	movs	r0, #3
 8003dde:	f010 f86b 	bl	8013eb8 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003de2:	200a      	movs	r0, #10
 8003de4:	f010 fdf2 	bl	80149cc <HAL_Delay>
	
	return (bool)i2cbuf[0];
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	4193      	sbcs	r3, r2
 8003df0:	b2db      	uxtb	r3, r3
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b003      	add	sp, #12
 8003df8:	bd90      	pop	{r4, r7, pc}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	20000498 	.word	0x20000498
 8003e00:	20000458 	.word	0x20000458
 8003e04:	0802a908 	.word	0x0802a908
 8003e08:	0802a8d4 	.word	0x0802a8d4

08003e0c <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	0002      	movs	r2, r0
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d108      	bne.n	8003e32 <ENS160_setMode+0x26>
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <ENS160_setMode+0x58>)
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <ENS160_setMode+0x26>
	  result = 1;
 8003e28:	230f      	movs	r3, #15
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e00a      	b.n	8003e48 <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 8003e32:	1dfa      	adds	r2, r7, #7
 8003e34:	2301      	movs	r3, #1
 8003e36:	2101      	movs	r1, #1
 8003e38:	2010      	movs	r0, #16
 8003e3a:	f7ff fe1f 	bl	8003a7c <WriteMemRegister>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	001a      	movs	r2, r3
 8003e42:	230f      	movs	r3, #15
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003e48:	200a      	movs	r0, #10
 8003e4a:	f010 fdbf 	bl	80149cc <HAL_Delay>
	
	return result;
 8003e4e:	230f      	movs	r3, #15
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	4193      	sbcs	r3, r2
 8003e58:	b2db      	uxtb	r3, r3
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	20000498 	.word	0x20000498

08003e68 <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003e74:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003e76:	2252      	movs	r2, #82	@ 0x52
 8003e78:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003e7a:	1dbb      	adds	r3, r7, #6
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e02d      	b.n	8003ede <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003e82:	f7ff fe8b 	bl	8003b9c <ENS160_reset>
 8003e86:	0003      	movs	r3, r0
 8003e88:	001a      	movs	r2, r3
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	401a      	ands	r2, r3
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	1e51      	subs	r1, r2, #1
 8003e94:	418a      	sbcs	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003e98:	f7ff fe9c 	bl	8003bd4 <ENS160_checkPartID>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	1e51      	subs	r1, r2, #1
 8003eaa:	418a      	sbcs	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4053      	eors	r3, r2
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003ebc:	4a26      	ldr	r2, [pc, #152]	@ (8003f58 <ENS_DeviceConnected+0xf0>)
 8003ebe:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <ENS_DeviceConnected+0xf4>)
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f00f fff8 	bl	8013eb8 <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003ec8:	4b22      	ldr	r3, [pc, #136]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003eca:	2253      	movs	r2, #83	@ 0x53
 8003ecc:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003ed4:	1dbb      	adds	r3, r7, #6
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	1dbb      	adds	r3, r7, #6
 8003eda:	3201      	adds	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	1dbb      	adds	r3, r7, #6
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d9cd      	bls.n	8003e82 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02b      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f7ff ff8c 	bl	8003e0c <ENS160_setMode>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	401a      	ands	r2, r3
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	1e51      	subs	r1, r2, #1
 8003f02:	418a      	sbcs	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003f06:	f7ff fec7 	bl	8003c98 <ENS160_clearCommand>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	401a      	ands	r2, r3
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	1e51      	subs	r1, r2, #1
 8003f18:	418a      	sbcs	r2, r1
 8003f1a:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003f1c:	f7ff ff1c 	bl	8003d58 <ENS160_getFirmware>
 8003f20:	0003      	movs	r3, r0
 8003f22:	001a      	movs	r2, r3
 8003f24:	1dfb      	adds	r3, r7, #7
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	401a      	ands	r2, r3
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	1e51      	subs	r1, r2, #1
 8003f2e:	418a      	sbcs	r2, r1
 8003f30:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003f32:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <ENS_DeviceConnected+0xf8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <ENS_DeviceConnected+0xfc>)
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <ENS_DeviceConnected+0x100>)
 8003f3e:	0019      	movs	r1, r3
 8003f40:	2003      	movs	r0, #3
 8003f42:	f00f ffb9 	bl	8013eb8 <CreateLine>
    }
  }
  return _available;
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b002      	add	sp, #8
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	20000498 	.word	0x20000498
 8003f58:	0802a924 	.word	0x0802a924
 8003f5c:	0802a944 	.word	0x0802a944
 8003f60:	20000458 	.word	0x20000458
 8003f64:	0802a948 	.word	0x0802a948
 8003f68:	0802a8d4 	.word	0x0802a8d4

08003f6c <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003f72:	1dfa      	adds	r2, r7, #7
 8003f74:	2301      	movs	r3, #1
 8003f76:	2101      	movs	r1, #1
 8003f78:	2020      	movs	r0, #32
 8003f7a:	f7ff fdaf 	bl	8003adc <ReadMemRegister>

  if (debugENS160) {
 8003f7e:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <ENS160_readStatus+0x34>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d006      	beq.n	8003f94 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	4a06      	ldr	r2, [pc, #24]	@ (8003fa4 <ENS160_readStatus+0x38>)
 8003f8c:	4906      	ldr	r1, [pc, #24]	@ (8003fa8 <ENS160_readStatus+0x3c>)
 8003f8e:	2003      	movs	r0, #3
 8003f90:	f00f ff92 	bl	8013eb8 <CreateLine>
  }
  return status;
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	781b      	ldrb	r3, [r3, #0]
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000458 	.word	0x20000458
 8003fa4:	0802a97c 	.word	0x0802a97c
 8003fa8:	0802a8d4 	.word	0x0802a8d4

08003fac <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	1dfb      	adds	r3, r7, #7
 8003fb6:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003fb8:	2317      	movs	r3, #23
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003fc0:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <ENS160_measure+0xe4>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003fc8:	4a32      	ldr	r2, [pc, #200]	@ (8004094 <ENS160_measure+0xe8>)
 8003fca:	4b33      	ldr	r3, [pc, #204]	@ (8004098 <ENS160_measure+0xec>)
 8003fcc:	0019      	movs	r1, r3
 8003fce:	2003      	movs	r0, #3
 8003fd0:	f00f ff72 	bl	8013eb8 <CreateLine>
	}
	
	if (waitForNew) {
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f010 fcf5 	bl	80149cc <HAL_Delay>
			status = ENS160_readStatus();
 8003fe2:	2516      	movs	r5, #22
 8003fe4:	197c      	adds	r4, r7, r5
 8003fe6:	f7ff ffc1 	bl	8003f6c <ENS160_readStatus>
 8003fea:	0003      	movs	r3, r0
 8003fec:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003fee:	197b      	adds	r3, r7, r5
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ef      	beq.n	8003fdc <ENS160_measure+0x30>
 8003ffc:	e002      	b.n	8004004 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003ffe:	200a      	movs	r0, #10
 8004000:	f010 fce4 	bl	80149cc <HAL_Delay>
	}
	
	newData = true;
 8004004:	2317      	movs	r3, #23
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 800400c:	240c      	movs	r4, #12
 800400e:	193a      	adds	r2, r7, r4
 8004010:	2307      	movs	r3, #7
 8004012:	2101      	movs	r1, #1
 8004014:	2021      	movs	r0, #33	@ 0x21
 8004016:	f7ff fd61 	bl	8003adc <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 800401a:	0021      	movs	r1, r4
 800401c:	187b      	adds	r3, r7, r1
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	4b1e      	ldr	r3, [pc, #120]	@ (800409c <ENS160_measure+0xf0>)
 8004022:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8004024:	187b      	adds	r3, r7, r1
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	b21a      	sxth	r2, r3
 800402a:	187b      	adds	r3, r7, r1
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	b21b      	sxth	r3, r3
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	b21b      	sxth	r3, r3
 8004034:	4313      	orrs	r3, r2
 8004036:	b21b      	sxth	r3, r3
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b18      	ldr	r3, [pc, #96]	@ (800409c <ENS160_measure+0xf0>)
 800403c:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 800403e:	187b      	adds	r3, r7, r1
 8004040:	78db      	ldrb	r3, [r3, #3]
 8004042:	b21a      	sxth	r2, r3
 8004044:	187b      	adds	r3, r7, r1
 8004046:	791b      	ldrb	r3, [r3, #4]
 8004048:	b21b      	sxth	r3, r3
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	b21b      	sxth	r3, r3
 800404e:	4313      	orrs	r3, r2
 8004050:	b21b      	sxth	r3, r3
 8004052:	b29a      	uxth	r2, r3
 8004054:	4b11      	ldr	r3, [pc, #68]	@ (800409c <ENS160_measure+0xf0>)
 8004056:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <ENS160_measure+0xf4>)
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <ENS160_measure+0xd0>
 8004060:	187b      	adds	r3, r7, r1
 8004062:	795b      	ldrb	r3, [r3, #5]
 8004064:	b21a      	sxth	r2, r3
 8004066:	187b      	adds	r3, r7, r1
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	b21b      	sxth	r3, r3
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	b21b      	sxth	r3, r3
 8004070:	4313      	orrs	r3, r2
 8004072:	b21b      	sxth	r3, r3
 8004074:	b29a      	uxth	r2, r3
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <ENS160_measure+0xf0>)
 8004078:	80da      	strh	r2, [r3, #6]
 800407a:	e002      	b.n	8004082 <ENS160_measure+0xd6>
  	else pred._data_aqi500 = 0;
 800407c:	4b07      	ldr	r3, [pc, #28]	@ (800409c <ENS160_measure+0xf0>)
 800407e:	2200      	movs	r2, #0
 8004080:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8004082:	2317      	movs	r3, #23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	781b      	ldrb	r3, [r3, #0]
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bdb0      	pop	{r4, r5, r7, pc}
 8004090:	20000458 	.word	0x20000458
 8004094:	0802a990 	.word	0x0802a990
 8004098:	0802a8d4 	.word	0x0802a8d4
 800409c:	20000490 	.word	0x20000490
 80040a0:	20000498 	.word	0x20000498

080040a4 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	0002      	movs	r2, r0
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 80040b0:	2317      	movs	r3, #23
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 80040b8:	4bae      	ldr	r3, [pc, #696]	@ (8004374 <ENS160_measureRaw+0x2d0>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 80040c0:	4aad      	ldr	r2, [pc, #692]	@ (8004378 <ENS160_measureRaw+0x2d4>)
 80040c2:	4bae      	ldr	r3, [pc, #696]	@ (800437c <ENS160_measureRaw+0x2d8>)
 80040c4:	0019      	movs	r1, r3
 80040c6:	2003      	movs	r0, #3
 80040c8:	f00f fef6 	bl	8013eb8 <CreateLine>
	}
	
	if (waitForNew) {
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 80040d4:	2001      	movs	r0, #1
 80040d6:	f010 fc79 	bl	80149cc <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 80040da:	240b      	movs	r4, #11
 80040dc:	193a      	adds	r2, r7, r4
 80040de:	2301      	movs	r3, #1
 80040e0:	2101      	movs	r1, #1
 80040e2:	2020      	movs	r0, #32
 80040e4:	f7ff fcfa 	bl	8003adc <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	4013      	ands	r3, r2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ee      	beq.n	80040d4 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 80040f6:	240c      	movs	r4, #12
 80040f8:	193a      	adds	r2, r7, r4
 80040fa:	2308      	movs	r3, #8
 80040fc:	2101      	movs	r1, #1
 80040fe:	2048      	movs	r0, #72	@ 0x48
 8004100:	f7ff fcec 	bl	8003adc <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004104:	193b      	adds	r3, r7, r4
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	001a      	movs	r2, r3
 800410a:	193b      	adds	r3, r7, r4
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	4313      	orrs	r3, r2
 8004112:	0018      	movs	r0, r3
 8004114:	f7fd fbd8 	bl	80018c8 <__aeabi_ui2f>
 8004118:	1c03      	adds	r3, r0, #0
 800411a:	218a      	movs	r1, #138	@ 0x8a
 800411c:	05c9      	lsls	r1, r1, #23
 800411e:	1c18      	adds	r0, r3, #0
 8004120:	f7fc fdc0 	bl	8000ca4 <__aeabi_fdiv>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	1c18      	adds	r0, r3, #0
 8004128:	f7ff fbb4 	bl	8003894 <__aeabi_f2d>
 800412c:	0002      	movs	r2, r0
 800412e:	000b      	movs	r3, r1
 8004130:	2000      	movs	r0, #0
 8004132:	2180      	movs	r1, #128	@ 0x80
 8004134:	05c9      	lsls	r1, r1, #23
 8004136:	f025 f8e9 	bl	802930c <pow>
 800413a:	0002      	movs	r2, r0
 800413c:	000b      	movs	r3, r1
 800413e:	0010      	movs	r0, r2
 8004140:	0019      	movs	r1, r3
 8004142:	f7fc fa83 	bl	800064c <__aeabi_d2uiz>
 8004146:	0002      	movs	r2, r0
 8004148:	4b8d      	ldr	r3, [pc, #564]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800414a:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 800414c:	193b      	adds	r3, r7, r4
 800414e:	789b      	ldrb	r3, [r3, #2]
 8004150:	001a      	movs	r2, r3
 8004152:	193b      	adds	r3, r7, r4
 8004154:	78db      	ldrb	r3, [r3, #3]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	4313      	orrs	r3, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f7fd fbb4 	bl	80018c8 <__aeabi_ui2f>
 8004160:	1c03      	adds	r3, r0, #0
 8004162:	218a      	movs	r1, #138	@ 0x8a
 8004164:	05c9      	lsls	r1, r1, #23
 8004166:	1c18      	adds	r0, r3, #0
 8004168:	f7fc fd9c 	bl	8000ca4 <__aeabi_fdiv>
 800416c:	1c03      	adds	r3, r0, #0
 800416e:	1c18      	adds	r0, r3, #0
 8004170:	f7ff fb90 	bl	8003894 <__aeabi_f2d>
 8004174:	0002      	movs	r2, r0
 8004176:	000b      	movs	r3, r1
 8004178:	2000      	movs	r0, #0
 800417a:	2180      	movs	r1, #128	@ 0x80
 800417c:	05c9      	lsls	r1, r1, #23
 800417e:	f025 f8c5 	bl	802930c <pow>
 8004182:	0002      	movs	r2, r0
 8004184:	000b      	movs	r3, r1
 8004186:	0010      	movs	r0, r2
 8004188:	0019      	movs	r1, r3
 800418a:	f7fc fa5f 	bl	800064c <__aeabi_d2uiz>
 800418e:	0002      	movs	r2, r0
 8004190:	4b7b      	ldr	r3, [pc, #492]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004192:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8004194:	193b      	adds	r3, r7, r4
 8004196:	791b      	ldrb	r3, [r3, #4]
 8004198:	001a      	movs	r2, r3
 800419a:	193b      	adds	r3, r7, r4
 800419c:	795b      	ldrb	r3, [r3, #5]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	4313      	orrs	r3, r2
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fd fb90 	bl	80018c8 <__aeabi_ui2f>
 80041a8:	1c03      	adds	r3, r0, #0
 80041aa:	218a      	movs	r1, #138	@ 0x8a
 80041ac:	05c9      	lsls	r1, r1, #23
 80041ae:	1c18      	adds	r0, r3, #0
 80041b0:	f7fc fd78 	bl	8000ca4 <__aeabi_fdiv>
 80041b4:	1c03      	adds	r3, r0, #0
 80041b6:	1c18      	adds	r0, r3, #0
 80041b8:	f7ff fb6c 	bl	8003894 <__aeabi_f2d>
 80041bc:	0002      	movs	r2, r0
 80041be:	000b      	movs	r3, r1
 80041c0:	2000      	movs	r0, #0
 80041c2:	2180      	movs	r1, #128	@ 0x80
 80041c4:	05c9      	lsls	r1, r1, #23
 80041c6:	f025 f8a1 	bl	802930c <pow>
 80041ca:	0002      	movs	r2, r0
 80041cc:	000b      	movs	r3, r1
 80041ce:	0010      	movs	r0, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	f7fc fa3b 	bl	800064c <__aeabi_d2uiz>
 80041d6:	0002      	movs	r2, r0
 80041d8:	4b69      	ldr	r3, [pc, #420]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80041da:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	799b      	ldrb	r3, [r3, #6]
 80041e0:	001a      	movs	r2, r3
 80041e2:	193b      	adds	r3, r7, r4
 80041e4:	79db      	ldrb	r3, [r3, #7]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	4313      	orrs	r3, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f7fd fb6c 	bl	80018c8 <__aeabi_ui2f>
 80041f0:	1c03      	adds	r3, r0, #0
 80041f2:	218a      	movs	r1, #138	@ 0x8a
 80041f4:	05c9      	lsls	r1, r1, #23
 80041f6:	1c18      	adds	r0, r3, #0
 80041f8:	f7fc fd54 	bl	8000ca4 <__aeabi_fdiv>
 80041fc:	1c03      	adds	r3, r0, #0
 80041fe:	1c18      	adds	r0, r3, #0
 8004200:	f7ff fb48 	bl	8003894 <__aeabi_f2d>
 8004204:	0002      	movs	r2, r0
 8004206:	000b      	movs	r3, r1
 8004208:	2000      	movs	r0, #0
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	05c9      	lsls	r1, r1, #23
 800420e:	f025 f87d 	bl	802930c <pow>
 8004212:	0002      	movs	r2, r0
 8004214:	000b      	movs	r3, r1
 8004216:	0010      	movs	r0, r2
 8004218:	0019      	movs	r1, r3
 800421a:	f7fc fa17 	bl	800064c <__aeabi_d2uiz>
 800421e:	0002      	movs	r2, r0
 8004220:	4b57      	ldr	r3, [pc, #348]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004222:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8004224:	193a      	adds	r2, r7, r4
 8004226:	2308      	movs	r3, #8
 8004228:	2101      	movs	r1, #1
 800422a:	2028      	movs	r0, #40	@ 0x28
 800422c:	f7ff fc56 	bl	8003adc <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004230:	193b      	adds	r3, r7, r4
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	001a      	movs	r2, r3
 8004236:	193b      	adds	r3, r7, r4
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	4313      	orrs	r3, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f7fd fb42 	bl	80018c8 <__aeabi_ui2f>
 8004244:	1c03      	adds	r3, r0, #0
 8004246:	218a      	movs	r1, #138	@ 0x8a
 8004248:	05c9      	lsls	r1, r1, #23
 800424a:	1c18      	adds	r0, r3, #0
 800424c:	f7fc fd2a 	bl	8000ca4 <__aeabi_fdiv>
 8004250:	1c03      	adds	r3, r0, #0
 8004252:	1c18      	adds	r0, r3, #0
 8004254:	f7ff fb1e 	bl	8003894 <__aeabi_f2d>
 8004258:	0002      	movs	r2, r0
 800425a:	000b      	movs	r3, r1
 800425c:	2000      	movs	r0, #0
 800425e:	2180      	movs	r1, #128	@ 0x80
 8004260:	05c9      	lsls	r1, r1, #23
 8004262:	f025 f853 	bl	802930c <pow>
 8004266:	0002      	movs	r2, r0
 8004268:	000b      	movs	r3, r1
 800426a:	0010      	movs	r0, r2
 800426c:	0019      	movs	r1, r3
 800426e:	f7fc f9ed 	bl	800064c <__aeabi_d2uiz>
 8004272:	0002      	movs	r2, r0
 8004274:	4b42      	ldr	r3, [pc, #264]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004276:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8004278:	193b      	adds	r3, r7, r4
 800427a:	789b      	ldrb	r3, [r3, #2]
 800427c:	001a      	movs	r2, r3
 800427e:	193b      	adds	r3, r7, r4
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	4313      	orrs	r3, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f7fd fb1e 	bl	80018c8 <__aeabi_ui2f>
 800428c:	1c03      	adds	r3, r0, #0
 800428e:	218a      	movs	r1, #138	@ 0x8a
 8004290:	05c9      	lsls	r1, r1, #23
 8004292:	1c18      	adds	r0, r3, #0
 8004294:	f7fc fd06 	bl	8000ca4 <__aeabi_fdiv>
 8004298:	1c03      	adds	r3, r0, #0
 800429a:	1c18      	adds	r0, r3, #0
 800429c:	f7ff fafa 	bl	8003894 <__aeabi_f2d>
 80042a0:	0002      	movs	r2, r0
 80042a2:	000b      	movs	r3, r1
 80042a4:	2000      	movs	r0, #0
 80042a6:	2180      	movs	r1, #128	@ 0x80
 80042a8:	05c9      	lsls	r1, r1, #23
 80042aa:	f025 f82f 	bl	802930c <pow>
 80042ae:	0002      	movs	r2, r0
 80042b0:	000b      	movs	r3, r1
 80042b2:	0010      	movs	r0, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	f7fc f9c9 	bl	800064c <__aeabi_d2uiz>
 80042ba:	0002      	movs	r2, r0
 80042bc:	4b30      	ldr	r3, [pc, #192]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80042be:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	791b      	ldrb	r3, [r3, #4]
 80042c4:	001a      	movs	r2, r3
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	795b      	ldrb	r3, [r3, #5]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	4313      	orrs	r3, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fd fafa 	bl	80018c8 <__aeabi_ui2f>
 80042d4:	1c03      	adds	r3, r0, #0
 80042d6:	218a      	movs	r1, #138	@ 0x8a
 80042d8:	05c9      	lsls	r1, r1, #23
 80042da:	1c18      	adds	r0, r3, #0
 80042dc:	f7fc fce2 	bl	8000ca4 <__aeabi_fdiv>
 80042e0:	1c03      	adds	r3, r0, #0
 80042e2:	1c18      	adds	r0, r3, #0
 80042e4:	f7ff fad6 	bl	8003894 <__aeabi_f2d>
 80042e8:	0002      	movs	r2, r0
 80042ea:	000b      	movs	r3, r1
 80042ec:	2000      	movs	r0, #0
 80042ee:	2180      	movs	r1, #128	@ 0x80
 80042f0:	05c9      	lsls	r1, r1, #23
 80042f2:	f025 f80b 	bl	802930c <pow>
 80042f6:	0002      	movs	r2, r0
 80042f8:	000b      	movs	r3, r1
 80042fa:	0010      	movs	r0, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	f7fc f9a5 	bl	800064c <__aeabi_d2uiz>
 8004302:	0002      	movs	r2, r0
 8004304:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004306:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8004308:	193b      	adds	r3, r7, r4
 800430a:	799b      	ldrb	r3, [r3, #6]
 800430c:	001a      	movs	r2, r3
 800430e:	193b      	adds	r3, r7, r4
 8004310:	79db      	ldrb	r3, [r3, #7]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	4313      	orrs	r3, r2
 8004316:	0018      	movs	r0, r3
 8004318:	f7fd fad6 	bl	80018c8 <__aeabi_ui2f>
 800431c:	1c03      	adds	r3, r0, #0
 800431e:	218a      	movs	r1, #138	@ 0x8a
 8004320:	05c9      	lsls	r1, r1, #23
 8004322:	1c18      	adds	r0, r3, #0
 8004324:	f7fc fcbe 	bl	8000ca4 <__aeabi_fdiv>
 8004328:	1c03      	adds	r3, r0, #0
 800432a:	1c18      	adds	r0, r3, #0
 800432c:	f7ff fab2 	bl	8003894 <__aeabi_f2d>
 8004330:	0002      	movs	r2, r0
 8004332:	000b      	movs	r3, r1
 8004334:	2000      	movs	r0, #0
 8004336:	2180      	movs	r1, #128	@ 0x80
 8004338:	05c9      	lsls	r1, r1, #23
 800433a:	f024 ffe7 	bl	802930c <pow>
 800433e:	0002      	movs	r2, r0
 8004340:	000b      	movs	r3, r1
 8004342:	0010      	movs	r0, r2
 8004344:	0019      	movs	r1, r3
 8004346:	f7fc f981 	bl	800064c <__aeabi_d2uiz>
 800434a:	0002      	movs	r2, r0
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800434e:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8004350:	193a      	adds	r2, r7, r4
 8004352:	2301      	movs	r3, #1
 8004354:	2101      	movs	r1, #1
 8004356:	2038      	movs	r0, #56	@ 0x38
 8004358:	f7ff fbc0 	bl	8003adc <ReadMemRegister>
    raw._misr = i2cbuf[0];
 800435c:	193b      	adds	r3, r7, r4
 800435e:	7819      	ldrb	r1, [r3, #0]
 8004360:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004362:	2220      	movs	r2, #32
 8004364:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8004366:	2317      	movs	r3, #23
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	781b      	ldrb	r3, [r3, #0]
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b007      	add	sp, #28
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	20000458 	.word	0x20000458
 8004378:	0802a9ac 	.word	0x0802a9ac
 800437c:	0802a8d4 	.word	0x0802a8d4
 8004380:	2000046c 	.word	0x2000046c

08004384 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	0002      	movs	r2, r0
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	1c0a      	adds	r2, r1, #0
 8004394:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	2108      	movs	r1, #8
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 80043c8:	187a      	adds	r2, r7, r1
 80043ca:	2304      	movs	r3, #4
 80043cc:	2101      	movs	r1, #1
 80043ce:	2013      	movs	r0, #19
 80043d0:	f7ff fb54 	bl	8003a7c <WriteMemRegister>
 80043d4:	0003      	movs	r3, r0
 80043d6:	001a      	movs	r2, r3
 80043d8:	210f      	movs	r1, #15
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	701a      	strb	r2, [r3, #0]
  return result;
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	4193      	sbcs	r3, r2
 80043e6:	b2db      	uxtb	r3, r3
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b004      	add	sp, #16
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 80043fa:	4916      	ldr	r1, [pc, #88]	@ (8004454 <ENS160_set_envdata+0x64>)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc fa5f 	bl	80008c0 <__aeabi_fadd>
 8004402:	1c03      	adds	r3, r0, #0
 8004404:	2185      	movs	r1, #133	@ 0x85
 8004406:	05c9      	lsls	r1, r1, #23
 8004408:	1c18      	adds	r0, r3, #0
 800440a:	f7fc fe19 	bl	8001040 <__aeabi_fmul>
 800440e:	1c03      	adds	r3, r0, #0
 8004410:	250e      	movs	r5, #14
 8004412:	197c      	adds	r4, r7, r5
 8004414:	1c18      	adds	r0, r3, #0
 8004416:	f7fc f901 	bl	800061c <__aeabi_f2uiz>
 800441a:	0003      	movs	r3, r0
 800441c:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 800441e:	2188      	movs	r1, #136	@ 0x88
 8004420:	05c9      	lsls	r1, r1, #23
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	f7fc fe0c 	bl	8001040 <__aeabi_fmul>
 8004428:	1c03      	adds	r3, r0, #0
 800442a:	260c      	movs	r6, #12
 800442c:	19bc      	adds	r4, r7, r6
 800442e:	1c18      	adds	r0, r3, #0
 8004430:	f7fc f8f4 	bl	800061c <__aeabi_f2uiz>
 8004434:	0003      	movs	r3, r0
 8004436:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8004438:	19bb      	adds	r3, r7, r6
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	197b      	adds	r3, r7, r5
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f7ff ff9e 	bl	8004384 <ENS160_set_envdata210>
 8004448:	0003      	movs	r3, r0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b005      	add	sp, #20
 8004450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	43889333 	.word	0x43889333

08004458 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b085      	sub	sp, #20
 800445c:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800445e:	4bc5      	ldr	r3, [pc, #788]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0018      	movs	r0, r3
 8004464:	f00f fcd2 	bl	8013e0c <TimestampIsReached>
 8004468:	0003      	movs	r3, r0
 800446a:	001a      	movs	r2, r3
 800446c:	2301      	movs	r3, #1
 800446e:	4053      	eors	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <ENS_Upkeep+0x24>
    return ENSState;
 8004476:	4bc0      	ldr	r3, [pc, #768]	@ (8004778 <ENS_Upkeep+0x320>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	e1fb      	b.n	8004874 <ENS_Upkeep+0x41c>
  }
  switch(ENSState) {
 800447c:	4bbe      	ldr	r3, [pc, #760]	@ (8004778 <ENS_Upkeep+0x320>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d900      	bls.n	8004486 <ENS_Upkeep+0x2e>
 8004484:	e1dd      	b.n	8004842 <ENS_Upkeep+0x3ea>
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	4bbc      	ldr	r3, [pc, #752]	@ (800477c <ENS_Upkeep+0x324>)
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 8004490:	4abb      	ldr	r2, [pc, #748]	@ (8004780 <ENS_Upkeep+0x328>)
 8004492:	4bbc      	ldr	r3, [pc, #752]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004494:	0019      	movs	r1, r3
 8004496:	2003      	movs	r0, #3
 8004498:	f00f fd0e 	bl	8013eb8 <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 780000;  // 4 times an hour
 800449c:	f010 fa8c 	bl	80149b8 <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	4ab9      	ldr	r2, [pc, #740]	@ (8004788 <ENS_Upkeep+0x330>)
 80044a4:	189a      	adds	r2, r3, r2
 80044a6:	4bb3      	ldr	r3, [pc, #716]	@ (8004774 <ENS_Upkeep+0x31c>)
 80044a8:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 80044aa:	4bb8      	ldr	r3, [pc, #736]	@ (800478c <ENS_Upkeep+0x334>)
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	4bb8      	ldr	r3, [pc, #736]	@ (8004790 <ENS_Upkeep+0x338>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d100      	bne.n	80044b8 <ENS_Upkeep+0x60>
 80044b6:	e1d0      	b.n	800485a <ENS_Upkeep+0x402>
      ENSState = ENS_STATE_WAIT;
 80044b8:	4baf      	ldr	r3, [pc, #700]	@ (8004778 <ENS_Upkeep+0x320>)
 80044ba:	2208      	movs	r2, #8
 80044bc:	701a      	strb	r2, [r3, #0]
    }
    break;
 80044be:	e1cc      	b.n	800485a <ENS_Upkeep+0x402>

  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 80044c0:	f009 fd14 	bl	800deec <getSensorLock>
 80044c4:	1e03      	subs	r3, r0, #0
 80044c6:	d000      	beq.n	80044ca <ENS_Upkeep+0x72>
 80044c8:	e1c9      	b.n	800485e <ENS_Upkeep+0x406>
      break;
    }
    setSensorLock(ENS160);
 80044ca:	2004      	movs	r0, #4
 80044cc:	f009 fcfa 	bl	800dec4 <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 80044d0:	1d3c      	adds	r4, r7, #4
 80044d2:	2002      	movs	r0, #2
 80044d4:	f7ff fc9a 	bl	8003e0c <ENS160_setMode>
 80044d8:	0003      	movs	r3, r0
 80044da:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <ENS_Upkeep+0x90>
 80044e4:	4bab      	ldr	r3, [pc, #684]	@ (8004794 <ENS_Upkeep+0x33c>)
 80044e6:	e000      	b.n	80044ea <ENS_Upkeep+0x92>
 80044e8:	4bab      	ldr	r3, [pc, #684]	@ (8004798 <ENS_Upkeep+0x340>)
 80044ea:	4aac      	ldr	r2, [pc, #688]	@ (800479c <ENS_Upkeep+0x344>)
 80044ec:	49a5      	ldr	r1, [pc, #660]	@ (8004784 <ENS_Upkeep+0x32c>)
 80044ee:	2003      	movs	r0, #3
 80044f0:	f00f fce2 	bl	8013eb8 <CreateLine>
    HAL_Delay(10); // wait for deferred DMA transfers
 80044f4:	200a      	movs	r0, #10
 80044f6:	f010 fa69 	bl	80149cc <HAL_Delay>
    setSensorLock(FREE);
 80044fa:	2000      	movs	r0, #0
 80044fc:	f009 fce2 	bl	800dec4 <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 8004500:	4b9d      	ldr	r3, [pc, #628]	@ (8004778 <ENS_Upkeep+0x320>)
 8004502:	2203      	movs	r2, #3
 8004504:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004506:	f010 fa57 	bl	80149b8 <HAL_GetTick>
 800450a:	0003      	movs	r3, r0
 800450c:	22fa      	movs	r2, #250	@ 0xfa
 800450e:	0092      	lsls	r2, r2, #2
 8004510:	189a      	adds	r2, r3, r2
 8004512:	4b98      	ldr	r3, [pc, #608]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004514:	601a      	str	r2, [r3, #0]
    break;
 8004516:	e1ab      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 8004518:	f009 fce8 	bl	800deec <getSensorLock>
 800451c:	1e03      	subs	r3, r0, #0
 800451e:	d000      	beq.n	8004522 <ENS_Upkeep+0xca>
 8004520:	e19f      	b.n	8004862 <ENS_Upkeep+0x40a>
      break;
    }
    setSensorLock(ENS160);
 8004522:	2004      	movs	r0, #4
 8004524:	f009 fcce 	bl	800dec4 <setSensorLock>
    status = ENS160_readStatus();
 8004528:	1d7c      	adds	r4, r7, #5
 800452a:	f7ff fd1f 	bl	8003f6c <ENS160_readStatus>
 800452e:	0003      	movs	r3, r0
 8004530:	7023      	strb	r3, [r4, #0]
    HAL_Delay(10); // wait for deferred DMA transfers
 8004532:	200a      	movs	r0, #10
 8004534:	f010 fa4a 	bl	80149cc <HAL_Delay>
    setSensorLock(FREE);
 8004538:	2000      	movs	r0, #0
 800453a:	f009 fcc3 	bl	800dec4 <setSensorLock>
    if ((status & 0x0C) != 0) {
 800453e:	1d7b      	adds	r3, r7, #5
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	220c      	movs	r2, #12
 8004544:	4013      	ands	r3, r2
 8004546:	d02e      	beq.n	80045a6 <ENS_Upkeep+0x14e>
      switch (status >> 2) {
 8004548:	1d7b      	adds	r3, r7, #5
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b03      	cmp	r3, #3
 8004552:	d013      	beq.n	800457c <ENS_Upkeep+0x124>
 8004554:	dc19      	bgt.n	800458a <ENS_Upkeep+0x132>
 8004556:	2b01      	cmp	r3, #1
 8004558:	d002      	beq.n	8004560 <ENS_Upkeep+0x108>
 800455a:	2b02      	cmp	r3, #2
 800455c:	d007      	beq.n	800456e <ENS_Upkeep+0x116>
 800455e:	e014      	b.n	800458a <ENS_Upkeep+0x132>
      case 1:
        Debug("ENS160 Warm-Up phase");
 8004560:	4a8f      	ldr	r2, [pc, #572]	@ (80047a0 <ENS_Upkeep+0x348>)
 8004562:	4b88      	ldr	r3, [pc, #544]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004564:	0019      	movs	r1, r3
 8004566:	2003      	movs	r0, #3
 8004568:	f00f fca6 	bl	8013eb8 <CreateLine>
        break;
 800456c:	e00d      	b.n	800458a <ENS_Upkeep+0x132>
      case 2:
        Debug("ENS160 Initial Start-UP phase");
 800456e:	4a8d      	ldr	r2, [pc, #564]	@ (80047a4 <ENS_Upkeep+0x34c>)
 8004570:	4b84      	ldr	r3, [pc, #528]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004572:	0019      	movs	r1, r3
 8004574:	2003      	movs	r0, #3
 8004576:	f00f fc9f 	bl	8013eb8 <CreateLine>
        break;
 800457a:	e006      	b.n	800458a <ENS_Upkeep+0x132>
      case 3:
        Debug("ENS160 Invalid output");
 800457c:	4a8a      	ldr	r2, [pc, #552]	@ (80047a8 <ENS_Upkeep+0x350>)
 800457e:	4b81      	ldr	r3, [pc, #516]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004580:	0019      	movs	r1, r3
 8004582:	2003      	movs	r0, #3
 8004584:	f00f fc98 	bl	8013eb8 <CreateLine>
        break;
 8004588:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 800458a:	1d7b      	adds	r3, r7, #5
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2203      	movs	r2, #3
 8004590:	4013      	ands	r3, r2
 8004592:	d108      	bne.n	80045a6 <ENS_Upkeep+0x14e>
        ENS160TimeStamp = HAL_GetTick() + 1000;
 8004594:	f010 fa10 	bl	80149b8 <HAL_GetTick>
 8004598:	0003      	movs	r3, r0
 800459a:	22fa      	movs	r2, #250	@ 0xfa
 800459c:	0092      	lsls	r2, r2, #2
 800459e:	189a      	adds	r2, r3, r2
 80045a0:	4b74      	ldr	r3, [pc, #464]	@ (8004774 <ENS_Upkeep+0x31c>)
 80045a2:	601a      	str	r2, [r3, #0]
//        ENSState = ENS_LOW_POWER;
//        ENSState = ENS_STATE_WAIT;
        break;
 80045a4:	e164      	b.n	8004870 <ENS_Upkeep+0x418>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 80045a6:	4b74      	ldr	r3, [pc, #464]	@ (8004778 <ENS_Upkeep+0x320>)
 80045a8:	2204      	movs	r2, #4
 80045aa:	701a      	strb	r2, [r3, #0]
    break;
 80045ac:	e160      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 80045ae:	f009 fc9d 	bl	800deec <getSensorLock>
 80045b2:	1e03      	subs	r3, r0, #0
 80045b4:	d036      	beq.n	8004624 <ENS_Upkeep+0x1cc>
 80045b6:	f009 fc99 	bl	800deec <getSensorLock>
 80045ba:	0003      	movs	r3, r0
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d031      	beq.n	8004624 <ENS_Upkeep+0x1cc>
      uint8_t locktype = getSensorLock();
 80045c0:	1dbc      	adds	r4, r7, #6
 80045c2:	f009 fc93 	bl	800deec <getSensorLock>
 80045c6:	0003      	movs	r3, r0
 80045c8:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 80045ca:	1dbb      	adds	r3, r7, #6
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d019      	beq.n	8004606 <ENS_Upkeep+0x1ae>
 80045d2:	1dbb      	adds	r3, r7, #6
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d013      	beq.n	8004602 <ENS_Upkeep+0x1aa>
 80045da:	1dbb      	adds	r3, r7, #6
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d00d      	beq.n	80045fe <ENS_Upkeep+0x1a6>
 80045e2:	1dbb      	adds	r3, r7, #6
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d007      	beq.n	80045fa <ENS_Upkeep+0x1a2>
 80045ea:	1dbb      	adds	r3, r7, #6
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d101      	bne.n	80045f6 <ENS_Upkeep+0x19e>
 80045f2:	4b6e      	ldr	r3, [pc, #440]	@ (80047ac <ENS_Upkeep+0x354>)
 80045f4:	e008      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045f6:	4b6e      	ldr	r3, [pc, #440]	@ (80047b0 <ENS_Upkeep+0x358>)
 80045f8:	e006      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fa:	4b6e      	ldr	r3, [pc, #440]	@ (80047b4 <ENS_Upkeep+0x35c>)
 80045fc:	e004      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fe:	4b6e      	ldr	r3, [pc, #440]	@ (80047b8 <ENS_Upkeep+0x360>)
 8004600:	e002      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004602:	4b6e      	ldr	r3, [pc, #440]	@ (80047bc <ENS_Upkeep+0x364>)
 8004604:	e000      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004606:	4b6e      	ldr	r3, [pc, #440]	@ (80047c0 <ENS_Upkeep+0x368>)
 8004608:	4a6e      	ldr	r2, [pc, #440]	@ (80047c4 <ENS_Upkeep+0x36c>)
 800460a:	495e      	ldr	r1, [pc, #376]	@ (8004784 <ENS_Upkeep+0x32c>)
 800460c:	2003      	movs	r0, #3
 800460e:	f00f fc53 	bl	8013eb8 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 333;
 8004612:	f010 f9d1 	bl	80149b8 <HAL_GetTick>
 8004616:	0003      	movs	r3, r0
 8004618:	334e      	adds	r3, #78	@ 0x4e
 800461a:	33ff      	adds	r3, #255	@ 0xff
 800461c:	001a      	movs	r2, r3
 800461e:	4b55      	ldr	r3, [pc, #340]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004620:	601a      	str	r2, [r3, #0]
      break;
 8004622:	e125      	b.n	8004870 <ENS_Upkeep+0x418>
    }
    setSensorLock(ENS160);
 8004624:	2004      	movs	r0, #4
 8004626:	f009 fc4d 	bl	800dec4 <setSensorLock>
    status = ENS160_readStatus();
 800462a:	1d7c      	adds	r4, r7, #5
 800462c:	f7ff fc9e 	bl	8003f6c <ENS160_readStatus>
 8004630:	0003      	movs	r3, r0
 8004632:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 8004634:	1d7b      	adds	r3, r7, #5
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2202      	movs	r2, #2
 800463a:	4013      	ands	r3, r2
 800463c:	d10e      	bne.n	800465c <ENS_Upkeep+0x204>
      ENS160TimeStamp = HAL_GetTick() + 500;
 800463e:	f010 f9bb 	bl	80149b8 <HAL_GetTick>
 8004642:	0003      	movs	r3, r0
 8004644:	33f5      	adds	r3, #245	@ 0xf5
 8004646:	33ff      	adds	r3, #255	@ 0xff
 8004648:	001a      	movs	r2, r3
 800464a:	4b4a      	ldr	r3, [pc, #296]	@ (8004774 <ENS_Upkeep+0x31c>)
 800464c:	601a      	str	r2, [r3, #0]
//      Debug("ENS160 status register is: %d", status);
      HAL_Delay(10); // wait for deferred DMA transfers
 800464e:	200a      	movs	r0, #10
 8004650:	f010 f9bc 	bl	80149cc <HAL_Delay>
      setSensorLock(FREE);
 8004654:	2000      	movs	r0, #0
 8004656:	f009 fc35 	bl	800dec4 <setSensorLock>
      break;
 800465a:	e109      	b.n	8004870 <ENS_Upkeep+0x418>
    }
    ENS160_measure(false);
 800465c:	2000      	movs	r0, #0
 800465e:	f7ff fca5 	bl	8003fac <ENS160_measure>
    HAL_Delay(10);
 8004662:	200a      	movs	r0, #10
 8004664:	f010 f9b2 	bl	80149cc <HAL_Delay>
    ENS160_measureRaw(false);
 8004668:	2000      	movs	r0, #0
 800466a:	f7ff fd1b 	bl	80040a4 <ENS160_measureRaw>
    HAL_Delay(10);
 800466e:	200a      	movs	r0, #10
 8004670:	f010 f9ac 	bl	80149cc <HAL_Delay>
    setSensorLock(FREE);
 8004674:	2000      	movs	r0, #0
 8004676:	f009 fc25 	bl	800dec4 <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 800467a:	4b3f      	ldr	r3, [pc, #252]	@ (8004778 <ENS_Upkeep+0x320>)
 800467c:	2206      	movs	r2, #6
 800467e:	701a      	strb	r2, [r3, #0]
    break;
 8004680:	e0f6      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_STATE_PROCESS_RESULTS:
    if (enscnt == 1){
 8004682:	4b51      	ldr	r3, [pc, #324]	@ (80047c8 <ENS_Upkeep+0x370>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d10f      	bne.n	80046aa <ENS_Upkeep+0x252>
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800468a:	4b50      	ldr	r3, [pc, #320]	@ (80047cc <ENS_Upkeep+0x374>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	001c      	movs	r4, r3
 8004690:	4b4e      	ldr	r3, [pc, #312]	@ (80047cc <ENS_Upkeep+0x374>)
 8004692:	885b      	ldrh	r3, [r3, #2]
 8004694:	0018      	movs	r0, r3
 8004696:	4b4d      	ldr	r3, [pc, #308]	@ (80047cc <ENS_Upkeep+0x374>)
 8004698:	889b      	ldrh	r3, [r3, #4]
 800469a:	4a4d      	ldr	r2, [pc, #308]	@ (80047d0 <ENS_Upkeep+0x378>)
 800469c:	494d      	ldr	r1, [pc, #308]	@ (80047d4 <ENS_Upkeep+0x37c>)
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	9000      	str	r0, [sp, #0]
 80046a2:	0023      	movs	r3, r4
 80046a4:	2002      	movs	r0, #2
 80046a6:	f00f fc07 	bl	8013eb8 <CreateLine>
//    Debug("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
//    Debug("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
//    Debug("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
//    Debug("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
    }
    (enscnt == 5)?enscnt=0:enscnt++;
 80046aa:	4b47      	ldr	r3, [pc, #284]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	d103      	bne.n	80046ba <ENS_Upkeep+0x262>
 80046b2:	4b45      	ldr	r3, [pc, #276]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e005      	b.n	80046c6 <ENS_Upkeep+0x26e>
 80046ba:	4b43      	ldr	r3, [pc, #268]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	3301      	adds	r3, #1
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4b41      	ldr	r3, [pc, #260]	@ (80047c8 <ENS_Upkeep+0x370>)
 80046c4:	701a      	strb	r2, [r3, #0]
    setENS160(pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 80046c6:	4b41      	ldr	r3, [pc, #260]	@ (80047cc <ENS_Upkeep+0x374>)
 80046c8:	7818      	ldrb	r0, [r3, #0]
 80046ca:	4b40      	ldr	r3, [pc, #256]	@ (80047cc <ENS_Upkeep+0x374>)
 80046cc:	8859      	ldrh	r1, [r3, #2]
 80046ce:	4b3f      	ldr	r3, [pc, #252]	@ (80047cc <ENS_Upkeep+0x374>)
 80046d0:	889b      	ldrh	r3, [r3, #4]
 80046d2:	001a      	movs	r2, r3
 80046d4:	f000 fa24 	bl	8004b20 <setENS160>
    ENSState = ENS_LOW_POWER;
 80046d8:	4b27      	ldr	r3, [pc, #156]	@ (8004778 <ENS_Upkeep+0x320>)
 80046da:	2201      	movs	r2, #1
 80046dc:	701a      	strb	r2, [r3, #0]
    break;
 80046de:	e0c7      	b.n	8004870 <ENS_Upkeep+0x418>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 1000;
 80046e0:	f010 f96a 	bl	80149b8 <HAL_GetTick>
 80046e4:	0003      	movs	r3, r0
 80046e6:	22fa      	movs	r2, #250	@ 0xfa
 80046e8:	0092      	lsls	r2, r2, #2
 80046ea:	189a      	adds	r2, r3, r2
 80046ec:	4b21      	ldr	r3, [pc, #132]	@ (8004774 <ENS_Upkeep+0x31c>)
 80046ee:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle && (enscnt >= 2)) {
 80046f0:	4b39      	ldr	r3, [pc, #228]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2201      	movs	r2, #1
 80046f6:	4053      	eors	r3, r2
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d035      	beq.n	800476a <ENS_Upkeep+0x312>
 80046fe:	4b37      	ldr	r3, [pc, #220]	@ (80047dc <ENS_Upkeep+0x384>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2201      	movs	r2, #1
 8004704:	4053      	eors	r3, r2
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d02e      	beq.n	800476a <ENS_Upkeep+0x312>
 800470c:	4b2e      	ldr	r3, [pc, #184]	@ (80047c8 <ENS_Upkeep+0x370>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d92a      	bls.n	800476a <ENS_Upkeep+0x312>
      if (getSensorLock() != FREE) {
 8004714:	f009 fbea 	bl	800deec <getSensorLock>
 8004718:	1e03      	subs	r3, r0, #0
 800471a:	d000      	beq.n	800471e <ENS_Upkeep+0x2c6>
 800471c:	e0a3      	b.n	8004866 <ENS_Upkeep+0x40e>
        break;
      }
      setSensorLock(ENS160);
 800471e:	2004      	movs	r0, #4
 8004720:	f009 fbd0 	bl	800dec4 <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 8004724:	1cfc      	adds	r4, r7, #3
 8004726:	2000      	movs	r0, #0
 8004728:	f7ff fb70 	bl	8003e0c <ENS160_setMode>
 800472c:	0003      	movs	r3, r0
 800472e:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s, sample counter is: %d", result?"done.":"failed.", enscnt);
 8004730:	1cfb      	adds	r3, r7, #3
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <ENS_Upkeep+0x2e4>
 8004738:	4b16      	ldr	r3, [pc, #88]	@ (8004794 <ENS_Upkeep+0x33c>)
 800473a:	e000      	b.n	800473e <ENS_Upkeep+0x2e6>
 800473c:	4b16      	ldr	r3, [pc, #88]	@ (8004798 <ENS_Upkeep+0x340>)
 800473e:	4a22      	ldr	r2, [pc, #136]	@ (80047c8 <ENS_Upkeep+0x370>)
 8004740:	7812      	ldrb	r2, [r2, #0]
 8004742:	0010      	movs	r0, r2
 8004744:	4a26      	ldr	r2, [pc, #152]	@ (80047e0 <ENS_Upkeep+0x388>)
 8004746:	490f      	ldr	r1, [pc, #60]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004748:	9000      	str	r0, [sp, #0]
 800474a:	2003      	movs	r0, #3
 800474c:	f00f fbb4 	bl	8013eb8 <CreateLine>
      HAL_Delay(10); // wait for deferred DMA transfers
 8004750:	200a      	movs	r0, #10
 8004752:	f010 f93b 	bl	80149cc <HAL_Delay>
      setSensorLock(FREE);
 8004756:	2000      	movs	r0, #0
 8004758:	f009 fbb4 	bl	800dec4 <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 800475c:	f010 f92c 	bl	80149b8 <HAL_GetTick>
 8004760:	0003      	movs	r3, r0
 8004762:	4a20      	ldr	r2, [pc, #128]	@ (80047e4 <ENS_Upkeep+0x38c>)
 8004764:	189a      	adds	r2, r3, r2
 8004766:	4b03      	ldr	r3, [pc, #12]	@ (8004774 <ENS_Upkeep+0x31c>)
 8004768:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 800476a:	4b03      	ldr	r3, [pc, #12]	@ (8004778 <ENS_Upkeep+0x320>)
 800476c:	2208      	movs	r2, #8
 800476e:	701a      	strb	r2, [r3, #0]
    break;
 8004770:	e07e      	b.n	8004870 <ENS_Upkeep+0x418>
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	2000045c 	.word	0x2000045c
 8004778:	20000000 	.word	0x20000000
 800477c:	0802e12c 	.word	0x0802e12c
 8004780:	0802a9cc 	.word	0x0802a9cc
 8004784:	0802a8d4 	.word	0x0802a8d4
 8004788:	000be6e0 	.word	0x000be6e0
 800478c:	20000e43 	.word	0x20000e43
 8004790:	20000461 	.word	0x20000461
 8004794:	0802aa00 	.word	0x0802aa00
 8004798:	0802aa08 	.word	0x0802aa08
 800479c:	0802aa10 	.word	0x0802aa10
 80047a0:	0802aa34 	.word	0x0802aa34
 80047a4:	0802aa4c 	.word	0x0802aa4c
 80047a8:	0802aa6c 	.word	0x0802aa6c
 80047ac:	0802aa84 	.word	0x0802aa84
 80047b0:	0802aa8c 	.word	0x0802aa8c
 80047b4:	0802aa94 	.word	0x0802aa94
 80047b8:	0802aa9c 	.word	0x0802aa9c
 80047bc:	0802aaa4 	.word	0x0802aaa4
 80047c0:	0802aaac 	.word	0x0802aaac
 80047c4:	0802aab4 	.word	0x0802aab4
 80047c8:	20000460 	.word	0x20000460
 80047cc:	20000490 	.word	0x20000490
 80047d0:	0802aadc 	.word	0x0802aadc
 80047d4:	0802a944 	.word	0x0802a944
 80047d8:	2000214d 	.word	0x2000214d
 80047dc:	2000214e 	.word	0x2000214e
 80047e0:	0802ab08 	.word	0x0802ab08
 80047e4:	0000afc8 	.word	0x0000afc8

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 80047e8:	f009 fb80 	bl	800deec <getSensorLock>
 80047ec:	1e03      	subs	r3, r0, #0
 80047ee:	d13c      	bne.n	800486a <ENS_Upkeep+0x412>
        break;
      }
      setSensorLock(ENS160);
 80047f0:	2004      	movs	r0, #4
 80047f2:	f009 fb67 	bl	800dec4 <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 80047f6:	1cba      	adds	r2, r7, #2
 80047f8:	2301      	movs	r3, #1
 80047fa:	2101      	movs	r1, #1
 80047fc:	2010      	movs	r0, #16
 80047fe:	f7ff f96d 	bl	8003adc <ReadMemRegister>
      if (data == 0) {
 8004802:	1cbb      	adds	r3, r7, #2
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d111      	bne.n	800482e <ENS_Upkeep+0x3d6>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 800480a:	1dfc      	adds	r4, r7, #7
 800480c:	2002      	movs	r0, #2
 800480e:	f7ff fafd 	bl	8003e0c <ENS160_setMode>
 8004812:	0003      	movs	r3, r0
 8004814:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 8004816:	1dfb      	adds	r3, r7, #7
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <ENS_Upkeep+0x3ca>
 800481e:	4b17      	ldr	r3, [pc, #92]	@ (800487c <ENS_Upkeep+0x424>)
 8004820:	e000      	b.n	8004824 <ENS_Upkeep+0x3cc>
 8004822:	4b17      	ldr	r3, [pc, #92]	@ (8004880 <ENS_Upkeep+0x428>)
 8004824:	4a17      	ldr	r2, [pc, #92]	@ (8004884 <ENS_Upkeep+0x42c>)
 8004826:	4918      	ldr	r1, [pc, #96]	@ (8004888 <ENS_Upkeep+0x430>)
 8004828:	2003      	movs	r0, #3
 800482a:	f00f fb45 	bl	8013eb8 <CreateLine>
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 800482e:	200a      	movs	r0, #10
 8004830:	f010 f8cc 	bl	80149cc <HAL_Delay>
      setSensorLock(FREE);
 8004834:	2000      	movs	r0, #0
 8004836:	f009 fb45 	bl	800dec4 <setSensorLock>
      ENSState = ENS_STATUS_CHECK;
 800483a:	4b14      	ldr	r3, [pc, #80]	@ (800488c <ENS_Upkeep+0x434>)
 800483c:	2203      	movs	r2, #3
 800483e:	701a      	strb	r2, [r3, #0]
    break;
 8004840:	e016      	b.n	8004870 <ENS_Upkeep+0x418>


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 8004842:	4b12      	ldr	r3, [pc, #72]	@ (800488c <ENS_Upkeep+0x434>)
 8004844:	2202      	movs	r2, #2
 8004846:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 8004848:	f009 fb50 	bl	800deec <getSensorLock>
 800484c:	0003      	movs	r3, r0
 800484e:	2b04      	cmp	r3, #4
 8004850:	d00d      	beq.n	800486e <ENS_Upkeep+0x416>
      setSensorLock(FREE);
 8004852:	2000      	movs	r0, #0
 8004854:	f009 fb36 	bl	800dec4 <setSensorLock>
    }
    break;
 8004858:	e009      	b.n	800486e <ENS_Upkeep+0x416>
    break;
 800485a:	46c0      	nop			@ (mov r8, r8)
 800485c:	e008      	b.n	8004870 <ENS_Upkeep+0x418>
      break;
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	e006      	b.n	8004870 <ENS_Upkeep+0x418>
      break;
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	e004      	b.n	8004870 <ENS_Upkeep+0x418>
        break;
 8004866:	46c0      	nop			@ (mov r8, r8)
 8004868:	e002      	b.n	8004870 <ENS_Upkeep+0x418>
        break;
 800486a:	46c0      	nop			@ (mov r8, r8)
 800486c:	e000      	b.n	8004870 <ENS_Upkeep+0x418>
    break;
 800486e:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 8004870:	4b06      	ldr	r3, [pc, #24]	@ (800488c <ENS_Upkeep+0x434>)
 8004872:	781b      	ldrb	r3, [r3, #0]
}
 8004874:	0018      	movs	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	b003      	add	sp, #12
 800487a:	bd90      	pop	{r4, r7, pc}
 800487c:	0802aa00 	.word	0x0802aa00
 8004880:	0802aa08 	.word	0x0802aa08
 8004884:	0802ab40 	.word	0x0802ab40
 8004888:	0802a8d4 	.word	0x0802a8d4
 800488c:	20000000 	.word	0x20000000

08004890 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 8004894:	4b02      	ldr	r3, [pc, #8]	@ (80048a0 <forceNTPupdate+0x10>)
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
}
 800489a:	46c0      	nop			@ (mov r8, r8)
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	20000698 	.word	0x20000698

080048a4 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80048ac:	f010 f884 	bl	80149b8 <HAL_GetTick>
 80048b0:	0002      	movs	r2, r0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	18d2      	adds	r2, r2, r3
 80048b6:	4b03      	ldr	r3, [pc, #12]	@ (80048c4 <setESPTimeStamp+0x20>)
 80048b8:	601a      	str	r2, [r3, #0]
}
 80048ba:	46c0      	nop			@ (mov r8, r8)
 80048bc:	46bd      	mov	sp, r7
 80048be:	b002      	add	sp, #8
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	46c0      	nop			@ (mov r8, r8)
 80048c4:	20000694 	.word	0x20000694

080048c8 <setCharges>:

void setCharges(){
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  solarCharge = ReadSolarVoltage() / 1000.0;
 80048cc:	f005 f9bc 	bl	8009c48 <ReadSolarVoltage>
 80048d0:	0003      	movs	r3, r0
 80048d2:	0018      	movs	r0, r3
 80048d4:	f7fe ff8c 	bl	80037f0 <__aeabi_i2d>
 80048d8:	2200      	movs	r2, #0
 80048da:	4b07      	ldr	r3, [pc, #28]	@ (80048f8 <setCharges+0x30>)
 80048dc:	f7fd fc00 	bl	80020e0 <__aeabi_ddiv>
 80048e0:	0002      	movs	r2, r0
 80048e2:	000b      	movs	r3, r1
 80048e4:	0010      	movs	r0, r2
 80048e6:	0019      	movs	r1, r3
 80048e8:	f7ff f81c 	bl	8003924 <__aeabi_d2f>
 80048ec:	1c02      	adds	r2, r0, #0
 80048ee:	4b03      	ldr	r3, [pc, #12]	@ (80048fc <setCharges+0x34>)
 80048f0:	601a      	str	r2, [r3, #0]
}
 80048f2:	46c0      	nop			@ (mov r8, r8)
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	408f4000 	.word	0x408f4000
 80048fc:	200005c0 	.word	0x200005c0

08004900 <getWifiCred>:

void getWifiCred(void){
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  ReadUint8ArrayEEprom(SSIDConfigAddr, (uint8_t*)Credentials.SSID, SSIDMaxLength);
 8004904:	4b14      	ldr	r3, [pc, #80]	@ (8004958 <getWifiCred+0x58>)
 8004906:	4815      	ldr	r0, [pc, #84]	@ (800495c <getWifiCred+0x5c>)
 8004908:	2220      	movs	r2, #32
 800490a:	0019      	movs	r1, r3
 800490c:	f007 fc6a 	bl	800c1e4 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(pwdConfigAddr, (uint8_t*)Credentials.Password, pwdMaxLength);
 8004910:	4b13      	ldr	r3, [pc, #76]	@ (8004960 <getWifiCred+0x60>)
 8004912:	4814      	ldr	r0, [pc, #80]	@ (8004964 <getWifiCred+0x64>)
 8004914:	2240      	movs	r2, #64	@ 0x40
 8004916:	0019      	movs	r1, r3
 8004918:	f007 fc64 	bl	800c1e4 <ReadUint8ArrayEEprom>
  if ((Credentials.SSID[0] == 0) || (Credentials.Password[0] == 0)) {
 800491c:	4b0e      	ldr	r3, [pc, #56]	@ (8004958 <getWifiCred+0x58>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d004      	beq.n	800492e <getWifiCred+0x2e>
 8004924:	4b0c      	ldr	r3, [pc, #48]	@ (8004958 <getWifiCred+0x58>)
 8004926:	2220      	movs	r2, #32
 8004928:	5c9b      	ldrb	r3, [r3, r2]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d105      	bne.n	800493a <getWifiCred+0x3a>
    Error("Wifi credentials not found, reprogram or connect to PC and type Helpme");
 800492e:	4a0e      	ldr	r2, [pc, #56]	@ (8004968 <getWifiCred+0x68>)
 8004930:	4b0e      	ldr	r3, [pc, #56]	@ (800496c <getWifiCred+0x6c>)
 8004932:	0019      	movs	r1, r3
 8004934:	2001      	movs	r0, #1
 8004936:	f00f fabf 	bl	8013eb8 <CreateLine>
  }
  Info("The SSID is: %s", Credentials.SSID);
 800493a:	4b07      	ldr	r3, [pc, #28]	@ (8004958 <getWifiCred+0x58>)
 800493c:	4a0c      	ldr	r2, [pc, #48]	@ (8004970 <getWifiCred+0x70>)
 800493e:	490d      	ldr	r1, [pc, #52]	@ (8004974 <getWifiCred+0x74>)
 8004940:	2002      	movs	r0, #2
 8004942:	f00f fab9 	bl	8013eb8 <CreateLine>
  Info("The Password is: %s", Credentials.Password);
 8004946:	4b06      	ldr	r3, [pc, #24]	@ (8004960 <getWifiCred+0x60>)
 8004948:	4a0b      	ldr	r2, [pc, #44]	@ (8004978 <getWifiCred+0x78>)
 800494a:	490a      	ldr	r1, [pc, #40]	@ (8004974 <getWifiCred+0x74>)
 800494c:	2002      	movs	r0, #2
 800494e:	f00f fab3 	bl	8013eb8 <CreateLine>
}
 8004952:	46c0      	nop			@ (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	200006a0 	.word	0x200006a0
 800495c:	08080200 	.word	0x08080200
 8004960:	200006c0 	.word	0x200006c0
 8004964:	08080220 	.word	0x08080220
 8004968:	0802ab70 	.word	0x0802ab70
 800496c:	0802abb8 	.word	0x0802abb8
 8004970:	0802abbc 	.word	0x0802abbc
 8004974:	0802abcc 	.word	0x0802abcc
 8004978:	0802abd0 	.word	0x0802abd0

0800497c <checkName>:
  }
  test = (configSum == 0);
  return test;
}

bool checkName(){
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8004982:	4b15      	ldr	r3, [pc, #84]	@ (80049d8 <checkName+0x5c>)
 8004984:	4815      	ldr	r0, [pc, #84]	@ (80049dc <checkName+0x60>)
 8004986:	2220      	movs	r2, #32
 8004988:	0019      	movs	r1, r3
 800498a:	f007 fc2b 	bl	800c1e4 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800498e:	1dfb      	adds	r3, r7, #7
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
 8004994:	e00e      	b.n	80049b4 <checkName+0x38>
    configSum += nameConfig[i];
 8004996:	1dfb      	adds	r3, r7, #7
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	4a0f      	ldr	r2, [pc, #60]	@ (80049d8 <checkName+0x5c>)
 800499c:	5cd3      	ldrb	r3, [r2, r3]
 800499e:	001a      	movs	r2, r3
 80049a0:	4b0f      	ldr	r3, [pc, #60]	@ (80049e0 <checkName+0x64>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	18d2      	adds	r2, r2, r3
 80049a6:	4b0e      	ldr	r3, [pc, #56]	@ (80049e0 <checkName+0x64>)
 80049a8:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80049aa:	1dfb      	adds	r3, r7, #7
 80049ac:	781a      	ldrb	r2, [r3, #0]
 80049ae:	1dfb      	adds	r3, r7, #7
 80049b0:	3201      	adds	r2, #1
 80049b2:	701a      	strb	r2, [r3, #0]
 80049b4:	1dfb      	adds	r3, r7, #7
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b0b      	cmp	r3, #11
 80049ba:	d9ec      	bls.n	8004996 <checkName+0x1a>
  }
  test = (configSum != 0);
 80049bc:	4b08      	ldr	r3, [pc, #32]	@ (80049e0 <checkName+0x64>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	1e5a      	subs	r2, r3, #1
 80049c2:	4193      	sbcs	r3, r2
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	4b07      	ldr	r3, [pc, #28]	@ (80049e4 <checkName+0x68>)
 80049c8:	701a      	strb	r2, [r3, #0]
  return test;
 80049ca:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <checkName+0x68>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
}
 80049ce:	0018      	movs	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b002      	add	sp, #8
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	20000768 	.word	0x20000768
 80049dc:	08080090 	.word	0x08080090
 80049e0:	20000788 	.word	0x20000788
 80049e4:	2000078c 	.word	0x2000078c

080049e8 <setModePowerMail>:

#ifdef USE_MAIL
void setModePowerMail() {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08c      	sub	sp, #48	@ 0x30
 80049ec:	af00      	add	r7, sp, #0
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 80049ee:	003b      	movs	r3, r7
 80049f0:	4814      	ldr	r0, [pc, #80]	@ (8004a44 <setModePowerMail+0x5c>)
 80049f2:	2230      	movs	r2, #48	@ 0x30
 80049f4:	0019      	movs	r1, r3
 80049f6:	f007 fbf5 	bl	800c1e4 <ReadUint8ArrayEEprom>
  if ( strlen((char*)MailAPIKeyConfig) == 0) {
 80049fa:	003b      	movs	r3, r7
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <setModePowerMail+0x28>
    Error("No mail API key defined");
 8004a02:	4a11      	ldr	r2, [pc, #68]	@ (8004a48 <setModePowerMail+0x60>)
 8004a04:	4b11      	ldr	r3, [pc, #68]	@ (8004a4c <setModePowerMail+0x64>)
 8004a06:	0019      	movs	r1, r3
 8004a08:	2001      	movs	r0, #1
 8004a0a:	f00f fa55 	bl	8013eb8 <CreateLine>
 8004a0e:	e015      	b.n	8004a3c <setModePowerMail+0x54>
    return;
  }
//  Debug("Powermail is forced.");
  sendpwremail = DO_PWR_MAIL;
 8004a10:	4b0f      	ldr	r3, [pc, #60]	@ (8004a50 <setModePowerMail+0x68>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	701a      	strb	r2, [r3, #0]
  Mode = AT_MODE_MAIL;
 8004a16:	4b0f      	ldr	r3, [pc, #60]	@ (8004a54 <setModePowerMail+0x6c>)
 8004a18:	2206      	movs	r2, #6
 8004a1a:	701a      	strb	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a58 <setModePowerMail+0x70>)
 8004a1e:	2202      	movs	r2, #2
 8004a20:	701a      	strb	r2, [r3, #0]
  savedESPTimeStamp = ESPTimeStamp;
 8004a22:	4b0e      	ldr	r3, [pc, #56]	@ (8004a5c <setModePowerMail+0x74>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b0e      	ldr	r3, [pc, #56]	@ (8004a60 <setModePowerMail+0x78>)
 8004a28:	601a      	str	r2, [r3, #0]
  ESPTimeStamp = 0;
 8004a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a5c <setModePowerMail+0x74>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
  sendpwrmaildate = getDate();
 8004a30:	f005 fa14 	bl	8009e5c <getDate>
 8004a34:	0003      	movs	r3, r0
 8004a36:	001a      	movs	r2, r3
 8004a38:	4b0a      	ldr	r3, [pc, #40]	@ (8004a64 <setModePowerMail+0x7c>)
 8004a3a:	701a      	strb	r2, [r3, #0]
}
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b00c      	add	sp, #48	@ 0x30
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	080802c0 	.word	0x080802c0
 8004a48:	0802abe4 	.word	0x0802abe4
 8004a4c:	0802abb8 	.word	0x0802abb8
 8004a50:	200010f9 	.word	0x200010f9
 8004a54:	20000702 	.word	0x20000702
 8004a58:	20000030 	.word	0x20000030
 8004a5c:	20000694 	.word	0x20000694
 8004a60:	2000002c 	.word	0x2000002c
 8004a64:	20001110 	.word	0x20001110

08004a68 <pwrmailTodaySend>:

void pwrmailTodaySend() {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  if (sendpwrmaildate != getDate()) {
 8004a6c:	f005 f9f6 	bl	8009e5c <getDate>
 8004a70:	0003      	movs	r3, r0
 8004a72:	001a      	movs	r2, r3
 8004a74:	4b04      	ldr	r3, [pc, #16]	@ (8004a88 <pwrmailTodaySend+0x20>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d002      	beq.n	8004a82 <pwrmailTodaySend+0x1a>
    sendpwremail = CLEAR;
 8004a7c:	4b03      	ldr	r3, [pc, #12]	@ (8004a8c <pwrmailTodaySend+0x24>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	701a      	strb	r2, [r3, #0]
  }
}
 8004a82:	46c0      	nop			@ (mov r8, r8)
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	20001110 	.word	0x20001110
 8004a8c:	200010f9 	.word	0x200010f9

08004a90 <setHIDS>:
#endif

void setHIDS(float temp, float humid){
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 8004a9a:	4b05      	ldr	r3, [pc, #20]	@ (8004ab0 <setHIDS+0x20>)
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8004aa0:	4b03      	ldr	r3, [pc, #12]	@ (8004ab0 <setHIDS+0x20>)
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b002      	add	sp, #8
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	46c0      	nop			@ (mov r8, r8)
 8004ab0:	20000704 	.word	0x20000704

08004ab4 <setVOC>:

void setVOC(uint16_t voc) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	0002      	movs	r2, r0
 8004abc:	1dbb      	adds	r3, r7, #6
 8004abe:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8004ac0:	4b04      	ldr	r3, [pc, #16]	@ (8004ad4 <setVOC+0x20>)
 8004ac2:	1dba      	adds	r2, r7, #6
 8004ac4:	2148      	movs	r1, #72	@ 0x48
 8004ac6:	8812      	ldrh	r2, [r2, #0]
 8004ac8:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 8004aca:	46c0      	nop			@ (mov r8, r8)
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b002      	add	sp, #8
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	46c0      	nop			@ (mov r8, r8)
 8004ad4:	20000704 	.word	0x20000704

08004ad8 <setAHT2x>:

void setAHT2x(float airtemp, float airhum) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  MeasVal.AHT2x_humidity = airhum;
 8004ae2:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <setAHT2x+0x20>)
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	639a      	str	r2, [r3, #56]	@ 0x38
  MeasVal.AHT2x_temperature = airtemp;
 8004ae8:	4b03      	ldr	r3, [pc, #12]	@ (8004af8 <setAHT2x+0x20>)
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004aee:	46c0      	nop			@ (mov r8, r8)
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b002      	add	sp, #8
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	46c0      	nop			@ (mov r8, r8)
 8004af8:	20000704 	.word	0x20000704

08004afc <setBMP280>:

void setBMP280(float airtemp, float airhpa) {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  MeasVal.BMP280_temperature = airtemp;
 8004b06:	4b05      	ldr	r3, [pc, #20]	@ (8004b1c <setBMP280+0x20>)
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	641a      	str	r2, [r3, #64]	@ 0x40
  MeasVal.BMP280_airpressure = airhpa;
 8004b0c:	4b03      	ldr	r3, [pc, #12]	@ (8004b1c <setBMP280+0x20>)
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8004b12:	46c0      	nop			@ (mov r8, r8)
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b002      	add	sp, #8
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	20000704 	.word	0x20000704

08004b20 <setENS160>:

void setENS160(uint8_t aqi, uint16_t tvoc, uint16_t eco2) {
 8004b20:	b590      	push	{r4, r7, lr}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	0004      	movs	r4, r0
 8004b28:	0008      	movs	r0, r1
 8004b2a:	0011      	movs	r1, r2
 8004b2c:	1dfb      	adds	r3, r7, #7
 8004b2e:	1c22      	adds	r2, r4, #0
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	1d3b      	adds	r3, r7, #4
 8004b34:	1c02      	adds	r2, r0, #0
 8004b36:	801a      	strh	r2, [r3, #0]
 8004b38:	1cbb      	adds	r3, r7, #2
 8004b3a:	1c0a      	adds	r2, r1, #0
 8004b3c:	801a      	strh	r2, [r3, #0]
  MeasVal.AQIndex = aqi;
 8004b3e:	4b15      	ldr	r3, [pc, #84]	@ (8004b94 <setENS160+0x74>)
 8004b40:	1dfa      	adds	r2, r7, #7
 8004b42:	2154      	movs	r1, #84	@ 0x54
 8004b44:	7812      	ldrb	r2, [r2, #0]
 8004b46:	545a      	strb	r2, [r3, r1]
  if (aqi > MeasVal.AQIndexmax) {
 8004b48:	4b12      	ldr	r3, [pc, #72]	@ (8004b94 <setENS160+0x74>)
 8004b4a:	2255      	movs	r2, #85	@ 0x55
 8004b4c:	5c9b      	ldrb	r3, [r3, r2]
 8004b4e:	1dfa      	adds	r2, r7, #7
 8004b50:	7812      	ldrb	r2, [r2, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d904      	bls.n	8004b60 <setENS160+0x40>
    MeasVal.AQIndexmax = aqi;
 8004b56:	4b0f      	ldr	r3, [pc, #60]	@ (8004b94 <setENS160+0x74>)
 8004b58:	1dfa      	adds	r2, r7, #7
 8004b5a:	2155      	movs	r1, #85	@ 0x55
 8004b5c:	7812      	ldrb	r2, [r2, #0]
 8004b5e:	545a      	strb	r2, [r3, r1]
  }
  MeasVal.TVOCIndex = tvoc;
 8004b60:	4b0c      	ldr	r3, [pc, #48]	@ (8004b94 <setENS160+0x74>)
 8004b62:	1d3a      	adds	r2, r7, #4
 8004b64:	214a      	movs	r1, #74	@ 0x4a
 8004b66:	8812      	ldrh	r2, [r2, #0]
 8004b68:	525a      	strh	r2, [r3, r1]
  MeasVal.eCO2Index = eco2;
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b94 <setENS160+0x74>)
 8004b6c:	1cba      	adds	r2, r7, #2
 8004b6e:	2150      	movs	r1, #80	@ 0x50
 8004b70:	8812      	ldrh	r2, [r2, #0]
 8004b72:	525a      	strh	r2, [r3, r1]
  if (eco2 > MeasVal.eCO2Indexmax) {
 8004b74:	4b07      	ldr	r3, [pc, #28]	@ (8004b94 <setENS160+0x74>)
 8004b76:	2252      	movs	r2, #82	@ 0x52
 8004b78:	5a9b      	ldrh	r3, [r3, r2]
 8004b7a:	1cba      	adds	r2, r7, #2
 8004b7c:	8812      	ldrh	r2, [r2, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d904      	bls.n	8004b8c <setENS160+0x6c>
    MeasVal.eCO2Indexmax = eco2;
 8004b82:	4b04      	ldr	r3, [pc, #16]	@ (8004b94 <setENS160+0x74>)
 8004b84:	1cba      	adds	r2, r7, #2
 8004b86:	2152      	movs	r1, #82	@ 0x52
 8004b88:	8812      	ldrh	r2, [r2, #0]
 8004b8a:	525a      	strh	r2, [r3, r1]
  }
}
 8004b8c:	46c0      	nop			@ (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b003      	add	sp, #12
 8004b92:	bd90      	pop	{r4, r7, pc}
 8004b94:	20000704 	.word	0x20000704

08004b98 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8004ba4:	4b06      	ldr	r3, [pc, #24]	@ (8004bc0 <setMic+0x28>)
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	659a      	str	r2, [r3, #88]	@ 0x58
  MeasVal.dBApeak = dBmax;
 8004baa:	4b05      	ldr	r3, [pc, #20]	@ (8004bc0 <setMic+0x28>)
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	65da      	str	r2, [r3, #92]	@ 0x5c
  MeasVal.dBAaverage = dBAavg;
 8004bb0:	4b03      	ldr	r3, [pc, #12]	@ (8004bc0 <setMic+0x28>)
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	b004      	add	sp, #16
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	46c0      	nop			@ (mov r8, r8)
 8004bc0:	20000704 	.word	0x20000704

08004bc4 <setPM1p0>:

void setPM1p0(uint16_t PM1) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	0002      	movs	r2, r0
 8004bcc:	1dbb      	adds	r3, r7, #6
 8004bce:	801a      	strh	r2, [r3, #0]
  MeasVal.PM1p0 = PM1 / 10.0f;
 8004bd0:	1dbb      	adds	r3, r7, #6
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f7fc fe27 	bl	8001828 <__aeabi_i2f>
 8004bda:	1c03      	adds	r3, r0, #0
 8004bdc:	490d      	ldr	r1, [pc, #52]	@ (8004c14 <setPM1p0+0x50>)
 8004bde:	1c18      	adds	r0, r3, #0
 8004be0:	f7fc f860 	bl	8000ca4 <__aeabi_fdiv>
 8004be4:	1c03      	adds	r3, r0, #0
 8004be6:	1c1a      	adds	r2, r3, #0
 8004be8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c18 <setPM1p0+0x54>)
 8004bea:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM1p0 > MeasVal.PM1p0max) {
 8004bec:	4b0a      	ldr	r3, [pc, #40]	@ (8004c18 <setPM1p0+0x54>)
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	4b09      	ldr	r3, [pc, #36]	@ (8004c18 <setPM1p0+0x54>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	1c19      	adds	r1, r3, #0
 8004bf6:	1c10      	adds	r0, r2, #0
 8004bf8:	f7fb fcae 	bl	8000558 <__aeabi_fcmpgt>
 8004bfc:	1e03      	subs	r3, r0, #0
 8004bfe:	d100      	bne.n	8004c02 <setPM1p0+0x3e>
    MeasVal.PM1p0max = MeasVal.PM1p0;
  }
}
 8004c00:	e003      	b.n	8004c0a <setPM1p0+0x46>
    MeasVal.PM1p0max = MeasVal.PM1p0;
 8004c02:	4b05      	ldr	r3, [pc, #20]	@ (8004c18 <setPM1p0+0x54>)
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	4b04      	ldr	r3, [pc, #16]	@ (8004c18 <setPM1p0+0x54>)
 8004c08:	60da      	str	r2, [r3, #12]
}
 8004c0a:	46c0      	nop			@ (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b002      	add	sp, #8
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	46c0      	nop			@ (mov r8, r8)
 8004c14:	41200000 	.word	0x41200000
 8004c18:	20000704 	.word	0x20000704

08004c1c <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	0002      	movs	r2, r0
 8004c24:	1dbb      	adds	r3, r7, #6
 8004c26:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8004c28:	1dbb      	adds	r3, r7, #6
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f7fc fdfb 	bl	8001828 <__aeabi_i2f>
 8004c32:	1c03      	adds	r3, r0, #0
 8004c34:	490d      	ldr	r1, [pc, #52]	@ (8004c6c <setPM2p5+0x50>)
 8004c36:	1c18      	adds	r0, r3, #0
 8004c38:	f7fc f834 	bl	8000ca4 <__aeabi_fdiv>
 8004c3c:	1c03      	adds	r3, r0, #0
 8004c3e:	1c1a      	adds	r2, r3, #0
 8004c40:	4b0b      	ldr	r3, [pc, #44]	@ (8004c70 <setPM2p5+0x54>)
 8004c42:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8004c44:	4b0a      	ldr	r3, [pc, #40]	@ (8004c70 <setPM2p5+0x54>)
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	4b09      	ldr	r3, [pc, #36]	@ (8004c70 <setPM2p5+0x54>)
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	1c19      	adds	r1, r3, #0
 8004c4e:	1c10      	adds	r0, r2, #0
 8004c50:	f7fb fc82 	bl	8000558 <__aeabi_fcmpgt>
 8004c54:	1e03      	subs	r3, r0, #0
 8004c56:	d100      	bne.n	8004c5a <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8004c58:	e003      	b.n	8004c62 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 8004c5a:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <setPM2p5+0x54>)
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	4b04      	ldr	r3, [pc, #16]	@ (8004c70 <setPM2p5+0x54>)
 8004c60:	615a      	str	r2, [r3, #20]
}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b002      	add	sp, #8
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	46c0      	nop			@ (mov r8, r8)
 8004c6c:	41200000 	.word	0x41200000
 8004c70:	20000704 	.word	0x20000704

08004c74 <setPM4p0>:

void setPM4p0(uint16_t PM4) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	0002      	movs	r2, r0
 8004c7c:	1dbb      	adds	r3, r7, #6
 8004c7e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM4p0 = PM4 / 10.0f;
 8004c80:	1dbb      	adds	r3, r7, #6
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	0018      	movs	r0, r3
 8004c86:	f7fc fdcf 	bl	8001828 <__aeabi_i2f>
 8004c8a:	1c03      	adds	r3, r0, #0
 8004c8c:	490d      	ldr	r1, [pc, #52]	@ (8004cc4 <setPM4p0+0x50>)
 8004c8e:	1c18      	adds	r0, r3, #0
 8004c90:	f7fc f808 	bl	8000ca4 <__aeabi_fdiv>
 8004c94:	1c03      	adds	r3, r0, #0
 8004c96:	1c1a      	adds	r2, r3, #0
 8004c98:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc8 <setPM4p0+0x54>)
 8004c9a:	619a      	str	r2, [r3, #24]
  if (MeasVal.PM4p0 > MeasVal.PM4p0max) {
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <setPM4p0+0x54>)
 8004c9e:	699a      	ldr	r2, [r3, #24]
 8004ca0:	4b09      	ldr	r3, [pc, #36]	@ (8004cc8 <setPM4p0+0x54>)
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	1c19      	adds	r1, r3, #0
 8004ca6:	1c10      	adds	r0, r2, #0
 8004ca8:	f7fb fc56 	bl	8000558 <__aeabi_fcmpgt>
 8004cac:	1e03      	subs	r3, r0, #0
 8004cae:	d100      	bne.n	8004cb2 <setPM4p0+0x3e>
    MeasVal.PM4p0max = MeasVal.PM4p0;
  }
}
 8004cb0:	e003      	b.n	8004cba <setPM4p0+0x46>
    MeasVal.PM4p0max = MeasVal.PM4p0;
 8004cb2:	4b05      	ldr	r3, [pc, #20]	@ (8004cc8 <setPM4p0+0x54>)
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	4b04      	ldr	r3, [pc, #16]	@ (8004cc8 <setPM4p0+0x54>)
 8004cb8:	61da      	str	r2, [r3, #28]
}
 8004cba:	46c0      	nop			@ (mov r8, r8)
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b002      	add	sp, #8
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			@ (mov r8, r8)
 8004cc4:	41200000 	.word	0x41200000
 8004cc8:	20000704 	.word	0x20000704

08004ccc <setPM10>:

void setPM10(uint16_t PM10) {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	0002      	movs	r2, r0
 8004cd4:	1dbb      	adds	r3, r7, #6
 8004cd6:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8004cd8:	1dbb      	adds	r3, r7, #6
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f7fc fda3 	bl	8001828 <__aeabi_i2f>
 8004ce2:	1c03      	adds	r3, r0, #0
 8004ce4:	490d      	ldr	r1, [pc, #52]	@ (8004d1c <setPM10+0x50>)
 8004ce6:	1c18      	adds	r0, r3, #0
 8004ce8:	f7fb ffdc 	bl	8000ca4 <__aeabi_fdiv>
 8004cec:	1c03      	adds	r3, r0, #0
 8004cee:	1c1a      	adds	r2, r3, #0
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d20 <setPM10+0x54>)
 8004cf2:	621a      	str	r2, [r3, #32]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d20 <setPM10+0x54>)
 8004cf6:	6a1a      	ldr	r2, [r3, #32]
 8004cf8:	4b09      	ldr	r3, [pc, #36]	@ (8004d20 <setPM10+0x54>)
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfc:	1c19      	adds	r1, r3, #0
 8004cfe:	1c10      	adds	r0, r2, #0
 8004d00:	f7fb fc2a 	bl	8000558 <__aeabi_fcmpgt>
 8004d04:	1e03      	subs	r3, r0, #0
 8004d06:	d100      	bne.n	8004d0a <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 8004d08:	e003      	b.n	8004d12 <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 8004d0a:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <setPM10+0x54>)
 8004d0c:	6a1a      	ldr	r2, [r3, #32]
 8004d0e:	4b04      	ldr	r3, [pc, #16]	@ (8004d20 <setPM10+0x54>)
 8004d10:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004d12:	46c0      	nop			@ (mov r8, r8)
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b002      	add	sp, #8
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	46c0      	nop			@ (mov r8, r8)
 8004d1c:	41200000 	.word	0x41200000
 8004d20:	20000704 	.word	0x20000704

08004d24 <setNOx>:

void setNOx(uint16_t nox) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	0002      	movs	r2, r0
 8004d2c:	1dbb      	adds	r3, r7, #6
 8004d2e:	801a      	strh	r2, [r3, #0]
  MeasVal.airNOx = nox;
 8004d30:	4b0a      	ldr	r3, [pc, #40]	@ (8004d5c <setNOx+0x38>)
 8004d32:	1dba      	adds	r2, r7, #6
 8004d34:	214c      	movs	r1, #76	@ 0x4c
 8004d36:	8812      	ldrh	r2, [r2, #0]
 8004d38:	525a      	strh	r2, [r3, r1]
  if (nox > MeasVal.airNOxmax) {
 8004d3a:	4b08      	ldr	r3, [pc, #32]	@ (8004d5c <setNOx+0x38>)
 8004d3c:	224e      	movs	r2, #78	@ 0x4e
 8004d3e:	5a9b      	ldrh	r3, [r3, r2]
 8004d40:	1dba      	adds	r2, r7, #6
 8004d42:	8812      	ldrh	r2, [r2, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d904      	bls.n	8004d52 <setNOx+0x2e>
    MeasVal.airNOxmax = nox;
 8004d48:	4b04      	ldr	r3, [pc, #16]	@ (8004d5c <setNOx+0x38>)
 8004d4a:	1dba      	adds	r2, r7, #6
 8004d4c:	214e      	movs	r1, #78	@ 0x4e
 8004d4e:	8812      	ldrh	r2, [r2, #0]
 8004d50:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayNOx();
  }
#endif
}
 8004d52:	46c0      	nop			@ (mov r8, r8)
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b002      	add	sp, #8
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	46c0      	nop			@ (mov r8, r8)
 8004d5c:	20000704 	.word	0x20000704

08004d60 <SetSEN545temphum>:

void SetSEN545temphum(float airtemp, float airhum) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  MeasVal.sen55_temperature = airtemp / 200.0f;
 8004d6a:	490a      	ldr	r1, [pc, #40]	@ (8004d94 <SetSEN545temphum+0x34>)
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7fb ff99 	bl	8000ca4 <__aeabi_fdiv>
 8004d72:	1c03      	adds	r3, r0, #0
 8004d74:	1c1a      	adds	r2, r3, #0
 8004d76:	4b08      	ldr	r3, [pc, #32]	@ (8004d98 <SetSEN545temphum+0x38>)
 8004d78:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.sen55_humidity = airhum / 100.0f;
 8004d7a:	4908      	ldr	r1, [pc, #32]	@ (8004d9c <SetSEN545temphum+0x3c>)
 8004d7c:	6838      	ldr	r0, [r7, #0]
 8004d7e:	f7fb ff91 	bl	8000ca4 <__aeabi_fdiv>
 8004d82:	1c03      	adds	r3, r0, #0
 8004d84:	1c1a      	adds	r2, r3, #0
 8004d86:	4b04      	ldr	r3, [pc, #16]	@ (8004d98 <SetSEN545temphum+0x38>)
 8004d88:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b002      	add	sp, #8
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	43480000 	.word	0x43480000
 8004d98:	20000704 	.word	0x20000704
 8004d9c:	42c80000 	.word	0x42c80000

08004da0 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8004da4:	f009 fc5c 	bl	800e660 <sen5x_Get_sen5x_enable_state>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d00f      	beq.n	8004dcc <resetMaxMeasurementValues+0x2c>
    MeasVal.PM1p0max = 0.0f;
 8004dac:	4b0d      	ldr	r3, [pc, #52]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	60da      	str	r2, [r3, #12]
    MeasVal.PM2p5max = 0.0f;
 8004db2:	4b0c      	ldr	r3, [pc, #48]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	615a      	str	r2, [r3, #20]
    MeasVal.PM4p0max = 0.0f;
 8004db8:	4b0a      	ldr	r3, [pc, #40]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	61da      	str	r2, [r3, #28]
    MeasVal.PM10p0max = 0.0f;
 8004dbe:	4b09      	ldr	r3, [pc, #36]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	625a      	str	r2, [r3, #36]	@ 0x24
    MeasVal.airNOxmax = 0;
 8004dc4:	4b07      	ldr	r3, [pc, #28]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dc6:	224e      	movs	r2, #78	@ 0x4e
 8004dc8:	2100      	movs	r1, #0
 8004dca:	5299      	strh	r1, [r3, r2]
  }
  MeasVal.eCO2Indexmax = 0;
 8004dcc:	4b05      	ldr	r3, [pc, #20]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dce:	2252      	movs	r2, #82	@ 0x52
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	5299      	strh	r1, [r3, r2]
  MeasVal.AQIndexmax = 0;
 8004dd4:	4b03      	ldr	r3, [pc, #12]	@ (8004de4 <resetMaxMeasurementValues+0x44>)
 8004dd6:	2255      	movs	r2, #85	@ 0x55
 8004dd8:	2100      	movs	r1, #0
 8004dda:	5499      	strb	r1, [r3, r2]
}
 8004ddc:	46c0      	nop			@ (mov r8, r8)
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	20000704 	.word	0x20000704

08004de8 <SetConfigMode>:

void SetConfigMode(){
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8004dec:	4b0a      	ldr	r3, [pc, #40]	@ (8004e18 <SetConfigMode+0x30>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2201      	movs	r2, #1
 8004df2:	4053      	eors	r3, r2
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8004dfa:	4a08      	ldr	r2, [pc, #32]	@ (8004e1c <SetConfigMode+0x34>)
 8004dfc:	4b08      	ldr	r3, [pc, #32]	@ (8004e20 <SetConfigMode+0x38>)
 8004dfe:	0019      	movs	r1, r3
 8004e00:	2003      	movs	r0, #3
 8004e02:	f00f f859 	bl	8013eb8 <CreateLine>
  }
  ReconfigSet = true;
 8004e06:	4b04      	ldr	r3, [pc, #16]	@ (8004e18 <SetConfigMode+0x30>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004e0c:	4b05      	ldr	r3, [pc, #20]	@ (8004e24 <SetConfigMode+0x3c>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
}
 8004e12:	46c0      	nop			@ (mov r8, r8)
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	200005af 	.word	0x200005af
 8004e1c:	0802abfc 	.word	0x0802abfc
 8004e20:	0802ac1c 	.word	0x0802ac1c
 8004e24:	200010f7 	.word	0x200010f7

08004e28 <GetReconfigMode>:

bool GetReconfigMode() {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004e2c:	4b02      	ldr	r3, [pc, #8]	@ (8004e38 <GetReconfigMode+0x10>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
}
 8004e30:	0018      	movs	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	46c0      	nop			@ (mov r8, r8)
 8004e38:	200005af 	.word	0x200005af

08004e3c <ESP_Init>:
  uid[1] = HAL_GetUIDw1();
  uid[2] = HAL_GetUIDw2();
}
#endif

void ESP_Init(UART_HandleTypeDef* espUart) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8004e44:	4b04      	ldr	r3, [pc, #16]	@ (8004e58 <ESP_Init+0x1c>)
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004e4a:	4b04      	ldr	r3, [pc, #16]	@ (8004e5c <ESP_Init+0x20>)
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	701a      	strb	r2, [r3, #0]
#ifndef OPENSENSEMAP
  ESP_GetUID();
#endif
}
 8004e50:	46c0      	nop			@ (mov r8, r8)
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b002      	add	sp, #8
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	200004a4 	.word	0x200004a4
 8004e5c:	20000030 	.word	0x20000030

08004e60 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004e60:	b5b0      	push	{r4, r5, r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	000a      	movs	r2, r1
 8004e6a:	1cbb      	adds	r3, r7, #2
 8004e6c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004e6e:	4b27      	ldr	r3, [pc, #156]	@ (8004f0c <ESP_Send+0xac>)
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	250f      	movs	r5, #15
 8004e74:	197c      	adds	r4, r7, r5
 8004e76:	1cbb      	adds	r3, r7, #2
 8004e78:	881a      	ldrh	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	0019      	movs	r1, r3
 8004e7e:	f018 fc3f 	bl	801d700 <HAL_UART_Transmit_DMA>
 8004e82:	0003      	movs	r3, r0
 8004e84:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004e86:	197b      	adds	r3, r7, r5
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004e8e:	4a20      	ldr	r2, [pc, #128]	@ (8004f10 <ESP_Send+0xb0>)
 8004e90:	4b20      	ldr	r3, [pc, #128]	@ (8004f14 <ESP_Send+0xb4>)
 8004e92:	0019      	movs	r1, r3
 8004e94:	2001      	movs	r0, #1
 8004e96:	f00f f80f 	bl	8013eb8 <CreateLine>
    return false;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e032      	b.n	8004f04 <ESP_Send+0xa4>
  }
  if ((length > 90) && usblog && Check_USB_PowerOn()) {
 8004e9e:	1cbb      	adds	r3, r7, #2
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	2b5a      	cmp	r3, #90	@ 0x5a
 8004ea4:	d927      	bls.n	8004ef6 <ESP_Send+0x96>
 8004ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8004f18 <ESP_Send+0xb8>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d023      	beq.n	8004ef6 <ESP_Send+0x96>
 8004eae:	f004 ff1f 	bl	8009cf0 <Check_USB_PowerOn>
 8004eb2:	1e03      	subs	r3, r0, #0
 8004eb4:	d01f      	beq.n	8004ef6 <ESP_Send+0x96>
    char splitchar;
    splitchar = command[SPLIT_POS];
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	334c      	adds	r3, #76	@ 0x4c
 8004eba:	001a      	movs	r2, r3
 8004ebc:	240e      	movs	r4, #14
 8004ebe:	193b      	adds	r3, r7, r4
 8004ec0:	7812      	ldrb	r2, [r2, #0]
 8004ec2:	701a      	strb	r2, [r3, #0]
    command[SPLIT_POS] = '\0';
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	334c      	adds	r3, #76	@ 0x4c
 8004ec8:	2200      	movs	r2, #0
 8004eca:	701a      	strb	r2, [r3, #0]
    printf_USB((char*)command);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f003 fe12 	bl	8008af8 <printf_USB>
    command[SPLIT_POS] = splitchar;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	334c      	adds	r3, #76	@ 0x4c
 8004ed8:	193a      	adds	r2, r7, r4
 8004eda:	7812      	ldrb	r2, [r2, #0]
 8004edc:	701a      	strb	r2, [r3, #0]
    printf_USB((char*)&command[SPLIT_POS]);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	334c      	adds	r3, #76	@ 0x4c
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f003 fe08 	bl	8008af8 <printf_USB>
    printf("ESP_Send: %s", command);
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	4b0c      	ldr	r3, [pc, #48]	@ (8004f1c <ESP_Send+0xbc>)
 8004eec:	0011      	movs	r1, r2
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f021 fa8e 	bl	8026410 <iprintf>
  if ((length > 90) && usblog && Check_USB_PowerOn()) {
 8004ef4:	e005      	b.n	8004f02 <ESP_Send+0xa2>
  }
  else
    Debug("ESP_Send: %s", command);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a08      	ldr	r2, [pc, #32]	@ (8004f1c <ESP_Send+0xbc>)
 8004efa:	4909      	ldr	r1, [pc, #36]	@ (8004f20 <ESP_Send+0xc0>)
 8004efc:	2003      	movs	r0, #3
 8004efe:	f00e ffdb 	bl	8013eb8 <CreateLine>
  return true;
 8004f02:	2301      	movs	r3, #1
}
 8004f04:	0018      	movs	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b004      	add	sp, #16
 8004f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f0c:	200004a4 	.word	0x200004a4
 8004f10:	0802ac20 	.word	0x0802ac20
 8004f14:	0802abb8 	.word	0x0802abb8
 8004f18:	200010f7 	.word	0x200010f7
 8004f1c:	0802ac40 	.word	0x0802ac40
 8004f20:	0802ac1c 	.word	0x0802ac1c

08004f24 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8004f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f26:	b08b      	sub	sp, #44	@ 0x2c
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	000a      	movs	r2, r1
 8004f2e:	1cbb      	adds	r3, r7, #2
 8004f30:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8004f32:	4b43      	ldr	r3, [pc, #268]	@ (8005040 <ESP_Receive+0x11c>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]
#ifndef IGNORE_PARITY_ERRORS
  bool reset = false;
#endif
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004f38:	4b42      	ldr	r3, [pc, #264]	@ (8005044 <ESP_Receive+0x120>)
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	2527      	movs	r5, #39	@ 0x27
 8004f3e:	197c      	adds	r4, r7, r5
 8004f40:	1cbb      	adds	r3, r7, #2
 8004f42:	881a      	ldrh	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	0019      	movs	r1, r3
 8004f48:	f018 fc6a 	bl	801d820 <HAL_UART_Receive_DMA>
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004f50:	197b      	adds	r3, r7, r5
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d100      	bne.n	8004f5a <ESP_Receive+0x36>
 8004f58:	e06c      	b.n	8005034 <ESP_Receive+0x110>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8004f5a:	4b3a      	ldr	r3, [pc, #232]	@ (8005044 <ESP_Receive+0x120>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2284      	movs	r2, #132	@ 0x84
 8004f60:	589b      	ldr	r3, [r3, r2]
 8004f62:	4a39      	ldr	r2, [pc, #228]	@ (8005048 <ESP_Receive+0x124>)
 8004f64:	4939      	ldr	r1, [pc, #228]	@ (800504c <ESP_Receive+0x128>)
 8004f66:	2001      	movs	r0, #1
 8004f68:	f00e ffa6 	bl	8013eb8 <CreateLine>
#ifndef SMALLBUILD
    char uartespmod[] =" error in UART to ESP module";
 8004f6c:	2608      	movs	r6, #8
 8004f6e:	19bb      	adds	r3, r7, r6
 8004f70:	4a37      	ldr	r2, [pc, #220]	@ (8005050 <ESP_Receive+0x12c>)
 8004f72:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004f74:	c313      	stmia	r3!, {r0, r1, r4}
 8004f76:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004f78:	c313      	stmia	r3!, {r0, r1, r4}
 8004f7a:	6811      	ldr	r1, [r2, #0]
 8004f7c:	6019      	str	r1, [r3, #0]
 8004f7e:	7912      	ldrb	r2, [r2, #4]
 8004f80:	711a      	strb	r2, [r3, #4]
    if (status & HAL_UART_ERROR_PE) {
 8004f82:	197b      	adds	r3, r7, r5
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2201      	movs	r2, #1
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d005      	beq.n	8004f98 <ESP_Receive+0x74>
      Error("Parity%s", uartespmod);
 8004f8c:	19bb      	adds	r3, r7, r6
 8004f8e:	4a31      	ldr	r2, [pc, #196]	@ (8005054 <ESP_Receive+0x130>)
 8004f90:	492e      	ldr	r1, [pc, #184]	@ (800504c <ESP_Receive+0x128>)
 8004f92:	2001      	movs	r0, #1
 8004f94:	f00e ff90 	bl	8013eb8 <CreateLine>
#ifndef IGNORE_PARITY_ERRORS
      reset = true;
#endif
    }
    if (status & HAL_UART_ERROR_NE) {
 8004f98:	2327      	movs	r3, #39	@ 0x27
 8004f9a:	18fb      	adds	r3, r7, r3
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d006      	beq.n	8004fb2 <ESP_Receive+0x8e>
      Error("Noise%s", uartespmod);
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8005058 <ESP_Receive+0x134>)
 8004faa:	4928      	ldr	r1, [pc, #160]	@ (800504c <ESP_Receive+0x128>)
 8004fac:	2001      	movs	r0, #1
 8004fae:	f00e ff83 	bl	8013eb8 <CreateLine>
#ifndef IGNORE_PARITY_ERRORS
      reset = true;
#endif
    }
    if (status & HAL_UART_ERROR_FE) {
 8004fb2:	2327      	movs	r3, #39	@ 0x27
 8004fb4:	18fb      	adds	r3, r7, r3
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2204      	movs	r2, #4
 8004fba:	4013      	ands	r3, r2
 8004fbc:	d006      	beq.n	8004fcc <ESP_Receive+0xa8>
      Error("Frame%s", uartespmod);
 8004fbe:	2308      	movs	r3, #8
 8004fc0:	18fb      	adds	r3, r7, r3
 8004fc2:	4a26      	ldr	r2, [pc, #152]	@ (800505c <ESP_Receive+0x138>)
 8004fc4:	4921      	ldr	r1, [pc, #132]	@ (800504c <ESP_Receive+0x128>)
 8004fc6:	2001      	movs	r0, #1
 8004fc8:	f00e ff76 	bl	8013eb8 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8004fcc:	2327      	movs	r3, #39	@ 0x27
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2208      	movs	r2, #8
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	d006      	beq.n	8004fe6 <ESP_Receive+0xc2>
      Error("Overrun%s", uartespmod);
 8004fd8:	2308      	movs	r3, #8
 8004fda:	18fb      	adds	r3, r7, r3
 8004fdc:	4a20      	ldr	r2, [pc, #128]	@ (8005060 <ESP_Receive+0x13c>)
 8004fde:	491b      	ldr	r1, [pc, #108]	@ (800504c <ESP_Receive+0x128>)
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	f00e ff69 	bl	8013eb8 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8004fe6:	2327      	movs	r3, #39	@ 0x27
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2210      	movs	r2, #16
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d006      	beq.n	8005000 <ESP_Receive+0xdc>
      Error("DMA transfer%s", uartespmod);
 8004ff2:	2308      	movs	r3, #8
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8005064 <ESP_Receive+0x140>)
 8004ff8:	4914      	ldr	r1, [pc, #80]	@ (800504c <ESP_Receive+0x128>)
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	f00e ff5c 	bl	8013eb8 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8005000:	2327      	movs	r3, #39	@ 0x27
 8005002:	18fb      	adds	r3, r7, r3
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2220      	movs	r2, #32
 8005008:	4013      	ands	r3, r2
 800500a:	d006      	beq.n	800501a <ESP_Receive+0xf6>
      Error("Receiver Timeout%s", uartespmod);
 800500c:	2308      	movs	r3, #8
 800500e:	18fb      	adds	r3, r7, r3
 8005010:	4a15      	ldr	r2, [pc, #84]	@ (8005068 <ESP_Receive+0x144>)
 8005012:	490e      	ldr	r1, [pc, #56]	@ (800504c <ESP_Receive+0x128>)
 8005014:	2001      	movs	r0, #1
 8005016:	f00e ff4f 	bl	8013eb8 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 800501a:	2327      	movs	r3, #39	@ 0x27
 800501c:	18fb      	adds	r3, r7, r3
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2240      	movs	r2, #64	@ 0x40
 8005022:	4013      	ands	r3, r2
 8005024:	d006      	beq.n	8005034 <ESP_Receive+0x110>
      Error("Invalid Callback%s", uartespmod);
 8005026:	2308      	movs	r3, #8
 8005028:	18fb      	adds	r3, r7, r3
 800502a:	4a10      	ldr	r2, [pc, #64]	@ (800506c <ESP_Receive+0x148>)
 800502c:	4907      	ldr	r1, [pc, #28]	@ (800504c <ESP_Receive+0x128>)
 800502e:	2001      	movs	r0, #1
 8005030:	f00e ff42 	bl	8013eb8 <CreateLine>
    RxComplete = true;
    return false;
#endif
#endif
  }
  return true;
 8005034:	2301      	movs	r3, #1
}
 8005036:	0018      	movs	r0, r3
 8005038:	46bd      	mov	sp, r7
 800503a:	b00b      	add	sp, #44	@ 0x2c
 800503c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800503e:	46c0      	nop			@ (mov r8, r8)
 8005040:	200004a8 	.word	0x200004a8
 8005044:	200004a4 	.word	0x200004a4
 8005048:	0802ac50 	.word	0x0802ac50
 800504c:	0802abb8 	.word	0x0802abb8
 8005050:	0802ace0 	.word	0x0802ace0
 8005054:	0802ac80 	.word	0x0802ac80
 8005058:	0802ac8c 	.word	0x0802ac8c
 800505c:	0802ac94 	.word	0x0802ac94
 8005060:	0802ac9c 	.word	0x0802ac9c
 8005064:	0802aca8 	.word	0x0802aca8
 8005068:	0802acb8 	.word	0x0802acb8
 800506c:	0802accc 	.word	0x0802accc

08005070 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005070:	b590      	push	{r4, r7, lr}
 8005072:	b093      	sub	sp, #76	@ 0x4c
 8005074:	af02      	add	r7, sp, #8
 8005076:	6078      	str	r0, [r7, #4]
  char espconnuart[] = "ESP connection UART ";
 8005078:	2328      	movs	r3, #40	@ 0x28
 800507a:	18fb      	adds	r3, r7, r3
 800507c:	4a6d      	ldr	r2, [pc, #436]	@ (8005234 <HAL_UART_ErrorCallback+0x1c4>)
 800507e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005080:	c313      	stmia	r3!, {r0, r1, r4}
 8005082:	ca03      	ldmia	r2!, {r0, r1}
 8005084:	c303      	stmia	r3!, {r0, r1}
 8005086:	7812      	ldrb	r2, [r2, #0]
 8005088:	701a      	strb	r2, [r3, #0]
  char comcalb[] = " Complete";
 800508a:	231c      	movs	r3, #28
 800508c:	18fb      	adds	r3, r7, r3
 800508e:	4a6a      	ldr	r2, [pc, #424]	@ (8005238 <HAL_UART_ErrorCallback+0x1c8>)
 8005090:	ca03      	ldmia	r2!, {r0, r1}
 8005092:	c303      	stmia	r3!, {r0, r1}
 8005094:	8812      	ldrh	r2, [r2, #0]
 8005096:	801a      	strh	r2, [r3, #0]
  char cid[] = " Callback ID";
 8005098:	230c      	movs	r3, #12
 800509a:	18fb      	adds	r3, r7, r3
 800509c:	4a67      	ldr	r2, [pc, #412]	@ (800523c <HAL_UART_ErrorCallback+0x1cc>)
 800509e:	ca13      	ldmia	r2!, {r0, r1, r4}
 80050a0:	c313      	stmia	r3!, {r0, r1, r4}
 80050a2:	7812      	ldrb	r2, [r2, #0]
 80050a4:	701a      	strb	r2, [r3, #0]
  if (huart == EspUart) {
 80050a6:	4b66      	ldr	r3, [pc, #408]	@ (8005240 <HAL_UART_ErrorCallback+0x1d0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d000      	beq.n	80050b2 <HAL_UART_ErrorCallback+0x42>
 80050b0:	e0bd      	b.n	800522e <HAL_UART_ErrorCallback+0x1be>
    if (huart->ErrorCode == 4) {
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2284      	movs	r2, #132	@ 0x84
 80050b6:	589b      	ldr	r3, [r3, r2]
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d100      	bne.n	80050be <HAL_UART_ErrorCallback+0x4e>
 80050bc:	e0b6      	b.n	800522c <HAL_UART_ErrorCallback+0x1bc>
      return;
    }
    Error("A callback error has occurred, errorcode: 0x%X", huart->ErrorCode);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2284      	movs	r2, #132	@ 0x84
 80050c2:	589b      	ldr	r3, [r3, r2]
 80050c4:	4a5f      	ldr	r2, [pc, #380]	@ (8005244 <HAL_UART_ErrorCallback+0x1d4>)
 80050c6:	4960      	ldr	r1, [pc, #384]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 80050c8:	2001      	movs	r0, #1
 80050ca:	f00e fef5 	bl	8013eb8 <CreateLine>
    switch (huart->ErrorCode) {
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2284      	movs	r2, #132	@ 0x84
 80050d2:	589b      	ldr	r3, [r3, r2]
 80050d4:	2b0c      	cmp	r3, #12
 80050d6:	d900      	bls.n	80050da <HAL_UART_ErrorCallback+0x6a>
 80050d8:	e09d      	b.n	8005216 <HAL_UART_ErrorCallback+0x1a6>
 80050da:	009a      	lsls	r2, r3, #2
 80050dc:	4b5b      	ldr	r3, [pc, #364]	@ (800524c <HAL_UART_ErrorCallback+0x1dc>)
 80050de:	18d3      	adds	r3, r2, r3
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("%sTx Half%s%s", espconnuart, comcalb, cid);
 80050e4:	2328      	movs	r3, #40	@ 0x28
 80050e6:	18f8      	adds	r0, r7, r3
 80050e8:	4a59      	ldr	r2, [pc, #356]	@ (8005250 <HAL_UART_ErrorCallback+0x1e0>)
 80050ea:	4957      	ldr	r1, [pc, #348]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 80050ec:	230c      	movs	r3, #12
 80050ee:	18fb      	adds	r3, r7, r3
 80050f0:	9301      	str	r3, [sp, #4]
 80050f2:	231c      	movs	r3, #28
 80050f4:	18fb      	adds	r3, r7, r3
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	0003      	movs	r3, r0
 80050fa:	2001      	movs	r0, #1
 80050fc:	f00e fedc 	bl	8013eb8 <CreateLine>
        break;
 8005100:	e08f      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("%sTx%s%s", espconnuart, comcalb, cid);
 8005102:	2328      	movs	r3, #40	@ 0x28
 8005104:	18f8      	adds	r0, r7, r3
 8005106:	4a53      	ldr	r2, [pc, #332]	@ (8005254 <HAL_UART_ErrorCallback+0x1e4>)
 8005108:	494f      	ldr	r1, [pc, #316]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 800510a:	230c      	movs	r3, #12
 800510c:	18fb      	adds	r3, r7, r3
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	231c      	movs	r3, #28
 8005112:	18fb      	adds	r3, r7, r3
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	0003      	movs	r3, r0
 8005118:	2001      	movs	r0, #1
 800511a:	f00e fecd 	bl	8013eb8 <CreateLine>
        break;
 800511e:	e080      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("%sRx Half%s%s", espconnuart, comcalb, cid);
 8005120:	2328      	movs	r3, #40	@ 0x28
 8005122:	18f8      	adds	r0, r7, r3
 8005124:	4a4c      	ldr	r2, [pc, #304]	@ (8005258 <HAL_UART_ErrorCallback+0x1e8>)
 8005126:	4948      	ldr	r1, [pc, #288]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 8005128:	230c      	movs	r3, #12
 800512a:	18fb      	adds	r3, r7, r3
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	231c      	movs	r3, #28
 8005130:	18fb      	adds	r3, r7, r3
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	0003      	movs	r3, r0
 8005136:	2001      	movs	r0, #1
 8005138:	f00e febe 	bl	8013eb8 <CreateLine>
        break;
 800513c:	e071      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("%sRx%s%s", espconnuart, comcalb, cid);
 800513e:	2328      	movs	r3, #40	@ 0x28
 8005140:	18f8      	adds	r0, r7, r3
 8005142:	4a46      	ldr	r2, [pc, #280]	@ (800525c <HAL_UART_ErrorCallback+0x1ec>)
 8005144:	4940      	ldr	r1, [pc, #256]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 8005146:	230c      	movs	r3, #12
 8005148:	18fb      	adds	r3, r7, r3
 800514a:	9301      	str	r3, [sp, #4]
 800514c:	231c      	movs	r3, #28
 800514e:	18fb      	adds	r3, r7, r3
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	0003      	movs	r3, r0
 8005154:	2001      	movs	r0, #1
 8005156:	f00e feaf 	bl	8013eb8 <CreateLine>
        break;
 800515a:	e062      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_ERROR_CB_ID:
        Error("%sError%s", espconnuart, cid);
 800515c:	2328      	movs	r3, #40	@ 0x28
 800515e:	18f8      	adds	r0, r7, r3
 8005160:	4a3f      	ldr	r2, [pc, #252]	@ (8005260 <HAL_UART_ErrorCallback+0x1f0>)
 8005162:	4939      	ldr	r1, [pc, #228]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 8005164:	230c      	movs	r3, #12
 8005166:	18fb      	adds	r3, r7, r3
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	0003      	movs	r3, r0
 800516c:	2001      	movs	r0, #1
 800516e:	f00e fea3 	bl	8013eb8 <CreateLine>
        break;
 8005172:	e056      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("%sAbort%s%s", espconnuart, comcalb, cid);
 8005174:	2328      	movs	r3, #40	@ 0x28
 8005176:	18f8      	adds	r0, r7, r3
 8005178:	4a3a      	ldr	r2, [pc, #232]	@ (8005264 <HAL_UART_ErrorCallback+0x1f4>)
 800517a:	4933      	ldr	r1, [pc, #204]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 800517c:	230c      	movs	r3, #12
 800517e:	18fb      	adds	r3, r7, r3
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	231c      	movs	r3, #28
 8005184:	18fb      	adds	r3, r7, r3
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	0003      	movs	r3, r0
 800518a:	2001      	movs	r0, #1
 800518c:	f00e fe94 	bl	8013eb8 <CreateLine>
        break;
 8005190:	e047      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("%sAbort Transmit%s%s", espconnuart, comcalb, cid);
 8005192:	2328      	movs	r3, #40	@ 0x28
 8005194:	18f8      	adds	r0, r7, r3
 8005196:	4a34      	ldr	r2, [pc, #208]	@ (8005268 <HAL_UART_ErrorCallback+0x1f8>)
 8005198:	492b      	ldr	r1, [pc, #172]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 800519a:	230c      	movs	r3, #12
 800519c:	18fb      	adds	r3, r7, r3
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	231c      	movs	r3, #28
 80051a2:	18fb      	adds	r3, r7, r3
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	0003      	movs	r3, r0
 80051a8:	2001      	movs	r0, #1
 80051aa:	f00e fe85 	bl	8013eb8 <CreateLine>
        break;
 80051ae:	e038      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("%sAbort Receive%s%s", espconnuart, comcalb, cid);
 80051b0:	2328      	movs	r3, #40	@ 0x28
 80051b2:	18f8      	adds	r0, r7, r3
 80051b4:	4a2d      	ldr	r2, [pc, #180]	@ (800526c <HAL_UART_ErrorCallback+0x1fc>)
 80051b6:	4924      	ldr	r1, [pc, #144]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 80051b8:	230c      	movs	r3, #12
 80051ba:	18fb      	adds	r3, r7, r3
 80051bc:	9301      	str	r3, [sp, #4]
 80051be:	231c      	movs	r3, #28
 80051c0:	18fb      	adds	r3, r7, r3
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	0003      	movs	r3, r0
 80051c6:	2001      	movs	r0, #1
 80051c8:	f00e fe76 	bl	8013eb8 <CreateLine>
        break;
 80051cc:	e029      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_WAKEUP_CB_ID:
        Error("%sWakeup%s", espconnuart, cid);
 80051ce:	2328      	movs	r3, #40	@ 0x28
 80051d0:	18f8      	adds	r0, r7, r3
 80051d2:	4a27      	ldr	r2, [pc, #156]	@ (8005270 <HAL_UART_ErrorCallback+0x200>)
 80051d4:	491c      	ldr	r1, [pc, #112]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 80051d6:	230c      	movs	r3, #12
 80051d8:	18fb      	adds	r3, r7, r3
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	0003      	movs	r3, r0
 80051de:	2001      	movs	r0, #1
 80051e0:	f00e fe6a 	bl	8013eb8 <CreateLine>
        break;
 80051e4:	e01d      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_MSPINIT_CB_ID:
        Error("%sMspInit%s", espconnuart, cid);
 80051e6:	2328      	movs	r3, #40	@ 0x28
 80051e8:	18f8      	adds	r0, r7, r3
 80051ea:	4a22      	ldr	r2, [pc, #136]	@ (8005274 <HAL_UART_ErrorCallback+0x204>)
 80051ec:	4916      	ldr	r1, [pc, #88]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 80051ee:	230c      	movs	r3, #12
 80051f0:	18fb      	adds	r3, r7, r3
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	0003      	movs	r3, r0
 80051f6:	2001      	movs	r0, #1
 80051f8:	f00e fe5e 	bl	8013eb8 <CreateLine>
        break;
 80051fc:	e011      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("%sMspDeInit%s", espconnuart, cid);
 80051fe:	2328      	movs	r3, #40	@ 0x28
 8005200:	18f8      	adds	r0, r7, r3
 8005202:	4a1d      	ldr	r2, [pc, #116]	@ (8005278 <HAL_UART_ErrorCallback+0x208>)
 8005204:	4910      	ldr	r1, [pc, #64]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 8005206:	230c      	movs	r3, #12
 8005208:	18fb      	adds	r3, r7, r3
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	0003      	movs	r3, r0
 800520e:	2001      	movs	r0, #1
 8005210:	f00e fe52 	bl	8013eb8 <CreateLine>
        break;
 8005214:	e005      	b.n	8005222 <HAL_UART_ErrorCallback+0x1b2>
      default:
        Error("%sUnknown error");
 8005216:	4a19      	ldr	r2, [pc, #100]	@ (800527c <HAL_UART_ErrorCallback+0x20c>)
 8005218:	4b0b      	ldr	r3, [pc, #44]	@ (8005248 <HAL_UART_ErrorCallback+0x1d8>)
 800521a:	0019      	movs	r1, r3
 800521c:	2001      	movs	r0, #1
 800521e:	f00e fe4b 	bl	8013eb8 <CreateLine>
    }
    HAL_UART_Abort(huart);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	0018      	movs	r0, r3
 8005226:	f018 fb59 	bl	801d8dc <HAL_UART_Abort>
 800522a:	e000      	b.n	800522e <HAL_UART_ErrorCallback+0x1be>
      return;
 800522c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800522e:	46bd      	mov	sp, r7
 8005230:	b011      	add	sp, #68	@ 0x44
 8005232:	bd90      	pop	{r4, r7, pc}
 8005234:	0802ade4 	.word	0x0802ade4
 8005238:	0802adfc 	.word	0x0802adfc
 800523c:	0802ae08 	.word	0x0802ae08
 8005240:	200004a4 	.word	0x200004a4
 8005244:	0802ad00 	.word	0x0802ad00
 8005248:	0802abb8 	.word	0x0802abb8
 800524c:	0802e180 	.word	0x0802e180
 8005250:	0802ad30 	.word	0x0802ad30
 8005254:	0802ad40 	.word	0x0802ad40
 8005258:	0802ad4c 	.word	0x0802ad4c
 800525c:	0802ad5c 	.word	0x0802ad5c
 8005260:	0802ad68 	.word	0x0802ad68
 8005264:	0802ad74 	.word	0x0802ad74
 8005268:	0802ad80 	.word	0x0802ad80
 800526c:	0802ad98 	.word	0x0802ad98
 8005270:	0802adac 	.word	0x0802adac
 8005274:	0802adb8 	.word	0x0802adb8
 8005278:	0802adc4 	.word	0x0802adc4
 800527c:	0802add4 	.word	0x0802add4

08005280 <isKeyValid>:

bool isKeyValid(uint8_t data[], char *sensormodel, char *sensortype) {
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af02      	add	r7, sp, #8
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  if ((data[0] > 66) && (data[0] != 0xFF)) {
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b42      	cmp	r3, #66	@ 0x42
 8005292:	d905      	bls.n	80052a0 <isKeyValid+0x20>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2bff      	cmp	r3, #255	@ 0xff
 800529a:	d001      	beq.n	80052a0 <isKeyValid+0x20>
    return true;
 800529c:	2301      	movs	r3, #1
 800529e:	e015      	b.n	80052cc <isKeyValid+0x4c>
  }
  else {
    uint8ArrayToString(message, data);
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4b0c      	ldr	r3, [pc, #48]	@ (80052d4 <isKeyValid+0x54>)
 80052a4:	0011      	movs	r1, r2
 80052a6:	0018      	movs	r0, r3
 80052a8:	f000 f81a 	bl	80052e0 <uint8ArrayToString>
    data[12] = '\0';
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	330c      	adds	r3, #12
 80052b0:	2200      	movs	r2, #0
 80052b2:	701a      	strb	r2, [r3, #0]
    Error("Error key for %s has no stored key for %s: %s\r\n", sensormodel, sensortype, message);
 80052b4:	68b8      	ldr	r0, [r7, #8]
 80052b6:	4a08      	ldr	r2, [pc, #32]	@ (80052d8 <isKeyValid+0x58>)
 80052b8:	4908      	ldr	r1, [pc, #32]	@ (80052dc <isKeyValid+0x5c>)
 80052ba:	4b06      	ldr	r3, [pc, #24]	@ (80052d4 <isKeyValid+0x54>)
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	0003      	movs	r3, r0
 80052c4:	2001      	movs	r0, #1
 80052c6:	f00e fdf7 	bl	8013eb8 <CreateLine>
    if (usblog && Check_USB_PowerOn()) {
      printf_USB("\r\n");
    }
    printf("\r\n");
*/
    return false;
 80052ca:	2300      	movs	r3, #0
  }
}
 80052cc:	0018      	movs	r0, r3
 80052ce:	46bd      	mov	sp, r7
 80052d0:	b004      	add	sp, #16
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	200005c4 	.word	0x200005c4
 80052d8:	0802ae18 	.word	0x0802ae18
 80052dc:	0802abb8 	.word	0x0802abb8

080052e0 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	e010      	b.n	8005312 <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	001a      	movs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	1898      	adds	r0, r3, r2
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	18d3      	adds	r3, r2, r3
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	001a      	movs	r2, r3
 8005304:	4b07      	ldr	r3, [pc, #28]	@ (8005324 <uint8ArrayToString+0x44>)
 8005306:	0019      	movs	r1, r3
 8005308:	f021 f8f2 	bl	80264f0 <siprintf>
  for (int i = 0; i < 12; i++) {
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3301      	adds	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b0b      	cmp	r3, #11
 8005316:	ddeb      	ble.n	80052f0 <uint8ArrayToString+0x10>
  }
}
 8005318:	46c0      	nop			@ (mov r8, r8)
 800531a:	46c0      	nop			@ (mov r8, r8)
 800531c:	46bd      	mov	sp, r7
 800531e:	b004      	add	sp, #16
 8005320:	bd80      	pop	{r7, pc}
 8005322:	46c0      	nop			@ (mov r8, r8)
 8005324:	0802ae48 	.word	0x0802ae48

08005328 <CreateMailMessage>:

#ifdef USE_MAIL
uint16_t CreateMailMessage(bool *txstat, bool send) {
 8005328:	b590      	push	{r4, r7, lr}
 800532a:	b087      	sub	sp, #28
 800532c:	af02      	add	r7, sp, #8
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	000a      	movs	r2, r1
 8005332:	1cfb      	adds	r3, r7, #3
 8005334:	701a      	strb	r2, [r3, #0]
  static bool status = false;
  static bool retstat = true;
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint8_t SendFromnameConfig[SendFromNameMaxLength];
  static uint8_t SendTonameConfig[SendToNameMaxLength];
  uint16_t lngth = 0;
 8005336:	240e      	movs	r4, #14
 8005338:	193b      	adds	r3, r7, r4
 800533a:	2200      	movs	r2, #0
 800533c:	801a      	strh	r2, [r3, #0]
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800533e:	4b41      	ldr	r3, [pc, #260]	@ (8005444 <CreateMailMessage+0x11c>)
 8005340:	4841      	ldr	r0, [pc, #260]	@ (8005448 <CreateMailMessage+0x120>)
 8005342:	2220      	movs	r2, #32
 8005344:	0019      	movs	r1, r3
 8005346:	f006 ff4d 	bl	800c1e4 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 800534a:	4b40      	ldr	r3, [pc, #256]	@ (800544c <CreateMailMessage+0x124>)
 800534c:	4840      	ldr	r0, [pc, #256]	@ (8005450 <CreateMailMessage+0x128>)
 800534e:	2230      	movs	r2, #48	@ 0x30
 8005350:	0019      	movs	r1, r3
 8005352:	f006 ff47 	bl	800c1e4 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 8005356:	4b3f      	ldr	r3, [pc, #252]	@ (8005454 <CreateMailMessage+0x12c>)
 8005358:	483f      	ldr	r0, [pc, #252]	@ (8005458 <CreateMailMessage+0x130>)
 800535a:	2230      	movs	r2, #48	@ 0x30
 800535c:	0019      	movs	r1, r3
 800535e:	f006 ff41 	bl	800c1e4 <ReadUint8ArrayEEprom>
  sprintf(message, "{\r\n\"sender\": \"%s\",\r\n\"to\": [\r\n\"%s\"\r\n],\r\n\"subject\": \"Battery status\",\r\n", (char*)SendFromnameConfig, (char*)SendTonameConfig);
 8005362:	4b3c      	ldr	r3, [pc, #240]	@ (8005454 <CreateMailMessage+0x12c>)
 8005364:	4a39      	ldr	r2, [pc, #228]	@ (800544c <CreateMailMessage+0x124>)
 8005366:	493d      	ldr	r1, [pc, #244]	@ (800545c <CreateMailMessage+0x134>)
 8005368:	483d      	ldr	r0, [pc, #244]	@ (8005460 <CreateMailMessage+0x138>)
 800536a:	f021 f8c1 	bl	80264f0 <siprintf>
  lngth = strlen(message);
 800536e:	4b3c      	ldr	r3, [pc, #240]	@ (8005460 <CreateMailMessage+0x138>)
 8005370:	0018      	movs	r0, r3
 8005372:	f7fa fefb 	bl	800016c <strlen>
 8005376:	0002      	movs	r2, r0
 8005378:	193b      	adds	r3, r7, r4
 800537a:	801a      	strh	r2, [r3, #0]
  if (send) {
 800537c:	1cfb      	adds	r3, r7, #3
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d019      	beq.n	80053b8 <CreateMailMessage+0x90>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005384:	4b36      	ldr	r3, [pc, #216]	@ (8005460 <CreateMailMessage+0x138>)
 8005386:	0018      	movs	r0, r3
 8005388:	f7fa fef0 	bl	800016c <strlen>
 800538c:	0003      	movs	r3, r0
 800538e:	b29a      	uxth	r2, r3
 8005390:	4b33      	ldr	r3, [pc, #204]	@ (8005460 <CreateMailMessage+0x138>)
 8005392:	0011      	movs	r1, r2
 8005394:	0018      	movs	r0, r3
 8005396:	f7ff fd63 	bl	8004e60 <ESP_Send>
 800539a:	0003      	movs	r3, r0
 800539c:	001a      	movs	r2, r3
 800539e:	4b31      	ldr	r3, [pc, #196]	@ (8005464 <CreateMailMessage+0x13c>)
 80053a0:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80053a2:	4b31      	ldr	r3, [pc, #196]	@ (8005468 <CreateMailMessage+0x140>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	001a      	movs	r2, r3
 80053a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005464 <CreateMailMessage+0x13c>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	4013      	ands	r3, r2
 80053ae:	1e5a      	subs	r2, r3, #1
 80053b0:	4193      	sbcs	r3, r2
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	4b2c      	ldr	r3, [pc, #176]	@ (8005468 <CreateMailMessage+0x140>)
 80053b6:	701a      	strb	r2, [r3, #0]
  }
  sprintf(message, "\"text_body\": \"Battery of device %s is nearly empty. Actual voltage is %.2fV\"\r\n}\r\n", (char*)nameConfig, ReadBatteryVoltage());
 80053b8:	f004 fbe4 	bl	8009b84 <ReadBatteryVoltage>
 80053bc:	1c03      	adds	r3, r0, #0
 80053be:	1c18      	adds	r0, r3, #0
 80053c0:	f7fe fa68 	bl	8003894 <__aeabi_f2d>
 80053c4:	0002      	movs	r2, r0
 80053c6:	000b      	movs	r3, r1
 80053c8:	4c1e      	ldr	r4, [pc, #120]	@ (8005444 <CreateMailMessage+0x11c>)
 80053ca:	4928      	ldr	r1, [pc, #160]	@ (800546c <CreateMailMessage+0x144>)
 80053cc:	4824      	ldr	r0, [pc, #144]	@ (8005460 <CreateMailMessage+0x138>)
 80053ce:	9200      	str	r2, [sp, #0]
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	0022      	movs	r2, r4
 80053d4:	f021 f88c 	bl	80264f0 <siprintf>
  lngth += strlen(message);
 80053d8:	4b21      	ldr	r3, [pc, #132]	@ (8005460 <CreateMailMessage+0x138>)
 80053da:	0018      	movs	r0, r3
 80053dc:	f7fa fec6 	bl	800016c <strlen>
 80053e0:	0003      	movs	r3, r0
 80053e2:	b299      	uxth	r1, r3
 80053e4:	220e      	movs	r2, #14
 80053e6:	18bb      	adds	r3, r7, r2
 80053e8:	18ba      	adds	r2, r7, r2
 80053ea:	8812      	ldrh	r2, [r2, #0]
 80053ec:	188a      	adds	r2, r1, r2
 80053ee:	801a      	strh	r2, [r3, #0]
  if (send) {
 80053f0:	1cfb      	adds	r3, r7, #3
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d019      	beq.n	800542c <CreateMailMessage+0x104>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80053f8:	4b19      	ldr	r3, [pc, #100]	@ (8005460 <CreateMailMessage+0x138>)
 80053fa:	0018      	movs	r0, r3
 80053fc:	f7fa feb6 	bl	800016c <strlen>
 8005400:	0003      	movs	r3, r0
 8005402:	b29a      	uxth	r2, r3
 8005404:	4b16      	ldr	r3, [pc, #88]	@ (8005460 <CreateMailMessage+0x138>)
 8005406:	0011      	movs	r1, r2
 8005408:	0018      	movs	r0, r3
 800540a:	f7ff fd29 	bl	8004e60 <ESP_Send>
 800540e:	0003      	movs	r3, r0
 8005410:	001a      	movs	r2, r3
 8005412:	4b14      	ldr	r3, [pc, #80]	@ (8005464 <CreateMailMessage+0x13c>)
 8005414:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005416:	4b14      	ldr	r3, [pc, #80]	@ (8005468 <CreateMailMessage+0x140>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	001a      	movs	r2, r3
 800541c:	4b11      	ldr	r3, [pc, #68]	@ (8005464 <CreateMailMessage+0x13c>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	4013      	ands	r3, r2
 8005422:	1e5a      	subs	r2, r3, #1
 8005424:	4193      	sbcs	r3, r2
 8005426:	b2da      	uxtb	r2, r3
 8005428:	4b0f      	ldr	r3, [pc, #60]	@ (8005468 <CreateMailMessage+0x140>)
 800542a:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 800542c:	4b0e      	ldr	r3, [pc, #56]	@ (8005468 <CreateMailMessage+0x140>)
 800542e:	781a      	ldrb	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	701a      	strb	r2, [r3, #0]
  return lngth;
 8005434:	230e      	movs	r3, #14
 8005436:	18fb      	adds	r3, r7, r3
 8005438:	881b      	ldrh	r3, [r3, #0]
}
 800543a:	0018      	movs	r0, r3
 800543c:	46bd      	mov	sp, r7
 800543e:	b005      	add	sp, #20
 8005440:	bd90      	pop	{r4, r7, pc}
 8005442:	46c0      	nop			@ (mov r8, r8)
 8005444:	20000790 	.word	0x20000790
 8005448:	08080090 	.word	0x08080090
 800544c:	200007b0 	.word	0x200007b0
 8005450:	08080260 	.word	0x08080260
 8005454:	200007e0 	.word	0x200007e0
 8005458:	08080290 	.word	0x08080290
 800545c:	0802ae50 	.word	0x0802ae50
 8005460:	200005c4 	.word	0x200005c4
 8005464:	20000810 	.word	0x20000810
 8005468:	20000031 	.word	0x20000031
 800546c:	0802ae98 	.word	0x0802ae98

08005470 <CreateMessage>:
#endif

uint16_t CreateMessage(bool *txstat, bool send) {
 8005470:	b5b0      	push	{r4, r5, r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af02      	add	r7, sp, #8
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	000a      	movs	r2, r1
 800547a:	1cfb      	adds	r3, r7, #3
 800547c:	701a      	strb	r2, [r3, #0]
  static char uptimeBuf[14];
#ifdef LONGDATAGRAM
  static char Buffer[(IdSize*2)+1];
#endif

  if(checkName()){
 800547e:	f7ff fa7d 	bl	800497c <checkName>
 8005482:	1e03      	subs	r3, r0, #0
 8005484:	d00a      	beq.n	800549c <CreateMessage+0x2c>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8005486:	4b03      	ldr	r3, [pc, #12]	@ (8005494 <CreateMessage+0x24>)
 8005488:	4803      	ldr	r0, [pc, #12]	@ (8005498 <CreateMessage+0x28>)
 800548a:	2220      	movs	r2, #32
 800548c:	0019      	movs	r1, r3
 800548e:	f006 fea9 	bl	800c1e4 <ReadUint8ArrayEEprom>
 8005492:	e009      	b.n	80054a8 <CreateMessage+0x38>
 8005494:	20000814 	.word	0x20000814
 8005498:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 800549c:	4beb      	ldr	r3, [pc, #940]	@ (800584c <CreateMessage+0x3dc>)
 800549e:	4aec      	ldr	r2, [pc, #944]	@ (8005850 <CreateMessage+0x3e0>)
 80054a0:	6811      	ldr	r1, [r2, #0]
 80054a2:	6019      	str	r1, [r3, #0]
 80054a4:	7912      	ldrb	r2, [r2, #4]
 80054a6:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 80054a8:	f7ff fa0e 	bl	80048c8 <setCharges>
  uint16_t index = 0;
 80054ac:	250e      	movs	r5, #14
 80054ae:	197b      	adds	r3, r7, r5
 80054b0:	2200      	movs	r2, #0
 80054b2:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 80054b4:	197b      	adds	r3, r7, r5
 80054b6:	881a      	ldrh	r2, [r3, #0]
 80054b8:	4be6      	ldr	r3, [pc, #920]	@ (8005854 <CreateMessage+0x3e4>)
 80054ba:	18d3      	adds	r3, r2, r3
 80054bc:	4ae6      	ldr	r2, [pc, #920]	@ (8005858 <CreateMessage+0x3e8>)
 80054be:	0011      	movs	r1, r2
 80054c0:	0018      	movs	r0, r3
 80054c2:	f021 f815 	bl	80264f0 <siprintf>
#ifdef LONGDATAGRAM
  ReadUint8ArrayEEprom(TempConfigAddr, keybuffer, IdSize);
 80054c6:	4be5      	ldr	r3, [pc, #916]	@ (800585c <CreateMessage+0x3ec>)
 80054c8:	48e5      	ldr	r0, [pc, #916]	@ (8005860 <CreateMessage+0x3f0>)
 80054ca:	220c      	movs	r2, #12
 80054cc:	0019      	movs	r1, r3
 80054ce:	f006 fe89 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80054d2:	4ae2      	ldr	r2, [pc, #904]	@ (800585c <CreateMessage+0x3ec>)
 80054d4:	4be3      	ldr	r3, [pc, #908]	@ (8005864 <CreateMessage+0x3f4>)
 80054d6:	0011      	movs	r1, r2
 80054d8:	0018      	movs	r0, r3
 80054da:	f7ff ff01 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
 80054de:	4be2      	ldr	r3, [pc, #904]	@ (8005868 <CreateMessage+0x3f8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	1c18      	adds	r0, r3, #0
 80054e4:	f7fe f9d6 	bl	8003894 <__aeabi_f2d>
 80054e8:	0002      	movs	r2, r0
 80054ea:	000b      	movs	r3, r1
 80054ec:	4cdd      	ldr	r4, [pc, #884]	@ (8005864 <CreateMessage+0x3f4>)
 80054ee:	49df      	ldr	r1, [pc, #892]	@ (800586c <CreateMessage+0x3fc>)
 80054f0:	48df      	ldr	r0, [pc, #892]	@ (8005870 <CreateMessage+0x400>)
 80054f2:	9200      	str	r2, [sp, #0]
 80054f4:	9301      	str	r3, [sp, #4]
 80054f6:	0022      	movs	r2, r4
 80054f8:	f020 fffa 	bl	80264f0 <siprintf>
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
#endif
index = strlen(message);
 80054fc:	4bd5      	ldr	r3, [pc, #852]	@ (8005854 <CreateMessage+0x3e4>)
 80054fe:	0018      	movs	r0, r3
 8005500:	f7fa fe34 	bl	800016c <strlen>
 8005504:	0002      	movs	r2, r0
 8005506:	197b      	adds	r3, r7, r5
 8005508:	801a      	strh	r2, [r3, #0]
  if (send) {
 800550a:	1cfb      	adds	r3, r7, #3
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d019      	beq.n	8005546 <CreateMessage+0xd6>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005512:	4bd0      	ldr	r3, [pc, #832]	@ (8005854 <CreateMessage+0x3e4>)
 8005514:	0018      	movs	r0, r3
 8005516:	f7fa fe29 	bl	800016c <strlen>
 800551a:	0003      	movs	r3, r0
 800551c:	b29a      	uxth	r2, r3
 800551e:	4bcd      	ldr	r3, [pc, #820]	@ (8005854 <CreateMessage+0x3e4>)
 8005520:	0011      	movs	r1, r2
 8005522:	0018      	movs	r0, r3
 8005524:	f7ff fc9c 	bl	8004e60 <ESP_Send>
 8005528:	0003      	movs	r3, r0
 800552a:	001a      	movs	r2, r3
 800552c:	4bd1      	ldr	r3, [pc, #836]	@ (8005874 <CreateMessage+0x404>)
 800552e:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005530:	4bd1      	ldr	r3, [pc, #836]	@ (8005878 <CreateMessage+0x408>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	001a      	movs	r2, r3
 8005536:	4bcf      	ldr	r3, [pc, #828]	@ (8005874 <CreateMessage+0x404>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	4013      	ands	r3, r2
 800553c:	1e5a      	subs	r2, r3, #1
 800553e:	4193      	sbcs	r3, r2
 8005540:	b2da      	uxtb	r2, r3
 8005542:	4bcd      	ldr	r3, [pc, #820]	@ (8005878 <CreateMessage+0x408>)
 8005544:	701a      	strb	r2, [r3, #0]
  }
  ReadUint8ArrayEEprom(HumidConfigAddr, keybuffer, IdSize);
 8005546:	4bc5      	ldr	r3, [pc, #788]	@ (800585c <CreateMessage+0x3ec>)
 8005548:	48cc      	ldr	r0, [pc, #816]	@ (800587c <CreateMessage+0x40c>)
 800554a:	220c      	movs	r2, #12
 800554c:	0019      	movs	r1, r3
 800554e:	f006 fe49 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005552:	4ac2      	ldr	r2, [pc, #776]	@ (800585c <CreateMessage+0x3ec>)
 8005554:	4bc3      	ldr	r3, [pc, #780]	@ (8005864 <CreateMessage+0x3f4>)
 8005556:	0011      	movs	r1, r2
 8005558:	0018      	movs	r0, r3
 800555a:	f7ff fec1 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
 800555e:	4bc2      	ldr	r3, [pc, #776]	@ (8005868 <CreateMessage+0x3f8>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	1c18      	adds	r0, r3, #0
 8005564:	f7fe f996 	bl	8003894 <__aeabi_f2d>
 8005568:	0002      	movs	r2, r0
 800556a:	000b      	movs	r3, r1
 800556c:	4cbd      	ldr	r4, [pc, #756]	@ (8005864 <CreateMessage+0x3f4>)
 800556e:	49c4      	ldr	r1, [pc, #784]	@ (8005880 <CreateMessage+0x410>)
 8005570:	48b8      	ldr	r0, [pc, #736]	@ (8005854 <CreateMessage+0x3e4>)
 8005572:	9200      	str	r2, [sp, #0]
 8005574:	9301      	str	r3, [sp, #4]
 8005576:	0022      	movs	r2, r4
 8005578:	f020 ffba 	bl	80264f0 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
#endif
  index += strlen(message);
 800557c:	4bb5      	ldr	r3, [pc, #724]	@ (8005854 <CreateMessage+0x3e4>)
 800557e:	0018      	movs	r0, r3
 8005580:	f7fa fdf4 	bl	800016c <strlen>
 8005584:	0003      	movs	r3, r0
 8005586:	b299      	uxth	r1, r3
 8005588:	220e      	movs	r2, #14
 800558a:	18bb      	adds	r3, r7, r2
 800558c:	18ba      	adds	r2, r7, r2
 800558e:	8812      	ldrh	r2, [r2, #0]
 8005590:	188a      	adds	r2, r1, r2
 8005592:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005594:	1cfb      	adds	r3, r7, #3
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d019      	beq.n	80055d0 <CreateMessage+0x160>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800559c:	4bad      	ldr	r3, [pc, #692]	@ (8005854 <CreateMessage+0x3e4>)
 800559e:	0018      	movs	r0, r3
 80055a0:	f7fa fde4 	bl	800016c <strlen>
 80055a4:	0003      	movs	r3, r0
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	4baa      	ldr	r3, [pc, #680]	@ (8005854 <CreateMessage+0x3e4>)
 80055aa:	0011      	movs	r1, r2
 80055ac:	0018      	movs	r0, r3
 80055ae:	f7ff fc57 	bl	8004e60 <ESP_Send>
 80055b2:	0003      	movs	r3, r0
 80055b4:	001a      	movs	r2, r3
 80055b6:	4baf      	ldr	r3, [pc, #700]	@ (8005874 <CreateMessage+0x404>)
 80055b8:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80055ba:	4baf      	ldr	r3, [pc, #700]	@ (8005878 <CreateMessage+0x408>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	001a      	movs	r2, r3
 80055c0:	4bac      	ldr	r3, [pc, #688]	@ (8005874 <CreateMessage+0x404>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	4013      	ands	r3, r2
 80055c6:	1e5a      	subs	r2, r3, #1
 80055c8:	4193      	sbcs	r3, r2
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	4baa      	ldr	r3, [pc, #680]	@ (8005878 <CreateMessage+0x408>)
 80055ce:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(VocIndexConfigAddr, keybuffer, IdSize);
 80055d0:	4ba2      	ldr	r3, [pc, #648]	@ (800585c <CreateMessage+0x3ec>)
 80055d2:	48ac      	ldr	r0, [pc, #688]	@ (8005884 <CreateMessage+0x414>)
 80055d4:	220c      	movs	r2, #12
 80055d6:	0019      	movs	r1, r3
 80055d8:	f006 fe04 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80055dc:	4a9f      	ldr	r2, [pc, #636]	@ (800585c <CreateMessage+0x3ec>)
 80055de:	4ba1      	ldr	r3, [pc, #644]	@ (8005864 <CreateMessage+0x3f4>)
 80055e0:	0011      	movs	r1, r2
 80055e2:	0018      	movs	r0, r3
 80055e4:	f7ff fe7c 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndex);
 80055e8:	4b9f      	ldr	r3, [pc, #636]	@ (8005868 <CreateMessage+0x3f8>)
 80055ea:	2248      	movs	r2, #72	@ 0x48
 80055ec:	5a9b      	ldrh	r3, [r3, r2]
 80055ee:	4a9d      	ldr	r2, [pc, #628]	@ (8005864 <CreateMessage+0x3f4>)
 80055f0:	49a5      	ldr	r1, [pc, #660]	@ (8005888 <CreateMessage+0x418>)
 80055f2:	4898      	ldr	r0, [pc, #608]	@ (8005854 <CreateMessage+0x3e4>)
 80055f4:	f020 ff7c 	bl	80264f0 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
#endif
  index += strlen(message);
 80055f8:	4b96      	ldr	r3, [pc, #600]	@ (8005854 <CreateMessage+0x3e4>)
 80055fa:	0018      	movs	r0, r3
 80055fc:	f7fa fdb6 	bl	800016c <strlen>
 8005600:	0003      	movs	r3, r0
 8005602:	b299      	uxth	r1, r3
 8005604:	220e      	movs	r2, #14
 8005606:	18bb      	adds	r3, r7, r2
 8005608:	18ba      	adds	r2, r7, r2
 800560a:	8812      	ldrh	r2, [r2, #0]
 800560c:	188a      	adds	r2, r1, r2
 800560e:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005610:	1cfb      	adds	r3, r7, #3
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d019      	beq.n	800564c <CreateMessage+0x1dc>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005618:	4b8e      	ldr	r3, [pc, #568]	@ (8005854 <CreateMessage+0x3e4>)
 800561a:	0018      	movs	r0, r3
 800561c:	f7fa fda6 	bl	800016c <strlen>
 8005620:	0003      	movs	r3, r0
 8005622:	b29a      	uxth	r2, r3
 8005624:	4b8b      	ldr	r3, [pc, #556]	@ (8005854 <CreateMessage+0x3e4>)
 8005626:	0011      	movs	r1, r2
 8005628:	0018      	movs	r0, r3
 800562a:	f7ff fc19 	bl	8004e60 <ESP_Send>
 800562e:	0003      	movs	r3, r0
 8005630:	001a      	movs	r2, r3
 8005632:	4b90      	ldr	r3, [pc, #576]	@ (8005874 <CreateMessage+0x404>)
 8005634:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005636:	4b90      	ldr	r3, [pc, #576]	@ (8005878 <CreateMessage+0x408>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	001a      	movs	r2, r3
 800563c:	4b8d      	ldr	r3, [pc, #564]	@ (8005874 <CreateMessage+0x404>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	4013      	ands	r3, r2
 8005642:	1e5a      	subs	r2, r3, #1
 8005644:	4193      	sbcs	r3, r2
 8005646:	b2da      	uxtb	r2, r3
 8005648:	4b8b      	ldr	r3, [pc, #556]	@ (8005878 <CreateMessage+0x408>)
 800564a:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, keybuffer, IdSize);
 800564c:	4b83      	ldr	r3, [pc, #524]	@ (800585c <CreateMessage+0x3ec>)
 800564e:	488f      	ldr	r0, [pc, #572]	@ (800588c <CreateMessage+0x41c>)
 8005650:	220c      	movs	r2, #12
 8005652:	0019      	movs	r1, r3
 8005654:	f006 fdc6 	bl	800c1e4 <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "ChargeStat", "true/false")) {
 8005658:	4a8d      	ldr	r2, [pc, #564]	@ (8005890 <CreateMessage+0x420>)
 800565a:	498e      	ldr	r1, [pc, #568]	@ (8005894 <CreateMessage+0x424>)
 800565c:	4b7f      	ldr	r3, [pc, #508]	@ (800585c <CreateMessage+0x3ec>)
 800565e:	0018      	movs	r0, r3
 8005660:	f7ff fe0e 	bl	8005280 <isKeyValid>
 8005664:	1e03      	subs	r3, r0, #0
 8005666:	d036      	beq.n	80056d6 <CreateMessage+0x266>
    uint8ArrayToString(Buffer, keybuffer);
 8005668:	4a7c      	ldr	r2, [pc, #496]	@ (800585c <CreateMessage+0x3ec>)
 800566a:	4b7e      	ldr	r3, [pc, #504]	@ (8005864 <CreateMessage+0x3f4>)
 800566c:	0011      	movs	r1, r2
 800566e:	0018      	movs	r0, r3
 8005670:	f7ff fe36 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":\"%d\"}", Buffer, batteryChargeMode);
 8005674:	4b88      	ldr	r3, [pc, #544]	@ (8005898 <CreateMessage+0x428>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	4a7a      	ldr	r2, [pc, #488]	@ (8005864 <CreateMessage+0x3f4>)
 800567a:	4988      	ldr	r1, [pc, #544]	@ (800589c <CreateMessage+0x42c>)
 800567c:	4875      	ldr	r0, [pc, #468]	@ (8005854 <CreateMessage+0x3e4>)
 800567e:	f020 ff37 	bl	80264f0 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"charging\", \"sensor\": \"%s\", \"value\":\"%d\"}", Buffer, batteryChargeMode);
#endif
    index += strlen(message);
 8005682:	4b74      	ldr	r3, [pc, #464]	@ (8005854 <CreateMessage+0x3e4>)
 8005684:	0018      	movs	r0, r3
 8005686:	f7fa fd71 	bl	800016c <strlen>
 800568a:	0003      	movs	r3, r0
 800568c:	b299      	uxth	r1, r3
 800568e:	220e      	movs	r2, #14
 8005690:	18bb      	adds	r3, r7, r2
 8005692:	18ba      	adds	r2, r7, r2
 8005694:	8812      	ldrh	r2, [r2, #0]
 8005696:	188a      	adds	r2, r1, r2
 8005698:	801a      	strh	r2, [r3, #0]
    if (send) {
 800569a:	1cfb      	adds	r3, r7, #3
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d019      	beq.n	80056d6 <CreateMessage+0x266>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80056a2:	4b6c      	ldr	r3, [pc, #432]	@ (8005854 <CreateMessage+0x3e4>)
 80056a4:	0018      	movs	r0, r3
 80056a6:	f7fa fd61 	bl	800016c <strlen>
 80056aa:	0003      	movs	r3, r0
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	4b69      	ldr	r3, [pc, #420]	@ (8005854 <CreateMessage+0x3e4>)
 80056b0:	0011      	movs	r1, r2
 80056b2:	0018      	movs	r0, r3
 80056b4:	f7ff fbd4 	bl	8004e60 <ESP_Send>
 80056b8:	0003      	movs	r3, r0
 80056ba:	001a      	movs	r2, r3
 80056bc:	4b6d      	ldr	r3, [pc, #436]	@ (8005874 <CreateMessage+0x404>)
 80056be:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80056c0:	4b6d      	ldr	r3, [pc, #436]	@ (8005878 <CreateMessage+0x408>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	001a      	movs	r2, r3
 80056c6:	4b6b      	ldr	r3, [pc, #428]	@ (8005874 <CreateMessage+0x404>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	4013      	ands	r3, r2
 80056cc:	1e5a      	subs	r2, r3, #1
 80056ce:	4193      	sbcs	r3, r2
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	4b69      	ldr	r3, [pc, #420]	@ (8005878 <CreateMessage+0x408>)
 80056d4:	701a      	strb	r2, [r3, #0]
    }
  }

  ReadUint8ArrayEEprom(UptimeConfigAddr, keybuffer, IdSize);
 80056d6:	4b61      	ldr	r3, [pc, #388]	@ (800585c <CreateMessage+0x3ec>)
 80056d8:	4871      	ldr	r0, [pc, #452]	@ (80058a0 <CreateMessage+0x430>)
 80056da:	220c      	movs	r2, #12
 80056dc:	0019      	movs	r1, r3
 80056de:	f006 fd81 	bl	800c1e4 <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "Uptime", "dhhmm")) {
 80056e2:	4a70      	ldr	r2, [pc, #448]	@ (80058a4 <CreateMessage+0x434>)
 80056e4:	4970      	ldr	r1, [pc, #448]	@ (80058a8 <CreateMessage+0x438>)
 80056e6:	4b5d      	ldr	r3, [pc, #372]	@ (800585c <CreateMessage+0x3ec>)
 80056e8:	0018      	movs	r0, r3
 80056ea:	f7ff fdc9 	bl	8005280 <isKeyValid>
 80056ee:	1e03      	subs	r3, r0, #0
 80056f0:	d039      	beq.n	8005766 <CreateMessage+0x2f6>
    uint8ArrayToString(Buffer, keybuffer);
 80056f2:	4a5a      	ldr	r2, [pc, #360]	@ (800585c <CreateMessage+0x3ec>)
 80056f4:	4b5b      	ldr	r3, [pc, #364]	@ (8005864 <CreateMessage+0x3f4>)
 80056f6:	0011      	movs	r1, r2
 80056f8:	0018      	movs	r0, r3
 80056fa:	f7ff fdf1 	bl	80052e0 <uint8ArrayToString>
    getUptime(uptimeBuf);
 80056fe:	4b6b      	ldr	r3, [pc, #428]	@ (80058ac <CreateMessage+0x43c>)
 8005700:	0018      	movs	r0, r3
 8005702:	f004 fb91 	bl	8009e28 <getUptime>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":\"%s\"}", Buffer, uptimeBuf);
 8005706:	4b69      	ldr	r3, [pc, #420]	@ (80058ac <CreateMessage+0x43c>)
 8005708:	4a56      	ldr	r2, [pc, #344]	@ (8005864 <CreateMessage+0x3f4>)
 800570a:	4969      	ldr	r1, [pc, #420]	@ (80058b0 <CreateMessage+0x440>)
 800570c:	4851      	ldr	r0, [pc, #324]	@ (8005854 <CreateMessage+0x3e4>)
 800570e:	f020 feef 	bl	80264f0 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"uptime\", \"sensor\": \"%s\", \"value\":\"%s\"}", Buffer, uptimeBuf);
#endif
    index += strlen(message);
 8005712:	4b50      	ldr	r3, [pc, #320]	@ (8005854 <CreateMessage+0x3e4>)
 8005714:	0018      	movs	r0, r3
 8005716:	f7fa fd29 	bl	800016c <strlen>
 800571a:	0003      	movs	r3, r0
 800571c:	b299      	uxth	r1, r3
 800571e:	220e      	movs	r2, #14
 8005720:	18bb      	adds	r3, r7, r2
 8005722:	18ba      	adds	r2, r7, r2
 8005724:	8812      	ldrh	r2, [r2, #0]
 8005726:	188a      	adds	r2, r1, r2
 8005728:	801a      	strh	r2, [r3, #0]
    if (send) {
 800572a:	1cfb      	adds	r3, r7, #3
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d019      	beq.n	8005766 <CreateMessage+0x2f6>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8005732:	4b48      	ldr	r3, [pc, #288]	@ (8005854 <CreateMessage+0x3e4>)
 8005734:	0018      	movs	r0, r3
 8005736:	f7fa fd19 	bl	800016c <strlen>
 800573a:	0003      	movs	r3, r0
 800573c:	b29a      	uxth	r2, r3
 800573e:	4b45      	ldr	r3, [pc, #276]	@ (8005854 <CreateMessage+0x3e4>)
 8005740:	0011      	movs	r1, r2
 8005742:	0018      	movs	r0, r3
 8005744:	f7ff fb8c 	bl	8004e60 <ESP_Send>
 8005748:	0003      	movs	r3, r0
 800574a:	001a      	movs	r2, r3
 800574c:	4b49      	ldr	r3, [pc, #292]	@ (8005874 <CreateMessage+0x404>)
 800574e:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8005750:	4b49      	ldr	r3, [pc, #292]	@ (8005878 <CreateMessage+0x408>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	001a      	movs	r2, r3
 8005756:	4b47      	ldr	r3, [pc, #284]	@ (8005874 <CreateMessage+0x404>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	4013      	ands	r3, r2
 800575c:	1e5a      	subs	r2, r3, #1
 800575e:	4193      	sbcs	r3, r2
 8005760:	b2da      	uxtb	r2, r3
 8005762:	4b45      	ldr	r3, [pc, #276]	@ (8005878 <CreateMessage+0x408>)
 8005764:	701a      	strb	r2, [r3, #0]
    }
  }

  if (IsBMP280SensorPresent()) {
 8005766:	f007 ff05 	bl	800d574 <IsBMP280SensorPresent>
 800576a:	1e03      	subs	r3, r0, #0
 800576c:	d100      	bne.n	8005770 <CreateMessage+0x300>
 800576e:	e0e1      	b.n	8005934 <CreateMessage+0x4c4>
    ReadUint8ArrayEEprom(hPaConfigAddr, keybuffer, IdSize);
 8005770:	4b3a      	ldr	r3, [pc, #232]	@ (800585c <CreateMessage+0x3ec>)
 8005772:	4850      	ldr	r0, [pc, #320]	@ (80058b4 <CreateMessage+0x444>)
 8005774:	220c      	movs	r2, #12
 8005776:	0019      	movs	r1, r3
 8005778:	f006 fd34 	bl	800c1e4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "hPa") && MeasVal.BMP280_airpressure) {
 800577c:	4a4e      	ldr	r2, [pc, #312]	@ (80058b8 <CreateMessage+0x448>)
 800577e:	494f      	ldr	r1, [pc, #316]	@ (80058bc <CreateMessage+0x44c>)
 8005780:	4b36      	ldr	r3, [pc, #216]	@ (800585c <CreateMessage+0x3ec>)
 8005782:	0018      	movs	r0, r3
 8005784:	f7ff fd7c 	bl	8005280 <isKeyValid>
 8005788:	1e03      	subs	r3, r0, #0
 800578a:	d046      	beq.n	800581a <CreateMessage+0x3aa>
 800578c:	4b36      	ldr	r3, [pc, #216]	@ (8005868 <CreateMessage+0x3f8>)
 800578e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005790:	2100      	movs	r1, #0
 8005792:	1c18      	adds	r0, r3, #0
 8005794:	f7fa fec6 	bl	8000524 <__aeabi_fcmpeq>
 8005798:	1e03      	subs	r3, r0, #0
 800579a:	d13e      	bne.n	800581a <CreateMessage+0x3aa>
      uint8ArrayToString(Buffer, keybuffer);
 800579c:	4a2f      	ldr	r2, [pc, #188]	@ (800585c <CreateMessage+0x3ec>)
 800579e:	4b31      	ldr	r3, [pc, #196]	@ (8005864 <CreateMessage+0x3f4>)
 80057a0:	0011      	movs	r1, r2
 80057a2:	0018      	movs	r0, r3
 80057a4:	f7ff fd9c 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_airpressure);
 80057a8:	4b2f      	ldr	r3, [pc, #188]	@ (8005868 <CreateMessage+0x3f8>)
 80057aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ac:	1c18      	adds	r0, r3, #0
 80057ae:	f7fe f871 	bl	8003894 <__aeabi_f2d>
 80057b2:	0002      	movs	r2, r0
 80057b4:	000b      	movs	r3, r1
 80057b6:	4c2b      	ldr	r4, [pc, #172]	@ (8005864 <CreateMessage+0x3f4>)
 80057b8:	4931      	ldr	r1, [pc, #196]	@ (8005880 <CreateMessage+0x410>)
 80057ba:	4826      	ldr	r0, [pc, #152]	@ (8005854 <CreateMessage+0x3e4>)
 80057bc:	9200      	str	r2, [sp, #0]
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	0022      	movs	r2, r4
 80057c2:	f020 fe95 	bl	80264f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"BMP280 hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_airpressure);
#endif
      index += strlen(message);
 80057c6:	4b23      	ldr	r3, [pc, #140]	@ (8005854 <CreateMessage+0x3e4>)
 80057c8:	0018      	movs	r0, r3
 80057ca:	f7fa fccf 	bl	800016c <strlen>
 80057ce:	0003      	movs	r3, r0
 80057d0:	b299      	uxth	r1, r3
 80057d2:	220e      	movs	r2, #14
 80057d4:	18bb      	adds	r3, r7, r2
 80057d6:	18ba      	adds	r2, r7, r2
 80057d8:	8812      	ldrh	r2, [r2, #0]
 80057da:	188a      	adds	r2, r1, r2
 80057dc:	801a      	strh	r2, [r3, #0]
      if (send) {
 80057de:	1cfb      	adds	r3, r7, #3
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d019      	beq.n	800581a <CreateMessage+0x3aa>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80057e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005854 <CreateMessage+0x3e4>)
 80057e8:	0018      	movs	r0, r3
 80057ea:	f7fa fcbf 	bl	800016c <strlen>
 80057ee:	0003      	movs	r3, r0
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	4b18      	ldr	r3, [pc, #96]	@ (8005854 <CreateMessage+0x3e4>)
 80057f4:	0011      	movs	r1, r2
 80057f6:	0018      	movs	r0, r3
 80057f8:	f7ff fb32 	bl	8004e60 <ESP_Send>
 80057fc:	0003      	movs	r3, r0
 80057fe:	001a      	movs	r2, r3
 8005800:	4b1c      	ldr	r3, [pc, #112]	@ (8005874 <CreateMessage+0x404>)
 8005802:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005804:	4b1c      	ldr	r3, [pc, #112]	@ (8005878 <CreateMessage+0x408>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	001a      	movs	r2, r3
 800580a:	4b1a      	ldr	r3, [pc, #104]	@ (8005874 <CreateMessage+0x404>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	4013      	ands	r3, r2
 8005810:	1e5a      	subs	r2, r3, #1
 8005812:	4193      	sbcs	r3, r2
 8005814:	b2da      	uxtb	r2, r3
 8005816:	4b18      	ldr	r3, [pc, #96]	@ (8005878 <CreateMessage+0x408>)
 8005818:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(BMPTempConfigAddr, keybuffer, IdSize);
 800581a:	4b10      	ldr	r3, [pc, #64]	@ (800585c <CreateMessage+0x3ec>)
 800581c:	4828      	ldr	r0, [pc, #160]	@ (80058c0 <CreateMessage+0x450>)
 800581e:	220c      	movs	r2, #12
 8005820:	0019      	movs	r1, r3
 8005822:	f006 fcdf 	bl	800c1e4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "Temperature")) {
 8005826:	4a27      	ldr	r2, [pc, #156]	@ (80058c4 <CreateMessage+0x454>)
 8005828:	4924      	ldr	r1, [pc, #144]	@ (80058bc <CreateMessage+0x44c>)
 800582a:	4b0c      	ldr	r3, [pc, #48]	@ (800585c <CreateMessage+0x3ec>)
 800582c:	0018      	movs	r0, r3
 800582e:	f7ff fd27 	bl	8005280 <isKeyValid>
 8005832:	1e03      	subs	r3, r0, #0
 8005834:	d100      	bne.n	8005838 <CreateMessage+0x3c8>
 8005836:	e07d      	b.n	8005934 <CreateMessage+0x4c4>
      uint8ArrayToString(Buffer, keybuffer);
 8005838:	4a08      	ldr	r2, [pc, #32]	@ (800585c <CreateMessage+0x3ec>)
 800583a:	4b0a      	ldr	r3, [pc, #40]	@ (8005864 <CreateMessage+0x3f4>)
 800583c:	0011      	movs	r1, r2
 800583e:	0018      	movs	r0, r3
 8005840:	f7ff fd4e 	bl	80052e0 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_temperature);
 8005844:	4b08      	ldr	r3, [pc, #32]	@ (8005868 <CreateMessage+0x3f8>)
 8005846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005848:	1c18      	adds	r0, r3, #0
 800584a:	e03d      	b.n	80058c8 <CreateMessage+0x458>
 800584c:	20000814 	.word	0x20000814
 8005850:	0802e150 	.word	0x0802e150
 8005854:	200005c4 	.word	0x200005c4
 8005858:	0802aeec 	.word	0x0802aeec
 800585c:	20000834 	.word	0x20000834
 8005860:	0808000c 	.word	0x0808000c
 8005864:	20000840 	.word	0x20000840
 8005868:	20000704 	.word	0x20000704
 800586c:	0802aef0 	.word	0x0802aef0
 8005870:	200005c5 	.word	0x200005c5
 8005874:	20000859 	.word	0x20000859
 8005878:	20000032 	.word	0x20000032
 800587c:	08080018 	.word	0x08080018
 8005880:	0802af10 	.word	0x0802af10
 8005884:	08080030 	.word	0x08080030
 8005888:	0802af30 	.word	0x0802af30
 800588c:	08080084 	.word	0x08080084
 8005890:	0802af50 	.word	0x0802af50
 8005894:	0802af5c 	.word	0x0802af5c
 8005898:	2000215c 	.word	0x2000215c
 800589c:	0802af68 	.word	0x0802af68
 80058a0:	080801a0 	.word	0x080801a0
 80058a4:	0802af88 	.word	0x0802af88
 80058a8:	0802af90 	.word	0x0802af90
 80058ac:	2000085c 	.word	0x2000085c
 80058b0:	0802af98 	.word	0x0802af98
 80058b4:	08080188 	.word	0x08080188
 80058b8:	0802afb8 	.word	0x0802afb8
 80058bc:	0802afbc 	.word	0x0802afbc
 80058c0:	080800e0 	.word	0x080800e0
 80058c4:	0802afc4 	.word	0x0802afc4
 80058c8:	f7fd ffe4 	bl	8003894 <__aeabi_f2d>
 80058cc:	0002      	movs	r2, r0
 80058ce:	000b      	movs	r3, r1
 80058d0:	4ce3      	ldr	r4, [pc, #908]	@ (8005c60 <CreateMessage+0x7f0>)
 80058d2:	49e4      	ldr	r1, [pc, #912]	@ (8005c64 <CreateMessage+0x7f4>)
 80058d4:	48e4      	ldr	r0, [pc, #912]	@ (8005c68 <CreateMessage+0x7f8>)
 80058d6:	9200      	str	r2, [sp, #0]
 80058d8:	9301      	str	r3, [sp, #4]
 80058da:	0022      	movs	r2, r4
 80058dc:	f020 fe08 	bl	80264f0 <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"BMP280 Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_temperature);
  #endif
      index += strlen(message);
 80058e0:	4be1      	ldr	r3, [pc, #900]	@ (8005c68 <CreateMessage+0x7f8>)
 80058e2:	0018      	movs	r0, r3
 80058e4:	f7fa fc42 	bl	800016c <strlen>
 80058e8:	0003      	movs	r3, r0
 80058ea:	b299      	uxth	r1, r3
 80058ec:	220e      	movs	r2, #14
 80058ee:	18bb      	adds	r3, r7, r2
 80058f0:	18ba      	adds	r2, r7, r2
 80058f2:	8812      	ldrh	r2, [r2, #0]
 80058f4:	188a      	adds	r2, r1, r2
 80058f6:	801a      	strh	r2, [r3, #0]
      if (send) {
 80058f8:	1cfb      	adds	r3, r7, #3
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d019      	beq.n	8005934 <CreateMessage+0x4c4>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005900:	4bd9      	ldr	r3, [pc, #868]	@ (8005c68 <CreateMessage+0x7f8>)
 8005902:	0018      	movs	r0, r3
 8005904:	f7fa fc32 	bl	800016c <strlen>
 8005908:	0003      	movs	r3, r0
 800590a:	b29a      	uxth	r2, r3
 800590c:	4bd6      	ldr	r3, [pc, #856]	@ (8005c68 <CreateMessage+0x7f8>)
 800590e:	0011      	movs	r1, r2
 8005910:	0018      	movs	r0, r3
 8005912:	f7ff faa5 	bl	8004e60 <ESP_Send>
 8005916:	0003      	movs	r3, r0
 8005918:	001a      	movs	r2, r3
 800591a:	4bd4      	ldr	r3, [pc, #848]	@ (8005c6c <CreateMessage+0x7fc>)
 800591c:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800591e:	4bd4      	ldr	r3, [pc, #848]	@ (8005c70 <CreateMessage+0x800>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	001a      	movs	r2, r3
 8005924:	4bd1      	ldr	r3, [pc, #836]	@ (8005c6c <CreateMessage+0x7fc>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	4013      	ands	r3, r2
 800592a:	1e5a      	subs	r2, r3, #1
 800592c:	4193      	sbcs	r3, r2
 800592e:	b2da      	uxtb	r2, r3
 8005930:	4bcf      	ldr	r3, [pc, #828]	@ (8005c70 <CreateMessage+0x800>)
 8005932:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(dBAConfigAddr, keybuffer, IdSize);
 8005934:	4bcf      	ldr	r3, [pc, #828]	@ (8005c74 <CreateMessage+0x804>)
 8005936:	48d0      	ldr	r0, [pc, #832]	@ (8005c78 <CreateMessage+0x808>)
 8005938:	220c      	movs	r2, #12
 800593a:	0019      	movs	r1, r3
 800593c:	f006 fc52 	bl	800c1e4 <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "MIC", "dBA")) {
 8005940:	4ace      	ldr	r2, [pc, #824]	@ (8005c7c <CreateMessage+0x80c>)
 8005942:	49cf      	ldr	r1, [pc, #828]	@ (8005c80 <CreateMessage+0x810>)
 8005944:	4bcb      	ldr	r3, [pc, #812]	@ (8005c74 <CreateMessage+0x804>)
 8005946:	0018      	movs	r0, r3
 8005948:	f7ff fc9a 	bl	8005280 <isKeyValid>
 800594c:	1e03      	subs	r3, r0, #0
 800594e:	d03e      	beq.n	80059ce <CreateMessage+0x55e>
    uint8ArrayToString(Buffer, keybuffer);
 8005950:	4ac8      	ldr	r2, [pc, #800]	@ (8005c74 <CreateMessage+0x804>)
 8005952:	4bc3      	ldr	r3, [pc, #780]	@ (8005c60 <CreateMessage+0x7f0>)
 8005954:	0011      	movs	r1, r2
 8005956:	0018      	movs	r0, r3
 8005958:	f7ff fcc2 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
 800595c:	4bc9      	ldr	r3, [pc, #804]	@ (8005c84 <CreateMessage+0x814>)
 800595e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005960:	1c18      	adds	r0, r3, #0
 8005962:	f7fd ff97 	bl	8003894 <__aeabi_f2d>
 8005966:	0002      	movs	r2, r0
 8005968:	000b      	movs	r3, r1
 800596a:	4cbd      	ldr	r4, [pc, #756]	@ (8005c60 <CreateMessage+0x7f0>)
 800596c:	49bd      	ldr	r1, [pc, #756]	@ (8005c64 <CreateMessage+0x7f4>)
 800596e:	48be      	ldr	r0, [pc, #760]	@ (8005c68 <CreateMessage+0x7f8>)
 8005970:	9200      	str	r2, [sp, #0]
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	0022      	movs	r2, r4
 8005976:	f020 fdbb 	bl	80264f0 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
#endif
    index += strlen(message);
 800597a:	4bbb      	ldr	r3, [pc, #748]	@ (8005c68 <CreateMessage+0x7f8>)
 800597c:	0018      	movs	r0, r3
 800597e:	f7fa fbf5 	bl	800016c <strlen>
 8005982:	0003      	movs	r3, r0
 8005984:	b299      	uxth	r1, r3
 8005986:	220e      	movs	r2, #14
 8005988:	18bb      	adds	r3, r7, r2
 800598a:	18ba      	adds	r2, r7, r2
 800598c:	8812      	ldrh	r2, [r2, #0]
 800598e:	188a      	adds	r2, r1, r2
 8005990:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005992:	1cfb      	adds	r3, r7, #3
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d019      	beq.n	80059ce <CreateMessage+0x55e>
      status = ESP_Send((uint8_t*)message, strlen(message));
 800599a:	4bb3      	ldr	r3, [pc, #716]	@ (8005c68 <CreateMessage+0x7f8>)
 800599c:	0018      	movs	r0, r3
 800599e:	f7fa fbe5 	bl	800016c <strlen>
 80059a2:	0003      	movs	r3, r0
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	4bb0      	ldr	r3, [pc, #704]	@ (8005c68 <CreateMessage+0x7f8>)
 80059a8:	0011      	movs	r1, r2
 80059aa:	0018      	movs	r0, r3
 80059ac:	f7ff fa58 	bl	8004e60 <ESP_Send>
 80059b0:	0003      	movs	r3, r0
 80059b2:	001a      	movs	r2, r3
 80059b4:	4bad      	ldr	r3, [pc, #692]	@ (8005c6c <CreateMessage+0x7fc>)
 80059b6:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80059b8:	4bad      	ldr	r3, [pc, #692]	@ (8005c70 <CreateMessage+0x800>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	001a      	movs	r2, r3
 80059be:	4bab      	ldr	r3, [pc, #684]	@ (8005c6c <CreateMessage+0x7fc>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	4013      	ands	r3, r2
 80059c4:	1e5a      	subs	r2, r3, #1
 80059c6:	4193      	sbcs	r3, r2
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	4ba9      	ldr	r3, [pc, #676]	@ (8005c70 <CreateMessage+0x800>)
 80059cc:	701a      	strb	r2, [r3, #0]
    }
  }

  ReadUint8ArrayEEprom(SolVoltConfigAddr, keybuffer, IdSize);
 80059ce:	4ba9      	ldr	r3, [pc, #676]	@ (8005c74 <CreateMessage+0x804>)
 80059d0:	48ad      	ldr	r0, [pc, #692]	@ (8005c88 <CreateMessage+0x818>)
 80059d2:	220c      	movs	r2, #12
 80059d4:	0019      	movs	r1, r3
 80059d6:	f006 fc05 	bl	800c1e4 <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "Solar", "Volt")) {
 80059da:	4aac      	ldr	r2, [pc, #688]	@ (8005c8c <CreateMessage+0x81c>)
 80059dc:	49ac      	ldr	r1, [pc, #688]	@ (8005c90 <CreateMessage+0x820>)
 80059de:	4ba5      	ldr	r3, [pc, #660]	@ (8005c74 <CreateMessage+0x804>)
 80059e0:	0018      	movs	r0, r3
 80059e2:	f7ff fc4d 	bl	8005280 <isKeyValid>
 80059e6:	1e03      	subs	r3, r0, #0
 80059e8:	d03e      	beq.n	8005a68 <CreateMessage+0x5f8>
    uint8ArrayToString(Buffer, keybuffer);
 80059ea:	4aa2      	ldr	r2, [pc, #648]	@ (8005c74 <CreateMessage+0x804>)
 80059ec:	4b9c      	ldr	r3, [pc, #624]	@ (8005c60 <CreateMessage+0x7f0>)
 80059ee:	0011      	movs	r1, r2
 80059f0:	0018      	movs	r0, r3
 80059f2:	f7ff fc75 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
 80059f6:	4ba7      	ldr	r3, [pc, #668]	@ (8005c94 <CreateMessage+0x824>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	1c18      	adds	r0, r3, #0
 80059fc:	f7fd ff4a 	bl	8003894 <__aeabi_f2d>
 8005a00:	0002      	movs	r2, r0
 8005a02:	000b      	movs	r3, r1
 8005a04:	4c96      	ldr	r4, [pc, #600]	@ (8005c60 <CreateMessage+0x7f0>)
 8005a06:	4997      	ldr	r1, [pc, #604]	@ (8005c64 <CreateMessage+0x7f4>)
 8005a08:	4897      	ldr	r0, [pc, #604]	@ (8005c68 <CreateMessage+0x7f8>)
 8005a0a:	9200      	str	r2, [sp, #0]
 8005a0c:	9301      	str	r3, [sp, #4]
 8005a0e:	0022      	movs	r2, r4
 8005a10:	f020 fd6e 	bl	80264f0 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
#endif
    index += strlen(message);
 8005a14:	4b94      	ldr	r3, [pc, #592]	@ (8005c68 <CreateMessage+0x7f8>)
 8005a16:	0018      	movs	r0, r3
 8005a18:	f7fa fba8 	bl	800016c <strlen>
 8005a1c:	0003      	movs	r3, r0
 8005a1e:	b299      	uxth	r1, r3
 8005a20:	220e      	movs	r2, #14
 8005a22:	18bb      	adds	r3, r7, r2
 8005a24:	18ba      	adds	r2, r7, r2
 8005a26:	8812      	ldrh	r2, [r2, #0]
 8005a28:	188a      	adds	r2, r1, r2
 8005a2a:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005a2c:	1cfb      	adds	r3, r7, #3
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d019      	beq.n	8005a68 <CreateMessage+0x5f8>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8005a34:	4b8c      	ldr	r3, [pc, #560]	@ (8005c68 <CreateMessage+0x7f8>)
 8005a36:	0018      	movs	r0, r3
 8005a38:	f7fa fb98 	bl	800016c <strlen>
 8005a3c:	0003      	movs	r3, r0
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	4b89      	ldr	r3, [pc, #548]	@ (8005c68 <CreateMessage+0x7f8>)
 8005a42:	0011      	movs	r1, r2
 8005a44:	0018      	movs	r0, r3
 8005a46:	f7ff fa0b 	bl	8004e60 <ESP_Send>
 8005a4a:	0003      	movs	r3, r0
 8005a4c:	001a      	movs	r2, r3
 8005a4e:	4b87      	ldr	r3, [pc, #540]	@ (8005c6c <CreateMessage+0x7fc>)
 8005a50:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8005a52:	4b87      	ldr	r3, [pc, #540]	@ (8005c70 <CreateMessage+0x800>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	001a      	movs	r2, r3
 8005a58:	4b84      	ldr	r3, [pc, #528]	@ (8005c6c <CreateMessage+0x7fc>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	1e5a      	subs	r2, r3, #1
 8005a60:	4193      	sbcs	r3, r2
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	4b82      	ldr	r3, [pc, #520]	@ (8005c70 <CreateMessage+0x800>)
 8005a66:	701a      	strb	r2, [r3, #0]
    }
  }

  if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 8005a68:	4b8b      	ldr	r3, [pc, #556]	@ (8005c98 <CreateMessage+0x828>)
 8005a6a:	791b      	ldrb	r3, [r3, #4]
 8005a6c:	2b35      	cmp	r3, #53	@ 0x35
 8005a6e:	d149      	bne.n	8005b04 <CreateMessage+0x694>
 8005a70:	f004 f93e 	bl	8009cf0 <Check_USB_PowerOn>
 8005a74:	1e03      	subs	r3, r0, #0
 8005a76:	d045      	beq.n	8005b04 <CreateMessage+0x694>
    ReadUint8ArrayEEprom(NOxIndexConfigAddr, keybuffer, IdSize);
 8005a78:	4b7e      	ldr	r3, [pc, #504]	@ (8005c74 <CreateMessage+0x804>)
 8005a7a:	4888      	ldr	r0, [pc, #544]	@ (8005c9c <CreateMessage+0x82c>)
 8005a7c:	220c      	movs	r2, #12
 8005a7e:	0019      	movs	r1, r3
 8005a80:	f006 fbb0 	bl	800c1e4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "NOx", "NOxr")) {
 8005a84:	4a86      	ldr	r2, [pc, #536]	@ (8005ca0 <CreateMessage+0x830>)
 8005a86:	4987      	ldr	r1, [pc, #540]	@ (8005ca4 <CreateMessage+0x834>)
 8005a88:	4b7a      	ldr	r3, [pc, #488]	@ (8005c74 <CreateMessage+0x804>)
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f7ff fbf8 	bl	8005280 <isKeyValid>
 8005a90:	1e03      	subs	r3, r0, #0
 8005a92:	d037      	beq.n	8005b04 <CreateMessage+0x694>
      uint8ArrayToString(Buffer, keybuffer);
 8005a94:	4a77      	ldr	r2, [pc, #476]	@ (8005c74 <CreateMessage+0x804>)
 8005a96:	4b72      	ldr	r3, [pc, #456]	@ (8005c60 <CreateMessage+0x7f0>)
 8005a98:	0011      	movs	r1, r2
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	f7ff fc20 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
 8005aa0:	4b78      	ldr	r3, [pc, #480]	@ (8005c84 <CreateMessage+0x814>)
 8005aa2:	224e      	movs	r2, #78	@ 0x4e
 8005aa4:	5a9b      	ldrh	r3, [r3, r2]
 8005aa6:	4a6e      	ldr	r2, [pc, #440]	@ (8005c60 <CreateMessage+0x7f0>)
 8005aa8:	497f      	ldr	r1, [pc, #508]	@ (8005ca8 <CreateMessage+0x838>)
 8005aaa:	486f      	ldr	r0, [pc, #444]	@ (8005c68 <CreateMessage+0x7f8>)
 8005aac:	f020 fd20 	bl	80264f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
#endif
      index += strlen(message);
 8005ab0:	4b6d      	ldr	r3, [pc, #436]	@ (8005c68 <CreateMessage+0x7f8>)
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f7fa fb5a 	bl	800016c <strlen>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	b299      	uxth	r1, r3
 8005abc:	220e      	movs	r2, #14
 8005abe:	18bb      	adds	r3, r7, r2
 8005ac0:	18ba      	adds	r2, r7, r2
 8005ac2:	8812      	ldrh	r2, [r2, #0]
 8005ac4:	188a      	adds	r2, r1, r2
 8005ac6:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005ac8:	1cfb      	adds	r3, r7, #3
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d019      	beq.n	8005b04 <CreateMessage+0x694>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005ad0:	4b65      	ldr	r3, [pc, #404]	@ (8005c68 <CreateMessage+0x7f8>)
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	f7fa fb4a 	bl	800016c <strlen>
 8005ad8:	0003      	movs	r3, r0
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	4b62      	ldr	r3, [pc, #392]	@ (8005c68 <CreateMessage+0x7f8>)
 8005ade:	0011      	movs	r1, r2
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f7ff f9bd 	bl	8004e60 <ESP_Send>
 8005ae6:	0003      	movs	r3, r0
 8005ae8:	001a      	movs	r2, r3
 8005aea:	4b60      	ldr	r3, [pc, #384]	@ (8005c6c <CreateMessage+0x7fc>)
 8005aec:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005aee:	4b60      	ldr	r3, [pc, #384]	@ (8005c70 <CreateMessage+0x800>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	001a      	movs	r2, r3
 8005af4:	4b5d      	ldr	r3, [pc, #372]	@ (8005c6c <CreateMessage+0x7fc>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	4013      	ands	r3, r2
 8005afa:	1e5a      	subs	r2, r3, #1
 8005afc:	4193      	sbcs	r3, r2
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	4b5b      	ldr	r3, [pc, #364]	@ (8005c70 <CreateMessage+0x800>)
 8005b02:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, keybuffer, IdSize);
 8005b04:	4b5b      	ldr	r3, [pc, #364]	@ (8005c74 <CreateMessage+0x804>)
 8005b06:	4869      	ldr	r0, [pc, #420]	@ (8005cac <CreateMessage+0x83c>)
 8005b08:	220c      	movs	r2, #12
 8005b0a:	0019      	movs	r1, r3
 8005b0c:	f006 fb6a 	bl	800c1e4 <ReadUint8ArrayEEprom>
  if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "temperature")) {
 8005b10:	4b61      	ldr	r3, [pc, #388]	@ (8005c98 <CreateMessage+0x828>)
 8005b12:	791b      	ldrb	r3, [r3, #4]
 8005b14:	2b34      	cmp	r3, #52	@ 0x34
 8005b16:	d003      	beq.n	8005b20 <CreateMessage+0x6b0>
 8005b18:	4b5f      	ldr	r3, [pc, #380]	@ (8005c98 <CreateMessage+0x828>)
 8005b1a:	791b      	ldrb	r3, [r3, #4]
 8005b1c:	2b35      	cmp	r3, #53	@ 0x35
 8005b1e:	d14e      	bne.n	8005bbe <CreateMessage+0x74e>
 8005b20:	4a63      	ldr	r2, [pc, #396]	@ (8005cb0 <CreateMessage+0x840>)
 8005b22:	4964      	ldr	r1, [pc, #400]	@ (8005cb4 <CreateMessage+0x844>)
 8005b24:	4b53      	ldr	r3, [pc, #332]	@ (8005c74 <CreateMessage+0x804>)
 8005b26:	0018      	movs	r0, r3
 8005b28:	f7ff fbaa 	bl	8005280 <isKeyValid>
 8005b2c:	1e03      	subs	r3, r0, #0
 8005b2e:	d046      	beq.n	8005bbe <CreateMessage+0x74e>
    uint8ArrayToString(Buffer, keybuffer);
 8005b30:	4a50      	ldr	r2, [pc, #320]	@ (8005c74 <CreateMessage+0x804>)
 8005b32:	4b4b      	ldr	r3, [pc, #300]	@ (8005c60 <CreateMessage+0x7f0>)
 8005b34:	0011      	movs	r1, r2
 8005b36:	0018      	movs	r0, r3
 8005b38:	f7ff fbd2 	bl	80052e0 <uint8ArrayToString>
    if (isKeyValid(keybuffer, "Sen5x", "temp")) {
 8005b3c:	4a5e      	ldr	r2, [pc, #376]	@ (8005cb8 <CreateMessage+0x848>)
 8005b3e:	495f      	ldr	r1, [pc, #380]	@ (8005cbc <CreateMessage+0x84c>)
 8005b40:	4b4c      	ldr	r3, [pc, #304]	@ (8005c74 <CreateMessage+0x804>)
 8005b42:	0018      	movs	r0, r3
 8005b44:	f7ff fb9c 	bl	8005280 <isKeyValid>
 8005b48:	1e03      	subs	r3, r0, #0
 8005b4a:	d038      	beq.n	8005bbe <CreateMessage+0x74e>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_temperature);
 8005b4c:	4b4d      	ldr	r3, [pc, #308]	@ (8005c84 <CreateMessage+0x814>)
 8005b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b50:	1c18      	adds	r0, r3, #0
 8005b52:	f7fd fe9f 	bl	8003894 <__aeabi_f2d>
 8005b56:	0002      	movs	r2, r0
 8005b58:	000b      	movs	r3, r1
 8005b5a:	4c41      	ldr	r4, [pc, #260]	@ (8005c60 <CreateMessage+0x7f0>)
 8005b5c:	4958      	ldr	r1, [pc, #352]	@ (8005cc0 <CreateMessage+0x850>)
 8005b5e:	4842      	ldr	r0, [pc, #264]	@ (8005c68 <CreateMessage+0x7f8>)
 8005b60:	9200      	str	r2, [sp, #0]
 8005b62:	9301      	str	r3, [sp, #4]
 8005b64:	0022      	movs	r2, r4
 8005b66:	f020 fcc3 	bl	80264f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_temperature);
#endif
      index += strlen(message);
 8005b6a:	4b3f      	ldr	r3, [pc, #252]	@ (8005c68 <CreateMessage+0x7f8>)
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	f7fa fafd 	bl	800016c <strlen>
 8005b72:	0003      	movs	r3, r0
 8005b74:	b299      	uxth	r1, r3
 8005b76:	220e      	movs	r2, #14
 8005b78:	18bb      	adds	r3, r7, r2
 8005b7a:	18ba      	adds	r2, r7, r2
 8005b7c:	8812      	ldrh	r2, [r2, #0]
 8005b7e:	188a      	adds	r2, r1, r2
 8005b80:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005b82:	1cfb      	adds	r3, r7, #3
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d019      	beq.n	8005bbe <CreateMessage+0x74e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005b8a:	4b37      	ldr	r3, [pc, #220]	@ (8005c68 <CreateMessage+0x7f8>)
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f7fa faed 	bl	800016c <strlen>
 8005b92:	0003      	movs	r3, r0
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	4b34      	ldr	r3, [pc, #208]	@ (8005c68 <CreateMessage+0x7f8>)
 8005b98:	0011      	movs	r1, r2
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	f7ff f960 	bl	8004e60 <ESP_Send>
 8005ba0:	0003      	movs	r3, r0
 8005ba2:	001a      	movs	r2, r3
 8005ba4:	4b31      	ldr	r3, [pc, #196]	@ (8005c6c <CreateMessage+0x7fc>)
 8005ba6:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005ba8:	4b31      	ldr	r3, [pc, #196]	@ (8005c70 <CreateMessage+0x800>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	001a      	movs	r2, r3
 8005bae:	4b2f      	ldr	r3, [pc, #188]	@ (8005c6c <CreateMessage+0x7fc>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	1e5a      	subs	r2, r3, #1
 8005bb6:	4193      	sbcs	r3, r2
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	4b2d      	ldr	r3, [pc, #180]	@ (8005c70 <CreateMessage+0x800>)
 8005bbc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, keybuffer, IdSize);
 8005bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8005c74 <CreateMessage+0x804>)
 8005bc0:	4840      	ldr	r0, [pc, #256]	@ (8005cc4 <CreateMessage+0x854>)
 8005bc2:	220c      	movs	r2, #12
 8005bc4:	0019      	movs	r1, r3
 8005bc6:	f006 fb0d 	bl	800c1e4 <ReadUint8ArrayEEprom>
  if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "humidity")) {
 8005bca:	4b33      	ldr	r3, [pc, #204]	@ (8005c98 <CreateMessage+0x828>)
 8005bcc:	791b      	ldrb	r3, [r3, #4]
 8005bce:	2b34      	cmp	r3, #52	@ 0x34
 8005bd0:	d004      	beq.n	8005bdc <CreateMessage+0x76c>
 8005bd2:	4b31      	ldr	r3, [pc, #196]	@ (8005c98 <CreateMessage+0x828>)
 8005bd4:	791b      	ldrb	r3, [r3, #4]
 8005bd6:	2b35      	cmp	r3, #53	@ 0x35
 8005bd8:	d000      	beq.n	8005bdc <CreateMessage+0x76c>
 8005bda:	e088      	b.n	8005cee <CreateMessage+0x87e>
 8005bdc:	4a3a      	ldr	r2, [pc, #232]	@ (8005cc8 <CreateMessage+0x858>)
 8005bde:	4935      	ldr	r1, [pc, #212]	@ (8005cb4 <CreateMessage+0x844>)
 8005be0:	4b24      	ldr	r3, [pc, #144]	@ (8005c74 <CreateMessage+0x804>)
 8005be2:	0018      	movs	r0, r3
 8005be4:	f7ff fb4c 	bl	8005280 <isKeyValid>
 8005be8:	1e03      	subs	r3, r0, #0
 8005bea:	d100      	bne.n	8005bee <CreateMessage+0x77e>
 8005bec:	e07f      	b.n	8005cee <CreateMessage+0x87e>
    uint8ArrayToString(Buffer, keybuffer);
 8005bee:	4a21      	ldr	r2, [pc, #132]	@ (8005c74 <CreateMessage+0x804>)
 8005bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c60 <CreateMessage+0x7f0>)
 8005bf2:	0011      	movs	r1, r2
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	f7ff fb73 	bl	80052e0 <uint8ArrayToString>
    if (isKeyValid(keybuffer, "Sen5x", "hum")) {
 8005bfa:	4a34      	ldr	r2, [pc, #208]	@ (8005ccc <CreateMessage+0x85c>)
 8005bfc:	492f      	ldr	r1, [pc, #188]	@ (8005cbc <CreateMessage+0x84c>)
 8005bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8005c74 <CreateMessage+0x804>)
 8005c00:	0018      	movs	r0, r3
 8005c02:	f7ff fb3d 	bl	8005280 <isKeyValid>
 8005c06:	1e03      	subs	r3, r0, #0
 8005c08:	d071      	beq.n	8005cee <CreateMessage+0x87e>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_humidity);
 8005c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8005c84 <CreateMessage+0x814>)
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0e:	1c18      	adds	r0, r3, #0
 8005c10:	f7fd fe40 	bl	8003894 <__aeabi_f2d>
 8005c14:	0002      	movs	r2, r0
 8005c16:	000b      	movs	r3, r1
 8005c18:	4c11      	ldr	r4, [pc, #68]	@ (8005c60 <CreateMessage+0x7f0>)
 8005c1a:	4929      	ldr	r1, [pc, #164]	@ (8005cc0 <CreateMessage+0x850>)
 8005c1c:	4812      	ldr	r0, [pc, #72]	@ (8005c68 <CreateMessage+0x7f8>)
 8005c1e:	9200      	str	r2, [sp, #0]
 8005c20:	9301      	str	r3, [sp, #4]
 8005c22:	0022      	movs	r2, r4
 8005c24:	f020 fc64 	bl	80264f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_humidity);
#endif
      index += strlen(message);
 8005c28:	4b0f      	ldr	r3, [pc, #60]	@ (8005c68 <CreateMessage+0x7f8>)
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f7fa fa9e 	bl	800016c <strlen>
 8005c30:	0003      	movs	r3, r0
 8005c32:	b299      	uxth	r1, r3
 8005c34:	220e      	movs	r2, #14
 8005c36:	18bb      	adds	r3, r7, r2
 8005c38:	18ba      	adds	r2, r7, r2
 8005c3a:	8812      	ldrh	r2, [r2, #0]
 8005c3c:	188a      	adds	r2, r1, r2
 8005c3e:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005c40:	1cfb      	adds	r3, r7, #3
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d052      	beq.n	8005cee <CreateMessage+0x87e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005c48:	4b07      	ldr	r3, [pc, #28]	@ (8005c68 <CreateMessage+0x7f8>)
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	f7fa fa8e 	bl	800016c <strlen>
 8005c50:	0003      	movs	r3, r0
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	4b04      	ldr	r3, [pc, #16]	@ (8005c68 <CreateMessage+0x7f8>)
 8005c56:	0011      	movs	r1, r2
 8005c58:	0018      	movs	r0, r3
 8005c5a:	f7ff f901 	bl	8004e60 <ESP_Send>
 8005c5e:	e037      	b.n	8005cd0 <CreateMessage+0x860>
 8005c60:	20000840 	.word	0x20000840
 8005c64:	0802af10 	.word	0x0802af10
 8005c68:	200005c4 	.word	0x200005c4
 8005c6c:	20000859 	.word	0x20000859
 8005c70:	20000032 	.word	0x20000032
 8005c74:	20000834 	.word	0x20000834
 8005c78:	08080048 	.word	0x08080048
 8005c7c:	0802afd0 	.word	0x0802afd0
 8005c80:	0802afd4 	.word	0x0802afd4
 8005c84:	20000704 	.word	0x20000704
 8005c88:	08080078 	.word	0x08080078
 8005c8c:	0802afd8 	.word	0x0802afd8
 8005c90:	0802afe0 	.word	0x0802afe0
 8005c94:	200005c0 	.word	0x200005c0
 8005c98:	200011c0 	.word	0x200011c0
 8005c9c:	08080024 	.word	0x08080024
 8005ca0:	0802afe8 	.word	0x0802afe8
 8005ca4:	0802aff0 	.word	0x0802aff0
 8005ca8:	0802af30 	.word	0x0802af30
 8005cac:	08080170 	.word	0x08080170
 8005cb0:	0802aff4 	.word	0x0802aff4
 8005cb4:	0802b000 	.word	0x0802b000
 8005cb8:	0802b008 	.word	0x0802b008
 8005cbc:	0802b010 	.word	0x0802b010
 8005cc0:	0802b018 	.word	0x0802b018
 8005cc4:	0808017c 	.word	0x0808017c
 8005cc8:	0802b038 	.word	0x0802b038
 8005ccc:	0802b044 	.word	0x0802b044
 8005cd0:	0003      	movs	r3, r0
 8005cd2:	001a      	movs	r2, r3
 8005cd4:	4be9      	ldr	r3, [pc, #932]	@ (800607c <CreateMessage+0xc0c>)
 8005cd6:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005cd8:	4be9      	ldr	r3, [pc, #932]	@ (8006080 <CreateMessage+0xc10>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	001a      	movs	r2, r3
 8005cde:	4be7      	ldr	r3, [pc, #924]	@ (800607c <CreateMessage+0xc0c>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	1e5a      	subs	r2, r3, #1
 8005ce6:	4193      	sbcs	r3, r2
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	4be5      	ldr	r3, [pc, #916]	@ (8006080 <CreateMessage+0xc10>)
 8005cec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (sen5x_Get_sen5x_enable_state() && (batteryStatus > BATTERY_LOW)) {
 8005cee:	f008 fcb7 	bl	800e660 <sen5x_Get_sen5x_enable_state>
 8005cf2:	1e03      	subs	r3, r0, #0
 8005cf4:	d100      	bne.n	8005cf8 <CreateMessage+0x888>
 8005cf6:	e138      	b.n	8005f6a <CreateMessage+0xafa>
 8005cf8:	4be2      	ldr	r3, [pc, #904]	@ (8006084 <CreateMessage+0xc14>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d800      	bhi.n	8005d02 <CreateMessage+0x892>
 8005d00:	e133      	b.n	8005f6a <CreateMessage+0xafa>
    ReadUint8ArrayEEprom(PM1ConfigAddr, keybuffer, IdSize);
 8005d02:	4be1      	ldr	r3, [pc, #900]	@ (8006088 <CreateMessage+0xc18>)
 8005d04:	48e1      	ldr	r0, [pc, #900]	@ (800608c <CreateMessage+0xc1c>)
 8005d06:	220c      	movs	r2, #12
 8005d08:	0019      	movs	r1, r3
 8005d0a:	f006 fa6b 	bl	800c1e4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "PM1", "particle")) {
 8005d0e:	4ae0      	ldr	r2, [pc, #896]	@ (8006090 <CreateMessage+0xc20>)
 8005d10:	49e0      	ldr	r1, [pc, #896]	@ (8006094 <CreateMessage+0xc24>)
 8005d12:	4bdd      	ldr	r3, [pc, #884]	@ (8006088 <CreateMessage+0xc18>)
 8005d14:	0018      	movs	r0, r3
 8005d16:	f7ff fab3 	bl	8005280 <isKeyValid>
 8005d1a:	1e03      	subs	r3, r0, #0
 8005d1c:	d03e      	beq.n	8005d9c <CreateMessage+0x92c>
      uint8ArrayToString(Buffer, keybuffer);
 8005d1e:	4ada      	ldr	r2, [pc, #872]	@ (8006088 <CreateMessage+0xc18>)
 8005d20:	4bdd      	ldr	r3, [pc, #884]	@ (8006098 <CreateMessage+0xc28>)
 8005d22:	0011      	movs	r1, r2
 8005d24:	0018      	movs	r0, r3
 8005d26:	f7ff fadb 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM1p0max);
 8005d2a:	4bdc      	ldr	r3, [pc, #880]	@ (800609c <CreateMessage+0xc2c>)
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	1c18      	adds	r0, r3, #0
 8005d30:	f7fd fdb0 	bl	8003894 <__aeabi_f2d>
 8005d34:	0002      	movs	r2, r0
 8005d36:	000b      	movs	r3, r1
 8005d38:	4cd7      	ldr	r4, [pc, #860]	@ (8006098 <CreateMessage+0xc28>)
 8005d3a:	49d9      	ldr	r1, [pc, #868]	@ (80060a0 <CreateMessage+0xc30>)
 8005d3c:	48d9      	ldr	r0, [pc, #868]	@ (80060a4 <CreateMessage+0xc34>)
 8005d3e:	9200      	str	r2, [sp, #0]
 8005d40:	9301      	str	r3, [sp, #4]
 8005d42:	0022      	movs	r2, r4
 8005d44:	f020 fbd4 	bl	80264f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM1\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM1p0max);
#endif
      index += strlen(message);
 8005d48:	4bd6      	ldr	r3, [pc, #856]	@ (80060a4 <CreateMessage+0xc34>)
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	f7fa fa0e 	bl	800016c <strlen>
 8005d50:	0003      	movs	r3, r0
 8005d52:	b299      	uxth	r1, r3
 8005d54:	220e      	movs	r2, #14
 8005d56:	18bb      	adds	r3, r7, r2
 8005d58:	18ba      	adds	r2, r7, r2
 8005d5a:	8812      	ldrh	r2, [r2, #0]
 8005d5c:	188a      	adds	r2, r1, r2
 8005d5e:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005d60:	1cfb      	adds	r3, r7, #3
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d019      	beq.n	8005d9c <CreateMessage+0x92c>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005d68:	4bce      	ldr	r3, [pc, #824]	@ (80060a4 <CreateMessage+0xc34>)
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f7fa f9fe 	bl	800016c <strlen>
 8005d70:	0003      	movs	r3, r0
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	4bcb      	ldr	r3, [pc, #812]	@ (80060a4 <CreateMessage+0xc34>)
 8005d76:	0011      	movs	r1, r2
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f7ff f871 	bl	8004e60 <ESP_Send>
 8005d7e:	0003      	movs	r3, r0
 8005d80:	001a      	movs	r2, r3
 8005d82:	4bbe      	ldr	r3, [pc, #760]	@ (800607c <CreateMessage+0xc0c>)
 8005d84:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005d86:	4bbe      	ldr	r3, [pc, #760]	@ (8006080 <CreateMessage+0xc10>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	001a      	movs	r2, r3
 8005d8c:	4bbb      	ldr	r3, [pc, #748]	@ (800607c <CreateMessage+0xc0c>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	4013      	ands	r3, r2
 8005d92:	1e5a      	subs	r2, r3, #1
 8005d94:	4193      	sbcs	r3, r2
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	4bb9      	ldr	r3, [pc, #740]	@ (8006080 <CreateMessage+0xc10>)
 8005d9a:	701a      	strb	r2, [r3, #0]
      }
    }
    ReadUint8ArrayEEprom(PM2ConfigAddr, keybuffer, IdSize);
 8005d9c:	4bba      	ldr	r3, [pc, #744]	@ (8006088 <CreateMessage+0xc18>)
 8005d9e:	48c2      	ldr	r0, [pc, #776]	@ (80060a8 <CreateMessage+0xc38>)
 8005da0:	220c      	movs	r2, #12
 8005da2:	0019      	movs	r1, r3
 8005da4:	f006 fa1e 	bl	800c1e4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "PM2p5", "particle")) {
 8005da8:	4ab9      	ldr	r2, [pc, #740]	@ (8006090 <CreateMessage+0xc20>)
 8005daa:	49c0      	ldr	r1, [pc, #768]	@ (80060ac <CreateMessage+0xc3c>)
 8005dac:	4bb6      	ldr	r3, [pc, #728]	@ (8006088 <CreateMessage+0xc18>)
 8005dae:	0018      	movs	r0, r3
 8005db0:	f7ff fa66 	bl	8005280 <isKeyValid>
 8005db4:	1e03      	subs	r3, r0, #0
 8005db6:	d03e      	beq.n	8005e36 <CreateMessage+0x9c6>
      uint8ArrayToString(Buffer, keybuffer);
 8005db8:	4ab3      	ldr	r2, [pc, #716]	@ (8006088 <CreateMessage+0xc18>)
 8005dba:	4bb7      	ldr	r3, [pc, #732]	@ (8006098 <CreateMessage+0xc28>)
 8005dbc:	0011      	movs	r1, r2
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	f7ff fa8e 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
 8005dc4:	4bb5      	ldr	r3, [pc, #724]	@ (800609c <CreateMessage+0xc2c>)
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	1c18      	adds	r0, r3, #0
 8005dca:	f7fd fd63 	bl	8003894 <__aeabi_f2d>
 8005dce:	0002      	movs	r2, r0
 8005dd0:	000b      	movs	r3, r1
 8005dd2:	4cb1      	ldr	r4, [pc, #708]	@ (8006098 <CreateMessage+0xc28>)
 8005dd4:	49b2      	ldr	r1, [pc, #712]	@ (80060a0 <CreateMessage+0xc30>)
 8005dd6:	48b3      	ldr	r0, [pc, #716]	@ (80060a4 <CreateMessage+0xc34>)
 8005dd8:	9200      	str	r2, [sp, #0]
 8005dda:	9301      	str	r3, [sp, #4]
 8005ddc:	0022      	movs	r2, r4
 8005dde:	f020 fb87 	bl	80264f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
#endif
      index += strlen(message);
 8005de2:	4bb0      	ldr	r3, [pc, #704]	@ (80060a4 <CreateMessage+0xc34>)
 8005de4:	0018      	movs	r0, r3
 8005de6:	f7fa f9c1 	bl	800016c <strlen>
 8005dea:	0003      	movs	r3, r0
 8005dec:	b299      	uxth	r1, r3
 8005dee:	220e      	movs	r2, #14
 8005df0:	18bb      	adds	r3, r7, r2
 8005df2:	18ba      	adds	r2, r7, r2
 8005df4:	8812      	ldrh	r2, [r2, #0]
 8005df6:	188a      	adds	r2, r1, r2
 8005df8:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005dfa:	1cfb      	adds	r3, r7, #3
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d019      	beq.n	8005e36 <CreateMessage+0x9c6>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005e02:	4ba8      	ldr	r3, [pc, #672]	@ (80060a4 <CreateMessage+0xc34>)
 8005e04:	0018      	movs	r0, r3
 8005e06:	f7fa f9b1 	bl	800016c <strlen>
 8005e0a:	0003      	movs	r3, r0
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	4ba5      	ldr	r3, [pc, #660]	@ (80060a4 <CreateMessage+0xc34>)
 8005e10:	0011      	movs	r1, r2
 8005e12:	0018      	movs	r0, r3
 8005e14:	f7ff f824 	bl	8004e60 <ESP_Send>
 8005e18:	0003      	movs	r3, r0
 8005e1a:	001a      	movs	r2, r3
 8005e1c:	4b97      	ldr	r3, [pc, #604]	@ (800607c <CreateMessage+0xc0c>)
 8005e1e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005e20:	4b97      	ldr	r3, [pc, #604]	@ (8006080 <CreateMessage+0xc10>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	001a      	movs	r2, r3
 8005e26:	4b95      	ldr	r3, [pc, #596]	@ (800607c <CreateMessage+0xc0c>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	1e5a      	subs	r2, r3, #1
 8005e2e:	4193      	sbcs	r3, r2
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	4b93      	ldr	r3, [pc, #588]	@ (8006080 <CreateMessage+0xc10>)
 8005e34:	701a      	strb	r2, [r3, #0]
      }
    }
    ReadUint8ArrayEEprom(PM4ConfigAddr, keybuffer, IdSize);
 8005e36:	4b94      	ldr	r3, [pc, #592]	@ (8006088 <CreateMessage+0xc18>)
 8005e38:	489d      	ldr	r0, [pc, #628]	@ (80060b0 <CreateMessage+0xc40>)
 8005e3a:	220c      	movs	r2, #12
 8005e3c:	0019      	movs	r1, r3
 8005e3e:	f006 f9d1 	bl	800c1e4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "PM4", "particle")) {
 8005e42:	4a93      	ldr	r2, [pc, #588]	@ (8006090 <CreateMessage+0xc20>)
 8005e44:	499b      	ldr	r1, [pc, #620]	@ (80060b4 <CreateMessage+0xc44>)
 8005e46:	4b90      	ldr	r3, [pc, #576]	@ (8006088 <CreateMessage+0xc18>)
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f7ff fa19 	bl	8005280 <isKeyValid>
 8005e4e:	1e03      	subs	r3, r0, #0
 8005e50:	d03e      	beq.n	8005ed0 <CreateMessage+0xa60>
      uint8ArrayToString(Buffer, keybuffer);
 8005e52:	4a8d      	ldr	r2, [pc, #564]	@ (8006088 <CreateMessage+0xc18>)
 8005e54:	4b90      	ldr	r3, [pc, #576]	@ (8006098 <CreateMessage+0xc28>)
 8005e56:	0011      	movs	r1, r2
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f7ff fa41 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM4p0max);
 8005e5e:	4b8f      	ldr	r3, [pc, #572]	@ (800609c <CreateMessage+0xc2c>)
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	1c18      	adds	r0, r3, #0
 8005e64:	f7fd fd16 	bl	8003894 <__aeabi_f2d>
 8005e68:	0002      	movs	r2, r0
 8005e6a:	000b      	movs	r3, r1
 8005e6c:	4c8a      	ldr	r4, [pc, #552]	@ (8006098 <CreateMessage+0xc28>)
 8005e6e:	498c      	ldr	r1, [pc, #560]	@ (80060a0 <CreateMessage+0xc30>)
 8005e70:	488c      	ldr	r0, [pc, #560]	@ (80060a4 <CreateMessage+0xc34>)
 8005e72:	9200      	str	r2, [sp, #0]
 8005e74:	9301      	str	r3, [sp, #4]
 8005e76:	0022      	movs	r2, r4
 8005e78:	f020 fb3a 	bl	80264f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM4\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM4p0max);
#endif
      index += strlen(message);
 8005e7c:	4b89      	ldr	r3, [pc, #548]	@ (80060a4 <CreateMessage+0xc34>)
 8005e7e:	0018      	movs	r0, r3
 8005e80:	f7fa f974 	bl	800016c <strlen>
 8005e84:	0003      	movs	r3, r0
 8005e86:	b299      	uxth	r1, r3
 8005e88:	220e      	movs	r2, #14
 8005e8a:	18bb      	adds	r3, r7, r2
 8005e8c:	18ba      	adds	r2, r7, r2
 8005e8e:	8812      	ldrh	r2, [r2, #0]
 8005e90:	188a      	adds	r2, r1, r2
 8005e92:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005e94:	1cfb      	adds	r3, r7, #3
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d019      	beq.n	8005ed0 <CreateMessage+0xa60>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005e9c:	4b81      	ldr	r3, [pc, #516]	@ (80060a4 <CreateMessage+0xc34>)
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f7fa f964 	bl	800016c <strlen>
 8005ea4:	0003      	movs	r3, r0
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	4b7e      	ldr	r3, [pc, #504]	@ (80060a4 <CreateMessage+0xc34>)
 8005eaa:	0011      	movs	r1, r2
 8005eac:	0018      	movs	r0, r3
 8005eae:	f7fe ffd7 	bl	8004e60 <ESP_Send>
 8005eb2:	0003      	movs	r3, r0
 8005eb4:	001a      	movs	r2, r3
 8005eb6:	4b71      	ldr	r3, [pc, #452]	@ (800607c <CreateMessage+0xc0c>)
 8005eb8:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005eba:	4b71      	ldr	r3, [pc, #452]	@ (8006080 <CreateMessage+0xc10>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	001a      	movs	r2, r3
 8005ec0:	4b6e      	ldr	r3, [pc, #440]	@ (800607c <CreateMessage+0xc0c>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	1e5a      	subs	r2, r3, #1
 8005ec8:	4193      	sbcs	r3, r2
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	4b6c      	ldr	r3, [pc, #432]	@ (8006080 <CreateMessage+0xc10>)
 8005ece:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(PM10ConfigAddr, keybuffer, IdSize);
 8005ed0:	4b6d      	ldr	r3, [pc, #436]	@ (8006088 <CreateMessage+0xc18>)
 8005ed2:	4879      	ldr	r0, [pc, #484]	@ (80060b8 <CreateMessage+0xc48>)
 8005ed4:	220c      	movs	r2, #12
 8005ed6:	0019      	movs	r1, r3
 8005ed8:	f006 f984 	bl	800c1e4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "PM10", "particle")) {
 8005edc:	4a6c      	ldr	r2, [pc, #432]	@ (8006090 <CreateMessage+0xc20>)
 8005ede:	4977      	ldr	r1, [pc, #476]	@ (80060bc <CreateMessage+0xc4c>)
 8005ee0:	4b69      	ldr	r3, [pc, #420]	@ (8006088 <CreateMessage+0xc18>)
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f7ff f9cc 	bl	8005280 <isKeyValid>
 8005ee8:	1e03      	subs	r3, r0, #0
 8005eea:	d03e      	beq.n	8005f6a <CreateMessage+0xafa>
      uint8ArrayToString(Buffer, keybuffer);
 8005eec:	4a66      	ldr	r2, [pc, #408]	@ (8006088 <CreateMessage+0xc18>)
 8005eee:	4b6a      	ldr	r3, [pc, #424]	@ (8006098 <CreateMessage+0xc28>)
 8005ef0:	0011      	movs	r1, r2
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f7ff f9f4 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
 8005ef8:	4b68      	ldr	r3, [pc, #416]	@ (800609c <CreateMessage+0xc2c>)
 8005efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efc:	1c18      	adds	r0, r3, #0
 8005efe:	f7fd fcc9 	bl	8003894 <__aeabi_f2d>
 8005f02:	0002      	movs	r2, r0
 8005f04:	000b      	movs	r3, r1
 8005f06:	4c64      	ldr	r4, [pc, #400]	@ (8006098 <CreateMessage+0xc28>)
 8005f08:	4965      	ldr	r1, [pc, #404]	@ (80060a0 <CreateMessage+0xc30>)
 8005f0a:	4866      	ldr	r0, [pc, #408]	@ (80060a4 <CreateMessage+0xc34>)
 8005f0c:	9200      	str	r2, [sp, #0]
 8005f0e:	9301      	str	r3, [sp, #4]
 8005f10:	0022      	movs	r2, r4
 8005f12:	f020 faed 	bl	80264f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
#endif
      index += strlen(message);
 8005f16:	4b63      	ldr	r3, [pc, #396]	@ (80060a4 <CreateMessage+0xc34>)
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f7fa f927 	bl	800016c <strlen>
 8005f1e:	0003      	movs	r3, r0
 8005f20:	b299      	uxth	r1, r3
 8005f22:	220e      	movs	r2, #14
 8005f24:	18bb      	adds	r3, r7, r2
 8005f26:	18ba      	adds	r2, r7, r2
 8005f28:	8812      	ldrh	r2, [r2, #0]
 8005f2a:	188a      	adds	r2, r1, r2
 8005f2c:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005f2e:	1cfb      	adds	r3, r7, #3
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d019      	beq.n	8005f6a <CreateMessage+0xafa>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005f36:	4b5b      	ldr	r3, [pc, #364]	@ (80060a4 <CreateMessage+0xc34>)
 8005f38:	0018      	movs	r0, r3
 8005f3a:	f7fa f917 	bl	800016c <strlen>
 8005f3e:	0003      	movs	r3, r0
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	4b58      	ldr	r3, [pc, #352]	@ (80060a4 <CreateMessage+0xc34>)
 8005f44:	0011      	movs	r1, r2
 8005f46:	0018      	movs	r0, r3
 8005f48:	f7fe ff8a 	bl	8004e60 <ESP_Send>
 8005f4c:	0003      	movs	r3, r0
 8005f4e:	001a      	movs	r2, r3
 8005f50:	4b4a      	ldr	r3, [pc, #296]	@ (800607c <CreateMessage+0xc0c>)
 8005f52:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005f54:	4b4a      	ldr	r3, [pc, #296]	@ (8006080 <CreateMessage+0xc10>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	001a      	movs	r2, r3
 8005f5a:	4b48      	ldr	r3, [pc, #288]	@ (800607c <CreateMessage+0xc0c>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	1e5a      	subs	r2, r3, #1
 8005f62:	4193      	sbcs	r3, r2
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	4b46      	ldr	r3, [pc, #280]	@ (8006080 <CreateMessage+0xc10>)
 8005f68:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsAHT20SensorPresent()) {
 8005f6a:	f007 faf9 	bl	800d560 <IsAHT20SensorPresent>
 8005f6e:	1e03      	subs	r3, r0, #0
 8005f70:	d100      	bne.n	8005f74 <CreateMessage+0xb04>
 8005f72:	e0c7      	b.n	8006104 <CreateMessage+0xc94>
    ReadUint8ArrayEEprom(AHTTempConfigAddr, keybuffer, IdSize);
 8005f74:	4b44      	ldr	r3, [pc, #272]	@ (8006088 <CreateMessage+0xc18>)
 8005f76:	4852      	ldr	r0, [pc, #328]	@ (80060c0 <CreateMessage+0xc50>)
 8005f78:	220c      	movs	r2, #12
 8005f7a:	0019      	movs	r1, r3
 8005f7c:	f006 f932 	bl	800c1e4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "temperature")) {
 8005f80:	4a50      	ldr	r2, [pc, #320]	@ (80060c4 <CreateMessage+0xc54>)
 8005f82:	4951      	ldr	r1, [pc, #324]	@ (80060c8 <CreateMessage+0xc58>)
 8005f84:	4b40      	ldr	r3, [pc, #256]	@ (8006088 <CreateMessage+0xc18>)
 8005f86:	0018      	movs	r0, r3
 8005f88:	f7ff f97a 	bl	8005280 <isKeyValid>
 8005f8c:	1e03      	subs	r3, r0, #0
 8005f8e:	d03e      	beq.n	800600e <CreateMessage+0xb9e>
      uint8ArrayToString(Buffer, keybuffer);
 8005f90:	4a3d      	ldr	r2, [pc, #244]	@ (8006088 <CreateMessage+0xc18>)
 8005f92:	4b41      	ldr	r3, [pc, #260]	@ (8006098 <CreateMessage+0xc28>)
 8005f94:	0011      	movs	r1, r2
 8005f96:	0018      	movs	r0, r3
 8005f98:	f7ff f9a2 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_temperature);
 8005f9c:	4b3f      	ldr	r3, [pc, #252]	@ (800609c <CreateMessage+0xc2c>)
 8005f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa0:	1c18      	adds	r0, r3, #0
 8005fa2:	f7fd fc77 	bl	8003894 <__aeabi_f2d>
 8005fa6:	0002      	movs	r2, r0
 8005fa8:	000b      	movs	r3, r1
 8005faa:	4c3b      	ldr	r4, [pc, #236]	@ (8006098 <CreateMessage+0xc28>)
 8005fac:	493c      	ldr	r1, [pc, #240]	@ (80060a0 <CreateMessage+0xc30>)
 8005fae:	483d      	ldr	r0, [pc, #244]	@ (80060a4 <CreateMessage+0xc34>)
 8005fb0:	9200      	str	r2, [sp, #0]
 8005fb2:	9301      	str	r3, [sp, #4]
 8005fb4:	0022      	movs	r2, r4
 8005fb6:	f020 fa9b 	bl	80264f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"AHT2x Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_temperature);
#endif
      index += strlen(message);
 8005fba:	4b3a      	ldr	r3, [pc, #232]	@ (80060a4 <CreateMessage+0xc34>)
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f7fa f8d5 	bl	800016c <strlen>
 8005fc2:	0003      	movs	r3, r0
 8005fc4:	b299      	uxth	r1, r3
 8005fc6:	220e      	movs	r2, #14
 8005fc8:	18bb      	adds	r3, r7, r2
 8005fca:	18ba      	adds	r2, r7, r2
 8005fcc:	8812      	ldrh	r2, [r2, #0]
 8005fce:	188a      	adds	r2, r1, r2
 8005fd0:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005fd2:	1cfb      	adds	r3, r7, #3
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d019      	beq.n	800600e <CreateMessage+0xb9e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005fda:	4b32      	ldr	r3, [pc, #200]	@ (80060a4 <CreateMessage+0xc34>)
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f7fa f8c5 	bl	800016c <strlen>
 8005fe2:	0003      	movs	r3, r0
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	4b2f      	ldr	r3, [pc, #188]	@ (80060a4 <CreateMessage+0xc34>)
 8005fe8:	0011      	movs	r1, r2
 8005fea:	0018      	movs	r0, r3
 8005fec:	f7fe ff38 	bl	8004e60 <ESP_Send>
 8005ff0:	0003      	movs	r3, r0
 8005ff2:	001a      	movs	r2, r3
 8005ff4:	4b21      	ldr	r3, [pc, #132]	@ (800607c <CreateMessage+0xc0c>)
 8005ff6:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005ff8:	4b21      	ldr	r3, [pc, #132]	@ (8006080 <CreateMessage+0xc10>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	001a      	movs	r2, r3
 8005ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800607c <CreateMessage+0xc0c>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	4013      	ands	r3, r2
 8006004:	1e5a      	subs	r2, r3, #1
 8006006:	4193      	sbcs	r3, r2
 8006008:	b2da      	uxtb	r2, r3
 800600a:	4b1d      	ldr	r3, [pc, #116]	@ (8006080 <CreateMessage+0xc10>)
 800600c:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(AHTHumidConfigAddr, keybuffer, IdSize);
 800600e:	4b1e      	ldr	r3, [pc, #120]	@ (8006088 <CreateMessage+0xc18>)
 8006010:	482e      	ldr	r0, [pc, #184]	@ (80060cc <CreateMessage+0xc5c>)
 8006012:	220c      	movs	r2, #12
 8006014:	0019      	movs	r1, r3
 8006016:	f006 f8e5 	bl	800c1e4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "humidity")) {
 800601a:	4a2d      	ldr	r2, [pc, #180]	@ (80060d0 <CreateMessage+0xc60>)
 800601c:	492a      	ldr	r1, [pc, #168]	@ (80060c8 <CreateMessage+0xc58>)
 800601e:	4b1a      	ldr	r3, [pc, #104]	@ (8006088 <CreateMessage+0xc18>)
 8006020:	0018      	movs	r0, r3
 8006022:	f7ff f92d 	bl	8005280 <isKeyValid>
 8006026:	1e03      	subs	r3, r0, #0
 8006028:	d06c      	beq.n	8006104 <CreateMessage+0xc94>
      uint8ArrayToString(Buffer, keybuffer);
 800602a:	4a17      	ldr	r2, [pc, #92]	@ (8006088 <CreateMessage+0xc18>)
 800602c:	4b1a      	ldr	r3, [pc, #104]	@ (8006098 <CreateMessage+0xc28>)
 800602e:	0011      	movs	r1, r2
 8006030:	0018      	movs	r0, r3
 8006032:	f7ff f955 	bl	80052e0 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_humidity);
 8006036:	4b19      	ldr	r3, [pc, #100]	@ (800609c <CreateMessage+0xc2c>)
 8006038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603a:	1c18      	adds	r0, r3, #0
 800603c:	f7fd fc2a 	bl	8003894 <__aeabi_f2d>
 8006040:	0002      	movs	r2, r0
 8006042:	000b      	movs	r3, r1
 8006044:	4c14      	ldr	r4, [pc, #80]	@ (8006098 <CreateMessage+0xc28>)
 8006046:	4916      	ldr	r1, [pc, #88]	@ (80060a0 <CreateMessage+0xc30>)
 8006048:	4816      	ldr	r0, [pc, #88]	@ (80060a4 <CreateMessage+0xc34>)
 800604a:	9200      	str	r2, [sp, #0]
 800604c:	9301      	str	r3, [sp, #4]
 800604e:	0022      	movs	r2, r4
 8006050:	f020 fa4e 	bl	80264f0 <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"AHT2x humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_humidity);
  #endif
      index += strlen(message);
 8006054:	4b13      	ldr	r3, [pc, #76]	@ (80060a4 <CreateMessage+0xc34>)
 8006056:	0018      	movs	r0, r3
 8006058:	f7fa f888 	bl	800016c <strlen>
 800605c:	0003      	movs	r3, r0
 800605e:	b299      	uxth	r1, r3
 8006060:	220e      	movs	r2, #14
 8006062:	18bb      	adds	r3, r7, r2
 8006064:	18ba      	adds	r2, r7, r2
 8006066:	8812      	ldrh	r2, [r2, #0]
 8006068:	188a      	adds	r2, r1, r2
 800606a:	801a      	strh	r2, [r3, #0]
      if (send) {
 800606c:	1cfb      	adds	r3, r7, #3
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d047      	beq.n	8006104 <CreateMessage+0xc94>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8006074:	4b0b      	ldr	r3, [pc, #44]	@ (80060a4 <CreateMessage+0xc34>)
 8006076:	0018      	movs	r0, r3
 8006078:	e02c      	b.n	80060d4 <CreateMessage+0xc64>
 800607a:	46c0      	nop			@ (mov r8, r8)
 800607c:	20000859 	.word	0x20000859
 8006080:	20000032 	.word	0x20000032
 8006084:	2000215d 	.word	0x2000215d
 8006088:	20000834 	.word	0x20000834
 800608c:	080800b0 	.word	0x080800b0
 8006090:	0802b048 	.word	0x0802b048
 8006094:	0802b054 	.word	0x0802b054
 8006098:	20000840 	.word	0x20000840
 800609c:	20000704 	.word	0x20000704
 80060a0:	0802af10 	.word	0x0802af10
 80060a4:	200005c4 	.word	0x200005c4
 80060a8:	08080054 	.word	0x08080054
 80060ac:	0802b058 	.word	0x0802b058
 80060b0:	080800bc 	.word	0x080800bc
 80060b4:	0802b060 	.word	0x0802b060
 80060b8:	08080060 	.word	0x08080060
 80060bc:	0802b064 	.word	0x0802b064
 80060c0:	080800c8 	.word	0x080800c8
 80060c4:	0802aff4 	.word	0x0802aff4
 80060c8:	0802b06c 	.word	0x0802b06c
 80060cc:	080800d4 	.word	0x080800d4
 80060d0:	0802b038 	.word	0x0802b038
 80060d4:	f7fa f84a 	bl	800016c <strlen>
 80060d8:	0003      	movs	r3, r0
 80060da:	b29a      	uxth	r2, r3
 80060dc:	4ba3      	ldr	r3, [pc, #652]	@ (800636c <CreateMessage+0xefc>)
 80060de:	0011      	movs	r1, r2
 80060e0:	0018      	movs	r0, r3
 80060e2:	f7fe febd 	bl	8004e60 <ESP_Send>
 80060e6:	0003      	movs	r3, r0
 80060e8:	001a      	movs	r2, r3
 80060ea:	4ba1      	ldr	r3, [pc, #644]	@ (8006370 <CreateMessage+0xf00>)
 80060ec:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80060ee:	4ba1      	ldr	r3, [pc, #644]	@ (8006374 <CreateMessage+0xf04>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	001a      	movs	r2, r3
 80060f4:	4b9e      	ldr	r3, [pc, #632]	@ (8006370 <CreateMessage+0xf00>)
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	4013      	ands	r3, r2
 80060fa:	1e5a      	subs	r2, r3, #1
 80060fc:	4193      	sbcs	r3, r2
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	4b9c      	ldr	r3, [pc, #624]	@ (8006374 <CreateMessage+0xf04>)
 8006102:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsENS160SensorPresent()) {
 8006104:	f007 fa40 	bl	800d588 <IsENS160SensorPresent>
 8006108:	1e03      	subs	r3, r0, #0
 800610a:	d100      	bne.n	800610e <CreateMessage+0xc9e>
 800610c:	e0d1      	b.n	80062b2 <CreateMessage+0xe42>
    ReadUint8ArrayEEprom(ENSAQIConfigAddr, keybuffer, IdSize);
 800610e:	4b9a      	ldr	r3, [pc, #616]	@ (8006378 <CreateMessage+0xf08>)
 8006110:	489a      	ldr	r0, [pc, #616]	@ (800637c <CreateMessage+0xf0c>)
 8006112:	220c      	movs	r2, #12
 8006114:	0019      	movs	r1, r3
 8006116:	f006 f865 	bl	800c1e4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "air quality index")) {
 800611a:	4a99      	ldr	r2, [pc, #612]	@ (8006380 <CreateMessage+0xf10>)
 800611c:	4999      	ldr	r1, [pc, #612]	@ (8006384 <CreateMessage+0xf14>)
 800611e:	4b96      	ldr	r3, [pc, #600]	@ (8006378 <CreateMessage+0xf08>)
 8006120:	0018      	movs	r0, r3
 8006122:	f7ff f8ad 	bl	8005280 <isKeyValid>
 8006126:	1e03      	subs	r3, r0, #0
 8006128:	d037      	beq.n	800619a <CreateMessage+0xd2a>
      uint8ArrayToString(Buffer, keybuffer);
 800612a:	4a93      	ldr	r2, [pc, #588]	@ (8006378 <CreateMessage+0xf08>)
 800612c:	4b96      	ldr	r3, [pc, #600]	@ (8006388 <CreateMessage+0xf18>)
 800612e:	0011      	movs	r1, r2
 8006130:	0018      	movs	r0, r3
 8006132:	f7ff f8d5 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.AQIndexmax);
 8006136:	4b95      	ldr	r3, [pc, #596]	@ (800638c <CreateMessage+0xf1c>)
 8006138:	2255      	movs	r2, #85	@ 0x55
 800613a:	5c9b      	ldrb	r3, [r3, r2]
 800613c:	4a92      	ldr	r2, [pc, #584]	@ (8006388 <CreateMessage+0xf18>)
 800613e:	4994      	ldr	r1, [pc, #592]	@ (8006390 <CreateMessage+0xf20>)
 8006140:	488a      	ldr	r0, [pc, #552]	@ (800636c <CreateMessage+0xefc>)
 8006142:	f020 f9d5 	bl	80264f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 AQI\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"i\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AQIndexmax);
#endif
      index += strlen(message);
 8006146:	4b89      	ldr	r3, [pc, #548]	@ (800636c <CreateMessage+0xefc>)
 8006148:	0018      	movs	r0, r3
 800614a:	f7fa f80f 	bl	800016c <strlen>
 800614e:	0003      	movs	r3, r0
 8006150:	b299      	uxth	r1, r3
 8006152:	220e      	movs	r2, #14
 8006154:	18bb      	adds	r3, r7, r2
 8006156:	18ba      	adds	r2, r7, r2
 8006158:	8812      	ldrh	r2, [r2, #0]
 800615a:	188a      	adds	r2, r1, r2
 800615c:	801a      	strh	r2, [r3, #0]
      if (send) {
 800615e:	1cfb      	adds	r3, r7, #3
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d019      	beq.n	800619a <CreateMessage+0xd2a>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8006166:	4b81      	ldr	r3, [pc, #516]	@ (800636c <CreateMessage+0xefc>)
 8006168:	0018      	movs	r0, r3
 800616a:	f7f9 ffff 	bl	800016c <strlen>
 800616e:	0003      	movs	r3, r0
 8006170:	b29a      	uxth	r2, r3
 8006172:	4b7e      	ldr	r3, [pc, #504]	@ (800636c <CreateMessage+0xefc>)
 8006174:	0011      	movs	r1, r2
 8006176:	0018      	movs	r0, r3
 8006178:	f7fe fe72 	bl	8004e60 <ESP_Send>
 800617c:	0003      	movs	r3, r0
 800617e:	001a      	movs	r2, r3
 8006180:	4b7b      	ldr	r3, [pc, #492]	@ (8006370 <CreateMessage+0xf00>)
 8006182:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8006184:	4b7b      	ldr	r3, [pc, #492]	@ (8006374 <CreateMessage+0xf04>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	001a      	movs	r2, r3
 800618a:	4b79      	ldr	r3, [pc, #484]	@ (8006370 <CreateMessage+0xf00>)
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	4013      	ands	r3, r2
 8006190:	1e5a      	subs	r2, r3, #1
 8006192:	4193      	sbcs	r3, r2
 8006194:	b2da      	uxtb	r2, r3
 8006196:	4b77      	ldr	r3, [pc, #476]	@ (8006374 <CreateMessage+0xf04>)
 8006198:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSTVOCConfigAddr, keybuffer, IdSize);
 800619a:	4b77      	ldr	r3, [pc, #476]	@ (8006378 <CreateMessage+0xf08>)
 800619c:	487d      	ldr	r0, [pc, #500]	@ (8006394 <CreateMessage+0xf24>)
 800619e:	220c      	movs	r2, #12
 80061a0:	0019      	movs	r1, r3
 80061a2:	f006 f81f 	bl	800c1e4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "TVOC")) {
 80061a6:	4a7c      	ldr	r2, [pc, #496]	@ (8006398 <CreateMessage+0xf28>)
 80061a8:	4976      	ldr	r1, [pc, #472]	@ (8006384 <CreateMessage+0xf14>)
 80061aa:	4b73      	ldr	r3, [pc, #460]	@ (8006378 <CreateMessage+0xf08>)
 80061ac:	0018      	movs	r0, r3
 80061ae:	f7ff f867 	bl	8005280 <isKeyValid>
 80061b2:	1e03      	subs	r3, r0, #0
 80061b4:	d037      	beq.n	8006226 <CreateMessage+0xdb6>
      uint8ArrayToString(Buffer, keybuffer);
 80061b6:	4a70      	ldr	r2, [pc, #448]	@ (8006378 <CreateMessage+0xf08>)
 80061b8:	4b73      	ldr	r3, [pc, #460]	@ (8006388 <CreateMessage+0xf18>)
 80061ba:	0011      	movs	r1, r2
 80061bc:	0018      	movs	r0, r3
 80061be:	f7ff f88f 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.TVOCIndex);
 80061c2:	4b72      	ldr	r3, [pc, #456]	@ (800638c <CreateMessage+0xf1c>)
 80061c4:	224a      	movs	r2, #74	@ 0x4a
 80061c6:	5a9b      	ldrh	r3, [r3, r2]
 80061c8:	4a6f      	ldr	r2, [pc, #444]	@ (8006388 <CreateMessage+0xf18>)
 80061ca:	4971      	ldr	r1, [pc, #452]	@ (8006390 <CreateMessage+0xf20>)
 80061cc:	4867      	ldr	r0, [pc, #412]	@ (800636c <CreateMessage+0xefc>)
 80061ce:	f020 f98f 	bl	80264f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 TVOC\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppb\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.TVOCIndex);
#endif
      index += strlen(message);
 80061d2:	4b66      	ldr	r3, [pc, #408]	@ (800636c <CreateMessage+0xefc>)
 80061d4:	0018      	movs	r0, r3
 80061d6:	f7f9 ffc9 	bl	800016c <strlen>
 80061da:	0003      	movs	r3, r0
 80061dc:	b299      	uxth	r1, r3
 80061de:	220e      	movs	r2, #14
 80061e0:	18bb      	adds	r3, r7, r2
 80061e2:	18ba      	adds	r2, r7, r2
 80061e4:	8812      	ldrh	r2, [r2, #0]
 80061e6:	188a      	adds	r2, r1, r2
 80061e8:	801a      	strh	r2, [r3, #0]
      if (send) {
 80061ea:	1cfb      	adds	r3, r7, #3
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d019      	beq.n	8006226 <CreateMessage+0xdb6>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80061f2:	4b5e      	ldr	r3, [pc, #376]	@ (800636c <CreateMessage+0xefc>)
 80061f4:	0018      	movs	r0, r3
 80061f6:	f7f9 ffb9 	bl	800016c <strlen>
 80061fa:	0003      	movs	r3, r0
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	4b5b      	ldr	r3, [pc, #364]	@ (800636c <CreateMessage+0xefc>)
 8006200:	0011      	movs	r1, r2
 8006202:	0018      	movs	r0, r3
 8006204:	f7fe fe2c 	bl	8004e60 <ESP_Send>
 8006208:	0003      	movs	r3, r0
 800620a:	001a      	movs	r2, r3
 800620c:	4b58      	ldr	r3, [pc, #352]	@ (8006370 <CreateMessage+0xf00>)
 800620e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8006210:	4b58      	ldr	r3, [pc, #352]	@ (8006374 <CreateMessage+0xf04>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	001a      	movs	r2, r3
 8006216:	4b56      	ldr	r3, [pc, #344]	@ (8006370 <CreateMessage+0xf00>)
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	4013      	ands	r3, r2
 800621c:	1e5a      	subs	r2, r3, #1
 800621e:	4193      	sbcs	r3, r2
 8006220:	b2da      	uxtb	r2, r3
 8006222:	4b54      	ldr	r3, [pc, #336]	@ (8006374 <CreateMessage+0xf04>)
 8006224:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, keybuffer, IdSize);
 8006226:	4b54      	ldr	r3, [pc, #336]	@ (8006378 <CreateMessage+0xf08>)
 8006228:	485c      	ldr	r0, [pc, #368]	@ (800639c <CreateMessage+0xf2c>)
 800622a:	220c      	movs	r2, #12
 800622c:	0019      	movs	r1, r3
 800622e:	f005 ffd9 	bl	800c1e4 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "eCO2")) {
 8006232:	4a5b      	ldr	r2, [pc, #364]	@ (80063a0 <CreateMessage+0xf30>)
 8006234:	4953      	ldr	r1, [pc, #332]	@ (8006384 <CreateMessage+0xf14>)
 8006236:	4b50      	ldr	r3, [pc, #320]	@ (8006378 <CreateMessage+0xf08>)
 8006238:	0018      	movs	r0, r3
 800623a:	f7ff f821 	bl	8005280 <isKeyValid>
 800623e:	1e03      	subs	r3, r0, #0
 8006240:	d037      	beq.n	80062b2 <CreateMessage+0xe42>
      uint8ArrayToString(Buffer, keybuffer);
 8006242:	4a4d      	ldr	r2, [pc, #308]	@ (8006378 <CreateMessage+0xf08>)
 8006244:	4b50      	ldr	r3, [pc, #320]	@ (8006388 <CreateMessage+0xf18>)
 8006246:	0011      	movs	r1, r2
 8006248:	0018      	movs	r0, r3
 800624a:	f7ff f849 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.eCO2Indexmax);
 800624e:	4b4f      	ldr	r3, [pc, #316]	@ (800638c <CreateMessage+0xf1c>)
 8006250:	2252      	movs	r2, #82	@ 0x52
 8006252:	5a9b      	ldrh	r3, [r3, r2]
 8006254:	4a4c      	ldr	r2, [pc, #304]	@ (8006388 <CreateMessage+0xf18>)
 8006256:	494e      	ldr	r1, [pc, #312]	@ (8006390 <CreateMessage+0xf20>)
 8006258:	4844      	ldr	r0, [pc, #272]	@ (800636c <CreateMessage+0xefc>)
 800625a:	f020 f949 	bl	80264f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 eCO2\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppm\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.eCO2Indexmax);
#endif
      index += strlen(message);
 800625e:	4b43      	ldr	r3, [pc, #268]	@ (800636c <CreateMessage+0xefc>)
 8006260:	0018      	movs	r0, r3
 8006262:	f7f9 ff83 	bl	800016c <strlen>
 8006266:	0003      	movs	r3, r0
 8006268:	b299      	uxth	r1, r3
 800626a:	220e      	movs	r2, #14
 800626c:	18bb      	adds	r3, r7, r2
 800626e:	18ba      	adds	r2, r7, r2
 8006270:	8812      	ldrh	r2, [r2, #0]
 8006272:	188a      	adds	r2, r1, r2
 8006274:	801a      	strh	r2, [r3, #0]
      if (send) {
 8006276:	1cfb      	adds	r3, r7, #3
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d019      	beq.n	80062b2 <CreateMessage+0xe42>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800627e:	4b3b      	ldr	r3, [pc, #236]	@ (800636c <CreateMessage+0xefc>)
 8006280:	0018      	movs	r0, r3
 8006282:	f7f9 ff73 	bl	800016c <strlen>
 8006286:	0003      	movs	r3, r0
 8006288:	b29a      	uxth	r2, r3
 800628a:	4b38      	ldr	r3, [pc, #224]	@ (800636c <CreateMessage+0xefc>)
 800628c:	0011      	movs	r1, r2
 800628e:	0018      	movs	r0, r3
 8006290:	f7fe fde6 	bl	8004e60 <ESP_Send>
 8006294:	0003      	movs	r3, r0
 8006296:	001a      	movs	r2, r3
 8006298:	4b35      	ldr	r3, [pc, #212]	@ (8006370 <CreateMessage+0xf00>)
 800629a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800629c:	4b35      	ldr	r3, [pc, #212]	@ (8006374 <CreateMessage+0xf04>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	001a      	movs	r2, r3
 80062a2:	4b33      	ldr	r3, [pc, #204]	@ (8006370 <CreateMessage+0xf00>)
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	4013      	ands	r3, r2
 80062a8:	1e5a      	subs	r2, r3, #1
 80062aa:	4193      	sbcs	r3, r2
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	4b31      	ldr	r3, [pc, #196]	@ (8006374 <CreateMessage+0xf04>)
 80062b0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(BatVoltConfigAddr, keybuffer, IdSize);
 80062b2:	4b31      	ldr	r3, [pc, #196]	@ (8006378 <CreateMessage+0xf08>)
 80062b4:	483b      	ldr	r0, [pc, #236]	@ (80063a4 <CreateMessage+0xf34>)
 80062b6:	220c      	movs	r2, #12
 80062b8:	0019      	movs	r1, r3
 80062ba:	f005 ff93 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80062be:	4a2e      	ldr	r2, [pc, #184]	@ (8006378 <CreateMessage+0xf08>)
 80062c0:	4b31      	ldr	r3, [pc, #196]	@ (8006388 <CreateMessage+0xf18>)
 80062c2:	0011      	movs	r1, r2
 80062c4:	0018      	movs	r0, r3
 80062c6:	f7ff f80b 	bl	80052e0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
 80062ca:	4b37      	ldr	r3, [pc, #220]	@ (80063a8 <CreateMessage+0xf38>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	1c18      	adds	r0, r3, #0
 80062d0:	f7fd fae0 	bl	8003894 <__aeabi_f2d>
 80062d4:	0002      	movs	r2, r0
 80062d6:	000b      	movs	r3, r1
 80062d8:	4c2b      	ldr	r4, [pc, #172]	@ (8006388 <CreateMessage+0xf18>)
 80062da:	4934      	ldr	r1, [pc, #208]	@ (80063ac <CreateMessage+0xf3c>)
 80062dc:	4823      	ldr	r0, [pc, #140]	@ (800636c <CreateMessage+0xefc>)
 80062de:	9200      	str	r2, [sp, #0]
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	0022      	movs	r2, r4
 80062e4:	f020 f904 	bl	80264f0 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 80062e8:	4b20      	ldr	r3, [pc, #128]	@ (800636c <CreateMessage+0xefc>)
 80062ea:	0018      	movs	r0, r3
 80062ec:	f7f9 ff3e 	bl	800016c <strlen>
 80062f0:	0002      	movs	r2, r0
 80062f2:	4b1e      	ldr	r3, [pc, #120]	@ (800636c <CreateMessage+0xefc>)
 80062f4:	18d3      	adds	r3, r2, r3
 80062f6:	4a2e      	ldr	r2, [pc, #184]	@ (80063b0 <CreateMessage+0xf40>)
 80062f8:	0011      	movs	r1, r2
 80062fa:	0018      	movs	r0, r3
 80062fc:	f020 f8f8 	bl	80264f0 <siprintf>
  index += strlen(message);
 8006300:	4b1a      	ldr	r3, [pc, #104]	@ (800636c <CreateMessage+0xefc>)
 8006302:	0018      	movs	r0, r3
 8006304:	f7f9 ff32 	bl	800016c <strlen>
 8006308:	0003      	movs	r3, r0
 800630a:	b299      	uxth	r1, r3
 800630c:	220e      	movs	r2, #14
 800630e:	18bb      	adds	r3, r7, r2
 8006310:	18ba      	adds	r2, r7, r2
 8006312:	8812      	ldrh	r2, [r2, #0]
 8006314:	188a      	adds	r2, r1, r2
 8006316:	801a      	strh	r2, [r3, #0]
  if (send) {
 8006318:	1cfb      	adds	r3, r7, #3
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d019      	beq.n	8006354 <CreateMessage+0xee4>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8006320:	4b12      	ldr	r3, [pc, #72]	@ (800636c <CreateMessage+0xefc>)
 8006322:	0018      	movs	r0, r3
 8006324:	f7f9 ff22 	bl	800016c <strlen>
 8006328:	0003      	movs	r3, r0
 800632a:	b29a      	uxth	r2, r3
 800632c:	4b0f      	ldr	r3, [pc, #60]	@ (800636c <CreateMessage+0xefc>)
 800632e:	0011      	movs	r1, r2
 8006330:	0018      	movs	r0, r3
 8006332:	f7fe fd95 	bl	8004e60 <ESP_Send>
 8006336:	0003      	movs	r3, r0
 8006338:	001a      	movs	r2, r3
 800633a:	4b0d      	ldr	r3, [pc, #52]	@ (8006370 <CreateMessage+0xf00>)
 800633c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800633e:	4b0d      	ldr	r3, [pc, #52]	@ (8006374 <CreateMessage+0xf04>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	001a      	movs	r2, r3
 8006344:	4b0a      	ldr	r3, [pc, #40]	@ (8006370 <CreateMessage+0xf00>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	4013      	ands	r3, r2
 800634a:	1e5a      	subs	r2, r3, #1
 800634c:	4193      	sbcs	r3, r2
 800634e:	b2da      	uxtb	r2, r3
 8006350:	4b08      	ldr	r3, [pc, #32]	@ (8006374 <CreateMessage+0xf04>)
 8006352:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 8006354:	4b07      	ldr	r3, [pc, #28]	@ (8006374 <CreateMessage+0xf04>)
 8006356:	781a      	ldrb	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	701a      	strb	r2, [r3, #0]
  return index;
 800635c:	230e      	movs	r3, #14
 800635e:	18fb      	adds	r3, r7, r3
 8006360:	881b      	ldrh	r3, [r3, #0]
}
 8006362:	0018      	movs	r0, r3
 8006364:	46bd      	mov	sp, r7
 8006366:	b004      	add	sp, #16
 8006368:	bdb0      	pop	{r4, r5, r7, pc}
 800636a:	46c0      	nop			@ (mov r8, r8)
 800636c:	200005c4 	.word	0x200005c4
 8006370:	20000859 	.word	0x20000859
 8006374:	20000032 	.word	0x20000032
 8006378:	20000834 	.word	0x20000834
 800637c:	080800ec 	.word	0x080800ec
 8006380:	0802b074 	.word	0x0802b074
 8006384:	0802b088 	.word	0x0802b088
 8006388:	20000840 	.word	0x20000840
 800638c:	20000704 	.word	0x20000704
 8006390:	0802af30 	.word	0x0802af30
 8006394:	080800f8 	.word	0x080800f8
 8006398:	0802b090 	.word	0x0802b090
 800639c:	08080104 	.word	0x08080104
 80063a0:	0802b098 	.word	0x0802b098
 80063a4:	0808006c 	.word	0x0808006c
 80063a8:	20002158 	.word	0x20002158
 80063ac:	0802af10 	.word	0x0802af10
 80063b0:	0802b0a0 	.word	0x0802b0a0

080063b4 <StartProg>:

void StartProg(){
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 80063b8:	2064      	movs	r0, #100	@ 0x64
 80063ba:	f00e fb07 	bl	80149cc <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80063be:	4b15      	ldr	r3, [pc, #84]	@ (8006414 <StartProg+0x60>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	2101      	movs	r1, #1
 80063c4:	0018      	movs	r0, r3
 80063c6:	f00f fd5e 	bl	8015e86 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80063ca:	2064      	movs	r0, #100	@ 0x64
 80063cc:	f00e fafe 	bl	80149cc <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80063d0:	4b10      	ldr	r3, [pc, #64]	@ (8006414 <StartProg+0x60>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	2102      	movs	r1, #2
 80063d6:	0018      	movs	r0, r3
 80063d8:	f00f fd55 	bl	8015e86 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80063dc:	23fa      	movs	r3, #250	@ 0xfa
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	0018      	movs	r0, r3
 80063e2:	f00e faf3 	bl	80149cc <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80063e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006414 <StartProg+0x60>)
 80063e8:	2201      	movs	r2, #1
 80063ea:	2101      	movs	r1, #1
 80063ec:	0018      	movs	r0, r3
 80063ee:	f00f fd4a 	bl	8015e86 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80063f2:	23fa      	movs	r3, #250	@ 0xfa
 80063f4:	005b      	lsls	r3, r3, #1
 80063f6:	0018      	movs	r0, r3
 80063f8:	f00e fae8 	bl	80149cc <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 80063fc:	4b05      	ldr	r3, [pc, #20]	@ (8006414 <StartProg+0x60>)
 80063fe:	2201      	movs	r2, #1
 8006400:	2102      	movs	r1, #2
 8006402:	0018      	movs	r0, r3
 8006404:	f00f fd3f 	bl	8015e86 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8006408:	2028      	movs	r0, #40	@ 0x28
 800640a:	f00e fadf 	bl	80149cc <HAL_Delay>
}
 800640e:	46c0      	nop			@ (mov r8, r8)
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	50001c00 	.word	0x50001c00

08006418 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8006418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800641a:	b0d9      	sub	sp, #356	@ 0x164
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	0008      	movs	r0, r1
 8006422:	0011      	movs	r1, r2
 8006424:	4bab      	ldr	r3, [pc, #684]	@ (80066d4 <ParseBuffer+0x2bc>)
 8006426:	24b0      	movs	r4, #176	@ 0xb0
 8006428:	0064      	lsls	r4, r4, #1
 800642a:	191b      	adds	r3, r3, r4
 800642c:	19db      	adds	r3, r3, r7
 800642e:	1c02      	adds	r2, r0, #0
 8006430:	801a      	strh	r2, [r3, #0]
 8006432:	4ba9      	ldr	r3, [pc, #676]	@ (80066d8 <ParseBuffer+0x2c0>)
 8006434:	191b      	adds	r3, r3, r4
 8006436:	19db      	adds	r3, r3, r7
 8006438:	1c0a      	adds	r2, r1, #0
 800643a:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 800643c:	2380      	movs	r3, #128	@ 0x80
 800643e:	005a      	lsls	r2, r3, #1
 8006440:	2348      	movs	r3, #72	@ 0x48
 8006442:	18fb      	adds	r3, r7, r3
 8006444:	2100      	movs	r1, #0
 8006446:	0018      	movs	r0, r3
 8006448:	f020 f99a 	bl	8026780 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 800644c:	2360      	movs	r3, #96	@ 0x60
 800644e:	33ff      	adds	r3, #255	@ 0xff
 8006450:	18fb      	adds	r3, r7, r3
 8006452:	2203      	movs	r2, #3
 8006454:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8006456:	23ae      	movs	r3, #174	@ 0xae
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	18fb      	adds	r3, r7, r3
 800645c:	2200      	movs	r2, #0
 800645e:	801a      	strh	r2, [r3, #0]
 8006460:	e013      	b.n	800648a <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8006462:	20ae      	movs	r0, #174	@ 0xae
 8006464:	0040      	lsls	r0, r0, #1
 8006466:	183b      	adds	r3, r7, r0
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	18d2      	adds	r2, r2, r3
 800646e:	183b      	adds	r3, r7, r0
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	7811      	ldrb	r1, [r2, #0]
 8006474:	4a99      	ldr	r2, [pc, #612]	@ (80066dc <ParseBuffer+0x2c4>)
 8006476:	24b0      	movs	r4, #176	@ 0xb0
 8006478:	0064      	lsls	r4, r4, #1
 800647a:	1912      	adds	r2, r2, r4
 800647c:	19d2      	adds	r2, r2, r7
 800647e:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8006480:	183b      	adds	r3, r7, r0
 8006482:	881a      	ldrh	r2, [r3, #0]
 8006484:	183b      	adds	r3, r7, r0
 8006486:	3201      	adds	r2, #1
 8006488:	801a      	strh	r2, [r3, #0]
 800648a:	23ae      	movs	r3, #174	@ 0xae
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	18fa      	adds	r2, r7, r3
 8006490:	4b90      	ldr	r3, [pc, #576]	@ (80066d4 <ParseBuffer+0x2bc>)
 8006492:	21b0      	movs	r1, #176	@ 0xb0
 8006494:	0049      	lsls	r1, r1, #1
 8006496:	185b      	adds	r3, r3, r1
 8006498:	19db      	adds	r3, r3, r7
 800649a:	8812      	ldrh	r2, [r2, #0]
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d3df      	bcc.n	8006462 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80064a2:	4b8c      	ldr	r3, [pc, #560]	@ (80066d4 <ParseBuffer+0x2bc>)
 80064a4:	185b      	adds	r3, r3, r1
 80064a6:	19db      	adds	r3, r3, r7
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	4a8c      	ldr	r2, [pc, #560]	@ (80066dc <ParseBuffer+0x2c4>)
 80064ac:	1852      	adds	r2, r2, r1
 80064ae:	19d2      	adds	r2, r2, r7
 80064b0:	2100      	movs	r1, #0
 80064b2:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 80064b4:	f00d fd8a 	bl	8013fcc <GetVerboseLevel>
 80064b8:	0003      	movs	r3, r0
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d115      	bne.n	80064ea <ParseBuffer+0xd2>
#ifdef LONGMESSAGES
  if (usblog && Check_USB_PowerOn()) {
 80064be:	4b88      	ldr	r3, [pc, #544]	@ (80066e0 <ParseBuffer+0x2c8>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <ParseBuffer+0xc4>
 80064c6:	f003 fc13 	bl	8009cf0 <Check_USB_PowerOn>
 80064ca:	1e03      	subs	r3, r0, #0
 80064cc:	d006      	beq.n	80064dc <ParseBuffer+0xc4>
    printf_USB("%s\r\n", tempBuf);
 80064ce:	2348      	movs	r3, #72	@ 0x48
 80064d0:	18fa      	adds	r2, r7, r3
 80064d2:	4b84      	ldr	r3, [pc, #528]	@ (80066e4 <ParseBuffer+0x2cc>)
 80064d4:	0011      	movs	r1, r2
 80064d6:	0018      	movs	r0, r3
 80064d8:	f002 fb0e 	bl	8008af8 <printf_USB>
  }
  printf("Receive ParseBuffer: %s\r\n", tempBuf );
 80064dc:	2348      	movs	r3, #72	@ 0x48
 80064de:	18fa      	adds	r2, r7, r3
 80064e0:	4b81      	ldr	r3, [pc, #516]	@ (80066e8 <ParseBuffer+0x2d0>)
 80064e2:	0011      	movs	r1, r2
 80064e4:	0018      	movs	r0, r3
 80064e6:	f01f ff93 	bl	8026410 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	26ac      	movs	r6, #172	@ 0xac
 80064ee:	0076      	lsls	r6, r6, #1
 80064f0:	19ba      	adds	r2, r7, r6
 80064f2:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 80064f4:	4b7d      	ldr	r3, [pc, #500]	@ (80066ec <ParseBuffer+0x2d4>)
 80064f6:	25b0      	movs	r5, #176	@ 0xb0
 80064f8:	006d      	lsls	r5, r5, #1
 80064fa:	195b      	adds	r3, r3, r5
 80064fc:	19db      	adds	r3, r3, r7
 80064fe:	4a7c      	ldr	r2, [pc, #496]	@ (80066f0 <ParseBuffer+0x2d8>)
 8006500:	8811      	ldrh	r1, [r2, #0]
 8006502:	8019      	strh	r1, [r3, #0]
 8006504:	7892      	ldrb	r2, [r2, #2]
 8006506:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8006508:	4b7a      	ldr	r3, [pc, #488]	@ (80066f4 <ParseBuffer+0x2dc>)
 800650a:	195b      	adds	r3, r3, r5
 800650c:	19db      	adds	r3, r3, r7
 800650e:	4a7a      	ldr	r2, [pc, #488]	@ (80066f8 <ParseBuffer+0x2e0>)
 8006510:	6811      	ldr	r1, [r2, #0]
 8006512:	6019      	str	r1, [r3, #0]
 8006514:	8892      	ldrh	r2, [r2, #4]
 8006516:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8006518:	4b78      	ldr	r3, [pc, #480]	@ (80066fc <ParseBuffer+0x2e4>)
 800651a:	195b      	adds	r3, r3, r5
 800651c:	19db      	adds	r3, r3, r7
 800651e:	4a78      	ldr	r2, [pc, #480]	@ (8006700 <ParseBuffer+0x2e8>)
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	2200      	movs	r2, #0
 8006524:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8006526:	4b77      	ldr	r3, [pc, #476]	@ (8006704 <ParseBuffer+0x2ec>)
 8006528:	195b      	adds	r3, r3, r5
 800652a:	19db      	adds	r3, r3, r7
 800652c:	4a76      	ldr	r2, [pc, #472]	@ (8006708 <ParseBuffer+0x2f0>)
 800652e:	6811      	ldr	r1, [r2, #0]
 8006530:	6019      	str	r1, [r3, #0]
 8006532:	8892      	ldrh	r2, [r2, #4]
 8006534:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8006536:	4b75      	ldr	r3, [pc, #468]	@ (800670c <ParseBuffer+0x2f4>)
 8006538:	195b      	adds	r3, r3, r5
 800653a:	19db      	adds	r3, r3, r7
 800653c:	223e      	movs	r2, #62	@ 0x3e
 800653e:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8006540:	4b73      	ldr	r3, [pc, #460]	@ (8006710 <ParseBuffer+0x2f8>)
 8006542:	195b      	adds	r3, r3, r5
 8006544:	19db      	adds	r3, r3, r7
 8006546:	4a73      	ldr	r2, [pc, #460]	@ (8006714 <ParseBuffer+0x2fc>)
 8006548:	ca13      	ldmia	r2!, {r0, r1, r4}
 800654a:	c313      	stmia	r3!, {r0, r1, r4}
 800654c:	8811      	ldrh	r1, [r2, #0]
 800654e:	8019      	strh	r1, [r3, #0]
 8006550:	7892      	ldrb	r2, [r2, #2]
 8006552:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8006554:	4b70      	ldr	r3, [pc, #448]	@ (8006718 <ParseBuffer+0x300>)
 8006556:	195b      	adds	r3, r3, r5
 8006558:	19db      	adds	r3, r3, r7
 800655a:	4a70      	ldr	r2, [pc, #448]	@ (800671c <ParseBuffer+0x304>)
 800655c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800655e:	c313      	stmia	r3!, {r0, r1, r4}
 8006560:	8812      	ldrh	r2, [r2, #0]
 8006562:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8006564:	4b5c      	ldr	r3, [pc, #368]	@ (80066d8 <ParseBuffer+0x2c0>)
 8006566:	195b      	adds	r3, r3, r5
 8006568:	19db      	adds	r3, r3, r7
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <ParseBuffer+0x16e>
    ParsePoint = strstr(tempBuf, OK);
 8006570:	2344      	movs	r3, #68	@ 0x44
 8006572:	18fa      	adds	r2, r7, r3
 8006574:	2348      	movs	r3, #72	@ 0x48
 8006576:	18fb      	adds	r3, r7, r3
 8006578:	0011      	movs	r1, r2
 800657a:	0018      	movs	r0, r3
 800657c:	f020 f93b 	bl	80267f6 <strstr>
 8006580:	0003      	movs	r3, r0
 8006582:	19ba      	adds	r2, r7, r6
 8006584:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8006586:	4b54      	ldr	r3, [pc, #336]	@ (80066d8 <ParseBuffer+0x2c0>)
 8006588:	22b0      	movs	r2, #176	@ 0xb0
 800658a:	0052      	lsls	r2, r2, #1
 800658c:	189b      	adds	r3, r3, r2
 800658e:	19db      	adds	r3, r3, r7
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d10c      	bne.n	80065b0 <ParseBuffer+0x198>
    ParsePoint = strstr(tempBuf, ready);
 8006596:	232c      	movs	r3, #44	@ 0x2c
 8006598:	18fa      	adds	r2, r7, r3
 800659a:	2348      	movs	r3, #72	@ 0x48
 800659c:	18fb      	adds	r3, r7, r3
 800659e:	0011      	movs	r1, r2
 80065a0:	0018      	movs	r0, r3
 80065a2:	f020 f928 	bl	80267f6 <strstr>
 80065a6:	0003      	movs	r3, r0
 80065a8:	22ac      	movs	r2, #172	@ 0xac
 80065aa:	0052      	lsls	r2, r2, #1
 80065ac:	18ba      	adds	r2, r7, r2
 80065ae:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80065b0:	4b49      	ldr	r3, [pc, #292]	@ (80066d8 <ParseBuffer+0x2c0>)
 80065b2:	22b0      	movs	r2, #176	@ 0xb0
 80065b4:	0052      	lsls	r2, r2, #1
 80065b6:	189b      	adds	r3, r3, r2
 80065b8:	19db      	adds	r3, r3, r7
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d10c      	bne.n	80065da <ParseBuffer+0x1c2>
    ParsePoint = strstr(tempBuf, start);
 80065c0:	2328      	movs	r3, #40	@ 0x28
 80065c2:	18fa      	adds	r2, r7, r3
 80065c4:	2348      	movs	r3, #72	@ 0x48
 80065c6:	18fb      	adds	r3, r7, r3
 80065c8:	0011      	movs	r1, r2
 80065ca:	0018      	movs	r0, r3
 80065cc:	f020 f913 	bl	80267f6 <strstr>
 80065d0:	0003      	movs	r3, r0
 80065d2:	22ac      	movs	r2, #172	@ 0xac
 80065d4:	0052      	lsls	r2, r2, #1
 80065d6:	18ba      	adds	r2, r7, r2
 80065d8:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80065da:	4b3f      	ldr	r3, [pc, #252]	@ (80066d8 <ParseBuffer+0x2c0>)
 80065dc:	22b0      	movs	r2, #176	@ 0xb0
 80065de:	0052      	lsls	r2, r2, #1
 80065e0:	189b      	adds	r3, r3, r2
 80065e2:	19db      	adds	r3, r3, r7
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2b05      	cmp	r3, #5
 80065e8:	d10c      	bne.n	8006604 <ParseBuffer+0x1ec>
    ParsePoint = strstr(tempBuf, TIME);
 80065ea:	2308      	movs	r3, #8
 80065ec:	18fa      	adds	r2, r7, r3
 80065ee:	2348      	movs	r3, #72	@ 0x48
 80065f0:	18fb      	adds	r3, r7, r3
 80065f2:	0011      	movs	r1, r2
 80065f4:	0018      	movs	r0, r3
 80065f6:	f020 f8fe 	bl	80267f6 <strstr>
 80065fa:	0003      	movs	r3, r0
 80065fc:	22ac      	movs	r2, #172	@ 0xac
 80065fe:	0052      	lsls	r2, r2, #1
 8006600:	18ba      	adds	r2, r7, r2
 8006602:	6013      	str	r3, [r2, #0]
  }
  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8006604:	233c      	movs	r3, #60	@ 0x3c
 8006606:	18fa      	adds	r2, r7, r3
 8006608:	2448      	movs	r4, #72	@ 0x48
 800660a:	193b      	adds	r3, r7, r4
 800660c:	0011      	movs	r1, r2
 800660e:	0018      	movs	r0, r3
 8006610:	f020 f8f1 	bl	80267f6 <strstr>
 8006614:	0003      	movs	r3, r0
 8006616:	22aa      	movs	r2, #170	@ 0xaa
 8006618:	0052      	lsls	r2, r2, #1
 800661a:	18ba      	adds	r2, r7, r2
 800661c:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800661e:	2318      	movs	r3, #24
 8006620:	18fa      	adds	r2, r7, r3
 8006622:	193b      	adds	r3, r7, r4
 8006624:	0011      	movs	r1, r2
 8006626:	0018      	movs	r0, r3
 8006628:	f020 f8e5 	bl	80267f6 <strstr>
 800662c:	0003      	movs	r3, r0
 800662e:	22a8      	movs	r2, #168	@ 0xa8
 8006630:	0052      	lsls	r2, r2, #1
 8006632:	18ba      	adds	r2, r7, r2
 8006634:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, Credentials.SSID);
 8006636:	4a3a      	ldr	r2, [pc, #232]	@ (8006720 <ParseBuffer+0x308>)
 8006638:	193b      	adds	r3, r7, r4
 800663a:	0011      	movs	r1, r2
 800663c:	0018      	movs	r0, r3
 800663e:	f020 f8da 	bl	80267f6 <strstr>
 8006642:	0003      	movs	r3, r0
 8006644:	22a6      	movs	r2, #166	@ 0xa6
 8006646:	0052      	lsls	r2, r2, #1
 8006648:	18ba      	adds	r2, r7, r2
 800664a:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800664c:	2334      	movs	r3, #52	@ 0x34
 800664e:	18fa      	adds	r2, r7, r3
 8006650:	193b      	adds	r3, r7, r4
 8006652:	0011      	movs	r1, r2
 8006654:	0018      	movs	r0, r3
 8006656:	f020 f8ce 	bl	80267f6 <strstr>
 800665a:	0003      	movs	r3, r0
 800665c:	22a4      	movs	r2, #164	@ 0xa4
 800665e:	0052      	lsls	r2, r2, #1
 8006660:	18ba      	adds	r2, r7, r2
 8006662:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8006664:	4b1b      	ldr	r3, [pc, #108]	@ (80066d4 <ParseBuffer+0x2bc>)
 8006666:	21b0      	movs	r1, #176	@ 0xb0
 8006668:	0049      	lsls	r1, r1, #1
 800666a:	185b      	adds	r3, r3, r1
 800666c:	19db      	adds	r3, r3, r7
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d800      	bhi.n	8006676 <ParseBuffer+0x25e>
 8006674:	e0b5      	b.n	80067e2 <ParseBuffer+0x3ca>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8006676:	22ac      	movs	r2, #172	@ 0xac
 8006678:	0052      	lsls	r2, r2, #1
 800667a:	18bb      	adds	r3, r7, r2
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d056      	beq.n	8006730 <ParseBuffer+0x318>
 8006682:	18bb      	adds	r3, r7, r2
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b4f      	cmp	r3, #79	@ 0x4f
 800668a:	d151      	bne.n	8006730 <ParseBuffer+0x318>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 800668c:	2360      	movs	r3, #96	@ 0x60
 800668e:	33ff      	adds	r3, #255	@ 0xff
 8006690:	18fb      	adds	r3, r7, r3
 8006692:	2200      	movs	r2, #0
 8006694:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8006696:	4b23      	ldr	r3, [pc, #140]	@ (8006724 <ParseBuffer+0x30c>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b12      	cmp	r3, #18
 800669c:	d148      	bne.n	8006730 <ParseBuffer+0x318>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800669e:	4b0d      	ldr	r3, [pc, #52]	@ (80066d4 <ParseBuffer+0x2bc>)
 80066a0:	185b      	adds	r3, r3, r1
 80066a2:	19db      	adds	r3, r3, r7
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80066a8:	d10b      	bne.n	80066c2 <ParseBuffer+0x2aa>
 80066aa:	4b0c      	ldr	r3, [pc, #48]	@ (80066dc <ParseBuffer+0x2c4>)
 80066ac:	185b      	adds	r3, r3, r1
 80066ae:	19db      	adds	r3, r3, r7
 80066b0:	2221      	movs	r2, #33	@ 0x21
 80066b2:	5c9b      	ldrb	r3, [r3, r2]
 80066b4:	2b32      	cmp	r3, #50	@ 0x32
 80066b6:	d104      	bne.n	80066c2 <ParseBuffer+0x2aa>
          ParseTime(tempBuf);
 80066b8:	193b      	adds	r3, r7, r4
 80066ba:	0018      	movs	r0, r3
 80066bc:	f003 fdc6 	bl	800a24c <ParseTime>
 80066c0:	e036      	b.n	8006730 <ParseBuffer+0x318>
        }
        else {
          Error("Error getting time");
 80066c2:	4a19      	ldr	r2, [pc, #100]	@ (8006728 <ParseBuffer+0x310>)
 80066c4:	4b19      	ldr	r3, [pc, #100]	@ (800672c <ParseBuffer+0x314>)
 80066c6:	0019      	movs	r1, r3
 80066c8:	2001      	movs	r0, #1
 80066ca:	f00d fbf5 	bl	8013eb8 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80066ce:	2306      	movs	r3, #6
 80066d0:	e08b      	b.n	80067ea <ParseBuffer+0x3d2>
 80066d2:	46c0      	nop			@ (mov r8, r8)
 80066d4:	fffffea2 	.word	0xfffffea2
 80066d8:	fffffea1 	.word	0xfffffea1
 80066dc:	fffffee8 	.word	0xfffffee8
 80066e0:	200010f7 	.word	0x200010f7
 80066e4:	0802b0a4 	.word	0x0802b0a4
 80066e8:	0802b0ac 	.word	0x0802b0ac
 80066ec:	fffffee4 	.word	0xfffffee4
 80066f0:	0802b0dc 	.word	0x0802b0dc
 80066f4:	fffffedc 	.word	0xfffffedc
 80066f8:	0802b0e0 	.word	0x0802b0e0
 80066fc:	fffffed4 	.word	0xfffffed4
 8006700:	4c494146 	.word	0x4c494146
 8006704:	fffffecc 	.word	0xfffffecc
 8006708:	0802b0e8 	.word	0x0802b0e8
 800670c:	fffffec8 	.word	0xfffffec8
 8006710:	fffffeb8 	.word	0xfffffeb8
 8006714:	0802b0f0 	.word	0x0802b0f0
 8006718:	fffffea8 	.word	0xfffffea8
 800671c:	0802b100 	.word	0x0802b100
 8006720:	200006a0 	.word	0x200006a0
 8006724:	20000701 	.word	0x20000701
 8006728:	0802b0c8 	.word	0x0802b0c8
 800672c:	0802abb8 	.word	0x0802abb8
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8006730:	22ac      	movs	r2, #172	@ 0xac
 8006732:	0052      	lsls	r2, r2, #1
 8006734:	18bb      	adds	r3, r7, r2
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d009      	beq.n	8006750 <ParseBuffer+0x338>
 800673c:	18bb      	adds	r3, r7, r2
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	2b72      	cmp	r3, #114	@ 0x72
 8006744:	d104      	bne.n	8006750 <ParseBuffer+0x338>
      status = RECEIVE_STATUS_READY;
 8006746:	2360      	movs	r3, #96	@ 0x60
 8006748:	33ff      	adds	r3, #255	@ 0xff
 800674a:	18fb      	adds	r3, r7, r3
 800674c:	2202      	movs	r2, #2
 800674e:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8006750:	22ac      	movs	r2, #172	@ 0xac
 8006752:	0052      	lsls	r2, r2, #1
 8006754:	18bb      	adds	r3, r7, r2
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d009      	beq.n	8006770 <ParseBuffer+0x358>
 800675c:	18bb      	adds	r3, r7, r2
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	2b3e      	cmp	r3, #62	@ 0x3e
 8006764:	d104      	bne.n	8006770 <ParseBuffer+0x358>
      status = RECEIVE_STATUS_START;
 8006766:	2360      	movs	r3, #96	@ 0x60
 8006768:	33ff      	adds	r3, #255	@ 0xff
 800676a:	18fb      	adds	r3, r7, r3
 800676c:	2205      	movs	r2, #5
 800676e:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8006770:	22ac      	movs	r2, #172	@ 0xac
 8006772:	0052      	lsls	r2, r2, #1
 8006774:	18bb      	adds	r3, r7, r2
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d009      	beq.n	8006790 <ParseBuffer+0x378>
 800677c:	18bb      	adds	r3, r7, r2
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	2b2b      	cmp	r3, #43	@ 0x2b
 8006784:	d104      	bne.n	8006790 <ParseBuffer+0x378>
      status = RECEIVE_STATUS_TIME;
 8006786:	2360      	movs	r3, #96	@ 0x60
 8006788:	33ff      	adds	r3, #255	@ 0xff
 800678a:	18fb      	adds	r3, r7, r3
 800678c:	220b      	movs	r2, #11
 800678e:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8006790:	22aa      	movs	r2, #170	@ 0xaa
 8006792:	0052      	lsls	r2, r2, #1
 8006794:	18bb      	adds	r3, r7, r2
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d004      	beq.n	80067a6 <ParseBuffer+0x38e>
 800679c:	18bb      	adds	r3, r7, r2
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b45      	cmp	r3, #69	@ 0x45
 80067a4:	d00a      	beq.n	80067bc <ParseBuffer+0x3a4>
 80067a6:	22a4      	movs	r2, #164	@ 0xa4
 80067a8:	0052      	lsls	r2, r2, #1
 80067aa:	18bb      	adds	r3, r7, r2
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d009      	beq.n	80067c6 <ParseBuffer+0x3ae>
 80067b2:	18bb      	adds	r3, r7, r2
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b46      	cmp	r3, #70	@ 0x46
 80067ba:	d104      	bne.n	80067c6 <ParseBuffer+0x3ae>
      status = RECEIVE_STATUS_ERROR;
 80067bc:	2360      	movs	r3, #96	@ 0x60
 80067be:	33ff      	adds	r3, #255	@ 0xff
 80067c0:	18fb      	adds	r3, r7, r3
 80067c2:	2201      	movs	r2, #1
 80067c4:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80067c6:	22a8      	movs	r2, #168	@ 0xa8
 80067c8:	0052      	lsls	r2, r2, #1
 80067ca:	18bb      	adds	r3, r7, r2
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d007      	beq.n	80067e2 <ParseBuffer+0x3ca>
 80067d2:	18bb      	adds	r3, r7, r2
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b57      	cmp	r3, #87	@ 0x57
 80067da:	d102      	bne.n	80067e2 <ParseBuffer+0x3ca>
      ConnectionMade = true;
 80067dc:	4b05      	ldr	r3, [pc, #20]	@ (80067f4 <ParseBuffer+0x3dc>)
 80067de:	2201      	movs	r2, #1
 80067e0:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
    }
  }
  return(status);
 80067e2:	2360      	movs	r3, #96	@ 0x60
 80067e4:	33ff      	adds	r3, #255	@ 0xff
 80067e6:	18fb      	adds	r3, r7, r3
 80067e8:	781b      	ldrb	r3, [r3, #0]

}
 80067ea:	0018      	movs	r0, r3
 80067ec:	46bd      	mov	sp, r7
 80067ee:	b059      	add	sp, #356	@ 0x164
 80067f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067f2:	46c0      	nop			@ (mov r8, r8)
 80067f4:	200005b0 	.word	0x200005b0

080067f8 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80067fe:	4b0b      	ldr	r3, [pc, #44]	@ (800682c <PollAwake+0x34>)
 8006800:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	0018      	movs	r0, r3
 8006806:	f7f9 fcb1 	bl	800016c <strlen>
 800680a:	0003      	movs	r3, r0
 800680c:	b29a      	uxth	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	0011      	movs	r1, r2
 8006812:	0018      	movs	r0, r3
 8006814:	f7fe fb24 	bl	8004e60 <ESP_Send>
 8006818:	1e03      	subs	r3, r0, #0
 800681a:	d001      	beq.n	8006820 <PollAwake+0x28>
    return true;
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <PollAwake+0x2a>
  }
  else{
    return false;
 8006820:	2300      	movs	r3, #0
  }
}
 8006822:	0018      	movs	r0, r3
 8006824:	46bd      	mov	sp, r7
 8006826:	b002      	add	sp, #8
 8006828:	bd80      	pop	{r7, pc}
 800682a:	46c0      	nop			@ (mov r8, r8)
 800682c:	0802b110 	.word	0x0802b110

08006830 <RFPower>:

bool RFPower(){
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8006836:	4b0b      	ldr	r3, [pc, #44]	@ (8006864 <RFPower+0x34>)
 8006838:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	0018      	movs	r0, r3
 800683e:	f7f9 fc95 	bl	800016c <strlen>
 8006842:	0003      	movs	r3, r0
 8006844:	b29a      	uxth	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	0011      	movs	r1, r2
 800684a:	0018      	movs	r0, r3
 800684c:	f7fe fb08 	bl	8004e60 <ESP_Send>
 8006850:	1e03      	subs	r3, r0, #0
 8006852:	d001      	beq.n	8006858 <RFPower+0x28>
    return true;
 8006854:	2301      	movs	r3, #1
 8006856:	e000      	b.n	800685a <RFPower+0x2a>
  }
  else{
    return false;
 8006858:	2300      	movs	r3, #0
  }
}
 800685a:	0018      	movs	r0, r3
 800685c:	46bd      	mov	sp, r7
 800685e:	b002      	add	sp, #8
 8006860:	bd80      	pop	{r7, pc}
 8006862:	46c0      	nop			@ (mov r8, r8)
 8006864:	0802b118 	.word	0x0802b118

08006868 <CheckRFPower>:

bool CheckRFPower(){
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800686e:	4b0b      	ldr	r3, [pc, #44]	@ (800689c <CheckRFPower+0x34>)
 8006870:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	0018      	movs	r0, r3
 8006876:	f7f9 fc79 	bl	800016c <strlen>
 800687a:	0003      	movs	r3, r0
 800687c:	b29a      	uxth	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	0011      	movs	r1, r2
 8006882:	0018      	movs	r0, r3
 8006884:	f7fe faec 	bl	8004e60 <ESP_Send>
 8006888:	1e03      	subs	r3, r0, #0
 800688a:	d001      	beq.n	8006890 <CheckRFPower+0x28>
    return true;
 800688c:	2301      	movs	r3, #1
 800688e:	e000      	b.n	8006892 <CheckRFPower+0x2a>
  }
  else{
    return false;
 8006890:	2300      	movs	r3, #0
  }
}
 8006892:	0018      	movs	r0, r3
 8006894:	46bd      	mov	sp, r7
 8006896:	b002      	add	sp, #8
 8006898:	bd80      	pop	{r7, pc}
 800689a:	46c0      	nop			@ (mov r8, r8)
 800689c:	0802b128 	.word	0x0802b128

080068a0 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80068a6:	4b0b      	ldr	r3, [pc, #44]	@ (80068d4 <ATRestore+0x34>)
 80068a8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	0018      	movs	r0, r3
 80068ae:	f7f9 fc5d 	bl	800016c <strlen>
 80068b2:	0003      	movs	r3, r0
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	0011      	movs	r1, r2
 80068ba:	0018      	movs	r0, r3
 80068bc:	f7fe fad0 	bl	8004e60 <ESP_Send>
 80068c0:	1e03      	subs	r3, r0, #0
 80068c2:	d001      	beq.n	80068c8 <ATRestore+0x28>
    return true;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <ATRestore+0x2a>
  }
  else{
    return false;
 80068c8:	2300      	movs	r3, #0
  }
}
 80068ca:	0018      	movs	r0, r3
 80068cc:	46bd      	mov	sp, r7
 80068ce:	b002      	add	sp, #8
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	46c0      	nop			@ (mov r8, r8)
 80068d4:	0802b138 	.word	0x0802b138

080068d8 <CWINIT>:

bool CWINIT(){
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80068de:	4b0b      	ldr	r3, [pc, #44]	@ (800690c <CWINIT+0x34>)
 80068e0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	0018      	movs	r0, r3
 80068e6:	f7f9 fc41 	bl	800016c <strlen>
 80068ea:	0003      	movs	r3, r0
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	0011      	movs	r1, r2
 80068f2:	0018      	movs	r0, r3
 80068f4:	f7fe fab4 	bl	8004e60 <ESP_Send>
 80068f8:	1e03      	subs	r3, r0, #0
 80068fa:	d001      	beq.n	8006900 <CWINIT+0x28>
    return true;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e000      	b.n	8006902 <CWINIT+0x2a>
  }
  else{
    return false;
 8006900:	2300      	movs	r3, #0
  }
}
 8006902:	0018      	movs	r0, r3
 8006904:	46bd      	mov	sp, r7
 8006906:	b002      	add	sp, #8
 8006908:	bd80      	pop	{r7, pc}
 800690a:	46c0      	nop			@ (mov r8, r8)
 800690c:	0802b148 	.word	0x0802b148

08006910 <CWMODE1>:

bool CWMODE1(){
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8006916:	4b0b      	ldr	r3, [pc, #44]	@ (8006944 <CWMODE1+0x34>)
 8006918:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	0018      	movs	r0, r3
 800691e:	f7f9 fc25 	bl	800016c <strlen>
 8006922:	0003      	movs	r3, r0
 8006924:	b29a      	uxth	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	0011      	movs	r1, r2
 800692a:	0018      	movs	r0, r3
 800692c:	f7fe fa98 	bl	8004e60 <ESP_Send>
 8006930:	1e03      	subs	r3, r0, #0
 8006932:	d001      	beq.n	8006938 <CWMODE1+0x28>
    return true;
 8006934:	2301      	movs	r3, #1
 8006936:	e000      	b.n	800693a <CWMODE1+0x2a>
  }
  else{
    return false;
 8006938:	2300      	movs	r3, #0
  }
}
 800693a:	0018      	movs	r0, r3
 800693c:	46bd      	mov	sp, r7
 800693e:	b002      	add	sp, #8
 8006940:	bd80      	pop	{r7, pc}
 8006942:	46c0      	nop			@ (mov r8, r8)
 8006944:	0802b158 	.word	0x0802b158

08006948 <CWMODE2>:

bool CWMODE2(){
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 800694e:	4b0b      	ldr	r3, [pc, #44]	@ (800697c <CWMODE2+0x34>)
 8006950:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	0018      	movs	r0, r3
 8006956:	f7f9 fc09 	bl	800016c <strlen>
 800695a:	0003      	movs	r3, r0
 800695c:	b29a      	uxth	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	0011      	movs	r1, r2
 8006962:	0018      	movs	r0, r3
 8006964:	f7fe fa7c 	bl	8004e60 <ESP_Send>
 8006968:	1e03      	subs	r3, r0, #0
 800696a:	d001      	beq.n	8006970 <CWMODE2+0x28>
    return true;
 800696c:	2301      	movs	r3, #1
 800696e:	e000      	b.n	8006972 <CWMODE2+0x2a>
  }
  else{
    return false;
 8006970:	2300      	movs	r3, #0
  }
}
 8006972:	0018      	movs	r0, r3
 8006974:	46bd      	mov	sp, r7
 8006976:	b002      	add	sp, #8
 8006978:	bd80      	pop	{r7, pc}
 800697a:	46c0      	nop			@ (mov r8, r8)
 800697c:	0802b168 	.word	0x0802b168

08006980 <CWAUTOCONN>:

bool CWAUTOCONN(){
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8006986:	4b0b      	ldr	r3, [pc, #44]	@ (80069b4 <CWAUTOCONN+0x34>)
 8006988:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	0018      	movs	r0, r3
 800698e:	f7f9 fbed 	bl	800016c <strlen>
 8006992:	0003      	movs	r3, r0
 8006994:	b29a      	uxth	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	0011      	movs	r1, r2
 800699a:	0018      	movs	r0, r3
 800699c:	f7fe fa60 	bl	8004e60 <ESP_Send>
 80069a0:	1e03      	subs	r3, r0, #0
 80069a2:	d001      	beq.n	80069a8 <CWAUTOCONN+0x28>
    return true;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e000      	b.n	80069aa <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80069a8:	2300      	movs	r3, #0
  }
}
 80069aa:	0018      	movs	r0, r3
 80069ac:	46bd      	mov	sp, r7
 80069ae:	b002      	add	sp, #8
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	46c0      	nop			@ (mov r8, r8)
 80069b4:	0802b178 	.word	0x0802b178

080069b8 <CWJAP>:

bool CWJAP()
{
 80069b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ba:	46c6      	mov	lr, r8
 80069bc:	b500      	push	{lr}
 80069be:	b08a      	sub	sp, #40	@ 0x28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	466b      	mov	r3, sp
 80069c4:	4698      	mov	r8, r3
  APtested = true;
 80069c6:	4b36      	ldr	r3, [pc, #216]	@ (8006aa0 <CWJAP+0xe8>)
 80069c8:	2201      	movs	r2, #1
 80069ca:	701a      	strb	r2, [r3, #0]
  getWifiCred();
 80069cc:	f7fd ff98 	bl	8004900 <getWifiCred>
  static char atCommandBuff[112];
  memset(atCommandBuff, '\0', 112);
 80069d0:	4b34      	ldr	r3, [pc, #208]	@ (8006aa4 <CWJAP+0xec>)
 80069d2:	2270      	movs	r2, #112	@ 0x70
 80069d4:	2100      	movs	r1, #0
 80069d6:	0018      	movs	r0, r3
 80069d8:	f01f fed2 	bl	8026780 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", Credentials.SSID, Credentials.Password);
 80069dc:	4b32      	ldr	r3, [pc, #200]	@ (8006aa8 <CWJAP+0xf0>)
 80069de:	4a33      	ldr	r2, [pc, #204]	@ (8006aac <CWJAP+0xf4>)
 80069e0:	4933      	ldr	r1, [pc, #204]	@ (8006ab0 <CWJAP+0xf8>)
 80069e2:	4830      	ldr	r0, [pc, #192]	@ (8006aa4 <CWJAP+0xec>)
 80069e4:	f01f fd84 	bl	80264f0 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80069e8:	4b2e      	ldr	r3, [pc, #184]	@ (8006aa4 <CWJAP+0xec>)
 80069ea:	0018      	movs	r0, r3
 80069ec:	f7f9 fbbe 	bl	800016c <strlen>
 80069f0:	0002      	movs	r2, r0
 80069f2:	210f      	movs	r1, #15
 80069f4:	2018      	movs	r0, #24
 80069f6:	180b      	adds	r3, r1, r0
 80069f8:	19db      	adds	r3, r3, r7
 80069fa:	701a      	strb	r2, [r3, #0]
  char atCommand[len + 1];
 80069fc:	180b      	adds	r3, r1, r0
 80069fe:	19db      	adds	r3, r3, r7
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	1e5a      	subs	r2, r3, #1
 8006a06:	623a      	str	r2, [r7, #32]
 8006a08:	001a      	movs	r2, r3
 8006a0a:	60ba      	str	r2, [r7, #8]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	60fa      	str	r2, [r7, #12]
 8006a10:	68b8      	ldr	r0, [r7, #8]
 8006a12:	68f9      	ldr	r1, [r7, #12]
 8006a14:	0002      	movs	r2, r0
 8006a16:	0f52      	lsrs	r2, r2, #29
 8006a18:	000e      	movs	r6, r1
 8006a1a:	00f6      	lsls	r6, r6, #3
 8006a1c:	617e      	str	r6, [r7, #20]
 8006a1e:	697e      	ldr	r6, [r7, #20]
 8006a20:	4316      	orrs	r6, r2
 8006a22:	617e      	str	r6, [r7, #20]
 8006a24:	0002      	movs	r2, r0
 8006a26:	00d2      	lsls	r2, r2, #3
 8006a28:	613a      	str	r2, [r7, #16]
 8006a2a:	001a      	movs	r2, r3
 8006a2c:	603a      	str	r2, [r7, #0]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	607a      	str	r2, [r7, #4]
 8006a32:	6838      	ldr	r0, [r7, #0]
 8006a34:	6879      	ldr	r1, [r7, #4]
 8006a36:	0002      	movs	r2, r0
 8006a38:	0f52      	lsrs	r2, r2, #29
 8006a3a:	000e      	movs	r6, r1
 8006a3c:	00f5      	lsls	r5, r6, #3
 8006a3e:	4315      	orrs	r5, r2
 8006a40:	0002      	movs	r2, r0
 8006a42:	00d4      	lsls	r4, r2, #3
 8006a44:	3307      	adds	r3, #7
 8006a46:	08db      	lsrs	r3, r3, #3
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	466a      	mov	r2, sp
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	469d      	mov	sp, r3
 8006a50:	466b      	mov	r3, sp
 8006a52:	3300      	adds	r3, #0
 8006a54:	61fb      	str	r3, [r7, #28]
  memset(atCommand, '\0', len + 1);
 8006a56:	240f      	movs	r4, #15
 8006a58:	2518      	movs	r5, #24
 8006a5a:	1963      	adds	r3, r4, r5
 8006a5c:	19db      	adds	r3, r3, r7
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	3301      	adds	r3, #1
 8006a62:	001a      	movs	r2, r3
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	2100      	movs	r1, #0
 8006a68:	0018      	movs	r0, r3
 8006a6a:	f01f fe89 	bl	8026780 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8006a6e:	1963      	adds	r3, r4, r5
 8006a70:	19db      	adds	r3, r3, r7
 8006a72:	781a      	ldrb	r2, [r3, #0]
 8006a74:	490b      	ldr	r1, [pc, #44]	@ (8006aa4 <CWJAP+0xec>)
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	0018      	movs	r0, r3
 8006a7a:	f01f fea8 	bl	80267ce <strncpy>
  return ESP_Send((uint8_t*)atCommand, len);
 8006a7e:	1963      	adds	r3, r4, r5
 8006a80:	19db      	adds	r3, r3, r7
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	0011      	movs	r1, r2
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f7fe f9e8 	bl	8004e60 <ESP_Send>
 8006a90:	0003      	movs	r3, r0
 8006a92:	46c5      	mov	sp, r8
}
 8006a94:	0018      	movs	r0, r3
 8006a96:	46bd      	mov	sp, r7
 8006a98:	b00a      	add	sp, #40	@ 0x28
 8006a9a:	bc80      	pop	{r7}
 8006a9c:	46b8      	mov	r8, r7
 8006a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa0:	200005b1 	.word	0x200005b1
 8006aa4:	2000086c 	.word	0x2000086c
 8006aa8:	200006c0 	.word	0x200006c0
 8006aac:	200006a0 	.word	0x200006a0
 8006ab0:	0802b18c 	.word	0x0802b18c

08006ab4 <CWMODE3>:


bool CWMODE3(){
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8006aba:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae8 <CWMODE3+0x34>)
 8006abc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	f7f9 fb53 	bl	800016c <strlen>
 8006ac6:	0003      	movs	r3, r0
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	0011      	movs	r1, r2
 8006ace:	0018      	movs	r0, r3
 8006ad0:	f7fe f9c6 	bl	8004e60 <ESP_Send>
 8006ad4:	1e03      	subs	r3, r0, #0
 8006ad6:	d001      	beq.n	8006adc <CWMODE3+0x28>
    return true;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e000      	b.n	8006ade <CWMODE3+0x2a>
  }
  else{
    return false;
 8006adc:	2300      	movs	r3, #0
  }
}
 8006ade:	0018      	movs	r0, r3
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	b002      	add	sp, #8
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	46c0      	nop			@ (mov r8, r8)
 8006ae8:	0802b1a4 	.word	0x0802b1a4

08006aec <CWSTATE>:

bool CWSTATE(){
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8006af2:	4b0b      	ldr	r3, [pc, #44]	@ (8006b20 <CWSTATE+0x34>)
 8006af4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	0018      	movs	r0, r3
 8006afa:	f7f9 fb37 	bl	800016c <strlen>
 8006afe:	0003      	movs	r3, r0
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	0011      	movs	r1, r2
 8006b06:	0018      	movs	r0, r3
 8006b08:	f7fe f9aa 	bl	8004e60 <ESP_Send>
 8006b0c:	1e03      	subs	r3, r0, #0
 8006b0e:	d001      	beq.n	8006b14 <CWSTATE+0x28>
    return true;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e000      	b.n	8006b16 <CWSTATE+0x2a>
  }
  else{
    return false;
 8006b14:	2300      	movs	r3, #0
  }
}
 8006b16:	0018      	movs	r0, r3
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	b002      	add	sp, #8
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	46c0      	nop			@ (mov r8, r8)
 8006b20:	0802b1b4 	.word	0x0802b1b4

08006b24 <CWSAP>:

bool CWSAP(){
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8006b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b58 <CWSAP+0x34>)
 8006b2c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	0018      	movs	r0, r3
 8006b32:	f7f9 fb1b 	bl	800016c <strlen>
 8006b36:	0003      	movs	r3, r0
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	0011      	movs	r1, r2
 8006b3e:	0018      	movs	r0, r3
 8006b40:	f7fe f98e 	bl	8004e60 <ESP_Send>
 8006b44:	1e03      	subs	r3, r0, #0
 8006b46:	d001      	beq.n	8006b4c <CWSAP+0x28>
    return true;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e000      	b.n	8006b4e <CWSAP+0x2a>
  }
  else{
    return false;
 8006b4c:	2300      	movs	r3, #0
  }
}
 8006b4e:	0018      	movs	r0, r3
 8006b50:	46bd      	mov	sp, r7
 8006b52:	b002      	add	sp, #8
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	46c0      	nop			@ (mov r8, r8)
 8006b58:	0802b1c4 	.word	0x0802b1c4

08006b5c <CIPMUX>:

bool CIPMUX(){
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8006b62:	4b0b      	ldr	r3, [pc, #44]	@ (8006b90 <CIPMUX+0x34>)
 8006b64:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f7f9 faff 	bl	800016c <strlen>
 8006b6e:	0003      	movs	r3, r0
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	0011      	movs	r1, r2
 8006b76:	0018      	movs	r0, r3
 8006b78:	f7fe f972 	bl	8004e60 <ESP_Send>
 8006b7c:	1e03      	subs	r3, r0, #0
 8006b7e:	d001      	beq.n	8006b84 <CIPMUX+0x28>
    return true;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <CIPMUX+0x2a>
  }
  else{
    return false;
 8006b84:	2300      	movs	r3, #0
  }
}
 8006b86:	0018      	movs	r0, r3
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	b002      	add	sp, #8
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	46c0      	nop			@ (mov r8, r8)
 8006b90:	0802b1e8 	.word	0x0802b1e8

08006b94 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8006b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc8 <WEBSERVER+0x34>)
 8006b9c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	f7f9 fae3 	bl	800016c <strlen>
 8006ba6:	0003      	movs	r3, r0
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	0011      	movs	r1, r2
 8006bae:	0018      	movs	r0, r3
 8006bb0:	f7fe f956 	bl	8004e60 <ESP_Send>
 8006bb4:	1e03      	subs	r3, r0, #0
 8006bb6:	d001      	beq.n	8006bbc <WEBSERVER+0x28>
    return true;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e000      	b.n	8006bbe <WEBSERVER+0x2a>
  }
  else{
    return false;
 8006bbc:	2300      	movs	r3, #0
  }
}
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	b002      	add	sp, #8
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	46c0      	nop			@ (mov r8, r8)
 8006bc8:	0802b1f8 	.word	0x0802b1f8

08006bcc <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8006bcc:	b5b0      	push	{r4, r5, r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af02      	add	r7, sp, #8
  bool txresult = false;
 8006bd2:	1cfb      	adds	r3, r7, #3
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	701a      	strb	r2, [r3, #0]
  uint16_t length = CreateMessage(&txresult, false);
 8006bd8:	1dbc      	adds	r4, r7, #6
 8006bda:	1cfb      	adds	r3, r7, #3
 8006bdc:	2100      	movs	r1, #0
 8006bde:	0018      	movs	r0, r3
 8006be0:	f7fe fc46 	bl	8005470 <CreateMessage>
 8006be4:	0003      	movs	r3, r0
 8006be6:	8023      	strh	r3, [r4, #0]
  static uint8_t boxConfig[IdSize];
  static char Buffer[1+(2*IdSize)];
  static uint8_t URLToUpload[URLToUploadMaxLength];
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8006be8:	4b22      	ldr	r3, [pc, #136]	@ (8006c74 <HTTPCPOST+0xa8>)
 8006bea:	4823      	ldr	r0, [pc, #140]	@ (8006c78 <HTTPCPOST+0xac>)
 8006bec:	220c      	movs	r2, #12
 8006bee:	0019      	movs	r1, r3
 8006bf0:	f005 faf8 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8006bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8006c74 <HTTPCPOST+0xa8>)
 8006bf6:	4b21      	ldr	r3, [pc, #132]	@ (8006c7c <HTTPCPOST+0xb0>)
 8006bf8:	0011      	movs	r1, r2
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	f7fe fb70 	bl	80052e0 <uint8ArrayToString>
//  sprintf(message, "AT+HTTPCPOST=%s/%s/data\",%d,1,%s\r\n", API, Buffer, length, header1);
  ReadUint8ArrayEEprom(URLToUploadConfigAddr, URLToUpload, URLToUploadMaxLength);
 8006c00:	4b1f      	ldr	r3, [pc, #124]	@ (8006c80 <HTTPCPOST+0xb4>)
 8006c02:	4820      	ldr	r0, [pc, #128]	@ (8006c84 <HTTPCPOST+0xb8>)
 8006c04:	2230      	movs	r2, #48	@ 0x30
 8006c06:	0019      	movs	r1, r3
 8006c08:	f005 faec 	bl	800c1e4 <ReadUint8ArrayEEprom>
  if (strlen((char*)URLToUpload) == 0) {
 8006c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8006c80 <HTTPCPOST+0xb4>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10b      	bne.n	8006c2c <HTTPCPOST+0x60>
    strcpy ((char*)URLToUpload,API);
 8006c14:	4b1a      	ldr	r3, [pc, #104]	@ (8006c80 <HTTPCPOST+0xb4>)
 8006c16:	4a1c      	ldr	r2, [pc, #112]	@ (8006c88 <HTTPCPOST+0xbc>)
 8006c18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006c1a:	c313      	stmia	r3!, {r0, r1, r4}
 8006c1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006c1e:	c313      	stmia	r3!, {r0, r1, r4}
 8006c20:	ca03      	ldmia	r2!, {r0, r1}
 8006c22:	c303      	stmia	r3!, {r0, r1}
 8006c24:	8811      	ldrh	r1, [r2, #0]
 8006c26:	8019      	strh	r1, [r3, #0]
 8006c28:	7892      	ldrb	r2, [r2, #2]
 8006c2a:	709a      	strb	r2, [r3, #2]
  }
  sprintf(message, "AT+HTTPCPOST=\"%s/%s/data\",%d,1,%s\r\n", (char*)URLToUpload, Buffer, length, HEADER1);
 8006c2c:	1dbb      	adds	r3, r7, #6
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	4d12      	ldr	r5, [pc, #72]	@ (8006c7c <HTTPCPOST+0xb0>)
 8006c32:	4c13      	ldr	r4, [pc, #76]	@ (8006c80 <HTTPCPOST+0xb4>)
 8006c34:	4915      	ldr	r1, [pc, #84]	@ (8006c8c <HTTPCPOST+0xc0>)
 8006c36:	4816      	ldr	r0, [pc, #88]	@ (8006c90 <HTTPCPOST+0xc4>)
 8006c38:	4a16      	ldr	r2, [pc, #88]	@ (8006c94 <HTTPCPOST+0xc8>)
 8006c3a:	9201      	str	r2, [sp, #4]
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	002b      	movs	r3, r5
 8006c40:	0022      	movs	r2, r4
 8006c42:	f01f fc55 	bl	80264f0 <siprintf>
  uint16_t len = strlen(message);
 8006c46:	4b12      	ldr	r3, [pc, #72]	@ (8006c90 <HTTPCPOST+0xc4>)
 8006c48:	0018      	movs	r0, r3
 8006c4a:	f7f9 fa8f 	bl	800016c <strlen>
 8006c4e:	0002      	movs	r2, r0
 8006c50:	1d3b      	adds	r3, r7, #4
 8006c52:	801a      	strh	r2, [r3, #0]
//  Debug("ESP_send result of header: %d, transmitted data %d chars", txresult, len);
  if(ESP_Send((uint8_t*)message, len)){
 8006c54:	1d3b      	adds	r3, r7, #4
 8006c56:	881a      	ldrh	r2, [r3, #0]
 8006c58:	4b0d      	ldr	r3, [pc, #52]	@ (8006c90 <HTTPCPOST+0xc4>)
 8006c5a:	0011      	movs	r1, r2
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f7fe f8ff 	bl	8004e60 <ESP_Send>
 8006c62:	1e03      	subs	r3, r0, #0
 8006c64:	d001      	beq.n	8006c6a <HTTPCPOST+0x9e>
    return true;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8006c6a:	2300      	movs	r3, #0
  }
}
 8006c6c:	0018      	movs	r0, r3
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	b002      	add	sp, #8
 8006c72:	bdb0      	pop	{r4, r5, r7, pc}
 8006c74:	200008dc 	.word	0x200008dc
 8006c78:	08080000 	.word	0x08080000
 8006c7c:	200008e8 	.word	0x200008e8
 8006c80:	20000904 	.word	0x20000904
 8006c84:	08080110 	.word	0x08080110
 8006c88:	0802b210 	.word	0x0802b210
 8006c8c:	0802b234 	.word	0x0802b234
 8006c90:	200005c4 	.word	0x200005c4
 8006c94:	0802b258 	.word	0x0802b258

08006c98 <SENDMAIL>:

#ifdef USE_MAIL
bool SENDMAIL() {
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
  bool result = false;
 8006c9e:	1dfb      	adds	r3, r7, #7
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	701a      	strb	r2, [r3, #0]
  txLength = CreateMailMessage(&result, true);
 8006ca4:	1dfb      	adds	r3, r7, #7
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	0018      	movs	r0, r3
 8006caa:	f7fe fb3d 	bl	8005328 <CreateMailMessage>
 8006cae:	0003      	movs	r3, r0
 8006cb0:	001a      	movs	r2, r3
 8006cb2:	4b04      	ldr	r3, [pc, #16]	@ (8006cc4 <SENDMAIL+0x2c>)
 8006cb4:	801a      	strh	r2, [r3, #0]
//  Debug("SENDMAIL ESP_Send result = %d, transmitted data %d chars", result, txLength);
  return result;
 8006cb6:	1dfb      	adds	r3, r7, #7
 8006cb8:	781b      	ldrb	r3, [r3, #0]
}
 8006cba:	0018      	movs	r0, r3
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	b002      	add	sp, #8
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	46c0      	nop			@ (mov r8, r8)
 8006cc4:	200005bc 	.word	0x200005bc

08006cc8 <HTTPCPOST_MAILAPI>:

bool HTTPCPOST_MAILAPI() {
 8006cc8:	b5b0      	push	{r4, r5, r7, lr}
 8006cca:	b090      	sub	sp, #64	@ 0x40
 8006ccc:	af02      	add	r7, sp, #8
  bool txresult = false;
 8006cce:	2133      	movs	r1, #51	@ 0x33
 8006cd0:	187b      	adds	r3, r7, r1
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	701a      	strb	r2, [r3, #0]
  uint16_t maillength = CreateMailMessage(&txresult, false);
 8006cd6:	2536      	movs	r5, #54	@ 0x36
 8006cd8:	197c      	adds	r4, r7, r5
 8006cda:	187b      	adds	r3, r7, r1
 8006cdc:	2100      	movs	r1, #0
 8006cde:	0018      	movs	r0, r3
 8006ce0:	f7fe fb22 	bl	8005328 <CreateMailMessage>
 8006ce4:	0003      	movs	r3, r0
 8006ce6:	8023      	strh	r3, [r4, #0]
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 8006ce8:	003b      	movs	r3, r7
 8006cea:	4814      	ldr	r0, [pc, #80]	@ (8006d3c <HTTPCPOST_MAILAPI+0x74>)
 8006cec:	2230      	movs	r2, #48	@ 0x30
 8006cee:	0019      	movs	r1, r3
 8006cf0:	f005 fa78 	bl	800c1e4 <ReadUint8ArrayEEprom>
  sprintf(message, "AT+HTTPCPOST=%s,%d,3,%s,\"accept: application/json\",\"X-Smtp2go-Api-Key: %s\"\r\n", APIMail, maillength, HEADER1, (char*)MailAPIKeyConfig);
 8006cf4:	197b      	adds	r3, r7, r5
 8006cf6:	881c      	ldrh	r4, [r3, #0]
 8006cf8:	4a11      	ldr	r2, [pc, #68]	@ (8006d40 <HTTPCPOST_MAILAPI+0x78>)
 8006cfa:	4912      	ldr	r1, [pc, #72]	@ (8006d44 <HTTPCPOST_MAILAPI+0x7c>)
 8006cfc:	4812      	ldr	r0, [pc, #72]	@ (8006d48 <HTTPCPOST_MAILAPI+0x80>)
 8006cfe:	003b      	movs	r3, r7
 8006d00:	9301      	str	r3, [sp, #4]
 8006d02:	4b12      	ldr	r3, [pc, #72]	@ (8006d4c <HTTPCPOST_MAILAPI+0x84>)
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	0023      	movs	r3, r4
 8006d08:	f01f fbf2 	bl	80264f0 <siprintf>
  uint16_t len = strlen(message);
 8006d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8006d48 <HTTPCPOST_MAILAPI+0x80>)
 8006d0e:	0018      	movs	r0, r3
 8006d10:	f7f9 fa2c 	bl	800016c <strlen>
 8006d14:	0002      	movs	r2, r0
 8006d16:	2134      	movs	r1, #52	@ 0x34
 8006d18:	187b      	adds	r3, r7, r1
 8006d1a:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)){
 8006d1c:	187b      	adds	r3, r7, r1
 8006d1e:	881a      	ldrh	r2, [r3, #0]
 8006d20:	4b09      	ldr	r3, [pc, #36]	@ (8006d48 <HTTPCPOST_MAILAPI+0x80>)
 8006d22:	0011      	movs	r1, r2
 8006d24:	0018      	movs	r0, r3
 8006d26:	f7fe f89b 	bl	8004e60 <ESP_Send>
 8006d2a:	1e03      	subs	r3, r0, #0
 8006d2c:	d001      	beq.n	8006d32 <HTTPCPOST_MAILAPI+0x6a>
    return true;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e000      	b.n	8006d34 <HTTPCPOST_MAILAPI+0x6c>
  }
  return false;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	0018      	movs	r0, r3
 8006d36:	46bd      	mov	sp, r7
 8006d38:	b00e      	add	sp, #56	@ 0x38
 8006d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8006d3c:	080802c0 	.word	0x080802c0
 8006d40:	0802e158 	.word	0x0802e158
 8006d44:	0802b27c 	.word	0x0802b27c
 8006d48:	200005c4 	.word	0x200005c4
 8006d4c:	0802b258 	.word	0x0802b258

08006d50 <SENDDATA>:
#endif

bool SENDDATA(){
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
  bool result = false;
 8006d56:	1dfb      	adds	r3, r7, #7
 8006d58:	2200      	movs	r2, #0
 8006d5a:	701a      	strb	r2, [r3, #0]
  txLength = CreateMessage(&result, true);
 8006d5c:	1dfb      	adds	r3, r7, #7
 8006d5e:	2101      	movs	r1, #1
 8006d60:	0018      	movs	r0, r3
 8006d62:	f7fe fb85 	bl	8005470 <CreateMessage>
 8006d66:	0003      	movs	r3, r0
 8006d68:	001a      	movs	r2, r3
 8006d6a:	4b04      	ldr	r3, [pc, #16]	@ (8006d7c <SENDDATA+0x2c>)
 8006d6c:	801a      	strh	r2, [r3, #0]
//  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
  return result;
 8006d6e:	1dfb      	adds	r3, r7, #7
 8006d70:	781b      	ldrb	r3, [r3, #0]
}
 8006d72:	0018      	movs	r0, r3
 8006d74:	46bd      	mov	sp, r7
 8006d76:	b002      	add	sp, #8
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	46c0      	nop			@ (mov r8, r8)
 8006d7c:	200005bc 	.word	0x200005bc

08006d80 <SLEEP>:

bool SLEEP(){
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8006d86:	4b0b      	ldr	r3, [pc, #44]	@ (8006db4 <SLEEP+0x34>)
 8006d88:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f7f9 f9ed 	bl	800016c <strlen>
 8006d92:	0003      	movs	r3, r0
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	0011      	movs	r1, r2
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f7fe f860 	bl	8004e60 <ESP_Send>
 8006da0:	1e03      	subs	r3, r0, #0
 8006da2:	d001      	beq.n	8006da8 <SLEEP+0x28>
    return true;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e000      	b.n	8006daa <SLEEP+0x2a>
  }
  else{
    return false;
 8006da8:	2300      	movs	r3, #0
  }
}
 8006daa:	0018      	movs	r0, r3
 8006dac:	46bd      	mov	sp, r7
 8006dae:	b002      	add	sp, #8
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	46c0      	nop			@ (mov r8, r8)
 8006db4:	0802b2cc 	.word	0x0802b2cc

08006db8 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006df4 <CIPSNTPCFG+0x3c>)
 8006dc0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	f7f9 f9d1 	bl	800016c <strlen>
 8006dca:	0003      	movs	r3, r0
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	0011      	movs	r1, r2
 8006dd2:	0018      	movs	r0, r3
 8006dd4:	f7fe f844 	bl	8004e60 <ESP_Send>
 8006dd8:	1e03      	subs	r3, r0, #0
 8006dda:	d006      	beq.n	8006dea <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8006ddc:	23fa      	movs	r3, #250	@ 0xfa
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	0018      	movs	r0, r3
 8006de2:	f00d fdf3 	bl	80149cc <HAL_Delay>
    return true;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e000      	b.n	8006dec <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8006dea:	2300      	movs	r3, #0
  }
}
 8006dec:	0018      	movs	r0, r3
 8006dee:	46bd      	mov	sp, r7
 8006df0:	b002      	add	sp, #8
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	0802b2dc 	.word	0x0802b2dc

08006df8 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8006e2c <CIPSNTPTIME+0x34>)
 8006e00:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	0018      	movs	r0, r3
 8006e06:	f7f9 f9b1 	bl	800016c <strlen>
 8006e0a:	0003      	movs	r3, r0
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	0011      	movs	r1, r2
 8006e12:	0018      	movs	r0, r3
 8006e14:	f7fe f824 	bl	8004e60 <ESP_Send>
 8006e18:	1e03      	subs	r3, r0, #0
 8006e1a:	d001      	beq.n	8006e20 <CIPSNTPTIME+0x28>
    return true;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e000      	b.n	8006e22 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8006e20:	2300      	movs	r3, #0
  }
}
 8006e22:	0018      	movs	r0, r3
 8006e24:	46bd      	mov	sp, r7
 8006e26:	b002      	add	sp, #8
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	46c0      	nop			@ (mov r8, r8)
 8006e2c:	0802b32c 	.word	0x0802b32c

08006e30 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8006e36:	4b0b      	ldr	r3, [pc, #44]	@ (8006e64 <CIPSNTPINTV+0x34>)
 8006e38:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f7f9 f995 	bl	800016c <strlen>
 8006e42:	0003      	movs	r3, r0
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	0011      	movs	r1, r2
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	f7fe f808 	bl	8004e60 <ESP_Send>
 8006e50:	1e03      	subs	r3, r0, #0
 8006e52:	d001      	beq.n	8006e58 <CIPSNTPINTV+0x28>
    return true;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e000      	b.n	8006e5a <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8006e58:	2300      	movs	r3, #0
  }
}
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	b002      	add	sp, #8
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	46c0      	nop			@ (mov r8, r8)
 8006e64:	0802b340 	.word	0x0802b340

08006e68 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8006e68:	b5b0      	push	{r4, r5, r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	0002      	movs	r2, r0
 8006e70:	1dfb      	adds	r3, r7, #7
 8006e72:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8006e74:	4b6c      	ldr	r3, [pc, #432]	@ (8007028 <DMA_ProcessBuffer+0x1c0>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	200e      	movs	r0, #14
 8006e7e:	183b      	adds	r3, r7, r0
 8006e80:	2180      	movs	r1, #128	@ 0x80
 8006e82:	0049      	lsls	r1, r1, #1
 8006e84:	1a8a      	subs	r2, r1, r2
 8006e86:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8006e88:	230d      	movs	r3, #13
 8006e8a:	18fb      	adds	r3, r7, r3
 8006e8c:	2203      	movs	r2, #3
 8006e8e:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8006e90:	183b      	adds	r3, r7, r0
 8006e92:	881a      	ldrh	r2, [r3, #0]
 8006e94:	2380      	movs	r3, #128	@ 0x80
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d903      	bls.n	8006ea4 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8006e9c:	183b      	adds	r3, r7, r0
 8006e9e:	2280      	movs	r2, #128	@ 0x80
 8006ea0:	0052      	lsls	r2, r2, #1
 8006ea2:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8006ea4:	4b61      	ldr	r3, [pc, #388]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	001a      	movs	r2, r3
 8006eac:	230e      	movs	r3, #14
 8006eae:	18fb      	adds	r3, r7, r3
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d131      	bne.n	8006f1a <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8006eb6:	4b5e      	ldr	r3, [pc, #376]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	2b14      	cmp	r3, #20
 8006ebc:	d91b      	bls.n	8006ef6 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8006ebe:	4b5c      	ldr	r3, [pc, #368]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8006ec4:	4b5b      	ldr	r3, [pc, #364]	@ (8007034 <DMA_ProcessBuffer+0x1cc>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d107      	bne.n	8006edc <DMA_ProcessBuffer+0x74>
 8006ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8007038 <DMA_ProcessBuffer+0x1d0>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8006ed4:	230d      	movs	r3, #13
 8006ed6:	18fb      	adds	r3, r7, r3
 8006ed8:	2207      	movs	r2, #7
 8006eda:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8006edc:	4b55      	ldr	r3, [pc, #340]	@ (8007034 <DMA_ProcessBuffer+0x1cc>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d103      	bne.n	8006eec <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8006ee4:	4b55      	ldr	r3, [pc, #340]	@ (800703c <DMA_ProcessBuffer+0x1d4>)
 8006ee6:	220b      	movs	r2, #11
 8006ee8:	701a      	strb	r2, [r3, #0]
 8006eea:	e016      	b.n	8006f1a <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8006eec:	230d      	movs	r3, #13
 8006eee:	18fb      	adds	r3, r7, r3
 8006ef0:	2206      	movs	r2, #6
 8006ef2:	701a      	strb	r2, [r3, #0]
 8006ef4:	e011      	b.n	8006f1a <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8006ef6:	4b4e      	ldr	r3, [pc, #312]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	3301      	adds	r3, #1
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	4b4c      	ldr	r3, [pc, #304]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006f00:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8006f02:	f00d fd59 	bl	80149b8 <HAL_GetTick>
 8006f06:	0003      	movs	r3, r0
 8006f08:	33f5      	adds	r3, #245	@ 0xf5
 8006f0a:	33ff      	adds	r3, #255	@ 0xff
 8006f0c:	001a      	movs	r2, r3
 8006f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8007040 <DMA_ProcessBuffer+0x1d8>)
 8006f10:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8006f12:	230d      	movs	r3, #13
 8006f14:	18fb      	adds	r3, r7, r3
 8006f16:	2204      	movs	r2, #4
 8006f18:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8006f1a:	4b44      	ldr	r3, [pc, #272]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	001a      	movs	r2, r3
 8006f22:	210e      	movs	r1, #14
 8006f24:	187b      	adds	r3, r7, r1
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d100      	bne.n	8006f2e <DMA_ProcessBuffer+0xc6>
 8006f2c:	e075      	b.n	800701a <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8006f2e:	4b40      	ldr	r3, [pc, #256]	@ (8007030 <DMA_ProcessBuffer+0x1c8>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8006f34:	4b43      	ldr	r3, [pc, #268]	@ (8007044 <DMA_ProcessBuffer+0x1dc>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d109      	bne.n	8006f58 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8006f44:	187b      	adds	r3, r7, r1
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8007044 <DMA_ProcessBuffer+0x1dc>)
 8006f4c:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8006f4e:	230d      	movs	r3, #13
 8006f50:	18fb      	adds	r3, r7, r3
 8006f52:	220a      	movs	r2, #10
 8006f54:	701a      	strb	r2, [r3, #0]
 8006f56:	e060      	b.n	800701a <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8006f58:	4b3a      	ldr	r3, [pc, #232]	@ (8007044 <DMA_ProcessBuffer+0x1dc>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	001a      	movs	r2, r3
 8006f60:	210e      	movs	r1, #14
 8006f62:	187b      	adds	r3, r7, r1
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d009      	beq.n	8006f7e <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8006f6a:	187b      	adds	r3, r7, r1
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	4b34      	ldr	r3, [pc, #208]	@ (8007044 <DMA_ProcessBuffer+0x1dc>)
 8006f72:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8006f74:	230d      	movs	r3, #13
 8006f76:	18fb      	adds	r3, r7, r3
 8006f78:	220a      	movs	r2, #10
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	e04d      	b.n	800701a <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8006f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	001a      	movs	r2, r3
 8006f86:	210e      	movs	r1, #14
 8006f88:	187b      	adds	r3, r7, r1
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d917      	bls.n	8006fc0 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8006f90:	4b26      	ldr	r3, [pc, #152]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	001a      	movs	r2, r3
 8006f98:	4b2b      	ldr	r3, [pc, #172]	@ (8007048 <DMA_ProcessBuffer+0x1e0>)
 8006f9a:	18d0      	adds	r0, r2, r3
 8006f9c:	4b23      	ldr	r3, [pc, #140]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	001a      	movs	r2, r3
 8006fa4:	187b      	adds	r3, r7, r1
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	1a9b      	subs	r3, r3, r2
 8006faa:	b299      	uxth	r1, r3
 8006fac:	230d      	movs	r3, #13
 8006fae:	18fc      	adds	r4, r7, r3
 8006fb0:	1dfb      	adds	r3, r7, #7
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	001a      	movs	r2, r3
 8006fb6:	f7ff fa2f 	bl	8006418 <ParseBuffer>
 8006fba:	0003      	movs	r3, r0
 8006fbc:	7023      	strb	r3, [r4, #0]
 8006fbe:	e026      	b.n	800700e <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8006fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	001a      	movs	r2, r3
 8006fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8007048 <DMA_ProcessBuffer+0x1e0>)
 8006fca:	18d0      	adds	r0, r2, r3
 8006fcc:	4b17      	ldr	r3, [pc, #92]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	001a      	movs	r2, r3
 8006fd4:	2380      	movs	r3, #128	@ 0x80
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	1a9b      	subs	r3, r3, r2
 8006fda:	b299      	uxth	r1, r3
 8006fdc:	250d      	movs	r5, #13
 8006fde:	197c      	adds	r4, r7, r5
 8006fe0:	1dfb      	adds	r3, r7, #7
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	001a      	movs	r2, r3
 8006fe6:	f7ff fa17 	bl	8006418 <ParseBuffer>
 8006fea:	0003      	movs	r3, r0
 8006fec:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8006fee:	210e      	movs	r1, #14
 8006ff0:	187b      	adds	r3, r7, r1
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8006ff8:	197c      	adds	r4, r7, r5
 8006ffa:	1dfb      	adds	r3, r7, #7
 8006ffc:	781a      	ldrb	r2, [r3, #0]
 8006ffe:	187b      	adds	r3, r7, r1
 8007000:	8819      	ldrh	r1, [r3, #0]
 8007002:	4b11      	ldr	r3, [pc, #68]	@ (8007048 <DMA_ProcessBuffer+0x1e0>)
 8007004:	0018      	movs	r0, r3
 8007006:	f7ff fa07 	bl	8006418 <ParseBuffer>
 800700a:	0003      	movs	r3, r0
 800700c:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 800700e:	230e      	movs	r3, #14
 8007010:	18fb      	adds	r3, r7, r3
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	b2da      	uxtb	r2, r3
 8007016:	4b05      	ldr	r3, [pc, #20]	@ (800702c <DMA_ProcessBuffer+0x1c4>)
 8007018:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 800701a:	230d      	movs	r3, #13
 800701c:	18fb      	adds	r3, r7, r3
 800701e:	781b      	ldrb	r3, [r3, #0]
}
 8007020:	0018      	movs	r0, r3
 8007022:	46bd      	mov	sp, r7
 8007024:	b004      	add	sp, #16
 8007026:	bdb0      	pop	{r4, r5, r7, pc}
 8007028:	20002454 	.word	0x20002454
 800702c:	20000934 	.word	0x20000934
 8007030:	2000069c 	.word	0x2000069c
 8007034:	20000701 	.word	0x20000701
 8007038:	20000001 	.word	0x20000001
 800703c:	20000030 	.word	0x20000030
 8007040:	20000694 	.word	0x20000694
 8007044:	20000935 	.word	0x20000935
 8007048:	200004ac 	.word	0x200004ac

0800704c <clearDMABuffer>:

void clearDMABuffer(){
 800704c:	b580      	push	{r7, lr}
 800704e:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8007050:	2380      	movs	r3, #128	@ 0x80
 8007052:	005a      	lsls	r2, r3, #1
 8007054:	4b03      	ldr	r3, [pc, #12]	@ (8007064 <clearDMABuffer+0x18>)
 8007056:	2100      	movs	r1, #0
 8007058:	0018      	movs	r0, r3
 800705a:	f01f fb91 	bl	8026780 <memset>
}
 800705e:	46c0      	nop			@ (mov r8, r8)
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	200004ac 	.word	0x200004ac

08007068 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	0002      	movs	r2, r0
 8007070:	1dfb      	adds	r3, r7, #7
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	1dbb      	adds	r3, r7, #6
 8007076:	1c0a      	adds	r2, r1, #0
 8007078:	701a      	strb	r2, [r3, #0]
  bool value = false;
 800707a:	210f      	movs	r1, #15
 800707c:	187b      	adds	r3, r7, r1
 800707e:	2200      	movs	r2, #0
 8007080:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8007082:	1dbb      	adds	r3, r7, #6
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d105      	bne.n	8007096 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 800708a:	187b      	adds	r3, r7, r1
 800708c:	1dfa      	adds	r2, r7, #7
 800708e:	7812      	ldrb	r2, [r2, #0]
 8007090:	4251      	negs	r1, r2
 8007092:	414a      	adcs	r2, r1
 8007094:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8007096:	1dbb      	adds	r3, r7, #6
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d107      	bne.n	80070ae <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800709e:	230f      	movs	r3, #15
 80070a0:	18fb      	adds	r3, r7, r3
 80070a2:	1dfa      	adds	r2, r7, #7
 80070a4:	7812      	ldrb	r2, [r2, #0]
 80070a6:	3a02      	subs	r2, #2
 80070a8:	4251      	negs	r1, r2
 80070aa:	414a      	adcs	r2, r1
 80070ac:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 80070ae:	1dbb      	adds	r3, r7, #6
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d107      	bne.n	80070c6 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 80070b6:	230f      	movs	r3, #15
 80070b8:	18fb      	adds	r3, r7, r3
 80070ba:	1dfa      	adds	r2, r7, #7
 80070bc:	7812      	ldrb	r2, [r2, #0]
 80070be:	3a05      	subs	r2, #5
 80070c0:	4251      	negs	r1, r2
 80070c2:	414a      	adcs	r2, r1
 80070c4:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 80070c6:	1dbb      	adds	r3, r7, #6
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	2b05      	cmp	r3, #5
 80070cc:	d107      	bne.n	80070de <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 80070ce:	230f      	movs	r3, #15
 80070d0:	18fb      	adds	r3, r7, r3
 80070d2:	1dfa      	adds	r2, r7, #7
 80070d4:	7812      	ldrb	r2, [r2, #0]
 80070d6:	3a0b      	subs	r2, #11
 80070d8:	4251      	negs	r1, r2
 80070da:	414a      	adcs	r2, r1
 80070dc:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 80070de:	230f      	movs	r3, #15
 80070e0:	18fb      	adds	r3, r7, r3
 80070e2:	781b      	ldrb	r3, [r3, #0]
}
 80070e4:	0018      	movs	r0, r3
 80070e6:	46bd      	mov	sp, r7
 80070e8:	b004      	add	sp, #16
 80070ea:	bd80      	pop	{r7, pc}

080070ec <AT_Send>:

bool AT_Send(AT_Commands state){
 80070ec:	b590      	push	{r4, r7, lr}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	0002      	movs	r2, r0
 80070f4:	1dfb      	adds	r3, r7, #7
 80070f6:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80070f8:	230f      	movs	r3, #15
 80070fa:	18fb      	adds	r3, r7, r3
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]
  switch (state){
 8007100:	1dfb      	adds	r3, r7, #7
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2b16      	cmp	r3, #22
 8007106:	d900      	bls.n	800710a <AT_Send+0x1e>
 8007108:	e161      	b.n	80073ce <AT_Send+0x2e2>
 800710a:	009a      	lsls	r2, r3, #2
 800710c:	4bb3      	ldr	r3, [pc, #716]	@ (80073dc <AT_Send+0x2f0>)
 800710e:	18d3      	adds	r3, r2, r3
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8007114:	4bb2      	ldr	r3, [pc, #712]	@ (80073e0 <AT_Send+0x2f4>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	0018      	movs	r0, r3
 800711a:	f00c fe77 	bl	8013e0c <TimestampIsReached>
 800711e:	1e03      	subs	r3, r0, #0
 8007120:	d100      	bne.n	8007124 <AT_Send+0x38>
 8007122:	e153      	b.n	80073cc <AT_Send+0x2e0>
    Debug("AT_WAKEUP");
 8007124:	4aaf      	ldr	r2, [pc, #700]	@ (80073e4 <AT_Send+0x2f8>)
 8007126:	4bb0      	ldr	r3, [pc, #704]	@ (80073e8 <AT_Send+0x2fc>)
 8007128:	0019      	movs	r1, r3
 800712a:	2003      	movs	r0, #3
 800712c:	f00c fec4 	bl	8013eb8 <CreateLine>
    ATCommandSend = PollAwake();
 8007130:	230f      	movs	r3, #15
 8007132:	18fc      	adds	r4, r7, r3
 8007134:	f7ff fb60 	bl	80067f8 <PollAwake>
 8007138:	0003      	movs	r3, r0
 800713a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800713c:	f00d fc3c 	bl	80149b8 <HAL_GetTick>
 8007140:	0003      	movs	r3, r0
 8007142:	3332      	adds	r3, #50	@ 0x32
 8007144:	001a      	movs	r2, r3
 8007146:	4ba6      	ldr	r3, [pc, #664]	@ (80073e0 <AT_Send+0x2f4>)
 8007148:	601a      	str	r2, [r3, #0]
  }
  break;
 800714a:	e13f      	b.n	80073cc <AT_Send+0x2e0>

  case AT_SET_RFPOWER:
//    Debug("Setting RF Power");
    ATCommandSend = RFPower();
 800714c:	230f      	movs	r3, #15
 800714e:	18fc      	adds	r4, r7, r3
 8007150:	f7ff fb6e 	bl	8006830 <RFPower>
 8007154:	0003      	movs	r3, r0
 8007156:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007158:	f00d fc2e 	bl	80149b8 <HAL_GetTick>
 800715c:	0003      	movs	r3, r0
 800715e:	330a      	adds	r3, #10
 8007160:	001a      	movs	r2, r3
 8007162:	4b9f      	ldr	r3, [pc, #636]	@ (80073e0 <AT_Send+0x2f4>)
 8007164:	601a      	str	r2, [r3, #0]
    break;
 8007166:	e132      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CHECK_RFPOWER:
//    Debug("Checking RF Power");
    ATCommandSend = CheckRFPower();
 8007168:	230f      	movs	r3, #15
 800716a:	18fc      	adds	r4, r7, r3
 800716c:	f7ff fb7c 	bl	8006868 <CheckRFPower>
 8007170:	0003      	movs	r3, r0
 8007172:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007174:	f00d fc20 	bl	80149b8 <HAL_GetTick>
 8007178:	0003      	movs	r3, r0
 800717a:	330a      	adds	r3, #10
 800717c:	001a      	movs	r2, r3
 800717e:	4b98      	ldr	r3, [pc, #608]	@ (80073e0 <AT_Send+0x2f4>)
 8007180:	601a      	str	r2, [r3, #0]
    break;
 8007182:	e124      	b.n	80073ce <AT_Send+0x2e2>

  case AT_RESTORE:
//    Debug("Restoring ESP");
    ATCommandSend = ATRestore();
 8007184:	230f      	movs	r3, #15
 8007186:	18fc      	adds	r4, r7, r3
 8007188:	f7ff fb8a 	bl	80068a0 <ATRestore>
 800718c:	0003      	movs	r3, r0
 800718e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8007190:	f00d fc12 	bl	80149b8 <HAL_GetTick>
 8007194:	0003      	movs	r3, r0
 8007196:	3332      	adds	r3, #50	@ 0x32
 8007198:	001a      	movs	r2, r3
 800719a:	4b91      	ldr	r3, [pc, #580]	@ (80073e0 <AT_Send+0x2f4>)
 800719c:	601a      	str	r2, [r3, #0]
    break;
 800719e:	e116      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWINIT:
//    Debug("Initializing Wi-Fi");
    ATCommandSend = CWINIT();
 80071a0:	230f      	movs	r3, #15
 80071a2:	18fc      	adds	r4, r7, r3
 80071a4:	f7ff fb98 	bl	80068d8 <CWINIT>
 80071a8:	0003      	movs	r3, r0
 80071aa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80071ac:	f00d fc04 	bl	80149b8 <HAL_GetTick>
 80071b0:	0003      	movs	r3, r0
 80071b2:	33f5      	adds	r3, #245	@ 0xf5
 80071b4:	33ff      	adds	r3, #255	@ 0xff
 80071b6:	001a      	movs	r2, r3
 80071b8:	4b89      	ldr	r3, [pc, #548]	@ (80073e0 <AT_Send+0x2f4>)
 80071ba:	601a      	str	r2, [r3, #0]
    break;
 80071bc:	e107      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWSTATE:
//    Debug("Checking current SSID");
    ATCommandSend = CWSTATE();
 80071be:	230f      	movs	r3, #15
 80071c0:	18fc      	adds	r4, r7, r3
 80071c2:	f7ff fc93 	bl	8006aec <CWSTATE>
 80071c6:	0003      	movs	r3, r0
 80071c8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80071ca:	f00d fbf5 	bl	80149b8 <HAL_GetTick>
 80071ce:	0003      	movs	r3, r0
 80071d0:	33f5      	adds	r3, #245	@ 0xf5
 80071d2:	33ff      	adds	r3, #255	@ 0xff
 80071d4:	001a      	movs	r2, r3
 80071d6:	4b82      	ldr	r3, [pc, #520]	@ (80073e0 <AT_Send+0x2f4>)
 80071d8:	601a      	str	r2, [r3, #0]
    break;
 80071da:	e0f8      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWMODE1:
//    Debug("Setting to station mode");
    ATCommandSend = CWMODE1();
 80071dc:	230f      	movs	r3, #15
 80071de:	18fc      	adds	r4, r7, r3
 80071e0:	f7ff fb96 	bl	8006910 <CWMODE1>
 80071e4:	0003      	movs	r3, r0
 80071e6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80071e8:	f00d fbe6 	bl	80149b8 <HAL_GetTick>
 80071ec:	0003      	movs	r3, r0
 80071ee:	330a      	adds	r3, #10
 80071f0:	001a      	movs	r2, r3
 80071f2:	4b7b      	ldr	r3, [pc, #492]	@ (80073e0 <AT_Send+0x2f4>)
 80071f4:	601a      	str	r2, [r3, #0]
    break;
 80071f6:	e0ea      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWMODE2:
//    Debug("Setting to station mode");
    ATCommandSend = CWMODE2();
 80071f8:	230f      	movs	r3, #15
 80071fa:	18fc      	adds	r4, r7, r3
 80071fc:	f7ff fba4 	bl	8006948 <CWMODE2>
 8007200:	0003      	movs	r3, r0
 8007202:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007204:	f00d fbd8 	bl	80149b8 <HAL_GetTick>
 8007208:	0003      	movs	r3, r0
 800720a:	330a      	adds	r3, #10
 800720c:	001a      	movs	r2, r3
 800720e:	4b74      	ldr	r3, [pc, #464]	@ (80073e0 <AT_Send+0x2f4>)
 8007210:	601a      	str	r2, [r3, #0]
    break;
 8007212:	e0dc      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWAUTOCONN:
//    Debug("Setting auto connect");
    ATCommandSend = CWAUTOCONN();
 8007214:	230f      	movs	r3, #15
 8007216:	18fc      	adds	r4, r7, r3
 8007218:	f7ff fbb2 	bl	8006980 <CWAUTOCONN>
 800721c:	0003      	movs	r3, r0
 800721e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007220:	f00d fbca 	bl	80149b8 <HAL_GetTick>
 8007224:	0003      	movs	r3, r0
 8007226:	330a      	adds	r3, #10
 8007228:	001a      	movs	r2, r3
 800722a:	4b6d      	ldr	r3, [pc, #436]	@ (80073e0 <AT_Send+0x2f4>)
 800722c:	601a      	str	r2, [r3, #0]
    break;
 800722e:	e0ce      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8007230:	4a6e      	ldr	r2, [pc, #440]	@ (80073ec <AT_Send+0x300>)
 8007232:	4b6d      	ldr	r3, [pc, #436]	@ (80073e8 <AT_Send+0x2fc>)
 8007234:	0019      	movs	r1, r3
 8007236:	2003      	movs	r0, #3
 8007238:	f00c fe3e 	bl	8013eb8 <CreateLine>
    ATCommandSend = CWJAP();
 800723c:	230f      	movs	r3, #15
 800723e:	18fc      	adds	r4, r7, r3
 8007240:	f7ff fbba 	bl	80069b8 <CWJAP>
 8007244:	0003      	movs	r3, r0
 8007246:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8007248:	f00d fbb6 	bl	80149b8 <HAL_GetTick>
 800724c:	0003      	movs	r3, r0
 800724e:	3332      	adds	r3, #50	@ 0x32
 8007250:	001a      	movs	r2, r3
 8007252:	4b63      	ldr	r3, [pc, #396]	@ (80073e0 <AT_Send+0x2f4>)
 8007254:	601a      	str	r2, [r3, #0]
    break;
 8007256:	e0ba      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWMODE3:
//    Debug("SET in station/soft-ap mode");
    ATCommandSend = CWMODE3();
 8007258:	230f      	movs	r3, #15
 800725a:	18fc      	adds	r4, r7, r3
 800725c:	f7ff fc2a 	bl	8006ab4 <CWMODE3>
 8007260:	0003      	movs	r3, r0
 8007262:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007264:	f00d fba8 	bl	80149b8 <HAL_GetTick>
 8007268:	0003      	movs	r3, r0
 800726a:	330a      	adds	r3, #10
 800726c:	001a      	movs	r2, r3
 800726e:	4b5c      	ldr	r3, [pc, #368]	@ (80073e0 <AT_Send+0x2f4>)
 8007270:	601a      	str	r2, [r3, #0]
    break;
 8007272:	e0ac      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CWSAP:
//    Debug("SET soft AP mode parameters");
    ATCommandSend = CWSAP();
 8007274:	230f      	movs	r3, #15
 8007276:	18fc      	adds	r4, r7, r3
 8007278:	f7ff fc54 	bl	8006b24 <CWSAP>
 800727c:	0003      	movs	r3, r0
 800727e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007280:	f00d fb9a 	bl	80149b8 <HAL_GetTick>
 8007284:	0003      	movs	r3, r0
 8007286:	330a      	adds	r3, #10
 8007288:	001a      	movs	r2, r3
 800728a:	4b55      	ldr	r3, [pc, #340]	@ (80073e0 <AT_Send+0x2f4>)
 800728c:	601a      	str	r2, [r3, #0]
    break;
 800728e:	e09e      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CIPMUX:
//    Debug("ATCommandSend = CIPMUX()");
    ATCommandSend = CIPMUX();
 8007290:	230f      	movs	r3, #15
 8007292:	18fc      	adds	r4, r7, r3
 8007294:	f7ff fc62 	bl	8006b5c <CIPMUX>
 8007298:	0003      	movs	r3, r0
 800729a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800729c:	f00d fb8c 	bl	80149b8 <HAL_GetTick>
 80072a0:	0003      	movs	r3, r0
 80072a2:	330a      	adds	r3, #10
 80072a4:	001a      	movs	r2, r3
 80072a6:	4b4e      	ldr	r3, [pc, #312]	@ (80073e0 <AT_Send+0x2f4>)
 80072a8:	601a      	str	r2, [r3, #0]
    break;
 80072aa:	e090      	b.n	80073ce <AT_Send+0x2e2>

  case AT_WEBSERVER:
//    Debug("ATCommandSend = WEBSERVER()");
    ATCommandSend = WEBSERVER();
 80072ac:	230f      	movs	r3, #15
 80072ae:	18fc      	adds	r4, r7, r3
 80072b0:	f7ff fc70 	bl	8006b94 <WEBSERVER>
 80072b4:	0003      	movs	r3, r0
 80072b6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80072b8:	f00d fb7e 	bl	80149b8 <HAL_GetTick>
 80072bc:	0003      	movs	r3, r0
 80072be:	330a      	adds	r3, #10
 80072c0:	001a      	movs	r2, r3
 80072c2:	4b47      	ldr	r3, [pc, #284]	@ (80073e0 <AT_Send+0x2f4>)
 80072c4:	601a      	str	r2, [r3, #0]
    break;
 80072c6:	e082      	b.n	80073ce <AT_Send+0x2e2>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 80072c8:	230f      	movs	r3, #15
 80072ca:	18fc      	adds	r4, r7, r3
 80072cc:	f7ff fc7e 	bl	8006bcc <HTTPCPOST>
 80072d0:	0003      	movs	r3, r0
 80072d2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80072d4:	f00d fb70 	bl	80149b8 <HAL_GetTick>
 80072d8:	0003      	movs	r3, r0
 80072da:	33f5      	adds	r3, #245	@ 0xf5
 80072dc:	33ff      	adds	r3, #255	@ 0xff
 80072de:	001a      	movs	r2, r3
 80072e0:	4b3f      	ldr	r3, [pc, #252]	@ (80073e0 <AT_Send+0x2f4>)
 80072e2:	601a      	str	r2, [r3, #0]
    break;
 80072e4:	e073      	b.n	80073ce <AT_Send+0x2e2>

  case AT_SENDDATA:
//    Debug("Send the data");
    ATCommandSend = SENDDATA();
 80072e6:	230f      	movs	r3, #15
 80072e8:	18fc      	adds	r4, r7, r3
 80072ea:	f7ff fd31 	bl	8006d50 <SENDDATA>
 80072ee:	0003      	movs	r3, r0
 80072f0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 80072f2:	f00d fb61 	bl	80149b8 <HAL_GetTick>
 80072f6:	0003      	movs	r3, r0
 80072f8:	33f5      	adds	r3, #245	@ 0xf5
 80072fa:	33ff      	adds	r3, #255	@ 0xff
 80072fc:	001a      	movs	r2, r3
 80072fe:	4b38      	ldr	r3, [pc, #224]	@ (80073e0 <AT_Send+0x2f4>)
 8007300:	601a      	str	r2, [r3, #0]
    break;
 8007302:	e064      	b.n	80073ce <AT_Send+0x2e2>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8007304:	4a3a      	ldr	r2, [pc, #232]	@ (80073f0 <AT_Send+0x304>)
 8007306:	4b38      	ldr	r3, [pc, #224]	@ (80073e8 <AT_Send+0x2fc>)
 8007308:	0019      	movs	r1, r3
 800730a:	2003      	movs	r0, #3
 800730c:	f00c fdd4 	bl	8013eb8 <CreateLine>
    ATCommandSend = SLEEP();
 8007310:	230f      	movs	r3, #15
 8007312:	18fc      	adds	r4, r7, r3
 8007314:	f7ff fd34 	bl	8006d80 <SLEEP>
 8007318:	0003      	movs	r3, r0
 800731a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800731c:	f00d fb4c 	bl	80149b8 <HAL_GetTick>
 8007320:	0003      	movs	r3, r0
 8007322:	330a      	adds	r3, #10
 8007324:	001a      	movs	r2, r3
 8007326:	4b2e      	ldr	r3, [pc, #184]	@ (80073e0 <AT_Send+0x2f4>)
 8007328:	601a      	str	r2, [r3, #0]
    break;
 800732a:	e050      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CIPSNTPCFG:
//    Debug("Config SNTP client");
    ATCommandSend = CIPSNTPCFG();
 800732c:	230f      	movs	r3, #15
 800732e:	18fc      	adds	r4, r7, r3
 8007330:	f7ff fd42 	bl	8006db8 <CIPSNTPCFG>
 8007334:	0003      	movs	r3, r0
 8007336:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007338:	f00d fb3e 	bl	80149b8 <HAL_GetTick>
 800733c:	0003      	movs	r3, r0
 800733e:	330a      	adds	r3, #10
 8007340:	001a      	movs	r2, r3
 8007342:	4b27      	ldr	r3, [pc, #156]	@ (80073e0 <AT_Send+0x2f4>)
 8007344:	601a      	str	r2, [r3, #0]
    break;
 8007346:	e042      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CIPSNTPTIME:
//    Debug("Get time from internet");
    ATCommandSend = CIPSNTPTIME();
 8007348:	230f      	movs	r3, #15
 800734a:	18fc      	adds	r4, r7, r3
 800734c:	f7ff fd54 	bl	8006df8 <CIPSNTPTIME>
 8007350:	0003      	movs	r3, r0
 8007352:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8007354:	f00d fb30 	bl	80149b8 <HAL_GetTick>
 8007358:	0003      	movs	r3, r0
 800735a:	33f5      	adds	r3, #245	@ 0xf5
 800735c:	33ff      	adds	r3, #255	@ 0xff
 800735e:	001a      	movs	r2, r3
 8007360:	4b1f      	ldr	r3, [pc, #124]	@ (80073e0 <AT_Send+0x2f4>)
 8007362:	601a      	str	r2, [r3, #0]
    break;
 8007364:	e033      	b.n	80073ce <AT_Send+0x2e2>

  case AT_CIPSNTPINTV:
//    Debug("Set the interval to timesync");
    ATCommandSend = CIPSNTPINTV();
 8007366:	230f      	movs	r3, #15
 8007368:	18fc      	adds	r4, r7, r3
 800736a:	f7ff fd61 	bl	8006e30 <CIPSNTPINTV>
 800736e:	0003      	movs	r3, r0
 8007370:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007372:	f00d fb21 	bl	80149b8 <HAL_GetTick>
 8007376:	0003      	movs	r3, r0
 8007378:	330a      	adds	r3, #10
 800737a:	001a      	movs	r2, r3
 800737c:	4b18      	ldr	r3, [pc, #96]	@ (80073e0 <AT_Send+0x2f4>)
 800737e:	601a      	str	r2, [r3, #0]
    break;
 8007380:	e025      	b.n	80073ce <AT_Send+0x2e2>
#ifdef USE_MAIL
  case AT_HTTPCPOST_MAILAPI:
    Debug("Start EMAIL via API");
 8007382:	4a1c      	ldr	r2, [pc, #112]	@ (80073f4 <AT_Send+0x308>)
 8007384:	4b18      	ldr	r3, [pc, #96]	@ (80073e8 <AT_Send+0x2fc>)
 8007386:	0019      	movs	r1, r3
 8007388:	2003      	movs	r0, #3
 800738a:	f00c fd95 	bl	8013eb8 <CreateLine>
    ATCommandSend = HTTPCPOST_MAILAPI();
 800738e:	230f      	movs	r3, #15
 8007390:	18fc      	adds	r4, r7, r3
 8007392:	f7ff fc99 	bl	8006cc8 <HTTPCPOST_MAILAPI>
 8007396:	0003      	movs	r3, r0
 8007398:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800739a:	f00d fb0d 	bl	80149b8 <HAL_GetTick>
 800739e:	0003      	movs	r3, r0
 80073a0:	3332      	adds	r3, #50	@ 0x32
 80073a2:	001a      	movs	r2, r3
 80073a4:	4b0e      	ldr	r3, [pc, #56]	@ (80073e0 <AT_Send+0x2f4>)
 80073a6:	601a      	str	r2, [r3, #0]
    break;
 80073a8:	e011      	b.n	80073ce <AT_Send+0x2e2>

  case AT_SENDMAIL:
//    Debug("Send Email content");
    ATCommandSend = SENDMAIL();
 80073aa:	230f      	movs	r3, #15
 80073ac:	18fc      	adds	r4, r7, r3
 80073ae:	f7ff fc73 	bl	8006c98 <SENDMAIL>
 80073b2:	0003      	movs	r3, r0
 80073b4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 80073b6:	f00d faff 	bl	80149b8 <HAL_GetTick>
 80073ba:	0003      	movs	r3, r0
 80073bc:	33f5      	adds	r3, #245	@ 0xf5
 80073be:	33ff      	adds	r3, #255	@ 0xff
 80073c0:	001a      	movs	r2, r3
 80073c2:	4b07      	ldr	r3, [pc, #28]	@ (80073e0 <AT_Send+0x2f4>)
 80073c4:	601a      	str	r2, [r3, #0]
    break;
 80073c6:	e002      	b.n	80073ce <AT_Send+0x2e2>
#endif

  case AT_END:
    break;
 80073c8:	46c0      	nop			@ (mov r8, r8)
 80073ca:	e000      	b.n	80073ce <AT_Send+0x2e2>
  break;
 80073cc:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80073ce:	230f      	movs	r3, #15
 80073d0:	18fb      	adds	r3, r7, r3
 80073d2:	781b      	ldrb	r3, [r3, #0]
}
 80073d4:	0018      	movs	r0, r3
 80073d6:	46bd      	mov	sp, r7
 80073d8:	b005      	add	sp, #20
 80073da:	bd90      	pop	{r4, r7, pc}
 80073dc:	0802e1b4 	.word	0x0802e1b4
 80073e0:	20000694 	.word	0x20000694
 80073e4:	0802b358 	.word	0x0802b358
 80073e8:	0802ac1c 	.word	0x0802ac1c
 80073ec:	0802b364 	.word	0x0802b364
 80073f0:	0802b378 	.word	0x0802b378
 80073f4:	0802b39c 	.word	0x0802b39c

080073f8 <is_OM_configured>:

bool is_OM_configured(void) {
 80073f8:	b590      	push	{r4, r7, lr}
 80073fa:	b08b      	sub	sp, #44	@ 0x2c
 80073fc:	af00      	add	r7, sp, #0
//bert
  uint8_t boxConfig[IdSize];
  char Buffer[1+(2*IdSize)];
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80073fe:	241c      	movs	r4, #28
 8007400:	193b      	adds	r3, r7, r4
 8007402:	4814      	ldr	r0, [pc, #80]	@ (8007454 <is_OM_configured+0x5c>)
 8007404:	220c      	movs	r2, #12
 8007406:	0019      	movs	r1, r3
 8007408:	f004 feec 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 800740c:	193a      	adds	r2, r7, r4
 800740e:	003b      	movs	r3, r7
 8007410:	0011      	movs	r1, r2
 8007412:	0018      	movs	r0, r3
 8007414:	f7fd ff64 	bl	80052e0 <uint8ArrayToString>
  Buffer[12] = '\0';
 8007418:	003b      	movs	r3, r7
 800741a:	2200      	movs	r2, #0
 800741c:	731a      	strb	r2, [r3, #12]
  if (!isKeyValid(boxConfig, "box", "upload")) {
 800741e:	4a0e      	ldr	r2, [pc, #56]	@ (8007458 <is_OM_configured+0x60>)
 8007420:	490e      	ldr	r1, [pc, #56]	@ (800745c <is_OM_configured+0x64>)
 8007422:	193b      	adds	r3, r7, r4
 8007424:	0018      	movs	r0, r3
 8007426:	f7fd ff2b 	bl	8005280 <isKeyValid>
 800742a:	0003      	movs	r3, r0
 800742c:	001a      	movs	r2, r3
 800742e:	2301      	movs	r3, #1
 8007430:	4053      	eors	r3, r2
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d008      	beq.n	800744a <is_OM_configured+0x52>
    ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007438:	f00d fabe 	bl	80149b8 <HAL_GetTick>
 800743c:	0003      	movs	r3, r0
 800743e:	4a08      	ldr	r2, [pc, #32]	@ (8007460 <is_OM_configured+0x68>)
 8007440:	189a      	adds	r2, r3, r2
 8007442:	4b08      	ldr	r3, [pc, #32]	@ (8007464 <is_OM_configured+0x6c>)
 8007444:	601a      	str	r2, [r3, #0]
    return false;
 8007446:	2300      	movs	r3, #0
 8007448:	e000      	b.n	800744c <is_OM_configured+0x54>
  }
  return true;
 800744a:	2301      	movs	r3, #1
}
 800744c:	0018      	movs	r0, r3
 800744e:	46bd      	mov	sp, r7
 8007450:	b00b      	add	sp, #44	@ 0x2c
 8007452:	bd90      	pop	{r4, r7, pc}
 8007454:	08080000 	.word	0x08080000
 8007458:	0802b3b0 	.word	0x0802b3b0
 800745c:	0802b3b8 	.word	0x0802b3b8
 8007460:	0003a980 	.word	0x0003a980
 8007464:	20000694 	.word	0x20000694

08007468 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8007468:	b590      	push	{r4, r7, lr}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800746e:	1dfb      	adds	r3, r7, #7
 8007470:	2200      	movs	r2, #0
 8007472:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8007474:	4b82      	ldr	r3, [pc, #520]	@ (8007680 <ESP_WakeTest+0x218>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b05      	cmp	r3, #5
 800747a:	d900      	bls.n	800747e <ESP_WakeTest+0x16>
 800747c:	e0e4      	b.n	8007648 <ESP_WakeTest+0x1e0>
 800747e:	009a      	lsls	r2, r3, #2
 8007480:	4b80      	ldr	r3, [pc, #512]	@ (8007684 <ESP_WakeTest+0x21c>)
 8007482:	18d3      	adds	r3, r2, r3
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8007488:	4b7f      	ldr	r3, [pc, #508]	@ (8007688 <ESP_WakeTest+0x220>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2201      	movs	r2, #1
 800748e:	4053      	eors	r3, r2
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d041      	beq.n	800751a <ESP_WakeTest+0xb2>
        EspTurnedOn = true;
 8007496:	4b7c      	ldr	r3, [pc, #496]	@ (8007688 <ESP_WakeTest+0x220>)
 8007498:	2201      	movs	r2, #1
 800749a:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800749c:	2380      	movs	r3, #128	@ 0x80
 800749e:	011b      	lsls	r3, r3, #4
 80074a0:	487a      	ldr	r0, [pc, #488]	@ (800768c <ESP_WakeTest+0x224>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	0019      	movs	r1, r3
 80074a6:	f00e fcee 	bl	8015e86 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80074aa:	2032      	movs	r0, #50	@ 0x32
 80074ac:	f00d fa8e 	bl	80149cc <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80074b0:	2380      	movs	r3, #128	@ 0x80
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	4875      	ldr	r0, [pc, #468]	@ (800768c <ESP_WakeTest+0x224>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	0019      	movs	r1, r3
 80074ba:	f00e fce4 	bl	8015e86 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80074be:	200a      	movs	r0, #10
 80074c0:	f00d fa84 	bl	80149cc <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80074c4:	4b72      	ldr	r3, [pc, #456]	@ (8007690 <ESP_WakeTest+0x228>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	2101      	movs	r1, #1
 80074ca:	0018      	movs	r0, r3
 80074cc:	f00e fcdb 	bl	8015e86 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80074d0:	200a      	movs	r0, #10
 80074d2:	f00d fa7b 	bl	80149cc <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80074d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007690 <ESP_WakeTest+0x228>)
 80074d8:	2201      	movs	r2, #1
 80074da:	2102      	movs	r1, #2
 80074dc:	0018      	movs	r0, r3
 80074de:	f00e fcd2 	bl	8015e86 <HAL_GPIO_WritePin>
        HAL_Delay(50); // wait for 5RC
 80074e2:	2032      	movs	r0, #50	@ 0x32
 80074e4:	f00d fa72 	bl	80149cc <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80074e8:	4b69      	ldr	r3, [pc, #420]	@ (8007690 <ESP_WakeTest+0x228>)
 80074ea:	2201      	movs	r2, #1
 80074ec:	2101      	movs	r1, #1
 80074ee:	0018      	movs	r0, r3
 80074f0:	f00e fcc9 	bl	8015e86 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 80074f4:	2064      	movs	r0, #100	@ 0x64
 80074f6:	f00d fa69 	bl	80149cc <HAL_Delay>
        batteryCharge = ReadBatteryVoltage();  // read voltage in loaded condition
 80074fa:	f002 fb43 	bl	8009b84 <ReadBatteryVoltage>
 80074fe:	1c02      	adds	r2, r0, #0
 8007500:	4b64      	ldr	r3, [pc, #400]	@ (8007694 <ESP_WakeTest+0x22c>)
 8007502:	601a      	str	r2, [r3, #0]
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8007504:	f00d fa58 	bl	80149b8 <HAL_GetTick>
 8007508:	0003      	movs	r3, r0
 800750a:	22e1      	movs	r2, #225	@ 0xe1
 800750c:	0092      	lsls	r2, r2, #2
 800750e:	189a      	adds	r2, r3, r2
 8007510:	4b61      	ldr	r3, [pc, #388]	@ (8007698 <ESP_WakeTest+0x230>)
 8007512:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8007514:	4b5c      	ldr	r3, [pc, #368]	@ (8007688 <ESP_WakeTest+0x220>)
 8007516:	2201      	movs	r2, #1
 8007518:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800751a:	2380      	movs	r3, #128	@ 0x80
 800751c:	005a      	lsls	r2, r3, #1
 800751e:	4b5f      	ldr	r3, [pc, #380]	@ (800769c <ESP_WakeTest+0x234>)
 8007520:	0011      	movs	r1, r2
 8007522:	0018      	movs	r0, r3
 8007524:	f7fd fcfe 	bl	8004f24 <ESP_Receive>
 8007528:	1e03      	subs	r3, r0, #0
 800752a:	d100      	bne.n	800752e <ESP_WakeTest+0xc6>
 800752c:	e09f      	b.n	800766e <ESP_WakeTest+0x206>
        TestState = ESP_TEST_SEND;
 800752e:	4b54      	ldr	r3, [pc, #336]	@ (8007680 <ESP_WakeTest+0x218>)
 8007530:	2201      	movs	r2, #1
 8007532:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007534:	e09b      	b.n	800766e <ESP_WakeTest+0x206>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8007536:	4b58      	ldr	r3, [pc, #352]	@ (8007698 <ESP_WakeTest+0x230>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	0018      	movs	r0, r3
 800753c:	f00c fc66 	bl	8013e0c <TimestampIsReached>
 8007540:	1e03      	subs	r3, r0, #0
 8007542:	d100      	bne.n	8007546 <ESP_WakeTest+0xde>
 8007544:	e095      	b.n	8007672 <ESP_WakeTest+0x20a>
        ATSend = AT_Send(ATCommand);
 8007546:	4b56      	ldr	r3, [pc, #344]	@ (80076a0 <ESP_WakeTest+0x238>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	1dfc      	adds	r4, r7, #7
 800754c:	0018      	movs	r0, r3
 800754e:	f7ff fdcd 	bl	80070ec <AT_Send>
 8007552:	0003      	movs	r3, r0
 8007554:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007556:	1dfb      	adds	r3, r7, #7
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d100      	bne.n	8007560 <ESP_WakeTest+0xf8>
 800755e:	e088      	b.n	8007672 <ESP_WakeTest+0x20a>
          TestState = ESP_TEST_RECEIVE;
 8007560:	4b47      	ldr	r3, [pc, #284]	@ (8007680 <ESP_WakeTest+0x218>)
 8007562:	2202      	movs	r2, #2
 8007564:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007566:	e084      	b.n	8007672 <ESP_WakeTest+0x20a>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8007568:	4b4b      	ldr	r3, [pc, #300]	@ (8007698 <ESP_WakeTest+0x230>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	0018      	movs	r0, r3
 800756e:	f00c fc4d 	bl	8013e0c <TimestampIsReached>
 8007572:	1e03      	subs	r3, r0, #0
 8007574:	d100      	bne.n	8007578 <ESP_WakeTest+0x110>
 8007576:	e07e      	b.n	8007676 <ESP_WakeTest+0x20e>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8007578:	4b4a      	ldr	r3, [pc, #296]	@ (80076a4 <ESP_WakeTest+0x23c>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	0018      	movs	r0, r3
 800757e:	f7ff fc73 	bl	8006e68 <DMA_ProcessBuffer>
 8007582:	0003      	movs	r3, r0
 8007584:	001a      	movs	r2, r3
 8007586:	4b48      	ldr	r3, [pc, #288]	@ (80076a8 <ESP_WakeTest+0x240>)
 8007588:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800758a:	4b47      	ldr	r3, [pc, #284]	@ (80076a8 <ESP_WakeTest+0x240>)
 800758c:	781a      	ldrb	r2, [r3, #0]
 800758e:	4b45      	ldr	r3, [pc, #276]	@ (80076a4 <ESP_WakeTest+0x23c>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	1dbc      	adds	r4, r7, #6
 8007594:	0019      	movs	r1, r3
 8007596:	0010      	movs	r0, r2
 8007598:	f7ff fd66 	bl	8007068 <ATCompare>
 800759c:	0003      	movs	r3, r0
 800759e:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80075a0:	4b41      	ldr	r3, [pc, #260]	@ (80076a8 <ESP_WakeTest+0x240>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d102      	bne.n	80075ae <ESP_WakeTest+0x146>
          TestState = ESP_TEST_SEND;
 80075a8:	4b35      	ldr	r3, [pc, #212]	@ (8007680 <ESP_WakeTest+0x218>)
 80075aa:	2201      	movs	r2, #1
 80075ac:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80075ae:	4b3e      	ldr	r3, [pc, #248]	@ (80076a8 <ESP_WakeTest+0x240>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	2b07      	cmp	r3, #7
 80075b4:	d104      	bne.n	80075c0 <ESP_WakeTest+0x158>
          StartProg();
 80075b6:	f7fe fefd 	bl	80063b4 <StartProg>
          TestState = ESP_TEST_BOOT;
 80075ba:	4b31      	ldr	r3, [pc, #196]	@ (8007680 <ESP_WakeTest+0x218>)
 80075bc:	2205      	movs	r2, #5
 80075be:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80075c0:	4b39      	ldr	r3, [pc, #228]	@ (80076a8 <ESP_WakeTest+0x240>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d109      	bne.n	80075dc <ESP_WakeTest+0x174>
          ESPTimeStamp = HAL_GetTick() + 50;
 80075c8:	f00d f9f6 	bl	80149b8 <HAL_GetTick>
 80075cc:	0003      	movs	r3, r0
 80075ce:	3332      	adds	r3, #50	@ 0x32
 80075d0:	001a      	movs	r2, r3
 80075d2:	4b31      	ldr	r3, [pc, #196]	@ (8007698 <ESP_WakeTest+0x230>)
 80075d4:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80075d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007680 <ESP_WakeTest+0x218>)
 80075d8:	2201      	movs	r2, #1
 80075da:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80075dc:	1dbb      	adds	r3, r7, #6
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d048      	beq.n	8007676 <ESP_WakeTest+0x20e>
          TestState = ESP_TEST_VALIDATE;
 80075e4:	4b26      	ldr	r3, [pc, #152]	@ (8007680 <ESP_WakeTest+0x218>)
 80075e6:	2203      	movs	r2, #3
 80075e8:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80075ea:	e044      	b.n	8007676 <ESP_WakeTest+0x20e>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80075ec:	4b2f      	ldr	r3, [pc, #188]	@ (80076ac <ESP_WakeTest+0x244>)
 80075ee:	22fa      	movs	r2, #250	@ 0xfa
 80075f0:	0112      	lsls	r2, r2, #4
 80075f2:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80075f4:	f00b f8f6 	bl	80127e4 <Calculate_LED_ON>
 80075f8:	0003      	movs	r3, r0
 80075fa:	001a      	movs	r2, r3
 80075fc:	4b2b      	ldr	r3, [pc, #172]	@ (80076ac <ESP_WakeTest+0x244>)
 80075fe:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8007600:	4b2a      	ldr	r3, [pc, #168]	@ (80076ac <ESP_WakeTest+0x244>)
 8007602:	22fa      	movs	r2, #250	@ 0xfa
 8007604:	0112      	lsls	r2, r2, #4
 8007606:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8007608:	4b1d      	ldr	r3, [pc, #116]	@ (8007680 <ESP_WakeTest+0x218>)
 800760a:	2204      	movs	r2, #4
 800760c:	701a      	strb	r2, [r3, #0]

      break;
 800760e:	e033      	b.n	8007678 <ESP_WakeTest+0x210>

    case ESP_TEST_DEINIT:
      testRound = false;
 8007610:	4b27      	ldr	r3, [pc, #156]	@ (80076b0 <ESP_WakeTest+0x248>)
 8007612:	2200      	movs	r2, #0
 8007614:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007616:	4b1e      	ldr	r3, [pc, #120]	@ (8007690 <ESP_WakeTest+0x228>)
 8007618:	2200      	movs	r2, #0
 800761a:	2101      	movs	r1, #1
 800761c:	0018      	movs	r0, r3
 800761e:	f00e fc32 	bl	8015e86 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007622:	2380      	movs	r3, #128	@ 0x80
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	4819      	ldr	r0, [pc, #100]	@ (800768c <ESP_WakeTest+0x224>)
 8007628:	2200      	movs	r2, #0
 800762a:	0019      	movs	r1, r3
 800762c:	f00e fc2b 	bl	8015e86 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007630:	4b17      	ldr	r3, [pc, #92]	@ (8007690 <ESP_WakeTest+0x228>)
 8007632:	2200      	movs	r2, #0
 8007634:	2102      	movs	r1, #2
 8007636:	0018      	movs	r0, r3
 8007638:	f00e fc25 	bl	8015e86 <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 800763c:	f006 f812 	bl	800d664 <SetESPMeasurementDone>
      EspTurnedOn = false;
 8007640:	4b11      	ldr	r3, [pc, #68]	@ (8007688 <ESP_WakeTest+0x220>)
 8007642:	2200      	movs	r2, #0
 8007644:	701a      	strb	r2, [r3, #0]
      break;
 8007646:	e017      	b.n	8007678 <ESP_WakeTest+0x210>

    default:
      TestState = ESP_TEST_INIT;
 8007648:	4b0d      	ldr	r3, [pc, #52]	@ (8007680 <ESP_WakeTest+0x218>)
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
      break;
 800764e:	e013      	b.n	8007678 <ESP_WakeTest+0x210>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8007650:	4b16      	ldr	r3, [pc, #88]	@ (80076ac <ESP_WakeTest+0x244>)
 8007652:	22fa      	movs	r2, #250	@ 0xfa
 8007654:	0112      	lsls	r2, r2, #4
 8007656:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 8007658:	4b14      	ldr	r3, [pc, #80]	@ (80076ac <ESP_WakeTest+0x244>)
 800765a:	22fa      	movs	r2, #250	@ 0xfa
 800765c:	0112      	lsls	r2, r2, #4
 800765e:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8007660:	f00b f8c0 	bl	80127e4 <Calculate_LED_ON>
 8007664:	0003      	movs	r3, r0
 8007666:	001a      	movs	r2, r3
 8007668:	4b10      	ldr	r3, [pc, #64]	@ (80076ac <ESP_WakeTest+0x244>)
 800766a:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 800766c:	e004      	b.n	8007678 <ESP_WakeTest+0x210>
      break;
 800766e:	46c0      	nop			@ (mov r8, r8)
 8007670:	e002      	b.n	8007678 <ESP_WakeTest+0x210>
      break;
 8007672:	46c0      	nop			@ (mov r8, r8)
 8007674:	e000      	b.n	8007678 <ESP_WakeTest+0x210>
      break;
 8007676:	46c0      	nop			@ (mov r8, r8)
  }
}
 8007678:	46c0      	nop			@ (mov r8, r8)
 800767a:	46bd      	mov	sp, r7
 800767c:	b003      	add	sp, #12
 800767e:	bd90      	pop	{r4, r7, pc}
 8007680:	20000703 	.word	0x20000703
 8007684:	0802e210 	.word	0x0802e210
 8007688:	200005ac 	.word	0x200005ac
 800768c:	50000800 	.word	0x50000800
 8007690:	50001c00 	.word	0x50001c00
 8007694:	20002158 	.word	0x20002158
 8007698:	20000694 	.word	0x20000694
 800769c:	200004ac 	.word	0x200004ac
 80076a0:	20000701 	.word	0x20000701
 80076a4:	20000700 	.word	0x20000700
 80076a8:	20000033 	.word	0x20000033
 80076ac:	40000400 	.word	0x40000400
 80076b0:	20000001 	.word	0x20000001

080076b4 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80076b4:	b5b0      	push	{r4, r5, r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80076ba:	1dfb      	adds	r3, r7, #7
 80076bc:	2200      	movs	r2, #0
 80076be:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
// Het lijkt er op dat ESP32  niet meer start indien de batterijspanning onder de 3,77 Volt daalt.
// Om uart fouten te voorkomen mogelijk ESP niet meer afhandelen.
  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80076c0:	4b6a      	ldr	r3, [pc, #424]	@ (800786c <ESP_Upkeep+0x1b8>)
 80076c2:	781a      	ldrb	r2, [r3, #0]
 80076c4:	4b6a      	ldr	r3, [pc, #424]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d028      	beq.n	800771e <ESP_Upkeep+0x6a>
 80076cc:	f00c fc7e 	bl	8013fcc <GetVerboseLevel>
 80076d0:	0003      	movs	r3, r0
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d123      	bne.n	800771e <ESP_Upkeep+0x6a>
    oldEspState = EspState;
 80076d6:	4b65      	ldr	r3, [pc, #404]	@ (800786c <ESP_Upkeep+0x1b8>)
 80076d8:	781a      	ldrb	r2, [r3, #0]
 80076da:	4b65      	ldr	r3, [pc, #404]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076dc:	701a      	strb	r2, [r3, #0]
#ifdef USE_MAIL
    if ( !((oldEspState == 3) && ((ATCommand == AT_HTTPCPOST) || (ATCommand == AT_HTTPCPOST_MAILAPI))) ) {
 80076de:	4b64      	ldr	r3, [pc, #400]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d107      	bne.n	80076f6 <ESP_Upkeep+0x42>
 80076e6:	4b63      	ldr	r3, [pc, #396]	@ (8007874 <ESP_Upkeep+0x1c0>)
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2b0e      	cmp	r3, #14
 80076ec:	d017      	beq.n	800771e <ESP_Upkeep+0x6a>
 80076ee:	4b61      	ldr	r3, [pc, #388]	@ (8007874 <ESP_Upkeep+0x1c0>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	2b14      	cmp	r3, #20
 80076f4:	d013      	beq.n	800771e <ESP_Upkeep+0x6a>
#else
      if ( !((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
#endif
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80076f6:	4b5e      	ldr	r3, [pc, #376]	@ (8007870 <ESP_Upkeep+0x1bc>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	001d      	movs	r5, r3
 80076fc:	4b5d      	ldr	r3, [pc, #372]	@ (8007874 <ESP_Upkeep+0x1c0>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	0018      	movs	r0, r3
 8007702:	4b5d      	ldr	r3, [pc, #372]	@ (8007878 <ESP_Upkeep+0x1c4>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	001c      	movs	r4, r3
 8007708:	4b5c      	ldr	r3, [pc, #368]	@ (800787c <ESP_Upkeep+0x1c8>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	4a5c      	ldr	r2, [pc, #368]	@ (8007880 <ESP_Upkeep+0x1cc>)
 800770e:	495d      	ldr	r1, [pc, #372]	@ (8007884 <ESP_Upkeep+0x1d0>)
 8007710:	9302      	str	r3, [sp, #8]
 8007712:	9401      	str	r4, [sp, #4]
 8007714:	9000      	str	r0, [sp, #0]
 8007716:	002b      	movs	r3, r5
 8007718:	2003      	movs	r0, #3
 800771a:	f00c fbcd 	bl	8013eb8 <CreateLine>
    }
  }
  switch (EspState) {
 800771e:	4b53      	ldr	r3, [pc, #332]	@ (800786c <ESP_Upkeep+0x1b8>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	2b0f      	cmp	r3, #15
 8007724:	d901      	bls.n	800772a <ESP_Upkeep+0x76>
 8007726:	f000 fcfc 	bl	8008122 <ESP_Upkeep+0xa6e>
 800772a:	009a      	lsls	r2, r3, #2
 800772c:	4b56      	ldr	r3, [pc, #344]	@ (8007888 <ESP_Upkeep+0x1d4>)
 800772e:	18d3      	adds	r3, r2, r3
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8007734:	4b4d      	ldr	r3, [pc, #308]	@ (800786c <ESP_Upkeep+0x1b8>)
 8007736:	2201      	movs	r2, #1
 8007738:	701a      	strb	r2, [r3, #0]
      break;
 800773a:	f000 fd0d 	bl	8008158 <ESP_Upkeep+0xaa4>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      deviceTimeOut = 0;
 800773e:	4b53      	ldr	r3, [pc, #332]	@ (800788c <ESP_Upkeep+0x1d8>)
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]
      if (!AllDevicesReady()) {
 8007744:	f006 f9ee 	bl	800db24 <AllDevicesReady>
 8007748:	0003      	movs	r3, r0
 800774a:	001a      	movs	r2, r3
 800774c:	2301      	movs	r3, #1
 800774e:	4053      	eors	r3, r2
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <ESP_Upkeep+0xa6>
 8007756:	f000 fcf0 	bl	800813a <ESP_Upkeep+0xa86>
//        Debug("Waiting for all devices ready");
        break;
      }
      SetESPIndicator();
 800775a:	f00b f99d 	bl	8012a98 <SetESPIndicator>
      if(!EspTurnedOn){
 800775e:	4b4c      	ldr	r3, [pc, #304]	@ (8007890 <ESP_Upkeep+0x1dc>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2201      	movs	r2, #1
 8007764:	4053      	eors	r3, r2
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d044      	beq.n	80077f6 <ESP_Upkeep+0x142>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800776c:	2380      	movs	r3, #128	@ 0x80
 800776e:	011b      	lsls	r3, r3, #4
 8007770:	4848      	ldr	r0, [pc, #288]	@ (8007894 <ESP_Upkeep+0x1e0>)
 8007772:	2200      	movs	r2, #0
 8007774:	0019      	movs	r1, r3
 8007776:	f00e fb86 	bl	8015e86 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800777a:	200a      	movs	r0, #10
 800777c:	f00d f926 	bl	80149cc <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007780:	2380      	movs	r3, #128	@ 0x80
 8007782:	011b      	lsls	r3, r3, #4
 8007784:	4843      	ldr	r0, [pc, #268]	@ (8007894 <ESP_Upkeep+0x1e0>)
 8007786:	2201      	movs	r2, #1
 8007788:	0019      	movs	r1, r3
 800778a:	f00e fb7c 	bl	8015e86 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800778e:	2032      	movs	r0, #50	@ 0x32
 8007790:	f00d f91c 	bl	80149cc <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007794:	4b40      	ldr	r3, [pc, #256]	@ (8007898 <ESP_Upkeep+0x1e4>)
 8007796:	2200      	movs	r2, #0
 8007798:	2101      	movs	r1, #1
 800779a:	0018      	movs	r0, r3
 800779c:	f00e fb73 	bl	8015e86 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80077a0:	200a      	movs	r0, #10
 80077a2:	f00d f913 	bl	80149cc <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80077a6:	4b3c      	ldr	r3, [pc, #240]	@ (8007898 <ESP_Upkeep+0x1e4>)
 80077a8:	2201      	movs	r2, #1
 80077aa:	2102      	movs	r1, #2
 80077ac:	0018      	movs	r0, r3
 80077ae:	f00e fb6a 	bl	8015e86 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80077b2:	2032      	movs	r0, #50	@ 0x32
 80077b4:	f00d f90a 	bl	80149cc <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80077b8:	4b37      	ldr	r3, [pc, #220]	@ (8007898 <ESP_Upkeep+0x1e4>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	2101      	movs	r1, #1
 80077be:	0018      	movs	r0, r3
 80077c0:	f00e fb61 	bl	8015e86 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80077c4:	2032      	movs	r0, #50	@ 0x32
 80077c6:	f00d f901 	bl	80149cc <HAL_Delay>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80077ca:	f00d f8f5 	bl	80149b8 <HAL_GetTick>
 80077ce:	0003      	movs	r3, r0
 80077d0:	22e1      	movs	r2, #225	@ 0xe1
 80077d2:	0092      	lsls	r2, r2, #2
 80077d4:	189a      	adds	r2, r3, r2
 80077d6:	4b31      	ldr	r3, [pc, #196]	@ (800789c <ESP_Upkeep+0x1e8>)
 80077d8:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80077da:	4b2d      	ldr	r3, [pc, #180]	@ (8007890 <ESP_Upkeep+0x1dc>)
 80077dc:	2201      	movs	r2, #1
 80077de:	701a      	strb	r2, [r3, #0]
        Debug("ESP powered on.");
 80077e0:	4a2f      	ldr	r2, [pc, #188]	@ (80078a0 <ESP_Upkeep+0x1ec>)
 80077e2:	4b28      	ldr	r3, [pc, #160]	@ (8007884 <ESP_Upkeep+0x1d0>)
 80077e4:	0019      	movs	r1, r3
 80077e6:	2003      	movs	r0, #3
 80077e8:	f00c fb66 	bl	8013eb8 <CreateLine>
        SetBatteryReadTimer(ESP_START_UP_TIME/2);  // read battery voltage during boot of ESP32
 80077ec:	23e1      	movs	r3, #225	@ 0xe1
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	0018      	movs	r0, r3
 80077f2:	f005 f9c7 	bl	800cb84 <SetBatteryReadTimer>
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80077f6:	2380      	movs	r3, #128	@ 0x80
 80077f8:	005a      	lsls	r2, r3, #1
 80077fa:	4b2a      	ldr	r3, [pc, #168]	@ (80078a4 <ESP_Upkeep+0x1f0>)
 80077fc:	0011      	movs	r1, r2
 80077fe:	0018      	movs	r0, r3
 8007800:	f7fd fb90 	bl	8004f24 <ESP_Receive>
 8007804:	1e03      	subs	r3, r0, #0
 8007806:	d101      	bne.n	800780c <ESP_Upkeep+0x158>
 8007808:	f000 fc99 	bl	800813e <ESP_Upkeep+0xa8a>
        EspState = ESP_STATE_WAIT_AWAKE;
 800780c:	4b17      	ldr	r3, [pc, #92]	@ (800786c <ESP_Upkeep+0x1b8>)
 800780e:	220f      	movs	r2, #15
 8007810:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8007812:	f00d f8d1 	bl	80149b8 <HAL_GetTick>
 8007816:	0003      	movs	r3, r0
 8007818:	22fa      	movs	r2, #250	@ 0xfa
 800781a:	00d2      	lsls	r2, r2, #3
 800781c:	189a      	adds	r2, r3, r2
 800781e:	4b22      	ldr	r3, [pc, #136]	@ (80078a8 <ESP_Upkeep+0x1f4>)
 8007820:	601a      	str	r2, [r3, #0]
      }
      break;
 8007822:	f000 fc8c 	bl	800813e <ESP_Upkeep+0xa8a>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 8007826:	2001      	movs	r0, #1
 8007828:	f7ff fb1e 	bl	8006e68 <DMA_ProcessBuffer>
 800782c:	0003      	movs	r3, r0
 800782e:	001a      	movs	r2, r3
 8007830:	4b1e      	ldr	r3, [pc, #120]	@ (80078ac <ESP_Upkeep+0x1f8>)
 8007832:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8007834:	4b1d      	ldr	r3, [pc, #116]	@ (80078ac <ESP_Upkeep+0x1f8>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	1dbc      	adds	r4, r7, #6
 800783a:	2101      	movs	r1, #1
 800783c:	0018      	movs	r0, r3
 800783e:	f7ff fc13 	bl	8007068 <ATCompare>
 8007842:	0003      	movs	r3, r0
 8007844:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8007846:	1dbb      	adds	r3, r7, #6
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d108      	bne.n	8007860 <ESP_Upkeep+0x1ac>
 800784e:	4b16      	ldr	r3, [pc, #88]	@ (80078a8 <ESP_Upkeep+0x1f4>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	0018      	movs	r0, r3
 8007854:	f00c fada 	bl	8013e0c <TimestampIsReached>
 8007858:	1e03      	subs	r3, r0, #0
 800785a:	d101      	bne.n	8007860 <ESP_Upkeep+0x1ac>
 800785c:	f000 fc71 	bl	8008142 <ESP_Upkeep+0xa8e>
          EspState = ESP_STATE_MODE_SELECT;
 8007860:	4b02      	ldr	r3, [pc, #8]	@ (800786c <ESP_Upkeep+0x1b8>)
 8007862:	220b      	movs	r2, #11
 8007864:	701a      	strb	r2, [r3, #0]
        }
        break;
 8007866:	f000 fc6c 	bl	8008142 <ESP_Upkeep+0xa8e>
 800786a:	46c0      	nop			@ (mov r8, r8)
 800786c:	20000030 	.word	0x20000030
 8007870:	20000003 	.word	0x20000003
 8007874:	20000701 	.word	0x20000701
 8007878:	20000702 	.word	0x20000702
 800787c:	20000700 	.word	0x20000700
 8007880:	0802b3bc 	.word	0x0802b3bc
 8007884:	0802ac1c 	.word	0x0802ac1c
 8007888:	0802e228 	.word	0x0802e228
 800788c:	20001114 	.word	0x20001114
 8007890:	200005ac 	.word	0x200005ac
 8007894:	50000800 	.word	0x50000800
 8007898:	50001c00 	.word	0x50001c00
 800789c:	20000694 	.word	0x20000694
 80078a0:	0802b3e8 	.word	0x0802b3e8
 80078a4:	200004ac 	.word	0x200004ac
 80078a8:	20000938 	.word	0x20000938
 80078ac:	20000034 	.word	0x20000034

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 80078b0:	4bd6      	ldr	r3, [pc, #856]	@ (8007c0c <ESP_Upkeep+0x558>)
 80078b2:	2209      	movs	r2, #9
 80078b4:	2116      	movs	r1, #22
 80078b6:	0018      	movs	r0, r3
 80078b8:	f01e ff62 	bl	8026780 <memset>
      if(!InitIsDone || WifiReset){
 80078bc:	4bd4      	ldr	r3, [pc, #848]	@ (8007c10 <ESP_Upkeep+0x55c>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2201      	movs	r2, #1
 80078c2:	4053      	eors	r3, r2
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d103      	bne.n	80078d2 <ESP_Upkeep+0x21e>
 80078ca:	4bd2      	ldr	r3, [pc, #840]	@ (8007c14 <ESP_Upkeep+0x560>)
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d016      	beq.n	8007900 <ESP_Upkeep+0x24c>
        memcpy(ATCommandArray, AT_INIT, sizeof(AT_INIT));
 80078d2:	4bce      	ldr	r3, [pc, #824]	@ (8007c0c <ESP_Upkeep+0x558>)
 80078d4:	4ad0      	ldr	r2, [pc, #832]	@ (8007c18 <ESP_Upkeep+0x564>)
 80078d6:	ca03      	ldmia	r2!, {r0, r1}
 80078d8:	c303      	stmia	r3!, {r0, r1}
        EspState = ESP_STATE_SEND;
 80078da:	4bd0      	ldr	r3, [pc, #832]	@ (8007c1c <ESP_Upkeep+0x568>)
 80078dc:	2204      	movs	r2, #4
 80078de:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80078e0:	4bcf      	ldr	r3, [pc, #828]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80078e6:	4bcf      	ldr	r3, [pc, #828]	@ (8007c24 <ESP_Upkeep+0x570>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80078ec:	4bcc      	ldr	r3, [pc, #816]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	001a      	movs	r2, r3
 80078f2:	4bc6      	ldr	r3, [pc, #792]	@ (8007c0c <ESP_Upkeep+0x558>)
 80078f4:	5c9a      	ldrb	r2, [r3, r2]
 80078f6:	4bcc      	ldr	r3, [pc, #816]	@ (8007c28 <ESP_Upkeep+0x574>)
 80078f8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80078fa:	4bcc      	ldr	r3, [pc, #816]	@ (8007c2c <ESP_Upkeep+0x578>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8007900:	4bc3      	ldr	r3, [pc, #780]	@ (8007c10 <ESP_Upkeep+0x55c>)
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01f      	beq.n	8007948 <ESP_Upkeep+0x294>
 8007908:	4bc9      	ldr	r3, [pc, #804]	@ (8007c30 <ESP_Upkeep+0x57c>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2201      	movs	r2, #1
 800790e:	4053      	eors	r3, r2
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d018      	beq.n	8007948 <ESP_Upkeep+0x294>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8007916:	4bbd      	ldr	r3, [pc, #756]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007918:	4ac6      	ldr	r2, [pc, #792]	@ (8007c34 <ESP_Upkeep+0x580>)
 800791a:	6811      	ldr	r1, [r2, #0]
 800791c:	6019      	str	r1, [r3, #0]
 800791e:	8892      	ldrh	r2, [r2, #4]
 8007920:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8007922:	4bbe      	ldr	r3, [pc, #760]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007924:	2204      	movs	r2, #4
 8007926:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007928:	4bbd      	ldr	r3, [pc, #756]	@ (8007c20 <ESP_Upkeep+0x56c>)
 800792a:	2200      	movs	r2, #0
 800792c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 800792e:	4bbd      	ldr	r3, [pc, #756]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007930:	2201      	movs	r2, #1
 8007932:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007934:	4bba      	ldr	r3, [pc, #744]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	001a      	movs	r2, r3
 800793a:	4bb4      	ldr	r3, [pc, #720]	@ (8007c0c <ESP_Upkeep+0x558>)
 800793c:	5c9a      	ldrb	r2, [r3, r2]
 800793e:	4bba      	ldr	r3, [pc, #744]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007940:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007942:	4bba      	ldr	r3, [pc, #744]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007944:	2200      	movs	r2, #0
 8007946:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !APtested){
 8007948:	4bb1      	ldr	r3, [pc, #708]	@ (8007c10 <ESP_Upkeep+0x55c>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d021      	beq.n	8007994 <ESP_Upkeep+0x2e0>
 8007950:	4bb7      	ldr	r3, [pc, #732]	@ (8007c30 <ESP_Upkeep+0x57c>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01d      	beq.n	8007994 <ESP_Upkeep+0x2e0>
 8007958:	4bb7      	ldr	r3, [pc, #732]	@ (8007c38 <ESP_Upkeep+0x584>)
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2201      	movs	r2, #1
 800795e:	4053      	eors	r3, r2
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d016      	beq.n	8007994 <ESP_Upkeep+0x2e0>
        memcpy(ATCommandArray, AT_TEST, 2);
 8007966:	4bb5      	ldr	r3, [pc, #724]	@ (8007c3c <ESP_Upkeep+0x588>)
 8007968:	881a      	ldrh	r2, [r3, #0]
 800796a:	4ba8      	ldr	r3, [pc, #672]	@ (8007c0c <ESP_Upkeep+0x558>)
 800796c:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800796e:	4bab      	ldr	r3, [pc, #684]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007970:	2204      	movs	r2, #4
 8007972:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007974:	4baa      	ldr	r3, [pc, #680]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 800797a:	4baa      	ldr	r3, [pc, #680]	@ (8007c24 <ESP_Upkeep+0x570>)
 800797c:	2204      	movs	r2, #4
 800797e:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007980:	4ba7      	ldr	r3, [pc, #668]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	001a      	movs	r2, r3
 8007986:	4ba1      	ldr	r3, [pc, #644]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007988:	5c9a      	ldrb	r2, [r3, r2]
 800798a:	4ba7      	ldr	r3, [pc, #668]	@ (8007c28 <ESP_Upkeep+0x574>)
 800798c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800798e:	4ba7      	ldr	r3, [pc, #668]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007990:	2200      	movs	r2, #0
 8007992:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(InitIsDone && ConnectionMade && APtested && (sendpwremail == DO_PWR_MAIL)){
 8007994:	4b9e      	ldr	r3, [pc, #632]	@ (8007c10 <ESP_Upkeep+0x55c>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d024      	beq.n	80079e6 <ESP_Upkeep+0x332>
 800799c:	4ba4      	ldr	r3, [pc, #656]	@ (8007c30 <ESP_Upkeep+0x57c>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d020      	beq.n	80079e6 <ESP_Upkeep+0x332>
 80079a4:	4ba4      	ldr	r3, [pc, #656]	@ (8007c38 <ESP_Upkeep+0x584>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01c      	beq.n	80079e6 <ESP_Upkeep+0x332>
 80079ac:	4ba4      	ldr	r3, [pc, #656]	@ (8007c40 <ESP_Upkeep+0x58c>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d118      	bne.n	80079e6 <ESP_Upkeep+0x332>
        memcpy(ATCommandArray, AT_MAIL, 3);
 80079b4:	4b95      	ldr	r3, [pc, #596]	@ (8007c0c <ESP_Upkeep+0x558>)
 80079b6:	4aa3      	ldr	r2, [pc, #652]	@ (8007c44 <ESP_Upkeep+0x590>)
 80079b8:	8811      	ldrh	r1, [r2, #0]
 80079ba:	8019      	strh	r1, [r3, #0]
 80079bc:	7892      	ldrb	r2, [r2, #2]
 80079be:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80079c0:	4b96      	ldr	r3, [pc, #600]	@ (8007c1c <ESP_Upkeep+0x568>)
 80079c2:	2204      	movs	r2, #4
 80079c4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80079c6:	4b96      	ldr	r3, [pc, #600]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_MAIL;
 80079cc:	4b95      	ldr	r3, [pc, #596]	@ (8007c24 <ESP_Upkeep+0x570>)
 80079ce:	2206      	movs	r2, #6
 80079d0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80079d2:	4b93      	ldr	r3, [pc, #588]	@ (8007c20 <ESP_Upkeep+0x56c>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	001a      	movs	r2, r3
 80079d8:	4b8c      	ldr	r3, [pc, #560]	@ (8007c0c <ESP_Upkeep+0x558>)
 80079da:	5c9a      	ldrb	r2, [r3, r2]
 80079dc:	4b92      	ldr	r3, [pc, #584]	@ (8007c28 <ESP_Upkeep+0x574>)
 80079de:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80079e0:	4b92      	ldr	r3, [pc, #584]	@ (8007c2c <ESP_Upkeep+0x578>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
      }
#endif
      if(InitIsDone && ConnectionMade && APtested && !setTime && (sendpwremail != DO_PWR_MAIL)){
 80079e6:	4b8a      	ldr	r3, [pc, #552]	@ (8007c10 <ESP_Upkeep+0x55c>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d030      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 80079ee:	4b90      	ldr	r3, [pc, #576]	@ (8007c30 <ESP_Upkeep+0x57c>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d02c      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 80079f6:	4b90      	ldr	r3, [pc, #576]	@ (8007c38 <ESP_Upkeep+0x584>)
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d028      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 80079fe:	4b92      	ldr	r3, [pc, #584]	@ (8007c48 <ESP_Upkeep+0x594>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2201      	movs	r2, #1
 8007a04:	4053      	eors	r3, r2
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d021      	beq.n	8007a50 <ESP_Upkeep+0x39c>
 8007a0c:	4b8c      	ldr	r3, [pc, #560]	@ (8007c40 <ESP_Upkeep+0x58c>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d01d      	beq.n	8007a50 <ESP_Upkeep+0x39c>
        memcpy(ATCommandArray, AT_SEND, 3);
 8007a14:	4b7d      	ldr	r3, [pc, #500]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007a16:	4a8d      	ldr	r2, [pc, #564]	@ (8007c4c <ESP_Upkeep+0x598>)
 8007a18:	8811      	ldrh	r1, [r2, #0]
 8007a1a:	8019      	strh	r1, [r3, #0]
 8007a1c:	7892      	ldrb	r2, [r2, #2]
 8007a1e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8007a20:	4b7e      	ldr	r3, [pc, #504]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007a22:	2204      	movs	r2, #4
 8007a24:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007a26:	4b7e      	ldr	r3, [pc, #504]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8007a2c:	4b7d      	ldr	r3, [pc, #500]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007a2e:	2202      	movs	r2, #2
 8007a30:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007a32:	f00c ffc1 	bl	80149b8 <HAL_GetTick>
 8007a36:	0002      	movs	r2, r0
 8007a38:	4b85      	ldr	r3, [pc, #532]	@ (8007c50 <ESP_Upkeep+0x59c>)
 8007a3a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007a3c:	4b78      	ldr	r3, [pc, #480]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	001a      	movs	r2, r3
 8007a42:	4b72      	ldr	r3, [pc, #456]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007a44:	5c9a      	ldrb	r2, [r3, r2]
 8007a46:	4b78      	ldr	r3, [pc, #480]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007a48:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007a4a:	4b78      	ldr	r3, [pc, #480]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && APtested && setTime && (sendpwremail != DO_PWR_MAIL)){
 8007a50:	4b6f      	ldr	r3, [pc, #444]	@ (8007c10 <ESP_Upkeep+0x55c>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d02b      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a58:	4b75      	ldr	r3, [pc, #468]	@ (8007c30 <ESP_Upkeep+0x57c>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d027      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a60:	4b75      	ldr	r3, [pc, #468]	@ (8007c38 <ESP_Upkeep+0x584>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d023      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a68:	4b77      	ldr	r3, [pc, #476]	@ (8007c48 <ESP_Upkeep+0x594>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01f      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
 8007a70:	4b73      	ldr	r3, [pc, #460]	@ (8007c40 <ESP_Upkeep+0x58c>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d01b      	beq.n	8007ab0 <ESP_Upkeep+0x3fc>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8007a78:	4b76      	ldr	r3, [pc, #472]	@ (8007c54 <ESP_Upkeep+0x5a0>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	4b63      	ldr	r3, [pc, #396]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007a7e:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007a80:	4b66      	ldr	r3, [pc, #408]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007a82:	2204      	movs	r2, #4
 8007a84:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007a86:	4b66      	ldr	r3, [pc, #408]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8007a8c:	4b65      	ldr	r3, [pc, #404]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007a8e:	2205      	movs	r2, #5
 8007a90:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007a92:	f00c ff91 	bl	80149b8 <HAL_GetTick>
 8007a96:	0002      	movs	r2, r0
 8007a98:	4b6d      	ldr	r3, [pc, #436]	@ (8007c50 <ESP_Upkeep+0x59c>)
 8007a9a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007a9c:	4b60      	ldr	r3, [pc, #384]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	001a      	movs	r2, r3
 8007aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007aa4:	5c9a      	ldrb	r2, [r3, r2]
 8007aa6:	4b60      	ldr	r3, [pc, #384]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007aa8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007aaa:	4b60      	ldr	r3, [pc, #384]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8007ab0:	4b69      	ldr	r3, [pc, #420]	@ (8007c58 <ESP_Upkeep+0x5a4>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d100      	bne.n	8007aba <ESP_Upkeep+0x406>
 8007ab8:	e345      	b.n	8008146 <ESP_Upkeep+0xa92>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8007aba:	4b54      	ldr	r3, [pc, #336]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007abc:	4a67      	ldr	r2, [pc, #412]	@ (8007c5c <ESP_Upkeep+0x5a8>)
 8007abe:	6811      	ldr	r1, [r2, #0]
 8007ac0:	6019      	str	r1, [r3, #0]
 8007ac2:	7912      	ldrb	r2, [r2, #4]
 8007ac4:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode for local wifi config selected");
 8007ac6:	4a66      	ldr	r2, [pc, #408]	@ (8007c60 <ESP_Upkeep+0x5ac>)
 8007ac8:	4b66      	ldr	r3, [pc, #408]	@ (8007c64 <ESP_Upkeep+0x5b0>)
 8007aca:	0019      	movs	r1, r3
 8007acc:	2003      	movs	r0, #3
 8007ace:	f00c f9f3 	bl	8013eb8 <CreateLine>
        DisableConnectedDevices();
 8007ad2:	f006 f9d1 	bl	800de78 <DisableConnectedDevices>
        usblog = false;
 8007ad6:	4b64      	ldr	r3, [pc, #400]	@ (8007c68 <ESP_Upkeep+0x5b4>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007adc:	4b4f      	ldr	r3, [pc, #316]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007ade:	2204      	movs	r2, #4
 8007ae0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8007ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007aea:	2203      	movs	r2, #3
 8007aec:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007aee:	4b4c      	ldr	r3, [pc, #304]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	001a      	movs	r2, r3
 8007af4:	4b45      	ldr	r3, [pc, #276]	@ (8007c0c <ESP_Upkeep+0x558>)
 8007af6:	5c9a      	ldrb	r2, [r3, r2]
 8007af8:	4b4b      	ldr	r3, [pc, #300]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007afa:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007afc:	4b4b      	ldr	r3, [pc, #300]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
      }
    break;
 8007b02:	e320      	b.n	8008146 <ESP_Upkeep+0xa92>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8007b04:	4b48      	ldr	r3, [pc, #288]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	1dfc      	adds	r4, r7, #7
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	f7ff faee 	bl	80070ec <AT_Send>
 8007b10:	0003      	movs	r3, r0
 8007b12:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007b14:	1dfb      	adds	r3, r7, #7
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d100      	bne.n	8007b1e <ESP_Upkeep+0x46a>
 8007b1c:	e315      	b.n	800814a <ESP_Upkeep+0xa96>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8007b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007b20:	2203      	movs	r2, #3
 8007b22:	701a      	strb	r2, [r3, #0]
        }
    break;
 8007b24:	e311      	b.n	800814a <ESP_Upkeep+0xa96>

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007b26:	4b4c      	ldr	r3, [pc, #304]	@ (8007c58 <ESP_Upkeep+0x5a4>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d007      	beq.n	8007b3e <ESP_Upkeep+0x48a>
 8007b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8007c24 <ESP_Upkeep+0x570>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d003      	beq.n	8007b3e <ESP_Upkeep+0x48a>
        EspState = ESP_STATE_MODE_SELECT;
 8007b36:	4b39      	ldr	r3, [pc, #228]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007b38:	220b      	movs	r2, #11
 8007b3a:	701a      	strb	r2, [r3, #0]
        break;
 8007b3c:	e30c      	b.n	8008158 <ESP_Upkeep+0xaa4>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8007b3e:	4b4b      	ldr	r3, [pc, #300]	@ (8007c6c <ESP_Upkeep+0x5b8>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	0018      	movs	r0, r3
 8007b44:	f00c f962 	bl	8013e0c <TimestampIsReached>
 8007b48:	1e03      	subs	r3, r0, #0
 8007b4a:	d100      	bne.n	8007b4e <ESP_Upkeep+0x49a>
 8007b4c:	e2ff      	b.n	800814e <ESP_Upkeep+0xa9a>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8007b4e:	4b37      	ldr	r3, [pc, #220]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	0018      	movs	r0, r3
 8007b54:	f7ff f988 	bl	8006e68 <DMA_ProcessBuffer>
 8007b58:	0003      	movs	r3, r0
 8007b5a:	001a      	movs	r2, r3
 8007b5c:	4b44      	ldr	r3, [pc, #272]	@ (8007c70 <ESP_Upkeep+0x5bc>)
 8007b5e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8007b60:	4b43      	ldr	r3, [pc, #268]	@ (8007c70 <ESP_Upkeep+0x5bc>)
 8007b62:	781a      	ldrb	r2, [r3, #0]
 8007b64:	4b31      	ldr	r3, [pc, #196]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	1d7c      	adds	r4, r7, #5
 8007b6a:	0019      	movs	r1, r3
 8007b6c:	0010      	movs	r0, r2
 8007b6e:	f7ff fa7b 	bl	8007068 <ATCompare>
 8007b72:	0003      	movs	r3, r0
 8007b74:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007b76:	4b3e      	ldr	r3, [pc, #248]	@ (8007c70 <ESP_Upkeep+0x5bc>)
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d000      	beq.n	8007b80 <ESP_Upkeep+0x4cc>
 8007b7e:	e085      	b.n	8007c8c <ESP_Upkeep+0x5d8>
          if(ATCommand == AT_SENDDATA){
 8007b80:	4b29      	ldr	r3, [pc, #164]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b0f      	cmp	r3, #15
 8007b86:	d108      	bne.n	8007b9a <ESP_Upkeep+0x4e6>
            ATCommand = AT_HTTPCPOST;
 8007b88:	4b27      	ldr	r3, [pc, #156]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b8a:	220e      	movs	r2, #14
 8007b8c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007b8e:	4b27      	ldr	r3, [pc, #156]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007b90:	2202      	movs	r2, #2
 8007b92:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007b94:	4b22      	ldr	r3, [pc, #136]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007b96:	2201      	movs	r2, #1
 8007b98:	701a      	strb	r2, [r3, #0]
          }
          if(ATCommand == AT_SENDMAIL){
 8007b9a:	4b23      	ldr	r3, [pc, #140]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b15      	cmp	r3, #21
 8007ba0:	d108      	bne.n	8007bb4 <ESP_Upkeep+0x500>
            ATCommand = AT_HTTPCPOST_MAILAPI;
 8007ba2:	4b21      	ldr	r3, [pc, #132]	@ (8007c28 <ESP_Upkeep+0x574>)
 8007ba4:	2214      	movs	r2, #20
 8007ba6:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007ba8:	4b20      	ldr	r3, [pc, #128]	@ (8007c2c <ESP_Upkeep+0x578>)
 8007baa:	2202      	movs	r2, #2
 8007bac:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007bae:	4b1c      	ldr	r3, [pc, #112]	@ (8007c20 <ESP_Upkeep+0x56c>)
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8007bb4:	4b19      	ldr	r3, [pc, #100]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007bb6:	2204      	movs	r2, #4
 8007bb8:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8007bba:	4b2e      	ldr	r3, [pc, #184]	@ (8007c74 <ESP_Upkeep+0x5c0>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8007c74 <ESP_Upkeep+0x5c0>)
 8007bc4:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8007bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8007c74 <ESP_Upkeep+0x5c0>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d95e      	bls.n	8007c8c <ESP_Upkeep+0x5d8>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007bce:	f00c fef3 	bl	80149b8 <HAL_GetTick>
 8007bd2:	0003      	movs	r3, r0
 8007bd4:	4a28      	ldr	r2, [pc, #160]	@ (8007c78 <ESP_Upkeep+0x5c4>)
 8007bd6:	189a      	adds	r2, r3, r2
 8007bd8:	4b24      	ldr	r3, [pc, #144]	@ (8007c6c <ESP_Upkeep+0x5b8>)
 8007bda:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007bdc:	4b27      	ldr	r3, [pc, #156]	@ (8007c7c <ESP_Upkeep+0x5c8>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007be2:	f7ff fa33 	bl	800704c <clearDMABuffer>
            stop = HAL_GetTick();
 8007be6:	f00c fee7 	bl	80149b8 <HAL_GetTick>
 8007bea:	0002      	movs	r2, r0
 8007bec:	4b24      	ldr	r3, [pc, #144]	@ (8007c80 <ESP_Upkeep+0x5cc>)
 8007bee:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8007bf0:	4b23      	ldr	r3, [pc, #140]	@ (8007c80 <ESP_Upkeep+0x5cc>)
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	4b16      	ldr	r3, [pc, #88]	@ (8007c50 <ESP_Upkeep+0x59c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	4a22      	ldr	r2, [pc, #136]	@ (8007c84 <ESP_Upkeep+0x5d0>)
 8007bfc:	4922      	ldr	r1, [pc, #136]	@ (8007c88 <ESP_Upkeep+0x5d4>)
 8007bfe:	2001      	movs	r0, #1
 8007c00:	f00c f95a 	bl	8013eb8 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007c04:	4b05      	ldr	r3, [pc, #20]	@ (8007c1c <ESP_Upkeep+0x568>)
 8007c06:	220d      	movs	r2, #13
 8007c08:	701a      	strb	r2, [r3, #0]
            break;
 8007c0a:	e2a5      	b.n	8008158 <ESP_Upkeep+0xaa4>
 8007c0c:	20000684 	.word	0x20000684
 8007c10:	200005ad 	.word	0x200005ad
 8007c14:	200005ae 	.word	0x200005ae
 8007c18:	20000004 	.word	0x20000004
 8007c1c:	20000030 	.word	0x20000030
 8007c20:	2000068e 	.word	0x2000068e
 8007c24:	20000702 	.word	0x20000702
 8007c28:	20000701 	.word	0x20000701
 8007c2c:	20000700 	.word	0x20000700
 8007c30:	200005b0 	.word	0x200005b0
 8007c34:	20000014 	.word	0x20000014
 8007c38:	200005b1 	.word	0x200005b1
 8007c3c:	20000010 	.word	0x20000010
 8007c40:	200010f9 	.word	0x200010f9
 8007c44:	20000028 	.word	0x20000028
 8007c48:	20000002 	.word	0x20000002
 8007c4c:	2000000c 	.word	0x2000000c
 8007c50:	200005b4 	.word	0x200005b4
 8007c54:	20000024 	.word	0x20000024
 8007c58:	200005af 	.word	0x200005af
 8007c5c:	2000001c 	.word	0x2000001c
 8007c60:	0802b3f8 	.word	0x0802b3f8
 8007c64:	0802ac1c 	.word	0x0802ac1c
 8007c68:	200010f7 	.word	0x200010f7
 8007c6c:	20000694 	.word	0x20000694
 8007c70:	20000034 	.word	0x20000034
 8007c74:	2000068f 	.word	0x2000068f
 8007c78:	0003a980 	.word	0x0003a980
 8007c7c:	200005b3 	.word	0x200005b3
 8007c80:	200005b8 	.word	0x200005b8
 8007c84:	0802b428 	.word	0x0802b428
 8007c88:	0802abb8 	.word	0x0802abb8
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8007c8c:	4bb3      	ldr	r3, [pc, #716]	@ (8007f5c <ESP_Upkeep+0x8a8>)
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d106      	bne.n	8007ca2 <ESP_Upkeep+0x5ee>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007c94:	f00c fe90 	bl	80149b8 <HAL_GetTick>
 8007c98:	0003      	movs	r3, r0
 8007c9a:	330a      	adds	r3, #10
 8007c9c:	001a      	movs	r2, r3
 8007c9e:	4bb0      	ldr	r3, [pc, #704]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007ca0:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8007ca2:	4bae      	ldr	r3, [pc, #696]	@ (8007f5c <ESP_Upkeep+0x8a8>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b0a      	cmp	r3, #10
 8007ca8:	d106      	bne.n	8007cb8 <ESP_Upkeep+0x604>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007caa:	f00c fe85 	bl	80149b8 <HAL_GetTick>
 8007cae:	0003      	movs	r3, r0
 8007cb0:	330a      	adds	r3, #10
 8007cb2:	001a      	movs	r2, r3
 8007cb4:	4baa      	ldr	r3, [pc, #680]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007cb6:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8007cb8:	4ba8      	ldr	r3, [pc, #672]	@ (8007f5c <ESP_Upkeep+0x8a8>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b06      	cmp	r3, #6
 8007cbe:	d14b      	bne.n	8007d58 <ESP_Upkeep+0x6a4>
          timeoutcntr++;
 8007cc0:	4ba8      	ldr	r3, [pc, #672]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	4ba6      	ldr	r3, [pc, #664]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007cca:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8007ccc:	4aa6      	ldr	r2, [pc, #664]	@ (8007f68 <ESP_Upkeep+0x8b4>)
 8007cce:	4ba7      	ldr	r3, [pc, #668]	@ (8007f6c <ESP_Upkeep+0x8b8>)
 8007cd0:	0019      	movs	r1, r3
 8007cd2:	2001      	movs	r0, #1
 8007cd4:	f00c f8f0 	bl	8013eb8 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8007cd8:	4ba2      	ldr	r3, [pc, #648]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d924      	bls.n	8007d2a <ESP_Upkeep+0x676>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8007ce0:	f00c fe6a 	bl	80149b8 <HAL_GetTick>
 8007ce4:	0003      	movs	r3, r0
 8007ce6:	4aa2      	ldr	r2, [pc, #648]	@ (8007f70 <ESP_Upkeep+0x8bc>)
 8007ce8:	189a      	adds	r2, r3, r2
 8007cea:	4b9d      	ldr	r3, [pc, #628]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007cec:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007cee:	4ba1      	ldr	r3, [pc, #644]	@ (8007f74 <ESP_Upkeep+0x8c0>)
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007cf4:	f7ff f9aa 	bl	800704c <clearDMABuffer>
            stop = HAL_GetTick();
 8007cf8:	f00c fe5e 	bl	80149b8 <HAL_GetTick>
 8007cfc:	0002      	movs	r2, r0
 8007cfe:	4b9e      	ldr	r3, [pc, #632]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007d00:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8007d02:	4b9d      	ldr	r3, [pc, #628]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b9d      	ldr	r3, [pc, #628]	@ (8007f7c <ESP_Upkeep+0x8c8>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	4a9c      	ldr	r2, [pc, #624]	@ (8007f80 <ESP_Upkeep+0x8cc>)
 8007d0e:	4997      	ldr	r1, [pc, #604]	@ (8007f6c <ESP_Upkeep+0x8b8>)
 8007d10:	2001      	movs	r0, #1
 8007d12:	f00c f8d1 	bl	8013eb8 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007d16:	4b9b      	ldr	r3, [pc, #620]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d18:	220d      	movs	r2, #13
 8007d1a:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8007d1c:	4b9a      	ldr	r3, [pc, #616]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d1e:	2216      	movs	r2, #22
 8007d20:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8007d22:	4b9a      	ldr	r3, [pc, #616]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	701a      	strb	r2, [r3, #0]
            break;
 8007d28:	e216      	b.n	8008158 <ESP_Upkeep+0xaa4>
          }
          if(ATCommand != AT_SENDDATA){
 8007d2a:	4b97      	ldr	r3, [pc, #604]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b0f      	cmp	r3, #15
 8007d30:	d003      	beq.n	8007d3a <ESP_Upkeep+0x686>
            EspState = ESP_STATE_SEND;
 8007d32:	4b94      	ldr	r3, [pc, #592]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d34:	2204      	movs	r2, #4
 8007d36:	701a      	strb	r2, [r3, #0]
 8007d38:	e00e      	b.n	8007d58 <ESP_Upkeep+0x6a4>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8007d3a:	4b93      	ldr	r3, [pc, #588]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d3c:	220e      	movs	r2, #14
 8007d3e:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8007d40:	4b93      	ldr	r3, [pc, #588]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	3b01      	subs	r3, #1
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	4b91      	ldr	r3, [pc, #580]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d4a:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007d4c:	4b8f      	ldr	r3, [pc, #572]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d4e:	2202      	movs	r2, #2
 8007d50:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8007d52:	4b8c      	ldr	r3, [pc, #560]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d54:	2204      	movs	r2, #4
 8007d56:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8007d58:	1d7b      	adds	r3, r7, #5
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d100      	bne.n	8007d62 <ESP_Upkeep+0x6ae>
 8007d60:	e1f5      	b.n	800814e <ESP_Upkeep+0xa9a>
          EspState = ESP_STATE_NEXT_AT;
 8007d62:	4b88      	ldr	r3, [pc, #544]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007d64:	2205      	movs	r2, #5
 8007d66:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007d68:	e1f1      	b.n	800814e <ESP_Upkeep+0xa9a>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8007d6a:	4b89      	ldr	r3, [pc, #548]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	4b87      	ldr	r3, [pc, #540]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d74:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8007d76:	4b86      	ldr	r3, [pc, #536]	@ (8007f90 <ESP_Upkeep+0x8dc>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	001a      	movs	r2, r3
 8007d7c:	4b85      	ldr	r3, [pc, #532]	@ (8007f94 <ESP_Upkeep+0x8e0>)
 8007d7e:	5c9a      	ldrb	r2, [r3, r2]
 8007d80:	4b81      	ldr	r3, [pc, #516]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d82:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8007d84:	4b80      	ldr	r3, [pc, #512]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d102      	bne.n	8007d92 <ESP_Upkeep+0x6de>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8007d8c:	4b7f      	ldr	r3, [pc, #508]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d8e:	2201      	movs	r2, #1
 8007d90:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8007d92:	4b7d      	ldr	r3, [pc, #500]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	2b0e      	cmp	r3, #14
 8007d98:	d102      	bne.n	8007da0 <ESP_Upkeep+0x6ec>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8007d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8007da0:	4b79      	ldr	r3, [pc, #484]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2b0e      	cmp	r3, #14
 8007da6:	d006      	beq.n	8007db6 <ESP_Upkeep+0x702>
 8007da8:	4b77      	ldr	r3, [pc, #476]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d002      	beq.n	8007db6 <ESP_Upkeep+0x702>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007db0:	4b76      	ldr	r3, [pc, #472]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8007db6:	4b74      	ldr	r3, [pc, #464]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2b11      	cmp	r3, #17
 8007dbc:	d102      	bne.n	8007dc4 <ESP_Upkeep+0x710>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8007dbe:	4b73      	ldr	r3, [pc, #460]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007dc0:	2205      	movs	r2, #5
 8007dc2:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(ATCommand == AT_SENDMAIL){
 8007dc4:	4b70      	ldr	r3, [pc, #448]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	2b15      	cmp	r3, #21
 8007dca:	d102      	bne.n	8007dd2 <ESP_Upkeep+0x71e>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8007f8c <ESP_Upkeep+0x8d8>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	701a      	strb	r2, [r3, #0]
      }
#endif
      EspState = ESP_STATE_SEND;
 8007dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007dd4:	2204      	movs	r2, #4
 8007dd6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8007dd8:	4b6b      	ldr	r3, [pc, #428]	@ (8007f88 <ESP_Upkeep+0x8d4>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	2b16      	cmp	r3, #22
 8007dde:	d000      	beq.n	8007de2 <ESP_Upkeep+0x72e>
 8007de0:	e1b7      	b.n	8008152 <ESP_Upkeep+0xa9e>
        if(Mode == AT_MODE_SEND){
 8007de2:	4b6d      	ldr	r3, [pc, #436]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d124      	bne.n	8007e34 <ESP_Upkeep+0x780>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007dea:	f00c fde5 	bl	80149b8 <HAL_GetTick>
 8007dee:	0003      	movs	r3, r0
 8007df0:	4a6a      	ldr	r2, [pc, #424]	@ (8007f9c <ESP_Upkeep+0x8e8>)
 8007df2:	189a      	adds	r2, r3, r2
 8007df4:	4b5a      	ldr	r3, [pc, #360]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007df6:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8007df8:	f7ff f928 	bl	800704c <clearDMABuffer>
          stop = HAL_GetTick();
 8007dfc:	f00c fddc 	bl	80149b8 <HAL_GetTick>
 8007e00:	0002      	movs	r2, r0
 8007e02:	4b5d      	ldr	r3, [pc, #372]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e04:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8007e06:	4b5c      	ldr	r3, [pc, #368]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8007f7c <ESP_Upkeep+0x8c8>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	4a63      	ldr	r2, [pc, #396]	@ (8007fa0 <ESP_Upkeep+0x8ec>)
 8007e12:	4964      	ldr	r1, [pc, #400]	@ (8007fa4 <ESP_Upkeep+0x8f0>)
 8007e14:	2002      	movs	r0, #2
 8007e16:	f00c f84f 	bl	8013eb8 <CreateLine>
          ResetdBAmax();
 8007e1a:	f006 f8b5 	bl	800df88 <ResetdBAmax>
          resetMaxMeasurementValues();
 8007e1e:	f7fc ffbf 	bl	8004da0 <resetMaxMeasurementValues>
          showTime();
 8007e22:	f002 f86d 	bl	8009f00 <showTime>
          ESPTransmitDone = true;
 8007e26:	4b53      	ldr	r3, [pc, #332]	@ (8007f74 <ESP_Upkeep+0x8c0>)
 8007e28:	2201      	movs	r2, #1
 8007e2a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8007e2c:	4b55      	ldr	r3, [pc, #340]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007e2e:	220d      	movs	r2, #13
 8007e30:	701a      	strb	r2, [r3, #0]
#endif
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8007e32:	e18e      	b.n	8008152 <ESP_Upkeep+0xa9e>
        else if (Mode == AT_MODE_GETTIME) {
 8007e34:	4b58      	ldr	r3, [pc, #352]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b05      	cmp	r3, #5
 8007e3a:	d13a      	bne.n	8007eb2 <ESP_Upkeep+0x7fe>
            setTime = false;
 8007e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8007fa8 <ESP_Upkeep+0x8f4>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8007e42:	f002 f8ff 	bl	800a044 <calculateNextNTPTime>
 8007e46:	0002      	movs	r2, r0
 8007e48:	4b58      	ldr	r3, [pc, #352]	@ (8007fac <ESP_Upkeep+0x8f8>)
 8007e4a:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 8007e4c:	4b57      	ldr	r3, [pc, #348]	@ (8007fac <ESP_Upkeep+0x8f8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a57      	ldr	r2, [pc, #348]	@ (8007fb0 <ESP_Upkeep+0x8fc>)
 8007e52:	189a      	adds	r2, r3, r2
 8007e54:	4b55      	ldr	r3, [pc, #340]	@ (8007fac <ESP_Upkeep+0x8f8>)
 8007e56:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 8007e58:	4b55      	ldr	r3, [pc, #340]	@ (8007fb0 <ESP_Upkeep+0x8fc>)
 8007e5a:	4a56      	ldr	r2, [pc, #344]	@ (8007fb4 <ESP_Upkeep+0x900>)
 8007e5c:	4951      	ldr	r1, [pc, #324]	@ (8007fa4 <ESP_Upkeep+0x8f0>)
 8007e5e:	2002      	movs	r0, #2
 8007e60:	f00c f82a 	bl	8013eb8 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8007e64:	4b54      	ldr	r3, [pc, #336]	@ (8007fb8 <ESP_Upkeep+0x904>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	4b3d      	ldr	r3, [pc, #244]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007e6a:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8007e6c:	f7ff f8ee 	bl	800704c <clearDMABuffer>
            stop = HAL_GetTick();
 8007e70:	f00c fda2 	bl	80149b8 <HAL_GetTick>
 8007e74:	0002      	movs	r2, r0
 8007e76:	4b40      	ldr	r3, [pc, #256]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e78:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8007e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8007f78 <ESP_Upkeep+0x8c4>)
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	4b3f      	ldr	r3, [pc, #252]	@ (8007f7c <ESP_Upkeep+0x8c8>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	4a4d      	ldr	r2, [pc, #308]	@ (8007fbc <ESP_Upkeep+0x908>)
 8007e86:	4947      	ldr	r1, [pc, #284]	@ (8007fa4 <ESP_Upkeep+0x8f0>)
 8007e88:	2002      	movs	r0, #2
 8007e8a:	f00c f815 	bl	8013eb8 <CreateLine>
            if (HAL_GetTick() < DEVICE_INIT_TIMEOUT) { // during startup the sensors are active after getting time
 8007e8e:	f00c fd93 	bl	80149b8 <HAL_GetTick>
 8007e92:	0003      	movs	r3, r0
 8007e94:	4a4a      	ldr	r2, [pc, #296]	@ (8007fc0 <ESP_Upkeep+0x90c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d804      	bhi.n	8007ea4 <ESP_Upkeep+0x7f0>
              deviceTimeOut = DEVICE_INIT_TIMEOUT;
 8007e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8007fc4 <ESP_Upkeep+0x910>)
 8007e9c:	4a4a      	ldr	r2, [pc, #296]	@ (8007fc8 <ESP_Upkeep+0x914>)
 8007e9e:	601a      	str	r2, [r3, #0]
              EnabledConnectedDevices();
 8007ea0:	f005 ff8c 	bl	800ddbc <EnabledConnectedDevices>
            EspState = ESP_STATE_DEINIT;
 8007ea4:	4b37      	ldr	r3, [pc, #220]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007ea6:	220d      	movs	r2, #13
 8007ea8:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007eac:	2202      	movs	r2, #2
 8007eae:	701a      	strb	r2, [r3, #0]
    break;
 8007eb0:	e14f      	b.n	8008152 <ESP_Upkeep+0xa9e>
        else if (Mode == AT_MODE_MAIL) {
 8007eb2:	4b39      	ldr	r3, [pc, #228]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	2b06      	cmp	r3, #6
 8007eb8:	d111      	bne.n	8007ede <ESP_Upkeep+0x82a>
            clearDMABuffer();
 8007eba:	f7ff f8c7 	bl	800704c <clearDMABuffer>
            ESPTimeStamp = savedESPTimeStamp;
 8007ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8007fb8 <ESP_Upkeep+0x904>)
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	4b27      	ldr	r3, [pc, #156]	@ (8007f60 <ESP_Upkeep+0x8ac>)
 8007ec4:	601a      	str	r2, [r3, #0]
            sendpwremail = DONE;
 8007ec6:	4b41      	ldr	r3, [pc, #260]	@ (8007fcc <ESP_Upkeep+0x918>)
 8007ec8:	2202      	movs	r2, #2
 8007eca:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_DEINIT;
 8007ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007ece:	220d      	movs	r2, #13
 8007ed0:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007ed2:	4b31      	ldr	r3, [pc, #196]	@ (8007f98 <ESP_Upkeep+0x8e4>)
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	701a      	strb	r2, [r3, #0]
            EnabledConnectedDevices();
 8007ed8:	f005 ff70 	bl	800ddbc <EnabledConnectedDevices>
    break;
 8007edc:	e139      	b.n	8008152 <ESP_Upkeep+0xa9e>
          EspState = ESP_STATE_RESET;
 8007ede:	4b29      	ldr	r3, [pc, #164]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007ee0:	2209      	movs	r2, #9
 8007ee2:	701a      	strb	r2, [r3, #0]
    break;
 8007ee4:	e135      	b.n	8008152 <ESP_Upkeep+0xa9e>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8007ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8007fd0 <ESP_Upkeep+0x91c>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007eec:	4b39      	ldr	r3, [pc, #228]	@ (8007fd4 <ESP_Upkeep+0x920>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	0018      	movs	r0, r3
 8007ef4:	f00d ffc7 	bl	8015e86 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007ef8:	2001      	movs	r0, #1
 8007efa:	f00c fd67 	bl	80149cc <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007efe:	2380      	movs	r3, #128	@ 0x80
 8007f00:	011b      	lsls	r3, r3, #4
 8007f02:	4835      	ldr	r0, [pc, #212]	@ (8007fd8 <ESP_Upkeep+0x924>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	0019      	movs	r1, r3
 8007f08:	f00d ffbd 	bl	8015e86 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007f0c:	2001      	movs	r0, #1
 8007f0e:	f00c fd5d 	bl	80149cc <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007f12:	4b30      	ldr	r3, [pc, #192]	@ (8007fd4 <ESP_Upkeep+0x920>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	2102      	movs	r1, #2
 8007f18:	0018      	movs	r0, r3
 8007f1a:	f00d ffb4 	bl	8015e86 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8007f1e:	4b19      	ldr	r3, [pc, #100]	@ (8007f84 <ESP_Upkeep+0x8d0>)
 8007f20:	2209      	movs	r2, #9
 8007f22:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8007f24:	2001      	movs	r0, #1
 8007f26:	f00c fd51 	bl	80149cc <HAL_Delay>
      ResetESPIndicator();
 8007f2a:	f00a fdc7 	bl	8012abc <ResetESPIndicator>
      Debug("ESP powered off.");
 8007f2e:	4a2b      	ldr	r2, [pc, #172]	@ (8007fdc <ESP_Upkeep+0x928>)
 8007f30:	4b2b      	ldr	r3, [pc, #172]	@ (8007fe0 <ESP_Upkeep+0x92c>)
 8007f32:	0019      	movs	r1, r3
 8007f34:	2003      	movs	r0, #3
 8007f36:	f00b ffbf 	bl	8013eb8 <CreateLine>
      if (Check_USB_PowerOn() || userToggle) {
 8007f3a:	f001 fed9 	bl	8009cf0 <Check_USB_PowerOn>
 8007f3e:	1e03      	subs	r3, r0, #0
 8007f40:	d103      	bne.n	8007f4a <ESP_Upkeep+0x896>
 8007f42:	4b28      	ldr	r3, [pc, #160]	@ (8007fe4 <ESP_Upkeep+0x930>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <ESP_Upkeep+0x89a>
        EnabledConnectedDevices();
 8007f4a:	f005 ff37 	bl	800ddbc <EnabledConnectedDevices>
      }
      errorcntr = 0;
 8007f4e:	4b26      	ldr	r3, [pc, #152]	@ (8007fe8 <ESP_Upkeep+0x934>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8007f54:	4b03      	ldr	r3, [pc, #12]	@ (8007f64 <ESP_Upkeep+0x8b0>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	701a      	strb	r2, [r3, #0]
      break;
 8007f5a:	e0fd      	b.n	8008158 <ESP_Upkeep+0xaa4>
 8007f5c:	20000034 	.word	0x20000034
 8007f60:	20000694 	.word	0x20000694
 8007f64:	20000690 	.word	0x20000690
 8007f68:	0802b45c 	.word	0x0802b45c
 8007f6c:	0802abb8 	.word	0x0802abb8
 8007f70:	0000c350 	.word	0x0000c350
 8007f74:	200005b3 	.word	0x200005b3
 8007f78:	200005b8 	.word	0x200005b8
 8007f7c:	200005b4 	.word	0x200005b4
 8007f80:	0802b498 	.word	0x0802b498
 8007f84:	20000030 	.word	0x20000030
 8007f88:	20000701 	.word	0x20000701
 8007f8c:	20000700 	.word	0x20000700
 8007f90:	2000068e 	.word	0x2000068e
 8007f94:	20000684 	.word	0x20000684
 8007f98:	20000702 	.word	0x20000702
 8007f9c:	0003a980 	.word	0x0003a980
 8007fa0:	0802b4c8 	.word	0x0802b4c8
 8007fa4:	0802abcc 	.word	0x0802abcc
 8007fa8:	20000002 	.word	0x20000002
 8007fac:	20000698 	.word	0x20000698
 8007fb0:	00012686 	.word	0x00012686
 8007fb4:	0802b4e0 	.word	0x0802b4e0
 8007fb8:	2000002c 	.word	0x2000002c
 8007fbc:	0802b524 	.word	0x0802b524
 8007fc0:	000061a7 	.word	0x000061a7
 8007fc4:	20001114 	.word	0x20001114
 8007fc8:	000061a8 	.word	0x000061a8
 8007fcc:	200010f9 	.word	0x200010f9
 8007fd0:	200005ac 	.word	0x200005ac
 8007fd4:	50001c00 	.word	0x50001c00
 8007fd8:	50000800 	.word	0x50000800
 8007fdc:	0802b544 	.word	0x0802b544
 8007fe0:	0802ac1c 	.word	0x0802ac1c
 8007fe4:	2000214e 	.word	0x2000214e
 8007fe8:	2000068f 	.word	0x2000068f

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8007fec:	4b5d      	ldr	r3, [pc, #372]	@ (8008164 <ESP_Upkeep+0xab0>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	0018      	movs	r0, r3
 8007ff2:	f00b ff0b 	bl	8013e0c <TimestampIsReached>
 8007ff6:	1e03      	subs	r3, r0, #0
 8007ff8:	d103      	bne.n	8008002 <ESP_Upkeep+0x94e>
 8007ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8008168 <ESP_Upkeep+0xab4>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d053      	beq.n	80080aa <ESP_Upkeep+0x9f6>
        ESPTransmitDone = false;
 8008002:	4b5a      	ldr	r3, [pc, #360]	@ (800816c <ESP_Upkeep+0xab8>)
 8008004:	2200      	movs	r2, #0
 8008006:	701a      	strb	r2, [r3, #0]
        if((Mode == AT_MODE_INIT) && is_OM_configured()){
 8008008:	4b59      	ldr	r3, [pc, #356]	@ (8008170 <ESP_Upkeep+0xabc>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d109      	bne.n	8008024 <ESP_Upkeep+0x970>
 8008010:	f7ff f9f2 	bl	80073f8 <is_OM_configured>
 8008014:	1e03      	subs	r3, r0, #0
 8008016:	d005      	beq.n	8008024 <ESP_Upkeep+0x970>
          InitIsDone = true;
 8008018:	4b56      	ldr	r3, [pc, #344]	@ (8008174 <ESP_Upkeep+0xac0>)
 800801a:	2201      	movs	r2, #1
 800801c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 800801e:	4b56      	ldr	r3, [pc, #344]	@ (8008178 <ESP_Upkeep+0xac4>)
 8008020:	220b      	movs	r2, #11
 8008022:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8008024:	4b52      	ldr	r3, [pc, #328]	@ (8008170 <ESP_Upkeep+0xabc>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d105      	bne.n	8008038 <ESP_Upkeep+0x984>
          ConnectionMade = true;
 800802c:	4b53      	ldr	r3, [pc, #332]	@ (800817c <ESP_Upkeep+0xac8>)
 800802e:	2201      	movs	r2, #1
 8008030:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8008032:	4b51      	ldr	r3, [pc, #324]	@ (8008178 <ESP_Upkeep+0xac4>)
 8008034:	220b      	movs	r2, #11
 8008036:	701a      	strb	r2, [r3, #0]
        }
        if((Mode == AT_MODE_SEND) && is_OM_configured()) {
 8008038:	4b4d      	ldr	r3, [pc, #308]	@ (8008170 <ESP_Upkeep+0xabc>)
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	2b02      	cmp	r3, #2
 800803e:	d106      	bne.n	800804e <ESP_Upkeep+0x99a>
 8008040:	f7ff f9da 	bl	80073f8 <is_OM_configured>
 8008044:	1e03      	subs	r3, r0, #0
 8008046:	d002      	beq.n	800804e <ESP_Upkeep+0x99a>
          EspState = ESP_STATE_INIT;
 8008048:	4b4b      	ldr	r3, [pc, #300]	@ (8008178 <ESP_Upkeep+0xac4>)
 800804a:	2202      	movs	r2, #2
 800804c:	701a      	strb	r2, [r3, #0]
        }
#ifdef USE_MAIL
        if((Mode == AT_MODE_MAIL) && is_OM_configured()){
 800804e:	4b48      	ldr	r3, [pc, #288]	@ (8008170 <ESP_Upkeep+0xabc>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	2b06      	cmp	r3, #6
 8008054:	d106      	bne.n	8008064 <ESP_Upkeep+0x9b0>
 8008056:	f7ff f9cf 	bl	80073f8 <is_OM_configured>
 800805a:	1e03      	subs	r3, r0, #0
 800805c:	d002      	beq.n	8008064 <ESP_Upkeep+0x9b0>
          EspState = ESP_STATE_CONFIG;
 800805e:	4b46      	ldr	r3, [pc, #280]	@ (8008178 <ESP_Upkeep+0xac4>)
 8008060:	220e      	movs	r2, #14
 8008062:	701a      	strb	r2, [r3, #0]
        }
#endif
        if(Mode == AT_MODE_RECONFIG){
 8008064:	4b42      	ldr	r3, [pc, #264]	@ (8008170 <ESP_Upkeep+0xabc>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b03      	cmp	r3, #3
 800806a:	d108      	bne.n	800807e <ESP_Upkeep+0x9ca>
          EspState = ESP_STATE_CONFIG;
 800806c:	4b42      	ldr	r3, [pc, #264]	@ (8008178 <ESP_Upkeep+0xac4>)
 800806e:	220e      	movs	r2, #14
 8008070:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8008072:	4a43      	ldr	r2, [pc, #268]	@ (8008180 <ESP_Upkeep+0xacc>)
 8008074:	4b43      	ldr	r3, [pc, #268]	@ (8008184 <ESP_Upkeep+0xad0>)
 8008076:	0019      	movs	r1, r3
 8008078:	2002      	movs	r0, #2
 800807a:	f00b ff1d 	bl	8013eb8 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 800807e:	4b3c      	ldr	r3, [pc, #240]	@ (8008170 <ESP_Upkeep+0xabc>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	2b04      	cmp	r3, #4
 8008084:	d105      	bne.n	8008092 <ESP_Upkeep+0x9de>
          EspState = ESP_STATE_MODE_SELECT;
 8008086:	4b3c      	ldr	r3, [pc, #240]	@ (8008178 <ESP_Upkeep+0xac4>)
 8008088:	220b      	movs	r2, #11
 800808a:	701a      	strb	r2, [r3, #0]
          APtested = true;  // deze lijkt mij dubieus wordt in CWJAP gezet.
 800808c:	4b3e      	ldr	r3, [pc, #248]	@ (8008188 <ESP_Upkeep+0xad4>)
 800808e:	2201      	movs	r2, #1
 8008090:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8008092:	4b35      	ldr	r3, [pc, #212]	@ (8008168 <ESP_Upkeep+0xab4>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d020      	beq.n	80080dc <ESP_Upkeep+0xa28>
 800809a:	4b35      	ldr	r3, [pc, #212]	@ (8008170 <ESP_Upkeep+0xabc>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d01c      	beq.n	80080dc <ESP_Upkeep+0xa28>
          EspState = ESP_STATE_INIT;
 80080a2:	4b35      	ldr	r3, [pc, #212]	@ (8008178 <ESP_Upkeep+0xac4>)
 80080a4:	2202      	movs	r2, #2
 80080a6:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 80080a8:	e018      	b.n	80080dc <ESP_Upkeep+0xa28>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 80080aa:	f001 ffcb 	bl	800a044 <calculateNextNTPTime>
 80080ae:	0002      	movs	r2, r0
 80080b0:	4b36      	ldr	r3, [pc, #216]	@ (800818c <ESP_Upkeep+0xad8>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d94e      	bls.n	8008156 <ESP_Upkeep+0xaa2>
        if(Mode == AT_MODE_SEND ) {
 80080b8:	4b2d      	ldr	r3, [pc, #180]	@ (8008170 <ESP_Upkeep+0xabc>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d14a      	bne.n	8008156 <ESP_Upkeep+0xaa2>
           Mode = AT_MODE_GETTIME;
 80080c0:	4b2b      	ldr	r3, [pc, #172]	@ (8008170 <ESP_Upkeep+0xabc>)
 80080c2:	2205      	movs	r2, #5
 80080c4:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 80080c6:	4b2c      	ldr	r3, [pc, #176]	@ (8008178 <ESP_Upkeep+0xac4>)
 80080c8:	2202      	movs	r2, #2
 80080ca:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 80080cc:	4b25      	ldr	r3, [pc, #148]	@ (8008164 <ESP_Upkeep+0xab0>)
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	4b2f      	ldr	r3, [pc, #188]	@ (8008190 <ESP_Upkeep+0xadc>)
 80080d2:	601a      	str	r2, [r3, #0]
           setTime = true;
 80080d4:	4b2f      	ldr	r3, [pc, #188]	@ (8008194 <ESP_Upkeep+0xae0>)
 80080d6:	2201      	movs	r2, #1
 80080d8:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80080da:	e03c      	b.n	8008156 <ESP_Upkeep+0xaa2>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 80080dc:	46c0      	nop			@ (mov r8, r8)
      break;
 80080de:	e03a      	b.n	8008156 <ESP_Upkeep+0xaa2>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 80080e0:	4b2d      	ldr	r3, [pc, #180]	@ (8008198 <ESP_Upkeep+0xae4>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2201      	movs	r2, #1
 80080e6:	4053      	eors	r3, r2
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d008      	beq.n	8008100 <ESP_Upkeep+0xa4c>
        Info("Do nothing until reset");
 80080ee:	4a24      	ldr	r2, [pc, #144]	@ (8008180 <ESP_Upkeep+0xacc>)
 80080f0:	4b24      	ldr	r3, [pc, #144]	@ (8008184 <ESP_Upkeep+0xad0>)
 80080f2:	0019      	movs	r1, r3
 80080f4:	2002      	movs	r0, #2
 80080f6:	f00b fedf 	bl	8013eb8 <CreateLine>
        msgdone = true;
 80080fa:	4b27      	ldr	r3, [pc, #156]	@ (8008198 <ESP_Upkeep+0xae4>)
 80080fc:	2201      	movs	r2, #1
 80080fe:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8008100:	f01b f918 	bl	8023334 <GetUsbRxPointer>
 8008104:	0003      	movs	r3, r0
 8008106:	0018      	movs	r0, r3
 8008108:	f000 f98c 	bl	8008424 <Process_PC_Config>
      break;
 800810c:	e024      	b.n	8008158 <ESP_Upkeep+0xaa4>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 800810e:	4a23      	ldr	r2, [pc, #140]	@ (800819c <ESP_Upkeep+0xae8>)
 8008110:	4b23      	ldr	r3, [pc, #140]	@ (80081a0 <ESP_Upkeep+0xaec>)
 8008112:	0019      	movs	r1, r3
 8008114:	2001      	movs	r0, #1
 8008116:	f00b fecf 	bl	8013eb8 <CreateLine>
      EspState = ESP_STATE_INIT;
 800811a:	4b17      	ldr	r3, [pc, #92]	@ (8008178 <ESP_Upkeep+0xac4>)
 800811c:	2202      	movs	r2, #2
 800811e:	701a      	strb	r2, [r3, #0]
      break;
 8008120:	e01a      	b.n	8008158 <ESP_Upkeep+0xaa4>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8008122:	4a20      	ldr	r2, [pc, #128]	@ (80081a4 <ESP_Upkeep+0xaf0>)
 8008124:	4b1e      	ldr	r3, [pc, #120]	@ (80081a0 <ESP_Upkeep+0xaec>)
 8008126:	0019      	movs	r1, r3
 8008128:	2001      	movs	r0, #1
 800812a:	f00b fec5 	bl	8013eb8 <CreateLine>
      EspState = ESP_STATE_ERROR;
 800812e:	4b12      	ldr	r3, [pc, #72]	@ (8008178 <ESP_Upkeep+0xac4>)
 8008130:	2207      	movs	r2, #7
 8008132:	701a      	strb	r2, [r3, #0]
      break;
 8008134:	e010      	b.n	8008158 <ESP_Upkeep+0xaa4>
      break;
 8008136:	46c0      	nop			@ (mov r8, r8)
 8008138:	e00e      	b.n	8008158 <ESP_Upkeep+0xaa4>
        break;
 800813a:	46c0      	nop			@ (mov r8, r8)
 800813c:	e00c      	b.n	8008158 <ESP_Upkeep+0xaa4>
      break;
 800813e:	46c0      	nop			@ (mov r8, r8)
 8008140:	e00a      	b.n	8008158 <ESP_Upkeep+0xaa4>
        break;
 8008142:	46c0      	nop			@ (mov r8, r8)
 8008144:	e008      	b.n	8008158 <ESP_Upkeep+0xaa4>
    break;
 8008146:	46c0      	nop			@ (mov r8, r8)
 8008148:	e006      	b.n	8008158 <ESP_Upkeep+0xaa4>
    break;
 800814a:	46c0      	nop			@ (mov r8, r8)
 800814c:	e004      	b.n	8008158 <ESP_Upkeep+0xaa4>
      break;
 800814e:	46c0      	nop			@ (mov r8, r8)
 8008150:	e002      	b.n	8008158 <ESP_Upkeep+0xaa4>
    break;
 8008152:	46c0      	nop			@ (mov r8, r8)
 8008154:	e000      	b.n	8008158 <ESP_Upkeep+0xaa4>
      break;
 8008156:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8008158:	4b07      	ldr	r3, [pc, #28]	@ (8008178 <ESP_Upkeep+0xac4>)
 800815a:	781b      	ldrb	r3, [r3, #0]
}
 800815c:	0018      	movs	r0, r3
 800815e:	46bd      	mov	sp, r7
 8008160:	b002      	add	sp, #8
 8008162:	bdb0      	pop	{r4, r5, r7, pc}
 8008164:	20000694 	.word	0x20000694
 8008168:	200005af 	.word	0x200005af
 800816c:	200005b3 	.word	0x200005b3
 8008170:	20000702 	.word	0x20000702
 8008174:	200005ad 	.word	0x200005ad
 8008178:	20000030 	.word	0x20000030
 800817c:	200005b0 	.word	0x200005b0
 8008180:	0802b558 	.word	0x0802b558
 8008184:	0802abcc 	.word	0x0802abcc
 8008188:	200005b1 	.word	0x200005b1
 800818c:	20000698 	.word	0x20000698
 8008190:	2000002c 	.word	0x2000002c
 8008194:	20000002 	.word	0x20000002
 8008198:	200005b2 	.word	0x200005b2
 800819c:	0802b570 	.word	0x0802b570
 80081a0:	0802abb8 	.word	0x0802abb8
 80081a4:	0802b584 	.word	0x0802b584

080081a8 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 80081b0:	4b12      	ldr	r3, [pc, #72]	@ (80081fc <I2CSensors_Init+0x54>)
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 80081b6:	4a12      	ldr	r2, [pc, #72]	@ (8008200 <I2CSensors_Init+0x58>)
 80081b8:	4b12      	ldr	r3, [pc, #72]	@ (8008204 <I2CSensors_Init+0x5c>)
 80081ba:	0011      	movs	r1, r2
 80081bc:	0018      	movs	r0, r3
 80081be:	f00c f8b9 	bl	8014334 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 80081c2:	4a0f      	ldr	r2, [pc, #60]	@ (8008200 <I2CSensors_Init+0x58>)
 80081c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008204 <I2CSensors_Init+0x5c>)
 80081c6:	0011      	movs	r1, r2
 80081c8:	0018      	movs	r0, r3
 80081ca:	f008 fe63 	bl	8010e94 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 80081ce:	4a0e      	ldr	r2, [pc, #56]	@ (8008208 <I2CSensors_Init+0x60>)
 80081d0:	490b      	ldr	r1, [pc, #44]	@ (8008200 <I2CSensors_Init+0x58>)
 80081d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008204 <I2CSensors_Init+0x5c>)
 80081d4:	0018      	movs	r0, r3
 80081d6:	f002 ff1d 	bl	800b014 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 80081da:	4a0c      	ldr	r2, [pc, #48]	@ (800820c <I2CSensors_Init+0x64>)
 80081dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008210 <I2CSensors_Init+0x68>)
 80081de:	0011      	movs	r1, r2
 80081e0:	0018      	movs	r0, r3
 80081e2:	f003 faf3 	bl	800b7cc <BMP_Init>
//    BMP_Init(ReadI2CDirect, WriteI2CDirect);
    ENS_Init(ReadI2CMem, WriteI2CMem);
 80081e6:	4a09      	ldr	r2, [pc, #36]	@ (800820c <I2CSensors_Init+0x64>)
 80081e8:	4b09      	ldr	r3, [pc, #36]	@ (8008210 <I2CSensors_Init+0x68>)
 80081ea:	0011      	movs	r1, r2
 80081ec:	0018      	movs	r0, r3
 80081ee:	f7fb fcc1 	bl	8003b74 <ENS_Init>
}
 80081f2:	46c0      	nop			@ (mov r8, r8)
 80081f4:	46bd      	mov	sp, r7
 80081f6:	b002      	add	sp, #8
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	46c0      	nop			@ (mov r8, r8)
 80081fc:	2000093c 	.word	0x2000093c
 8008200:	080082cd 	.word	0x080082cd
 8008204:	08008275 	.word	0x08008275
 8008208:	08008215 	.word	0x08008215
 800820c:	080083a5 	.word	0x080083a5
 8008210:	08008321 	.word	0x08008321

08008214 <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008216:	b087      	sub	sp, #28
 8008218:	af02      	add	r7, sp, #8
 800821a:	6039      	str	r1, [r7, #0]
 800821c:	0011      	movs	r1, r2
 800821e:	1dfb      	adds	r3, r7, #7
 8008220:	1c02      	adds	r2, r0, #0
 8008222:	701a      	strb	r2, [r3, #0]
 8008224:	1dbb      	adds	r3, r7, #6
 8008226:	1c0a      	adds	r2, r1, #0
 8008228:	701a      	strb	r2, [r3, #0]
//  Debug("ReadI2CDirect address 0x%02X", address);
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, ((address << 1)+1), buffer, nrBytes, 1000);
 800822a:	4b11      	ldr	r3, [pc, #68]	@ (8008270 <ReadI2CDirect+0x5c>)
 800822c:	6818      	ldr	r0, [r3, #0]
 800822e:	1dfb      	adds	r3, r7, #7
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	b29b      	uxth	r3, r3
 8008234:	18db      	adds	r3, r3, r3
 8008236:	b29b      	uxth	r3, r3
 8008238:	3301      	adds	r3, #1
 800823a:	b299      	uxth	r1, r3
 800823c:	1dbb      	adds	r3, r7, #6
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	b29d      	uxth	r5, r3
 8008242:	260f      	movs	r6, #15
 8008244:	19bc      	adds	r4, r7, r6
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	23fa      	movs	r3, #250	@ 0xfa
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	002b      	movs	r3, r5
 8008250:	f00d fff0 	bl	8016234 <HAL_I2C_Master_Receive>
 8008254:	0003      	movs	r3, r0
 8008256:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8008258:	19bb      	adds	r3, r7, r6
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <ReadI2CDirect+0x50>
        return false;
 8008260:	2300      	movs	r3, #0
 8008262:	e000      	b.n	8008266 <ReadI2CDirect+0x52>
    }
    return true;
 8008264:	2301      	movs	r3, #1
}
 8008266:	0018      	movs	r0, r3
 8008268:	46bd      	mov	sp, r7
 800826a:	b005      	add	sp, #20
 800826c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800826e:	46c0      	nop			@ (mov r8, r8)
 8008270:	2000093c 	.word	0x2000093c

08008274 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008274:	b5b0      	push	{r4, r5, r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6039      	str	r1, [r7, #0]
 800827c:	0011      	movs	r1, r2
 800827e:	1dfb      	adds	r3, r7, #7
 8008280:	1c02      	adds	r2, r0, #0
 8008282:	701a      	strb	r2, [r3, #0]
 8008284:	1dbb      	adds	r3, r7, #6
 8008286:	1c0a      	adds	r2, r1, #0
 8008288:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, ((address << 1)+1), buffer, nrBytes);
 800828a:	4b0f      	ldr	r3, [pc, #60]	@ (80082c8 <ReadI2C+0x54>)
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	1dfb      	adds	r3, r7, #7
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	b29b      	uxth	r3, r3
 8008294:	18db      	adds	r3, r3, r3
 8008296:	b29b      	uxth	r3, r3
 8008298:	3301      	adds	r3, #1
 800829a:	b299      	uxth	r1, r3
 800829c:	1dbb      	adds	r3, r7, #6
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	250f      	movs	r5, #15
 80082a4:	197c      	adds	r4, r7, r5
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	f00e f9d2 	bl	8016650 <HAL_I2C_Master_Receive_DMA>
 80082ac:	0003      	movs	r3, r0
 80082ae:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80082b0:	197b      	adds	r3, r7, r5
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <ReadI2C+0x48>
        return false;
 80082b8:	2300      	movs	r3, #0
 80082ba:	e000      	b.n	80082be <ReadI2C+0x4a>
    }
    return true;
 80082bc:	2301      	movs	r3, #1
}
 80082be:	0018      	movs	r0, r3
 80082c0:	46bd      	mov	sp, r7
 80082c2:	b004      	add	sp, #16
 80082c4:	bdb0      	pop	{r4, r5, r7, pc}
 80082c6:	46c0      	nop			@ (mov r8, r8)
 80082c8:	2000093c 	.word	0x2000093c

080082cc <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80082cc:	b5b0      	push	{r4, r5, r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6039      	str	r1, [r7, #0]
 80082d4:	0011      	movs	r1, r2
 80082d6:	1dfb      	adds	r3, r7, #7
 80082d8:	1c02      	adds	r2, r0, #0
 80082da:	701a      	strb	r2, [r3, #0]
 80082dc:	1dbb      	adds	r3, r7, #6
 80082de:	1c0a      	adds	r2, r1, #0
 80082e0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80082e2:	4b0e      	ldr	r3, [pc, #56]	@ (800831c <WriteI2C+0x50>)
 80082e4:	6818      	ldr	r0, [r3, #0]
 80082e6:	1dfb      	adds	r3, r7, #7
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	18db      	adds	r3, r3, r3
 80082ee:	b299      	uxth	r1, r3
 80082f0:	1dbb      	adds	r3, r7, #6
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	250f      	movs	r5, #15
 80082f8:	197c      	adds	r4, r7, r5
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	f00e f8a2 	bl	8016444 <HAL_I2C_Master_Transmit_DMA>
 8008300:	0003      	movs	r3, r0
 8008302:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8008304:	197b      	adds	r3, r7, r5
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <WriteI2C+0x44>
        return false;
 800830c:	2300      	movs	r3, #0
 800830e:	e000      	b.n	8008312 <WriteI2C+0x46>
    }
    return true;
 8008310:	2301      	movs	r3, #1
}
 8008312:	0018      	movs	r0, r3
 8008314:	46bd      	mov	sp, r7
 8008316:	b004      	add	sp, #16
 8008318:	bdb0      	pop	{r4, r5, r7, pc}
 800831a:	46c0      	nop			@ (mov r8, r8)
 800831c:	2000093c 	.word	0x2000093c

08008320 <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8008320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008322:	b08b      	sub	sp, #44	@ 0x2c
 8008324:	af04      	add	r7, sp, #16
 8008326:	0004      	movs	r4, r0
 8008328:	0008      	movs	r0, r1
 800832a:	0011      	movs	r1, r2
 800832c:	607b      	str	r3, [r7, #4]
 800832e:	250f      	movs	r5, #15
 8008330:	197b      	adds	r3, r7, r5
 8008332:	1c22      	adds	r2, r4, #0
 8008334:	701a      	strb	r2, [r3, #0]
 8008336:	260c      	movs	r6, #12
 8008338:	19bb      	adds	r3, r7, r6
 800833a:	1c02      	adds	r2, r0, #0
 800833c:	801a      	strh	r2, [r3, #0]
 800833e:	230a      	movs	r3, #10
 8008340:	18fb      	adds	r3, r7, r3
 8008342:	1c0a      	adds	r2, r1, #0
 8008344:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, ((address << 1)+1), MemAddress, MemSize, buffer, nrBytes,1000);
 8008346:	4b16      	ldr	r3, [pc, #88]	@ (80083a0 <ReadI2CMem+0x80>)
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	197b      	adds	r3, r7, r5
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	18db      	adds	r3, r3, r3
 8008352:	b29b      	uxth	r3, r3
 8008354:	3301      	adds	r3, #1
 8008356:	b299      	uxth	r1, r3
 8008358:	2217      	movs	r2, #23
 800835a:	18bc      	adds	r4, r7, r2
 800835c:	230a      	movs	r3, #10
 800835e:	18fb      	adds	r3, r7, r3
 8008360:	881d      	ldrh	r5, [r3, #0]
 8008362:	19bb      	adds	r3, r7, r6
 8008364:	881a      	ldrh	r2, [r3, #0]
 8008366:	23fa      	movs	r3, #250	@ 0xfa
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	9302      	str	r3, [sp, #8]
 800836c:	2328      	movs	r3, #40	@ 0x28
 800836e:	2608      	movs	r6, #8
 8008370:	199b      	adds	r3, r3, r6
 8008372:	19db      	adds	r3, r3, r7
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	9301      	str	r3, [sp, #4]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	002b      	movs	r3, r5
 800837e:	f00e fb9b 	bl	8016ab8 <HAL_I2C_Mem_Read>
 8008382:	0003      	movs	r3, r0
 8008384:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8008386:	2217      	movs	r2, #23
 8008388:	18bb      	adds	r3, r7, r2
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <ReadI2CMem+0x74>
     return false;
 8008390:	2300      	movs	r3, #0
 8008392:	e000      	b.n	8008396 <ReadI2CMem+0x76>
   }
   return true;
 8008394:	2301      	movs	r3, #1
}
 8008396:	0018      	movs	r0, r3
 8008398:	46bd      	mov	sp, r7
 800839a:	b007      	add	sp, #28
 800839c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800839e:	46c0      	nop			@ (mov r8, r8)
 80083a0:	2000093c 	.word	0x2000093c

080083a4 <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80083a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083a6:	b08b      	sub	sp, #44	@ 0x2c
 80083a8:	af04      	add	r7, sp, #16
 80083aa:	0004      	movs	r4, r0
 80083ac:	0008      	movs	r0, r1
 80083ae:	0011      	movs	r1, r2
 80083b0:	607b      	str	r3, [r7, #4]
 80083b2:	250f      	movs	r5, #15
 80083b4:	197b      	adds	r3, r7, r5
 80083b6:	1c22      	adds	r2, r4, #0
 80083b8:	701a      	strb	r2, [r3, #0]
 80083ba:	260c      	movs	r6, #12
 80083bc:	19bb      	adds	r3, r7, r6
 80083be:	1c02      	adds	r2, r0, #0
 80083c0:	801a      	strh	r2, [r3, #0]
 80083c2:	230a      	movs	r3, #10
 80083c4:	18fb      	adds	r3, r7, r3
 80083c6:	1c0a      	adds	r2, r1, #0
 80083c8:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,1000);  // de dma verwijderd 16-8-2025
 80083ca:	4b15      	ldr	r3, [pc, #84]	@ (8008420 <WriteI2CMem+0x7c>)
 80083cc:	6818      	ldr	r0, [r3, #0]
 80083ce:	197b      	adds	r3, r7, r5
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	18db      	adds	r3, r3, r3
 80083d6:	b299      	uxth	r1, r3
 80083d8:	2217      	movs	r2, #23
 80083da:	18bc      	adds	r4, r7, r2
 80083dc:	230a      	movs	r3, #10
 80083de:	18fb      	adds	r3, r7, r3
 80083e0:	881d      	ldrh	r5, [r3, #0]
 80083e2:	19bb      	adds	r3, r7, r6
 80083e4:	881a      	ldrh	r2, [r3, #0]
 80083e6:	23fa      	movs	r3, #250	@ 0xfa
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	9302      	str	r3, [sp, #8]
 80083ec:	2328      	movs	r3, #40	@ 0x28
 80083ee:	2608      	movs	r6, #8
 80083f0:	199b      	adds	r3, r3, r6
 80083f2:	19db      	adds	r3, r3, r7
 80083f4:	881b      	ldrh	r3, [r3, #0]
 80083f6:	9301      	str	r3, [sp, #4]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	002b      	movs	r3, r5
 80083fe:	f00e fa2d 	bl	801685c <HAL_I2C_Mem_Write>
 8008402:	0003      	movs	r3, r0
 8008404:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8008406:	2217      	movs	r2, #23
 8008408:	18bb      	adds	r3, r7, r2
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <WriteI2CMem+0x70>
     return false;
 8008410:	2300      	movs	r3, #0
 8008412:	e000      	b.n	8008416 <WriteI2CMem+0x72>
   }
   return true;
 8008414:	2301      	movs	r3, #1
}
 8008416:	0018      	movs	r0, r3
 8008418:	46bd      	mov	sp, r7
 800841a:	b007      	add	sp, #28
 800841c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800841e:	46c0      	nop			@ (mov r8, r8)
 8008420:	2000093c 	.word	0x2000093c

08008424 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8008424:	b590      	push	{r4, r7, lr}
 8008426:	b0c3      	sub	sp, #268	@ 0x10c
 8008428:	af3e      	add	r7, sp, #248	@ 0xf8
 800842a:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 800842c:	f01a ffa2 	bl	8023374 <GetUsbRxDataSize>
 8008430:	0003      	movs	r3, r0
 8008432:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b05      	cmp	r3, #5
 8008438:	d972      	bls.n	8008520 <Process_PC_Config+0xfc>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2123      	movs	r1, #35	@ 0x23
 800843e:	0018      	movs	r0, r3
 8008440:	f01e f9a6 	bl	8026790 <strchr>
 8008444:	0003      	movs	r3, r0
 8008446:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d066      	beq.n	800851c <Process_PC_Config+0xf8>
        {
            received.Command = message[1];
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	785a      	ldrb	r2, [r3, #1]
 8008452:	4b35      	ldr	r3, [pc, #212]	@ (8008528 <Process_PC_Config+0x104>)
 8008454:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	789a      	ldrb	r2, [r3, #2]
 800845a:	4b33      	ldr	r3, [pc, #204]	@ (8008528 <Process_PC_Config+0x104>)
 800845c:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 800845e:	4b32      	ldr	r3, [pc, #200]	@ (8008528 <Process_PC_Config+0x104>)
 8008460:	785b      	ldrb	r3, [r3, #1]
 8008462:	3305      	adds	r3, #5
 8008464:	001a      	movs	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4293      	cmp	r3, r2
 800846a:	d352      	bcc.n	8008512 <Process_PC_Config+0xee>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	1cd9      	adds	r1, r3, #3
 8008470:	4b2d      	ldr	r3, [pc, #180]	@ (8008528 <Process_PC_Config+0x104>)
 8008472:	785b      	ldrb	r3, [r3, #1]
 8008474:	001a      	movs	r2, r3
 8008476:	4b2d      	ldr	r3, [pc, #180]	@ (800852c <Process_PC_Config+0x108>)
 8008478:	0018      	movs	r0, r3
 800847a:	f01e fa5d 	bl	8026938 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 800847e:	4b2a      	ldr	r3, [pc, #168]	@ (8008528 <Process_PC_Config+0x104>)
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	3303      	adds	r3, #3
 8008484:	001a      	movs	r2, r3
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	189b      	adds	r3, r3, r2
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	b21b      	sxth	r3, r3
 800848e:	021b      	lsls	r3, r3, #8
 8008490:	b21a      	sxth	r2, r3
 8008492:	4b25      	ldr	r3, [pc, #148]	@ (8008528 <Process_PC_Config+0x104>)
 8008494:	785b      	ldrb	r3, [r3, #1]
 8008496:	3304      	adds	r3, #4
 8008498:	68b9      	ldr	r1, [r7, #8]
 800849a:	18cb      	adds	r3, r1, r3
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	b21b      	sxth	r3, r3
 80084a0:	4313      	orrs	r3, r2
 80084a2:	b21b      	sxth	r3, r3
 80084a4:	b299      	uxth	r1, r3
 80084a6:	4a20      	ldr	r2, [pc, #128]	@ (8008528 <Process_PC_Config+0x104>)
 80084a8:	2381      	movs	r3, #129	@ 0x81
 80084aa:	005b      	lsls	r3, r3, #1
 80084ac:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 80084ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008528 <Process_PC_Config+0x104>)
 80084b0:	2381      	movs	r3, #129	@ 0x81
 80084b2:	005b      	lsls	r3, r3, #1
 80084b4:	5ad4      	ldrh	r4, [r2, r3]
 80084b6:	4b1c      	ldr	r3, [pc, #112]	@ (8008528 <Process_PC_Config+0x104>)
 80084b8:	785b      	ldrb	r3, [r3, #1]
 80084ba:	3303      	adds	r3, #3
 80084bc:	b29a      	uxth	r2, r3
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	0011      	movs	r1, r2
 80084c2:	0018      	movs	r0, r3
 80084c4:	f000 facc 	bl	8008a60 <CRC16_ARC>
 80084c8:	0003      	movs	r3, r0
 80084ca:	429c      	cmp	r4, r3
 80084cc:	d007      	beq.n	80084de <Process_PC_Config+0xba>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 80084ce:	4b16      	ldr	r3, [pc, #88]	@ (8008528 <Process_PC_Config+0x104>)
 80084d0:	785a      	ldrb	r2, [r3, #1]
 80084d2:	4b16      	ldr	r3, [pc, #88]	@ (800852c <Process_PC_Config+0x108>)
 80084d4:	0019      	movs	r1, r3
 80084d6:	2001      	movs	r0, #1
 80084d8:	f000 fa70 	bl	80089bc <Create_Message>
 80084dc:	e016      	b.n	800850c <Process_PC_Config+0xe8>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80084de:	4c12      	ldr	r4, [pc, #72]	@ (8008528 <Process_PC_Config+0x104>)
 80084e0:	466b      	mov	r3, sp
 80084e2:	0018      	movs	r0, r3
 80084e4:	0023      	movs	r3, r4
 80084e6:	3310      	adds	r3, #16
 80084e8:	22f4      	movs	r2, #244	@ 0xf4
 80084ea:	0019      	movs	r1, r3
 80084ec:	f01e fa24 	bl	8026938 <memcpy>
 80084f0:	6820      	ldr	r0, [r4, #0]
 80084f2:	6861      	ldr	r1, [r4, #4]
 80084f4:	68a2      	ldr	r2, [r4, #8]
 80084f6:	68e3      	ldr	r3, [r4, #12]
 80084f8:	f000 f81a 	bl	8008530 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80084fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008528 <Process_PC_Config+0x104>)
 80084fe:	7818      	ldrb	r0, [r3, #0]
 8008500:	4b09      	ldr	r3, [pc, #36]	@ (8008528 <Process_PC_Config+0x104>)
 8008502:	785a      	ldrb	r2, [r3, #1]
 8008504:	4b09      	ldr	r3, [pc, #36]	@ (800852c <Process_PC_Config+0x108>)
 8008506:	0019      	movs	r1, r3
 8008508:	f000 fa58 	bl	80089bc <Create_Message>
                }
                ResetUsbRxDataSize();
 800850c:	f01a ff1a 	bl	8023344 <ResetUsbRxDataSize>
                return;
 8008510:	e006      	b.n	8008520 <Process_PC_Config+0xfc>
            }
            GetUsbRxNextChunk(length);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	0018      	movs	r0, r3
 8008516:	f01a ff37 	bl	8023388 <GetUsbRxNextChunk>
 800851a:	e001      	b.n	8008520 <Process_PC_Config+0xfc>
        }
        else
        {
            ResetUsbRxDataSize();
 800851c:	f01a ff12 	bl	8023344 <ResetUsbRxDataSize>
        }
    }
}
 8008520:	46bd      	mov	sp, r7
 8008522:	b005      	add	sp, #20
 8008524:	bd90      	pop	{r4, r7, pc}
 8008526:	46c0      	nop			@ (mov r8, r8)
 8008528:	20000940 	.word	0x20000940
 800852c:	20000942 	.word	0x20000942

08008530 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8008530:	b084      	sub	sp, #16
 8008532:	b5b0      	push	{r4, r5, r7, lr}
 8008534:	b088      	sub	sp, #32
 8008536:	af00      	add	r7, sp, #0
 8008538:	2530      	movs	r5, #48	@ 0x30
 800853a:	197c      	adds	r4, r7, r5
 800853c:	6020      	str	r0, [r4, #0]
 800853e:	6061      	str	r1, [r4, #4]
 8008540:	60a2      	str	r2, [r4, #8]
 8008542:	60e3      	str	r3, [r4, #12]
  switch (msg.Command)
 8008544:	197b      	adds	r3, r7, r5
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	2bfe      	cmp	r3, #254	@ 0xfe
 800854a:	d900      	bls.n	800854e <ProcessCmd+0x1e>
 800854c:	e22c      	b.n	80089a8 <ProcessCmd+0x478>
 800854e:	009a      	lsls	r2, r3, #2
 8008550:	4bdf      	ldr	r3, [pc, #892]	@ (80088d0 <ProcessCmd+0x3a0>)
 8008552:	18d3      	adds	r3, r2, r3
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	469f      	mov	pc, r3
    {
        case BoxConfigCmd:  // 0
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008558:	2130      	movs	r1, #48	@ 0x30
 800855a:	187b      	adds	r3, r7, r1
 800855c:	785b      	ldrb	r3, [r3, #1]
 800855e:	001a      	movs	r2, r3
 8008560:	187b      	adds	r3, r7, r1
 8008562:	1c99      	adds	r1, r3, #2
 8008564:	48db      	ldr	r0, [pc, #876]	@ (80088d4 <ProcessCmd+0x3a4>)
 8008566:	230c      	movs	r3, #12
 8008568:	f003 fe20 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 800856c:	e21c      	b.n	80089a8 <ProcessCmd+0x478>
        case TempConfigCmd:  // 1
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800856e:	2130      	movs	r1, #48	@ 0x30
 8008570:	187b      	adds	r3, r7, r1
 8008572:	785b      	ldrb	r3, [r3, #1]
 8008574:	001a      	movs	r2, r3
 8008576:	187b      	adds	r3, r7, r1
 8008578:	1c99      	adds	r1, r3, #2
 800857a:	48d7      	ldr	r0, [pc, #860]	@ (80088d8 <ProcessCmd+0x3a8>)
 800857c:	230c      	movs	r3, #12
 800857e:	f003 fe15 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 8008582:	e211      	b.n	80089a8 <ProcessCmd+0x478>
        case HumidConfigCmd:  // 2
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008584:	2130      	movs	r1, #48	@ 0x30
 8008586:	187b      	adds	r3, r7, r1
 8008588:	785b      	ldrb	r3, [r3, #1]
 800858a:	001a      	movs	r2, r3
 800858c:	187b      	adds	r3, r7, r1
 800858e:	1c99      	adds	r1, r3, #2
 8008590:	48d2      	ldr	r0, [pc, #840]	@ (80088dc <ProcessCmd+0x3ac>)
 8008592:	230c      	movs	r3, #12
 8008594:	f003 fe0a 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 8008598:	e206      	b.n	80089a8 <ProcessCmd+0x478>
        case NOxIndexConfigCmd:  // 3
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800859a:	2130      	movs	r1, #48	@ 0x30
 800859c:	187b      	adds	r3, r7, r1
 800859e:	785b      	ldrb	r3, [r3, #1]
 80085a0:	001a      	movs	r2, r3
 80085a2:	187b      	adds	r3, r7, r1
 80085a4:	1c99      	adds	r1, r3, #2
 80085a6:	48ce      	ldr	r0, [pc, #824]	@ (80088e0 <ProcessCmd+0x3b0>)
 80085a8:	230c      	movs	r3, #12
 80085aa:	f003 fdff 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 80085ae:	e1fb      	b.n	80089a8 <ProcessCmd+0x478>
        case VocIndexConfigCmd:  // 4
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085b0:	2130      	movs	r1, #48	@ 0x30
 80085b2:	187b      	adds	r3, r7, r1
 80085b4:	785b      	ldrb	r3, [r3, #1]
 80085b6:	001a      	movs	r2, r3
 80085b8:	187b      	adds	r3, r7, r1
 80085ba:	1c99      	adds	r1, r3, #2
 80085bc:	48c9      	ldr	r0, [pc, #804]	@ (80088e4 <ProcessCmd+0x3b4>)
 80085be:	230c      	movs	r3, #12
 80085c0:	f003 fdf4 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 80085c4:	e1f0      	b.n	80089a8 <ProcessCmd+0x478>
        case dBAConfigCmd: // 5 was 6 will be dBAConfigCMD
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085c6:	2130      	movs	r1, #48	@ 0x30
 80085c8:	187b      	adds	r3, r7, r1
 80085ca:	785b      	ldrb	r3, [r3, #1]
 80085cc:	001a      	movs	r2, r3
 80085ce:	187b      	adds	r3, r7, r1
 80085d0:	1c99      	adds	r1, r3, #2
 80085d2:	48c5      	ldr	r0, [pc, #788]	@ (80088e8 <ProcessCmd+0x3b8>)
 80085d4:	230c      	movs	r3, #12
 80085d6:	f003 fde9 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 80085da:	e1e5      	b.n	80089a8 <ProcessCmd+0x478>
        case dBcConfigCmd:  // 6
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085dc:	2130      	movs	r1, #48	@ 0x30
 80085de:	187b      	adds	r3, r7, r1
 80085e0:	785b      	ldrb	r3, [r3, #1]
 80085e2:	001a      	movs	r2, r3
 80085e4:	187b      	adds	r3, r7, r1
 80085e6:	1c99      	adds	r1, r3, #2
 80085e8:	48c0      	ldr	r0, [pc, #768]	@ (80088ec <ProcessCmd+0x3bc>)
 80085ea:	230c      	movs	r3, #12
 80085ec:	f003 fdde 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 80085f0:	e1da      	b.n	80089a8 <ProcessCmd+0x478>
        case PM2ConfigCmd:  // 7
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085f2:	2130      	movs	r1, #48	@ 0x30
 80085f4:	187b      	adds	r3, r7, r1
 80085f6:	785b      	ldrb	r3, [r3, #1]
 80085f8:	001a      	movs	r2, r3
 80085fa:	187b      	adds	r3, r7, r1
 80085fc:	1c99      	adds	r1, r3, #2
 80085fe:	48bc      	ldr	r0, [pc, #752]	@ (80088f0 <ProcessCmd+0x3c0>)
 8008600:	230c      	movs	r3, #12
 8008602:	f003 fdd3 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 8008606:	e1cf      	b.n	80089a8 <ProcessCmd+0x478>
        case PM10ConfigCmd:  // 8
            char Buffer[1+(2*IdSize)];
            uint8ArrayToString(Buffer, msg.Payload);
 8008608:	2430      	movs	r4, #48	@ 0x30
 800860a:	193b      	adds	r3, r7, r4
 800860c:	1c9a      	adds	r2, r3, #2
 800860e:	1d3b      	adds	r3, r7, #4
 8008610:	0011      	movs	r1, r2
 8008612:	0018      	movs	r0, r3
 8008614:	f7fc fe64 	bl	80052e0 <uint8ArrayToString>
            Buffer[24] = '\0';
 8008618:	1d3b      	adds	r3, r7, #4
 800861a:	2200      	movs	r2, #0
 800861c:	761a      	strb	r2, [r3, #24]
            printf_USB("command: %d, payload: %s, length: %d\r\n",msg.Command, Buffer, msg.PayloadLength);
 800861e:	193b      	adds	r3, r7, r4
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	0019      	movs	r1, r3
 8008624:	193b      	adds	r3, r7, r4
 8008626:	785b      	ldrb	r3, [r3, #1]
 8008628:	1d3a      	adds	r2, r7, #4
 800862a:	48b2      	ldr	r0, [pc, #712]	@ (80088f4 <ProcessCmd+0x3c4>)
 800862c:	f000 fa64 	bl	8008af8 <printf_USB>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008630:	193b      	adds	r3, r7, r4
 8008632:	785b      	ldrb	r3, [r3, #1]
 8008634:	001a      	movs	r2, r3
 8008636:	193b      	adds	r3, r7, r4
 8008638:	1c99      	adds	r1, r3, #2
 800863a:	48af      	ldr	r0, [pc, #700]	@ (80088f8 <ProcessCmd+0x3c8>)
 800863c:	230c      	movs	r3, #12
 800863e:	f003 fdb5 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 8008642:	e1b1      	b.n	80089a8 <ProcessCmd+0x478>
        case BatVoltConfigCmd:  // 9
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008644:	2130      	movs	r1, #48	@ 0x30
 8008646:	187b      	adds	r3, r7, r1
 8008648:	785b      	ldrb	r3, [r3, #1]
 800864a:	001a      	movs	r2, r3
 800864c:	187b      	adds	r3, r7, r1
 800864e:	1c99      	adds	r1, r3, #2
 8008650:	48aa      	ldr	r0, [pc, #680]	@ (80088fc <ProcessCmd+0x3cc>)
 8008652:	230c      	movs	r3, #12
 8008654:	f003 fdaa 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 8008658:	e1a6      	b.n	80089a8 <ProcessCmd+0x478>
        case SolVoltConfigCmd:  // 10
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800865a:	2130      	movs	r1, #48	@ 0x30
 800865c:	187b      	adds	r3, r7, r1
 800865e:	785b      	ldrb	r3, [r3, #1]
 8008660:	001a      	movs	r2, r3
 8008662:	187b      	adds	r3, r7, r1
 8008664:	1c99      	adds	r1, r3, #2
 8008666:	48a6      	ldr	r0, [pc, #664]	@ (8008900 <ProcessCmd+0x3d0>)
 8008668:	230c      	movs	r3, #12
 800866a:	f003 fd9f 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 800866e:	e19b      	b.n	80089a8 <ProcessCmd+0x478>
        case ChargerStatConfigCmd:  // 11
            WriteUint8ArrayEepromSafe(ChargerStatConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008670:	2130      	movs	r1, #48	@ 0x30
 8008672:	187b      	adds	r3, r7, r1
 8008674:	785b      	ldrb	r3, [r3, #1]
 8008676:	001a      	movs	r2, r3
 8008678:	187b      	adds	r3, r7, r1
 800867a:	1c99      	adds	r1, r3, #2
 800867c:	48a1      	ldr	r0, [pc, #644]	@ (8008904 <ProcessCmd+0x3d4>)
 800867e:	230c      	movs	r3, #12
 8008680:	f003 fd94 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 8008684:	e190      	b.n	80089a8 <ProcessCmd+0x478>
        case CustomNameConfigCmd:  // 12
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8008686:	2130      	movs	r1, #48	@ 0x30
 8008688:	187b      	adds	r3, r7, r1
 800868a:	785b      	ldrb	r3, [r3, #1]
 800868c:	001a      	movs	r2, r3
 800868e:	187b      	adds	r3, r7, r1
 8008690:	1c99      	adds	r1, r3, #2
 8008692:	489d      	ldr	r0, [pc, #628]	@ (8008908 <ProcessCmd+0x3d8>)
 8008694:	2320      	movs	r3, #32
 8008696:	f003 fd89 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 800869a:	e185      	b.n	80089a8 <ProcessCmd+0x478>
        case SSIDConfigCmd: // 13 was 21
          ClearEEprom(SSIDConfigAddr, SSIDMaxLength);
 800869c:	4b9b      	ldr	r3, [pc, #620]	@ (800890c <ProcessCmd+0x3dc>)
 800869e:	2120      	movs	r1, #32
 80086a0:	0018      	movs	r0, r3
 80086a2:	f003 fdc8 	bl	800c236 <ClearEEprom>
          WriteUint8ArrayEepromSafe(SSIDConfigAddr, msg.Payload, msg.PayloadLength, SSIDMaxLength);
 80086a6:	2130      	movs	r1, #48	@ 0x30
 80086a8:	187b      	adds	r3, r7, r1
 80086aa:	785b      	ldrb	r3, [r3, #1]
 80086ac:	001a      	movs	r2, r3
 80086ae:	187b      	adds	r3, r7, r1
 80086b0:	1c99      	adds	r1, r3, #2
 80086b2:	4896      	ldr	r0, [pc, #600]	@ (800890c <ProcessCmd+0x3dc>)
 80086b4:	2320      	movs	r3, #32
 80086b6:	f003 fd79 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 80086ba:	e175      	b.n	80089a8 <ProcessCmd+0x478>
        case PasswordConfigCmd: // 14 was 22
          ClearEEprom(pwdConfigAddr, pwdMaxLength);
 80086bc:	4b94      	ldr	r3, [pc, #592]	@ (8008910 <ProcessCmd+0x3e0>)
 80086be:	2140      	movs	r1, #64	@ 0x40
 80086c0:	0018      	movs	r0, r3
 80086c2:	f003 fdb8 	bl	800c236 <ClearEEprom>
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 80086c6:	2230      	movs	r2, #48	@ 0x30
 80086c8:	18bb      	adds	r3, r7, r2
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	0019      	movs	r1, r3
 80086ce:	18bb      	adds	r3, r7, r2
 80086d0:	785b      	ldrb	r3, [r3, #1]
 80086d2:	001c      	movs	r4, r3
 80086d4:	0015      	movs	r5, r2
 80086d6:	18bb      	adds	r3, r7, r2
 80086d8:	1c9a      	adds	r2, r3, #2
 80086da:	488e      	ldr	r0, [pc, #568]	@ (8008914 <ProcessCmd+0x3e4>)
 80086dc:	0023      	movs	r3, r4
 80086de:	f000 fa0b 	bl	8008af8 <printf_USB>
          WriteUint8ArrayEepromSafe(pwdConfigAddr, msg.Payload, msg.PayloadLength, pwdMaxLength);
 80086e2:	0029      	movs	r1, r5
 80086e4:	187b      	adds	r3, r7, r1
 80086e6:	785b      	ldrb	r3, [r3, #1]
 80086e8:	001a      	movs	r2, r3
 80086ea:	187b      	adds	r3, r7, r1
 80086ec:	1c99      	adds	r1, r3, #2
 80086ee:	4888      	ldr	r0, [pc, #544]	@ (8008910 <ProcessCmd+0x3e0>)
 80086f0:	2340      	movs	r3, #64	@ 0x40
 80086f2:	f003 fd5b 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 80086f6:	e157      	b.n	80089a8 <ProcessCmd+0x478>
        case PM1ConfigCmd:  // 21 was 13
            WriteUint8ArrayEepromSafe(PM1ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086f8:	2130      	movs	r1, #48	@ 0x30
 80086fa:	187b      	adds	r3, r7, r1
 80086fc:	785b      	ldrb	r3, [r3, #1]
 80086fe:	001a      	movs	r2, r3
 8008700:	187b      	adds	r3, r7, r1
 8008702:	1c99      	adds	r1, r3, #2
 8008704:	4884      	ldr	r0, [pc, #528]	@ (8008918 <ProcessCmd+0x3e8>)
 8008706:	230c      	movs	r3, #12
 8008708:	f003 fd50 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 800870c:	e14c      	b.n	80089a8 <ProcessCmd+0x478>
        case PM4ConfigCmd:  // 22 was 14
            WriteUint8ArrayEepromSafe(PM4ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800870e:	2130      	movs	r1, #48	@ 0x30
 8008710:	187b      	adds	r3, r7, r1
 8008712:	785b      	ldrb	r3, [r3, #1]
 8008714:	001a      	movs	r2, r3
 8008716:	187b      	adds	r3, r7, r1
 8008718:	1c99      	adds	r1, r3, #2
 800871a:	4880      	ldr	r0, [pc, #512]	@ (800891c <ProcessCmd+0x3ec>)
 800871c:	230c      	movs	r3, #12
 800871e:	f003 fd45 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 8008722:	e141      	b.n	80089a8 <ProcessCmd+0x478>
        case AHTTempConfigCmd: // 15
          WriteUint8ArrayEepromSafe(AHTTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008724:	2130      	movs	r1, #48	@ 0x30
 8008726:	187b      	adds	r3, r7, r1
 8008728:	785b      	ldrb	r3, [r3, #1]
 800872a:	001a      	movs	r2, r3
 800872c:	187b      	adds	r3, r7, r1
 800872e:	1c99      	adds	r1, r3, #2
 8008730:	487b      	ldr	r0, [pc, #492]	@ (8008920 <ProcessCmd+0x3f0>)
 8008732:	230c      	movs	r3, #12
 8008734:	f003 fd3a 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 8008738:	e136      	b.n	80089a8 <ProcessCmd+0x478>
        case AHTHumidConfigCmd: // 16
          WriteUint8ArrayEepromSafe(AHTHumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800873a:	2130      	movs	r1, #48	@ 0x30
 800873c:	187b      	adds	r3, r7, r1
 800873e:	785b      	ldrb	r3, [r3, #1]
 8008740:	001a      	movs	r2, r3
 8008742:	187b      	adds	r3, r7, r1
 8008744:	1c99      	adds	r1, r3, #2
 8008746:	4877      	ldr	r0, [pc, #476]	@ (8008924 <ProcessCmd+0x3f4>)
 8008748:	230c      	movs	r3, #12
 800874a:	f003 fd2f 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 800874e:	e12b      	b.n	80089a8 <ProcessCmd+0x478>
        case BMPTempConfigCmd: // 17
          WriteUint8ArrayEepromSafe(BMPTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008750:	2130      	movs	r1, #48	@ 0x30
 8008752:	187b      	adds	r3, r7, r1
 8008754:	785b      	ldrb	r3, [r3, #1]
 8008756:	001a      	movs	r2, r3
 8008758:	187b      	adds	r3, r7, r1
 800875a:	1c99      	adds	r1, r3, #2
 800875c:	4872      	ldr	r0, [pc, #456]	@ (8008928 <ProcessCmd+0x3f8>)
 800875e:	230c      	movs	r3, #12
 8008760:	f003 fd24 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 8008764:	e120      	b.n	80089a8 <ProcessCmd+0x478>
        case ENSAQIConfigCmd: // 18
          WriteUint8ArrayEepromSafe(ENSAQIConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008766:	2130      	movs	r1, #48	@ 0x30
 8008768:	187b      	adds	r3, r7, r1
 800876a:	785b      	ldrb	r3, [r3, #1]
 800876c:	001a      	movs	r2, r3
 800876e:	187b      	adds	r3, r7, r1
 8008770:	1c99      	adds	r1, r3, #2
 8008772:	486e      	ldr	r0, [pc, #440]	@ (800892c <ProcessCmd+0x3fc>)
 8008774:	230c      	movs	r3, #12
 8008776:	f003 fd19 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 800877a:	e115      	b.n	80089a8 <ProcessCmd+0x478>
        case ENSTVOCConfigCmd: // 19
          WriteUint8ArrayEepromSafe(ENSTVOCConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800877c:	2130      	movs	r1, #48	@ 0x30
 800877e:	187b      	adds	r3, r7, r1
 8008780:	785b      	ldrb	r3, [r3, #1]
 8008782:	001a      	movs	r2, r3
 8008784:	187b      	adds	r3, r7, r1
 8008786:	1c99      	adds	r1, r3, #2
 8008788:	4869      	ldr	r0, [pc, #420]	@ (8008930 <ProcessCmd+0x400>)
 800878a:	230c      	movs	r3, #12
 800878c:	f003 fd0e 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 8008790:	e10a      	b.n	80089a8 <ProcessCmd+0x478>
        case ENSeCO2ConfigCmd: // 20
          WriteUint8ArrayEepromSafe(ENSeCO2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008792:	2130      	movs	r1, #48	@ 0x30
 8008794:	187b      	adds	r3, r7, r1
 8008796:	785b      	ldrb	r3, [r3, #1]
 8008798:	001a      	movs	r2, r3
 800879a:	187b      	adds	r3, r7, r1
 800879c:	1c99      	adds	r1, r3, #2
 800879e:	4865      	ldr	r0, [pc, #404]	@ (8008934 <ProcessCmd+0x404>)
 80087a0:	230c      	movs	r3, #12
 80087a2:	f003 fd03 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 80087a6:	e0ff      	b.n	80089a8 <ProcessCmd+0x478>
        case SEN55TempConfigCmd: // 23
          WriteUint8ArrayEepromSafe(SEN55TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80087a8:	2130      	movs	r1, #48	@ 0x30
 80087aa:	187b      	adds	r3, r7, r1
 80087ac:	785b      	ldrb	r3, [r3, #1]
 80087ae:	001a      	movs	r2, r3
 80087b0:	187b      	adds	r3, r7, r1
 80087b2:	1c99      	adds	r1, r3, #2
 80087b4:	4860      	ldr	r0, [pc, #384]	@ (8008938 <ProcessCmd+0x408>)
 80087b6:	230c      	movs	r3, #12
 80087b8:	f003 fcf8 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 80087bc:	e0f4      	b.n	80089a8 <ProcessCmd+0x478>
        case SEN55HumidConfigCmd: // 24
          WriteUint8ArrayEepromSafe(SEN55HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80087be:	2130      	movs	r1, #48	@ 0x30
 80087c0:	187b      	adds	r3, r7, r1
 80087c2:	785b      	ldrb	r3, [r3, #1]
 80087c4:	001a      	movs	r2, r3
 80087c6:	187b      	adds	r3, r7, r1
 80087c8:	1c99      	adds	r1, r3, #2
 80087ca:	485c      	ldr	r0, [pc, #368]	@ (800893c <ProcessCmd+0x40c>)
 80087cc:	230c      	movs	r3, #12
 80087ce:	f003 fced 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 80087d2:	e0e9      	b.n	80089a8 <ProcessCmd+0x478>
        case SendFromNameConfigCmd:  // 25
          ClearEEprom(SendFromNameConfigAddr, SendFromNameMaxLength);
 80087d4:	4b5a      	ldr	r3, [pc, #360]	@ (8008940 <ProcessCmd+0x410>)
 80087d6:	2130      	movs	r1, #48	@ 0x30
 80087d8:	0018      	movs	r0, r3
 80087da:	f003 fd2c 	bl	800c236 <ClearEEprom>
          WriteUint8ArrayEepromSafe(SendFromNameConfigAddr, msg.Payload, msg.PayloadLength, SendFromNameMaxLength);
 80087de:	2130      	movs	r1, #48	@ 0x30
 80087e0:	187b      	adds	r3, r7, r1
 80087e2:	785b      	ldrb	r3, [r3, #1]
 80087e4:	001a      	movs	r2, r3
 80087e6:	187b      	adds	r3, r7, r1
 80087e8:	1c99      	adds	r1, r3, #2
 80087ea:	4855      	ldr	r0, [pc, #340]	@ (8008940 <ProcessCmd+0x410>)
 80087ec:	2330      	movs	r3, #48	@ 0x30
 80087ee:	f003 fcdd 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 80087f2:	e0d9      	b.n	80089a8 <ProcessCmd+0x478>
        case SendToNameConfigCmd:  // 26
          ClearEEprom(SendToNameConfigAddr, SendToNameMaxLength);
 80087f4:	4b53      	ldr	r3, [pc, #332]	@ (8008944 <ProcessCmd+0x414>)
 80087f6:	2130      	movs	r1, #48	@ 0x30
 80087f8:	0018      	movs	r0, r3
 80087fa:	f003 fd1c 	bl	800c236 <ClearEEprom>
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 80087fe:	2230      	movs	r2, #48	@ 0x30
 8008800:	18bb      	adds	r3, r7, r2
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	0019      	movs	r1, r3
 8008806:	18bb      	adds	r3, r7, r2
 8008808:	785b      	ldrb	r3, [r3, #1]
 800880a:	001c      	movs	r4, r3
 800880c:	0015      	movs	r5, r2
 800880e:	18bb      	adds	r3, r7, r2
 8008810:	1c9a      	adds	r2, r3, #2
 8008812:	4840      	ldr	r0, [pc, #256]	@ (8008914 <ProcessCmd+0x3e4>)
 8008814:	0023      	movs	r3, r4
 8008816:	f000 f96f 	bl	8008af8 <printf_USB>
          WriteUint8ArrayEepromSafe(SendToNameConfigAddr, msg.Payload, msg.PayloadLength, SendToNameMaxLength);
 800881a:	0029      	movs	r1, r5
 800881c:	187b      	adds	r3, r7, r1
 800881e:	785b      	ldrb	r3, [r3, #1]
 8008820:	001a      	movs	r2, r3
 8008822:	187b      	adds	r3, r7, r1
 8008824:	1c99      	adds	r1, r3, #2
 8008826:	4847      	ldr	r0, [pc, #284]	@ (8008944 <ProcessCmd+0x414>)
 8008828:	2330      	movs	r3, #48	@ 0x30
 800882a:	f003 fcbf 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 800882e:	e0bb      	b.n	80089a8 <ProcessCmd+0x478>
        case MailAPIKeyConfigCmd:  // 27
          ClearEEprom(MailAPIKeyConfigAddr, MailAPIKeyMaxLength);
 8008830:	4b45      	ldr	r3, [pc, #276]	@ (8008948 <ProcessCmd+0x418>)
 8008832:	2130      	movs	r1, #48	@ 0x30
 8008834:	0018      	movs	r0, r3
 8008836:	f003 fcfe 	bl	800c236 <ClearEEprom>
          WriteUint8ArrayEepromSafe(MailAPIKeyConfigAddr, msg.Payload, msg.PayloadLength, MailAPIKeyMaxLength);
 800883a:	2130      	movs	r1, #48	@ 0x30
 800883c:	187b      	adds	r3, r7, r1
 800883e:	785b      	ldrb	r3, [r3, #1]
 8008840:	001a      	movs	r2, r3
 8008842:	187b      	adds	r3, r7, r1
 8008844:	1c99      	adds	r1, r3, #2
 8008846:	4840      	ldr	r0, [pc, #256]	@ (8008948 <ProcessCmd+0x418>)
 8008848:	2330      	movs	r3, #48	@ 0x30
 800884a:	f003 fcaf 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 800884e:	e0ab      	b.n	80089a8 <ProcessCmd+0x478>
        case hPaConfigCmd:  // 28 will be airpressure => hPaconfigCMD hPaConfigAddr ??
          WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008850:	2130      	movs	r1, #48	@ 0x30
 8008852:	187b      	adds	r3, r7, r1
 8008854:	785b      	ldrb	r3, [r3, #1]
 8008856:	001a      	movs	r2, r3
 8008858:	187b      	adds	r3, r7, r1
 800885a:	1c99      	adds	r1, r3, #2
 800885c:	483b      	ldr	r0, [pc, #236]	@ (800894c <ProcessCmd+0x41c>)
 800885e:	230c      	movs	r3, #12
 8008860:	f003 fca4 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 8008864:	e0a0      	b.n	80089a8 <ProcessCmd+0x478>
        case UptimeConfigCmd: // 29
          WriteUint8ArrayEepromSafe(UptimeConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008866:	2130      	movs	r1, #48	@ 0x30
 8008868:	187b      	adds	r3, r7, r1
 800886a:	785b      	ldrb	r3, [r3, #1]
 800886c:	001a      	movs	r2, r3
 800886e:	187b      	adds	r3, r7, r1
 8008870:	1c99      	adds	r1, r3, #2
 8008872:	4837      	ldr	r0, [pc, #220]	@ (8008950 <ProcessCmd+0x420>)
 8008874:	230c      	movs	r3, #12
 8008876:	f003 fc99 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 800887a:	e095      	b.n	80089a8 <ProcessCmd+0x478>
        case URLToUploadConfigCmd: // 30
          printf_USB("command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 800887c:	2230      	movs	r2, #48	@ 0x30
 800887e:	18bb      	adds	r3, r7, r2
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	0019      	movs	r1, r3
 8008884:	18bb      	adds	r3, r7, r2
 8008886:	785b      	ldrb	r3, [r3, #1]
 8008888:	001c      	movs	r4, r3
 800888a:	0015      	movs	r5, r2
 800888c:	18bb      	adds	r3, r7, r2
 800888e:	1c9a      	adds	r2, r3, #2
 8008890:	4830      	ldr	r0, [pc, #192]	@ (8008954 <ProcessCmd+0x424>)
 8008892:	0023      	movs	r3, r4
 8008894:	f000 f930 	bl	8008af8 <printf_USB>
          WriteUint8ArrayEepromSafe(URLToUploadConfigAddr, msg.Payload, msg.PayloadLength, URLToUploadMaxLength);
 8008898:	0029      	movs	r1, r5
 800889a:	187b      	adds	r3, r7, r1
 800889c:	785b      	ldrb	r3, [r3, #1]
 800889e:	001a      	movs	r2, r3
 80088a0:	187b      	adds	r3, r7, r1
 80088a2:	1c99      	adds	r1, r3, #2
 80088a4:	482c      	ldr	r0, [pc, #176]	@ (8008958 <ProcessCmd+0x428>)
 80088a6:	2330      	movs	r3, #48	@ 0x30
 80088a8:	f003 fc80 	bl	800c1ac <WriteUint8ArrayEepromSafe>
        break;
 80088ac:	e07c      	b.n	80089a8 <ProcessCmd+0x478>

        case ClearConfigCmd: // 253
//          printf_USB("command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
          printf_USB("CLEAR CONFIGURATION MEMORY!");
 80088ae:	4b2b      	ldr	r3, [pc, #172]	@ (800895c <ProcessCmd+0x42c>)
 80088b0:	0018      	movs	r0, r3
 80088b2:	f000 f921 	bl	8008af8 <printf_USB>
          ClearEEprom(EEPromStartAddr, ConfigSize);
 80088b6:	23a2      	movs	r3, #162	@ 0xa2
 80088b8:	33ff      	adds	r3, #255	@ 0xff
 80088ba:	4a06      	ldr	r2, [pc, #24]	@ (80088d4 <ProcessCmd+0x3a4>)
 80088bc:	0019      	movs	r1, r3
 80088be:	0010      	movs	r0, r2
 80088c0:	f003 fcb9 	bl	800c236 <ClearEEprom>
          ClearEEprom(SSIDStartAddr, IPrelatedConfigSize);
 80088c4:	4b11      	ldr	r3, [pc, #68]	@ (800890c <ProcessCmd+0x3dc>)
 80088c6:	21f0      	movs	r1, #240	@ 0xf0
 80088c8:	0018      	movs	r0, r3
 80088ca:	f003 fcb4 	bl	800c236 <ClearEEprom>
        break;
 80088ce:	e06b      	b.n	80089a8 <ProcessCmd+0x478>
 80088d0:	0802e268 	.word	0x0802e268
 80088d4:	08080000 	.word	0x08080000
 80088d8:	0808000c 	.word	0x0808000c
 80088dc:	08080018 	.word	0x08080018
 80088e0:	08080024 	.word	0x08080024
 80088e4:	08080030 	.word	0x08080030
 80088e8:	08080048 	.word	0x08080048
 80088ec:	0808003c 	.word	0x0808003c
 80088f0:	08080054 	.word	0x08080054
 80088f4:	0802b5b4 	.word	0x0802b5b4
 80088f8:	08080060 	.word	0x08080060
 80088fc:	0808006c 	.word	0x0808006c
 8008900:	08080078 	.word	0x08080078
 8008904:	08080084 	.word	0x08080084
 8008908:	08080090 	.word	0x08080090
 800890c:	08080200 	.word	0x08080200
 8008910:	08080220 	.word	0x08080220
 8008914:	0802b5dc 	.word	0x0802b5dc
 8008918:	080800b0 	.word	0x080800b0
 800891c:	080800bc 	.word	0x080800bc
 8008920:	080800c8 	.word	0x080800c8
 8008924:	080800d4 	.word	0x080800d4
 8008928:	080800e0 	.word	0x080800e0
 800892c:	080800ec 	.word	0x080800ec
 8008930:	080800f8 	.word	0x080800f8
 8008934:	08080104 	.word	0x08080104
 8008938:	08080170 	.word	0x08080170
 800893c:	0808017c 	.word	0x0808017c
 8008940:	08080260 	.word	0x08080260
 8008944:	08080290 	.word	0x08080290
 8008948:	080802c0 	.word	0x080802c0
 800894c:	08080188 	.word	0x08080188
 8008950:	080801a0 	.word	0x080801a0
 8008954:	0802b610 	.word	0x0802b610
 8008958:	08080110 	.word	0x08080110
 800895c:	0802b640 	.word	0x0802b640
        case ClearEepromCmd: //254
        {
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8008960:	2130      	movs	r1, #48	@ 0x30
 8008962:	187b      	adds	r3, r7, r1
 8008964:	789b      	ldrb	r3, [r3, #2]
 8008966:	b21b      	sxth	r3, r3
 8008968:	021b      	lsls	r3, r3, #8
 800896a:	b21a      	sxth	r2, r3
 800896c:	187b      	adds	r3, r7, r1
 800896e:	78db      	ldrb	r3, [r3, #3]
 8008970:	b21b      	sxth	r3, r3
 8008972:	4313      	orrs	r3, r2
 8008974:	b21a      	sxth	r2, r3
 8008976:	211e      	movs	r1, #30
 8008978:	187b      	adds	r3, r7, r1
 800897a:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 800897c:	187b      	adds	r3, r7, r1
 800897e:	881a      	ldrh	r2, [r3, #0]
 8008980:	23c0      	movs	r3, #192	@ 0xc0
 8008982:	015b      	lsls	r3, r3, #5
 8008984:	429a      	cmp	r2, r3
 8008986:	d207      	bcs.n	8008998 <ProcessCmd+0x468>
            {
                ClearEEprom(EEPromStartAddr, size);
 8008988:	187b      	adds	r3, r7, r1
 800898a:	881b      	ldrh	r3, [r3, #0]
 800898c:	4a0a      	ldr	r2, [pc, #40]	@ (80089b8 <ProcessCmd+0x488>)
 800898e:	0019      	movs	r1, r3
 8008990:	0010      	movs	r0, r2
 8008992:	f003 fc50 	bl	800c236 <ClearEEprom>
            }
            else
            {
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
 8008996:	e006      	b.n	80089a6 <ProcessCmd+0x476>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8008998:	23c0      	movs	r3, #192	@ 0xc0
 800899a:	015b      	lsls	r3, r3, #5
 800899c:	4a06      	ldr	r2, [pc, #24]	@ (80089b8 <ProcessCmd+0x488>)
 800899e:	0019      	movs	r1, r3
 80089a0:	0010      	movs	r0, r2
 80089a2:	f003 fc48 	bl	800c236 <ClearEEprom>
            break;
 80089a6:	46c0      	nop			@ (mov r8, r8)
        }
    }

}
 80089a8:	46c0      	nop			@ (mov r8, r8)
 80089aa:	46bd      	mov	sp, r7
 80089ac:	b008      	add	sp, #32
 80089ae:	bcb0      	pop	{r4, r5, r7}
 80089b0:	bc08      	pop	{r3}
 80089b2:	b004      	add	sp, #16
 80089b4:	4718      	bx	r3
 80089b6:	46c0      	nop			@ (mov r8, r8)
 80089b8:	08080000 	.word	0x08080000

080089bc <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80089bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6039      	str	r1, [r7, #0]
 80089c4:	0011      	movs	r1, r2
 80089c6:	1dfb      	adds	r3, r7, #7
 80089c8:	1c02      	adds	r2, r0, #0
 80089ca:	701a      	strb	r2, [r3, #0]
 80089cc:	1dbb      	adds	r3, r7, #6
 80089ce:	1c0a      	adds	r2, r1, #0
 80089d0:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 80089d2:	2223      	movs	r2, #35	@ 0x23
 80089d4:	4b20      	ldr	r3, [pc, #128]	@ (8008a58 <Create_Message+0x9c>)
 80089d6:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80089d8:	4b1f      	ldr	r3, [pc, #124]	@ (8008a58 <Create_Message+0x9c>)
 80089da:	1dfa      	adds	r2, r7, #7
 80089dc:	7812      	ldrb	r2, [r2, #0]
 80089de:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80089e0:	4b1d      	ldr	r3, [pc, #116]	@ (8008a58 <Create_Message+0x9c>)
 80089e2:	1dba      	adds	r2, r7, #6
 80089e4:	7812      	ldrb	r2, [r2, #0]
 80089e6:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 80089e8:	1dbb      	adds	r3, r7, #6
 80089ea:	781a      	ldrb	r2, [r3, #0]
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	4b1b      	ldr	r3, [pc, #108]	@ (8008a5c <Create_Message+0xa0>)
 80089f0:	0018      	movs	r0, r3
 80089f2:	f01d ffa1 	bl	8026938 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 80089f6:	1dbb      	adds	r3, r7, #6
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	250e      	movs	r5, #14
 80089fe:	197b      	adds	r3, r7, r5
 8008a00:	3203      	adds	r2, #3
 8008a02:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8008a04:	260c      	movs	r6, #12
 8008a06:	19bc      	adds	r4, r7, r6
 8008a08:	197b      	adds	r3, r7, r5
 8008a0a:	881a      	ldrh	r2, [r3, #0]
 8008a0c:	4b12      	ldr	r3, [pc, #72]	@ (8008a58 <Create_Message+0x9c>)
 8008a0e:	0011      	movs	r1, r2
 8008a10:	0018      	movs	r0, r3
 8008a12:	f000 f825 	bl	8008a60 <CRC16_ARC>
 8008a16:	0003      	movs	r3, r0
 8008a18:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8008a1a:	0030      	movs	r0, r6
 8008a1c:	183b      	adds	r3, r7, r0
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	0a1b      	lsrs	r3, r3, #8
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	197b      	adds	r3, r7, r5
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	b2d1      	uxtb	r1, r2
 8008a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8008a58 <Create_Message+0x9c>)
 8008a2c:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8008a2e:	197b      	adds	r3, r7, r5
 8008a30:	881b      	ldrh	r3, [r3, #0]
 8008a32:	3301      	adds	r3, #1
 8008a34:	183a      	adds	r2, r7, r0
 8008a36:	8812      	ldrh	r2, [r2, #0]
 8008a38:	b2d1      	uxtb	r1, r2
 8008a3a:	4a07      	ldr	r2, [pc, #28]	@ (8008a58 <Create_Message+0x9c>)
 8008a3c:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8008a3e:	197b      	adds	r3, r7, r5
 8008a40:	881b      	ldrh	r3, [r3, #0]
 8008a42:	3302      	adds	r3, #2
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	4b04      	ldr	r3, [pc, #16]	@ (8008a58 <Create_Message+0x9c>)
 8008a48:	0011      	movs	r1, r2
 8008a4a:	0018      	movs	r0, r3
 8008a4c:	f01a fc38 	bl	80232c0 <CDC_Transmit_FS>
}
 8008a50:	46c0      	nop			@ (mov r8, r8)
 8008a52:	46bd      	mov	sp, r7
 8008a54:	b005      	add	sp, #20
 8008a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a58:	20000a4c 	.word	0x20000a4c
 8008a5c:	20000a4f 	.word	0x20000a4f

08008a60 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	000a      	movs	r2, r1
 8008a6a:	1cbb      	adds	r3, r7, #2
 8008a6c:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8008a6e:	2316      	movs	r3, #22
 8008a70:	18fb      	adds	r3, r7, r3
 8008a72:	2200      	movs	r2, #0
 8008a74:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8008a76:	2300      	movs	r3, #0
 8008a78:	613b      	str	r3, [r7, #16]
 8008a7a:	e02e      	b.n	8008ada <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	18d3      	adds	r3, r2, r3
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	0019      	movs	r1, r3
 8008a86:	2216      	movs	r2, #22
 8008a88:	18bb      	adds	r3, r7, r2
 8008a8a:	18ba      	adds	r2, r7, r2
 8008a8c:	8812      	ldrh	r2, [r2, #0]
 8008a8e:	404a      	eors	r2, r1
 8008a90:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008a92:	2300      	movs	r3, #0
 8008a94:	60fb      	str	r3, [r7, #12]
 8008a96:	e01a      	b.n	8008ace <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8008a98:	2116      	movs	r1, #22
 8008a9a:	187b      	adds	r3, r7, r1
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	d00b      	beq.n	8008abc <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8008aa4:	187b      	adds	r3, r7, r1
 8008aa6:	187a      	adds	r2, r7, r1
 8008aa8:	8812      	ldrh	r2, [r2, #0]
 8008aaa:	0852      	lsrs	r2, r2, #1
 8008aac:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8008aae:	187b      	adds	r3, r7, r1
 8008ab0:	187a      	adds	r2, r7, r1
 8008ab2:	8812      	ldrh	r2, [r2, #0]
 8008ab4:	490f      	ldr	r1, [pc, #60]	@ (8008af4 <CRC16_ARC+0x94>)
 8008ab6:	404a      	eors	r2, r1
 8008ab8:	801a      	strh	r2, [r3, #0]
 8008aba:	e005      	b.n	8008ac8 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8008abc:	2216      	movs	r2, #22
 8008abe:	18bb      	adds	r3, r7, r2
 8008ac0:	18ba      	adds	r2, r7, r2
 8008ac2:	8812      	ldrh	r2, [r2, #0]
 8008ac4:	0852      	lsrs	r2, r2, #1
 8008ac6:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	3301      	adds	r3, #1
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2b07      	cmp	r3, #7
 8008ad2:	dde1      	ble.n	8008a98 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	613b      	str	r3, [r7, #16]
 8008ada:	1cbb      	adds	r3, r7, #2
 8008adc:	881b      	ldrh	r3, [r3, #0]
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	dbcb      	blt.n	8008a7c <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8008ae4:	2316      	movs	r3, #22
 8008ae6:	18fb      	adds	r3, r7, r3
 8008ae8:	881b      	ldrh	r3, [r3, #0]
}
 8008aea:	0018      	movs	r0, r3
 8008aec:	46bd      	mov	sp, r7
 8008aee:	b006      	add	sp, #24
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	46c0      	nop			@ (mov r8, r8)
 8008af4:	ffffa001 	.word	0xffffa001

08008af8 <printf_USB>:

void printf_USB(const char* message, ...)
{
 8008af8:	b40f      	push	{r0, r1, r2, r3}
 8008afa:	b590      	push	{r4, r7, lr}
 8008afc:	b0a9      	sub	sp, #164	@ 0xa4
 8008afe:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8008b00:	23ac      	movs	r3, #172	@ 0xac
 8008b02:	2108      	movs	r1, #8
 8008b04:	185b      	adds	r3, r3, r1
 8008b06:	19db      	adds	r3, r3, r7
 8008b08:	607b      	str	r3, [r7, #4]
  vsnprintf(string, 150, message, args);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	22a8      	movs	r2, #168	@ 0xa8
 8008b0e:	1852      	adds	r2, r2, r1
 8008b10:	19d2      	adds	r2, r2, r7
 8008b12:	6812      	ldr	r2, [r2, #0]
 8008b14:	2408      	movs	r4, #8
 8008b16:	1938      	adds	r0, r7, r4
 8008b18:	2196      	movs	r1, #150	@ 0x96
 8008b1a:	f01d fd85 	bl	8026628 <vsniprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8008b1e:	193b      	adds	r3, r7, r4
 8008b20:	0018      	movs	r0, r3
 8008b22:	f7f7 fb23 	bl	800016c <strlen>
 8008b26:	0003      	movs	r3, r0
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	193b      	adds	r3, r7, r4
 8008b2c:	0011      	movs	r1, r2
 8008b2e:	0018      	movs	r0, r3
 8008b30:	f01a fbc6 	bl	80232c0 <CDC_Transmit_FS>
}
 8008b34:	46c0      	nop			@ (mov r8, r8)
 8008b36:	46bd      	mov	sp, r7
 8008b38:	b029      	add	sp, #164	@ 0xa4
 8008b3a:	bc90      	pop	{r4, r7}
 8008b3c:	bc08      	pop	{r3}
 8008b3e:	b004      	add	sp, #16
 8008b40:	4718      	bx	r3

08008b42 <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	000a      	movs	r2, r1
 8008b4c:	1cfb      	adds	r3, r7, #3
 8008b4e:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8008b50:	1cfb      	adds	r3, r7, #3
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d006      	beq.n	8008b66 <PC_selectout+0x24>
    printf_USB(msg);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	0018      	movs	r0, r3
 8008b5c:	f7ff ffcc 	bl	8008af8 <printf_USB>
    HAL_Delay(10); //wait for the host poll of the USB buffer
 8008b60:	200a      	movs	r0, #10
 8008b62:	f00b ff33 	bl	80149cc <HAL_Delay>
  }
//  else {
    printf(msg);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	0018      	movs	r0, r3
 8008b6a:	f01d fc51 	bl	8026410 <iprintf>
//  }
}
 8008b6e:	46c0      	nop			@ (mov r8, r8)
 8008b70:	46bd      	mov	sp, r7
 8008b72:	b002      	add	sp, #8
 8008b74:	bd80      	pop	{r7, pc}
	...

08008b78 <PC_show_Keys>:

void PC_show_Keys() {
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	af00      	add	r7, sp, #0
  static uint8_t hPaConfig[IdSize];               // 28 was 5
  static uint8_t UptimeConfig[IdSize];            // 29
  static uint8_t URLToUploadConfig[URLToUploadMaxLength]; // 30
  static char Buffer[25];
  static char msg[70];
  if(Check_USB_PowerOn()){
 8008b7c:	f001 f8b8 	bl	8009cf0 <Check_USB_PowerOn>
 8008b80:	1e03      	subs	r3, r0, #0
 8008b82:	d005      	beq.n	8008b90 <PC_show_Keys+0x18>
    usb_out = true;
 8008b84:	4b01      	ldr	r3, [pc, #4]	@ (8008b8c <PC_show_Keys+0x14>)
 8008b86:	2201      	movs	r2, #1
 8008b88:	701a      	strb	r2, [r3, #0]
 8008b8a:	e004      	b.n	8008b96 <PC_show_Keys+0x1e>
 8008b8c:	20000b51 	.word	0x20000b51
  }
  else {
    usb_out = false;
 8008b90:	4bfd      	ldr	r3, [pc, #1012]	@ (8008f88 <PC_show_Keys+0x410>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "\r\nOverview of stored keys:\r\n");
 8008b96:	4afd      	ldr	r2, [pc, #1012]	@ (8008f8c <PC_show_Keys+0x414>)
 8008b98:	4bfd      	ldr	r3, [pc, #1012]	@ (8008f90 <PC_show_Keys+0x418>)
 8008b9a:	0011      	movs	r1, r2
 8008b9c:	0018      	movs	r0, r3
 8008b9e:	f01d fca7 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008ba2:	4bf9      	ldr	r3, [pc, #996]	@ (8008f88 <PC_show_Keys+0x410>)
 8008ba4:	781a      	ldrb	r2, [r3, #0]
 8008ba6:	4bfa      	ldr	r3, [pc, #1000]	@ (8008f90 <PC_show_Keys+0x418>)
 8008ba8:	0011      	movs	r1, r2
 8008baa:	0018      	movs	r0, r3
 8008bac:	f7ff ffc9 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8008bb0:	4bf8      	ldr	r3, [pc, #992]	@ (8008f94 <PC_show_Keys+0x41c>)
 8008bb2:	48f9      	ldr	r0, [pc, #996]	@ (8008f98 <PC_show_Keys+0x420>)
 8008bb4:	220c      	movs	r2, #12
 8008bb6:	0019      	movs	r1, r3
 8008bb8:	f003 fb14 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8008bbc:	4af5      	ldr	r2, [pc, #980]	@ (8008f94 <PC_show_Keys+0x41c>)
 8008bbe:	4bf7      	ldr	r3, [pc, #988]	@ (8008f9c <PC_show_Keys+0x424>)
 8008bc0:	0011      	movs	r1, r2
 8008bc2:	0018      	movs	r0, r3
 8008bc4:	f7fc fb8c 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Box id ------------------------: %s\r\n", BoxConfigCmd, Buffer);
 8008bc8:	4bf4      	ldr	r3, [pc, #976]	@ (8008f9c <PC_show_Keys+0x424>)
 8008bca:	49f5      	ldr	r1, [pc, #980]	@ (8008fa0 <PC_show_Keys+0x428>)
 8008bcc:	48f0      	ldr	r0, [pc, #960]	@ (8008f90 <PC_show_Keys+0x418>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f01d fc8e 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008bd4:	4bec      	ldr	r3, [pc, #944]	@ (8008f88 <PC_show_Keys+0x410>)
 8008bd6:	781a      	ldrb	r2, [r3, #0]
 8008bd8:	4bed      	ldr	r3, [pc, #948]	@ (8008f90 <PC_show_Keys+0x418>)
 8008bda:	0011      	movs	r1, r2
 8008bdc:	0018      	movs	r0, r3
 8008bde:	f7ff ffb0 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8008be2:	4bf0      	ldr	r3, [pc, #960]	@ (8008fa4 <PC_show_Keys+0x42c>)
 8008be4:	48f0      	ldr	r0, [pc, #960]	@ (8008fa8 <PC_show_Keys+0x430>)
 8008be6:	220c      	movs	r2, #12
 8008be8:	0019      	movs	r1, r3
 8008bea:	f003 fafb 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 8008bee:	4aed      	ldr	r2, [pc, #948]	@ (8008fa4 <PC_show_Keys+0x42c>)
 8008bf0:	4bea      	ldr	r3, [pc, #936]	@ (8008f9c <PC_show_Keys+0x424>)
 8008bf2:	0011      	movs	r1, r2
 8008bf4:	0018      	movs	r0, r3
 8008bf6:	f7fc fb73 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Temperature sensor id: --------: %s\r\n", TempConfigCmd, Buffer);
 8008bfa:	4be8      	ldr	r3, [pc, #928]	@ (8008f9c <PC_show_Keys+0x424>)
 8008bfc:	49eb      	ldr	r1, [pc, #940]	@ (8008fac <PC_show_Keys+0x434>)
 8008bfe:	48e4      	ldr	r0, [pc, #912]	@ (8008f90 <PC_show_Keys+0x418>)
 8008c00:	2201      	movs	r2, #1
 8008c02:	f01d fc75 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c06:	4be0      	ldr	r3, [pc, #896]	@ (8008f88 <PC_show_Keys+0x410>)
 8008c08:	781a      	ldrb	r2, [r3, #0]
 8008c0a:	4be1      	ldr	r3, [pc, #900]	@ (8008f90 <PC_show_Keys+0x418>)
 8008c0c:	0011      	movs	r1, r2
 8008c0e:	0018      	movs	r0, r3
 8008c10:	f7ff ff97 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8008c14:	4be6      	ldr	r3, [pc, #920]	@ (8008fb0 <PC_show_Keys+0x438>)
 8008c16:	48e7      	ldr	r0, [pc, #924]	@ (8008fb4 <PC_show_Keys+0x43c>)
 8008c18:	220c      	movs	r2, #12
 8008c1a:	0019      	movs	r1, r3
 8008c1c:	f003 fae2 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8008c20:	4ae3      	ldr	r2, [pc, #908]	@ (8008fb0 <PC_show_Keys+0x438>)
 8008c22:	4bde      	ldr	r3, [pc, #888]	@ (8008f9c <PC_show_Keys+0x424>)
 8008c24:	0011      	movs	r1, r2
 8008c26:	0018      	movs	r0, r3
 8008c28:	f7fc fb5a 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Humidity sensor id ------------: %s\r\n", HumidConfigCmd, Buffer);
 8008c2c:	4bdb      	ldr	r3, [pc, #876]	@ (8008f9c <PC_show_Keys+0x424>)
 8008c2e:	49e2      	ldr	r1, [pc, #904]	@ (8008fb8 <PC_show_Keys+0x440>)
 8008c30:	48d7      	ldr	r0, [pc, #860]	@ (8008f90 <PC_show_Keys+0x418>)
 8008c32:	2202      	movs	r2, #2
 8008c34:	f01d fc5c 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c38:	4bd3      	ldr	r3, [pc, #844]	@ (8008f88 <PC_show_Keys+0x410>)
 8008c3a:	781a      	ldrb	r2, [r3, #0]
 8008c3c:	4bd4      	ldr	r3, [pc, #848]	@ (8008f90 <PC_show_Keys+0x418>)
 8008c3e:	0011      	movs	r1, r2
 8008c40:	0018      	movs	r0, r3
 8008c42:	f7ff ff7e 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8008c46:	4bdd      	ldr	r3, [pc, #884]	@ (8008fbc <PC_show_Keys+0x444>)
 8008c48:	48dd      	ldr	r0, [pc, #884]	@ (8008fc0 <PC_show_Keys+0x448>)
 8008c4a:	220c      	movs	r2, #12
 8008c4c:	0019      	movs	r1, r3
 8008c4e:	f003 fac9 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 8008c52:	4ada      	ldr	r2, [pc, #872]	@ (8008fbc <PC_show_Keys+0x444>)
 8008c54:	4bd1      	ldr	r3, [pc, #836]	@ (8008f9c <PC_show_Keys+0x424>)
 8008c56:	0011      	movs	r1, r2
 8008c58:	0018      	movs	r0, r3
 8008c5a:	f7fc fb41 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - NOx sensor id -----------------: %s\r\n", NOxIndexConfigCmd, Buffer);
 8008c5e:	4bcf      	ldr	r3, [pc, #828]	@ (8008f9c <PC_show_Keys+0x424>)
 8008c60:	49d8      	ldr	r1, [pc, #864]	@ (8008fc4 <PC_show_Keys+0x44c>)
 8008c62:	48cb      	ldr	r0, [pc, #812]	@ (8008f90 <PC_show_Keys+0x418>)
 8008c64:	2203      	movs	r2, #3
 8008c66:	f01d fc43 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c6a:	4bc7      	ldr	r3, [pc, #796]	@ (8008f88 <PC_show_Keys+0x410>)
 8008c6c:	781a      	ldrb	r2, [r3, #0]
 8008c6e:	4bc8      	ldr	r3, [pc, #800]	@ (8008f90 <PC_show_Keys+0x418>)
 8008c70:	0011      	movs	r1, r2
 8008c72:	0018      	movs	r0, r3
 8008c74:	f7ff ff65 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8008c78:	4bd3      	ldr	r3, [pc, #844]	@ (8008fc8 <PC_show_Keys+0x450>)
 8008c7a:	48d4      	ldr	r0, [pc, #848]	@ (8008fcc <PC_show_Keys+0x454>)
 8008c7c:	220c      	movs	r2, #12
 8008c7e:	0019      	movs	r1, r3
 8008c80:	f003 fab0 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8008c84:	4ad0      	ldr	r2, [pc, #832]	@ (8008fc8 <PC_show_Keys+0x450>)
 8008c86:	4bc5      	ldr	r3, [pc, #788]	@ (8008f9c <PC_show_Keys+0x424>)
 8008c88:	0011      	movs	r1, r2
 8008c8a:	0018      	movs	r0, r3
 8008c8c:	f7fc fb28 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - VOC sensor id -----------------: %s\r\n", VocIndexConfigCmd, Buffer);
 8008c90:	4bc2      	ldr	r3, [pc, #776]	@ (8008f9c <PC_show_Keys+0x424>)
 8008c92:	49cf      	ldr	r1, [pc, #828]	@ (8008fd0 <PC_show_Keys+0x458>)
 8008c94:	48be      	ldr	r0, [pc, #760]	@ (8008f90 <PC_show_Keys+0x418>)
 8008c96:	2204      	movs	r2, #4
 8008c98:	f01d fc2a 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c9c:	4bba      	ldr	r3, [pc, #744]	@ (8008f88 <PC_show_Keys+0x410>)
 8008c9e:	781a      	ldrb	r2, [r3, #0]
 8008ca0:	4bbb      	ldr	r3, [pc, #748]	@ (8008f90 <PC_show_Keys+0x418>)
 8008ca2:	0011      	movs	r1, r2
 8008ca4:	0018      	movs	r0, r3
 8008ca6:	f7ff ff4c 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8008caa:	4bca      	ldr	r3, [pc, #808]	@ (8008fd4 <PC_show_Keys+0x45c>)
 8008cac:	48ca      	ldr	r0, [pc, #808]	@ (8008fd8 <PC_show_Keys+0x460>)
 8008cae:	220c      	movs	r2, #12
 8008cb0:	0019      	movs	r1, r3
 8008cb2:	f003 fa97 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8008cb6:	4ac7      	ldr	r2, [pc, #796]	@ (8008fd4 <PC_show_Keys+0x45c>)
 8008cb8:	4bb8      	ldr	r3, [pc, #736]	@ (8008f9c <PC_show_Keys+0x424>)
 8008cba:	0011      	movs	r1, r2
 8008cbc:	0018      	movs	r0, r3
 8008cbe:	f7fc fb0f 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - dBA sensor id -----------------: %s\r\n", dBAConfigCmd, Buffer);
 8008cc2:	4bb6      	ldr	r3, [pc, #728]	@ (8008f9c <PC_show_Keys+0x424>)
 8008cc4:	49c5      	ldr	r1, [pc, #788]	@ (8008fdc <PC_show_Keys+0x464>)
 8008cc6:	48b2      	ldr	r0, [pc, #712]	@ (8008f90 <PC_show_Keys+0x418>)
 8008cc8:	2205      	movs	r2, #5
 8008cca:	f01d fc11 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008cce:	4bae      	ldr	r3, [pc, #696]	@ (8008f88 <PC_show_Keys+0x410>)
 8008cd0:	781a      	ldrb	r2, [r3, #0]
 8008cd2:	4baf      	ldr	r3, [pc, #700]	@ (8008f90 <PC_show_Keys+0x418>)
 8008cd4:	0011      	movs	r1, r2
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	f7ff ff33 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(dBcConfigAddr, dBcConfig, IdSize);
 8008cdc:	4bc0      	ldr	r3, [pc, #768]	@ (8008fe0 <PC_show_Keys+0x468>)
 8008cde:	48c1      	ldr	r0, [pc, #772]	@ (8008fe4 <PC_show_Keys+0x46c>)
 8008ce0:	220c      	movs	r2, #12
 8008ce2:	0019      	movs	r1, r3
 8008ce4:	f003 fa7e 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, dBcConfig);
 8008ce8:	4abd      	ldr	r2, [pc, #756]	@ (8008fe0 <PC_show_Keys+0x468>)
 8008cea:	4bac      	ldr	r3, [pc, #688]	@ (8008f9c <PC_show_Keys+0x424>)
 8008cec:	0011      	movs	r1, r2
 8008cee:	0018      	movs	r0, r3
 8008cf0:	f7fc faf6 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Sound dBc sensor id -----------: %s\r\n", dBcConfigCmd, Buffer);
 8008cf4:	4ba9      	ldr	r3, [pc, #676]	@ (8008f9c <PC_show_Keys+0x424>)
 8008cf6:	49bc      	ldr	r1, [pc, #752]	@ (8008fe8 <PC_show_Keys+0x470>)
 8008cf8:	48a5      	ldr	r0, [pc, #660]	@ (8008f90 <PC_show_Keys+0x418>)
 8008cfa:	2206      	movs	r2, #6
 8008cfc:	f01d fbf8 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d00:	4ba1      	ldr	r3, [pc, #644]	@ (8008f88 <PC_show_Keys+0x410>)
 8008d02:	781a      	ldrb	r2, [r3, #0]
 8008d04:	4ba2      	ldr	r3, [pc, #648]	@ (8008f90 <PC_show_Keys+0x418>)
 8008d06:	0011      	movs	r1, r2
 8008d08:	0018      	movs	r0, r3
 8008d0a:	f7ff ff1a 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8008d0e:	4bb7      	ldr	r3, [pc, #732]	@ (8008fec <PC_show_Keys+0x474>)
 8008d10:	48b7      	ldr	r0, [pc, #732]	@ (8008ff0 <PC_show_Keys+0x478>)
 8008d12:	220c      	movs	r2, #12
 8008d14:	0019      	movs	r1, r3
 8008d16:	f003 fa65 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8008d1a:	4ab4      	ldr	r2, [pc, #720]	@ (8008fec <PC_show_Keys+0x474>)
 8008d1c:	4b9f      	ldr	r3, [pc, #636]	@ (8008f9c <PC_show_Keys+0x424>)
 8008d1e:	0011      	movs	r1, r2
 8008d20:	0018      	movs	r0, r3
 8008d22:	f7fc fadd 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - PM2p5 sensor id ---------------: %s\r\n", PM2ConfigCmd, Buffer);
 8008d26:	4b9d      	ldr	r3, [pc, #628]	@ (8008f9c <PC_show_Keys+0x424>)
 8008d28:	49b2      	ldr	r1, [pc, #712]	@ (8008ff4 <PC_show_Keys+0x47c>)
 8008d2a:	4899      	ldr	r0, [pc, #612]	@ (8008f90 <PC_show_Keys+0x418>)
 8008d2c:	2207      	movs	r2, #7
 8008d2e:	f01d fbdf 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d32:	4b95      	ldr	r3, [pc, #596]	@ (8008f88 <PC_show_Keys+0x410>)
 8008d34:	781a      	ldrb	r2, [r3, #0]
 8008d36:	4b96      	ldr	r3, [pc, #600]	@ (8008f90 <PC_show_Keys+0x418>)
 8008d38:	0011      	movs	r1, r2
 8008d3a:	0018      	movs	r0, r3
 8008d3c:	f7ff ff01 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8008d40:	4bad      	ldr	r3, [pc, #692]	@ (8008ff8 <PC_show_Keys+0x480>)
 8008d42:	48ae      	ldr	r0, [pc, #696]	@ (8008ffc <PC_show_Keys+0x484>)
 8008d44:	220c      	movs	r2, #12
 8008d46:	0019      	movs	r1, r3
 8008d48:	f003 fa4c 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 8008d4c:	4aaa      	ldr	r2, [pc, #680]	@ (8008ff8 <PC_show_Keys+0x480>)
 8008d4e:	4b93      	ldr	r3, [pc, #588]	@ (8008f9c <PC_show_Keys+0x424>)
 8008d50:	0011      	movs	r1, r2
 8008d52:	0018      	movs	r0, r3
 8008d54:	f7fc fac4 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - PM10 sensor id ----------------: %s\r\n", PM10ConfigCmd, Buffer);
 8008d58:	4b90      	ldr	r3, [pc, #576]	@ (8008f9c <PC_show_Keys+0x424>)
 8008d5a:	49a9      	ldr	r1, [pc, #676]	@ (8009000 <PC_show_Keys+0x488>)
 8008d5c:	488c      	ldr	r0, [pc, #560]	@ (8008f90 <PC_show_Keys+0x418>)
 8008d5e:	2208      	movs	r2, #8
 8008d60:	f01d fbc6 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d64:	4b88      	ldr	r3, [pc, #544]	@ (8008f88 <PC_show_Keys+0x410>)
 8008d66:	781a      	ldrb	r2, [r3, #0]
 8008d68:	4b89      	ldr	r3, [pc, #548]	@ (8008f90 <PC_show_Keys+0x418>)
 8008d6a:	0011      	movs	r1, r2
 8008d6c:	0018      	movs	r0, r3
 8008d6e:	f7ff fee8 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8008d72:	4ba4      	ldr	r3, [pc, #656]	@ (8009004 <PC_show_Keys+0x48c>)
 8008d74:	48a4      	ldr	r0, [pc, #656]	@ (8009008 <PC_show_Keys+0x490>)
 8008d76:	220c      	movs	r2, #12
 8008d78:	0019      	movs	r1, r3
 8008d7a:	f003 fa33 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 8008d7e:	4aa1      	ldr	r2, [pc, #644]	@ (8009004 <PC_show_Keys+0x48c>)
 8008d80:	4b86      	ldr	r3, [pc, #536]	@ (8008f9c <PC_show_Keys+0x424>)
 8008d82:	0011      	movs	r1, r2
 8008d84:	0018      	movs	r0, r3
 8008d86:	f7fc faab 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Battery voltage sensor id -----: %s\r\n", BatVoltConfigCmd, Buffer);
 8008d8a:	4b84      	ldr	r3, [pc, #528]	@ (8008f9c <PC_show_Keys+0x424>)
 8008d8c:	499f      	ldr	r1, [pc, #636]	@ (800900c <PC_show_Keys+0x494>)
 8008d8e:	4880      	ldr	r0, [pc, #512]	@ (8008f90 <PC_show_Keys+0x418>)
 8008d90:	2209      	movs	r2, #9
 8008d92:	f01d fbad 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d96:	4b7c      	ldr	r3, [pc, #496]	@ (8008f88 <PC_show_Keys+0x410>)
 8008d98:	781a      	ldrb	r2, [r3, #0]
 8008d9a:	4b7d      	ldr	r3, [pc, #500]	@ (8008f90 <PC_show_Keys+0x418>)
 8008d9c:	0011      	movs	r1, r2
 8008d9e:	0018      	movs	r0, r3
 8008da0:	f7ff fecf 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8008da4:	4b9a      	ldr	r3, [pc, #616]	@ (8009010 <PC_show_Keys+0x498>)
 8008da6:	489b      	ldr	r0, [pc, #620]	@ (8009014 <PC_show_Keys+0x49c>)
 8008da8:	220c      	movs	r2, #12
 8008daa:	0019      	movs	r1, r3
 8008dac:	f003 fa1a 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 8008db0:	4a97      	ldr	r2, [pc, #604]	@ (8009010 <PC_show_Keys+0x498>)
 8008db2:	4b7a      	ldr	r3, [pc, #488]	@ (8008f9c <PC_show_Keys+0x424>)
 8008db4:	0011      	movs	r1, r2
 8008db6:	0018      	movs	r0, r3
 8008db8:	f7fc fa92 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Solar voltage sensor id -------: %s\r\n", SolVoltConfigCmd, Buffer);
 8008dbc:	4b77      	ldr	r3, [pc, #476]	@ (8008f9c <PC_show_Keys+0x424>)
 8008dbe:	4996      	ldr	r1, [pc, #600]	@ (8009018 <PC_show_Keys+0x4a0>)
 8008dc0:	4873      	ldr	r0, [pc, #460]	@ (8008f90 <PC_show_Keys+0x418>)
 8008dc2:	220a      	movs	r2, #10
 8008dc4:	f01d fb94 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8008f88 <PC_show_Keys+0x410>)
 8008dca:	781a      	ldrb	r2, [r3, #0]
 8008dcc:	4b70      	ldr	r3, [pc, #448]	@ (8008f90 <PC_show_Keys+0x418>)
 8008dce:	0011      	movs	r1, r2
 8008dd0:	0018      	movs	r0, r3
 8008dd2:	f7ff feb6 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, ChargerStatConfig, IdSize);
 8008dd6:	4b91      	ldr	r3, [pc, #580]	@ (800901c <PC_show_Keys+0x4a4>)
 8008dd8:	4891      	ldr	r0, [pc, #580]	@ (8009020 <PC_show_Keys+0x4a8>)
 8008dda:	220c      	movs	r2, #12
 8008ddc:	0019      	movs	r1, r3
 8008dde:	f003 fa01 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ChargerStatConfig);
 8008de2:	4a8e      	ldr	r2, [pc, #568]	@ (800901c <PC_show_Keys+0x4a4>)
 8008de4:	4b6d      	ldr	r3, [pc, #436]	@ (8008f9c <PC_show_Keys+0x424>)
 8008de6:	0011      	movs	r1, r2
 8008de8:	0018      	movs	r0, r3
 8008dea:	f7fc fa79 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Charger status ----------------: %s\r\n", ChargerStatConfigCmd, Buffer);
 8008dee:	4b6b      	ldr	r3, [pc, #428]	@ (8008f9c <PC_show_Keys+0x424>)
 8008df0:	498c      	ldr	r1, [pc, #560]	@ (8009024 <PC_show_Keys+0x4ac>)
 8008df2:	4867      	ldr	r0, [pc, #412]	@ (8008f90 <PC_show_Keys+0x418>)
 8008df4:	220b      	movs	r2, #11
 8008df6:	f01d fb7b 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008dfa:	4b63      	ldr	r3, [pc, #396]	@ (8008f88 <PC_show_Keys+0x410>)
 8008dfc:	781a      	ldrb	r2, [r3, #0]
 8008dfe:	4b64      	ldr	r3, [pc, #400]	@ (8008f90 <PC_show_Keys+0x418>)
 8008e00:	0011      	movs	r1, r2
 8008e02:	0018      	movs	r0, r3
 8008e04:	f7ff fe9d 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8008e08:	4b87      	ldr	r3, [pc, #540]	@ (8009028 <PC_show_Keys+0x4b0>)
 8008e0a:	4888      	ldr	r0, [pc, #544]	@ (800902c <PC_show_Keys+0x4b4>)
 8008e0c:	2220      	movs	r2, #32
 8008e0e:	0019      	movs	r1, r3
 8008e10:	f003 f9e8 	bl	800c1e4 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Box name ---max 12 char--------: ", CustomNameConfigCmd);
 8008e14:	4986      	ldr	r1, [pc, #536]	@ (8009030 <PC_show_Keys+0x4b8>)
 8008e16:	4b5e      	ldr	r3, [pc, #376]	@ (8008f90 <PC_show_Keys+0x418>)
 8008e18:	220c      	movs	r2, #12
 8008e1a:	0018      	movs	r0, r3
 8008e1c:	f01d fb68 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e20:	4b59      	ldr	r3, [pc, #356]	@ (8008f88 <PC_show_Keys+0x410>)
 8008e22:	781a      	ldrb	r2, [r3, #0]
 8008e24:	4b5a      	ldr	r3, [pc, #360]	@ (8008f90 <PC_show_Keys+0x418>)
 8008e26:	0011      	movs	r1, r2
 8008e28:	0018      	movs	r0, r3
 8008e2a:	f7ff fe8a 	bl	8008b42 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);  // probably too long to held in same buffer
 8008e2e:	4a7e      	ldr	r2, [pc, #504]	@ (8009028 <PC_show_Keys+0x4b0>)
 8008e30:	4980      	ldr	r1, [pc, #512]	@ (8009034 <PC_show_Keys+0x4bc>)
 8008e32:	4b57      	ldr	r3, [pc, #348]	@ (8008f90 <PC_show_Keys+0x418>)
 8008e34:	0018      	movs	r0, r3
 8008e36:	f01d fb5b 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e3a:	4b53      	ldr	r3, [pc, #332]	@ (8008f88 <PC_show_Keys+0x410>)
 8008e3c:	781a      	ldrb	r2, [r3, #0]
 8008e3e:	4b54      	ldr	r3, [pc, #336]	@ (8008f90 <PC_show_Keys+0x418>)
 8008e40:	0011      	movs	r1, r2
 8008e42:	0018      	movs	r0, r3
 8008e44:	f7ff fe7d 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(SSIDConfigAddr, SSIDConfig, SSIDMaxLength);
 8008e48:	4b7b      	ldr	r3, [pc, #492]	@ (8009038 <PC_show_Keys+0x4c0>)
 8008e4a:	487c      	ldr	r0, [pc, #496]	@ (800903c <PC_show_Keys+0x4c4>)
 8008e4c:	2220      	movs	r2, #32
 8008e4e:	0019      	movs	r1, r3
 8008e50:	f003 f9c8 	bl	800c1e4 <ReadUint8ArrayEEprom>
//  uint8ArrayToString(Buffer, SSIDConfig);
  sprintf(msg, "%02d - SSID name ---------------------: ", SSIDConfigCmd);
 8008e54:	497a      	ldr	r1, [pc, #488]	@ (8009040 <PC_show_Keys+0x4c8>)
 8008e56:	4b4e      	ldr	r3, [pc, #312]	@ (8008f90 <PC_show_Keys+0x418>)
 8008e58:	220d      	movs	r2, #13
 8008e5a:	0018      	movs	r0, r3
 8008e5c:	f01d fb48 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e60:	4b49      	ldr	r3, [pc, #292]	@ (8008f88 <PC_show_Keys+0x410>)
 8008e62:	781a      	ldrb	r2, [r3, #0]
 8008e64:	4b4a      	ldr	r3, [pc, #296]	@ (8008f90 <PC_show_Keys+0x418>)
 8008e66:	0011      	movs	r1, r2
 8008e68:	0018      	movs	r0, r3
 8008e6a:	f7ff fe6a 	bl	8008b42 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SSIDConfig);  // probably too long to held in same buffer
 8008e6e:	4a72      	ldr	r2, [pc, #456]	@ (8009038 <PC_show_Keys+0x4c0>)
 8008e70:	4970      	ldr	r1, [pc, #448]	@ (8009034 <PC_show_Keys+0x4bc>)
 8008e72:	4b47      	ldr	r3, [pc, #284]	@ (8008f90 <PC_show_Keys+0x418>)
 8008e74:	0018      	movs	r0, r3
 8008e76:	f01d fb3b 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e7a:	4b43      	ldr	r3, [pc, #268]	@ (8008f88 <PC_show_Keys+0x410>)
 8008e7c:	781a      	ldrb	r2, [r3, #0]
 8008e7e:	4b44      	ldr	r3, [pc, #272]	@ (8008f90 <PC_show_Keys+0x418>)
 8008e80:	0011      	movs	r1, r2
 8008e82:	0018      	movs	r0, r3
 8008e84:	f7ff fe5d 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(pwdConfigAddr, pwdConfig, pwdMaxLength);
 8008e88:	4b6e      	ldr	r3, [pc, #440]	@ (8009044 <PC_show_Keys+0x4cc>)
 8008e8a:	486f      	ldr	r0, [pc, #444]	@ (8009048 <PC_show_Keys+0x4d0>)
 8008e8c:	2240      	movs	r2, #64	@ 0x40
 8008e8e:	0019      	movs	r1, r3
 8008e90:	f003 f9a8 	bl	800c1e4 <ReadUint8ArrayEEprom>
//  uint8ArrayToString(Buffer, pwdConfig);
  sprintf(msg, "%02d - WiFi password -----------------: ", PasswordConfigCmd);
 8008e94:	496d      	ldr	r1, [pc, #436]	@ (800904c <PC_show_Keys+0x4d4>)
 8008e96:	4b3e      	ldr	r3, [pc, #248]	@ (8008f90 <PC_show_Keys+0x418>)
 8008e98:	220e      	movs	r2, #14
 8008e9a:	0018      	movs	r0, r3
 8008e9c:	f01d fb28 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008ea0:	4b39      	ldr	r3, [pc, #228]	@ (8008f88 <PC_show_Keys+0x410>)
 8008ea2:	781a      	ldrb	r2, [r3, #0]
 8008ea4:	4b3a      	ldr	r3, [pc, #232]	@ (8008f90 <PC_show_Keys+0x418>)
 8008ea6:	0011      	movs	r1, r2
 8008ea8:	0018      	movs	r0, r3
 8008eaa:	f7ff fe4a 	bl	8008b42 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)pwdConfig);  // probably too long to held in same buffer
 8008eae:	4a65      	ldr	r2, [pc, #404]	@ (8009044 <PC_show_Keys+0x4cc>)
 8008eb0:	4960      	ldr	r1, [pc, #384]	@ (8009034 <PC_show_Keys+0x4bc>)
 8008eb2:	4b37      	ldr	r3, [pc, #220]	@ (8008f90 <PC_show_Keys+0x418>)
 8008eb4:	0018      	movs	r0, r3
 8008eb6:	f01d fb1b 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008eba:	4b33      	ldr	r3, [pc, #204]	@ (8008f88 <PC_show_Keys+0x410>)
 8008ebc:	781a      	ldrb	r2, [r3, #0]
 8008ebe:	4b34      	ldr	r3, [pc, #208]	@ (8008f90 <PC_show_Keys+0x418>)
 8008ec0:	0011      	movs	r1, r2
 8008ec2:	0018      	movs	r0, r3
 8008ec4:	f7ff fe3d 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(AHTTempConfigAddr, AHTTempConfig, IdSize);
 8008ec8:	4b61      	ldr	r3, [pc, #388]	@ (8009050 <PC_show_Keys+0x4d8>)
 8008eca:	4862      	ldr	r0, [pc, #392]	@ (8009054 <PC_show_Keys+0x4dc>)
 8008ecc:	220c      	movs	r2, #12
 8008ece:	0019      	movs	r1, r3
 8008ed0:	f003 f988 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTTempConfig);
 8008ed4:	4a5e      	ldr	r2, [pc, #376]	@ (8009050 <PC_show_Keys+0x4d8>)
 8008ed6:	4b31      	ldr	r3, [pc, #196]	@ (8008f9c <PC_show_Keys+0x424>)
 8008ed8:	0011      	movs	r1, r2
 8008eda:	0018      	movs	r0, r3
 8008edc:	f7fc fa00 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - AHT2x Temperature sensor id ---: %s\r\n", AHTTempConfigCmd, Buffer);
 8008ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8008f9c <PC_show_Keys+0x424>)
 8008ee2:	495d      	ldr	r1, [pc, #372]	@ (8009058 <PC_show_Keys+0x4e0>)
 8008ee4:	482a      	ldr	r0, [pc, #168]	@ (8008f90 <PC_show_Keys+0x418>)
 8008ee6:	220f      	movs	r2, #15
 8008ee8:	f01d fb02 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008eec:	4b26      	ldr	r3, [pc, #152]	@ (8008f88 <PC_show_Keys+0x410>)
 8008eee:	781a      	ldrb	r2, [r3, #0]
 8008ef0:	4b27      	ldr	r3, [pc, #156]	@ (8008f90 <PC_show_Keys+0x418>)
 8008ef2:	0011      	movs	r1, r2
 8008ef4:	0018      	movs	r0, r3
 8008ef6:	f7ff fe24 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(AHTHumidConfigAddr, AHTHumidConfig, IdSize);
 8008efa:	4b58      	ldr	r3, [pc, #352]	@ (800905c <PC_show_Keys+0x4e4>)
 8008efc:	4858      	ldr	r0, [pc, #352]	@ (8009060 <PC_show_Keys+0x4e8>)
 8008efe:	220c      	movs	r2, #12
 8008f00:	0019      	movs	r1, r3
 8008f02:	f003 f96f 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTHumidConfig);
 8008f06:	4a55      	ldr	r2, [pc, #340]	@ (800905c <PC_show_Keys+0x4e4>)
 8008f08:	4b24      	ldr	r3, [pc, #144]	@ (8008f9c <PC_show_Keys+0x424>)
 8008f0a:	0011      	movs	r1, r2
 8008f0c:	0018      	movs	r0, r3
 8008f0e:	f7fc f9e7 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - AHT2x Humidity sensor id ------: %s\r\n", AHTHumidConfigCmd, Buffer);
 8008f12:	4b22      	ldr	r3, [pc, #136]	@ (8008f9c <PC_show_Keys+0x424>)
 8008f14:	4953      	ldr	r1, [pc, #332]	@ (8009064 <PC_show_Keys+0x4ec>)
 8008f16:	481e      	ldr	r0, [pc, #120]	@ (8008f90 <PC_show_Keys+0x418>)
 8008f18:	2210      	movs	r2, #16
 8008f1a:	f01d fae9 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8008f88 <PC_show_Keys+0x410>)
 8008f20:	781a      	ldrb	r2, [r3, #0]
 8008f22:	4b1b      	ldr	r3, [pc, #108]	@ (8008f90 <PC_show_Keys+0x418>)
 8008f24:	0011      	movs	r1, r2
 8008f26:	0018      	movs	r0, r3
 8008f28:	f7ff fe0b 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(BMPTempConfigAddr, BMPTempConfig, IdSize);
 8008f2c:	4b4e      	ldr	r3, [pc, #312]	@ (8009068 <PC_show_Keys+0x4f0>)
 8008f2e:	484f      	ldr	r0, [pc, #316]	@ (800906c <PC_show_Keys+0x4f4>)
 8008f30:	220c      	movs	r2, #12
 8008f32:	0019      	movs	r1, r3
 8008f34:	f003 f956 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, BMPTempConfig);
 8008f38:	4a4b      	ldr	r2, [pc, #300]	@ (8009068 <PC_show_Keys+0x4f0>)
 8008f3a:	4b18      	ldr	r3, [pc, #96]	@ (8008f9c <PC_show_Keys+0x424>)
 8008f3c:	0011      	movs	r1, r2
 8008f3e:	0018      	movs	r0, r3
 8008f40:	f7fc f9ce 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - BMP280 Temperature sensor id --: %s\r\n", BMPTempConfigCmd, Buffer);
 8008f44:	4b15      	ldr	r3, [pc, #84]	@ (8008f9c <PC_show_Keys+0x424>)
 8008f46:	494a      	ldr	r1, [pc, #296]	@ (8009070 <PC_show_Keys+0x4f8>)
 8008f48:	4811      	ldr	r0, [pc, #68]	@ (8008f90 <PC_show_Keys+0x418>)
 8008f4a:	2211      	movs	r2, #17
 8008f4c:	f01d fad0 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008f50:	4b0d      	ldr	r3, [pc, #52]	@ (8008f88 <PC_show_Keys+0x410>)
 8008f52:	781a      	ldrb	r2, [r3, #0]
 8008f54:	4b0e      	ldr	r3, [pc, #56]	@ (8008f90 <PC_show_Keys+0x418>)
 8008f56:	0011      	movs	r1, r2
 8008f58:	0018      	movs	r0, r3
 8008f5a:	f7ff fdf2 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(ENSAQIConfigAddr, ENSAQIConfig, IdSize);
 8008f5e:	4b45      	ldr	r3, [pc, #276]	@ (8009074 <PC_show_Keys+0x4fc>)
 8008f60:	4845      	ldr	r0, [pc, #276]	@ (8009078 <PC_show_Keys+0x500>)
 8008f62:	220c      	movs	r2, #12
 8008f64:	0019      	movs	r1, r3
 8008f66:	f003 f93d 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSAQIConfig);
 8008f6a:	4a42      	ldr	r2, [pc, #264]	@ (8009074 <PC_show_Keys+0x4fc>)
 8008f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f9c <PC_show_Keys+0x424>)
 8008f6e:	0011      	movs	r1, r2
 8008f70:	0018      	movs	r0, r3
 8008f72:	f7fc f9b5 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 AQI sensor id ----------: %s\r\n", ENSAQIConfigCmd, Buffer);
 8008f76:	4b09      	ldr	r3, [pc, #36]	@ (8008f9c <PC_show_Keys+0x424>)
 8008f78:	4940      	ldr	r1, [pc, #256]	@ (800907c <PC_show_Keys+0x504>)
 8008f7a:	4805      	ldr	r0, [pc, #20]	@ (8008f90 <PC_show_Keys+0x418>)
 8008f7c:	2212      	movs	r2, #18
 8008f7e:	f01d fab7 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008f82:	4b01      	ldr	r3, [pc, #4]	@ (8008f88 <PC_show_Keys+0x410>)
 8008f84:	781a      	ldrb	r2, [r3, #0]
 8008f86:	e07b      	b.n	8009080 <PC_show_Keys+0x508>
 8008f88:	20000b51 	.word	0x20000b51
 8008f8c:	0802b65c 	.word	0x0802b65c
 8008f90:	20000b54 	.word	0x20000b54
 8008f94:	20000b9c 	.word	0x20000b9c
 8008f98:	08080000 	.word	0x08080000
 8008f9c:	20000ba8 	.word	0x20000ba8
 8008fa0:	0802b67c 	.word	0x0802b67c
 8008fa4:	20000bc4 	.word	0x20000bc4
 8008fa8:	0808000c 	.word	0x0808000c
 8008fac:	0802b6ac 	.word	0x0802b6ac
 8008fb0:	20000bd0 	.word	0x20000bd0
 8008fb4:	08080018 	.word	0x08080018
 8008fb8:	0802b6dc 	.word	0x0802b6dc
 8008fbc:	20000bdc 	.word	0x20000bdc
 8008fc0:	08080024 	.word	0x08080024
 8008fc4:	0802b70c 	.word	0x0802b70c
 8008fc8:	20000be8 	.word	0x20000be8
 8008fcc:	08080030 	.word	0x08080030
 8008fd0:	0802b73c 	.word	0x0802b73c
 8008fd4:	20000bf4 	.word	0x20000bf4
 8008fd8:	08080048 	.word	0x08080048
 8008fdc:	0802b76c 	.word	0x0802b76c
 8008fe0:	20000c00 	.word	0x20000c00
 8008fe4:	0808003c 	.word	0x0808003c
 8008fe8:	0802b79c 	.word	0x0802b79c
 8008fec:	20000c0c 	.word	0x20000c0c
 8008ff0:	08080054 	.word	0x08080054
 8008ff4:	0802b7cc 	.word	0x0802b7cc
 8008ff8:	20000c18 	.word	0x20000c18
 8008ffc:	08080060 	.word	0x08080060
 8009000:	0802b7fc 	.word	0x0802b7fc
 8009004:	20000c24 	.word	0x20000c24
 8009008:	0808006c 	.word	0x0808006c
 800900c:	0802b82c 	.word	0x0802b82c
 8009010:	20000c30 	.word	0x20000c30
 8009014:	08080078 	.word	0x08080078
 8009018:	0802b85c 	.word	0x0802b85c
 800901c:	20000c3c 	.word	0x20000c3c
 8009020:	08080084 	.word	0x08080084
 8009024:	0802b88c 	.word	0x0802b88c
 8009028:	20000c48 	.word	0x20000c48
 800902c:	08080090 	.word	0x08080090
 8009030:	0802b8bc 	.word	0x0802b8bc
 8009034:	0802b8e8 	.word	0x0802b8e8
 8009038:	20000c68 	.word	0x20000c68
 800903c:	08080200 	.word	0x08080200
 8009040:	0802b8f0 	.word	0x0802b8f0
 8009044:	20000c88 	.word	0x20000c88
 8009048:	08080220 	.word	0x08080220
 800904c:	0802b91c 	.word	0x0802b91c
 8009050:	20000cc8 	.word	0x20000cc8
 8009054:	080800c8 	.word	0x080800c8
 8009058:	0802b948 	.word	0x0802b948
 800905c:	20000cd4 	.word	0x20000cd4
 8009060:	080800d4 	.word	0x080800d4
 8009064:	0802b978 	.word	0x0802b978
 8009068:	20000ce0 	.word	0x20000ce0
 800906c:	080800e0 	.word	0x080800e0
 8009070:	0802b9a8 	.word	0x0802b9a8
 8009074:	20000cec 	.word	0x20000cec
 8009078:	080800ec 	.word	0x080800ec
 800907c:	0802b9d8 	.word	0x0802b9d8
 8009080:	4be2      	ldr	r3, [pc, #904]	@ (800940c <PC_show_Keys+0x894>)
 8009082:	0011      	movs	r1, r2
 8009084:	0018      	movs	r0, r3
 8009086:	f7ff fd5c 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(ENSTVOCConfigAddr, ENSTVOCConfig, IdSize);
 800908a:	4be1      	ldr	r3, [pc, #900]	@ (8009410 <PC_show_Keys+0x898>)
 800908c:	48e1      	ldr	r0, [pc, #900]	@ (8009414 <PC_show_Keys+0x89c>)
 800908e:	220c      	movs	r2, #12
 8009090:	0019      	movs	r1, r3
 8009092:	f003 f8a7 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSTVOCConfig);
 8009096:	4ade      	ldr	r2, [pc, #888]	@ (8009410 <PC_show_Keys+0x898>)
 8009098:	4bdf      	ldr	r3, [pc, #892]	@ (8009418 <PC_show_Keys+0x8a0>)
 800909a:	0011      	movs	r1, r2
 800909c:	0018      	movs	r0, r3
 800909e:	f7fc f91f 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 TVOC sensor id ---------: %s\r\n", ENSTVOCConfigCmd, Buffer);
 80090a2:	4bdd      	ldr	r3, [pc, #884]	@ (8009418 <PC_show_Keys+0x8a0>)
 80090a4:	49dd      	ldr	r1, [pc, #884]	@ (800941c <PC_show_Keys+0x8a4>)
 80090a6:	48d9      	ldr	r0, [pc, #868]	@ (800940c <PC_show_Keys+0x894>)
 80090a8:	2213      	movs	r2, #19
 80090aa:	f01d fa21 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80090ae:	4bdc      	ldr	r3, [pc, #880]	@ (8009420 <PC_show_Keys+0x8a8>)
 80090b0:	781a      	ldrb	r2, [r3, #0]
 80090b2:	4bd6      	ldr	r3, [pc, #856]	@ (800940c <PC_show_Keys+0x894>)
 80090b4:	0011      	movs	r1, r2
 80090b6:	0018      	movs	r0, r3
 80090b8:	f7ff fd43 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, ENSeCO2Config, IdSize);
 80090bc:	4bd9      	ldr	r3, [pc, #868]	@ (8009424 <PC_show_Keys+0x8ac>)
 80090be:	48da      	ldr	r0, [pc, #872]	@ (8009428 <PC_show_Keys+0x8b0>)
 80090c0:	220c      	movs	r2, #12
 80090c2:	0019      	movs	r1, r3
 80090c4:	f003 f88e 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSeCO2Config);
 80090c8:	4ad6      	ldr	r2, [pc, #856]	@ (8009424 <PC_show_Keys+0x8ac>)
 80090ca:	4bd3      	ldr	r3, [pc, #844]	@ (8009418 <PC_show_Keys+0x8a0>)
 80090cc:	0011      	movs	r1, r2
 80090ce:	0018      	movs	r0, r3
 80090d0:	f7fc f906 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 eCO2 sensor id ---------: %s\r\n", ENSeCO2ConfigCmd, Buffer);
 80090d4:	4bd0      	ldr	r3, [pc, #832]	@ (8009418 <PC_show_Keys+0x8a0>)
 80090d6:	49d5      	ldr	r1, [pc, #852]	@ (800942c <PC_show_Keys+0x8b4>)
 80090d8:	48cc      	ldr	r0, [pc, #816]	@ (800940c <PC_show_Keys+0x894>)
 80090da:	2214      	movs	r2, #20
 80090dc:	f01d fa08 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80090e0:	4bcf      	ldr	r3, [pc, #828]	@ (8009420 <PC_show_Keys+0x8a8>)
 80090e2:	781a      	ldrb	r2, [r3, #0]
 80090e4:	4bc9      	ldr	r3, [pc, #804]	@ (800940c <PC_show_Keys+0x894>)
 80090e6:	0011      	movs	r1, r2
 80090e8:	0018      	movs	r0, r3
 80090ea:	f7ff fd2a 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(PM1ConfigAddr, PM1Config, IdSize);
 80090ee:	4bd0      	ldr	r3, [pc, #832]	@ (8009430 <PC_show_Keys+0x8b8>)
 80090f0:	48d0      	ldr	r0, [pc, #832]	@ (8009434 <PC_show_Keys+0x8bc>)
 80090f2:	220c      	movs	r2, #12
 80090f4:	0019      	movs	r1, r3
 80090f6:	f003 f875 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM1Config);
 80090fa:	4acd      	ldr	r2, [pc, #820]	@ (8009430 <PC_show_Keys+0x8b8>)
 80090fc:	4bc6      	ldr	r3, [pc, #792]	@ (8009418 <PC_show_Keys+0x8a0>)
 80090fe:	0011      	movs	r1, r2
 8009100:	0018      	movs	r0, r3
 8009102:	f7fc f8ed 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - PM1p0 sensor id ---------------: %s\r\n", PM1ConfigCmd, Buffer);
 8009106:	4bc4      	ldr	r3, [pc, #784]	@ (8009418 <PC_show_Keys+0x8a0>)
 8009108:	49cb      	ldr	r1, [pc, #812]	@ (8009438 <PC_show_Keys+0x8c0>)
 800910a:	48c0      	ldr	r0, [pc, #768]	@ (800940c <PC_show_Keys+0x894>)
 800910c:	2215      	movs	r2, #21
 800910e:	f01d f9ef 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009112:	4bc3      	ldr	r3, [pc, #780]	@ (8009420 <PC_show_Keys+0x8a8>)
 8009114:	781a      	ldrb	r2, [r3, #0]
 8009116:	4bbd      	ldr	r3, [pc, #756]	@ (800940c <PC_show_Keys+0x894>)
 8009118:	0011      	movs	r1, r2
 800911a:	0018      	movs	r0, r3
 800911c:	f7ff fd11 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(PM4ConfigAddr, PM4Config, IdSize);
 8009120:	4bc6      	ldr	r3, [pc, #792]	@ (800943c <PC_show_Keys+0x8c4>)
 8009122:	48c7      	ldr	r0, [pc, #796]	@ (8009440 <PC_show_Keys+0x8c8>)
 8009124:	220c      	movs	r2, #12
 8009126:	0019      	movs	r1, r3
 8009128:	f003 f85c 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM4Config);
 800912c:	4ac3      	ldr	r2, [pc, #780]	@ (800943c <PC_show_Keys+0x8c4>)
 800912e:	4bba      	ldr	r3, [pc, #744]	@ (8009418 <PC_show_Keys+0x8a0>)
 8009130:	0011      	movs	r1, r2
 8009132:	0018      	movs	r0, r3
 8009134:	f7fc f8d4 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - PM4p0 sensor id ---------------: %s\r\n", PM4ConfigCmd, Buffer);
 8009138:	4bb7      	ldr	r3, [pc, #732]	@ (8009418 <PC_show_Keys+0x8a0>)
 800913a:	49c2      	ldr	r1, [pc, #776]	@ (8009444 <PC_show_Keys+0x8cc>)
 800913c:	48b3      	ldr	r0, [pc, #716]	@ (800940c <PC_show_Keys+0x894>)
 800913e:	2216      	movs	r2, #22
 8009140:	f01d f9d6 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009144:	4bb6      	ldr	r3, [pc, #728]	@ (8009420 <PC_show_Keys+0x8a8>)
 8009146:	781a      	ldrb	r2, [r3, #0]
 8009148:	4bb0      	ldr	r3, [pc, #704]	@ (800940c <PC_show_Keys+0x894>)
 800914a:	0011      	movs	r1, r2
 800914c:	0018      	movs	r0, r3
 800914e:	f7ff fcf8 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, SEN55TempConfig, IdSize);
 8009152:	4bbd      	ldr	r3, [pc, #756]	@ (8009448 <PC_show_Keys+0x8d0>)
 8009154:	48bd      	ldr	r0, [pc, #756]	@ (800944c <PC_show_Keys+0x8d4>)
 8009156:	220c      	movs	r2, #12
 8009158:	0019      	movs	r1, r3
 800915a:	f003 f843 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55TempConfig);
 800915e:	4aba      	ldr	r2, [pc, #744]	@ (8009448 <PC_show_Keys+0x8d0>)
 8009160:	4bad      	ldr	r3, [pc, #692]	@ (8009418 <PC_show_Keys+0x8a0>)
 8009162:	0011      	movs	r1, r2
 8009164:	0018      	movs	r0, r3
 8009166:	f7fc f8bb 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - SEN54/55 Temperature sensor id : %s\r\n", SEN55TempConfigCmd, Buffer);
 800916a:	4bab      	ldr	r3, [pc, #684]	@ (8009418 <PC_show_Keys+0x8a0>)
 800916c:	49b8      	ldr	r1, [pc, #736]	@ (8009450 <PC_show_Keys+0x8d8>)
 800916e:	48a7      	ldr	r0, [pc, #668]	@ (800940c <PC_show_Keys+0x894>)
 8009170:	2217      	movs	r2, #23
 8009172:	f01d f9bd 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009176:	4baa      	ldr	r3, [pc, #680]	@ (8009420 <PC_show_Keys+0x8a8>)
 8009178:	781a      	ldrb	r2, [r3, #0]
 800917a:	4ba4      	ldr	r3, [pc, #656]	@ (800940c <PC_show_Keys+0x894>)
 800917c:	0011      	movs	r1, r2
 800917e:	0018      	movs	r0, r3
 8009180:	f7ff fcdf 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, SEN55HumidConfig, IdSize);
 8009184:	4bb3      	ldr	r3, [pc, #716]	@ (8009454 <PC_show_Keys+0x8dc>)
 8009186:	48b4      	ldr	r0, [pc, #720]	@ (8009458 <PC_show_Keys+0x8e0>)
 8009188:	220c      	movs	r2, #12
 800918a:	0019      	movs	r1, r3
 800918c:	f003 f82a 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55HumidConfig);
 8009190:	4ab0      	ldr	r2, [pc, #704]	@ (8009454 <PC_show_Keys+0x8dc>)
 8009192:	4ba1      	ldr	r3, [pc, #644]	@ (8009418 <PC_show_Keys+0x8a0>)
 8009194:	0011      	movs	r1, r2
 8009196:	0018      	movs	r0, r3
 8009198:	f7fc f8a2 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - SEN54/55 Humidity sensor id ---: %s\r\n", SEN55HumidConfigCmd, Buffer);
 800919c:	4b9e      	ldr	r3, [pc, #632]	@ (8009418 <PC_show_Keys+0x8a0>)
 800919e:	49af      	ldr	r1, [pc, #700]	@ (800945c <PC_show_Keys+0x8e4>)
 80091a0:	489a      	ldr	r0, [pc, #616]	@ (800940c <PC_show_Keys+0x894>)
 80091a2:	2218      	movs	r2, #24
 80091a4:	f01d f9a4 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091a8:	4b9d      	ldr	r3, [pc, #628]	@ (8009420 <PC_show_Keys+0x8a8>)
 80091aa:	781a      	ldrb	r2, [r3, #0]
 80091ac:	4b97      	ldr	r3, [pc, #604]	@ (800940c <PC_show_Keys+0x894>)
 80091ae:	0011      	movs	r1, r2
 80091b0:	0018      	movs	r0, r3
 80091b2:	f7ff fcc6 	bl	8008b42 <PC_selectout>

#ifdef USE_MAIL
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 80091b6:	4baa      	ldr	r3, [pc, #680]	@ (8009460 <PC_show_Keys+0x8e8>)
 80091b8:	48aa      	ldr	r0, [pc, #680]	@ (8009464 <PC_show_Keys+0x8ec>)
 80091ba:	2230      	movs	r2, #48	@ 0x30
 80091bc:	0019      	movs	r1, r3
 80091be:	f003 f811 	bl	800c1e4 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored Send from name ---------: ", SendFromNameConfigCmd);
 80091c2:	49a9      	ldr	r1, [pc, #676]	@ (8009468 <PC_show_Keys+0x8f0>)
 80091c4:	4b91      	ldr	r3, [pc, #580]	@ (800940c <PC_show_Keys+0x894>)
 80091c6:	2219      	movs	r2, #25
 80091c8:	0018      	movs	r0, r3
 80091ca:	f01d f991 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091ce:	4b94      	ldr	r3, [pc, #592]	@ (8009420 <PC_show_Keys+0x8a8>)
 80091d0:	781a      	ldrb	r2, [r3, #0]
 80091d2:	4b8e      	ldr	r3, [pc, #568]	@ (800940c <PC_show_Keys+0x894>)
 80091d4:	0011      	movs	r1, r2
 80091d6:	0018      	movs	r0, r3
 80091d8:	f7ff fcb3 	bl	8008b42 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendFromnameConfig);  // probably too long to held in same buffer
 80091dc:	4aa0      	ldr	r2, [pc, #640]	@ (8009460 <PC_show_Keys+0x8e8>)
 80091de:	49a3      	ldr	r1, [pc, #652]	@ (800946c <PC_show_Keys+0x8f4>)
 80091e0:	4b8a      	ldr	r3, [pc, #552]	@ (800940c <PC_show_Keys+0x894>)
 80091e2:	0018      	movs	r0, r3
 80091e4:	f01d f984 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091e8:	4b8d      	ldr	r3, [pc, #564]	@ (8009420 <PC_show_Keys+0x8a8>)
 80091ea:	781a      	ldrb	r2, [r3, #0]
 80091ec:	4b87      	ldr	r3, [pc, #540]	@ (800940c <PC_show_Keys+0x894>)
 80091ee:	0011      	movs	r1, r2
 80091f0:	0018      	movs	r0, r3
 80091f2:	f7ff fca6 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 80091f6:	4b9e      	ldr	r3, [pc, #632]	@ (8009470 <PC_show_Keys+0x8f8>)
 80091f8:	489e      	ldr	r0, [pc, #632]	@ (8009474 <PC_show_Keys+0x8fc>)
 80091fa:	2230      	movs	r2, #48	@ 0x30
 80091fc:	0019      	movs	r1, r3
 80091fe:	f002 fff1 	bl	800c1e4 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored Send to name -----------: ", SendToNameConfigCmd);
 8009202:	499d      	ldr	r1, [pc, #628]	@ (8009478 <PC_show_Keys+0x900>)
 8009204:	4b81      	ldr	r3, [pc, #516]	@ (800940c <PC_show_Keys+0x894>)
 8009206:	221a      	movs	r2, #26
 8009208:	0018      	movs	r0, r3
 800920a:	f01d f971 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800920e:	4b84      	ldr	r3, [pc, #528]	@ (8009420 <PC_show_Keys+0x8a8>)
 8009210:	781a      	ldrb	r2, [r3, #0]
 8009212:	4b7e      	ldr	r3, [pc, #504]	@ (800940c <PC_show_Keys+0x894>)
 8009214:	0011      	movs	r1, r2
 8009216:	0018      	movs	r0, r3
 8009218:	f7ff fc93 	bl	8008b42 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendTonameConfig);  // probably too long to held in same buffer
 800921c:	4a94      	ldr	r2, [pc, #592]	@ (8009470 <PC_show_Keys+0x8f8>)
 800921e:	4993      	ldr	r1, [pc, #588]	@ (800946c <PC_show_Keys+0x8f4>)
 8009220:	4b7a      	ldr	r3, [pc, #488]	@ (800940c <PC_show_Keys+0x894>)
 8009222:	0018      	movs	r0, r3
 8009224:	f01d f964 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009228:	4b7d      	ldr	r3, [pc, #500]	@ (8009420 <PC_show_Keys+0x8a8>)
 800922a:	781a      	ldrb	r2, [r3, #0]
 800922c:	4b77      	ldr	r3, [pc, #476]	@ (800940c <PC_show_Keys+0x894>)
 800922e:	0011      	movs	r1, r2
 8009230:	0018      	movs	r0, r3
 8009232:	f7ff fc86 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 8009236:	4b91      	ldr	r3, [pc, #580]	@ (800947c <PC_show_Keys+0x904>)
 8009238:	4891      	ldr	r0, [pc, #580]	@ (8009480 <PC_show_Keys+0x908>)
 800923a:	2230      	movs	r2, #48	@ 0x30
 800923c:	0019      	movs	r1, r3
 800923e:	f002 ffd1 	bl	800c1e4 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored SMTP2go API key --------: ", MailAPIKeyConfigCmd);
 8009242:	4990      	ldr	r1, [pc, #576]	@ (8009484 <PC_show_Keys+0x90c>)
 8009244:	4b71      	ldr	r3, [pc, #452]	@ (800940c <PC_show_Keys+0x894>)
 8009246:	221b      	movs	r2, #27
 8009248:	0018      	movs	r0, r3
 800924a:	f01d f951 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800924e:	4b74      	ldr	r3, [pc, #464]	@ (8009420 <PC_show_Keys+0x8a8>)
 8009250:	781a      	ldrb	r2, [r3, #0]
 8009252:	4b6e      	ldr	r3, [pc, #440]	@ (800940c <PC_show_Keys+0x894>)
 8009254:	0011      	movs	r1, r2
 8009256:	0018      	movs	r0, r3
 8009258:	f7ff fc73 	bl	8008b42 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)MailAPIKeyConfig);  // probably too long to held in same buffer
 800925c:	4a87      	ldr	r2, [pc, #540]	@ (800947c <PC_show_Keys+0x904>)
 800925e:	4983      	ldr	r1, [pc, #524]	@ (800946c <PC_show_Keys+0x8f4>)
 8009260:	4b6a      	ldr	r3, [pc, #424]	@ (800940c <PC_show_Keys+0x894>)
 8009262:	0018      	movs	r0, r3
 8009264:	f01d f944 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009268:	4b6d      	ldr	r3, [pc, #436]	@ (8009420 <PC_show_Keys+0x8a8>)
 800926a:	781a      	ldrb	r2, [r3, #0]
 800926c:	4b67      	ldr	r3, [pc, #412]	@ (800940c <PC_show_Keys+0x894>)
 800926e:	0011      	movs	r1, r2
 8009270:	0018      	movs	r0, r3
 8009272:	f7ff fc66 	bl	8008b42 <PC_selectout>
#endif

  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 8009276:	4b84      	ldr	r3, [pc, #528]	@ (8009488 <PC_show_Keys+0x910>)
 8009278:	4884      	ldr	r0, [pc, #528]	@ (800948c <PC_show_Keys+0x914>)
 800927a:	220c      	movs	r2, #12
 800927c:	0019      	movs	r1, r3
 800927e:	f002 ffb1 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, hPaConfig);
 8009282:	4a81      	ldr	r2, [pc, #516]	@ (8009488 <PC_show_Keys+0x910>)
 8009284:	4b64      	ldr	r3, [pc, #400]	@ (8009418 <PC_show_Keys+0x8a0>)
 8009286:	0011      	movs	r1, r2
 8009288:	0018      	movs	r0, r3
 800928a:	f7fc f829 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - BMP280 Air pressure sensor id -: %s\r\n", hPaConfigCmd, Buffer);
 800928e:	4b62      	ldr	r3, [pc, #392]	@ (8009418 <PC_show_Keys+0x8a0>)
 8009290:	497f      	ldr	r1, [pc, #508]	@ (8009490 <PC_show_Keys+0x918>)
 8009292:	485e      	ldr	r0, [pc, #376]	@ (800940c <PC_show_Keys+0x894>)
 8009294:	221c      	movs	r2, #28
 8009296:	f01d f92b 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800929a:	4b61      	ldr	r3, [pc, #388]	@ (8009420 <PC_show_Keys+0x8a8>)
 800929c:	781a      	ldrb	r2, [r3, #0]
 800929e:	4b5b      	ldr	r3, [pc, #364]	@ (800940c <PC_show_Keys+0x894>)
 80092a0:	0011      	movs	r1, r2
 80092a2:	0018      	movs	r0, r3
 80092a4:	f7ff fc4d 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(UptimeConfigAddr, UptimeConfig, IdSize);
 80092a8:	4b7a      	ldr	r3, [pc, #488]	@ (8009494 <PC_show_Keys+0x91c>)
 80092aa:	487b      	ldr	r0, [pc, #492]	@ (8009498 <PC_show_Keys+0x920>)
 80092ac:	220c      	movs	r2, #12
 80092ae:	0019      	movs	r1, r3
 80092b0:	f002 ff98 	bl	800c1e4 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, UptimeConfig);
 80092b4:	4a77      	ldr	r2, [pc, #476]	@ (8009494 <PC_show_Keys+0x91c>)
 80092b6:	4b58      	ldr	r3, [pc, #352]	@ (8009418 <PC_show_Keys+0x8a0>)
 80092b8:	0011      	movs	r1, r2
 80092ba:	0018      	movs	r0, r3
 80092bc:	f7fc f810 	bl	80052e0 <uint8ArrayToString>
  sprintf(msg, "%02d - Uptime sensor id --------------: %s\r\n", UptimeConfigCmd, Buffer);
 80092c0:	4b55      	ldr	r3, [pc, #340]	@ (8009418 <PC_show_Keys+0x8a0>)
 80092c2:	4976      	ldr	r1, [pc, #472]	@ (800949c <PC_show_Keys+0x924>)
 80092c4:	4851      	ldr	r0, [pc, #324]	@ (800940c <PC_show_Keys+0x894>)
 80092c6:	221d      	movs	r2, #29
 80092c8:	f01d f912 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80092cc:	4b54      	ldr	r3, [pc, #336]	@ (8009420 <PC_show_Keys+0x8a8>)
 80092ce:	781a      	ldrb	r2, [r3, #0]
 80092d0:	4b4e      	ldr	r3, [pc, #312]	@ (800940c <PC_show_Keys+0x894>)
 80092d2:	0011      	movs	r1, r2
 80092d4:	0018      	movs	r0, r3
 80092d6:	f7ff fc34 	bl	8008b42 <PC_selectout>

  ReadUint8ArrayEEprom(URLToUploadConfigAddr, URLToUploadConfig, URLToUploadMaxLength);
 80092da:	4b71      	ldr	r3, [pc, #452]	@ (80094a0 <PC_show_Keys+0x928>)
 80092dc:	4871      	ldr	r0, [pc, #452]	@ (80094a4 <PC_show_Keys+0x92c>)
 80092de:	2230      	movs	r2, #48	@ 0x30
 80092e0:	0019      	movs	r1, r3
 80092e2:	f002 ff7f 	bl	800c1e4 <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - URL to upload -----------------: ", URLToUploadConfigCmd);
 80092e6:	4970      	ldr	r1, [pc, #448]	@ (80094a8 <PC_show_Keys+0x930>)
 80092e8:	4b48      	ldr	r3, [pc, #288]	@ (800940c <PC_show_Keys+0x894>)
 80092ea:	221e      	movs	r2, #30
 80092ec:	0018      	movs	r0, r3
 80092ee:	f01d f8ff 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80092f2:	4b4b      	ldr	r3, [pc, #300]	@ (8009420 <PC_show_Keys+0x8a8>)
 80092f4:	781a      	ldrb	r2, [r3, #0]
 80092f6:	4b45      	ldr	r3, [pc, #276]	@ (800940c <PC_show_Keys+0x894>)
 80092f8:	0011      	movs	r1, r2
 80092fa:	0018      	movs	r0, r3
 80092fc:	f7ff fc21 	bl	8008b42 <PC_selectout>
  if (strlen((char*)URLToUploadConfig) == 0) {
 8009300:	4b67      	ldr	r3, [pc, #412]	@ (80094a0 <PC_show_Keys+0x928>)
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d11b      	bne.n	8009340 <PC_show_Keys+0x7c8>
    sprintf(msg, "Undefined, defaulted to ");
 8009308:	4a68      	ldr	r2, [pc, #416]	@ (80094ac <PC_show_Keys+0x934>)
 800930a:	4b40      	ldr	r3, [pc, #256]	@ (800940c <PC_show_Keys+0x894>)
 800930c:	0011      	movs	r1, r2
 800930e:	0018      	movs	r0, r3
 8009310:	f01d f8ee 	bl	80264f0 <siprintf>
    PC_selectout(&msg[0], usb_out);
 8009314:	4b42      	ldr	r3, [pc, #264]	@ (8009420 <PC_show_Keys+0x8a8>)
 8009316:	781a      	ldrb	r2, [r3, #0]
 8009318:	4b3c      	ldr	r3, [pc, #240]	@ (800940c <PC_show_Keys+0x894>)
 800931a:	0011      	movs	r1, r2
 800931c:	0018      	movs	r0, r3
 800931e:	f7ff fc10 	bl	8008b42 <PC_selectout>
    PC_selectout((char*)API, usb_out);
 8009322:	4b3f      	ldr	r3, [pc, #252]	@ (8009420 <PC_show_Keys+0x8a8>)
 8009324:	781a      	ldrb	r2, [r3, #0]
 8009326:	4b62      	ldr	r3, [pc, #392]	@ (80094b0 <PC_show_Keys+0x938>)
 8009328:	0011      	movs	r1, r2
 800932a:	0018      	movs	r0, r3
 800932c:	f7ff fc09 	bl	8008b42 <PC_selectout>
    PC_selectout("\r\n\0", usb_out);
 8009330:	4b3b      	ldr	r3, [pc, #236]	@ (8009420 <PC_show_Keys+0x8a8>)
 8009332:	781a      	ldrb	r2, [r3, #0]
 8009334:	4b5f      	ldr	r3, [pc, #380]	@ (80094b4 <PC_show_Keys+0x93c>)
 8009336:	0011      	movs	r1, r2
 8009338:	0018      	movs	r0, r3
 800933a:	f7ff fc02 	bl	8008b42 <PC_selectout>
 800933e:	e00c      	b.n	800935a <PC_show_Keys+0x7e2>
  }
  else {
    sprintf(msg, "%s\r\n", (char*)URLToUploadConfig);  // probably too long to held in same buffer
 8009340:	4a57      	ldr	r2, [pc, #348]	@ (80094a0 <PC_show_Keys+0x928>)
 8009342:	494a      	ldr	r1, [pc, #296]	@ (800946c <PC_show_Keys+0x8f4>)
 8009344:	4b31      	ldr	r3, [pc, #196]	@ (800940c <PC_show_Keys+0x894>)
 8009346:	0018      	movs	r0, r3
 8009348:	f01d f8d2 	bl	80264f0 <siprintf>
    PC_selectout(&msg[0], usb_out);
 800934c:	4b34      	ldr	r3, [pc, #208]	@ (8009420 <PC_show_Keys+0x8a8>)
 800934e:	781a      	ldrb	r2, [r3, #0]
 8009350:	4b2e      	ldr	r3, [pc, #184]	@ (800940c <PC_show_Keys+0x894>)
 8009352:	0011      	movs	r1, r2
 8009354:	0018      	movs	r0, r3
 8009356:	f7ff fbf4 	bl	8008b42 <PC_selectout>
  }

  sprintf(msg, "%02d - Clear all definitions in EEPROM\r\n", clearDefsCmd);
 800935a:	4957      	ldr	r1, [pc, #348]	@ (80094b8 <PC_show_Keys+0x940>)
 800935c:	4b2b      	ldr	r3, [pc, #172]	@ (800940c <PC_show_Keys+0x894>)
 800935e:	221f      	movs	r2, #31
 8009360:	0018      	movs	r0, r3
 8009362:	f01d f8c5 	bl	80264f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009366:	4b2e      	ldr	r3, [pc, #184]	@ (8009420 <PC_show_Keys+0x8a8>)
 8009368:	781a      	ldrb	r2, [r3, #0]
 800936a:	4b28      	ldr	r3, [pc, #160]	@ (800940c <PC_show_Keys+0x894>)
 800936c:	0011      	movs	r1, r2
 800936e:	0018      	movs	r0, r3
 8009370:	f7ff fbe7 	bl	8008b42 <PC_selectout>

  printf_USB("\r\n!!NO LINE EDITING!!\r\n");
 8009374:	4b51      	ldr	r3, [pc, #324]	@ (80094bc <PC_show_Keys+0x944>)
 8009376:	0018      	movs	r0, r3
 8009378:	f7ff fbbe 	bl	8008af8 <printf_USB>
  HAL_Delay(10);
 800937c:	200a      	movs	r0, #10
 800937e:	f00b fb25 	bl	80149cc <HAL_Delay>
  printf_USB("If the key differs only the last two bytes,");
 8009382:	4b4f      	ldr	r3, [pc, #316]	@ (80094c0 <PC_show_Keys+0x948>)
 8009384:	0018      	movs	r0, r3
 8009386:	f7ff fbb7 	bl	8008af8 <printf_USB>
  HAL_Delay(10);
 800938a:	200a      	movs	r0, #10
 800938c:	f00b fb1e 	bl	80149cc <HAL_Delay>
  printf_USB(" command example for air pressure => #28,6a\r\n");
 8009390:	4b4c      	ldr	r3, [pc, #304]	@ (80094c4 <PC_show_Keys+0x94c>)
 8009392:	0018      	movs	r0, r3
 8009394:	f7ff fbb0 	bl	8008af8 <printf_USB>
  HAL_Delay(10);
 8009398:	200a      	movs	r0, #10
 800939a:	f00b fb17 	bl	80149cc <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 800939e:	4b4a      	ldr	r3, [pc, #296]	@ (80094c8 <PC_show_Keys+0x950>)
 80093a0:	0018      	movs	r0, r3
 80093a2:	f7ff fba9 	bl	8008af8 <printf_USB>
  HAL_Delay(10);
 80093a6:	200a      	movs	r0, #10
 80093a8:	f00b fb10 	bl	80149cc <HAL_Delay>
  printf_USB(" from opensensemap.org in your account to this input.\r\n");
 80093ac:	4b47      	ldr	r3, [pc, #284]	@ (80094cc <PC_show_Keys+0x954>)
 80093ae:	0018      	movs	r0, r3
 80093b0:	f7ff fba2 	bl	8008af8 <printf_USB>
  HAL_Delay(10);
 80093b4:	200a      	movs	r0, #10
 80093b6:	f00b fb09 	bl	80149cc <HAL_Delay>
  printf_USB("Command example for a full key for PM10 sensor =>");
 80093ba:	4b45      	ldr	r3, [pc, #276]	@ (80094d0 <PC_show_Keys+0x958>)
 80093bc:	0018      	movs	r0, r3
 80093be:	f7ff fb9b 	bl	8008af8 <printf_USB>
  HAL_Delay(10);
 80093c2:	200a      	movs	r0, #10
 80093c4:	f00b fb02 	bl	80149cc <HAL_Delay>
  printf_USB(" $08,67af09374cdef30007b35055\r\n");
 80093c8:	4b42      	ldr	r3, [pc, #264]	@ (80094d4 <PC_show_Keys+0x95c>)
 80093ca:	0018      	movs	r0, r3
 80093cc:	f7ff fb94 	bl	8008af8 <printf_USB>
  HAL_Delay(10);
 80093d0:	200a      	movs	r0, #10
 80093d2:	f00b fafb 	bl	80149cc <HAL_Delay>
  printf_USB("For changing string entries use prefix S, example: ");
 80093d6:	4b40      	ldr	r3, [pc, #256]	@ (80094d8 <PC_show_Keys+0x960>)
 80093d8:	0018      	movs	r0, r3
 80093da:	f7ff fb8d 	bl	8008af8 <printf_USB>
  HAL_Delay(10);
 80093de:	200a      	movs	r0, #10
 80093e0:	f00b faf4 	bl	80149cc <HAL_Delay>
  printf_USB("S12,Testsysteem (max 12 chars)\r\n");
 80093e4:	4b3d      	ldr	r3, [pc, #244]	@ (80094dc <PC_show_Keys+0x964>)
 80093e6:	0018      	movs	r0, r3
 80093e8:	f7ff fb86 	bl	8008af8 <printf_USB>
  HAL_Delay(10);
 80093ec:	200a      	movs	r0, #10
 80093ee:	f00b faed 	bl	80149cc <HAL_Delay>
  printf_USB("To clear a string: $30,000000000000000000000000\r\n");
 80093f2:	4b3b      	ldr	r3, [pc, #236]	@ (80094e0 <PC_show_Keys+0x968>)
 80093f4:	0018      	movs	r0, r3
 80093f6:	f7ff fb7f 	bl	8008af8 <printf_USB>
  HAL_Delay(10);
 80093fa:	200a      	movs	r0, #10
 80093fc:	f00b fae6 	bl	80149cc <HAL_Delay>
  printf_USB("L - toggle logging on/off, current: %s\r\n", usblog?"on":"off");
 8009400:	4b38      	ldr	r3, [pc, #224]	@ (80094e4 <PC_show_Keys+0x96c>)
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d071      	beq.n	80094ec <PC_show_Keys+0x974>
 8009408:	4b37      	ldr	r3, [pc, #220]	@ (80094e8 <PC_show_Keys+0x970>)
 800940a:	e070      	b.n	80094ee <PC_show_Keys+0x976>
 800940c:	20000b54 	.word	0x20000b54
 8009410:	20000cf8 	.word	0x20000cf8
 8009414:	080800f8 	.word	0x080800f8
 8009418:	20000ba8 	.word	0x20000ba8
 800941c:	0802ba08 	.word	0x0802ba08
 8009420:	20000b51 	.word	0x20000b51
 8009424:	20000d04 	.word	0x20000d04
 8009428:	08080104 	.word	0x08080104
 800942c:	0802ba38 	.word	0x0802ba38
 8009430:	20000d10 	.word	0x20000d10
 8009434:	080800b0 	.word	0x080800b0
 8009438:	0802ba68 	.word	0x0802ba68
 800943c:	20000d1c 	.word	0x20000d1c
 8009440:	080800bc 	.word	0x080800bc
 8009444:	0802ba98 	.word	0x0802ba98
 8009448:	20000d28 	.word	0x20000d28
 800944c:	08080170 	.word	0x08080170
 8009450:	0802bac8 	.word	0x0802bac8
 8009454:	20000d34 	.word	0x20000d34
 8009458:	0808017c 	.word	0x0808017c
 800945c:	0802baf8 	.word	0x0802baf8
 8009460:	20000d40 	.word	0x20000d40
 8009464:	08080260 	.word	0x08080260
 8009468:	0802bb28 	.word	0x0802bb28
 800946c:	0802b8e8 	.word	0x0802b8e8
 8009470:	20000d70 	.word	0x20000d70
 8009474:	08080290 	.word	0x08080290
 8009478:	0802bb54 	.word	0x0802bb54
 800947c:	20000da0 	.word	0x20000da0
 8009480:	080802c0 	.word	0x080802c0
 8009484:	0802bb80 	.word	0x0802bb80
 8009488:	20000dd0 	.word	0x20000dd0
 800948c:	08080188 	.word	0x08080188
 8009490:	0802bbac 	.word	0x0802bbac
 8009494:	20000ddc 	.word	0x20000ddc
 8009498:	080801a0 	.word	0x080801a0
 800949c:	0802bbdc 	.word	0x0802bbdc
 80094a0:	20000de8 	.word	0x20000de8
 80094a4:	08080110 	.word	0x08080110
 80094a8:	0802bc0c 	.word	0x0802bc0c
 80094ac:	0802bc38 	.word	0x0802bc38
 80094b0:	0802bc54 	.word	0x0802bc54
 80094b4:	0802bc78 	.word	0x0802bc78
 80094b8:	0802bc7c 	.word	0x0802bc7c
 80094bc:	0802bca8 	.word	0x0802bca8
 80094c0:	0802bcc0 	.word	0x0802bcc0
 80094c4:	0802bcec 	.word	0x0802bcec
 80094c8:	0802bd1c 	.word	0x0802bd1c
 80094cc:	0802bd58 	.word	0x0802bd58
 80094d0:	0802bd90 	.word	0x0802bd90
 80094d4:	0802bdc4 	.word	0x0802bdc4
 80094d8:	0802bde4 	.word	0x0802bde4
 80094dc:	0802be18 	.word	0x0802be18
 80094e0:	0802be3c 	.word	0x0802be3c
 80094e4:	200010f7 	.word	0x200010f7
 80094e8:	0802be70 	.word	0x0802be70
 80094ec:	4b12      	ldr	r3, [pc, #72]	@ (8009538 <PC_show_Keys+0x9c0>)
 80094ee:	4a13      	ldr	r2, [pc, #76]	@ (800953c <PC_show_Keys+0x9c4>)
 80094f0:	0019      	movs	r1, r3
 80094f2:	0010      	movs	r0, r2
 80094f4:	f7ff fb00 	bl	8008af8 <printf_USB>
  HAL_Delay(10);
 80094f8:	200a      	movs	r0, #10
 80094fa:	f00b fa67 	bl	80149cc <HAL_Delay>
  printf_USB("B - show build information\r\n");
 80094fe:	4b10      	ldr	r3, [pc, #64]	@ (8009540 <PC_show_Keys+0x9c8>)
 8009500:	0018      	movs	r0, r3
 8009502:	f7ff faf9 	bl	8008af8 <printf_USB>
  HAL_Delay(10);
 8009506:	200a      	movs	r0, #10
 8009508:	f00b fa60 	bl	80149cc <HAL_Delay>
  printf_USB("E31, - Erase configuration memory\r\n");
 800950c:	4b0d      	ldr	r3, [pc, #52]	@ (8009544 <PC_show_Keys+0x9cc>)
 800950e:	0018      	movs	r0, r3
 8009510:	f7ff faf2 	bl	8008af8 <printf_USB>
  HAL_Delay(10);
 8009514:	200a      	movs	r0, #10
 8009516:	f00b fa59 	bl	80149cc <HAL_Delay>
  if (!usb_out) {
 800951a:	4b0b      	ldr	r3, [pc, #44]	@ (8009548 <PC_show_Keys+0x9d0>)
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	2201      	movs	r2, #1
 8009520:	4053      	eors	r3, r2
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b00      	cmp	r3, #0
 8009526:	d003      	beq.n	8009530 <PC_show_Keys+0x9b8>
    printf("A sensor key can only be changed by USB input or the by configuration programm.\r\n");
 8009528:	4b08      	ldr	r3, [pc, #32]	@ (800954c <PC_show_Keys+0x9d4>)
 800952a:	0018      	movs	r0, r3
 800952c:	f01c ffd6 	bl	80264dc <puts>
  }
}
 8009530:	46c0      	nop			@ (mov r8, r8)
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	46c0      	nop			@ (mov r8, r8)
 8009538:	0802be74 	.word	0x0802be74
 800953c:	0802be78 	.word	0x0802be78
 8009540:	0802bea4 	.word	0x0802bea4
 8009544:	0802bec4 	.word	0x0802bec4
 8009548:	20000b51 	.word	0x20000b51
 800954c:	0802bee8 	.word	0x0802bee8

08009550 <ascii_to_uint8>:

uint8_t ascii_to_uint8(uint8_t *inchar) {
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  if (!isdigit(inchar[0]) || !isdigit(inchar[1])) {
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	1c5a      	adds	r2, r3, #1
 800955e:	4b20      	ldr	r3, [pc, #128]	@ (80095e0 <ascii_to_uint8+0x90>)
 8009560:	18d3      	adds	r3, r2, r3
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	001a      	movs	r2, r3
 8009566:	2304      	movs	r3, #4
 8009568:	4013      	ands	r3, r2
 800956a:	d00a      	beq.n	8009582 <ascii_to_uint8+0x32>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	3301      	adds	r3, #1
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	1c5a      	adds	r2, r3, #1
 8009574:	4b1a      	ldr	r3, [pc, #104]	@ (80095e0 <ascii_to_uint8+0x90>)
 8009576:	18d3      	adds	r3, r2, r3
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	001a      	movs	r2, r3
 800957c:	2304      	movs	r3, #4
 800957e:	4013      	ands	r3, r2
 8009580:	d105      	bne.n	800958e <ascii_to_uint8+0x3e>
    printf_USB("Error: two decimal numbers expected\r\n");
 8009582:	4b18      	ldr	r3, [pc, #96]	@ (80095e4 <ascii_to_uint8+0x94>)
 8009584:	0018      	movs	r0, r3
 8009586:	f7ff fab7 	bl	8008af8 <printf_USB>
    return 100;
 800958a:	2364      	movs	r3, #100	@ 0x64
 800958c:	e024      	b.n	80095d8 <ascii_to_uint8+0x88>
  }
  uint8_t value = (inchar[0] - '0') * 10 + (inchar[1] - '0');
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	1c1a      	adds	r2, r3, #0
 8009594:	0092      	lsls	r2, r2, #2
 8009596:	18d3      	adds	r3, r2, r3
 8009598:	18db      	adds	r3, r3, r3
 800959a:	b2da      	uxtb	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	3301      	adds	r3, #1
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	18d3      	adds	r3, r2, r3
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	210f      	movs	r1, #15
 80095a8:	187b      	adds	r3, r7, r1
 80095aa:	3a10      	subs	r2, #16
 80095ac:	701a      	strb	r2, [r3, #0]

  if (value >= maxCmd) {
 80095ae:	187b      	adds	r3, r7, r1
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	2b1f      	cmp	r3, #31
 80095b4:	d905      	bls.n	80095c2 <ascii_to_uint8+0x72>
    printf_USB("Error: value out of range\r\n");
 80095b6:	4b0c      	ldr	r3, [pc, #48]	@ (80095e8 <ascii_to_uint8+0x98>)
 80095b8:	0018      	movs	r0, r3
 80095ba:	f7ff fa9d 	bl	8008af8 <printf_USB>
    return 100;
 80095be:	2364      	movs	r3, #100	@ 0x64
 80095c0:	e00a      	b.n	80095d8 <ascii_to_uint8+0x88>
  }
  if (value == clearDefsCmd) {
 80095c2:	220f      	movs	r2, #15
 80095c4:	18bb      	adds	r3, r7, r2
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	2b1f      	cmp	r3, #31
 80095ca:	d102      	bne.n	80095d2 <ascii_to_uint8+0x82>
    value = ClearConfigCmd;
 80095cc:	18bb      	adds	r3, r7, r2
 80095ce:	22fd      	movs	r2, #253	@ 0xfd
 80095d0:	701a      	strb	r2, [r3, #0]
  }
  return (uint8_t)value;
 80095d2:	230f      	movs	r3, #15
 80095d4:	18fb      	adds	r3, r7, r3
 80095d6:	781b      	ldrb	r3, [r3, #0]
}
 80095d8:	0018      	movs	r0, r3
 80095da:	46bd      	mov	sp, r7
 80095dc:	b004      	add	sp, #16
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	0802f030 	.word	0x0802f030
 80095e4:	0802bf3c 	.word	0x0802bf3c
 80095e8:	0802bf64 	.word	0x0802bf64

080095ec <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 80095ec:	b590      	push	{r4, r7, lr}
 80095ee:	b0d9      	sub	sp, #356	@ 0x164
 80095f0:	af3e      	add	r7, sp, #248	@ 0xf8
 80095f2:	6078      	str	r0, [r7, #4]
  uint8_t boxConfig[IdSize];
  static uint32_t len = 6;
  uint32_t length = GetUsbRxDataSize();
 80095f4:	f019 febe 	bl	8023374 <GetUsbRxDataSize>
 80095f8:	0003      	movs	r3, r0
 80095fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint8_t r = 0;
 80095fc:	2367      	movs	r3, #103	@ 0x67
 80095fe:	18fb      	adds	r3, r7, r3
 8009600:	2200      	movs	r2, #0
 8009602:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0;
 8009604:	2366      	movs	r3, #102	@ 0x66
 8009606:	18fb      	adds	r3, r7, r3
 8009608:	2200      	movs	r2, #0
 800960a:	701a      	strb	r2, [r3, #0]
  char Buffer[pwdMaxLength];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2124      	movs	r1, #36	@ 0x24
 8009610:	0018      	movs	r0, r3
 8009612:	f01d f8bd 	bl	8026790 <strchr>
 8009616:	0003      	movs	r3, r0
 8009618:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL) && (len != 28)){
 800961a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800961c:	2b01      	cmp	r3, #1
 800961e:	d110      	bne.n	8009642 <Process_USB_input+0x56>
 8009620:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00d      	beq.n	8009642 <Process_USB_input+0x56>
 8009626:	4bd5      	ldr	r3, [pc, #852]	@ (800997c <Process_USB_input+0x390>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b1c      	cmp	r3, #28
 800962c:	d009      	beq.n	8009642 <Process_USB_input+0x56>
      len = 28;
 800962e:	4bd3      	ldr	r3, [pc, #844]	@ (800997c <Process_USB_input+0x390>)
 8009630:	221c      	movs	r2, #28
 8009632:	601a      	str	r2, [r3, #0]
      printf_USB("len = %d\r\n", len);
 8009634:	4bd1      	ldr	r3, [pc, #836]	@ (800997c <Process_USB_input+0x390>)
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	4bd1      	ldr	r3, [pc, #836]	@ (8009980 <Process_USB_input+0x394>)
 800963a:	0011      	movs	r1, r2
 800963c:	0018      	movs	r0, r3
 800963e:	f7ff fa5b 	bl	8008af8 <printf_USB>
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_S);  // zoek op S
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2153      	movs	r1, #83	@ 0x53
 8009646:	0018      	movs	r0, r3
 8009648:	f01d f8a2 	bl	8026790 <strchr>
 800964c:	0003      	movs	r3, r0
 800964e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL) && (len != pwdMaxLength)){
 8009650:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009652:	2b01      	cmp	r3, #1
 8009654:	d110      	bne.n	8009678 <Process_USB_input+0x8c>
 8009656:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00d      	beq.n	8009678 <Process_USB_input+0x8c>
 800965c:	4bc7      	ldr	r3, [pc, #796]	@ (800997c <Process_USB_input+0x390>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2b40      	cmp	r3, #64	@ 0x40
 8009662:	d009      	beq.n	8009678 <Process_USB_input+0x8c>
      len = pwdMaxLength;
 8009664:	4bc5      	ldr	r3, [pc, #788]	@ (800997c <Process_USB_input+0x390>)
 8009666:	2240      	movs	r2, #64	@ 0x40
 8009668:	601a      	str	r2, [r3, #0]
      printf_USB("len = %d\r\n", len);
 800966a:	4bc4      	ldr	r3, [pc, #784]	@ (800997c <Process_USB_input+0x390>)
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	4bc4      	ldr	r3, [pc, #784]	@ (8009980 <Process_USB_input+0x394>)
 8009670:	0011      	movs	r1, r2
 8009672:	0018      	movs	r0, r3
 8009674:	f7ff fa40 	bl	8008af8 <printf_USB>
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_L);  // Search for 'L'to toggle USB logging
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	214c      	movs	r1, #76	@ 0x4c
 800967c:	0018      	movs	r0, r3
 800967e:	f01d f887 	bl	8026790 <strchr>
 8009682:	0003      	movs	r3, r0
 8009684:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL)){
 8009686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009688:	2b01      	cmp	r3, #1
 800968a:	d131      	bne.n	80096f0 <Process_USB_input+0x104>
 800968c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800968e:	2b00      	cmp	r3, #0
 8009690:	d02e      	beq.n	80096f0 <Process_USB_input+0x104>
    usblog = !usblog; // log info to usb too
 8009692:	4bbc      	ldr	r3, [pc, #752]	@ (8009984 <Process_USB_input+0x398>)
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	1e5a      	subs	r2, r3, #1
 8009698:	4193      	sbcs	r3, r2
 800969a:	b2db      	uxtb	r3, r3
 800969c:	2201      	movs	r2, #1
 800969e:	4053      	eors	r3, r2
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	1c1a      	adds	r2, r3, #0
 80096a4:	2301      	movs	r3, #1
 80096a6:	4013      	ands	r3, r2
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	4bb6      	ldr	r3, [pc, #728]	@ (8009984 <Process_USB_input+0x398>)
 80096ac:	701a      	strb	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 80096ae:	f00c f98f 	bl	80159d0 <HAL_FLASHEx_DATAEEPROM_Unlock>
    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, USBlogstatusConfigAddr, usblog);
 80096b2:	4bb4      	ldr	r3, [pc, #720]	@ (8009984 <Process_USB_input+0x398>)
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	001a      	movs	r2, r3
 80096b8:	4bb3      	ldr	r3, [pc, #716]	@ (8009988 <Process_USB_input+0x39c>)
 80096ba:	0019      	movs	r1, r3
 80096bc:	2000      	movs	r0, #0
 80096be:	f00c f9ef 	bl	8015aa0 <HAL_FLASHEx_DATAEEPROM_Program>
    HAL_FLASHEx_DATAEEPROM_Lock();
 80096c2:	f00c f9b3 	bl	8015a2c <HAL_FLASHEx_DATAEEPROM_Lock>
    printf_USB("\r\nSwitching USB logging to %s\r\n", usblog?"on":"off");
 80096c6:	4baf      	ldr	r3, [pc, #700]	@ (8009984 <Process_USB_input+0x398>)
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <Process_USB_input+0xe6>
 80096ce:	4baf      	ldr	r3, [pc, #700]	@ (800998c <Process_USB_input+0x3a0>)
 80096d0:	e000      	b.n	80096d4 <Process_USB_input+0xe8>
 80096d2:	4baf      	ldr	r3, [pc, #700]	@ (8009990 <Process_USB_input+0x3a4>)
 80096d4:	4aaf      	ldr	r2, [pc, #700]	@ (8009994 <Process_USB_input+0x3a8>)
 80096d6:	0019      	movs	r1, r3
 80096d8:	0010      	movs	r0, r2
 80096da:	f7ff fa0d 	bl	8008af8 <printf_USB>
    length = 0;
 80096de:	2300      	movs	r3, #0
 80096e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    data[0] = '\0';
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	701a      	strb	r2, [r3, #0]
    ResetUsbRxDataSize();
 80096e8:	f019 fe2c 	bl	8023344 <ResetUsbRxDataSize>
    return true;
 80096ec:	2301      	movs	r3, #1
 80096ee:	e230      	b.n	8009b52 <Process_USB_input+0x566>
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_B);  // Search for 'B'to show the build
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2142      	movs	r1, #66	@ 0x42
 80096f4:	0018      	movs	r0, r3
 80096f6:	f01d f84b 	bl	8026790 <strchr>
 80096fa:	0003      	movs	r3, r0
 80096fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if ((length == 1) && (message != NULL)){
 80096fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009700:	2b01      	cmp	r3, #1
 8009702:	d10f      	bne.n	8009724 <Process_USB_input+0x138>
 8009704:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00c      	beq.n	8009724 <Process_USB_input+0x138>
    BinaryReleaseInfo();
 800970a:	f00a fc69 	bl	8013fe0 <BinaryReleaseInfo>
    showUpTime();
 800970e:	f000 fbb7 	bl	8009e80 <showUpTime>
    length = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	65fb      	str	r3, [r7, #92]	@ 0x5c
    data[0] = '\0';
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	701a      	strb	r2, [r3, #0]
    ResetUsbRxDataSize();
 800971c:	f019 fe12 	bl	8023344 <ResetUsbRxDataSize>
    return true;
 8009720:	2301      	movs	r3, #1
 8009722:	e216      	b.n	8009b52 <Process_USB_input+0x566>
  }
  if ((length >= len) || (data[length-1] == 13)) {
 8009724:	4b95      	ldr	r3, [pc, #596]	@ (800997c <Process_USB_input+0x390>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800972a:	429a      	cmp	r2, r3
 800972c:	d207      	bcs.n	800973e <Process_USB_input+0x152>
 800972e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009730:	3b01      	subs	r3, #1
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	18d3      	adds	r3, r2, r3
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	2b0d      	cmp	r3, #13
 800973a:	d000      	beq.n	800973e <Process_USB_input+0x152>
 800973c:	e1f6      	b.n	8009b2c <Process_USB_input+0x540>
    // 'S' is for entering a ASCII string
    if (data[length-1] == 13) {
 800973e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009740:	3b01      	subs	r3, #1
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	18d3      	adds	r3, r2, r3
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	2b0d      	cmp	r3, #13
 800974a:	d109      	bne.n	8009760 <Process_USB_input+0x174>
      printf_USB("Inputstring detected, string terminated\r\n");
 800974c:	4b92      	ldr	r3, [pc, #584]	@ (8009998 <Process_USB_input+0x3ac>)
 800974e:	0018      	movs	r0, r3
 8009750:	f7ff f9d2 	bl	8008af8 <printf_USB>
      data[length-1] = 0;
 8009754:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009756:	3b01      	subs	r3, #1
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	18d3      	adds	r3, r2, r3
 800975c:	2200      	movs	r2, #0
 800975e:	701a      	strb	r2, [r3, #0]
    }
    if((data[0] == '#') || (data[0] == '$') || (data[0] == 'S') || (data[0] == 'E')) {
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	2b23      	cmp	r3, #35	@ 0x23
 8009766:	d00c      	beq.n	8009782 <Process_USB_input+0x196>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	2b24      	cmp	r3, #36	@ 0x24
 800976e:	d008      	beq.n	8009782 <Process_USB_input+0x196>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	2b53      	cmp	r3, #83	@ 0x53
 8009776:	d004      	beq.n	8009782 <Process_USB_input+0x196>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	2b45      	cmp	r3, #69	@ 0x45
 800977e:	d000      	beq.n	8009782 <Process_USB_input+0x196>
 8009780:	e1b6      	b.n	8009af0 <Process_USB_input+0x504>
      received.Command = ascii_to_uint8(&data[1]);  // calculate the command number
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	3301      	adds	r3, #1
 8009786:	0018      	movs	r0, r3
 8009788:	f7ff fee2 	bl	8009550 <ascii_to_uint8>
 800978c:	0003      	movs	r3, r0
 800978e:	001a      	movs	r2, r3
 8009790:	4b82      	ldr	r3, [pc, #520]	@ (800999c <Process_USB_input+0x3b0>)
 8009792:	701a      	strb	r2, [r3, #0]
      printf_USB("\r\nCommand nr determined: %d \r\n", received.Command);
 8009794:	4b81      	ldr	r3, [pc, #516]	@ (800999c <Process_USB_input+0x3b0>)
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	001a      	movs	r2, r3
 800979a:	4b81      	ldr	r3, [pc, #516]	@ (80099a0 <Process_USB_input+0x3b4>)
 800979c:	0011      	movs	r1, r2
 800979e:	0018      	movs	r0, r3
 80097a0:	f7ff f9aa 	bl	8008af8 <printf_USB>
      if (received.Command == 100) {
 80097a4:	4b7d      	ldr	r3, [pc, #500]	@ (800999c <Process_USB_input+0x3b0>)
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	2b64      	cmp	r3, #100	@ 0x64
 80097aa:	d11f      	bne.n	80097ec <Process_USB_input+0x200>
        printf_USB("\r\nCommandvalue out of range.\r\n");
 80097ac:	4b7d      	ldr	r3, [pc, #500]	@ (80099a4 <Process_USB_input+0x3b8>)
 80097ae:	0018      	movs	r0, r3
 80097b0:	f7ff f9a2 	bl	8008af8 <printf_USB>
        ResetUsbRxDataSize();
 80097b4:	f019 fdc6 	bl	8023344 <ResetUsbRxDataSize>
        PC_show_Keys();
 80097b8:	f7ff f9de 	bl	8008b78 <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 80097bc:	2365      	movs	r3, #101	@ 0x65
 80097be:	18fb      	adds	r3, r7, r3
 80097c0:	2200      	movs	r2, #0
 80097c2:	701a      	strb	r2, [r3, #0]
 80097c4:	e00b      	b.n	80097de <Process_USB_input+0x1f2>
          data[i] = '\0';
 80097c6:	2165      	movs	r1, #101	@ 0x65
 80097c8:	187b      	adds	r3, r7, r1
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	18d3      	adds	r3, r2, r3
 80097d0:	2200      	movs	r2, #0
 80097d2:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 80097d4:	187b      	adds	r3, r7, r1
 80097d6:	781a      	ldrb	r2, [r3, #0]
 80097d8:	187b      	adds	r3, r7, r1
 80097da:	3201      	adds	r2, #1
 80097dc:	701a      	strb	r2, [r3, #0]
 80097de:	2365      	movs	r3, #101	@ 0x65
 80097e0:	18fb      	adds	r3, r7, r3
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	2b1f      	cmp	r3, #31
 80097e6:	d9ee      	bls.n	80097c6 <Process_USB_input+0x1da>
        }
        return false; // value out of range
 80097e8:	2300      	movs	r3, #0
 80097ea:	e1b2      	b.n	8009b52 <Process_USB_input+0x566>
      }
      if (data[3] == ',') {
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	3303      	adds	r3, #3
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	2b2c      	cmp	r3, #44	@ 0x2c
 80097f4:	d000      	beq.n	80097f8 <Process_USB_input+0x20c>
 80097f6:	e177      	b.n	8009ae8 <Process_USB_input+0x4fc>
        if ((data[0] == 'S') || (data[0] == 'E')) {
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	2b53      	cmp	r3, #83	@ 0x53
 80097fe:	d003      	beq.n	8009808 <Process_USB_input+0x21c>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	2b45      	cmp	r3, #69	@ 0x45
 8009806:	d10e      	bne.n	8009826 <Process_USB_input+0x23a>
          if ((data[0] == 'E') && (received.Command == clearDefsCmd)) {
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	2b45      	cmp	r3, #69	@ 0x45
 800980e:	d10a      	bne.n	8009826 <Process_USB_input+0x23a>
 8009810:	4b62      	ldr	r3, [pc, #392]	@ (800999c <Process_USB_input+0x3b0>)
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	2b1f      	cmp	r3, #31
 8009816:	d106      	bne.n	8009826 <Process_USB_input+0x23a>
            printf_USB("\r\nClear EEPROM request\r\n");
 8009818:	4b63      	ldr	r3, [pc, #396]	@ (80099a8 <Process_USB_input+0x3bc>)
 800981a:	0018      	movs	r0, r3
 800981c:	f7ff f96c 	bl	8008af8 <printf_USB>
            received.Command = ClearConfigCmd;
 8009820:	4b5e      	ldr	r3, [pc, #376]	@ (800999c <Process_USB_input+0x3b0>)
 8009822:	22fd      	movs	r2, #253	@ 0xfd
 8009824:	701a      	strb	r2, [r3, #0]
          }
        }
        if ((data[0] == '$') || (data[0] == '#')) {
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	2b24      	cmp	r3, #36	@ 0x24
 800982c:	d004      	beq.n	8009838 <Process_USB_input+0x24c>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	2b23      	cmp	r3, #35	@ 0x23
 8009834:	d000      	beq.n	8009838 <Process_USB_input+0x24c>
 8009836:	e0cf      	b.n	80099d8 <Process_USB_input+0x3ec>
          for (i=4; i < len; i++) {
 8009838:	2366      	movs	r3, #102	@ 0x66
 800983a:	18fb      	adds	r3, r7, r3
 800983c:	2204      	movs	r2, #4
 800983e:	701a      	strb	r2, [r3, #0]
 8009840:	e0c2      	b.n	80099c8 <Process_USB_input+0x3dc>
            HAL_Delay(10);
 8009842:	200a      	movs	r0, #10
 8009844:	f00b f8c2 	bl	80149cc <HAL_Delay>
            if (isxdigit(data[i])) {
 8009848:	2166      	movs	r1, #102	@ 0x66
 800984a:	187b      	adds	r3, r7, r1
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	18d3      	adds	r3, r2, r3
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	1c5a      	adds	r2, r3, #1
 8009856:	4b55      	ldr	r3, [pc, #340]	@ (80099ac <Process_USB_input+0x3c0>)
 8009858:	18d3      	adds	r3, r2, r3
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	001a      	movs	r2, r3
 800985e:	2344      	movs	r3, #68	@ 0x44
 8009860:	4013      	ands	r3, r2
 8009862:	d068      	beq.n	8009936 <Process_USB_input+0x34a>
              result = (result << 4) | (isdigit(data[i]) ? data[i] - '0' : toupper(data[i]) - 'A' + 10);
 8009864:	4b52      	ldr	r3, [pc, #328]	@ (80099b0 <Process_USB_input+0x3c4>)
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	b25b      	sxtb	r3, r3
 800986a:	011b      	lsls	r3, r3, #4
 800986c:	b25a      	sxtb	r2, r3
 800986e:	0008      	movs	r0, r1
 8009870:	187b      	adds	r3, r7, r1
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	6879      	ldr	r1, [r7, #4]
 8009876:	18cb      	adds	r3, r1, r3
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	1c59      	adds	r1, r3, #1
 800987c:	4b4b      	ldr	r3, [pc, #300]	@ (80099ac <Process_USB_input+0x3c0>)
 800987e:	18cb      	adds	r3, r1, r3
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	0019      	movs	r1, r3
 8009884:	2304      	movs	r3, #4
 8009886:	400b      	ands	r3, r1
 8009888:	d008      	beq.n	800989c <Process_USB_input+0x2b0>
 800988a:	183b      	adds	r3, r7, r0
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	6879      	ldr	r1, [r7, #4]
 8009890:	18cb      	adds	r3, r1, r3
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	3b30      	subs	r3, #48	@ 0x30
 8009896:	b2db      	uxtb	r3, r3
 8009898:	b25b      	sxtb	r3, r3
 800989a:	e01e      	b.n	80098da <Process_USB_input+0x2ee>
 800989c:	2366      	movs	r3, #102	@ 0x66
 800989e:	18fb      	adds	r3, r7, r3
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	6879      	ldr	r1, [r7, #4]
 80098a4:	18c9      	adds	r1, r1, r3
 80098a6:	2056      	movs	r0, #86	@ 0x56
 80098a8:	183b      	adds	r3, r7, r0
 80098aa:	7809      	ldrb	r1, [r1, #0]
 80098ac:	7019      	strb	r1, [r3, #0]
 80098ae:	183b      	adds	r3, r7, r0
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	1c59      	adds	r1, r3, #1
 80098b4:	4b3d      	ldr	r3, [pc, #244]	@ (80099ac <Process_USB_input+0x3c0>)
 80098b6:	18cb      	adds	r3, r1, r3
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	0019      	movs	r1, r3
 80098bc:	2303      	movs	r3, #3
 80098be:	400b      	ands	r3, r1
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d103      	bne.n	80098cc <Process_USB_input+0x2e0>
 80098c4:	183b      	adds	r3, r7, r0
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	3b20      	subs	r3, #32
 80098ca:	e002      	b.n	80098d2 <Process_USB_input+0x2e6>
 80098cc:	2356      	movs	r3, #86	@ 0x56
 80098ce:	18fb      	adds	r3, r7, r3
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	3b37      	subs	r3, #55	@ 0x37
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	b25b      	sxtb	r3, r3
 80098da:	4313      	orrs	r3, r2
 80098dc:	b25b      	sxtb	r3, r3
 80098de:	b2da      	uxtb	r2, r3
 80098e0:	4b33      	ldr	r3, [pc, #204]	@ (80099b0 <Process_USB_input+0x3c4>)
 80098e2:	701a      	strb	r2, [r3, #0]
//              printf_USB("Result is 0x%02X\r\n", result);
              HAL_Delay(10);
 80098e4:	200a      	movs	r0, #10
 80098e6:	f00b f871 	bl	80149cc <HAL_Delay>
              if (len == 28) {
 80098ea:	4b24      	ldr	r3, [pc, #144]	@ (800997c <Process_USB_input+0x390>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b1c      	cmp	r3, #28
 80098f0:	d164      	bne.n	80099bc <Process_USB_input+0x3d0>
                if ((i % 2) == 1) {
 80098f2:	2366      	movs	r3, #102	@ 0x66
 80098f4:	18fb      	adds	r3, r7, r3
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	2201      	movs	r2, #1
 80098fa:	4013      	ands	r3, r2
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d05c      	beq.n	80099bc <Process_USB_input+0x3d0>
                  data[r] = result;
 8009902:	2467      	movs	r4, #103	@ 0x67
 8009904:	193b      	adds	r3, r7, r4
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	18d3      	adds	r3, r2, r3
 800990c:	4a28      	ldr	r2, [pc, #160]	@ (80099b0 <Process_USB_input+0x3c4>)
 800990e:	7812      	ldrb	r2, [r2, #0]
 8009910:	701a      	strb	r2, [r3, #0]
                  printf_USB("data[%d] = 0x%02X\r\n",r, data[r]);
 8009912:	193b      	adds	r3, r7, r4
 8009914:	7819      	ldrb	r1, [r3, #0]
 8009916:	193b      	adds	r3, r7, r4
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	18d3      	adds	r3, r2, r3
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	001a      	movs	r2, r3
 8009922:	4b24      	ldr	r3, [pc, #144]	@ (80099b4 <Process_USB_input+0x3c8>)
 8009924:	0018      	movs	r0, r3
 8009926:	f7ff f8e7 	bl	8008af8 <printf_USB>
                  r++;
 800992a:	193b      	adds	r3, r7, r4
 800992c:	781a      	ldrb	r2, [r3, #0]
 800992e:	193b      	adds	r3, r7, r4
 8009930:	3201      	adds	r2, #1
 8009932:	701a      	strb	r2, [r3, #0]
 8009934:	e042      	b.n	80099bc <Process_USB_input+0x3d0>
                }
              }
            }
            else {
              printf_USB("\r\nInvalid hexadecimal character: '%c at position %d\r\n", data[i], i);
 8009936:	2066      	movs	r0, #102	@ 0x66
 8009938:	183b      	adds	r3, r7, r0
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	18d3      	adds	r3, r2, r3
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	0019      	movs	r1, r3
 8009944:	183b      	adds	r3, r7, r0
 8009946:	781a      	ldrb	r2, [r3, #0]
 8009948:	4b1b      	ldr	r3, [pc, #108]	@ (80099b8 <Process_USB_input+0x3cc>)
 800994a:	0018      	movs	r0, r3
 800994c:	f7ff f8d4 	bl	8008af8 <printf_USB>
              ResetUsbRxDataSize();
 8009950:	f019 fcf8 	bl	8023344 <ResetUsbRxDataSize>
              PC_show_Keys();
 8009954:	f7ff f910 	bl	8008b78 <PC_show_Keys>
              for (uint8_t i=0; i < length; i++) {
 8009958:	2157      	movs	r1, #87	@ 0x57
 800995a:	187b      	adds	r3, r7, r1
 800995c:	2200      	movs	r2, #0
 800995e:	701a      	strb	r2, [r3, #0]
 8009960:	46c0      	nop			@ (mov r8, r8)
 8009962:	187b      	adds	r3, r7, r1
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009968:	429a      	cmp	r2, r3
 800996a:	d927      	bls.n	80099bc <Process_USB_input+0x3d0>
                data[i] = '\0';
 800996c:	187b      	adds	r3, r7, r1
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	18d3      	adds	r3, r2, r3
 8009974:	2200      	movs	r2, #0
 8009976:	701a      	strb	r2, [r3, #0]
                return false; // Of een andere foutwaarde
 8009978:	2300      	movs	r3, #0
 800997a:	e0ea      	b.n	8009b52 <Process_USB_input+0x566>
 800997c:	20000038 	.word	0x20000038
 8009980:	0802bf80 	.word	0x0802bf80
 8009984:	200010f7 	.word	0x200010f7
 8009988:	08080194 	.word	0x08080194
 800998c:	0802be70 	.word	0x0802be70
 8009990:	0802be74 	.word	0x0802be74
 8009994:	0802bf8c 	.word	0x0802bf8c
 8009998:	0802bfac 	.word	0x0802bfac
 800999c:	20000940 	.word	0x20000940
 80099a0:	0802bfd8 	.word	0x0802bfd8
 80099a4:	0802bff8 	.word	0x0802bff8
 80099a8:	0802c018 	.word	0x0802c018
 80099ac:	0802f030 	.word	0x0802f030
 80099b0:	20000a44 	.word	0x20000a44
 80099b4:	0802c034 	.word	0x0802c034
 80099b8:	0802c048 	.word	0x0802c048
          for (i=4; i < len; i++) {
 80099bc:	2166      	movs	r1, #102	@ 0x66
 80099be:	187b      	adds	r3, r7, r1
 80099c0:	781a      	ldrb	r2, [r3, #0]
 80099c2:	187b      	adds	r3, r7, r1
 80099c4:	3201      	adds	r2, #1
 80099c6:	701a      	strb	r2, [r3, #0]
 80099c8:	2366      	movs	r3, #102	@ 0x66
 80099ca:	18fb      	adds	r3, r7, r3
 80099cc:	781a      	ldrb	r2, [r3, #0]
 80099ce:	4b63      	ldr	r3, [pc, #396]	@ (8009b5c <Process_USB_input+0x570>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d200      	bcs.n	80099d8 <Process_USB_input+0x3ec>
 80099d6:	e734      	b.n	8009842 <Process_USB_input+0x256>
              }
            }
          }  // end for
//          printf_USB("\r\n");
        }
        if (len < pwdMaxLength) {
 80099d8:	4b60      	ldr	r3, [pc, #384]	@ (8009b5c <Process_USB_input+0x570>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80099de:	d82c      	bhi.n	8009a3a <Process_USB_input+0x44e>
          if (len == 6) {
 80099e0:	4b5e      	ldr	r3, [pc, #376]	@ (8009b5c <Process_USB_input+0x570>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b06      	cmp	r3, #6
 80099e6:	d11b      	bne.n	8009a20 <Process_USB_input+0x434>
            printf_USB("len = %, overwriting last byte\r\n", len);
 80099e8:	4b5c      	ldr	r3, [pc, #368]	@ (8009b5c <Process_USB_input+0x570>)
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	4b5c      	ldr	r3, [pc, #368]	@ (8009b60 <Process_USB_input+0x574>)
 80099ee:	0011      	movs	r1, r2
 80099f0:	0018      	movs	r0, r3
 80099f2:	f7ff f881 	bl	8008af8 <printf_USB>
            ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80099f6:	2448      	movs	r4, #72	@ 0x48
 80099f8:	193b      	adds	r3, r7, r4
 80099fa:	485a      	ldr	r0, [pc, #360]	@ (8009b64 <Process_USB_input+0x578>)
 80099fc:	220c      	movs	r2, #12
 80099fe:	0019      	movs	r1, r3
 8009a00:	f002 fbf0 	bl	800c1e4 <ReadUint8ArrayEEprom>
            boxConfig[11] = result; //overwrite the last byte of the key
 8009a04:	4b58      	ldr	r3, [pc, #352]	@ (8009b68 <Process_USB_input+0x57c>)
 8009a06:	781a      	ldrb	r2, [r3, #0]
 8009a08:	0021      	movs	r1, r4
 8009a0a:	187b      	adds	r3, r7, r1
 8009a0c:	72da      	strb	r2, [r3, #11]
            memcpy(received.Payload, boxConfig, IdSize);
 8009a0e:	4b57      	ldr	r3, [pc, #348]	@ (8009b6c <Process_USB_input+0x580>)
 8009a10:	2202      	movs	r2, #2
 8009a12:	1879      	adds	r1, r7, r1
 8009a14:	189b      	adds	r3, r3, r2
 8009a16:	220c      	movs	r2, #12
 8009a18:	0018      	movs	r0, r3
 8009a1a:	f01c ff8d 	bl	8026938 <memcpy>
 8009a1e:	e005      	b.n	8009a2c <Process_USB_input+0x440>
          }
          else {
            memcpy(received.Payload, data, IdSize);
 8009a20:	6879      	ldr	r1, [r7, #4]
 8009a22:	4b53      	ldr	r3, [pc, #332]	@ (8009b70 <Process_USB_input+0x584>)
 8009a24:	220c      	movs	r2, #12
 8009a26:	0018      	movs	r0, r3
 8009a28:	f01c ff86 	bl	8026938 <memcpy>
          }
          received.Payload[12] = '\0';
 8009a2c:	4b4f      	ldr	r3, [pc, #316]	@ (8009b6c <Process_USB_input+0x580>)
 8009a2e:	2200      	movs	r2, #0
 8009a30:	739a      	strb	r2, [r3, #14]
          received.PayloadLength = IdSize;
 8009a32:	4b4e      	ldr	r3, [pc, #312]	@ (8009b6c <Process_USB_input+0x580>)
 8009a34:	220c      	movs	r2, #12
 8009a36:	705a      	strb	r2, [r3, #1]
 8009a38:	e005      	b.n	8009a46 <Process_USB_input+0x45a>
        }
        else {
          received.PayloadLength = length-4;  // The string terminator counts
 8009a3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	3b04      	subs	r3, #4
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	4b4a      	ldr	r3, [pc, #296]	@ (8009b6c <Process_USB_input+0x580>)
 8009a44:	705a      	strb	r2, [r3, #1]
        }
        if ((len < pwdMaxLength) && (len != 6))  {
 8009a46:	4b45      	ldr	r3, [pc, #276]	@ (8009b5c <Process_USB_input+0x570>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8009a4c:	d80b      	bhi.n	8009a66 <Process_USB_input+0x47a>
 8009a4e:	4b43      	ldr	r3, [pc, #268]	@ (8009b5c <Process_USB_input+0x570>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b06      	cmp	r3, #6
 8009a54:	d007      	beq.n	8009a66 <Process_USB_input+0x47a>
          uint8ArrayToString(Buffer, received.Payload);
 8009a56:	4a46      	ldr	r2, [pc, #280]	@ (8009b70 <Process_USB_input+0x584>)
 8009a58:	2308      	movs	r3, #8
 8009a5a:	18fb      	adds	r3, r7, r3
 8009a5c:	0011      	movs	r1, r2
 8009a5e:	0018      	movs	r0, r3
 8009a60:	f7fb fc3e 	bl	80052e0 <uint8ArrayToString>
 8009a64:	e00c      	b.n	8009a80 <Process_USB_input+0x494>
        }
        else if (len == pwdMaxLength) {
 8009a66:	4b3d      	ldr	r3, [pc, #244]	@ (8009b5c <Process_USB_input+0x570>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2b40      	cmp	r3, #64	@ 0x40
 8009a6c:	d108      	bne.n	8009a80 <Process_USB_input+0x494>
          memcpy(received.Payload, &data[4], received.PayloadLength);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	1d19      	adds	r1, r3, #4
 8009a72:	4b3e      	ldr	r3, [pc, #248]	@ (8009b6c <Process_USB_input+0x580>)
 8009a74:	785b      	ldrb	r3, [r3, #1]
 8009a76:	001a      	movs	r2, r3
 8009a78:	4b3d      	ldr	r3, [pc, #244]	@ (8009b70 <Process_USB_input+0x584>)
 8009a7a:	0018      	movs	r0, r3
 8009a7c:	f01c ff5c 	bl	8026938 <memcpy>
        }
        printf_USB("payload length: %d\r\n", received.PayloadLength);
 8009a80:	4b3a      	ldr	r3, [pc, #232]	@ (8009b6c <Process_USB_input+0x580>)
 8009a82:	785b      	ldrb	r3, [r3, #1]
 8009a84:	001a      	movs	r2, r3
 8009a86:	4b3b      	ldr	r3, [pc, #236]	@ (8009b74 <Process_USB_input+0x588>)
 8009a88:	0011      	movs	r1, r2
 8009a8a:	0018      	movs	r0, r3
 8009a8c:	f7ff f834 	bl	8008af8 <printf_USB>
        ProcessCmd(received);
 8009a90:	4c36      	ldr	r4, [pc, #216]	@ (8009b6c <Process_USB_input+0x580>)
 8009a92:	466b      	mov	r3, sp
 8009a94:	0018      	movs	r0, r3
 8009a96:	0023      	movs	r3, r4
 8009a98:	3310      	adds	r3, #16
 8009a9a:	22f4      	movs	r2, #244	@ 0xf4
 8009a9c:	0019      	movs	r1, r3
 8009a9e:	f01c ff4b 	bl	8026938 <memcpy>
 8009aa2:	6820      	ldr	r0, [r4, #0]
 8009aa4:	6861      	ldr	r1, [r4, #4]
 8009aa6:	68a2      	ldr	r2, [r4, #8]
 8009aa8:	68e3      	ldr	r3, [r4, #12]
 8009aaa:	f7fe fd41 	bl	8008530 <ProcessCmd>
        ResetUsbRxDataSize();
 8009aae:	f019 fc49 	bl	8023344 <ResetUsbRxDataSize>
        PC_show_Keys();
 8009ab2:	f7ff f861 	bl	8008b78 <PC_show_Keys>
        for (uint8_t i=0; i < length; i++) {
 8009ab6:	2364      	movs	r3, #100	@ 0x64
 8009ab8:	18fb      	adds	r3, r7, r3
 8009aba:	2200      	movs	r2, #0
 8009abc:	701a      	strb	r2, [r3, #0]
 8009abe:	e00b      	b.n	8009ad8 <Process_USB_input+0x4ec>
          data[i] = '\0';
 8009ac0:	2164      	movs	r1, #100	@ 0x64
 8009ac2:	187b      	adds	r3, r7, r1
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	18d3      	adds	r3, r2, r3
 8009aca:	2200      	movs	r2, #0
 8009acc:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < length; i++) {
 8009ace:	187b      	adds	r3, r7, r1
 8009ad0:	781a      	ldrb	r2, [r3, #0]
 8009ad2:	187b      	adds	r3, r7, r1
 8009ad4:	3201      	adds	r2, #1
 8009ad6:	701a      	strb	r2, [r3, #0]
 8009ad8:	2364      	movs	r3, #100	@ 0x64
 8009ada:	18fb      	adds	r3, r7, r3
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d8ed      	bhi.n	8009ac0 <Process_USB_input+0x4d4>
        }
        return true;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e034      	b.n	8009b52 <Process_USB_input+0x566>
      }
      else {
        printf_USB("\r\nInvalid input; comma not found\r\n");
 8009ae8:	4b23      	ldr	r3, [pc, #140]	@ (8009b78 <Process_USB_input+0x58c>)
 8009aea:	0018      	movs	r0, r3
 8009aec:	f7ff f804 	bl	8008af8 <printf_USB>
//        for (uint8_t i=0; i < length; i++) {
//          data[i] = '\0';
//        }
      }
    }
    PC_show_Keys();
 8009af0:	f7ff f842 	bl	8008b78 <PC_show_Keys>
    ResetUsbRxDataSize();
 8009af4:	f019 fc26 	bl	8023344 <ResetUsbRxDataSize>
    for (uint8_t i=0; i < length; i++) {
 8009af8:	2363      	movs	r3, #99	@ 0x63
 8009afa:	18fb      	adds	r3, r7, r3
 8009afc:	2200      	movs	r2, #0
 8009afe:	701a      	strb	r2, [r3, #0]
 8009b00:	e00b      	b.n	8009b1a <Process_USB_input+0x52e>
      data[i] = '\0';
 8009b02:	2163      	movs	r1, #99	@ 0x63
 8009b04:	187b      	adds	r3, r7, r1
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	18d3      	adds	r3, r2, r3
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < length; i++) {
 8009b10:	187b      	adds	r3, r7, r1
 8009b12:	781a      	ldrb	r2, [r3, #0]
 8009b14:	187b      	adds	r3, r7, r1
 8009b16:	3201      	adds	r2, #1
 8009b18:	701a      	strb	r2, [r3, #0]
 8009b1a:	2363      	movs	r3, #99	@ 0x63
 8009b1c:	18fb      	adds	r3, r7, r3
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d8ed      	bhi.n	8009b02 <Process_USB_input+0x516>
    }
    len = 6;
 8009b26:	4b0d      	ldr	r3, [pc, #52]	@ (8009b5c <Process_USB_input+0x570>)
 8009b28:	2206      	movs	r2, #6
 8009b2a:	601a      	str	r2, [r3, #0]
  }
  if (formerlength != length) {
 8009b2c:	4b13      	ldr	r3, [pc, #76]	@ (8009b7c <Process_USB_input+0x590>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d008      	beq.n	8009b48 <Process_USB_input+0x55c>
    printf_USB("USB input: %s\r", (const char*)data);
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	4b11      	ldr	r3, [pc, #68]	@ (8009b80 <Process_USB_input+0x594>)
 8009b3a:	0011      	movs	r1, r2
 8009b3c:	0018      	movs	r0, r3
 8009b3e:	f7fe ffdb 	bl	8008af8 <printf_USB>
    formerlength = length;
 8009b42:	4b0e      	ldr	r3, [pc, #56]	@ (8009b7c <Process_USB_input+0x590>)
 8009b44:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009b46:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8009b48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b4a:	0018      	movs	r0, r3
 8009b4c:	f019 fc1c 	bl	8023388 <GetUsbRxNextChunk>
  return false;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	0018      	movs	r0, r3
 8009b54:	46bd      	mov	sp, r7
 8009b56:	b01b      	add	sp, #108	@ 0x6c
 8009b58:	bd90      	pop	{r4, r7, pc}
 8009b5a:	46c0      	nop			@ (mov r8, r8)
 8009b5c:	20000038 	.word	0x20000038
 8009b60:	0802c080 	.word	0x0802c080
 8009b64:	08080000 	.word	0x08080000
 8009b68:	20000a44 	.word	0x20000a44
 8009b6c:	20000940 	.word	0x20000940
 8009b70:	20000942 	.word	0x20000942
 8009b74:	0802c0a4 	.word	0x0802c0a4
 8009b78:	0802c0bc 	.word	0x0802c0bc
 8009b7c:	20000a48 	.word	0x20000a48
 8009b80:	0802c0e0 	.word	0x0802c0e0

08009b84 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8009b84:	b580      	push	{r7, lr}
 8009b86:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8009b88:	4b26      	ldr	r3, [pc, #152]	@ (8009c24 <ReadBatteryVoltage+0xa0>)
 8009b8a:	4a27      	ldr	r2, [pc, #156]	@ (8009c28 <ReadBatteryVoltage+0xa4>)
 8009b8c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009b8e:	4b25      	ldr	r3, [pc, #148]	@ (8009c24 <ReadBatteryVoltage+0xa0>)
 8009b90:	2280      	movs	r2, #128	@ 0x80
 8009b92:	0152      	lsls	r2, r2, #5
 8009b94:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009b96:	4a23      	ldr	r2, [pc, #140]	@ (8009c24 <ReadBatteryVoltage+0xa0>)
 8009b98:	4b24      	ldr	r3, [pc, #144]	@ (8009c2c <ReadBatteryVoltage+0xa8>)
 8009b9a:	0011      	movs	r1, r2
 8009b9c:	0018      	movs	r0, r3
 8009b9e:	f00b f9c5 	bl	8014f2c <HAL_ADC_ConfigChannel>
 8009ba2:	1e03      	subs	r3, r0, #0
 8009ba4:	d001      	beq.n	8009baa <ReadBatteryVoltage+0x26>
    Error_Handler();
 8009ba6:	f003 fc75 	bl	800d494 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8009baa:	4b20      	ldr	r3, [pc, #128]	@ (8009c2c <ReadBatteryVoltage+0xa8>)
 8009bac:	0018      	movs	r0, r3
 8009bae:	f00b f8c1 	bl	8014d34 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8009c2c <ReadBatteryVoltage+0xa8>)
 8009bb4:	2101      	movs	r1, #1
 8009bb6:	0018      	movs	r0, r3
 8009bb8:	f00b f910 	bl	8014ddc <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8009bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8009c2c <ReadBatteryVoltage+0xa8>)
 8009bbe:	0018      	movs	r0, r3
 8009bc0:	f00b f9a8 	bl	8014f14 <HAL_ADC_GetValue>
 8009bc4:	0002      	movs	r2, r0
 8009bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8009c30 <ReadBatteryVoltage+0xac>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4353      	muls	r3, r2
 8009bcc:	005b      	lsls	r3, r3, #1
 8009bce:	4919      	ldr	r1, [pc, #100]	@ (8009c34 <ReadBatteryVoltage+0xb0>)
 8009bd0:	0018      	movs	r0, r3
 8009bd2:	f7f6 fae7 	bl	80001a4 <__udivsi3>
 8009bd6:	0003      	movs	r3, r0
 8009bd8:	001a      	movs	r2, r3
 8009bda:	4b17      	ldr	r3, [pc, #92]	@ (8009c38 <ReadBatteryVoltage+0xb4>)
 8009bdc:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8009bde:	4b16      	ldr	r3, [pc, #88]	@ (8009c38 <ReadBatteryVoltage+0xb4>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	0018      	movs	r0, r3
 8009be4:	f7f7 fe70 	bl	80018c8 <__aeabi_ui2f>
 8009be8:	1c03      	adds	r3, r0, #0
 8009bea:	4914      	ldr	r1, [pc, #80]	@ (8009c3c <ReadBatteryVoltage+0xb8>)
 8009bec:	1c18      	adds	r0, r3, #0
 8009bee:	f7f7 f859 	bl	8000ca4 <__aeabi_fdiv>
 8009bf2:	1c03      	adds	r3, r0, #0
 8009bf4:	1c1a      	adds	r2, r3, #0
 8009bf6:	4b12      	ldr	r3, [pc, #72]	@ (8009c40 <ReadBatteryVoltage+0xbc>)
 8009bf8:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8009bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8009c24 <ReadBatteryVoltage+0xa0>)
 8009bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8009c28 <ReadBatteryVoltage+0xa4>)
 8009bfe:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009c00:	4b08      	ldr	r3, [pc, #32]	@ (8009c24 <ReadBatteryVoltage+0xa0>)
 8009c02:	4a10      	ldr	r2, [pc, #64]	@ (8009c44 <ReadBatteryVoltage+0xc0>)
 8009c04:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009c06:	4a07      	ldr	r2, [pc, #28]	@ (8009c24 <ReadBatteryVoltage+0xa0>)
 8009c08:	4b08      	ldr	r3, [pc, #32]	@ (8009c2c <ReadBatteryVoltage+0xa8>)
 8009c0a:	0011      	movs	r1, r2
 8009c0c:	0018      	movs	r0, r3
 8009c0e:	f00b f98d 	bl	8014f2c <HAL_ADC_ConfigChannel>
 8009c12:	1e03      	subs	r3, r0, #0
 8009c14:	d001      	beq.n	8009c1a <ReadBatteryVoltage+0x96>
    Error_Handler();
 8009c16:	f003 fc3d 	bl	800d494 <Error_Handler>
  }
  return trueValue;
 8009c1a:	4b09      	ldr	r3, [pc, #36]	@ (8009c40 <ReadBatteryVoltage+0xbc>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 }
 8009c1e:	1c18      	adds	r0, r3, #0
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	20000e18 	.word	0x20000e18
 8009c28:	38004000 	.word	0x38004000
 8009c2c:	20000e84 	.word	0x20000e84
 8009c30:	2000003c 	.word	0x2000003c
 8009c34:	00000fff 	.word	0x00000fff
 8009c38:	20000e34 	.word	0x20000e34
 8009c3c:	447a0000 	.word	0x447a0000
 8009c40:	20000e38 	.word	0x20000e38
 8009c44:	00001001 	.word	0x00001001

08009c48 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8009c4c:	4b21      	ldr	r3, [pc, #132]	@ (8009cd4 <ReadSolarVoltage+0x8c>)
 8009c4e:	4a22      	ldr	r2, [pc, #136]	@ (8009cd8 <ReadSolarVoltage+0x90>)
 8009c50:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009c52:	4b20      	ldr	r3, [pc, #128]	@ (8009cd4 <ReadSolarVoltage+0x8c>)
 8009c54:	2280      	movs	r2, #128	@ 0x80
 8009c56:	0152      	lsls	r2, r2, #5
 8009c58:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009c5a:	4a1e      	ldr	r2, [pc, #120]	@ (8009cd4 <ReadSolarVoltage+0x8c>)
 8009c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8009cdc <ReadSolarVoltage+0x94>)
 8009c5e:	0011      	movs	r1, r2
 8009c60:	0018      	movs	r0, r3
 8009c62:	f00b f963 	bl	8014f2c <HAL_ADC_ConfigChannel>
 8009c66:	1e03      	subs	r3, r0, #0
 8009c68:	d001      	beq.n	8009c6e <ReadSolarVoltage+0x26>
    Error_Handler();
 8009c6a:	f003 fc13 	bl	800d494 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8009c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8009cdc <ReadSolarVoltage+0x94>)
 8009c70:	0018      	movs	r0, r3
 8009c72:	f00b f85f 	bl	8014d34 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009c76:	4b19      	ldr	r3, [pc, #100]	@ (8009cdc <ReadSolarVoltage+0x94>)
 8009c78:	2101      	movs	r1, #1
 8009c7a:	0018      	movs	r0, r3
 8009c7c:	f00b f8ae 	bl	8014ddc <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8009c80:	4b16      	ldr	r3, [pc, #88]	@ (8009cdc <ReadSolarVoltage+0x94>)
 8009c82:	0018      	movs	r0, r3
 8009c84:	f00b f946 	bl	8014f14 <HAL_ADC_GetValue>
 8009c88:	0002      	movs	r2, r0
 8009c8a:	4b15      	ldr	r3, [pc, #84]	@ (8009ce0 <ReadSolarVoltage+0x98>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	435a      	muls	r2, r3
 8009c90:	0013      	movs	r3, r2
 8009c92:	005b      	lsls	r3, r3, #1
 8009c94:	189b      	adds	r3, r3, r2
 8009c96:	4913      	ldr	r1, [pc, #76]	@ (8009ce4 <ReadSolarVoltage+0x9c>)
 8009c98:	0018      	movs	r0, r3
 8009c9a:	f7f6 fa83 	bl	80001a4 <__udivsi3>
 8009c9e:	0003      	movs	r3, r0
 8009ca0:	001a      	movs	r2, r3
 8009ca2:	4b11      	ldr	r3, [pc, #68]	@ (8009ce8 <ReadSolarVoltage+0xa0>)
 8009ca4:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8009ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd4 <ReadSolarVoltage+0x8c>)
 8009ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8009cd8 <ReadSolarVoltage+0x90>)
 8009caa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009cac:	4b09      	ldr	r3, [pc, #36]	@ (8009cd4 <ReadSolarVoltage+0x8c>)
 8009cae:	4a0f      	ldr	r2, [pc, #60]	@ (8009cec <ReadSolarVoltage+0xa4>)
 8009cb0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009cb2:	4a08      	ldr	r2, [pc, #32]	@ (8009cd4 <ReadSolarVoltage+0x8c>)
 8009cb4:	4b09      	ldr	r3, [pc, #36]	@ (8009cdc <ReadSolarVoltage+0x94>)
 8009cb6:	0011      	movs	r1, r2
 8009cb8:	0018      	movs	r0, r3
 8009cba:	f00b f937 	bl	8014f2c <HAL_ADC_ConfigChannel>
 8009cbe:	1e03      	subs	r3, r0, #0
 8009cc0:	d001      	beq.n	8009cc6 <ReadSolarVoltage+0x7e>
    Error_Handler();
 8009cc2:	f003 fbe7 	bl	800d494 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8009cc6:	4b08      	ldr	r3, [pc, #32]	@ (8009ce8 <ReadSolarVoltage+0xa0>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	b29b      	uxth	r3, r3
 }
 8009ccc:	0018      	movs	r0, r3
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	46c0      	nop			@ (mov r8, r8)
 8009cd4:	20000e18 	.word	0x20000e18
 8009cd8:	3c008000 	.word	0x3c008000
 8009cdc:	20000e84 	.word	0x20000e84
 8009ce0:	2000003c 	.word	0x2000003c
 8009ce4:	00000fff 	.word	0x00000fff
 8009ce8:	20000e3c 	.word	0x20000e3c
 8009cec:	00001001 	.word	0x00001001

08009cf0 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	af00      	add	r7, sp, #0
   if (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin)) {
 8009cf4:	23a0      	movs	r3, #160	@ 0xa0
 8009cf6:	05db      	lsls	r3, r3, #23
 8009cf8:	2180      	movs	r1, #128	@ 0x80
 8009cfa:	0018      	movs	r0, r3
 8009cfc:	f00c f8a6 	bl	8015e4c <HAL_GPIO_ReadPin>
 8009d00:	1e03      	subs	r3, r0, #0
 8009d02:	d00b      	beq.n	8009d1c <Check_USB_PowerOn+0x2c>
     if (sendpwremail == DONE) {
 8009d04:	4b07      	ldr	r3, [pc, #28]	@ (8009d24 <Check_USB_PowerOn+0x34>)
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	d105      	bne.n	8009d18 <Check_USB_PowerOn+0x28>
       sendpwremail = CLEAR;
 8009d0c:	4b05      	ldr	r3, [pc, #20]	@ (8009d24 <Check_USB_PowerOn+0x34>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	701a      	strb	r2, [r3, #0]
       sendpwrmaildate = 0;
 8009d12:	4b05      	ldr	r3, [pc, #20]	@ (8009d28 <Check_USB_PowerOn+0x38>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	701a      	strb	r2, [r3, #0]
     }
     return true;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e000      	b.n	8009d1e <Check_USB_PowerOn+0x2e>
   }
   return false;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	0018      	movs	r0, r3
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	200010f9 	.word	0x200010f9
 8009d28:	20001110 	.word	0x20001110

08009d2c <Read_Charge_Status>:
//  CHARGING_OFF  = 0
//  CHARGING_ON   = 1
//  CHARGING_FULL = 2
//  Function returns Chargestatus

ChargeStatus Read_Charge_Status(void){
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
  bool PulledUpStatus   = true  ;
 8009d32:	1dfb      	adds	r3, r7, #7
 8009d34:	2201      	movs	r2, #1
 8009d36:	701a      	strb	r2, [r3, #0]
  bool PulledDownStatus = false ;
 8009d38:	1dbb      	adds	r3, r7, #6
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	701a      	strb	r2, [r3, #0]
  //Read with Pull Up
  //Charge_Pin_Up();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009d3e:	4b27      	ldr	r3, [pc, #156]	@ (8009ddc <Read_Charge_Status+0xb0>)
 8009d40:	2280      	movs	r2, #128	@ 0x80
 8009d42:	0092      	lsls	r2, r2, #2
 8009d44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009d46:	4b25      	ldr	r3, [pc, #148]	@ (8009ddc <Read_Charge_Status+0xb0>)
 8009d48:	2200      	movs	r2, #0
 8009d4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009d4c:	4b23      	ldr	r3, [pc, #140]	@ (8009ddc <Read_Charge_Status+0xb0>)
 8009d4e:	2201      	movs	r2, #1
 8009d50:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009d52:	4b22      	ldr	r3, [pc, #136]	@ (8009ddc <Read_Charge_Status+0xb0>)
 8009d54:	4a22      	ldr	r2, [pc, #136]	@ (8009de0 <Read_Charge_Status+0xb4>)
 8009d56:	0019      	movs	r1, r3
 8009d58:	0010      	movs	r0, r2
 8009d5a:	f00b fef9 	bl	8015b50 <HAL_GPIO_Init>

  PulledUpStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009d5e:	2380      	movs	r3, #128	@ 0x80
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4a1f      	ldr	r2, [pc, #124]	@ (8009de0 <Read_Charge_Status+0xb4>)
 8009d64:	0019      	movs	r1, r3
 8009d66:	0010      	movs	r0, r2
 8009d68:	f00c f870 	bl	8015e4c <HAL_GPIO_ReadPin>
 8009d6c:	0003      	movs	r3, r0
 8009d6e:	001a      	movs	r2, r3
 8009d70:	1dfb      	adds	r3, r7, #7
 8009d72:	1e51      	subs	r1, r2, #1
 8009d74:	418a      	sbcs	r2, r1
 8009d76:	701a      	strb	r2, [r3, #0]

  //Read with Pull Down
  // Charge_Pin_Down();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009d78:	4b18      	ldr	r3, [pc, #96]	@ (8009ddc <Read_Charge_Status+0xb0>)
 8009d7a:	2280      	movs	r2, #128	@ 0x80
 8009d7c:	0092      	lsls	r2, r2, #2
 8009d7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009d80:	4b16      	ldr	r3, [pc, #88]	@ (8009ddc <Read_Charge_Status+0xb0>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009d86:	4b15      	ldr	r3, [pc, #84]	@ (8009ddc <Read_Charge_Status+0xb0>)
 8009d88:	2202      	movs	r2, #2
 8009d8a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009d8c:	4b13      	ldr	r3, [pc, #76]	@ (8009ddc <Read_Charge_Status+0xb0>)
 8009d8e:	4a14      	ldr	r2, [pc, #80]	@ (8009de0 <Read_Charge_Status+0xb4>)
 8009d90:	0019      	movs	r1, r3
 8009d92:	0010      	movs	r0, r2
 8009d94:	f00b fedc 	bl	8015b50 <HAL_GPIO_Init>

  PulledDownStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009d98:	2380      	movs	r3, #128	@ 0x80
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4a10      	ldr	r2, [pc, #64]	@ (8009de0 <Read_Charge_Status+0xb4>)
 8009d9e:	0019      	movs	r1, r3
 8009da0:	0010      	movs	r0, r2
 8009da2:	f00c f853 	bl	8015e4c <HAL_GPIO_ReadPin>
 8009da6:	0003      	movs	r3, r0
 8009da8:	001a      	movs	r2, r3
 8009daa:	1dbb      	adds	r3, r7, #6
 8009dac:	1e51      	subs	r1, r2, #1
 8009dae:	418a      	sbcs	r2, r1
 8009db0:	701a      	strb	r2, [r3, #0]

  if (PulledUpStatus==false) {
 8009db2:	1dfb      	adds	r3, r7, #7
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	2201      	movs	r2, #1
 8009db8:	4053      	eors	r3, r2
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <Read_Charge_Status+0x98>
    return CHARGING_ON;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e006      	b.n	8009dd2 <Read_Charge_Status+0xa6>
  }
  if (PulledDownStatus==true){
 8009dc4:	1dbb      	adds	r3, r7, #6
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <Read_Charge_Status+0xa4>
    return CHARGING_FULL;
 8009dcc:	2302      	movs	r3, #2
 8009dce:	e000      	b.n	8009dd2 <Read_Charge_Status+0xa6>
  }
  return CHARGING_OFF;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	0018      	movs	r0, r3
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	b002      	add	sp, #8
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	46c0      	nop			@ (mov r8, r8)
 8009ddc:	20000e20 	.word	0x20000e20
 8009de0:	50000800 	.word	0x50000800

08009de4 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8009de4:	b580      	push	{r7, lr}
 8009de6:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8009de8:	2380      	movs	r3, #128	@ 0x80
 8009dea:	021a      	lsls	r2, r3, #8
 8009dec:	23a0      	movs	r3, #160	@ 0xa0
 8009dee:	05db      	lsls	r3, r3, #23
 8009df0:	0011      	movs	r1, r2
 8009df2:	0018      	movs	r0, r3
 8009df4:	f00c f82a 	bl	8015e4c <HAL_GPIO_ReadPin>
 8009df8:	0003      	movs	r3, r0
 8009dfa:	1e5a      	subs	r2, r3, #1
 8009dfc:	4193      	sbcs	r3, r2
 8009dfe:	b2db      	uxtb	r3, r3
}
 8009e00:	0018      	movs	r0, r3
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
	...

08009e08 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8009e0c:	4b05      	ldr	r3, [pc, #20]	@ (8009e24 <UserButton_Pressed+0x1c>)
 8009e0e:	2104      	movs	r1, #4
 8009e10:	0018      	movs	r0, r3
 8009e12:	f00c f81b 	bl	8015e4c <HAL_GPIO_ReadPin>
 8009e16:	0003      	movs	r3, r0
 8009e18:	425a      	negs	r2, r3
 8009e1a:	4153      	adcs	r3, r2
 8009e1c:	b2db      	uxtb	r3, r3
}
 8009e1e:	0018      	movs	r0, r3
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	50000c00 	.word	0x50000c00

08009e28 <getUptime>:

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

#ifndef PUBLIC
void getUptime(char* uptbuffer) {
 8009e28:	b590      	push	{r4, r7, lr}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af02      	add	r7, sp, #8
 8009e2e:	6078      	str	r0, [r7, #4]
  sprintf(uptbuffer, "%d%02d.%02d", myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);
 8009e30:	4b08      	ldr	r3, [pc, #32]	@ (8009e54 <getUptime+0x2c>)
 8009e32:	881b      	ldrh	r3, [r3, #0]
 8009e34:	001a      	movs	r2, r3
 8009e36:	4b07      	ldr	r3, [pc, #28]	@ (8009e54 <getUptime+0x2c>)
 8009e38:	789b      	ldrb	r3, [r3, #2]
 8009e3a:	001c      	movs	r4, r3
 8009e3c:	4b05      	ldr	r3, [pc, #20]	@ (8009e54 <getUptime+0x2c>)
 8009e3e:	78db      	ldrb	r3, [r3, #3]
 8009e40:	4905      	ldr	r1, [pc, #20]	@ (8009e58 <getUptime+0x30>)
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	0023      	movs	r3, r4
 8009e48:	f01c fb52 	bl	80264f0 <siprintf>
}
 8009e4c:	46c0      	nop			@ (mov r8, r8)
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	b003      	add	sp, #12
 8009e52:	bd90      	pop	{r4, r7, pc}
 8009e54:	20000e48 	.word	0x20000e48
 8009e58:	0802c13c 	.word	0x0802c13c

08009e5c <getDate>:
#endif

uint8_t getDate() {
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009e60:	4a05      	ldr	r2, [pc, #20]	@ (8009e78 <getDate+0x1c>)
 8009e62:	4b06      	ldr	r3, [pc, #24]	@ (8009e7c <getDate+0x20>)
 8009e64:	0011      	movs	r1, r2
 8009e66:	0018      	movs	r0, r3
 8009e68:	f000 fb66 	bl	800a538 <RTC_GetTime>
  return currentDate.Date;
 8009e6c:	4b02      	ldr	r3, [pc, #8]	@ (8009e78 <getDate+0x1c>)
 8009e6e:	789b      	ldrb	r3, [r3, #2]
}
 8009e70:	0018      	movs	r0, r3
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	46c0      	nop			@ (mov r8, r8)
 8009e78:	20000e68 	.word	0x20000e68
 8009e7c:	20000e54 	.word	0x20000e54

08009e80 <showUpTime>:

void showUpTime() {
 8009e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e82:	46ce      	mov	lr, r9
 8009e84:	4647      	mov	r7, r8
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b087      	sub	sp, #28
 8009e8a:	af06      	add	r7, sp, #24
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009e8c:	4b17      	ldr	r3, [pc, #92]	@ (8009eec <showUpTime+0x6c>)
 8009e8e:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009e90:	4698      	mov	r8, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009e92:	4b16      	ldr	r3, [pc, #88]	@ (8009eec <showUpTime+0x6c>)
 8009e94:	785b      	ldrb	r3, [r3, #1]
 8009e96:	1e5a      	subs	r2, r3, #1
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009e98:	4b15      	ldr	r3, [pc, #84]	@ (8009ef0 <showUpTime+0x70>)
 8009e9a:	0092      	lsls	r2, r2, #2
 8009e9c:	58d2      	ldr	r2, [r2, r3]
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009e9e:	4b13      	ldr	r3, [pc, #76]	@ (8009eec <showUpTime+0x6c>)
 8009ea0:	78db      	ldrb	r3, [r3, #3]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009ea2:	4699      	mov	r9, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009ea4:	4b13      	ldr	r3, [pc, #76]	@ (8009ef4 <showUpTime+0x74>)
 8009ea6:	781b      	ldrb	r3, [r3, #0]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009ea8:	0019      	movs	r1, r3
        currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009eaa:	4b12      	ldr	r3, [pc, #72]	@ (8009ef4 <showUpTime+0x74>)
 8009eac:	785b      	ldrb	r3, [r3, #1]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009eae:	001c      	movs	r4, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009eb0:	4b10      	ldr	r3, [pc, #64]	@ (8009ef4 <showUpTime+0x74>)
 8009eb2:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009eb4:	001d      	movs	r5, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009eb6:	4b10      	ldr	r3, [pc, #64]	@ (8009ef8 <showUpTime+0x78>)
 8009eb8:	881b      	ldrh	r3, [r3, #0]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009eba:	001e      	movs	r6, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8009ef8 <showUpTime+0x78>)
 8009ebe:	789b      	ldrb	r3, [r3, #2]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009ec0:	469c      	mov	ip, r3
        currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);  // alway forced shown even if usb logging is off
 8009ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ef8 <showUpTime+0x78>)
 8009ec4:	78db      	ldrb	r3, [r3, #3]
    printf_USB("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8009ec6:	480d      	ldr	r0, [pc, #52]	@ (8009efc <showUpTime+0x7c>)
 8009ec8:	9305      	str	r3, [sp, #20]
 8009eca:	4663      	mov	r3, ip
 8009ecc:	9304      	str	r3, [sp, #16]
 8009ece:	9603      	str	r6, [sp, #12]
 8009ed0:	9502      	str	r5, [sp, #8]
 8009ed2:	9401      	str	r4, [sp, #4]
 8009ed4:	9100      	str	r1, [sp, #0]
 8009ed6:	464b      	mov	r3, r9
 8009ed8:	4641      	mov	r1, r8
 8009eda:	f7fe fe0d 	bl	8008af8 <printf_USB>
}
 8009ede:	46c0      	nop			@ (mov r8, r8)
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	b001      	add	sp, #4
 8009ee4:	bcc0      	pop	{r6, r7}
 8009ee6:	46b9      	mov	r9, r7
 8009ee8:	46b0      	mov	r8, r6
 8009eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eec:	20000e68 	.word	0x20000e68
 8009ef0:	2000005c 	.word	0x2000005c
 8009ef4:	20000e54 	.word	0x20000e54
 8009ef8:	20000e48 	.word	0x20000e48
 8009efc:	0802c148 	.word	0x0802c148

08009f00 <showTime>:

void showTime() {
 8009f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f02:	46de      	mov	lr, fp
 8009f04:	4657      	mov	r7, sl
 8009f06:	464e      	mov	r6, r9
 8009f08:	4645      	mov	r5, r8
 8009f0a:	b5e0      	push	{r5, r6, r7, lr}
 8009f0c:	b08d      	sub	sp, #52	@ 0x34
 8009f0e:	af0a      	add	r7, sp, #40	@ 0x28
  if (posixBootTime == 0) {
 8009f10:	4b41      	ldr	r3, [pc, #260]	@ (800a018 <showTime+0x118>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d100      	bne.n	8009f1a <showTime+0x1a>
 8009f18:	e075      	b.n	800a006 <showTime+0x106>
    return;
  }
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009f1a:	4a40      	ldr	r2, [pc, #256]	@ (800a01c <showTime+0x11c>)
 8009f1c:	4b40      	ldr	r3, [pc, #256]	@ (800a020 <showTime+0x120>)
 8009f1e:	0011      	movs	r1, r2
 8009f20:	0018      	movs	r0, r3
 8009f22:	f000 fb09 	bl	800a538 <RTC_GetTime>
  lasthour = currentTime.Hours;
 8009f26:	4b3e      	ldr	r3, [pc, #248]	@ (800a020 <showTime+0x120>)
 8009f28:	781a      	ldrb	r2, [r3, #0]
 8009f2a:	4b3e      	ldr	r3, [pc, #248]	@ (800a024 <showTime+0x124>)
 8009f2c:	701a      	strb	r2, [r3, #0]
  weekday = currentDate.WeekDay;
 8009f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800a01c <showTime+0x11c>)
 8009f30:	781a      	ldrb	r2, [r3, #0]
 8009f32:	4b3d      	ldr	r3, [pc, #244]	@ (800a028 <showTime+0x128>)
 8009f34:	701a      	strb	r2, [r3, #0]
  UpdateSystemUptime();
 8009f36:	f000 f89b 	bl	800a070 <UpdateSystemUptime>
  if (lastminute != currentTime.Minutes) {
 8009f3a:	4b39      	ldr	r3, [pc, #228]	@ (800a020 <showTime+0x120>)
 8009f3c:	785a      	ldrb	r2, [r3, #1]
 8009f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800a02c <showTime+0x12c>)
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d039      	beq.n	8009fba <showTime+0xba>
    lastminute = currentTime.Minutes;
 8009f46:	4b36      	ldr	r3, [pc, #216]	@ (800a020 <showTime+0x120>)
 8009f48:	785a      	ldrb	r2, [r3, #1]
 8009f4a:	4b38      	ldr	r3, [pc, #224]	@ (800a02c <showTime+0x12c>)
 8009f4c:	701a      	strb	r2, [r3, #0]
    Info("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds",
 8009f4e:	4b33      	ldr	r3, [pc, #204]	@ (800a01c <showTime+0x11c>)
 8009f50:	789b      	ldrb	r3, [r3, #2]
 8009f52:	469b      	mov	fp, r3
 8009f54:	4b31      	ldr	r3, [pc, #196]	@ (800a01c <showTime+0x11c>)
 8009f56:	785b      	ldrb	r3, [r3, #1]
 8009f58:	1e5a      	subs	r2, r3, #1
 8009f5a:	4b35      	ldr	r3, [pc, #212]	@ (800a030 <showTime+0x130>)
 8009f5c:	0092      	lsls	r2, r2, #2
 8009f5e:	58d3      	ldr	r3, [r2, r3]
 8009f60:	607b      	str	r3, [r7, #4]
 8009f62:	4a2e      	ldr	r2, [pc, #184]	@ (800a01c <showTime+0x11c>)
 8009f64:	78d2      	ldrb	r2, [r2, #3]
 8009f66:	0010      	movs	r0, r2
 8009f68:	4a2d      	ldr	r2, [pc, #180]	@ (800a020 <showTime+0x120>)
 8009f6a:	7812      	ldrb	r2, [r2, #0]
 8009f6c:	0014      	movs	r4, r2
 8009f6e:	4a2c      	ldr	r2, [pc, #176]	@ (800a020 <showTime+0x120>)
 8009f70:	7852      	ldrb	r2, [r2, #1]
 8009f72:	0015      	movs	r5, r2
 8009f74:	4a2a      	ldr	r2, [pc, #168]	@ (800a020 <showTime+0x120>)
 8009f76:	7892      	ldrb	r2, [r2, #2]
 8009f78:	0016      	movs	r6, r2
 8009f7a:	4a2e      	ldr	r2, [pc, #184]	@ (800a034 <showTime+0x134>)
 8009f7c:	8812      	ldrh	r2, [r2, #0]
 8009f7e:	4694      	mov	ip, r2
 8009f80:	4a2c      	ldr	r2, [pc, #176]	@ (800a034 <showTime+0x134>)
 8009f82:	7892      	ldrb	r2, [r2, #2]
 8009f84:	4690      	mov	r8, r2
 8009f86:	4a2b      	ldr	r2, [pc, #172]	@ (800a034 <showTime+0x134>)
 8009f88:	78d2      	ldrb	r2, [r2, #3]
 8009f8a:	4691      	mov	r9, r2
 8009f8c:	4a29      	ldr	r2, [pc, #164]	@ (800a034 <showTime+0x134>)
 8009f8e:	7912      	ldrb	r2, [r2, #4]
 8009f90:	4692      	mov	sl, r2
 8009f92:	4a29      	ldr	r2, [pc, #164]	@ (800a038 <showTime+0x138>)
 8009f94:	4929      	ldr	r1, [pc, #164]	@ (800a03c <showTime+0x13c>)
 8009f96:	4653      	mov	r3, sl
 8009f98:	9308      	str	r3, [sp, #32]
 8009f9a:	464b      	mov	r3, r9
 8009f9c:	9307      	str	r3, [sp, #28]
 8009f9e:	4643      	mov	r3, r8
 8009fa0:	9306      	str	r3, [sp, #24]
 8009fa2:	4663      	mov	r3, ip
 8009fa4:	9305      	str	r3, [sp, #20]
 8009fa6:	9604      	str	r6, [sp, #16]
 8009fa8:	9503      	str	r5, [sp, #12]
 8009faa:	9402      	str	r4, [sp, #8]
 8009fac:	9001      	str	r0, [sp, #4]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	465b      	mov	r3, fp
 8009fb4:	2002      	movs	r0, #2
 8009fb6:	f009 ff7f 	bl	8013eb8 <CreateLine>
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
  }
  if ((weekday == 7) && (lasthour == 3) && (currentTime.Minutes < 17) && !dstchkd && (currentDate.Date > 24) && ((currentDate.Month == 3) || (currentDate.Month == 10))) {
 8009fba:	4b1b      	ldr	r3, [pc, #108]	@ (800a028 <showTime+0x128>)
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	2b07      	cmp	r3, #7
 8009fc0:	d122      	bne.n	800a008 <showTime+0x108>
 8009fc2:	4b18      	ldr	r3, [pc, #96]	@ (800a024 <showTime+0x124>)
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	2b03      	cmp	r3, #3
 8009fc8:	d11e      	bne.n	800a008 <showTime+0x108>
 8009fca:	4b15      	ldr	r3, [pc, #84]	@ (800a020 <showTime+0x120>)
 8009fcc:	785b      	ldrb	r3, [r3, #1]
 8009fce:	2b10      	cmp	r3, #16
 8009fd0:	d81a      	bhi.n	800a008 <showTime+0x108>
 8009fd2:	4b1b      	ldr	r3, [pc, #108]	@ (800a040 <showTime+0x140>)
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	4053      	eors	r3, r2
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d013      	beq.n	800a008 <showTime+0x108>
 8009fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800a01c <showTime+0x11c>)
 8009fe2:	789b      	ldrb	r3, [r3, #2]
 8009fe4:	2b18      	cmp	r3, #24
 8009fe6:	d90f      	bls.n	800a008 <showTime+0x108>
 8009fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800a01c <showTime+0x11c>)
 8009fea:	785b      	ldrb	r3, [r3, #1]
 8009fec:	2b03      	cmp	r3, #3
 8009fee:	d003      	beq.n	8009ff8 <showTime+0xf8>
 8009ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800a01c <showTime+0x11c>)
 8009ff2:	785b      	ldrb	r3, [r3, #1]
 8009ff4:	2b0a      	cmp	r3, #10
 8009ff6:	d107      	bne.n	800a008 <showTime+0x108>
    dstchkd = true;
 8009ff8:	4b11      	ldr	r3, [pc, #68]	@ (800a040 <showTime+0x140>)
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	701a      	strb	r2, [r3, #0]
    setESPTimeStamp(0); // check for summer/wintertime
 8009ffe:	2000      	movs	r0, #0
 800a000:	f7fa fc50 	bl	80048a4 <setESPTimeStamp>
 800a004:	e000      	b.n	800a008 <showTime+0x108>
    return;
 800a006:	46c0      	nop			@ (mov r8, r8)
  }
}
 800a008:	46bd      	mov	sp, r7
 800a00a:	b003      	add	sp, #12
 800a00c:	bcf0      	pop	{r4, r5, r6, r7}
 800a00e:	46bb      	mov	fp, r7
 800a010:	46b2      	mov	sl, r6
 800a012:	46a9      	mov	r9, r5
 800a014:	46a0      	mov	r8, r4
 800a016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a018:	20000e44 	.word	0x20000e44
 800a01c:	20000e68 	.word	0x20000e68
 800a020:	20000e54 	.word	0x20000e54
 800a024:	20000e42 	.word	0x20000e42
 800a028:	20000e43 	.word	0x20000e43
 800a02c:	20000e41 	.word	0x20000e41
 800a030:	2000005c 	.word	0x2000005c
 800a034:	20000e48 	.word	0x20000e48
 800a038:	0802c19c 	.word	0x0802c19c
 800a03c:	0802c1f4 	.word	0x0802c1f4
 800a040:	20000e40 	.word	0x20000e40

0800a044 <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 800a044:	b580      	push	{r7, lr}
 800a046:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a048:	4a07      	ldr	r2, [pc, #28]	@ (800a068 <calculateNextNTPTime+0x24>)
 800a04a:	4b08      	ldr	r3, [pc, #32]	@ (800a06c <calculateNextNTPTime+0x28>)
 800a04c:	0011      	movs	r1, r2
 800a04e:	0018      	movs	r0, r3
 800a050:	f000 fa72 	bl	800a538 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800a054:	4a05      	ldr	r2, [pc, #20]	@ (800a06c <calculateNextNTPTime+0x28>)
 800a056:	4b04      	ldr	r3, [pc, #16]	@ (800a068 <calculateNextNTPTime+0x24>)
 800a058:	0011      	movs	r1, r2
 800a05a:	0018      	movs	r0, r3
 800a05c:	f000 fc6c 	bl	800a938 <makeTime>
 800a060:	0003      	movs	r3, r0
}
 800a062:	0018      	movs	r0, r3
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	20000e68 	.word	0x20000e68
 800a06c:	20000e54 	.word	0x20000e54

0800a070 <UpdateSystemUptime>:


void UpdateSystemUptime() {
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 800a076:	4a25      	ldr	r2, [pc, #148]	@ (800a10c <UpdateSystemUptime+0x9c>)
 800a078:	4b25      	ldr	r3, [pc, #148]	@ (800a110 <UpdateSystemUptime+0xa0>)
 800a07a:	0011      	movs	r1, r2
 800a07c:	0018      	movs	r0, r3
 800a07e:	f000 fa5b 	bl	800a538 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 800a082:	4a23      	ldr	r2, [pc, #140]	@ (800a110 <UpdateSystemUptime+0xa0>)
 800a084:	4b21      	ldr	r3, [pc, #132]	@ (800a10c <UpdateSystemUptime+0x9c>)
 800a086:	0011      	movs	r1, r2
 800a088:	0018      	movs	r0, r3
 800a08a:	f000 fc55 	bl	800a938 <makeTime>
 800a08e:	0002      	movs	r2, r0
 800a090:	4b20      	ldr	r3, [pc, #128]	@ (800a114 <UpdateSystemUptime+0xa4>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	607b      	str	r3, [r7, #4]
  time = uxUptime;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	603b      	str	r3, [r7, #0]
  myUpTime.Seconds = time % 60;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	213c      	movs	r1, #60	@ 0x3c
 800a0a0:	0018      	movs	r0, r3
 800a0a2:	f7f6 f905 	bl	80002b0 <__aeabi_uidivmod>
 800a0a6:	000b      	movs	r3, r1
 800a0a8:	b2da      	uxtb	r2, r3
 800a0aa:	4b1b      	ldr	r3, [pc, #108]	@ (800a118 <UpdateSystemUptime+0xa8>)
 800a0ac:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	213c      	movs	r1, #60	@ 0x3c
 800a0b2:	0018      	movs	r0, r3
 800a0b4:	f7f6 f876 	bl	80001a4 <__udivsi3>
 800a0b8:	0003      	movs	r3, r0
 800a0ba:	603b      	str	r3, [r7, #0]
  myUpTime.Minutes = time % 60;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	213c      	movs	r1, #60	@ 0x3c
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	f7f6 f8f5 	bl	80002b0 <__aeabi_uidivmod>
 800a0c6:	000b      	movs	r3, r1
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	4b13      	ldr	r3, [pc, #76]	@ (800a118 <UpdateSystemUptime+0xa8>)
 800a0cc:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	213c      	movs	r1, #60	@ 0x3c
 800a0d2:	0018      	movs	r0, r3
 800a0d4:	f7f6 f866 	bl	80001a4 <__udivsi3>
 800a0d8:	0003      	movs	r3, r0
 800a0da:	603b      	str	r3, [r7, #0]
  myUpTime.Hour = time % 24;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	2118      	movs	r1, #24
 800a0e0:	0018      	movs	r0, r3
 800a0e2:	f7f6 f8e5 	bl	80002b0 <__aeabi_uidivmod>
 800a0e6:	000b      	movs	r3, r1
 800a0e8:	b2da      	uxtb	r2, r3
 800a0ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a118 <UpdateSystemUptime+0xa8>)
 800a0ec:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	2118      	movs	r1, #24
 800a0f2:	0018      	movs	r0, r3
 800a0f4:	f7f6 f856 	bl	80001a4 <__udivsi3>
 800a0f8:	0003      	movs	r3, r0
 800a0fa:	603b      	str	r3, [r7, #0]
  myUpTime.Day = time; // now it is days
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	4b05      	ldr	r3, [pc, #20]	@ (800a118 <UpdateSystemUptime+0xa8>)
 800a102:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 800a104:	46c0      	nop			@ (mov r8, r8)
 800a106:	46bd      	mov	sp, r7
 800a108:	b002      	add	sp, #8
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	20000e68 	.word	0x20000e68
 800a110:	20000e54 	.word	0x20000e54
 800a114:	20000e44 	.word	0x20000e44
 800a118:	20000e48 	.word	0x20000e48

0800a11c <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800a11c:	b590      	push	{r4, r7, lr}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	0008      	movs	r0, r1
 800a126:	0011      	movs	r1, r2
 800a128:	1cfb      	adds	r3, r7, #3
 800a12a:	1c02      	adds	r2, r0, #0
 800a12c:	701a      	strb	r2, [r3, #0]
 800a12e:	1cbb      	adds	r3, r7, #2
 800a130:	1c0a      	adds	r2, r1, #0
 800a132:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 800a134:	230e      	movs	r3, #14
 800a136:	18fb      	adds	r3, r7, r3
 800a138:	2200      	movs	r2, #0
 800a13a:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800a13c:	230f      	movs	r3, #15
 800a13e:	18fb      	adds	r3, r7, r3
 800a140:	1cfa      	adds	r2, r7, #3
 800a142:	7812      	ldrb	r2, [r2, #0]
 800a144:	701a      	strb	r2, [r3, #0]
 800a146:	e015      	b.n	800a174 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 800a148:	200f      	movs	r0, #15
 800a14a:	183b      	adds	r3, r7, r0
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	18d2      	adds	r2, r2, r3
 800a152:	240e      	movs	r4, #14
 800a154:	193b      	adds	r3, r7, r4
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	7811      	ldrb	r1, [r2, #0]
 800a15a:	2208      	movs	r2, #8
 800a15c:	18ba      	adds	r2, r7, r2
 800a15e:	54d1      	strb	r1, [r2, r3]
    pos++;
 800a160:	193b      	adds	r3, r7, r4
 800a162:	781a      	ldrb	r2, [r3, #0]
 800a164:	193b      	adds	r3, r7, r4
 800a166:	3201      	adds	r2, #1
 800a168:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800a16a:	183b      	adds	r3, r7, r0
 800a16c:	781a      	ldrb	r2, [r3, #0]
 800a16e:	183b      	adds	r3, r7, r0
 800a170:	3201      	adds	r2, #1
 800a172:	701a      	strb	r2, [r3, #0]
 800a174:	200f      	movs	r0, #15
 800a176:	183a      	adds	r2, r7, r0
 800a178:	1cbb      	adds	r3, r7, #2
 800a17a:	7812      	ldrb	r2, [r2, #0]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d9e2      	bls.n	800a148 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 800a182:	230e      	movs	r3, #14
 800a184:	18fb      	adds	r3, r7, r3
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	2208      	movs	r2, #8
 800a18a:	18ba      	adds	r2, r7, r2
 800a18c:	2100      	movs	r1, #0
 800a18e:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 800a190:	1cfb      	adds	r3, r7, #3
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	2b13      	cmp	r3, #19
 800a196:	d849      	bhi.n	800a22c <aBuff2int+0x110>
    if (start == 17) { //month
 800a198:	1cfb      	adds	r3, r7, #3
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	2b11      	cmp	r3, #17
 800a19e:	d122      	bne.n	800a1e6 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 800a1a0:	183b      	adds	r3, r7, r0
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	701a      	strb	r2, [r3, #0]
 800a1a6:	e018      	b.n	800a1da <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 800a1a8:	240f      	movs	r4, #15
 800a1aa:	193b      	adds	r3, r7, r4
 800a1ac:	781a      	ldrb	r2, [r3, #0]
 800a1ae:	4b25      	ldr	r3, [pc, #148]	@ (800a244 <aBuff2int+0x128>)
 800a1b0:	0092      	lsls	r2, r2, #2
 800a1b2:	58d2      	ldr	r2, [r2, r3]
 800a1b4:	2308      	movs	r3, #8
 800a1b6:	18fb      	adds	r3, r7, r3
 800a1b8:	0011      	movs	r1, r2
 800a1ba:	0018      	movs	r0, r3
 800a1bc:	f7f5 ffcc 	bl	8000158 <strcmp>
 800a1c0:	1e03      	subs	r3, r0, #0
 800a1c2:	d104      	bne.n	800a1ce <aBuff2int+0xb2>
          return i+1;
 800a1c4:	193b      	adds	r3, r7, r4
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	e035      	b.n	800a23a <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800a1ce:	210f      	movs	r1, #15
 800a1d0:	187b      	adds	r3, r7, r1
 800a1d2:	781a      	ldrb	r2, [r3, #0]
 800a1d4:	187b      	adds	r3, r7, r1
 800a1d6:	3201      	adds	r2, #1
 800a1d8:	701a      	strb	r2, [r3, #0]
 800a1da:	230f      	movs	r3, #15
 800a1dc:	18fb      	adds	r3, r7, r3
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	2b0b      	cmp	r3, #11
 800a1e2:	d9e1      	bls.n	800a1a8 <aBuff2int+0x8c>
 800a1e4:	e022      	b.n	800a22c <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 800a1e6:	230f      	movs	r3, #15
 800a1e8:	18fb      	adds	r3, r7, r3
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	701a      	strb	r2, [r3, #0]
 800a1ee:	e018      	b.n	800a222 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 800a1f0:	240f      	movs	r4, #15
 800a1f2:	193b      	adds	r3, r7, r4
 800a1f4:	781a      	ldrb	r2, [r3, #0]
 800a1f6:	4b14      	ldr	r3, [pc, #80]	@ (800a248 <aBuff2int+0x12c>)
 800a1f8:	0092      	lsls	r2, r2, #2
 800a1fa:	58d2      	ldr	r2, [r2, r3]
 800a1fc:	2308      	movs	r3, #8
 800a1fe:	18fb      	adds	r3, r7, r3
 800a200:	0011      	movs	r1, r2
 800a202:	0018      	movs	r0, r3
 800a204:	f7f5 ffa8 	bl	8000158 <strcmp>
 800a208:	1e03      	subs	r3, r0, #0
 800a20a:	d104      	bne.n	800a216 <aBuff2int+0xfa>
          return i+1;
 800a20c:	193b      	adds	r3, r7, r4
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	3301      	adds	r3, #1
 800a212:	b2db      	uxtb	r3, r3
 800a214:	e011      	b.n	800a23a <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 800a216:	210f      	movs	r1, #15
 800a218:	187b      	adds	r3, r7, r1
 800a21a:	781a      	ldrb	r2, [r3, #0]
 800a21c:	187b      	adds	r3, r7, r1
 800a21e:	3201      	adds	r2, #1
 800a220:	701a      	strb	r2, [r3, #0]
 800a222:	230f      	movs	r3, #15
 800a224:	18fb      	adds	r3, r7, r3
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	2b06      	cmp	r3, #6
 800a22a:	d9e1      	bls.n	800a1f0 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800a22c:	2308      	movs	r3, #8
 800a22e:	18fb      	adds	r3, r7, r3
 800a230:	0018      	movs	r0, r3
 800a232:	f01a fd08 	bl	8024c46 <atoi>
 800a236:	0003      	movs	r3, r0
 800a238:	b2db      	uxtb	r3, r3
}
 800a23a:	0018      	movs	r0, r3
 800a23c:	46bd      	mov	sp, r7
 800a23e:	b005      	add	sp, #20
 800a240:	bd90      	pop	{r4, r7, pc}
 800a242:	46c0      	nop			@ (mov r8, r8)
 800a244:	2000005c 	.word	0x2000005c
 800a248:	20000040 	.word	0x20000040

0800a24c <ParseTime>:

void ParseTime(char* buffer) {
 800a24c:	b590      	push	{r4, r7, lr}
 800a24e:	b087      	sub	sp, #28
 800a250:	af02      	add	r7, sp, #8
 800a252:	6078      	str	r0, [r7, #4]
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a254:	4a7b      	ldr	r2, [pc, #492]	@ (800a444 <ParseTime+0x1f8>)
 800a256:	4b7c      	ldr	r3, [pc, #496]	@ (800a448 <ParseTime+0x1fc>)
 800a258:	0011      	movs	r1, r2
 800a25a:	0018      	movs	r0, r3
 800a25c:	f000 f96c 	bl	800a538 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2219      	movs	r2, #25
 800a264:	2118      	movs	r1, #24
 800a266:	0018      	movs	r0, r3
 800a268:	f7ff ff58 	bl	800a11c <aBuff2int>
 800a26c:	0003      	movs	r3, r0
 800a26e:	001a      	movs	r2, r3
 800a270:	4b75      	ldr	r3, [pc, #468]	@ (800a448 <ParseTime+0x1fc>)
 800a272:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	221c      	movs	r2, #28
 800a278:	211b      	movs	r1, #27
 800a27a:	0018      	movs	r0, r3
 800a27c:	f7ff ff4e 	bl	800a11c <aBuff2int>
 800a280:	0003      	movs	r3, r0
 800a282:	001a      	movs	r2, r3
 800a284:	4b70      	ldr	r3, [pc, #448]	@ (800a448 <ParseTime+0x1fc>)
 800a286:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	221f      	movs	r2, #31
 800a28c:	211e      	movs	r1, #30
 800a28e:	0018      	movs	r0, r3
 800a290:	f7ff ff44 	bl	800a11c <aBuff2int>
 800a294:	0003      	movs	r3, r0
 800a296:	001a      	movs	r2, r3
 800a298:	4b6b      	ldr	r3, [pc, #428]	@ (800a448 <ParseTime+0x1fc>)
 800a29a:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2224      	movs	r2, #36	@ 0x24
 800a2a0:	2123      	movs	r1, #35	@ 0x23
 800a2a2:	0018      	movs	r0, r3
 800a2a4:	f7ff ff3a 	bl	800a11c <aBuff2int>
 800a2a8:	0003      	movs	r3, r0
 800a2aa:	001a      	movs	r2, r3
 800a2ac:	4b65      	ldr	r3, [pc, #404]	@ (800a444 <ParseTime+0x1f8>)
 800a2ae:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2213      	movs	r2, #19
 800a2b4:	2111      	movs	r1, #17
 800a2b6:	0018      	movs	r0, r3
 800a2b8:	f7ff ff30 	bl	800a11c <aBuff2int>
 800a2bc:	0003      	movs	r3, r0
 800a2be:	001a      	movs	r2, r3
 800a2c0:	4b60      	ldr	r3, [pc, #384]	@ (800a444 <ParseTime+0x1f8>)
 800a2c2:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2216      	movs	r2, #22
 800a2c8:	2115      	movs	r1, #21
 800a2ca:	0018      	movs	r0, r3
 800a2cc:	f7ff ff26 	bl	800a11c <aBuff2int>
 800a2d0:	0003      	movs	r3, r0
 800a2d2:	001a      	movs	r2, r3
 800a2d4:	4b5b      	ldr	r3, [pc, #364]	@ (800a444 <ParseTime+0x1f8>)
 800a2d6:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	220f      	movs	r2, #15
 800a2dc:	210d      	movs	r1, #13
 800a2de:	0018      	movs	r0, r3
 800a2e0:	f7ff ff1c 	bl	800a11c <aBuff2int>
 800a2e4:	0003      	movs	r3, r0
 800a2e6:	001a      	movs	r2, r3
 800a2e8:	4b56      	ldr	r3, [pc, #344]	@ (800a444 <ParseTime+0x1f8>)
 800a2ea:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800a2ec:	4b56      	ldr	r3, [pc, #344]	@ (800a448 <ParseTime+0x1fc>)
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	001c      	movs	r4, r3
 800a2f2:	4b55      	ldr	r3, [pc, #340]	@ (800a448 <ParseTime+0x1fc>)
 800a2f4:	785b      	ldrb	r3, [r3, #1]
 800a2f6:	0018      	movs	r0, r3
 800a2f8:	4b53      	ldr	r3, [pc, #332]	@ (800a448 <ParseTime+0x1fc>)
 800a2fa:	789b      	ldrb	r3, [r3, #2]
 800a2fc:	4a53      	ldr	r2, [pc, #332]	@ (800a44c <ParseTime+0x200>)
 800a2fe:	4954      	ldr	r1, [pc, #336]	@ (800a450 <ParseTime+0x204>)
 800a300:	9301      	str	r3, [sp, #4]
 800a302:	9000      	str	r0, [sp, #0]
 800a304:	0023      	movs	r3, r4
 800a306:	2003      	movs	r0, #3
 800a308:	f009 fdd6 	bl	8013eb8 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 800a30c:	4b4d      	ldr	r3, [pc, #308]	@ (800a444 <ParseTime+0x1f8>)
 800a30e:	789b      	ldrb	r3, [r3, #2]
 800a310:	001c      	movs	r4, r3
 800a312:	4b4c      	ldr	r3, [pc, #304]	@ (800a444 <ParseTime+0x1f8>)
 800a314:	785b      	ldrb	r3, [r3, #1]
 800a316:	0018      	movs	r0, r3
 800a318:	4b4a      	ldr	r3, [pc, #296]	@ (800a444 <ParseTime+0x1f8>)
 800a31a:	78db      	ldrb	r3, [r3, #3]
 800a31c:	4a4d      	ldr	r2, [pc, #308]	@ (800a454 <ParseTime+0x208>)
 800a31e:	494c      	ldr	r1, [pc, #304]	@ (800a450 <ParseTime+0x204>)
 800a320:	9301      	str	r3, [sp, #4]
 800a322:	9000      	str	r0, [sp, #0]
 800a324:	0023      	movs	r3, r4
 800a326:	2003      	movs	r0, #3
 800a328:	f009 fdc6 	bl	8013eb8 <CreateLine>
  RTC_SetTime(&currentTime);
 800a32c:	4b46      	ldr	r3, [pc, #280]	@ (800a448 <ParseTime+0x1fc>)
 800a32e:	0018      	movs	r0, r3
 800a330:	f000 f89e 	bl	800a470 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800a334:	4b43      	ldr	r3, [pc, #268]	@ (800a444 <ParseTime+0x1f8>)
 800a336:	0018      	movs	r0, r3
 800a338:	f000 f8c0 	bl	800a4bc <RTC_SetDate>
/* DST insert === */
  // DST == DaySavingTime == Zomertijd
  bool dst = false;
 800a33c:	230f      	movs	r3, #15
 800a33e:	18fb      	adds	r3, r7, r3
 800a340:	2200      	movs	r2, #0
 800a342:	701a      	strb	r2, [r3, #0]

  int mnd = currentDate.Month;
 800a344:	4b3f      	ldr	r3, [pc, #252]	@ (800a444 <ParseTime+0x1f8>)
 800a346:	785b      	ldrb	r3, [r3, #1]
 800a348:	60bb      	str	r3, [r7, #8]
  dst = !((mnd < 3) || (mnd > 10)); // between october and march
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	dd04      	ble.n	800a35a <ParseTime+0x10e>
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	2b0a      	cmp	r3, #10
 800a354:	dc01      	bgt.n	800a35a <ParseTime+0x10e>
 800a356:	2201      	movs	r2, #1
 800a358:	e000      	b.n	800a35c <ParseTime+0x110>
 800a35a:	2200      	movs	r2, #0
 800a35c:	200f      	movs	r0, #15
 800a35e:	183b      	adds	r3, r7, r0
 800a360:	701a      	strb	r2, [r3, #0]
 800a362:	781a      	ldrb	r2, [r3, #0]
 800a364:	2101      	movs	r1, #1
 800a366:	400a      	ands	r2, r1
 800a368:	701a      	strb	r2, [r3, #0]
  if (dst)
 800a36a:	0002      	movs	r2, r0
 800a36c:	18bb      	adds	r3, r7, r2
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d01d      	beq.n	800a3b0 <ParseTime+0x164>
  {
    if ((mnd == 3) && (currentDate.WeekDay == 7) && (currentDate.Date < 25)) {
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	2b03      	cmp	r3, #3
 800a378:	d10b      	bne.n	800a392 <ParseTime+0x146>
 800a37a:	4b32      	ldr	r3, [pc, #200]	@ (800a444 <ParseTime+0x1f8>)
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	2b07      	cmp	r3, #7
 800a380:	d107      	bne.n	800a392 <ParseTime+0x146>
 800a382:	4b30      	ldr	r3, [pc, #192]	@ (800a444 <ParseTime+0x1f8>)
 800a384:	789b      	ldrb	r3, [r3, #2]
 800a386:	2b18      	cmp	r3, #24
 800a388:	d803      	bhi.n	800a392 <ParseTime+0x146>
      // starts last sunday of march
      // weekday -> sunday returns 7
        dst = false;
 800a38a:	18bb      	adds	r3, r7, r2
 800a38c:	2200      	movs	r2, #0
 800a38e:	701a      	strb	r2, [r3, #0]
 800a390:	e00e      	b.n	800a3b0 <ParseTime+0x164>
    }
    else if ((mnd == 10) && (currentDate.WeekDay == 7) && (currentDate.Date < 25))
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	2b0a      	cmp	r3, #10
 800a396:	d10b      	bne.n	800a3b0 <ParseTime+0x164>
 800a398:	4b2a      	ldr	r3, [pc, #168]	@ (800a444 <ParseTime+0x1f8>)
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	2b07      	cmp	r3, #7
 800a39e:	d107      	bne.n	800a3b0 <ParseTime+0x164>
 800a3a0:	4b28      	ldr	r3, [pc, #160]	@ (800a444 <ParseTime+0x1f8>)
 800a3a2:	789b      	ldrb	r3, [r3, #2]
 800a3a4:	2b18      	cmp	r3, #24
 800a3a6:	d803      	bhi.n	800a3b0 <ParseTime+0x164>
    {
        dst = false;
 800a3a8:	230f      	movs	r3, #15
 800a3aa:	18fb      	adds	r3, r7, r3
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	701a      	strb	r2, [r3, #0]
    }
  }
  if (dst) {
 800a3b0:	230f      	movs	r3, #15
 800a3b2:	18fb      	adds	r3, r7, r3
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d02a      	beq.n	800a410 <ParseTime+0x1c4>
    Info("Daylight Saving Time active");
 800a3ba:	4a27      	ldr	r2, [pc, #156]	@ (800a458 <ParseTime+0x20c>)
 800a3bc:	4b27      	ldr	r3, [pc, #156]	@ (800a45c <ParseTime+0x210>)
 800a3be:	0019      	movs	r1, r3
 800a3c0:	2002      	movs	r0, #2
 800a3c2:	f009 fd79 	bl	8013eb8 <CreateLine>
    HAL_Delay(1000);
 800a3c6:	23fa      	movs	r3, #250	@ 0xfa
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	0018      	movs	r0, r3
 800a3cc:	f00a fafe 	bl	80149cc <HAL_Delay>
    HAL_RTC_DST_Add1Hour(RealTime_Handle); // CEST or CET
 800a3d0:	4b23      	ldr	r3, [pc, #140]	@ (800a460 <ParseTime+0x214>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	0018      	movs	r0, r3
 800a3d6:	f012 f97f 	bl	801c6d8 <HAL_RTC_DST_Add1Hour>
    HAL_Delay(1000);
 800a3da:	23fa      	movs	r3, #250	@ 0xfa
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	0018      	movs	r0, r3
 800a3e0:	f00a faf4 	bl	80149cc <HAL_Delay>
    RTC_GetTime(&currentTime, &currentDate);
 800a3e4:	4a17      	ldr	r2, [pc, #92]	@ (800a444 <ParseTime+0x1f8>)
 800a3e6:	4b18      	ldr	r3, [pc, #96]	@ (800a448 <ParseTime+0x1fc>)
 800a3e8:	0011      	movs	r1, r2
 800a3ea:	0018      	movs	r0, r3
 800a3ec:	f000 f8a4 	bl	800a538 <RTC_GetTime>
    Debug("Current RTC time after update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800a3f0:	4b15      	ldr	r3, [pc, #84]	@ (800a448 <ParseTime+0x1fc>)
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	001c      	movs	r4, r3
 800a3f6:	4b14      	ldr	r3, [pc, #80]	@ (800a448 <ParseTime+0x1fc>)
 800a3f8:	785b      	ldrb	r3, [r3, #1]
 800a3fa:	0018      	movs	r0, r3
 800a3fc:	4b12      	ldr	r3, [pc, #72]	@ (800a448 <ParseTime+0x1fc>)
 800a3fe:	789b      	ldrb	r3, [r3, #2]
 800a400:	4a18      	ldr	r2, [pc, #96]	@ (800a464 <ParseTime+0x218>)
 800a402:	4913      	ldr	r1, [pc, #76]	@ (800a450 <ParseTime+0x204>)
 800a404:	9301      	str	r3, [sp, #4]
 800a406:	9000      	str	r0, [sp, #0]
 800a408:	0023      	movs	r3, r4
 800a40a:	2003      	movs	r0, #3
 800a40c:	f009 fd54 	bl	8013eb8 <CreateLine>
  }

//=================
  if (currentDate.WeekDay == 2) {
 800a410:	4b0c      	ldr	r3, [pc, #48]	@ (800a444 <ParseTime+0x1f8>)
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	2b02      	cmp	r3, #2
 800a416:	d104      	bne.n	800a422 <ParseTime+0x1d6>
    reset_fanCleaningDone(); // reset the cleaning flag done
 800a418:	f004 fa16 	bl	800e848 <reset_fanCleaningDone>
    dstchkd = false; // reset the dst flag done
 800a41c:	4b12      	ldr	r3, [pc, #72]	@ (800a468 <ParseTime+0x21c>)
 800a41e:	2200      	movs	r2, #0
 800a420:	701a      	strb	r2, [r3, #0]
  }
  if (posixBootTime == 0) {
 800a422:	4b12      	ldr	r3, [pc, #72]	@ (800a46c <ParseTime+0x220>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d108      	bne.n	800a43c <ParseTime+0x1f0>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800a42a:	4a07      	ldr	r2, [pc, #28]	@ (800a448 <ParseTime+0x1fc>)
 800a42c:	4b05      	ldr	r3, [pc, #20]	@ (800a444 <ParseTime+0x1f8>)
 800a42e:	0011      	movs	r1, r2
 800a430:	0018      	movs	r0, r3
 800a432:	f000 fa81 	bl	800a938 <makeTime>
 800a436:	0002      	movs	r2, r0
 800a438:	4b0c      	ldr	r3, [pc, #48]	@ (800a46c <ParseTime+0x220>)
 800a43a:	601a      	str	r2, [r3, #0]
  }
}
 800a43c:	46c0      	nop			@ (mov r8, r8)
 800a43e:	46bd      	mov	sp, r7
 800a440:	b005      	add	sp, #20
 800a442:	bd90      	pop	{r4, r7, pc}
 800a444:	20000e68 	.word	0x20000e68
 800a448:	20000e54 	.word	0x20000e54
 800a44c:	0802c1f8 	.word	0x0802c1f8
 800a450:	0802c230 	.word	0x0802c230
 800a454:	0802c234 	.word	0x0802c234
 800a458:	0802c268 	.word	0x0802c268
 800a45c:	0802c1f4 	.word	0x0802c1f4
 800a460:	20000e50 	.word	0x20000e50
 800a464:	0802c284 	.word	0x0802c284
 800a468:	20000e40 	.word	0x20000e40
 800a46c:	20000e44 	.word	0x20000e44

0800a470 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800a48a:	4b09      	ldr	r3, [pc, #36]	@ (800a4b0 <RTC_SetTime+0x40>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	6879      	ldr	r1, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	0018      	movs	r0, r3
 800a494:	f011 ff0c 	bl	801c2b0 <HAL_RTC_SetTime>
 800a498:	1e03      	subs	r3, r0, #0
 800a49a:	d005      	beq.n	800a4a8 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 800a49c:	4a05      	ldr	r2, [pc, #20]	@ (800a4b4 <RTC_SetTime+0x44>)
 800a49e:	4b06      	ldr	r3, [pc, #24]	@ (800a4b8 <RTC_SetTime+0x48>)
 800a4a0:	0019      	movs	r1, r3
 800a4a2:	2001      	movs	r0, #1
 800a4a4:	f009 fd08 	bl	8013eb8 <CreateLine>
    }
}
 800a4a8:	46c0      	nop			@ (mov r8, r8)
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	b002      	add	sp, #8
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	20000e50 	.word	0x20000e50
 800a4b4:	0802c2b8 	.word	0x0802c2b8
 800a4b8:	0802c2d4 	.word	0x0802c2d4

0800a4bc <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 800a4c4:	4b16      	ldr	r3, [pc, #88]	@ (800a520 <RTC_SetDate+0x64>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6879      	ldr	r1, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	0018      	movs	r0, r3
 800a4ce:	f011 fff7 	bl	801c4c0 <HAL_RTC_SetDate>
 800a4d2:	1e03      	subs	r3, r0, #0
 800a4d4:	d005      	beq.n	800a4e2 <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 800a4d6:	4a13      	ldr	r2, [pc, #76]	@ (800a524 <RTC_SetDate+0x68>)
 800a4d8:	4b13      	ldr	r3, [pc, #76]	@ (800a528 <RTC_SetDate+0x6c>)
 800a4da:	0019      	movs	r1, r3
 800a4dc:	2001      	movs	r0, #1
 800a4de:	f009 fceb 	bl	8013eb8 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 800a4e2:	4b0f      	ldr	r3, [pc, #60]	@ (800a520 <RTC_SetDate+0x64>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2101      	movs	r1, #1
 800a4e8:	0018      	movs	r0, r3
 800a4ea:	f012 fb4d 	bl	801cb88 <HAL_RTCEx_BKUPRead>
 800a4ee:	0003      	movs	r3, r0
 800a4f0:	4a0e      	ldr	r2, [pc, #56]	@ (800a52c <RTC_SetDate+0x70>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d010      	beq.n	800a518 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800a4f6:	4a0e      	ldr	r2, [pc, #56]	@ (800a530 <RTC_SetDate+0x74>)
 800a4f8:	4b0e      	ldr	r3, [pc, #56]	@ (800a534 <RTC_SetDate+0x78>)
 800a4fa:	0019      	movs	r1, r3
 800a4fc:	2003      	movs	r0, #3
 800a4fe:	f009 fcdb 	bl	8013eb8 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 800a502:	f010 fe6b 	bl	801b1dc <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800a506:	4b06      	ldr	r3, [pc, #24]	@ (800a520 <RTC_SetDate+0x64>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a08      	ldr	r2, [pc, #32]	@ (800a52c <RTC_SetDate+0x70>)
 800a50c:	2101      	movs	r1, #1
 800a50e:	0018      	movs	r0, r3
 800a510:	f012 fb22 	bl	801cb58 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 800a514:	f010 fe70 	bl	801b1f8 <HAL_PWR_DisableBkUpAccess>
    }
}
 800a518:	46c0      	nop			@ (mov r8, r8)
 800a51a:	46bd      	mov	sp, r7
 800a51c:	b002      	add	sp, #8
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	20000e50 	.word	0x20000e50
 800a524:	0802c2d8 	.word	0x0802c2d8
 800a528:	0802c2d4 	.word	0x0802c2d4
 800a52c:	0000bebe 	.word	0x0000bebe
 800a530:	0802c2f4 	.word	0x0802c2f4
 800a534:	0802c230 	.word	0x0802c230

0800a538 <RTC_GetTime>:

void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 800a538:	b590      	push	{r4, r7, lr}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800a542:	240f      	movs	r4, #15
 800a544:	193b      	adds	r3, r7, r4
 800a546:	2201      	movs	r2, #1
 800a548:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800a54a:	230e      	movs	r3, #14
 800a54c:	18fb      	adds	r3, r7, r3
 800a54e:	2200      	movs	r2, #0
 800a550:	701a      	strb	r2, [r3, #0]
// Battery_Status status;
//  status = powerCheck();
//  if ( status == BATTERY_CRITICAL) {
  if (batteryCharge  < 3.77) {
 800a552:	4b31      	ldr	r3, [pc, #196]	@ (800a618 <RTC_GetTime+0xe0>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	1c18      	adds	r0, r3, #0
 800a558:	f7f9 f99c 	bl	8003894 <__aeabi_f2d>
 800a55c:	4a2f      	ldr	r2, [pc, #188]	@ (800a61c <RTC_GetTime+0xe4>)
 800a55e:	4b30      	ldr	r3, [pc, #192]	@ (800a620 <RTC_GetTime+0xe8>)
 800a560:	f7f5 ffac 	bl	80004bc <__aeabi_dcmplt>
 800a564:	1e03      	subs	r3, r0, #0
 800a566:	d004      	beq.n	800a572 <RTC_GetTime+0x3a>
    //    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800a568:	193b      	adds	r3, r7, r4
 800a56a:	781a      	ldrb	r2, [r3, #0]
 800a56c:	193b      	adds	r3, r7, r4
 800a56e:	3201      	adds	r2, #1
 800a570:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 800a572:	230d      	movs	r3, #13
 800a574:	18fb      	adds	r3, r7, r3
 800a576:	2200      	movs	r2, #0
 800a578:	701a      	strb	r2, [r3, #0]
 800a57a:	e03f      	b.n	800a5fc <RTC_GetTime+0xc4>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800a57c:	4b29      	ldr	r3, [pc, #164]	@ (800a624 <RTC_GetTime+0xec>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	6879      	ldr	r1, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	0018      	movs	r0, r3
 800a586:	f011 ff3d 	bl	801c404 <HAL_RTC_GetTime>
 800a58a:	1e03      	subs	r3, r0, #0
 800a58c:	d005      	beq.n	800a59a <RTC_GetTime+0x62>
      Error("Error getting time from RTC");
 800a58e:	4a26      	ldr	r2, [pc, #152]	@ (800a628 <RTC_GetTime+0xf0>)
 800a590:	4b26      	ldr	r3, [pc, #152]	@ (800a62c <RTC_GetTime+0xf4>)
 800a592:	0019      	movs	r1, r3
 800a594:	2001      	movs	r0, #1
 800a596:	f009 fc8f 	bl	8013eb8 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 800a59a:	4b22      	ldr	r3, [pc, #136]	@ (800a624 <RTC_GetTime+0xec>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	6839      	ldr	r1, [r7, #0]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	0018      	movs	r0, r3
 800a5a4:	f012 f820 	bl	801c5e8 <HAL_RTC_GetDate>
 800a5a8:	1e03      	subs	r3, r0, #0
 800a5aa:	d005      	beq.n	800a5b8 <RTC_GetTime+0x80>
      Error("Error getting date from RTC");
 800a5ac:	4a20      	ldr	r2, [pc, #128]	@ (800a630 <RTC_GetTime+0xf8>)
 800a5ae:	4b1f      	ldr	r3, [pc, #124]	@ (800a62c <RTC_GetTime+0xf4>)
 800a5b0:	0019      	movs	r1, r3
 800a5b2:	2001      	movs	r0, #1
 800a5b4:	f009 fc80 	bl	8013eb8 <CreateLine>
    }
//    if ( status == BATTERY_CRITICAL) {
    if (batteryCharge  < 3.77) {
 800a5b8:	4b17      	ldr	r3, [pc, #92]	@ (800a618 <RTC_GetTime+0xe0>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	1c18      	adds	r0, r3, #0
 800a5be:	f7f9 f969 	bl	8003894 <__aeabi_f2d>
 800a5c2:	4a16      	ldr	r2, [pc, #88]	@ (800a61c <RTC_GetTime+0xe4>)
 800a5c4:	4b16      	ldr	r3, [pc, #88]	@ (800a620 <RTC_GetTime+0xe8>)
 800a5c6:	f7f5 ff79 	bl	80004bc <__aeabi_dcmplt>
 800a5ca:	1e03      	subs	r3, r0, #0
 800a5cc:	d010      	beq.n	800a5f0 <RTC_GetTime+0xb8>
      if (prevValue != gTime->Hours) {
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	210e      	movs	r1, #14
 800a5d4:	187a      	adds	r2, r7, r1
 800a5d6:	7812      	ldrb	r2, [r2, #0]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d018      	beq.n	800a60e <RTC_GetTime+0xd6>
        prevValue = gTime->Hours;
 800a5dc:	187b      	adds	r3, r7, r1
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	7812      	ldrb	r2, [r2, #0]
 800a5e2:	701a      	strb	r2, [r3, #0]
        t++;
 800a5e4:	210f      	movs	r1, #15
 800a5e6:	187b      	adds	r3, r7, r1
 800a5e8:	781a      	ldrb	r2, [r3, #0]
 800a5ea:	187b      	adds	r3, r7, r1
 800a5ec:	3201      	adds	r2, #1
 800a5ee:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 800a5f0:	210d      	movs	r1, #13
 800a5f2:	187b      	adds	r3, r7, r1
 800a5f4:	781a      	ldrb	r2, [r3, #0]
 800a5f6:	187b      	adds	r3, r7, r1
 800a5f8:	3201      	adds	r2, #1
 800a5fa:	701a      	strb	r2, [r3, #0]
 800a5fc:	230d      	movs	r3, #13
 800a5fe:	18fa      	adds	r2, r7, r3
 800a600:	230f      	movs	r3, #15
 800a602:	18fb      	adds	r3, r7, r3
 800a604:	7812      	ldrb	r2, [r2, #0]
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d3b7      	bcc.n	800a57c <RTC_GetTime+0x44>
 800a60c:	e000      	b.n	800a610 <RTC_GetTime+0xd8>
      }
      else {
        return;
 800a60e:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 800a610:	46bd      	mov	sp, r7
 800a612:	b005      	add	sp, #20
 800a614:	bd90      	pop	{r4, r7, pc}
 800a616:	46c0      	nop			@ (mov r8, r8)
 800a618:	20002158 	.word	0x20002158
 800a61c:	c28f5c29 	.word	0xc28f5c29
 800a620:	400e28f5 	.word	0x400e28f5
 800a624:	20000e50 	.word	0x20000e50
 800a628:	0802c30c 	.word	0x0802c30c
 800a62c:	0802c2d4 	.word	0x0802c2d4
 800a630:	0802c328 	.word	0x0802c328

0800a634 <getPosixTime>:

// Functie om de tijd uit te lezen
uint32_t getPosixTime(void) {
 800a634:	b580      	push	{r7, lr}
 800a636:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a638:	4a07      	ldr	r2, [pc, #28]	@ (800a658 <getPosixTime+0x24>)
 800a63a:	4b08      	ldr	r3, [pc, #32]	@ (800a65c <getPosixTime+0x28>)
 800a63c:	0011      	movs	r1, r2
 800a63e:	0018      	movs	r0, r3
 800a640:	f7ff ff7a 	bl	800a538 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800a644:	4a05      	ldr	r2, [pc, #20]	@ (800a65c <getPosixTime+0x28>)
 800a646:	4b04      	ldr	r3, [pc, #16]	@ (800a658 <getPosixTime+0x24>)
 800a648:	0011      	movs	r1, r2
 800a64a:	0018      	movs	r0, r3
 800a64c:	f000 f974 	bl	800a938 <makeTime>
 800a650:	0003      	movs	r3, r0
}
 800a652:	0018      	movs	r0, r3
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	20000e68 	.word	0x20000e68
 800a65c:	20000e54 	.word	0x20000e54

0800a660 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 800a660:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a662:	b087      	sub	sp, #28
 800a664:	af04      	add	r7, sp, #16
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
//  RTC_TimeTypeDef currentTime;
//  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 800a66a:	4a12      	ldr	r2, [pc, #72]	@ (800a6b4 <getUTCfromPosixTime+0x54>)
 800a66c:	4912      	ldr	r1, [pc, #72]	@ (800a6b8 <getUTCfromPosixTime+0x58>)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	0018      	movs	r0, r3
 800a672:	f000 fa2b 	bl	800aacc <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a676:	4b10      	ldr	r3, [pc, #64]	@ (800a6b8 <getUTCfromPosixTime+0x58>)
 800a678:	789b      	ldrb	r3, [r3, #2]
 800a67a:	001e      	movs	r6, r3
 800a67c:	4b0e      	ldr	r3, [pc, #56]	@ (800a6b8 <getUTCfromPosixTime+0x58>)
 800a67e:	785b      	ldrb	r3, [r3, #1]
 800a680:	469c      	mov	ip, r3
 800a682:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b8 <getUTCfromPosixTime+0x58>)
 800a684:	78db      	ldrb	r3, [r3, #3]
 800a686:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a688:	4b0a      	ldr	r3, [pc, #40]	@ (800a6b4 <getUTCfromPosixTime+0x54>)
 800a68a:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a68c:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a68e:	4b09      	ldr	r3, [pc, #36]	@ (800a6b4 <getUTCfromPosixTime+0x54>)
 800a690:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a692:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a694:	4b07      	ldr	r3, [pc, #28]	@ (800a6b4 <getUTCfromPosixTime+0x54>)
 800a696:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a698:	4908      	ldr	r1, [pc, #32]	@ (800a6bc <getUTCfromPosixTime+0x5c>)
 800a69a:	6838      	ldr	r0, [r7, #0]
 800a69c:	9303      	str	r3, [sp, #12]
 800a69e:	9502      	str	r5, [sp, #8]
 800a6a0:	9401      	str	r4, [sp, #4]
 800a6a2:	9200      	str	r2, [sp, #0]
 800a6a4:	4663      	mov	r3, ip
 800a6a6:	0032      	movs	r2, r6
 800a6a8:	f01b ff22 	bl	80264f0 <siprintf>
}
 800a6ac:	46c0      	nop			@ (mov r8, r8)
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	b003      	add	sp, #12
 800a6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6b4:	20000e54 	.word	0x20000e54
 800a6b8:	20000e68 	.word	0x20000e68
 800a6bc:	0802c344 	.word	0x0802c344

0800a6c0 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800a6c8:	4b10      	ldr	r3, [pc, #64]	@ (800a70c <RTC_SetWakeUpTimer+0x4c>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	0018      	movs	r0, r3
 800a6ce:	f012 f9a7 	bl	801ca20 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 800a6d2:	4b0e      	ldr	r3, [pc, #56]	@ (800a70c <RTC_SetWakeUpTimer+0x4c>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	22ff      	movs	r2, #255	@ 0xff
 800a6dc:	401a      	ands	r2, r3
 800a6de:	4b0b      	ldr	r3, [pc, #44]	@ (800a70c <RTC_SetWakeUpTimer+0x4c>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	490a      	ldr	r1, [pc, #40]	@ (800a710 <RTC_SetWakeUpTimer+0x50>)
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800a6ea:	4b0a      	ldr	r3, [pc, #40]	@ (800a714 <RTC_SetWakeUpTimer+0x54>)
 800a6ec:	2280      	movs	r2, #128	@ 0x80
 800a6ee:	0352      	lsls	r2, r2, #13
 800a6f0:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 800a6f2:	4b06      	ldr	r3, [pc, #24]	@ (800a70c <RTC_SetWakeUpTimer+0x4c>)
 800a6f4:	6818      	ldr	r0, [r3, #0]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	2204      	movs	r2, #4
 800a6fc:	0019      	movs	r1, r3
 800a6fe:	f012 f8b7 	bl	801c870 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 800a702:	46c0      	nop			@ (mov r8, r8)
 800a704:	46bd      	mov	sp, r7
 800a706:	b002      	add	sp, #8
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	46c0      	nop			@ (mov r8, r8)
 800a70c:	20000e50 	.word	0x20000e50
 800a710:	fffffb7f 	.word	0xfffffb7f
 800a714:	40010400 	.word	0x40010400

0800a718 <Enter_Stop_Mode_for_empty_battery>:
  HAL_PWR_EnterSTANDBYMode(); // Not such a good idea, the esp is powered when gpio is high impedance
}
*/

void Enter_Stop_Mode_for_empty_battery(uint16_t sleepTime)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af02      	add	r7, sp, #8
 800a71e:	0002      	movs	r2, r0
 800a720:	1dbb      	adds	r3, r7, #6
 800a722:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a724:	4b22      	ldr	r3, [pc, #136]	@ (800a7b0 <Enter_Stop_Mode_for_empty_battery+0x98>)
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d001      	beq.n	800a730 <Enter_Stop_Mode_for_empty_battery+0x18>
    sen5x_Power_Off();
 800a72c:	f004 f860 	bl	800e7f0 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", batteryCharge);
 800a730:	4b20      	ldr	r3, [pc, #128]	@ (800a7b4 <Enter_Stop_Mode_for_empty_battery+0x9c>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	1c18      	adds	r0, r3, #0
 800a736:	f7f9 f8ad 	bl	8003894 <__aeabi_f2d>
 800a73a:	0002      	movs	r2, r0
 800a73c:	000b      	movs	r3, r1
 800a73e:	481e      	ldr	r0, [pc, #120]	@ (800a7b8 <Enter_Stop_Mode_for_empty_battery+0xa0>)
 800a740:	491e      	ldr	r1, [pc, #120]	@ (800a7bc <Enter_Stop_Mode_for_empty_battery+0xa4>)
 800a742:	9200      	str	r2, [sp, #0]
 800a744:	9301      	str	r3, [sp, #4]
 800a746:	0002      	movs	r2, r0
 800a748:	2002      	movs	r0, #2
 800a74a:	f009 fbb5 	bl	8013eb8 <CreateLine>
//  powerDisplay(powerCheck());
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a74e:	1dbb      	adds	r3, r7, #6
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	4a1b      	ldr	r2, [pc, #108]	@ (800a7c0 <Enter_Stop_Mode_for_empty_battery+0xa8>)
 800a754:	491b      	ldr	r1, [pc, #108]	@ (800a7c4 <Enter_Stop_Mode_for_empty_battery+0xac>)
 800a756:	2003      	movs	r0, #3
 800a758:	f009 fbae 	bl	8013eb8 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a75c:	f7ff ff6a 	bl	800a634 <getPosixTime>
 800a760:	0002      	movs	r2, r0
 800a762:	1dbb      	adds	r3, r7, #6
 800a764:	881b      	ldrh	r3, [r3, #0]
 800a766:	18d3      	adds	r3, r2, r3
 800a768:	4a17      	ldr	r2, [pc, #92]	@ (800a7c8 <Enter_Stop_Mode_for_empty_battery+0xb0>)
 800a76a:	0011      	movs	r1, r2
 800a76c:	0018      	movs	r0, r3
 800a76e:	f7ff ff77 	bl	800a660 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a772:	4b15      	ldr	r3, [pc, #84]	@ (800a7c8 <Enter_Stop_Mode_for_empty_battery+0xb0>)
 800a774:	4a15      	ldr	r2, [pc, #84]	@ (800a7cc <Enter_Stop_Mode_for_empty_battery+0xb4>)
 800a776:	4911      	ldr	r1, [pc, #68]	@ (800a7bc <Enter_Stop_Mode_for_empty_battery+0xa4>)
 800a778:	2002      	movs	r0, #2
 800a77a:	f009 fb9d 	bl	8013eb8 <CreateLine>
  HAL_Delay(100);
 800a77e:	2064      	movs	r0, #100	@ 0x64
 800a780:	f00a f924 	bl	80149cc <HAL_Delay>
  HAL_SuspendTick();
 800a784:	f00a f946 	bl	8014a14 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a788:	1dbb      	adds	r3, r7, #6
 800a78a:	881b      	ldrh	r3, [r3, #0]
 800a78c:	0018      	movs	r0, r3
 800a78e:	f7ff ff97 	bl	800a6c0 <RTC_SetWakeUpTimer>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a792:	2101      	movs	r1, #1
 800a794:	2001      	movs	r0, #1
 800a796:	f010 fd3f 	bl	801b218 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a79a:	f002 fd0f 	bl	800d1bc <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a79e:	f00a f947 	bl	8014a30 <HAL_ResumeTick>
  showTime();
 800a7a2:	f7ff fbad 	bl	8009f00 <showTime>
}
 800a7a6:	46c0      	nop			@ (mov r8, r8)
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	b002      	add	sp, #8
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	46c0      	nop			@ (mov r8, r8)
 800a7b0:	200011bd 	.word	0x200011bd
 800a7b4:	20002158 	.word	0x20002158
 800a7b8:	0802c398 	.word	0x0802c398
 800a7bc:	0802c1f4 	.word	0x0802c1f4
 800a7c0:	0802c3b0 	.word	0x0802c3b0
 800a7c4:	0802c230 	.word	0x0802c230
 800a7c8:	20000e6c 	.word	0x20000e6c
 800a7cc:	0802c3d4 	.word	0x0802c3d4

0800a7d0 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	0002      	movs	r2, r0
 800a7d8:	1dbb      	adds	r3, r7, #6
 800a7da:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a7dc:	4b45      	ldr	r3, [pc, #276]	@ (800a8f4 <Enter_Stop_Mode+0x124>)
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d001      	beq.n	800a7e8 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 800a7e4:	f004 f804 	bl	800e7f0 <sen5x_Power_Off>
  }
//  Info("Battery voltage %.02fV", batteryCharge);
  batteryChargeCheck();
 800a7e8:	f007 ff8a 	bl	8012700 <batteryChargeCheck>
//  powerDisplay(powerCheck());
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a7ec:	1dbb      	adds	r3, r7, #6
 800a7ee:	881b      	ldrh	r3, [r3, #0]
 800a7f0:	4a41      	ldr	r2, [pc, #260]	@ (800a8f8 <Enter_Stop_Mode+0x128>)
 800a7f2:	4942      	ldr	r1, [pc, #264]	@ (800a8fc <Enter_Stop_Mode+0x12c>)
 800a7f4:	2003      	movs	r0, #3
 800a7f6:	f009 fb5f 	bl	8013eb8 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a7fa:	f7ff ff1b 	bl	800a634 <getPosixTime>
 800a7fe:	0002      	movs	r2, r0
 800a800:	1dbb      	adds	r3, r7, #6
 800a802:	881b      	ldrh	r3, [r3, #0]
 800a804:	18d3      	adds	r3, r2, r3
 800a806:	4a3e      	ldr	r2, [pc, #248]	@ (800a900 <Enter_Stop_Mode+0x130>)
 800a808:	0011      	movs	r1, r2
 800a80a:	0018      	movs	r0, r3
 800a80c:	f7ff ff28 	bl	800a660 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a810:	4b3b      	ldr	r3, [pc, #236]	@ (800a900 <Enter_Stop_Mode+0x130>)
 800a812:	4a3c      	ldr	r2, [pc, #240]	@ (800a904 <Enter_Stop_Mode+0x134>)
 800a814:	493c      	ldr	r1, [pc, #240]	@ (800a908 <Enter_Stop_Mode+0x138>)
 800a816:	2002      	movs	r0, #2
 800a818:	f009 fb4e 	bl	8013eb8 <CreateLine>
  HAL_Delay(100);
 800a81c:	2064      	movs	r0, #100	@ 0x64
 800a81e:	f00a f8d5 	bl	80149cc <HAL_Delay>
  HAL_SuspendTick();
 800a822:	f00a f8f7 	bl	8014a14 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a826:	1dbb      	adds	r3, r7, #6
 800a828:	881b      	ldrh	r3, [r3, #0]
 800a82a:	0018      	movs	r0, r3
 800a82c:	f7ff ff48 	bl	800a6c0 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a830:	2101      	movs	r1, #1
 800a832:	2001      	movs	r0, #1
 800a834:	f010 fcf0 	bl	801b218 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a838:	f002 fcc0 	bl	800d1bc <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a83c:	f00a f8f8 	bl	8014a30 <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 800a840:	1dbb      	adds	r3, r7, #6
 800a842:	881b      	ldrh	r3, [r3, #0]
 800a844:	0018      	movs	r0, r3
 800a846:	f003 ff47 	bl	800e6d8 <sen5x_enable>
 800a84a:	1e03      	subs	r3, r0, #0
 800a84c:	d01e      	beq.n	800a88c <Enter_Stop_Mode+0xbc>
    showTime();
 800a84e:	f7ff fb57 	bl	8009f00 <showTime>
    set_light_on_state();
 800a852:	f004 fc9d 	bl	800f190 <set_light_on_state>
    if (!userToggle) {
 800a856:	4b2d      	ldr	r3, [pc, #180]	@ (800a90c <Enter_Stop_Mode+0x13c>)
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	2201      	movs	r2, #1
 800a85c:	4053      	eors	r3, r2
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	2b00      	cmp	r3, #0
 800a862:	d013      	beq.n	800a88c <Enter_Stop_Mode+0xbc>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 800a864:	201c      	movs	r0, #28
 800a866:	f7ff ff2b 	bl	800a6c0 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 800a86a:	4a23      	ldr	r2, [pc, #140]	@ (800a8f8 <Enter_Stop_Mode+0x128>)
 800a86c:	4923      	ldr	r1, [pc, #140]	@ (800a8fc <Enter_Stop_Mode+0x12c>)
 800a86e:	231c      	movs	r3, #28
 800a870:	2003      	movs	r0, #3
 800a872:	f009 fb21 	bl	8013eb8 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a876:	2101      	movs	r1, #1
 800a878:	2001      	movs	r0, #1
 800a87a:	f010 fccd 	bl	801b218 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 800a87e:	f002 fc9d 	bl	800d1bc <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 800a882:	f00a f8d5 	bl	8014a30 <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 800a886:	2000      	movs	r0, #0
 800a888:	f003 ff04 	bl	800e694 <setsen5xReadTimer>
    }
  }
  showTime();
 800a88c:	f7ff fb38 	bl	8009f00 <showTime>
  EnabledConnectedDevices();
 800a890:	f003 fa94 	bl	800ddbc <EnabledConnectedDevices>
  ResetDBACalculator();  // reset the DBA average calculation
 800a894:	f003 fb94 	bl	800dfc0 <ResetDBACalculator>
  ResetSGP40samplecounter();
 800a898:	f006 faf2 	bl	8010e80 <ResetSGP40samplecounter>
  ResetENS160samplecounter();
 800a89c:	f7f9 f94e 	bl	8003b3c <ResetENS160samplecounter>
  SetBatteryReadTimer(0);
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	f002 f96f 	bl	800cb84 <SetBatteryReadTimer>
  setsen5xSamplecounter(0);
 800a8a6:	2000      	movs	r0, #0
 800a8a8:	f003 ff06 	bl	800e6b8 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 800a8ac:	4b18      	ldr	r3, [pc, #96]	@ (800a910 <Enter_Stop_Mode+0x140>)
 800a8ae:	0018      	movs	r0, r3
 800a8b0:	f7f9 fff8 	bl	80048a4 <setESPTimeStamp>
  setSGP40TimeStamp(30);
 800a8b4:	201e      	movs	r0, #30
 800a8b6:	f006 fad1 	bl	8010e5c <setSGP40TimeStamp>
  setHIDSTimeStamp(90);
 800a8ba:	205a      	movs	r0, #90	@ 0x5a
 800a8bc:	f009 fd9a 	bl	80143f4 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 800a8c0:	203c      	movs	r0, #60	@ 0x3c
 800a8c2:	f000 fb95 	bl	800aff0 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 800a8c6:	205a      	movs	r0, #90	@ 0x5a
 800a8c8:	f000 ff6e 	bl	800b7a8 <setBMP280TimeStamp>
  setENS160TimeStamp(0);
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	f7f9 f93f 	bl	8003b50 <setENS160TimeStamp>
  setMICTimeStamp(0);
 800a8d2:	2000      	movs	r0, #0
 800a8d4:	f003 fb62 	bl	800df9c <setMICTimeStamp>
  ESPTransmitDone = false;
 800a8d8:	4b0e      	ldr	r3, [pc, #56]	@ (800a914 <Enter_Stop_Mode+0x144>)
 800a8da:	2200      	movs	r2, #0
 800a8dc:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800a8de:	f00a f86b 	bl	80149b8 <HAL_GetTick>
 800a8e2:	0003      	movs	r3, r0
 800a8e4:	4a0a      	ldr	r2, [pc, #40]	@ (800a910 <Enter_Stop_Mode+0x140>)
 800a8e6:	189a      	adds	r2, r3, r2
 800a8e8:	4b0b      	ldr	r3, [pc, #44]	@ (800a918 <Enter_Stop_Mode+0x148>)
 800a8ea:	601a      	str	r2, [r3, #0]
}
 800a8ec:	46c0      	nop			@ (mov r8, r8)
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	b002      	add	sp, #8
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	200011bd 	.word	0x200011bd
 800a8f8:	0802c3b0 	.word	0x0802c3b0
 800a8fc:	0802c230 	.word	0x0802c230
 800a900:	20000e6c 	.word	0x20000e6c
 800a904:	0802c3d4 	.word	0x0802c3d4
 800a908:	0802c1f4 	.word	0x0802c1f4
 800a90c:	2000214e 	.word	0x2000214e
 800a910:	00001194 	.word	0x00001194
 800a914:	200005b3 	.word	0x200005b3
 800a918:	20001114 	.word	0x20001114

0800a91c <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 800a924:	4b03      	ldr	r3, [pc, #12]	@ (800a934 <InitClock+0x18>)
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	601a      	str	r2, [r3, #0]
}
 800a92a:	46c0      	nop			@ (mov r8, r8)
 800a92c:	46bd      	mov	sp, r7
 800a92e:	b002      	add	sp, #8
 800a930:	bd80      	pop	{r7, pc}
 800a932:	46c0      	nop			@ (mov r8, r8)
 800a934:	20000e50 	.word	0x20000e50

0800a938 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	78db      	ldrb	r3, [r3, #3]
 800a946:	001a      	movs	r2, r3
 800a948:	0013      	movs	r3, r2
 800a94a:	025b      	lsls	r3, r3, #9
 800a94c:	189b      	adds	r3, r3, r2
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	189b      	adds	r3, r3, r2
 800a952:	00db      	lsls	r3, r3, #3
 800a954:	189b      	adds	r3, r3, r2
 800a956:	011a      	lsls	r2, r3, #4
 800a958:	1ad2      	subs	r2, r2, r3
 800a95a:	01d3      	lsls	r3, r2, #7
 800a95c:	001a      	movs	r2, r3
 800a95e:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a960:	2300      	movs	r3, #0
 800a962:	60fb      	str	r3, [r7, #12]
 800a964:	e028      	b.n	800a9b8 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	4a53      	ldr	r2, [pc, #332]	@ (800aab8 <makeTime+0x180>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	db21      	blt.n	800a9b2 <makeTime+0x7a>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	4a52      	ldr	r2, [pc, #328]	@ (800aabc <makeTime+0x184>)
 800a972:	4694      	mov	ip, r2
 800a974:	4463      	add	r3, ip
 800a976:	001a      	movs	r2, r3
 800a978:	2303      	movs	r3, #3
 800a97a:	4013      	ands	r3, r2
 800a97c:	d119      	bne.n	800a9b2 <makeTime+0x7a>
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	4a4e      	ldr	r2, [pc, #312]	@ (800aabc <makeTime+0x184>)
 800a982:	4694      	mov	ip, r2
 800a984:	4463      	add	r3, ip
 800a986:	2164      	movs	r1, #100	@ 0x64
 800a988:	0018      	movs	r0, r3
 800a98a:	f7f5 fd7b 	bl	8000484 <__aeabi_idivmod>
 800a98e:	1e0b      	subs	r3, r1, #0
 800a990:	d10a      	bne.n	800a9a8 <makeTime+0x70>
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	4a49      	ldr	r2, [pc, #292]	@ (800aabc <makeTime+0x184>)
 800a996:	4694      	mov	ip, r2
 800a998:	4463      	add	r3, ip
 800a99a:	22c8      	movs	r2, #200	@ 0xc8
 800a99c:	0051      	lsls	r1, r2, #1
 800a99e:	0018      	movs	r0, r3
 800a9a0:	f7f5 fd70 	bl	8000484 <__aeabi_idivmod>
 800a9a4:	1e0b      	subs	r3, r1, #0
 800a9a6:	d104      	bne.n	800a9b2 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	4a45      	ldr	r2, [pc, #276]	@ (800aac0 <makeTime+0x188>)
 800a9ac:	4694      	mov	ip, r2
 800a9ae:	4463      	add	r3, ip
 800a9b0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	60fb      	str	r3, [r7, #12]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	78db      	ldrb	r3, [r3, #3]
 800a9bc:	001a      	movs	r2, r3
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	dbd0      	blt.n	800a966 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	60fb      	str	r3, [r7, #12]
 800a9c8:	e03c      	b.n	800aa44 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d125      	bne.n	800aa1c <makeTime+0xe4>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	78db      	ldrb	r3, [r3, #3]
 800a9d4:	4a39      	ldr	r2, [pc, #228]	@ (800aabc <makeTime+0x184>)
 800a9d6:	4694      	mov	ip, r2
 800a9d8:	4463      	add	r3, ip
 800a9da:	001a      	movs	r2, r3
 800a9dc:	2303      	movs	r3, #3
 800a9de:	4013      	ands	r3, r2
 800a9e0:	d11c      	bne.n	800aa1c <makeTime+0xe4>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	78db      	ldrb	r3, [r3, #3]
 800a9e6:	4a35      	ldr	r2, [pc, #212]	@ (800aabc <makeTime+0x184>)
 800a9e8:	4694      	mov	ip, r2
 800a9ea:	4463      	add	r3, ip
 800a9ec:	2164      	movs	r1, #100	@ 0x64
 800a9ee:	0018      	movs	r0, r3
 800a9f0:	f7f5 fd48 	bl	8000484 <__aeabi_idivmod>
 800a9f4:	1e0b      	subs	r3, r1, #0
 800a9f6:	d10b      	bne.n	800aa10 <makeTime+0xd8>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	78db      	ldrb	r3, [r3, #3]
 800a9fc:	4a2f      	ldr	r2, [pc, #188]	@ (800aabc <makeTime+0x184>)
 800a9fe:	4694      	mov	ip, r2
 800aa00:	4463      	add	r3, ip
 800aa02:	22c8      	movs	r2, #200	@ 0xc8
 800aa04:	0051      	lsls	r1, r2, #1
 800aa06:	0018      	movs	r0, r3
 800aa08:	f7f5 fd3c 	bl	8000484 <__aeabi_idivmod>
 800aa0c:	1e0b      	subs	r3, r1, #0
 800aa0e:	d105      	bne.n	800aa1c <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	4a2c      	ldr	r2, [pc, #176]	@ (800aac4 <makeTime+0x18c>)
 800aa14:	4694      	mov	ip, r2
 800aa16:	4463      	add	r3, ip
 800aa18:	60bb      	str	r3, [r7, #8]
 800aa1a:	e010      	b.n	800aa3e <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	3b01      	subs	r3, #1
 800aa20:	4a29      	ldr	r2, [pc, #164]	@ (800aac8 <makeTime+0x190>)
 800aa22:	5cd3      	ldrb	r3, [r2, r3]
 800aa24:	001a      	movs	r2, r3
 800aa26:	0013      	movs	r3, r2
 800aa28:	005b      	lsls	r3, r3, #1
 800aa2a:	189b      	adds	r3, r3, r2
 800aa2c:	011a      	lsls	r2, r3, #4
 800aa2e:	1ad2      	subs	r2, r2, r3
 800aa30:	0113      	lsls	r3, r2, #4
 800aa32:	1a9b      	subs	r3, r3, r2
 800aa34:	01db      	lsls	r3, r3, #7
 800aa36:	001a      	movs	r2, r3
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	189b      	adds	r3, r3, r2
 800aa3c:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	3301      	adds	r3, #1
 800aa42:	60fb      	str	r3, [r7, #12]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	785b      	ldrb	r3, [r3, #1]
 800aa48:	001a      	movs	r2, r3
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	dbbc      	blt.n	800a9ca <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	789b      	ldrb	r3, [r3, #2]
 800aa54:	3b01      	subs	r3, #1
 800aa56:	001a      	movs	r2, r3
 800aa58:	0013      	movs	r3, r2
 800aa5a:	005b      	lsls	r3, r3, #1
 800aa5c:	189b      	adds	r3, r3, r2
 800aa5e:	011a      	lsls	r2, r3, #4
 800aa60:	1ad2      	subs	r2, r2, r3
 800aa62:	0113      	lsls	r3, r2, #4
 800aa64:	1a9b      	subs	r3, r3, r2
 800aa66:	01db      	lsls	r3, r3, #7
 800aa68:	001a      	movs	r2, r3
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	189b      	adds	r3, r3, r2
 800aa6e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	001a      	movs	r2, r3
 800aa76:	0013      	movs	r3, r2
 800aa78:	011b      	lsls	r3, r3, #4
 800aa7a:	1a9b      	subs	r3, r3, r2
 800aa7c:	011a      	lsls	r2, r3, #4
 800aa7e:	1ad2      	subs	r2, r2, r3
 800aa80:	0113      	lsls	r3, r2, #4
 800aa82:	001a      	movs	r2, r3
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	189b      	adds	r3, r3, r2
 800aa88:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	785b      	ldrb	r3, [r3, #1]
 800aa8e:	001a      	movs	r2, r3
 800aa90:	0013      	movs	r3, r2
 800aa92:	011b      	lsls	r3, r3, #4
 800aa94:	1a9b      	subs	r3, r3, r2
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	001a      	movs	r2, r3
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	189b      	adds	r3, r3, r2
 800aa9e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	789b      	ldrb	r3, [r3, #2]
 800aaa4:	001a      	movs	r2, r3
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	189b      	adds	r3, r3, r2
 800aaaa:	60bb      	str	r3, [r7, #8]
  return seconds;
 800aaac:	68bb      	ldr	r3, [r7, #8]
}
 800aaae:	0018      	movs	r0, r3
 800aab0:	46bd      	mov	sp, r7
 800aab2:	b004      	add	sp, #16
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	46c0      	nop			@ (mov r8, r8)
 800aab8:	fffff84f 	.word	0xfffff84f
 800aabc:	000007b2 	.word	0x000007b2
 800aac0:	00015180 	.word	0x00015180
 800aac4:	00263b80 	.word	0x00263b80
 800aac8:	0802e664 	.word	0x0802e664

0800aacc <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800aacc:	b590      	push	{r4, r7, lr}
 800aace:	b089      	sub	sp, #36	@ 0x24
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 800aadc:	69bb      	ldr	r3, [r7, #24]
 800aade:	213c      	movs	r1, #60	@ 0x3c
 800aae0:	0018      	movs	r0, r3
 800aae2:	f7f5 fbe5 	bl	80002b0 <__aeabi_uidivmod>
 800aae6:	000b      	movs	r3, r1
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	213c      	movs	r1, #60	@ 0x3c
 800aaf2:	0018      	movs	r0, r3
 800aaf4:	f7f5 fb56 	bl	80001a4 <__udivsi3>
 800aaf8:	0003      	movs	r3, r0
 800aafa:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	213c      	movs	r1, #60	@ 0x3c
 800ab00:	0018      	movs	r0, r3
 800ab02:	f7f5 fbd5 	bl	80002b0 <__aeabi_uidivmod>
 800ab06:	000b      	movs	r3, r1
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	213c      	movs	r1, #60	@ 0x3c
 800ab12:	0018      	movs	r0, r3
 800ab14:	f7f5 fb46 	bl	80001a4 <__udivsi3>
 800ab18:	0003      	movs	r3, r0
 800ab1a:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	2118      	movs	r1, #24
 800ab20:	0018      	movs	r0, r3
 800ab22:	f7f5 fbc5 	bl	80002b0 <__aeabi_uidivmod>
 800ab26:	000b      	movs	r3, r1
 800ab28:	b2da      	uxtb	r2, r3
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	2118      	movs	r1, #24
 800ab32:	0018      	movs	r0, r3
 800ab34:	f7f5 fb36 	bl	80001a4 <__udivsi3>
 800ab38:	0003      	movs	r3, r0
 800ab3a:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	2107      	movs	r1, #7
 800ab42:	0018      	movs	r0, r3
 800ab44:	f7f5 fbb4 	bl	80002b0 <__aeabi_uidivmod>
 800ab48:	000b      	movs	r3, r1
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	b2da      	uxtb	r2, r3
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	701a      	strb	r2, [r3, #0]
  year = 0;
 800ab54:	231f      	movs	r3, #31
 800ab56:	18fb      	adds	r3, r7, r3
 800ab58:	2200      	movs	r2, #0
 800ab5a:	701a      	strb	r2, [r3, #0]
  days = 0;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800ab60:	e005      	b.n	800ab6e <breakPosixTime+0xa2>
    year++;
 800ab62:	211f      	movs	r1, #31
 800ab64:	187b      	adds	r3, r7, r1
 800ab66:	781a      	ldrb	r2, [r3, #0]
 800ab68:	187b      	adds	r3, r7, r1
 800ab6a:	3201      	adds	r2, #1
 800ab6c:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800ab6e:	241f      	movs	r4, #31
 800ab70:	193b      	adds	r3, r7, r4
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	4a64      	ldr	r2, [pc, #400]	@ (800ad08 <breakPosixTime+0x23c>)
 800ab76:	4694      	mov	ip, r2
 800ab78:	4463      	add	r3, ip
 800ab7a:	001a      	movs	r2, r3
 800ab7c:	2303      	movs	r3, #3
 800ab7e:	4013      	ands	r3, r2
 800ab80:	d119      	bne.n	800abb6 <breakPosixTime+0xea>
 800ab82:	193b      	adds	r3, r7, r4
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	4a60      	ldr	r2, [pc, #384]	@ (800ad08 <breakPosixTime+0x23c>)
 800ab88:	4694      	mov	ip, r2
 800ab8a:	4463      	add	r3, ip
 800ab8c:	2164      	movs	r1, #100	@ 0x64
 800ab8e:	0018      	movs	r0, r3
 800ab90:	f7f5 fc78 	bl	8000484 <__aeabi_idivmod>
 800ab94:	1e0b      	subs	r3, r1, #0
 800ab96:	d10b      	bne.n	800abb0 <breakPosixTime+0xe4>
 800ab98:	193b      	adds	r3, r7, r4
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	4a5a      	ldr	r2, [pc, #360]	@ (800ad08 <breakPosixTime+0x23c>)
 800ab9e:	4694      	mov	ip, r2
 800aba0:	4463      	add	r3, ip
 800aba2:	22c8      	movs	r2, #200	@ 0xc8
 800aba4:	0051      	lsls	r1, r2, #1
 800aba6:	0018      	movs	r0, r3
 800aba8:	f7f5 fc6c 	bl	8000484 <__aeabi_idivmod>
 800abac:	1e0b      	subs	r3, r1, #0
 800abae:	d102      	bne.n	800abb6 <breakPosixTime+0xea>
 800abb0:	23b7      	movs	r3, #183	@ 0xb7
 800abb2:	005b      	lsls	r3, r3, #1
 800abb4:	e001      	b.n	800abba <breakPosixTime+0xee>
 800abb6:	236e      	movs	r3, #110	@ 0x6e
 800abb8:	33ff      	adds	r3, #255	@ 0xff
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	18d3      	adds	r3, r2, r3
 800abbe:	617b      	str	r3, [r7, #20]
 800abc0:	697a      	ldr	r2, [r7, #20]
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d9cc      	bls.n	800ab62 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	241f      	movs	r4, #31
 800abcc:	193a      	adds	r2, r7, r4
 800abce:	7812      	ldrb	r2, [r2, #0]
 800abd0:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 800abd2:	193b      	adds	r3, r7, r4
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	4a4c      	ldr	r2, [pc, #304]	@ (800ad08 <breakPosixTime+0x23c>)
 800abd8:	4694      	mov	ip, r2
 800abda:	4463      	add	r3, ip
 800abdc:	001a      	movs	r2, r3
 800abde:	2303      	movs	r3, #3
 800abe0:	4013      	ands	r3, r2
 800abe2:	d119      	bne.n	800ac18 <breakPosixTime+0x14c>
 800abe4:	193b      	adds	r3, r7, r4
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	4a47      	ldr	r2, [pc, #284]	@ (800ad08 <breakPosixTime+0x23c>)
 800abea:	4694      	mov	ip, r2
 800abec:	4463      	add	r3, ip
 800abee:	2164      	movs	r1, #100	@ 0x64
 800abf0:	0018      	movs	r0, r3
 800abf2:	f7f5 fc47 	bl	8000484 <__aeabi_idivmod>
 800abf6:	1e0b      	subs	r3, r1, #0
 800abf8:	d10b      	bne.n	800ac12 <breakPosixTime+0x146>
 800abfa:	193b      	adds	r3, r7, r4
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	4a42      	ldr	r2, [pc, #264]	@ (800ad08 <breakPosixTime+0x23c>)
 800ac00:	4694      	mov	ip, r2
 800ac02:	4463      	add	r3, ip
 800ac04:	22c8      	movs	r2, #200	@ 0xc8
 800ac06:	0051      	lsls	r1, r2, #1
 800ac08:	0018      	movs	r0, r3
 800ac0a:	f7f5 fc3b 	bl	8000484 <__aeabi_idivmod>
 800ac0e:	1e0b      	subs	r3, r1, #0
 800ac10:	d102      	bne.n	800ac18 <breakPosixTime+0x14c>
 800ac12:	23b7      	movs	r3, #183	@ 0xb7
 800ac14:	005b      	lsls	r3, r3, #1
 800ac16:	e001      	b.n	800ac1c <breakPosixTime+0x150>
 800ac18:	236e      	movs	r3, #110	@ 0x6e
 800ac1a:	33ff      	adds	r3, #255	@ 0xff
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	1ad3      	subs	r3, r2, r3
 800ac20:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 800ac22:	69ba      	ldr	r2, [r7, #24]
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	61bb      	str	r3, [r7, #24]

  days=0;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	617b      	str	r3, [r7, #20]
  month=0;
 800ac2e:	211e      	movs	r1, #30
 800ac30:	187b      	adds	r3, r7, r1
 800ac32:	2200      	movs	r2, #0
 800ac34:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 800ac36:	231d      	movs	r3, #29
 800ac38:	18fb      	adds	r3, r7, r3
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 800ac3e:	187b      	adds	r3, r7, r1
 800ac40:	2200      	movs	r2, #0
 800ac42:	701a      	strb	r2, [r3, #0]
 800ac44:	e048      	b.n	800acd8 <breakPosixTime+0x20c>
    if (month==1) { // february
 800ac46:	231e      	movs	r3, #30
 800ac48:	18fb      	adds	r3, r7, r3
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d12a      	bne.n	800aca6 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 800ac50:	241f      	movs	r4, #31
 800ac52:	193b      	adds	r3, r7, r4
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	4a2c      	ldr	r2, [pc, #176]	@ (800ad08 <breakPosixTime+0x23c>)
 800ac58:	4694      	mov	ip, r2
 800ac5a:	4463      	add	r3, ip
 800ac5c:	001a      	movs	r2, r3
 800ac5e:	2303      	movs	r3, #3
 800ac60:	4013      	ands	r3, r2
 800ac62:	d11b      	bne.n	800ac9c <breakPosixTime+0x1d0>
 800ac64:	193b      	adds	r3, r7, r4
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	4a27      	ldr	r2, [pc, #156]	@ (800ad08 <breakPosixTime+0x23c>)
 800ac6a:	4694      	mov	ip, r2
 800ac6c:	4463      	add	r3, ip
 800ac6e:	2164      	movs	r1, #100	@ 0x64
 800ac70:	0018      	movs	r0, r3
 800ac72:	f7f5 fc07 	bl	8000484 <__aeabi_idivmod>
 800ac76:	1e0b      	subs	r3, r1, #0
 800ac78:	d10b      	bne.n	800ac92 <breakPosixTime+0x1c6>
 800ac7a:	193b      	adds	r3, r7, r4
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	4a22      	ldr	r2, [pc, #136]	@ (800ad08 <breakPosixTime+0x23c>)
 800ac80:	4694      	mov	ip, r2
 800ac82:	4463      	add	r3, ip
 800ac84:	22c8      	movs	r2, #200	@ 0xc8
 800ac86:	0051      	lsls	r1, r2, #1
 800ac88:	0018      	movs	r0, r3
 800ac8a:	f7f5 fbfb 	bl	8000484 <__aeabi_idivmod>
 800ac8e:	1e0b      	subs	r3, r1, #0
 800ac90:	d104      	bne.n	800ac9c <breakPosixTime+0x1d0>
        monthLength=29;
 800ac92:	231d      	movs	r3, #29
 800ac94:	18fb      	adds	r3, r7, r3
 800ac96:	221d      	movs	r2, #29
 800ac98:	701a      	strb	r2, [r3, #0]
 800ac9a:	e00c      	b.n	800acb6 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 800ac9c:	231d      	movs	r3, #29
 800ac9e:	18fb      	adds	r3, r7, r3
 800aca0:	221c      	movs	r2, #28
 800aca2:	701a      	strb	r2, [r3, #0]
 800aca4:	e007      	b.n	800acb6 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 800aca6:	231e      	movs	r3, #30
 800aca8:	18fb      	adds	r3, r7, r3
 800acaa:	781a      	ldrb	r2, [r3, #0]
 800acac:	231d      	movs	r3, #29
 800acae:	18fb      	adds	r3, r7, r3
 800acb0:	4916      	ldr	r1, [pc, #88]	@ (800ad0c <breakPosixTime+0x240>)
 800acb2:	5c8a      	ldrb	r2, [r1, r2]
 800acb4:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 800acb6:	211d      	movs	r1, #29
 800acb8:	187b      	adds	r3, r7, r1
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	69ba      	ldr	r2, [r7, #24]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d310      	bcc.n	800ace4 <breakPosixTime+0x218>
      time -= monthLength;
 800acc2:	187b      	adds	r3, r7, r1
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	69ba      	ldr	r2, [r7, #24]
 800acc8:	1ad3      	subs	r3, r2, r3
 800acca:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 800accc:	211e      	movs	r1, #30
 800acce:	187b      	adds	r3, r7, r1
 800acd0:	781a      	ldrb	r2, [r3, #0]
 800acd2:	187b      	adds	r3, r7, r1
 800acd4:	3201      	adds	r2, #1
 800acd6:	701a      	strb	r2, [r3, #0]
 800acd8:	231e      	movs	r3, #30
 800acda:	18fb      	adds	r3, r7, r3
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	2b0b      	cmp	r3, #11
 800ace0:	d9b1      	bls.n	800ac46 <breakPosixTime+0x17a>
 800ace2:	e000      	b.n	800ace6 <breakPosixTime+0x21a>
    } else {
        break;
 800ace4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 800ace6:	231e      	movs	r3, #30
 800ace8:	18fb      	adds	r3, r7, r3
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	3301      	adds	r3, #1
 800acee:	b2da      	uxtb	r2, r3
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	3301      	adds	r3, #1
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	709a      	strb	r2, [r3, #2]
}
 800ad00:	46c0      	nop			@ (mov r8, r8)
 800ad02:	46bd      	mov	sp, r7
 800ad04:	b009      	add	sp, #36	@ 0x24
 800ad06:	bd90      	pop	{r4, r7, pc}
 800ad08:	000007b2 	.word	0x000007b2
 800ad0c:	0802e664 	.word	0x0802e664

0800ad10 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ad16:	003b      	movs	r3, r7
 800ad18:	0018      	movs	r0, r3
 800ad1a:	2308      	movs	r3, #8
 800ad1c:	001a      	movs	r2, r3
 800ad1e:	2100      	movs	r1, #0
 800ad20:	f01b fd2e 	bl	8026780 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800ad24:	4b30      	ldr	r3, [pc, #192]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800ad26:	4a31      	ldr	r2, [pc, #196]	@ (800adec <MX_ADC_Init+0xdc>)
 800ad28:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800ad2a:	4b2f      	ldr	r3, [pc, #188]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800ad30:	4b2d      	ldr	r3, [pc, #180]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800ad32:	22c0      	movs	r2, #192	@ 0xc0
 800ad34:	0612      	lsls	r2, r2, #24
 800ad36:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800ad38:	4b2b      	ldr	r3, [pc, #172]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800ad3e:	4b2a      	ldr	r3, [pc, #168]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800ad40:	2200      	movs	r2, #0
 800ad42:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800ad44:	4b28      	ldr	r3, [pc, #160]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800ad46:	2201      	movs	r2, #1
 800ad48:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ad4a:	4b27      	ldr	r3, [pc, #156]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800ad50:	4b25      	ldr	r3, [pc, #148]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800ad52:	2220      	movs	r2, #32
 800ad54:	2100      	movs	r1, #0
 800ad56:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 800ad58:	4b23      	ldr	r3, [pc, #140]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800ad5a:	2221      	movs	r2, #33	@ 0x21
 800ad5c:	2101      	movs	r1, #1
 800ad5e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ad60:	4b21      	ldr	r3, [pc, #132]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800ad62:	2200      	movs	r2, #0
 800ad64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ad66:	4b20      	ldr	r3, [pc, #128]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800ad68:	22c2      	movs	r2, #194	@ 0xc2
 800ad6a:	32ff      	adds	r2, #255	@ 0xff
 800ad6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800ad6e:	4b1e      	ldr	r3, [pc, #120]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800ad70:	222c      	movs	r2, #44	@ 0x2c
 800ad72:	2100      	movs	r1, #0
 800ad74:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ad76:	4b1c      	ldr	r3, [pc, #112]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800ad78:	2204      	movs	r2, #4
 800ad7a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800ad7c:	4b1a      	ldr	r3, [pc, #104]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800ad82:	4b19      	ldr	r3, [pc, #100]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800ad88:	4b17      	ldr	r3, [pc, #92]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800ad8e:	4b16      	ldr	r3, [pc, #88]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800ad90:	2200      	movs	r2, #0
 800ad92:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800ad94:	4b14      	ldr	r3, [pc, #80]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800ad96:	0018      	movs	r0, r3
 800ad98:	f009 fe58 	bl	8014a4c <HAL_ADC_Init>
 800ad9c:	1e03      	subs	r3, r0, #0
 800ad9e:	d001      	beq.n	800ada4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800ada0:	f002 fb78 	bl	800d494 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800ada4:	003b      	movs	r3, r7
 800ada6:	4a12      	ldr	r2, [pc, #72]	@ (800adf0 <MX_ADC_Init+0xe0>)
 800ada8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800adaa:	003b      	movs	r3, r7
 800adac:	2280      	movs	r2, #128	@ 0x80
 800adae:	0152      	lsls	r2, r2, #5
 800adb0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800adb2:	003a      	movs	r2, r7
 800adb4:	4b0c      	ldr	r3, [pc, #48]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800adb6:	0011      	movs	r1, r2
 800adb8:	0018      	movs	r0, r3
 800adba:	f00a f8b7 	bl	8014f2c <HAL_ADC_ConfigChannel>
 800adbe:	1e03      	subs	r3, r0, #0
 800adc0:	d001      	beq.n	800adc6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800adc2:	f002 fb67 	bl	800d494 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800adc6:	003b      	movs	r3, r7
 800adc8:	4a0a      	ldr	r2, [pc, #40]	@ (800adf4 <MX_ADC_Init+0xe4>)
 800adca:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800adcc:	003a      	movs	r2, r7
 800adce:	4b06      	ldr	r3, [pc, #24]	@ (800ade8 <MX_ADC_Init+0xd8>)
 800add0:	0011      	movs	r1, r2
 800add2:	0018      	movs	r0, r3
 800add4:	f00a f8aa 	bl	8014f2c <HAL_ADC_ConfigChannel>
 800add8:	1e03      	subs	r3, r0, #0
 800adda:	d001      	beq.n	800ade0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800addc:	f002 fb5a 	bl	800d494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800ade0:	46c0      	nop			@ (mov r8, r8)
 800ade2:	46bd      	mov	sp, r7
 800ade4:	b002      	add	sp, #8
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	20000e84 	.word	0x20000e84
 800adec:	40012400 	.word	0x40012400
 800adf0:	38004000 	.word	0x38004000
 800adf4:	3c008000 	.word	0x3c008000

0800adf8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800adf8:	b590      	push	{r4, r7, lr}
 800adfa:	b089      	sub	sp, #36	@ 0x24
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae00:	240c      	movs	r4, #12
 800ae02:	193b      	adds	r3, r7, r4
 800ae04:	0018      	movs	r0, r3
 800ae06:	2314      	movs	r3, #20
 800ae08:	001a      	movs	r2, r3
 800ae0a:	2100      	movs	r1, #0
 800ae0c:	f01b fcb8 	bl	8026780 <memset>
  if(adcHandle->Instance==ADC1)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a14      	ldr	r2, [pc, #80]	@ (800ae68 <HAL_ADC_MspInit+0x70>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d121      	bne.n	800ae5e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ae1a:	4b14      	ldr	r3, [pc, #80]	@ (800ae6c <HAL_ADC_MspInit+0x74>)
 800ae1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae1e:	4b13      	ldr	r3, [pc, #76]	@ (800ae6c <HAL_ADC_MspInit+0x74>)
 800ae20:	2180      	movs	r1, #128	@ 0x80
 800ae22:	0089      	lsls	r1, r1, #2
 800ae24:	430a      	orrs	r2, r1
 800ae26:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ae28:	4b10      	ldr	r3, [pc, #64]	@ (800ae6c <HAL_ADC_MspInit+0x74>)
 800ae2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae2c:	4b0f      	ldr	r3, [pc, #60]	@ (800ae6c <HAL_ADC_MspInit+0x74>)
 800ae2e:	2104      	movs	r1, #4
 800ae30:	430a      	orrs	r2, r1
 800ae32:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ae34:	4b0d      	ldr	r3, [pc, #52]	@ (800ae6c <HAL_ADC_MspInit+0x74>)
 800ae36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae38:	2204      	movs	r2, #4
 800ae3a:	4013      	ands	r3, r2
 800ae3c:	60bb      	str	r3, [r7, #8]
 800ae3e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 800ae40:	193b      	adds	r3, r7, r4
 800ae42:	2230      	movs	r2, #48	@ 0x30
 800ae44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ae46:	193b      	adds	r3, r7, r4
 800ae48:	2203      	movs	r2, #3
 800ae4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae4c:	193b      	adds	r3, r7, r4
 800ae4e:	2200      	movs	r2, #0
 800ae50:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ae52:	193b      	adds	r3, r7, r4
 800ae54:	4a06      	ldr	r2, [pc, #24]	@ (800ae70 <HAL_ADC_MspInit+0x78>)
 800ae56:	0019      	movs	r1, r3
 800ae58:	0010      	movs	r0, r2
 800ae5a:	f00a fe79 	bl	8015b50 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800ae5e:	46c0      	nop			@ (mov r8, r8)
 800ae60:	46bd      	mov	sp, r7
 800ae62:	b009      	add	sp, #36	@ 0x24
 800ae64:	bd90      	pop	{r4, r7, pc}
 800ae66:	46c0      	nop			@ (mov r8, r8)
 800ae68:	40012400 	.word	0x40012400
 800ae6c:	40021000 	.word	0x40021000
 800ae70:	50000800 	.word	0x50000800

0800ae74 <ReadDirRegister>:

AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ae74:	b590      	push	{r4, r7, lr}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6039      	str	r1, [r7, #0]
 800ae7c:	0011      	movs	r1, r2
 800ae7e:	1dfb      	adds	r3, r7, #7
 800ae80:	1c02      	adds	r2, r0, #0
 800ae82:	701a      	strb	r2, [r3, #0]
 800ae84:	1dbb      	adds	r3, r7, #6
 800ae86:	1c0a      	adds	r2, r1, #0
 800ae88:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 800ae8a:	4b0a      	ldr	r3, [pc, #40]	@ (800aeb4 <ReadDirRegister+0x40>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00a      	beq.n	800aea8 <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 800ae92:	4b08      	ldr	r3, [pc, #32]	@ (800aeb4 <ReadDirRegister+0x40>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	1dba      	adds	r2, r7, #6
 800ae98:	7814      	ldrb	r4, [r2, #0]
 800ae9a:	6839      	ldr	r1, [r7, #0]
 800ae9c:	1dfa      	adds	r2, r7, #7
 800ae9e:	7810      	ldrb	r0, [r2, #0]
 800aea0:	0022      	movs	r2, r4
 800aea2:	4798      	blx	r3
 800aea4:	0003      	movs	r3, r0
 800aea6:	e000      	b.n	800aeaa <ReadDirRegister+0x36>
  }
  return false;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	0018      	movs	r0, r3
 800aeac:	46bd      	mov	sp, r7
 800aeae:	b003      	add	sp, #12
 800aeb0:	bd90      	pop	{r4, r7, pc}
 800aeb2:	46c0      	nop			@ (mov r8, r8)
 800aeb4:	20000ef0 	.word	0x20000ef0

0800aeb8 <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800aeb8:	b590      	push	{r4, r7, lr}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6039      	str	r1, [r7, #0]
 800aec0:	0011      	movs	r1, r2
 800aec2:	1dfb      	adds	r3, r7, #7
 800aec4:	1c02      	adds	r2, r0, #0
 800aec6:	701a      	strb	r2, [r3, #0]
 800aec8:	1dbb      	adds	r3, r7, #6
 800aeca:	1c0a      	adds	r2, r1, #0
 800aecc:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800aece:	4b0a      	ldr	r3, [pc, #40]	@ (800aef8 <ReadRegister+0x40>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00a      	beq.n	800aeec <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 800aed6:	4b08      	ldr	r3, [pc, #32]	@ (800aef8 <ReadRegister+0x40>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	1dba      	adds	r2, r7, #6
 800aedc:	7814      	ldrb	r4, [r2, #0]
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	1dfa      	adds	r2, r7, #7
 800aee2:	7810      	ldrb	r0, [r2, #0]
 800aee4:	0022      	movs	r2, r4
 800aee6:	4798      	blx	r3
 800aee8:	0003      	movs	r3, r0
 800aeea:	e000      	b.n	800aeee <ReadRegister+0x36>
  }
  return false;
 800aeec:	2300      	movs	r3, #0
}
 800aeee:	0018      	movs	r0, r3
 800aef0:	46bd      	mov	sp, r7
 800aef2:	b003      	add	sp, #12
 800aef4:	bd90      	pop	{r4, r7, pc}
 800aef6:	46c0      	nop			@ (mov r8, r8)
 800aef8:	20000ee8 	.word	0x20000ee8

0800aefc <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800aefc:	b590      	push	{r4, r7, lr}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6039      	str	r1, [r7, #0]
 800af04:	0011      	movs	r1, r2
 800af06:	1dfb      	adds	r3, r7, #7
 800af08:	1c02      	adds	r2, r0, #0
 800af0a:	701a      	strb	r2, [r3, #0]
 800af0c:	1dbb      	adds	r3, r7, #6
 800af0e:	1c0a      	adds	r2, r1, #0
 800af10:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800af12:	4b0a      	ldr	r3, [pc, #40]	@ (800af3c <WriteRegister+0x40>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00a      	beq.n	800af30 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800af1a:	4b08      	ldr	r3, [pc, #32]	@ (800af3c <WriteRegister+0x40>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	1dba      	adds	r2, r7, #6
 800af20:	7814      	ldrb	r4, [r2, #0]
 800af22:	6839      	ldr	r1, [r7, #0]
 800af24:	1dfa      	adds	r2, r7, #7
 800af26:	7810      	ldrb	r0, [r2, #0]
 800af28:	0022      	movs	r2, r4
 800af2a:	4798      	blx	r3
 800af2c:	0003      	movs	r3, r0
 800af2e:	e000      	b.n	800af32 <WriteRegister+0x36>
  }
  return false;
 800af30:	2300      	movs	r3, #0
}
 800af32:	0018      	movs	r0, r3
 800af34:	46bd      	mov	sp, r7
 800af36:	b003      	add	sp, #12
 800af38:	bd90      	pop	{r4, r7, pc}
 800af3a:	46c0      	nop			@ (mov r8, r8)
 800af3c:	20000eec 	.word	0x20000eec

0800af40 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	000a      	movs	r2, r1
 800af4a:	1cfb      	adds	r3, r7, #3
 800af4c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 800af4e:	230f      	movs	r3, #15
 800af50:	18fb      	adds	r3, r7, r3
 800af52:	22ff      	movs	r2, #255	@ 0xff
 800af54:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800af56:	230e      	movs	r3, #14
 800af58:	18fb      	adds	r3, r7, r3
 800af5a:	2200      	movs	r2, #0
 800af5c:	701a      	strb	r2, [r3, #0]
 800af5e:	e038      	b.n	800afd2 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800af60:	230e      	movs	r3, #14
 800af62:	18fb      	adds	r3, r7, r3
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	18d3      	adds	r3, r2, r3
 800af6a:	7819      	ldrb	r1, [r3, #0]
 800af6c:	220f      	movs	r2, #15
 800af6e:	18bb      	adds	r3, r7, r2
 800af70:	18ba      	adds	r2, r7, r2
 800af72:	7812      	ldrb	r2, [r2, #0]
 800af74:	404a      	eors	r2, r1
 800af76:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800af78:	230d      	movs	r3, #13
 800af7a:	18fb      	adds	r3, r7, r3
 800af7c:	2200      	movs	r2, #0
 800af7e:	701a      	strb	r2, [r3, #0]
 800af80:	e01c      	b.n	800afbc <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 800af82:	210f      	movs	r1, #15
 800af84:	187b      	adds	r3, r7, r1
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	b25b      	sxtb	r3, r3
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	da0a      	bge.n	800afa4 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 800af8e:	187b      	adds	r3, r7, r1
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	b25b      	sxtb	r3, r3
 800af94:	18db      	adds	r3, r3, r3
 800af96:	b25b      	sxtb	r3, r3
 800af98:	2231      	movs	r2, #49	@ 0x31
 800af9a:	4053      	eors	r3, r2
 800af9c:	b25a      	sxtb	r2, r3
 800af9e:	187b      	adds	r3, r7, r1
 800afa0:	701a      	strb	r2, [r3, #0]
 800afa2:	e005      	b.n	800afb0 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 800afa4:	230f      	movs	r3, #15
 800afa6:	18fa      	adds	r2, r7, r3
 800afa8:	18fb      	adds	r3, r7, r3
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	18db      	adds	r3, r3, r3
 800afae:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800afb0:	210d      	movs	r1, #13
 800afb2:	187b      	adds	r3, r7, r1
 800afb4:	781a      	ldrb	r2, [r3, #0]
 800afb6:	187b      	adds	r3, r7, r1
 800afb8:	3201      	adds	r2, #1
 800afba:	701a      	strb	r2, [r3, #0]
 800afbc:	230d      	movs	r3, #13
 800afbe:	18fb      	adds	r3, r7, r3
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	2b07      	cmp	r3, #7
 800afc4:	d9dd      	bls.n	800af82 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800afc6:	210e      	movs	r1, #14
 800afc8:	187b      	adds	r3, r7, r1
 800afca:	781a      	ldrb	r2, [r3, #0]
 800afcc:	187b      	adds	r3, r7, r1
 800afce:	3201      	adds	r2, #1
 800afd0:	701a      	strb	r2, [r3, #0]
 800afd2:	230e      	movs	r3, #14
 800afd4:	18fa      	adds	r2, r7, r3
 800afd6:	1cfb      	adds	r3, r7, #3
 800afd8:	7812      	ldrb	r2, [r2, #0]
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d3bf      	bcc.n	800af60 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800afe0:	230f      	movs	r3, #15
 800afe2:	18fb      	adds	r3, r7, r3
 800afe4:	781b      	ldrb	r3, [r3, #0]
}
 800afe6:	0018      	movs	r0, r3
 800afe8:	46bd      	mov	sp, r7
 800afea:	b004      	add	sp, #16
 800afec:	bd80      	pop	{r7, pc}
	...

0800aff0 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 800aff8:	f009 fcde 	bl	80149b8 <HAL_GetTick>
 800affc:	0002      	movs	r2, r0
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	18d2      	adds	r2, r2, r3
 800b002:	4b03      	ldr	r3, [pc, #12]	@ (800b010 <setAHT20TimeStamp+0x20>)
 800b004:	601a      	str	r2, [r3, #0]
}
 800b006:	46c0      	nop			@ (mov r8, r8)
 800b008:	46bd      	mov	sp, r7
 800b00a:	b002      	add	sp, #8
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	46c0      	nop			@ (mov r8, r8)
 800b010:	20000ee0 	.word	0x20000ee0

0800b014 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 800b020:	4b06      	ldr	r3, [pc, #24]	@ (800b03c <AHT_Init+0x28>)
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 800b026:	4b06      	ldr	r3, [pc, #24]	@ (800b040 <AHT_Init+0x2c>)
 800b028:	68fa      	ldr	r2, [r7, #12]
 800b02a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800b02c:	4b05      	ldr	r3, [pc, #20]	@ (800b044 <AHT_Init+0x30>)
 800b02e:	68ba      	ldr	r2, [r7, #8]
 800b030:	601a      	str	r2, [r3, #0]
}
 800b032:	46c0      	nop			@ (mov r8, r8)
 800b034:	46bd      	mov	sp, r7
 800b036:	b004      	add	sp, #16
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	46c0      	nop			@ (mov r8, r8)
 800b03c:	20000ef0 	.word	0x20000ef0
 800b040:	20000ee8 	.word	0x20000ee8
 800b044:	20000eec 	.word	0x20000eec

0800b048 <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af02      	add	r7, sp, #8
 800b04e:	0002      	movs	r2, r0
 800b050:	1dfb      	adds	r3, r7, #7
 800b052:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 800b054:	4b18      	ldr	r3, [pc, #96]	@ (800b0b8 <AHT20_register_reset+0x70>)
 800b056:	1dfa      	adds	r2, r7, #7
 800b058:	7812      	ldrb	r2, [r2, #0]
 800b05a:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 800b05c:	4b16      	ldr	r3, [pc, #88]	@ (800b0b8 <AHT20_register_reset+0x70>)
 800b05e:	2203      	movs	r2, #3
 800b060:	0019      	movs	r1, r3
 800b062:	2038      	movs	r0, #56	@ 0x38
 800b064:	f7ff ff4a 	bl	800aefc <WriteRegister>
  HAL_Delay(15);
 800b068:	200f      	movs	r0, #15
 800b06a:	f009 fcaf 	bl	80149cc <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800b06e:	4b13      	ldr	r3, [pc, #76]	@ (800b0bc <AHT20_register_reset+0x74>)
 800b070:	2203      	movs	r2, #3
 800b072:	0019      	movs	r1, r3
 800b074:	2038      	movs	r0, #56	@ 0x38
 800b076:	f7ff ff1f 	bl	800aeb8 <ReadRegister>
  HAL_Delay(15);
 800b07a:	200f      	movs	r0, #15
 800b07c:	f009 fca6 	bl	80149cc <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 800b080:	4b0e      	ldr	r3, [pc, #56]	@ (800b0bc <AHT20_register_reset+0x74>)
 800b082:	22b0      	movs	r2, #176	@ 0xb0
 800b084:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 800b086:	4b0d      	ldr	r3, [pc, #52]	@ (800b0bc <AHT20_register_reset+0x74>)
 800b088:	789b      	ldrb	r3, [r3, #2]
 800b08a:	0018      	movs	r0, r3
 800b08c:	4b0b      	ldr	r3, [pc, #44]	@ (800b0bc <AHT20_register_reset+0x74>)
 800b08e:	78db      	ldrb	r3, [r3, #3]
 800b090:	4a0b      	ldr	r2, [pc, #44]	@ (800b0c0 <AHT20_register_reset+0x78>)
 800b092:	490c      	ldr	r1, [pc, #48]	@ (800b0c4 <AHT20_register_reset+0x7c>)
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	0003      	movs	r3, r0
 800b098:	2003      	movs	r0, #3
 800b09a:	f008 ff0d 	bl	8013eb8 <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800b09e:	4b07      	ldr	r3, [pc, #28]	@ (800b0bc <AHT20_register_reset+0x74>)
 800b0a0:	2203      	movs	r2, #3
 800b0a2:	0019      	movs	r1, r3
 800b0a4:	2038      	movs	r0, #56	@ 0x38
 800b0a6:	f7ff ff29 	bl	800aefc <WriteRegister>
  HAL_Delay(15);
 800b0aa:	200f      	movs	r0, #15
 800b0ac:	f009 fc8e 	bl	80149cc <HAL_Delay>
}
 800b0b0:	46c0      	nop			@ (mov r8, r8)
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	b002      	add	sp, #8
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	2000009c 	.word	0x2000009c
 800b0bc:	20000ef4 	.word	0x20000ef4
 800b0c0:	0802c3f4 	.word	0x0802c3f4
 800b0c4:	0802c434 	.word	0x0802c434

0800b0c8 <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 800b0cc:	201b      	movs	r0, #27
 800b0ce:	f7ff ffbb 	bl	800b048 <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 800b0d2:	201c      	movs	r0, #28
 800b0d4:	f7ff ffb8 	bl	800b048 <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 800b0d8:	201e      	movs	r0, #30
 800b0da:	f7ff ffb5 	bl	800b048 <AHT20_register_reset>
}
 800b0de:	46c0      	nop			@ (mov r8, r8)
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <AHT20_read_status>:

uint8_t AHT20_read_status() {
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800b0e8:	4b0c      	ldr	r3, [pc, #48]	@ (800b11c <AHT20_read_status+0x38>)
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	0019      	movs	r1, r3
 800b0ee:	2038      	movs	r0, #56	@ 0x38
 800b0f0:	f7ff ff04 	bl	800aefc <WriteRegister>
  HAL_Delay(10);
 800b0f4:	200a      	movs	r0, #10
 800b0f6:	f009 fc69 	bl	80149cc <HAL_Delay>
  airtemphumraw[0] = 0;
 800b0fa:	4b09      	ldr	r3, [pc, #36]	@ (800b120 <AHT20_read_status+0x3c>)
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 800b100:	4b07      	ldr	r3, [pc, #28]	@ (800b120 <AHT20_read_status+0x3c>)
 800b102:	2201      	movs	r2, #1
 800b104:	0019      	movs	r1, r3
 800b106:	2038      	movs	r0, #56	@ 0x38
 800b108:	f7ff fed6 	bl	800aeb8 <ReadRegister>
  HAL_Delay(10);
 800b10c:	200a      	movs	r0, #10
 800b10e:	f009 fc5d 	bl	80149cc <HAL_Delay>
  return airtemphumraw[0];
 800b112:	4b03      	ldr	r3, [pc, #12]	@ (800b120 <AHT20_read_status+0x3c>)
 800b114:	781b      	ldrb	r3, [r3, #0]
}
 800b116:	0018      	movs	r0, r3
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	20000098 	.word	0x20000098
 800b120:	20000ef4 	.word	0x20000ef4

0800b124 <AHT20_init>:

bool AHT20_init(void) {
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 800b12a:	f009 fc45 	bl	80149b8 <HAL_GetTick>
 800b12e:	0003      	movs	r3, r0
 800b130:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2b77      	cmp	r3, #119	@ 0x77
 800b136:	d805      	bhi.n	800b144 <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2278      	movs	r2, #120	@ 0x78
 800b13c:	1ad3      	subs	r3, r2, r3
 800b13e:	0018      	movs	r0, r3
 800b140:	f009 fc44 	bl	80149cc <HAL_Delay>
  }
  AHT20_read_status();
 800b144:	f7ff ffce 	bl	800b0e4 <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 800b148:	4b0e      	ldr	r3, [pc, #56]	@ (800b184 <AHT20_init+0x60>)
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	4a0e      	ldr	r2, [pc, #56]	@ (800b188 <AHT20_init+0x64>)
 800b14e:	490f      	ldr	r1, [pc, #60]	@ (800b18c <AHT20_init+0x68>)
 800b150:	2003      	movs	r0, #3
 800b152:	f008 feb1 	bl	8013eb8 <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 800b156:	4b0b      	ldr	r3, [pc, #44]	@ (800b184 <AHT20_init+0x60>)
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	001a      	movs	r2, r3
 800b15c:	2318      	movs	r3, #24
 800b15e:	4013      	ands	r3, r2
 800b160:	2b18      	cmp	r3, #24
 800b162:	d00a      	beq.n	800b17a <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 800b164:	4b0a      	ldr	r3, [pc, #40]	@ (800b190 <AHT20_init+0x6c>)
 800b166:	2203      	movs	r2, #3
 800b168:	0019      	movs	r1, r3
 800b16a:	2038      	movs	r0, #56	@ 0x38
 800b16c:	f7ff fec6 	bl	800aefc <WriteRegister>
    HAL_Delay(10);
 800b170:	200a      	movs	r0, #10
 800b172:	f009 fc2b 	bl	80149cc <HAL_Delay>
    AHT20_Start_Init();
 800b176:	f7ff ffa7 	bl	800b0c8 <AHT20_Start_Init>
  }
  return true;
 800b17a:	2301      	movs	r3, #1
}
 800b17c:	0018      	movs	r0, r3
 800b17e:	46bd      	mov	sp, r7
 800b180:	b002      	add	sp, #8
 800b182:	bd80      	pop	{r7, pc}
 800b184:	20000ef4 	.word	0x20000ef4
 800b188:	0802c438 	.word	0x0802c438
 800b18c:	0802c434 	.word	0x0802c434
 800b190:	2000008c 	.word	0x2000008c

0800b194 <AHT20_calibrate>:


bool AHT20_calibrate() {
 800b194:	b590      	push	{r4, r7, lr}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800b19a:	1dfc      	adds	r4, r7, #7
 800b19c:	4b10      	ldr	r3, [pc, #64]	@ (800b1e0 <AHT20_calibrate+0x4c>)
 800b19e:	2201      	movs	r2, #1
 800b1a0:	0019      	movs	r1, r3
 800b1a2:	2038      	movs	r0, #56	@ 0x38
 800b1a4:	f7ff feaa 	bl	800aefc <WriteRegister>
 800b1a8:	0003      	movs	r3, r0
 800b1aa:	7023      	strb	r3, [r4, #0]
  if (!response) {
 800b1ac:	1dfb      	adds	r3, r7, #7
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	4053      	eors	r3, r2
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d005      	beq.n	800b1c6 <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 800b1ba:	4a0a      	ldr	r2, [pc, #40]	@ (800b1e4 <AHT20_calibrate+0x50>)
 800b1bc:	4b0a      	ldr	r3, [pc, #40]	@ (800b1e8 <AHT20_calibrate+0x54>)
 800b1be:	0019      	movs	r1, r3
 800b1c0:	2001      	movs	r0, #1
 800b1c2:	f008 fe79 	bl	8013eb8 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 800b1c6:	f009 fbf7 	bl	80149b8 <HAL_GetTick>
 800b1ca:	0003      	movs	r3, r0
 800b1cc:	3332      	adds	r3, #50	@ 0x32
 800b1ce:	001a      	movs	r2, r3
 800b1d0:	4b06      	ldr	r3, [pc, #24]	@ (800b1ec <AHT20_calibrate+0x58>)
 800b1d2:	601a      	str	r2, [r3, #0]
  return response;
 800b1d4:	1dfb      	adds	r3, r7, #7
 800b1d6:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 800b1d8:	0018      	movs	r0, r3
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	b003      	add	sp, #12
 800b1de:	bd90      	pop	{r4, r7, pc}
 800b1e0:	20000098 	.word	0x20000098
 800b1e4:	0802c460 	.word	0x0802c460
 800b1e8:	0802c498 	.word	0x0802c498
 800b1ec:	20000ee0 	.word	0x20000ee0

0800b1f0 <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 800b1f4:	4a0a      	ldr	r2, [pc, #40]	@ (800b220 <AHT20_DeviceConnected+0x30>)
 800b1f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b224 <AHT20_DeviceConnected+0x34>)
 800b1f8:	0019      	movs	r1, r3
 800b1fa:	2003      	movs	r0, #3
 800b1fc:	f008 fe5c 	bl	8013eb8 <CreateLine>
   AHT20_init();
 800b200:	f7ff ff90 	bl	800b124 <AHT20_init>
   HAL_Delay(10);
 800b204:	200a      	movs	r0, #10
 800b206:	f009 fbe1 	bl	80149cc <HAL_Delay>
   AHT20_calibrate();
 800b20a:	f7ff ffc3 	bl	800b194 <AHT20_calibrate>
   return (bool)AHT20_read_status();
 800b20e:	f7ff ff69 	bl	800b0e4 <AHT20_read_status>
 800b212:	0003      	movs	r3, r0
 800b214:	1e5a      	subs	r2, r3, #1
 800b216:	4193      	sbcs	r3, r2
 800b218:	b2db      	uxtb	r3, r3
 }
 800b21a:	0018      	movs	r0, r3
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	0802c49c 	.word	0x0802c49c
 800b224:	0802c434 	.word	0x0802c434

0800b228 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 800b228:	b590      	push	{r4, r7, lr}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 800b22e:	1dfc      	adds	r4, r7, #7
 800b230:	4b10      	ldr	r3, [pc, #64]	@ (800b274 <AHT20_StartMeasurement+0x4c>)
 800b232:	2203      	movs	r2, #3
 800b234:	0019      	movs	r1, r3
 800b236:	2038      	movs	r0, #56	@ 0x38
 800b238:	f7ff fe60 	bl	800aefc <WriteRegister>
 800b23c:	0003      	movs	r3, r0
 800b23e:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 800b240:	1dfb      	adds	r3, r7, #7
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	2201      	movs	r2, #1
 800b246:	4053      	eors	r3, r2
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d005      	beq.n	800b25a <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800b24e:	4a0a      	ldr	r2, [pc, #40]	@ (800b278 <AHT20_StartMeasurement+0x50>)
 800b250:	4b0a      	ldr	r3, [pc, #40]	@ (800b27c <AHT20_StartMeasurement+0x54>)
 800b252:	0019      	movs	r1, r3
 800b254:	2001      	movs	r0, #1
 800b256:	f008 fe2f 	bl	8013eb8 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 800b25a:	f009 fbad 	bl	80149b8 <HAL_GetTick>
 800b25e:	0003      	movs	r3, r0
 800b260:	33fa      	adds	r3, #250	@ 0xfa
 800b262:	001a      	movs	r2, r3
 800b264:	4b06      	ldr	r3, [pc, #24]	@ (800b280 <AHT20_StartMeasurement+0x58>)
 800b266:	601a      	str	r2, [r3, #0]
  return response;
 800b268:	1dfb      	adds	r3, r7, #7
 800b26a:	781b      	ldrb	r3, [r3, #0]
}
 800b26c:	0018      	movs	r0, r3
 800b26e:	46bd      	mov	sp, r7
 800b270:	b003      	add	sp, #12
 800b272:	bd90      	pop	{r4, r7, pc}
 800b274:	20000094 	.word	0x20000094
 800b278:	0802c4b4 	.word	0x0802c4b4
 800b27c:	0802c498 	.word	0x0802c498
 800b280:	20000ee0 	.word	0x20000ee0

0800b284 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 800b284:	b590      	push	{r4, r7, lr}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 800b28a:	f009 fb95 	bl	80149b8 <HAL_GetTick>
 800b28e:	0003      	movs	r3, r0
 800b290:	22fa      	movs	r2, #250	@ 0xfa
 800b292:	0092      	lsls	r2, r2, #2
 800b294:	189a      	adds	r2, r3, r2
 800b296:	4b29      	ldr	r3, [pc, #164]	@ (800b33c <AHT20_GetMeasurementValues+0xb8>)
 800b298:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800b29a:	e019      	b.n	800b2d0 <AHT20_GetMeasurementValues+0x4c>
//    Info("AHT20 Device busy, waiting for results");
    if (TimestampIsReached(AHT20TimeStamp)) {
 800b29c:	4b27      	ldr	r3, [pc, #156]	@ (800b33c <AHT20_GetMeasurementValues+0xb8>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	0018      	movs	r0, r3
 800b2a2:	f008 fdb3 	bl	8013e0c <TimestampIsReached>
 800b2a6:	1e03      	subs	r3, r0, #0
 800b2a8:	d00f      	beq.n	800b2ca <AHT20_GetMeasurementValues+0x46>
      Error("AHT2x timeout for getting values");
 800b2aa:	4a25      	ldr	r2, [pc, #148]	@ (800b340 <AHT20_GetMeasurementValues+0xbc>)
 800b2ac:	4b25      	ldr	r3, [pc, #148]	@ (800b344 <AHT20_GetMeasurementValues+0xc0>)
 800b2ae:	0019      	movs	r1, r3
 800b2b0:	2001      	movs	r0, #1
 800b2b2:	f008 fe01 	bl	8013eb8 <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 800b2b6:	f009 fb7f 	bl	80149b8 <HAL_GetTick>
 800b2ba:	0003      	movs	r3, r0
 800b2bc:	22fa      	movs	r2, #250	@ 0xfa
 800b2be:	00d2      	lsls	r2, r2, #3
 800b2c0:	189a      	adds	r2, r3, r2
 800b2c2:	4b1e      	ldr	r3, [pc, #120]	@ (800b33c <AHT20_GetMeasurementValues+0xb8>)
 800b2c4:	601a      	str	r2, [r3, #0]
      return false;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	e034      	b.n	800b334 <AHT20_GetMeasurementValues+0xb0>
    }
    HAL_Delay(10);
 800b2ca:	200a      	movs	r0, #10
 800b2cc:	f009 fb7e 	bl	80149cc <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800b2d0:	f7ff ff08 	bl	800b0e4 <AHT20_read_status>
 800b2d4:	0003      	movs	r3, r0
 800b2d6:	001a      	movs	r2, r3
 800b2d8:	2380      	movs	r3, #128	@ 0x80
 800b2da:	4013      	ands	r3, r2
 800b2dc:	2b80      	cmp	r3, #128	@ 0x80
 800b2de:	d0dd      	beq.n	800b29c <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 800b2e0:	200a      	movs	r0, #10
 800b2e2:	f009 fb73 	bl	80149cc <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 800b2e6:	1dfb      	adds	r3, r7, #7
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	701a      	strb	r2, [r3, #0]
 800b2ec:	e009      	b.n	800b302 <AHT20_GetMeasurementValues+0x7e>
    airtemphumraw[g] = 0;
 800b2ee:	1dfb      	adds	r3, r7, #7
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	4a15      	ldr	r2, [pc, #84]	@ (800b348 <AHT20_GetMeasurementValues+0xc4>)
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 800b2f8:	1dfb      	adds	r3, r7, #7
 800b2fa:	781a      	ldrb	r2, [r3, #0]
 800b2fc:	1dfb      	adds	r3, r7, #7
 800b2fe:	3201      	adds	r2, #1
 800b300:	701a      	strb	r2, [r3, #0]
 800b302:	1dfb      	adds	r3, r7, #7
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	2b06      	cmp	r3, #6
 800b308:	d9f1      	bls.n	800b2ee <AHT20_GetMeasurementValues+0x6a>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800b30a:	1dbc      	adds	r4, r7, #6
 800b30c:	4b0e      	ldr	r3, [pc, #56]	@ (800b348 <AHT20_GetMeasurementValues+0xc4>)
 800b30e:	2207      	movs	r2, #7
 800b310:	0019      	movs	r1, r3
 800b312:	2038      	movs	r0, #56	@ 0x38
 800b314:	f7ff fdae 	bl	800ae74 <ReadDirRegister>
 800b318:	0003      	movs	r3, r0
 800b31a:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 800b31c:	200a      	movs	r0, #10
 800b31e:	f009 fb55 	bl	80149cc <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 800b322:	f009 fb49 	bl	80149b8 <HAL_GetTick>
 800b326:	0003      	movs	r3, r0
 800b328:	3364      	adds	r3, #100	@ 0x64
 800b32a:	001a      	movs	r2, r3
 800b32c:	4b03      	ldr	r3, [pc, #12]	@ (800b33c <AHT20_GetMeasurementValues+0xb8>)
 800b32e:	601a      	str	r2, [r3, #0]
  return response;
 800b330:	1dbb      	adds	r3, r7, #6
 800b332:	781b      	ldrb	r3, [r3, #0]
}
 800b334:	0018      	movs	r0, r3
 800b336:	46bd      	mov	sp, r7
 800b338:	b003      	add	sp, #12
 800b33a:	bd90      	pop	{r4, r7, pc}
 800b33c:	20000ee0 	.word	0x20000ee0
 800b340:	0802c4e0 	.word	0x0802c4e0
 800b344:	0802c498 	.word	0x0802c498
 800b348:	20000ef4 	.word	0x20000ef4

0800b34c <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 800b34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b34e:	46c6      	mov	lr, r8
 800b350:	b500      	push	{lr}
 800b352:	b08a      	sub	sp, #40	@ 0x28
 800b354:	af06      	add	r7, sp, #24
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 800b35a:	4b5a      	ldr	r3, [pc, #360]	@ (800b4c4 <AHT20_Calculate+0x178>)
 800b35c:	799c      	ldrb	r4, [r3, #6]
 800b35e:	4b59      	ldr	r3, [pc, #356]	@ (800b4c4 <AHT20_Calculate+0x178>)
 800b360:	2106      	movs	r1, #6
 800b362:	0018      	movs	r0, r3
 800b364:	f7ff fdec 	bl	800af40 <CalculateCRC>
 800b368:	0003      	movs	r3, r0
 800b36a:	429c      	cmp	r4, r3
 800b36c:	d044      	beq.n	800b3f8 <AHT20_Calculate+0xac>
 800b36e:	4b55      	ldr	r3, [pc, #340]	@ (800b4c4 <AHT20_Calculate+0x178>)
 800b370:	799b      	ldrb	r3, [r3, #6]
 800b372:	2bff      	cmp	r3, #255	@ 0xff
 800b374:	d040      	beq.n	800b3f8 <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 800b376:	4b53      	ldr	r3, [pc, #332]	@ (800b4c4 <AHT20_Calculate+0x178>)
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	4698      	mov	r8, r3
 800b37c:	4b51      	ldr	r3, [pc, #324]	@ (800b4c4 <AHT20_Calculate+0x178>)
 800b37e:	785b      	ldrb	r3, [r3, #1]
 800b380:	0018      	movs	r0, r3
 800b382:	4b50      	ldr	r3, [pc, #320]	@ (800b4c4 <AHT20_Calculate+0x178>)
 800b384:	789b      	ldrb	r3, [r3, #2]
 800b386:	001c      	movs	r4, r3
 800b388:	4b4e      	ldr	r3, [pc, #312]	@ (800b4c4 <AHT20_Calculate+0x178>)
 800b38a:	78db      	ldrb	r3, [r3, #3]
 800b38c:	001d      	movs	r5, r3
 800b38e:	4b4d      	ldr	r3, [pc, #308]	@ (800b4c4 <AHT20_Calculate+0x178>)
 800b390:	791b      	ldrb	r3, [r3, #4]
 800b392:	001e      	movs	r6, r3
 800b394:	4b4b      	ldr	r3, [pc, #300]	@ (800b4c4 <AHT20_Calculate+0x178>)
 800b396:	795b      	ldrb	r3, [r3, #5]
 800b398:	469c      	mov	ip, r3
 800b39a:	4b4a      	ldr	r3, [pc, #296]	@ (800b4c4 <AHT20_Calculate+0x178>)
 800b39c:	799b      	ldrb	r3, [r3, #6]
 800b39e:	4a4a      	ldr	r2, [pc, #296]	@ (800b4c8 <AHT20_Calculate+0x17c>)
 800b3a0:	494a      	ldr	r1, [pc, #296]	@ (800b4cc <AHT20_Calculate+0x180>)
 800b3a2:	9305      	str	r3, [sp, #20]
 800b3a4:	4663      	mov	r3, ip
 800b3a6:	9304      	str	r3, [sp, #16]
 800b3a8:	9603      	str	r6, [sp, #12]
 800b3aa:	9502      	str	r5, [sp, #8]
 800b3ac:	9401      	str	r4, [sp, #4]
 800b3ae:	9000      	str	r0, [sp, #0]
 800b3b0:	4643      	mov	r3, r8
 800b3b2:	2003      	movs	r0, #3
 800b3b4:	f008 fd80 	bl	8013eb8 <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 800b3b8:	4b42      	ldr	r3, [pc, #264]	@ (800b4c4 <AHT20_Calculate+0x178>)
 800b3ba:	799b      	ldrb	r3, [r3, #6]
 800b3bc:	001c      	movs	r4, r3
 800b3be:	4b41      	ldr	r3, [pc, #260]	@ (800b4c4 <AHT20_Calculate+0x178>)
 800b3c0:	2106      	movs	r1, #6
 800b3c2:	0018      	movs	r0, r3
 800b3c4:	f7ff fdbc 	bl	800af40 <CalculateCRC>
 800b3c8:	0003      	movs	r3, r0
 800b3ca:	4a41      	ldr	r2, [pc, #260]	@ (800b4d0 <AHT20_Calculate+0x184>)
 800b3cc:	4941      	ldr	r1, [pc, #260]	@ (800b4d4 <AHT20_Calculate+0x188>)
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	0023      	movs	r3, r4
 800b3d2:	2001      	movs	r0, #1
 800b3d4:	f008 fd70 	bl	8013eb8 <CreateLine>
    *airtemp = 0.0;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 800b3e4:	f009 fae8 	bl	80149b8 <HAL_GetTick>
 800b3e8:	0003      	movs	r3, r0
 800b3ea:	22fa      	movs	r2, #250	@ 0xfa
 800b3ec:	00d2      	lsls	r2, r2, #3
 800b3ee:	189a      	adds	r2, r3, r2
 800b3f0:	4b39      	ldr	r3, [pc, #228]	@ (800b4d8 <AHT20_Calculate+0x18c>)
 800b3f2:	601a      	str	r2, [r3, #0]
    return false;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	e05f      	b.n	800b4b8 <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 800b3f8:	4b38      	ldr	r3, [pc, #224]	@ (800b4dc <AHT20_Calculate+0x190>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 800b3fe:	4b31      	ldr	r3, [pc, #196]	@ (800b4c4 <AHT20_Calculate+0x178>)
 800b400:	78db      	ldrb	r3, [r3, #3]
 800b402:	041a      	lsls	r2, r3, #16
 800b404:	23f0      	movs	r3, #240	@ 0xf0
 800b406:	031b      	lsls	r3, r3, #12
 800b408:	401a      	ands	r2, r3
 800b40a:	4b2e      	ldr	r3, [pc, #184]	@ (800b4c4 <AHT20_Calculate+0x178>)
 800b40c:	791b      	ldrb	r3, [r3, #4]
 800b40e:	021b      	lsls	r3, r3, #8
 800b410:	18d3      	adds	r3, r2, r3
 800b412:	4a2c      	ldr	r2, [pc, #176]	@ (800b4c4 <AHT20_Calculate+0x178>)
 800b414:	7952      	ldrb	r2, [r2, #5]
 800b416:	189b      	adds	r3, r3, r2
 800b418:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f7f6 fa54 	bl	80018c8 <__aeabi_ui2f>
 800b420:	1c03      	adds	r3, r0, #0
 800b422:	2193      	movs	r1, #147	@ 0x93
 800b424:	05c9      	lsls	r1, r1, #23
 800b426:	1c18      	adds	r0, r3, #0
 800b428:	f7f5 fc3c 	bl	8000ca4 <__aeabi_fdiv>
 800b42c:	1c03      	adds	r3, r0, #0
 800b42e:	492c      	ldr	r1, [pc, #176]	@ (800b4e0 <AHT20_Calculate+0x194>)
 800b430:	1c18      	adds	r0, r3, #0
 800b432:	f7f5 fe05 	bl	8001040 <__aeabi_fmul>
 800b436:	1c03      	adds	r3, r0, #0
 800b438:	492a      	ldr	r1, [pc, #168]	@ (800b4e4 <AHT20_Calculate+0x198>)
 800b43a:	1c18      	adds	r0, r3, #0
 800b43c:	f7f5 ff5a 	bl	80012f4 <__aeabi_fsub>
 800b440:	1c03      	adds	r3, r0, #0
 800b442:	1c1a      	adds	r2, r3, #0
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800b448:	4b1e      	ldr	r3, [pc, #120]	@ (800b4c4 <AHT20_Calculate+0x178>)
 800b44a:	785b      	ldrb	r3, [r3, #1]
 800b44c:	031a      	lsls	r2, r3, #12
 800b44e:	4b1d      	ldr	r3, [pc, #116]	@ (800b4c4 <AHT20_Calculate+0x178>)
 800b450:	789b      	ldrb	r3, [r3, #2]
 800b452:	011b      	lsls	r3, r3, #4
 800b454:	18d3      	adds	r3, r2, r3
 800b456:	4a1b      	ldr	r2, [pc, #108]	@ (800b4c4 <AHT20_Calculate+0x178>)
 800b458:	78d2      	ldrb	r2, [r2, #3]
 800b45a:	0912      	lsrs	r2, r2, #4
 800b45c:	b2d2      	uxtb	r2, r2
 800b45e:	189b      	adds	r3, r3, r2
 800b460:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 800b462:	68b8      	ldr	r0, [r7, #8]
 800b464:	f7f6 fa30 	bl	80018c8 <__aeabi_ui2f>
 800b468:	1c03      	adds	r3, r0, #0
 800b46a:	2193      	movs	r1, #147	@ 0x93
 800b46c:	05c9      	lsls	r1, r1, #23
 800b46e:	1c18      	adds	r0, r3, #0
 800b470:	f7f5 fc18 	bl	8000ca4 <__aeabi_fdiv>
 800b474:	1c03      	adds	r3, r0, #0
 800b476:	491c      	ldr	r1, [pc, #112]	@ (800b4e8 <AHT20_Calculate+0x19c>)
 800b478:	1c18      	adds	r0, r3, #0
 800b47a:	f7f5 fde1 	bl	8001040 <__aeabi_fmul>
 800b47e:	1c03      	adds	r3, r0, #0
 800b480:	1c1a      	adds	r2, r3, #0
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	601a      	str	r2, [r3, #0]
  Info("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	1c18      	adds	r0, r3, #0
 800b48c:	f7f8 fa02 	bl	8003894 <__aeabi_f2d>
 800b490:	0004      	movs	r4, r0
 800b492:	000d      	movs	r5, r1
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	1c18      	adds	r0, r3, #0
 800b49a:	f7f8 f9fb 	bl	8003894 <__aeabi_f2d>
 800b49e:	0002      	movs	r2, r0
 800b4a0:	000b      	movs	r3, r1
 800b4a2:	4812      	ldr	r0, [pc, #72]	@ (800b4ec <AHT20_Calculate+0x1a0>)
 800b4a4:	4912      	ldr	r1, [pc, #72]	@ (800b4f0 <AHT20_Calculate+0x1a4>)
 800b4a6:	9202      	str	r2, [sp, #8]
 800b4a8:	9303      	str	r3, [sp, #12]
 800b4aa:	9400      	str	r4, [sp, #0]
 800b4ac:	9501      	str	r5, [sp, #4]
 800b4ae:	0002      	movs	r2, r0
 800b4b0:	2002      	movs	r0, #2
 800b4b2:	f008 fd01 	bl	8013eb8 <CreateLine>
  return true;
 800b4b6:	2301      	movs	r3, #1
}
 800b4b8:	0018      	movs	r0, r3
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	b004      	add	sp, #16
 800b4be:	bc80      	pop	{r7}
 800b4c0:	46b8      	mov	r8, r7
 800b4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4c4:	20000ef4 	.word	0x20000ef4
 800b4c8:	0802c504 	.word	0x0802c504
 800b4cc:	0802c434 	.word	0x0802c434
 800b4d0:	0802c584 	.word	0x0802c584
 800b4d4:	0802c498 	.word	0x0802c498
 800b4d8:	20000ee0 	.word	0x20000ee0
 800b4dc:	20000efb 	.word	0x20000efb
 800b4e0:	43480000 	.word	0x43480000
 800b4e4:	42480000 	.word	0x42480000
 800b4e8:	42c80000 	.word	0x42c80000
 800b4ec:	0802c5ac 	.word	0x0802c5ac
 800b4f0:	0802c5e0 	.word	0x0802c5e0

0800b4f4 <AHT20_reset>:

bool AHT20_reset(void) {
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	af00      	add	r7, sp, #0
  AHT20TimeStamp = HAL_GetTick() + 50;
 800b4f8:	f009 fa5e 	bl	80149b8 <HAL_GetTick>
 800b4fc:	0003      	movs	r3, r0
 800b4fe:	3332      	adds	r3, #50	@ 0x32
 800b500:	001a      	movs	r2, r3
 800b502:	4b07      	ldr	r3, [pc, #28]	@ (800b520 <AHT20_reset+0x2c>)
 800b504:	601a      	str	r2, [r3, #0]
  calibrated = false;
 800b506:	4b07      	ldr	r3, [pc, #28]	@ (800b524 <AHT20_reset+0x30>)
 800b508:	2200      	movs	r2, #0
 800b50a:	701a      	strb	r2, [r3, #0]
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
 800b50c:	4b06      	ldr	r3, [pc, #24]	@ (800b528 <AHT20_reset+0x34>)
 800b50e:	2201      	movs	r2, #1
 800b510:	0019      	movs	r1, r3
 800b512:	2038      	movs	r0, #56	@ 0x38
 800b514:	f7ff fcf2 	bl	800aefc <WriteRegister>
 800b518:	0003      	movs	r3, r0
}
 800b51a:	0018      	movs	r0, r3
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	20000ee0 	.word	0x20000ee0
 800b524:	20000ee4 	.word	0x20000ee4
 800b528:	20000090 	.word	0x20000090

0800b52c <AHT_Upkeep>:

AHT20State AHT_Upkeep(void) {
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800b532:	4b61      	ldr	r3, [pc, #388]	@ (800b6b8 <AHT_Upkeep+0x18c>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	0018      	movs	r0, r3
 800b538:	f008 fc68 	bl	8013e0c <TimestampIsReached>
 800b53c:	0003      	movs	r3, r0
 800b53e:	001a      	movs	r2, r3
 800b540:	2301      	movs	r3, #1
 800b542:	4053      	eors	r3, r2
 800b544:	b2db      	uxtb	r3, r3
 800b546:	2b00      	cmp	r3, #0
 800b548:	d002      	beq.n	800b550 <AHT_Upkeep+0x24>
    return AHTState;
 800b54a:	4b5c      	ldr	r3, [pc, #368]	@ (800b6bc <AHT_Upkeep+0x190>)
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	e0ae      	b.n	800b6ae <AHT_Upkeep+0x182>
  }
  switch(AHTState) {
 800b550:	4b5a      	ldr	r3, [pc, #360]	@ (800b6bc <AHT_Upkeep+0x190>)
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	2b05      	cmp	r3, #5
 800b556:	d900      	bls.n	800b55a <AHT_Upkeep+0x2e>
 800b558:	e07d      	b.n	800b656 <AHT_Upkeep+0x12a>
 800b55a:	009a      	lsls	r2, r3, #2
 800b55c:	4b58      	ldr	r3, [pc, #352]	@ (800b6c0 <AHT_Upkeep+0x194>)
 800b55e:	18d3      	adds	r3, r2, r3
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 800b564:	4a57      	ldr	r2, [pc, #348]	@ (800b6c4 <AHT_Upkeep+0x198>)
 800b566:	4b58      	ldr	r3, [pc, #352]	@ (800b6c8 <AHT_Upkeep+0x19c>)
 800b568:	0019      	movs	r1, r3
 800b56a:	2003      	movs	r0, #3
 800b56c:	f008 fca4 	bl	8013eb8 <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 800b570:	f009 fa22 	bl	80149b8 <HAL_GetTick>
 800b574:	0003      	movs	r3, r0
 800b576:	4a55      	ldr	r2, [pc, #340]	@ (800b6cc <AHT_Upkeep+0x1a0>)
 800b578:	189a      	adds	r2, r3, r2
 800b57a:	4b4f      	ldr	r3, [pc, #316]	@ (800b6b8 <AHT_Upkeep+0x18c>)
 800b57c:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 800b57e:	4b54      	ldr	r3, [pc, #336]	@ (800b6d0 <AHT_Upkeep+0x1a4>)
 800b580:	781a      	ldrb	r2, [r3, #0]
 800b582:	4b54      	ldr	r3, [pc, #336]	@ (800b6d4 <AHT_Upkeep+0x1a8>)
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	429a      	cmp	r2, r3
 800b588:	d100      	bne.n	800b58c <AHT_Upkeep+0x60>
 800b58a:	e087      	b.n	800b69c <AHT_Upkeep+0x170>
      AHTState = AHT_STATE_WAIT;
 800b58c:	4b4b      	ldr	r3, [pc, #300]	@ (800b6bc <AHT_Upkeep+0x190>)
 800b58e:	2205      	movs	r2, #5
 800b590:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b592:	e083      	b.n	800b69c <AHT_Upkeep+0x170>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800b594:	f002 fcaa 	bl	800deec <getSensorLock>
 800b598:	1e03      	subs	r3, r0, #0
 800b59a:	d000      	beq.n	800b59e <AHT_Upkeep+0x72>
 800b59c:	e080      	b.n	800b6a0 <AHT_Upkeep+0x174>
      break;
    }
    setSensorLock(AHT20);
 800b59e:	2002      	movs	r0, #2
 800b5a0:	f002 fc90 	bl	800dec4 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 800b5a4:	f7ff fe40 	bl	800b228 <AHT20_StartMeasurement>
 800b5a8:	0003      	movs	r3, r0
 800b5aa:	001a      	movs	r2, r3
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	4053      	eors	r3, r2
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d00c      	beq.n	800b5d0 <AHT_Upkeep+0xa4>
      AHT20_reset();
 800b5b6:	f7ff ff9d 	bl	800b4f4 <AHT20_reset>
      AHT20TimeStamp = HAL_GetTick() + 200;
 800b5ba:	f009 f9fd 	bl	80149b8 <HAL_GetTick>
 800b5be:	0003      	movs	r3, r0
 800b5c0:	33c8      	adds	r3, #200	@ 0xc8
 800b5c2:	001a      	movs	r2, r3
 800b5c4:	4b3c      	ldr	r3, [pc, #240]	@ (800b6b8 <AHT_Upkeep+0x18c>)
 800b5c6:	601a      	str	r2, [r3, #0]
      AHTState = AHT20_ERROR;
 800b5c8:	4b3c      	ldr	r3, [pc, #240]	@ (800b6bc <AHT_Upkeep+0x190>)
 800b5ca:	22ff      	movs	r2, #255	@ 0xff
 800b5cc:	701a      	strb	r2, [r3, #0]
 800b5ce:	e002      	b.n	800b5d6 <AHT_Upkeep+0xaa>
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800b5d0:	4b3a      	ldr	r3, [pc, #232]	@ (800b6bc <AHT_Upkeep+0x190>)
 800b5d2:	2202      	movs	r2, #2
 800b5d4:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 800b5d6:	200a      	movs	r0, #10
 800b5d8:	f009 f9f8 	bl	80149cc <HAL_Delay>
    break;
 800b5dc:	e065      	b.n	800b6aa <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 800b5de:	f7ff fe51 	bl	800b284 <AHT20_GetMeasurementValues>
 800b5e2:	1e03      	subs	r3, r0, #0
 800b5e4:	d05e      	beq.n	800b6a4 <AHT_Upkeep+0x178>
//      Debug("AHT20_GetMeasurementValues success");
      HAL_Delay(10); // wait for deferred DMA transfers
 800b5e6:	200a      	movs	r0, #10
 800b5e8:	f009 f9f0 	bl	80149cc <HAL_Delay>
      setSensorLock(FREE);
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	f002 fc69 	bl	800dec4 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 800b5f2:	4b32      	ldr	r3, [pc, #200]	@ (800b6bc <AHT_Upkeep+0x190>)
 800b5f4:	2203      	movs	r2, #3
 800b5f6:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 800b5f8:	e054      	b.n	800b6a4 <AHT_Upkeep+0x178>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 800b5fa:	003a      	movs	r2, r7
 800b5fc:	1d3b      	adds	r3, r7, #4
 800b5fe:	0011      	movs	r1, r2
 800b600:	0018      	movs	r0, r3
 800b602:	f7ff fea3 	bl	800b34c <AHT20_Calculate>
 800b606:	0003      	movs	r3, r0
 800b608:	001a      	movs	r2, r3
 800b60a:	2301      	movs	r3, #1
 800b60c:	4053      	eors	r3, r2
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	2b00      	cmp	r3, #0
 800b612:	d005      	beq.n	800b620 <AHT_Upkeep+0xf4>
      AHTState = AHT20_ERROR;
 800b614:	4b29      	ldr	r3, [pc, #164]	@ (800b6bc <AHT_Upkeep+0x190>)
 800b616:	22ff      	movs	r2, #255	@ 0xff
 800b618:	701a      	strb	r2, [r3, #0]
      return AHTState;
 800b61a:	4b28      	ldr	r3, [pc, #160]	@ (800b6bc <AHT_Upkeep+0x190>)
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	e046      	b.n	800b6ae <AHT_Upkeep+0x182>
    }
    setAHT2x(airtemp, airhum); //store to transmit
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	1c11      	adds	r1, r2, #0
 800b626:	1c18      	adds	r0, r3, #0
 800b628:	f7f9 fa56 	bl	8004ad8 <setAHT2x>
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	683a      	ldr	r2, [r7, #0]
 800b630:	1c11      	adds	r1, r2, #0
 800b632:	1c18      	adds	r0, r3, #0
 800b634:	f7f8 fedc 	bl	80043f0 <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 800b638:	4b20      	ldr	r3, [pc, #128]	@ (800b6bc <AHT_Upkeep+0x190>)
 800b63a:	2205      	movs	r2, #5
 800b63c:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 800b63e:	f009 f9bb 	bl	80149b8 <HAL_GetTick>
 800b642:	0003      	movs	r3, r0
 800b644:	4a24      	ldr	r2, [pc, #144]	@ (800b6d8 <AHT_Upkeep+0x1ac>)
 800b646:	189a      	adds	r2, r3, r2
 800b648:	4b1b      	ldr	r3, [pc, #108]	@ (800b6b8 <AHT_Upkeep+0x18c>)
 800b64a:	601a      	str	r2, [r3, #0]
    break;
 800b64c:	e02d      	b.n	800b6aa <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800b64e:	4b1b      	ldr	r3, [pc, #108]	@ (800b6bc <AHT_Upkeep+0x190>)
 800b650:	2201      	movs	r2, #1
 800b652:	701a      	strb	r2, [r3, #0]
  break;
 800b654:	e029      	b.n	800b6aa <AHT_Upkeep+0x17e>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800b656:	4b19      	ldr	r3, [pc, #100]	@ (800b6bc <AHT_Upkeep+0x190>)
 800b658:	2201      	movs	r2, #1
 800b65a:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800b65c:	f002 fc46 	bl	800deec <getSensorLock>
 800b660:	0003      	movs	r3, r0
 800b662:	2b02      	cmp	r3, #2
 800b664:	d102      	bne.n	800b66c <AHT_Upkeep+0x140>
      setSensorLock(FREE);
 800b666:	2000      	movs	r0, #0
 800b668:	f002 fc2c 	bl	800dec4 <setSensorLock>
    }
    AHTerrors++;
 800b66c:	4b1b      	ldr	r3, [pc, #108]	@ (800b6dc <AHT_Upkeep+0x1b0>)
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	3301      	adds	r3, #1
 800b672:	b2da      	uxtb	r2, r3
 800b674:	4b19      	ldr	r3, [pc, #100]	@ (800b6dc <AHT_Upkeep+0x1b0>)
 800b676:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 800b678:	4b18      	ldr	r3, [pc, #96]	@ (800b6dc <AHT_Upkeep+0x1b0>)
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	2b19      	cmp	r3, #25
 800b67e:	d913      	bls.n	800b6a8 <AHT_Upkeep+0x17c>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 800b680:	4a17      	ldr	r2, [pc, #92]	@ (800b6e0 <AHT_Upkeep+0x1b4>)
 800b682:	4b18      	ldr	r3, [pc, #96]	@ (800b6e4 <AHT_Upkeep+0x1b8>)
 800b684:	0019      	movs	r1, r3
 800b686:	2001      	movs	r0, #1
 800b688:	f008 fc16 	bl	8013eb8 <CreateLine>
      AHTState = AHT_STATE_OFF;
 800b68c:	4b0b      	ldr	r3, [pc, #44]	@ (800b6bc <AHT_Upkeep+0x190>)
 800b68e:	2200      	movs	r2, #0
 800b690:	701a      	strb	r2, [r3, #0]
      offday = weekday;
 800b692:	4b0f      	ldr	r3, [pc, #60]	@ (800b6d0 <AHT_Upkeep+0x1a4>)
 800b694:	781a      	ldrb	r2, [r3, #0]
 800b696:	4b0f      	ldr	r3, [pc, #60]	@ (800b6d4 <AHT_Upkeep+0x1a8>)
 800b698:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b69a:	e005      	b.n	800b6a8 <AHT_Upkeep+0x17c>
    break;
 800b69c:	46c0      	nop			@ (mov r8, r8)
 800b69e:	e004      	b.n	800b6aa <AHT_Upkeep+0x17e>
      break;
 800b6a0:	46c0      	nop			@ (mov r8, r8)
 800b6a2:	e002      	b.n	800b6aa <AHT_Upkeep+0x17e>
    break;
 800b6a4:	46c0      	nop			@ (mov r8, r8)
 800b6a6:	e000      	b.n	800b6aa <AHT_Upkeep+0x17e>
    break;
 800b6a8:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800b6aa:	4b04      	ldr	r3, [pc, #16]	@ (800b6bc <AHT_Upkeep+0x190>)
 800b6ac:	781b      	ldrb	r3, [r3, #0]
}
 800b6ae:	0018      	movs	r0, r3
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	b002      	add	sp, #8
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	46c0      	nop			@ (mov r8, r8)
 800b6b8:	20000ee0 	.word	0x20000ee0
 800b6bc:	2000009f 	.word	0x2000009f
 800b6c0:	0802e670 	.word	0x0802e670
 800b6c4:	0802c5e4 	.word	0x0802c5e4
 800b6c8:	0802c434 	.word	0x0802c434
 800b6cc:	000dbba0 	.word	0x000dbba0
 800b6d0:	20000e43 	.word	0x20000e43
 800b6d4:	20000efc 	.word	0x20000efc
 800b6d8:	0000ea60 	.word	0x0000ea60
 800b6dc:	20000efb 	.word	0x20000efb
 800b6e0:	0802c60c 	.word	0x0802c60c
 800b6e4:	0802c498 	.word	0x0802c498

0800b6e8 <WriteMemRegister>:
static bool bmperror = false;
static uint8_t mode = BMP280_FORCED_MODE;
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6ea:	b087      	sub	sp, #28
 800b6ec:	af02      	add	r7, sp, #8
 800b6ee:	0004      	movs	r4, r0
 800b6f0:	0008      	movs	r0, r1
 800b6f2:	60ba      	str	r2, [r7, #8]
 800b6f4:	0019      	movs	r1, r3
 800b6f6:	260e      	movs	r6, #14
 800b6f8:	19bb      	adds	r3, r7, r6
 800b6fa:	1c22      	adds	r2, r4, #0
 800b6fc:	801a      	strh	r2, [r3, #0]
 800b6fe:	230c      	movs	r3, #12
 800b700:	18fb      	adds	r3, r7, r3
 800b702:	1c02      	adds	r2, r0, #0
 800b704:	801a      	strh	r2, [r3, #0]
 800b706:	1dbb      	adds	r3, r7, #6
 800b708:	1c0a      	adds	r2, r1, #0
 800b70a:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 800b70c:	4b0c      	ldr	r3, [pc, #48]	@ (800b740 <WriteMemRegister+0x58>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d010      	beq.n	800b736 <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b714:	4b0a      	ldr	r3, [pc, #40]	@ (800b740 <WriteMemRegister+0x58>)
 800b716:	681c      	ldr	r4, [r3, #0]
 800b718:	4b0a      	ldr	r3, [pc, #40]	@ (800b744 <WriteMemRegister+0x5c>)
 800b71a:	7818      	ldrb	r0, [r3, #0]
 800b71c:	68bd      	ldr	r5, [r7, #8]
 800b71e:	230c      	movs	r3, #12
 800b720:	18fb      	adds	r3, r7, r3
 800b722:	881a      	ldrh	r2, [r3, #0]
 800b724:	19bb      	adds	r3, r7, r6
 800b726:	8819      	ldrh	r1, [r3, #0]
 800b728:	1dbb      	adds	r3, r7, #6
 800b72a:	881b      	ldrh	r3, [r3, #0]
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	002b      	movs	r3, r5
 800b730:	47a0      	blx	r4
 800b732:	0003      	movs	r3, r0
 800b734:	e000      	b.n	800b738 <WriteMemRegister+0x50>
  }
  return false;
 800b736:	2300      	movs	r3, #0
}
 800b738:	0018      	movs	r0, r3
 800b73a:	46bd      	mov	sp, r7
 800b73c:	b005      	add	sp, #20
 800b73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b740:	20000f00 	.word	0x20000f00
 800b744:	200000a0 	.word	0x200000a0

0800b748 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b74a:	b087      	sub	sp, #28
 800b74c:	af02      	add	r7, sp, #8
 800b74e:	0004      	movs	r4, r0
 800b750:	0008      	movs	r0, r1
 800b752:	60ba      	str	r2, [r7, #8]
 800b754:	0019      	movs	r1, r3
 800b756:	260e      	movs	r6, #14
 800b758:	19bb      	adds	r3, r7, r6
 800b75a:	1c22      	adds	r2, r4, #0
 800b75c:	801a      	strh	r2, [r3, #0]
 800b75e:	230c      	movs	r3, #12
 800b760:	18fb      	adds	r3, r7, r3
 800b762:	1c02      	adds	r2, r0, #0
 800b764:	801a      	strh	r2, [r3, #0]
 800b766:	1dbb      	adds	r3, r7, #6
 800b768:	1c0a      	adds	r2, r1, #0
 800b76a:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 800b76c:	4b0c      	ldr	r3, [pc, #48]	@ (800b7a0 <ReadMemRegister+0x58>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d010      	beq.n	800b796 <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b774:	4b0a      	ldr	r3, [pc, #40]	@ (800b7a0 <ReadMemRegister+0x58>)
 800b776:	681c      	ldr	r4, [r3, #0]
 800b778:	4b0a      	ldr	r3, [pc, #40]	@ (800b7a4 <ReadMemRegister+0x5c>)
 800b77a:	7818      	ldrb	r0, [r3, #0]
 800b77c:	68bd      	ldr	r5, [r7, #8]
 800b77e:	230c      	movs	r3, #12
 800b780:	18fb      	adds	r3, r7, r3
 800b782:	881a      	ldrh	r2, [r3, #0]
 800b784:	19bb      	adds	r3, r7, r6
 800b786:	8819      	ldrh	r1, [r3, #0]
 800b788:	1dbb      	adds	r3, r7, #6
 800b78a:	881b      	ldrh	r3, [r3, #0]
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	002b      	movs	r3, r5
 800b790:	47a0      	blx	r4
 800b792:	0003      	movs	r3, r0
 800b794:	e000      	b.n	800b798 <ReadMemRegister+0x50>
  }
  return false;
 800b796:	2300      	movs	r3, #0
}
 800b798:	0018      	movs	r0, r3
 800b79a:	46bd      	mov	sp, r7
 800b79c:	b005      	add	sp, #20
 800b79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7a0:	20000f04 	.word	0x20000f04
 800b7a4:	200000a0 	.word	0x200000a0

0800b7a8 <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 800b7b0:	f009 f902 	bl	80149b8 <HAL_GetTick>
 800b7b4:	0002      	movs	r2, r0
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	18d2      	adds	r2, r2, r3
 800b7ba:	4b03      	ldr	r3, [pc, #12]	@ (800b7c8 <setBMP280TimeStamp+0x20>)
 800b7bc:	601a      	str	r2, [r3, #0]
}
 800b7be:	46c0      	nop			@ (mov r8, r8)
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	b002      	add	sp, #8
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	46c0      	nop			@ (mov r8, r8)
 800b7c8:	20000f24 	.word	0x20000f24

0800b7cc <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800b7d6:	4b05      	ldr	r3, [pc, #20]	@ (800b7ec <BMP_Init+0x20>)
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 800b7dc:	4b04      	ldr	r3, [pc, #16]	@ (800b7f0 <BMP_Init+0x24>)
 800b7de:	683a      	ldr	r2, [r7, #0]
 800b7e0:	601a      	str	r2, [r3, #0]
}
 800b7e2:	46c0      	nop			@ (mov r8, r8)
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	b002      	add	sp, #8
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	46c0      	nop			@ (mov r8, r8)
 800b7ec:	20000f04 	.word	0x20000f04
 800b7f0:	20000f00 	.word	0x20000f00

0800b7f4 <BMP280_reset>:

static void BMP280_reset() {
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800b7fa:	1dfb      	adds	r3, r7, #7
 800b7fc:	22b6      	movs	r2, #182	@ 0xb6
 800b7fe:	701a      	strb	r2, [r3, #0]
  bmperror = false;
 800b800:	4b0a      	ldr	r3, [pc, #40]	@ (800b82c <BMP280_reset+0x38>)
 800b802:	2200      	movs	r2, #0
 800b804:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 800b806:	1dfa      	adds	r2, r7, #7
 800b808:	2301      	movs	r3, #1
 800b80a:	2101      	movs	r1, #1
 800b80c:	20e0      	movs	r0, #224	@ 0xe0
 800b80e:	f7ff ff6b 	bl	800b6e8 <WriteMemRegister>
  Info("BMP280 has been reset");
 800b812:	4a07      	ldr	r2, [pc, #28]	@ (800b830 <BMP280_reset+0x3c>)
 800b814:	4b07      	ldr	r3, [pc, #28]	@ (800b834 <BMP280_reset+0x40>)
 800b816:	0019      	movs	r1, r3
 800b818:	2002      	movs	r0, #2
 800b81a:	f008 fb4d 	bl	8013eb8 <CreateLine>
  HAL_Delay(100);
 800b81e:	2064      	movs	r0, #100	@ 0x64
 800b820:	f009 f8d4 	bl	80149cc <HAL_Delay>
}
 800b824:	46c0      	nop			@ (mov r8, r8)
 800b826:	46bd      	mov	sp, r7
 800b828:	b002      	add	sp, #8
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	20000f2a 	.word	0x20000f2a
 800b830:	0802c650 	.word	0x0802c650
 800b834:	0802c668 	.word	0x0802c668

0800b838 <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 800b838:	b590      	push	{r4, r7, lr}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af02      	add	r7, sp, #8
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, (uint8_t *)&dig, sizeof(dig));
 800b83e:	4a30      	ldr	r2, [pc, #192]	@ (800b900 <BMP280_get_calibration+0xc8>)
 800b840:	2318      	movs	r3, #24
 800b842:	2101      	movs	r1, #1
 800b844:	2088      	movs	r0, #136	@ 0x88
 800b846:	f7ff ff7f 	bl	800b748 <ReadMemRegister>
  Debug("BMP280 calibration data:");
 800b84a:	4a2e      	ldr	r2, [pc, #184]	@ (800b904 <BMP280_get_calibration+0xcc>)
 800b84c:	4b2e      	ldr	r3, [pc, #184]	@ (800b908 <BMP280_get_calibration+0xd0>)
 800b84e:	0019      	movs	r1, r3
 800b850:	2003      	movs	r0, #3
 800b852:	f008 fb31 	bl	8013eb8 <CreateLine>
  char stc = 'T';
 800b856:	1dfb      	adds	r3, r7, #7
 800b858:	2254      	movs	r2, #84	@ 0x54
 800b85a:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 1;
 800b85c:	1dbb      	adds	r3, r7, #6
 800b85e:	2201      	movs	r2, #1
 800b860:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x <= 11; x++) {
 800b862:	1d7b      	adds	r3, r7, #5
 800b864:	2200      	movs	r2, #0
 800b866:	701a      	strb	r2, [r3, #0]
 800b868:	e041      	b.n	800b8ee <BMP280_get_calibration+0xb6>
    if ((x == 0) || (x == 3)) {
 800b86a:	1d7b      	adds	r3, r7, #5
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d003      	beq.n	800b87a <BMP280_get_calibration+0x42>
 800b872:	1d7b      	adds	r3, r7, #5
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	2b03      	cmp	r3, #3
 800b878:	d11d      	bne.n	800b8b6 <BMP280_get_calibration+0x7e>
      if (x==3) {
 800b87a:	1d7b      	adds	r3, r7, #5
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	2b03      	cmp	r3, #3
 800b880:	d105      	bne.n	800b88e <BMP280_get_calibration+0x56>
        idx = 1;
 800b882:	1dbb      	adds	r3, r7, #6
 800b884:	2201      	movs	r2, #1
 800b886:	701a      	strb	r2, [r3, #0]
        stc = 'P';
 800b888:	1dfb      	adds	r3, r7, #7
 800b88a:	2250      	movs	r2, #80	@ 0x50
 800b88c:	701a      	strb	r2, [r3, #0]
      }
      Debug("dig.%c%d: %d", stc, idx, (uint16_t)dig.calarray[x]);
 800b88e:	1dfb      	adds	r3, r7, #7
 800b890:	7818      	ldrb	r0, [r3, #0]
 800b892:	1dbb      	adds	r3, r7, #6
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	1d7a      	adds	r2, r7, #5
 800b898:	7811      	ldrb	r1, [r2, #0]
 800b89a:	4a19      	ldr	r2, [pc, #100]	@ (800b900 <BMP280_get_calibration+0xc8>)
 800b89c:	0049      	lsls	r1, r1, #1
 800b89e:	5e8a      	ldrsh	r2, [r1, r2]
 800b8a0:	b292      	uxth	r2, r2
 800b8a2:	0014      	movs	r4, r2
 800b8a4:	4a19      	ldr	r2, [pc, #100]	@ (800b90c <BMP280_get_calibration+0xd4>)
 800b8a6:	4918      	ldr	r1, [pc, #96]	@ (800b908 <BMP280_get_calibration+0xd0>)
 800b8a8:	9401      	str	r4, [sp, #4]
 800b8aa:	9300      	str	r3, [sp, #0]
 800b8ac:	0003      	movs	r3, r0
 800b8ae:	2003      	movs	r0, #3
 800b8b0:	f008 fb02 	bl	8013eb8 <CreateLine>
 800b8b4:	e011      	b.n	800b8da <BMP280_get_calibration+0xa2>
    }
    else {
    Debug("dig.%c%d: %d", stc, idx, dig.calarray[x]);
 800b8b6:	1dfb      	adds	r3, r7, #7
 800b8b8:	7818      	ldrb	r0, [r3, #0]
 800b8ba:	1dbb      	adds	r3, r7, #6
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	1d7a      	adds	r2, r7, #5
 800b8c0:	7811      	ldrb	r1, [r2, #0]
 800b8c2:	4a0f      	ldr	r2, [pc, #60]	@ (800b900 <BMP280_get_calibration+0xc8>)
 800b8c4:	0049      	lsls	r1, r1, #1
 800b8c6:	5e8a      	ldrsh	r2, [r1, r2]
 800b8c8:	0014      	movs	r4, r2
 800b8ca:	4a10      	ldr	r2, [pc, #64]	@ (800b90c <BMP280_get_calibration+0xd4>)
 800b8cc:	490e      	ldr	r1, [pc, #56]	@ (800b908 <BMP280_get_calibration+0xd0>)
 800b8ce:	9401      	str	r4, [sp, #4]
 800b8d0:	9300      	str	r3, [sp, #0]
 800b8d2:	0003      	movs	r3, r0
 800b8d4:	2003      	movs	r0, #3
 800b8d6:	f008 faef 	bl	8013eb8 <CreateLine>
    }
    idx++;
 800b8da:	1dbb      	adds	r3, r7, #6
 800b8dc:	781a      	ldrb	r2, [r3, #0]
 800b8de:	1dbb      	adds	r3, r7, #6
 800b8e0:	3201      	adds	r2, #1
 800b8e2:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x <= 11; x++) {
 800b8e4:	1d7b      	adds	r3, r7, #5
 800b8e6:	781a      	ldrb	r2, [r3, #0]
 800b8e8:	1d7b      	adds	r3, r7, #5
 800b8ea:	3201      	adds	r2, #1
 800b8ec:	701a      	strb	r2, [r3, #0]
 800b8ee:	1d7b      	adds	r3, r7, #5
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	2b0b      	cmp	r3, #11
 800b8f4:	d9b9      	bls.n	800b86a <BMP280_get_calibration+0x32>
  }
}
 800b8f6:	46c0      	nop			@ (mov r8, r8)
 800b8f8:	46c0      	nop			@ (mov r8, r8)
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	b003      	add	sp, #12
 800b8fe:	bd90      	pop	{r4, r7, pc}
 800b900:	20000f08 	.word	0x20000f08
 800b904:	0802c66c 	.word	0x0802c66c
 800b908:	0802c688 	.word	0x0802c688
 800b90c:	0802c68c 	.word	0x0802c68c

0800b910 <BMP280_set_config>:

void BMP280_set_config() {
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_16 | BMP280_SPI_OFF);
 800b916:	1dfb      	adds	r3, r7, #7
 800b918:	2290      	movs	r2, #144	@ 0x90
 800b91a:	701a      	strb	r2, [r3, #0]
  if (!WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1)) {
 800b91c:	1dfa      	adds	r2, r7, #7
 800b91e:	2301      	movs	r3, #1
 800b920:	2101      	movs	r1, #1
 800b922:	20f5      	movs	r0, #245	@ 0xf5
 800b924:	f7ff fee0 	bl	800b6e8 <WriteMemRegister>
 800b928:	0003      	movs	r3, r0
 800b92a:	001a      	movs	r2, r3
 800b92c:	2301      	movs	r3, #1
 800b92e:	4053      	eors	r3, r2
 800b930:	b2db      	uxtb	r3, r3
 800b932:	2b00      	cmp	r3, #0
 800b934:	d005      	beq.n	800b942 <BMP280_set_config+0x32>
    Error("BMP280 writing to BMP280_REG_CONFIG");
 800b936:	4a0b      	ldr	r2, [pc, #44]	@ (800b964 <BMP280_set_config+0x54>)
 800b938:	4b0b      	ldr	r3, [pc, #44]	@ (800b968 <BMP280_set_config+0x58>)
 800b93a:	0019      	movs	r1, r3
 800b93c:	2001      	movs	r0, #1
 800b93e:	f008 fabb 	bl	8013eb8 <CreateLine>
  }
  ReadMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800b942:	1dfa      	adds	r2, r7, #7
 800b944:	2301      	movs	r3, #1
 800b946:	2101      	movs	r1, #1
 800b948:	20f5      	movs	r0, #245	@ 0xf5
 800b94a:	f7ff fefd 	bl	800b748 <ReadMemRegister>
  Debug("BMP280_REG_CONFIG: 0x%02X", data);
 800b94e:	1dfb      	adds	r3, r7, #7
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	4a06      	ldr	r2, [pc, #24]	@ (800b96c <BMP280_set_config+0x5c>)
 800b954:	4906      	ldr	r1, [pc, #24]	@ (800b970 <BMP280_set_config+0x60>)
 800b956:	2003      	movs	r0, #3
 800b958:	f008 faae 	bl	8013eb8 <CreateLine>
}
 800b95c:	46c0      	nop			@ (mov r8, r8)
 800b95e:	46bd      	mov	sp, r7
 800b960:	b002      	add	sp, #8
 800b962:	bd80      	pop	{r7, pc}
 800b964:	0802c69c 	.word	0x0802c69c
 800b968:	0802c6c0 	.word	0x0802c6c0
 800b96c:	0802c6c4 	.word	0x0802c6c4
 800b970:	0802c688 	.word	0x0802c688

0800b974 <BMP280_DeviceConnected>:

 bool BMP280_DeviceConnected() {
 800b974:	b590      	push	{r4, r7, lr}
 800b976:	b085      	sub	sp, #20
 800b978:	af02      	add	r7, sp, #8
   bool rslt = false;
 800b97a:	1dfb      	adds	r3, r7, #7
 800b97c:	2200      	movs	r2, #0
 800b97e:	701a      	strb	r2, [r3, #0]
    uint8_t bmpData;
    // Read the chip-id of bmp280 sensor
    bmp280I2Caddr = BMP280_ADDRESS;
 800b980:	4b28      	ldr	r3, [pc, #160]	@ (800ba24 <BMP280_DeviceConnected+0xb0>)
 800b982:	2276      	movs	r2, #118	@ 0x76
 800b984:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800b986:	1dfc      	adds	r4, r7, #7
 800b988:	1dba      	adds	r2, r7, #6
 800b98a:	2301      	movs	r3, #1
 800b98c:	2101      	movs	r1, #1
 800b98e:	20d0      	movs	r0, #208	@ 0xd0
 800b990:	f7ff feda 	bl	800b748 <ReadMemRegister>
 800b994:	0003      	movs	r3, r0
 800b996:	7023      	strb	r3, [r4, #0]
    if (bmpData != BMP280_CHIP_ID) {
 800b998:	1dbb      	adds	r3, r7, #6
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	2b58      	cmp	r3, #88	@ 0x58
 800b99e:	d00e      	beq.n	800b9be <BMP280_DeviceConnected+0x4a>
      bmp280I2Caddr++;
 800b9a0:	4b20      	ldr	r3, [pc, #128]	@ (800ba24 <BMP280_DeviceConnected+0xb0>)
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	b2da      	uxtb	r2, r3
 800b9a8:	4b1e      	ldr	r3, [pc, #120]	@ (800ba24 <BMP280_DeviceConnected+0xb0>)
 800b9aa:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800b9ac:	1dfc      	adds	r4, r7, #7
 800b9ae:	1dba      	adds	r2, r7, #6
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	2101      	movs	r1, #1
 800b9b4:	20d0      	movs	r0, #208	@ 0xd0
 800b9b6:	f7ff fec7 	bl	800b748 <ReadMemRegister>
 800b9ba:	0003      	movs	r3, r0
 800b9bc:	7023      	strb	r3, [r4, #0]
    }
    if (rslt && (bmpData == BMP280_CHIP_ID)) {
 800b9be:	1dfb      	adds	r3, r7, #7
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d01b      	beq.n	800b9fe <BMP280_DeviceConnected+0x8a>
 800b9c6:	1dbb      	adds	r3, r7, #6
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	2b58      	cmp	r3, #88	@ 0x58
 800b9cc:	d117      	bne.n	800b9fe <BMP280_DeviceConnected+0x8a>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 800b9ce:	1dbb      	adds	r3, r7, #6
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	0018      	movs	r0, r3
 800b9d4:	4b13      	ldr	r3, [pc, #76]	@ (800ba24 <BMP280_DeviceConnected+0xb0>)
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	4a13      	ldr	r2, [pc, #76]	@ (800ba28 <BMP280_DeviceConnected+0xb4>)
 800b9da:	4914      	ldr	r1, [pc, #80]	@ (800ba2c <BMP280_DeviceConnected+0xb8>)
 800b9dc:	9300      	str	r3, [sp, #0]
 800b9de:	0003      	movs	r3, r0
 800b9e0:	2002      	movs	r0, #2
 800b9e2:	f008 fa69 	bl	8013eb8 <CreateLine>
      BMP280_reset(); // get an initial state
 800b9e6:	f7ff ff05 	bl	800b7f4 <BMP280_reset>
      HAL_Delay(3);
 800b9ea:	2003      	movs	r0, #3
 800b9ec:	f008 ffee 	bl	80149cc <HAL_Delay>
      BMP280_get_calibration();
 800b9f0:	f7ff ff22 	bl	800b838 <BMP280_get_calibration>
      BMP280_set_config();
 800b9f4:	f7ff ff8c 	bl	800b910 <BMP280_set_config>
      BMP280_set_mode();
 800b9f8:	f000 f8f6 	bl	800bbe8 <BMP280_set_mode>
 800b9fc:	e008      	b.n	800ba10 <BMP280_DeviceConnected+0x9c>
    }
    else {
      bmp280I2Caddr = 0;
 800b9fe:	4b09      	ldr	r3, [pc, #36]	@ (800ba24 <BMP280_DeviceConnected+0xb0>)
 800ba00:	2200      	movs	r2, #0
 800ba02:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800ba04:	4a0a      	ldr	r2, [pc, #40]	@ (800ba30 <BMP280_DeviceConnected+0xbc>)
 800ba06:	4b0b      	ldr	r3, [pc, #44]	@ (800ba34 <BMP280_DeviceConnected+0xc0>)
 800ba08:	0019      	movs	r1, r3
 800ba0a:	2001      	movs	r0, #1
 800ba0c:	f008 fa54 	bl	8013eb8 <CreateLine>
    }
    return bmp280I2Caddr;
 800ba10:	4b04      	ldr	r3, [pc, #16]	@ (800ba24 <BMP280_DeviceConnected+0xb0>)
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	1e5a      	subs	r2, r3, #1
 800ba16:	4193      	sbcs	r3, r2
 800ba18:	b2db      	uxtb	r3, r3
}
 800ba1a:	0018      	movs	r0, r3
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	b003      	add	sp, #12
 800ba20:	bd90      	pop	{r4, r7, pc}
 800ba22:	46c0      	nop			@ (mov r8, r8)
 800ba24:	200000a0 	.word	0x200000a0
 800ba28:	0802c6e0 	.word	0x0802c6e0
 800ba2c:	0802c668 	.word	0x0802c668
 800ba30:	0802c718 	.word	0x0802c718
 800ba34:	0802c6c0 	.word	0x0802c6c0

0800ba38 <BMP280_get_measurement_values>:

static bool BMP280_get_measurement_values() {
 800ba38:	b5b0      	push	{r4, r5, r7, lr}
 800ba3a:	b086      	sub	sp, #24
 800ba3c:	af04      	add	r7, sp, #16
  int8_t rslt = 1;
 800ba3e:	1dfb      	adds	r3, r7, #7
 800ba40:	2201      	movs	r2, #1
 800ba42:	701a      	strb	r2, [r3, #0]
  uint8_t bmpData[6];
  HAL_Delay(9);
 800ba44:	2009      	movs	r0, #9
 800ba46:	f008 ffc1 	bl	80149cc <HAL_Delay>
  BMP280TimeStamp = HAL_GetTick() + 1500;  // time for local loop
 800ba4a:	f008 ffb5 	bl	80149b8 <HAL_GetTick>
 800ba4e:	0003      	movs	r3, r0
 800ba50:	4a49      	ldr	r2, [pc, #292]	@ (800bb78 <BMP280_get_measurement_values+0x140>)
 800ba52:	189a      	adds	r2, r3, r2
 800ba54:	4b49      	ldr	r3, [pc, #292]	@ (800bb7c <BMP280_get_measurement_values+0x144>)
 800ba56:	601a      	str	r2, [r3, #0]
  do {
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData[0], 1); // store at start address of array
 800ba58:	003a      	movs	r2, r7
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	2101      	movs	r1, #1
 800ba5e:	20f3      	movs	r0, #243	@ 0xf3
 800ba60:	f7ff fe72 	bl	800b748 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)) {
 800ba64:	4b45      	ldr	r3, [pc, #276]	@ (800bb7c <BMP280_get_measurement_values+0x144>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	0018      	movs	r0, r3
 800ba6a:	f008 f9cf 	bl	8013e0c <TimestampIsReached>
 800ba6e:	1e03      	subs	r3, r0, #0
 800ba70:	d007      	beq.n	800ba82 <BMP280_get_measurement_values+0x4a>
      Error("BMP280 timeout while waiting for ready.");
 800ba72:	4a43      	ldr	r2, [pc, #268]	@ (800bb80 <BMP280_get_measurement_values+0x148>)
 800ba74:	4b43      	ldr	r3, [pc, #268]	@ (800bb84 <BMP280_get_measurement_values+0x14c>)
 800ba76:	0019      	movs	r1, r3
 800ba78:	2001      	movs	r0, #1
 800ba7a:	f008 fa1d 	bl	8013eb8 <CreateLine>
      return false;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	e076      	b.n	800bb70 <BMP280_get_measurement_values+0x138>
    }
    HAL_Delay(10);
 800ba82:	200a      	movs	r0, #10
 800ba84:	f008 ffa2 	bl	80149cc <HAL_Delay>
  } while ((bmpData[0] & (BMP280_NVM_RDY | BMP280_MEAS_RDY)) != 0);
 800ba88:	003b      	movs	r3, r7
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	001a      	movs	r2, r3
 800ba8e:	2309      	movs	r3, #9
 800ba90:	4013      	ands	r3, r2
 800ba92:	d1e1      	bne.n	800ba58 <BMP280_get_measurement_values+0x20>
  //  } while (((bmpData[0] & BMP280_NVM_RDY) == BMP280_NVM_RDY) || ((bmpData[0] & BMP280_MEAS_RDY) == BMP280_MEAS_RDY));
  rslt = ReadMemRegister(BMP280_REG_PRESS_MSB, 1, &bmpData[0], 6);
 800ba94:	003a      	movs	r2, r7
 800ba96:	2306      	movs	r3, #6
 800ba98:	2101      	movs	r1, #1
 800ba9a:	20f7      	movs	r0, #247	@ 0xf7
 800ba9c:	f7ff fe54 	bl	800b748 <ReadMemRegister>
 800baa0:	0003      	movs	r3, r0
 800baa2:	001a      	movs	r2, r3
 800baa4:	1dfb      	adds	r3, r7, #7
 800baa6:	701a      	strb	r2, [r3, #0]
  raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 800baa8:	003b      	movs	r3, r7
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	031a      	lsls	r2, r3, #12
 800baae:	003b      	movs	r3, r7
 800bab0:	785b      	ldrb	r3, [r3, #1]
 800bab2:	011b      	lsls	r3, r3, #4
 800bab4:	18d3      	adds	r3, r2, r3
 800bab6:	003a      	movs	r2, r7
 800bab8:	7892      	ldrb	r2, [r2, #2]
 800baba:	0912      	lsrs	r2, r2, #4
 800babc:	b2d2      	uxtb	r2, r2
 800babe:	189b      	adds	r3, r3, r2
 800bac0:	001a      	movs	r2, r3
 800bac2:	4b31      	ldr	r3, [pc, #196]	@ (800bb88 <BMP280_get_measurement_values+0x150>)
 800bac4:	601a      	str	r2, [r3, #0]
  if (bmpData[0] == 0x80) {
 800bac6:	003b      	movs	r3, r7
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	2b80      	cmp	r3, #128	@ 0x80
 800bacc:	d11b      	bne.n	800bb06 <BMP280_get_measurement_values+0xce>
    Error("BMP280 Invalid read of barometric pressure.");
 800bace:	4a2f      	ldr	r2, [pc, #188]	@ (800bb8c <BMP280_get_measurement_values+0x154>)
 800bad0:	4b2c      	ldr	r3, [pc, #176]	@ (800bb84 <BMP280_get_measurement_values+0x14c>)
 800bad2:	0019      	movs	r1, r3
 800bad4:	2001      	movs	r0, #1
 800bad6:	f008 f9ef 	bl	8013eb8 <CreateLine>
    Debug("Data[0]: 0x%02X, Data[1]: 0x%02X, Data[2]: 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 800bada:	003b      	movs	r3, r7
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	001d      	movs	r5, r3
 800bae0:	003b      	movs	r3, r7
 800bae2:	785b      	ldrb	r3, [r3, #1]
 800bae4:	0018      	movs	r0, r3
 800bae6:	003b      	movs	r3, r7
 800bae8:	789b      	ldrb	r3, [r3, #2]
 800baea:	001c      	movs	r4, r3
 800baec:	4b26      	ldr	r3, [pc, #152]	@ (800bb88 <BMP280_get_measurement_values+0x150>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a27      	ldr	r2, [pc, #156]	@ (800bb90 <BMP280_get_measurement_values+0x158>)
 800baf2:	4928      	ldr	r1, [pc, #160]	@ (800bb94 <BMP280_get_measurement_values+0x15c>)
 800baf4:	9302      	str	r3, [sp, #8]
 800baf6:	9401      	str	r4, [sp, #4]
 800baf8:	9000      	str	r0, [sp, #0]
 800bafa:	002b      	movs	r3, r5
 800bafc:	2003      	movs	r0, #3
 800bafe:	f008 f9db 	bl	8013eb8 <CreateLine>
    SetAllBlueLED();
 800bb02:	f007 f8e5 	bl	8012cd0 <SetAllBlueLED>
  }
  raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 800bb06:	003b      	movs	r3, r7
 800bb08:	78db      	ldrb	r3, [r3, #3]
 800bb0a:	031a      	lsls	r2, r3, #12
 800bb0c:	003b      	movs	r3, r7
 800bb0e:	791b      	ldrb	r3, [r3, #4]
 800bb10:	011b      	lsls	r3, r3, #4
 800bb12:	18d3      	adds	r3, r2, r3
 800bb14:	003a      	movs	r2, r7
 800bb16:	7952      	ldrb	r2, [r2, #5]
 800bb18:	0912      	lsrs	r2, r2, #4
 800bb1a:	b2d2      	uxtb	r2, r2
 800bb1c:	189b      	adds	r3, r3, r2
 800bb1e:	001a      	movs	r2, r3
 800bb20:	4b1d      	ldr	r3, [pc, #116]	@ (800bb98 <BMP280_get_measurement_values+0x160>)
 800bb22:	601a      	str	r2, [r3, #0]
  if (bmpData[3] == 0x80) {
 800bb24:	003b      	movs	r3, r7
 800bb26:	78db      	ldrb	r3, [r3, #3]
 800bb28:	2b80      	cmp	r3, #128	@ 0x80
 800bb2a:	d11b      	bne.n	800bb64 <BMP280_get_measurement_values+0x12c>
    Error("BMP280 Invalid read of temperature.");
 800bb2c:	4a1b      	ldr	r2, [pc, #108]	@ (800bb9c <BMP280_get_measurement_values+0x164>)
 800bb2e:	4b15      	ldr	r3, [pc, #84]	@ (800bb84 <BMP280_get_measurement_values+0x14c>)
 800bb30:	0019      	movs	r1, r3
 800bb32:	2001      	movs	r0, #1
 800bb34:	f008 f9c0 	bl	8013eb8 <CreateLine>
    Debug("Data[3]: 0x%02X, Data[4]: 0x%02X, Data[5]: 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 800bb38:	003b      	movs	r3, r7
 800bb3a:	78db      	ldrb	r3, [r3, #3]
 800bb3c:	001d      	movs	r5, r3
 800bb3e:	003b      	movs	r3, r7
 800bb40:	791b      	ldrb	r3, [r3, #4]
 800bb42:	0018      	movs	r0, r3
 800bb44:	003b      	movs	r3, r7
 800bb46:	795b      	ldrb	r3, [r3, #5]
 800bb48:	001c      	movs	r4, r3
 800bb4a:	4b13      	ldr	r3, [pc, #76]	@ (800bb98 <BMP280_get_measurement_values+0x160>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	4a14      	ldr	r2, [pc, #80]	@ (800bba0 <BMP280_get_measurement_values+0x168>)
 800bb50:	4910      	ldr	r1, [pc, #64]	@ (800bb94 <BMP280_get_measurement_values+0x15c>)
 800bb52:	9302      	str	r3, [sp, #8]
 800bb54:	9401      	str	r4, [sp, #4]
 800bb56:	9000      	str	r0, [sp, #0]
 800bb58:	002b      	movs	r3, r5
 800bb5a:	2003      	movs	r0, #3
 800bb5c:	f008 f9ac 	bl	8013eb8 <CreateLine>
    SetAllBlueLED();
 800bb60:	f007 f8b6 	bl	8012cd0 <SetAllBlueLED>
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld, rslt: %s", raw_mpa, raw_temp, rslt?"success":"fail");
  return rslt;
 800bb64:	1dfb      	adds	r3, r7, #7
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	b25b      	sxtb	r3, r3
 800bb6a:	1e5a      	subs	r2, r3, #1
 800bb6c:	4193      	sbcs	r3, r2
 800bb6e:	b2db      	uxtb	r3, r3
}
 800bb70:	0018      	movs	r0, r3
 800bb72:	46bd      	mov	sp, r7
 800bb74:	b002      	add	sp, #8
 800bb76:	bdb0      	pop	{r4, r5, r7, pc}
 800bb78:	000005dc 	.word	0x000005dc
 800bb7c:	20000f24 	.word	0x20000f24
 800bb80:	0802c72c 	.word	0x0802c72c
 800bb84:	0802c6c0 	.word	0x0802c6c0
 800bb88:	20000f30 	.word	0x20000f30
 800bb8c:	0802c754 	.word	0x0802c754
 800bb90:	0802c780 	.word	0x0802c780
 800bb94:	0802c688 	.word	0x0802c688
 800bb98:	20000f2c 	.word	0x20000f2c
 800bb9c:	0802c7c0 	.word	0x0802c7c0
 800bba0:	0802c7e4 	.word	0x0802c7e4

0800bba4 <BMP280_get_mode>:

static uint8_t BMP280_get_mode() {
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 800bbaa:	1dba      	adds	r2, r7, #6
 800bbac:	2301      	movs	r3, #1
 800bbae:	2101      	movs	r1, #1
 800bbb0:	20f4      	movs	r0, #244	@ 0xf4
 800bbb2:	f7ff fdc9 	bl	800b748 <ReadMemRegister>
 800bbb6:	0003      	movs	r3, r0
 800bbb8:	001a      	movs	r2, r3
 800bbba:	1dfb      	adds	r3, r7, #7
 800bbbc:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 800bbbe:	1dbb      	adds	r3, r7, #6
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	2203      	movs	r2, #3
 800bbc4:	4013      	ands	r3, r2
 800bbc6:	b2da      	uxtb	r2, r3
 800bbc8:	1dbb      	adds	r3, r7, #6
 800bbca:	701a      	strb	r2, [r3, #0]
  if (rslt == 0) {
 800bbcc:	1dfb      	adds	r3, r7, #7
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	b25b      	sxtb	r3, r3
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d102      	bne.n	800bbdc <BMP280_get_mode+0x38>
    bmpData = 255;
 800bbd6:	1dbb      	adds	r3, r7, #6
 800bbd8:	22ff      	movs	r2, #255	@ 0xff
 800bbda:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 800bbdc:	1dbb      	adds	r3, r7, #6
 800bbde:	781b      	ldrb	r3, [r3, #0]
}
 800bbe0:	0018      	movs	r0, r3
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	b002      	add	sp, #8
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <BMP280_set_mode>:

static bool BMP280_set_mode() {
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_16 | mode);
 800bbee:	4b1a      	ldr	r3, [pc, #104]	@ (800bc58 <BMP280_set_mode+0x70>)
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	2254      	movs	r2, #84	@ 0x54
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	b2da      	uxtb	r2, r3
 800bbf8:	1dfb      	adds	r3, r7, #7
 800bbfa:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800bbfc:	1dfa      	adds	r2, r7, #7
 800bbfe:	2301      	movs	r3, #1
 800bc00:	2101      	movs	r1, #1
 800bc02:	20f4      	movs	r0, #244	@ 0xf4
 800bc04:	f7ff fd70 	bl	800b6e8 <WriteMemRegister>
  HAL_Delay(10);
 800bc08:	200a      	movs	r0, #10
 800bc0a:	f008 fedf 	bl	80149cc <HAL_Delay>
  data = BMP280_get_mode();
 800bc0e:	f7ff ffc9 	bl	800bba4 <BMP280_get_mode>
 800bc12:	0003      	movs	r3, r0
 800bc14:	001a      	movs	r2, r3
 800bc16:	1dfb      	adds	r3, r7, #7
 800bc18:	701a      	strb	r2, [r3, #0]
  data &= BMP280_NORMAL_MODE;
 800bc1a:	1dfb      	adds	r3, r7, #7
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	2203      	movs	r2, #3
 800bc20:	4013      	ands	r3, r2
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	1dfb      	adds	r3, r7, #7
 800bc26:	701a      	strb	r2, [r3, #0]
  Debug("BMP280 Operation mode: %s", data==0?"sleep":data==3?"normal":"forced");
 800bc28:	1dfb      	adds	r3, r7, #7
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d007      	beq.n	800bc40 <BMP280_set_mode+0x58>
 800bc30:	1dfb      	adds	r3, r7, #7
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	2b03      	cmp	r3, #3
 800bc36:	d101      	bne.n	800bc3c <BMP280_set_mode+0x54>
 800bc38:	4b08      	ldr	r3, [pc, #32]	@ (800bc5c <BMP280_set_mode+0x74>)
 800bc3a:	e002      	b.n	800bc42 <BMP280_set_mode+0x5a>
 800bc3c:	4b08      	ldr	r3, [pc, #32]	@ (800bc60 <BMP280_set_mode+0x78>)
 800bc3e:	e000      	b.n	800bc42 <BMP280_set_mode+0x5a>
 800bc40:	4b08      	ldr	r3, [pc, #32]	@ (800bc64 <BMP280_set_mode+0x7c>)
 800bc42:	4a09      	ldr	r2, [pc, #36]	@ (800bc68 <BMP280_set_mode+0x80>)
 800bc44:	4909      	ldr	r1, [pc, #36]	@ (800bc6c <BMP280_set_mode+0x84>)
 800bc46:	2003      	movs	r0, #3
 800bc48:	f008 f936 	bl	8013eb8 <CreateLine>
  return true;
 800bc4c:	2301      	movs	r3, #1
}
 800bc4e:	0018      	movs	r0, r3
 800bc50:	46bd      	mov	sp, r7
 800bc52:	b002      	add	sp, #8
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	46c0      	nop			@ (mov r8, r8)
 800bc58:	200000a1 	.word	0x200000a1
 800bc5c:	0802c824 	.word	0x0802c824
 800bc60:	0802c82c 	.word	0x0802c82c
 800bc64:	0802c834 	.word	0x0802c834
 800bc68:	0802c83c 	.word	0x0802c83c
 800bc6c:	0802c688 	.word	0x0802c688

0800bc70 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade
// copied from datasheet
static float BMP280_calc_temperature() {
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b086      	sub	sp, #24
 800bc74:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 800bc76:	4b1e      	ldr	r3, [pc, #120]	@ (800bcf0 <BMP280_calc_temperature+0x80>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	10da      	asrs	r2, r3, #3
 800bc80:	4b1c      	ldr	r3, [pc, #112]	@ (800bcf4 <BMP280_calc_temperature+0x84>)
 800bc82:	881b      	ldrh	r3, [r3, #0]
 800bc84:	005b      	lsls	r3, r3, #1
 800bc86:	1ad3      	subs	r3, r2, r3
 800bc88:	4a1a      	ldr	r2, [pc, #104]	@ (800bcf4 <BMP280_calc_temperature+0x84>)
 800bc8a:	2102      	movs	r1, #2
 800bc8c:	5e52      	ldrsh	r2, [r2, r1]
 800bc8e:	4353      	muls	r3, r2
 800bc90:	12db      	asrs	r3, r3, #11
 800bc92:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	111b      	asrs	r3, r3, #4
 800bc98:	4a16      	ldr	r2, [pc, #88]	@ (800bcf4 <BMP280_calc_temperature+0x84>)
 800bc9a:	8812      	ldrh	r2, [r2, #0]
 800bc9c:	1a9b      	subs	r3, r3, r2
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	1112      	asrs	r2, r2, #4
 800bca2:	4914      	ldr	r1, [pc, #80]	@ (800bcf4 <BMP280_calc_temperature+0x84>)
 800bca4:	8809      	ldrh	r1, [r1, #0]
 800bca6:	1a52      	subs	r2, r2, r1
 800bca8:	4353      	muls	r3, r2
 800bcaa:	131b      	asrs	r3, r3, #12
 800bcac:	4a11      	ldr	r2, [pc, #68]	@ (800bcf4 <BMP280_calc_temperature+0x84>)
 800bcae:	2104      	movs	r1, #4
 800bcb0:	5e52      	ldrsh	r2, [r2, r1]
 800bcb2:	4353      	muls	r3, r2
 800bcb4:	139b      	asrs	r3, r3, #14
 800bcb6:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 800bcb8:	693a      	ldr	r2, [r7, #16]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	18d2      	adds	r2, r2, r3
 800bcbe:	4b0e      	ldr	r3, [pc, #56]	@ (800bcf8 <BMP280_calc_temperature+0x88>)
 800bcc0:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 800bcc2:	4b0d      	ldr	r3, [pc, #52]	@ (800bcf8 <BMP280_calc_temperature+0x88>)
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	0013      	movs	r3, r2
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	189b      	adds	r3, r3, r2
 800bccc:	3380      	adds	r3, #128	@ 0x80
 800bcce:	121b      	asrs	r3, r3, #8
 800bcd0:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 800bcd2:	68b8      	ldr	r0, [r7, #8]
 800bcd4:	f7f5 fda8 	bl	8001828 <__aeabi_i2f>
 800bcd8:	1c03      	adds	r3, r0, #0
 800bcda:	4908      	ldr	r1, [pc, #32]	@ (800bcfc <BMP280_calc_temperature+0x8c>)
 800bcdc:	1c18      	adds	r0, r3, #0
 800bcde:	f7f4 ffe1 	bl	8000ca4 <__aeabi_fdiv>
 800bce2:	1c03      	adds	r3, r0, #0
 800bce4:	607b      	str	r3, [r7, #4]
  return airTemp;
 800bce6:	687b      	ldr	r3, [r7, #4]
}
 800bce8:	1c18      	adds	r0, r3, #0
 800bcea:	46bd      	mov	sp, r7
 800bcec:	b006      	add	sp, #24
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	20000f2c 	.word	0x20000f2c
 800bcf4:	20000f08 	.word	0x20000f08
 800bcf8:	20000f20 	.word	0x20000f20
 800bcfc:	42c80000 	.word	0x42c80000

0800bd00 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b086      	sub	sp, #24
 800bd04:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 800bd06:	4b4e      	ldr	r3, [pc, #312]	@ (800be40 <BMP280_calc_pressure+0x140>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 800bd0c:	4b4d      	ldr	r3, [pc, #308]	@ (800be44 <BMP280_calc_pressure+0x144>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	105b      	asrs	r3, r3, #1
 800bd12:	4a4d      	ldr	r2, [pc, #308]	@ (800be48 <BMP280_calc_pressure+0x148>)
 800bd14:	4694      	mov	ip, r2
 800bd16:	4463      	add	r3, ip
 800bd18:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	109b      	asrs	r3, r3, #2
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	1092      	asrs	r2, r2, #2
 800bd22:	4353      	muls	r3, r2
 800bd24:	12db      	asrs	r3, r3, #11
 800bd26:	4a49      	ldr	r2, [pc, #292]	@ (800be4c <BMP280_calc_pressure+0x14c>)
 800bd28:	2110      	movs	r1, #16
 800bd2a:	5e52      	ldrsh	r2, [r2, r1]
 800bd2c:	4353      	muls	r3, r2
 800bd2e:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 800bd30:	4b46      	ldr	r3, [pc, #280]	@ (800be4c <BMP280_calc_pressure+0x14c>)
 800bd32:	220e      	movs	r2, #14
 800bd34:	5e9b      	ldrsh	r3, [r3, r2]
 800bd36:	001a      	movs	r2, r3
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	4353      	muls	r3, r2
 800bd3c:	005b      	lsls	r3, r3, #1
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	18d3      	adds	r3, r2, r3
 800bd42:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	109a      	asrs	r2, r3, #2
 800bd48:	4b40      	ldr	r3, [pc, #256]	@ (800be4c <BMP280_calc_pressure+0x14c>)
 800bd4a:	210c      	movs	r1, #12
 800bd4c:	5e5b      	ldrsh	r3, [r3, r1]
 800bd4e:	041b      	lsls	r3, r3, #16
 800bd50:	18d3      	adds	r3, r2, r3
 800bd52:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 800bd54:	4b3d      	ldr	r3, [pc, #244]	@ (800be4c <BMP280_calc_pressure+0x14c>)
 800bd56:	220a      	movs	r2, #10
 800bd58:	5e9b      	ldrsh	r3, [r3, r2]
 800bd5a:	0019      	movs	r1, r3
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	109b      	asrs	r3, r3, #2
 800bd60:	68fa      	ldr	r2, [r7, #12]
 800bd62:	1092      	asrs	r2, r2, #2
 800bd64:	4353      	muls	r3, r2
 800bd66:	135b      	asrs	r3, r3, #13
 800bd68:	434b      	muls	r3, r1
 800bd6a:	10da      	asrs	r2, r3, #3
 800bd6c:	4b37      	ldr	r3, [pc, #220]	@ (800be4c <BMP280_calc_pressure+0x14c>)
 800bd6e:	2108      	movs	r1, #8
 800bd70:	5e5b      	ldrsh	r3, [r3, r1]
 800bd72:	0019      	movs	r1, r3
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	434b      	muls	r3, r1
 800bd78:	105b      	asrs	r3, r3, #1
 800bd7a:	18d3      	adds	r3, r2, r3
 800bd7c:	149b      	asrs	r3, r3, #18
 800bd7e:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2280      	movs	r2, #128	@ 0x80
 800bd84:	0212      	lsls	r2, r2, #8
 800bd86:	4694      	mov	ip, r2
 800bd88:	4463      	add	r3, ip
 800bd8a:	4a30      	ldr	r2, [pc, #192]	@ (800be4c <BMP280_calc_pressure+0x14c>)
 800bd8c:	88d2      	ldrh	r2, [r2, #6]
 800bd8e:	4353      	muls	r3, r2
 800bd90:	13db      	asrs	r3, r3, #15
 800bd92:	60fb      	str	r3, [r7, #12]

  // Avoid exception caused by division with zero
  if (var1 == 0) {
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d101      	bne.n	800bd9e <BMP280_calc_pressure+0x9e>
    return 0;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	e04b      	b.n	800be36 <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	2280      	movs	r2, #128	@ 0x80
 800bda2:	0352      	lsls	r2, r2, #13
 800bda4:	1ad2      	subs	r2, r2, r3
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	131b      	asrs	r3, r3, #12
 800bdaa:	1ad3      	subs	r3, r2, r3
 800bdac:	001a      	movs	r2, r3
 800bdae:	4b28      	ldr	r3, [pc, #160]	@ (800be50 <BMP280_calc_pressure+0x150>)
 800bdb0:	4353      	muls	r3, r2
 800bdb2:	617b      	str	r3, [r7, #20]

    // Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1
  if (p < 0x80000000)
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	db09      	blt.n	800bdce <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	005b      	lsls	r3, r3, #1
 800bdbe:	68fa      	ldr	r2, [r7, #12]
 800bdc0:	0011      	movs	r1, r2
 800bdc2:	0018      	movs	r0, r3
 800bdc4:	f7f4 f9ee 	bl	80001a4 <__udivsi3>
 800bdc8:	0003      	movs	r3, r0
 800bdca:	617b      	str	r3, [r7, #20]
 800bdcc:	e007      	b.n	800bdde <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	0019      	movs	r1, r3
 800bdd2:	6978      	ldr	r0, [r7, #20]
 800bdd4:	f7f4 f9e6 	bl	80001a4 <__udivsi3>
 800bdd8:	0003      	movs	r3, r0
 800bdda:	005b      	lsls	r3, r3, #1
 800bddc:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 800bdde:	4b1b      	ldr	r3, [pc, #108]	@ (800be4c <BMP280_calc_pressure+0x14c>)
 800bde0:	2216      	movs	r2, #22
 800bde2:	5e9b      	ldrsh	r3, [r3, r2]
 800bde4:	0019      	movs	r1, r3
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	08db      	lsrs	r3, r3, #3
 800bdea:	697a      	ldr	r2, [r7, #20]
 800bdec:	08d2      	lsrs	r2, r2, #3
 800bdee:	4353      	muls	r3, r2
 800bdf0:	0b5b      	lsrs	r3, r3, #13
 800bdf2:	434b      	muls	r3, r1
 800bdf4:	131b      	asrs	r3, r3, #12
 800bdf6:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	089b      	lsrs	r3, r3, #2
 800bdfc:	001a      	movs	r2, r3
 800bdfe:	4b13      	ldr	r3, [pc, #76]	@ (800be4c <BMP280_calc_pressure+0x14c>)
 800be00:	2114      	movs	r1, #20
 800be02:	5e5b      	ldrsh	r3, [r3, r1]
 800be04:	4353      	muls	r3, r2
 800be06:	135b      	asrs	r3, r3, #13
 800be08:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	18d3      	adds	r3, r2, r3
 800be10:	4a0e      	ldr	r2, [pc, #56]	@ (800be4c <BMP280_calc_pressure+0x14c>)
 800be12:	2112      	movs	r1, #18
 800be14:	5e52      	ldrsh	r2, [r2, r1]
 800be16:	189b      	adds	r3, r3, r2
 800be18:	111a      	asrs	r2, r3, #4
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	18d3      	adds	r3, r2, r3
 800be1e:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 800be20:	6978      	ldr	r0, [r7, #20]
 800be22:	f7f5 fd51 	bl	80018c8 <__aeabi_ui2f>
 800be26:	1c03      	adds	r3, r0, #0
 800be28:	490a      	ldr	r1, [pc, #40]	@ (800be54 <BMP280_calc_pressure+0x154>)
 800be2a:	1c18      	adds	r0, r3, #0
 800be2c:	f7f4 ff3a 	bl	8000ca4 <__aeabi_fdiv>
 800be30:	1c03      	adds	r3, r0, #0
 800be32:	607b      	str	r3, [r7, #4]
  return airhPa;
 800be34:	687b      	ldr	r3, [r7, #4]
}
 800be36:	1c18      	adds	r0, r3, #0
 800be38:	46bd      	mov	sp, r7
 800be3a:	b006      	add	sp, #24
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	46c0      	nop			@ (mov r8, r8)
 800be40:	20000f30 	.word	0x20000f30
 800be44:	20000f20 	.word	0x20000f20
 800be48:	ffff0600 	.word	0xffff0600
 800be4c:	20000f08 	.word	0x20000f08
 800be50:	00000c35 	.word	0x00000c35
 800be54:	42c80000 	.word	0x42c80000

0800be58 <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 800be58:	b5b0      	push	{r4, r5, r7, lr}
 800be5a:	b088      	sub	sp, #32
 800be5c:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 800be5e:	4b8e      	ldr	r3, [pc, #568]	@ (800c098 <BMP_Upkeep+0x240>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	0018      	movs	r0, r3
 800be64:	f007 ffd2 	bl	8013e0c <TimestampIsReached>
 800be68:	0003      	movs	r3, r0
 800be6a:	001a      	movs	r2, r3
 800be6c:	2301      	movs	r3, #1
 800be6e:	4053      	eors	r3, r2
 800be70:	b2db      	uxtb	r3, r3
 800be72:	2b00      	cmp	r3, #0
 800be74:	d002      	beq.n	800be7c <BMP_Upkeep+0x24>
    return BMPState;
 800be76:	4b89      	ldr	r3, [pc, #548]	@ (800c09c <BMP_Upkeep+0x244>)
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	e109      	b.n	800c090 <BMP_Upkeep+0x238>
  }
  switch(BMPState) {
 800be7c:	4b87      	ldr	r3, [pc, #540]	@ (800c09c <BMP_Upkeep+0x244>)
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	2b02      	cmp	r3, #2
 800be82:	d100      	bne.n	800be86 <BMP_Upkeep+0x2e>
 800be84:	e0f2      	b.n	800c06c <BMP_Upkeep+0x214>
 800be86:	dd00      	ble.n	800be8a <BMP_Upkeep+0x32>
 800be88:	e0f4      	b.n	800c074 <BMP_Upkeep+0x21c>
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d003      	beq.n	800be96 <BMP_Upkeep+0x3e>
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d100      	bne.n	800be94 <BMP_Upkeep+0x3c>
 800be92:	e092      	b.n	800bfba <BMP_Upkeep+0x162>
 800be94:	e0ee      	b.n	800c074 <BMP_Upkeep+0x21c>
  case BMP_MODE_SELECT:
    if ((getSensorLock() == FREE) || (getSensorLock() == BMP280)) {
 800be96:	f002 f829 	bl	800deec <getSensorLock>
 800be9a:	1e03      	subs	r3, r0, #0
 800be9c:	d005      	beq.n	800beaa <BMP_Upkeep+0x52>
 800be9e:	f002 f825 	bl	800deec <getSensorLock>
 800bea2:	0003      	movs	r3, r0
 800bea4:	2b03      	cmp	r3, #3
 800bea6:	d000      	beq.n	800beaa <BMP_Upkeep+0x52>
 800bea8:	e07f      	b.n	800bfaa <BMP_Upkeep+0x152>
      if (getSensorLock() == FREE) {
 800beaa:	f002 f81f 	bl	800deec <getSensorLock>
 800beae:	1e03      	subs	r3, r0, #0
 800beb0:	d102      	bne.n	800beb8 <BMP_Upkeep+0x60>
        setSensorLock(BMP280);
 800beb2:	2003      	movs	r0, #3
 800beb4:	f002 f806 	bl	800dec4 <setSensorLock>
      }
      bmperror = false;
 800beb8:	4b79      	ldr	r3, [pc, #484]	@ (800c0a0 <BMP_Upkeep+0x248>)
 800beba:	2200      	movs	r2, #0
 800bebc:	701a      	strb	r2, [r3, #0]
      bool changed = false;
 800bebe:	240f      	movs	r4, #15
 800bec0:	193b      	adds	r3, r7, r4
 800bec2:	2200      	movs	r2, #0
 800bec4:	701a      	strb	r2, [r3, #0]
      mode = BMP280_get_mode();
 800bec6:	f7ff fe6d 	bl	800bba4 <BMP280_get_mode>
 800beca:	0003      	movs	r3, r0
 800becc:	001a      	movs	r2, r3
 800bece:	4b75      	ldr	r3, [pc, #468]	@ (800c0a4 <BMP_Upkeep+0x24c>)
 800bed0:	701a      	strb	r2, [r3, #0]
      mode &= BMP280_NORMAL_MODE;
 800bed2:	4b74      	ldr	r3, [pc, #464]	@ (800c0a4 <BMP_Upkeep+0x24c>)
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	2203      	movs	r2, #3
 800bed8:	4013      	ands	r3, r2
 800beda:	b2da      	uxtb	r2, r3
 800bedc:	4b71      	ldr	r3, [pc, #452]	@ (800c0a4 <BMP_Upkeep+0x24c>)
 800bede:	701a      	strb	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800bee0:	f7fd ff06 	bl	8009cf0 <Check_USB_PowerOn>
 800bee4:	1e03      	subs	r3, r0, #0
 800bee6:	d010      	beq.n	800bf0a <BMP_Upkeep+0xb2>
        if (mode != BMP280_NORMAL_MODE) {
 800bee8:	4b6e      	ldr	r3, [pc, #440]	@ (800c0a4 <BMP_Upkeep+0x24c>)
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	2b03      	cmp	r3, #3
 800beee:	d02d      	beq.n	800bf4c <BMP_Upkeep+0xf4>
          mode =BMP280_NORMAL_MODE;
 800bef0:	4b6c      	ldr	r3, [pc, #432]	@ (800c0a4 <BMP_Upkeep+0x24c>)
 800bef2:	2203      	movs	r2, #3
 800bef4:	701a      	strb	r2, [r3, #0]
          changed = true;
 800bef6:	193b      	adds	r3, r7, r4
 800bef8:	2201      	movs	r2, #1
 800befa:	701a      	strb	r2, [r3, #0]
          Info("BMP280 modus changed to normal");
 800befc:	4a6a      	ldr	r2, [pc, #424]	@ (800c0a8 <BMP_Upkeep+0x250>)
 800befe:	4b6b      	ldr	r3, [pc, #428]	@ (800c0ac <BMP_Upkeep+0x254>)
 800bf00:	0019      	movs	r1, r3
 800bf02:	2002      	movs	r0, #2
 800bf04:	f007 ffd8 	bl	8013eb8 <CreateLine>
 800bf08:	e020      	b.n	800bf4c <BMP_Upkeep+0xf4>
        }
      }
      else {
        if ((mode == BMP280_NORMAL_MODE) || (mode == BMP280_SLEEP_MODE) || (mode == 255)) {
 800bf0a:	4b66      	ldr	r3, [pc, #408]	@ (800c0a4 <BMP_Upkeep+0x24c>)
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	2b03      	cmp	r3, #3
 800bf10:	d007      	beq.n	800bf22 <BMP_Upkeep+0xca>
 800bf12:	4b64      	ldr	r3, [pc, #400]	@ (800c0a4 <BMP_Upkeep+0x24c>)
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d003      	beq.n	800bf22 <BMP_Upkeep+0xca>
 800bf1a:	4b62      	ldr	r3, [pc, #392]	@ (800c0a4 <BMP_Upkeep+0x24c>)
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	2bff      	cmp	r3, #255	@ 0xff
 800bf20:	d114      	bne.n	800bf4c <BMP_Upkeep+0xf4>
          changed = true;
 800bf22:	230f      	movs	r3, #15
 800bf24:	18fb      	adds	r3, r7, r3
 800bf26:	2201      	movs	r2, #1
 800bf28:	701a      	strb	r2, [r3, #0]
          mode = BMP280_FORCED_MODE;
 800bf2a:	4b5e      	ldr	r3, [pc, #376]	@ (800c0a4 <BMP_Upkeep+0x24c>)
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	701a      	strb	r2, [r3, #0]
          if ((mode == BMP280_NORMAL_MODE)|| (mode == 255)) {
 800bf30:	4b5c      	ldr	r3, [pc, #368]	@ (800c0a4 <BMP_Upkeep+0x24c>)
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	2b03      	cmp	r3, #3
 800bf36:	d003      	beq.n	800bf40 <BMP_Upkeep+0xe8>
 800bf38:	4b5a      	ldr	r3, [pc, #360]	@ (800c0a4 <BMP_Upkeep+0x24c>)
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	2bff      	cmp	r3, #255	@ 0xff
 800bf3e:	d105      	bne.n	800bf4c <BMP_Upkeep+0xf4>
           Info("BMP280 modus changed to forced");
 800bf40:	4a5b      	ldr	r2, [pc, #364]	@ (800c0b0 <BMP_Upkeep+0x258>)
 800bf42:	4b5a      	ldr	r3, [pc, #360]	@ (800c0ac <BMP_Upkeep+0x254>)
 800bf44:	0019      	movs	r1, r3
 800bf46:	2002      	movs	r0, #2
 800bf48:	f007 ffb6 	bl	8013eb8 <CreateLine>
          }
        }
      }
      if (changed || (mode == BMP280_FORCED_MODE)) {
 800bf4c:	230f      	movs	r3, #15
 800bf4e:	18fb      	adds	r3, r7, r3
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d103      	bne.n	800bf5e <BMP_Upkeep+0x106>
 800bf56:	4b53      	ldr	r3, [pc, #332]	@ (800c0a4 <BMP_Upkeep+0x24c>)
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d105      	bne.n	800bf6a <BMP_Upkeep+0x112>
        BMP280_set_mode();
 800bf5e:	f7ff fe43 	bl	800bbe8 <BMP280_set_mode>
        changed = false;
 800bf62:	230f      	movs	r3, #15
 800bf64:	18fb      	adds	r3, r7, r3
 800bf66:	2200      	movs	r2, #0
 800bf68:	701a      	strb	r2, [r3, #0]
      }
      if (BMP280_get_measurement_values()) {
 800bf6a:	f7ff fd65 	bl	800ba38 <BMP280_get_measurement_values>
 800bf6e:	1e03      	subs	r3, r0, #0
 800bf70:	d003      	beq.n	800bf7a <BMP_Upkeep+0x122>
        BMPState = BMP_STATE_PROCESS_RESULTS;
 800bf72:	4b4a      	ldr	r3, [pc, #296]	@ (800c09c <BMP_Upkeep+0x244>)
 800bf74:	2201      	movs	r2, #1
 800bf76:	701a      	strb	r2, [r3, #0]
 800bf78:	e012      	b.n	800bfa0 <BMP_Upkeep+0x148>
      }
      else {
        Error("BMP280 Error during reading measurement results array");
 800bf7a:	4a4e      	ldr	r2, [pc, #312]	@ (800c0b4 <BMP_Upkeep+0x25c>)
 800bf7c:	4b4e      	ldr	r3, [pc, #312]	@ (800c0b8 <BMP_Upkeep+0x260>)
 800bf7e:	0019      	movs	r1, r3
 800bf80:	2001      	movs	r0, #1
 800bf82:	f007 ff99 	bl	8013eb8 <CreateLine>
        bmperror = true;
 800bf86:	4b46      	ldr	r3, [pc, #280]	@ (800c0a0 <BMP_Upkeep+0x248>)
 800bf88:	2201      	movs	r2, #1
 800bf8a:	701a      	strb	r2, [r3, #0]
        BMP280TimeStamp = HAL_GetTick() + 5000;
 800bf8c:	f008 fd14 	bl	80149b8 <HAL_GetTick>
 800bf90:	0003      	movs	r3, r0
 800bf92:	4a4a      	ldr	r2, [pc, #296]	@ (800c0bc <BMP_Upkeep+0x264>)
 800bf94:	189a      	adds	r2, r3, r2
 800bf96:	4b40      	ldr	r3, [pc, #256]	@ (800c098 <BMP_Upkeep+0x240>)
 800bf98:	601a      	str	r2, [r3, #0]
        BMPState = BMP_STATE_WAIT ;
 800bf9a:	4b40      	ldr	r3, [pc, #256]	@ (800c09c <BMP_Upkeep+0x244>)
 800bf9c:	2202      	movs	r2, #2
 800bf9e:	701a      	strb	r2, [r3, #0]
      }
      setSensorLock(FREE);
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	f001 ff8f 	bl	800dec4 <setSensorLock>
    if ((getSensorLock() == FREE) || (getSensorLock() == BMP280)) {
 800bfa6:	46c0      	nop			@ (mov r8, r8)
//      uint8_t locktype = getSensorLock();
//      Debug("Lock is not from BMP280, but from %s",
//        locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
    }
    break;
 800bfa8:	e070      	b.n	800c08c <BMP_Upkeep+0x234>
      BMP280TimeStamp = HAL_GetTick() + 97;
 800bfaa:	f008 fd05 	bl	80149b8 <HAL_GetTick>
 800bfae:	0003      	movs	r3, r0
 800bfb0:	3361      	adds	r3, #97	@ 0x61
 800bfb2:	001a      	movs	r2, r3
 800bfb4:	4b38      	ldr	r3, [pc, #224]	@ (800c098 <BMP_Upkeep+0x240>)
 800bfb6:	601a      	str	r2, [r3, #0]
    break;
 800bfb8:	e068      	b.n	800c08c <BMP_Upkeep+0x234>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 800bfba:	f7ff fe59 	bl	800bc70 <BMP280_calc_temperature>
 800bfbe:	1c03      	adds	r3, r0, #0
 800bfc0:	60bb      	str	r3, [r7, #8]
    airhpa = BMP280_calc_pressure();
 800bfc2:	f7ff fe9d 	bl	800bd00 <BMP280_calc_pressure>
 800bfc6:	1c03      	adds	r3, r0, #0
 800bfc8:	607b      	str	r3, [r7, #4]
    Info("BMP280 barometric value: %.2fhPa, airtemperature: %2.2fC", airhpa, airtemp);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f7f7 fc62 	bl	8003894 <__aeabi_f2d>
 800bfd0:	0004      	movs	r4, r0
 800bfd2:	000d      	movs	r5, r1
 800bfd4:	68b8      	ldr	r0, [r7, #8]
 800bfd6:	f7f7 fc5d 	bl	8003894 <__aeabi_f2d>
 800bfda:	0002      	movs	r2, r0
 800bfdc:	000b      	movs	r3, r1
 800bfde:	4838      	ldr	r0, [pc, #224]	@ (800c0c0 <BMP_Upkeep+0x268>)
 800bfe0:	4932      	ldr	r1, [pc, #200]	@ (800c0ac <BMP_Upkeep+0x254>)
 800bfe2:	9202      	str	r2, [sp, #8]
 800bfe4:	9303      	str	r3, [sp, #12]
 800bfe6:	9400      	str	r4, [sp, #0]
 800bfe8:	9501      	str	r5, [sp, #4]
 800bfea:	0002      	movs	r2, r0
 800bfec:	2002      	movs	r0, #2
 800bfee:	f007 ff63 	bl	8013eb8 <CreateLine>

    if ((airhpa > 850.0) && (airhpa < 1100)) {
 800bff2:	4934      	ldr	r1, [pc, #208]	@ (800c0c4 <BMP_Upkeep+0x26c>)
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f7f4 faaf 	bl	8000558 <__aeabi_fcmpgt>
 800bffa:	1e03      	subs	r3, r0, #0
 800bffc:	d022      	beq.n	800c044 <BMP_Upkeep+0x1ec>
 800bffe:	4932      	ldr	r1, [pc, #200]	@ (800c0c8 <BMP_Upkeep+0x270>)
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f7f4 fa95 	bl	8000530 <__aeabi_fcmplt>
 800c006:	1e03      	subs	r3, r0, #0
 800c008:	d01c      	beq.n	800c044 <BMP_Upkeep+0x1ec>
      setBMP280(airtemp, airhpa);
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	1c11      	adds	r1, r2, #0
 800c010:	1c18      	adds	r0, r3, #0
 800c012:	f7f8 fd73 	bl	8004afc <setBMP280>
      if (Check_USB_PowerOn()) {
 800c016:	f7fd fe6b 	bl	8009cf0 <Check_USB_PowerOn>
 800c01a:	1e03      	subs	r3, r0, #0
 800c01c:	d00a      	beq.n	800c034 <BMP_Upkeep+0x1dc>
        BMP280TimeStamp = HAL_GetTick() + 28000;
 800c01e:	f008 fccb 	bl	80149b8 <HAL_GetTick>
 800c022:	0003      	movs	r3, r0
 800c024:	4a29      	ldr	r2, [pc, #164]	@ (800c0cc <BMP_Upkeep+0x274>)
 800c026:	189a      	adds	r2, r3, r2
 800c028:	4b1b      	ldr	r3, [pc, #108]	@ (800c098 <BMP_Upkeep+0x240>)
 800c02a:	601a      	str	r2, [r3, #0]
        bmp280samplecounter = 1;
 800c02c:	4b28      	ldr	r3, [pc, #160]	@ (800c0d0 <BMP_Upkeep+0x278>)
 800c02e:	2201      	movs	r2, #1
 800c030:	701a      	strb	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800c032:	e017      	b.n	800c064 <BMP_Upkeep+0x20c>
      }
      else {
        BMP280TimeStamp = HAL_GetTick() + 10000;
 800c034:	f008 fcc0 	bl	80149b8 <HAL_GetTick>
 800c038:	0003      	movs	r3, r0
 800c03a:	4a26      	ldr	r2, [pc, #152]	@ (800c0d4 <BMP_Upkeep+0x27c>)
 800c03c:	189a      	adds	r2, r3, r2
 800c03e:	4b16      	ldr	r3, [pc, #88]	@ (800c098 <BMP_Upkeep+0x240>)
 800c040:	601a      	str	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800c042:	e00f      	b.n	800c064 <BMP_Upkeep+0x20c>
      }
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800c044:	4a24      	ldr	r2, [pc, #144]	@ (800c0d8 <BMP_Upkeep+0x280>)
 800c046:	4b1c      	ldr	r3, [pc, #112]	@ (800c0b8 <BMP_Upkeep+0x260>)
 800c048:	0019      	movs	r1, r3
 800c04a:	2001      	movs	r0, #1
 800c04c:	f007 ff34 	bl	8013eb8 <CreateLine>
      bmperror = true;
 800c050:	4b13      	ldr	r3, [pc, #76]	@ (800c0a0 <BMP_Upkeep+0x248>)
 800c052:	2201      	movs	r2, #1
 800c054:	701a      	strb	r2, [r3, #0]
      BMP280TimeStamp = HAL_GetTick() + 5000;
 800c056:	f008 fcaf 	bl	80149b8 <HAL_GetTick>
 800c05a:	0003      	movs	r3, r0
 800c05c:	4a17      	ldr	r2, [pc, #92]	@ (800c0bc <BMP_Upkeep+0x264>)
 800c05e:	189a      	adds	r2, r3, r2
 800c060:	4b0d      	ldr	r3, [pc, #52]	@ (800c098 <BMP_Upkeep+0x240>)
 800c062:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 800c064:	4b0d      	ldr	r3, [pc, #52]	@ (800c09c <BMP_Upkeep+0x244>)
 800c066:	2202      	movs	r2, #2
 800c068:	701a      	strb	r2, [r3, #0]
    break;
 800c06a:	e00f      	b.n	800c08c <BMP_Upkeep+0x234>

  case BMP_STATE_WAIT:
      BMPState = BMP_MODE_SELECT;
 800c06c:	4b0b      	ldr	r3, [pc, #44]	@ (800c09c <BMP_Upkeep+0x244>)
 800c06e:	2200      	movs	r2, #0
 800c070:	701a      	strb	r2, [r3, #0]
    break;
 800c072:	e00b      	b.n	800c08c <BMP_Upkeep+0x234>


  default:
    // Handle unexpected state
    BMPState = BMP_MODE_SELECT;
 800c074:	4b09      	ldr	r3, [pc, #36]	@ (800c09c <BMP_Upkeep+0x244>)
 800c076:	2200      	movs	r2, #0
 800c078:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == BMP280) {
 800c07a:	f001 ff37 	bl	800deec <getSensorLock>
 800c07e:	0003      	movs	r3, r0
 800c080:	2b03      	cmp	r3, #3
 800c082:	d102      	bne.n	800c08a <BMP_Upkeep+0x232>
      setSensorLock(FREE);
 800c084:	2000      	movs	r0, #0
 800c086:	f001 ff1d 	bl	800dec4 <setSensorLock>
    }
    break;
 800c08a:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800c08c:	4b03      	ldr	r3, [pc, #12]	@ (800c09c <BMP_Upkeep+0x244>)
 800c08e:	781b      	ldrb	r3, [r3, #0]
}
 800c090:	0018      	movs	r0, r3
 800c092:	46bd      	mov	sp, r7
 800c094:	b004      	add	sp, #16
 800c096:	bdb0      	pop	{r4, r5, r7, pc}
 800c098:	20000f24 	.word	0x20000f24
 800c09c:	20000f29 	.word	0x20000f29
 800c0a0:	20000f2a 	.word	0x20000f2a
 800c0a4:	200000a1 	.word	0x200000a1
 800c0a8:	0802c858 	.word	0x0802c858
 800c0ac:	0802c668 	.word	0x0802c668
 800c0b0:	0802c878 	.word	0x0802c878
 800c0b4:	0802c898 	.word	0x0802c898
 800c0b8:	0802c6c0 	.word	0x0802c6c0
 800c0bc:	00001388 	.word	0x00001388
 800c0c0:	0802c8d0 	.word	0x0802c8d0
 800c0c4:	44548000 	.word	0x44548000
 800c0c8:	44898000 	.word	0x44898000
 800c0cc:	00006d60 	.word	0x00006d60
 800c0d0:	20000f28 	.word	0x20000f28
 800c0d4:	00002710 	.word	0x00002710
 800c0d8:	0802c90c 	.word	0x0802c90c

0800c0dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c0e2:	4b10      	ldr	r3, [pc, #64]	@ (800c124 <MX_DMA_Init+0x48>)
 800c0e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c0e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c124 <MX_DMA_Init+0x48>)
 800c0e8:	2101      	movs	r1, #1
 800c0ea:	430a      	orrs	r2, r1
 800c0ec:	631a      	str	r2, [r3, #48]	@ 0x30
 800c0ee:	4b0d      	ldr	r3, [pc, #52]	@ (800c124 <MX_DMA_Init+0x48>)
 800c0f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	4013      	ands	r3, r2
 800c0f6:	607b      	str	r3, [r7, #4]
 800c0f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	2100      	movs	r1, #0
 800c0fe:	200a      	movs	r0, #10
 800c100:	f009 f8ce 	bl	80152a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800c104:	200a      	movs	r0, #10
 800c106:	f009 f8e0 	bl	80152ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800c10a:	2200      	movs	r2, #0
 800c10c:	2103      	movs	r1, #3
 800c10e:	200b      	movs	r0, #11
 800c110:	f009 f8c6 	bl	80152a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800c114:	200b      	movs	r0, #11
 800c116:	f009 f8d8 	bl	80152ca <HAL_NVIC_EnableIRQ>

}
 800c11a:	46c0      	nop			@ (mov r8, r8)
 800c11c:	46bd      	mov	sp, r7
 800c11e:	b002      	add	sp, #8
 800c120:	bd80      	pop	{r7, pc}
 800c122:	46c0      	nop			@ (mov r8, r8)
 800c124:	40021000 	.word	0x40021000

0800c128 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800c128:	b590      	push	{r4, r7, lr}
 800c12a:	b087      	sub	sp, #28
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	1dbb      	adds	r3, r7, #6
 800c134:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800c136:	4b1b      	ldr	r3, [pc, #108]	@ (800c1a4 <WriteUint8ArrayEeprom+0x7c>)
 800c138:	68fa      	ldr	r2, [r7, #12]
 800c13a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800c13c:	4b1a      	ldr	r3, [pc, #104]	@ (800c1a8 <WriteUint8ArrayEeprom+0x80>)
 800c13e:	2280      	movs	r2, #128	@ 0x80
 800c140:	0052      	lsls	r2, r2, #1
 800c142:	619a      	str	r2, [r3, #24]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800c144:	f009 fc44 	bl	80159d0 <HAL_FLASHEx_DATAEEPROM_Unlock>
    HAL_Delay(3);
 800c148:	2003      	movs	r0, #3
 800c14a:	f008 fc3f 	bl	80149cc <HAL_Delay>
    for (uint16_t i = 0; i < size; i++)
 800c14e:	2316      	movs	r3, #22
 800c150:	18fb      	adds	r3, r7, r3
 800c152:	2200      	movs	r2, #0
 800c154:	801a      	strh	r2, [r3, #0]
 800c156:	e015      	b.n	800c184 <WriteUint8ArrayEeprom+0x5c>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800c158:	4b12      	ldr	r3, [pc, #72]	@ (800c1a4 <WriteUint8ArrayEeprom+0x7c>)
 800c15a:	6819      	ldr	r1, [r3, #0]
 800c15c:	2416      	movs	r4, #22
 800c15e:	193b      	adds	r3, r7, r4
 800c160:	881b      	ldrh	r3, [r3, #0]
 800c162:	68ba      	ldr	r2, [r7, #8]
 800c164:	18d3      	adds	r3, r2, r3
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	001a      	movs	r2, r3
 800c16a:	2000      	movs	r0, #0
 800c16c:	f009 fc98 	bl	8015aa0 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800c170:	4b0c      	ldr	r3, [pc, #48]	@ (800c1a4 <WriteUint8ArrayEeprom+0x7c>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	1c5a      	adds	r2, r3, #1
 800c176:	4b0b      	ldr	r3, [pc, #44]	@ (800c1a4 <WriteUint8ArrayEeprom+0x7c>)
 800c178:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c17a:	193b      	adds	r3, r7, r4
 800c17c:	881a      	ldrh	r2, [r3, #0]
 800c17e:	193b      	adds	r3, r7, r4
 800c180:	3201      	adds	r2, #1
 800c182:	801a      	strh	r2, [r3, #0]
 800c184:	2316      	movs	r3, #22
 800c186:	18fa      	adds	r2, r7, r3
 800c188:	1dbb      	adds	r3, r7, #6
 800c18a:	8812      	ldrh	r2, [r2, #0]
 800c18c:	881b      	ldrh	r3, [r3, #0]
 800c18e:	429a      	cmp	r2, r3
 800c190:	d3e2      	bcc.n	800c158 <WriteUint8ArrayEeprom+0x30>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800c192:	f009 fc4b 	bl	8015a2c <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800c196:	4b03      	ldr	r3, [pc, #12]	@ (800c1a4 <WriteUint8ArrayEeprom+0x7c>)
 800c198:	681b      	ldr	r3, [r3, #0]
}
 800c19a:	0018      	movs	r0, r3
 800c19c:	46bd      	mov	sp, r7
 800c19e:	b007      	add	sp, #28
 800c1a0:	bd90      	pop	{r4, r7, pc}
 800c1a2:	46c0      	nop			@ (mov r8, r8)
 800c1a4:	20000f34 	.word	0x20000f34
 800c1a8:	40022000 	.word	0x40022000

0800c1ac <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	0019      	movs	r1, r3
 800c1b8:	1dbb      	adds	r3, r7, #6
 800c1ba:	801a      	strh	r2, [r3, #0]
 800c1bc:	1d3b      	adds	r3, r7, #4
 800c1be:	1c0a      	adds	r2, r1, #0
 800c1c0:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800c1c2:	1dba      	adds	r2, r7, #6
 800c1c4:	1d3b      	adds	r3, r7, #4
 800c1c6:	8812      	ldrh	r2, [r2, #0]
 800c1c8:	881b      	ldrh	r3, [r3, #0]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d806      	bhi.n	800c1dc <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800c1ce:	1dbb      	adds	r3, r7, #6
 800c1d0:	881a      	ldrh	r2, [r3, #0]
 800c1d2:	68b9      	ldr	r1, [r7, #8]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	0018      	movs	r0, r3
 800c1d8:	f7ff ffa6 	bl	800c128 <WriteUint8ArrayEeprom>
    }
}
 800c1dc:	46c0      	nop			@ (mov r8, r8)
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	b004      	add	sp, #16
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b086      	sub	sp, #24
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	1dbb      	adds	r3, r7, #6
 800c1f0:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c1f2:	2316      	movs	r3, #22
 800c1f4:	18fb      	adds	r3, r7, r3
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	801a      	strh	r2, [r3, #0]
 800c1fa:	e010      	b.n	800c21e <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800c1fc:	2016      	movs	r0, #22
 800c1fe:	183b      	adds	r3, r7, r0
 800c200:	881a      	ldrh	r2, [r3, #0]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	18d3      	adds	r3, r2, r3
 800c206:	0019      	movs	r1, r3
 800c208:	183b      	adds	r3, r7, r0
 800c20a:	881b      	ldrh	r3, [r3, #0]
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	18d3      	adds	r3, r2, r3
 800c210:	780a      	ldrb	r2, [r1, #0]
 800c212:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c214:	183b      	adds	r3, r7, r0
 800c216:	881a      	ldrh	r2, [r3, #0]
 800c218:	183b      	adds	r3, r7, r0
 800c21a:	3201      	adds	r2, #1
 800c21c:	801a      	strh	r2, [r3, #0]
 800c21e:	2316      	movs	r3, #22
 800c220:	18fa      	adds	r2, r7, r3
 800c222:	1dbb      	adds	r3, r7, #6
 800c224:	8812      	ldrh	r2, [r2, #0]
 800c226:	881b      	ldrh	r3, [r3, #0]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d3e7      	bcc.n	800c1fc <ReadUint8ArrayEEprom+0x18>
    }
}
 800c22c:	46c0      	nop			@ (mov r8, r8)
 800c22e:	46c0      	nop			@ (mov r8, r8)
 800c230:	46bd      	mov	sp, r7
 800c232:	b006      	add	sp, #24
 800c234:	bd80      	pop	{r7, pc}

0800c236 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800c236:	b590      	push	{r4, r7, lr}
 800c238:	b085      	sub	sp, #20
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
 800c23e:	000a      	movs	r2, r1
 800c240:	1cbb      	adds	r3, r7, #2
 800c242:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800c244:	f009 fbc4 	bl	80159d0 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800c248:	230e      	movs	r3, #14
 800c24a:	18fb      	adds	r3, r7, r3
 800c24c:	2200      	movs	r2, #0
 800c24e:	801a      	strh	r2, [r3, #0]
 800c250:	e00c      	b.n	800c26c <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800c252:	240e      	movs	r4, #14
 800c254:	193b      	adds	r3, r7, r4
 800c256:	881a      	ldrh	r2, [r3, #0]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	18d3      	adds	r3, r2, r3
 800c25c:	0018      	movs	r0, r3
 800c25e:	f009 fbf3 	bl	8015a48 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800c262:	193b      	adds	r3, r7, r4
 800c264:	193a      	adds	r2, r7, r4
 800c266:	8812      	ldrh	r2, [r2, #0]
 800c268:	3204      	adds	r2, #4
 800c26a:	801a      	strh	r2, [r3, #0]
 800c26c:	230e      	movs	r3, #14
 800c26e:	18fa      	adds	r2, r7, r3
 800c270:	1cbb      	adds	r3, r7, #2
 800c272:	8812      	ldrh	r2, [r2, #0]
 800c274:	881b      	ldrh	r3, [r3, #0]
 800c276:	429a      	cmp	r2, r3
 800c278:	d3eb      	bcc.n	800c252 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800c27a:	f009 fbd7 	bl	8015a2c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800c27e:	46c0      	nop			@ (mov r8, r8)
 800c280:	46bd      	mov	sp, r7
 800c282:	b005      	add	sp, #20
 800c284:	bd90      	pop	{r4, r7, pc}
	...

0800c288 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b086      	sub	sp, #24
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2b7f      	cmp	r3, #127	@ 0x7f
 800c298:	d901      	bls.n	800c29e <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800c29a:	237f      	movs	r3, #127	@ 0x7f
 800c29c:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800c29e:	2017      	movs	r0, #23
 800c2a0:	183b      	adds	r3, r7, r0
 800c2a2:	490d      	ldr	r1, [pc, #52]	@ (800c2d8 <accessLUT10log10+0x50>)
 800c2a4:	68fa      	ldr	r2, [r7, #12]
 800c2a6:	188a      	adds	r2, r1, r2
 800c2a8:	7812      	ldrb	r2, [r2, #0]
 800c2aa:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800c2ac:	0001      	movs	r1, r0
 800c2ae:	187b      	adds	r3, r7, r1
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	2206      	movs	r2, #6
 800c2b4:	4113      	asrs	r3, r2
 800c2b6:	001a      	movs	r2, r3
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800c2bc:	187b      	adds	r3, r7, r1
 800c2be:	781a      	ldrb	r2, [r3, #0]
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	2106      	movs	r1, #6
 800c2c6:	408b      	lsls	r3, r1
 800c2c8:	1ad2      	subs	r2, r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	601a      	str	r2, [r3, #0]
}
 800c2ce:	46c0      	nop			@ (mov r8, r8)
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	b006      	add	sp, #24
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	46c0      	nop			@ (mov r8, r8)
 800c2d8:	0802e688 	.word	0x0802e688

0800c2dc <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800c2dc:	b5b0      	push	{r4, r5, r7, lr}
 800c2de:	b090      	sub	sp, #64	@ 0x40
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6138      	str	r0, [r7, #16]
 800c2e4:	6179      	str	r1, [r7, #20]
 800c2e6:	60fa      	str	r2, [r7, #12]
 800c2e8:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800c2ea:	2308      	movs	r3, #8
 800c2ec:	001a      	movs	r2, r3
 800c2ee:	3a20      	subs	r2, #32
 800c2f0:	2a00      	cmp	r2, #0
 800c2f2:	db03      	blt.n	800c2fc <efficient10log10+0x20>
 800c2f4:	2101      	movs	r1, #1
 800c2f6:	4091      	lsls	r1, r2
 800c2f8:	000d      	movs	r5, r1
 800c2fa:	e008      	b.n	800c30e <efficient10log10+0x32>
 800c2fc:	2220      	movs	r2, #32
 800c2fe:	1ad2      	subs	r2, r2, r3
 800c300:	2101      	movs	r1, #1
 800c302:	40d1      	lsrs	r1, r2
 800c304:	000a      	movs	r2, r1
 800c306:	2100      	movs	r1, #0
 800c308:	4099      	lsls	r1, r3
 800c30a:	000d      	movs	r5, r1
 800c30c:	4315      	orrs	r5, r2
 800c30e:	2201      	movs	r2, #1
 800c310:	409a      	lsls	r2, r3
 800c312:	0014      	movs	r4, r2
 800c314:	2201      	movs	r2, #1
 800c316:	4252      	negs	r2, r2
 800c318:	17d3      	asrs	r3, r2, #31
 800c31a:	1912      	adds	r2, r2, r4
 800c31c:	416b      	adcs	r3, r5
 800c31e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c320:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800c322:	2336      	movs	r3, #54	@ 0x36
 800c324:	2208      	movs	r2, #8
 800c326:	189b      	adds	r3, r3, r2
 800c328:	19db      	adds	r3, r3, r7
 800c32a:	2200      	movs	r2, #0
 800c32c:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c32e:	e017      	b.n	800c360 <efficient10log10+0x84>
    {
        P = P >> 1;
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	07db      	lsls	r3, r3, #31
 800c334:	693a      	ldr	r2, [r7, #16]
 800c336:	0852      	lsrs	r2, r2, #1
 800c338:	603a      	str	r2, [r7, #0]
 800c33a:	683a      	ldr	r2, [r7, #0]
 800c33c:	431a      	orrs	r2, r3
 800c33e:	603a      	str	r2, [r7, #0]
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	085b      	lsrs	r3, r3, #1
 800c344:	607b      	str	r3, [r7, #4]
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	687c      	ldr	r4, [r7, #4]
 800c34a:	613b      	str	r3, [r7, #16]
 800c34c:	617c      	str	r4, [r7, #20]
        bShift++;
 800c34e:	2136      	movs	r1, #54	@ 0x36
 800c350:	2008      	movs	r0, #8
 800c352:	180b      	adds	r3, r1, r0
 800c354:	19db      	adds	r3, r3, r7
 800c356:	881a      	ldrh	r2, [r3, #0]
 800c358:	180b      	adds	r3, r1, r0
 800c35a:	19db      	adds	r3, r3, r7
 800c35c:	3201      	adds	r2, #1
 800c35e:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c360:	697a      	ldr	r2, [r7, #20]
 800c362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c364:	429a      	cmp	r2, r3
 800c366:	d8e3      	bhi.n	800c330 <efficient10log10+0x54>
 800c368:	697a      	ldr	r2, [r7, #20]
 800c36a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d103      	bne.n	800c378 <efficient10log10+0x9c>
 800c370:	693a      	ldr	r2, [r7, #16]
 800c372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c374:	429a      	cmp	r2, r3
 800c376:	d8db      	bhi.n	800c330 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800c378:	693a      	ldr	r2, [r7, #16]
 800c37a:	2308      	movs	r3, #8
 800c37c:	3b01      	subs	r3, #1
 800c37e:	2101      	movs	r1, #1
 800c380:	4099      	lsls	r1, r3
 800c382:	000b      	movs	r3, r1
 800c384:	1ad3      	subs	r3, r2, r3
 800c386:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800c388:	2300      	movs	r3, #0
 800c38a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800c38c:	2300      	movs	r3, #0
 800c38e:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800c390:	231c      	movs	r3, #28
 800c392:	2408      	movs	r4, #8
 800c394:	191b      	adds	r3, r3, r4
 800c396:	19da      	adds	r2, r3, r7
 800c398:	2320      	movs	r3, #32
 800c39a:	191b      	adds	r3, r3, r4
 800c39c:	19d9      	adds	r1, r3, r7
 800c39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3a0:	0018      	movs	r0, r3
 800c3a2:	f7ff ff71 	bl	800c288 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c3a6:	2215      	movs	r2, #21
 800c3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3aa:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800c3ac:	2036      	movs	r0, #54	@ 0x36
 800c3ae:	1902      	adds	r2, r0, r4
 800c3b0:	19d2      	adds	r2, r2, r7
 800c3b2:	8812      	ldrh	r2, [r2, #0]
 800c3b4:	2103      	movs	r1, #3
 800c3b6:	434a      	muls	r2, r1
 800c3b8:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c3ba:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800c3bc:	0021      	movs	r1, r4
 800c3be:	1843      	adds	r3, r0, r1
 800c3c0:	19db      	adds	r3, r3, r7
 800c3c2:	881b      	ldrh	r3, [r3, #0]
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	4353      	muls	r3, r2
 800c3c8:	2203      	movs	r2, #3
 800c3ca:	4113      	asrs	r3, r2
 800c3cc:	001a      	movs	r2, r3
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d0:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800c3d2:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800c3d4:	2314      	movs	r3, #20
 800c3d6:	185b      	adds	r3, r3, r1
 800c3d8:	19da      	adds	r2, r3, r7
 800c3da:	2318      	movs	r3, #24
 800c3dc:	185b      	adds	r3, r3, r1
 800c3de:	19db      	adds	r3, r3, r7
 800c3e0:	0011      	movs	r1, r2
 800c3e2:	0018      	movs	r0, r3
 800c3e4:	f000 f80a 	bl	800c3fc <correctIntFracNumber>
    integerPart[0] = intPart;
 800c3e8:	6a3a      	ldr	r2, [r7, #32]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800c3ee:	69fa      	ldr	r2, [r7, #28]
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	601a      	str	r2, [r3, #0]
}
 800c3f4:	46c0      	nop			@ (mov r8, r8)
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	b010      	add	sp, #64	@ 0x40
 800c3fa:	bdb0      	pop	{r4, r5, r7, pc}

0800c3fc <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800c406:	e00a      	b.n	800c41e <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	1c5a      	adds	r2, r3, #1
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	3b0a      	subs	r3, #10
 800c418:	001a      	movs	r2, r3
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2b09      	cmp	r3, #9
 800c424:	dcf0      	bgt.n	800c408 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800c426:	e00a      	b.n	800c43e <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	1e5a      	subs	r2, r3, #1
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	330a      	adds	r3, #10
 800c438:	001a      	movs	r2, r3
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	3309      	adds	r3, #9
 800c444:	dbf0      	blt.n	800c428 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	da0f      	bge.n	800c46e <correctIntFracNumber+0x72>
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	dd0b      	ble.n	800c46e <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	1c5a      	adds	r2, r3, #1
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	3b0a      	subs	r3, #10
 800c466:	001a      	movs	r2, r3
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800c46c:	e012      	b.n	800c494 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	dd0e      	ble.n	800c494 <correctIntFracNumber+0x98>
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	da0a      	bge.n	800c494 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	1e5a      	subs	r2, r3, #1
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	330a      	adds	r3, #10
 800c48e:	001a      	movs	r2, r3
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	601a      	str	r2, [r3, #0]
}
 800c494:	46c0      	nop			@ (mov r8, r8)
 800c496:	46bd      	mov	sp, r7
 800c498:	b002      	add	sp, #8
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800c49c:	b590      	push	{r4, r7, lr}
 800c49e:	b08b      	sub	sp, #44	@ 0x2c
 800c4a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c4a2:	2414      	movs	r4, #20
 800c4a4:	193b      	adds	r3, r7, r4
 800c4a6:	0018      	movs	r0, r3
 800c4a8:	2314      	movs	r3, #20
 800c4aa:	001a      	movs	r2, r3
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	f01a f967 	bl	8026780 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c4b2:	4b8a      	ldr	r3, [pc, #552]	@ (800c6dc <MX_GPIO_Init+0x240>)
 800c4b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4b6:	4b89      	ldr	r3, [pc, #548]	@ (800c6dc <MX_GPIO_Init+0x240>)
 800c4b8:	2104      	movs	r1, #4
 800c4ba:	430a      	orrs	r2, r1
 800c4bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c4be:	4b87      	ldr	r3, [pc, #540]	@ (800c6dc <MX_GPIO_Init+0x240>)
 800c4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4c2:	2204      	movs	r2, #4
 800c4c4:	4013      	ands	r3, r2
 800c4c6:	613b      	str	r3, [r7, #16]
 800c4c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c4ca:	4b84      	ldr	r3, [pc, #528]	@ (800c6dc <MX_GPIO_Init+0x240>)
 800c4cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4ce:	4b83      	ldr	r3, [pc, #524]	@ (800c6dc <MX_GPIO_Init+0x240>)
 800c4d0:	2180      	movs	r1, #128	@ 0x80
 800c4d2:	430a      	orrs	r2, r1
 800c4d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c4d6:	4b81      	ldr	r3, [pc, #516]	@ (800c6dc <MX_GPIO_Init+0x240>)
 800c4d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4da:	2280      	movs	r2, #128	@ 0x80
 800c4dc:	4013      	ands	r3, r2
 800c4de:	60fb      	str	r3, [r7, #12]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4e2:	4b7e      	ldr	r3, [pc, #504]	@ (800c6dc <MX_GPIO_Init+0x240>)
 800c4e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4e6:	4b7d      	ldr	r3, [pc, #500]	@ (800c6dc <MX_GPIO_Init+0x240>)
 800c4e8:	2101      	movs	r1, #1
 800c4ea:	430a      	orrs	r2, r1
 800c4ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c4ee:	4b7b      	ldr	r3, [pc, #492]	@ (800c6dc <MX_GPIO_Init+0x240>)
 800c4f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	4013      	ands	r3, r2
 800c4f6:	60bb      	str	r3, [r7, #8]
 800c4f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c4fa:	4b78      	ldr	r3, [pc, #480]	@ (800c6dc <MX_GPIO_Init+0x240>)
 800c4fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4fe:	4b77      	ldr	r3, [pc, #476]	@ (800c6dc <MX_GPIO_Init+0x240>)
 800c500:	2102      	movs	r1, #2
 800c502:	430a      	orrs	r2, r1
 800c504:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c506:	4b75      	ldr	r3, [pc, #468]	@ (800c6dc <MX_GPIO_Init+0x240>)
 800c508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c50a:	2202      	movs	r2, #2
 800c50c:	4013      	ands	r3, r2
 800c50e:	607b      	str	r3, [r7, #4]
 800c510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c512:	4b72      	ldr	r3, [pc, #456]	@ (800c6dc <MX_GPIO_Init+0x240>)
 800c514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c516:	4b71      	ldr	r3, [pc, #452]	@ (800c6dc <MX_GPIO_Init+0x240>)
 800c518:	2108      	movs	r1, #8
 800c51a:	430a      	orrs	r2, r1
 800c51c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c51e:	4b6f      	ldr	r3, [pc, #444]	@ (800c6dc <MX_GPIO_Init+0x240>)
 800c520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c522:	2208      	movs	r2, #8
 800c524:	4013      	ands	r3, r2
 800c526:	603b      	str	r3, [r7, #0]
 800c528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800c52a:	4b6d      	ldr	r3, [pc, #436]	@ (800c6e0 <MX_GPIO_Init+0x244>)
 800c52c:	2201      	movs	r2, #1
 800c52e:	2101      	movs	r1, #1
 800c530:	0018      	movs	r0, r3
 800c532:	f009 fca8 	bl	8015e86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800c536:	4b6a      	ldr	r3, [pc, #424]	@ (800c6e0 <MX_GPIO_Init+0x244>)
 800c538:	2200      	movs	r2, #0
 800c53a:	2102      	movs	r1, #2
 800c53c:	0018      	movs	r0, r3
 800c53e:	f009 fca2 	bl	8015e86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800c542:	4968      	ldr	r1, [pc, #416]	@ (800c6e4 <MX_GPIO_Init+0x248>)
 800c544:	4b68      	ldr	r3, [pc, #416]	@ (800c6e8 <MX_GPIO_Init+0x24c>)
 800c546:	2201      	movs	r2, #1
 800c548:	0018      	movs	r0, r3
 800c54a:	f009 fc9c 	bl	8015e86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800c54e:	2380      	movs	r3, #128	@ 0x80
 800c550:	011b      	lsls	r3, r3, #4
 800c552:	4866      	ldr	r0, [pc, #408]	@ (800c6ec <MX_GPIO_Init+0x250>)
 800c554:	2201      	movs	r2, #1
 800c556:	0019      	movs	r1, r3
 800c558:	f009 fc95 	bl	8015e86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800c55c:	2380      	movs	r3, #128	@ 0x80
 800c55e:	015b      	lsls	r3, r3, #5
 800c560:	4862      	ldr	r0, [pc, #392]	@ (800c6ec <MX_GPIO_Init+0x250>)
 800c562:	2200      	movs	r2, #0
 800c564:	0019      	movs	r1, r3
 800c566:	f009 fc8e 	bl	8015e86 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800c56a:	193b      	adds	r3, r7, r4
 800c56c:	4a60      	ldr	r2, [pc, #384]	@ (800c6f0 <MX_GPIO_Init+0x254>)
 800c56e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c570:	193b      	adds	r3, r7, r4
 800c572:	2203      	movs	r2, #3
 800c574:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c576:	193b      	adds	r3, r7, r4
 800c578:	2200      	movs	r2, #0
 800c57a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c57c:	193b      	adds	r3, r7, r4
 800c57e:	4a5b      	ldr	r2, [pc, #364]	@ (800c6ec <MX_GPIO_Init+0x250>)
 800c580:	0019      	movs	r1, r3
 800c582:	0010      	movs	r0, r2
 800c584:	f009 fae4 	bl	8015b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800c588:	193b      	adds	r3, r7, r4
 800c58a:	2203      	movs	r2, #3
 800c58c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c58e:	193b      	adds	r3, r7, r4
 800c590:	2201      	movs	r2, #1
 800c592:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c594:	193b      	adds	r3, r7, r4
 800c596:	2200      	movs	r2, #0
 800c598:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c59a:	193b      	adds	r3, r7, r4
 800c59c:	2200      	movs	r2, #0
 800c59e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c5a0:	193b      	adds	r3, r7, r4
 800c5a2:	4a4f      	ldr	r2, [pc, #316]	@ (800c6e0 <MX_GPIO_Init+0x244>)
 800c5a4:	0019      	movs	r1, r3
 800c5a6:	0010      	movs	r0, r2
 800c5a8:	f009 fad2 	bl	8015b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800c5ac:	193b      	adds	r3, r7, r4
 800c5ae:	2270      	movs	r2, #112	@ 0x70
 800c5b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c5b2:	193b      	adds	r3, r7, r4
 800c5b4:	2203      	movs	r2, #3
 800c5b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5b8:	193b      	adds	r3, r7, r4
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c5be:	193a      	adds	r2, r7, r4
 800c5c0:	23a0      	movs	r3, #160	@ 0xa0
 800c5c2:	05db      	lsls	r3, r3, #23
 800c5c4:	0011      	movs	r1, r2
 800c5c6:	0018      	movs	r0, r3
 800c5c8:	f009 fac2 	bl	8015b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800c5cc:	193b      	adds	r3, r7, r4
 800c5ce:	22c0      	movs	r2, #192	@ 0xc0
 800c5d0:	0052      	lsls	r2, r2, #1
 800c5d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c5d4:	193b      	adds	r3, r7, r4
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5da:	193b      	adds	r3, r7, r4
 800c5dc:	2200      	movs	r2, #0
 800c5de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c5e0:	193a      	adds	r2, r7, r4
 800c5e2:	23a0      	movs	r3, #160	@ 0xa0
 800c5e4:	05db      	lsls	r3, r3, #23
 800c5e6:	0011      	movs	r1, r2
 800c5e8:	0018      	movs	r0, r3
 800c5ea:	f009 fab1 	bl	8015b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800c5ee:	193b      	adds	r3, r7, r4
 800c5f0:	4a3c      	ldr	r2, [pc, #240]	@ (800c6e4 <MX_GPIO_Init+0x248>)
 800c5f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c5f4:	193b      	adds	r3, r7, r4
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5fa:	193b      	adds	r3, r7, r4
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c600:	193b      	adds	r3, r7, r4
 800c602:	2200      	movs	r2, #0
 800c604:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c606:	193b      	adds	r3, r7, r4
 800c608:	4a37      	ldr	r2, [pc, #220]	@ (800c6e8 <MX_GPIO_Init+0x24c>)
 800c60a:	0019      	movs	r1, r3
 800c60c:	0010      	movs	r0, r2
 800c60e:	f009 fa9f 	bl	8015b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800c612:	193b      	adds	r3, r7, r4
 800c614:	4a37      	ldr	r2, [pc, #220]	@ (800c6f4 <MX_GPIO_Init+0x258>)
 800c616:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c618:	193b      	adds	r3, r7, r4
 800c61a:	2203      	movs	r2, #3
 800c61c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c61e:	193b      	adds	r3, r7, r4
 800c620:	2200      	movs	r2, #0
 800c622:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c624:	193b      	adds	r3, r7, r4
 800c626:	4a30      	ldr	r2, [pc, #192]	@ (800c6e8 <MX_GPIO_Init+0x24c>)
 800c628:	0019      	movs	r1, r3
 800c62a:	0010      	movs	r0, r2
 800c62c:	f009 fa90 	bl	8015b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800c630:	0021      	movs	r1, r4
 800c632:	187b      	adds	r3, r7, r1
 800c634:	2280      	movs	r2, #128	@ 0x80
 800c636:	0092      	lsls	r2, r2, #2
 800c638:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c63a:	000c      	movs	r4, r1
 800c63c:	193b      	adds	r3, r7, r4
 800c63e:	2200      	movs	r2, #0
 800c640:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c642:	193b      	adds	r3, r7, r4
 800c644:	2200      	movs	r2, #0
 800c646:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800c648:	193b      	adds	r3, r7, r4
 800c64a:	4a28      	ldr	r2, [pc, #160]	@ (800c6ec <MX_GPIO_Init+0x250>)
 800c64c:	0019      	movs	r1, r3
 800c64e:	0010      	movs	r0, r2
 800c650:	f009 fa7e 	bl	8015b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800c654:	193b      	adds	r3, r7, r4
 800c656:	2280      	movs	r2, #128	@ 0x80
 800c658:	0212      	lsls	r2, r2, #8
 800c65a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c65c:	193b      	adds	r3, r7, r4
 800c65e:	2288      	movs	r2, #136	@ 0x88
 800c660:	0352      	lsls	r2, r2, #13
 800c662:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c664:	193b      	adds	r3, r7, r4
 800c666:	2200      	movs	r2, #0
 800c668:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800c66a:	193a      	adds	r2, r7, r4
 800c66c:	23a0      	movs	r3, #160	@ 0xa0
 800c66e:	05db      	lsls	r3, r3, #23
 800c670:	0011      	movs	r1, r2
 800c672:	0018      	movs	r0, r3
 800c674:	f009 fa6c 	bl	8015b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800c678:	0021      	movs	r1, r4
 800c67a:	187b      	adds	r3, r7, r1
 800c67c:	22c0      	movs	r2, #192	@ 0xc0
 800c67e:	0152      	lsls	r2, r2, #5
 800c680:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c682:	000c      	movs	r4, r1
 800c684:	193b      	adds	r3, r7, r4
 800c686:	2201      	movs	r2, #1
 800c688:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c68a:	193b      	adds	r3, r7, r4
 800c68c:	2200      	movs	r2, #0
 800c68e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c690:	193b      	adds	r3, r7, r4
 800c692:	2200      	movs	r2, #0
 800c694:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c696:	193b      	adds	r3, r7, r4
 800c698:	4a14      	ldr	r2, [pc, #80]	@ (800c6ec <MX_GPIO_Init+0x250>)
 800c69a:	0019      	movs	r1, r3
 800c69c:	0010      	movs	r0, r2
 800c69e:	f009 fa57 	bl	8015b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800c6a2:	0021      	movs	r1, r4
 800c6a4:	187b      	adds	r3, r7, r1
 800c6a6:	2204      	movs	r2, #4
 800c6a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c6aa:	187b      	adds	r3, r7, r1
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c6b0:	187b      	adds	r3, r7, r1
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800c6b6:	187b      	adds	r3, r7, r1
 800c6b8:	4a0f      	ldr	r2, [pc, #60]	@ (800c6f8 <MX_GPIO_Init+0x25c>)
 800c6ba:	0019      	movs	r1, r3
 800c6bc:	0010      	movs	r0, r2
 800c6be:	f009 fa47 	bl	8015b50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	2100      	movs	r1, #0
 800c6c6:	2007      	movs	r0, #7
 800c6c8:	f008 fdea 	bl	80152a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800c6cc:	2007      	movs	r0, #7
 800c6ce:	f008 fdfc 	bl	80152ca <HAL_NVIC_EnableIRQ>

}
 800c6d2:	46c0      	nop			@ (mov r8, r8)
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	b00b      	add	sp, #44	@ 0x2c
 800c6d8:	bd90      	pop	{r4, r7, pc}
 800c6da:	46c0      	nop			@ (mov r8, r8)
 800c6dc:	40021000 	.word	0x40021000
 800c6e0:	50001c00 	.word	0x50001c00
 800c6e4:	00000301 	.word	0x00000301
 800c6e8:	50000400 	.word	0x50000400
 800c6ec:	50000800 	.word	0x50000800
 800c6f0:	0000200c 	.word	0x0000200c
 800c6f4:	0000403e 	.word	0x0000403e
 800c6f8:	50000c00 	.word	0x50000c00

0800c6fc <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2100      	movs	r1, #0
 800c70a:	0018      	movs	r0, r3
 800c70c:	f010 fb3a 	bl	801cd84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2108      	movs	r1, #8
 800c714:	0018      	movs	r0, r3
 800c716:	f010 fb35 	bl	801cd84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	210c      	movs	r1, #12
 800c71e:	0018      	movs	r0, r3
 800c720:	f010 fb30 	bl	801cd84 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800c724:	2380      	movs	r3, #128	@ 0x80
 800c726:	05db      	lsls	r3, r3, #23
 800c728:	22fa      	movs	r2, #250	@ 0xfa
 800c72a:	0112      	lsls	r2, r2, #4
 800c72c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800c72e:	2380      	movs	r3, #128	@ 0x80
 800c730:	05db      	lsls	r3, r3, #23
 800c732:	22fa      	movs	r2, #250	@ 0xfa
 800c734:	0112      	lsls	r2, r2, #4
 800c736:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800c738:	2380      	movs	r3, #128	@ 0x80
 800c73a:	05db      	lsls	r3, r3, #23
 800c73c:	22fa      	movs	r2, #250	@ 0xfa
 800c73e:	0112      	lsls	r2, r2, #4
 800c740:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800c742:	2380      	movs	r3, #128	@ 0x80
 800c744:	05db      	lsls	r3, r3, #23
 800c746:	22fa      	movs	r2, #250	@ 0xfa
 800c748:	0112      	lsls	r2, r2, #4
 800c74a:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	2100      	movs	r1, #0
 800c750:	0018      	movs	r0, r3
 800c752:	f010 fb17 	bl	801cd84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	2104      	movs	r1, #4
 800c75a:	0018      	movs	r0, r3
 800c75c:	f010 fb12 	bl	801cd84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	2108      	movs	r1, #8
 800c764:	0018      	movs	r0, r3
 800c766:	f010 fb0d 	bl	801cd84 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800c76a:	4b0a      	ldr	r3, [pc, #40]	@ (800c794 <GPIO_InitPWMLEDs+0x98>)
 800c76c:	22fa      	movs	r2, #250	@ 0xfa
 800c76e:	0112      	lsls	r2, r2, #4
 800c770:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800c772:	4b08      	ldr	r3, [pc, #32]	@ (800c794 <GPIO_InitPWMLEDs+0x98>)
 800c774:	22fa      	movs	r2, #250	@ 0xfa
 800c776:	0112      	lsls	r2, r2, #4
 800c778:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800c77a:	4b06      	ldr	r3, [pc, #24]	@ (800c794 <GPIO_InitPWMLEDs+0x98>)
 800c77c:	22fa      	movs	r2, #250	@ 0xfa
 800c77e:	0112      	lsls	r2, r2, #4
 800c780:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800c782:	4b04      	ldr	r3, [pc, #16]	@ (800c794 <GPIO_InitPWMLEDs+0x98>)
 800c784:	22fa      	movs	r2, #250	@ 0xfa
 800c786:	0112      	lsls	r2, r2, #4
 800c788:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800c78a:	46c0      	nop			@ (mov r8, r8)
 800c78c:	46bd      	mov	sp, r7
 800c78e:	b002      	add	sp, #8
 800c790:	bd80      	pop	{r7, pc}
 800c792:	46c0      	nop			@ (mov r8, r8)
 800c794:	40000400 	.word	0x40000400

0800c798 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800c79c:	4b1b      	ldr	r3, [pc, #108]	@ (800c80c <MX_I2C1_Init+0x74>)
 800c79e:	4a1c      	ldr	r2, [pc, #112]	@ (800c810 <MX_I2C1_Init+0x78>)
 800c7a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800c7a2:	4b1a      	ldr	r3, [pc, #104]	@ (800c80c <MX_I2C1_Init+0x74>)
 800c7a4:	4a1b      	ldr	r2, [pc, #108]	@ (800c814 <MX_I2C1_Init+0x7c>)
 800c7a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800c7a8:	4b18      	ldr	r3, [pc, #96]	@ (800c80c <MX_I2C1_Init+0x74>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c7ae:	4b17      	ldr	r3, [pc, #92]	@ (800c80c <MX_I2C1_Init+0x74>)
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c7b4:	4b15      	ldr	r3, [pc, #84]	@ (800c80c <MX_I2C1_Init+0x74>)
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800c7ba:	4b14      	ldr	r3, [pc, #80]	@ (800c80c <MX_I2C1_Init+0x74>)
 800c7bc:	2200      	movs	r2, #0
 800c7be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c7c0:	4b12      	ldr	r3, [pc, #72]	@ (800c80c <MX_I2C1_Init+0x74>)
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c7c6:	4b11      	ldr	r3, [pc, #68]	@ (800c80c <MX_I2C1_Init+0x74>)
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c7cc:	4b0f      	ldr	r3, [pc, #60]	@ (800c80c <MX_I2C1_Init+0x74>)
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c7d2:	4b0e      	ldr	r3, [pc, #56]	@ (800c80c <MX_I2C1_Init+0x74>)
 800c7d4:	0018      	movs	r0, r3
 800c7d6:	f009 fb8f 	bl	8015ef8 <HAL_I2C_Init>
 800c7da:	1e03      	subs	r3, r0, #0
 800c7dc:	d001      	beq.n	800c7e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800c7de:	f000 fe59 	bl	800d494 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c7e2:	4b0a      	ldr	r3, [pc, #40]	@ (800c80c <MX_I2C1_Init+0x74>)
 800c7e4:	2100      	movs	r1, #0
 800c7e6:	0018      	movs	r0, r3
 800c7e8:	f00c fafc 	bl	8018de4 <HAL_I2CEx_ConfigAnalogFilter>
 800c7ec:	1e03      	subs	r3, r0, #0
 800c7ee:	d001      	beq.n	800c7f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800c7f0:	f000 fe50 	bl	800d494 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800c7f4:	4b05      	ldr	r3, [pc, #20]	@ (800c80c <MX_I2C1_Init+0x74>)
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	0018      	movs	r0, r3
 800c7fa:	f00c fb3f 	bl	8018e7c <HAL_I2CEx_ConfigDigitalFilter>
 800c7fe:	1e03      	subs	r3, r0, #0
 800c800:	d001      	beq.n	800c806 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800c802:	f000 fe47 	bl	800d494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800c806:	46c0      	nop			@ (mov r8, r8)
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	20000f38 	.word	0x20000f38
 800c810:	40005400 	.word	0x40005400
 800c814:	00503d58 	.word	0x00503d58

0800c818 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800c81c:	4b1b      	ldr	r3, [pc, #108]	@ (800c88c <MX_I2C2_Init+0x74>)
 800c81e:	4a1c      	ldr	r2, [pc, #112]	@ (800c890 <MX_I2C2_Init+0x78>)
 800c820:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800c822:	4b1a      	ldr	r3, [pc, #104]	@ (800c88c <MX_I2C2_Init+0x74>)
 800c824:	4a1b      	ldr	r2, [pc, #108]	@ (800c894 <MX_I2C2_Init+0x7c>)
 800c826:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800c828:	4b18      	ldr	r3, [pc, #96]	@ (800c88c <MX_I2C2_Init+0x74>)
 800c82a:	2200      	movs	r2, #0
 800c82c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c82e:	4b17      	ldr	r3, [pc, #92]	@ (800c88c <MX_I2C2_Init+0x74>)
 800c830:	2201      	movs	r2, #1
 800c832:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c834:	4b15      	ldr	r3, [pc, #84]	@ (800c88c <MX_I2C2_Init+0x74>)
 800c836:	2200      	movs	r2, #0
 800c838:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800c83a:	4b14      	ldr	r3, [pc, #80]	@ (800c88c <MX_I2C2_Init+0x74>)
 800c83c:	2200      	movs	r2, #0
 800c83e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c840:	4b12      	ldr	r3, [pc, #72]	@ (800c88c <MX_I2C2_Init+0x74>)
 800c842:	2200      	movs	r2, #0
 800c844:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c846:	4b11      	ldr	r3, [pc, #68]	@ (800c88c <MX_I2C2_Init+0x74>)
 800c848:	2200      	movs	r2, #0
 800c84a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c84c:	4b0f      	ldr	r3, [pc, #60]	@ (800c88c <MX_I2C2_Init+0x74>)
 800c84e:	2200      	movs	r2, #0
 800c850:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800c852:	4b0e      	ldr	r3, [pc, #56]	@ (800c88c <MX_I2C2_Init+0x74>)
 800c854:	0018      	movs	r0, r3
 800c856:	f009 fb4f 	bl	8015ef8 <HAL_I2C_Init>
 800c85a:	1e03      	subs	r3, r0, #0
 800c85c:	d001      	beq.n	800c862 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800c85e:	f000 fe19 	bl	800d494 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c862:	4b0a      	ldr	r3, [pc, #40]	@ (800c88c <MX_I2C2_Init+0x74>)
 800c864:	2100      	movs	r1, #0
 800c866:	0018      	movs	r0, r3
 800c868:	f00c fabc 	bl	8018de4 <HAL_I2CEx_ConfigAnalogFilter>
 800c86c:	1e03      	subs	r3, r0, #0
 800c86e:	d001      	beq.n	800c874 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800c870:	f000 fe10 	bl	800d494 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800c874:	4b05      	ldr	r3, [pc, #20]	@ (800c88c <MX_I2C2_Init+0x74>)
 800c876:	2100      	movs	r1, #0
 800c878:	0018      	movs	r0, r3
 800c87a:	f00c faff 	bl	8018e7c <HAL_I2CEx_ConfigDigitalFilter>
 800c87e:	1e03      	subs	r3, r0, #0
 800c880:	d001      	beq.n	800c886 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800c882:	f000 fe07 	bl	800d494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800c886:	46c0      	nop			@ (mov r8, r8)
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	20000f8c 	.word	0x20000f8c
 800c890:	40005800 	.word	0x40005800
 800c894:	00503d58 	.word	0x00503d58

0800c898 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800c898:	b590      	push	{r4, r7, lr}
 800c89a:	b08b      	sub	sp, #44	@ 0x2c
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8a0:	2414      	movs	r4, #20
 800c8a2:	193b      	adds	r3, r7, r4
 800c8a4:	0018      	movs	r0, r3
 800c8a6:	2314      	movs	r3, #20
 800c8a8:	001a      	movs	r2, r3
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	f019 ff68 	bl	8026780 <memset>
  if(i2cHandle->Instance==I2C1)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a5d      	ldr	r2, [pc, #372]	@ (800ca2c <HAL_I2C_MspInit+0x194>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d000      	beq.n	800c8bc <HAL_I2C_MspInit+0x24>
 800c8ba:	e083      	b.n	800c9c4 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c8bc:	4b5c      	ldr	r3, [pc, #368]	@ (800ca30 <HAL_I2C_MspInit+0x198>)
 800c8be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8c0:	4b5b      	ldr	r3, [pc, #364]	@ (800ca30 <HAL_I2C_MspInit+0x198>)
 800c8c2:	2102      	movs	r1, #2
 800c8c4:	430a      	orrs	r2, r1
 800c8c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c8c8:	4b59      	ldr	r3, [pc, #356]	@ (800ca30 <HAL_I2C_MspInit+0x198>)
 800c8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8cc:	2202      	movs	r2, #2
 800c8ce:	4013      	ands	r3, r2
 800c8d0:	613b      	str	r3, [r7, #16]
 800c8d2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c8d4:	0021      	movs	r1, r4
 800c8d6:	187b      	adds	r3, r7, r1
 800c8d8:	22c0      	movs	r2, #192	@ 0xc0
 800c8da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c8dc:	187b      	adds	r3, r7, r1
 800c8de:	2212      	movs	r2, #18
 800c8e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8e2:	187b      	adds	r3, r7, r1
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c8e8:	187b      	adds	r3, r7, r1
 800c8ea:	2203      	movs	r2, #3
 800c8ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800c8ee:	187b      	adds	r3, r7, r1
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c8f4:	187b      	adds	r3, r7, r1
 800c8f6:	4a4f      	ldr	r2, [pc, #316]	@ (800ca34 <HAL_I2C_MspInit+0x19c>)
 800c8f8:	0019      	movs	r1, r3
 800c8fa:	0010      	movs	r0, r2
 800c8fc:	f009 f928 	bl	8015b50 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c900:	4b4b      	ldr	r3, [pc, #300]	@ (800ca30 <HAL_I2C_MspInit+0x198>)
 800c902:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c904:	4b4a      	ldr	r3, [pc, #296]	@ (800ca30 <HAL_I2C_MspInit+0x198>)
 800c906:	2180      	movs	r1, #128	@ 0x80
 800c908:	0389      	lsls	r1, r1, #14
 800c90a:	430a      	orrs	r2, r1
 800c90c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800c90e:	4b4a      	ldr	r3, [pc, #296]	@ (800ca38 <HAL_I2C_MspInit+0x1a0>)
 800c910:	4a4a      	ldr	r2, [pc, #296]	@ (800ca3c <HAL_I2C_MspInit+0x1a4>)
 800c912:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800c914:	4b48      	ldr	r3, [pc, #288]	@ (800ca38 <HAL_I2C_MspInit+0x1a0>)
 800c916:	2206      	movs	r2, #6
 800c918:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c91a:	4b47      	ldr	r3, [pc, #284]	@ (800ca38 <HAL_I2C_MspInit+0x1a0>)
 800c91c:	2200      	movs	r2, #0
 800c91e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c920:	4b45      	ldr	r3, [pc, #276]	@ (800ca38 <HAL_I2C_MspInit+0x1a0>)
 800c922:	2200      	movs	r2, #0
 800c924:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c926:	4b44      	ldr	r3, [pc, #272]	@ (800ca38 <HAL_I2C_MspInit+0x1a0>)
 800c928:	2280      	movs	r2, #128	@ 0x80
 800c92a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c92c:	4b42      	ldr	r3, [pc, #264]	@ (800ca38 <HAL_I2C_MspInit+0x1a0>)
 800c92e:	2200      	movs	r2, #0
 800c930:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c932:	4b41      	ldr	r3, [pc, #260]	@ (800ca38 <HAL_I2C_MspInit+0x1a0>)
 800c934:	2200      	movs	r2, #0
 800c936:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800c938:	4b3f      	ldr	r3, [pc, #252]	@ (800ca38 <HAL_I2C_MspInit+0x1a0>)
 800c93a:	2200      	movs	r2, #0
 800c93c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c93e:	4b3e      	ldr	r3, [pc, #248]	@ (800ca38 <HAL_I2C_MspInit+0x1a0>)
 800c940:	2200      	movs	r2, #0
 800c942:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800c944:	4b3c      	ldr	r3, [pc, #240]	@ (800ca38 <HAL_I2C_MspInit+0x1a0>)
 800c946:	0018      	movs	r0, r3
 800c948:	f008 fcdc 	bl	8015304 <HAL_DMA_Init>
 800c94c:	1e03      	subs	r3, r0, #0
 800c94e:	d001      	beq.n	800c954 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800c950:	f000 fda0 	bl	800d494 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	4a38      	ldr	r2, [pc, #224]	@ (800ca38 <HAL_I2C_MspInit+0x1a0>)
 800c958:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c95a:	4b37      	ldr	r3, [pc, #220]	@ (800ca38 <HAL_I2C_MspInit+0x1a0>)
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800c960:	4b37      	ldr	r3, [pc, #220]	@ (800ca40 <HAL_I2C_MspInit+0x1a8>)
 800c962:	4a38      	ldr	r2, [pc, #224]	@ (800ca44 <HAL_I2C_MspInit+0x1ac>)
 800c964:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800c966:	4b36      	ldr	r3, [pc, #216]	@ (800ca40 <HAL_I2C_MspInit+0x1a8>)
 800c968:	2206      	movs	r2, #6
 800c96a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c96c:	4b34      	ldr	r3, [pc, #208]	@ (800ca40 <HAL_I2C_MspInit+0x1a8>)
 800c96e:	2210      	movs	r2, #16
 800c970:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c972:	4b33      	ldr	r3, [pc, #204]	@ (800ca40 <HAL_I2C_MspInit+0x1a8>)
 800c974:	2200      	movs	r2, #0
 800c976:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c978:	4b31      	ldr	r3, [pc, #196]	@ (800ca40 <HAL_I2C_MspInit+0x1a8>)
 800c97a:	2280      	movs	r2, #128	@ 0x80
 800c97c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c97e:	4b30      	ldr	r3, [pc, #192]	@ (800ca40 <HAL_I2C_MspInit+0x1a8>)
 800c980:	2200      	movs	r2, #0
 800c982:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c984:	4b2e      	ldr	r3, [pc, #184]	@ (800ca40 <HAL_I2C_MspInit+0x1a8>)
 800c986:	2200      	movs	r2, #0
 800c988:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800c98a:	4b2d      	ldr	r3, [pc, #180]	@ (800ca40 <HAL_I2C_MspInit+0x1a8>)
 800c98c:	2200      	movs	r2, #0
 800c98e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c990:	4b2b      	ldr	r3, [pc, #172]	@ (800ca40 <HAL_I2C_MspInit+0x1a8>)
 800c992:	2200      	movs	r2, #0
 800c994:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800c996:	4b2a      	ldr	r3, [pc, #168]	@ (800ca40 <HAL_I2C_MspInit+0x1a8>)
 800c998:	0018      	movs	r0, r3
 800c99a:	f008 fcb3 	bl	8015304 <HAL_DMA_Init>
 800c99e:	1e03      	subs	r3, r0, #0
 800c9a0:	d001      	beq.n	800c9a6 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800c9a2:	f000 fd77 	bl	800d494 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	4a25      	ldr	r2, [pc, #148]	@ (800ca40 <HAL_I2C_MspInit+0x1a8>)
 800c9aa:	639a      	str	r2, [r3, #56]	@ 0x38
 800c9ac:	4b24      	ldr	r3, [pc, #144]	@ (800ca40 <HAL_I2C_MspInit+0x1a8>)
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	2017      	movs	r0, #23
 800c9b8:	f008 fc72 	bl	80152a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800c9bc:	2017      	movs	r0, #23
 800c9be:	f008 fc84 	bl	80152ca <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800c9c2:	e02e      	b.n	800ca22 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a1f      	ldr	r2, [pc, #124]	@ (800ca48 <HAL_I2C_MspInit+0x1b0>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d129      	bne.n	800ca22 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c9ce:	4b18      	ldr	r3, [pc, #96]	@ (800ca30 <HAL_I2C_MspInit+0x198>)
 800c9d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9d2:	4b17      	ldr	r3, [pc, #92]	@ (800ca30 <HAL_I2C_MspInit+0x198>)
 800c9d4:	2102      	movs	r1, #2
 800c9d6:	430a      	orrs	r2, r1
 800c9d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c9da:	4b15      	ldr	r3, [pc, #84]	@ (800ca30 <HAL_I2C_MspInit+0x198>)
 800c9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9de:	2202      	movs	r2, #2
 800c9e0:	4013      	ands	r3, r2
 800c9e2:	60fb      	str	r3, [r7, #12]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c9e6:	2114      	movs	r1, #20
 800c9e8:	187b      	adds	r3, r7, r1
 800c9ea:	22c0      	movs	r2, #192	@ 0xc0
 800c9ec:	0112      	lsls	r2, r2, #4
 800c9ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c9f0:	187b      	adds	r3, r7, r1
 800c9f2:	2212      	movs	r2, #18
 800c9f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9f6:	187b      	adds	r3, r7, r1
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9fc:	187b      	adds	r3, r7, r1
 800c9fe:	2203      	movs	r2, #3
 800ca00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800ca02:	187b      	adds	r3, r7, r1
 800ca04:	2206      	movs	r2, #6
 800ca06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca08:	187b      	adds	r3, r7, r1
 800ca0a:	4a0a      	ldr	r2, [pc, #40]	@ (800ca34 <HAL_I2C_MspInit+0x19c>)
 800ca0c:	0019      	movs	r1, r3
 800ca0e:	0010      	movs	r0, r2
 800ca10:	f009 f89e 	bl	8015b50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800ca14:	4b06      	ldr	r3, [pc, #24]	@ (800ca30 <HAL_I2C_MspInit+0x198>)
 800ca16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca18:	4b05      	ldr	r3, [pc, #20]	@ (800ca30 <HAL_I2C_MspInit+0x198>)
 800ca1a:	2180      	movs	r1, #128	@ 0x80
 800ca1c:	03c9      	lsls	r1, r1, #15
 800ca1e:	430a      	orrs	r2, r1
 800ca20:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800ca22:	46c0      	nop			@ (mov r8, r8)
 800ca24:	46bd      	mov	sp, r7
 800ca26:	b00b      	add	sp, #44	@ 0x2c
 800ca28:	bd90      	pop	{r4, r7, pc}
 800ca2a:	46c0      	nop			@ (mov r8, r8)
 800ca2c:	40005400 	.word	0x40005400
 800ca30:	40021000 	.word	0x40021000
 800ca34:	50000400 	.word	0x50000400
 800ca38:	20000fe0 	.word	0x20000fe0
 800ca3c:	40020030 	.word	0x40020030
 800ca40:	20001028 	.word	0x20001028
 800ca44:	4002001c 	.word	0x4002001c
 800ca48:	40005800 	.word	0x40005800

0800ca4c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800ca50:	4b10      	ldr	r3, [pc, #64]	@ (800ca94 <MX_I2S2_Init+0x48>)
 800ca52:	4a11      	ldr	r2, [pc, #68]	@ (800ca98 <MX_I2S2_Init+0x4c>)
 800ca54:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800ca56:	4b0f      	ldr	r3, [pc, #60]	@ (800ca94 <MX_I2S2_Init+0x48>)
 800ca58:	22c0      	movs	r2, #192	@ 0xc0
 800ca5a:	0092      	lsls	r2, r2, #2
 800ca5c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800ca5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ca94 <MX_I2S2_Init+0x48>)
 800ca60:	2200      	movs	r2, #0
 800ca62:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800ca64:	4b0b      	ldr	r3, [pc, #44]	@ (800ca94 <MX_I2S2_Init+0x48>)
 800ca66:	2203      	movs	r2, #3
 800ca68:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800ca6a:	4b0a      	ldr	r3, [pc, #40]	@ (800ca94 <MX_I2S2_Init+0x48>)
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800ca70:	4b08      	ldr	r3, [pc, #32]	@ (800ca94 <MX_I2S2_Init+0x48>)
 800ca72:	22fa      	movs	r2, #250	@ 0xfa
 800ca74:	0192      	lsls	r2, r2, #6
 800ca76:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800ca78:	4b06      	ldr	r3, [pc, #24]	@ (800ca94 <MX_I2S2_Init+0x48>)
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800ca7e:	4b05      	ldr	r3, [pc, #20]	@ (800ca94 <MX_I2S2_Init+0x48>)
 800ca80:	0018      	movs	r0, r3
 800ca82:	f00c fa47 	bl	8018f14 <HAL_I2S_Init>
 800ca86:	1e03      	subs	r3, r0, #0
 800ca88:	d001      	beq.n	800ca8e <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800ca8a:	f000 fd03 	bl	800d494 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800ca8e:	46c0      	nop			@ (mov r8, r8)
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	20001070 	.word	0x20001070
 800ca98:	40003800 	.word	0x40003800

0800ca9c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800ca9c:	b590      	push	{r4, r7, lr}
 800ca9e:	b089      	sub	sp, #36	@ 0x24
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800caa4:	240c      	movs	r4, #12
 800caa6:	193b      	adds	r3, r7, r4
 800caa8:	0018      	movs	r0, r3
 800caaa:	2314      	movs	r3, #20
 800caac:	001a      	movs	r2, r3
 800caae:	2100      	movs	r1, #0
 800cab0:	f019 fe66 	bl	8026780 <memset>
  if(i2sHandle->Instance==SPI2)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a2d      	ldr	r2, [pc, #180]	@ (800cb70 <HAL_I2S_MspInit+0xd4>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d154      	bne.n	800cb68 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800cabe:	4b2d      	ldr	r3, [pc, #180]	@ (800cb74 <HAL_I2S_MspInit+0xd8>)
 800cac0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cac2:	4b2c      	ldr	r3, [pc, #176]	@ (800cb74 <HAL_I2S_MspInit+0xd8>)
 800cac4:	2180      	movs	r1, #128	@ 0x80
 800cac6:	01c9      	lsls	r1, r1, #7
 800cac8:	430a      	orrs	r2, r1
 800caca:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cacc:	4b29      	ldr	r3, [pc, #164]	@ (800cb74 <HAL_I2S_MspInit+0xd8>)
 800cace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cad0:	4b28      	ldr	r3, [pc, #160]	@ (800cb74 <HAL_I2S_MspInit+0xd8>)
 800cad2:	2102      	movs	r1, #2
 800cad4:	430a      	orrs	r2, r1
 800cad6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cad8:	4b26      	ldr	r3, [pc, #152]	@ (800cb74 <HAL_I2S_MspInit+0xd8>)
 800cada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cadc:	2202      	movs	r2, #2
 800cade:	4013      	ands	r3, r2
 800cae0:	60bb      	str	r3, [r7, #8]
 800cae2:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800cae4:	193b      	adds	r3, r7, r4
 800cae6:	22b0      	movs	r2, #176	@ 0xb0
 800cae8:	0212      	lsls	r2, r2, #8
 800caea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800caec:	0021      	movs	r1, r4
 800caee:	187b      	adds	r3, r7, r1
 800caf0:	2202      	movs	r2, #2
 800caf2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800caf4:	187b      	adds	r3, r7, r1
 800caf6:	2200      	movs	r2, #0
 800caf8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cafa:	187b      	adds	r3, r7, r1
 800cafc:	2200      	movs	r2, #0
 800cafe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800cb00:	187b      	adds	r3, r7, r1
 800cb02:	2200      	movs	r2, #0
 800cb04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cb06:	187b      	adds	r3, r7, r1
 800cb08:	4a1b      	ldr	r2, [pc, #108]	@ (800cb78 <HAL_I2S_MspInit+0xdc>)
 800cb0a:	0019      	movs	r1, r3
 800cb0c:	0010      	movs	r0, r2
 800cb0e:	f009 f81f 	bl	8015b50 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800cb12:	4b1a      	ldr	r3, [pc, #104]	@ (800cb7c <HAL_I2S_MspInit+0xe0>)
 800cb14:	4a1a      	ldr	r2, [pc, #104]	@ (800cb80 <HAL_I2S_MspInit+0xe4>)
 800cb16:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800cb18:	4b18      	ldr	r3, [pc, #96]	@ (800cb7c <HAL_I2S_MspInit+0xe0>)
 800cb1a:	2202      	movs	r2, #2
 800cb1c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cb1e:	4b17      	ldr	r3, [pc, #92]	@ (800cb7c <HAL_I2S_MspInit+0xe0>)
 800cb20:	2200      	movs	r2, #0
 800cb22:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cb24:	4b15      	ldr	r3, [pc, #84]	@ (800cb7c <HAL_I2S_MspInit+0xe0>)
 800cb26:	2200      	movs	r2, #0
 800cb28:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800cb2a:	4b14      	ldr	r3, [pc, #80]	@ (800cb7c <HAL_I2S_MspInit+0xe0>)
 800cb2c:	2280      	movs	r2, #128	@ 0x80
 800cb2e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800cb30:	4b12      	ldr	r3, [pc, #72]	@ (800cb7c <HAL_I2S_MspInit+0xe0>)
 800cb32:	2280      	movs	r2, #128	@ 0x80
 800cb34:	0052      	lsls	r2, r2, #1
 800cb36:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800cb38:	4b10      	ldr	r3, [pc, #64]	@ (800cb7c <HAL_I2S_MspInit+0xe0>)
 800cb3a:	2280      	movs	r2, #128	@ 0x80
 800cb3c:	00d2      	lsls	r2, r2, #3
 800cb3e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800cb40:	4b0e      	ldr	r3, [pc, #56]	@ (800cb7c <HAL_I2S_MspInit+0xe0>)
 800cb42:	2220      	movs	r2, #32
 800cb44:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800cb46:	4b0d      	ldr	r3, [pc, #52]	@ (800cb7c <HAL_I2S_MspInit+0xe0>)
 800cb48:	2200      	movs	r2, #0
 800cb4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800cb4c:	4b0b      	ldr	r3, [pc, #44]	@ (800cb7c <HAL_I2S_MspInit+0xe0>)
 800cb4e:	0018      	movs	r0, r3
 800cb50:	f008 fbd8 	bl	8015304 <HAL_DMA_Init>
 800cb54:	1e03      	subs	r3, r0, #0
 800cb56:	d001      	beq.n	800cb5c <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800cb58:	f000 fc9c 	bl	800d494 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4a07      	ldr	r2, [pc, #28]	@ (800cb7c <HAL_I2S_MspInit+0xe0>)
 800cb60:	631a      	str	r2, [r3, #48]	@ 0x30
 800cb62:	4b06      	ldr	r3, [pc, #24]	@ (800cb7c <HAL_I2S_MspInit+0xe0>)
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800cb68:	46c0      	nop			@ (mov r8, r8)
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	b009      	add	sp, #36	@ 0x24
 800cb6e:	bd90      	pop	{r4, r7, pc}
 800cb70:	40003800 	.word	0x40003800
 800cb74:	40021000 	.word	0x40021000
 800cb78:	50000400 	.word	0x50000400
 800cb7c:	200010ac 	.word	0x200010ac
 800cb80:	40020044 	.word	0x40020044

0800cb84 <SetBatteryReadTimer>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetBatteryReadTimer(uint32_t ticks) {
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  batteryReadTimer  = HAL_GetTick() + ticks;
 800cb8c:	f007 ff14 	bl	80149b8 <HAL_GetTick>
 800cb90:	0002      	movs	r2, r0
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	18d2      	adds	r2, r2, r3
 800cb96:	4b03      	ldr	r3, [pc, #12]	@ (800cba4 <SetBatteryReadTimer+0x20>)
 800cb98:	601a      	str	r2, [r3, #0]
}
 800cb9a:	46c0      	nop			@ (mov r8, r8)
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	b002      	add	sp, #8
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	46c0      	nop			@ (mov r8, r8)
 800cba4:	200000a4 	.word	0x200000a4

0800cba8 <SetTestDone>:

void SetTestDone(){
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	af00      	add	r7, sp, #0
  testDone = true;
 800cbac:	4b12      	ldr	r3, [pc, #72]	@ (800cbf8 <SetTestDone+0x50>)
 800cbae:	2201      	movs	r2, #1
 800cbb0:	701a      	strb	r2, [r3, #0]
  HAL_Delay(250);
 800cbb2:	20fa      	movs	r0, #250	@ 0xfa
 800cbb4:	f007 ff0a 	bl	80149cc <HAL_Delay>
  SetDBLED(false, false, true);
 800cbb8:	2201      	movs	r2, #1
 800cbba:	2100      	movs	r1, #0
 800cbbc:	2000      	movs	r0, #0
 800cbbe:	f005 fe87 	bl	80128d0 <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800cbc2:	4a0e      	ldr	r2, [pc, #56]	@ (800cbfc <SetTestDone+0x54>)
 800cbc4:	23fa      	movs	r3, #250	@ 0xfa
 800cbc6:	0119      	lsls	r1, r3, #4
 800cbc8:	23fa      	movs	r3, #250	@ 0xfa
 800cbca:	011b      	lsls	r3, r3, #4
 800cbcc:	0018      	movs	r0, r3
 800cbce:	f005 fe51 	bl	8012874 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800cbd2:	4a0a      	ldr	r2, [pc, #40]	@ (800cbfc <SetTestDone+0x54>)
 800cbd4:	23fa      	movs	r3, #250	@ 0xfa
 800cbd6:	0119      	lsls	r1, r3, #4
 800cbd8:	23fa      	movs	r3, #250	@ 0xfa
 800cbda:	011b      	lsls	r3, r3, #4
 800cbdc:	0018      	movs	r0, r3
 800cbde:	f005 febb 	bl	8012958 <SetVocLED>
  HAL_Delay(250);
 800cbe2:	20fa      	movs	r0, #250	@ 0xfa
 800cbe4:	f007 fef2 	bl	80149cc <HAL_Delay>
  SetLEDsOff();
 800cbe8:	f005 ffb2 	bl	8012b50 <SetLEDsOff>
  InitDone();
 800cbec:	f005 fd7e 	bl	80126ec <InitDone>
}
 800cbf0:	46c0      	nop			@ (mov r8, r8)
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	46c0      	nop			@ (mov r8, r8)
 800cbf8:	200010f4 	.word	0x200010f4
 800cbfc:	00000bb8 	.word	0x00000bb8

0800cc00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cc00:	b5b0      	push	{r4, r5, r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cc06:	f007 fe71 	bl	80148ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cc0a:	f000 fad7 	bl	800d1bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cc0e:	f7ff fc45 	bl	800c49c <MX_GPIO_Init>
  MX_DMA_Init();
 800cc12:	f7ff fa63 	bl	800c0dc <MX_DMA_Init>
  MX_I2C1_Init();
 800cc16:	f7ff fdbf 	bl	800c798 <MX_I2C1_Init>
  MX_I2S2_Init();
 800cc1a:	f7ff ff17 	bl	800ca4c <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800cc1e:	f006 ff39 	bl	8013a94 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800cc22:	f7ff fdf9 	bl	800c818 <MX_I2C2_Init>
  MX_TIM2_Init();
 800cc26:	f006 fd2d 	bl	8013684 <MX_TIM2_Init>
  MX_TIM3_Init();
 800cc2a:	f006 fd9f 	bl	801376c <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800cc2e:	f006 ff61 	bl	8013af4 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800cc32:	f7fe f86d 	bl	800ad10 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800cc36:	f016 fa97 	bl	8023168 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800cc3a:	f001 fc83 	bl	800e544 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800cc3e:	f006 fef3 	bl	8013a28 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800cc42:	f006 fe11 	bl	8013868 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  if (Check_USB_PowerOn())
 800cc46:	f7fd f853 	bl	8009cf0 <Check_USB_PowerOn>
 800cc4a:	1e03      	subs	r3, r0, #0
 800cc4c:	d006      	beq.n	800cc5c <main+0x5c>
    while (HAL_GetTick() < 650);  // Wait for the USB to become ready
 800cc4e:	46c0      	nop			@ (mov r8, r8)
 800cc50:	f007 feb2 	bl	80149b8 <HAL_GetTick>
 800cc54:	0003      	movs	r3, r0
 800cc56:	4ac1      	ldr	r2, [pc, #772]	@ (800cf5c <main+0x35c>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d9f9      	bls.n	800cc50 <main+0x50>
	/*
	 * : Turn on heater if humidity is too high
	 * : LEDs indicator for air quality
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800cc5c:	4ac0      	ldr	r2, [pc, #768]	@ (800cf60 <main+0x360>)
 800cc5e:	4bc1      	ldr	r3, [pc, #772]	@ (800cf64 <main+0x364>)
 800cc60:	0011      	movs	r1, r2
 800cc62:	0018      	movs	r0, r3
 800cc64:	f7ff fd4a 	bl	800c6fc <GPIO_InitPWMLEDs>
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800cc68:	4abf      	ldr	r2, [pc, #764]	@ (800cf68 <main+0x368>)
 800cc6a:	4bc0      	ldr	r3, [pc, #768]	@ (800cf6c <main+0x36c>)
 800cc6c:	0019      	movs	r1, r3
 800cc6e:	2002      	movs	r0, #2
 800cc70:	f007 f922 	bl	8013eb8 <CreateLine>
  BinaryReleaseInfo();
 800cc74:	f007 f9b4 	bl	8013fe0 <BinaryReleaseInfo>
  usblog = *(bool*)(USBlogstatusConfigAddr);
 800cc78:	4bbd      	ldr	r3, [pc, #756]	@ (800cf70 <main+0x370>)
 800cc7a:	781a      	ldrb	r2, [r3, #0]
 800cc7c:	4bbd      	ldr	r3, [pc, #756]	@ (800cf74 <main+0x374>)
 800cc7e:	701a      	strb	r2, [r3, #0]
  if(UserButton_Pressed()){
 800cc80:	f7fd f8c2 	bl	8009e08 <UserButton_Pressed>
 800cc84:	1e03      	subs	r3, r0, #0
 800cc86:	d005      	beq.n	800cc94 <main+0x94>
    EnableESPProg();
 800cc88:	f016 fb4a 	bl	8023320 <EnableESPProg>
    ESP_Programming = true;
 800cc8c:	4bba      	ldr	r3, [pc, #744]	@ (800cf78 <main+0x378>)
 800cc8e:	2201      	movs	r2, #1
 800cc90:	701a      	strb	r2, [r3, #0]
 800cc92:	e037      	b.n	800cd04 <main+0x104>
  }
  else {
    batteryChargeCheck();
 800cc94:	f005 fd34 	bl	8012700 <batteryChargeCheck>
//    batteryCharge = ReadBatteryVoltage();
    Error("Battery voltage is: %.02fV", batteryCharge);
 800cc98:	4bb8      	ldr	r3, [pc, #736]	@ (800cf7c <main+0x37c>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	1c18      	adds	r0, r3, #0
 800cc9e:	f7f6 fdf9 	bl	8003894 <__aeabi_f2d>
 800cca2:	0002      	movs	r2, r0
 800cca4:	000b      	movs	r3, r1
 800cca6:	48b6      	ldr	r0, [pc, #728]	@ (800cf80 <main+0x380>)
 800cca8:	49b6      	ldr	r1, [pc, #728]	@ (800cf84 <main+0x384>)
 800ccaa:	9200      	str	r2, [sp, #0]
 800ccac:	9301      	str	r3, [sp, #4]
 800ccae:	0002      	movs	r2, r0
 800ccb0:	2001      	movs	r0, #1
 800ccb2:	f007 f901 	bl	8013eb8 <CreateLine>
#ifdef LARGEBATTERY
    if(batteryCharge <= 3.58) {
#else
    if(batteryCharge <= 3.68) {
 800ccb6:	4bb1      	ldr	r3, [pc, #708]	@ (800cf7c <main+0x37c>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	1c18      	adds	r0, r3, #0
 800ccbc:	f7f6 fdea 	bl	8003894 <__aeabi_f2d>
 800ccc0:	4ab1      	ldr	r2, [pc, #708]	@ (800cf88 <main+0x388>)
 800ccc2:	4bb2      	ldr	r3, [pc, #712]	@ (800cf8c <main+0x38c>)
 800ccc4:	f7f3 fc04 	bl	80004d0 <__aeabi_dcmple>
 800ccc8:	1e03      	subs	r3, r0, #0
 800ccca:	d01b      	beq.n	800cd04 <main+0x104>
#endif
      SetAllREDLED();
 800cccc:	f005 ff5c 	bl	8012b88 <SetAllREDLED>
      Error("Battery voltage is critical: %.02fV, going in deep sleep. Waking for LED indication %s seconds", batteryCharge, DEEP_SLEEP);
 800ccd0:	4baa      	ldr	r3, [pc, #680]	@ (800cf7c <main+0x37c>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	1c18      	adds	r0, r3, #0
 800ccd6:	f7f6 fddd 	bl	8003894 <__aeabi_f2d>
 800ccda:	0002      	movs	r2, r0
 800ccdc:	000b      	movs	r3, r1
 800ccde:	4cac      	ldr	r4, [pc, #688]	@ (800cf90 <main+0x390>)
 800cce0:	48a8      	ldr	r0, [pc, #672]	@ (800cf84 <main+0x384>)
 800cce2:	21e1      	movs	r1, #225	@ 0xe1
 800cce4:	0109      	lsls	r1, r1, #4
 800cce6:	9102      	str	r1, [sp, #8]
 800cce8:	9200      	str	r2, [sp, #0]
 800ccea:	9301      	str	r3, [sp, #4]
 800ccec:	0022      	movs	r2, r4
 800ccee:	0001      	movs	r1, r0
 800ccf0:	2001      	movs	r0, #1
 800ccf2:	f007 f8e1 	bl	8013eb8 <CreateLine>
      WalkAllRedLED();
 800ccf6:	f005 ff95 	bl	8012c24 <WalkAllRedLED>
#ifndef STLINK_V3PWR
      Enter_Stop_Mode_for_empty_battery(DEEP_SLEEP);
 800ccfa:	23e1      	movs	r3, #225	@ 0xe1
 800ccfc:	011b      	lsls	r3, r3, #4
 800ccfe:	0018      	movs	r0, r3
 800cd00:	f7fd fd0a 	bl	800a718 <Enter_Stop_Mode_for_empty_battery>
#endif
      }

  }
  SetVerboseLevel(VERBOSE_ALL);
 800cd04:	2003      	movs	r0, #3
 800cd06:	f007 f951 	bl	8013fac <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800cd0a:	49a2      	ldr	r1, [pc, #648]	@ (800cf94 <main+0x394>)
 800cd0c:	4ba2      	ldr	r3, [pc, #648]	@ (800cf98 <main+0x398>)
 800cd0e:	2201      	movs	r2, #1
 800cd10:	0018      	movs	r0, r3
 800cd12:	f010 fc97 	bl	801d644 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800cd16:	4ba1      	ldr	r3, [pc, #644]	@ (800cf9c <main+0x39c>)
 800cd18:	0018      	movs	r0, r3
 800cd1a:	f7fd fdff 	bl	800a91c <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800cd1e:	4aa0      	ldr	r2, [pc, #640]	@ (800cfa0 <main+0x3a0>)
 800cd20:	49a0      	ldr	r1, [pc, #640]	@ (800cfa4 <main+0x3a4>)
 800cd22:	48a1      	ldr	r0, [pc, #644]	@ (800cfa8 <main+0x3a8>)
 800cd24:	230b      	movs	r3, #11
 800cd26:	f004 fe5b 	bl	80119e0 <soundInit>
 800cd2a:	0003      	movs	r3, r0
 800cd2c:	001a      	movs	r2, r3
 800cd2e:	2301      	movs	r3, #1
 800cd30:	4053      	eors	r3, r2
 800cd32:	b2db      	uxtb	r3, r3
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d007      	beq.n	800cd48 <main+0x148>
    errorHandler(__func__, __LINE__, __FILE__);
 800cd38:	4a9c      	ldr	r2, [pc, #624]	@ (800cfac <main+0x3ac>)
 800cd3a:	2304      	movs	r3, #4
 800cd3c:	33ff      	adds	r3, #255	@ 0xff
 800cd3e:	0019      	movs	r1, r3
 800cd40:	4b9b      	ldr	r3, [pc, #620]	@ (800cfb0 <main+0x3b0>)
 800cd42:	0018      	movs	r0, r3
 800cd44:	f007 f9a8 	bl	8014098 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800cd48:	4b9a      	ldr	r3, [pc, #616]	@ (800cfb4 <main+0x3b4>)
 800cd4a:	4a9b      	ldr	r2, [pc, #620]	@ (800cfb8 <main+0x3b8>)
 800cd4c:	4995      	ldr	r1, [pc, #596]	@ (800cfa4 <main+0x3a4>)
 800cd4e:	489b      	ldr	r0, [pc, #620]	@ (800cfbc <main+0x3bc>)
 800cd50:	f000 fc92 	bl	800d678 <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800cd54:	f007 fe30 	bl	80149b8 <HAL_GetTick>
 800cd58:	0003      	movs	r3, r0
 800cd5a:	4a99      	ldr	r2, [pc, #612]	@ (800cfc0 <main+0x3c0>)
 800cd5c:	189a      	adds	r2, r3, r2
 800cd5e:	4b99      	ldr	r3, [pc, #612]	@ (800cfc4 <main+0x3c4>)
 800cd60:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800cd62:	f7fc ffc5 	bl	8009cf0 <Check_USB_PowerOn>
 800cd66:	0003      	movs	r3, r0
 800cd68:	1e5a      	subs	r2, r3, #1
 800cd6a:	4193      	sbcs	r3, r2
 800cd6c:	b2db      	uxtb	r3, r3
 800cd6e:	2201      	movs	r2, #1
 800cd70:	4053      	eors	r3, r2
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	1c1a      	adds	r2, r3, #0
 800cd76:	2301      	movs	r3, #1
 800cd78:	4013      	ands	r3, r2
 800cd7a:	b2da      	uxtb	r2, r3
 800cd7c:	4b92      	ldr	r3, [pc, #584]	@ (800cfc8 <main+0x3c8>)
 800cd7e:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800cd80:	f7fc ffb6 	bl	8009cf0 <Check_USB_PowerOn>
 800cd84:	1e03      	subs	r3, r0, #0
 800cd86:	d003      	beq.n	800cd90 <main+0x190>
    printf_USB("Input command followed by Enter or type Helpme\r\n");
 800cd88:	4b90      	ldr	r3, [pc, #576]	@ (800cfcc <main+0x3cc>)
 800cd8a:	0018      	movs	r0, r3
 800cd8c:	f7fb feb4 	bl	8008af8 <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800cd90:	4b8f      	ldr	r3, [pc, #572]	@ (800cfd0 <main+0x3d0>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	0018      	movs	r0, r3
 800cd96:	f007 f839 	bl	8013e0c <TimestampIsReached>
 800cd9a:	1e03      	subs	r3, r0, #0
 800cd9c:	d00a      	beq.n	800cdb4 <main+0x1b4>
      Battery_Upkeep();
 800cd9e:	f006 faff 	bl	80133a0 <Battery_Upkeep>
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800cda2:	f007 fe09 	bl	80149b8 <HAL_GetTick>
 800cda6:	0003      	movs	r3, r0
 800cda8:	4a8a      	ldr	r2, [pc, #552]	@ (800cfd4 <main+0x3d4>)
 800cdaa:	189a      	adds	r2, r3, r2
 800cdac:	4b88      	ldr	r3, [pc, #544]	@ (800cfd0 <main+0x3d0>)
 800cdae:	601a      	str	r2, [r3, #0]
      showTime();
 800cdb0:	f7fd f8a6 	bl	8009f00 <showTime>
    }
    configCheck();
 800cdb4:	f006 f954 	bl	8013060 <configCheck>
    if ((batteryStatus == BATTERY_LOW || batteryStatus == BATTERY_CRITICAL)  && !EspTurnedOn){
 800cdb8:	4b87      	ldr	r3, [pc, #540]	@ (800cfd8 <main+0x3d8>)
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d003      	beq.n	800cdc8 <main+0x1c8>
 800cdc0:	4b85      	ldr	r3, [pc, #532]	@ (800cfd8 <main+0x3d8>)
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d137      	bne.n	800ce38 <main+0x238>
 800cdc8:	4b84      	ldr	r3, [pc, #528]	@ (800cfdc <main+0x3dc>)
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	2201      	movs	r2, #1
 800cdce:	4053      	eors	r3, r2
 800cdd0:	b2db      	uxtb	r3, r3
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d030      	beq.n	800ce38 <main+0x238>
      WalkAllRedLED();
 800cdd6:	f005 ff25 	bl	8012c24 <WalkAllRedLED>
      Sensor.PM_measurementEnabled = false;
 800cdda:	4b81      	ldr	r3, [pc, #516]	@ (800cfe0 <main+0x3e0>)
 800cddc:	2200      	movs	r2, #0
 800cdde:	709a      	strb	r2, [r3, #2]
#ifdef USE_MAIL
      pwrmailTodaySend();
 800cde0:	f7f7 fe42 	bl	8004a68 <pwrmailTodaySend>
      if (((batteryStatus == BATTERY_LOW)  || (batteryStatus == BATTERY_CRITICAL)) && (sendpwremail == CLEAR) && !Check_USB_PowerOn()) {
 800cde4:	4b7c      	ldr	r3, [pc, #496]	@ (800cfd8 <main+0x3d8>)
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d003      	beq.n	800cdf4 <main+0x1f4>
 800cdec:	4b7a      	ldr	r3, [pc, #488]	@ (800cfd8 <main+0x3d8>)
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d121      	bne.n	800ce38 <main+0x238>
 800cdf4:	4b7b      	ldr	r3, [pc, #492]	@ (800cfe4 <main+0x3e4>)
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d11d      	bne.n	800ce38 <main+0x238>
 800cdfc:	f7fc ff78 	bl	8009cf0 <Check_USB_PowerOn>
 800ce00:	0003      	movs	r3, r0
 800ce02:	001a      	movs	r2, r3
 800ce04:	2301      	movs	r3, #1
 800ce06:	4053      	eors	r3, r2
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d014      	beq.n	800ce38 <main+0x238>
        Debug("charge: %d, sendpwrmail: %d Check_USB_PowerOn(): %d", batteryStatus, sendpwremail, Check_USB_PowerOn());
 800ce0e:	4b72      	ldr	r3, [pc, #456]	@ (800cfd8 <main+0x3d8>)
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	001d      	movs	r5, r3
 800ce14:	4b73      	ldr	r3, [pc, #460]	@ (800cfe4 <main+0x3e4>)
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	001c      	movs	r4, r3
 800ce1a:	f7fc ff69 	bl	8009cf0 <Check_USB_PowerOn>
 800ce1e:	0003      	movs	r3, r0
 800ce20:	4a71      	ldr	r2, [pc, #452]	@ (800cfe8 <main+0x3e8>)
 800ce22:	4972      	ldr	r1, [pc, #456]	@ (800cfec <main+0x3ec>)
 800ce24:	9301      	str	r3, [sp, #4]
 800ce26:	9400      	str	r4, [sp, #0]
 800ce28:	002b      	movs	r3, r5
 800ce2a:	2003      	movs	r0, #3
 800ce2c:	f007 f844 	bl	8013eb8 <CreateLine>
        setModePowerMail();
 800ce30:	f7f7 fdda 	bl	80049e8 <setModePowerMail>
        ESP_Upkeep();
 800ce34:	f7fa fc3e 	bl	80076b4 <ESP_Upkeep>
    // ==== end of test mail
*/
#endif
#ifndef STLINK_V3PWR
//==== disable for power measurements in test condition
    stlinkpwr = false;
 800ce38:	4b6d      	ldr	r3, [pc, #436]	@ (800cff0 <main+0x3f0>)
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	701a      	strb	r2, [r3, #0]
    if (batteryStatus == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800ce3e:	4b66      	ldr	r3, [pc, #408]	@ (800cfd8 <main+0x3d8>)
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d10c      	bne.n	800ce60 <main+0x260>
 800ce46:	4b6b      	ldr	r3, [pc, #428]	@ (800cff4 <main+0x3f4>)
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	2b09      	cmp	r3, #9
 800ce4c:	d108      	bne.n	800ce60 <main+0x260>
       batteryEmpty = true;
 800ce4e:	4b6a      	ldr	r3, [pc, #424]	@ (800cff8 <main+0x3f8>)
 800ce50:	2201      	movs	r2, #1
 800ce52:	701a      	strb	r2, [r3, #0]
       // we are going in deep sleep, nearly off and no wakeup from RTC Do not use standby mode,
       // because without a modification on the PCB the ESP32 is activated
       // instead use the stop mode with or without RTC
       //Enter_Standby_Mode();
       Enter_Stop_Mode_for_empty_battery(DEEP_SLEEP); // light up the leds every hour
 800ce54:	23e1      	movs	r3, #225	@ 0xe1
 800ce56:	011b      	lsls	r3, r3, #4
 800ce58:	0018      	movs	r0, r3
 800ce5a:	f7fd fc5d 	bl	800a718 <Enter_Stop_Mode_for_empty_battery>
 800ce5e:	e002      	b.n	800ce66 <main+0x266>
    }
    else{
      batteryEmpty = false;
 800ce60:	4b65      	ldr	r3, [pc, #404]	@ (800cff8 <main+0x3f8>)
 800ce62:	2200      	movs	r2, #0
 800ce64:	701a      	strb	r2, [r3, #0]
    }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800ce66:	4b65      	ldr	r3, [pc, #404]	@ (800cffc <main+0x3fc>)
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d100      	bne.n	800ce70 <main+0x270>
 800ce6e:	e10b      	b.n	800d088 <main+0x488>
 800ce70:	4b41      	ldr	r3, [pc, #260]	@ (800cf78 <main+0x378>)
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	2201      	movs	r2, #1
 800ce76:	4053      	eors	r3, r2
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d100      	bne.n	800ce80 <main+0x280>
 800ce7e:	e103      	b.n	800d088 <main+0x488>
 800ce80:	4b5d      	ldr	r3, [pc, #372]	@ (800cff8 <main+0x3f8>)
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	2201      	movs	r2, #1
 800ce86:	4053      	eors	r3, r2
 800ce88:	b2db      	uxtb	r3, r3
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d100      	bne.n	800ce90 <main+0x290>
 800ce8e:	e0fb      	b.n	800d088 <main+0x488>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800ce90:	4b4d      	ldr	r3, [pc, #308]	@ (800cfc8 <main+0x3c8>)
 800ce92:	781a      	ldrb	r2, [r3, #0]
 800ce94:	4b5a      	ldr	r3, [pc, #360]	@ (800d000 <main+0x400>)
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d034      	beq.n	800cf06 <main+0x306>
        if (IsSGPPresent() && !usbPluggedIn) {
 800ce9c:	f000 fb7e 	bl	800d59c <IsSGPPresent>
 800cea0:	1e03      	subs	r3, r0, #0
 800cea2:	d009      	beq.n	800ceb8 <main+0x2b8>
 800cea4:	4b56      	ldr	r3, [pc, #344]	@ (800d000 <main+0x400>)
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	2201      	movs	r2, #1
 800ceaa:	4053      	eors	r3, r2
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d002      	beq.n	800ceb8 <main+0x2b8>
          SetVOCSensorDIS_ENA(true);
 800ceb2:	2001      	movs	r0, #1
 800ceb4:	f000 fb7c 	bl	800d5b0 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800ceb8:	4b52      	ldr	r3, [pc, #328]	@ (800d004 <main+0x404>)
 800ceba:	791b      	ldrb	r3, [r3, #4]
 800cebc:	2b34      	cmp	r3, #52	@ 0x34
 800cebe:	d003      	beq.n	800cec8 <main+0x2c8>
 800cec0:	4b50      	ldr	r3, [pc, #320]	@ (800d004 <main+0x404>)
 800cec2:	791b      	ldrb	r3, [r3, #4]
 800cec4:	2b35      	cmp	r3, #53	@ 0x35
 800cec6:	d106      	bne.n	800ced6 <main+0x2d6>
 800cec8:	4b4d      	ldr	r3, [pc, #308]	@ (800d000 <main+0x400>)
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d002      	beq.n	800ced6 <main+0x2d6>
          SetVOCSensorDIS_ENA(false);
 800ced0:	2000      	movs	r0, #0
 800ced2:	f000 fb6d 	bl	800d5b0 <SetVOCSensorDIS_ENA>
        }
        if (!usbPluggedIn && (HAL_GetTick() > DEVICE_INIT_TIMEOUT)) {
 800ced6:	4b4a      	ldr	r3, [pc, #296]	@ (800d000 <main+0x400>)
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	2201      	movs	r2, #1
 800cedc:	4053      	eors	r3, r2
 800cede:	b2db      	uxtb	r3, r3
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d00c      	beq.n	800cefe <main+0x2fe>
 800cee4:	f007 fd68 	bl	80149b8 <HAL_GetTick>
 800cee8:	0003      	movs	r3, r0
 800ceea:	4a35      	ldr	r2, [pc, #212]	@ (800cfc0 <main+0x3c0>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d906      	bls.n	800cefe <main+0x2fe>
//          Debug("Device time out set in main due to powerstatus shift");
          deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800cef0:	f007 fd62 	bl	80149b8 <HAL_GetTick>
 800cef4:	0003      	movs	r3, r0
 800cef6:	4a44      	ldr	r2, [pc, #272]	@ (800d008 <main+0x408>)
 800cef8:	189a      	adds	r2, r3, r2
 800cefa:	4b32      	ldr	r3, [pc, #200]	@ (800cfc4 <main+0x3c4>)
 800cefc:	601a      	str	r2, [r3, #0]
        }
        priorUSBpluggedIn = usbPluggedIn;
 800cefe:	4b40      	ldr	r3, [pc, #256]	@ (800d000 <main+0x400>)
 800cf00:	781a      	ldrb	r2, [r3, #0]
 800cf02:	4b31      	ldr	r3, [pc, #196]	@ (800cfc8 <main+0x3c8>)
 800cf04:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800cf06:	f000 fffb 	bl	800df00 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800cf0a:	4b35      	ldr	r3, [pc, #212]	@ (800cfe0 <main+0x3e0>)
 800cf0c:	78db      	ldrb	r3, [r3, #3]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d005      	beq.n	800cf1e <main+0x31e>
        MICstate = Mic_Upkeep();
 800cf12:	f001 fa05 	bl	800e320 <Mic_Upkeep>
 800cf16:	0003      	movs	r3, r0
 800cf18:	001a      	movs	r2, r3
 800cf1a:	4b3c      	ldr	r3, [pc, #240]	@ (800d00c <main+0x40c>)
 800cf1c:	701a      	strb	r2, [r3, #0]
      }
      if ( ((batteryStatus >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800cf1e:	4b2e      	ldr	r3, [pc, #184]	@ (800cfd8 <main+0x3d8>)
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d803      	bhi.n	800cf2e <main+0x32e>
 800cf26:	4b32      	ldr	r3, [pc, #200]	@ (800cff0 <main+0x3f0>)
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d070      	beq.n	800d010 <main+0x410>
 800cf2e:	4b2c      	ldr	r3, [pc, #176]	@ (800cfe0 <main+0x3e0>)
 800cf30:	789b      	ldrb	r3, [r3, #2]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d06c      	beq.n	800d010 <main+0x410>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800cf36:	f001 fb93 	bl	800e660 <sen5x_Get_sen5x_enable_state>
 800cf3a:	0003      	movs	r3, r0
 800cf3c:	001a      	movs	r2, r3
 800cf3e:	2301      	movs	r3, #1
 800cf40:	4053      	eors	r3, r2
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d006      	beq.n	800cf56 <main+0x356>
 800cf48:	4b2d      	ldr	r3, [pc, #180]	@ (800d000 <main+0x400>)
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d002      	beq.n	800cf56 <main+0x356>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800cf50:	2000      	movs	r0, #0
 800cf52:	f001 fbc1 	bl	800e6d8 <sen5x_enable>
        }
        sen5x_statemachine();
 800cf56:	f002 f959 	bl	800f20c <sen5x_statemachine>
 800cf5a:	e07a      	b.n	800d052 <main+0x452>
 800cf5c:	00000289 	.word	0x00000289
 800cf60:	200021ac 	.word	0x200021ac
 800cf64:	2000216c 	.word	0x2000216c
 800cf68:	0802c940 	.word	0x0802c940
 800cf6c:	0802c96c 	.word	0x0802c96c
 800cf70:	08080194 	.word	0x08080194
 800cf74:	200010f7 	.word	0x200010f7
 800cf78:	200010f5 	.word	0x200010f5
 800cf7c:	20002158 	.word	0x20002158
 800cf80:	0802c970 	.word	0x0802c970
 800cf84:	0802c98c 	.word	0x0802c98c
 800cf88:	d70a3d71 	.word	0xd70a3d71
 800cf8c:	400d70a3 	.word	0x400d70a3
 800cf90:	0802c990 	.word	0x0802c990
 800cf94:	20001100 	.word	0x20001100
 800cf98:	200022e4 	.word	0x200022e4
 800cf9c:	20001198 	.word	0x20001198
 800cfa0:	200021ec 	.word	0x200021ec
 800cfa4:	20001070 	.word	0x20001070
 800cfa8:	200010ac 	.word	0x200010ac
 800cfac:	0802c9f0 	.word	0x0802c9f0
 800cfb0:	0802e760 	.word	0x0802e760
 800cfb4:	2000239c 	.word	0x2000239c
 800cfb8:	20000e84 	.word	0x20000e84
 800cfbc:	20000f38 	.word	0x20000f38
 800cfc0:	000061a8 	.word	0x000061a8
 800cfc4:	20001114 	.word	0x20001114
 800cfc8:	200010fa 	.word	0x200010fa
 800cfcc:	0802ca04 	.word	0x0802ca04
 800cfd0:	200000a4 	.word	0x200000a4
 800cfd4:	0000c350 	.word	0x0000c350
 800cfd8:	2000215d 	.word	0x2000215d
 800cfdc:	200005ac 	.word	0x200005ac
 800cfe0:	20001118 	.word	0x20001118
 800cfe4:	200010f9 	.word	0x200010f9
 800cfe8:	0802ca38 	.word	0x0802ca38
 800cfec:	0802ca6c 	.word	0x0802ca6c
 800cff0:	200000a2 	.word	0x200000a2
 800cff4:	200010fc 	.word	0x200010fc
 800cff8:	200010f6 	.word	0x200010f6
 800cffc:	200010f4 	.word	0x200010f4
 800d000:	2000214d 	.word	0x2000214d
 800d004:	200011c0 	.word	0x200011c0
 800d008:	00001194 	.word	0x00001194
 800d00c:	200010fb 	.word	0x200010fb
      }
      else if ((batteryStatus <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800d010:	4b52      	ldr	r3, [pc, #328]	@ (800d15c <main+0x55c>)
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	2b01      	cmp	r3, #1
 800d016:	d81c      	bhi.n	800d052 <main+0x452>
 800d018:	4b51      	ldr	r3, [pc, #324]	@ (800d160 <main+0x560>)
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	2201      	movs	r2, #1
 800d01e:	4053      	eors	r3, r2
 800d020:	b2db      	uxtb	r3, r3
 800d022:	2b00      	cmp	r3, #0
 800d024:	d015      	beq.n	800d052 <main+0x452>
 800d026:	4b4f      	ldr	r3, [pc, #316]	@ (800d164 <main+0x564>)
 800d028:	789b      	ldrb	r3, [r3, #2]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d011      	beq.n	800d052 <main+0x452>
        Info("Battery level insufficient for sen5x operation");
 800d02e:	4a4e      	ldr	r2, [pc, #312]	@ (800d168 <main+0x568>)
 800d030:	4b4e      	ldr	r3, [pc, #312]	@ (800d16c <main+0x56c>)
 800d032:	0019      	movs	r1, r3
 800d034:	2002      	movs	r0, #2
 800d036:	f006 ff3f 	bl	8013eb8 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800d03a:	4b4a      	ldr	r3, [pc, #296]	@ (800d164 <main+0x564>)
 800d03c:	2200      	movs	r2, #0
 800d03e:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800d040:	4b4b      	ldr	r3, [pc, #300]	@ (800d170 <main+0x570>)
 800d042:	2200      	movs	r2, #0
 800d044:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800d046:	4b4b      	ldr	r3, [pc, #300]	@ (800d174 <main+0x574>)
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d001      	beq.n	800d052 <main+0x452>
          sen5x_Power_Off();
 800d04e:	f001 fbcf 	bl	800e7f0 <sen5x_Power_Off>
        }
      }
      if (SensorProbe.ESP_Present && !espfailshown) {
 800d052:	4b49      	ldr	r3, [pc, #292]	@ (800d178 <main+0x578>)
 800d054:	79db      	ldrb	r3, [r3, #7]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d00d      	beq.n	800d076 <main+0x476>
 800d05a:	4b48      	ldr	r3, [pc, #288]	@ (800d17c <main+0x57c>)
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	2201      	movs	r2, #1
 800d060:	4053      	eors	r3, r2
 800d062:	b2db      	uxtb	r3, r3
 800d064:	2b00      	cmp	r3, #0
 800d066:	d006      	beq.n	800d076 <main+0x476>
        ESPstate = ESP_Upkeep();
 800d068:	f7fa fb24 	bl	80076b4 <ESP_Upkeep>
 800d06c:	0003      	movs	r3, r0
 800d06e:	001a      	movs	r2, r3
 800d070:	4b43      	ldr	r3, [pc, #268]	@ (800d180 <main+0x580>)
 800d072:	701a      	strb	r2, [r3, #0]
 800d074:	e008      	b.n	800d088 <main+0x488>
      }
      else {
        Error("ESP failed during init");
 800d076:	4a43      	ldr	r2, [pc, #268]	@ (800d184 <main+0x584>)
 800d078:	4b43      	ldr	r3, [pc, #268]	@ (800d188 <main+0x588>)
 800d07a:	0019      	movs	r1, r3
 800d07c:	2001      	movs	r0, #1
 800d07e:	f006 ff1b 	bl	8013eb8 <CreateLine>
        espfailshown = true;
 800d082:	4b3e      	ldr	r3, [pc, #248]	@ (800d17c <main+0x57c>)
 800d084:	2201      	movs	r2, #1
 800d086:	701a      	strb	r2, [r3, #0]
      }
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800d088:	4b40      	ldr	r3, [pc, #256]	@ (800d18c <main+0x58c>)
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	2201      	movs	r2, #1
 800d08e:	4053      	eors	r3, r2
 800d090:	b2db      	uxtb	r3, r3
 800d092:	2b00      	cmp	r3, #0
 800d094:	d00f      	beq.n	800d0b6 <main+0x4b6>
 800d096:	4b3e      	ldr	r3, [pc, #248]	@ (800d190 <main+0x590>)
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	2201      	movs	r2, #1
 800d09c:	4053      	eors	r3, r2
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d008      	beq.n	800d0b6 <main+0x4b6>
 800d0a4:	4b3b      	ldr	r3, [pc, #236]	@ (800d194 <main+0x594>)
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	4053      	eors	r3, r2
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d001      	beq.n	800d0b6 <main+0x4b6>
      Device_Test();  // for device with startup time
 800d0b2:	f000 fcb9 	bl	800da28 <Device_Test>
    }
    if (!usbPluggedIn) {
 800d0b6:	4b38      	ldr	r3, [pc, #224]	@ (800d198 <main+0x598>)
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	4053      	eors	r3, r2
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d030      	beq.n	800d126 <main+0x526>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800d0c4:	4b35      	ldr	r3, [pc, #212]	@ (800d19c <main+0x59c>)
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	4053      	eors	r3, r2
 800d0cc:	b2db      	uxtb	r3, r3
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d029      	beq.n	800d126 <main+0x526>
 800d0d2:	f000 fd27 	bl	800db24 <AllDevicesReady>
 800d0d6:	1e03      	subs	r3, r0, #0
 800d0d8:	d025      	beq.n	800d126 <main+0x526>
 800d0da:	4b31      	ldr	r3, [pc, #196]	@ (800d1a0 <main+0x5a0>)
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d021      	beq.n	800d126 <main+0x526>
        EnabledConnectedDevices();
 800d0e2:	f000 fe6b 	bl	800ddbc <EnabledConnectedDevices>
        Enter_Stop_Mode((batteryCharge<3.90)?SensorProbe.PM_Present?WAIT_WITH_PM+900:WAIT_WITHOUT_PM+900:SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800d0e6:	4b2f      	ldr	r3, [pc, #188]	@ (800d1a4 <main+0x5a4>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	1c18      	adds	r0, r3, #0
 800d0ec:	f7f6 fbd2 	bl	8003894 <__aeabi_f2d>
 800d0f0:	4a2d      	ldr	r2, [pc, #180]	@ (800d1a8 <main+0x5a8>)
 800d0f2:	4b2e      	ldr	r3, [pc, #184]	@ (800d1ac <main+0x5ac>)
 800d0f4:	f7f3 f9e2 	bl	80004bc <__aeabi_dcmplt>
 800d0f8:	1e03      	subs	r3, r0, #0
 800d0fa:	d008      	beq.n	800d10e <main+0x50e>
 800d0fc:	4b1e      	ldr	r3, [pc, #120]	@ (800d178 <main+0x578>)
 800d0fe:	795b      	ldrb	r3, [r3, #5]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d002      	beq.n	800d10a <main+0x50a>
 800d104:	23dc      	movs	r3, #220	@ 0xdc
 800d106:	00db      	lsls	r3, r3, #3
 800d108:	e00a      	b.n	800d120 <main+0x520>
 800d10a:	4b29      	ldr	r3, [pc, #164]	@ (800d1b0 <main+0x5b0>)
 800d10c:	e008      	b.n	800d120 <main+0x520>
 800d10e:	4b1a      	ldr	r3, [pc, #104]	@ (800d178 <main+0x578>)
 800d110:	795b      	ldrb	r3, [r3, #5]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d002      	beq.n	800d11c <main+0x51c>
 800d116:	23d7      	movs	r3, #215	@ 0xd7
 800d118:	009b      	lsls	r3, r3, #2
 800d11a:	e001      	b.n	800d120 <main+0x520>
 800d11c:	23dc      	movs	r3, #220	@ 0xdc
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	0018      	movs	r0, r3
 800d122:	f7fd fb55 	bl	800a7d0 <Enter_Stop_Mode>
      }
    }
    if (u1_rx_buff[0] != '\0') {
 800d126:	4b23      	ldr	r3, [pc, #140]	@ (800d1b4 <main+0x5b4>)
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d001      	beq.n	800d132 <main+0x532>
      check_cli_command();
 800d12e:	f000 f8cf 	bl	800d2d0 <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800d132:	f7fc fddd 	bl	8009cf0 <Check_USB_PowerOn>
 800d136:	1e03      	subs	r3, r0, #0
 800d138:	d100      	bne.n	800d13c <main+0x53c>
 800d13a:	e629      	b.n	800cd90 <main+0x190>
 800d13c:	4b1e      	ldr	r3, [pc, #120]	@ (800d1b8 <main+0x5b8>)
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	2201      	movs	r2, #1
 800d142:	4053      	eors	r3, r2
 800d144:	b2db      	uxtb	r3, r3
 800d146:	2b00      	cmp	r3, #0
 800d148:	d100      	bne.n	800d14c <main+0x54c>
 800d14a:	e621      	b.n	800cd90 <main+0x190>
      Process_USB_input(GetUsbRxPointer());
 800d14c:	f016 f8f2 	bl	8023334 <GetUsbRxPointer>
 800d150:	0003      	movs	r3, r0
 800d152:	0018      	movs	r0, r3
 800d154:	f7fc fa4a 	bl	80095ec <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800d158:	e61a      	b.n	800cd90 <main+0x190>
 800d15a:	46c0      	nop			@ (mov r8, r8)
 800d15c:	2000215d 	.word	0x2000215d
 800d160:	200000a2 	.word	0x200000a2
 800d164:	20001118 	.word	0x20001118
 800d168:	0802ca70 	.word	0x0802ca70
 800d16c:	0802c96c 	.word	0x0802c96c
 800d170:	200011be 	.word	0x200011be
 800d174:	200011bd 	.word	0x200011bd
 800d178:	20001120 	.word	0x20001120
 800d17c:	200010f8 	.word	0x200010f8
 800d180:	200010fc 	.word	0x200010fc
 800d184:	0802caa0 	.word	0x0802caa0
 800d188:	0802c98c 	.word	0x0802c98c
 800d18c:	200010f4 	.word	0x200010f4
 800d190:	200010f5 	.word	0x200010f5
 800d194:	200010f6 	.word	0x200010f6
 800d198:	2000214d 	.word	0x2000214d
 800d19c:	2000214e 	.word	0x2000214e
 800d1a0:	200005b3 	.word	0x200005b3
 800d1a4:	20002158 	.word	0x20002158
 800d1a8:	33333333 	.word	0x33333333
 800d1ac:	400f3333 	.word	0x400f3333
 800d1b0:	000006f4 	.word	0x000006f4
 800d1b4:	20001100 	.word	0x20001100
 800d1b8:	200005af 	.word	0x200005af

0800d1bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d1bc:	b590      	push	{r4, r7, lr}
 800d1be:	b09d      	sub	sp, #116	@ 0x74
 800d1c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d1c2:	2438      	movs	r4, #56	@ 0x38
 800d1c4:	193b      	adds	r3, r7, r4
 800d1c6:	0018      	movs	r0, r3
 800d1c8:	2338      	movs	r3, #56	@ 0x38
 800d1ca:	001a      	movs	r2, r3
 800d1cc:	2100      	movs	r1, #0
 800d1ce:	f019 fad7 	bl	8026780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d1d2:	2324      	movs	r3, #36	@ 0x24
 800d1d4:	18fb      	adds	r3, r7, r3
 800d1d6:	0018      	movs	r0, r3
 800d1d8:	2314      	movs	r3, #20
 800d1da:	001a      	movs	r2, r3
 800d1dc:	2100      	movs	r1, #0
 800d1de:	f019 facf 	bl	8026780 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d1e2:	003b      	movs	r3, r7
 800d1e4:	0018      	movs	r0, r3
 800d1e6:	2324      	movs	r3, #36	@ 0x24
 800d1e8:	001a      	movs	r2, r3
 800d1ea:	2100      	movs	r1, #0
 800d1ec:	f019 fac8 	bl	8026780 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d1f0:	4b34      	ldr	r3, [pc, #208]	@ (800d2c4 <SystemClock_Config+0x108>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4a34      	ldr	r2, [pc, #208]	@ (800d2c8 <SystemClock_Config+0x10c>)
 800d1f6:	401a      	ands	r2, r3
 800d1f8:	4b32      	ldr	r3, [pc, #200]	@ (800d2c4 <SystemClock_Config+0x108>)
 800d1fa:	2180      	movs	r1, #128	@ 0x80
 800d1fc:	0109      	lsls	r1, r1, #4
 800d1fe:	430a      	orrs	r2, r1
 800d200:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800d202:	f00d ffeb 	bl	801b1dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800d206:	4b31      	ldr	r3, [pc, #196]	@ (800d2cc <SystemClock_Config+0x110>)
 800d208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d20a:	4a2f      	ldr	r2, [pc, #188]	@ (800d2c8 <SystemClock_Config+0x10c>)
 800d20c:	401a      	ands	r2, r3
 800d20e:	4b2f      	ldr	r3, [pc, #188]	@ (800d2cc <SystemClock_Config+0x110>)
 800d210:	2180      	movs	r1, #128	@ 0x80
 800d212:	0149      	lsls	r1, r1, #5
 800d214:	430a      	orrs	r2, r1
 800d216:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800d218:	193b      	adds	r3, r7, r4
 800d21a:	2226      	movs	r2, #38	@ 0x26
 800d21c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800d21e:	193b      	adds	r3, r7, r4
 800d220:	2280      	movs	r2, #128	@ 0x80
 800d222:	0052      	lsls	r2, r2, #1
 800d224:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d226:	0021      	movs	r1, r4
 800d228:	187b      	adds	r3, r7, r1
 800d22a:	2201      	movs	r2, #1
 800d22c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d22e:	187b      	adds	r3, r7, r1
 800d230:	2210      	movs	r2, #16
 800d232:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800d234:	187b      	adds	r3, r7, r1
 800d236:	2201      	movs	r2, #1
 800d238:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800d23a:	187b      	adds	r3, r7, r1
 800d23c:	2200      	movs	r2, #0
 800d23e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d240:	187b      	adds	r3, r7, r1
 800d242:	0018      	movs	r0, r3
 800d244:	f00e f844 	bl	801b2d0 <HAL_RCC_OscConfig>
 800d248:	1e03      	subs	r3, r0, #0
 800d24a:	d001      	beq.n	800d250 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d24c:	f000 f922 	bl	800d494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d250:	2124      	movs	r1, #36	@ 0x24
 800d252:	187b      	adds	r3, r7, r1
 800d254:	220f      	movs	r2, #15
 800d256:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800d258:	187b      	adds	r3, r7, r1
 800d25a:	2201      	movs	r2, #1
 800d25c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d25e:	187b      	adds	r3, r7, r1
 800d260:	2200      	movs	r2, #0
 800d262:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800d264:	187b      	adds	r3, r7, r1
 800d266:	2200      	movs	r2, #0
 800d268:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d26a:	187b      	adds	r3, r7, r1
 800d26c:	2200      	movs	r2, #0
 800d26e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800d270:	187b      	adds	r3, r7, r1
 800d272:	2100      	movs	r1, #0
 800d274:	0018      	movs	r0, r3
 800d276:	f00e fbff 	bl	801ba78 <HAL_RCC_ClockConfig>
 800d27a:	1e03      	subs	r3, r0, #0
 800d27c:	d001      	beq.n	800d282 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800d27e:	f000 f909 	bl	800d494 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800d282:	003b      	movs	r3, r7
 800d284:	226d      	movs	r2, #109	@ 0x6d
 800d286:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800d288:	003b      	movs	r3, r7
 800d28a:	2200      	movs	r2, #0
 800d28c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800d28e:	003b      	movs	r3, r7
 800d290:	2200      	movs	r2, #0
 800d292:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800d294:	003b      	movs	r3, r7
 800d296:	2200      	movs	r2, #0
 800d298:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d29a:	003b      	movs	r3, r7
 800d29c:	2280      	movs	r2, #128	@ 0x80
 800d29e:	0252      	lsls	r2, r2, #9
 800d2a0:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d2a2:	003b      	movs	r3, r7
 800d2a4:	2280      	movs	r2, #128	@ 0x80
 800d2a6:	04d2      	lsls	r2, r2, #19
 800d2a8:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d2aa:	003b      	movs	r3, r7
 800d2ac:	0018      	movs	r0, r3
 800d2ae:	f00e fe07 	bl	801bec0 <HAL_RCCEx_PeriphCLKConfig>
 800d2b2:	1e03      	subs	r3, r0, #0
 800d2b4:	d001      	beq.n	800d2ba <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800d2b6:	f000 f8ed 	bl	800d494 <Error_Handler>
  }
}
 800d2ba:	46c0      	nop			@ (mov r8, r8)
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	b01d      	add	sp, #116	@ 0x74
 800d2c0:	bd90      	pop	{r4, r7, pc}
 800d2c2:	46c0      	nop			@ (mov r8, r8)
 800d2c4:	40007000 	.word	0x40007000
 800d2c8:	ffffe7ff 	.word	0xffffe7ff
 800d2cc:	40021000 	.word	0x40021000

0800d2d0 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800d2d4:	4b40      	ldr	r3, [pc, #256]	@ (800d3d8 <check_cli_command+0x108>)
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	3b61      	subs	r3, #97	@ 0x61
 800d2da:	2b15      	cmp	r3, #21
 800d2dc:	d845      	bhi.n	800d36a <check_cli_command+0x9a>
 800d2de:	009a      	lsls	r2, r3, #2
 800d2e0:	4b3e      	ldr	r3, [pc, #248]	@ (800d3dc <check_cli_command+0x10c>)
 800d2e2:	18d3      	adds	r3, r2, r3
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800d2e8:	4b3d      	ldr	r3, [pc, #244]	@ (800d3e0 <check_cli_command+0x110>)
 800d2ea:	0018      	movs	r0, r3
 800d2ec:	f019 f8f6 	bl	80264dc <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800d2f0:	2003      	movs	r0, #3
 800d2f2:	f006 fe5b 	bl	8013fac <SetVerboseLevel>
      break;
 800d2f6:	e069      	b.n	800d3cc <check_cli_command+0xfc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800d2f8:	f7fb fc3e 	bl	8008b78 <PC_show_Keys>
    break;
 800d2fc:	e066      	b.n	800d3cc <check_cli_command+0xfc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800d2fe:	f7f7 fac7 	bl	8004890 <forceNTPupdate>
    break;
 800d302:	e063      	b.n	800d3cc <check_cli_command+0xfc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800d304:	4b37      	ldr	r3, [pc, #220]	@ (800d3e4 <check_cli_command+0x114>)
 800d306:	0018      	movs	r0, r3
 800d308:	f019 f8e8 	bl	80264dc <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800d30c:	2002      	movs	r0, #2
 800d30e:	f006 fe4d 	bl	8013fac <SetVerboseLevel>
      break;
 800d312:	e05b      	b.n	800d3cc <check_cli_command+0xfc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800d314:	4b34      	ldr	r3, [pc, #208]	@ (800d3e8 <check_cli_command+0x118>)
 800d316:	0018      	movs	r0, r3
 800d318:	f019 f8e0 	bl	80264dc <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800d31c:	2001      	movs	r0, #1
 800d31e:	f006 fe45 	bl	8013fac <SetVerboseLevel>
      break;
 800d322:	e053      	b.n	800d3cc <check_cli_command+0xfc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800d324:	4b31      	ldr	r3, [pc, #196]	@ (800d3ec <check_cli_command+0x11c>)
 800d326:	0018      	movs	r0, r3
 800d328:	f019 f8d8 	bl	80264dc <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800d32c:	2000      	movs	r0, #0
 800d32e:	f006 fe3d 	bl	8013fac <SetVerboseLevel>
      break;
 800d332:	e04b      	b.n	800d3cc <check_cli_command+0xfc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800d334:	f007 fb40 	bl	80149b8 <HAL_GetTick>
 800d338:	0002      	movs	r2, r0
 800d33a:	4b2d      	ldr	r3, [pc, #180]	@ (800d3f0 <check_cli_command+0x120>)
 800d33c:	601a      	str	r2, [r3, #0]
      break;
 800d33e:	e045      	b.n	800d3cc <check_cli_command+0xfc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800d340:	f7fc fdde 	bl	8009f00 <showTime>
      break;
 800d344:	e042      	b.n	800d3cc <check_cli_command+0xfc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
 800d346:	4b2b      	ldr	r3, [pc, #172]	@ (800d3f4 <check_cli_command+0x124>)
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	1e5a      	subs	r2, r3, #1
 800d34c:	4193      	sbcs	r3, r2
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	2201      	movs	r2, #1
 800d352:	4053      	eors	r3, r2
 800d354:	b2db      	uxtb	r3, r3
 800d356:	1c1a      	adds	r2, r3, #0
 800d358:	2301      	movs	r3, #1
 800d35a:	4013      	ands	r3, r2
 800d35c:	b2da      	uxtb	r2, r3
 800d35e:	4b25      	ldr	r3, [pc, #148]	@ (800d3f4 <check_cli_command+0x124>)
 800d360:	701a      	strb	r2, [r3, #0]
      break;
 800d362:	e033      	b.n	800d3cc <check_cli_command+0xfc>
    case (uint8_t)'v':
      BinaryReleaseInfo(); // show me the build
 800d364:	f006 fe3c 	bl	8013fe0 <BinaryReleaseInfo>
      break;
 800d368:	e030      	b.n	800d3cc <check_cli_command+0xfc>
    default:
      printf("Error unknown request from Serial UART1 (TTY)\r\n");
 800d36a:	4b23      	ldr	r3, [pc, #140]	@ (800d3f8 <check_cli_command+0x128>)
 800d36c:	0018      	movs	r0, r3
 800d36e:	f019 f8b5 	bl	80264dc <puts>
      printf("\r\n\r\nPossible commands:\r\n\r\n");
 800d372:	4b22      	ldr	r3, [pc, #136]	@ (800d3fc <check_cli_command+0x12c>)
 800d374:	0018      	movs	r0, r3
 800d376:	f019 f8b1 	bl	80264dc <puts>
      printf("a - VerboseLevel set to all\r\n");
 800d37a:	4b21      	ldr	r3, [pc, #132]	@ (800d400 <check_cli_command+0x130>)
 800d37c:	0018      	movs	r0, r3
 800d37e:	f019 f8ad 	bl	80264dc <puts>
      printf("e - show EEPROM\r\n");
 800d382:	4b20      	ldr	r3, [pc, #128]	@ (800d404 <check_cli_command+0x134>)
 800d384:	0018      	movs	r0, r3
 800d386:	f019 f8a9 	bl	80264dc <puts>
      printf("f - Force NTP time synchronization\r\n");
 800d38a:	4b1f      	ldr	r3, [pc, #124]	@ (800d408 <check_cli_command+0x138>)
 800d38c:	0018      	movs	r0, r3
 800d38e:	f019 f8a5 	bl	80264dc <puts>
      printf("i - VerboseLevel set to info\r\n");
 800d392:	4b1e      	ldr	r3, [pc, #120]	@ (800d40c <check_cli_command+0x13c>)
 800d394:	0018      	movs	r0, r3
 800d396:	f019 f8a1 	bl	80264dc <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800d39a:	4b1d      	ldr	r3, [pc, #116]	@ (800d410 <check_cli_command+0x140>)
 800d39c:	0018      	movs	r0, r3
 800d39e:	f019 f89d 	bl	80264dc <puts>
      printf("n - VerboseLevel set to none\r\n");
 800d3a2:	4b1c      	ldr	r3, [pc, #112]	@ (800d414 <check_cli_command+0x144>)
 800d3a4:	0018      	movs	r0, r3
 800d3a6:	f019 f899 	bl	80264dc <puts>
      printf("s - Start particle measurement\r\n");
 800d3aa:	4b1b      	ldr	r3, [pc, #108]	@ (800d418 <check_cli_command+0x148>)
 800d3ac:	0018      	movs	r0, r3
 800d3ae:	f019 f895 	bl	80264dc <puts>
      printf("t - Show actual system time\r\n");
 800d3b2:	4b1a      	ldr	r3, [pc, #104]	@ (800d41c <check_cli_command+0x14c>)
 800d3b4:	0018      	movs	r0, r3
 800d3b6:	f019 f891 	bl	80264dc <puts>
      printf("u - USB logging toggle\r\n");
 800d3ba:	4b19      	ldr	r3, [pc, #100]	@ (800d420 <check_cli_command+0x150>)
 800d3bc:	0018      	movs	r0, r3
 800d3be:	f019 f88d 	bl	80264dc <puts>
      printf("v - Show system version\r\n");
 800d3c2:	4b18      	ldr	r3, [pc, #96]	@ (800d424 <check_cli_command+0x154>)
 800d3c4:	0018      	movs	r0, r3
 800d3c6:	f019 f889 	bl	80264dc <puts>
  break;
 800d3ca:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800d3cc:	4b02      	ldr	r3, [pc, #8]	@ (800d3d8 <check_cli_command+0x108>)
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	701a      	strb	r2, [r3, #0]
}
 800d3d2:	46c0      	nop			@ (mov r8, r8)
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	20001100 	.word	0x20001100
 800d3dc:	0802e708 	.word	0x0802e708
 800d3e0:	0802cab8 	.word	0x0802cab8
 800d3e4:	0802cad4 	.word	0x0802cad4
 800d3e8:	0802caf0 	.word	0x0802caf0
 800d3ec:	0802cb10 	.word	0x0802cb10
 800d3f0:	200011cc 	.word	0x200011cc
 800d3f4:	200010f7 	.word	0x200010f7
 800d3f8:	0802cb2c 	.word	0x0802cb2c
 800d3fc:	0802cb5c 	.word	0x0802cb5c
 800d400:	0802cb78 	.word	0x0802cb78
 800d404:	0802cb98 	.word	0x0802cb98
 800d408:	0802cbac 	.word	0x0802cbac
 800d40c:	0802cbd0 	.word	0x0802cbd0
 800d410:	0802cbf0 	.word	0x0802cbf0
 800d414:	0802cc14 	.word	0x0802cc14
 800d418:	0802cc34 	.word	0x0802cc34
 800d41c:	0802cc54 	.word	0x0802cc54
 800d420:	0802cc74 	.word	0x0802cc74
 800d424:	0802cc8c 	.word	0x0802cc8c

0800d428 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800d430:	4907      	ldr	r1, [pc, #28]	@ (800d450 <HAL_UART_RxCpltCallback+0x28>)
 800d432:	4b08      	ldr	r3, [pc, #32]	@ (800d454 <HAL_UART_RxCpltCallback+0x2c>)
 800d434:	2201      	movs	r2, #1
 800d436:	0018      	movs	r0, r3
 800d438:	f010 f904 	bl	801d644 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800d43c:	4904      	ldr	r1, [pc, #16]	@ (800d450 <HAL_UART_RxCpltCallback+0x28>)
 800d43e:	4b05      	ldr	r3, [pc, #20]	@ (800d454 <HAL_UART_RxCpltCallback+0x2c>)
 800d440:	2201      	movs	r2, #1
 800d442:	0018      	movs	r0, r3
 800d444:	f010 f8fe 	bl	801d644 <HAL_UART_Receive_IT>
}
 800d448:	46c0      	nop			@ (mov r8, r8)
 800d44a:	46bd      	mov	sp, r7
 800d44c:	b002      	add	sp, #8
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	20001100 	.word	0x20001100
 800d454:	200022e4 	.word	0x200022e4

0800d458 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	0002      	movs	r2, r0
 800d460:	1dbb      	adds	r3, r7, #6
 800d462:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800d464:	1dbb      	adds	r3, r7, #6
 800d466:	881a      	ldrh	r2, [r3, #0]
 800d468:	2380      	movs	r3, #128	@ 0x80
 800d46a:	021b      	lsls	r3, r3, #8
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d10b      	bne.n	800d488 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800d470:	f005 ffa0 	bl	80133b4 <setuserToggle>
    if (GetPMSensorPresence()) {
 800d474:	f000 f860 	bl	800d538 <GetPMSensorPresence>
 800d478:	1e03      	subs	r3, r0, #0
 800d47a:	d005      	beq.n	800d488 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800d47c:	4b04      	ldr	r3, [pc, #16]	@ (800d490 <HAL_GPIO_EXTI_Callback+0x38>)
 800d47e:	2201      	movs	r2, #1
 800d480:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800d482:	2000      	movs	r0, #0
 800d484:	f001 f8f6 	bl	800e674 <sen5x_Set_sen5x_state>
    }
  }
}
 800d488:	46c0      	nop			@ (mov r8, r8)
 800d48a:	46bd      	mov	sp, r7
 800d48c:	b002      	add	sp, #8
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	20001118 	.word	0x20001118

0800d494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800d498:	f005 fb76 	bl	8012b88 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d49c:	b672      	cpsid	i
}
 800d49e:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800d4a0:	4a05      	ldr	r2, [pc, #20]	@ (800d4b8 <Error_Handler+0x24>)
 800d4a2:	4b06      	ldr	r3, [pc, #24]	@ (800d4bc <Error_Handler+0x28>)
 800d4a4:	0019      	movs	r1, r3
 800d4a6:	2001      	movs	r0, #1
 800d4a8:	f006 fd06 	bl	8013eb8 <CreateLine>

    HAL_Delay(2500);
 800d4ac:	4b04      	ldr	r3, [pc, #16]	@ (800d4c0 <Error_Handler+0x2c>)
 800d4ae:	0018      	movs	r0, r3
 800d4b0:	f007 fa8c 	bl	80149cc <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800d4b4:	46c0      	nop			@ (mov r8, r8)
 800d4b6:	e7f3      	b.n	800d4a0 <Error_Handler+0xc>
 800d4b8:	0802cca8 	.word	0x0802cca8
 800d4bc:	0802c98c 	.word	0x0802c98c
 800d4c0:	000009c4 	.word	0x000009c4

0800d4c4 <testInit>:
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;
static bool sensorsdisablereq = false;

void testInit(){
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800d4c8:	4b19      	ldr	r3, [pc, #100]	@ (800d530 <testInit+0x6c>)
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800d4ce:	4b18      	ldr	r3, [pc, #96]	@ (800d530 <testInit+0x6c>)
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800d4d4:	4b16      	ldr	r3, [pc, #88]	@ (800d530 <testInit+0x6c>)
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800d4da:	4b15      	ldr	r3, [pc, #84]	@ (800d530 <testInit+0x6c>)
 800d4dc:	2200      	movs	r2, #0
 800d4de:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800d4e0:	4b13      	ldr	r3, [pc, #76]	@ (800d530 <testInit+0x6c>)
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800d4e6:	4b12      	ldr	r3, [pc, #72]	@ (800d530 <testInit+0x6c>)
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800d4ec:	4b10      	ldr	r3, [pc, #64]	@ (800d530 <testInit+0x6c>)
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800d4f2:	4b0f      	ldr	r3, [pc, #60]	@ (800d530 <testInit+0x6c>)
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800d4f8:	4b0d      	ldr	r3, [pc, #52]	@ (800d530 <testInit+0x6c>)
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800d4fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d534 <testInit+0x70>)
 800d500:	2201      	movs	r2, #1
 800d502:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800d504:	4b0b      	ldr	r3, [pc, #44]	@ (800d534 <testInit+0x70>)
 800d506:	2201      	movs	r2, #1
 800d508:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800d50a:	4b0a      	ldr	r3, [pc, #40]	@ (800d534 <testInit+0x70>)
 800d50c:	2201      	movs	r2, #1
 800d50e:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800d510:	4b08      	ldr	r3, [pc, #32]	@ (800d534 <testInit+0x70>)
 800d512:	2201      	movs	r2, #1
 800d514:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800d516:	4b07      	ldr	r3, [pc, #28]	@ (800d534 <testInit+0x70>)
 800d518:	2201      	movs	r2, #1
 800d51a:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800d51c:	4b05      	ldr	r3, [pc, #20]	@ (800d534 <testInit+0x70>)
 800d51e:	2201      	movs	r2, #1
 800d520:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800d522:	4b04      	ldr	r3, [pc, #16]	@ (800d534 <testInit+0x70>)
 800d524:	2201      	movs	r2, #1
 800d526:	719a      	strb	r2, [r3, #6]
}
 800d528:	46c0      	nop			@ (mov r8, r8)
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	46c0      	nop			@ (mov r8, r8)
 800d530:	20001120 	.word	0x20001120
 800d534:	20001118 	.word	0x20001118

0800d538 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800d538:	b580      	push	{r7, lr}
 800d53a:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800d53c:	4b02      	ldr	r3, [pc, #8]	@ (800d548 <GetPMSensorPresence+0x10>)
 800d53e:	795b      	ldrb	r3, [r3, #5]
}
 800d540:	0018      	movs	r0, r3
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	46c0      	nop			@ (mov r8, r8)
 800d548:	20001120 	.word	0x20001120

0800d54c <DisablePMSensor>:

void DisablePMSensor() {
 800d54c:	b580      	push	{r7, lr}
 800d54e:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800d550:	4b02      	ldr	r3, [pc, #8]	@ (800d55c <DisablePMSensor+0x10>)
 800d552:	2200      	movs	r2, #0
 800d554:	715a      	strb	r2, [r3, #5]
}
 800d556:	46c0      	nop			@ (mov r8, r8)
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	20001120 	.word	0x20001120

0800d560 <IsAHT20SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsAHT20SensorPresent() {
 800d560:	b580      	push	{r7, lr}
 800d562:	af00      	add	r7, sp, #0
  return SensorProbe.AHT20_Present;
 800d564:	4b02      	ldr	r3, [pc, #8]	@ (800d570 <IsAHT20SensorPresent+0x10>)
 800d566:	789b      	ldrb	r3, [r3, #2]
}
 800d568:	0018      	movs	r0, r3
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	46c0      	nop			@ (mov r8, r8)
 800d570:	20001120 	.word	0x20001120

0800d574 <IsBMP280SensorPresent>:

bool IsBMP280SensorPresent() {
 800d574:	b580      	push	{r7, lr}
 800d576:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800d578:	4b02      	ldr	r3, [pc, #8]	@ (800d584 <IsBMP280SensorPresent+0x10>)
 800d57a:	791b      	ldrb	r3, [r3, #4]
}
 800d57c:	0018      	movs	r0, r3
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
 800d582:	46c0      	nop			@ (mov r8, r8)
 800d584:	20001120 	.word	0x20001120

0800d588 <IsENS160SensorPresent>:

bool IsENS160SensorPresent() {
 800d588:	b580      	push	{r7, lr}
 800d58a:	af00      	add	r7, sp, #0
  return SensorProbe.ENS160_Present;
 800d58c:	4b02      	ldr	r3, [pc, #8]	@ (800d598 <IsENS160SensorPresent+0x10>)
 800d58e:	78db      	ldrb	r3, [r3, #3]
}
 800d590:	0018      	movs	r0, r3
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	46c0      	nop			@ (mov r8, r8)
 800d598:	20001120 	.word	0x20001120

0800d59c <IsSGPPresent>:

bool IsSGPPresent() {
 800d59c:	b580      	push	{r7, lr}
 800d59e:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800d5a0:	4b02      	ldr	r3, [pc, #8]	@ (800d5ac <IsSGPPresent+0x10>)
 800d5a2:	785b      	ldrb	r3, [r3, #1]
}
 800d5a4:	0018      	movs	r0, r3
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	46c0      	nop			@ (mov r8, r8)
 800d5ac:	20001120 	.word	0x20001120

0800d5b0 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	0002      	movs	r2, r0
 800d5b8:	1dfb      	adds	r3, r7, #7
 800d5ba:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800d5bc:	4b0b      	ldr	r3, [pc, #44]	@ (800d5ec <SetVOCSensorDIS_ENA+0x3c>)
 800d5be:	1dfa      	adds	r2, r7, #7
 800d5c0:	7812      	ldrb	r2, [r2, #0]
 800d5c2:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800d5c4:	4b0a      	ldr	r3, [pc, #40]	@ (800d5f0 <SetVOCSensorDIS_ENA+0x40>)
 800d5c6:	1dfa      	adds	r2, r7, #7
 800d5c8:	7812      	ldrb	r2, [r2, #0]
 800d5ca:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800d5cc:	1dfb      	adds	r3, r7, #7
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d001      	beq.n	800d5d8 <SetVOCSensorDIS_ENA+0x28>
 800d5d4:	4b07      	ldr	r3, [pc, #28]	@ (800d5f4 <SetVOCSensorDIS_ENA+0x44>)
 800d5d6:	e000      	b.n	800d5da <SetVOCSensorDIS_ENA+0x2a>
 800d5d8:	4b07      	ldr	r3, [pc, #28]	@ (800d5f8 <SetVOCSensorDIS_ENA+0x48>)
 800d5da:	4a08      	ldr	r2, [pc, #32]	@ (800d5fc <SetVOCSensorDIS_ENA+0x4c>)
 800d5dc:	4908      	ldr	r1, [pc, #32]	@ (800d600 <SetVOCSensorDIS_ENA+0x50>)
 800d5de:	2003      	movs	r0, #3
 800d5e0:	f006 fc6a 	bl	8013eb8 <CreateLine>
}
 800d5e4:	46c0      	nop			@ (mov r8, r8)
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	b002      	add	sp, #8
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	20001120 	.word	0x20001120
 800d5f0:	20001118 	.word	0x20001118
 800d5f4:	0802ccd4 	.word	0x0802ccd4
 800d5f8:	0802ccdc 	.word	0x0802ccdc
 800d5fc:	0802cce8 	.word	0x0802cce8
 800d600:	0802ccfc 	.word	0x0802ccfc

0800d604 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800d604:	b580      	push	{r7, lr}
 800d606:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800d608:	4b02      	ldr	r3, [pc, #8]	@ (800d614 <IsPMSensorEnabled+0x10>)
 800d60a:	789b      	ldrb	r3, [r3, #2]
}
 800d60c:	0018      	movs	r0, r3
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	46c0      	nop			@ (mov r8, r8)
 800d614:	20001118 	.word	0x20001118

0800d618 <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	0002      	movs	r2, r0
 800d620:	1dfb      	adds	r3, r7, #7
 800d622:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800d624:	4b05      	ldr	r3, [pc, #20]	@ (800d63c <SetVOCSensorStatus+0x24>)
 800d626:	7a1b      	ldrb	r3, [r3, #8]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d003      	beq.n	800d634 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800d62c:	4b04      	ldr	r3, [pc, #16]	@ (800d640 <SetVOCSensorStatus+0x28>)
 800d62e:	1dfa      	adds	r2, r7, #7
 800d630:	7812      	ldrb	r2, [r2, #0]
 800d632:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800d634:	46c0      	nop			@ (mov r8, r8)
 800d636:	46bd      	mov	sp, r7
 800d638:	b002      	add	sp, #8
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	20001120 	.word	0x20001120
 800d640:	20001118 	.word	0x20001118

0800d644 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	0002      	movs	r2, r0
 800d64c:	1dfb      	adds	r3, r7, #7
 800d64e:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800d650:	4b03      	ldr	r3, [pc, #12]	@ (800d660 <SetPMSensorStatus+0x1c>)
 800d652:	1dfa      	adds	r2, r7, #7
 800d654:	7812      	ldrb	r2, [r2, #0]
 800d656:	709a      	strb	r2, [r3, #2]
}
 800d658:	46c0      	nop			@ (mov r8, r8)
 800d65a:	46bd      	mov	sp, r7
 800d65c:	b002      	add	sp, #8
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	20001118 	.word	0x20001118

0800d664 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800d664:	b580      	push	{r7, lr}
 800d666:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800d668:	4b02      	ldr	r3, [pc, #8]	@ (800d674 <SetESPMeasurementDone+0x10>)
 800d66a:	2201      	movs	r2, #1
 800d66c:	71da      	strb	r2, [r3, #7]
}
 800d66e:	46c0      	nop			@ (mov r8, r8)
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	20001120 	.word	0x20001120

0800d678 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	607a      	str	r2, [r7, #4]
 800d684:	603b      	str	r3, [r7, #0]
  testInit();
 800d686:	f7ff ff1d 	bl	800d4c4 <testInit>
  I2CSensors_Init(sensorI2C);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	0018      	movs	r0, r3
 800d68e:	f7fa fd8b 	bl	80081a8 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800d692:	f006 ff1d 	bl	80144d0 <HIDS_DeviceConnected>
 800d696:	0003      	movs	r3, r0
 800d698:	001a      	movs	r2, r3
 800d69a:	2301      	movs	r3, #1
 800d69c:	4053      	eors	r3, r2
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00c      	beq.n	800d6be <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800d6a4:	4abf      	ldr	r2, [pc, #764]	@ (800d9a4 <Device_Init+0x32c>)
 800d6a6:	4bc0      	ldr	r3, [pc, #768]	@ (800d9a8 <Device_Init+0x330>)
 800d6a8:	0019      	movs	r1, r3
 800d6aa:	2001      	movs	r0, #1
 800d6ac:	f006 fc04 	bl	8013eb8 <CreateLine>
     SensorProbe.HT_Present = false;
 800d6b0:	4bbe      	ldr	r3, [pc, #760]	@ (800d9ac <Device_Init+0x334>)
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800d6b6:	4bbe      	ldr	r3, [pc, #760]	@ (800d9b0 <Device_Init+0x338>)
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	701a      	strb	r2, [r3, #0]
 800d6bc:	e008      	b.n	800d6d0 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800d6be:	4bbb      	ldr	r3, [pc, #748]	@ (800d9ac <Device_Init+0x334>)
 800d6c0:	2201      	movs	r2, #1
 800d6c2:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800d6c4:	4abb      	ldr	r2, [pc, #748]	@ (800d9b4 <Device_Init+0x33c>)
 800d6c6:	4bbc      	ldr	r3, [pc, #752]	@ (800d9b8 <Device_Init+0x340>)
 800d6c8:	0019      	movs	r1, r3
 800d6ca:	2003      	movs	r0, #3
 800d6cc:	f006 fbf4 	bl	8013eb8 <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800d6d0:	f7fe f950 	bl	800b974 <BMP280_DeviceConnected>
 800d6d4:	0003      	movs	r3, r0
 800d6d6:	001a      	movs	r2, r3
 800d6d8:	2301      	movs	r3, #1
 800d6da:	4053      	eors	r3, r2
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d00c      	beq.n	800d6fc <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800d6e2:	4ab6      	ldr	r2, [pc, #728]	@ (800d9bc <Device_Init+0x344>)
 800d6e4:	4bb0      	ldr	r3, [pc, #704]	@ (800d9a8 <Device_Init+0x330>)
 800d6e6:	0019      	movs	r1, r3
 800d6e8:	2001      	movs	r0, #1
 800d6ea:	f006 fbe5 	bl	8013eb8 <CreateLine>
     SensorProbe.BMP280_Present = false;
 800d6ee:	4baf      	ldr	r3, [pc, #700]	@ (800d9ac <Device_Init+0x334>)
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800d6f4:	4bae      	ldr	r3, [pc, #696]	@ (800d9b0 <Device_Init+0x338>)
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	715a      	strb	r2, [r3, #5]
 800d6fa:	e008      	b.n	800d70e <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800d6fc:	4bab      	ldr	r3, [pc, #684]	@ (800d9ac <Device_Init+0x334>)
 800d6fe:	2201      	movs	r2, #1
 800d700:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800d702:	4aaf      	ldr	r2, [pc, #700]	@ (800d9c0 <Device_Init+0x348>)
 800d704:	4bac      	ldr	r3, [pc, #688]	@ (800d9b8 <Device_Init+0x340>)
 800d706:	0019      	movs	r1, r3
 800d708:	2003      	movs	r0, #3
 800d70a:	f006 fbd5 	bl	8013eb8 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800d70e:	f003 fd99 	bl	8011244 <SGP_DeviceConnected>
 800d712:	0003      	movs	r3, r0
 800d714:	001a      	movs	r2, r3
 800d716:	2301      	movs	r3, #1
 800d718:	4053      	eors	r3, r2
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00c      	beq.n	800d73a <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800d720:	4ba2      	ldr	r3, [pc, #648]	@ (800d9ac <Device_Init+0x334>)
 800d722:	2200      	movs	r2, #0
 800d724:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800d726:	4aa7      	ldr	r2, [pc, #668]	@ (800d9c4 <Device_Init+0x34c>)
 800d728:	4b9f      	ldr	r3, [pc, #636]	@ (800d9a8 <Device_Init+0x330>)
 800d72a:	0019      	movs	r1, r3
 800d72c:	2001      	movs	r0, #1
 800d72e:	f006 fbc3 	bl	8013eb8 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800d732:	4b9f      	ldr	r3, [pc, #636]	@ (800d9b0 <Device_Init+0x338>)
 800d734:	2200      	movs	r2, #0
 800d736:	705a      	strb	r2, [r3, #1]
 800d738:	e00b      	b.n	800d752 <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800d73a:	4b9c      	ldr	r3, [pc, #624]	@ (800d9ac <Device_Init+0x334>)
 800d73c:	2201      	movs	r2, #1
 800d73e:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800d740:	4b9a      	ldr	r3, [pc, #616]	@ (800d9ac <Device_Init+0x334>)
 800d742:	2201      	movs	r2, #1
 800d744:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800d746:	4aa0      	ldr	r2, [pc, #640]	@ (800d9c8 <Device_Init+0x350>)
 800d748:	4b9b      	ldr	r3, [pc, #620]	@ (800d9b8 <Device_Init+0x340>)
 800d74a:	0019      	movs	r1, r3
 800d74c:	2003      	movs	r0, #3
 800d74e:	f006 fbb3 	bl	8013eb8 <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800d752:	f7f6 fb89 	bl	8003e68 <ENS_DeviceConnected>
 800d756:	0003      	movs	r3, r0
 800d758:	001a      	movs	r2, r3
 800d75a:	2301      	movs	r3, #1
 800d75c:	4053      	eors	r3, r2
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00c      	beq.n	800d77e <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800d764:	4b91      	ldr	r3, [pc, #580]	@ (800d9ac <Device_Init+0x334>)
 800d766:	2200      	movs	r2, #0
 800d768:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800d76a:	4a98      	ldr	r2, [pc, #608]	@ (800d9cc <Device_Init+0x354>)
 800d76c:	4b8e      	ldr	r3, [pc, #568]	@ (800d9a8 <Device_Init+0x330>)
 800d76e:	0019      	movs	r1, r3
 800d770:	2001      	movs	r0, #1
 800d772:	f006 fba1 	bl	8013eb8 <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800d776:	4b8e      	ldr	r3, [pc, #568]	@ (800d9b0 <Device_Init+0x338>)
 800d778:	2200      	movs	r2, #0
 800d77a:	719a      	strb	r2, [r3, #6]
 800d77c:	e008      	b.n	800d790 <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800d77e:	4b8b      	ldr	r3, [pc, #556]	@ (800d9ac <Device_Init+0x334>)
 800d780:	2201      	movs	r2, #1
 800d782:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800d784:	4a92      	ldr	r2, [pc, #584]	@ (800d9d0 <Device_Init+0x358>)
 800d786:	4b8c      	ldr	r3, [pc, #560]	@ (800d9b8 <Device_Init+0x340>)
 800d788:	0019      	movs	r1, r3
 800d78a:	2003      	movs	r0, #3
 800d78c:	f006 fb94 	bl	8013eb8 <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800d790:	f7fd fd2e 	bl	800b1f0 <AHT20_DeviceConnected>
 800d794:	0003      	movs	r3, r0
 800d796:	001a      	movs	r2, r3
 800d798:	2301      	movs	r3, #1
 800d79a:	4053      	eors	r3, r2
 800d79c:	b2db      	uxtb	r3, r3
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d00c      	beq.n	800d7bc <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800d7a2:	4a8c      	ldr	r2, [pc, #560]	@ (800d9d4 <Device_Init+0x35c>)
 800d7a4:	4b80      	ldr	r3, [pc, #512]	@ (800d9a8 <Device_Init+0x330>)
 800d7a6:	0019      	movs	r1, r3
 800d7a8:	2001      	movs	r0, #1
 800d7aa:	f006 fb85 	bl	8013eb8 <CreateLine>
     SensorProbe.AHT20_Present = false;
 800d7ae:	4b7f      	ldr	r3, [pc, #508]	@ (800d9ac <Device_Init+0x334>)
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800d7b4:	4b7e      	ldr	r3, [pc, #504]	@ (800d9b0 <Device_Init+0x338>)
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	711a      	strb	r2, [r3, #4]
 800d7ba:	e008      	b.n	800d7ce <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800d7bc:	4b7b      	ldr	r3, [pc, #492]	@ (800d9ac <Device_Init+0x334>)
 800d7be:	2201      	movs	r2, #1
 800d7c0:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800d7c2:	4a85      	ldr	r2, [pc, #532]	@ (800d9d8 <Device_Init+0x360>)
 800d7c4:	4b7c      	ldr	r3, [pc, #496]	@ (800d9b8 <Device_Init+0x340>)
 800d7c6:	0019      	movs	r1, r3
 800d7c8:	2003      	movs	r0, #3
 800d7ca:	f006 fb75 	bl	8013eb8 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800d7ce:	4b77      	ldr	r3, [pc, #476]	@ (800d9ac <Device_Init+0x334>)
 800d7d0:	785b      	ldrb	r3, [r3, #1]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d009      	beq.n	800d7ea <Device_Init+0x172>
 800d7d6:	4b75      	ldr	r3, [pc, #468]	@ (800d9ac <Device_Init+0x334>)
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d005      	beq.n	800d7ea <Device_Init+0x172>
    SetDBLED(false, true, false);
 800d7de:	2200      	movs	r2, #0
 800d7e0:	2101      	movs	r1, #1
 800d7e2:	2000      	movs	r0, #0
 800d7e4:	f005 f874 	bl	80128d0 <SetDBLED>
 800d7e8:	e018      	b.n	800d81c <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	2100      	movs	r1, #0
 800d7ee:	2001      	movs	r0, #1
 800d7f0:	f005 f86e 	bl	80128d0 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800d7f4:	4b79      	ldr	r3, [pc, #484]	@ (800d9dc <Device_Init+0x364>)
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	2101      	movs	r1, #1
 800d7fa:	0018      	movs	r0, r3
 800d7fc:	f008 fb43 	bl	8015e86 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800d800:	2380      	movs	r3, #128	@ 0x80
 800d802:	005b      	lsls	r3, r3, #1
 800d804:	4875      	ldr	r0, [pc, #468]	@ (800d9dc <Device_Init+0x364>)
 800d806:	2201      	movs	r2, #1
 800d808:	0019      	movs	r1, r3
 800d80a:	f008 fb3c 	bl	8015e86 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800d80e:	2380      	movs	r3, #128	@ 0x80
 800d810:	009b      	lsls	r3, r3, #2
 800d812:	4872      	ldr	r0, [pc, #456]	@ (800d9dc <Device_Init+0x364>)
 800d814:	2201      	movs	r2, #1
 800d816:	0019      	movs	r1, r3
 800d818:	f008 fb35 	bl	8015e86 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800d81c:	4b64      	ldr	r3, [pc, #400]	@ (800d9b0 <Device_Init+0x338>)
 800d81e:	78db      	ldrb	r3, [r3, #3]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d028      	beq.n	800d876 <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800d824:	4a6e      	ldr	r2, [pc, #440]	@ (800d9e0 <Device_Init+0x368>)
 800d826:	4b6f      	ldr	r3, [pc, #444]	@ (800d9e4 <Device_Init+0x36c>)
 800d828:	0019      	movs	r1, r3
 800d82a:	2002      	movs	r0, #2
 800d82c:	f006 fb44 	bl	8013eb8 <CreateLine>
    if (!enableMicrophone(true)) {
 800d830:	2001      	movs	r0, #1
 800d832:	f004 f937 	bl	8011aa4 <enableMicrophone>
 800d836:	0003      	movs	r3, r0
 800d838:	001a      	movs	r2, r3
 800d83a:	2301      	movs	r3, #1
 800d83c:	4053      	eors	r3, r2
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	2b00      	cmp	r3, #0
 800d842:	d00c      	beq.n	800d85e <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800d844:	4a68      	ldr	r2, [pc, #416]	@ (800d9e8 <Device_Init+0x370>)
 800d846:	4b58      	ldr	r3, [pc, #352]	@ (800d9a8 <Device_Init+0x330>)
 800d848:	0019      	movs	r1, r3
 800d84a:	2001      	movs	r0, #1
 800d84c:	f006 fb34 	bl	8013eb8 <CreateLine>
      SensorProbe.MIC_Present = false;
 800d850:	4b56      	ldr	r3, [pc, #344]	@ (800d9ac <Device_Init+0x334>)
 800d852:	2200      	movs	r2, #0
 800d854:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800d856:	4b56      	ldr	r3, [pc, #344]	@ (800d9b0 <Device_Init+0x338>)
 800d858:	2200      	movs	r2, #0
 800d85a:	70da      	strb	r2, [r3, #3]
 800d85c:	e00b      	b.n	800d876 <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800d85e:	4b53      	ldr	r3, [pc, #332]	@ (800d9ac <Device_Init+0x334>)
 800d860:	2201      	movs	r2, #1
 800d862:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800d864:	4b52      	ldr	r3, [pc, #328]	@ (800d9b0 <Device_Init+0x338>)
 800d866:	2201      	movs	r2, #1
 800d868:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800d86a:	4a60      	ldr	r2, [pc, #384]	@ (800d9ec <Device_Init+0x374>)
 800d86c:	4b52      	ldr	r3, [pc, #328]	@ (800d9b8 <Device_Init+0x340>)
 800d86e:	0019      	movs	r1, r3
 800d870:	2003      	movs	r0, #3
 800d872:	f006 fb21 	bl	8013eb8 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800d876:	f000 fff1 	bl	800e85c <probe_sen5x>
 800d87a:	1e03      	subs	r3, r0, #0
 800d87c:	d122      	bne.n	800d8c4 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800d87e:	4a5c      	ldr	r2, [pc, #368]	@ (800d9f0 <Device_Init+0x378>)
 800d880:	4b4d      	ldr	r3, [pc, #308]	@ (800d9b8 <Device_Init+0x340>)
 800d882:	0019      	movs	r1, r3
 800d884:	2003      	movs	r0, #3
 800d886:	f006 fb17 	bl	8013eb8 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800d88a:	4b48      	ldr	r3, [pc, #288]	@ (800d9ac <Device_Init+0x334>)
 800d88c:	2201      	movs	r2, #1
 800d88e:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800d890:	4b47      	ldr	r3, [pc, #284]	@ (800d9b0 <Device_Init+0x338>)
 800d892:	2201      	movs	r2, #1
 800d894:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d896:	4b57      	ldr	r3, [pc, #348]	@ (800d9f4 <Device_Init+0x37c>)
 800d898:	791b      	ldrb	r3, [r3, #4]
 800d89a:	2b34      	cmp	r3, #52	@ 0x34
 800d89c:	d003      	beq.n	800d8a6 <Device_Init+0x22e>
 800d89e:	4b55      	ldr	r3, [pc, #340]	@ (800d9f4 <Device_Init+0x37c>)
 800d8a0:	791b      	ldrb	r3, [r3, #4]
 800d8a2:	2b35      	cmp	r3, #53	@ 0x35
 800d8a4:	d11c      	bne.n	800d8e0 <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800d8a6:	4a54      	ldr	r2, [pc, #336]	@ (800d9f8 <Device_Init+0x380>)
 800d8a8:	4b4e      	ldr	r3, [pc, #312]	@ (800d9e4 <Device_Init+0x36c>)
 800d8aa:	0019      	movs	r1, r3
 800d8ac:	2002      	movs	r0, #2
 800d8ae:	f006 fb03 	bl	8013eb8 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800d8b2:	4b3f      	ldr	r3, [pc, #252]	@ (800d9b0 <Device_Init+0x338>)
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800d8b8:	4b3c      	ldr	r3, [pc, #240]	@ (800d9ac <Device_Init+0x334>)
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800d8be:	f003 fea7 	bl	8011610 <SGP_SoftReset>
 800d8c2:	e00d      	b.n	800d8e0 <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800d8c4:	f000 ff94 	bl	800e7f0 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800d8c8:	4a4c      	ldr	r2, [pc, #304]	@ (800d9fc <Device_Init+0x384>)
 800d8ca:	4b3b      	ldr	r3, [pc, #236]	@ (800d9b8 <Device_Init+0x340>)
 800d8cc:	0019      	movs	r1, r3
 800d8ce:	2003      	movs	r0, #3
 800d8d0:	f006 faf2 	bl	8013eb8 <CreateLine>
    SensorProbe.PM_Present = false;
 800d8d4:	4b35      	ldr	r3, [pc, #212]	@ (800d9ac <Device_Init+0x334>)
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800d8da:	4b35      	ldr	r3, [pc, #212]	@ (800d9b0 <Device_Init+0x338>)
 800d8dc:	2200      	movs	r2, #0
 800d8de:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800d8e0:	4b32      	ldr	r3, [pc, #200]	@ (800d9ac <Device_Init+0x334>)
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d001      	beq.n	800d8ec <Device_Init+0x274>
 800d8e8:	4b45      	ldr	r3, [pc, #276]	@ (800da00 <Device_Init+0x388>)
 800d8ea:	e000      	b.n	800d8ee <Device_Init+0x276>
 800d8ec:	4b45      	ldr	r3, [pc, #276]	@ (800da04 <Device_Init+0x38c>)
 800d8ee:	4a46      	ldr	r2, [pc, #280]	@ (800da08 <Device_Init+0x390>)
 800d8f0:	493c      	ldr	r1, [pc, #240]	@ (800d9e4 <Device_Init+0x36c>)
 800d8f2:	2002      	movs	r0, #2
 800d8f4:	f006 fae0 	bl	8013eb8 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800d8f8:	4b2c      	ldr	r3, [pc, #176]	@ (800d9ac <Device_Init+0x334>)
 800d8fa:	785b      	ldrb	r3, [r3, #1]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d001      	beq.n	800d904 <Device_Init+0x28c>
 800d900:	4b3f      	ldr	r3, [pc, #252]	@ (800da00 <Device_Init+0x388>)
 800d902:	e000      	b.n	800d906 <Device_Init+0x28e>
 800d904:	4b3f      	ldr	r3, [pc, #252]	@ (800da04 <Device_Init+0x38c>)
 800d906:	4a41      	ldr	r2, [pc, #260]	@ (800da0c <Device_Init+0x394>)
 800d908:	4936      	ldr	r1, [pc, #216]	@ (800d9e4 <Device_Init+0x36c>)
 800d90a:	2002      	movs	r0, #2
 800d90c:	f006 fad4 	bl	8013eb8 <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800d910:	4b26      	ldr	r3, [pc, #152]	@ (800d9ac <Device_Init+0x334>)
 800d912:	789b      	ldrb	r3, [r3, #2]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d001      	beq.n	800d91c <Device_Init+0x2a4>
 800d918:	4b39      	ldr	r3, [pc, #228]	@ (800da00 <Device_Init+0x388>)
 800d91a:	e000      	b.n	800d91e <Device_Init+0x2a6>
 800d91c:	4b39      	ldr	r3, [pc, #228]	@ (800da04 <Device_Init+0x38c>)
 800d91e:	4a3c      	ldr	r2, [pc, #240]	@ (800da10 <Device_Init+0x398>)
 800d920:	4930      	ldr	r1, [pc, #192]	@ (800d9e4 <Device_Init+0x36c>)
 800d922:	2002      	movs	r0, #2
 800d924:	f006 fac8 	bl	8013eb8 <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800d928:	4b20      	ldr	r3, [pc, #128]	@ (800d9ac <Device_Init+0x334>)
 800d92a:	791b      	ldrb	r3, [r3, #4]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d001      	beq.n	800d934 <Device_Init+0x2bc>
 800d930:	4b33      	ldr	r3, [pc, #204]	@ (800da00 <Device_Init+0x388>)
 800d932:	e000      	b.n	800d936 <Device_Init+0x2be>
 800d934:	4b33      	ldr	r3, [pc, #204]	@ (800da04 <Device_Init+0x38c>)
 800d936:	4a37      	ldr	r2, [pc, #220]	@ (800da14 <Device_Init+0x39c>)
 800d938:	492a      	ldr	r1, [pc, #168]	@ (800d9e4 <Device_Init+0x36c>)
 800d93a:	2002      	movs	r0, #2
 800d93c:	f006 fabc 	bl	8013eb8 <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800d940:	4b1a      	ldr	r3, [pc, #104]	@ (800d9ac <Device_Init+0x334>)
 800d942:	78db      	ldrb	r3, [r3, #3]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d001      	beq.n	800d94c <Device_Init+0x2d4>
 800d948:	4b2d      	ldr	r3, [pc, #180]	@ (800da00 <Device_Init+0x388>)
 800d94a:	e000      	b.n	800d94e <Device_Init+0x2d6>
 800d94c:	4b2d      	ldr	r3, [pc, #180]	@ (800da04 <Device_Init+0x38c>)
 800d94e:	4a32      	ldr	r2, [pc, #200]	@ (800da18 <Device_Init+0x3a0>)
 800d950:	4924      	ldr	r1, [pc, #144]	@ (800d9e4 <Device_Init+0x36c>)
 800d952:	2002      	movs	r0, #2
 800d954:	f006 fab0 	bl	8013eb8 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800d958:	4b14      	ldr	r3, [pc, #80]	@ (800d9ac <Device_Init+0x334>)
 800d95a:	795b      	ldrb	r3, [r3, #5]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d001      	beq.n	800d964 <Device_Init+0x2ec>
 800d960:	4b27      	ldr	r3, [pc, #156]	@ (800da00 <Device_Init+0x388>)
 800d962:	e000      	b.n	800d966 <Device_Init+0x2ee>
 800d964:	4b27      	ldr	r3, [pc, #156]	@ (800da04 <Device_Init+0x38c>)
 800d966:	4a2d      	ldr	r2, [pc, #180]	@ (800da1c <Device_Init+0x3a4>)
 800d968:	491e      	ldr	r1, [pc, #120]	@ (800d9e4 <Device_Init+0x36c>)
 800d96a:	2002      	movs	r0, #2
 800d96c:	f006 faa4 	bl	8013eb8 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800d970:	4b0e      	ldr	r3, [pc, #56]	@ (800d9ac <Device_Init+0x334>)
 800d972:	799b      	ldrb	r3, [r3, #6]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d001      	beq.n	800d97c <Device_Init+0x304>
 800d978:	4b21      	ldr	r3, [pc, #132]	@ (800da00 <Device_Init+0x388>)
 800d97a:	e000      	b.n	800d97e <Device_Init+0x306>
 800d97c:	4b21      	ldr	r3, [pc, #132]	@ (800da04 <Device_Init+0x38c>)
 800d97e:	4a28      	ldr	r2, [pc, #160]	@ (800da20 <Device_Init+0x3a8>)
 800d980:	4918      	ldr	r1, [pc, #96]	@ (800d9e4 <Device_Init+0x36c>)
 800d982:	2002      	movs	r0, #2
 800d984:	f006 fa98 	bl	8013eb8 <CreateLine>
  Debug("Sensors initialized, probing ESP.");
 800d988:	4a26      	ldr	r2, [pc, #152]	@ (800da24 <Device_Init+0x3ac>)
 800d98a:	4b0b      	ldr	r3, [pc, #44]	@ (800d9b8 <Device_Init+0x340>)
 800d98c:	0019      	movs	r1, r3
 800d98e:	2003      	movs	r0, #3
 800d990:	f006 fa92 	bl	8013eb8 <CreateLine>
  ESP_Init(espUart);
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	0018      	movs	r0, r3
 800d998:	f7f7 fa50 	bl	8004e3c <ESP_Init>
}
 800d99c:	46c0      	nop			@ (mov r8, r8)
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	b004      	add	sp, #16
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	0802cd00 	.word	0x0802cd00
 800d9a8:	0802cd30 	.word	0x0802cd30
 800d9ac:	20001120 	.word	0x20001120
 800d9b0:	20001118 	.word	0x20001118
 800d9b4:	0802cd34 	.word	0x0802cd34
 800d9b8:	0802ccfc 	.word	0x0802ccfc
 800d9bc:	0802cd60 	.word	0x0802cd60
 800d9c0:	0802cd94 	.word	0x0802cd94
 800d9c4:	0802cdc4 	.word	0x0802cdc4
 800d9c8:	0802cde0 	.word	0x0802cde0
 800d9cc:	0802cdf8 	.word	0x0802cdf8
 800d9d0:	0802ce14 	.word	0x0802ce14
 800d9d4:	0802ce2c 	.word	0x0802ce2c
 800d9d8:	0802ce60 	.word	0x0802ce60
 800d9dc:	50000400 	.word	0x50000400
 800d9e0:	0802ce94 	.word	0x0802ce94
 800d9e4:	0802ceb8 	.word	0x0802ceb8
 800d9e8:	0802cebc 	.word	0x0802cebc
 800d9ec:	0802cee8 	.word	0x0802cee8
 800d9f0:	0802cf14 	.word	0x0802cf14
 800d9f4:	200011c0 	.word	0x200011c0
 800d9f8:	0802cf2c 	.word	0x0802cf2c
 800d9fc:	0802cf7c 	.word	0x0802cf7c
 800da00:	0802cfa0 	.word	0x0802cfa0
 800da04:	0802cfa4 	.word	0x0802cfa4
 800da08:	0802cfa8 	.word	0x0802cfa8
 800da0c:	0802cfc4 	.word	0x0802cfc4
 800da10:	0802cfe0 	.word	0x0802cfe0
 800da14:	0802d000 	.word	0x0802d000
 800da18:	0802d020 	.word	0x0802d020
 800da1c:	0802d040 	.word	0x0802d040
 800da20:	0802d05c 	.word	0x0802d05c
 800da24:	0802d078 	.word	0x0802d078

0800da28 <Device_Test>:

void Device_Test(){
 800da28:	b580      	push	{r7, lr}
 800da2a:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800da2c:	4b34      	ldr	r3, [pc, #208]	@ (800db00 <Device_Test+0xd8>)
 800da2e:	799b      	ldrb	r3, [r3, #6]
 800da30:	2201      	movs	r2, #1
 800da32:	4053      	eors	r3, r2
 800da34:	b2db      	uxtb	r3, r3
 800da36:	2b00      	cmp	r3, #0
 800da38:	d027      	beq.n	800da8a <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800da3a:	f000 fc41 	bl	800e2c0 <MIC_TestMeasurementDone>
 800da3e:	1e03      	subs	r3, r0, #0
 800da40:	d011      	beq.n	800da66 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800da42:	4b2f      	ldr	r3, [pc, #188]	@ (800db00 <Device_Test+0xd8>)
 800da44:	2201      	movs	r2, #1
 800da46:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800da48:	4b2e      	ldr	r3, [pc, #184]	@ (800db04 <Device_Test+0xdc>)
 800da4a:	2201      	movs	r2, #1
 800da4c:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800da4e:	f004 fec9 	bl	80127e4 <Calculate_LED_ON>
 800da52:	0003      	movs	r3, r0
 800da54:	0019      	movs	r1, r3
 800da56:	23fa      	movs	r3, #250	@ 0xfa
 800da58:	011a      	lsls	r2, r3, #4
 800da5a:	23fa      	movs	r3, #250	@ 0xfa
 800da5c:	011b      	lsls	r3, r3, #4
 800da5e:	0018      	movs	r0, r3
 800da60:	f004 ff08 	bl	8012874 <SetStatusLED>
 800da64:	e011      	b.n	800da8a <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800da66:	f003 fff9 	bl	8011a5c <micSettlingComplete>
 800da6a:	1e03      	subs	r3, r0, #0
 800da6c:	d00d      	beq.n	800da8a <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800da6e:	4b25      	ldr	r3, [pc, #148]	@ (800db04 <Device_Test+0xdc>)
 800da70:	2201      	movs	r2, #1
 800da72:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800da74:	f004 feb6 	bl	80127e4 <Calculate_LED_ON>
 800da78:	0003      	movs	r3, r0
 800da7a:	0018      	movs	r0, r3
 800da7c:	23fa      	movs	r3, #250	@ 0xfa
 800da7e:	011a      	lsls	r2, r3, #4
 800da80:	23fa      	movs	r3, #250	@ 0xfa
 800da82:	011b      	lsls	r3, r3, #4
 800da84:	0019      	movs	r1, r3
 800da86:	f004 fef5 	bl	8012874 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800da8a:	4b1d      	ldr	r3, [pc, #116]	@ (800db00 <Device_Test+0xd8>)
 800da8c:	79db      	ldrb	r3, [r3, #7]
 800da8e:	2201      	movs	r2, #1
 800da90:	4053      	eors	r3, r2
 800da92:	b2db      	uxtb	r3, r3
 800da94:	2b00      	cmp	r3, #0
 800da96:	d001      	beq.n	800da9c <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800da98:	f7f9 fce6 	bl	8007468 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800da9c:	4b18      	ldr	r3, [pc, #96]	@ (800db00 <Device_Test+0xd8>)
 800da9e:	79db      	ldrb	r3, [r3, #7]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d003      	beq.n	800daac <Device_Test+0x84>
 800daa4:	4b16      	ldr	r3, [pc, #88]	@ (800db00 <Device_Test+0xd8>)
 800daa6:	799b      	ldrb	r3, [r3, #6]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d106      	bne.n	800daba <Device_Test+0x92>
 800daac:	4b16      	ldr	r3, [pc, #88]	@ (800db08 <Device_Test+0xe0>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	0018      	movs	r0, r3
 800dab2:	f006 f9ab 	bl	8013e0c <TimestampIsReached>
 800dab6:	1e03      	subs	r3, r0, #0
 800dab8:	d01f      	beq.n	800dafa <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800daba:	4b11      	ldr	r3, [pc, #68]	@ (800db00 <Device_Test+0xd8>)
 800dabc:	79db      	ldrb	r3, [r3, #7]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d001      	beq.n	800dac6 <Device_Test+0x9e>
 800dac2:	4b12      	ldr	r3, [pc, #72]	@ (800db0c <Device_Test+0xe4>)
 800dac4:	e000      	b.n	800dac8 <Device_Test+0xa0>
 800dac6:	4b12      	ldr	r3, [pc, #72]	@ (800db10 <Device_Test+0xe8>)
 800dac8:	4a12      	ldr	r2, [pc, #72]	@ (800db14 <Device_Test+0xec>)
 800daca:	4913      	ldr	r1, [pc, #76]	@ (800db18 <Device_Test+0xf0>)
 800dacc:	2002      	movs	r0, #2
 800dace:	f006 f9f3 	bl	8013eb8 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800dad2:	4b0b      	ldr	r3, [pc, #44]	@ (800db00 <Device_Test+0xd8>)
 800dad4:	799b      	ldrb	r3, [r3, #6]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d001      	beq.n	800dade <Device_Test+0xb6>
 800dada:	4b0c      	ldr	r3, [pc, #48]	@ (800db0c <Device_Test+0xe4>)
 800dadc:	e000      	b.n	800dae0 <Device_Test+0xb8>
 800dade:	4b0c      	ldr	r3, [pc, #48]	@ (800db10 <Device_Test+0xe8>)
 800dae0:	4a0e      	ldr	r2, [pc, #56]	@ (800db1c <Device_Test+0xf4>)
 800dae2:	490d      	ldr	r1, [pc, #52]	@ (800db18 <Device_Test+0xf0>)
 800dae4:	2002      	movs	r0, #2
 800dae6:	f006 f9e7 	bl	8013eb8 <CreateLine>
    Info("Test completed");
 800daea:	4a0d      	ldr	r2, [pc, #52]	@ (800db20 <Device_Test+0xf8>)
 800daec:	4b0a      	ldr	r3, [pc, #40]	@ (800db18 <Device_Test+0xf0>)
 800daee:	0019      	movs	r1, r3
 800daf0:	2002      	movs	r0, #2
 800daf2:	f006 f9e1 	bl	8013eb8 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800daf6:	f7ff f857 	bl	800cba8 <SetTestDone>
  }
}
 800dafa:	46c0      	nop			@ (mov r8, r8)
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	20001120 	.word	0x20001120
 800db04:	20001118 	.word	0x20001118
 800db08:	20001114 	.word	0x20001114
 800db0c:	0802d09c 	.word	0x0802d09c
 800db10:	0802d0a4 	.word	0x0802d0a4
 800db14:	0802d0ac 	.word	0x0802d0ac
 800db18:	0802ceb8 	.word	0x0802ceb8
 800db1c:	0802d0c0 	.word	0x0802d0c0
 800db20:	0802d0d4 	.word	0x0802d0d4

0800db24 <AllDevicesReady>:

bool AllDevicesReady() {
 800db24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db26:	46de      	mov	lr, fp
 800db28:	4657      	mov	r7, sl
 800db2a:	464e      	mov	r6, r9
 800db2c:	4645      	mov	r5, r8
 800db2e:	b5e0      	push	{r5, r6, r7, lr}
 800db30:	b08b      	sub	sp, #44	@ 0x2c
 800db32:	af08      	add	r7, sp, #32
  static bool prevstatus = true;
  static bool allinwait = false;
  static uint8_t iminute = 0;
  if (TimestampIsReached(deviceTimeOut)) {
 800db34:	4b8a      	ldr	r3, [pc, #552]	@ (800dd60 <AllDevicesReady+0x23c>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	0018      	movs	r0, r3
 800db3a:	f006 f967 	bl	8013e0c <TimestampIsReached>
 800db3e:	1e03      	subs	r3, r0, #0
 800db40:	d100      	bne.n	800db44 <AllDevicesReady+0x20>
 800db42:	e103      	b.n	800dd4c <AllDevicesReady+0x228>
    if (!sensorsdisablereq) {
 800db44:	4b87      	ldr	r3, [pc, #540]	@ (800dd64 <AllDevicesReady+0x240>)
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	2201      	movs	r2, #1
 800db4a:	4053      	eors	r3, r2
 800db4c:	b2db      	uxtb	r3, r3
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d008      	beq.n	800db64 <AllDevicesReady+0x40>
      Debug("Requesting all devices ready");
 800db52:	4a85      	ldr	r2, [pc, #532]	@ (800dd68 <AllDevicesReady+0x244>)
 800db54:	4b85      	ldr	r3, [pc, #532]	@ (800dd6c <AllDevicesReady+0x248>)
 800db56:	0019      	movs	r1, r3
 800db58:	2003      	movs	r0, #3
 800db5a:	f006 f9ad 	bl	8013eb8 <CreateLine>
      sensorsdisablereq = true;
 800db5e:	4b81      	ldr	r3, [pc, #516]	@ (800dd64 <AllDevicesReady+0x240>)
 800db60:	2201      	movs	r2, #1
 800db62:	701a      	strb	r2, [r3, #0]
    }
    if (HIDSstate == HIDS_STATE_WAIT) {
 800db64:	4b82      	ldr	r3, [pc, #520]	@ (800dd70 <AllDevicesReady+0x24c>)
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	2b06      	cmp	r3, #6
 800db6a:	d102      	bne.n	800db72 <AllDevicesReady+0x4e>
      Sensor.HT_measurementEnabled = false;
 800db6c:	4b81      	ldr	r3, [pc, #516]	@ (800dd74 <AllDevicesReady+0x250>)
 800db6e:	2200      	movs	r2, #0
 800db70:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800db72:	4b81      	ldr	r3, [pc, #516]	@ (800dd78 <AllDevicesReady+0x254>)
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	2b05      	cmp	r3, #5
 800db78:	d006      	beq.n	800db88 <AllDevicesReady+0x64>
 800db7a:	4b80      	ldr	r3, [pc, #512]	@ (800dd7c <AllDevicesReady+0x258>)
 800db7c:	789b      	ldrb	r3, [r3, #2]
 800db7e:	2201      	movs	r2, #1
 800db80:	4053      	eors	r3, r2
 800db82:	b2db      	uxtb	r3, r3
 800db84:	2b00      	cmp	r3, #0
 800db86:	d002      	beq.n	800db8e <AllDevicesReady+0x6a>
      Sensor.AHT_measurementEnabled = false;
 800db88:	4b7a      	ldr	r3, [pc, #488]	@ (800dd74 <AllDevicesReady+0x250>)
 800db8a:	2200      	movs	r2, #0
 800db8c:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800db8e:	4b7c      	ldr	r3, [pc, #496]	@ (800dd80 <AllDevicesReady+0x25c>)
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	2b02      	cmp	r3, #2
 800db94:	d006      	beq.n	800dba4 <AllDevicesReady+0x80>
 800db96:	4b79      	ldr	r3, [pc, #484]	@ (800dd7c <AllDevicesReady+0x258>)
 800db98:	791b      	ldrb	r3, [r3, #4]
 800db9a:	2201      	movs	r2, #1
 800db9c:	4053      	eors	r3, r2
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d002      	beq.n	800dbaa <AllDevicesReady+0x86>
      Sensor.BMP_measurementEnabled = false;
 800dba4:	4b73      	ldr	r3, [pc, #460]	@ (800dd74 <AllDevicesReady+0x250>)
 800dba6:	2200      	movs	r2, #0
 800dba8:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800dbaa:	4b76      	ldr	r3, [pc, #472]	@ (800dd84 <AllDevicesReady+0x260>)
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	2b08      	cmp	r3, #8
 800dbb0:	d006      	beq.n	800dbc0 <AllDevicesReady+0x9c>
 800dbb2:	4b72      	ldr	r3, [pc, #456]	@ (800dd7c <AllDevicesReady+0x258>)
 800dbb4:	78db      	ldrb	r3, [r3, #3]
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	4053      	eors	r3, r2
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d002      	beq.n	800dbc6 <AllDevicesReady+0xa2>
      Sensor.ENS_measurementEnabled = false;
 800dbc0:	4b6c      	ldr	r3, [pc, #432]	@ (800dd74 <AllDevicesReady+0x250>)
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800dbc6:	4b70      	ldr	r3, [pc, #448]	@ (800dd88 <AllDevicesReady+0x264>)
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	2b07      	cmp	r3, #7
 800dbcc:	d006      	beq.n	800dbdc <AllDevicesReady+0xb8>
 800dbce:	4b6b      	ldr	r3, [pc, #428]	@ (800dd7c <AllDevicesReady+0x258>)
 800dbd0:	7a1b      	ldrb	r3, [r3, #8]
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	4053      	eors	r3, r2
 800dbd6:	b2db      	uxtb	r3, r3
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d002      	beq.n	800dbe2 <AllDevicesReady+0xbe>
      Sensor.VOC_measurementEnabled = false;
 800dbdc:	4b65      	ldr	r3, [pc, #404]	@ (800dd74 <AllDevicesReady+0x250>)
 800dbde:	2200      	movs	r2, #0
 800dbe0:	705a      	strb	r2, [r3, #1]
    }
    if ((PMsamplesState == LIGHT_OUT) || (PMsamplesState == CHECK_SEN5X) || (PMsamplesState == S5X_DISABLED)) {
 800dbe2:	4b6a      	ldr	r3, [pc, #424]	@ (800dd8c <AllDevicesReady+0x268>)
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d007      	beq.n	800dbfa <AllDevicesReady+0xd6>
 800dbea:	4b68      	ldr	r3, [pc, #416]	@ (800dd8c <AllDevicesReady+0x268>)
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	2b03      	cmp	r3, #3
 800dbf0:	d003      	beq.n	800dbfa <AllDevicesReady+0xd6>
 800dbf2:	4b66      	ldr	r3, [pc, #408]	@ (800dd8c <AllDevicesReady+0x268>)
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d102      	bne.n	800dc00 <AllDevicesReady+0xdc>
      Sensor.PM_measurementEnabled = false;
 800dbfa:	4b5e      	ldr	r3, [pc, #376]	@ (800dd74 <AllDevicesReady+0x250>)
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800dc00:	4b63      	ldr	r3, [pc, #396]	@ (800dd90 <AllDevicesReady+0x26c>)
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	2b03      	cmp	r3, #3
 800dc06:	d102      	bne.n	800dc0e <AllDevicesReady+0xea>
      Sensor.MIC_measurementEnabled = false;
 800dc08:	4b5a      	ldr	r3, [pc, #360]	@ (800dd74 <AllDevicesReady+0x250>)
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	70da      	strb	r2, [r3, #3]
    }
    if ((ESPstate == ESP_STATE_RESET) || (ESPstate == ESP_STATE_INIT)) {
 800dc0e:	4b61      	ldr	r3, [pc, #388]	@ (800dd94 <AllDevicesReady+0x270>)
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	2b09      	cmp	r3, #9
 800dc14:	d004      	beq.n	800dc20 <AllDevicesReady+0xfc>
 800dc16:	4b5f      	ldr	r3, [pc, #380]	@ (800dd94 <AllDevicesReady+0x270>)
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	2b02      	cmp	r3, #2
 800dc1c:	d000      	beq.n	800dc20 <AllDevicesReady+0xfc>
 800dc1e:	e095      	b.n	800dd4c <AllDevicesReady+0x228>
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800dc20:	4b54      	ldr	r3, [pc, #336]	@ (800dd74 <AllDevicesReady+0x250>)
 800dc22:	781a      	ldrb	r2, [r3, #0]
 800dc24:	4b53      	ldr	r3, [pc, #332]	@ (800dd74 <AllDevicesReady+0x250>)
 800dc26:	785b      	ldrb	r3, [r3, #1]
 800dc28:	4313      	orrs	r3, r2
 800dc2a:	b2da      	uxtb	r2, r3
 800dc2c:	4b51      	ldr	r3, [pc, #324]	@ (800dd74 <AllDevicesReady+0x250>)
 800dc2e:	791b      	ldrb	r3, [r3, #4]
 800dc30:	4313      	orrs	r3, r2
 800dc32:	b2da      	uxtb	r2, r3
 800dc34:	4b4f      	ldr	r3, [pc, #316]	@ (800dd74 <AllDevicesReady+0x250>)
 800dc36:	795b      	ldrb	r3, [r3, #5]
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800dc3c:	4b4d      	ldr	r3, [pc, #308]	@ (800dd74 <AllDevicesReady+0x250>)
 800dc3e:	799b      	ldrb	r3, [r3, #6]
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800dc40:	4313      	orrs	r3, r2
 800dc42:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800dc44:	4b4b      	ldr	r3, [pc, #300]	@ (800dd74 <AllDevicesReady+0x250>)
 800dc46:	789b      	ldrb	r3, [r3, #2]
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	b2da      	uxtb	r2, r3
 800dc4c:	4b49      	ldr	r3, [pc, #292]	@ (800dd74 <AllDevicesReady+0x250>)
 800dc4e:	78db      	ldrb	r3, [r3, #3]
 800dc50:	4313      	orrs	r3, r2
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	1e5a      	subs	r2, r3, #1
 800dc56:	4193      	sbcs	r3, r2
 800dc58:	b2db      	uxtb	r3, r3
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	4053      	eors	r3, r2
 800dc5e:	b2db      	uxtb	r3, r3
 800dc60:	001a      	movs	r2, r3
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800dc62:	1dfb      	adds	r3, r7, #7
 800dc64:	701a      	strb	r2, [r3, #0]
 800dc66:	781a      	ldrb	r2, [r3, #0]
 800dc68:	2101      	movs	r1, #1
 800dc6a:	400a      	ands	r2, r1
 800dc6c:	701a      	strb	r2, [r3, #0]
      if (!status && ((prevstatus != status) || (iminute != lastminute))) {
 800dc6e:	1dfb      	adds	r3, r7, #7
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	2201      	movs	r2, #1
 800dc74:	4053      	eors	r3, r2
 800dc76:	b2db      	uxtb	r3, r3
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d03e      	beq.n	800dcfa <AllDevicesReady+0x1d6>
 800dc7c:	4b46      	ldr	r3, [pc, #280]	@ (800dd98 <AllDevicesReady+0x274>)
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	1dfa      	adds	r2, r7, #7
 800dc82:	7812      	ldrb	r2, [r2, #0]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d105      	bne.n	800dc94 <AllDevicesReady+0x170>
 800dc88:	4b44      	ldr	r3, [pc, #272]	@ (800dd9c <AllDevicesReady+0x278>)
 800dc8a:	781a      	ldrb	r2, [r3, #0]
 800dc8c:	4b44      	ldr	r3, [pc, #272]	@ (800dda0 <AllDevicesReady+0x27c>)
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d032      	beq.n	800dcfa <AllDevicesReady+0x1d6>
        Debug("HIDS %d, AHT %d, BMP %d, ENS %d, SGP %d,PM %d, MIC %d, Lock is from sensor column : %d (0 is FREE)",Sensor.HT_measurementEnabled, Sensor.AHT_measurementEnabled,
 800dc94:	4b37      	ldr	r3, [pc, #220]	@ (800dd74 <AllDevicesReady+0x250>)
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	469b      	mov	fp, r3
 800dc9a:	4b36      	ldr	r3, [pc, #216]	@ (800dd74 <AllDevicesReady+0x250>)
 800dc9c:	791b      	ldrb	r3, [r3, #4]
 800dc9e:	001c      	movs	r4, r3
 800dca0:	4b34      	ldr	r3, [pc, #208]	@ (800dd74 <AllDevicesReady+0x250>)
 800dca2:	795b      	ldrb	r3, [r3, #5]
 800dca4:	001d      	movs	r5, r3
 800dca6:	4b33      	ldr	r3, [pc, #204]	@ (800dd74 <AllDevicesReady+0x250>)
 800dca8:	799b      	ldrb	r3, [r3, #6]
 800dcaa:	001e      	movs	r6, r3
 800dcac:	4b31      	ldr	r3, [pc, #196]	@ (800dd74 <AllDevicesReady+0x250>)
 800dcae:	785b      	ldrb	r3, [r3, #1]
 800dcb0:	4698      	mov	r8, r3
 800dcb2:	4b30      	ldr	r3, [pc, #192]	@ (800dd74 <AllDevicesReady+0x250>)
 800dcb4:	789b      	ldrb	r3, [r3, #2]
 800dcb6:	4699      	mov	r9, r3
 800dcb8:	4b2e      	ldr	r3, [pc, #184]	@ (800dd74 <AllDevicesReady+0x250>)
 800dcba:	78db      	ldrb	r3, [r3, #3]
 800dcbc:	469a      	mov	sl, r3
 800dcbe:	f000 f915 	bl	800deec <getSensorLock>
 800dcc2:	0003      	movs	r3, r0
 800dcc4:	4a37      	ldr	r2, [pc, #220]	@ (800dda4 <AllDevicesReady+0x280>)
 800dcc6:	4929      	ldr	r1, [pc, #164]	@ (800dd6c <AllDevicesReady+0x248>)
 800dcc8:	9306      	str	r3, [sp, #24]
 800dcca:	4653      	mov	r3, sl
 800dccc:	9305      	str	r3, [sp, #20]
 800dcce:	464b      	mov	r3, r9
 800dcd0:	9304      	str	r3, [sp, #16]
 800dcd2:	4643      	mov	r3, r8
 800dcd4:	9303      	str	r3, [sp, #12]
 800dcd6:	9602      	str	r6, [sp, #8]
 800dcd8:	9501      	str	r5, [sp, #4]
 800dcda:	9400      	str	r4, [sp, #0]
 800dcdc:	465b      	mov	r3, fp
 800dcde:	2003      	movs	r0, #3
 800dce0:	f006 f8ea 	bl	8013eb8 <CreateLine>
          Sensor.BMP_measurementEnabled, Sensor.ENS_measurementEnabled, Sensor.VOC_measurementEnabled, Sensor.PM_measurementEnabled, Sensor.MIC_measurementEnabled, getSensorLock());
        prevstatus = status;
 800dce4:	4b2c      	ldr	r3, [pc, #176]	@ (800dd98 <AllDevicesReady+0x274>)
 800dce6:	1dfa      	adds	r2, r7, #7
 800dce8:	7812      	ldrb	r2, [r2, #0]
 800dcea:	701a      	strb	r2, [r3, #0]
        allinwait = false;
 800dcec:	4b2e      	ldr	r3, [pc, #184]	@ (800dda8 <AllDevicesReady+0x284>)
 800dcee:	2200      	movs	r2, #0
 800dcf0:	701a      	strb	r2, [r3, #0]
        iminute = lastminute;
 800dcf2:	4b2b      	ldr	r3, [pc, #172]	@ (800dda0 <AllDevicesReady+0x27c>)
 800dcf4:	781a      	ldrb	r2, [r3, #0]
 800dcf6:	4b29      	ldr	r3, [pc, #164]	@ (800dd9c <AllDevicesReady+0x278>)
 800dcf8:	701a      	strb	r2, [r3, #0]
      }
      if (status && !allinwait) {
 800dcfa:	1dfb      	adds	r3, r7, #7
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d021      	beq.n	800dd46 <AllDevicesReady+0x222>
 800dd02:	4b29      	ldr	r3, [pc, #164]	@ (800dda8 <AllDevicesReady+0x284>)
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	2201      	movs	r2, #1
 800dd08:	4053      	eors	r3, r2
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d01a      	beq.n	800dd46 <AllDevicesReady+0x222>
        Debug("All sensors in wait");
 800dd10:	4a26      	ldr	r2, [pc, #152]	@ (800ddac <AllDevicesReady+0x288>)
 800dd12:	4b16      	ldr	r3, [pc, #88]	@ (800dd6c <AllDevicesReady+0x248>)
 800dd14:	0019      	movs	r1, r3
 800dd16:	2003      	movs	r0, #3
 800dd18:	f006 f8ce 	bl	8013eb8 <CreateLine>
        prevstatus = status;
 800dd1c:	4b1e      	ldr	r3, [pc, #120]	@ (800dd98 <AllDevicesReady+0x274>)
 800dd1e:	1dfa      	adds	r2, r7, #7
 800dd20:	7812      	ldrb	r2, [r2, #0]
 800dd22:	701a      	strb	r2, [r3, #0]
        allinwait = true;
 800dd24:	4b20      	ldr	r3, [pc, #128]	@ (800dda8 <AllDevicesReady+0x284>)
 800dd26:	2201      	movs	r2, #1
 800dd28:	701a      	strb	r2, [r3, #0]
        if (sendpwrmaildate == getDate()) {
 800dd2a:	f7fc f897 	bl	8009e5c <getDate>
 800dd2e:	0003      	movs	r3, r0
 800dd30:	001a      	movs	r2, r3
 800dd32:	4b1f      	ldr	r3, [pc, #124]	@ (800ddb0 <AllDevicesReady+0x28c>)
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d105      	bne.n	800dd46 <AllDevicesReady+0x222>
          Info("Battery empty mail already send today");
 800dd3a:	4a1e      	ldr	r2, [pc, #120]	@ (800ddb4 <AllDevicesReady+0x290>)
 800dd3c:	4b1e      	ldr	r3, [pc, #120]	@ (800ddb8 <AllDevicesReady+0x294>)
 800dd3e:	0019      	movs	r1, r3
 800dd40:	2002      	movs	r0, #2
 800dd42:	f006 f8b9 	bl	8013eb8 <CreateLine>
        }

      }
      return status;
 800dd46:	1dfb      	adds	r3, r7, #7
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	e000      	b.n	800dd4e <AllDevicesReady+0x22a>
    }
  }
  return false;
 800dd4c:	2300      	movs	r3, #0
}
 800dd4e:	0018      	movs	r0, r3
 800dd50:	46bd      	mov	sp, r7
 800dd52:	b003      	add	sp, #12
 800dd54:	bcf0      	pop	{r4, r5, r6, r7}
 800dd56:	46bb      	mov	fp, r7
 800dd58:	46b2      	mov	sl, r6
 800dd5a:	46a9      	mov	r9, r5
 800dd5c:	46a0      	mov	r8, r4
 800dd5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd60:	20001114 	.word	0x20001114
 800dd64:	2000112f 	.word	0x2000112f
 800dd68:	0802d0e4 	.word	0x0802d0e4
 800dd6c:	0802ccfc 	.word	0x0802ccfc
 800dd70:	2000112b 	.word	0x2000112b
 800dd74:	20001118 	.word	0x20001118
 800dd78:	2000112c 	.word	0x2000112c
 800dd7c:	20001120 	.word	0x20001120
 800dd80:	2000112d 	.word	0x2000112d
 800dd84:	2000112e 	.word	0x2000112e
 800dd88:	2000112a 	.word	0x2000112a
 800dd8c:	200000aa 	.word	0x200000aa
 800dd90:	200010fb 	.word	0x200010fb
 800dd94:	200010fc 	.word	0x200010fc
 800dd98:	200000a8 	.word	0x200000a8
 800dd9c:	20001130 	.word	0x20001130
 800dda0:	20000e41 	.word	0x20000e41
 800dda4:	0802d104 	.word	0x0802d104
 800dda8:	20001131 	.word	0x20001131
 800ddac:	0802d168 	.word	0x0802d168
 800ddb0:	20001110 	.word	0x20001110
 800ddb4:	0802d17c 	.word	0x0802d17c
 800ddb8:	0802ceb8 	.word	0x0802ceb8

0800ddbc <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800ddc0:	4b25      	ldr	r3, [pc, #148]	@ (800de58 <EnabledConnectedDevices+0x9c>)
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d002      	beq.n	800ddce <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800ddc8:	4b24      	ldr	r3, [pc, #144]	@ (800de5c <EnabledConnectedDevices+0xa0>)
 800ddca:	2201      	movs	r2, #1
 800ddcc:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.AHT20_Present) && (AHTState != AHT_STATE_OFF)) {
 800ddce:	4b22      	ldr	r3, [pc, #136]	@ (800de58 <EnabledConnectedDevices+0x9c>)
 800ddd0:	789b      	ldrb	r3, [r3, #2]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d006      	beq.n	800dde4 <EnabledConnectedDevices+0x28>
 800ddd6:	4b22      	ldr	r3, [pc, #136]	@ (800de60 <EnabledConnectedDevices+0xa4>)
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d002      	beq.n	800dde4 <EnabledConnectedDevices+0x28>
    Sensor.AHT_measurementEnabled = true;
 800ddde:	4b1f      	ldr	r3, [pc, #124]	@ (800de5c <EnabledConnectedDevices+0xa0>)
 800dde0:	2201      	movs	r2, #1
 800dde2:	711a      	strb	r2, [r3, #4]
  }
//  if ((SensorProbe.AHT20_Present) && (AHTState == AHT_STATE_OFF)) {
//    Info("AHT2x sensor is disabled");
//  }
  if (SensorProbe.BMP280_Present) {
 800dde4:	4b1c      	ldr	r3, [pc, #112]	@ (800de58 <EnabledConnectedDevices+0x9c>)
 800dde6:	791b      	ldrb	r3, [r3, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d002      	beq.n	800ddf2 <EnabledConnectedDevices+0x36>
    Sensor.BMP_measurementEnabled = true;
 800ddec:	4b1b      	ldr	r3, [pc, #108]	@ (800de5c <EnabledConnectedDevices+0xa0>)
 800ddee:	2201      	movs	r2, #1
 800ddf0:	715a      	strb	r2, [r3, #5]
  }
  if (SensorProbe.ENS160_Present) {
 800ddf2:	4b19      	ldr	r3, [pc, #100]	@ (800de58 <EnabledConnectedDevices+0x9c>)
 800ddf4:	78db      	ldrb	r3, [r3, #3]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d002      	beq.n	800de00 <EnabledConnectedDevices+0x44>
    Sensor.ENS_measurementEnabled = true;
 800ddfa:	4b18      	ldr	r3, [pc, #96]	@ (800de5c <EnabledConnectedDevices+0xa0>)
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800de00:	4b15      	ldr	r3, [pc, #84]	@ (800de58 <EnabledConnectedDevices+0x9c>)
 800de02:	785b      	ldrb	r3, [r3, #1]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d006      	beq.n	800de16 <EnabledConnectedDevices+0x5a>
 800de08:	4b13      	ldr	r3, [pc, #76]	@ (800de58 <EnabledConnectedDevices+0x9c>)
 800de0a:	7a1b      	ldrb	r3, [r3, #8]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d002      	beq.n	800de16 <EnabledConnectedDevices+0x5a>
    Sensor.VOC_measurementEnabled = true;
 800de10:	4b12      	ldr	r3, [pc, #72]	@ (800de5c <EnabledConnectedDevices+0xa0>)
 800de12:	2201      	movs	r2, #1
 800de14:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800de16:	4b10      	ldr	r3, [pc, #64]	@ (800de58 <EnabledConnectedDevices+0x9c>)
 800de18:	795b      	ldrb	r3, [r3, #5]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d002      	beq.n	800de24 <EnabledConnectedDevices+0x68>
    Sensor.PM_measurementEnabled = true;
 800de1e:	4b0f      	ldr	r3, [pc, #60]	@ (800de5c <EnabledConnectedDevices+0xa0>)
 800de20:	2201      	movs	r2, #1
 800de22:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800de24:	4b0c      	ldr	r3, [pc, #48]	@ (800de58 <EnabledConnectedDevices+0x9c>)
 800de26:	799b      	ldrb	r3, [r3, #6]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d002      	beq.n	800de32 <EnabledConnectedDevices+0x76>
    Sensor.MIC_measurementEnabled = true;
 800de2c:	4b0b      	ldr	r3, [pc, #44]	@ (800de5c <EnabledConnectedDevices+0xa0>)
 800de2e:	2201      	movs	r2, #1
 800de30:	70da      	strb	r2, [r3, #3]
  }
  deviceTimeOut = HAL_GetTick() + 1200000;
 800de32:	f006 fdc1 	bl	80149b8 <HAL_GetTick>
 800de36:	0003      	movs	r3, r0
 800de38:	4a0a      	ldr	r2, [pc, #40]	@ (800de64 <EnabledConnectedDevices+0xa8>)
 800de3a:	189a      	adds	r2, r3, r2
 800de3c:	4b0a      	ldr	r3, [pc, #40]	@ (800de68 <EnabledConnectedDevices+0xac>)
 800de3e:	601a      	str	r2, [r3, #0]
  sensorsdisablereq = false;
 800de40:	4b0a      	ldr	r3, [pc, #40]	@ (800de6c <EnabledConnectedDevices+0xb0>)
 800de42:	2200      	movs	r2, #0
 800de44:	701a      	strb	r2, [r3, #0]
  Debug("Sensors enabled");
 800de46:	4a0a      	ldr	r2, [pc, #40]	@ (800de70 <EnabledConnectedDevices+0xb4>)
 800de48:	4b0a      	ldr	r3, [pc, #40]	@ (800de74 <EnabledConnectedDevices+0xb8>)
 800de4a:	0019      	movs	r1, r3
 800de4c:	2003      	movs	r0, #3
 800de4e:	f006 f833 	bl	8013eb8 <CreateLine>
}
 800de52:	46c0      	nop			@ (mov r8, r8)
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}
 800de58:	20001120 	.word	0x20001120
 800de5c:	20001118 	.word	0x20001118
 800de60:	2000009f 	.word	0x2000009f
 800de64:	00124f80 	.word	0x00124f80
 800de68:	20001114 	.word	0x20001114
 800de6c:	2000112f 	.word	0x2000112f
 800de70:	0802d1a4 	.word	0x0802d1a4
 800de74:	0802ccfc 	.word	0x0802ccfc

0800de78 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800de78:	b580      	push	{r7, lr}
 800de7a:	af00      	add	r7, sp, #0
  Sensor.HT_measurementEnabled = false;
 800de7c:	4b0e      	ldr	r3, [pc, #56]	@ (800deb8 <DisableConnectedDevices+0x40>)
 800de7e:	2200      	movs	r2, #0
 800de80:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800de82:	4b0d      	ldr	r3, [pc, #52]	@ (800deb8 <DisableConnectedDevices+0x40>)
 800de84:	2200      	movs	r2, #0
 800de86:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800de88:	4b0b      	ldr	r3, [pc, #44]	@ (800deb8 <DisableConnectedDevices+0x40>)
 800de8a:	2200      	movs	r2, #0
 800de8c:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800de8e:	4b0a      	ldr	r3, [pc, #40]	@ (800deb8 <DisableConnectedDevices+0x40>)
 800de90:	2200      	movs	r2, #0
 800de92:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800de94:	4b08      	ldr	r3, [pc, #32]	@ (800deb8 <DisableConnectedDevices+0x40>)
 800de96:	2200      	movs	r2, #0
 800de98:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800de9a:	4b07      	ldr	r3, [pc, #28]	@ (800deb8 <DisableConnectedDevices+0x40>)
 800de9c:	2200      	movs	r2, #0
 800de9e:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800dea0:	4b05      	ldr	r3, [pc, #20]	@ (800deb8 <DisableConnectedDevices+0x40>)
 800dea2:	2200      	movs	r2, #0
 800dea4:	70da      	strb	r2, [r3, #3]
  Debug("Sensors disabled");
 800dea6:	4a05      	ldr	r2, [pc, #20]	@ (800debc <DisableConnectedDevices+0x44>)
 800dea8:	4b05      	ldr	r3, [pc, #20]	@ (800dec0 <DisableConnectedDevices+0x48>)
 800deaa:	0019      	movs	r1, r3
 800deac:	2003      	movs	r0, #3
 800deae:	f006 f803 	bl	8013eb8 <CreateLine>
}
 800deb2:	46c0      	nop			@ (mov r8, r8)
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	20001118 	.word	0x20001118
 800debc:	0802d1b4 	.word	0x0802d1b4
 800dec0:	0802ccfc 	.word	0x0802ccfc

0800dec4 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	0002      	movs	r2, r0
 800decc:	1dfb      	adds	r3, r7, #7
 800dece:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800ded0:	4b05      	ldr	r3, [pc, #20]	@ (800dee8 <setSensorLock+0x24>)
 800ded2:	1dfa      	adds	r2, r7, #7
 800ded4:	7812      	ldrb	r2, [r2, #0]
 800ded6:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10); // be sure the DMA of the previous has completed
 800ded8:	200a      	movs	r0, #10
 800deda:	f006 fd77 	bl	80149cc <HAL_Delay>
}
 800dede:	46c0      	nop			@ (mov r8, r8)
 800dee0:	46bd      	mov	sp, r7
 800dee2:	b002      	add	sp, #8
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	46c0      	nop			@ (mov r8, r8)
 800dee8:	20001129 	.word	0x20001129

0800deec <getSensorLock>:

uint8_t getSensorLock() {
 800deec:	b580      	push	{r7, lr}
 800deee:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800def0:	4b02      	ldr	r3, [pc, #8]	@ (800defc <getSensorLock+0x10>)
 800def2:	781b      	ldrb	r3, [r3, #0]
}
 800def4:	0018      	movs	r0, r3
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	46c0      	nop			@ (mov r8, r8)
 800defc:	20001129 	.word	0x20001129

0800df00 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800df00:	b580      	push	{r7, lr}
 800df02:	af00      	add	r7, sp, #0
//  Debug("Upkeep I2C Sensors");
  if (Sensor.HT_measurementEnabled) {
 800df04:	4b1a      	ldr	r3, [pc, #104]	@ (800df70 <UpkeepI2Csensors+0x70>)
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d005      	beq.n	800df18 <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800df0c:	f006 fbd2 	bl	80146b4 <HIDS_Upkeep>
 800df10:	0003      	movs	r3, r0
 800df12:	001a      	movs	r2, r3
 800df14:	4b17      	ldr	r3, [pc, #92]	@ (800df74 <UpkeepI2Csensors+0x74>)
 800df16:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800df18:	4b15      	ldr	r3, [pc, #84]	@ (800df70 <UpkeepI2Csensors+0x70>)
 800df1a:	785b      	ldrb	r3, [r3, #1]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d005      	beq.n	800df2c <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800df20:	f003 fb9c 	bl	801165c <SGP_Upkeep>
 800df24:	0003      	movs	r3, r0
 800df26:	001a      	movs	r2, r3
 800df28:	4b13      	ldr	r3, [pc, #76]	@ (800df78 <UpkeepI2Csensors+0x78>)
 800df2a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800df2c:	4b10      	ldr	r3, [pc, #64]	@ (800df70 <UpkeepI2Csensors+0x70>)
 800df2e:	791b      	ldrb	r3, [r3, #4]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d005      	beq.n	800df40 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800df34:	f7fd fafa 	bl	800b52c <AHT_Upkeep>
 800df38:	0003      	movs	r3, r0
 800df3a:	001a      	movs	r2, r3
 800df3c:	4b0f      	ldr	r3, [pc, #60]	@ (800df7c <UpkeepI2Csensors+0x7c>)
 800df3e:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800df40:	4b0b      	ldr	r3, [pc, #44]	@ (800df70 <UpkeepI2Csensors+0x70>)
 800df42:	795b      	ldrb	r3, [r3, #5]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d005      	beq.n	800df54 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800df48:	f7fd ff86 	bl	800be58 <BMP_Upkeep>
 800df4c:	0003      	movs	r3, r0
 800df4e:	001a      	movs	r2, r3
 800df50:	4b0b      	ldr	r3, [pc, #44]	@ (800df80 <UpkeepI2Csensors+0x80>)
 800df52:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800df54:	4b06      	ldr	r3, [pc, #24]	@ (800df70 <UpkeepI2Csensors+0x70>)
 800df56:	799b      	ldrb	r3, [r3, #6]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d005      	beq.n	800df68 <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800df5c:	f7f6 fa7c 	bl	8004458 <ENS_Upkeep>
 800df60:	0003      	movs	r3, r0
 800df62:	001a      	movs	r2, r3
 800df64:	4b07      	ldr	r3, [pc, #28]	@ (800df84 <UpkeepI2Csensors+0x84>)
 800df66:	701a      	strb	r2, [r3, #0]
  }
}
 800df68:	46c0      	nop			@ (mov r8, r8)
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	46c0      	nop			@ (mov r8, r8)
 800df70:	20001118 	.word	0x20001118
 800df74:	2000112b 	.word	0x2000112b
 800df78:	2000112a 	.word	0x2000112a
 800df7c:	2000112c 	.word	0x2000112c
 800df80:	2000112d 	.word	0x2000112d
 800df84:	2000112e 	.word	0x2000112e

0800df88 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800df88:	b580      	push	{r7, lr}
 800df8a:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800df8c:	4b02      	ldr	r3, [pc, #8]	@ (800df98 <ResetdBAmax+0x10>)
 800df8e:	2200      	movs	r2, #0
 800df90:	601a      	str	r2, [r3, #0]
}
 800df92:	46c0      	nop			@ (mov r8, r8)
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}
 800df98:	20001178 	.word	0x20001178

0800df9c <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800dfa4:	f006 fd08 	bl	80149b8 <HAL_GetTick>
 800dfa8:	0002      	movs	r2, r0
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	18d2      	adds	r2, r2, r3
 800dfae:	4b03      	ldr	r3, [pc, #12]	@ (800dfbc <setMICTimeStamp+0x20>)
 800dfb0:	601a      	str	r2, [r3, #0]
}
 800dfb2:	46c0      	nop			@ (mov r8, r8)
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	b002      	add	sp, #8
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	46c0      	nop			@ (mov r8, r8)
 800dfbc:	20001180 	.word	0x20001180

0800dfc0 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	af00      	add	r7, sp, #0
  counter = 0;
 800dfc4:	4b05      	ldr	r3, [pc, #20]	@ (800dfdc <ResetDBACalculator+0x1c>)
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800dfca:	4b05      	ldr	r3, [pc, #20]	@ (800dfe0 <ResetDBACalculator+0x20>)
 800dfcc:	2201      	movs	r2, #1
 800dfce:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800dfd0:	4b04      	ldr	r3, [pc, #16]	@ (800dfe4 <ResetDBACalculator+0x24>)
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	701a      	strb	r2, [r3, #0]
}
 800dfd6:	46c0      	nop			@ (mov r8, r8)
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	2000117c 	.word	0x2000117c
 800dfe0:	200000a9 	.word	0x200000a9
 800dfe4:	2000117d 	.word	0x2000117d

0800dfe8 <MIC_Print>:

void MIC_Print(void) {
 800dfe8:	b5b0      	push	{r4, r5, r7, lr}
 800dfea:	b08c      	sub	sp, #48	@ 0x30
 800dfec:	af08      	add	r7, sp, #32
  dBA = dBValue; // dBValue is the actual sample
 800dfee:	4ba1      	ldr	r3, [pc, #644]	@ (800e274 <MIC_Print+0x28c>)
 800dff0:	681a      	ldr	r2, [r3, #0]
 800dff2:	4ba1      	ldr	r3, [pc, #644]	@ (800e278 <MIC_Print+0x290>)
 800dff4:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800dff6:	4ba1      	ldr	r3, [pc, #644]	@ (800e27c <MIC_Print+0x294>)
 800dff8:	781b      	ldrb	r3, [r3, #0]
 800dffa:	001a      	movs	r2, r3
 800dffc:	4b9e      	ldr	r3, [pc, #632]	@ (800e278 <MIC_Print+0x290>)
 800dffe:	6819      	ldr	r1, [r3, #0]
 800e000:	4b9f      	ldr	r3, [pc, #636]	@ (800e280 <MIC_Print+0x298>)
 800e002:	0092      	lsls	r2, r2, #2
 800e004:	50d1      	str	r1, [r2, r3]
  counter++;
 800e006:	4b9d      	ldr	r3, [pc, #628]	@ (800e27c <MIC_Print+0x294>)
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	3301      	adds	r3, #1
 800e00c:	b2da      	uxtb	r2, r3
 800e00e:	4b9b      	ldr	r3, [pc, #620]	@ (800e27c <MIC_Print+0x294>)
 800e010:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800e012:	4b9a      	ldr	r3, [pc, #616]	@ (800e27c <MIC_Print+0x294>)
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	2b09      	cmp	r3, #9
 800e018:	d80b      	bhi.n	800e032 <MIC_Print+0x4a>
 800e01a:	4b9a      	ldr	r3, [pc, #616]	@ (800e284 <MIC_Print+0x29c>)
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	2201      	movs	r2, #1
 800e020:	4053      	eors	r3, r2
 800e022:	b2db      	uxtb	r3, r3
 800e024:	2b00      	cmp	r3, #0
 800e026:	d004      	beq.n	800e032 <MIC_Print+0x4a>
    denominator = counter;
 800e028:	4b94      	ldr	r3, [pc, #592]	@ (800e27c <MIC_Print+0x294>)
 800e02a:	781a      	ldrb	r2, [r3, #0]
 800e02c:	4b96      	ldr	r3, [pc, #600]	@ (800e288 <MIC_Print+0x2a0>)
 800e02e:	701a      	strb	r2, [r3, #0]
 800e030:	e005      	b.n	800e03e <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800e032:	4b95      	ldr	r3, [pc, #596]	@ (800e288 <MIC_Print+0x2a0>)
 800e034:	220a      	movs	r2, #10
 800e036:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800e038:	4b92      	ldr	r3, [pc, #584]	@ (800e284 <MIC_Print+0x29c>)
 800e03a:	2201      	movs	r2, #1
 800e03c:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800e03e:	4b93      	ldr	r3, [pc, #588]	@ (800e28c <MIC_Print+0x2a4>)
 800e040:	2200      	movs	r2, #0
 800e042:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800e044:	230f      	movs	r3, #15
 800e046:	18fb      	adds	r3, r7, r3
 800e048:	2200      	movs	r2, #0
 800e04a:	701a      	strb	r2, [r3, #0]
 800e04c:	e042      	b.n	800e0d4 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800e04e:	240f      	movs	r4, #15
 800e050:	193b      	adds	r3, r7, r4
 800e052:	781a      	ldrb	r2, [r3, #0]
 800e054:	4b8a      	ldr	r3, [pc, #552]	@ (800e280 <MIC_Print+0x298>)
 800e056:	0092      	lsls	r2, r2, #2
 800e058:	58d2      	ldr	r2, [r2, r3]
 800e05a:	4b8c      	ldr	r3, [pc, #560]	@ (800e28c <MIC_Print+0x2a4>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	1c19      	adds	r1, r3, #0
 800e060:	1c10      	adds	r0, r2, #0
 800e062:	f7f2 fc2d 	bl	80008c0 <__aeabi_fadd>
 800e066:	1c03      	adds	r3, r0, #0
 800e068:	1c1a      	adds	r2, r3, #0
 800e06a:	4b88      	ldr	r3, [pc, #544]	@ (800e28c <MIC_Print+0x2a4>)
 800e06c:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800e06e:	193b      	adds	r3, r7, r4
 800e070:	781a      	ldrb	r2, [r3, #0]
 800e072:	4b83      	ldr	r3, [pc, #524]	@ (800e280 <MIC_Print+0x298>)
 800e074:	0092      	lsls	r2, r2, #2
 800e076:	58d2      	ldr	r2, [r2, r3]
 800e078:	4b85      	ldr	r3, [pc, #532]	@ (800e290 <MIC_Print+0x2a8>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	1c19      	adds	r1, r3, #0
 800e07e:	1c10      	adds	r0, r2, #0
 800e080:	f7f2 fa6a 	bl	8000558 <__aeabi_fcmpgt>
 800e084:	1e03      	subs	r3, r0, #0
 800e086:	d006      	beq.n	800e096 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800e088:	193b      	adds	r3, r7, r4
 800e08a:	781a      	ldrb	r2, [r3, #0]
 800e08c:	4b7c      	ldr	r3, [pc, #496]	@ (800e280 <MIC_Print+0x298>)
 800e08e:	0092      	lsls	r2, r2, #2
 800e090:	58d2      	ldr	r2, [r2, r3]
 800e092:	4b7f      	ldr	r3, [pc, #508]	@ (800e290 <MIC_Print+0x2a8>)
 800e094:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800e096:	4b7d      	ldr	r3, [pc, #500]	@ (800e28c <MIC_Print+0x2a4>)
 800e098:	681c      	ldr	r4, [r3, #0]
 800e09a:	4b7b      	ldr	r3, [pc, #492]	@ (800e288 <MIC_Print+0x2a0>)
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	0018      	movs	r0, r3
 800e0a0:	f7f3 fc12 	bl	80018c8 <__aeabi_ui2f>
 800e0a4:	1c03      	adds	r3, r0, #0
 800e0a6:	1c19      	adds	r1, r3, #0
 800e0a8:	1c20      	adds	r0, r4, #0
 800e0aa:	f7f2 fdfb 	bl	8000ca4 <__aeabi_fdiv>
 800e0ae:	1c03      	adds	r3, r0, #0
 800e0b0:	1c1a      	adds	r2, r3, #0
 800e0b2:	4b78      	ldr	r3, [pc, #480]	@ (800e294 <MIC_Print+0x2ac>)
 800e0b4:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800e0b6:	4b70      	ldr	r3, [pc, #448]	@ (800e278 <MIC_Print+0x290>)
 800e0b8:	6818      	ldr	r0, [r3, #0]
 800e0ba:	4b75      	ldr	r3, [pc, #468]	@ (800e290 <MIC_Print+0x2a8>)
 800e0bc:	6819      	ldr	r1, [r3, #0]
 800e0be:	4b75      	ldr	r3, [pc, #468]	@ (800e294 <MIC_Print+0x2ac>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	1c1a      	adds	r2, r3, #0
 800e0c4:	f7f6 fd68 	bl	8004b98 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800e0c8:	210f      	movs	r1, #15
 800e0ca:	187b      	adds	r3, r7, r1
 800e0cc:	781a      	ldrb	r2, [r3, #0]
 800e0ce:	187b      	adds	r3, r7, r1
 800e0d0:	3201      	adds	r2, #1
 800e0d2:	701a      	strb	r2, [r3, #0]
 800e0d4:	4b6c      	ldr	r3, [pc, #432]	@ (800e288 <MIC_Print+0x2a0>)
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	220f      	movs	r2, #15
 800e0da:	18ba      	adds	r2, r7, r2
 800e0dc:	7812      	ldrb	r2, [r2, #0]
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d3b5      	bcc.n	800e04e <MIC_Print+0x66>
  }
  Info("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f", dBA,mPabuffer, dBAmax, dBAAverage);
 800e0e2:	4b65      	ldr	r3, [pc, #404]	@ (800e278 <MIC_Print+0x290>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	1c18      	adds	r0, r3, #0
 800e0e8:	f7f5 fbd4 	bl	8003894 <__aeabi_f2d>
 800e0ec:	0004      	movs	r4, r0
 800e0ee:	000d      	movs	r5, r1
 800e0f0:	4b67      	ldr	r3, [pc, #412]	@ (800e290 <MIC_Print+0x2a8>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	1c18      	adds	r0, r3, #0
 800e0f6:	f7f5 fbcd 	bl	8003894 <__aeabi_f2d>
 800e0fa:	6038      	str	r0, [r7, #0]
 800e0fc:	6079      	str	r1, [r7, #4]
 800e0fe:	4b65      	ldr	r3, [pc, #404]	@ (800e294 <MIC_Print+0x2ac>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	1c18      	adds	r0, r3, #0
 800e104:	f7f5 fbc6 	bl	8003894 <__aeabi_f2d>
 800e108:	0002      	movs	r2, r0
 800e10a:	000b      	movs	r3, r1
 800e10c:	4862      	ldr	r0, [pc, #392]	@ (800e298 <MIC_Print+0x2b0>)
 800e10e:	4963      	ldr	r1, [pc, #396]	@ (800e29c <MIC_Print+0x2b4>)
 800e110:	9206      	str	r2, [sp, #24]
 800e112:	9307      	str	r3, [sp, #28]
 800e114:	683a      	ldr	r2, [r7, #0]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	9204      	str	r2, [sp, #16]
 800e11a:	9305      	str	r3, [sp, #20]
 800e11c:	4b60      	ldr	r3, [pc, #384]	@ (800e2a0 <MIC_Print+0x2b8>)
 800e11e:	9302      	str	r3, [sp, #8]
 800e120:	9400      	str	r4, [sp, #0]
 800e122:	9501      	str	r5, [sp, #4]
 800e124:	0002      	movs	r2, r0
 800e126:	2002      	movs	r0, #2
 800e128:	f005 fec6 	bl	8013eb8 <CreateLine>

  if(counter > NUMBER_OF_SAMPLES){
 800e12c:	4b53      	ldr	r3, [pc, #332]	@ (800e27c <MIC_Print+0x294>)
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	2b0a      	cmp	r3, #10
 800e132:	d902      	bls.n	800e13a <MIC_Print+0x152>
    counter = 0;
 800e134:	4b51      	ldr	r3, [pc, #324]	@ (800e27c <MIC_Print+0x294>)
 800e136:	2200      	movs	r2, #0
 800e138:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800e13a:	4b4f      	ldr	r3, [pc, #316]	@ (800e278 <MIC_Print+0x290>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	4959      	ldr	r1, [pc, #356]	@ (800e2a4 <MIC_Print+0x2bc>)
 800e140:	1c18      	adds	r0, r3, #0
 800e142:	f7f2 fa13 	bl	800056c <__aeabi_fcmpge>
 800e146:	1e03      	subs	r3, r0, #0
 800e148:	d004      	beq.n	800e154 <MIC_Print+0x16c>
    SetDBLED(true, true, true);
 800e14a:	2201      	movs	r2, #1
 800e14c:	2101      	movs	r1, #1
 800e14e:	2001      	movs	r0, #1
 800e150:	f004 fbbe 	bl	80128d0 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800e154:	4b48      	ldr	r3, [pc, #288]	@ (800e278 <MIC_Print+0x290>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4953      	ldr	r1, [pc, #332]	@ (800e2a8 <MIC_Print+0x2c0>)
 800e15a:	1c18      	adds	r0, r3, #0
 800e15c:	f7f2 fa06 	bl	800056c <__aeabi_fcmpge>
 800e160:	1e03      	subs	r3, r0, #0
 800e162:	d00c      	beq.n	800e17e <MIC_Print+0x196>
 800e164:	4b44      	ldr	r3, [pc, #272]	@ (800e278 <MIC_Print+0x290>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	494e      	ldr	r1, [pc, #312]	@ (800e2a4 <MIC_Print+0x2bc>)
 800e16a:	1c18      	adds	r0, r3, #0
 800e16c:	f7f2 f9e0 	bl	8000530 <__aeabi_fcmplt>
 800e170:	1e03      	subs	r3, r0, #0
 800e172:	d004      	beq.n	800e17e <MIC_Print+0x196>
    SetDBLED(true, false, false);
 800e174:	2200      	movs	r2, #0
 800e176:	2100      	movs	r1, #0
 800e178:	2001      	movs	r0, #1
 800e17a:	f004 fba9 	bl	80128d0 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800e17e:	4b3e      	ldr	r3, [pc, #248]	@ (800e278 <MIC_Print+0x290>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	494a      	ldr	r1, [pc, #296]	@ (800e2ac <MIC_Print+0x2c4>)
 800e184:	1c18      	adds	r0, r3, #0
 800e186:	f7f2 f9f1 	bl	800056c <__aeabi_fcmpge>
 800e18a:	1e03      	subs	r3, r0, #0
 800e18c:	d00c      	beq.n	800e1a8 <MIC_Print+0x1c0>
 800e18e:	4b3a      	ldr	r3, [pc, #232]	@ (800e278 <MIC_Print+0x290>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	4945      	ldr	r1, [pc, #276]	@ (800e2a8 <MIC_Print+0x2c0>)
 800e194:	1c18      	adds	r0, r3, #0
 800e196:	f7f2 f9cb 	bl	8000530 <__aeabi_fcmplt>
 800e19a:	1e03      	subs	r3, r0, #0
 800e19c:	d004      	beq.n	800e1a8 <MIC_Print+0x1c0>
    SetDBLED(true, true, false);
 800e19e:	2200      	movs	r2, #0
 800e1a0:	2101      	movs	r1, #1
 800e1a2:	2001      	movs	r0, #1
 800e1a4:	f004 fb94 	bl	80128d0 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800e1a8:	4b33      	ldr	r3, [pc, #204]	@ (800e278 <MIC_Print+0x290>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	4940      	ldr	r1, [pc, #256]	@ (800e2b0 <MIC_Print+0x2c8>)
 800e1ae:	1c18      	adds	r0, r3, #0
 800e1b0:	f7f2 f9dc 	bl	800056c <__aeabi_fcmpge>
 800e1b4:	1e03      	subs	r3, r0, #0
 800e1b6:	d00c      	beq.n	800e1d2 <MIC_Print+0x1ea>
 800e1b8:	4b2f      	ldr	r3, [pc, #188]	@ (800e278 <MIC_Print+0x290>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	493b      	ldr	r1, [pc, #236]	@ (800e2ac <MIC_Print+0x2c4>)
 800e1be:	1c18      	adds	r0, r3, #0
 800e1c0:	f7f2 f9b6 	bl	8000530 <__aeabi_fcmplt>
 800e1c4:	1e03      	subs	r3, r0, #0
 800e1c6:	d004      	beq.n	800e1d2 <MIC_Print+0x1ea>
    SetDBLED(false, true, false);
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	2101      	movs	r1, #1
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	f004 fb7f 	bl	80128d0 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800e1d2:	4b29      	ldr	r3, [pc, #164]	@ (800e278 <MIC_Print+0x290>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	4937      	ldr	r1, [pc, #220]	@ (800e2b4 <MIC_Print+0x2cc>)
 800e1d8:	1c18      	adds	r0, r3, #0
 800e1da:	f7f2 f9c7 	bl	800056c <__aeabi_fcmpge>
 800e1de:	1e03      	subs	r3, r0, #0
 800e1e0:	d00c      	beq.n	800e1fc <MIC_Print+0x214>
 800e1e2:	4b25      	ldr	r3, [pc, #148]	@ (800e278 <MIC_Print+0x290>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	4932      	ldr	r1, [pc, #200]	@ (800e2b0 <MIC_Print+0x2c8>)
 800e1e8:	1c18      	adds	r0, r3, #0
 800e1ea:	f7f2 f9a1 	bl	8000530 <__aeabi_fcmplt>
 800e1ee:	1e03      	subs	r3, r0, #0
 800e1f0:	d004      	beq.n	800e1fc <MIC_Print+0x214>
    SetDBLED(false, true, true);
 800e1f2:	2201      	movs	r2, #1
 800e1f4:	2101      	movs	r1, #1
 800e1f6:	2000      	movs	r0, #0
 800e1f8:	f004 fb6a 	bl	80128d0 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800e1fc:	4b1e      	ldr	r3, [pc, #120]	@ (800e278 <MIC_Print+0x290>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	492d      	ldr	r1, [pc, #180]	@ (800e2b8 <MIC_Print+0x2d0>)
 800e202:	1c18      	adds	r0, r3, #0
 800e204:	f7f2 f9b2 	bl	800056c <__aeabi_fcmpge>
 800e208:	1e03      	subs	r3, r0, #0
 800e20a:	d00c      	beq.n	800e226 <MIC_Print+0x23e>
 800e20c:	4b1a      	ldr	r3, [pc, #104]	@ (800e278 <MIC_Print+0x290>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4928      	ldr	r1, [pc, #160]	@ (800e2b4 <MIC_Print+0x2cc>)
 800e212:	1c18      	adds	r0, r3, #0
 800e214:	f7f2 f98c 	bl	8000530 <__aeabi_fcmplt>
 800e218:	1e03      	subs	r3, r0, #0
 800e21a:	d004      	beq.n	800e226 <MIC_Print+0x23e>
    SetDBLED(false, false, true);
 800e21c:	2201      	movs	r2, #1
 800e21e:	2100      	movs	r1, #0
 800e220:	2000      	movs	r0, #0
 800e222:	f004 fb55 	bl	80128d0 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800e226:	4b14      	ldr	r3, [pc, #80]	@ (800e278 <MIC_Print+0x290>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4924      	ldr	r1, [pc, #144]	@ (800e2bc <MIC_Print+0x2d4>)
 800e22c:	1c18      	adds	r0, r3, #0
 800e22e:	f7f2 f99d 	bl	800056c <__aeabi_fcmpge>
 800e232:	1e03      	subs	r3, r0, #0
 800e234:	d00c      	beq.n	800e250 <MIC_Print+0x268>
 800e236:	4b10      	ldr	r3, [pc, #64]	@ (800e278 <MIC_Print+0x290>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	491f      	ldr	r1, [pc, #124]	@ (800e2b8 <MIC_Print+0x2d0>)
 800e23c:	1c18      	adds	r0, r3, #0
 800e23e:	f7f2 f977 	bl	8000530 <__aeabi_fcmplt>
 800e242:	1e03      	subs	r3, r0, #0
 800e244:	d004      	beq.n	800e250 <MIC_Print+0x268>
    SetDBLED(true, false, true);
 800e246:	2201      	movs	r2, #1
 800e248:	2100      	movs	r1, #0
 800e24a:	2001      	movs	r0, #1
 800e24c:	f004 fb40 	bl	80128d0 <SetDBLED>
  }
  if(dBA < 35){//off
 800e250:	4b09      	ldr	r3, [pc, #36]	@ (800e278 <MIC_Print+0x290>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4919      	ldr	r1, [pc, #100]	@ (800e2bc <MIC_Print+0x2d4>)
 800e256:	1c18      	adds	r0, r3, #0
 800e258:	f7f2 f96a 	bl	8000530 <__aeabi_fcmplt>
 800e25c:	1e03      	subs	r3, r0, #0
 800e25e:	d100      	bne.n	800e262 <MIC_Print+0x27a>
    SetDBLED(false, false, false);
  }
}
 800e260:	e004      	b.n	800e26c <MIC_Print+0x284>
    SetDBLED(false, false, false);
 800e262:	2200      	movs	r2, #0
 800e264:	2100      	movs	r1, #0
 800e266:	2000      	movs	r0, #0
 800e268:	f004 fb32 	bl	80128d0 <SetDBLED>
}
 800e26c:	46c0      	nop			@ (mov r8, r8)
 800e26e:	46bd      	mov	sp, r7
 800e270:	b004      	add	sp, #16
 800e272:	bdb0      	pop	{r4, r5, r7, pc}
 800e274:	20001174 	.word	0x20001174
 800e278:	20001140 	.word	0x20001140
 800e27c:	2000117c 	.word	0x2000117c
 800e280:	20001144 	.word	0x20001144
 800e284:	2000117d 	.word	0x2000117d
 800e288:	200000a9 	.word	0x200000a9
 800e28c:	20001170 	.word	0x20001170
 800e290:	20001178 	.word	0x20001178
 800e294:	2000116c 	.word	0x2000116c
 800e298:	0802d1c8 	.word	0x0802d1c8
 800e29c:	0802d20c 	.word	0x0802d20c
 800e2a0:	20001134 	.word	0x20001134
 800e2a4:	42b40000 	.word	0x42b40000
 800e2a8:	42a00000 	.word	0x42a00000
 800e2ac:	428c0000 	.word	0x428c0000
 800e2b0:	42700000 	.word	0x42700000
 800e2b4:	42480000 	.word	0x42480000
 800e2b8:	42200000 	.word	0x42200000
 800e2bc:	420c0000 	.word	0x420c0000

0800e2c0 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800e2c6:	4b11      	ldr	r3, [pc, #68]	@ (800e30c <MIC_TestMeasurementDone+0x4c>)
 800e2c8:	781b      	ldrb	r3, [r3, #0]
 800e2ca:	b2db      	uxtb	r3, r3
 800e2cc:	4a10      	ldr	r2, [pc, #64]	@ (800e310 <MIC_TestMeasurementDone+0x50>)
 800e2ce:	4911      	ldr	r1, [pc, #68]	@ (800e314 <MIC_TestMeasurementDone+0x54>)
 800e2d0:	2002      	movs	r0, #2
 800e2d2:	f005 fdf1 	bl	8013eb8 <CreateLine>
  if(DataReady) {
 800e2d6:	4b0d      	ldr	r3, [pc, #52]	@ (800e30c <MIC_TestMeasurementDone+0x4c>)
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d010      	beq.n	800e302 <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800e2e0:	1dfb      	adds	r3, r7, #7
 800e2e2:	4a0d      	ldr	r2, [pc, #52]	@ (800e318 <MIC_TestMeasurementDone+0x58>)
 800e2e4:	7812      	ldrb	r2, [r2, #0]
 800e2e6:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800e2e8:	4b0b      	ldr	r3, [pc, #44]	@ (800e318 <MIC_TestMeasurementDone+0x58>)
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	b2db      	uxtb	r3, r3
 800e2ee:	4a0b      	ldr	r2, [pc, #44]	@ (800e31c <MIC_TestMeasurementDone+0x5c>)
 800e2f0:	4908      	ldr	r1, [pc, #32]	@ (800e314 <MIC_TestMeasurementDone+0x54>)
 800e2f2:	2002      	movs	r0, #2
 800e2f4:	f005 fde0 	bl	8013eb8 <CreateLine>
    ResetChargeIndicator();
 800e2f8:	f004 fbbe 	bl	8012a78 <ResetChargeIndicator>
    return Check;
 800e2fc:	1dfb      	adds	r3, r7, #7
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	e000      	b.n	800e304 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800e302:	2300      	movs	r3, #0
}
 800e304:	0018      	movs	r0, r3
 800e306:	46bd      	mov	sp, r7
 800e308:	b002      	add	sp, #8
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	200012b1 	.word	0x200012b1
 800e310:	0802d210 	.word	0x0802d210
 800e314:	0802d20c 	.word	0x0802d20c
 800e318:	200012b2 	.word	0x200012b2
 800e31c:	0802d23c 	.word	0x0802d23c

0800e320 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800e326:	4b78      	ldr	r3, [pc, #480]	@ (800e508 <Mic_Upkeep+0x1e8>)
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	2b03      	cmp	r3, #3
 800e32c:	d100      	bne.n	800e330 <Mic_Upkeep+0x10>
 800e32e:	e0b9      	b.n	800e4a4 <Mic_Upkeep+0x184>
 800e330:	dd00      	ble.n	800e334 <Mic_Upkeep+0x14>
 800e332:	e0d4      	b.n	800e4de <Mic_Upkeep+0x1be>
 800e334:	2b02      	cmp	r3, #2
 800e336:	d037      	beq.n	800e3a8 <Mic_Upkeep+0x88>
 800e338:	dd00      	ble.n	800e33c <Mic_Upkeep+0x1c>
 800e33a:	e0d0      	b.n	800e4de <Mic_Upkeep+0x1be>
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d002      	beq.n	800e346 <Mic_Upkeep+0x26>
 800e340:	2b01      	cmp	r3, #1
 800e342:	d014      	beq.n	800e36e <Mic_Upkeep+0x4e>
 800e344:	e0cb      	b.n	800e4de <Mic_Upkeep+0x1be>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800e346:	2001      	movs	r0, #1
 800e348:	f003 fbac 	bl	8011aa4 <enableMicrophone>
 800e34c:	0003      	movs	r3, r0
 800e34e:	001a      	movs	r2, r3
 800e350:	2301      	movs	r3, #1
 800e352:	4053      	eors	r3, r2
 800e354:	b2db      	uxtb	r3, r3
 800e356:	2b00      	cmp	r3, #0
 800e358:	d005      	beq.n	800e366 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800e35a:	4a6c      	ldr	r2, [pc, #432]	@ (800e50c <Mic_Upkeep+0x1ec>)
 800e35c:	4b6c      	ldr	r3, [pc, #432]	@ (800e510 <Mic_Upkeep+0x1f0>)
 800e35e:	217f      	movs	r1, #127	@ 0x7f
 800e360:	0018      	movs	r0, r3
 800e362:	f005 fe99 	bl	8014098 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800e366:	4b68      	ldr	r3, [pc, #416]	@ (800e508 <Mic_Upkeep+0x1e8>)
 800e368:	2201      	movs	r2, #1
 800e36a:	701a      	strb	r2, [r3, #0]
    break;
 800e36c:	e0c6      	b.n	800e4fc <Mic_Upkeep+0x1dc>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800e36e:	f003 fb75 	bl	8011a5c <micSettlingComplete>
 800e372:	1e03      	subs	r3, r0, #0
 800e374:	d105      	bne.n	800e382 <Mic_Upkeep+0x62>
 800e376:	4b67      	ldr	r3, [pc, #412]	@ (800e514 <Mic_Upkeep+0x1f4>)
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	b2db      	uxtb	r3, r3
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d100      	bne.n	800e382 <Mic_Upkeep+0x62>
 800e380:	e0b7      	b.n	800e4f2 <Mic_Upkeep+0x1d2>
      if (!startSPLcalculation())
 800e382:	f003 fbf9 	bl	8011b78 <startSPLcalculation>
 800e386:	0003      	movs	r3, r0
 800e388:	001a      	movs	r2, r3
 800e38a:	2301      	movs	r3, #1
 800e38c:	4053      	eors	r3, r2
 800e38e:	b2db      	uxtb	r3, r3
 800e390:	2b00      	cmp	r3, #0
 800e392:	d005      	beq.n	800e3a0 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800e394:	4a5d      	ldr	r2, [pc, #372]	@ (800e50c <Mic_Upkeep+0x1ec>)
 800e396:	4b5e      	ldr	r3, [pc, #376]	@ (800e510 <Mic_Upkeep+0x1f0>)
 800e398:	2188      	movs	r1, #136	@ 0x88
 800e39a:	0018      	movs	r0, r3
 800e39c:	f005 fe7c 	bl	8014098 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800e3a0:	4b59      	ldr	r3, [pc, #356]	@ (800e508 <Mic_Upkeep+0x1e8>)
 800e3a2:	2202      	movs	r2, #2
 800e3a4:	701a      	strb	r2, [r3, #0]
    }
    break;
 800e3a6:	e0a4      	b.n	800e4f2 <Mic_Upkeep+0x1d2>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800e3a8:	4b5b      	ldr	r3, [pc, #364]	@ (800e518 <Mic_Upkeep+0x1f8>)
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	2101      	movs	r1, #1
 800e3ae:	0018      	movs	r0, r3
 800e3b0:	f003 fa3c 	bl	801182c <getSoundData>
 800e3b4:	1e03      	subs	r3, r0, #0
 800e3b6:	d100      	bne.n	800e3ba <Mic_Upkeep+0x9a>
 800e3b8:	e09d      	b.n	800e4f6 <Mic_Upkeep+0x1d6>
      clearMaximumAmplitude();
 800e3ba:	f003 fb2f 	bl	8011a1c <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800e3be:	4b56      	ldr	r3, [pc, #344]	@ (800e518 <Mic_Upkeep+0x1f8>)
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	001a      	movs	r2, r3
 800e3c4:	4b54      	ldr	r3, [pc, #336]	@ (800e518 <Mic_Upkeep+0x1f8>)
 800e3c6:	785b      	ldrb	r3, [r3, #1]
 800e3c8:	4954      	ldr	r1, [pc, #336]	@ (800e51c <Mic_Upkeep+0x1fc>)
 800e3ca:	0038      	movs	r0, r7
 800e3cc:	f018 f890 	bl	80264f0 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800e3d0:	4b51      	ldr	r3, [pc, #324]	@ (800e518 <Mic_Upkeep+0x1f8>)
 800e3d2:	89db      	ldrh	r3, [r3, #14]
 800e3d4:	001a      	movs	r2, r3
 800e3d6:	4b50      	ldr	r3, [pc, #320]	@ (800e518 <Mic_Upkeep+0x1f8>)
 800e3d8:	7c1b      	ldrb	r3, [r3, #16]
 800e3da:	4951      	ldr	r1, [pc, #324]	@ (800e520 <Mic_Upkeep+0x200>)
 800e3dc:	4851      	ldr	r0, [pc, #324]	@ (800e524 <Mic_Upkeep+0x204>)
 800e3de:	f018 f887 	bl	80264f0 <siprintf>
      dBValue = atof(dBbuffer);
 800e3e2:	003b      	movs	r3, r7
 800e3e4:	0018      	movs	r0, r3
 800e3e6:	f016 fc29 	bl	8024c3c <atof>
 800e3ea:	0002      	movs	r2, r0
 800e3ec:	000b      	movs	r3, r1
 800e3ee:	0010      	movs	r0, r2
 800e3f0:	0019      	movs	r1, r3
 800e3f2:	f7f5 fa97 	bl	8003924 <__aeabi_d2f>
 800e3f6:	1c02      	adds	r2, r0, #0
 800e3f8:	4b4b      	ldr	r3, [pc, #300]	@ (800e528 <Mic_Upkeep+0x208>)
 800e3fa:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800e3fc:	4b4a      	ldr	r3, [pc, #296]	@ (800e528 <Mic_Upkeep+0x208>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	494a      	ldr	r1, [pc, #296]	@ (800e52c <Mic_Upkeep+0x20c>)
 800e402:	1c18      	adds	r0, r3, #0
 800e404:	f7f2 fe1c 	bl	8001040 <__aeabi_fmul>
 800e408:	1c03      	adds	r3, r0, #0
 800e40a:	1c18      	adds	r0, r3, #0
 800e40c:	f7f5 fa42 	bl	8003894 <__aeabi_f2d>
 800e410:	2200      	movs	r2, #0
 800e412:	4b47      	ldr	r3, [pc, #284]	@ (800e530 <Mic_Upkeep+0x210>)
 800e414:	f7f3 fa9e 	bl	8001954 <__aeabi_dadd>
 800e418:	0002      	movs	r2, r0
 800e41a:	000b      	movs	r3, r1
 800e41c:	0010      	movs	r0, r2
 800e41e:	0019      	movs	r1, r3
 800e420:	f7f5 f9aa 	bl	8003778 <__aeabi_d2iz>
 800e424:	0003      	movs	r3, r0
 800e426:	0018      	movs	r0, r3
 800e428:	f7f5 f9e2 	bl	80037f0 <__aeabi_i2d>
 800e42c:	2200      	movs	r2, #0
 800e42e:	4b41      	ldr	r3, [pc, #260]	@ (800e534 <Mic_Upkeep+0x214>)
 800e430:	f7f3 fe56 	bl	80020e0 <__aeabi_ddiv>
 800e434:	0002      	movs	r2, r0
 800e436:	000b      	movs	r3, r1
 800e438:	0010      	movs	r0, r2
 800e43a:	0019      	movs	r1, r3
 800e43c:	f7f5 fa72 	bl	8003924 <__aeabi_d2f>
 800e440:	1c02      	adds	r2, r0, #0
 800e442:	4b39      	ldr	r3, [pc, #228]	@ (800e528 <Mic_Upkeep+0x208>)
 800e444:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800e446:	f7ff fdcf 	bl	800dfe8 <MIC_Print>
      if (!startSPLcalculation()) {
 800e44a:	f003 fb95 	bl	8011b78 <startSPLcalculation>
 800e44e:	0003      	movs	r3, r0
 800e450:	001a      	movs	r2, r3
 800e452:	2301      	movs	r3, #1
 800e454:	4053      	eors	r3, r2
 800e456:	b2db      	uxtb	r3, r3
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d005      	beq.n	800e468 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800e45c:	4a2b      	ldr	r2, [pc, #172]	@ (800e50c <Mic_Upkeep+0x1ec>)
 800e45e:	4b2c      	ldr	r3, [pc, #176]	@ (800e510 <Mic_Upkeep+0x1f0>)
 800e460:	2198      	movs	r1, #152	@ 0x98
 800e462:	0018      	movs	r0, r3
 800e464:	f005 fe18 	bl	8014098 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800e468:	2000      	movs	r0, #0
 800e46a:	f003 fb1b 	bl	8011aa4 <enableMicrophone>
 800e46e:	0003      	movs	r3, r0
 800e470:	001a      	movs	r2, r3
 800e472:	2301      	movs	r3, #1
 800e474:	4053      	eors	r3, r2
 800e476:	b2db      	uxtb	r3, r3
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d005      	beq.n	800e488 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800e47c:	4a23      	ldr	r2, [pc, #140]	@ (800e50c <Mic_Upkeep+0x1ec>)
 800e47e:	4b24      	ldr	r3, [pc, #144]	@ (800e510 <Mic_Upkeep+0x1f0>)
 800e480:	219b      	movs	r1, #155	@ 0x9b
 800e482:	0018      	movs	r0, r3
 800e484:	f005 fe08 	bl	8014098 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 430;  // about twice second
 800e488:	f006 fa96 	bl	80149b8 <HAL_GetTick>
 800e48c:	0003      	movs	r3, r0
 800e48e:	33af      	adds	r3, #175	@ 0xaf
 800e490:	33ff      	adds	r3, #255	@ 0xff
 800e492:	001a      	movs	r2, r3
 800e494:	4b28      	ldr	r3, [pc, #160]	@ (800e538 <Mic_Upkeep+0x218>)
 800e496:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800e498:	4b1b      	ldr	r3, [pc, #108]	@ (800e508 <Mic_Upkeep+0x1e8>)
 800e49a:	2203      	movs	r2, #3
 800e49c:	701a      	strb	r2, [r3, #0]
      ResetChargeIndicator();
 800e49e:	f004 faeb 	bl	8012a78 <ResetChargeIndicator>
    }
    break;
 800e4a2:	e028      	b.n	800e4f6 <Mic_Upkeep+0x1d6>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800e4a4:	4b24      	ldr	r3, [pc, #144]	@ (800e538 <Mic_Upkeep+0x218>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	0018      	movs	r0, r3
 800e4aa:	f005 fcaf 	bl	8013e0c <TimestampIsReached>
 800e4ae:	1e03      	subs	r3, r0, #0
 800e4b0:	d023      	beq.n	800e4fa <Mic_Upkeep+0x1da>
      if (!enableMicrophone(true)) {
 800e4b2:	2001      	movs	r0, #1
 800e4b4:	f003 faf6 	bl	8011aa4 <enableMicrophone>
 800e4b8:	0003      	movs	r3, r0
 800e4ba:	001a      	movs	r2, r3
 800e4bc:	2301      	movs	r3, #1
 800e4be:	4053      	eors	r3, r2
 800e4c0:	b2db      	uxtb	r3, r3
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d005      	beq.n	800e4d2 <Mic_Upkeep+0x1b2>
        errorHandler(__func__, __LINE__, __FILE__);
 800e4c6:	4a11      	ldr	r2, [pc, #68]	@ (800e50c <Mic_Upkeep+0x1ec>)
 800e4c8:	4b11      	ldr	r3, [pc, #68]	@ (800e510 <Mic_Upkeep+0x1f0>)
 800e4ca:	21a6      	movs	r1, #166	@ 0xa6
 800e4cc:	0018      	movs	r0, r3
 800e4ce:	f005 fde3 	bl	8014098 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800e4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e508 <Mic_Upkeep+0x1e8>)
 800e4d4:	2201      	movs	r2, #1
 800e4d6:	701a      	strb	r2, [r3, #0]
      SetChargeIndicator();
 800e4d8:	f004 fa8e 	bl	80129f8 <SetChargeIndicator>
    }
    break;
 800e4dc:	e00d      	b.n	800e4fa <Mic_Upkeep+0x1da>

  default:
    Debug("Unexpected occurrence happened");
 800e4de:	4a17      	ldr	r2, [pc, #92]	@ (800e53c <Mic_Upkeep+0x21c>)
 800e4e0:	4b17      	ldr	r3, [pc, #92]	@ (800e540 <Mic_Upkeep+0x220>)
 800e4e2:	0019      	movs	r1, r3
 800e4e4:	2003      	movs	r0, #3
 800e4e6:	f005 fce7 	bl	8013eb8 <CreateLine>
    MicState = MIC_STATE_INIT;
 800e4ea:	4b07      	ldr	r3, [pc, #28]	@ (800e508 <Mic_Upkeep+0x1e8>)
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	701a      	strb	r2, [r3, #0]
    break;
 800e4f0:	e004      	b.n	800e4fc <Mic_Upkeep+0x1dc>
    break;
 800e4f2:	46c0      	nop			@ (mov r8, r8)
 800e4f4:	e002      	b.n	800e4fc <Mic_Upkeep+0x1dc>
    break;
 800e4f6:	46c0      	nop			@ (mov r8, r8)
 800e4f8:	e000      	b.n	800e4fc <Mic_Upkeep+0x1dc>
    break;
 800e4fa:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800e4fc:	4b02      	ldr	r3, [pc, #8]	@ (800e508 <Mic_Upkeep+0x1e8>)
 800e4fe:	781b      	ldrb	r3, [r3, #0]
}
 800e500:	0018      	movs	r0, r3
 800e502:	46bd      	mov	sp, r7
 800e504:	b002      	add	sp, #8
 800e506:	bd80      	pop	{r7, pc}
 800e508:	20001196 	.word	0x20001196
 800e50c:	0802d254 	.word	0x0802d254
 800e510:	0802e768 	.word	0x0802e768
 800e514:	200012b1 	.word	0x200012b1
 800e518:	20001184 	.word	0x20001184
 800e51c:	0802d270 	.word	0x0802d270
 800e520:	0802d278 	.word	0x0802d278
 800e524:	20001134 	.word	0x20001134
 800e528:	20001174 	.word	0x20001174
 800e52c:	42c80000 	.word	0x42c80000
 800e530:	3fe00000 	.word	0x3fe00000
 800e534:	40590000 	.word	0x40590000
 800e538:	20001180 	.word	0x20001180
 800e53c:	0802d280 	.word	0x0802d280
 800e540:	0802d2a0 	.word	0x0802d2a0

0800e544 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b086      	sub	sp, #24
 800e548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800e54a:	1d3b      	adds	r3, r7, #4
 800e54c:	0018      	movs	r0, r3
 800e54e:	2314      	movs	r3, #20
 800e550:	001a      	movs	r2, r3
 800e552:	2100      	movs	r1, #0
 800e554:	f018 f914 	bl	8026780 <memset>
  RTC_DateTypeDef sDate = {0};
 800e558:	003b      	movs	r3, r7
 800e55a:	2200      	movs	r2, #0
 800e55c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800e55e:	4b2e      	ldr	r3, [pc, #184]	@ (800e618 <MX_RTC_Init+0xd4>)
 800e560:	4a2e      	ldr	r2, [pc, #184]	@ (800e61c <MX_RTC_Init+0xd8>)
 800e562:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800e564:	4b2c      	ldr	r3, [pc, #176]	@ (800e618 <MX_RTC_Init+0xd4>)
 800e566:	2200      	movs	r2, #0
 800e568:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800e56a:	4b2b      	ldr	r3, [pc, #172]	@ (800e618 <MX_RTC_Init+0xd4>)
 800e56c:	227f      	movs	r2, #127	@ 0x7f
 800e56e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800e570:	4b29      	ldr	r3, [pc, #164]	@ (800e618 <MX_RTC_Init+0xd4>)
 800e572:	22ff      	movs	r2, #255	@ 0xff
 800e574:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800e576:	4b28      	ldr	r3, [pc, #160]	@ (800e618 <MX_RTC_Init+0xd4>)
 800e578:	2200      	movs	r2, #0
 800e57a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800e57c:	4b26      	ldr	r3, [pc, #152]	@ (800e618 <MX_RTC_Init+0xd4>)
 800e57e:	2200      	movs	r2, #0
 800e580:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e582:	4b25      	ldr	r3, [pc, #148]	@ (800e618 <MX_RTC_Init+0xd4>)
 800e584:	2200      	movs	r2, #0
 800e586:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e588:	4b23      	ldr	r3, [pc, #140]	@ (800e618 <MX_RTC_Init+0xd4>)
 800e58a:	2200      	movs	r2, #0
 800e58c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800e58e:	4b22      	ldr	r3, [pc, #136]	@ (800e618 <MX_RTC_Init+0xd4>)
 800e590:	0018      	movs	r0, r3
 800e592:	f00d fdf1 	bl	801c178 <HAL_RTC_Init>
 800e596:	1e03      	subs	r3, r0, #0
 800e598:	d001      	beq.n	800e59e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800e59a:	f7fe ff7b 	bl	800d494 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800e59e:	1d3b      	adds	r3, r7, #4
 800e5a0:	220d      	movs	r2, #13
 800e5a2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800e5a4:	1d3b      	adds	r3, r7, #4
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800e5aa:	1d3b      	adds	r3, r7, #4
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e5b0:	1d3b      	adds	r3, r7, #4
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800e5b6:	1d3b      	adds	r3, r7, #4
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800e5bc:	1d39      	adds	r1, r7, #4
 800e5be:	4b16      	ldr	r3, [pc, #88]	@ (800e618 <MX_RTC_Init+0xd4>)
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	0018      	movs	r0, r3
 800e5c4:	f00d fe74 	bl	801c2b0 <HAL_RTC_SetTime>
 800e5c8:	1e03      	subs	r3, r0, #0
 800e5ca:	d001      	beq.n	800e5d0 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800e5cc:	f7fe ff62 	bl	800d494 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800e5d0:	003b      	movs	r3, r7
 800e5d2:	2206      	movs	r2, #6
 800e5d4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800e5d6:	003b      	movs	r3, r7
 800e5d8:	2211      	movs	r2, #17
 800e5da:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800e5dc:	003b      	movs	r3, r7
 800e5de:	2217      	movs	r2, #23
 800e5e0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800e5e2:	003b      	movs	r3, r7
 800e5e4:	2218      	movs	r2, #24
 800e5e6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800e5e8:	0039      	movs	r1, r7
 800e5ea:	4b0b      	ldr	r3, [pc, #44]	@ (800e618 <MX_RTC_Init+0xd4>)
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	0018      	movs	r0, r3
 800e5f0:	f00d ff66 	bl	801c4c0 <HAL_RTC_SetDate>
 800e5f4:	1e03      	subs	r3, r0, #0
 800e5f6:	d001      	beq.n	800e5fc <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800e5f8:	f7fe ff4c 	bl	800d494 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800e5fc:	4b06      	ldr	r3, [pc, #24]	@ (800e618 <MX_RTC_Init+0xd4>)
 800e5fe:	2200      	movs	r2, #0
 800e600:	2100      	movs	r1, #0
 800e602:	0018      	movs	r0, r3
 800e604:	f00e f934 	bl	801c870 <HAL_RTCEx_SetWakeUpTimer_IT>
 800e608:	1e03      	subs	r3, r0, #0
 800e60a:	d001      	beq.n	800e610 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800e60c:	f7fe ff42 	bl	800d494 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800e610:	46c0      	nop			@ (mov r8, r8)
 800e612:	46bd      	mov	sp, r7
 800e614:	b006      	add	sp, #24
 800e616:	bd80      	pop	{r7, pc}
 800e618:	20001198 	.word	0x20001198
 800e61c:	40002800 	.word	0x40002800

0800e620 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	4a0a      	ldr	r2, [pc, #40]	@ (800e658 <HAL_RTC_MspInit+0x38>)
 800e62e:	4293      	cmp	r3, r2
 800e630:	d10e      	bne.n	800e650 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e632:	4b0a      	ldr	r3, [pc, #40]	@ (800e65c <HAL_RTC_MspInit+0x3c>)
 800e634:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e636:	4b09      	ldr	r3, [pc, #36]	@ (800e65c <HAL_RTC_MspInit+0x3c>)
 800e638:	2180      	movs	r1, #128	@ 0x80
 800e63a:	02c9      	lsls	r1, r1, #11
 800e63c:	430a      	orrs	r2, r1
 800e63e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800e640:	2200      	movs	r2, #0
 800e642:	2100      	movs	r1, #0
 800e644:	2002      	movs	r0, #2
 800e646:	f006 fe2b 	bl	80152a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800e64a:	2002      	movs	r0, #2
 800e64c:	f006 fe3d 	bl	80152ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800e650:	46c0      	nop			@ (mov r8, r8)
 800e652:	46bd      	mov	sp, r7
 800e654:	b002      	add	sp, #8
 800e656:	bd80      	pop	{r7, pc}
 800e658:	40002800 	.word	0x40002800
 800e65c:	40021000 	.word	0x40021000

0800e660 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800e660:	b580      	push	{r7, lr}
 800e662:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800e664:	4b02      	ldr	r3, [pc, #8]	@ (800e670 <sen5x_Get_sen5x_enable_state+0x10>)
 800e666:	781b      	ldrb	r3, [r3, #0]
}
 800e668:	0018      	movs	r0, r3
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	46c0      	nop			@ (mov r8, r8)
 800e670:	200011bf 	.word	0x200011bf

0800e674 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800e674:	b580      	push	{r7, lr}
 800e676:	b082      	sub	sp, #8
 800e678:	af00      	add	r7, sp, #0
 800e67a:	0002      	movs	r2, r0
 800e67c:	1dfb      	adds	r3, r7, #7
 800e67e:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800e680:	4b03      	ldr	r3, [pc, #12]	@ (800e690 <sen5x_Set_sen5x_state+0x1c>)
 800e682:	1dfa      	adds	r2, r7, #7
 800e684:	7812      	ldrb	r2, [r2, #0]
 800e686:	701a      	strb	r2, [r3, #0]
}
 800e688:	46c0      	nop			@ (mov r8, r8)
 800e68a:	46bd      	mov	sp, r7
 800e68c:	b002      	add	sp, #8
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	200011bf 	.word	0x200011bf

0800e694 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800e694:	b580      	push	{r7, lr}
 800e696:	b082      	sub	sp, #8
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800e69c:	f006 f98c 	bl	80149b8 <HAL_GetTick>
 800e6a0:	0002      	movs	r2, r0
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	18d2      	adds	r2, r2, r3
 800e6a6:	4b03      	ldr	r3, [pc, #12]	@ (800e6b4 <setsen5xReadTimer+0x20>)
 800e6a8:	601a      	str	r2, [r3, #0]
}
 800e6aa:	46c0      	nop			@ (mov r8, r8)
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	b002      	add	sp, #8
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	46c0      	nop			@ (mov r8, r8)
 800e6b4:	200011cc 	.word	0x200011cc

0800e6b8 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b082      	sub	sp, #8
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	0002      	movs	r2, r0
 800e6c0:	1dfb      	adds	r3, r7, #7
 800e6c2:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800e6c4:	4b03      	ldr	r3, [pc, #12]	@ (800e6d4 <setsen5xSamplecounter+0x1c>)
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	701a      	strb	r2, [r3, #0]
}
 800e6ca:	46c0      	nop			@ (mov r8, r8)
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	b002      	add	sp, #8
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	46c0      	nop			@ (mov r8, r8)
 800e6d4:	200011c8 	.word	0x200011c8

0800e6d8 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800e6e0:	f7fe ff90 	bl	800d604 <IsPMSensorEnabled>
 800e6e4:	1e03      	subs	r3, r0, #0
 800e6e6:	d034      	beq.n	800e752 <sen5x_enable+0x7a>
    if (batteryStatus == BATTERY_FULL) {
 800e6e8:	4b21      	ldr	r3, [pc, #132]	@ (800e770 <sen5x_enable+0x98>)
 800e6ea:	781b      	ldrb	r3, [r3, #0]
 800e6ec:	2b03      	cmp	r3, #3
 800e6ee:	d103      	bne.n	800e6f8 <sen5x_enable+0x20>
      sen5x_Enable = true;
 800e6f0:	4b20      	ldr	r3, [pc, #128]	@ (800e774 <sen5x_enable+0x9c>)
 800e6f2:	2201      	movs	r2, #1
 800e6f4:	701a      	strb	r2, [r3, #0]
 800e6f6:	e00d      	b.n	800e714 <sen5x_enable+0x3c>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800e6f8:	4b1e      	ldr	r3, [pc, #120]	@ (800e774 <sen5x_enable+0x9c>)
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	1e5a      	subs	r2, r3, #1
 800e6fe:	4193      	sbcs	r3, r2
 800e700:	b2db      	uxtb	r3, r3
 800e702:	2201      	movs	r2, #1
 800e704:	4053      	eors	r3, r2
 800e706:	b2db      	uxtb	r3, r3
 800e708:	1c1a      	adds	r2, r3, #0
 800e70a:	2301      	movs	r3, #1
 800e70c:	4013      	ands	r3, r2
 800e70e:	b2da      	uxtb	r2, r3
 800e710:	4b18      	ldr	r3, [pc, #96]	@ (800e774 <sen5x_enable+0x9c>)
 800e712:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800e714:	4b17      	ldr	r3, [pc, #92]	@ (800e774 <sen5x_enable+0x9c>)
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d003      	beq.n	800e724 <sen5x_enable+0x4c>
      setsen5xReadTimer(0);
 800e71c:	2000      	movs	r0, #0
 800e71e:	f7ff ffb9 	bl	800e694 <setsen5xReadTimer>
 800e722:	e009      	b.n	800e738 <sen5x_enable+0x60>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800e724:	f006 f948 	bl	80149b8 <HAL_GetTick>
 800e728:	0002      	movs	r2, r0
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2164      	movs	r1, #100	@ 0x64
 800e72e:	434b      	muls	r3, r1
 800e730:	18d3      	adds	r3, r2, r3
 800e732:	0018      	movs	r0, r3
 800e734:	f7ff ffae 	bl	800e694 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800e738:	4b0e      	ldr	r3, [pc, #56]	@ (800e774 <sen5x_enable+0x9c>)
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d001      	beq.n	800e744 <sen5x_enable+0x6c>
 800e740:	4b0d      	ldr	r3, [pc, #52]	@ (800e778 <sen5x_enable+0xa0>)
 800e742:	e000      	b.n	800e746 <sen5x_enable+0x6e>
 800e744:	4b0d      	ldr	r3, [pc, #52]	@ (800e77c <sen5x_enable+0xa4>)
 800e746:	4a0e      	ldr	r2, [pc, #56]	@ (800e780 <sen5x_enable+0xa8>)
 800e748:	490e      	ldr	r1, [pc, #56]	@ (800e784 <sen5x_enable+0xac>)
 800e74a:	2002      	movs	r0, #2
 800e74c:	f005 fbb4 	bl	8013eb8 <CreateLine>
 800e750:	e005      	b.n	800e75e <sen5x_enable+0x86>
  }
  else {
    Info("sen5x measurement is disabled");
 800e752:	4a0d      	ldr	r2, [pc, #52]	@ (800e788 <sen5x_enable+0xb0>)
 800e754:	4b0b      	ldr	r3, [pc, #44]	@ (800e784 <sen5x_enable+0xac>)
 800e756:	0019      	movs	r1, r3
 800e758:	2002      	movs	r0, #2
 800e75a:	f005 fbad 	bl	8013eb8 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800e75e:	4b0b      	ldr	r3, [pc, #44]	@ (800e78c <sen5x_enable+0xb4>)
 800e760:	2201      	movs	r2, #1
 800e762:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800e764:	4b03      	ldr	r3, [pc, #12]	@ (800e774 <sen5x_enable+0x9c>)
 800e766:	781b      	ldrb	r3, [r3, #0]
}
 800e768:	0018      	movs	r0, r3
 800e76a:	46bd      	mov	sp, r7
 800e76c:	b002      	add	sp, #8
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	2000215d 	.word	0x2000215d
 800e774:	200011bf 	.word	0x200011bf
 800e778:	0802d2a4 	.word	0x0802d2a4
 800e77c:	0802d2ac 	.word	0x0802d2ac
 800e780:	0802d2b8 	.word	0x0802d2b8
 800e784:	0802d2d4 	.word	0x0802d2d4
 800e788:	0802d2d8 	.word	0x0802d2d8
 800e78c:	200000aa 	.word	0x200000aa

0800e790 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800e790:	b580      	push	{r7, lr}
 800e792:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800e794:	2380      	movs	r3, #128	@ 0x80
 800e796:	015b      	lsls	r3, r3, #5
 800e798:	480f      	ldr	r0, [pc, #60]	@ (800e7d8 <sen5x_Power_On+0x48>)
 800e79a:	2201      	movs	r2, #1
 800e79c:	0019      	movs	r1, r3
 800e79e:	f007 fb72 	bl	8015e86 <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800e7a2:	4a0e      	ldr	r2, [pc, #56]	@ (800e7dc <sen5x_Power_On+0x4c>)
 800e7a4:	4b0e      	ldr	r3, [pc, #56]	@ (800e7e0 <sen5x_Power_On+0x50>)
 800e7a6:	0019      	movs	r1, r3
 800e7a8:	2003      	movs	r0, #3
 800e7aa:	f005 fb85 	bl	8013eb8 <CreateLine>
  HAL_Delay(150);
 800e7ae:	2096      	movs	r0, #150	@ 0x96
 800e7b0:	f006 f90c 	bl	80149cc <HAL_Delay>
  if (sen5x_device_reset()) {
 800e7b4:	f001 f9f6 	bl	800fba4 <sen5x_device_reset>
 800e7b8:	1e03      	subs	r3, r0, #0
 800e7ba:	d006      	beq.n	800e7ca <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800e7bc:	4a09      	ldr	r2, [pc, #36]	@ (800e7e4 <sen5x_Power_On+0x54>)
 800e7be:	4b0a      	ldr	r3, [pc, #40]	@ (800e7e8 <sen5x_Power_On+0x58>)
 800e7c0:	0019      	movs	r1, r3
 800e7c2:	2001      	movs	r0, #1
 800e7c4:	f005 fb78 	bl	8013eb8 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800e7c8:	e002      	b.n	800e7d0 <sen5x_Power_On+0x40>
    sen5x_On = true;
 800e7ca:	4b08      	ldr	r3, [pc, #32]	@ (800e7ec <sen5x_Power_On+0x5c>)
 800e7cc:	2201      	movs	r2, #1
 800e7ce:	701a      	strb	r2, [r3, #0]
}
 800e7d0:	46c0      	nop			@ (mov r8, r8)
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	46c0      	nop			@ (mov r8, r8)
 800e7d8:	50000800 	.word	0x50000800
 800e7dc:	0802d2f8 	.word	0x0802d2f8
 800e7e0:	0802d314 	.word	0x0802d314
 800e7e4:	0802d318 	.word	0x0802d318
 800e7e8:	0802d340 	.word	0x0802d340
 800e7ec:	200011bd 	.word	0x200011bd

0800e7f0 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800e7f4:	4b0e      	ldr	r3, [pc, #56]	@ (800e830 <sen5x_Power_Off+0x40>)
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d006      	beq.n	800e80a <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800e7fc:	4a0d      	ldr	r2, [pc, #52]	@ (800e834 <sen5x_Power_Off+0x44>)
 800e7fe:	4b0e      	ldr	r3, [pc, #56]	@ (800e838 <sen5x_Power_Off+0x48>)
 800e800:	0019      	movs	r1, r3
 800e802:	2003      	movs	r0, #3
 800e804:	f005 fb58 	bl	8013eb8 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800e808:	e00f      	b.n	800e82a <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800e80a:	4a0c      	ldr	r2, [pc, #48]	@ (800e83c <sen5x_Power_Off+0x4c>)
 800e80c:	4b0a      	ldr	r3, [pc, #40]	@ (800e838 <sen5x_Power_Off+0x48>)
 800e80e:	0019      	movs	r1, r3
 800e810:	2003      	movs	r0, #3
 800e812:	f005 fb51 	bl	8013eb8 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800e816:	2380      	movs	r3, #128	@ 0x80
 800e818:	015b      	lsls	r3, r3, #5
 800e81a:	4809      	ldr	r0, [pc, #36]	@ (800e840 <sen5x_Power_Off+0x50>)
 800e81c:	2200      	movs	r2, #0
 800e81e:	0019      	movs	r1, r3
 800e820:	f007 fb31 	bl	8015e86 <HAL_GPIO_WritePin>
      sen5x_On = false;
 800e824:	4b07      	ldr	r3, [pc, #28]	@ (800e844 <sen5x_Power_Off+0x54>)
 800e826:	2200      	movs	r2, #0
 800e828:	701a      	strb	r2, [r3, #0]
}
 800e82a:	46c0      	nop			@ (mov r8, r8)
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	200011be 	.word	0x200011be
 800e834:	0802d344 	.word	0x0802d344
 800e838:	0802d314 	.word	0x0802d314
 800e83c:	0802d374 	.word	0x0802d374
 800e840:	50000800 	.word	0x50000800
 800e844:	200011bd 	.word	0x200011bd

0800e848 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800e848:	b580      	push	{r7, lr}
 800e84a:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800e84c:	4b02      	ldr	r3, [pc, #8]	@ (800e858 <reset_fanCleaningDone+0x10>)
 800e84e:	2200      	movs	r2, #0
 800e850:	701a      	strb	r2, [r3, #0]
}
 800e852:	46c0      	nop			@ (mov r8, r8)
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	200011bc 	.word	0x200011bc

0800e85c <probe_sen5x>:

int16_t probe_sen5x(void) {
 800e85c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e85e:	b093      	sub	sp, #76	@ 0x4c
 800e860:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800e862:	2436      	movs	r4, #54	@ 0x36
 800e864:	193b      	adds	r3, r7, r4
 800e866:	2200      	movs	r2, #0
 800e868:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800e86a:	2335      	movs	r3, #53	@ 0x35
 800e86c:	18fb      	adds	r3, r7, r3
 800e86e:	2220      	movs	r2, #32
 800e870:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800e872:	2334      	movs	r3, #52	@ 0x34
 800e874:	18fb      	adds	r3, r7, r3
 800e876:	2220      	movs	r2, #32
 800e878:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800e87a:	f7ff ff89 	bl	800e790 <sen5x_Power_On>
  error = sen5x_device_reset();
 800e87e:	0025      	movs	r5, r4
 800e880:	193c      	adds	r4, r7, r4
 800e882:	f001 f98f 	bl	800fba4 <sen5x_device_reset>
 800e886:	0003      	movs	r3, r0
 800e888:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e88a:	002c      	movs	r4, r5
 800e88c:	193b      	adds	r3, r7, r4
 800e88e:	2200      	movs	r2, #0
 800e890:	5e9b      	ldrsh	r3, [r3, r2]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d00b      	beq.n	800e8ae <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800e896:	193b      	adds	r3, r7, r4
 800e898:	2200      	movs	r2, #0
 800e89a:	5e9b      	ldrsh	r3, [r3, r2]
 800e89c:	4a77      	ldr	r2, [pc, #476]	@ (800ea7c <probe_sen5x+0x220>)
 800e89e:	4978      	ldr	r1, [pc, #480]	@ (800ea80 <probe_sen5x+0x224>)
 800e8a0:	2001      	movs	r0, #1
 800e8a2:	f005 fb09 	bl	8013eb8 <CreateLine>
      return error;
 800e8a6:	193b      	adds	r3, r7, r4
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	5e9b      	ldrsh	r3, [r3, r2]
 800e8ac:	e0e2      	b.n	800ea74 <probe_sen5x+0x218>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800e8ae:	2536      	movs	r5, #54	@ 0x36
 800e8b0:	197c      	adds	r4, r7, r5
 800e8b2:	2335      	movs	r3, #53	@ 0x35
 800e8b4:	18fb      	adds	r3, r7, r3
 800e8b6:	781a      	ldrb	r2, [r3, #0]
 800e8b8:	230c      	movs	r3, #12
 800e8ba:	18fb      	adds	r3, r7, r3
 800e8bc:	0011      	movs	r1, r2
 800e8be:	0018      	movs	r0, r3
 800e8c0:	f001 f85c 	bl	800f97c <sen5x_get_serial_number>
 800e8c4:	0003      	movs	r3, r0
 800e8c6:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e8c8:	197b      	adds	r3, r7, r5
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	5e9b      	ldrsh	r3, [r3, r2]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d00b      	beq.n	800e8ea <probe_sen5x+0x8e>
      Error("Error executing sen5x_get_serial_number(): %i", error);
 800e8d2:	197b      	adds	r3, r7, r5
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	5e9b      	ldrsh	r3, [r3, r2]
 800e8d8:	4a6a      	ldr	r2, [pc, #424]	@ (800ea84 <probe_sen5x+0x228>)
 800e8da:	4969      	ldr	r1, [pc, #420]	@ (800ea80 <probe_sen5x+0x224>)
 800e8dc:	2001      	movs	r0, #1
 800e8de:	f005 faeb 	bl	8013eb8 <CreateLine>
      return error;
 800e8e2:	197b      	adds	r3, r7, r5
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	5e9b      	ldrsh	r3, [r3, r2]
 800e8e8:	e0c4      	b.n	800ea74 <probe_sen5x+0x218>
  } else {
      Info("Serial number: %s", serial_number);
 800e8ea:	230c      	movs	r3, #12
 800e8ec:	18fb      	adds	r3, r7, r3
 800e8ee:	4a66      	ldr	r2, [pc, #408]	@ (800ea88 <probe_sen5x+0x22c>)
 800e8f0:	4966      	ldr	r1, [pc, #408]	@ (800ea8c <probe_sen5x+0x230>)
 800e8f2:	2002      	movs	r0, #2
 800e8f4:	f005 fae0 	bl	8013eb8 <CreateLine>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800e8f8:	2536      	movs	r5, #54	@ 0x36
 800e8fa:	197c      	adds	r4, r7, r5
 800e8fc:	2334      	movs	r3, #52	@ 0x34
 800e8fe:	18fb      	adds	r3, r7, r3
 800e900:	781a      	ldrb	r2, [r3, #0]
 800e902:	4b63      	ldr	r3, [pc, #396]	@ (800ea90 <probe_sen5x+0x234>)
 800e904:	0011      	movs	r1, r2
 800e906:	0018      	movs	r0, r3
 800e908:	f000 ffe2 	bl	800f8d0 <sen5x_get_product_name>
 800e90c:	0003      	movs	r3, r0
 800e90e:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e910:	197b      	adds	r3, r7, r5
 800e912:	2200      	movs	r2, #0
 800e914:	5e9b      	ldrsh	r3, [r3, r2]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d00b      	beq.n	800e932 <probe_sen5x+0xd6>
      Error("Error executing sen5x_get_product_name(): %i", error);
 800e91a:	197b      	adds	r3, r7, r5
 800e91c:	2200      	movs	r2, #0
 800e91e:	5e9b      	ldrsh	r3, [r3, r2]
 800e920:	4a5c      	ldr	r2, [pc, #368]	@ (800ea94 <probe_sen5x+0x238>)
 800e922:	4957      	ldr	r1, [pc, #348]	@ (800ea80 <probe_sen5x+0x224>)
 800e924:	2001      	movs	r0, #1
 800e926:	f005 fac7 	bl	8013eb8 <CreateLine>
      return error;
 800e92a:	197b      	adds	r3, r7, r5
 800e92c:	2200      	movs	r2, #0
 800e92e:	5e9b      	ldrsh	r3, [r3, r2]
 800e930:	e0a0      	b.n	800ea74 <probe_sen5x+0x218>
  } else {
      Info("Product name: %s", product_name);
 800e932:	4b57      	ldr	r3, [pc, #348]	@ (800ea90 <probe_sen5x+0x234>)
 800e934:	4a58      	ldr	r2, [pc, #352]	@ (800ea98 <probe_sen5x+0x23c>)
 800e936:	4955      	ldr	r1, [pc, #340]	@ (800ea8c <probe_sen5x+0x230>)
 800e938:	2002      	movs	r0, #2
 800e93a:	f005 fabd 	bl	8013eb8 <CreateLine>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800e93e:	2636      	movs	r6, #54	@ 0x36
 800e940:	19bc      	adds	r4, r7, r6
 800e942:	2308      	movs	r3, #8
 800e944:	18fd      	adds	r5, r7, r3
 800e946:	2309      	movs	r3, #9
 800e948:	18fa      	adds	r2, r7, r3
 800e94a:	230a      	movs	r3, #10
 800e94c:	18f9      	adds	r1, r7, r3
 800e94e:	230b      	movs	r3, #11
 800e950:	18f8      	adds	r0, r7, r3
 800e952:	1d7b      	adds	r3, r7, #5
 800e954:	9302      	str	r3, [sp, #8]
 800e956:	1dbb      	adds	r3, r7, #6
 800e958:	9301      	str	r3, [sp, #4]
 800e95a:	1dfb      	adds	r3, r7, #7
 800e95c:	9300      	str	r3, [sp, #0]
 800e95e:	002b      	movs	r3, r5
 800e960:	f001 f862 	bl	800fa28 <sen5x_get_version>
 800e964:	0003      	movs	r3, r0
 800e966:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800e968:	19bb      	adds	r3, r7, r6
 800e96a:	2200      	movs	r2, #0
 800e96c:	5e9b      	ldrsh	r3, [r3, r2]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d00b      	beq.n	800e98a <probe_sen5x+0x12e>
      Error("Error executing sen5x_get_version(): %i", error);
 800e972:	19bb      	adds	r3, r7, r6
 800e974:	2200      	movs	r2, #0
 800e976:	5e9b      	ldrsh	r3, [r3, r2]
 800e978:	4a48      	ldr	r2, [pc, #288]	@ (800ea9c <probe_sen5x+0x240>)
 800e97a:	4941      	ldr	r1, [pc, #260]	@ (800ea80 <probe_sen5x+0x224>)
 800e97c:	2001      	movs	r0, #1
 800e97e:	f005 fa9b 	bl	8013eb8 <CreateLine>
      return error;
 800e982:	19bb      	adds	r3, r7, r6
 800e984:	2200      	movs	r2, #0
 800e986:	5e9b      	ldrsh	r3, [r3, r2]
 800e988:	e074      	b.n	800ea74 <probe_sen5x+0x218>
  } else {
      Info("Firmware: %u.%u, Hardware: %u.%u", firmware_major,
 800e98a:	230b      	movs	r3, #11
 800e98c:	18fb      	adds	r3, r7, r3
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	001d      	movs	r5, r3
 800e992:	230a      	movs	r3, #10
 800e994:	18fb      	adds	r3, r7, r3
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	0018      	movs	r0, r3
 800e99a:	2308      	movs	r3, #8
 800e99c:	18fb      	adds	r3, r7, r3
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	001c      	movs	r4, r3
 800e9a2:	1dfb      	adds	r3, r7, #7
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	4a3e      	ldr	r2, [pc, #248]	@ (800eaa0 <probe_sen5x+0x244>)
 800e9a8:	4938      	ldr	r1, [pc, #224]	@ (800ea8c <probe_sen5x+0x230>)
 800e9aa:	9302      	str	r3, [sp, #8]
 800e9ac:	9401      	str	r4, [sp, #4]
 800e9ae:	9000      	str	r0, [sp, #0]
 800e9b0:	002b      	movs	r3, r5
 800e9b2:	2002      	movs	r0, #2
 800e9b4:	f005 fa80 	bl	8013eb8 <CreateLine>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800e9bc:	262e      	movs	r6, #46	@ 0x2e
 800e9be:	19bb      	adds	r3, r7, r6
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800e9c4:	232c      	movs	r3, #44	@ 0x2c
 800e9c6:	18fb      	adds	r3, r7, r3
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800e9cc:	4935      	ldr	r1, [pc, #212]	@ (800eaa4 <probe_sen5x+0x248>)
 800e9ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e9d0:	f7f2 fb36 	bl	8001040 <__aeabi_fmul>
 800e9d4:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800e9d6:	1c18      	adds	r0, r3, #0
 800e9d8:	f7f2 ff06 	bl	80017e8 <__aeabi_f2iz>
 800e9dc:	0003      	movs	r3, r0
 800e9de:	b218      	sxth	r0, r3
 800e9e0:	2536      	movs	r5, #54	@ 0x36
 800e9e2:	197c      	adds	r4, r7, r5
 800e9e4:	232c      	movs	r3, #44	@ 0x2c
 800e9e6:	18fb      	adds	r3, r7, r3
 800e9e8:	881a      	ldrh	r2, [r3, #0]
 800e9ea:	19bb      	adds	r3, r7, r6
 800e9ec:	2100      	movs	r1, #0
 800e9ee:	5e5b      	ldrsh	r3, [r3, r1]
 800e9f0:	0019      	movs	r1, r3
 800e9f2:	f000 ff09 	bl	800f808 <sen5x_set_temperature_offset_parameters>
 800e9f6:	0003      	movs	r3, r0
 800e9f8:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e9fa:	197b      	adds	r3, r7, r5
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	5e9b      	ldrsh	r3, [r3, r2]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d00b      	beq.n	800ea1c <probe_sen5x+0x1c0>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800ea04:	197b      	adds	r3, r7, r5
 800ea06:	2200      	movs	r2, #0
 800ea08:	5e9b      	ldrsh	r3, [r3, r2]
 800ea0a:	4a27      	ldr	r2, [pc, #156]	@ (800eaa8 <probe_sen5x+0x24c>)
 800ea0c:	491c      	ldr	r1, [pc, #112]	@ (800ea80 <probe_sen5x+0x224>)
 800ea0e:	2001      	movs	r0, #1
 800ea10:	f005 fa52 	bl	8013eb8 <CreateLine>
      return error;
 800ea14:	197b      	adds	r3, r7, r5
 800ea16:	2200      	movs	r2, #0
 800ea18:	5e9b      	ldrsh	r3, [r3, r2]
 800ea1a:	e02b      	b.n	800ea74 <probe_sen5x+0x218>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800ea1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ea1e:	f7f4 ff39 	bl	8003894 <__aeabi_f2d>
 800ea22:	0002      	movs	r2, r0
 800ea24:	000b      	movs	r3, r1
 800ea26:	4821      	ldr	r0, [pc, #132]	@ (800eaac <probe_sen5x+0x250>)
 800ea28:	4918      	ldr	r1, [pc, #96]	@ (800ea8c <probe_sen5x+0x230>)
 800ea2a:	9200      	str	r2, [sp, #0]
 800ea2c:	9301      	str	r3, [sp, #4]
 800ea2e:	0002      	movs	r2, r0
 800ea30:	2002      	movs	r0, #2
 800ea32:	f005 fa41 	bl	8013eb8 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800ea36:	f7fb f95b 	bl	8009cf0 <Check_USB_PowerOn>
 800ea3a:	0003      	movs	r3, r0
 800ea3c:	001a      	movs	r2, r3
 800ea3e:	2301      	movs	r3, #1
 800ea40:	4053      	eors	r3, r2
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d00a      	beq.n	800ea5e <probe_sen5x+0x202>
    sen5x_Power_Off();
 800ea48:	f7ff fed2 	bl	800e7f0 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800ea4c:	f005 ffb4 	bl	80149b8 <HAL_GetTick>
 800ea50:	0003      	movs	r3, r0
 800ea52:	22fa      	movs	r2, #250	@ 0xfa
 800ea54:	00d2      	lsls	r2, r2, #3
 800ea56:	189a      	adds	r2, r3, r2
 800ea58:	4b15      	ldr	r3, [pc, #84]	@ (800eab0 <probe_sen5x+0x254>)
 800ea5a:	601a      	str	r2, [r3, #0]
 800ea5c:	e006      	b.n	800ea6c <probe_sen5x+0x210>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800ea5e:	f005 ffab 	bl	80149b8 <HAL_GetTick>
 800ea62:	0003      	movs	r3, r0
 800ea64:	4a13      	ldr	r2, [pc, #76]	@ (800eab4 <probe_sen5x+0x258>)
 800ea66:	189a      	adds	r2, r3, r2
 800ea68:	4b11      	ldr	r3, [pc, #68]	@ (800eab0 <probe_sen5x+0x254>)
 800ea6a:	601a      	str	r2, [r3, #0]
  }
  return error;
 800ea6c:	2336      	movs	r3, #54	@ 0x36
 800ea6e:	18fb      	adds	r3, r7, r3
 800ea70:	2200      	movs	r2, #0
 800ea72:	5e9b      	ldrsh	r3, [r3, r2]
}
 800ea74:	0018      	movs	r0, r3
 800ea76:	46bd      	mov	sp, r7
 800ea78:	b00f      	add	sp, #60	@ 0x3c
 800ea7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea7c:	0802d390 	.word	0x0802d390
 800ea80:	0802d340 	.word	0x0802d340
 800ea84:	0802d3bc 	.word	0x0802d3bc
 800ea88:	0802d3ec 	.word	0x0802d3ec
 800ea8c:	0802d2d4 	.word	0x0802d2d4
 800ea90:	200011c0 	.word	0x200011c0
 800ea94:	0802d400 	.word	0x0802d400
 800ea98:	0802d430 	.word	0x0802d430
 800ea9c:	0802d444 	.word	0x0802d444
 800eaa0:	0802d46c 	.word	0x0802d46c
 800eaa4:	43480000 	.word	0x43480000
 800eaa8:	0802d490 	.word	0x0802d490
 800eaac:	0802d4d0 	.word	0x0802d4d0
 800eab0:	200011cc 	.word	0x200011cc
 800eab4:	00006d60 	.word	0x00006d60

0800eab8 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800eab8:	b590      	push	{r4, r7, lr}
 800eaba:	b083      	sub	sp, #12
 800eabc:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800eabe:	1dbb      	adds	r3, r7, #6
 800eac0:	2200      	movs	r2, #0
 800eac2:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800eac4:	4b1b      	ldr	r3, [pc, #108]	@ (800eb34 <sen5x_lightup_measurement+0x7c>)
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d00b      	beq.n	800eae4 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800eacc:	4a1a      	ldr	r2, [pc, #104]	@ (800eb38 <sen5x_lightup_measurement+0x80>)
 800eace:	4b1b      	ldr	r3, [pc, #108]	@ (800eb3c <sen5x_lightup_measurement+0x84>)
 800ead0:	0019      	movs	r1, r3
 800ead2:	2002      	movs	r0, #2
 800ead4:	f005 f9f0 	bl	8013eb8 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800ead8:	1dbc      	adds	r4, r7, #6
 800eada:	f000 fd21 	bl	800f520 <sen5x_start_measurement_without_pm>
 800eade:	0003      	movs	r3, r0
 800eae0:	8023      	strh	r3, [r4, #0]
 800eae2:	e00a      	b.n	800eafa <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800eae4:	4a16      	ldr	r2, [pc, #88]	@ (800eb40 <sen5x_lightup_measurement+0x88>)
 800eae6:	4b15      	ldr	r3, [pc, #84]	@ (800eb3c <sen5x_lightup_measurement+0x84>)
 800eae8:	0019      	movs	r1, r3
 800eaea:	2002      	movs	r0, #2
 800eaec:	f005 f9e4 	bl	8013eb8 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800eaf0:	1dbc      	adds	r4, r7, #6
 800eaf2:	f000 fce7 	bl	800f4c4 <sen5x_start_measurement>
 800eaf6:	0003      	movs	r3, r0
 800eaf8:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800eafa:	1dbb      	adds	r3, r7, #6
 800eafc:	2200      	movs	r2, #0
 800eafe:	5e9b      	ldrsh	r3, [r3, r2]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d008      	beq.n	800eb16 <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800eb04:	1dbb      	adds	r3, r7, #6
 800eb06:	2200      	movs	r2, #0
 800eb08:	5e9b      	ldrsh	r3, [r3, r2]
 800eb0a:	4a0e      	ldr	r2, [pc, #56]	@ (800eb44 <sen5x_lightup_measurement+0x8c>)
 800eb0c:	490e      	ldr	r1, [pc, #56]	@ (800eb48 <sen5x_lightup_measurement+0x90>)
 800eb0e:	2001      	movs	r0, #1
 800eb10:	f005 f9d2 	bl	8013eb8 <CreateLine>
 800eb14:	e007      	b.n	800eb26 <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800eb16:	f7fb f9f3 	bl	8009f00 <showTime>
    Info("sen5x_start_measurement executed");
 800eb1a:	4a0c      	ldr	r2, [pc, #48]	@ (800eb4c <sen5x_lightup_measurement+0x94>)
 800eb1c:	4b07      	ldr	r3, [pc, #28]	@ (800eb3c <sen5x_lightup_measurement+0x84>)
 800eb1e:	0019      	movs	r1, r3
 800eb20:	2002      	movs	r0, #2
 800eb22:	f005 f9c9 	bl	8013eb8 <CreateLine>
  }
  return error;
 800eb26:	1dbb      	adds	r3, r7, #6
 800eb28:	2200      	movs	r2, #0
 800eb2a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800eb2c:	0018      	movs	r0, r3
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	b003      	add	sp, #12
 800eb32:	bd90      	pop	{r4, r7, pc}
 800eb34:	200011be 	.word	0x200011be
 800eb38:	0802d508 	.word	0x0802d508
 800eb3c:	0802d2d4 	.word	0x0802d2d4
 800eb40:	0802d534 	.word	0x0802d534
 800eb44:	0802d554 	.word	0x0802d554
 800eb48:	0802d340 	.word	0x0802d340
 800eb4c:	0802d584 	.word	0x0802d584

0800eb50 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800eb50:	b590      	push	{r4, r7, lr}
 800eb52:	b083      	sub	sp, #12
 800eb54:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800eb56:	1dbb      	adds	r3, r7, #6
 800eb58:	2200      	movs	r2, #0
 800eb5a:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800eb5c:	4b21      	ldr	r3, [pc, #132]	@ (800ebe4 <sen5x_extinguish_measurement+0x94>)
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d01e      	beq.n	800eba2 <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800eb64:	4a20      	ldr	r2, [pc, #128]	@ (800ebe8 <sen5x_extinguish_measurement+0x98>)
 800eb66:	4b21      	ldr	r3, [pc, #132]	@ (800ebec <sen5x_extinguish_measurement+0x9c>)
 800eb68:	0019      	movs	r1, r3
 800eb6a:	2002      	movs	r0, #2
 800eb6c:	f005 f9a4 	bl	8013eb8 <CreateLine>
    Info("PM measurement is disabled");
 800eb70:	4a1f      	ldr	r2, [pc, #124]	@ (800ebf0 <sen5x_extinguish_measurement+0xa0>)
 800eb72:	4b1e      	ldr	r3, [pc, #120]	@ (800ebec <sen5x_extinguish_measurement+0x9c>)
 800eb74:	0019      	movs	r1, r3
 800eb76:	2002      	movs	r0, #2
 800eb78:	f005 f99e 	bl	8013eb8 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800eb7c:	1dbc      	adds	r4, r7, #6
 800eb7e:	f000 fccf 	bl	800f520 <sen5x_start_measurement_without_pm>
 800eb82:	0003      	movs	r3, r0
 800eb84:	8023      	strh	r3, [r4, #0]
    if (error) {
 800eb86:	1dbb      	adds	r3, r7, #6
 800eb88:	2200      	movs	r2, #0
 800eb8a:	5e9b      	ldrsh	r3, [r3, r2]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d022      	beq.n	800ebd6 <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800eb90:	1dbb      	adds	r3, r7, #6
 800eb92:	2200      	movs	r2, #0
 800eb94:	5e9b      	ldrsh	r3, [r3, r2]
 800eb96:	4a17      	ldr	r2, [pc, #92]	@ (800ebf4 <sen5x_extinguish_measurement+0xa4>)
 800eb98:	4917      	ldr	r1, [pc, #92]	@ (800ebf8 <sen5x_extinguish_measurement+0xa8>)
 800eb9a:	2001      	movs	r0, #1
 800eb9c:	f005 f98c 	bl	8013eb8 <CreateLine>
 800eba0:	e019      	b.n	800ebd6 <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800eba2:	1dbc      	adds	r4, r7, #6
 800eba4:	f000 fcea 	bl	800f57c <sen5x_stop_measurement>
 800eba8:	0003      	movs	r3, r0
 800ebaa:	8023      	strh	r3, [r4, #0]
    showTime();
 800ebac:	f7fb f9a8 	bl	8009f00 <showTime>
    Info("sen5x_stop_measurement executed");
 800ebb0:	4a12      	ldr	r2, [pc, #72]	@ (800ebfc <sen5x_extinguish_measurement+0xac>)
 800ebb2:	4b0e      	ldr	r3, [pc, #56]	@ (800ebec <sen5x_extinguish_measurement+0x9c>)
 800ebb4:	0019      	movs	r1, r3
 800ebb6:	2002      	movs	r0, #2
 800ebb8:	f005 f97e 	bl	8013eb8 <CreateLine>
    if (error) {
 800ebbc:	1dbb      	adds	r3, r7, #6
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	5e9b      	ldrsh	r3, [r3, r2]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d007      	beq.n	800ebd6 <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800ebc6:	1dbb      	adds	r3, r7, #6
 800ebc8:	2200      	movs	r2, #0
 800ebca:	5e9b      	ldrsh	r3, [r3, r2]
 800ebcc:	4a0c      	ldr	r2, [pc, #48]	@ (800ec00 <sen5x_extinguish_measurement+0xb0>)
 800ebce:	490a      	ldr	r1, [pc, #40]	@ (800ebf8 <sen5x_extinguish_measurement+0xa8>)
 800ebd0:	2001      	movs	r0, #1
 800ebd2:	f005 f971 	bl	8013eb8 <CreateLine>
    }
  }
  return error;
 800ebd6:	1dbb      	adds	r3, r7, #6
 800ebd8:	2200      	movs	r2, #0
 800ebda:	5e9b      	ldrsh	r3, [r3, r2]
}
 800ebdc:	0018      	movs	r0, r3
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	b003      	add	sp, #12
 800ebe2:	bd90      	pop	{r4, r7, pc}
 800ebe4:	200011be 	.word	0x200011be
 800ebe8:	0802d5a8 	.word	0x0802d5a8
 800ebec:	0802d2d4 	.word	0x0802d2d4
 800ebf0:	0802d5e0 	.word	0x0802d5e0
 800ebf4:	0802d5fc 	.word	0x0802d5fc
 800ebf8:	0802d340 	.word	0x0802d340
 800ebfc:	0802d63c 	.word	0x0802d63c
 800ec00:	0802d65c 	.word	0x0802d65c

0800ec04 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800ec04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec06:	b08d      	sub	sp, #52	@ 0x34
 800ec08:	af04      	add	r7, sp, #16
 800ec0a:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800ec0c:	261e      	movs	r6, #30
 800ec0e:	19bb      	adds	r3, r7, r6
 800ec10:	2200      	movs	r2, #0
 800ec12:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800ec14:	19bc      	adds	r4, r7, r6
 800ec16:	2316      	movs	r3, #22
 800ec18:	18fd      	adds	r5, r7, r3
 800ec1a:	2318      	movs	r3, #24
 800ec1c:	18fa      	adds	r2, r7, r3
 800ec1e:	231a      	movs	r3, #26
 800ec20:	18f9      	adds	r1, r7, r3
 800ec22:	231c      	movs	r3, #28
 800ec24:	18f8      	adds	r0, r7, r3
 800ec26:	230e      	movs	r3, #14
 800ec28:	18fb      	adds	r3, r7, r3
 800ec2a:	9303      	str	r3, [sp, #12]
 800ec2c:	2310      	movs	r3, #16
 800ec2e:	18fb      	adds	r3, r7, r3
 800ec30:	9302      	str	r3, [sp, #8]
 800ec32:	2312      	movs	r3, #18
 800ec34:	18fb      	adds	r3, r7, r3
 800ec36:	9301      	str	r3, [sp, #4]
 800ec38:	2314      	movs	r3, #20
 800ec3a:	18fb      	adds	r3, r7, r3
 800ec3c:	9300      	str	r3, [sp, #0]
 800ec3e:	002b      	movs	r3, r5
 800ec40:	f000 fd1e 	bl	800f680 <sen5x_read_measured_values>
 800ec44:	0003      	movs	r3, r0
 800ec46:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800ec48:	19bb      	adds	r3, r7, r6
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	5e9b      	ldrsh	r3, [r3, r2]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d003      	beq.n	800ec5a <sen5x_read_measurement+0x56>
    return error;
 800ec52:	19bb      	adds	r3, r7, r6
 800ec54:	2200      	movs	r2, #0
 800ec56:	5e9b      	ldrsh	r3, [r3, r2]
 800ec58:	e02c      	b.n	800ecb4 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800ec5a:	231c      	movs	r3, #28
 800ec5c:	18fb      	adds	r3, r7, r3
 800ec5e:	881a      	ldrh	r2, [r3, #0]
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800ec64:	231a      	movs	r3, #26
 800ec66:	18fb      	adds	r3, r7, r3
 800ec68:	881a      	ldrh	r2, [r3, #0]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800ec6e:	2318      	movs	r3, #24
 800ec70:	18fb      	adds	r3, r7, r3
 800ec72:	881a      	ldrh	r2, [r3, #0]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800ec78:	2316      	movs	r3, #22
 800ec7a:	18fb      	adds	r3, r7, r3
 800ec7c:	881a      	ldrh	r2, [r3, #0]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800ec82:	2314      	movs	r3, #20
 800ec84:	18fb      	adds	r3, r7, r3
 800ec86:	2200      	movs	r2, #0
 800ec88:	5e9a      	ldrsh	r2, [r3, r2]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800ec8e:	2312      	movs	r3, #18
 800ec90:	18fb      	adds	r3, r7, r3
 800ec92:	2200      	movs	r2, #0
 800ec94:	5e9a      	ldrsh	r2, [r3, r2]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800ec9a:	2310      	movs	r3, #16
 800ec9c:	18fb      	adds	r3, r7, r3
 800ec9e:	2200      	movs	r2, #0
 800eca0:	5e9a      	ldrsh	r2, [r3, r2]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800eca6:	230e      	movs	r3, #14
 800eca8:	18fb      	adds	r3, r7, r3
 800ecaa:	2200      	movs	r2, #0
 800ecac:	5e9a      	ldrsh	r2, [r3, r2]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	81da      	strh	r2, [r3, #14]
  return 0;
 800ecb2:	2300      	movs	r3, #0
}
 800ecb4:	0018      	movs	r0, r3
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	b009      	add	sp, #36	@ 0x24
 800ecba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ecbc <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b082      	sub	sp, #8
 800ecc0:	af02      	add	r7, sp, #8
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800ecc2:	4b6e      	ldr	r3, [pc, #440]	@ (800ee7c <sen5x_printvalues+0x1c0>)
 800ecc4:	881b      	ldrh	r3, [r3, #0]
 800ecc6:	4a6e      	ldr	r2, [pc, #440]	@ (800ee80 <sen5x_printvalues+0x1c4>)
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d017      	beq.n	800ecfc <sen5x_printvalues+0x40>
      Info("Mass concentration pm1p0: %.1f µg/m³", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800eccc:	4b6b      	ldr	r3, [pc, #428]	@ (800ee7c <sen5x_printvalues+0x1c0>)
 800ecce:	881b      	ldrh	r3, [r3, #0]
 800ecd0:	0018      	movs	r0, r3
 800ecd2:	f7f2 fda9 	bl	8001828 <__aeabi_i2f>
 800ecd6:	1c03      	adds	r3, r0, #0
 800ecd8:	496a      	ldr	r1, [pc, #424]	@ (800ee84 <sen5x_printvalues+0x1c8>)
 800ecda:	1c18      	adds	r0, r3, #0
 800ecdc:	f7f1 ffe2 	bl	8000ca4 <__aeabi_fdiv>
 800ece0:	1c03      	adds	r3, r0, #0
 800ece2:	1c18      	adds	r0, r3, #0
 800ece4:	f7f4 fdd6 	bl	8003894 <__aeabi_f2d>
 800ece8:	0002      	movs	r2, r0
 800ecea:	000b      	movs	r3, r1
 800ecec:	4866      	ldr	r0, [pc, #408]	@ (800ee88 <sen5x_printvalues+0x1cc>)
 800ecee:	4967      	ldr	r1, [pc, #412]	@ (800ee8c <sen5x_printvalues+0x1d0>)
 800ecf0:	9200      	str	r2, [sp, #0]
 800ecf2:	9301      	str	r3, [sp, #4]
 800ecf4:	0002      	movs	r2, r0
 800ecf6:	2002      	movs	r0, #2
 800ecf8:	f005 f8de 	bl	8013eb8 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800ecfc:	4b5f      	ldr	r3, [pc, #380]	@ (800ee7c <sen5x_printvalues+0x1c0>)
 800ecfe:	885b      	ldrh	r3, [r3, #2]
 800ed00:	4a5f      	ldr	r2, [pc, #380]	@ (800ee80 <sen5x_printvalues+0x1c4>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d017      	beq.n	800ed36 <sen5x_printvalues+0x7a>
        Info("Mass concentration pm2p5: %.1f µg/m³", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800ed06:	4b5d      	ldr	r3, [pc, #372]	@ (800ee7c <sen5x_printvalues+0x1c0>)
 800ed08:	885b      	ldrh	r3, [r3, #2]
 800ed0a:	0018      	movs	r0, r3
 800ed0c:	f7f2 fd8c 	bl	8001828 <__aeabi_i2f>
 800ed10:	1c03      	adds	r3, r0, #0
 800ed12:	495c      	ldr	r1, [pc, #368]	@ (800ee84 <sen5x_printvalues+0x1c8>)
 800ed14:	1c18      	adds	r0, r3, #0
 800ed16:	f7f1 ffc5 	bl	8000ca4 <__aeabi_fdiv>
 800ed1a:	1c03      	adds	r3, r0, #0
 800ed1c:	1c18      	adds	r0, r3, #0
 800ed1e:	f7f4 fdb9 	bl	8003894 <__aeabi_f2d>
 800ed22:	0002      	movs	r2, r0
 800ed24:	000b      	movs	r3, r1
 800ed26:	485a      	ldr	r0, [pc, #360]	@ (800ee90 <sen5x_printvalues+0x1d4>)
 800ed28:	4958      	ldr	r1, [pc, #352]	@ (800ee8c <sen5x_printvalues+0x1d0>)
 800ed2a:	9200      	str	r2, [sp, #0]
 800ed2c:	9301      	str	r3, [sp, #4]
 800ed2e:	0002      	movs	r2, r0
 800ed30:	2002      	movs	r0, #2
 800ed32:	f005 f8c1 	bl	8013eb8 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800ed36:	4b51      	ldr	r3, [pc, #324]	@ (800ee7c <sen5x_printvalues+0x1c0>)
 800ed38:	889b      	ldrh	r3, [r3, #4]
 800ed3a:	4a51      	ldr	r2, [pc, #324]	@ (800ee80 <sen5x_printvalues+0x1c4>)
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	d017      	beq.n	800ed70 <sen5x_printvalues+0xb4>
        Info("Mass concentration pm4p0: %.1f µg/m³", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800ed40:	4b4e      	ldr	r3, [pc, #312]	@ (800ee7c <sen5x_printvalues+0x1c0>)
 800ed42:	889b      	ldrh	r3, [r3, #4]
 800ed44:	0018      	movs	r0, r3
 800ed46:	f7f2 fd6f 	bl	8001828 <__aeabi_i2f>
 800ed4a:	1c03      	adds	r3, r0, #0
 800ed4c:	494d      	ldr	r1, [pc, #308]	@ (800ee84 <sen5x_printvalues+0x1c8>)
 800ed4e:	1c18      	adds	r0, r3, #0
 800ed50:	f7f1 ffa8 	bl	8000ca4 <__aeabi_fdiv>
 800ed54:	1c03      	adds	r3, r0, #0
 800ed56:	1c18      	adds	r0, r3, #0
 800ed58:	f7f4 fd9c 	bl	8003894 <__aeabi_f2d>
 800ed5c:	0002      	movs	r2, r0
 800ed5e:	000b      	movs	r3, r1
 800ed60:	484c      	ldr	r0, [pc, #304]	@ (800ee94 <sen5x_printvalues+0x1d8>)
 800ed62:	494a      	ldr	r1, [pc, #296]	@ (800ee8c <sen5x_printvalues+0x1d0>)
 800ed64:	9200      	str	r2, [sp, #0]
 800ed66:	9301      	str	r3, [sp, #4]
 800ed68:	0002      	movs	r2, r0
 800ed6a:	2002      	movs	r0, #2
 800ed6c:	f005 f8a4 	bl	8013eb8 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800ed70:	4b42      	ldr	r3, [pc, #264]	@ (800ee7c <sen5x_printvalues+0x1c0>)
 800ed72:	88db      	ldrh	r3, [r3, #6]
 800ed74:	4a42      	ldr	r2, [pc, #264]	@ (800ee80 <sen5x_printvalues+0x1c4>)
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d017      	beq.n	800edaa <sen5x_printvalues+0xee>
        Info("Mass concentration pm10p0: %.1f µg/m³", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800ed7a:	4b40      	ldr	r3, [pc, #256]	@ (800ee7c <sen5x_printvalues+0x1c0>)
 800ed7c:	88db      	ldrh	r3, [r3, #6]
 800ed7e:	0018      	movs	r0, r3
 800ed80:	f7f2 fd52 	bl	8001828 <__aeabi_i2f>
 800ed84:	1c03      	adds	r3, r0, #0
 800ed86:	493f      	ldr	r1, [pc, #252]	@ (800ee84 <sen5x_printvalues+0x1c8>)
 800ed88:	1c18      	adds	r0, r3, #0
 800ed8a:	f7f1 ff8b 	bl	8000ca4 <__aeabi_fdiv>
 800ed8e:	1c03      	adds	r3, r0, #0
 800ed90:	1c18      	adds	r0, r3, #0
 800ed92:	f7f4 fd7f 	bl	8003894 <__aeabi_f2d>
 800ed96:	0002      	movs	r2, r0
 800ed98:	000b      	movs	r3, r1
 800ed9a:	483f      	ldr	r0, [pc, #252]	@ (800ee98 <sen5x_printvalues+0x1dc>)
 800ed9c:	493b      	ldr	r1, [pc, #236]	@ (800ee8c <sen5x_printvalues+0x1d0>)
 800ed9e:	9200      	str	r2, [sp, #0]
 800eda0:	9301      	str	r3, [sp, #4]
 800eda2:	0002      	movs	r2, r0
 800eda4:	2002      	movs	r0, #2
 800eda6:	f005 f887 	bl	8013eb8 <CreateLine>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800edaa:	4b34      	ldr	r3, [pc, #208]	@ (800ee7c <sen5x_printvalues+0x1c0>)
 800edac:	2208      	movs	r2, #8
 800edae:	5e9b      	ldrsh	r3, [r3, r2]
 800edb0:	4a3a      	ldr	r2, [pc, #232]	@ (800ee9c <sen5x_printvalues+0x1e0>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	d018      	beq.n	800ede8 <sen5x_printvalues+0x12c>
        Info("sen5x Ambient humidity: %.1f %%RH", sen5x_data.ambient_humidity / 100.0f);
 800edb6:	4b31      	ldr	r3, [pc, #196]	@ (800ee7c <sen5x_printvalues+0x1c0>)
 800edb8:	2208      	movs	r2, #8
 800edba:	5e9b      	ldrsh	r3, [r3, r2]
 800edbc:	0018      	movs	r0, r3
 800edbe:	f7f2 fd33 	bl	8001828 <__aeabi_i2f>
 800edc2:	1c03      	adds	r3, r0, #0
 800edc4:	4936      	ldr	r1, [pc, #216]	@ (800eea0 <sen5x_printvalues+0x1e4>)
 800edc6:	1c18      	adds	r0, r3, #0
 800edc8:	f7f1 ff6c 	bl	8000ca4 <__aeabi_fdiv>
 800edcc:	1c03      	adds	r3, r0, #0
 800edce:	1c18      	adds	r0, r3, #0
 800edd0:	f7f4 fd60 	bl	8003894 <__aeabi_f2d>
 800edd4:	0002      	movs	r2, r0
 800edd6:	000b      	movs	r3, r1
 800edd8:	4832      	ldr	r0, [pc, #200]	@ (800eea4 <sen5x_printvalues+0x1e8>)
 800edda:	492c      	ldr	r1, [pc, #176]	@ (800ee8c <sen5x_printvalues+0x1d0>)
 800eddc:	9200      	str	r2, [sp, #0]
 800edde:	9301      	str	r3, [sp, #4]
 800ede0:	0002      	movs	r2, r0
 800ede2:	2002      	movs	r0, #2
 800ede4:	f005 f868 	bl	8013eb8 <CreateLine>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800ede8:	4b24      	ldr	r3, [pc, #144]	@ (800ee7c <sen5x_printvalues+0x1c0>)
 800edea:	220a      	movs	r2, #10
 800edec:	5e9b      	ldrsh	r3, [r3, r2]
 800edee:	4a2b      	ldr	r2, [pc, #172]	@ (800ee9c <sen5x_printvalues+0x1e0>)
 800edf0:	4293      	cmp	r3, r2
 800edf2:	d018      	beq.n	800ee26 <sen5x_printvalues+0x16a>
        Info("sen5x Ambient temperature: %.1f °C", sen5x_data.ambient_temperature / 200.0f);
 800edf4:	4b21      	ldr	r3, [pc, #132]	@ (800ee7c <sen5x_printvalues+0x1c0>)
 800edf6:	220a      	movs	r2, #10
 800edf8:	5e9b      	ldrsh	r3, [r3, r2]
 800edfa:	0018      	movs	r0, r3
 800edfc:	f7f2 fd14 	bl	8001828 <__aeabi_i2f>
 800ee00:	1c03      	adds	r3, r0, #0
 800ee02:	4929      	ldr	r1, [pc, #164]	@ (800eea8 <sen5x_printvalues+0x1ec>)
 800ee04:	1c18      	adds	r0, r3, #0
 800ee06:	f7f1 ff4d 	bl	8000ca4 <__aeabi_fdiv>
 800ee0a:	1c03      	adds	r3, r0, #0
 800ee0c:	1c18      	adds	r0, r3, #0
 800ee0e:	f7f4 fd41 	bl	8003894 <__aeabi_f2d>
 800ee12:	0002      	movs	r2, r0
 800ee14:	000b      	movs	r3, r1
 800ee16:	4825      	ldr	r0, [pc, #148]	@ (800eeac <sen5x_printvalues+0x1f0>)
 800ee18:	491c      	ldr	r1, [pc, #112]	@ (800ee8c <sen5x_printvalues+0x1d0>)
 800ee1a:	9200      	str	r2, [sp, #0]
 800ee1c:	9301      	str	r3, [sp, #4]
 800ee1e:	0002      	movs	r2, r0
 800ee20:	2002      	movs	r0, #2
 800ee22:	f005 f849 	bl	8013eb8 <CreateLine>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800ee26:	4b15      	ldr	r3, [pc, #84]	@ (800ee7c <sen5x_printvalues+0x1c0>)
 800ee28:	220c      	movs	r2, #12
 800ee2a:	5e9b      	ldrsh	r3, [r3, r2]
 800ee2c:	4a1b      	ldr	r2, [pc, #108]	@ (800ee9c <sen5x_printvalues+0x1e0>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d00d      	beq.n	800ee4e <sen5x_printvalues+0x192>
        Info("sen55 VOC index: %d", sen5x_data.voc_index / 10);
 800ee32:	4b12      	ldr	r3, [pc, #72]	@ (800ee7c <sen5x_printvalues+0x1c0>)
 800ee34:	220c      	movs	r2, #12
 800ee36:	5e9b      	ldrsh	r3, [r3, r2]
 800ee38:	210a      	movs	r1, #10
 800ee3a:	0018      	movs	r0, r3
 800ee3c:	f7f1 fa3c 	bl	80002b8 <__divsi3>
 800ee40:	0003      	movs	r3, r0
 800ee42:	b21b      	sxth	r3, r3
 800ee44:	4a1a      	ldr	r2, [pc, #104]	@ (800eeb0 <sen5x_printvalues+0x1f4>)
 800ee46:	4911      	ldr	r1, [pc, #68]	@ (800ee8c <sen5x_printvalues+0x1d0>)
 800ee48:	2002      	movs	r0, #2
 800ee4a:	f005 f835 	bl	8013eb8 <CreateLine>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800ee4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ee7c <sen5x_printvalues+0x1c0>)
 800ee50:	220e      	movs	r2, #14
 800ee52:	5e9b      	ldrsh	r3, [r3, r2]
 800ee54:	4a11      	ldr	r2, [pc, #68]	@ (800ee9c <sen5x_printvalues+0x1e0>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d00d      	beq.n	800ee76 <sen5x_printvalues+0x1ba>
        Info("sen55 NOx index: %d", sen5x_data.nox_index / 10);
 800ee5a:	4b08      	ldr	r3, [pc, #32]	@ (800ee7c <sen5x_printvalues+0x1c0>)
 800ee5c:	220e      	movs	r2, #14
 800ee5e:	5e9b      	ldrsh	r3, [r3, r2]
 800ee60:	210a      	movs	r1, #10
 800ee62:	0018      	movs	r0, r3
 800ee64:	f7f1 fa28 	bl	80002b8 <__divsi3>
 800ee68:	0003      	movs	r3, r0
 800ee6a:	b21b      	sxth	r3, r3
 800ee6c:	4a11      	ldr	r2, [pc, #68]	@ (800eeb4 <sen5x_printvalues+0x1f8>)
 800ee6e:	4907      	ldr	r1, [pc, #28]	@ (800ee8c <sen5x_printvalues+0x1d0>)
 800ee70:	2002      	movs	r0, #2
 800ee72:	f005 f821 	bl	8013eb8 <CreateLine>
  }
}
 800ee76:	46c0      	nop			@ (mov r8, r8)
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}
 800ee7c:	200011d0 	.word	0x200011d0
 800ee80:	0000ffff 	.word	0x0000ffff
 800ee84:	41200000 	.word	0x41200000
 800ee88:	0802d68c 	.word	0x0802d68c
 800ee8c:	0802d2d4 	.word	0x0802d2d4
 800ee90:	0802d6b4 	.word	0x0802d6b4
 800ee94:	0802d6dc 	.word	0x0802d6dc
 800ee98:	0802d704 	.word	0x0802d704
 800ee9c:	00007fff 	.word	0x00007fff
 800eea0:	42c80000 	.word	0x42c80000
 800eea4:	0802d72c 	.word	0x0802d72c
 800eea8:	43480000 	.word	0x43480000
 800eeac:	0802d750 	.word	0x0802d750
 800eeb0:	0802d774 	.word	0x0802d774
 800eeb4:	0802d788 	.word	0x0802d788

0800eeb8 <sen5xStore>:

void sen5xStore() {
 800eeb8:	b5b0      	push	{r4, r5, r7, lr}
 800eeba:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800eebc:	4b41      	ldr	r3, [pc, #260]	@ (800efc4 <sen5xStore+0x10c>)
 800eebe:	881b      	ldrh	r3, [r3, #0]
 800eec0:	4a41      	ldr	r2, [pc, #260]	@ (800efc8 <sen5xStore+0x110>)
 800eec2:	4293      	cmp	r3, r2
 800eec4:	d004      	beq.n	800eed0 <sen5xStore+0x18>
    setPM1p0(sen5x_data.mass_concentration_pm1p0);
 800eec6:	4b3f      	ldr	r3, [pc, #252]	@ (800efc4 <sen5xStore+0x10c>)
 800eec8:	881b      	ldrh	r3, [r3, #0]
 800eeca:	0018      	movs	r0, r3
 800eecc:	f7f5 fe7a 	bl	8004bc4 <setPM1p0>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800eed0:	4b3c      	ldr	r3, [pc, #240]	@ (800efc4 <sen5xStore+0x10c>)
 800eed2:	885b      	ldrh	r3, [r3, #2]
 800eed4:	4a3c      	ldr	r2, [pc, #240]	@ (800efc8 <sen5xStore+0x110>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d004      	beq.n	800eee4 <sen5xStore+0x2c>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800eeda:	4b3a      	ldr	r3, [pc, #232]	@ (800efc4 <sen5xStore+0x10c>)
 800eedc:	885b      	ldrh	r3, [r3, #2]
 800eede:	0018      	movs	r0, r3
 800eee0:	f7f5 fe9c 	bl	8004c1c <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800eee4:	4b37      	ldr	r3, [pc, #220]	@ (800efc4 <sen5xStore+0x10c>)
 800eee6:	889b      	ldrh	r3, [r3, #4]
 800eee8:	4a37      	ldr	r2, [pc, #220]	@ (800efc8 <sen5xStore+0x110>)
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d004      	beq.n	800eef8 <sen5xStore+0x40>
    setPM4p0(sen5x_data.mass_concentration_pm4p0);
 800eeee:	4b35      	ldr	r3, [pc, #212]	@ (800efc4 <sen5xStore+0x10c>)
 800eef0:	889b      	ldrh	r3, [r3, #4]
 800eef2:	0018      	movs	r0, r3
 800eef4:	f7f5 febe 	bl	8004c74 <setPM4p0>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800eef8:	4b32      	ldr	r3, [pc, #200]	@ (800efc4 <sen5xStore+0x10c>)
 800eefa:	88db      	ldrh	r3, [r3, #6]
 800eefc:	4a32      	ldr	r2, [pc, #200]	@ (800efc8 <sen5xStore+0x110>)
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d004      	beq.n	800ef0c <sen5xStore+0x54>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800ef02:	4b30      	ldr	r3, [pc, #192]	@ (800efc4 <sen5xStore+0x10c>)
 800ef04:	88db      	ldrh	r3, [r3, #6]
 800ef06:	0018      	movs	r0, r3
 800ef08:	f7f5 fee0 	bl	8004ccc <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800ef0c:	4b2f      	ldr	r3, [pc, #188]	@ (800efcc <sen5xStore+0x114>)
 800ef0e:	791b      	ldrb	r3, [r3, #4]
 800ef10:	2b34      	cmp	r3, #52	@ 0x34
 800ef12:	d003      	beq.n	800ef1c <sen5xStore+0x64>
 800ef14:	4b2d      	ldr	r3, [pc, #180]	@ (800efcc <sen5xStore+0x114>)
 800ef16:	791b      	ldrb	r3, [r3, #4]
 800ef18:	2b35      	cmp	r3, #53	@ 0x35
 800ef1a:	d14f      	bne.n	800efbc <sen5xStore+0x104>
    SetSEN545temphum(sen5x_data.ambient_temperature, sen5x_data.ambient_humidity);
 800ef1c:	4b29      	ldr	r3, [pc, #164]	@ (800efc4 <sen5xStore+0x10c>)
 800ef1e:	220a      	movs	r2, #10
 800ef20:	5e9b      	ldrsh	r3, [r3, r2]
 800ef22:	0018      	movs	r0, r3
 800ef24:	f7f2 fc80 	bl	8001828 <__aeabi_i2f>
 800ef28:	1c04      	adds	r4, r0, #0
 800ef2a:	4b26      	ldr	r3, [pc, #152]	@ (800efc4 <sen5xStore+0x10c>)
 800ef2c:	2208      	movs	r2, #8
 800ef2e:	5e9b      	ldrsh	r3, [r3, r2]
 800ef30:	0018      	movs	r0, r3
 800ef32:	f7f2 fc79 	bl	8001828 <__aeabi_i2f>
 800ef36:	1c03      	adds	r3, r0, #0
 800ef38:	1c19      	adds	r1, r3, #0
 800ef3a:	1c20      	adds	r0, r4, #0
 800ef3c:	f7f5 ff10 	bl	8004d60 <SetSEN545temphum>
    if (!VOCNOx || usbPluggedIn) {
 800ef40:	4b23      	ldr	r3, [pc, #140]	@ (800efd0 <sen5xStore+0x118>)
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	2201      	movs	r2, #1
 800ef46:	4053      	eors	r3, r2
 800ef48:	b2db      	uxtb	r3, r3
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d103      	bne.n	800ef56 <sen5xStore+0x9e>
 800ef4e:	4b21      	ldr	r3, [pc, #132]	@ (800efd4 <sen5xStore+0x11c>)
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d032      	beq.n	800efbc <sen5xStore+0x104>
      if (sen5x_data.voc_index != 0x7fff) {
 800ef56:	4b1b      	ldr	r3, [pc, #108]	@ (800efc4 <sen5xStore+0x10c>)
 800ef58:	220c      	movs	r2, #12
 800ef5a:	5e9b      	ldrsh	r3, [r3, r2]
 800ef5c:	4a1e      	ldr	r2, [pc, #120]	@ (800efd8 <sen5xStore+0x120>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d019      	beq.n	800ef96 <sen5xStore+0xde>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800ef62:	4b18      	ldr	r3, [pc, #96]	@ (800efc4 <sen5xStore+0x10c>)
 800ef64:	220c      	movs	r2, #12
 800ef66:	5e9b      	ldrsh	r3, [r3, r2]
 800ef68:	210a      	movs	r1, #10
 800ef6a:	0018      	movs	r0, r3
 800ef6c:	f7f1 f9a4 	bl	80002b8 <__divsi3>
 800ef70:	0003      	movs	r3, r0
 800ef72:	b21b      	sxth	r3, r3
 800ef74:	b29b      	uxth	r3, r3
 800ef76:	0018      	movs	r0, r3
 800ef78:	f003 ff02 	bl	8012d80 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800ef7c:	4b11      	ldr	r3, [pc, #68]	@ (800efc4 <sen5xStore+0x10c>)
 800ef7e:	220c      	movs	r2, #12
 800ef80:	5e9b      	ldrsh	r3, [r3, r2]
 800ef82:	210a      	movs	r1, #10
 800ef84:	0018      	movs	r0, r3
 800ef86:	f7f1 f997 	bl	80002b8 <__divsi3>
 800ef8a:	0003      	movs	r3, r0
 800ef8c:	b21b      	sxth	r3, r3
 800ef8e:	b29b      	uxth	r3, r3
 800ef90:	0018      	movs	r0, r3
 800ef92:	f7f5 fd8f 	bl	8004ab4 <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800ef96:	4b0b      	ldr	r3, [pc, #44]	@ (800efc4 <sen5xStore+0x10c>)
 800ef98:	220e      	movs	r2, #14
 800ef9a:	5e9b      	ldrsh	r3, [r3, r2]
 800ef9c:	4a0e      	ldr	r2, [pc, #56]	@ (800efd8 <sen5xStore+0x120>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d00c      	beq.n	800efbc <sen5xStore+0x104>
        setNOx(sen5x_data.nox_index / 10);
 800efa2:	4b08      	ldr	r3, [pc, #32]	@ (800efc4 <sen5xStore+0x10c>)
 800efa4:	220e      	movs	r2, #14
 800efa6:	5e9b      	ldrsh	r3, [r3, r2]
 800efa8:	210a      	movs	r1, #10
 800efaa:	0018      	movs	r0, r3
 800efac:	f7f1 f984 	bl	80002b8 <__divsi3>
 800efb0:	0003      	movs	r3, r0
 800efb2:	b21b      	sxth	r3, r3
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	0018      	movs	r0, r3
 800efb8:	f7f5 feb4 	bl	8004d24 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800efbc:	46c0      	nop			@ (mov r8, r8)
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bdb0      	pop	{r4, r5, r7, pc}
 800efc2:	46c0      	nop			@ (mov r8, r8)
 800efc4:	200011d0 	.word	0x200011d0
 800efc8:	0000ffff 	.word	0x0000ffff
 800efcc:	200011c0 	.word	0x200011c0
 800efd0:	200011be 	.word	0x200011be
 800efd4:	2000214d 	.word	0x2000214d
 800efd8:	00007fff 	.word	0x00007fff

0800efdc <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800efdc:	b590      	push	{r4, r7, lr}
 800efde:	b085      	sub	sp, #20
 800efe0:	af02      	add	r7, sp, #8
 800efe2:	6039      	str	r1, [r7, #0]
 800efe4:	0011      	movs	r1, r2
 800efe6:	1dfb      	adds	r3, r7, #7
 800efe8:	1c02      	adds	r2, r0, #0
 800efea:	701a      	strb	r2, [r3, #0]
 800efec:	1d3b      	adds	r3, r7, #4
 800efee:	1c0a      	adds	r2, r1, #0
 800eff0:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800eff2:	1dfb      	adds	r3, r7, #7
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	b29b      	uxth	r3, r3
 800eff8:	18db      	adds	r3, r3, r3
 800effa:	b299      	uxth	r1, r3
 800effc:	1d3b      	adds	r3, r7, #4
 800effe:	881b      	ldrh	r3, [r3, #0]
 800f000:	683a      	ldr	r2, [r7, #0]
 800f002:	4805      	ldr	r0, [pc, #20]	@ (800f018 <sensirion_i2c_hal_read+0x3c>)
 800f004:	2464      	movs	r4, #100	@ 0x64
 800f006:	9400      	str	r4, [sp, #0]
 800f008:	f007 f914 	bl	8016234 <HAL_I2C_Master_Receive>
 800f00c:	0003      	movs	r3, r0
 800f00e:	b25b      	sxtb	r3, r3
}
 800f010:	0018      	movs	r0, r3
 800f012:	46bd      	mov	sp, r7
 800f014:	b003      	add	sp, #12
 800f016:	bd90      	pop	{r4, r7, pc}
 800f018:	20000f8c 	.word	0x20000f8c

0800f01c <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800f01c:	b590      	push	{r4, r7, lr}
 800f01e:	b085      	sub	sp, #20
 800f020:	af02      	add	r7, sp, #8
 800f022:	6039      	str	r1, [r7, #0]
 800f024:	0011      	movs	r1, r2
 800f026:	1dfb      	adds	r3, r7, #7
 800f028:	1c02      	adds	r2, r0, #0
 800f02a:	701a      	strb	r2, [r3, #0]
 800f02c:	1d3b      	adds	r3, r7, #4
 800f02e:	1c0a      	adds	r2, r1, #0
 800f030:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800f032:	1dfb      	adds	r3, r7, #7
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	b29b      	uxth	r3, r3
 800f038:	18db      	adds	r3, r3, r3
 800f03a:	b299      	uxth	r1, r3
 800f03c:	1d3b      	adds	r3, r7, #4
 800f03e:	881b      	ldrh	r3, [r3, #0]
 800f040:	683a      	ldr	r2, [r7, #0]
 800f042:	4805      	ldr	r0, [pc, #20]	@ (800f058 <sensirion_i2c_hal_write+0x3c>)
 800f044:	2464      	movs	r4, #100	@ 0x64
 800f046:	9400      	str	r4, [sp, #0]
 800f048:	f006 ffec 	bl	8016024 <HAL_I2C_Master_Transmit>
 800f04c:	0003      	movs	r3, r0
 800f04e:	b25b      	sxtb	r3, r3
}
 800f050:	0018      	movs	r0, r3
 800f052:	46bd      	mov	sp, r7
 800f054:	b003      	add	sp, #12
 800f056:	bd90      	pop	{r4, r7, pc}
 800f058:	20000f8c 	.word	0x20000f8c

0800f05c <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b084      	sub	sp, #16
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	22fa      	movs	r2, #250	@ 0xfa
 800f068:	0091      	lsls	r1, r2, #2
 800f06a:	0018      	movs	r0, r3
 800f06c:	f7f1 f89a 	bl	80001a4 <__udivsi3>
 800f070:	0003      	movs	r3, r0
 800f072:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	22fa      	movs	r2, #250	@ 0xfa
 800f078:	0091      	lsls	r1, r2, #2
 800f07a:	0018      	movs	r0, r3
 800f07c:	f7f1 f918 	bl	80002b0 <__aeabi_uidivmod>
 800f080:	1e0b      	subs	r3, r1, #0
 800f082:	d002      	beq.n	800f08a <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	3301      	adds	r3, #1
 800f088:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	0018      	movs	r0, r3
 800f08e:	f005 fc9d 	bl	80149cc <HAL_Delay>
}
 800f092:	46c0      	nop			@ (mov r8, r8)
 800f094:	46bd      	mov	sp, r7
 800f096:	b004      	add	sp, #16
 800f098:	bd80      	pop	{r7, pc}
	...

0800f09c <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
  uint32_t device_status = sen5x_read_device_status(&device_status);
 800f0a2:	1d3b      	adds	r3, r7, #4
 800f0a4:	0018      	movs	r0, r3
 800f0a6:	f000 fd2b 	bl	800fb00 <sen5x_read_device_status>
 800f0aa:	0003      	movs	r3, r0
 800f0ac:	607b      	str	r3, [r7, #4]
  if (device_status == 0xD206) {
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	4a2c      	ldr	r2, [pc, #176]	@ (800f164 <sen5x_check_for_errors+0xc8>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d107      	bne.n	800f0c6 <sen5x_check_for_errors+0x2a>
    Error("Error reading sen5x device status register causes by I2C error");
 800f0b6:	4a2c      	ldr	r2, [pc, #176]	@ (800f168 <sen5x_check_for_errors+0xcc>)
 800f0b8:	4b2c      	ldr	r3, [pc, #176]	@ (800f16c <sen5x_check_for_errors+0xd0>)
 800f0ba:	0019      	movs	r1, r3
 800f0bc:	2001      	movs	r0, #1
 800f0be:	f004 fefb 	bl	8013eb8 <CreateLine>
    return true;
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	e049      	b.n	800f15a <sen5x_check_for_errors+0xbe>
  }
  if (device_status == 0) {
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d101      	bne.n	800f0d0 <sen5x_check_for_errors+0x34>
    return false;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	e044      	b.n	800f15a <sen5x_check_for_errors+0xbe>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800f0d0:	687a      	ldr	r2, [r7, #4]
 800f0d2:	2380      	movs	r3, #128	@ 0x80
 800f0d4:	039b      	lsls	r3, r3, #14
 800f0d6:	4013      	ands	r3, r2
 800f0d8:	d005      	beq.n	800f0e6 <sen5x_check_for_errors+0x4a>
    Debug("sen5x Fan speed out of range");
 800f0da:	4a25      	ldr	r2, [pc, #148]	@ (800f170 <sen5x_check_for_errors+0xd4>)
 800f0dc:	4b25      	ldr	r3, [pc, #148]	@ (800f174 <sen5x_check_for_errors+0xd8>)
 800f0de:	0019      	movs	r1, r3
 800f0e0:	2003      	movs	r0, #3
 800f0e2:	f004 fee9 	bl	8013eb8 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800f0e6:	687a      	ldr	r2, [r7, #4]
 800f0e8:	2380      	movs	r3, #128	@ 0x80
 800f0ea:	031b      	lsls	r3, r3, #12
 800f0ec:	4013      	ands	r3, r2
 800f0ee:	d005      	beq.n	800f0fc <sen5x_check_for_errors+0x60>
    Debug("sen5x Fan cleaning active");
 800f0f0:	4a21      	ldr	r2, [pc, #132]	@ (800f178 <sen5x_check_for_errors+0xdc>)
 800f0f2:	4b20      	ldr	r3, [pc, #128]	@ (800f174 <sen5x_check_for_errors+0xd8>)
 800f0f4:	0019      	movs	r1, r3
 800f0f6:	2003      	movs	r0, #3
 800f0f8:	f004 fede 	bl	8013eb8 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2280      	movs	r2, #128	@ 0x80
 800f100:	4013      	ands	r3, r2
 800f102:	d005      	beq.n	800f110 <sen5x_check_for_errors+0x74>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800f104:	4a1d      	ldr	r2, [pc, #116]	@ (800f17c <sen5x_check_for_errors+0xe0>)
 800f106:	4b1b      	ldr	r3, [pc, #108]	@ (800f174 <sen5x_check_for_errors+0xd8>)
 800f108:	0019      	movs	r1, r3
 800f10a:	2003      	movs	r0, #3
 800f10c:	f004 fed4 	bl	8013eb8 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2240      	movs	r2, #64	@ 0x40
 800f114:	4013      	ands	r3, r2
 800f116:	d005      	beq.n	800f124 <sen5x_check_for_errors+0x88>
    Debug("sen5x RHT communication error");
 800f118:	4a19      	ldr	r2, [pc, #100]	@ (800f180 <sen5x_check_for_errors+0xe4>)
 800f11a:	4b16      	ldr	r3, [pc, #88]	@ (800f174 <sen5x_check_for_errors+0xd8>)
 800f11c:	0019      	movs	r1, r3
 800f11e:	2003      	movs	r0, #3
 800f120:	f004 feca 	bl	8013eb8 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2220      	movs	r2, #32
 800f128:	4013      	ands	r3, r2
 800f12a:	d005      	beq.n	800f138 <sen5x_check_for_errors+0x9c>
    Debug("sen5x Laser failure");
 800f12c:	4a15      	ldr	r2, [pc, #84]	@ (800f184 <sen5x_check_for_errors+0xe8>)
 800f12e:	4b11      	ldr	r3, [pc, #68]	@ (800f174 <sen5x_check_for_errors+0xd8>)
 800f130:	0019      	movs	r1, r3
 800f132:	2003      	movs	r0, #3
 800f134:	f004 fec0 	bl	8013eb8 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2210      	movs	r2, #16
 800f13c:	4013      	ands	r3, r2
 800f13e:	d005      	beq.n	800f14c <sen5x_check_for_errors+0xb0>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800f140:	4a11      	ldr	r2, [pc, #68]	@ (800f188 <sen5x_check_for_errors+0xec>)
 800f142:	4b0c      	ldr	r3, [pc, #48]	@ (800f174 <sen5x_check_for_errors+0xd8>)
 800f144:	0019      	movs	r1, r3
 800f146:	2003      	movs	r0, #3
 800f148:	f004 feb6 	bl	8013eb8 <CreateLine>
  }
  Debug("Content of SEN5x Device Status Register: 0x%08X", device_status);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	4a0f      	ldr	r2, [pc, #60]	@ (800f18c <sen5x_check_for_errors+0xf0>)
 800f150:	4908      	ldr	r1, [pc, #32]	@ (800f174 <sen5x_check_for_errors+0xd8>)
 800f152:	2003      	movs	r0, #3
 800f154:	f004 feb0 	bl	8013eb8 <CreateLine>
  return true;
 800f158:	2301      	movs	r3, #1
}
 800f15a:	0018      	movs	r0, r3
 800f15c:	46bd      	mov	sp, r7
 800f15e:	b002      	add	sp, #8
 800f160:	bd80      	pop	{r7, pc}
 800f162:	46c0      	nop			@ (mov r8, r8)
 800f164:	0000d206 	.word	0x0000d206
 800f168:	0802d79c 	.word	0x0802d79c
 800f16c:	0802d340 	.word	0x0802d340
 800f170:	0802d7dc 	.word	0x0802d7dc
 800f174:	0802d314 	.word	0x0802d314
 800f178:	0802d7fc 	.word	0x0802d7fc
 800f17c:	0802d818 	.word	0x0802d818
 800f180:	0802d83c 	.word	0x0802d83c
 800f184:	0802d85c 	.word	0x0802d85c
 800f188:	0802d870 	.word	0x0802d870
 800f18c:	0802d8ac 	.word	0x0802d8ac

0800f190 <set_light_on_state>:

void set_light_on_state(void) {
 800f190:	b580      	push	{r7, lr}
 800f192:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800f194:	4b15      	ldr	r3, [pc, #84]	@ (800f1ec <set_light_on_state+0x5c>)
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	2201      	movs	r2, #1
 800f19a:	4053      	eors	r3, r2
 800f19c:	b2db      	uxtb	r3, r3
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d008      	beq.n	800f1b4 <set_light_on_state+0x24>
    sen5x_Power_On();
 800f1a2:	f7ff faf5 	bl	800e790 <sen5x_Power_On>
    Debug("sen5x powered on, warming up.");
 800f1a6:	4a12      	ldr	r2, [pc, #72]	@ (800f1f0 <set_light_on_state+0x60>)
 800f1a8:	4b12      	ldr	r3, [pc, #72]	@ (800f1f4 <set_light_on_state+0x64>)
 800f1aa:	0019      	movs	r1, r3
 800f1ac:	2003      	movs	r0, #3
 800f1ae:	f004 fe83 	bl	8013eb8 <CreateLine>
 800f1b2:	e00a      	b.n	800f1ca <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800f1b4:	f005 fc00 	bl	80149b8 <HAL_GetTick>
 800f1b8:	0002      	movs	r2, r0
 800f1ba:	4b0f      	ldr	r3, [pc, #60]	@ (800f1f8 <set_light_on_state+0x68>)
 800f1bc:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800f1be:	4a0f      	ldr	r2, [pc, #60]	@ (800f1fc <set_light_on_state+0x6c>)
 800f1c0:	4b0c      	ldr	r3, [pc, #48]	@ (800f1f4 <set_light_on_state+0x64>)
 800f1c2:	0019      	movs	r1, r3
 800f1c4:	2003      	movs	r0, #3
 800f1c6:	f004 fe77 	bl	8013eb8 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800f1ca:	f7ff fc75 	bl	800eab8 <sen5x_lightup_measurement>
 800f1ce:	1e03      	subs	r3, r0, #0
 800f1d0:	d005      	beq.n	800f1de <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800f1d2:	4a0b      	ldr	r2, [pc, #44]	@ (800f200 <set_light_on_state+0x70>)
 800f1d4:	4b0b      	ldr	r3, [pc, #44]	@ (800f204 <set_light_on_state+0x74>)
 800f1d6:	0019      	movs	r1, r3
 800f1d8:	2001      	movs	r0, #1
 800f1da:	f004 fe6d 	bl	8013eb8 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800f1de:	4b0a      	ldr	r3, [pc, #40]	@ (800f208 <set_light_on_state+0x78>)
 800f1e0:	2203      	movs	r2, #3
 800f1e2:	701a      	strb	r2, [r3, #0]
}
 800f1e4:	46c0      	nop			@ (mov r8, r8)
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}
 800f1ea:	46c0      	nop			@ (mov r8, r8)
 800f1ec:	200011bd 	.word	0x200011bd
 800f1f0:	0802d8dc 	.word	0x0802d8dc
 800f1f4:	0802d314 	.word	0x0802d314
 800f1f8:	200011cc 	.word	0x200011cc
 800f1fc:	0802d8fc 	.word	0x0802d8fc
 800f200:	0802d914 	.word	0x0802d914
 800f204:	0802d340 	.word	0x0802d340
 800f208:	200000aa 	.word	0x200000aa

0800f20c <sen5x_statemachine>:

void sen5x_statemachine() {
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800f212:	1dfb      	adds	r3, r7, #7
 800f214:	2200      	movs	r2, #0
 800f216:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800f218:	4b92      	ldr	r3, [pc, #584]	@ (800f464 <sen5x_statemachine+0x258>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	0018      	movs	r0, r3
 800f21e:	f004 fdf5 	bl	8013e0c <TimestampIsReached>
 800f222:	1e03      	subs	r3, r0, #0
 800f224:	d100      	bne.n	800f228 <sen5x_statemachine+0x1c>
 800f226:	e118      	b.n	800f45a <sen5x_statemachine+0x24e>
    switch (PMsamplesState) {
 800f228:	4b8f      	ldr	r3, [pc, #572]	@ (800f468 <sen5x_statemachine+0x25c>)
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	2b05      	cmp	r3, #5
 800f22e:	d900      	bls.n	800f232 <sen5x_statemachine+0x26>
 800f230:	e113      	b.n	800f45a <sen5x_statemachine+0x24e>
 800f232:	009a      	lsls	r2, r3, #2
 800f234:	4b8d      	ldr	r3, [pc, #564]	@ (800f46c <sen5x_statemachine+0x260>)
 800f236:	18d3      	adds	r3, r2, r3
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800f23c:	4a8c      	ldr	r2, [pc, #560]	@ (800f470 <sen5x_statemachine+0x264>)
 800f23e:	4b8d      	ldr	r3, [pc, #564]	@ (800f474 <sen5x_statemachine+0x268>)
 800f240:	0019      	movs	r1, r3
 800f242:	2001      	movs	r0, #1
 800f244:	f004 fe38 	bl	8013eb8 <CreateLine>
      SetPMSensorStatus(false);
 800f248:	2000      	movs	r0, #0
 800f24a:	f7fe f9fb 	bl	800d644 <SetPMSensorStatus>
      DisablePMSensor();
 800f24e:	f7fe f97d 	bl	800d54c <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then ten minutes a message when continue operated.
 800f252:	f005 fbb1 	bl	80149b8 <HAL_GetTick>
 800f256:	0003      	movs	r3, r0
 800f258:	4a87      	ldr	r2, [pc, #540]	@ (800f478 <sen5x_statemachine+0x26c>)
 800f25a:	189a      	adds	r2, r3, r2
 800f25c:	4b81      	ldr	r3, [pc, #516]	@ (800f464 <sen5x_statemachine+0x258>)
 800f25e:	601a      	str	r2, [r3, #0]
      break;
 800f260:	e0fb      	b.n	800f45a <sen5x_statemachine+0x24e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f262:	f005 fba9 	bl	80149b8 <HAL_GetTick>
 800f266:	0003      	movs	r3, r0
 800f268:	4a84      	ldr	r2, [pc, #528]	@ (800f47c <sen5x_statemachine+0x270>)
 800f26a:	189a      	adds	r2, r3, r2
 800f26c:	4b7d      	ldr	r3, [pc, #500]	@ (800f464 <sen5x_statemachine+0x258>)
 800f26e:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800f270:	f7ff ff8e 	bl	800f190 <set_light_on_state>
      break;
 800f274:	e0f1      	b.n	800f45a <sen5x_statemachine+0x24e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800f276:	4b7c      	ldr	r3, [pc, #496]	@ (800f468 <sen5x_statemachine+0x25c>)
 800f278:	2202      	movs	r2, #2
 800f27a:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800f27c:	4b80      	ldr	r3, [pc, #512]	@ (800f480 <sen5x_statemachine+0x274>)
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	2b05      	cmp	r3, #5
 800f282:	d905      	bls.n	800f290 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800f284:	4b78      	ldr	r3, [pc, #480]	@ (800f468 <sen5x_statemachine+0x25c>)
 800f286:	2200      	movs	r2, #0
 800f288:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800f28a:	f7ff fab1 	bl	800e7f0 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800f28e:	e0e1      	b.n	800f454 <sen5x_statemachine+0x248>
        if (sen5x_check_for_errors()) {
 800f290:	f7ff ff04 	bl	800f09c <sen5x_check_for_errors>
 800f294:	1e03      	subs	r3, r0, #0
 800f296:	d028      	beq.n	800f2ea <sen5x_statemachine+0xde>
          if (sen5x_device_reset()) {
 800f298:	f000 fc84 	bl	800fba4 <sen5x_device_reset>
 800f29c:	1e03      	subs	r3, r0, #0
 800f29e:	d018      	beq.n	800f2d2 <sen5x_statemachine+0xc6>
            Error("Error resetting sen5x");
 800f2a0:	4a78      	ldr	r2, [pc, #480]	@ (800f484 <sen5x_statemachine+0x278>)
 800f2a2:	4b74      	ldr	r3, [pc, #464]	@ (800f474 <sen5x_statemachine+0x268>)
 800f2a4:	0019      	movs	r1, r3
 800f2a6:	2001      	movs	r0, #1
 800f2a8:	f004 fe06 	bl	8013eb8 <CreateLine>
            sen5xErrors++;
 800f2ac:	4b74      	ldr	r3, [pc, #464]	@ (800f480 <sen5x_statemachine+0x274>)
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	b2da      	uxtb	r2, r3
 800f2b4:	4b72      	ldr	r3, [pc, #456]	@ (800f480 <sen5x_statemachine+0x274>)
 800f2b6:	701a      	strb	r2, [r3, #0]
            sen5x_Power_Off();  // switch off sen5x for a full reset
 800f2b8:	f7ff fa9a 	bl	800e7f0 <sen5x_Power_Off>
            sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f2bc:	f005 fb7c 	bl	80149b8 <HAL_GetTick>
 800f2c0:	0003      	movs	r3, r0
 800f2c2:	4a6e      	ldr	r2, [pc, #440]	@ (800f47c <sen5x_statemachine+0x270>)
 800f2c4:	189a      	adds	r2, r3, r2
 800f2c6:	4b67      	ldr	r3, [pc, #412]	@ (800f464 <sen5x_statemachine+0x258>)
 800f2c8:	601a      	str	r2, [r3, #0]
            PMsamplesState = SAMPLES_TAKEN;
 800f2ca:	4b67      	ldr	r3, [pc, #412]	@ (800f468 <sen5x_statemachine+0x25c>)
 800f2cc:	2205      	movs	r2, #5
 800f2ce:	701a      	strb	r2, [r3, #0]
 800f2d0:	e005      	b.n	800f2de <sen5x_statemachine+0xd2>
            Info("sen5x reset executed");
 800f2d2:	4a6d      	ldr	r2, [pc, #436]	@ (800f488 <sen5x_statemachine+0x27c>)
 800f2d4:	4b6d      	ldr	r3, [pc, #436]	@ (800f48c <sen5x_statemachine+0x280>)
 800f2d6:	0019      	movs	r1, r3
 800f2d8:	2002      	movs	r0, #2
 800f2da:	f004 fded 	bl	8013eb8 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800f2de:	f005 fb6b 	bl	80149b8 <HAL_GetTick>
 800f2e2:	0002      	movs	r2, r0
 800f2e4:	4b5f      	ldr	r3, [pc, #380]	@ (800f464 <sen5x_statemachine+0x258>)
 800f2e6:	601a      	str	r2, [r3, #0]
      break;
 800f2e8:	e0b4      	b.n	800f454 <sen5x_statemachine+0x248>
          if (sen5xErrors != 0) {
 800f2ea:	4b65      	ldr	r3, [pc, #404]	@ (800f480 <sen5x_statemachine+0x274>)
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d100      	bne.n	800f2f4 <sen5x_statemachine+0xe8>
 800f2f2:	e0af      	b.n	800f454 <sen5x_statemachine+0x248>
            sen5xErrors = 0;
 800f2f4:	4b62      	ldr	r3, [pc, #392]	@ (800f480 <sen5x_statemachine+0x274>)
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800f2fa:	4a65      	ldr	r2, [pc, #404]	@ (800f490 <sen5x_statemachine+0x284>)
 800f2fc:	4b65      	ldr	r3, [pc, #404]	@ (800f494 <sen5x_statemachine+0x288>)
 800f2fe:	0019      	movs	r1, r3
 800f300:	2003      	movs	r0, #3
 800f302:	f004 fdd9 	bl	8013eb8 <CreateLine>
      break;
 800f306:	e0a5      	b.n	800f454 <sen5x_statemachine+0x248>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800f308:	1dfb      	adds	r3, r7, #7
 800f30a:	0018      	movs	r0, r3
 800f30c:	f000 f966 	bl	800f5dc <sen5x_read_data_ready>
      if (data_ready) {
 800f310:	1dfb      	adds	r3, r7, #7
 800f312:	781b      	ldrb	r3, [r3, #0]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d038      	beq.n	800f38a <sen5x_statemachine+0x17e>
        SetPMIndicator();
 800f318:	f003 fbe0 	bl	8012adc <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800f31c:	4b5e      	ldr	r3, [pc, #376]	@ (800f498 <sen5x_statemachine+0x28c>)
 800f31e:	0018      	movs	r0, r3
 800f320:	f7ff fc70 	bl	800ec04 <sen5x_read_measurement>
 800f324:	1e03      	subs	r3, r0, #0
 800f326:	d017      	beq.n	800f358 <sen5x_statemachine+0x14c>
          Error("Error executing sen5x_read_measured_values()");
 800f328:	4a5c      	ldr	r2, [pc, #368]	@ (800f49c <sen5x_statemachine+0x290>)
 800f32a:	4b52      	ldr	r3, [pc, #328]	@ (800f474 <sen5x_statemachine+0x268>)
 800f32c:	0019      	movs	r1, r3
 800f32e:	2001      	movs	r0, #1
 800f330:	f004 fdc2 	bl	8013eb8 <CreateLine>
          sen5xErrors++;
 800f334:	4b52      	ldr	r3, [pc, #328]	@ (800f480 <sen5x_statemachine+0x274>)
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	3301      	adds	r3, #1
 800f33a:	b2da      	uxtb	r2, r3
 800f33c:	4b50      	ldr	r3, [pc, #320]	@ (800f480 <sen5x_statemachine+0x274>)
 800f33e:	701a      	strb	r2, [r3, #0]
          sen5x_Power_Off();  // switch off sen5x for a full reset
 800f340:	f7ff fa56 	bl	800e7f0 <sen5x_Power_Off>
          sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f344:	f005 fb38 	bl	80149b8 <HAL_GetTick>
 800f348:	0003      	movs	r3, r0
 800f34a:	4a4c      	ldr	r2, [pc, #304]	@ (800f47c <sen5x_statemachine+0x270>)
 800f34c:	189a      	adds	r2, r3, r2
 800f34e:	4b45      	ldr	r3, [pc, #276]	@ (800f464 <sen5x_statemachine+0x258>)
 800f350:	601a      	str	r2, [r3, #0]
          PMsamplesState = SAMPLES_TAKEN;
 800f352:	4b45      	ldr	r3, [pc, #276]	@ (800f468 <sen5x_statemachine+0x25c>)
 800f354:	2205      	movs	r2, #5
 800f356:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800f358:	4b51      	ldr	r3, [pc, #324]	@ (800f4a0 <sen5x_statemachine+0x294>)
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	3301      	adds	r3, #1
 800f35e:	b2da      	uxtb	r2, r3
 800f360:	4b4f      	ldr	r3, [pc, #316]	@ (800f4a0 <sen5x_statemachine+0x294>)
 800f362:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800f364:	4b4e      	ldr	r3, [pc, #312]	@ (800f4a0 <sen5x_statemachine+0x294>)
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	2b1f      	cmp	r3, #31
 800f36a:	d102      	bne.n	800f372 <sen5x_statemachine+0x166>
          sen5xSamples = 0;  // enable display on serial
 800f36c:	4b4c      	ldr	r3, [pc, #304]	@ (800f4a0 <sen5x_statemachine+0x294>)
 800f36e:	2200      	movs	r2, #0
 800f370:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800f372:	4b4b      	ldr	r3, [pc, #300]	@ (800f4a0 <sen5x_statemachine+0x294>)
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	2b01      	cmp	r3, #1
 800f378:	d901      	bls.n	800f37e <sen5x_statemachine+0x172>
          sen5xStore();
 800f37a:	f7ff fd9d 	bl	800eeb8 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800f37e:	4b48      	ldr	r3, [pc, #288]	@ (800f4a0 <sen5x_statemachine+0x294>)
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	2b02      	cmp	r3, #2
 800f384:	d101      	bne.n	800f38a <sen5x_statemachine+0x17e>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800f386:	f7ff fc99 	bl	800ecbc <sen5x_printvalues>
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800f38a:	4b46      	ldr	r3, [pc, #280]	@ (800f4a4 <sen5x_statemachine+0x298>)
 800f38c:	781b      	ldrb	r3, [r3, #0]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d103      	bne.n	800f39a <sen5x_statemachine+0x18e>
 800f392:	4b43      	ldr	r3, [pc, #268]	@ (800f4a0 <sen5x_statemachine+0x294>)
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	2b01      	cmp	r3, #1
 800f398:	d95e      	bls.n	800f458 <sen5x_statemachine+0x24c>
        PMsamplesState = CLEAN_FAN;
 800f39a:	4b33      	ldr	r3, [pc, #204]	@ (800f468 <sen5x_statemachine+0x25c>)
 800f39c:	2204      	movs	r2, #4
 800f39e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f3a0:	e05a      	b.n	800f458 <sen5x_statemachine+0x24c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((weekday == MONDAY ) && (lasthour == 1) && !fanCleaningDone) {
 800f3a2:	4b41      	ldr	r3, [pc, #260]	@ (800f4a8 <sen5x_statemachine+0x29c>)
 800f3a4:	781b      	ldrb	r3, [r3, #0]
 800f3a6:	2b01      	cmp	r3, #1
 800f3a8:	d11e      	bne.n	800f3e8 <sen5x_statemachine+0x1dc>
 800f3aa:	4b40      	ldr	r3, [pc, #256]	@ (800f4ac <sen5x_statemachine+0x2a0>)
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	2b01      	cmp	r3, #1
 800f3b0:	d11a      	bne.n	800f3e8 <sen5x_statemachine+0x1dc>
 800f3b2:	4b3f      	ldr	r3, [pc, #252]	@ (800f4b0 <sen5x_statemachine+0x2a4>)
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	4053      	eors	r3, r2
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d013      	beq.n	800f3e8 <sen5x_statemachine+0x1dc>
        sen5x_start_fan_cleaning();
 800f3c0:	f000 f9f2 	bl	800f7a8 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800f3c4:	4a3b      	ldr	r2, [pc, #236]	@ (800f4b4 <sen5x_statemachine+0x2a8>)
 800f3c6:	4b31      	ldr	r3, [pc, #196]	@ (800f48c <sen5x_statemachine+0x280>)
 800f3c8:	0019      	movs	r1, r3
 800f3ca:	2002      	movs	r0, #2
 800f3cc:	f004 fd74 	bl	8013eb8 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800f3d0:	f005 faf2 	bl	80149b8 <HAL_GetTick>
 800f3d4:	0003      	movs	r3, r0
 800f3d6:	4a38      	ldr	r2, [pc, #224]	@ (800f4b8 <sen5x_statemachine+0x2ac>)
 800f3d8:	189a      	adds	r2, r3, r2
 800f3da:	4b22      	ldr	r3, [pc, #136]	@ (800f464 <sen5x_statemachine+0x258>)
 800f3dc:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800f3de:	4b34      	ldr	r3, [pc, #208]	@ (800f4b0 <sen5x_statemachine+0x2a4>)
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800f3e4:	f7ff fb68 	bl	800eab8 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800f3e8:	4b1f      	ldr	r3, [pc, #124]	@ (800f468 <sen5x_statemachine+0x25c>)
 800f3ea:	2205      	movs	r2, #5
 800f3ec:	701a      	strb	r2, [r3, #0]
      break;
 800f3ee:	e034      	b.n	800f45a <sen5x_statemachine+0x24e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800f3f0:	4b2c      	ldr	r3, [pc, #176]	@ (800f4a4 <sen5x_statemachine+0x298>)
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	2201      	movs	r2, #1
 800f3f6:	4053      	eors	r3, r2
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d01c      	beq.n	800f438 <sen5x_statemachine+0x22c>
 800f3fe:	4b2f      	ldr	r3, [pc, #188]	@ (800f4bc <sen5x_statemachine+0x2b0>)
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	2201      	movs	r2, #1
 800f404:	4053      	eors	r3, r2
 800f406:	b2db      	uxtb	r3, r3
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d015      	beq.n	800f438 <sen5x_statemachine+0x22c>
        if (sen5x_extinguish_measurement()) {
 800f40c:	f7ff fba0 	bl	800eb50 <sen5x_extinguish_measurement>
 800f410:	1e03      	subs	r3, r0, #0
 800f412:	d005      	beq.n	800f420 <sen5x_statemachine+0x214>
          Error("Error executing sen5x_extinguish_measurement()");
 800f414:	4a2a      	ldr	r2, [pc, #168]	@ (800f4c0 <sen5x_statemachine+0x2b4>)
 800f416:	4b17      	ldr	r3, [pc, #92]	@ (800f474 <sen5x_statemachine+0x268>)
 800f418:	0019      	movs	r1, r3
 800f41a:	2001      	movs	r0, #1
 800f41c:	f004 fd4c 	bl	8013eb8 <CreateLine>
        }
        sen5xSamples = 0;
 800f420:	4b1f      	ldr	r3, [pc, #124]	@ (800f4a0 <sen5x_statemachine+0x294>)
 800f422:	2200      	movs	r2, #0
 800f424:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800f426:	f7ff f9e3 	bl	800e7f0 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800f42a:	2000      	movs	r0, #0
 800f42c:	f7fe f90a 	bl	800d644 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800f430:	4b0d      	ldr	r3, [pc, #52]	@ (800f468 <sen5x_statemachine+0x25c>)
 800f432:	2201      	movs	r2, #1
 800f434:	701a      	strb	r2, [r3, #0]
 800f436:	e002      	b.n	800f43e <sen5x_statemachine+0x232>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800f438:	4b0b      	ldr	r3, [pc, #44]	@ (800f468 <sen5x_statemachine+0x25c>)
 800f43a:	2203      	movs	r2, #3
 800f43c:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800f43e:	f003 fb6d 	bl	8012b1c <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800f442:	f005 fab9 	bl	80149b8 <HAL_GetTick>
 800f446:	0003      	movs	r3, r0
 800f448:	22fa      	movs	r2, #250	@ 0xfa
 800f44a:	0092      	lsls	r2, r2, #2
 800f44c:	189a      	adds	r2, r3, r2
 800f44e:	4b05      	ldr	r3, [pc, #20]	@ (800f464 <sen5x_statemachine+0x258>)
 800f450:	601a      	str	r2, [r3, #0]
    }
  }
}
 800f452:	e002      	b.n	800f45a <sen5x_statemachine+0x24e>
      break;
 800f454:	46c0      	nop			@ (mov r8, r8)
 800f456:	e000      	b.n	800f45a <sen5x_statemachine+0x24e>
      break;
 800f458:	46c0      	nop			@ (mov r8, r8)
}
 800f45a:	46c0      	nop			@ (mov r8, r8)
 800f45c:	46bd      	mov	sp, r7
 800f45e:	b002      	add	sp, #8
 800f460:	bd80      	pop	{r7, pc}
 800f462:	46c0      	nop			@ (mov r8, r8)
 800f464:	200011cc 	.word	0x200011cc
 800f468:	200000aa 	.word	0x200000aa
 800f46c:	0802e774 	.word	0x0802e774
 800f470:	0802d940 	.word	0x0802d940
 800f474:	0802d340 	.word	0x0802d340
 800f478:	0004cb2f 	.word	0x0004cb2f
 800f47c:	00005910 	.word	0x00005910
 800f480:	200011c9 	.word	0x200011c9
 800f484:	0802d970 	.word	0x0802d970
 800f488:	0802d988 	.word	0x0802d988
 800f48c:	0802d2d4 	.word	0x0802d2d4
 800f490:	0802d9a0 	.word	0x0802d9a0
 800f494:	0802d314 	.word	0x0802d314
 800f498:	200011d0 	.word	0x200011d0
 800f49c:	0802d9b4 	.word	0x0802d9b4
 800f4a0:	200011c8 	.word	0x200011c8
 800f4a4:	2000214d 	.word	0x2000214d
 800f4a8:	20000e43 	.word	0x20000e43
 800f4ac:	20000e42 	.word	0x20000e42
 800f4b0:	200011bc 	.word	0x200011bc
 800f4b4:	0802d9e4 	.word	0x0802d9e4
 800f4b8:	00002710 	.word	0x00002710
 800f4bc:	2000214e 	.word	0x2000214e
 800f4c0:	0802d9fc 	.word	0x0802d9fc

0800f4c4 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800f4c4:	b590      	push	{r4, r7, lr}
 800f4c6:	b083      	sub	sp, #12
 800f4c8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f4ca:	1dbb      	adds	r3, r7, #6
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800f4d0:	1dbc      	adds	r4, r7, #6
 800f4d2:	1dbb      	adds	r3, r7, #6
 800f4d4:	8819      	ldrh	r1, [r3, #0]
 800f4d6:	003b      	movs	r3, r7
 800f4d8:	2221      	movs	r2, #33	@ 0x21
 800f4da:	0018      	movs	r0, r3
 800f4dc:	f001 fb57 	bl	8010b8e <sensirion_i2c_add_command_to_buffer>
 800f4e0:	0003      	movs	r3, r0
 800f4e2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f4e4:	1d3c      	adds	r4, r7, #4
 800f4e6:	1dbb      	adds	r3, r7, #6
 800f4e8:	881a      	ldrh	r2, [r3, #0]
 800f4ea:	003b      	movs	r3, r7
 800f4ec:	0019      	movs	r1, r3
 800f4ee:	2069      	movs	r0, #105	@ 0x69
 800f4f0:	f001 fbd1 	bl	8010c96 <sensirion_i2c_write_data>
 800f4f4:	0003      	movs	r3, r0
 800f4f6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f4f8:	1d3b      	adds	r3, r7, #4
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	5e9b      	ldrsh	r3, [r3, r2]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d003      	beq.n	800f50a <sen5x_start_measurement+0x46>
        return error;
 800f502:	1d3b      	adds	r3, r7, #4
 800f504:	2200      	movs	r2, #0
 800f506:	5e9b      	ldrsh	r3, [r3, r2]
 800f508:	e004      	b.n	800f514 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f50a:	4b04      	ldr	r3, [pc, #16]	@ (800f51c <sen5x_start_measurement+0x58>)
 800f50c:	0018      	movs	r0, r3
 800f50e:	f7ff fda5 	bl	800f05c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f512:	2300      	movs	r3, #0
}
 800f514:	0018      	movs	r0, r3
 800f516:	46bd      	mov	sp, r7
 800f518:	b003      	add	sp, #12
 800f51a:	bd90      	pop	{r4, r7, pc}
 800f51c:	0000c350 	.word	0x0000c350

0800f520 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800f520:	b590      	push	{r4, r7, lr}
 800f522:	b083      	sub	sp, #12
 800f524:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f526:	1dbb      	adds	r3, r7, #6
 800f528:	2200      	movs	r2, #0
 800f52a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800f52c:	1dbc      	adds	r4, r7, #6
 800f52e:	1dbb      	adds	r3, r7, #6
 800f530:	8819      	ldrh	r1, [r3, #0]
 800f532:	003b      	movs	r3, r7
 800f534:	2237      	movs	r2, #55	@ 0x37
 800f536:	0018      	movs	r0, r3
 800f538:	f001 fb29 	bl	8010b8e <sensirion_i2c_add_command_to_buffer>
 800f53c:	0003      	movs	r3, r0
 800f53e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f540:	1d3c      	adds	r4, r7, #4
 800f542:	1dbb      	adds	r3, r7, #6
 800f544:	881a      	ldrh	r2, [r3, #0]
 800f546:	003b      	movs	r3, r7
 800f548:	0019      	movs	r1, r3
 800f54a:	2069      	movs	r0, #105	@ 0x69
 800f54c:	f001 fba3 	bl	8010c96 <sensirion_i2c_write_data>
 800f550:	0003      	movs	r3, r0
 800f552:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f554:	1d3b      	adds	r3, r7, #4
 800f556:	2200      	movs	r2, #0
 800f558:	5e9b      	ldrsh	r3, [r3, r2]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d003      	beq.n	800f566 <sen5x_start_measurement_without_pm+0x46>
        return error;
 800f55e:	1d3b      	adds	r3, r7, #4
 800f560:	2200      	movs	r2, #0
 800f562:	5e9b      	ldrsh	r3, [r3, r2]
 800f564:	e004      	b.n	800f570 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f566:	4b04      	ldr	r3, [pc, #16]	@ (800f578 <sen5x_start_measurement_without_pm+0x58>)
 800f568:	0018      	movs	r0, r3
 800f56a:	f7ff fd77 	bl	800f05c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f56e:	2300      	movs	r3, #0
}
 800f570:	0018      	movs	r0, r3
 800f572:	46bd      	mov	sp, r7
 800f574:	b003      	add	sp, #12
 800f576:	bd90      	pop	{r4, r7, pc}
 800f578:	0000c350 	.word	0x0000c350

0800f57c <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800f57c:	b590      	push	{r4, r7, lr}
 800f57e:	b083      	sub	sp, #12
 800f580:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f582:	1dbb      	adds	r3, r7, #6
 800f584:	2200      	movs	r2, #0
 800f586:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800f588:	1dbc      	adds	r4, r7, #6
 800f58a:	2382      	movs	r3, #130	@ 0x82
 800f58c:	005a      	lsls	r2, r3, #1
 800f58e:	1dbb      	adds	r3, r7, #6
 800f590:	8819      	ldrh	r1, [r3, #0]
 800f592:	003b      	movs	r3, r7
 800f594:	0018      	movs	r0, r3
 800f596:	f001 fafa 	bl	8010b8e <sensirion_i2c_add_command_to_buffer>
 800f59a:	0003      	movs	r3, r0
 800f59c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f59e:	1d3c      	adds	r4, r7, #4
 800f5a0:	1dbb      	adds	r3, r7, #6
 800f5a2:	881a      	ldrh	r2, [r3, #0]
 800f5a4:	003b      	movs	r3, r7
 800f5a6:	0019      	movs	r1, r3
 800f5a8:	2069      	movs	r0, #105	@ 0x69
 800f5aa:	f001 fb74 	bl	8010c96 <sensirion_i2c_write_data>
 800f5ae:	0003      	movs	r3, r0
 800f5b0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f5b2:	1d3b      	adds	r3, r7, #4
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	5e9b      	ldrsh	r3, [r3, r2]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d003      	beq.n	800f5c4 <sen5x_stop_measurement+0x48>
        return error;
 800f5bc:	1d3b      	adds	r3, r7, #4
 800f5be:	2200      	movs	r2, #0
 800f5c0:	5e9b      	ldrsh	r3, [r3, r2]
 800f5c2:	e004      	b.n	800f5ce <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800f5c4:	4b04      	ldr	r3, [pc, #16]	@ (800f5d8 <sen5x_stop_measurement+0x5c>)
 800f5c6:	0018      	movs	r0, r3
 800f5c8:	f7ff fd48 	bl	800f05c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f5cc:	2300      	movs	r3, #0
}
 800f5ce:	0018      	movs	r0, r3
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	b003      	add	sp, #12
 800f5d4:	bd90      	pop	{r4, r7, pc}
 800f5d6:	46c0      	nop			@ (mov r8, r8)
 800f5d8:	00030d40 	.word	0x00030d40

0800f5dc <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800f5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5de:	b085      	sub	sp, #20
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800f5e4:	250e      	movs	r5, #14
 800f5e6:	197b      	adds	r3, r7, r5
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800f5ec:	197c      	adds	r4, r7, r5
 800f5ee:	4a22      	ldr	r2, [pc, #136]	@ (800f678 <sen5x_read_data_ready+0x9c>)
 800f5f0:	197b      	adds	r3, r7, r5
 800f5f2:	8819      	ldrh	r1, [r3, #0]
 800f5f4:	2308      	movs	r3, #8
 800f5f6:	18fb      	adds	r3, r7, r3
 800f5f8:	0018      	movs	r0, r3
 800f5fa:	f001 fac8 	bl	8010b8e <sensirion_i2c_add_command_to_buffer>
 800f5fe:	0003      	movs	r3, r0
 800f600:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f602:	260c      	movs	r6, #12
 800f604:	19bc      	adds	r4, r7, r6
 800f606:	197b      	adds	r3, r7, r5
 800f608:	881a      	ldrh	r2, [r3, #0]
 800f60a:	2308      	movs	r3, #8
 800f60c:	18fb      	adds	r3, r7, r3
 800f60e:	0019      	movs	r1, r3
 800f610:	2069      	movs	r0, #105	@ 0x69
 800f612:	f001 fb40 	bl	8010c96 <sensirion_i2c_write_data>
 800f616:	0003      	movs	r3, r0
 800f618:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f61a:	19bb      	adds	r3, r7, r6
 800f61c:	2200      	movs	r2, #0
 800f61e:	5e9b      	ldrsh	r3, [r3, r2]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d003      	beq.n	800f62c <sen5x_read_data_ready+0x50>
        return error;
 800f624:	19bb      	adds	r3, r7, r6
 800f626:	2200      	movs	r2, #0
 800f628:	5e9b      	ldrsh	r3, [r3, r2]
 800f62a:	e020      	b.n	800f66e <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f62c:	4b13      	ldr	r3, [pc, #76]	@ (800f67c <sen5x_read_data_ready+0xa0>)
 800f62e:	0018      	movs	r0, r3
 800f630:	f7ff fd14 	bl	800f05c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800f634:	250c      	movs	r5, #12
 800f636:	197c      	adds	r4, r7, r5
 800f638:	2308      	movs	r3, #8
 800f63a:	18fb      	adds	r3, r7, r3
 800f63c:	2202      	movs	r2, #2
 800f63e:	0019      	movs	r1, r3
 800f640:	2069      	movs	r0, #105	@ 0x69
 800f642:	f001 fb40 	bl	8010cc6 <sensirion_i2c_read_data_inplace>
 800f646:	0003      	movs	r3, r0
 800f648:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f64a:	197b      	adds	r3, r7, r5
 800f64c:	2200      	movs	r2, #0
 800f64e:	5e9b      	ldrsh	r3, [r3, r2]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d003      	beq.n	800f65c <sen5x_read_data_ready+0x80>
        return error;
 800f654:	197b      	adds	r3, r7, r5
 800f656:	2200      	movs	r2, #0
 800f658:	5e9b      	ldrsh	r3, [r3, r2]
 800f65a:	e008      	b.n	800f66e <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800f65c:	2308      	movs	r3, #8
 800f65e:	18fb      	adds	r3, r7, r3
 800f660:	785b      	ldrb	r3, [r3, #1]
 800f662:	1e5a      	subs	r2, r3, #1
 800f664:	4193      	sbcs	r3, r2
 800f666:	b2da      	uxtb	r2, r3
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800f66c:	2300      	movs	r3, #0
}
 800f66e:	0018      	movs	r0, r3
 800f670:	46bd      	mov	sp, r7
 800f672:	b005      	add	sp, #20
 800f674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f676:	46c0      	nop			@ (mov r8, r8)
 800f678:	00000202 	.word	0x00000202
 800f67c:	00004e20 	.word	0x00004e20

0800f680 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800f680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f682:	b08d      	sub	sp, #52	@ 0x34
 800f684:	af00      	add	r7, sp, #0
 800f686:	60f8      	str	r0, [r7, #12]
 800f688:	60b9      	str	r1, [r7, #8]
 800f68a:	607a      	str	r2, [r7, #4]
 800f68c:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800f68e:	252e      	movs	r5, #46	@ 0x2e
 800f690:	197b      	adds	r3, r7, r5
 800f692:	2200      	movs	r2, #0
 800f694:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800f696:	197c      	adds	r4, r7, r5
 800f698:	23f1      	movs	r3, #241	@ 0xf1
 800f69a:	009a      	lsls	r2, r3, #2
 800f69c:	197b      	adds	r3, r7, r5
 800f69e:	8819      	ldrh	r1, [r3, #0]
 800f6a0:	2314      	movs	r3, #20
 800f6a2:	18fb      	adds	r3, r7, r3
 800f6a4:	0018      	movs	r0, r3
 800f6a6:	f001 fa72 	bl	8010b8e <sensirion_i2c_add_command_to_buffer>
 800f6aa:	0003      	movs	r3, r0
 800f6ac:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f6ae:	262c      	movs	r6, #44	@ 0x2c
 800f6b0:	19bc      	adds	r4, r7, r6
 800f6b2:	197b      	adds	r3, r7, r5
 800f6b4:	881a      	ldrh	r2, [r3, #0]
 800f6b6:	2314      	movs	r3, #20
 800f6b8:	18fb      	adds	r3, r7, r3
 800f6ba:	0019      	movs	r1, r3
 800f6bc:	2069      	movs	r0, #105	@ 0x69
 800f6be:	f001 faea 	bl	8010c96 <sensirion_i2c_write_data>
 800f6c2:	0003      	movs	r3, r0
 800f6c4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f6c6:	19bb      	adds	r3, r7, r6
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	5e9b      	ldrsh	r3, [r3, r2]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d003      	beq.n	800f6d8 <sen5x_read_measured_values+0x58>
        return error;
 800f6d0:	19bb      	adds	r3, r7, r6
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	5e9b      	ldrsh	r3, [r3, r2]
 800f6d6:	e060      	b.n	800f79a <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f6d8:	4b32      	ldr	r3, [pc, #200]	@ (800f7a4 <sen5x_read_measured_values+0x124>)
 800f6da:	0018      	movs	r0, r3
 800f6dc:	f7ff fcbe 	bl	800f05c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800f6e0:	252c      	movs	r5, #44	@ 0x2c
 800f6e2:	197c      	adds	r4, r7, r5
 800f6e4:	2314      	movs	r3, #20
 800f6e6:	18fb      	adds	r3, r7, r3
 800f6e8:	2210      	movs	r2, #16
 800f6ea:	0019      	movs	r1, r3
 800f6ec:	2069      	movs	r0, #105	@ 0x69
 800f6ee:	f001 faea 	bl	8010cc6 <sensirion_i2c_read_data_inplace>
 800f6f2:	0003      	movs	r3, r0
 800f6f4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f6f6:	197b      	adds	r3, r7, r5
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	5e9b      	ldrsh	r3, [r3, r2]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d003      	beq.n	800f708 <sen5x_read_measured_values+0x88>
        return error;
 800f700:	197b      	adds	r3, r7, r5
 800f702:	2200      	movs	r2, #0
 800f704:	5e9b      	ldrsh	r3, [r3, r2]
 800f706:	e048      	b.n	800f79a <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800f708:	2414      	movs	r4, #20
 800f70a:	193b      	adds	r3, r7, r4
 800f70c:	0018      	movs	r0, r3
 800f70e:	f000 fa79 	bl	800fc04 <sensirion_common_bytes_to_uint16_t>
 800f712:	0003      	movs	r3, r0
 800f714:	001a      	movs	r2, r3
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800f71a:	193b      	adds	r3, r7, r4
 800f71c:	3302      	adds	r3, #2
 800f71e:	0018      	movs	r0, r3
 800f720:	f000 fa70 	bl	800fc04 <sensirion_common_bytes_to_uint16_t>
 800f724:	0003      	movs	r3, r0
 800f726:	001a      	movs	r2, r3
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800f72c:	193b      	adds	r3, r7, r4
 800f72e:	3304      	adds	r3, #4
 800f730:	0018      	movs	r0, r3
 800f732:	f000 fa67 	bl	800fc04 <sensirion_common_bytes_to_uint16_t>
 800f736:	0003      	movs	r3, r0
 800f738:	001a      	movs	r2, r3
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800f73e:	193b      	adds	r3, r7, r4
 800f740:	3306      	adds	r3, #6
 800f742:	0018      	movs	r0, r3
 800f744:	f000 fa5e 	bl	800fc04 <sensirion_common_bytes_to_uint16_t>
 800f748:	0003      	movs	r3, r0
 800f74a:	001a      	movs	r2, r3
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800f750:	193b      	adds	r3, r7, r4
 800f752:	3308      	adds	r3, #8
 800f754:	0018      	movs	r0, r3
 800f756:	f000 fa82 	bl	800fc5e <sensirion_common_bytes_to_int16_t>
 800f75a:	0003      	movs	r3, r0
 800f75c:	001a      	movs	r2, r3
 800f75e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f760:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800f762:	193b      	adds	r3, r7, r4
 800f764:	330a      	adds	r3, #10
 800f766:	0018      	movs	r0, r3
 800f768:	f000 fa79 	bl	800fc5e <sensirion_common_bytes_to_int16_t>
 800f76c:	0003      	movs	r3, r0
 800f76e:	001a      	movs	r2, r3
 800f770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f772:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800f774:	193b      	adds	r3, r7, r4
 800f776:	330c      	adds	r3, #12
 800f778:	0018      	movs	r0, r3
 800f77a:	f000 fa70 	bl	800fc5e <sensirion_common_bytes_to_int16_t>
 800f77e:	0003      	movs	r3, r0
 800f780:	001a      	movs	r2, r3
 800f782:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f784:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800f786:	193b      	adds	r3, r7, r4
 800f788:	330e      	adds	r3, #14
 800f78a:	0018      	movs	r0, r3
 800f78c:	f000 fa67 	bl	800fc5e <sensirion_common_bytes_to_int16_t>
 800f790:	0003      	movs	r3, r0
 800f792:	001a      	movs	r2, r3
 800f794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f796:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800f798:	2300      	movs	r3, #0
}
 800f79a:	0018      	movs	r0, r3
 800f79c:	46bd      	mov	sp, r7
 800f79e:	b00d      	add	sp, #52	@ 0x34
 800f7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7a2:	46c0      	nop			@ (mov r8, r8)
 800f7a4:	00004e20 	.word	0x00004e20

0800f7a8 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800f7a8:	b590      	push	{r4, r7, lr}
 800f7aa:	b083      	sub	sp, #12
 800f7ac:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f7ae:	1dbb      	adds	r3, r7, #6
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800f7b4:	1dbc      	adds	r4, r7, #6
 800f7b6:	4a12      	ldr	r2, [pc, #72]	@ (800f800 <sen5x_start_fan_cleaning+0x58>)
 800f7b8:	1dbb      	adds	r3, r7, #6
 800f7ba:	8819      	ldrh	r1, [r3, #0]
 800f7bc:	003b      	movs	r3, r7
 800f7be:	0018      	movs	r0, r3
 800f7c0:	f001 f9e5 	bl	8010b8e <sensirion_i2c_add_command_to_buffer>
 800f7c4:	0003      	movs	r3, r0
 800f7c6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f7c8:	1d3c      	adds	r4, r7, #4
 800f7ca:	1dbb      	adds	r3, r7, #6
 800f7cc:	881a      	ldrh	r2, [r3, #0]
 800f7ce:	003b      	movs	r3, r7
 800f7d0:	0019      	movs	r1, r3
 800f7d2:	2069      	movs	r0, #105	@ 0x69
 800f7d4:	f001 fa5f 	bl	8010c96 <sensirion_i2c_write_data>
 800f7d8:	0003      	movs	r3, r0
 800f7da:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f7dc:	1d3b      	adds	r3, r7, #4
 800f7de:	2200      	movs	r2, #0
 800f7e0:	5e9b      	ldrsh	r3, [r3, r2]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d003      	beq.n	800f7ee <sen5x_start_fan_cleaning+0x46>
        return error;
 800f7e6:	1d3b      	adds	r3, r7, #4
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	5e9b      	ldrsh	r3, [r3, r2]
 800f7ec:	e004      	b.n	800f7f8 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800f7ee:	4b05      	ldr	r3, [pc, #20]	@ (800f804 <sen5x_start_fan_cleaning+0x5c>)
 800f7f0:	0018      	movs	r0, r3
 800f7f2:	f7ff fc33 	bl	800f05c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f7f6:	2300      	movs	r3, #0
}
 800f7f8:	0018      	movs	r0, r3
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	b003      	add	sp, #12
 800f7fe:	bd90      	pop	{r4, r7, pc}
 800f800:	00005607 	.word	0x00005607
 800f804:	00004e20 	.word	0x00004e20

0800f808 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800f808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f80a:	b087      	sub	sp, #28
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	0004      	movs	r4, r0
 800f810:	0008      	movs	r0, r1
 800f812:	0011      	movs	r1, r2
 800f814:	1dbb      	adds	r3, r7, #6
 800f816:	1c22      	adds	r2, r4, #0
 800f818:	801a      	strh	r2, [r3, #0]
 800f81a:	1d3b      	adds	r3, r7, #4
 800f81c:	1c02      	adds	r2, r0, #0
 800f81e:	801a      	strh	r2, [r3, #0]
 800f820:	1cbb      	adds	r3, r7, #2
 800f822:	1c0a      	adds	r2, r1, #0
 800f824:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800f826:	2516      	movs	r5, #22
 800f828:	197b      	adds	r3, r7, r5
 800f82a:	2200      	movs	r2, #0
 800f82c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800f82e:	197c      	adds	r4, r7, r5
 800f830:	4a25      	ldr	r2, [pc, #148]	@ (800f8c8 <sen5x_set_temperature_offset_parameters+0xc0>)
 800f832:	197b      	adds	r3, r7, r5
 800f834:	8819      	ldrh	r1, [r3, #0]
 800f836:	2608      	movs	r6, #8
 800f838:	19bb      	adds	r3, r7, r6
 800f83a:	0018      	movs	r0, r3
 800f83c:	f001 f9a7 	bl	8010b8e <sensirion_i2c_add_command_to_buffer>
 800f840:	0003      	movs	r3, r0
 800f842:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800f844:	197c      	adds	r4, r7, r5
 800f846:	1dbb      	adds	r3, r7, #6
 800f848:	2200      	movs	r2, #0
 800f84a:	5e9a      	ldrsh	r2, [r3, r2]
 800f84c:	197b      	adds	r3, r7, r5
 800f84e:	8819      	ldrh	r1, [r3, #0]
 800f850:	19bb      	adds	r3, r7, r6
 800f852:	0018      	movs	r0, r3
 800f854:	f001 fa06 	bl	8010c64 <sensirion_i2c_add_int16_t_to_buffer>
 800f858:	0003      	movs	r3, r0
 800f85a:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800f85c:	197c      	adds	r4, r7, r5
 800f85e:	1d3b      	adds	r3, r7, #4
 800f860:	2200      	movs	r2, #0
 800f862:	5e9a      	ldrsh	r2, [r3, r2]
 800f864:	197b      	adds	r3, r7, r5
 800f866:	8819      	ldrh	r1, [r3, #0]
 800f868:	19bb      	adds	r3, r7, r6
 800f86a:	0018      	movs	r0, r3
 800f86c:	f001 f9fa 	bl	8010c64 <sensirion_i2c_add_int16_t_to_buffer>
 800f870:	0003      	movs	r3, r0
 800f872:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800f874:	197c      	adds	r4, r7, r5
 800f876:	1cbb      	adds	r3, r7, #2
 800f878:	881a      	ldrh	r2, [r3, #0]
 800f87a:	197b      	adds	r3, r7, r5
 800f87c:	8819      	ldrh	r1, [r3, #0]
 800f87e:	19bb      	adds	r3, r7, r6
 800f880:	0018      	movs	r0, r3
 800f882:	f001 f9b0 	bl	8010be6 <sensirion_i2c_add_uint16_t_to_buffer>
 800f886:	0003      	movs	r3, r0
 800f888:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f88a:	2214      	movs	r2, #20
 800f88c:	18bc      	adds	r4, r7, r2
 800f88e:	197b      	adds	r3, r7, r5
 800f890:	881a      	ldrh	r2, [r3, #0]
 800f892:	19bb      	adds	r3, r7, r6
 800f894:	0019      	movs	r1, r3
 800f896:	2069      	movs	r0, #105	@ 0x69
 800f898:	f001 f9fd 	bl	8010c96 <sensirion_i2c_write_data>
 800f89c:	0003      	movs	r3, r0
 800f89e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f8a0:	2214      	movs	r2, #20
 800f8a2:	18bb      	adds	r3, r7, r2
 800f8a4:	2100      	movs	r1, #0
 800f8a6:	5e5b      	ldrsh	r3, [r3, r1]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d003      	beq.n	800f8b4 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800f8ac:	18bb      	adds	r3, r7, r2
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	5e9b      	ldrsh	r3, [r3, r2]
 800f8b2:	e004      	b.n	800f8be <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800f8b4:	4b05      	ldr	r3, [pc, #20]	@ (800f8cc <sen5x_set_temperature_offset_parameters+0xc4>)
 800f8b6:	0018      	movs	r0, r3
 800f8b8:	f7ff fbd0 	bl	800f05c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f8bc:	2300      	movs	r3, #0
}
 800f8be:	0018      	movs	r0, r3
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	b007      	add	sp, #28
 800f8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8c6:	46c0      	nop			@ (mov r8, r8)
 800f8c8:	000060b2 	.word	0x000060b2
 800f8cc:	00004e20 	.word	0x00004e20

0800f8d0 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800f8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8d2:	b091      	sub	sp, #68	@ 0x44
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	000a      	movs	r2, r1
 800f8da:	1cfb      	adds	r3, r7, #3
 800f8dc:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800f8de:	253e      	movs	r5, #62	@ 0x3e
 800f8e0:	197b      	adds	r3, r7, r5
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800f8e6:	197c      	adds	r4, r7, r5
 800f8e8:	4a22      	ldr	r2, [pc, #136]	@ (800f974 <sen5x_get_product_name+0xa4>)
 800f8ea:	197b      	adds	r3, r7, r5
 800f8ec:	8819      	ldrh	r1, [r3, #0]
 800f8ee:	230c      	movs	r3, #12
 800f8f0:	18fb      	adds	r3, r7, r3
 800f8f2:	0018      	movs	r0, r3
 800f8f4:	f001 f94b 	bl	8010b8e <sensirion_i2c_add_command_to_buffer>
 800f8f8:	0003      	movs	r3, r0
 800f8fa:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f8fc:	263c      	movs	r6, #60	@ 0x3c
 800f8fe:	19bc      	adds	r4, r7, r6
 800f900:	197b      	adds	r3, r7, r5
 800f902:	881a      	ldrh	r2, [r3, #0]
 800f904:	230c      	movs	r3, #12
 800f906:	18fb      	adds	r3, r7, r3
 800f908:	0019      	movs	r1, r3
 800f90a:	2069      	movs	r0, #105	@ 0x69
 800f90c:	f001 f9c3 	bl	8010c96 <sensirion_i2c_write_data>
 800f910:	0003      	movs	r3, r0
 800f912:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f914:	19bb      	adds	r3, r7, r6
 800f916:	2200      	movs	r2, #0
 800f918:	5e9b      	ldrsh	r3, [r3, r2]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d003      	beq.n	800f926 <sen5x_get_product_name+0x56>
        return error;
 800f91e:	19bb      	adds	r3, r7, r6
 800f920:	2200      	movs	r2, #0
 800f922:	5e9b      	ldrsh	r3, [r3, r2]
 800f924:	e021      	b.n	800f96a <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800f926:	4b14      	ldr	r3, [pc, #80]	@ (800f978 <sen5x_get_product_name+0xa8>)
 800f928:	0018      	movs	r0, r3
 800f92a:	f7ff fb97 	bl	800f05c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800f92e:	253c      	movs	r5, #60	@ 0x3c
 800f930:	197c      	adds	r4, r7, r5
 800f932:	230c      	movs	r3, #12
 800f934:	18fb      	adds	r3, r7, r3
 800f936:	2220      	movs	r2, #32
 800f938:	0019      	movs	r1, r3
 800f93a:	2069      	movs	r0, #105	@ 0x69
 800f93c:	f001 f9c3 	bl	8010cc6 <sensirion_i2c_read_data_inplace>
 800f940:	0003      	movs	r3, r0
 800f942:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f944:	197b      	adds	r3, r7, r5
 800f946:	2200      	movs	r2, #0
 800f948:	5e9b      	ldrsh	r3, [r3, r2]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d003      	beq.n	800f956 <sen5x_get_product_name+0x86>
        return error;
 800f94e:	197b      	adds	r3, r7, r5
 800f950:	2200      	movs	r2, #0
 800f952:	5e9b      	ldrsh	r3, [r3, r2]
 800f954:	e009      	b.n	800f96a <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800f956:	1cfb      	adds	r3, r7, #3
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	b29a      	uxth	r2, r3
 800f95c:	6879      	ldr	r1, [r7, #4]
 800f95e:	230c      	movs	r3, #12
 800f960:	18fb      	adds	r3, r7, r3
 800f962:	0018      	movs	r0, r3
 800f964:	f000 f989 	bl	800fc7a <sensirion_common_copy_bytes>
    return NO_ERROR;
 800f968:	2300      	movs	r3, #0
}
 800f96a:	0018      	movs	r0, r3
 800f96c:	46bd      	mov	sp, r7
 800f96e:	b011      	add	sp, #68	@ 0x44
 800f970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f972:	46c0      	nop			@ (mov r8, r8)
 800f974:	0000d014 	.word	0x0000d014
 800f978:	0000c350 	.word	0x0000c350

0800f97c <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800f97c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f97e:	b091      	sub	sp, #68	@ 0x44
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
 800f984:	000a      	movs	r2, r1
 800f986:	1cfb      	adds	r3, r7, #3
 800f988:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800f98a:	253e      	movs	r5, #62	@ 0x3e
 800f98c:	197b      	adds	r3, r7, r5
 800f98e:	2200      	movs	r2, #0
 800f990:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800f992:	197c      	adds	r4, r7, r5
 800f994:	4a22      	ldr	r2, [pc, #136]	@ (800fa20 <sen5x_get_serial_number+0xa4>)
 800f996:	197b      	adds	r3, r7, r5
 800f998:	8819      	ldrh	r1, [r3, #0]
 800f99a:	230c      	movs	r3, #12
 800f99c:	18fb      	adds	r3, r7, r3
 800f99e:	0018      	movs	r0, r3
 800f9a0:	f001 f8f5 	bl	8010b8e <sensirion_i2c_add_command_to_buffer>
 800f9a4:	0003      	movs	r3, r0
 800f9a6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f9a8:	263c      	movs	r6, #60	@ 0x3c
 800f9aa:	19bc      	adds	r4, r7, r6
 800f9ac:	197b      	adds	r3, r7, r5
 800f9ae:	881a      	ldrh	r2, [r3, #0]
 800f9b0:	230c      	movs	r3, #12
 800f9b2:	18fb      	adds	r3, r7, r3
 800f9b4:	0019      	movs	r1, r3
 800f9b6:	2069      	movs	r0, #105	@ 0x69
 800f9b8:	f001 f96d 	bl	8010c96 <sensirion_i2c_write_data>
 800f9bc:	0003      	movs	r3, r0
 800f9be:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f9c0:	19bb      	adds	r3, r7, r6
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	5e9b      	ldrsh	r3, [r3, r2]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d003      	beq.n	800f9d2 <sen5x_get_serial_number+0x56>
        return error;
 800f9ca:	19bb      	adds	r3, r7, r6
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	5e9b      	ldrsh	r3, [r3, r2]
 800f9d0:	e021      	b.n	800fa16 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800f9d2:	4b14      	ldr	r3, [pc, #80]	@ (800fa24 <sen5x_get_serial_number+0xa8>)
 800f9d4:	0018      	movs	r0, r3
 800f9d6:	f7ff fb41 	bl	800f05c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800f9da:	253c      	movs	r5, #60	@ 0x3c
 800f9dc:	197c      	adds	r4, r7, r5
 800f9de:	230c      	movs	r3, #12
 800f9e0:	18fb      	adds	r3, r7, r3
 800f9e2:	2220      	movs	r2, #32
 800f9e4:	0019      	movs	r1, r3
 800f9e6:	2069      	movs	r0, #105	@ 0x69
 800f9e8:	f001 f96d 	bl	8010cc6 <sensirion_i2c_read_data_inplace>
 800f9ec:	0003      	movs	r3, r0
 800f9ee:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f9f0:	197b      	adds	r3, r7, r5
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	5e9b      	ldrsh	r3, [r3, r2]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d003      	beq.n	800fa02 <sen5x_get_serial_number+0x86>
        return error;
 800f9fa:	197b      	adds	r3, r7, r5
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	5e9b      	ldrsh	r3, [r3, r2]
 800fa00:	e009      	b.n	800fa16 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800fa02:	1cfb      	adds	r3, r7, #3
 800fa04:	781b      	ldrb	r3, [r3, #0]
 800fa06:	b29a      	uxth	r2, r3
 800fa08:	6879      	ldr	r1, [r7, #4]
 800fa0a:	230c      	movs	r3, #12
 800fa0c:	18fb      	adds	r3, r7, r3
 800fa0e:	0018      	movs	r0, r3
 800fa10:	f000 f933 	bl	800fc7a <sensirion_common_copy_bytes>
    return NO_ERROR;
 800fa14:	2300      	movs	r3, #0
}
 800fa16:	0018      	movs	r0, r3
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	b011      	add	sp, #68	@ 0x44
 800fa1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa1e:	46c0      	nop			@ (mov r8, r8)
 800fa20:	0000d033 	.word	0x0000d033
 800fa24:	0000c350 	.word	0x0000c350

0800fa28 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800fa28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa2a:	b089      	sub	sp, #36	@ 0x24
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	607a      	str	r2, [r7, #4]
 800fa34:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800fa36:	251e      	movs	r5, #30
 800fa38:	197b      	adds	r3, r7, r5
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800fa3e:	197c      	adds	r4, r7, r5
 800fa40:	23d1      	movs	r3, #209	@ 0xd1
 800fa42:	021a      	lsls	r2, r3, #8
 800fa44:	197b      	adds	r3, r7, r5
 800fa46:	8819      	ldrh	r1, [r3, #0]
 800fa48:	2310      	movs	r3, #16
 800fa4a:	18fb      	adds	r3, r7, r3
 800fa4c:	0018      	movs	r0, r3
 800fa4e:	f001 f89e 	bl	8010b8e <sensirion_i2c_add_command_to_buffer>
 800fa52:	0003      	movs	r3, r0
 800fa54:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fa56:	261c      	movs	r6, #28
 800fa58:	19bc      	adds	r4, r7, r6
 800fa5a:	197b      	adds	r3, r7, r5
 800fa5c:	881a      	ldrh	r2, [r3, #0]
 800fa5e:	2310      	movs	r3, #16
 800fa60:	18fb      	adds	r3, r7, r3
 800fa62:	0019      	movs	r1, r3
 800fa64:	2069      	movs	r0, #105	@ 0x69
 800fa66:	f001 f916 	bl	8010c96 <sensirion_i2c_write_data>
 800fa6a:	0003      	movs	r3, r0
 800fa6c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fa6e:	19bb      	adds	r3, r7, r6
 800fa70:	2200      	movs	r2, #0
 800fa72:	5e9b      	ldrsh	r3, [r3, r2]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d003      	beq.n	800fa80 <sen5x_get_version+0x58>
        return error;
 800fa78:	19bb      	adds	r3, r7, r6
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	5e9b      	ldrsh	r3, [r3, r2]
 800fa7e:	e038      	b.n	800faf2 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800fa80:	4b1e      	ldr	r3, [pc, #120]	@ (800fafc <sen5x_get_version+0xd4>)
 800fa82:	0018      	movs	r0, r3
 800fa84:	f7ff faea 	bl	800f05c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800fa88:	251c      	movs	r5, #28
 800fa8a:	197c      	adds	r4, r7, r5
 800fa8c:	2310      	movs	r3, #16
 800fa8e:	18fb      	adds	r3, r7, r3
 800fa90:	2208      	movs	r2, #8
 800fa92:	0019      	movs	r1, r3
 800fa94:	2069      	movs	r0, #105	@ 0x69
 800fa96:	f001 f916 	bl	8010cc6 <sensirion_i2c_read_data_inplace>
 800fa9a:	0003      	movs	r3, r0
 800fa9c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fa9e:	197b      	adds	r3, r7, r5
 800faa0:	2200      	movs	r2, #0
 800faa2:	5e9b      	ldrsh	r3, [r3, r2]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d003      	beq.n	800fab0 <sen5x_get_version+0x88>
        return error;
 800faa8:	197b      	adds	r3, r7, r5
 800faaa:	2200      	movs	r2, #0
 800faac:	5e9b      	ldrsh	r3, [r3, r2]
 800faae:	e020      	b.n	800faf2 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800fab0:	2110      	movs	r1, #16
 800fab2:	187b      	adds	r3, r7, r1
 800fab4:	781a      	ldrb	r2, [r3, #0]
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800faba:	187b      	adds	r3, r7, r1
 800fabc:	785a      	ldrb	r2, [r3, #1]
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800fac2:	187b      	adds	r3, r7, r1
 800fac4:	789b      	ldrb	r3, [r3, #2]
 800fac6:	1e5a      	subs	r2, r3, #1
 800fac8:	4193      	sbcs	r3, r2
 800faca:	b2da      	uxtb	r2, r3
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800fad0:	187b      	adds	r3, r7, r1
 800fad2:	78da      	ldrb	r2, [r3, #3]
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800fad8:	187b      	adds	r3, r7, r1
 800fada:	791a      	ldrb	r2, [r3, #4]
 800fadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fade:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800fae0:	187b      	adds	r3, r7, r1
 800fae2:	795a      	ldrb	r2, [r3, #5]
 800fae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fae6:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800fae8:	187b      	adds	r3, r7, r1
 800faea:	799a      	ldrb	r2, [r3, #6]
 800faec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800faee:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800faf0:	2300      	movs	r3, #0
}
 800faf2:	0018      	movs	r0, r3
 800faf4:	46bd      	mov	sp, r7
 800faf6:	b009      	add	sp, #36	@ 0x24
 800faf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fafa:	46c0      	nop			@ (mov r8, r8)
 800fafc:	00004e20 	.word	0x00004e20

0800fb00 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800fb00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb02:	b087      	sub	sp, #28
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800fb08:	2516      	movs	r5, #22
 800fb0a:	197b      	adds	r3, r7, r5
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800fb10:	197c      	adds	r4, r7, r5
 800fb12:	4a21      	ldr	r2, [pc, #132]	@ (800fb98 <sen5x_read_device_status+0x98>)
 800fb14:	197b      	adds	r3, r7, r5
 800fb16:	8819      	ldrh	r1, [r3, #0]
 800fb18:	260c      	movs	r6, #12
 800fb1a:	19bb      	adds	r3, r7, r6
 800fb1c:	0018      	movs	r0, r3
 800fb1e:	f001 f836 	bl	8010b8e <sensirion_i2c_add_command_to_buffer>
 800fb22:	0003      	movs	r3, r0
 800fb24:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fb26:	2314      	movs	r3, #20
 800fb28:	18fc      	adds	r4, r7, r3
 800fb2a:	197b      	adds	r3, r7, r5
 800fb2c:	881a      	ldrh	r2, [r3, #0]
 800fb2e:	19bb      	adds	r3, r7, r6
 800fb30:	0019      	movs	r1, r3
 800fb32:	2069      	movs	r0, #105	@ 0x69
 800fb34:	f001 f8af 	bl	8010c96 <sensirion_i2c_write_data>
 800fb38:	0003      	movs	r3, r0
 800fb3a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fb3c:	2314      	movs	r3, #20
 800fb3e:	18fb      	adds	r3, r7, r3
 800fb40:	2200      	movs	r2, #0
 800fb42:	5e9b      	ldrsh	r3, [r3, r2]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d001      	beq.n	800fb4c <sen5x_read_device_status+0x4c>
        return 0xD206;
 800fb48:	4b14      	ldr	r3, [pc, #80]	@ (800fb9c <sen5x_read_device_status+0x9c>)
 800fb4a:	e020      	b.n	800fb8e <sen5x_read_device_status+0x8e>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800fb4c:	4b14      	ldr	r3, [pc, #80]	@ (800fba0 <sen5x_read_device_status+0xa0>)
 800fb4e:	0018      	movs	r0, r3
 800fb50:	f7ff fa84 	bl	800f05c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800fb54:	2514      	movs	r5, #20
 800fb56:	197c      	adds	r4, r7, r5
 800fb58:	230c      	movs	r3, #12
 800fb5a:	18fb      	adds	r3, r7, r3
 800fb5c:	2204      	movs	r2, #4
 800fb5e:	0019      	movs	r1, r3
 800fb60:	2069      	movs	r0, #105	@ 0x69
 800fb62:	f001 f8b0 	bl	8010cc6 <sensirion_i2c_read_data_inplace>
 800fb66:	0003      	movs	r3, r0
 800fb68:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fb6a:	197b      	adds	r3, r7, r5
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	5e9b      	ldrsh	r3, [r3, r2]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d003      	beq.n	800fb7c <sen5x_read_device_status+0x7c>
        return error;
 800fb74:	197b      	adds	r3, r7, r5
 800fb76:	2200      	movs	r2, #0
 800fb78:	5e9b      	ldrsh	r3, [r3, r2]
 800fb7a:	e008      	b.n	800fb8e <sen5x_read_device_status+0x8e>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800fb7c:	230c      	movs	r3, #12
 800fb7e:	18fb      	adds	r3, r7, r3
 800fb80:	0018      	movs	r0, r3
 800fb82:	f000 f853 	bl	800fc2c <sensirion_common_bytes_to_uint32_t>
 800fb86:	0002      	movs	r2, r0
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800fb8c:	2300      	movs	r3, #0
}
 800fb8e:	0018      	movs	r0, r3
 800fb90:	46bd      	mov	sp, r7
 800fb92:	b007      	add	sp, #28
 800fb94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb96:	46c0      	nop			@ (mov r8, r8)
 800fb98:	0000d206 	.word	0x0000d206
 800fb9c:	ffffd206 	.word	0xffffd206
 800fba0:	00004e20 	.word	0x00004e20

0800fba4 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800fba4:	b590      	push	{r4, r7, lr}
 800fba6:	b083      	sub	sp, #12
 800fba8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800fbaa:	1dbb      	adds	r3, r7, #6
 800fbac:	2200      	movs	r2, #0
 800fbae:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800fbb0:	1dbc      	adds	r4, r7, #6
 800fbb2:	4a12      	ldr	r2, [pc, #72]	@ (800fbfc <sen5x_device_reset+0x58>)
 800fbb4:	1dbb      	adds	r3, r7, #6
 800fbb6:	8819      	ldrh	r1, [r3, #0]
 800fbb8:	003b      	movs	r3, r7
 800fbba:	0018      	movs	r0, r3
 800fbbc:	f000 ffe7 	bl	8010b8e <sensirion_i2c_add_command_to_buffer>
 800fbc0:	0003      	movs	r3, r0
 800fbc2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fbc4:	1d3c      	adds	r4, r7, #4
 800fbc6:	1dbb      	adds	r3, r7, #6
 800fbc8:	881a      	ldrh	r2, [r3, #0]
 800fbca:	003b      	movs	r3, r7
 800fbcc:	0019      	movs	r1, r3
 800fbce:	2069      	movs	r0, #105	@ 0x69
 800fbd0:	f001 f861 	bl	8010c96 <sensirion_i2c_write_data>
 800fbd4:	0003      	movs	r3, r0
 800fbd6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fbd8:	1d3b      	adds	r3, r7, #4
 800fbda:	2200      	movs	r2, #0
 800fbdc:	5e9b      	ldrsh	r3, [r3, r2]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d003      	beq.n	800fbea <sen5x_device_reset+0x46>
        return error;
 800fbe2:	1d3b      	adds	r3, r7, #4
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	5e9b      	ldrsh	r3, [r3, r2]
 800fbe8:	e004      	b.n	800fbf4 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800fbea:	4b05      	ldr	r3, [pc, #20]	@ (800fc00 <sen5x_device_reset+0x5c>)
 800fbec:	0018      	movs	r0, r3
 800fbee:	f7ff fa35 	bl	800f05c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800fbf2:	2300      	movs	r3, #0
}
 800fbf4:	0018      	movs	r0, r3
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	b003      	add	sp, #12
 800fbfa:	bd90      	pop	{r4, r7, pc}
 800fbfc:	0000d304 	.word	0x0000d304
 800fc00:	00030d40 	.word	0x00030d40

0800fc04 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b082      	sub	sp, #8
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	b21b      	sxth	r3, r3
 800fc12:	021b      	lsls	r3, r3, #8
 800fc14:	b21a      	sxth	r2, r3
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	b21b      	sxth	r3, r3
 800fc1e:	4313      	orrs	r3, r2
 800fc20:	b21b      	sxth	r3, r3
 800fc22:	b29b      	uxth	r3, r3
}
 800fc24:	0018      	movs	r0, r3
 800fc26:	46bd      	mov	sp, r7
 800fc28:	b002      	add	sp, #8
 800fc2a:	bd80      	pop	{r7, pc}

0800fc2c <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b082      	sub	sp, #8
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	781b      	ldrb	r3, [r3, #0]
 800fc38:	061a      	lsls	r2, r3, #24
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	041b      	lsls	r3, r3, #16
 800fc42:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	3302      	adds	r3, #2
 800fc48:	781b      	ldrb	r3, [r3, #0]
 800fc4a:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800fc4c:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800fc4e:	687a      	ldr	r2, [r7, #4]
 800fc50:	3203      	adds	r2, #3
 800fc52:	7812      	ldrb	r2, [r2, #0]
 800fc54:	4313      	orrs	r3, r2
}
 800fc56:	0018      	movs	r0, r3
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	b002      	add	sp, #8
 800fc5c:	bd80      	pop	{r7, pc}

0800fc5e <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800fc5e:	b580      	push	{r7, lr}
 800fc60:	b082      	sub	sp, #8
 800fc62:	af00      	add	r7, sp, #0
 800fc64:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	0018      	movs	r0, r3
 800fc6a:	f7ff ffcb 	bl	800fc04 <sensirion_common_bytes_to_uint16_t>
 800fc6e:	0003      	movs	r3, r0
 800fc70:	b21b      	sxth	r3, r3
}
 800fc72:	0018      	movs	r0, r3
 800fc74:	46bd      	mov	sp, r7
 800fc76:	b002      	add	sp, #8
 800fc78:	bd80      	pop	{r7, pc}

0800fc7a <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800fc7a:	b580      	push	{r7, lr}
 800fc7c:	b086      	sub	sp, #24
 800fc7e:	af00      	add	r7, sp, #0
 800fc80:	60f8      	str	r0, [r7, #12]
 800fc82:	60b9      	str	r1, [r7, #8]
 800fc84:	1dbb      	adds	r3, r7, #6
 800fc86:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800fc88:	2316      	movs	r3, #22
 800fc8a:	18fb      	adds	r3, r7, r3
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	801a      	strh	r2, [r3, #0]
 800fc90:	e00f      	b.n	800fcb2 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800fc92:	2016      	movs	r0, #22
 800fc94:	183b      	adds	r3, r7, r0
 800fc96:	881b      	ldrh	r3, [r3, #0]
 800fc98:	68fa      	ldr	r2, [r7, #12]
 800fc9a:	18d2      	adds	r2, r2, r3
 800fc9c:	183b      	adds	r3, r7, r0
 800fc9e:	881b      	ldrh	r3, [r3, #0]
 800fca0:	68b9      	ldr	r1, [r7, #8]
 800fca2:	18cb      	adds	r3, r1, r3
 800fca4:	7812      	ldrb	r2, [r2, #0]
 800fca6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800fca8:	183b      	adds	r3, r7, r0
 800fcaa:	881a      	ldrh	r2, [r3, #0]
 800fcac:	183b      	adds	r3, r7, r0
 800fcae:	3201      	adds	r2, #1
 800fcb0:	801a      	strh	r2, [r3, #0]
 800fcb2:	2316      	movs	r3, #22
 800fcb4:	18fa      	adds	r2, r7, r3
 800fcb6:	1dbb      	adds	r3, r7, #6
 800fcb8:	8812      	ldrh	r2, [r2, #0]
 800fcba:	881b      	ldrh	r3, [r3, #0]
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d3e8      	bcc.n	800fc92 <sensirion_common_copy_bytes+0x18>
    }
}
 800fcc0:	46c0      	nop			@ (mov r8, r8)
 800fcc2:	46c0      	nop			@ (mov r8, r8)
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	b006      	add	sp, #24
 800fcc8:	bd80      	pop	{r7, pc}
	...

0800fccc <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b084      	sub	sp, #16
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	60f8      	str	r0, [r7, #12]
 800fcd4:	60b9      	str	r1, [r7, #8]
 800fcd6:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	68ba      	ldr	r2, [r7, #8]
 800fcdc:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	687a      	ldr	r2, [r7, #4]
 800fce2:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	2b01      	cmp	r3, #1
 800fce8:	d113      	bne.n	800fd12 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	22fe      	movs	r2, #254	@ 0xfe
 800fcee:	0592      	lsls	r2, r2, #22
 800fcf0:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	4a1a      	ldr	r2, [pc, #104]	@ (800fd60 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800fcf6:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	4a1a      	ldr	r2, [pc, #104]	@ (800fd64 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800fcfc:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	4a19      	ldr	r2, [pc, #100]	@ (800fd68 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800fd02:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	4a19      	ldr	r2, [pc, #100]	@ (800fd6c <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800fd08:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	4a18      	ldr	r2, [pc, #96]	@ (800fd70 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800fd0e:	61da      	str	r2, [r3, #28]
 800fd10:	e011      	b.n	800fd36 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	4a17      	ldr	r2, [pc, #92]	@ (800fd74 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800fd16:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	4a17      	ldr	r2, [pc, #92]	@ (800fd78 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800fd1c:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	4a16      	ldr	r2, [pc, #88]	@ (800fd7c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800fd22:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	4a16      	ldr	r2, [pc, #88]	@ (800fd80 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800fd28:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	4a15      	ldr	r2, [pc, #84]	@ (800fd84 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800fd2e:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	4a15      	ldr	r2, [pc, #84]	@ (800fd88 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800fd34:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	4a14      	ldr	r2, [pc, #80]	@ (800fd8c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800fd3a:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	4a14      	ldr	r2, [pc, #80]	@ (800fd90 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800fd40:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	4a12      	ldr	r2, [pc, #72]	@ (800fd90 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800fd46:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	4a12      	ldr	r2, [pc, #72]	@ (800fd94 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800fd4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	0018      	movs	r0, r3
 800fd52:	f000 f831 	bl	800fdb8 <GasIndexAlgorithm_reset>
}
 800fd56:	46c0      	nop			@ (mov r8, r8)
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	b004      	add	sp, #16
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	46c0      	nop			@ (mov r8, r8)
 800fd60:	00002710 	.word	0x00002710
 800fd64:	44340000 	.word	0x44340000
 800fd68:	46859800 	.word	0x46859800
 800fd6c:	46a05000 	.word	0x46a05000
 800fd70:	41f00000 	.word	0x41f00000
 800fd74:	42c80000 	.word	0x42c80000
 800fd78:	00004e20 	.word	0x00004e20
 800fd7c:	43340000 	.word	0x43340000
 800fd80:	4528c000 	.word	0x4528c000
 800fd84:	45a32000 	.word	0x45a32000
 800fd88:	43aa0000 	.word	0x43aa0000
 800fd8c:	43660000 	.word	0x43660000
 800fd90:	41400000 	.word	0x41400000
 800fd94:	42480000 	.word	0x42480000

0800fd98 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800fda2:	22fe      	movs	r2, #254	@ 0xfe
 800fda4:	0592      	lsls	r2, r2, #22
 800fda6:	6839      	ldr	r1, [r7, #0]
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	0018      	movs	r0, r3
 800fdac:	f7ff ff8e 	bl	800fccc <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800fdb0:	46c0      	nop			@ (mov r8, r8)
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	b002      	add	sp, #8
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	0018      	movs	r0, r3
 800fdd6:	f000 f805 	bl	800fde4 <GasIndexAlgorithm__init_instances>
}
 800fdda:	46c0      	nop			@ (mov r8, r8)
 800fddc:	46bd      	mov	sp, r7
 800fdde:	b002      	add	sp, #8
 800fde0:	bd80      	pop	{r7, pc}
	...

0800fde4 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800fde4:	b590      	push	{r4, r7, lr}
 800fde6:	b083      	sub	sp, #12
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	0018      	movs	r0, r3
 800fdf0:	f000 f8e8 	bl	800ffc4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	0018      	movs	r0, r3
 800fdf8:	f000 f9a6 	bl	8010148 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800fdfc:	1c04      	adds	r4, r0, #0
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	0018      	movs	r0, r3
 800fe02:	f000 f9ab 	bl	801015c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800fe06:	1c02      	adds	r2, r0, #0
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	1c21      	adds	r1, r4, #0
 800fe0c:	0018      	movs	r0, r3
 800fe0e:	f000 fc3b 	bl	8010688 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	2b01      	cmp	r3, #1
 800fe18:	d107      	bne.n	800fe2a <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800fe1a:	23fe      	movs	r3, #254	@ 0xfe
 800fe1c:	059b      	lsls	r3, r3, #22
 800fe1e:	4a0a      	ldr	r2, [pc, #40]	@ (800fe48 <GasIndexAlgorithm__init_instances+0x64>)
 800fe20:	490a      	ldr	r1, [pc, #40]	@ (800fe4c <GasIndexAlgorithm__init_instances+0x68>)
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 fc86 	bl	8010734 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800fe28:	e005      	b.n	800fe36 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800fe2a:	4b09      	ldr	r3, [pc, #36]	@ (800fe50 <GasIndexAlgorithm__init_instances+0x6c>)
 800fe2c:	4a09      	ldr	r2, [pc, #36]	@ (800fe54 <GasIndexAlgorithm__init_instances+0x70>)
 800fe2e:	490a      	ldr	r1, [pc, #40]	@ (800fe58 <GasIndexAlgorithm__init_instances+0x74>)
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f000 fc7f 	bl	8010734 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	0018      	movs	r0, r3
 800fe3a:	f000 fd35 	bl	80108a8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800fe3e:	46c0      	nop			@ (mov r8, r8)
 800fe40:	46bd      	mov	sp, r7
 800fe42:	b003      	add	sp, #12
 800fe44:	bd90      	pop	{r4, r7, pc}
 800fe46:	46c0      	nop			@ (mov r8, r8)
 800fe48:	bc257a78 	.word	0xbc257a78
 800fe4c:	44198000 	.word	0x44198000
 800fe50:	42c80000 	.word	0x42c80000
 800fe54:	bbd4fdf4 	.word	0xbbd4fdf4
 800fe58:	43550000 	.word	0x43550000

0800fe5c <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800fe5c:	b590      	push	{r4, r7, lr}
 800fe5e:	b085      	sub	sp, #20
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	60f8      	str	r0, [r7, #12]
 800fe64:	60b9      	str	r1, [r7, #8]
 800fe66:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe6c:	4952      	ldr	r1, [pc, #328]	@ (800ffb8 <GasIndexAlgorithm_process+0x15c>)
 800fe6e:	1c18      	adds	r0, r3, #0
 800fe70:	f7f0 fb68 	bl	8000544 <__aeabi_fcmple>
 800fe74:	1e03      	subs	r3, r0, #0
 800fe76:	d00c      	beq.n	800fe92 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	1c19      	adds	r1, r3, #0
 800fe82:	1c10      	adds	r0, r2, #0
 800fe84:	f7f0 fd1c 	bl	80008c0 <__aeabi_fadd>
 800fe88:	1c03      	adds	r3, r0, #0
 800fe8a:	1c1a      	adds	r2, r3, #0
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	631a      	str	r2, [r3, #48]	@ 0x30
 800fe90:	e080      	b.n	800ff94 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	dd25      	ble.n	800fee4 <GasIndexAlgorithm_process+0x88>
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	4a48      	ldr	r2, [pc, #288]	@ (800ffbc <GasIndexAlgorithm_process+0x160>)
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	dc21      	bgt.n	800fee4 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	68db      	ldr	r3, [r3, #12]
 800fea4:	68ba      	ldr	r2, [r7, #8]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	dc04      	bgt.n	800feb4 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	68db      	ldr	r3, [r3, #12]
 800feae:	3301      	adds	r3, #1
 800feb0:	60bb      	str	r3, [r7, #8]
 800feb2:	e00d      	b.n	800fed0 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	68db      	ldr	r3, [r3, #12]
 800feb8:	4a41      	ldr	r2, [pc, #260]	@ (800ffc0 <GasIndexAlgorithm_process+0x164>)
 800feba:	4694      	mov	ip, r2
 800febc:	4463      	add	r3, ip
 800febe:	68ba      	ldr	r2, [r7, #8]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	dd05      	ble.n	800fed0 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	68db      	ldr	r3, [r3, #12]
 800fec8:	4a3d      	ldr	r2, [pc, #244]	@ (800ffc0 <GasIndexAlgorithm_process+0x164>)
 800feca:	4694      	mov	ip, r2
 800fecc:	4463      	add	r3, ip
 800fece:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	68db      	ldr	r3, [r3, #12]
 800fed4:	68ba      	ldr	r2, [r7, #8]
 800fed6:	1ad3      	subs	r3, r2, r3
 800fed8:	0018      	movs	r0, r3
 800feda:	f7f1 fca5 	bl	8001828 <__aeabi_i2f>
 800fede:	1c02      	adds	r2, r0, #0
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d005      	beq.n	800fef8 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	0018      	movs	r0, r3
 800fef0:	f000 f945 	bl	801017e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800fef4:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800fef6:	d014      	beq.n	800ff22 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	1c11      	adds	r1, r2, #0
 800ff00:	0018      	movs	r0, r3
 800ff02:	f000 fbd1 	bl	80106a8 <GasIndexAlgorithm__mox_model__process>
 800ff06:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	1c11      	adds	r1, r2, #0
 800ff14:	0018      	movs	r0, r3
 800ff16:	f000 fc25 	bl	8010764 <GasIndexAlgorithm__sigmoid_scaled__process>
 800ff1a:	1c02      	adds	r2, r0, #0
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	639a      	str	r2, [r3, #56]	@ 0x38
 800ff20:	e003      	b.n	800ff2a <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	689a      	ldr	r2, [r3, #8]
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	1c11      	adds	r1, r2, #0
 800ff32:	0018      	movs	r0, r3
 800ff34:	f000 fcec 	bl	8010910 <GasIndexAlgorithm__adaptive_lowpass__process>
 800ff38:	1c02      	adds	r2, r0, #0
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff42:	21fc      	movs	r1, #252	@ 0xfc
 800ff44:	0589      	lsls	r1, r1, #22
 800ff46:	1c18      	adds	r0, r3, #0
 800ff48:	f7f0 faf2 	bl	8000530 <__aeabi_fcmplt>
 800ff4c:	1e03      	subs	r3, r0, #0
 800ff4e:	d003      	beq.n	800ff58 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	22fc      	movs	r2, #252	@ 0xfc
 800ff54:	0592      	lsls	r2, r2, #22
 800ff56:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff5c:	2100      	movs	r1, #0
 800ff5e:	1c18      	adds	r0, r3, #0
 800ff60:	f7f0 fafa 	bl	8000558 <__aeabi_fcmpgt>
 800ff64:	1e03      	subs	r3, r0, #0
 800ff66:	d015      	beq.n	800ff94 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	1c11      	adds	r1, r2, #0
 800ff70:	0018      	movs	r0, r3
 800ff72:	f000 fa4f 	bl	8010414 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	0018      	movs	r0, r3
 800ff7a:	f000 f8e5 	bl	8010148 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800ff7e:	1c04      	adds	r4, r0, #0
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	0018      	movs	r0, r3
 800ff84:	f000 f8ea 	bl	801015c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800ff88:	1c02      	adds	r2, r0, #0
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	1c21      	adds	r1, r4, #0
 800ff8e:	0018      	movs	r0, r3
 800ff90:	f000 fb7a 	bl	8010688 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff98:	21fc      	movs	r1, #252	@ 0xfc
 800ff9a:	0589      	lsls	r1, r1, #22
 800ff9c:	1c18      	adds	r0, r3, #0
 800ff9e:	f7f0 fc8f 	bl	80008c0 <__aeabi_fadd>
 800ffa2:	1c03      	adds	r3, r0, #0
 800ffa4:	1c18      	adds	r0, r3, #0
 800ffa6:	f7f1 fc1f 	bl	80017e8 <__aeabi_f2iz>
 800ffaa:	0002      	movs	r2, r0
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	601a      	str	r2, [r3, #0]
    return;
 800ffb0:	46c0      	nop			@ (mov r8, r8)
}
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	b005      	add	sp, #20
 800ffb6:	bd90      	pop	{r4, r7, pc}
 800ffb8:	42340000 	.word	0x42340000
 800ffbc:	0000fde7 	.word	0x0000fde7
 800ffc0:	00007fff 	.word	0x00007fff

0800ffc4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800ffc4:	b5b0      	push	{r4, r5, r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	223c      	movs	r2, #60	@ 0x3c
 800ffd0:	2100      	movs	r1, #0
 800ffd2:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	685b      	ldr	r3, [r3, #4]
 800ffec:	4952      	ldr	r1, [pc, #328]	@ (8010138 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ffee:	1c18      	adds	r0, r3, #0
 800fff0:	f7f0 fe58 	bl	8000ca4 <__aeabi_fdiv>
 800fff4:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800fff6:	2188      	movs	r1, #136	@ 0x88
 800fff8:	05c9      	lsls	r1, r1, #23
 800fffa:	1c18      	adds	r0, r3, #0
 800fffc:	f7f1 f820 	bl	8001040 <__aeabi_fmul>
 8010000:	1c03      	adds	r3, r0, #0
 8010002:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	494a      	ldr	r1, [pc, #296]	@ (8010138 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 801000e:	1c18      	adds	r0, r3, #0
 8010010:	f7f0 fe48 	bl	8000ca4 <__aeabi_fdiv>
 8010014:	1c03      	adds	r3, r0, #0
 8010016:	1c19      	adds	r1, r3, #0
 8010018:	1c20      	adds	r0, r4, #0
 801001a:	f7f0 fc51 	bl	80008c0 <__aeabi_fadd>
 801001e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8010020:	1c19      	adds	r1, r3, #0
 8010022:	1c28      	adds	r0, r5, #0
 8010024:	f7f0 fe3e 	bl	8000ca4 <__aeabi_fdiv>
 8010028:	1c03      	adds	r3, r0, #0
 801002a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	4940      	ldr	r1, [pc, #256]	@ (8010138 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8010036:	1c18      	adds	r0, r3, #0
 8010038:	f7f0 fe34 	bl	8000ca4 <__aeabi_fdiv>
 801003c:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 801003e:	2185      	movs	r1, #133	@ 0x85
 8010040:	05c9      	lsls	r1, r1, #23
 8010042:	1c18      	adds	r0, r3, #0
 8010044:	f7f0 fffc 	bl	8001040 <__aeabi_fmul>
 8010048:	1c03      	adds	r3, r0, #0
 801004a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	685b      	ldr	r3, [r3, #4]
 8010054:	4938      	ldr	r1, [pc, #224]	@ (8010138 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8010056:	1c18      	adds	r0, r3, #0
 8010058:	f7f0 fe24 	bl	8000ca4 <__aeabi_fdiv>
 801005c:	1c03      	adds	r3, r0, #0
 801005e:	1c19      	adds	r1, r3, #0
 8010060:	1c20      	adds	r0, r4, #0
 8010062:	f7f0 fc2d 	bl	80008c0 <__aeabi_fadd>
 8010066:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8010068:	1c19      	adds	r1, r3, #0
 801006a:	1c28      	adds	r0, r5, #0
 801006c:	f7f0 fe1a 	bl	8000ca4 <__aeabi_fdiv>
 8010070:	1c03      	adds	r3, r0, #0
 8010072:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	2b01      	cmp	r3, #1
 801007e:	d118      	bne.n	80100b2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8010084:	2188      	movs	r1, #136	@ 0x88
 8010086:	05c9      	lsls	r1, r1, #23
 8010088:	1c18      	adds	r0, r3, #0
 801008a:	f7f0 ffd9 	bl	8001040 <__aeabi_fmul>
 801008e:	1c03      	adds	r3, r0, #0
 8010090:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8010096:	4929      	ldr	r1, [pc, #164]	@ (801013c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8010098:	1c18      	adds	r0, r3, #0
 801009a:	f7f0 fc11 	bl	80008c0 <__aeabi_fadd>
 801009e:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80100a0:	1c19      	adds	r1, r3, #0
 80100a2:	1c20      	adds	r0, r4, #0
 80100a4:	f7f0 fdfe 	bl	8000ca4 <__aeabi_fdiv>
 80100a8:	1c03      	adds	r3, r0, #0
 80100aa:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80100b0:	e017      	b.n	80100e2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80100b6:	2188      	movs	r1, #136	@ 0x88
 80100b8:	05c9      	lsls	r1, r1, #23
 80100ba:	1c18      	adds	r0, r3, #0
 80100bc:	f7f0 ffc0 	bl	8001040 <__aeabi_fmul>
 80100c0:	1c03      	adds	r3, r0, #0
 80100c2:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 80100c8:	491d      	ldr	r1, [pc, #116]	@ (8010140 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 80100ca:	1c18      	adds	r0, r3, #0
 80100cc:	f7f0 fbf8 	bl	80008c0 <__aeabi_fadd>
 80100d0:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80100d2:	1c19      	adds	r1, r3, #0
 80100d4:	1c20      	adds	r0, r4, #0
 80100d6:	f7f0 fde5 	bl	8000ca4 <__aeabi_fdiv>
 80100da:	1c03      	adds	r3, r0, #0
 80100dc:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80100e6:	2185      	movs	r1, #133	@ 0x85
 80100e8:	05c9      	lsls	r1, r1, #23
 80100ea:	1c18      	adds	r0, r3, #0
 80100ec:	f7f0 ffa8 	bl	8001040 <__aeabi_fmul>
 80100f0:	1c03      	adds	r3, r0, #0
 80100f2:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	685b      	ldr	r3, [r3, #4]
 80100f8:	4912      	ldr	r1, [pc, #72]	@ (8010144 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 80100fa:	1c18      	adds	r0, r3, #0
 80100fc:	f7f0 fbe0 	bl	80008c0 <__aeabi_fadd>
 8010100:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8010102:	1c19      	adds	r1, r3, #0
 8010104:	1c20      	adds	r0, r4, #0
 8010106:	f7f0 fdcd 	bl	8000ca4 <__aeabi_fdiv>
 801010a:	1c03      	adds	r3, r0, #0
 801010c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2200      	movs	r2, #0
 8010116:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2200      	movs	r2, #0
 801011c:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2200      	movs	r2, #0
 8010122:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2200      	movs	r2, #0
 8010128:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2200      	movs	r2, #0
 801012e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8010130:	46c0      	nop			@ (mov r8, r8)
 8010132:	46bd      	mov	sp, r7
 8010134:	b002      	add	sp, #8
 8010136:	bdb0      	pop	{r4, r5, r7, pc}
 8010138:	45610000 	.word	0x45610000
 801013c:	44960000 	.word	0x44960000
 8010140:	41a00000 	.word	0x41a00000
 8010144:	451c4000 	.word	0x451c4000

08010148 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8010154:	1c18      	adds	r0, r3, #0
 8010156:	46bd      	mov	sp, r7
 8010158:	b002      	add	sp, #8
 801015a:	bd80      	pop	{r7, pc}

0801015c <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 801015c:	b580      	push	{r7, lr}
 801015e:	b082      	sub	sp, #8
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 801016c:	1c19      	adds	r1, r3, #0
 801016e:	1c10      	adds	r0, r2, #0
 8010170:	f7f0 fba6 	bl	80008c0 <__aeabi_fadd>
 8010174:	1c03      	adds	r3, r0, #0
}
 8010176:	1c18      	adds	r0, r3, #0
 8010178:	46bd      	mov	sp, r7
 801017a:	b002      	add	sp, #8
 801017c:	bd80      	pop	{r7, pc}

0801017e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 801017e:	b580      	push	{r7, lr}
 8010180:	b082      	sub	sp, #8
 8010182:	af00      	add	r7, sp, #0
 8010184:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	223c      	movs	r2, #60	@ 0x3c
 801018a:	5c9b      	ldrb	r3, [r3, r2]
}
 801018c:	0018      	movs	r0, r3
 801018e:	46bd      	mov	sp, r7
 8010190:	b002      	add	sp, #8
 8010192:	bd80      	pop	{r7, pc}

08010194 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8010194:	b5b0      	push	{r4, r5, r7, lr}
 8010196:	b08c      	sub	sp, #48	@ 0x30
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 80101a0:	1c19      	adds	r1, r3, #0
 80101a2:	4895      	ldr	r0, [pc, #596]	@ (80103f8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 80101a4:	f7f1 f8a6 	bl	80012f4 <__aeabi_fsub>
 80101a8:	1c03      	adds	r3, r0, #0
 80101aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80101b0:	1c19      	adds	r1, r3, #0
 80101b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80101b4:	f7f0 f9d0 	bl	8000558 <__aeabi_fcmpgt>
 80101b8:	1e03      	subs	r3, r0, #0
 80101ba:	d00b      	beq.n	80101d4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80101c4:	1c19      	adds	r1, r3, #0
 80101c6:	1c10      	adds	r0, r2, #0
 80101c8:	f7f0 fb7a 	bl	80008c0 <__aeabi_fadd>
 80101cc:	1c03      	adds	r3, r0, #0
 80101ce:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80101d8:	1c19      	adds	r1, r3, #0
 80101da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80101dc:	f7f0 f9bc 	bl	8000558 <__aeabi_fcmpgt>
 80101e0:	1e03      	subs	r3, r0, #0
 80101e2:	d00b      	beq.n	80101fc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80101ec:	1c19      	adds	r1, r3, #0
 80101ee:	1c10      	adds	r0, r2, #0
 80101f0:	f7f0 fb66 	bl	80008c0 <__aeabi_fadd>
 80101f4:	1c03      	adds	r3, r0, #0
 80101f6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6959      	ldr	r1, [r3, #20]
 8010200:	4a7e      	ldr	r2, [pc, #504]	@ (80103fc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	0018      	movs	r0, r3
 8010206:	f000 f9f1 	bl	80105ec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	1c11      	adds	r1, r2, #0
 8010212:	0018      	movs	r0, r3
 8010214:	f000 f9fa 	bl	801060c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010218:	1c03      	adds	r3, r0, #0
 801021a:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8010228:	1c19      	adds	r1, r3, #0
 801022a:	1c10      	adds	r0, r2, #0
 801022c:	f7f1 f862 	bl	80012f4 <__aeabi_fsub>
 8010230:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8010232:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010234:	1c18      	adds	r0, r3, #0
 8010236:	f7f0 ff03 	bl	8001040 <__aeabi_fmul>
 801023a:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 801023c:	1c19      	adds	r1, r3, #0
 801023e:	1c20      	adds	r0, r4, #0
 8010240:	f7f0 fb3e 	bl	80008c0 <__aeabi_fadd>
 8010244:	1c03      	adds	r3, r0, #0
 8010246:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8010250:	1c19      	adds	r1, r3, #0
 8010252:	486b      	ldr	r0, [pc, #428]	@ (8010400 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8010254:	f7f1 f84e 	bl	80012f4 <__aeabi_fsub>
 8010258:	1c03      	adds	r3, r0, #0
 801025a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	1c11      	adds	r1, r2, #0
 8010264:	0018      	movs	r0, r3
 8010266:	f000 f9d1 	bl	801060c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 801026a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 801026c:	1c19      	adds	r1, r3, #0
 801026e:	1c28      	adds	r0, r5, #0
 8010270:	f7f0 fee6 	bl	8001040 <__aeabi_fmul>
 8010274:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8010276:	1c19      	adds	r1, r3, #0
 8010278:	1c20      	adds	r0, r4, #0
 801027a:	f7f0 fb21 	bl	80008c0 <__aeabi_fadd>
 801027e:	1c03      	adds	r3, r0, #0
 8010280:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8010282:	4a60      	ldr	r2, [pc, #384]	@ (8010404 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8010284:	6a39      	ldr	r1, [r7, #32]
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	0018      	movs	r0, r3
 801028a:	f000 f9af 	bl	80105ec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	1c11      	adds	r1, r2, #0
 8010296:	0018      	movs	r0, r3
 8010298:	f000 f9b8 	bl	801060c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 801029c:	1c03      	adds	r3, r0, #0
 801029e:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 80102a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80102a2:	69f8      	ldr	r0, [r7, #28]
 80102a4:	f7f0 fecc 	bl	8001040 <__aeabi_fmul>
 80102a8:	1c03      	adds	r3, r0, #0
 80102aa:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6999      	ldr	r1, [r3, #24]
 80102b4:	4a51      	ldr	r2, [pc, #324]	@ (80103fc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	0018      	movs	r0, r3
 80102ba:	f000 f997 	bl	80105ec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	1c11      	adds	r1, r2, #0
 80102c6:	0018      	movs	r0, r3
 80102c8:	f000 f9a0 	bl	801060c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80102cc:	1c03      	adds	r3, r0, #0
 80102ce:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80102dc:	1c19      	adds	r1, r3, #0
 80102de:	1c10      	adds	r0, r2, #0
 80102e0:	f7f1 f808 	bl	80012f4 <__aeabi_fsub>
 80102e4:	1c03      	adds	r3, r0, #0
 80102e6:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 80102e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80102ea:	69b8      	ldr	r0, [r7, #24]
 80102ec:	f7f1 f802 	bl	80012f4 <__aeabi_fsub>
 80102f0:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80102f2:	1c19      	adds	r1, r3, #0
 80102f4:	1c28      	adds	r0, r5, #0
 80102f6:	f7f0 fea3 	bl	8001040 <__aeabi_fmul>
 80102fa:	1c03      	adds	r3, r0, #0
    gamma_variance =
 80102fc:	1c19      	adds	r1, r3, #0
 80102fe:	1c20      	adds	r0, r4, #0
 8010300:	f7f0 fade 	bl	80008c0 <__aeabi_fadd>
 8010304:	1c03      	adds	r3, r0, #0
 8010306:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8010310:	1c19      	adds	r1, r3, #0
 8010312:	483b      	ldr	r0, [pc, #236]	@ (8010400 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8010314:	f7f0 ffee 	bl	80012f4 <__aeabi_fsub>
 8010318:	1c03      	adds	r3, r0, #0
 801031a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	1c11      	adds	r1, r2, #0
 8010324:	0018      	movs	r0, r3
 8010326:	f000 f971 	bl	801060c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 801032a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 801032c:	1c19      	adds	r1, r3, #0
 801032e:	1c28      	adds	r0, r5, #0
 8010330:	f7f0 fe86 	bl	8001040 <__aeabi_fmul>
 8010334:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8010336:	1c19      	adds	r1, r3, #0
 8010338:	1c20      	adds	r0, r4, #0
 801033a:	f7f0 fac1 	bl	80008c0 <__aeabi_fadd>
 801033e:	1c03      	adds	r3, r0, #0
 8010340:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8010342:	4a30      	ldr	r2, [pc, #192]	@ (8010404 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8010344:	6939      	ldr	r1, [r7, #16]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	0018      	movs	r0, r3
 801034a:	f000 f94f 	bl	80105ec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	1c11      	adds	r1, r2, #0
 8010356:	0018      	movs	r0, r3
 8010358:	f000 f958 	bl	801060c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 801035c:	1c03      	adds	r3, r0, #0
 801035e:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8010360:	6979      	ldr	r1, [r7, #20]
 8010362:	68f8      	ldr	r0, [r7, #12]
 8010364:	f7f0 fe6c 	bl	8001040 <__aeabi_fmul>
 8010368:	1c03      	adds	r3, r0, #0
 801036a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	4923      	ldr	r1, [pc, #140]	@ (8010408 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 801037a:	1c18      	adds	r0, r3, #0
 801037c:	f7f0 fc92 	bl	8000ca4 <__aeabi_fdiv>
 8010380:	1c03      	adds	r3, r0, #0
 8010382:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8010384:	69f9      	ldr	r1, [r7, #28]
 8010386:	20fe      	movs	r0, #254	@ 0xfe
 8010388:	0580      	lsls	r0, r0, #22
 801038a:	f7f0 ffb3 	bl	80012f4 <__aeabi_fsub>
 801038e:	1c03      	adds	r3, r0, #0
 8010390:	491e      	ldr	r1, [pc, #120]	@ (801040c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8010392:	1c18      	adds	r0, r3, #0
 8010394:	f7f0 fe54 	bl	8001040 <__aeabi_fmul>
 8010398:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 801039a:	491d      	ldr	r1, [pc, #116]	@ (8010410 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 801039c:	1c18      	adds	r0, r3, #0
 801039e:	f7f0 ffa9 	bl	80012f4 <__aeabi_fsub>
 80103a2:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 80103a4:	1c19      	adds	r1, r3, #0
 80103a6:	1c28      	adds	r0, r5, #0
 80103a8:	f7f0 fe4a 	bl	8001040 <__aeabi_fmul>
 80103ac:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 80103ae:	1c19      	adds	r1, r3, #0
 80103b0:	1c20      	adds	r0, r4, #0
 80103b2:	f7f0 fa85 	bl	80008c0 <__aeabi_fadd>
 80103b6:	1c03      	adds	r3, r0, #0
 80103b8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103c2:	2100      	movs	r1, #0
 80103c4:	1c18      	adds	r0, r3, #0
 80103c6:	f7f0 f8b3 	bl	8000530 <__aeabi_fcmplt>
 80103ca:	1e03      	subs	r3, r0, #0
 80103cc:	d002      	beq.n	80103d4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2200      	movs	r2, #0
 80103d2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80103dc:	1c19      	adds	r1, r3, #0
 80103de:	1c10      	adds	r0, r2, #0
 80103e0:	f7f0 f8ba 	bl	8000558 <__aeabi_fcmpgt>
 80103e4:	1e03      	subs	r3, r0, #0
 80103e6:	d100      	bne.n	80103ea <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 80103e8:	e002      	b.n	80103f0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2200      	movs	r2, #0
 80103ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80103f0:	46c0      	nop			@ (mov r8, r8)
 80103f2:	46bd      	mov	sp, r7
 80103f4:	b00c      	add	sp, #48	@ 0x30
 80103f6:	bdb0      	pop	{r4, r5, r7, pc}
 80103f8:	46fffe00 	.word	0x46fffe00
 80103fc:	3c23d70a 	.word	0x3c23d70a
 8010400:	43ff0000 	.word	0x43ff0000
 8010404:	3db851ec 	.word	0x3db851ec
 8010408:	42700000 	.word	0x42700000
 801040c:	3fa66666 	.word	0x3fa66666
 8010410:	3e99999a 	.word	0x3e99999a

08010414 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8010414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010416:	b087      	sub	sp, #28
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	223c      	movs	r2, #60	@ 0x3c
 8010422:	5c9b      	ldrb	r3, [r3, r2]
 8010424:	2201      	movs	r2, #1
 8010426:	4053      	eors	r3, r2
 8010428:	b2db      	uxtb	r3, r3
 801042a:	2b00      	cmp	r3, #0
 801042c:	d00a      	beq.n	8010444 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	223c      	movs	r2, #60	@ 0x3c
 8010432:	2101      	movs	r1, #1
 8010434:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	683a      	ldr	r2, [r7, #0]
 801043a:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2200      	movs	r2, #0
 8010440:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8010442:	e0c8      	b.n	80105d6 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010448:	4965      	ldr	r1, [pc, #404]	@ (80105e0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 801044a:	1c18      	adds	r0, r3, #0
 801044c:	f7f0 f88e 	bl	800056c <__aeabi_fcmpge>
 8010450:	1e03      	subs	r3, r0, #0
 8010452:	d107      	bne.n	8010464 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8010458:	4962      	ldr	r1, [pc, #392]	@ (80105e4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 801045a:	1c18      	adds	r0, r3, #0
 801045c:	f7f0 f872 	bl	8000544 <__aeabi_fcmple>
 8010460:	1e03      	subs	r3, r0, #0
 8010462:	d00e      	beq.n	8010482 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 801046c:	1c19      	adds	r1, r3, #0
 801046e:	1c10      	adds	r0, r2, #0
 8010470:	f7f0 fa26 	bl	80008c0 <__aeabi_fadd>
 8010474:	1c03      	adds	r3, r0, #0
 8010476:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2200      	movs	r2, #0
 8010480:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010486:	1c19      	adds	r1, r3, #0
 8010488:	6838      	ldr	r0, [r7, #0]
 801048a:	f7f0 ff33 	bl	80012f4 <__aeabi_fsub>
 801048e:	1c03      	adds	r3, r0, #0
 8010490:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	0018      	movs	r0, r3
 8010496:	f7ff fe7d 	bl	8010194 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801049e:	1c19      	adds	r1, r3, #0
 80104a0:	6838      	ldr	r0, [r7, #0]
 80104a2:	f7f0 ff27 	bl	80012f4 <__aeabi_fsub>
 80104a6:	1c03      	adds	r3, r0, #0
 80104a8:	2185      	movs	r1, #133	@ 0x85
 80104aa:	05c9      	lsls	r1, r1, #23
 80104ac:	1c18      	adds	r0, r3, #0
 80104ae:	f7f0 fbf9 	bl	8000ca4 <__aeabi_fdiv>
 80104b2:	1c03      	adds	r3, r0, #0
 80104b4:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 80104b6:	2100      	movs	r1, #0
 80104b8:	68f8      	ldr	r0, [r7, #12]
 80104ba:	f7f0 f839 	bl	8000530 <__aeabi_fcmplt>
 80104be:	1e03      	subs	r3, r0, #0
 80104c0:	d008      	beq.n	80104d4 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80104c6:	68f9      	ldr	r1, [r7, #12]
 80104c8:	1c18      	adds	r0, r3, #0
 80104ca:	f7f0 ff13 	bl	80012f4 <__aeabi_fsub>
 80104ce:	1c03      	adds	r3, r0, #0
 80104d0:	617b      	str	r3, [r7, #20]
 80104d2:	e007      	b.n	80104e4 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80104d8:	1c19      	adds	r1, r3, #0
 80104da:	68f8      	ldr	r0, [r7, #12]
 80104dc:	f7f0 f9f0 	bl	80008c0 <__aeabi_fadd>
 80104e0:	1c03      	adds	r3, r0, #0
 80104e2:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 80104e4:	23fe      	movs	r3, #254	@ 0xfe
 80104e6:	059b      	lsls	r3, r3, #22
 80104e8:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 80104ea:	493f      	ldr	r1, [pc, #252]	@ (80105e8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80104ec:	6978      	ldr	r0, [r7, #20]
 80104ee:	f7f0 f833 	bl	8000558 <__aeabi_fcmpgt>
 80104f2:	1e03      	subs	r3, r0, #0
 80104f4:	d010      	beq.n	8010518 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 80104f6:	493c      	ldr	r1, [pc, #240]	@ (80105e8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80104f8:	6978      	ldr	r0, [r7, #20]
 80104fa:	f7f0 fbd3 	bl	8000ca4 <__aeabi_fdiv>
 80104fe:	1c03      	adds	r3, r0, #0
 8010500:	1c1c      	adds	r4, r3, #0
 8010502:	4939      	ldr	r1, [pc, #228]	@ (80105e8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8010504:	6978      	ldr	r0, [r7, #20]
 8010506:	f7f0 fbcd 	bl	8000ca4 <__aeabi_fdiv>
 801050a:	1c03      	adds	r3, r0, #0
 801050c:	1c19      	adds	r1, r3, #0
 801050e:	1c20      	adds	r0, r4, #0
 8010510:	f7f0 fd96 	bl	8001040 <__aeabi_fmul>
 8010514:	1c03      	adds	r3, r0, #0
 8010516:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 801051c:	1c19      	adds	r1, r3, #0
 801051e:	2085      	movs	r0, #133	@ 0x85
 8010520:	05c0      	lsls	r0, r0, #23
 8010522:	f7f0 fee7 	bl	80012f4 <__aeabi_fsub>
 8010526:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8010528:	6939      	ldr	r1, [r7, #16]
 801052a:	1c18      	adds	r0, r3, #0
 801052c:	f7f0 fd88 	bl	8001040 <__aeabi_fmul>
 8010530:	1c03      	adds	r3, r0, #0
 8010532:	1c18      	adds	r0, r3, #0
 8010534:	f018 ff80 	bl	8029438 <sqrtf>
 8010538:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8010542:	2185      	movs	r1, #133	@ 0x85
 8010544:	05c9      	lsls	r1, r1, #23
 8010546:	6938      	ldr	r0, [r7, #16]
 8010548:	f7f0 fd7a 	bl	8001040 <__aeabi_fmul>
 801054c:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 801054e:	1c19      	adds	r1, r3, #0
 8010550:	1c28      	adds	r0, r5, #0
 8010552:	f7f0 fba7 	bl	8000ca4 <__aeabi_fdiv>
 8010556:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8010558:	1c19      	adds	r1, r3, #0
 801055a:	1c20      	adds	r0, r4, #0
 801055c:	f7f0 fd70 	bl	8001040 <__aeabi_fmul>
 8010560:	1c03      	adds	r3, r0, #0
 8010562:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010568:	68f9      	ldr	r1, [r7, #12]
 801056a:	1c18      	adds	r0, r3, #0
 801056c:	f7f0 fd68 	bl	8001040 <__aeabi_fmul>
 8010570:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8010572:	6939      	ldr	r1, [r7, #16]
 8010574:	1c18      	adds	r0, r3, #0
 8010576:	f7f0 fb95 	bl	8000ca4 <__aeabi_fdiv>
 801057a:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 801057c:	68f9      	ldr	r1, [r7, #12]
 801057e:	1c18      	adds	r0, r3, #0
 8010580:	f7f0 fd5e 	bl	8001040 <__aeabi_fmul>
 8010584:	1c03      	adds	r3, r0, #0
             sqrtf(
 8010586:	1c19      	adds	r1, r3, #0
 8010588:	1c20      	adds	r0, r4, #0
 801058a:	f7f0 f999 	bl	80008c0 <__aeabi_fadd>
 801058e:	1c03      	adds	r3, r0, #0
 8010590:	1c18      	adds	r0, r3, #0
 8010592:	f018 ff51 	bl	8029438 <sqrtf>
 8010596:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8010598:	1c19      	adds	r1, r3, #0
 801059a:	1c30      	adds	r0, r6, #0
 801059c:	f7f0 fd50 	bl	8001040 <__aeabi_fmul>
 80105a0:	1c03      	adds	r3, r0, #0
 80105a2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80105b0:	68f9      	ldr	r1, [r7, #12]
 80105b2:	1c18      	adds	r0, r3, #0
 80105b4:	f7f0 fd44 	bl	8001040 <__aeabi_fmul>
 80105b8:	1c03      	adds	r3, r0, #0
 80105ba:	2182      	movs	r1, #130	@ 0x82
 80105bc:	05c9      	lsls	r1, r1, #23
 80105be:	1c18      	adds	r0, r3, #0
 80105c0:	f7f0 fb70 	bl	8000ca4 <__aeabi_fdiv>
 80105c4:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 80105c6:	1c19      	adds	r1, r3, #0
 80105c8:	1c20      	adds	r0, r4, #0
 80105ca:	f7f0 f979 	bl	80008c0 <__aeabi_fadd>
 80105ce:	1c03      	adds	r3, r0, #0
 80105d0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80105d6:	46c0      	nop			@ (mov r8, r8)
 80105d8:	46bd      	mov	sp, r7
 80105da:	b007      	add	sp, #28
 80105dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105de:	46c0      	nop			@ (mov r8, r8)
 80105e0:	42c80000 	.word	0x42c80000
 80105e4:	c2c80000 	.word	0xc2c80000
 80105e8:	44b40000 	.word	0x44b40000

080105ec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b084      	sub	sp, #16
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	60f8      	str	r0, [r7, #12]
 80105f4:	60b9      	str	r1, [r7, #8]
 80105f6:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	68ba      	ldr	r2, [r7, #8]
 8010602:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010604:	46c0      	nop			@ (mov r8, r8)
 8010606:	46bd      	mov	sp, r7
 8010608:	b004      	add	sp, #16
 801060a:	bd80      	pop	{r7, pc}

0801060c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 801060c:	b590      	push	{r4, r7, lr}
 801060e:	b085      	sub	sp, #20
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801061e:	1c19      	adds	r1, r3, #0
 8010620:	6838      	ldr	r0, [r7, #0]
 8010622:	f7f0 fe67 	bl	80012f4 <__aeabi_fsub>
 8010626:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8010628:	1c19      	adds	r1, r3, #0
 801062a:	1c20      	adds	r0, r4, #0
 801062c:	f7f0 fd08 	bl	8001040 <__aeabi_fmul>
 8010630:	1c03      	adds	r3, r0, #0
 8010632:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8010634:	4912      	ldr	r1, [pc, #72]	@ (8010680 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8010636:	68f8      	ldr	r0, [r7, #12]
 8010638:	f7ef ff7a 	bl	8000530 <__aeabi_fcmplt>
 801063c:	1e03      	subs	r3, r0, #0
 801063e:	d002      	beq.n	8010646 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8010640:	23fe      	movs	r3, #254	@ 0xfe
 8010642:	059b      	lsls	r3, r3, #22
 8010644:	e018      	b.n	8010678 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8010646:	490f      	ldr	r1, [pc, #60]	@ (8010684 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8010648:	68f8      	ldr	r0, [r7, #12]
 801064a:	f7ef ff85 	bl	8000558 <__aeabi_fcmpgt>
 801064e:	1e03      	subs	r3, r0, #0
 8010650:	d001      	beq.n	8010656 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8010652:	2300      	movs	r3, #0
 8010654:	e010      	b.n	8010678 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	1c18      	adds	r0, r3, #0
 801065a:	f018 fec5 	bl	80293e8 <expf>
 801065e:	1c03      	adds	r3, r0, #0
 8010660:	21fe      	movs	r1, #254	@ 0xfe
 8010662:	0589      	lsls	r1, r1, #22
 8010664:	1c18      	adds	r0, r3, #0
 8010666:	f7f0 f92b 	bl	80008c0 <__aeabi_fadd>
 801066a:	1c03      	adds	r3, r0, #0
 801066c:	1c19      	adds	r1, r3, #0
 801066e:	20fe      	movs	r0, #254	@ 0xfe
 8010670:	0580      	lsls	r0, r0, #22
 8010672:	f7f0 fb17 	bl	8000ca4 <__aeabi_fdiv>
 8010676:	1c03      	adds	r3, r0, #0
    }
}
 8010678:	1c18      	adds	r0, r3, #0
 801067a:	46bd      	mov	sp, r7
 801067c:	b005      	add	sp, #20
 801067e:	bd90      	pop	{r4, r7, pc}
 8010680:	c2480000 	.word	0xc2480000
 8010684:	42480000 	.word	0x42480000

08010688 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	60f8      	str	r0, [r7, #12]
 8010690:	60b9      	str	r1, [r7, #8]
 8010692:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	68ba      	ldr	r2, [r7, #8]
 8010698:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	687a      	ldr	r2, [r7, #4]
 801069e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80106a0:	46c0      	nop			@ (mov r8, r8)
 80106a2:	46bd      	mov	sp, r7
 80106a4:	b004      	add	sp, #16
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 80106a8:	b590      	push	{r4, r7, lr}
 80106aa:	b083      	sub	sp, #12
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
 80106b0:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	2b01      	cmp	r3, #1
 80106b8:	d114      	bne.n	80106e4 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80106be:	1c19      	adds	r1, r3, #0
 80106c0:	6838      	ldr	r0, [r7, #0]
 80106c2:	f7f0 fe17 	bl	80012f4 <__aeabi_fsub>
 80106c6:	1c03      	adds	r3, r0, #0
 80106c8:	4918      	ldr	r1, [pc, #96]	@ (801072c <GasIndexAlgorithm__mox_model__process+0x84>)
 80106ca:	1c18      	adds	r0, r3, #0
 80106cc:	f7f0 faea 	bl	8000ca4 <__aeabi_fdiv>
 80106d0:	1c03      	adds	r3, r0, #0
 80106d2:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 80106d8:	1c19      	adds	r1, r3, #0
 80106da:	1c10      	adds	r0, r2, #0
 80106dc:	f7f0 fcb0 	bl	8001040 <__aeabi_fmul>
 80106e0:	1c03      	adds	r3, r0, #0
 80106e2:	e01f      	b.n	8010724 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80106e8:	1c19      	adds	r1, r3, #0
 80106ea:	6838      	ldr	r0, [r7, #0]
 80106ec:	f7f0 fe02 	bl	80012f4 <__aeabi_fsub>
 80106f0:	1c03      	adds	r3, r0, #0
 80106f2:	1c1a      	adds	r2, r3, #0
 80106f4:	2380      	movs	r3, #128	@ 0x80
 80106f6:	061b      	lsls	r3, r3, #24
 80106f8:	4053      	eors	r3, r2
 80106fa:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010700:	490b      	ldr	r1, [pc, #44]	@ (8010730 <GasIndexAlgorithm__mox_model__process+0x88>)
 8010702:	1c18      	adds	r0, r3, #0
 8010704:	f7f0 f8dc 	bl	80008c0 <__aeabi_fadd>
 8010708:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 801070a:	1c19      	adds	r1, r3, #0
 801070c:	1c20      	adds	r0, r4, #0
 801070e:	f7f0 fac9 	bl	8000ca4 <__aeabi_fdiv>
 8010712:	1c03      	adds	r3, r0, #0
 8010714:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 801071a:	1c19      	adds	r1, r3, #0
 801071c:	1c10      	adds	r0, r2, #0
 801071e:	f7f0 fc8f 	bl	8001040 <__aeabi_fmul>
 8010722:	1c03      	adds	r3, r0, #0
    }
}
 8010724:	1c18      	adds	r0, r3, #0
 8010726:	46bd      	mov	sp, r7
 8010728:	b003      	add	sp, #12
 801072a:	bd90      	pop	{r4, r7, pc}
 801072c:	44fa0000 	.word	0x44fa0000
 8010730:	435c0000 	.word	0x435c0000

08010734 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8010734:	b580      	push	{r7, lr}
 8010736:	b084      	sub	sp, #16
 8010738:	af00      	add	r7, sp, #0
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	60b9      	str	r1, [r7, #8]
 801073e:	607a      	str	r2, [r7, #4]
 8010740:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	2180      	movs	r1, #128	@ 0x80
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	2184      	movs	r1, #132	@ 0x84
 801074e:	68ba      	ldr	r2, [r7, #8]
 8010750:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	2188      	movs	r1, #136	@ 0x88
 8010756:	683a      	ldr	r2, [r7, #0]
 8010758:	505a      	str	r2, [r3, r1]
}
 801075a:	46c0      	nop			@ (mov r8, r8)
 801075c:	46bd      	mov	sp, r7
 801075e:	b004      	add	sp, #16
 8010760:	bd80      	pop	{r7, pc}
	...

08010764 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8010764:	b590      	push	{r4, r7, lr}
 8010766:	b085      	sub	sp, #20
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2280      	movs	r2, #128	@ 0x80
 8010772:	589c      	ldr	r4, [r3, r2]
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2284      	movs	r2, #132	@ 0x84
 8010778:	589b      	ldr	r3, [r3, r2]
 801077a:	1c19      	adds	r1, r3, #0
 801077c:	6838      	ldr	r0, [r7, #0]
 801077e:	f7f0 fdb9 	bl	80012f4 <__aeabi_fsub>
 8010782:	1c03      	adds	r3, r0, #0
 8010784:	1c19      	adds	r1, r3, #0
 8010786:	1c20      	adds	r0, r4, #0
 8010788:	f7f0 fc5a 	bl	8001040 <__aeabi_fmul>
 801078c:	1c03      	adds	r3, r0, #0
 801078e:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8010790:	4940      	ldr	r1, [pc, #256]	@ (8010894 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8010792:	68b8      	ldr	r0, [r7, #8]
 8010794:	f7ef fecc 	bl	8000530 <__aeabi_fcmplt>
 8010798:	1e03      	subs	r3, r0, #0
 801079a:	d001      	beq.n	80107a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 801079c:	4b3e      	ldr	r3, [pc, #248]	@ (8010898 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 801079e:	e075      	b.n	801088c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 80107a0:	493e      	ldr	r1, [pc, #248]	@ (801089c <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 80107a2:	68b8      	ldr	r0, [r7, #8]
 80107a4:	f7ef fed8 	bl	8000558 <__aeabi_fcmpgt>
 80107a8:	1e03      	subs	r3, r0, #0
 80107aa:	d001      	beq.n	80107b0 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 80107ac:	2300      	movs	r3, #0
 80107ae:	e06d      	b.n	801088c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 80107b0:	2100      	movs	r1, #0
 80107b2:	6838      	ldr	r0, [r7, #0]
 80107b4:	f7ef feda 	bl	800056c <__aeabi_fcmpge>
 80107b8:	1e03      	subs	r3, r0, #0
 80107ba:	d047      	beq.n	801084c <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2288      	movs	r2, #136	@ 0x88
 80107c0:	589b      	ldr	r3, [r3, r2]
 80107c2:	21fe      	movs	r1, #254	@ 0xfe
 80107c4:	0589      	lsls	r1, r1, #22
 80107c6:	1c18      	adds	r0, r3, #0
 80107c8:	f7ef feac 	bl	8000524 <__aeabi_fcmpeq>
 80107cc:	1e03      	subs	r3, r0, #0
 80107ce:	d00e      	beq.n	80107ee <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	689b      	ldr	r3, [r3, #8]
 80107d4:	1c19      	adds	r1, r3, #0
 80107d6:	20fe      	movs	r0, #254	@ 0xfe
 80107d8:	0580      	lsls	r0, r0, #22
 80107da:	f7f0 fd8b 	bl	80012f4 <__aeabi_fsub>
 80107de:	1c03      	adds	r3, r0, #0
 80107e0:	492f      	ldr	r1, [pc, #188]	@ (80108a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 80107e2:	1c18      	adds	r0, r3, #0
 80107e4:	f7f0 fc2c 	bl	8001040 <__aeabi_fmul>
 80107e8:	1c03      	adds	r3, r0, #0
 80107ea:	60fb      	str	r3, [r7, #12]
 80107ec:	e012      	b.n	8010814 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	689b      	ldr	r3, [r3, #8]
 80107f2:	492c      	ldr	r1, [pc, #176]	@ (80108a4 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 80107f4:	1c18      	adds	r0, r3, #0
 80107f6:	f7f0 fc23 	bl	8001040 <__aeabi_fmul>
 80107fa:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 80107fc:	1c19      	adds	r1, r3, #0
 80107fe:	4826      	ldr	r0, [pc, #152]	@ (8010898 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8010800:	f7f0 fd78 	bl	80012f4 <__aeabi_fsub>
 8010804:	1c03      	adds	r3, r0, #0
 8010806:	2181      	movs	r1, #129	@ 0x81
 8010808:	05c9      	lsls	r1, r1, #23
 801080a:	1c18      	adds	r0, r3, #0
 801080c:	f7f0 fa4a 	bl	8000ca4 <__aeabi_fdiv>
 8010810:	1c03      	adds	r3, r0, #0
 8010812:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8010814:	4920      	ldr	r1, [pc, #128]	@ (8010898 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8010816:	68f8      	ldr	r0, [r7, #12]
 8010818:	f7f0 f852 	bl	80008c0 <__aeabi_fadd>
 801081c:	1c03      	adds	r3, r0, #0
 801081e:	1c1c      	adds	r4, r3, #0
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	1c18      	adds	r0, r3, #0
 8010824:	f018 fde0 	bl	80293e8 <expf>
 8010828:	1c03      	adds	r3, r0, #0
 801082a:	21fe      	movs	r1, #254	@ 0xfe
 801082c:	0589      	lsls	r1, r1, #22
 801082e:	1c18      	adds	r0, r3, #0
 8010830:	f7f0 f846 	bl	80008c0 <__aeabi_fadd>
 8010834:	1c03      	adds	r3, r0, #0
 8010836:	1c19      	adds	r1, r3, #0
 8010838:	1c20      	adds	r0, r4, #0
 801083a:	f7f0 fa33 	bl	8000ca4 <__aeabi_fdiv>
 801083e:	1c03      	adds	r3, r0, #0
 8010840:	68f9      	ldr	r1, [r7, #12]
 8010842:	1c18      	adds	r0, r3, #0
 8010844:	f7f0 fd56 	bl	80012f4 <__aeabi_fsub>
 8010848:	1c03      	adds	r3, r0, #0
 801084a:	e01f      	b.n	801088c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2188      	movs	r1, #136	@ 0x88
 8010854:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8010856:	1c19      	adds	r1, r3, #0
 8010858:	1c10      	adds	r0, r2, #0
 801085a:	f7f0 fa23 	bl	8000ca4 <__aeabi_fdiv>
 801085e:	1c03      	adds	r3, r0, #0
 8010860:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	1c18      	adds	r0, r3, #0
 8010866:	f018 fdbf 	bl	80293e8 <expf>
 801086a:	1c03      	adds	r3, r0, #0
 801086c:	21fe      	movs	r1, #254	@ 0xfe
 801086e:	0589      	lsls	r1, r1, #22
 8010870:	1c18      	adds	r0, r3, #0
 8010872:	f7f0 f825 	bl	80008c0 <__aeabi_fadd>
 8010876:	1c03      	adds	r3, r0, #0
 8010878:	1c19      	adds	r1, r3, #0
 801087a:	4807      	ldr	r0, [pc, #28]	@ (8010898 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 801087c:	f7f0 fa12 	bl	8000ca4 <__aeabi_fdiv>
 8010880:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8010882:	1c19      	adds	r1, r3, #0
 8010884:	1c20      	adds	r0, r4, #0
 8010886:	f7f0 fbdb 	bl	8001040 <__aeabi_fmul>
 801088a:	1c03      	adds	r3, r0, #0
        }
    }
}
 801088c:	1c18      	adds	r0, r3, #0
 801088e:	46bd      	mov	sp, r7
 8010890:	b005      	add	sp, #20
 8010892:	bd90      	pop	{r4, r7, pc}
 8010894:	c2480000 	.word	0xc2480000
 8010898:	43fa0000 	.word	0x43fa0000
 801089c:	42480000 	.word	0x42480000
 80108a0:	3f8041ab 	.word	0x3f8041ab
 80108a4:	40a00000 	.word	0x40a00000

080108a8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 80108a8:	b590      	push	{r4, r7, lr}
 80108aa:	b083      	sub	sp, #12
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	4913      	ldr	r1, [pc, #76]	@ (8010908 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 80108ba:	1c18      	adds	r0, r3, #0
 80108bc:	f7f0 f800 	bl	80008c0 <__aeabi_fadd>
 80108c0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80108c2:	1c19      	adds	r1, r3, #0
 80108c4:	1c20      	adds	r0, r4, #0
 80108c6:	f7f0 f9ed 	bl	8000ca4 <__aeabi_fdiv>
 80108ca:	1c03      	adds	r3, r0, #0
 80108cc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	228c      	movs	r2, #140	@ 0x8c
 80108d2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	685b      	ldr	r3, [r3, #4]
 80108dc:	490b      	ldr	r1, [pc, #44]	@ (801090c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 80108de:	1c18      	adds	r0, r3, #0
 80108e0:	f7ef ffee 	bl	80008c0 <__aeabi_fadd>
 80108e4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80108e6:	1c19      	adds	r1, r3, #0
 80108e8:	1c20      	adds	r0, r4, #0
 80108ea:	f7f0 f9db 	bl	8000ca4 <__aeabi_fdiv>
 80108ee:	1c03      	adds	r3, r0, #0
 80108f0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2290      	movs	r2, #144	@ 0x90
 80108f6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2294      	movs	r2, #148	@ 0x94
 80108fc:	2100      	movs	r1, #0
 80108fe:	5499      	strb	r1, [r3, r2]
}
 8010900:	46c0      	nop			@ (mov r8, r8)
 8010902:	46bd      	mov	sp, r7
 8010904:	b003      	add	sp, #12
 8010906:	bd90      	pop	{r4, r7, pc}
 8010908:	41a00000 	.word	0x41a00000
 801090c:	43fa0000 	.word	0x43fa0000

08010910 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8010910:	b590      	push	{r4, r7, lr}
 8010912:	b087      	sub	sp, #28
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
 8010918:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2294      	movs	r2, #148	@ 0x94
 801091e:	5c9b      	ldrb	r3, [r3, r2]
 8010920:	2201      	movs	r2, #1
 8010922:	4053      	eors	r3, r2
 8010924:	b2db      	uxtb	r3, r3
 8010926:	2b00      	cmp	r3, #0
 8010928:	d00f      	beq.n	801094a <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	2198      	movs	r1, #152	@ 0x98
 801092e:	683a      	ldr	r2, [r7, #0]
 8010930:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	219c      	movs	r1, #156	@ 0x9c
 8010936:	683a      	ldr	r2, [r7, #0]
 8010938:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	21a0      	movs	r1, #160	@ 0xa0
 801093e:	683a      	ldr	r2, [r7, #0]
 8010940:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	2294      	movs	r2, #148	@ 0x94
 8010946:	2101      	movs	r1, #1
 8010948:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	228c      	movs	r2, #140	@ 0x8c
 801094e:	589b      	ldr	r3, [r3, r2]
 8010950:	1c19      	adds	r1, r3, #0
 8010952:	20fe      	movs	r0, #254	@ 0xfe
 8010954:	0580      	lsls	r0, r0, #22
 8010956:	f7f0 fccd 	bl	80012f4 <__aeabi_fsub>
 801095a:	1c03      	adds	r3, r0, #0
 801095c:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2298      	movs	r2, #152	@ 0x98
 8010962:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8010964:	1c19      	adds	r1, r3, #0
 8010966:	f7f0 fb6b 	bl	8001040 <__aeabi_fmul>
 801096a:	1c03      	adds	r3, r0, #0
 801096c:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	228c      	movs	r2, #140	@ 0x8c
 8010972:	589b      	ldr	r3, [r3, r2]
 8010974:	6839      	ldr	r1, [r7, #0]
 8010976:	1c18      	adds	r0, r3, #0
 8010978:	f7f0 fb62 	bl	8001040 <__aeabi_fmul>
 801097c:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 801097e:	1c19      	adds	r1, r3, #0
 8010980:	1c20      	adds	r0, r4, #0
 8010982:	f7ef ff9d 	bl	80008c0 <__aeabi_fadd>
 8010986:	1c03      	adds	r3, r0, #0
 8010988:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2298      	movs	r2, #152	@ 0x98
 801098e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2290      	movs	r2, #144	@ 0x90
 8010994:	589b      	ldr	r3, [r3, r2]
 8010996:	1c19      	adds	r1, r3, #0
 8010998:	20fe      	movs	r0, #254	@ 0xfe
 801099a:	0580      	lsls	r0, r0, #22
 801099c:	f7f0 fcaa 	bl	80012f4 <__aeabi_fsub>
 80109a0:	1c03      	adds	r3, r0, #0
 80109a2:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	229c      	movs	r2, #156	@ 0x9c
 80109a8:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 80109aa:	1c19      	adds	r1, r3, #0
 80109ac:	f7f0 fb48 	bl	8001040 <__aeabi_fmul>
 80109b0:	1c03      	adds	r3, r0, #0
 80109b2:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2290      	movs	r2, #144	@ 0x90
 80109b8:	589b      	ldr	r3, [r3, r2]
 80109ba:	6839      	ldr	r1, [r7, #0]
 80109bc:	1c18      	adds	r0, r3, #0
 80109be:	f7f0 fb3f 	bl	8001040 <__aeabi_fmul>
 80109c2:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 80109c4:	1c19      	adds	r1, r3, #0
 80109c6:	1c20      	adds	r0, r4, #0
 80109c8:	f7ef ff7a 	bl	80008c0 <__aeabi_fadd>
 80109cc:	1c03      	adds	r3, r0, #0
 80109ce:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	229c      	movs	r2, #156	@ 0x9c
 80109d4:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	2298      	movs	r2, #152	@ 0x98
 80109da:	589a      	ldr	r2, [r3, r2]
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	219c      	movs	r1, #156	@ 0x9c
 80109e0:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 80109e2:	1c19      	adds	r1, r3, #0
 80109e4:	1c10      	adds	r0, r2, #0
 80109e6:	f7f0 fc85 	bl	80012f4 <__aeabi_fsub>
 80109ea:	1c03      	adds	r3, r0, #0
 80109ec:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 80109ee:	2100      	movs	r1, #0
 80109f0:	6978      	ldr	r0, [r7, #20]
 80109f2:	f7ef fd9d 	bl	8000530 <__aeabi_fcmplt>
 80109f6:	1e03      	subs	r3, r0, #0
 80109f8:	d004      	beq.n	8010a04 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	2280      	movs	r2, #128	@ 0x80
 80109fe:	0612      	lsls	r2, r2, #24
 8010a00:	4053      	eors	r3, r2
 8010a02:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8010a04:	4923      	ldr	r1, [pc, #140]	@ (8010a94 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8010a06:	6978      	ldr	r0, [r7, #20]
 8010a08:	f7f0 fb1a 	bl	8001040 <__aeabi_fmul>
 8010a0c:	1c03      	adds	r3, r0, #0
 8010a0e:	1c18      	adds	r0, r3, #0
 8010a10:	f018 fcea 	bl	80293e8 <expf>
 8010a14:	1c03      	adds	r3, r0, #0
 8010a16:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8010a18:	491f      	ldr	r1, [pc, #124]	@ (8010a98 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8010a1a:	6938      	ldr	r0, [r7, #16]
 8010a1c:	f7f0 fb10 	bl	8001040 <__aeabi_fmul>
 8010a20:	1c03      	adds	r3, r0, #0
 8010a22:	491e      	ldr	r1, [pc, #120]	@ (8010a9c <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8010a24:	1c18      	adds	r0, r3, #0
 8010a26:	f7ef ff4b 	bl	80008c0 <__aeabi_fadd>
 8010a2a:	1c03      	adds	r3, r0, #0
 8010a2c:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	685c      	ldr	r4, [r3, #4]
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	685b      	ldr	r3, [r3, #4]
 8010a36:	68f9      	ldr	r1, [r7, #12]
 8010a38:	1c18      	adds	r0, r3, #0
 8010a3a:	f7ef ff41 	bl	80008c0 <__aeabi_fadd>
 8010a3e:	1c03      	adds	r3, r0, #0
 8010a40:	1c19      	adds	r1, r3, #0
 8010a42:	1c20      	adds	r0, r4, #0
 8010a44:	f7f0 f92e 	bl	8000ca4 <__aeabi_fdiv>
 8010a48:	1c03      	adds	r3, r0, #0
 8010a4a:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8010a4c:	68b9      	ldr	r1, [r7, #8]
 8010a4e:	20fe      	movs	r0, #254	@ 0xfe
 8010a50:	0580      	lsls	r0, r0, #22
 8010a52:	f7f0 fc4f 	bl	80012f4 <__aeabi_fsub>
 8010a56:	1c03      	adds	r3, r0, #0
 8010a58:	1c18      	adds	r0, r3, #0
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	22a0      	movs	r2, #160	@ 0xa0
 8010a5e:	589b      	ldr	r3, [r3, r2]
 8010a60:	1c19      	adds	r1, r3, #0
 8010a62:	f7f0 faed 	bl	8001040 <__aeabi_fmul>
 8010a66:	1c03      	adds	r3, r0, #0
 8010a68:	1c1c      	adds	r4, r3, #0
 8010a6a:	6839      	ldr	r1, [r7, #0]
 8010a6c:	68b8      	ldr	r0, [r7, #8]
 8010a6e:	f7f0 fae7 	bl	8001040 <__aeabi_fmul>
 8010a72:	1c03      	adds	r3, r0, #0
 8010a74:	1c19      	adds	r1, r3, #0
 8010a76:	1c20      	adds	r0, r4, #0
 8010a78:	f7ef ff22 	bl	80008c0 <__aeabi_fadd>
 8010a7c:	1c03      	adds	r3, r0, #0
 8010a7e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	22a0      	movs	r2, #160	@ 0xa0
 8010a84:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	22a0      	movs	r2, #160	@ 0xa0
 8010a8a:	589b      	ldr	r3, [r3, r2]
}
 8010a8c:	1c18      	adds	r0, r3, #0
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	b007      	add	sp, #28
 8010a92:	bd90      	pop	{r4, r7, pc}
 8010a94:	be4ccccd 	.word	0xbe4ccccd
 8010a98:	43f00000 	.word	0x43f00000
 8010a9c:	41a00000 	.word	0x41a00000

08010aa0 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b084      	sub	sp, #16
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	000a      	movs	r2, r1
 8010aaa:	1cbb      	adds	r3, r7, #2
 8010aac:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8010aae:	230d      	movs	r3, #13
 8010ab0:	18fb      	adds	r3, r7, r3
 8010ab2:	22ff      	movs	r2, #255	@ 0xff
 8010ab4:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8010ab6:	230e      	movs	r3, #14
 8010ab8:	18fb      	adds	r3, r7, r3
 8010aba:	2200      	movs	r2, #0
 8010abc:	801a      	strh	r2, [r3, #0]
 8010abe:	e038      	b.n	8010b32 <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 8010ac0:	230e      	movs	r3, #14
 8010ac2:	18fb      	adds	r3, r7, r3
 8010ac4:	881b      	ldrh	r3, [r3, #0]
 8010ac6:	687a      	ldr	r2, [r7, #4]
 8010ac8:	18d3      	adds	r3, r2, r3
 8010aca:	7819      	ldrb	r1, [r3, #0]
 8010acc:	220d      	movs	r2, #13
 8010ace:	18bb      	adds	r3, r7, r2
 8010ad0:	18ba      	adds	r2, r7, r2
 8010ad2:	7812      	ldrb	r2, [r2, #0]
 8010ad4:	404a      	eors	r2, r1
 8010ad6:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8010ad8:	230c      	movs	r3, #12
 8010ada:	18fb      	adds	r3, r7, r3
 8010adc:	2208      	movs	r2, #8
 8010ade:	701a      	strb	r2, [r3, #0]
 8010ae0:	e01c      	b.n	8010b1c <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 8010ae2:	210d      	movs	r1, #13
 8010ae4:	187b      	adds	r3, r7, r1
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	b25b      	sxtb	r3, r3
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	da0a      	bge.n	8010b04 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8010aee:	187b      	adds	r3, r7, r1
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	b25b      	sxtb	r3, r3
 8010af4:	18db      	adds	r3, r3, r3
 8010af6:	b25b      	sxtb	r3, r3
 8010af8:	2231      	movs	r2, #49	@ 0x31
 8010afa:	4053      	eors	r3, r2
 8010afc:	b25a      	sxtb	r2, r3
 8010afe:	187b      	adds	r3, r7, r1
 8010b00:	701a      	strb	r2, [r3, #0]
 8010b02:	e005      	b.n	8010b10 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8010b04:	230d      	movs	r3, #13
 8010b06:	18fa      	adds	r2, r7, r3
 8010b08:	18fb      	adds	r3, r7, r3
 8010b0a:	781b      	ldrb	r3, [r3, #0]
 8010b0c:	18db      	adds	r3, r3, r3
 8010b0e:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8010b10:	220c      	movs	r2, #12
 8010b12:	18bb      	adds	r3, r7, r2
 8010b14:	18ba      	adds	r2, r7, r2
 8010b16:	7812      	ldrb	r2, [r2, #0]
 8010b18:	3a01      	subs	r2, #1
 8010b1a:	701a      	strb	r2, [r3, #0]
 8010b1c:	230c      	movs	r3, #12
 8010b1e:	18fb      	adds	r3, r7, r3
 8010b20:	781b      	ldrb	r3, [r3, #0]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d1dd      	bne.n	8010ae2 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8010b26:	220e      	movs	r2, #14
 8010b28:	18bb      	adds	r3, r7, r2
 8010b2a:	18ba      	adds	r2, r7, r2
 8010b2c:	8812      	ldrh	r2, [r2, #0]
 8010b2e:	3201      	adds	r2, #1
 8010b30:	801a      	strh	r2, [r3, #0]
 8010b32:	230e      	movs	r3, #14
 8010b34:	18fa      	adds	r2, r7, r3
 8010b36:	1cbb      	adds	r3, r7, #2
 8010b38:	8812      	ldrh	r2, [r2, #0]
 8010b3a:	881b      	ldrh	r3, [r3, #0]
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	d3bf      	bcc.n	8010ac0 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 8010b40:	230d      	movs	r3, #13
 8010b42:	18fb      	adds	r3, r7, r3
 8010b44:	781b      	ldrb	r3, [r3, #0]
}
 8010b46:	0018      	movs	r0, r3
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	b004      	add	sp, #16
 8010b4c:	bd80      	pop	{r7, pc}

08010b4e <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8010b4e:	b580      	push	{r7, lr}
 8010b50:	b082      	sub	sp, #8
 8010b52:	af00      	add	r7, sp, #0
 8010b54:	6078      	str	r0, [r7, #4]
 8010b56:	0008      	movs	r0, r1
 8010b58:	0011      	movs	r1, r2
 8010b5a:	1cbb      	adds	r3, r7, #2
 8010b5c:	1c02      	adds	r2, r0, #0
 8010b5e:	801a      	strh	r2, [r3, #0]
 8010b60:	1c7b      	adds	r3, r7, #1
 8010b62:	1c0a      	adds	r2, r1, #0
 8010b64:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8010b66:	1cbb      	adds	r3, r7, #2
 8010b68:	881a      	ldrh	r2, [r3, #0]
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	0011      	movs	r1, r2
 8010b6e:	0018      	movs	r0, r3
 8010b70:	f7ff ff96 	bl	8010aa0 <sensirion_i2c_generate_crc>
 8010b74:	0003      	movs	r3, r0
 8010b76:	001a      	movs	r2, r3
 8010b78:	1c7b      	adds	r3, r7, #1
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	4293      	cmp	r3, r2
 8010b7e:	d001      	beq.n	8010b84 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8010b80:	2301      	movs	r3, #1
 8010b82:	e000      	b.n	8010b86 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8010b84:	2300      	movs	r3, #0
}
 8010b86:	0018      	movs	r0, r3
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	b002      	add	sp, #8
 8010b8c:	bd80      	pop	{r7, pc}

08010b8e <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8010b8e:	b580      	push	{r7, lr}
 8010b90:	b082      	sub	sp, #8
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	6078      	str	r0, [r7, #4]
 8010b96:	0008      	movs	r0, r1
 8010b98:	0011      	movs	r1, r2
 8010b9a:	1cbb      	adds	r3, r7, #2
 8010b9c:	1c02      	adds	r2, r0, #0
 8010b9e:	801a      	strh	r2, [r3, #0]
 8010ba0:	003b      	movs	r3, r7
 8010ba2:	1c0a      	adds	r2, r1, #0
 8010ba4:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8010ba6:	003b      	movs	r3, r7
 8010ba8:	881b      	ldrh	r3, [r3, #0]
 8010baa:	0a1b      	lsrs	r3, r3, #8
 8010bac:	b299      	uxth	r1, r3
 8010bae:	1cbb      	adds	r3, r7, #2
 8010bb0:	881b      	ldrh	r3, [r3, #0]
 8010bb2:	1cba      	adds	r2, r7, #2
 8010bb4:	1c58      	adds	r0, r3, #1
 8010bb6:	8010      	strh	r0, [r2, #0]
 8010bb8:	001a      	movs	r2, r3
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	189b      	adds	r3, r3, r2
 8010bbe:	b2ca      	uxtb	r2, r1
 8010bc0:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8010bc2:	1cbb      	adds	r3, r7, #2
 8010bc4:	881b      	ldrh	r3, [r3, #0]
 8010bc6:	1cba      	adds	r2, r7, #2
 8010bc8:	1c59      	adds	r1, r3, #1
 8010bca:	8011      	strh	r1, [r2, #0]
 8010bcc:	001a      	movs	r2, r3
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	189b      	adds	r3, r3, r2
 8010bd2:	003a      	movs	r2, r7
 8010bd4:	8812      	ldrh	r2, [r2, #0]
 8010bd6:	b2d2      	uxtb	r2, r2
 8010bd8:	701a      	strb	r2, [r3, #0]
    return offset;
 8010bda:	1cbb      	adds	r3, r7, #2
 8010bdc:	881b      	ldrh	r3, [r3, #0]
}
 8010bde:	0018      	movs	r0, r3
 8010be0:	46bd      	mov	sp, r7
 8010be2:	b002      	add	sp, #8
 8010be4:	bd80      	pop	{r7, pc}

08010be6 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8010be6:	b590      	push	{r4, r7, lr}
 8010be8:	b083      	sub	sp, #12
 8010bea:	af00      	add	r7, sp, #0
 8010bec:	6078      	str	r0, [r7, #4]
 8010bee:	0008      	movs	r0, r1
 8010bf0:	0011      	movs	r1, r2
 8010bf2:	1cbb      	adds	r3, r7, #2
 8010bf4:	1c02      	adds	r2, r0, #0
 8010bf6:	801a      	strh	r2, [r3, #0]
 8010bf8:	003b      	movs	r3, r7
 8010bfa:	1c0a      	adds	r2, r1, #0
 8010bfc:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8010bfe:	003b      	movs	r3, r7
 8010c00:	881b      	ldrh	r3, [r3, #0]
 8010c02:	0a1b      	lsrs	r3, r3, #8
 8010c04:	b299      	uxth	r1, r3
 8010c06:	1cbb      	adds	r3, r7, #2
 8010c08:	881b      	ldrh	r3, [r3, #0]
 8010c0a:	1cba      	adds	r2, r7, #2
 8010c0c:	1c58      	adds	r0, r3, #1
 8010c0e:	8010      	strh	r0, [r2, #0]
 8010c10:	001a      	movs	r2, r3
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	189b      	adds	r3, r3, r2
 8010c16:	b2ca      	uxtb	r2, r1
 8010c18:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8010c1a:	1cbb      	adds	r3, r7, #2
 8010c1c:	881b      	ldrh	r3, [r3, #0]
 8010c1e:	1cba      	adds	r2, r7, #2
 8010c20:	1c59      	adds	r1, r3, #1
 8010c22:	8011      	strh	r1, [r2, #0]
 8010c24:	001a      	movs	r2, r3
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	189b      	adds	r3, r3, r2
 8010c2a:	003a      	movs	r2, r7
 8010c2c:	8812      	ldrh	r2, [r2, #0]
 8010c2e:	b2d2      	uxtb	r2, r2
 8010c30:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8010c32:	1cbb      	adds	r3, r7, #2
 8010c34:	881b      	ldrh	r3, [r3, #0]
 8010c36:	3b02      	subs	r3, #2
 8010c38:	687a      	ldr	r2, [r7, #4]
 8010c3a:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8010c3c:	1cbb      	adds	r3, r7, #2
 8010c3e:	881b      	ldrh	r3, [r3, #0]
 8010c40:	687a      	ldr	r2, [r7, #4]
 8010c42:	18d4      	adds	r4, r2, r3
 8010c44:	2102      	movs	r1, #2
 8010c46:	f7ff ff2b 	bl	8010aa0 <sensirion_i2c_generate_crc>
 8010c4a:	0003      	movs	r3, r0
 8010c4c:	7023      	strb	r3, [r4, #0]
    offset++;
 8010c4e:	1cbb      	adds	r3, r7, #2
 8010c50:	881a      	ldrh	r2, [r3, #0]
 8010c52:	1cbb      	adds	r3, r7, #2
 8010c54:	3201      	adds	r2, #1
 8010c56:	801a      	strh	r2, [r3, #0]

    return offset;
 8010c58:	1cbb      	adds	r3, r7, #2
 8010c5a:	881b      	ldrh	r3, [r3, #0]
}
 8010c5c:	0018      	movs	r0, r3
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	b003      	add	sp, #12
 8010c62:	bd90      	pop	{r4, r7, pc}

08010c64 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b082      	sub	sp, #8
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	0008      	movs	r0, r1
 8010c6e:	0011      	movs	r1, r2
 8010c70:	1cbb      	adds	r3, r7, #2
 8010c72:	1c02      	adds	r2, r0, #0
 8010c74:	801a      	strh	r2, [r3, #0]
 8010c76:	003b      	movs	r3, r7
 8010c78:	1c0a      	adds	r2, r1, #0
 8010c7a:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 8010c7c:	003b      	movs	r3, r7
 8010c7e:	881a      	ldrh	r2, [r3, #0]
 8010c80:	1cbb      	adds	r3, r7, #2
 8010c82:	8819      	ldrh	r1, [r3, #0]
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	0018      	movs	r0, r3
 8010c88:	f7ff ffad 	bl	8010be6 <sensirion_i2c_add_uint16_t_to_buffer>
 8010c8c:	0003      	movs	r3, r0
}
 8010c8e:	0018      	movs	r0, r3
 8010c90:	46bd      	mov	sp, r7
 8010c92:	b002      	add	sp, #8
 8010c94:	bd80      	pop	{r7, pc}

08010c96 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8010c96:	b580      	push	{r7, lr}
 8010c98:	b082      	sub	sp, #8
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	6039      	str	r1, [r7, #0]
 8010c9e:	0011      	movs	r1, r2
 8010ca0:	1dfb      	adds	r3, r7, #7
 8010ca2:	1c02      	adds	r2, r0, #0
 8010ca4:	701a      	strb	r2, [r3, #0]
 8010ca6:	1d3b      	adds	r3, r7, #4
 8010ca8:	1c0a      	adds	r2, r1, #0
 8010caa:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 8010cac:	1d3b      	adds	r3, r7, #4
 8010cae:	881a      	ldrh	r2, [r3, #0]
 8010cb0:	6839      	ldr	r1, [r7, #0]
 8010cb2:	1dfb      	adds	r3, r7, #7
 8010cb4:	781b      	ldrb	r3, [r3, #0]
 8010cb6:	0018      	movs	r0, r3
 8010cb8:	f7fe f9b0 	bl	800f01c <sensirion_i2c_hal_write>
 8010cbc:	0003      	movs	r3, r0
}
 8010cbe:	0018      	movs	r0, r3
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	b002      	add	sp, #8
 8010cc4:	bd80      	pop	{r7, pc}

08010cc6 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8010cc6:	b5b0      	push	{r4, r5, r7, lr}
 8010cc8:	b084      	sub	sp, #16
 8010cca:	af00      	add	r7, sp, #0
 8010ccc:	6039      	str	r1, [r7, #0]
 8010cce:	0011      	movs	r1, r2
 8010cd0:	1dfb      	adds	r3, r7, #7
 8010cd2:	1c02      	adds	r2, r0, #0
 8010cd4:	701a      	strb	r2, [r3, #0]
 8010cd6:	1d3b      	adds	r3, r7, #4
 8010cd8:	1c0a      	adds	r2, r1, #0
 8010cda:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8010cdc:	1d3b      	adds	r3, r7, #4
 8010cde:	881b      	ldrh	r3, [r3, #0]
 8010ce0:	085b      	lsrs	r3, r3, #1
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	220a      	movs	r2, #10
 8010ce6:	18ba      	adds	r2, r7, r2
 8010ce8:	1c19      	adds	r1, r3, #0
 8010cea:	1c0b      	adds	r3, r1, #0
 8010cec:	18db      	adds	r3, r3, r3
 8010cee:	185b      	adds	r3, r3, r1
 8010cf0:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8010cf2:	1d3b      	adds	r3, r7, #4
 8010cf4:	881b      	ldrh	r3, [r3, #0]
 8010cf6:	2201      	movs	r2, #1
 8010cf8:	4013      	ands	r3, r2
 8010cfa:	b29b      	uxth	r3, r3
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d001      	beq.n	8010d04 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8010d00:	2304      	movs	r3, #4
 8010d02:	e06b      	b.n	8010ddc <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8010d04:	230a      	movs	r3, #10
 8010d06:	18fb      	adds	r3, r7, r3
 8010d08:	881a      	ldrh	r2, [r3, #0]
 8010d0a:	6839      	ldr	r1, [r7, #0]
 8010d0c:	1dfb      	adds	r3, r7, #7
 8010d0e:	781b      	ldrb	r3, [r3, #0]
 8010d10:	0018      	movs	r0, r3
 8010d12:	f7fe f963 	bl	800efdc <sensirion_i2c_hal_read>
 8010d16:	0003      	movs	r3, r0
 8010d18:	001a      	movs	r2, r3
 8010d1a:	2108      	movs	r1, #8
 8010d1c:	187b      	adds	r3, r7, r1
 8010d1e:	801a      	strh	r2, [r3, #0]
    if (error) {
 8010d20:	000a      	movs	r2, r1
 8010d22:	18bb      	adds	r3, r7, r2
 8010d24:	2100      	movs	r1, #0
 8010d26:	5e5b      	ldrsh	r3, [r3, r1]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d003      	beq.n	8010d34 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 8010d2c:	18bb      	adds	r3, r7, r2
 8010d2e:	2200      	movs	r2, #0
 8010d30:	5e9b      	ldrsh	r3, [r3, r2]
 8010d32:	e053      	b.n	8010ddc <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010d34:	230e      	movs	r3, #14
 8010d36:	18fb      	adds	r3, r7, r3
 8010d38:	2200      	movs	r2, #0
 8010d3a:	801a      	strh	r2, [r3, #0]
 8010d3c:	230c      	movs	r3, #12
 8010d3e:	18fb      	adds	r3, r7, r3
 8010d40:	2200      	movs	r2, #0
 8010d42:	801a      	strh	r2, [r3, #0]
 8010d44:	e041      	b.n	8010dca <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010d46:	210e      	movs	r1, #14
 8010d48:	187b      	adds	r3, r7, r1
 8010d4a:	881b      	ldrh	r3, [r3, #0]
 8010d4c:	683a      	ldr	r2, [r7, #0]
 8010d4e:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8010d50:	187b      	adds	r3, r7, r1
 8010d52:	881b      	ldrh	r3, [r3, #0]
 8010d54:	3302      	adds	r3, #2
 8010d56:	683a      	ldr	r2, [r7, #0]
 8010d58:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010d5a:	781b      	ldrb	r3, [r3, #0]
 8010d5c:	001a      	movs	r2, r3
 8010d5e:	2102      	movs	r1, #2
 8010d60:	f7ff fef5 	bl	8010b4e <sensirion_i2c_check_crc>
 8010d64:	0003      	movs	r3, r0
 8010d66:	001a      	movs	r2, r3
 8010d68:	2108      	movs	r1, #8
 8010d6a:	187b      	adds	r3, r7, r1
 8010d6c:	801a      	strh	r2, [r3, #0]
        if (error) {
 8010d6e:	000a      	movs	r2, r1
 8010d70:	18bb      	adds	r3, r7, r2
 8010d72:	2100      	movs	r1, #0
 8010d74:	5e5b      	ldrsh	r3, [r3, r1]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d003      	beq.n	8010d82 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 8010d7a:	18bb      	adds	r3, r7, r2
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	5e9b      	ldrsh	r3, [r3, r2]
 8010d80:	e02c      	b.n	8010ddc <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 8010d82:	240e      	movs	r4, #14
 8010d84:	193b      	adds	r3, r7, r4
 8010d86:	881b      	ldrh	r3, [r3, #0]
 8010d88:	683a      	ldr	r2, [r7, #0]
 8010d8a:	18d2      	adds	r2, r2, r3
 8010d8c:	250c      	movs	r5, #12
 8010d8e:	197b      	adds	r3, r7, r5
 8010d90:	881b      	ldrh	r3, [r3, #0]
 8010d92:	1979      	adds	r1, r7, r5
 8010d94:	1c58      	adds	r0, r3, #1
 8010d96:	8008      	strh	r0, [r1, #0]
 8010d98:	0019      	movs	r1, r3
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	185b      	adds	r3, r3, r1
 8010d9e:	7812      	ldrb	r2, [r2, #0]
 8010da0:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8010da2:	193b      	adds	r3, r7, r4
 8010da4:	881b      	ldrh	r3, [r3, #0]
 8010da6:	3301      	adds	r3, #1
 8010da8:	683a      	ldr	r2, [r7, #0]
 8010daa:	18d2      	adds	r2, r2, r3
 8010dac:	197b      	adds	r3, r7, r5
 8010dae:	881b      	ldrh	r3, [r3, #0]
 8010db0:	1979      	adds	r1, r7, r5
 8010db2:	1c58      	adds	r0, r3, #1
 8010db4:	8008      	strh	r0, [r1, #0]
 8010db6:	0019      	movs	r1, r3
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	185b      	adds	r3, r3, r1
 8010dbc:	7812      	ldrb	r2, [r2, #0]
 8010dbe:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010dc0:	193b      	adds	r3, r7, r4
 8010dc2:	193a      	adds	r2, r7, r4
 8010dc4:	8812      	ldrh	r2, [r2, #0]
 8010dc6:	3203      	adds	r2, #3
 8010dc8:	801a      	strh	r2, [r3, #0]
 8010dca:	230e      	movs	r3, #14
 8010dcc:	18fa      	adds	r2, r7, r3
 8010dce:	230a      	movs	r3, #10
 8010dd0:	18fb      	adds	r3, r7, r3
 8010dd2:	8812      	ldrh	r2, [r2, #0]
 8010dd4:	881b      	ldrh	r3, [r3, #0]
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d3b5      	bcc.n	8010d46 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 8010dda:	2300      	movs	r3, #0
}
 8010ddc:	0018      	movs	r0, r3
 8010dde:	46bd      	mov	sp, r7
 8010de0:	b004      	add	sp, #16
 8010de2:	bdb0      	pop	{r4, r5, r7, pc}

08010de4 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010de4:	b590      	push	{r4, r7, lr}
 8010de6:	b083      	sub	sp, #12
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6039      	str	r1, [r7, #0]
 8010dec:	0011      	movs	r1, r2
 8010dee:	1dfb      	adds	r3, r7, #7
 8010df0:	1c02      	adds	r2, r0, #0
 8010df2:	701a      	strb	r2, [r3, #0]
 8010df4:	1dbb      	adds	r3, r7, #6
 8010df6:	1c0a      	adds	r2, r1, #0
 8010df8:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8010dfa:	4b08      	ldr	r3, [pc, #32]	@ (8010e1c <ReadRegister+0x38>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d008      	beq.n	8010e14 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8010e02:	4b06      	ldr	r3, [pc, #24]	@ (8010e1c <ReadRegister+0x38>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	1dba      	adds	r2, r7, #6
 8010e08:	7814      	ldrb	r4, [r2, #0]
 8010e0a:	6839      	ldr	r1, [r7, #0]
 8010e0c:	1dfa      	adds	r2, r7, #7
 8010e0e:	7810      	ldrb	r0, [r2, #0]
 8010e10:	0022      	movs	r2, r4
 8010e12:	4798      	blx	r3
  }
}
 8010e14:	46c0      	nop			@ (mov r8, r8)
 8010e16:	46bd      	mov	sp, r7
 8010e18:	b003      	add	sp, #12
 8010e1a:	bd90      	pop	{r4, r7, pc}
 8010e1c:	200011e4 	.word	0x200011e4

08010e20 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010e20:	b590      	push	{r4, r7, lr}
 8010e22:	b083      	sub	sp, #12
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6039      	str	r1, [r7, #0]
 8010e28:	0011      	movs	r1, r2
 8010e2a:	1dfb      	adds	r3, r7, #7
 8010e2c:	1c02      	adds	r2, r0, #0
 8010e2e:	701a      	strb	r2, [r3, #0]
 8010e30:	1dbb      	adds	r3, r7, #6
 8010e32:	1c0a      	adds	r2, r1, #0
 8010e34:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8010e36:	4b08      	ldr	r3, [pc, #32]	@ (8010e58 <WriteRegister+0x38>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d008      	beq.n	8010e50 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8010e3e:	4b06      	ldr	r3, [pc, #24]	@ (8010e58 <WriteRegister+0x38>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	1dba      	adds	r2, r7, #6
 8010e44:	7814      	ldrb	r4, [r2, #0]
 8010e46:	6839      	ldr	r1, [r7, #0]
 8010e48:	1dfa      	adds	r2, r7, #7
 8010e4a:	7810      	ldrb	r0, [r2, #0]
 8010e4c:	0022      	movs	r2, r4
 8010e4e:	4798      	blx	r3
  }
}
 8010e50:	46c0      	nop			@ (mov r8, r8)
 8010e52:	46bd      	mov	sp, r7
 8010e54:	b003      	add	sp, #12
 8010e56:	bd90      	pop	{r4, r7, pc}
 8010e58:	200011e8 	.word	0x200011e8

08010e5c <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b082      	sub	sp, #8
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 8010e64:	f003 fda8 	bl	80149b8 <HAL_GetTick>
 8010e68:	0002      	movs	r2, r0
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	18d2      	adds	r2, r2, r3
 8010e6e:	4b03      	ldr	r3, [pc, #12]	@ (8010e7c <setSGP40TimeStamp+0x20>)
 8010e70:	601a      	str	r2, [r3, #0]
}
 8010e72:	46c0      	nop			@ (mov r8, r8)
 8010e74:	46bd      	mov	sp, r7
 8010e76:	b002      	add	sp, #8
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	46c0      	nop			@ (mov r8, r8)
 8010e7c:	200011f8 	.word	0x200011f8

08010e80 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 8010e80:	b580      	push	{r7, lr}
 8010e82:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 8010e84:	4b02      	ldr	r3, [pc, #8]	@ (8010e90 <ResetSGP40samplecounter+0x10>)
 8010e86:	2200      	movs	r2, #0
 8010e88:	701a      	strb	r2, [r3, #0]
}
 8010e8a:	46c0      	nop			@ (mov r8, r8)
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}
 8010e90:	200011f6 	.word	0x200011f6

08010e94 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b082      	sub	sp, #8
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8010e9e:	4b07      	ldr	r3, [pc, #28]	@ (8010ebc <SGP_Init+0x28>)
 8010ea0:	687a      	ldr	r2, [r7, #4]
 8010ea2:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8010ea4:	4b06      	ldr	r3, [pc, #24]	@ (8010ec0 <SGP_Init+0x2c>)
 8010ea6:	683a      	ldr	r2, [r7, #0]
 8010ea8:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8010eaa:	4b06      	ldr	r3, [pc, #24]	@ (8010ec4 <SGP_Init+0x30>)
 8010eac:	2100      	movs	r1, #0
 8010eae:	0018      	movs	r0, r3
 8010eb0:	f7fe ff72 	bl	800fd98 <GasIndexAlgorithm_init>
}
 8010eb4:	46c0      	nop			@ (mov r8, r8)
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	b002      	add	sp, #8
 8010eba:	bd80      	pop	{r7, pc}
 8010ebc:	200011e4 	.word	0x200011e4
 8010ec0:	200011e8 	.word	0x200011e8
 8010ec4:	20001200 	.word	0x20001200

08010ec8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 8010ecc:	4b07      	ldr	r3, [pc, #28]	@ (8010eec <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 8010ece:	781b      	ldrb	r3, [r3, #0]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d004      	beq.n	8010ede <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 8010ed4:	4b06      	ldr	r3, [pc, #24]	@ (8010ef0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 8010ed6:	22fe      	movs	r2, #254	@ 0xfe
 8010ed8:	0592      	lsls	r2, r2, #22
 8010eda:	605a      	str	r2, [r3, #4]
    params.mSamplingInterval = 900.0f;
  }
//  float sampling_interval;
//  GasIndexAlgorithm_get_sampling_interval(&params, &sampling_interval);
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", sampling_interval);
}
 8010edc:	e002      	b.n	8010ee4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 8010ede:	4b04      	ldr	r3, [pc, #16]	@ (8010ef0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 8010ee0:	4a04      	ldr	r2, [pc, #16]	@ (8010ef4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 8010ee2:	605a      	str	r2, [r3, #4]
}
 8010ee4:	46c0      	nop			@ (mov r8, r8)
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}
 8010eea:	46c0      	nop			@ (mov r8, r8)
 8010eec:	2000214d 	.word	0x2000214d
 8010ef0:	20001200 	.word	0x20001200
 8010ef4:	44610000 	.word	0x44610000

08010ef8 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8010efc:	4b13      	ldr	r3, [pc, #76]	@ (8010f4c <SGP_StartMeasurement+0x54>)
 8010efe:	781b      	ldrb	r3, [r3, #0]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d00d      	beq.n	8010f20 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010f04:	4b12      	ldr	r3, [pc, #72]	@ (8010f50 <SGP_StartMeasurement+0x58>)
 8010f06:	2208      	movs	r2, #8
 8010f08:	0019      	movs	r1, r3
 8010f0a:	2059      	movs	r0, #89	@ 0x59
 8010f0c:	f7ff ff88 	bl	8010e20 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010f10:	f003 fd52 	bl	80149b8 <HAL_GetTick>
 8010f14:	0003      	movs	r3, r0
 8010f16:	331e      	adds	r3, #30
 8010f18:	001a      	movs	r2, r3
 8010f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8010f54 <SGP_StartMeasurement+0x5c>)
 8010f1c:	601a      	str	r2, [r3, #0]
 8010f1e:	e00c      	b.n	8010f3a <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010f20:	4b0d      	ldr	r3, [pc, #52]	@ (8010f58 <SGP_StartMeasurement+0x60>)
 8010f22:	2208      	movs	r2, #8
 8010f24:	0019      	movs	r1, r3
 8010f26:	2059      	movs	r0, #89	@ 0x59
 8010f28:	f7ff ff7a 	bl	8010e20 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 8010f2c:	f003 fd44 	bl	80149b8 <HAL_GetTick>
 8010f30:	0003      	movs	r3, r0
 8010f32:	33aa      	adds	r3, #170	@ 0xaa
 8010f34:	001a      	movs	r2, r3
 8010f36:	4b09      	ldr	r3, [pc, #36]	@ (8010f5c <SGP_StartMeasurement+0x64>)
 8010f38:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8010f3a:	4b09      	ldr	r3, [pc, #36]	@ (8010f60 <SGP_StartMeasurement+0x68>)
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8010f40:	4b08      	ldr	r3, [pc, #32]	@ (8010f64 <SGP_StartMeasurement+0x6c>)
 8010f42:	2200      	movs	r2, #0
 8010f44:	701a      	strb	r2, [r3, #0]
}
 8010f46:	46c0      	nop			@ (mov r8, r8)
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}
 8010f4c:	200012a8 	.word	0x200012a8
 8010f50:	200000bc 	.word	0x200000bc
 8010f54:	200000d0 	.word	0x200000d0
 8010f58:	200000b4 	.word	0x200000b4
 8010f5c:	200000c8 	.word	0x200000c8
 8010f60:	200011fc 	.word	0x200011fc
 8010f64:	200011fd 	.word	0x200011fd

08010f68 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 8010f6c:	4b04      	ldr	r3, [pc, #16]	@ (8010f80 <SGP_HeatedUp+0x18>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	0018      	movs	r0, r3
 8010f72:	f002 ff4b 	bl	8013e0c <TimestampIsReached>
 8010f76:	0003      	movs	r3, r0
}
 8010f78:	0018      	movs	r0, r3
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}
 8010f7e:	46c0      	nop			@ (mov r8, r8)
 8010f80:	200000c8 	.word	0x200000c8

08010f84 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8010f84:	b580      	push	{r7, lr}
 8010f86:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8010f88:	4b04      	ldr	r3, [pc, #16]	@ (8010f9c <SGP_MeasurementReady+0x18>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	0018      	movs	r0, r3
 8010f8e:	f002 ff3d 	bl	8013e0c <TimestampIsReached>
 8010f92:	0003      	movs	r3, r0
}
 8010f94:	0018      	movs	r0, r3
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}
 8010f9a:	46c0      	nop			@ (mov r8, r8)
 8010f9c:	200000d0 	.word	0x200000d0

08010fa0 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8010fa4:	4b04      	ldr	r3, [pc, #16]	@ (8010fb8 <SGP_MeasurementDone+0x18>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	0018      	movs	r0, r3
 8010faa:	f002 ff2f 	bl	8013e0c <TimestampIsReached>
 8010fae:	0003      	movs	r3, r0
}
 8010fb0:	0018      	movs	r0, r3
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	46c0      	nop			@ (mov r8, r8)
 8010fb8:	200000cc 	.word	0x200000cc

08010fbc <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8010fc0:	4b04      	ldr	r3, [pc, #16]	@ (8010fd4 <SGP_TurnHeaterOff+0x18>)
 8010fc2:	2202      	movs	r2, #2
 8010fc4:	0019      	movs	r1, r3
 8010fc6:	2059      	movs	r0, #89	@ 0x59
 8010fc8:	f7ff ff2a 	bl	8010e20 <WriteRegister>
}
 8010fcc:	46c0      	nop			@ (mov r8, r8)
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
 8010fd2:	46c0      	nop			@ (mov r8, r8)
 8010fd4:	200000ac 	.word	0x200000ac

08010fd8 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8010fd8:	b590      	push	{r4, r7, lr}
 8010fda:	b087      	sub	sp, #28
 8010fdc:	af02      	add	r7, sp, #8
 8010fde:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8010fe0:	f7ff ffc2 	bl	8010f68 <SGP_HeatedUp>
 8010fe4:	1e03      	subs	r3, r0, #0
 8010fe6:	d032      	beq.n	801104e <SGP_GetMeasurementValues+0x76>
 8010fe8:	4b80      	ldr	r3, [pc, #512]	@ (80111ec <SGP_GetMeasurementValues+0x214>)
 8010fea:	781b      	ldrb	r3, [r3, #0]
 8010fec:	2201      	movs	r2, #1
 8010fee:	4053      	eors	r3, r2
 8010ff0:	b2db      	uxtb	r3, r3
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d02b      	beq.n	801104e <SGP_GetMeasurementValues+0x76>
 8010ff6:	4b7e      	ldr	r3, [pc, #504]	@ (80111f0 <SGP_GetMeasurementValues+0x218>)
 8010ff8:	781b      	ldrb	r3, [r3, #0]
 8010ffa:	2201      	movs	r2, #1
 8010ffc:	4053      	eors	r3, r2
 8010ffe:	b2db      	uxtb	r3, r3
 8011000:	2b00      	cmp	r3, #0
 8011002:	d024      	beq.n	801104e <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 8011004:	4b79      	ldr	r3, [pc, #484]	@ (80111ec <SGP_GetMeasurementValues+0x214>)
 8011006:	2201      	movs	r2, #1
 8011008:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 801100a:	4b7a      	ldr	r3, [pc, #488]	@ (80111f4 <SGP_GetMeasurementValues+0x21c>)
 801100c:	781b      	ldrb	r3, [r3, #0]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d00d      	beq.n	801102e <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8011012:	4b79      	ldr	r3, [pc, #484]	@ (80111f8 <SGP_GetMeasurementValues+0x220>)
 8011014:	2208      	movs	r2, #8
 8011016:	0019      	movs	r1, r3
 8011018:	2059      	movs	r0, #89	@ 0x59
 801101a:	f7ff ff01 	bl	8010e20 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 801101e:	f003 fccb 	bl	80149b8 <HAL_GetTick>
 8011022:	0003      	movs	r3, r0
 8011024:	331e      	adds	r3, #30
 8011026:	001a      	movs	r2, r3
 8011028:	4b74      	ldr	r3, [pc, #464]	@ (80111fc <SGP_GetMeasurementValues+0x224>)
 801102a:	601a      	str	r2, [r3, #0]
 801102c:	e00c      	b.n	8011048 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 801102e:	4b74      	ldr	r3, [pc, #464]	@ (8011200 <SGP_GetMeasurementValues+0x228>)
 8011030:	2208      	movs	r2, #8
 8011032:	0019      	movs	r1, r3
 8011034:	2059      	movs	r0, #89	@ 0x59
 8011036:	f7ff fef3 	bl	8010e20 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 801103a:	f003 fcbd 	bl	80149b8 <HAL_GetTick>
 801103e:	0003      	movs	r3, r0
 8011040:	331e      	adds	r3, #30
 8011042:	001a      	movs	r2, r3
 8011044:	4b6d      	ldr	r3, [pc, #436]	@ (80111fc <SGP_GetMeasurementValues+0x224>)
 8011046:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8011048:	4b69      	ldr	r3, [pc, #420]	@ (80111f0 <SGP_GetMeasurementValues+0x218>)
 801104a:	2201      	movs	r2, #1
 801104c:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 801104e:	4b67      	ldr	r3, [pc, #412]	@ (80111ec <SGP_GetMeasurementValues+0x214>)
 8011050:	781b      	ldrb	r3, [r3, #0]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d100      	bne.n	8011058 <SGP_GetMeasurementValues+0x80>
 8011056:	e0ac      	b.n	80111b2 <SGP_GetMeasurementValues+0x1da>
 8011058:	f7ff ff94 	bl	8010f84 <SGP_MeasurementReady>
 801105c:	1e03      	subs	r3, r0, #0
 801105e:	d100      	bne.n	8011062 <SGP_GetMeasurementValues+0x8a>
 8011060:	e0a7      	b.n	80111b2 <SGP_GetMeasurementValues+0x1da>
 8011062:	4b68      	ldr	r3, [pc, #416]	@ (8011204 <SGP_GetMeasurementValues+0x22c>)
 8011064:	781b      	ldrb	r3, [r3, #0]
 8011066:	2201      	movs	r2, #1
 8011068:	4053      	eors	r3, r2
 801106a:	b2db      	uxtb	r3, r3
 801106c:	2b00      	cmp	r3, #0
 801106e:	d100      	bne.n	8011072 <SGP_GetMeasurementValues+0x9a>
 8011070:	e09f      	b.n	80111b2 <SGP_GetMeasurementValues+0x1da>
    MeasurementIsReady = true;
 8011072:	4b64      	ldr	r3, [pc, #400]	@ (8011204 <SGP_GetMeasurementValues+0x22c>)
 8011074:	2201      	movs	r2, #1
 8011076:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8011078:	4b63      	ldr	r3, [pc, #396]	@ (8011208 <SGP_GetMeasurementValues+0x230>)
 801107a:	2203      	movs	r2, #3
 801107c:	0019      	movs	r1, r3
 801107e:	2059      	movs	r0, #89	@ 0x59
 8011080:	f7ff feb0 	bl	8010de4 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8011084:	4b60      	ldr	r3, [pc, #384]	@ (8011208 <SGP_GetMeasurementValues+0x230>)
 8011086:	2203      	movs	r2, #3
 8011088:	2103      	movs	r1, #3
 801108a:	0018      	movs	r0, r3
 801108c:	f000 f91a 	bl	80112c4 <CheckCRC>
 8011090:	0003      	movs	r3, r0
 8011092:	001a      	movs	r2, r3
 8011094:	2301      	movs	r3, #1
 8011096:	4053      	eors	r3, r2
 8011098:	b2db      	uxtb	r3, r3
 801109a:	2b00      	cmp	r3, #0
 801109c:	d02a      	beq.n	80110f4 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 801109e:	4a5b      	ldr	r2, [pc, #364]	@ (801120c <SGP_GetMeasurementValues+0x234>)
 80110a0:	4b5b      	ldr	r3, [pc, #364]	@ (8011210 <SGP_GetMeasurementValues+0x238>)
 80110a2:	0019      	movs	r1, r3
 80110a4:	2001      	movs	r0, #1
 80110a6:	f002 ff07 	bl	8013eb8 <CreateLine>
      Info("SGP_Measure buffer structure:");
 80110aa:	4a5a      	ldr	r2, [pc, #360]	@ (8011214 <SGP_GetMeasurementValues+0x23c>)
 80110ac:	4b5a      	ldr	r3, [pc, #360]	@ (8011218 <SGP_GetMeasurementValues+0x240>)
 80110ae:	0019      	movs	r1, r3
 80110b0:	2002      	movs	r0, #2
 80110b2:	f002 ff01 	bl	8013eb8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80110b6:	230f      	movs	r3, #15
 80110b8:	18fb      	adds	r3, r7, r3
 80110ba:	2200      	movs	r2, #0
 80110bc:	701a      	strb	r2, [r3, #0]
 80110be:	e012      	b.n	80110e6 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 80110c0:	240f      	movs	r4, #15
 80110c2:	193b      	adds	r3, r7, r4
 80110c4:	7818      	ldrb	r0, [r3, #0]
 80110c6:	193b      	adds	r3, r7, r4
 80110c8:	781b      	ldrb	r3, [r3, #0]
 80110ca:	4a4f      	ldr	r2, [pc, #316]	@ (8011208 <SGP_GetMeasurementValues+0x230>)
 80110cc:	5cd3      	ldrb	r3, [r2, r3]
 80110ce:	4a53      	ldr	r2, [pc, #332]	@ (801121c <SGP_GetMeasurementValues+0x244>)
 80110d0:	4953      	ldr	r1, [pc, #332]	@ (8011220 <SGP_GetMeasurementValues+0x248>)
 80110d2:	9300      	str	r3, [sp, #0]
 80110d4:	0003      	movs	r3, r0
 80110d6:	2003      	movs	r0, #3
 80110d8:	f002 feee 	bl	8013eb8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80110dc:	193b      	adds	r3, r7, r4
 80110de:	781a      	ldrb	r2, [r3, #0]
 80110e0:	193b      	adds	r3, r7, r4
 80110e2:	3201      	adds	r2, #1
 80110e4:	701a      	strb	r2, [r3, #0]
 80110e6:	230f      	movs	r3, #15
 80110e8:	18fb      	adds	r3, r7, r3
 80110ea:	781b      	ldrb	r3, [r3, #0]
 80110ec:	2b02      	cmp	r3, #2
 80110ee:	d9e7      	bls.n	80110c0 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 80110f0:	2300      	movs	r3, #0
 80110f2:	e076      	b.n	80111e2 <SGP_GetMeasurementValues+0x20a>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 80110f4:	f003 fc60 	bl	80149b8 <HAL_GetTick>
 80110f8:	0003      	movs	r3, r0
 80110fa:	22fa      	movs	r2, #250	@ 0xfa
 80110fc:	0092      	lsls	r2, r2, #2
 80110fe:	189a      	adds	r2, r3, r2
 8011100:	4b48      	ldr	r3, [pc, #288]	@ (8011224 <SGP_GetMeasurementValues+0x24c>)
 8011102:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8011104:	f7ff ff5a 	bl	8010fbc <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 8011108:	4b47      	ldr	r3, [pc, #284]	@ (8011228 <SGP_GetMeasurementValues+0x250>)
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	3301      	adds	r3, #1
 801110e:	b2da      	uxtb	r2, r3
 8011110:	4b45      	ldr	r3, [pc, #276]	@ (8011228 <SGP_GetMeasurementValues+0x250>)
 8011112:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8011114:	4b44      	ldr	r3, [pc, #272]	@ (8011228 <SGP_GetMeasurementValues+0x250>)
 8011116:	781a      	ldrb	r2, [r3, #0]
 8011118:	4b44      	ldr	r3, [pc, #272]	@ (801122c <SGP_GetMeasurementValues+0x254>)
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	429a      	cmp	r2, r3
 801111e:	d348      	bcc.n	80111b2 <SGP_GetMeasurementValues+0x1da>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8011120:	4b39      	ldr	r3, [pc, #228]	@ (8011208 <SGP_GetMeasurementValues+0x230>)
 8011122:	785b      	ldrb	r3, [r3, #1]
 8011124:	b21b      	sxth	r3, r3
 8011126:	021b      	lsls	r3, r3, #8
 8011128:	b21a      	sxth	r2, r3
 801112a:	4b37      	ldr	r3, [pc, #220]	@ (8011208 <SGP_GetMeasurementValues+0x230>)
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	b21b      	sxth	r3, r3
 8011130:	4313      	orrs	r3, r2
 8011132:	b21a      	sxth	r2, r3
 8011134:	240c      	movs	r4, #12
 8011136:	193b      	adds	r3, r7, r4
 8011138:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 801113a:	2300      	movs	r3, #0
 801113c:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 801113e:	193b      	adds	r3, r7, r4
 8011140:	8819      	ldrh	r1, [r3, #0]
 8011142:	2308      	movs	r3, #8
 8011144:	18fa      	adds	r2, r7, r3
 8011146:	4b3a      	ldr	r3, [pc, #232]	@ (8011230 <SGP_GetMeasurementValues+0x258>)
 8011148:	0018      	movs	r0, r3
 801114a:	f7fe fe87 	bl	800fe5c <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 801114e:	68ba      	ldr	r2, [r7, #8]
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 8011154:	4b37      	ldr	r3, [pc, #220]	@ (8011234 <SGP_GetMeasurementValues+0x25c>)
 8011156:	781b      	ldrb	r3, [r3, #0]
 8011158:	3301      	adds	r3, #1
 801115a:	b2da      	uxtb	r2, r3
 801115c:	4b35      	ldr	r3, [pc, #212]	@ (8011234 <SGP_GetMeasurementValues+0x25c>)
 801115e:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 8011160:	4b34      	ldr	r3, [pc, #208]	@ (8011234 <SGP_GetMeasurementValues+0x25c>)
 8011162:	781b      	ldrb	r3, [r3, #0]
 8011164:	2b01      	cmp	r3, #1
 8011166:	d10d      	bne.n	8011184 <SGP_GetMeasurementValues+0x1ac>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 8011168:	193b      	adds	r3, r7, r4
 801116a:	881b      	ldrh	r3, [r3, #0]
 801116c:	4a32      	ldr	r2, [pc, #200]	@ (8011238 <SGP_GetMeasurementValues+0x260>)
 801116e:	492c      	ldr	r1, [pc, #176]	@ (8011220 <SGP_GetMeasurementValues+0x248>)
 8011170:	2003      	movs	r0, #3
 8011172:	f002 fea1 	bl	8013eb8 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 8011176:	68bb      	ldr	r3, [r7, #8]
 8011178:	4a30      	ldr	r2, [pc, #192]	@ (801123c <SGP_GetMeasurementValues+0x264>)
 801117a:	4929      	ldr	r1, [pc, #164]	@ (8011220 <SGP_GetMeasurementValues+0x248>)
 801117c:	2003      	movs	r0, #3
 801117e:	f002 fe9b 	bl	8013eb8 <CreateLine>
 8011182:	e006      	b.n	8011192 <SGP_GetMeasurementValues+0x1ba>
      }
      else {
        if (sgp40samplecounter == 11) {
 8011184:	4b2b      	ldr	r3, [pc, #172]	@ (8011234 <SGP_GetMeasurementValues+0x25c>)
 8011186:	781b      	ldrb	r3, [r3, #0]
 8011188:	2b0b      	cmp	r3, #11
 801118a:	d102      	bne.n	8011192 <SGP_GetMeasurementValues+0x1ba>
          sgp40samplecounter = 0;
 801118c:	4b29      	ldr	r3, [pc, #164]	@ (8011234 <SGP_GetMeasurementValues+0x25c>)
 801118e:	2200      	movs	r2, #0
 8011190:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	b29b      	uxth	r3, r3
 8011196:	0018      	movs	r0, r3
 8011198:	f001 fdf2 	bl	8012d80 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 801119c:	4b22      	ldr	r3, [pc, #136]	@ (8011228 <SGP_GetMeasurementValues+0x250>)
 801119e:	2200      	movs	r2, #0
 80111a0:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 80111a2:	4b14      	ldr	r3, [pc, #80]	@ (80111f4 <SGP_GetMeasurementValues+0x21c>)
 80111a4:	2200      	movs	r2, #0
 80111a6:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 80111a8:	4b11      	ldr	r3, [pc, #68]	@ (80111f0 <SGP_GetMeasurementValues+0x218>)
 80111aa:	2200      	movs	r2, #0
 80111ac:	701a      	strb	r2, [r3, #0]
      return true;
 80111ae:	2301      	movs	r3, #1
 80111b0:	e017      	b.n	80111e2 <SGP_GetMeasurementValues+0x20a>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 80111b2:	f7ff fef5 	bl	8010fa0 <SGP_MeasurementDone>
 80111b6:	1e03      	subs	r3, r0, #0
 80111b8:	d012      	beq.n	80111e0 <SGP_GetMeasurementValues+0x208>
 80111ba:	4b0c      	ldr	r3, [pc, #48]	@ (80111ec <SGP_GetMeasurementValues+0x214>)
 80111bc:	781b      	ldrb	r3, [r3, #0]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d00e      	beq.n	80111e0 <SGP_GetMeasurementValues+0x208>
 80111c2:	4b10      	ldr	r3, [pc, #64]	@ (8011204 <SGP_GetMeasurementValues+0x22c>)
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d00a      	beq.n	80111e0 <SGP_GetMeasurementValues+0x208>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 80111ca:	4a1d      	ldr	r2, [pc, #116]	@ (8011240 <SGP_GetMeasurementValues+0x268>)
 80111cc:	4b14      	ldr	r3, [pc, #80]	@ (8011220 <SGP_GetMeasurementValues+0x248>)
 80111ce:	0019      	movs	r1, r3
 80111d0:	2003      	movs	r0, #3
 80111d2:	f002 fe71 	bl	8013eb8 <CreateLine>
    SGP_StartMeasurement();
 80111d6:	f7ff fe8f 	bl	8010ef8 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 80111da:	4b05      	ldr	r3, [pc, #20]	@ (80111f0 <SGP_GetMeasurementValues+0x218>)
 80111dc:	2200      	movs	r2, #0
 80111de:	701a      	strb	r2, [r3, #0]
  }
  return false;
 80111e0:	2300      	movs	r3, #0
}
 80111e2:	0018      	movs	r0, r3
 80111e4:	46bd      	mov	sp, r7
 80111e6:	b005      	add	sp, #20
 80111e8:	bd90      	pop	{r4, r7, pc}
 80111ea:	46c0      	nop			@ (mov r8, r8)
 80111ec:	200011fc 	.word	0x200011fc
 80111f0:	200012a9 	.word	0x200012a9
 80111f4:	200012a8 	.word	0x200012a8
 80111f8:	200000bc 	.word	0x200000bc
 80111fc:	200000d0 	.word	0x200000d0
 8011200:	200000b4 	.word	0x200000b4
 8011204:	200011fd 	.word	0x200011fd
 8011208:	200011ec 	.word	0x200011ec
 801120c:	0802da2c 	.word	0x0802da2c
 8011210:	0802da54 	.word	0x0802da54
 8011214:	0802da58 	.word	0x0802da58
 8011218:	0802da78 	.word	0x0802da78
 801121c:	0802da7c 	.word	0x0802da7c
 8011220:	0802da9c 	.word	0x0802da9c
 8011224:	200000cc 	.word	0x200000cc
 8011228:	200011f5 	.word	0x200011f5
 801122c:	200000c6 	.word	0x200000c6
 8011230:	20001200 	.word	0x20001200
 8011234:	200011f6 	.word	0x200011f6
 8011238:	0802daa0 	.word	0x0802daa0
 801123c:	0802dabc 	.word	0x0802dabc
 8011240:	0802dad8 	.word	0x0802dad8

08011244 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8011244:	b580      	push	{r7, lr}
 8011246:	b084      	sub	sp, #16
 8011248:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 801124a:	4b1a      	ldr	r3, [pc, #104]	@ (80112b4 <SGP_DeviceConnected+0x70>)
 801124c:	2202      	movs	r2, #2
 801124e:	0019      	movs	r1, r3
 8011250:	2059      	movs	r0, #89	@ 0x59
 8011252:	f7ff fde5 	bl	8010e20 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8011256:	2001      	movs	r0, #1
 8011258:	f003 fbb8 	bl	80149cc <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 801125c:	4b16      	ldr	r3, [pc, #88]	@ (80112b8 <SGP_DeviceConnected+0x74>)
 801125e:	2209      	movs	r2, #9
 8011260:	0019      	movs	r1, r3
 8011262:	2059      	movs	r0, #89	@ 0x59
 8011264:	f7ff fdbe 	bl	8010de4 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8011268:	1dfb      	adds	r3, r7, #7
 801126a:	2200      	movs	r2, #0
 801126c:	701a      	strb	r2, [r3, #0]
 801126e:	e011      	b.n	8011294 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8011270:	1dfb      	adds	r3, r7, #7
 8011272:	7818      	ldrb	r0, [r3, #0]
 8011274:	1dfb      	adds	r3, r7, #7
 8011276:	781b      	ldrb	r3, [r3, #0]
 8011278:	4a0f      	ldr	r2, [pc, #60]	@ (80112b8 <SGP_DeviceConnected+0x74>)
 801127a:	5cd3      	ldrb	r3, [r2, r3]
 801127c:	4a0f      	ldr	r2, [pc, #60]	@ (80112bc <SGP_DeviceConnected+0x78>)
 801127e:	4910      	ldr	r1, [pc, #64]	@ (80112c0 <SGP_DeviceConnected+0x7c>)
 8011280:	9300      	str	r3, [sp, #0]
 8011282:	0003      	movs	r3, r0
 8011284:	2002      	movs	r0, #2
 8011286:	f002 fe17 	bl	8013eb8 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 801128a:	1dfb      	adds	r3, r7, #7
 801128c:	781a      	ldrb	r2, [r3, #0]
 801128e:	1dfb      	adds	r3, r7, #7
 8011290:	3201      	adds	r2, #1
 8011292:	701a      	strb	r2, [r3, #0]
 8011294:	1dfb      	adds	r3, r7, #7
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	2b08      	cmp	r3, #8
 801129a:	d9e9      	bls.n	8011270 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 801129c:	4b06      	ldr	r3, [pc, #24]	@ (80112b8 <SGP_DeviceConnected+0x74>)
 801129e:	2203      	movs	r2, #3
 80112a0:	2109      	movs	r1, #9
 80112a2:	0018      	movs	r0, r3
 80112a4:	f000 f80e 	bl	80112c4 <CheckCRC>
 80112a8:	0003      	movs	r3, r0
}
 80112aa:	0018      	movs	r0, r3
 80112ac:	46bd      	mov	sp, r7
 80112ae:	b002      	add	sp, #8
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	46c0      	nop			@ (mov r8, r8)
 80112b4:	200000b0 	.word	0x200000b0
 80112b8:	200011ec 	.word	0x200011ec
 80112bc:	0802daf8 	.word	0x0802daf8
 80112c0:	0802da78 	.word	0x0802da78

080112c4 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 80112c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112c6:	b08f      	sub	sp, #60	@ 0x3c
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6278      	str	r0, [r7, #36]	@ 0x24
 80112cc:	0008      	movs	r0, r1
 80112ce:	0011      	movs	r1, r2
 80112d0:	2323      	movs	r3, #35	@ 0x23
 80112d2:	18fb      	adds	r3, r7, r3
 80112d4:	1c02      	adds	r2, r0, #0
 80112d6:	701a      	strb	r2, [r3, #0]
 80112d8:	2322      	movs	r3, #34	@ 0x22
 80112da:	18fb      	adds	r3, r7, r3
 80112dc:	1c0a      	adds	r2, r1, #0
 80112de:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80112e0:	2317      	movs	r3, #23
 80112e2:	2220      	movs	r2, #32
 80112e4:	189b      	adds	r3, r3, r2
 80112e6:	19db      	adds	r3, r3, r7
 80112e8:	2200      	movs	r2, #0
 80112ea:	701a      	strb	r2, [r3, #0]
 80112ec:	e09f      	b.n	801142e <CheckCRC+0x16a>
 80112ee:	466b      	mov	r3, sp
 80112f0:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 80112f2:	2322      	movs	r3, #34	@ 0x22
 80112f4:	18fb      	adds	r3, r7, r3
 80112f6:	781b      	ldrb	r3, [r3, #0]
 80112f8:	001a      	movs	r2, r3
 80112fa:	3a01      	subs	r2, #1
 80112fc:	633a      	str	r2, [r7, #48]	@ 0x30
 80112fe:	60bb      	str	r3, [r7, #8]
 8011300:	2200      	movs	r2, #0
 8011302:	60fa      	str	r2, [r7, #12]
 8011304:	68b8      	ldr	r0, [r7, #8]
 8011306:	68f9      	ldr	r1, [r7, #12]
 8011308:	0002      	movs	r2, r0
 801130a:	0f52      	lsrs	r2, r2, #29
 801130c:	000c      	movs	r4, r1
 801130e:	00e4      	lsls	r4, r4, #3
 8011310:	61fc      	str	r4, [r7, #28]
 8011312:	69fc      	ldr	r4, [r7, #28]
 8011314:	4314      	orrs	r4, r2
 8011316:	61fc      	str	r4, [r7, #28]
 8011318:	0002      	movs	r2, r0
 801131a:	00d2      	lsls	r2, r2, #3
 801131c:	61ba      	str	r2, [r7, #24]
 801131e:	603b      	str	r3, [r7, #0]
 8011320:	2200      	movs	r2, #0
 8011322:	607a      	str	r2, [r7, #4]
 8011324:	6838      	ldr	r0, [r7, #0]
 8011326:	6879      	ldr	r1, [r7, #4]
 8011328:	0002      	movs	r2, r0
 801132a:	0f52      	lsrs	r2, r2, #29
 801132c:	000c      	movs	r4, r1
 801132e:	00e4      	lsls	r4, r4, #3
 8011330:	617c      	str	r4, [r7, #20]
 8011332:	697c      	ldr	r4, [r7, #20]
 8011334:	4314      	orrs	r4, r2
 8011336:	617c      	str	r4, [r7, #20]
 8011338:	0002      	movs	r2, r0
 801133a:	00d2      	lsls	r2, r2, #3
 801133c:	613a      	str	r2, [r7, #16]
 801133e:	3307      	adds	r3, #7
 8011340:	08db      	lsrs	r3, r3, #3
 8011342:	00db      	lsls	r3, r3, #3
 8011344:	466a      	mov	r2, sp
 8011346:	1ad3      	subs	r3, r2, r3
 8011348:	469d      	mov	sp, r3
 801134a:	466b      	mov	r3, sp
 801134c:	3300      	adds	r3, #0
 801134e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8011350:	2316      	movs	r3, #22
 8011352:	2220      	movs	r2, #32
 8011354:	189b      	adds	r3, r3, r2
 8011356:	19db      	adds	r3, r3, r7
 8011358:	2200      	movs	r2, #0
 801135a:	701a      	strb	r2, [r3, #0]
 801135c:	e01e      	b.n	801139c <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 801135e:	2317      	movs	r3, #23
 8011360:	2220      	movs	r2, #32
 8011362:	189b      	adds	r3, r3, r2
 8011364:	19db      	adds	r3, r3, r7
 8011366:	781a      	ldrb	r2, [r3, #0]
 8011368:	2116      	movs	r1, #22
 801136a:	2320      	movs	r3, #32
 801136c:	18cb      	adds	r3, r1, r3
 801136e:	19db      	adds	r3, r3, r7
 8011370:	781b      	ldrb	r3, [r3, #0]
 8011372:	18d3      	adds	r3, r2, r3
 8011374:	001a      	movs	r2, r3
 8011376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011378:	189a      	adds	r2, r3, r2
 801137a:	0008      	movs	r0, r1
 801137c:	2320      	movs	r3, #32
 801137e:	18cb      	adds	r3, r1, r3
 8011380:	19db      	adds	r3, r3, r7
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	7811      	ldrb	r1, [r2, #0]
 8011386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011388:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 801138a:	2320      	movs	r3, #32
 801138c:	18c3      	adds	r3, r0, r3
 801138e:	19db      	adds	r3, r3, r7
 8011390:	781a      	ldrb	r2, [r3, #0]
 8011392:	2320      	movs	r3, #32
 8011394:	18c3      	adds	r3, r0, r3
 8011396:	19db      	adds	r3, r3, r7
 8011398:	3201      	adds	r2, #1
 801139a:	701a      	strb	r2, [r3, #0]
 801139c:	2316      	movs	r3, #22
 801139e:	2220      	movs	r2, #32
 80113a0:	189b      	adds	r3, r3, r2
 80113a2:	19da      	adds	r2, r3, r7
 80113a4:	2322      	movs	r3, #34	@ 0x22
 80113a6:	18fb      	adds	r3, r7, r3
 80113a8:	7812      	ldrb	r2, [r2, #0]
 80113aa:	781b      	ldrb	r3, [r3, #0]
 80113ac:	429a      	cmp	r2, r3
 80113ae:	d3d6      	bcc.n	801135e <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 80113b0:	2417      	movs	r4, #23
 80113b2:	2320      	movs	r3, #32
 80113b4:	18e3      	adds	r3, r4, r3
 80113b6:	19db      	adds	r3, r3, r7
 80113b8:	781a      	ldrb	r2, [r3, #0]
 80113ba:	2322      	movs	r3, #34	@ 0x22
 80113bc:	18fb      	adds	r3, r7, r3
 80113be:	781b      	ldrb	r3, [r3, #0]
 80113c0:	18d3      	adds	r3, r2, r3
 80113c2:	3b01      	subs	r3, #1
 80113c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80113c6:	18d2      	adds	r2, r2, r3
 80113c8:	250b      	movs	r5, #11
 80113ca:	2320      	movs	r3, #32
 80113cc:	18eb      	adds	r3, r5, r3
 80113ce:	19db      	adds	r3, r3, r7
 80113d0:	7812      	ldrb	r2, [r2, #0]
 80113d2:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 80113d4:	2322      	movs	r3, #34	@ 0x22
 80113d6:	18fb      	adds	r3, r7, r3
 80113d8:	781b      	ldrb	r3, [r3, #0]
 80113da:	3b01      	subs	r3, #1
 80113dc:	b2da      	uxtb	r2, r3
 80113de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113e0:	0011      	movs	r1, r2
 80113e2:	0018      	movs	r0, r3
 80113e4:	f000 f838 	bl	8011458 <CalculateCRC>
 80113e8:	0003      	movs	r3, r0
 80113ea:	001a      	movs	r2, r3
 80113ec:	2320      	movs	r3, #32
 80113ee:	18eb      	adds	r3, r5, r3
 80113f0:	19db      	adds	r3, r3, r7
 80113f2:	781b      	ldrb	r3, [r3, #0]
 80113f4:	4293      	cmp	r3, r2
 80113f6:	d00c      	beq.n	8011412 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 80113f8:	2320      	movs	r3, #32
 80113fa:	18e3      	adds	r3, r4, r3
 80113fc:	19db      	adds	r3, r3, r7
 80113fe:	781b      	ldrb	r3, [r3, #0]
 8011400:	3301      	adds	r3, #1
 8011402:	4a13      	ldr	r2, [pc, #76]	@ (8011450 <CheckCRC+0x18c>)
 8011404:	4913      	ldr	r1, [pc, #76]	@ (8011454 <CheckCRC+0x190>)
 8011406:	2001      	movs	r0, #1
 8011408:	f002 fd56 	bl	8013eb8 <CreateLine>
      return false;
 801140c:	2300      	movs	r3, #0
 801140e:	46b5      	mov	sp, r6
 8011410:	e019      	b.n	8011446 <CheckCRC+0x182>
 8011412:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8011414:	2217      	movs	r2, #23
 8011416:	2320      	movs	r3, #32
 8011418:	18d3      	adds	r3, r2, r3
 801141a:	19db      	adds	r3, r3, r7
 801141c:	2120      	movs	r1, #32
 801141e:	1852      	adds	r2, r2, r1
 8011420:	19d1      	adds	r1, r2, r7
 8011422:	2222      	movs	r2, #34	@ 0x22
 8011424:	18ba      	adds	r2, r7, r2
 8011426:	7809      	ldrb	r1, [r1, #0]
 8011428:	7812      	ldrb	r2, [r2, #0]
 801142a:	188a      	adds	r2, r1, r2
 801142c:	701a      	strb	r2, [r3, #0]
 801142e:	2317      	movs	r3, #23
 8011430:	2220      	movs	r2, #32
 8011432:	189b      	adds	r3, r3, r2
 8011434:	19da      	adds	r2, r3, r7
 8011436:	2323      	movs	r3, #35	@ 0x23
 8011438:	18fb      	adds	r3, r7, r3
 801143a:	7812      	ldrb	r2, [r2, #0]
 801143c:	781b      	ldrb	r3, [r3, #0]
 801143e:	429a      	cmp	r2, r3
 8011440:	d200      	bcs.n	8011444 <CheckCRC+0x180>
 8011442:	e754      	b.n	80112ee <CheckCRC+0x2a>
    }
  }
  return true;
 8011444:	2301      	movs	r3, #1
}
 8011446:	0018      	movs	r0, r3
 8011448:	46bd      	mov	sp, r7
 801144a:	b00f      	add	sp, #60	@ 0x3c
 801144c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801144e:	46c0      	nop			@ (mov r8, r8)
 8011450:	0802db18 	.word	0x0802db18
 8011454:	0802da54 	.word	0x0802da54

08011458 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8011458:	b580      	push	{r7, lr}
 801145a:	b084      	sub	sp, #16
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	000a      	movs	r2, r1
 8011462:	1cfb      	adds	r3, r7, #3
 8011464:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8011466:	230f      	movs	r3, #15
 8011468:	18fb      	adds	r3, r7, r3
 801146a:	22ff      	movs	r2, #255	@ 0xff
 801146c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 801146e:	230e      	movs	r3, #14
 8011470:	18fb      	adds	r3, r7, r3
 8011472:	2200      	movs	r2, #0
 8011474:	701a      	strb	r2, [r3, #0]
 8011476:	e038      	b.n	80114ea <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8011478:	230e      	movs	r3, #14
 801147a:	18fb      	adds	r3, r7, r3
 801147c:	781b      	ldrb	r3, [r3, #0]
 801147e:	687a      	ldr	r2, [r7, #4]
 8011480:	18d3      	adds	r3, r2, r3
 8011482:	7819      	ldrb	r1, [r3, #0]
 8011484:	220f      	movs	r2, #15
 8011486:	18bb      	adds	r3, r7, r2
 8011488:	18ba      	adds	r2, r7, r2
 801148a:	7812      	ldrb	r2, [r2, #0]
 801148c:	404a      	eors	r2, r1
 801148e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8011490:	230d      	movs	r3, #13
 8011492:	18fb      	adds	r3, r7, r3
 8011494:	2200      	movs	r2, #0
 8011496:	701a      	strb	r2, [r3, #0]
 8011498:	e01c      	b.n	80114d4 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 801149a:	210f      	movs	r1, #15
 801149c:	187b      	adds	r3, r7, r1
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	b25b      	sxtb	r3, r3
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	da0a      	bge.n	80114bc <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 80114a6:	187b      	adds	r3, r7, r1
 80114a8:	781b      	ldrb	r3, [r3, #0]
 80114aa:	b25b      	sxtb	r3, r3
 80114ac:	18db      	adds	r3, r3, r3
 80114ae:	b25b      	sxtb	r3, r3
 80114b0:	2231      	movs	r2, #49	@ 0x31
 80114b2:	4053      	eors	r3, r2
 80114b4:	b25a      	sxtb	r2, r3
 80114b6:	187b      	adds	r3, r7, r1
 80114b8:	701a      	strb	r2, [r3, #0]
 80114ba:	e005      	b.n	80114c8 <CalculateCRC+0x70>
      } else {
        crc <<= 1;
 80114bc:	230f      	movs	r3, #15
 80114be:	18fa      	adds	r2, r7, r3
 80114c0:	18fb      	adds	r3, r7, r3
 80114c2:	781b      	ldrb	r3, [r3, #0]
 80114c4:	18db      	adds	r3, r3, r3
 80114c6:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80114c8:	210d      	movs	r1, #13
 80114ca:	187b      	adds	r3, r7, r1
 80114cc:	781a      	ldrb	r2, [r3, #0]
 80114ce:	187b      	adds	r3, r7, r1
 80114d0:	3201      	adds	r2, #1
 80114d2:	701a      	strb	r2, [r3, #0]
 80114d4:	230d      	movs	r3, #13
 80114d6:	18fb      	adds	r3, r7, r3
 80114d8:	781b      	ldrb	r3, [r3, #0]
 80114da:	2b07      	cmp	r3, #7
 80114dc:	d9dd      	bls.n	801149a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80114de:	210e      	movs	r1, #14
 80114e0:	187b      	adds	r3, r7, r1
 80114e2:	781a      	ldrb	r2, [r3, #0]
 80114e4:	187b      	adds	r3, r7, r1
 80114e6:	3201      	adds	r2, #1
 80114e8:	701a      	strb	r2, [r3, #0]
 80114ea:	230e      	movs	r3, #14
 80114ec:	18fa      	adds	r2, r7, r3
 80114ee:	1cfb      	adds	r3, r7, #3
 80114f0:	7812      	ldrb	r2, [r2, #0]
 80114f2:	781b      	ldrb	r3, [r3, #0]
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d3bf      	bcc.n	8011478 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 80114f8:	230f      	movs	r3, #15
 80114fa:	18fb      	adds	r3, r7, r3
 80114fc:	781b      	ldrb	r3, [r3, #0]
}
 80114fe:	0018      	movs	r0, r3
 8011500:	46bd      	mov	sp, r7
 8011502:	b004      	add	sp, #16
 8011504:	bd80      	pop	{r7, pc}
	...

08011508 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 8011508:	b580      	push	{r7, lr}
 801150a:	b084      	sub	sp, #16
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
 8011510:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	4936      	ldr	r1, [pc, #216]	@ (80115f0 <SGP_SetHT+0xe8>)
 8011518:	1c18      	adds	r0, r3, #0
 801151a:	f7ef f9d1 	bl	80008c0 <__aeabi_fadd>
 801151e:	1c03      	adds	r3, r0, #0
 8011520:	4934      	ldr	r1, [pc, #208]	@ (80115f4 <SGP_SetHT+0xec>)
 8011522:	1c18      	adds	r0, r3, #0
 8011524:	f7ef fbbe 	bl	8000ca4 <__aeabi_fdiv>
 8011528:	1c03      	adds	r3, r0, #0
 801152a:	4933      	ldr	r1, [pc, #204]	@ (80115f8 <SGP_SetHT+0xf0>)
 801152c:	1c18      	adds	r0, r3, #0
 801152e:	f7ef fd87 	bl	8001040 <__aeabi_fmul>
 8011532:	1c03      	adds	r3, r0, #0
 8011534:	1c18      	adds	r0, r3, #0
 8011536:	f7ef f871 	bl	800061c <__aeabi_f2uiz>
 801153a:	0003      	movs	r3, r0
 801153c:	b29a      	uxth	r2, r3
 801153e:	4b2f      	ldr	r3, [pc, #188]	@ (80115fc <SGP_SetHT+0xf4>)
 8011540:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	492e      	ldr	r1, [pc, #184]	@ (8011600 <SGP_SetHT+0xf8>)
 8011548:	1c18      	adds	r0, r3, #0
 801154a:	f7ef fbab 	bl	8000ca4 <__aeabi_fdiv>
 801154e:	1c03      	adds	r3, r0, #0
 8011550:	4929      	ldr	r1, [pc, #164]	@ (80115f8 <SGP_SetHT+0xf0>)
 8011552:	1c18      	adds	r0, r3, #0
 8011554:	f7ef fd74 	bl	8001040 <__aeabi_fmul>
 8011558:	1c03      	adds	r3, r0, #0
 801155a:	1c18      	adds	r0, r3, #0
 801155c:	f7ef f85e 	bl	800061c <__aeabi_f2uiz>
 8011560:	0003      	movs	r3, r0
 8011562:	b29a      	uxth	r2, r3
 8011564:	4b27      	ldr	r3, [pc, #156]	@ (8011604 <SGP_SetHT+0xfc>)
 8011566:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8011568:	4b26      	ldr	r3, [pc, #152]	@ (8011604 <SGP_SetHT+0xfc>)
 801156a:	881b      	ldrh	r3, [r3, #0]
 801156c:	0a1b      	lsrs	r3, r3, #8
 801156e:	b29b      	uxth	r3, r3
 8011570:	b2da      	uxtb	r2, r3
 8011572:	4b25      	ldr	r3, [pc, #148]	@ (8011608 <SGP_SetHT+0x100>)
 8011574:	709a      	strb	r2, [r3, #2]
 8011576:	4b24      	ldr	r3, [pc, #144]	@ (8011608 <SGP_SetHT+0x100>)
 8011578:	789a      	ldrb	r2, [r3, #2]
 801157a:	210c      	movs	r1, #12
 801157c:	187b      	adds	r3, r7, r1
 801157e:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8011580:	4b20      	ldr	r3, [pc, #128]	@ (8011604 <SGP_SetHT+0xfc>)
 8011582:	881b      	ldrh	r3, [r3, #0]
 8011584:	b2da      	uxtb	r2, r3
 8011586:	4b20      	ldr	r3, [pc, #128]	@ (8011608 <SGP_SetHT+0x100>)
 8011588:	70da      	strb	r2, [r3, #3]
 801158a:	4b1f      	ldr	r3, [pc, #124]	@ (8011608 <SGP_SetHT+0x100>)
 801158c:	78da      	ldrb	r2, [r3, #3]
 801158e:	187b      	adds	r3, r7, r1
 8011590:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8011592:	187b      	adds	r3, r7, r1
 8011594:	2102      	movs	r1, #2
 8011596:	0018      	movs	r0, r3
 8011598:	f7ff ff5e 	bl	8011458 <CalculateCRC>
 801159c:	0003      	movs	r3, r0
 801159e:	001a      	movs	r2, r3
 80115a0:	4b19      	ldr	r3, [pc, #100]	@ (8011608 <SGP_SetHT+0x100>)
 80115a2:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 80115a4:	4b15      	ldr	r3, [pc, #84]	@ (80115fc <SGP_SetHT+0xf4>)
 80115a6:	881b      	ldrh	r3, [r3, #0]
 80115a8:	0a1b      	lsrs	r3, r3, #8
 80115aa:	b29b      	uxth	r3, r3
 80115ac:	b2da      	uxtb	r2, r3
 80115ae:	4b16      	ldr	r3, [pc, #88]	@ (8011608 <SGP_SetHT+0x100>)
 80115b0:	715a      	strb	r2, [r3, #5]
 80115b2:	4b15      	ldr	r3, [pc, #84]	@ (8011608 <SGP_SetHT+0x100>)
 80115b4:	795a      	ldrb	r2, [r3, #5]
 80115b6:	2108      	movs	r1, #8
 80115b8:	187b      	adds	r3, r7, r1
 80115ba:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 80115bc:	4b0f      	ldr	r3, [pc, #60]	@ (80115fc <SGP_SetHT+0xf4>)
 80115be:	881b      	ldrh	r3, [r3, #0]
 80115c0:	b2da      	uxtb	r2, r3
 80115c2:	4b11      	ldr	r3, [pc, #68]	@ (8011608 <SGP_SetHT+0x100>)
 80115c4:	719a      	strb	r2, [r3, #6]
 80115c6:	4b10      	ldr	r3, [pc, #64]	@ (8011608 <SGP_SetHT+0x100>)
 80115c8:	799a      	ldrb	r2, [r3, #6]
 80115ca:	187b      	adds	r3, r7, r1
 80115cc:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 80115ce:	187b      	adds	r3, r7, r1
 80115d0:	2102      	movs	r1, #2
 80115d2:	0018      	movs	r0, r3
 80115d4:	f7ff ff40 	bl	8011458 <CalculateCRC>
 80115d8:	0003      	movs	r3, r0
 80115da:	001a      	movs	r2, r3
 80115dc:	4b0a      	ldr	r3, [pc, #40]	@ (8011608 <SGP_SetHT+0x100>)
 80115de:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 80115e0:	4b0a      	ldr	r3, [pc, #40]	@ (801160c <SGP_SetHT+0x104>)
 80115e2:	2201      	movs	r2, #1
 80115e4:	701a      	strb	r2, [r3, #0]
}
 80115e6:	46c0      	nop			@ (mov r8, r8)
 80115e8:	46bd      	mov	sp, r7
 80115ea:	b004      	add	sp, #16
 80115ec:	bd80      	pop	{r7, pc}
 80115ee:	46c0      	nop			@ (mov r8, r8)
 80115f0:	42340000 	.word	0x42340000
 80115f4:	432f0000 	.word	0x432f0000
 80115f8:	477fff00 	.word	0x477fff00
 80115fc:	200012a6 	.word	0x200012a6
 8011600:	42c80000 	.word	0x42c80000
 8011604:	200012a4 	.word	0x200012a4
 8011608:	200000bc 	.word	0x200000bc
 801160c:	200012a8 	.word	0x200012a8

08011610 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 8011610:	b580      	push	{r7, lr}
 8011612:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 8011614:	4a09      	ldr	r2, [pc, #36]	@ (801163c <SGP_SoftReset+0x2c>)
 8011616:	4b0a      	ldr	r3, [pc, #40]	@ (8011640 <SGP_SoftReset+0x30>)
 8011618:	0019      	movs	r1, r3
 801161a:	2003      	movs	r0, #3
 801161c:	f002 fc4c 	bl	8013eb8 <CreateLine>
  SGP_TurnHeaterOff();
 8011620:	f7ff fccc 	bl	8010fbc <SGP_TurnHeaterOff>
  HAL_Delay(10);
 8011624:	200a      	movs	r0, #10
 8011626:	f003 f9d1 	bl	80149cc <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 801162a:	4b06      	ldr	r3, [pc, #24]	@ (8011644 <SGP_SoftReset+0x34>)
 801162c:	2202      	movs	r2, #2
 801162e:	0019      	movs	r1, r3
 8011630:	2059      	movs	r0, #89	@ 0x59
 8011632:	f7ff fbf5 	bl	8010e20 <WriteRegister>
}
 8011636:	46c0      	nop			@ (mov r8, r8)
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}
 801163c:	0802dbc0 	.word	0x0802dbc0
 8011640:	0802da9c 	.word	0x0802da9c
 8011644:	200000c4 	.word	0x200000c4

08011648 <ResetVOCresult>:

void ResetVOCresult(void) {
 8011648:	b580      	push	{r7, lr}
 801164a:	af00      	add	r7, sp, #0
  vocIndex = 0;
 801164c:	4b02      	ldr	r3, [pc, #8]	@ (8011658 <ResetVOCresult+0x10>)
 801164e:	2200      	movs	r2, #0
 8011650:	601a      	str	r2, [r3, #0]
}
 8011652:	46c0      	nop			@ (mov r8, r8)
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}
 8011658:	200012ac 	.word	0x200012ac

0801165c <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 801165c:	b580      	push	{r7, lr}
 801165e:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 8011660:	4b4b      	ldr	r3, [pc, #300]	@ (8011790 <SGP_Upkeep+0x134>)
 8011662:	781b      	ldrb	r3, [r3, #0]
 8011664:	2b07      	cmp	r3, #7
 8011666:	d900      	bls.n	801166a <SGP_Upkeep+0xe>
 8011668:	e07a      	b.n	8011760 <SGP_Upkeep+0x104>
 801166a:	009a      	lsls	r2, r3, #2
 801166c:	4b49      	ldr	r3, [pc, #292]	@ (8011794 <SGP_Upkeep+0x138>)
 801166e:	18d3      	adds	r3, r2, r3
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 8011674:	4a48      	ldr	r2, [pc, #288]	@ (8011798 <SGP_Upkeep+0x13c>)
 8011676:	4b49      	ldr	r3, [pc, #292]	@ (801179c <SGP_Upkeep+0x140>)
 8011678:	0019      	movs	r1, r3
 801167a:	2003      	movs	r0, #3
 801167c:	f002 fc1c 	bl	8013eb8 <CreateLine>
    break;
 8011680:	e081      	b.n	8011786 <SGP_Upkeep+0x12a>

  case SGP_STATE_INIT:
    ResetVOCresult();
 8011682:	f7ff ffe1 	bl	8011648 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 8011686:	4b42      	ldr	r3, [pc, #264]	@ (8011790 <SGP_Upkeep+0x134>)
 8011688:	2201      	movs	r2, #1
 801168a:	701a      	strb	r2, [r3, #0]
    break;
 801168c:	e07b      	b.n	8011786 <SGP_Upkeep+0x12a>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 801168e:	f7fc fc2d 	bl	800deec <getSensorLock>
 8011692:	1e03      	subs	r3, r0, #0
 8011694:	d000      	beq.n	8011698 <SGP_Upkeep+0x3c>
 8011696:	e06f      	b.n	8011778 <SGP_Upkeep+0x11c>
      break;
    }
    setSensorLock(SGP40);
 8011698:	2005      	movs	r0, #5
 801169a:	f7fc fc13 	bl	800dec4 <setSensorLock>
    SetMeasurementIndicator();
 801169e:	f001 f989 	bl	80129b4 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 80116a2:	f7ff fc29 	bl	8010ef8 <SGP_StartMeasurement>
    HAL_Delay(10); // wait for deferred DMA transfers
 80116a6:	200a      	movs	r0, #10
 80116a8:	f003 f990 	bl	80149cc <HAL_Delay>
    setSensorLock(FREE);
 80116ac:	2000      	movs	r0, #0
 80116ae:	f7fc fc09 	bl	800dec4 <setSensorLock>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 80116b2:	4b37      	ldr	r3, [pc, #220]	@ (8011790 <SGP_Upkeep+0x134>)
 80116b4:	2202      	movs	r2, #2
 80116b6:	701a      	strb	r2, [r3, #0]
    break;
 80116b8:	e065      	b.n	8011786 <SGP_Upkeep+0x12a>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if (getSensorLock() != FREE) {
 80116ba:	f7fc fc17 	bl	800deec <getSensorLock>
 80116be:	1e03      	subs	r3, r0, #0
 80116c0:	d15c      	bne.n	801177c <SGP_Upkeep+0x120>
      break;
    }
    setSensorLock(SGP40);
 80116c2:	2005      	movs	r0, #5
 80116c4:	f7fc fbfe 	bl	800dec4 <setSensorLock>
    if(SGP_GetMeasurementValues(&vocIndex)) {
 80116c8:	4b35      	ldr	r3, [pc, #212]	@ (80117a0 <SGP_Upkeep+0x144>)
 80116ca:	0018      	movs	r0, r3
 80116cc:	f7ff fc84 	bl	8010fd8 <SGP_GetMeasurementValues>
 80116d0:	1e03      	subs	r3, r0, #0
 80116d2:	d002      	beq.n	80116da <SGP_Upkeep+0x7e>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 80116d4:	4b2e      	ldr	r3, [pc, #184]	@ (8011790 <SGP_Upkeep+0x134>)
 80116d6:	2203      	movs	r2, #3
 80116d8:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 80116da:	200a      	movs	r0, #10
 80116dc:	f003 f976 	bl	80149cc <HAL_Delay>
    setSensorLock(FREE);
 80116e0:	2000      	movs	r0, #0
 80116e2:	f7fc fbef 	bl	800dec4 <setSensorLock>
    break;
 80116e6:	e04e      	b.n	8011786 <SGP_Upkeep+0x12a>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 80116e8:	4b2d      	ldr	r3, [pc, #180]	@ (80117a0 <SGP_Upkeep+0x144>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	b29b      	uxth	r3, r3
 80116ee:	0018      	movs	r0, r3
 80116f0:	f7f3 f9e0 	bl	8004ab4 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 80116f4:	4b26      	ldr	r3, [pc, #152]	@ (8011790 <SGP_Upkeep+0x134>)
 80116f6:	2206      	movs	r2, #6
 80116f8:	701a      	strb	r2, [r3, #0]
    break;
 80116fa:	e044      	b.n	8011786 <SGP_Upkeep+0x12a>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 80116fc:	4b24      	ldr	r3, [pc, #144]	@ (8011790 <SGP_Upkeep+0x134>)
 80116fe:	2207      	movs	r2, #7
 8011700:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter >= 4) && (!usbPluggedIn)) {
 8011702:	4b28      	ldr	r3, [pc, #160]	@ (80117a4 <SGP_Upkeep+0x148>)
 8011704:	781b      	ldrb	r3, [r3, #0]
 8011706:	2b03      	cmp	r3, #3
 8011708:	d912      	bls.n	8011730 <SGP_Upkeep+0xd4>
 801170a:	4b27      	ldr	r3, [pc, #156]	@ (80117a8 <SGP_Upkeep+0x14c>)
 801170c:	781b      	ldrb	r3, [r3, #0]
 801170e:	2201      	movs	r2, #1
 8011710:	4053      	eors	r3, r2
 8011712:	b2db      	uxtb	r3, r3
 8011714:	2b00      	cmp	r3, #0
 8011716:	d00b      	beq.n	8011730 <SGP_Upkeep+0xd4>
      // During startup take 12 samples
      if (sgpinitdone) {
 8011718:	4b24      	ldr	r3, [pc, #144]	@ (80117ac <SGP_Upkeep+0x150>)
 801171a:	781b      	ldrb	r3, [r3, #0]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d004      	beq.n	801172a <SGP_Upkeep+0xce>
        SGP_SoftReset();
 8011720:	f7ff ff76 	bl	8011610 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 8011724:	2000      	movs	r0, #0
 8011726:	f7fb ff77 	bl	800d618 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 801172a:	4b20      	ldr	r3, [pc, #128]	@ (80117ac <SGP_Upkeep+0x150>)
 801172c:	2201      	movs	r2, #1
 801172e:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 8011730:	f003 f942 	bl	80149b8 <HAL_GetTick>
 8011734:	0003      	movs	r3, r0
 8011736:	22c8      	movs	r2, #200	@ 0xc8
 8011738:	0092      	lsls	r2, r2, #2
 801173a:	189a      	adds	r2, r3, r2
 801173c:	4b1c      	ldr	r3, [pc, #112]	@ (80117b0 <SGP_Upkeep+0x154>)
 801173e:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 8011740:	f001 f94a 	bl	80129d8 <ResetMeasurementIndicator>
  break;
 8011744:	e01f      	b.n	8011786 <SGP_Upkeep+0x12a>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 8011746:	4b1a      	ldr	r3, [pc, #104]	@ (80117b0 <SGP_Upkeep+0x154>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	0018      	movs	r0, r3
 801174c:	f002 fb5e 	bl	8013e0c <TimestampIsReached>
 8011750:	1e03      	subs	r3, r0, #0
 8011752:	d015      	beq.n	8011780 <SGP_Upkeep+0x124>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 8011754:	f7ff fbb8 	bl	8010ec8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 8011758:	4b0d      	ldr	r3, [pc, #52]	@ (8011790 <SGP_Upkeep+0x134>)
 801175a:	2200      	movs	r2, #0
 801175c:	701a      	strb	r2, [r3, #0]
    }
    break;
 801175e:	e00f      	b.n	8011780 <SGP_Upkeep+0x124>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 8011760:	4b0b      	ldr	r3, [pc, #44]	@ (8011790 <SGP_Upkeep+0x134>)
 8011762:	2200      	movs	r2, #0
 8011764:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 8011766:	f7fc fbc1 	bl	800deec <getSensorLock>
 801176a:	0003      	movs	r3, r0
 801176c:	2b05      	cmp	r3, #5
 801176e:	d109      	bne.n	8011784 <SGP_Upkeep+0x128>
      setSensorLock(FREE);
 8011770:	2000      	movs	r0, #0
 8011772:	f7fc fba7 	bl	800dec4 <setSensorLock>
    }
    break;
 8011776:	e005      	b.n	8011784 <SGP_Upkeep+0x128>
      break;
 8011778:	46c0      	nop			@ (mov r8, r8)
 801177a:	e004      	b.n	8011786 <SGP_Upkeep+0x12a>
      break;
 801177c:	46c0      	nop			@ (mov r8, r8)
 801177e:	e002      	b.n	8011786 <SGP_Upkeep+0x12a>
    break;
 8011780:	46c0      	nop			@ (mov r8, r8)
 8011782:	e000      	b.n	8011786 <SGP_Upkeep+0x12a>
    break;
 8011784:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 8011786:	4b02      	ldr	r3, [pc, #8]	@ (8011790 <SGP_Upkeep+0x134>)
 8011788:	781b      	ldrb	r3, [r3, #0]
}
 801178a:	0018      	movs	r0, r3
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}
 8011790:	200012b0 	.word	0x200012b0
 8011794:	0802e78c 	.word	0x0802e78c
 8011798:	0802dbd8 	.word	0x0802dbd8
 801179c:	0802da9c 	.word	0x0802da9c
 80117a0:	200012ac 	.word	0x200012ac
 80117a4:	200011f6 	.word	0x200011f6
 80117a8:	2000214d 	.word	0x2000214d
 80117ac:	200011e0 	.word	0x200011e0
 80117b0:	200011f8 	.word	0x200011f8

080117b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b082      	sub	sp, #8
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	0002      	movs	r2, r0
 80117bc:	1dfb      	adds	r3, r7, #7
 80117be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80117c0:	1dfb      	adds	r3, r7, #7
 80117c2:	781b      	ldrb	r3, [r3, #0]
 80117c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80117c6:	d809      	bhi.n	80117dc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80117c8:	1dfb      	adds	r3, r7, #7
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	001a      	movs	r2, r3
 80117ce:	231f      	movs	r3, #31
 80117d0:	401a      	ands	r2, r3
 80117d2:	4b04      	ldr	r3, [pc, #16]	@ (80117e4 <__NVIC_EnableIRQ+0x30>)
 80117d4:	2101      	movs	r1, #1
 80117d6:	4091      	lsls	r1, r2
 80117d8:	000a      	movs	r2, r1
 80117da:	601a      	str	r2, [r3, #0]
  }
}
 80117dc:	46c0      	nop			@ (mov r8, r8)
 80117de:	46bd      	mov	sp, r7
 80117e0:	b002      	add	sp, #8
 80117e2:	bd80      	pop	{r7, pc}
 80117e4:	e000e100 	.word	0xe000e100

080117e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	0002      	movs	r2, r0
 80117f0:	1dfb      	adds	r3, r7, #7
 80117f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80117f4:	1dfb      	adds	r3, r7, #7
 80117f6:	781b      	ldrb	r3, [r3, #0]
 80117f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80117fa:	d810      	bhi.n	801181e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80117fc:	1dfb      	adds	r3, r7, #7
 80117fe:	781b      	ldrb	r3, [r3, #0]
 8011800:	001a      	movs	r2, r3
 8011802:	231f      	movs	r3, #31
 8011804:	4013      	ands	r3, r2
 8011806:	4908      	ldr	r1, [pc, #32]	@ (8011828 <__NVIC_DisableIRQ+0x40>)
 8011808:	2201      	movs	r2, #1
 801180a:	409a      	lsls	r2, r3
 801180c:	0013      	movs	r3, r2
 801180e:	2280      	movs	r2, #128	@ 0x80
 8011810:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8011812:	f3bf 8f4f 	dsb	sy
}
 8011816:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8011818:	f3bf 8f6f 	isb	sy
}
 801181c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 801181e:	46c0      	nop			@ (mov r8, r8)
 8011820:	46bd      	mov	sp, r7
 8011822:	b002      	add	sp, #8
 8011824:	bd80      	pop	{r7, pc}
 8011826:	46c0      	nop			@ (mov r8, r8)
 8011828:	e000e100 	.word	0xe000e100

0801182c <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 801182c:	b5b0      	push	{r4, r5, r7, lr}
 801182e:	b088      	sub	sp, #32
 8011830:	af02      	add	r7, sp, #8
 8011832:	6078      	str	r0, [r7, #4]
 8011834:	0008      	movs	r0, r1
 8011836:	0011      	movs	r1, r2
 8011838:	1cfb      	adds	r3, r7, #3
 801183a:	1c02      	adds	r2, r0, #0
 801183c:	701a      	strb	r2, [r3, #0]
 801183e:	1cbb      	adds	r3, r7, #2
 8011840:	1c0a      	adds	r2, r1, #0
 8011842:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8011844:	4b5b      	ldr	r3, [pc, #364]	@ (80119b4 <getSoundData+0x188>)
 8011846:	781b      	ldrb	r3, [r3, #0]
 8011848:	b2db      	uxtb	r3, r3
 801184a:	2201      	movs	r2, #1
 801184c:	4053      	eors	r3, r2
 801184e:	b2db      	uxtb	r3, r3
 8011850:	2b00      	cmp	r3, #0
 8011852:	d107      	bne.n	8011864 <getSoundData+0x38>
 8011854:	4b58      	ldr	r3, [pc, #352]	@ (80119b8 <getSoundData+0x18c>)
 8011856:	781b      	ldrb	r3, [r3, #0]
 8011858:	b2db      	uxtb	r3, r3
 801185a:	2201      	movs	r2, #1
 801185c:	4053      	eors	r3, r2
 801185e:	b2db      	uxtb	r3, r3
 8011860:	2b00      	cmp	r3, #0
 8011862:	d001      	beq.n	8011868 <getSoundData+0x3c>
    {
        return false;
 8011864:	2300      	movs	r3, #0
 8011866:	e0a0      	b.n	80119aa <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 8011868:	4b54      	ldr	r3, [pc, #336]	@ (80119bc <getSoundData+0x190>)
 801186a:	781b      	ldrb	r3, [r3, #0]
 801186c:	b2db      	uxtb	r3, r3
 801186e:	2b00      	cmp	r3, #0
 8011870:	d005      	beq.n	801187e <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8011872:	4b53      	ldr	r3, [pc, #332]	@ (80119c0 <getSoundData+0x194>)
 8011874:	781b      	ldrb	r3, [r3, #0]
 8011876:	b25b      	sxtb	r3, r3
 8011878:	0018      	movs	r0, r3
 801187a:	f7ff ffb5 	bl	80117e8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 801187e:	f3bf 8f4f 	dsb	sy
}
 8011882:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8011884:	f3bf 8f6f 	isb	sy
}
 8011888:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 801188a:	1cfb      	adds	r3, r7, #3
 801188c:	781b      	ldrb	r3, [r3, #0]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d04c      	beq.n	801192c <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 8011892:	4b4c      	ldr	r3, [pc, #304]	@ (80119c4 <getSoundData+0x198>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d11b      	bne.n	80118d2 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	2200      	movs	r2, #0
 801189e:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2200      	movs	r2, #0
 80118a4:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80118a6:	2300      	movs	r3, #0
 80118a8:	617b      	str	r3, [r7, #20]
 80118aa:	e00e      	b.n	80118ca <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 80118ac:	687a      	ldr	r2, [r7, #4]
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	18d3      	adds	r3, r2, r3
 80118b2:	3302      	adds	r3, #2
 80118b4:	2200      	movs	r2, #0
 80118b6:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 80118b8:	687a      	ldr	r2, [r7, #4]
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	18d3      	adds	r3, r2, r3
 80118be:	3308      	adds	r3, #8
 80118c0:	2200      	movs	r2, #0
 80118c2:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	3301      	adds	r3, #1
 80118c8:	617b      	str	r3, [r7, #20]
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	2b05      	cmp	r3, #5
 80118ce:	d9ed      	bls.n	80118ac <getSoundData+0x80>
 80118d0:	e02c      	b.n	801192c <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	1c59      	adds	r1, r3, #1
 80118d8:	4b3b      	ldr	r3, [pc, #236]	@ (80119c8 <getSoundData+0x19c>)
 80118da:	681a      	ldr	r2, [r3, #0]
 80118dc:	4b3b      	ldr	r3, [pc, #236]	@ (80119cc <getSoundData+0x1a0>)
 80118de:	681c      	ldr	r4, [r3, #0]
 80118e0:	4b38      	ldr	r3, [pc, #224]	@ (80119c4 <getSoundData+0x198>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	9300      	str	r3, [sp, #0]
 80118e6:	0023      	movs	r3, r4
 80118e8:	f000 fde4 	bl	80124b4 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80118ec:	2300      	movs	r3, #0
 80118ee:	613b      	str	r3, [r7, #16]
 80118f0:	e019      	b.n	8011926 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 80118f2:	687a      	ldr	r2, [r7, #4]
 80118f4:	693b      	ldr	r3, [r7, #16]
 80118f6:	18d3      	adds	r3, r2, r3
 80118f8:	1c98      	adds	r0, r3, #2
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	3308      	adds	r3, #8
 80118fe:	687a      	ldr	r2, [r7, #4]
 8011900:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 8011902:	4b33      	ldr	r3, [pc, #204]	@ (80119d0 <getSoundData+0x1a4>)
 8011904:	693a      	ldr	r2, [r7, #16]
 8011906:	0092      	lsls	r2, r2, #2
 8011908:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 801190a:	4b32      	ldr	r3, [pc, #200]	@ (80119d4 <getSoundData+0x1a8>)
 801190c:	693a      	ldr	r2, [r7, #16]
 801190e:	0092      	lsls	r2, r2, #2
 8011910:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8011912:	4b2c      	ldr	r3, [pc, #176]	@ (80119c4 <getSoundData+0x198>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	9300      	str	r3, [sp, #0]
 8011918:	0013      	movs	r3, r2
 801191a:	0022      	movs	r2, r4
 801191c:	f000 fdca 	bl	80124b4 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	3301      	adds	r3, #1
 8011924:	613b      	str	r3, [r7, #16]
 8011926:	693b      	ldr	r3, [r7, #16]
 8011928:	2b05      	cmp	r3, #5
 801192a:	d9e2      	bls.n	80118f2 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 801192c:	1cbb      	adds	r3, r7, #2
 801192e:	781b      	ldrb	r3, [r3, #0]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d028      	beq.n	8011986 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8011934:	240e      	movs	r4, #14
 8011936:	193b      	adds	r3, r7, r4
 8011938:	2200      	movs	r2, #0
 801193a:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 801193c:	250d      	movs	r5, #13
 801193e:	197b      	adds	r3, r7, r5
 8011940:	2200      	movs	r2, #0
 8011942:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8011944:	4b24      	ldr	r3, [pc, #144]	@ (80119d8 <getSoundData+0x1ac>)
 8011946:	6818      	ldr	r0, [r3, #0]
 8011948:	4924      	ldr	r1, [pc, #144]	@ (80119dc <getSoundData+0x1b0>)
 801194a:	197b      	adds	r3, r7, r5
 801194c:	193a      	adds	r2, r7, r4
 801194e:	f000 fe55 	bl	80125fc <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 8011952:	193b      	adds	r3, r7, r4
 8011954:	881a      	ldrh	r2, [r3, #0]
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	21ff      	movs	r1, #255	@ 0xff
 801195a:	4011      	ands	r1, r2
 801195c:	000c      	movs	r4, r1
 801195e:	7b99      	ldrb	r1, [r3, #14]
 8011960:	2000      	movs	r0, #0
 8011962:	4001      	ands	r1, r0
 8011964:	1c08      	adds	r0, r1, #0
 8011966:	1c21      	adds	r1, r4, #0
 8011968:	4301      	orrs	r1, r0
 801196a:	7399      	strb	r1, [r3, #14]
 801196c:	0a12      	lsrs	r2, r2, #8
 801196e:	b290      	uxth	r0, r2
 8011970:	7bda      	ldrb	r2, [r3, #15]
 8011972:	2100      	movs	r1, #0
 8011974:	400a      	ands	r2, r1
 8011976:	1c11      	adds	r1, r2, #0
 8011978:	1c02      	adds	r2, r0, #0
 801197a:	430a      	orrs	r2, r1
 801197c:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 801197e:	197b      	adds	r3, r7, r5
 8011980:	781a      	ldrb	r2, [r3, #0]
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 8011986:	f000 f869 	bl	8011a5c <micSettlingComplete>
 801198a:	0003      	movs	r3, r0
 801198c:	001a      	movs	r2, r3
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 8011992:	4b0a      	ldr	r3, [pc, #40]	@ (80119bc <getSoundData+0x190>)
 8011994:	781b      	ldrb	r3, [r3, #0]
 8011996:	b2db      	uxtb	r3, r3
 8011998:	2b00      	cmp	r3, #0
 801199a:	d005      	beq.n	80119a8 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 801199c:	4b08      	ldr	r3, [pc, #32]	@ (80119c0 <getSoundData+0x194>)
 801199e:	781b      	ldrb	r3, [r3, #0]
 80119a0:	b25b      	sxtb	r3, r3
 80119a2:	0018      	movs	r0, r3
 80119a4:	f7ff ff06 	bl	80117b4 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 80119a8:	2301      	movs	r3, #1
}
 80119aa:	0018      	movs	r0, r3
 80119ac:	46bd      	mov	sp, r7
 80119ae:	b006      	add	sp, #24
 80119b0:	bdb0      	pop	{r4, r5, r7, pc}
 80119b2:	46c0      	nop			@ (mov r8, r8)
 80119b4:	200012b2 	.word	0x200012b2
 80119b8:	200012b5 	.word	0x200012b5
 80119bc:	200012b4 	.word	0x200012b4
 80119c0:	20001d04 	.word	0x20001d04
 80119c4:	20001d40 	.word	0x20001d40
 80119c8:	20001d08 	.word	0x20001d08
 80119cc:	20001d0c 	.word	0x20001d0c
 80119d0:	20001d10 	.word	0x20001d10
 80119d4:	20001d28 	.word	0x20001d28
 80119d8:	200012bc 	.word	0x200012bc
 80119dc:	3b5c7333 	.word	0x3b5c7333

080119e0 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b084      	sub	sp, #16
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	60f8      	str	r0, [r7, #12]
 80119e8:	60b9      	str	r1, [r7, #8]
 80119ea:	607a      	str	r2, [r7, #4]
 80119ec:	001a      	movs	r2, r3
 80119ee:	1cfb      	adds	r3, r7, #3
 80119f0:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 80119f2:	4b07      	ldr	r3, [pc, #28]	@ (8011a10 <soundInit+0x30>)
 80119f4:	68ba      	ldr	r2, [r7, #8]
 80119f6:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 80119f8:	4b06      	ldr	r3, [pc, #24]	@ (8011a14 <soundInit+0x34>)
 80119fa:	687a      	ldr	r2, [r7, #4]
 80119fc:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 80119fe:	4b06      	ldr	r3, [pc, #24]	@ (8011a18 <soundInit+0x38>)
 8011a00:	68fa      	ldr	r2, [r7, #12]
 8011a02:	601a      	str	r2, [r3, #0]
//    DMA_Channel_IRQn = DMAChIRQn;
    return true;
 8011a04:	2301      	movs	r3, #1
}
 8011a06:	0018      	movs	r0, r3
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	b004      	add	sp, #16
 8011a0c:	bd80      	pop	{r7, pc}
 8011a0e:	46c0      	nop			@ (mov r8, r8)
 8011a10:	20001cfc 	.word	0x20001cfc
 8011a14:	20001cf8 	.word	0x20001cf8
 8011a18:	20001d00 	.word	0x20001d00

08011a1c <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 8011a20:	4b02      	ldr	r3, [pc, #8]	@ (8011a2c <clearMaximumAmplitude+0x10>)
 8011a22:	2200      	movs	r2, #0
 8011a24:	601a      	str	r2, [r3, #0]
}
 8011a26:	46c0      	nop			@ (mov r8, r8)
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}
 8011a2c:	200012bc 	.word	0x200012bc

08011a30 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 8011a34:	4b08      	ldr	r3, [pc, #32]	@ (8011a58 <startMicSettlingPeriod+0x28>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 8011a3e:	4b06      	ldr	r3, [pc, #24]	@ (8011a58 <startMicSettlingPeriod+0x28>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	0018      	movs	r0, r3
 8011a44:	f00b f8f6 	bl	801cc34 <HAL_TIM_Base_Start>
 8011a48:	1e03      	subs	r3, r0, #0
 8011a4a:	d001      	beq.n	8011a50 <startMicSettlingPeriod+0x20>
    {
        return false;
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	e000      	b.n	8011a52 <startMicSettlingPeriod+0x22>
    }
    return true;
 8011a50:	2301      	movs	r3, #1
}
 8011a52:	0018      	movs	r0, r3
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}
 8011a58:	20001cf8 	.word	0x20001cf8

08011a5c <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b082      	sub	sp, #8
 8011a60:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 8011a62:	4b0e      	ldr	r3, [pc, #56]	@ (8011a9c <micSettlingComplete+0x40>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	691b      	ldr	r3, [r3, #16]
 8011a6a:	2201      	movs	r2, #1
 8011a6c:	401a      	ands	r2, r3
 8011a6e:	1dfb      	adds	r3, r7, #7
 8011a70:	3a01      	subs	r2, #1
 8011a72:	4251      	negs	r1, r2
 8011a74:	414a      	adcs	r2, r1
 8011a76:	701a      	strb	r2, [r3, #0]
    if (complete)
 8011a78:	1dfb      	adds	r3, r7, #7
 8011a7a:	781b      	ldrb	r3, [r3, #0]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d007      	beq.n	8011a90 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 8011a80:	4b06      	ldr	r3, [pc, #24]	@ (8011a9c <micSettlingComplete+0x40>)
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	0018      	movs	r0, r3
 8011a86:	f00b f91f 	bl	801ccc8 <HAL_TIM_Base_Stop>
      DataReady = true;
 8011a8a:	4b05      	ldr	r3, [pc, #20]	@ (8011aa0 <micSettlingComplete+0x44>)
 8011a8c:	2201      	movs	r2, #1
 8011a8e:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 8011a90:	1dfb      	adds	r3, r7, #7
 8011a92:	781b      	ldrb	r3, [r3, #0]
}
 8011a94:	0018      	movs	r0, r3
 8011a96:	46bd      	mov	sp, r7
 8011a98:	b002      	add	sp, #8
 8011a9a:	bd80      	pop	{r7, pc}
 8011a9c:	20001cf8 	.word	0x20001cf8
 8011aa0:	200012b1 	.word	0x200012b1

08011aa4 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	0002      	movs	r2, r0
 8011aac:	1dfb      	adds	r3, r7, #7
 8011aae:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 8011ab0:	4b29      	ldr	r3, [pc, #164]	@ (8011b58 <enableMicrophone+0xb4>)
 8011ab2:	781b      	ldrb	r3, [r3, #0]
 8011ab4:	b2db      	uxtb	r3, r3
 8011ab6:	1dfa      	adds	r2, r7, #7
 8011ab8:	7812      	ldrb	r2, [r2, #0]
 8011aba:	429a      	cmp	r2, r3
 8011abc:	d101      	bne.n	8011ac2 <enableMicrophone+0x1e>
    {
        return true;
 8011abe:	2301      	movs	r3, #1
 8011ac0:	e045      	b.n	8011b4e <enableMicrophone+0xaa>
    }
    if (bEnable)
 8011ac2:	1dfb      	adds	r3, r7, #7
 8011ac4:	781b      	ldrb	r3, [r3, #0]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d025      	beq.n	8011b16 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 8011aca:	f7ff ffb1 	bl	8011a30 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 8011ace:	4b23      	ldr	r3, [pc, #140]	@ (8011b5c <enableMicrophone+0xb8>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	2280      	movs	r2, #128	@ 0x80
 8011ad4:	0092      	lsls	r2, r2, #2
 8011ad6:	4922      	ldr	r1, [pc, #136]	@ (8011b60 <enableMicrophone+0xbc>)
 8011ad8:	0018      	movs	r0, r3
 8011ada:	f007 fb0d 	bl	80190f8 <HAL_I2S_Receive_DMA>
 8011ade:	1e03      	subs	r3, r0, #0
 8011ae0:	d001      	beq.n	8011ae6 <enableMicrophone+0x42>
        {
            return false;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	e033      	b.n	8011b4e <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 8011ae6:	f7ff ff99 	bl	8011a1c <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 8011aea:	4b1e      	ldr	r3, [pc, #120]	@ (8011b64 <enableMicrophone+0xc0>)
 8011aec:	2200      	movs	r2, #0
 8011aee:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8011af0:	4b1d      	ldr	r3, [pc, #116]	@ (8011b68 <enableMicrophone+0xc4>)
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	b25b      	sxtb	r3, r3
 8011af6:	0018      	movs	r0, r3
 8011af8:	f7ff fe5c 	bl	80117b4 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 8011afc:	4b1b      	ldr	r3, [pc, #108]	@ (8011b6c <enableMicrophone+0xc8>)
 8011afe:	2201      	movs	r2, #1
 8011b00:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 8011b02:	4b15      	ldr	r3, [pc, #84]	@ (8011b58 <enableMicrophone+0xb4>)
 8011b04:	2201      	movs	r2, #1
 8011b06:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011b08:	4b19      	ldr	r3, [pc, #100]	@ (8011b70 <enableMicrophone+0xcc>)
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8011b0e:	4b19      	ldr	r3, [pc, #100]	@ (8011b74 <enableMicrophone+0xd0>)
 8011b10:	2200      	movs	r2, #0
 8011b12:	701a      	strb	r2, [r3, #0]
 8011b14:	e01a      	b.n	8011b4c <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8011b16:	4b14      	ldr	r3, [pc, #80]	@ (8011b68 <enableMicrophone+0xc4>)
 8011b18:	781b      	ldrb	r3, [r3, #0]
 8011b1a:	b25b      	sxtb	r3, r3
 8011b1c:	0018      	movs	r0, r3
 8011b1e:	f7ff fe63 	bl	80117e8 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 8011b22:	4b12      	ldr	r3, [pc, #72]	@ (8011b6c <enableMicrophone+0xc8>)
 8011b24:	2200      	movs	r2, #0
 8011b26:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011b28:	4b11      	ldr	r3, [pc, #68]	@ (8011b70 <enableMicrophone+0xcc>)
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8011b2e:	4b11      	ldr	r3, [pc, #68]	@ (8011b74 <enableMicrophone+0xd0>)
 8011b30:	2200      	movs	r2, #0
 8011b32:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 8011b34:	4b09      	ldr	r3, [pc, #36]	@ (8011b5c <enableMicrophone+0xb8>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	0018      	movs	r0, r3
 8011b3a:	f007 fb9f 	bl	801927c <HAL_I2S_DMAStop>
 8011b3e:	1e03      	subs	r3, r0, #0
 8011b40:	d001      	beq.n	8011b46 <enableMicrophone+0xa2>
        {
            return false;
 8011b42:	2300      	movs	r3, #0
 8011b44:	e003      	b.n	8011b4e <enableMicrophone+0xaa>
        }
        micEnabled = false;
 8011b46:	4b04      	ldr	r3, [pc, #16]	@ (8011b58 <enableMicrophone+0xb4>)
 8011b48:	2200      	movs	r2, #0
 8011b4a:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8011b4c:	2301      	movs	r3, #1
}
 8011b4e:	0018      	movs	r0, r3
 8011b50:	46bd      	mov	sp, r7
 8011b52:	b002      	add	sp, #8
 8011b54:	bd80      	pop	{r7, pc}
 8011b56:	46c0      	nop			@ (mov r8, r8)
 8011b58:	200012b2 	.word	0x200012b2
 8011b5c:	20001cfc 	.word	0x20001cfc
 8011b60:	200012f8 	.word	0x200012f8
 8011b64:	200012b8 	.word	0x200012b8
 8011b68:	20001d04 	.word	0x20001d04
 8011b6c:	200012b4 	.word	0x200012b4
 8011b70:	200012b3 	.word	0x200012b3
 8011b74:	200012b5 	.word	0x200012b5

08011b78 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8011b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8011bb0 <startSPLcalculation+0x38>)
 8011b7e:	781b      	ldrb	r3, [r3, #0]
 8011b80:	b2db      	uxtb	r3, r3
 8011b82:	2201      	movs	r2, #1
 8011b84:	4053      	eors	r3, r2
 8011b86:	b2db      	uxtb	r3, r3
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d001      	beq.n	8011b90 <startSPLcalculation+0x18>
    {
        return false;
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	e00c      	b.n	8011baa <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 8011b90:	4b08      	ldr	r3, [pc, #32]	@ (8011bb4 <startSPLcalculation+0x3c>)
 8011b92:	781b      	ldrb	r3, [r3, #0]
 8011b94:	b2db      	uxtb	r3, r3
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d001      	beq.n	8011b9e <startSPLcalculation+0x26>
    {
        return true;
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	e005      	b.n	8011baa <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8011b9e:	f000 fb65 	bl	801226c <resetSPLstate>
    SPLcalcEnabled = true;
 8011ba2:	4b04      	ldr	r3, [pc, #16]	@ (8011bb4 <startSPLcalculation+0x3c>)
 8011ba4:	2201      	movs	r2, #1
 8011ba6:	701a      	strb	r2, [r3, #0]
    return true;
 8011ba8:	2301      	movs	r3, #1
}
 8011baa:	0018      	movs	r0, r3
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}
 8011bb0:	200012b2 	.word	0x200012b2
 8011bb4:	200012b3 	.word	0x200012b3

08011bb8 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b082      	sub	sp, #8
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011bc0:	4b05      	ldr	r3, [pc, #20]	@ (8011bd8 <HAL_I2S_RxHalfCpltCallback+0x20>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	687a      	ldr	r2, [r7, #4]
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d102      	bne.n	8011bd0 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8011bca:	2000      	movs	r0, #0
 8011bcc:	f000 f81a 	bl	8011c04 <processHalfDMAbuffer>
  }
}
 8011bd0:	46c0      	nop			@ (mov r8, r8)
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	b002      	add	sp, #8
 8011bd6:	bd80      	pop	{r7, pc}
 8011bd8:	20001cfc 	.word	0x20001cfc

08011bdc <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b082      	sub	sp, #8
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011be4:	4b06      	ldr	r3, [pc, #24]	@ (8011c00 <HAL_I2S_RxCpltCallback+0x24>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	687a      	ldr	r2, [r7, #4]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d104      	bne.n	8011bf8 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8011bee:	2380      	movs	r3, #128	@ 0x80
 8011bf0:	009b      	lsls	r3, r3, #2
 8011bf2:	0018      	movs	r0, r3
 8011bf4:	f000 f806 	bl	8011c04 <processHalfDMAbuffer>
  }
}
 8011bf8:	46c0      	nop			@ (mov r8, r8)
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	b002      	add	sp, #8
 8011bfe:	bd80      	pop	{r7, pc}
 8011c00:	20001cfc 	.word	0x20001cfc

08011c04 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b082      	sub	sp, #8
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	005a      	lsls	r2, r3, #1
 8011c10:	4b15      	ldr	r3, [pc, #84]	@ (8011c68 <processHalfDMAbuffer+0x64>)
 8011c12:	18d3      	adds	r3, r2, r3
 8011c14:	4a15      	ldr	r2, [pc, #84]	@ (8011c6c <processHalfDMAbuffer+0x68>)
 8011c16:	2180      	movs	r1, #128	@ 0x80
 8011c18:	0089      	lsls	r1, r1, #2
 8011c1a:	0018      	movs	r0, r3
 8011c1c:	f000 fd37 	bl	801268e <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8011c20:	4b13      	ldr	r3, [pc, #76]	@ (8011c70 <processHalfDMAbuffer+0x6c>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	425a      	negs	r2, r3
 8011c26:	4153      	adcs	r3, r2
 8011c28:	b2da      	uxtb	r2, r3
 8011c2a:	4b11      	ldr	r3, [pc, #68]	@ (8011c70 <processHalfDMAbuffer+0x6c>)
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	2109      	movs	r1, #9
 8011c30:	4299      	cmp	r1, r3
 8011c32:	419b      	sbcs	r3, r3
 8011c34:	425b      	negs	r3, r3
 8011c36:	b2db      	uxtb	r3, r3
 8011c38:	480c      	ldr	r0, [pc, #48]	@ (8011c6c <processHalfDMAbuffer+0x68>)
 8011c3a:	2180      	movs	r1, #128	@ 0x80
 8011c3c:	f000 fb48 	bl	80122d0 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8011c40:	4b0b      	ldr	r3, [pc, #44]	@ (8011c70 <processHalfDMAbuffer+0x6c>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	2b09      	cmp	r3, #9
 8011c46:	d804      	bhi.n	8011c52 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8011c48:	4b09      	ldr	r3, [pc, #36]	@ (8011c70 <processHalfDMAbuffer+0x6c>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	1c5a      	adds	r2, r3, #1
 8011c4e:	4b08      	ldr	r3, [pc, #32]	@ (8011c70 <processHalfDMAbuffer+0x6c>)
 8011c50:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 8011c52:	4b08      	ldr	r3, [pc, #32]	@ (8011c74 <processHalfDMAbuffer+0x70>)
 8011c54:	781b      	ldrb	r3, [r3, #0]
 8011c56:	b2db      	uxtb	r3, r3
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d001      	beq.n	8011c60 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8011c5c:	f000 f828 	bl	8011cb0 <calculateSPLQ31>
    }
}
 8011c60:	46c0      	nop			@ (mov r8, r8)
 8011c62:	46bd      	mov	sp, r7
 8011c64:	b002      	add	sp, #8
 8011c66:	bd80      	pop	{r7, pc}
 8011c68:	200012f8 	.word	0x200012f8
 8011c6c:	20001af8 	.word	0x20001af8
 8011c70:	200012b8 	.word	0x200012b8
 8011c74:	200012b3 	.word	0x200012b3

08011c78 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b082      	sub	sp, #8
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011c80:	4b08      	ldr	r3, [pc, #32]	@ (8011ca4 <HAL_I2S_ErrorCallback+0x2c>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	687a      	ldr	r2, [r7, #4]
 8011c86:	429a      	cmp	r2, r3
 8011c88:	d107      	bne.n	8011c9a <HAL_I2S_ErrorCallback+0x22>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8011c8a:	4a07      	ldr	r2, [pc, #28]	@ (8011ca8 <HAL_I2S_ErrorCallback+0x30>)
 8011c8c:	233c      	movs	r3, #60	@ 0x3c
 8011c8e:	33ff      	adds	r3, #255	@ 0xff
 8011c90:	0019      	movs	r1, r3
 8011c92:	4b06      	ldr	r3, [pc, #24]	@ (8011cac <HAL_I2S_ErrorCallback+0x34>)
 8011c94:	0018      	movs	r0, r3
 8011c96:	f002 f9ff 	bl	8014098 <errorHandler>
  }
}
 8011c9a:	46c0      	nop			@ (mov r8, r8)
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	b002      	add	sp, #8
 8011ca0:	bd80      	pop	{r7, pc}
 8011ca2:	46c0      	nop			@ (mov r8, r8)
 8011ca4:	20001cfc 	.word	0x20001cfc
 8011ca8:	0802dc00 	.word	0x0802dc00
 8011cac:	0802e87c 	.word	0x0802e87c

08011cb0 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8011cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cb2:	b0b3      	sub	sp, #204	@ 0xcc
 8011cb4:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8011cb6:	4ae2      	ldr	r2, [pc, #904]	@ (8012040 <calculateSPLQ31+0x390>)
 8011cb8:	2338      	movs	r3, #56	@ 0x38
 8011cba:	2030      	movs	r0, #48	@ 0x30
 8011cbc:	181b      	adds	r3, r3, r0
 8011cbe:	19d9      	adds	r1, r3, r7
 8011cc0:	2334      	movs	r3, #52	@ 0x34
 8011cc2:	181b      	adds	r3, r3, r0
 8011cc4:	19d8      	adds	r0, r3, r7
 8011cc6:	2380      	movs	r3, #128	@ 0x80
 8011cc8:	f000 fc36 	bl	8012538 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8011ccc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	da00      	bge.n	8011cd4 <calculateSPLQ31+0x24>
 8011cd2:	3301      	adds	r3, #1
 8011cd4:	105b      	asrs	r3, r3, #1
 8011cd6:	001a      	movs	r2, r3
 8011cd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	da00      	bge.n	8011ce0 <calculateSPLQ31+0x30>
 8011cde:	3301      	adds	r3, #1
 8011ce0:	105b      	asrs	r3, r3, #1
 8011ce2:	18d3      	adds	r3, r2, r3
 8011ce4:	2188      	movs	r1, #136	@ 0x88
 8011ce6:	187a      	adds	r2, r7, r1
 8011ce8:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 8011cea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011cec:	187b      	adds	r3, r7, r1
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	1ad3      	subs	r3, r2, r3
 8011cf2:	3304      	adds	r3, #4
 8011cf4:	2284      	movs	r2, #132	@ 0x84
 8011cf6:	18b9      	adds	r1, r7, r2
 8011cf8:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 8011cfa:	18bb      	adds	r3, r7, r2
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	4ad1      	ldr	r2, [pc, #836]	@ (8012044 <calculateSPLQ31+0x394>)
 8011d00:	0019      	movs	r1, r3
 8011d02:	0010      	movs	r0, r2
 8011d04:	f000 fc58 	bl	80125b8 <getPo2factor>
 8011d08:	0003      	movs	r3, r0
 8011d0a:	2280      	movs	r2, #128	@ 0x80
 8011d0c:	18ba      	adds	r2, r7, r2
 8011d0e:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8011d10:	2300      	movs	r3, #0
 8011d12:	2284      	movs	r2, #132	@ 0x84
 8011d14:	2130      	movs	r1, #48	@ 0x30
 8011d16:	1852      	adds	r2, r2, r1
 8011d18:	19d2      	adds	r2, r2, r7
 8011d1a:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	2280      	movs	r2, #128	@ 0x80
 8011d20:	1852      	adds	r2, r2, r1
 8011d22:	19d2      	adds	r2, r2, r7
 8011d24:	6013      	str	r3, [r2, #0]
 8011d26:	e032      	b.n	8011d8e <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8011d28:	4ac5      	ldr	r2, [pc, #788]	@ (8012040 <calculateSPLQ31+0x390>)
 8011d2a:	2680      	movs	r6, #128	@ 0x80
 8011d2c:	2330      	movs	r3, #48	@ 0x30
 8011d2e:	18f1      	adds	r1, r6, r3
 8011d30:	19cb      	adds	r3, r1, r7
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	009b      	lsls	r3, r3, #2
 8011d36:	589a      	ldr	r2, [r3, r2]
 8011d38:	2188      	movs	r1, #136	@ 0x88
 8011d3a:	1879      	adds	r1, r7, r1
 8011d3c:	680b      	ldr	r3, [r1, #0]
 8011d3e:	1ad2      	subs	r2, r2, r3
 8011d40:	2180      	movs	r1, #128	@ 0x80
 8011d42:	1879      	adds	r1, r7, r1
 8011d44:	680b      	ldr	r3, [r1, #0]
 8011d46:	409a      	lsls	r2, r3
 8011d48:	0011      	movs	r1, r2
 8011d4a:	4abf      	ldr	r2, [pc, #764]	@ (8012048 <calculateSPLQ31+0x398>)
 8011d4c:	2084      	movs	r0, #132	@ 0x84
 8011d4e:	2330      	movs	r3, #48	@ 0x30
 8011d50:	18c3      	adds	r3, r0, r3
 8011d52:	19db      	adds	r3, r3, r7
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	009b      	lsls	r3, r3, #2
 8011d58:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8011d5a:	2230      	movs	r2, #48	@ 0x30
 8011d5c:	1883      	adds	r3, r0, r2
 8011d5e:	19db      	adds	r3, r3, r7
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	3301      	adds	r3, #1
 8011d64:	49b8      	ldr	r1, [pc, #736]	@ (8012048 <calculateSPLQ31+0x398>)
 8011d66:	009a      	lsls	r2, r3, #2
 8011d68:	2300      	movs	r3, #0
 8011d6a:	5053      	str	r3, [r2, r1]
        count += 2;
 8011d6c:	2230      	movs	r2, #48	@ 0x30
 8011d6e:	1883      	adds	r3, r0, r2
 8011d70:	19db      	adds	r3, r3, r7
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	3302      	adds	r3, #2
 8011d76:	0011      	movs	r1, r2
 8011d78:	1882      	adds	r2, r0, r2
 8011d7a:	19d2      	adds	r2, r2, r7
 8011d7c:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011d7e:	000a      	movs	r2, r1
 8011d80:	18b3      	adds	r3, r6, r2
 8011d82:	19db      	adds	r3, r3, r7
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	3301      	adds	r3, #1
 8011d88:	18b2      	adds	r2, r6, r2
 8011d8a:	19d2      	adds	r2, r2, r7
 8011d8c:	6013      	str	r3, [r2, #0]
 8011d8e:	2380      	movs	r3, #128	@ 0x80
 8011d90:	2630      	movs	r6, #48	@ 0x30
 8011d92:	199b      	adds	r3, r3, r6
 8011d94:	19db      	adds	r3, r3, r7
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	2b7f      	cmp	r3, #127	@ 0x7f
 8011d9a:	d9c5      	bls.n	8011d28 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8011d9c:	4bab      	ldr	r3, [pc, #684]	@ (801204c <calculateSPLQ31+0x39c>)
 8011d9e:	6818      	ldr	r0, [r3, #0]
 8011da0:	49a9      	ldr	r1, [pc, #676]	@ (8012048 <calculateSPLQ31+0x398>)
 8011da2:	2301      	movs	r3, #1
 8011da4:	2200      	movs	r2, #0
 8011da6:	f012 f90f 	bl	8023fc8 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 8011daa:	4aa9      	ldr	r2, [pc, #676]	@ (8012050 <calculateSPLQ31+0x3a0>)
 8011dac:	2338      	movs	r3, #56	@ 0x38
 8011dae:	199b      	adds	r3, r3, r6
 8011db0:	19d9      	adds	r1, r3, r7
 8011db2:	2334      	movs	r3, #52	@ 0x34
 8011db4:	199b      	adds	r3, r3, r6
 8011db6:	19d8      	adds	r0, r3, r7
 8011db8:	237e      	movs	r3, #126	@ 0x7e
 8011dba:	f000 fbbd 	bl	8012538 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 8011dbe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011dc0:	2380      	movs	r3, #128	@ 0x80
 8011dc2:	061b      	lsls	r3, r3, #24
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	d101      	bne.n	8011dcc <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8011dc8:	4b9e      	ldr	r3, [pc, #632]	@ (8012044 <calculateSPLQ31+0x394>)
 8011dca:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 8011dcc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011dce:	2380      	movs	r3, #128	@ 0x80
 8011dd0:	061b      	lsls	r3, r3, #24
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	d101      	bne.n	8011dda <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 8011dd6:	4b9b      	ldr	r3, [pc, #620]	@ (8012044 <calculateSPLQ31+0x394>)
 8011dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 8011dda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011ddc:	17da      	asrs	r2, r3, #31
 8011dde:	189b      	adds	r3, r3, r2
 8011de0:	4053      	eors	r3, r2
 8011de2:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 8011de4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011de6:	17da      	asrs	r2, r3, #31
 8011de8:	189b      	adds	r3, r3, r2
 8011dea:	4053      	eors	r3, r2
 8011dec:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 8011dee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011df0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011df2:	429a      	cmp	r2, r3
 8011df4:	dd01      	ble.n	8011dfa <calculateSPLQ31+0x14a>
    {
        max = min;
 8011df6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011df8:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 8011dfa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011dfc:	3304      	adds	r3, #4
 8011dfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 8011e00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011e02:	4a90      	ldr	r2, [pc, #576]	@ (8012044 <calculateSPLQ31+0x394>)
 8011e04:	0019      	movs	r1, r3
 8011e06:	0010      	movs	r0, r2
 8011e08:	f000 fbd6 	bl	80125b8 <getPo2factor>
 8011e0c:	0003      	movs	r3, r0
 8011e0e:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 8011e10:	2302      	movs	r3, #2
 8011e12:	22ac      	movs	r2, #172	@ 0xac
 8011e14:	18ba      	adds	r2, r7, r2
 8011e16:	6013      	str	r3, [r2, #0]
 8011e18:	e012      	b.n	8011e40 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 8011e1a:	4a8b      	ldr	r2, [pc, #556]	@ (8012048 <calculateSPLQ31+0x398>)
 8011e1c:	20ac      	movs	r0, #172	@ 0xac
 8011e1e:	183b      	adds	r3, r7, r0
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	009b      	lsls	r3, r3, #2
 8011e24:	589a      	ldr	r2, [r3, r2]
 8011e26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011e28:	409a      	lsls	r2, r3
 8011e2a:	0011      	movs	r1, r2
 8011e2c:	4a86      	ldr	r2, [pc, #536]	@ (8012048 <calculateSPLQ31+0x398>)
 8011e2e:	183b      	adds	r3, r7, r0
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	009b      	lsls	r3, r3, #2
 8011e34:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 8011e36:	183b      	adds	r3, r7, r0
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	3301      	adds	r3, #1
 8011e3c:	183a      	adds	r2, r7, r0
 8011e3e:	6013      	str	r3, [r2, #0]
 8011e40:	23ac      	movs	r3, #172	@ 0xac
 8011e42:	18fb      	adds	r3, r7, r3
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	2b7f      	cmp	r3, #127	@ 0x7f
 8011e48:	d9e7      	bls.n	8011e1a <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 8011e4a:	4b7d      	ldr	r3, [pc, #500]	@ (8012040 <calculateSPLQ31+0x390>)
 8011e4c:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 8011e4e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8011e50:	4b7d      	ldr	r3, [pc, #500]	@ (8012048 <calculateSPLQ31+0x398>)
 8011e52:	2240      	movs	r2, #64	@ 0x40
 8011e54:	0018      	movs	r0, r3
 8011e56:	f012 fe61 	bl	8024b1c <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 8011e5a:	2330      	movs	r3, #48	@ 0x30
 8011e5c:	18fb      	adds	r3, r7, r3
 8011e5e:	0018      	movs	r0, r3
 8011e60:	2330      	movs	r3, #48	@ 0x30
 8011e62:	001a      	movs	r2, r3
 8011e64:	2100      	movs	r1, #0
 8011e66:	f014 fc8b 	bl	8026780 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	21a0      	movs	r1, #160	@ 0xa0
 8011e70:	1879      	adds	r1, r7, r1
 8011e72:	600a      	str	r2, [r1, #0]
 8011e74:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011e76:	2301      	movs	r3, #1
 8011e78:	229c      	movs	r2, #156	@ 0x9c
 8011e7a:	18ba      	adds	r2, r7, r2
 8011e7c:	6013      	str	r3, [r2, #0]
 8011e7e:	e05b      	b.n	8011f38 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8011e80:	269c      	movs	r6, #156	@ 0x9c
 8011e82:	19bb      	adds	r3, r7, r6
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	009a      	lsls	r2, r3, #2
 8011e88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011e8a:	189b      	adds	r3, r3, r2
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	613b      	str	r3, [r7, #16]
 8011e90:	17db      	asrs	r3, r3, #31
 8011e92:	617b      	str	r3, [r7, #20]
 8011e94:	4b6f      	ldr	r3, [pc, #444]	@ (8012054 <calculateSPLQ31+0x3a4>)
 8011e96:	681a      	ldr	r2, [r3, #0]
 8011e98:	19bb      	adds	r3, r7, r6
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	005b      	lsls	r3, r3, #1
 8011e9e:	18d3      	adds	r3, r2, r3
 8011ea0:	881b      	ldrh	r3, [r3, #0]
 8011ea2:	60bb      	str	r3, [r7, #8]
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	60fb      	str	r3, [r7, #12]
 8011ea8:	68ba      	ldr	r2, [r7, #8]
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	6938      	ldr	r0, [r7, #16]
 8011eae:	6979      	ldr	r1, [r7, #20]
 8011eb0:	f7ee fb86 	bl	80005c0 <__aeabi_lmul>
 8011eb4:	0002      	movs	r2, r0
 8011eb6:	000b      	movs	r3, r1
 8011eb8:	0010      	movs	r0, r2
 8011eba:	0019      	movs	r1, r3
 8011ebc:	23a0      	movs	r3, #160	@ 0xa0
 8011ebe:	18fa      	adds	r2, r7, r3
 8011ec0:	6853      	ldr	r3, [r2, #4]
 8011ec2:	6812      	ldr	r2, [r2, #0]
 8011ec4:	1812      	adds	r2, r2, r0
 8011ec6:	414b      	adcs	r3, r1
 8011ec8:	21a0      	movs	r1, #160	@ 0xa0
 8011eca:	1879      	adds	r1, r7, r1
 8011ecc:	600a      	str	r2, [r1, #0]
 8011ece:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 8011ed0:	4b61      	ldr	r3, [pc, #388]	@ (8012058 <calculateSPLQ31+0x3a8>)
 8011ed2:	681a      	ldr	r2, [r3, #0]
 8011ed4:	19bb      	adds	r3, r7, r6
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	18d3      	adds	r3, r2, r3
 8011eda:	781b      	ldrb	r3, [r3, #0]
 8011edc:	2b06      	cmp	r3, #6
 8011ede:	d025      	beq.n	8011f2c <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 8011ee0:	4b5d      	ldr	r3, [pc, #372]	@ (8012058 <calculateSPLQ31+0x3a8>)
 8011ee2:	681a      	ldr	r2, [r3, #0]
 8011ee4:	19bb      	adds	r3, r7, r6
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	18d3      	adds	r3, r2, r3
 8011eea:	781b      	ldrb	r3, [r3, #0]
 8011eec:	2230      	movs	r2, #48	@ 0x30
 8011eee:	18ba      	adds	r2, r7, r2
 8011ef0:	00db      	lsls	r3, r3, #3
 8011ef2:	18d3      	adds	r3, r2, r3
 8011ef4:	6818      	ldr	r0, [r3, #0]
 8011ef6:	6859      	ldr	r1, [r3, #4]
 8011ef8:	19bb      	adds	r3, r7, r6
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	009a      	lsls	r2, r3, #2
 8011efe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011f00:	189b      	adds	r3, r3, r2
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	603b      	str	r3, [r7, #0]
 8011f06:	17db      	asrs	r3, r3, #31
 8011f08:	607b      	str	r3, [r7, #4]
 8011f0a:	4b53      	ldr	r3, [pc, #332]	@ (8012058 <calculateSPLQ31+0x3a8>)
 8011f0c:	681a      	ldr	r2, [r3, #0]
 8011f0e:	19be      	adds	r6, r7, r6
 8011f10:	6833      	ldr	r3, [r6, #0]
 8011f12:	18d3      	adds	r3, r2, r3
 8011f14:	781b      	ldrb	r3, [r3, #0]
 8011f16:	001e      	movs	r6, r3
 8011f18:	683a      	ldr	r2, [r7, #0]
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	1880      	adds	r0, r0, r2
 8011f1e:	4159      	adcs	r1, r3
 8011f20:	2330      	movs	r3, #48	@ 0x30
 8011f22:	18fa      	adds	r2, r7, r3
 8011f24:	00f3      	lsls	r3, r6, #3
 8011f26:	18d3      	adds	r3, r2, r3
 8011f28:	6018      	str	r0, [r3, #0]
 8011f2a:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011f2c:	229c      	movs	r2, #156	@ 0x9c
 8011f2e:	18bb      	adds	r3, r7, r2
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	3301      	adds	r3, #1
 8011f34:	18ba      	adds	r2, r7, r2
 8011f36:	6013      	str	r3, [r2, #0]
 8011f38:	239c      	movs	r3, #156	@ 0x9c
 8011f3a:	18fb      	adds	r3, r7, r3
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	2b3f      	cmp	r3, #63	@ 0x3f
 8011f40:	d99e      	bls.n	8011e80 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 8011f42:	2380      	movs	r3, #128	@ 0x80
 8011f44:	18fb      	adds	r3, r7, r3
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	005b      	lsls	r3, r3, #1
 8011f4a:	001a      	movs	r2, r3
 8011f4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011f4e:	005b      	lsls	r3, r3, #1
 8011f50:	18d3      	adds	r3, r2, r3
 8011f52:	3b22      	subs	r3, #34	@ 0x22
 8011f54:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 8011f56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011f58:	17da      	asrs	r2, r3, #31
 8011f5a:	189b      	adds	r3, r3, r2
 8011f5c:	4053      	eors	r3, r2
 8011f5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 8011f60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	da62      	bge.n	801202c <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 8011f66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f68:	3b20      	subs	r3, #32
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	db05      	blt.n	8011f7a <calculateSPLQ31+0x2ca>
 8011f6e:	22a0      	movs	r2, #160	@ 0xa0
 8011f70:	18ba      	adds	r2, r7, r2
 8011f72:	6812      	ldr	r2, [r2, #0]
 8011f74:	409a      	lsls	r2, r3
 8011f76:	627a      	str	r2, [r7, #36]	@ 0x24
 8011f78:	e010      	b.n	8011f9c <calculateSPLQ31+0x2ec>
 8011f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f7c:	2220      	movs	r2, #32
 8011f7e:	1ad3      	subs	r3, r2, r3
 8011f80:	22a0      	movs	r2, #160	@ 0xa0
 8011f82:	18ba      	adds	r2, r7, r2
 8011f84:	6812      	ldr	r2, [r2, #0]
 8011f86:	40da      	lsrs	r2, r3
 8011f88:	0013      	movs	r3, r2
 8011f8a:	22a4      	movs	r2, #164	@ 0xa4
 8011f8c:	18ba      	adds	r2, r7, r2
 8011f8e:	6811      	ldr	r1, [r2, #0]
 8011f90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011f92:	4091      	lsls	r1, r2
 8011f94:	6279      	str	r1, [r7, #36]	@ 0x24
 8011f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f98:	431a      	orrs	r2, r3
 8011f9a:	627a      	str	r2, [r7, #36]	@ 0x24
 8011f9c:	21a0      	movs	r1, #160	@ 0xa0
 8011f9e:	187b      	adds	r3, r7, r1
 8011fa0:	681a      	ldr	r2, [r3, #0]
 8011fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011fa4:	409a      	lsls	r2, r3
 8011fa6:	623a      	str	r2, [r7, #32]
 8011fa8:	6a3b      	ldr	r3, [r7, #32]
 8011faa:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8011fac:	187a      	adds	r2, r7, r1
 8011fae:	6013      	str	r3, [r2, #0]
 8011fb0:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	2298      	movs	r2, #152	@ 0x98
 8011fb6:	18ba      	adds	r2, r7, r2
 8011fb8:	6013      	str	r3, [r2, #0]
 8011fba:	e031      	b.n	8012020 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 8011fbc:	2330      	movs	r3, #48	@ 0x30
 8011fbe:	18fa      	adds	r2, r7, r3
 8011fc0:	2398      	movs	r3, #152	@ 0x98
 8011fc2:	18fb      	adds	r3, r7, r3
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	00db      	lsls	r3, r3, #3
 8011fc8:	18d3      	adds	r3, r2, r3
 8011fca:	681a      	ldr	r2, [r3, #0]
 8011fcc:	685b      	ldr	r3, [r3, #4]
 8011fce:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011fd0:	3920      	subs	r1, #32
 8011fd2:	2900      	cmp	r1, #0
 8011fd4:	db03      	blt.n	8011fde <calculateSPLQ31+0x32e>
 8011fd6:	0010      	movs	r0, r2
 8011fd8:	4088      	lsls	r0, r1
 8011fda:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011fdc:	e00c      	b.n	8011ff8 <calculateSPLQ31+0x348>
 8011fde:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011fe0:	2020      	movs	r0, #32
 8011fe2:	1a41      	subs	r1, r0, r1
 8011fe4:	0010      	movs	r0, r2
 8011fe6:	40c8      	lsrs	r0, r1
 8011fe8:	0001      	movs	r1, r0
 8011fea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011fec:	001c      	movs	r4, r3
 8011fee:	4084      	lsls	r4, r0
 8011ff0:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8011ff2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011ff4:	4308      	orrs	r0, r1
 8011ff6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011ff8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011ffa:	0013      	movs	r3, r2
 8011ffc:	408b      	lsls	r3, r1
 8011ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012000:	2330      	movs	r3, #48	@ 0x30
 8012002:	18fa      	adds	r2, r7, r3
 8012004:	2098      	movs	r0, #152	@ 0x98
 8012006:	183b      	adds	r3, r7, r0
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	00db      	lsls	r3, r3, #3
 801200c:	18d3      	adds	r3, r2, r3
 801200e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012010:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012012:	6019      	str	r1, [r3, #0]
 8012014:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8012016:	183b      	adds	r3, r7, r0
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	3301      	adds	r3, #1
 801201c:	183a      	adds	r2, r7, r0
 801201e:	6013      	str	r3, [r2, #0]
 8012020:	2398      	movs	r3, #152	@ 0x98
 8012022:	18fb      	adds	r3, r7, r3
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	2b05      	cmp	r3, #5
 8012028:	d9c8      	bls.n	8011fbc <calculateSPLQ31+0x30c>
 801202a:	e06b      	b.n	8012104 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 801202c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801202e:	3b20      	subs	r3, #32
 8012030:	2b00      	cmp	r3, #0
 8012032:	db13      	blt.n	801205c <calculateSPLQ31+0x3ac>
 8012034:	22a4      	movs	r2, #164	@ 0xa4
 8012036:	18ba      	adds	r2, r7, r2
 8012038:	6812      	ldr	r2, [r2, #0]
 801203a:	40da      	lsrs	r2, r3
 801203c:	61ba      	str	r2, [r7, #24]
 801203e:	e01e      	b.n	801207e <calculateSPLQ31+0x3ce>
 8012040:	20001af8 	.word	0x20001af8
 8012044:	7fffffff 	.word	0x7fffffff
 8012048:	20001d44 	.word	0x20001d44
 801204c:	200000d4 	.word	0x200000d4
 8012050:	20001d4c 	.word	0x20001d4c
 8012054:	200000d8 	.word	0x200000d8
 8012058:	200000e4 	.word	0x200000e4
 801205c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801205e:	2220      	movs	r2, #32
 8012060:	1ad3      	subs	r3, r2, r3
 8012062:	22a4      	movs	r2, #164	@ 0xa4
 8012064:	18ba      	adds	r2, r7, r2
 8012066:	6812      	ldr	r2, [r2, #0]
 8012068:	409a      	lsls	r2, r3
 801206a:	0013      	movs	r3, r2
 801206c:	22a0      	movs	r2, #160	@ 0xa0
 801206e:	18ba      	adds	r2, r7, r2
 8012070:	6811      	ldr	r1, [r2, #0]
 8012072:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012074:	40d1      	lsrs	r1, r2
 8012076:	61b9      	str	r1, [r7, #24]
 8012078:	69ba      	ldr	r2, [r7, #24]
 801207a:	431a      	orrs	r2, r3
 801207c:	61ba      	str	r2, [r7, #24]
 801207e:	23a4      	movs	r3, #164	@ 0xa4
 8012080:	18fb      	adds	r3, r7, r3
 8012082:	681a      	ldr	r2, [r3, #0]
 8012084:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012086:	40da      	lsrs	r2, r3
 8012088:	61fa      	str	r2, [r7, #28]
 801208a:	69ba      	ldr	r2, [r7, #24]
 801208c:	69fb      	ldr	r3, [r7, #28]
 801208e:	21a0      	movs	r1, #160	@ 0xa0
 8012090:	1879      	adds	r1, r7, r1
 8012092:	600a      	str	r2, [r1, #0]
 8012094:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8012096:	2300      	movs	r3, #0
 8012098:	2294      	movs	r2, #148	@ 0x94
 801209a:	18ba      	adds	r2, r7, r2
 801209c:	6013      	str	r3, [r2, #0]
 801209e:	e02c      	b.n	80120fa <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 80120a0:	2330      	movs	r3, #48	@ 0x30
 80120a2:	18fa      	adds	r2, r7, r3
 80120a4:	2394      	movs	r3, #148	@ 0x94
 80120a6:	18fb      	adds	r3, r7, r3
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	00db      	lsls	r3, r3, #3
 80120ac:	18d3      	adds	r3, r2, r3
 80120ae:	681a      	ldr	r2, [r3, #0]
 80120b0:	685b      	ldr	r3, [r3, #4]
 80120b2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80120b4:	3920      	subs	r1, #32
 80120b6:	2900      	cmp	r1, #0
 80120b8:	db03      	blt.n	80120c2 <calculateSPLQ31+0x412>
 80120ba:	0018      	movs	r0, r3
 80120bc:	40c8      	lsrs	r0, r1
 80120be:	0004      	movs	r4, r0
 80120c0:	e00a      	b.n	80120d8 <calculateSPLQ31+0x428>
 80120c2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80120c4:	2020      	movs	r0, #32
 80120c6:	1a41      	subs	r1, r0, r1
 80120c8:	0018      	movs	r0, r3
 80120ca:	4088      	lsls	r0, r1
 80120cc:	0001      	movs	r1, r0
 80120ce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80120d0:	0016      	movs	r6, r2
 80120d2:	40c6      	lsrs	r6, r0
 80120d4:	0034      	movs	r4, r6
 80120d6:	430c      	orrs	r4, r1
 80120d8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80120da:	40cb      	lsrs	r3, r1
 80120dc:	001d      	movs	r5, r3
 80120de:	2330      	movs	r3, #48	@ 0x30
 80120e0:	18fa      	adds	r2, r7, r3
 80120e2:	2194      	movs	r1, #148	@ 0x94
 80120e4:	187b      	adds	r3, r7, r1
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	00db      	lsls	r3, r3, #3
 80120ea:	18d3      	adds	r3, r2, r3
 80120ec:	601c      	str	r4, [r3, #0]
 80120ee:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80120f0:	187b      	adds	r3, r7, r1
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	3301      	adds	r3, #1
 80120f6:	187a      	adds	r2, r7, r1
 80120f8:	6013      	str	r3, [r2, #0]
 80120fa:	2394      	movs	r3, #148	@ 0x94
 80120fc:	18fb      	adds	r3, r7, r3
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	2b05      	cmp	r3, #5
 8012102:	d9cd      	bls.n	80120a0 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 8012104:	230f      	movs	r3, #15
 8012106:	425d      	negs	r5, r3
 8012108:	2305      	movs	r3, #5
 801210a:	425e      	negs	r6, r3
 801210c:	4b4a      	ldr	r3, [pc, #296]	@ (8012238 <calculateSPLQ31+0x588>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	681a      	ldr	r2, [r3, #0]
 8012112:	4b4a      	ldr	r3, [pc, #296]	@ (801223c <calculateSPLQ31+0x58c>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	21a0      	movs	r1, #160	@ 0xa0
 801211a:	1879      	adds	r1, r7, r1
 801211c:	6808      	ldr	r0, [r1, #0]
 801211e:	6849      	ldr	r1, [r1, #4]
 8012120:	4c47      	ldr	r4, [pc, #284]	@ (8012240 <calculateSPLQ31+0x590>)
 8012122:	9403      	str	r4, [sp, #12]
 8012124:	4c47      	ldr	r4, [pc, #284]	@ (8012244 <calculateSPLQ31+0x594>)
 8012126:	9402      	str	r4, [sp, #8]
 8012128:	9301      	str	r3, [sp, #4]
 801212a:	9200      	str	r2, [sp, #0]
 801212c:	0033      	movs	r3, r6
 801212e:	002a      	movs	r2, r5
 8012130:	f000 fa86 	bl	8012640 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012134:	2300      	movs	r3, #0
 8012136:	2290      	movs	r2, #144	@ 0x90
 8012138:	18ba      	adds	r2, r7, r2
 801213a:	6013      	str	r3, [r2, #0]
 801213c:	e026      	b.n	801218c <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 801213e:	2330      	movs	r3, #48	@ 0x30
 8012140:	18fa      	adds	r2, r7, r3
 8012142:	2490      	movs	r4, #144	@ 0x90
 8012144:	193b      	adds	r3, r7, r4
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	00db      	lsls	r3, r3, #3
 801214a:	18d3      	adds	r3, r2, r3
 801214c:	6818      	ldr	r0, [r3, #0]
 801214e:	6859      	ldr	r1, [r3, #4]
 8012150:	230f      	movs	r3, #15
 8012152:	425d      	negs	r5, r3
 8012154:	2305      	movs	r3, #5
 8012156:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 8012158:	193b      	adds	r3, r7, r4
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	009a      	lsls	r2, r3, #2
 801215e:	4b3a      	ldr	r3, [pc, #232]	@ (8012248 <calculateSPLQ31+0x598>)
 8012160:	18d3      	adds	r3, r2, r3
 8012162:	193a      	adds	r2, r7, r4
 8012164:	6812      	ldr	r2, [r2, #0]
 8012166:	0094      	lsls	r4, r2, #2
 8012168:	4a38      	ldr	r2, [pc, #224]	@ (801224c <calculateSPLQ31+0x59c>)
 801216a:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 801216c:	9203      	str	r2, [sp, #12]
 801216e:	9302      	str	r3, [sp, #8]
 8012170:	2300      	movs	r3, #0
 8012172:	9301      	str	r3, [sp, #4]
 8012174:	2300      	movs	r3, #0
 8012176:	9300      	str	r3, [sp, #0]
 8012178:	0033      	movs	r3, r6
 801217a:	002a      	movs	r2, r5
 801217c:	f000 fa60 	bl	8012640 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012180:	2490      	movs	r4, #144	@ 0x90
 8012182:	193b      	adds	r3, r7, r4
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	3301      	adds	r3, #1
 8012188:	193a      	adds	r2, r7, r4
 801218a:	6013      	str	r3, [r2, #0]
 801218c:	2390      	movs	r3, #144	@ 0x90
 801218e:	18fb      	adds	r3, r7, r3
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	2b05      	cmp	r3, #5
 8012194:	d9d3      	bls.n	801213e <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 8012196:	4b2b      	ldr	r3, [pc, #172]	@ (8012244 <calculateSPLQ31+0x594>)
 8012198:	681a      	ldr	r2, [r3, #0]
 801219a:	4b2d      	ldr	r3, [pc, #180]	@ (8012250 <calculateSPLQ31+0x5a0>)
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	18d2      	adds	r2, r2, r3
 80121a0:	4b2b      	ldr	r3, [pc, #172]	@ (8012250 <calculateSPLQ31+0x5a0>)
 80121a2:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 80121a4:	4b26      	ldr	r3, [pc, #152]	@ (8012240 <calculateSPLQ31+0x590>)
 80121a6:	681a      	ldr	r2, [r3, #0]
 80121a8:	4b2a      	ldr	r3, [pc, #168]	@ (8012254 <calculateSPLQ31+0x5a4>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	18d2      	adds	r2, r2, r3
 80121ae:	4b29      	ldr	r3, [pc, #164]	@ (8012254 <calculateSPLQ31+0x5a4>)
 80121b0:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80121b2:	2300      	movs	r3, #0
 80121b4:	228c      	movs	r2, #140	@ 0x8c
 80121b6:	18ba      	adds	r2, r7, r2
 80121b8:	6013      	str	r3, [r2, #0]
 80121ba:	e025      	b.n	8012208 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 80121bc:	4b22      	ldr	r3, [pc, #136]	@ (8012248 <calculateSPLQ31+0x598>)
 80121be:	208c      	movs	r0, #140	@ 0x8c
 80121c0:	183a      	adds	r2, r7, r0
 80121c2:	6812      	ldr	r2, [r2, #0]
 80121c4:	0092      	lsls	r2, r2, #2
 80121c6:	58d2      	ldr	r2, [r2, r3]
 80121c8:	4b23      	ldr	r3, [pc, #140]	@ (8012258 <calculateSPLQ31+0x5a8>)
 80121ca:	1839      	adds	r1, r7, r0
 80121cc:	6809      	ldr	r1, [r1, #0]
 80121ce:	0089      	lsls	r1, r1, #2
 80121d0:	58cb      	ldr	r3, [r1, r3]
 80121d2:	18d1      	adds	r1, r2, r3
 80121d4:	4b20      	ldr	r3, [pc, #128]	@ (8012258 <calculateSPLQ31+0x5a8>)
 80121d6:	183a      	adds	r2, r7, r0
 80121d8:	6812      	ldr	r2, [r2, #0]
 80121da:	0092      	lsls	r2, r2, #2
 80121dc:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 80121de:	4b1b      	ldr	r3, [pc, #108]	@ (801224c <calculateSPLQ31+0x59c>)
 80121e0:	183a      	adds	r2, r7, r0
 80121e2:	6812      	ldr	r2, [r2, #0]
 80121e4:	0092      	lsls	r2, r2, #2
 80121e6:	58d2      	ldr	r2, [r2, r3]
 80121e8:	4b1c      	ldr	r3, [pc, #112]	@ (801225c <calculateSPLQ31+0x5ac>)
 80121ea:	1839      	adds	r1, r7, r0
 80121ec:	6809      	ldr	r1, [r1, #0]
 80121ee:	0089      	lsls	r1, r1, #2
 80121f0:	58cb      	ldr	r3, [r1, r3]
 80121f2:	18d1      	adds	r1, r2, r3
 80121f4:	4b19      	ldr	r3, [pc, #100]	@ (801225c <calculateSPLQ31+0x5ac>)
 80121f6:	183a      	adds	r2, r7, r0
 80121f8:	6812      	ldr	r2, [r2, #0]
 80121fa:	0092      	lsls	r2, r2, #2
 80121fc:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80121fe:	183b      	adds	r3, r7, r0
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	3301      	adds	r3, #1
 8012204:	183a      	adds	r2, r7, r0
 8012206:	6013      	str	r3, [r2, #0]
 8012208:	238c      	movs	r3, #140	@ 0x8c
 801220a:	18fb      	adds	r3, r7, r3
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	2b05      	cmp	r3, #5
 8012210:	d9d4      	bls.n	80121bc <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 8012212:	4b13      	ldr	r3, [pc, #76]	@ (8012260 <calculateSPLQ31+0x5b0>)
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	1c5a      	adds	r2, r3, #1
 8012218:	4b11      	ldr	r3, [pc, #68]	@ (8012260 <calculateSPLQ31+0x5b0>)
 801221a:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 801221c:	4b10      	ldr	r3, [pc, #64]	@ (8012260 <calculateSPLQ31+0x5b0>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	2b0f      	cmp	r3, #15
 8012222:	d905      	bls.n	8012230 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 8012224:	4b0f      	ldr	r3, [pc, #60]	@ (8012264 <calculateSPLQ31+0x5b4>)
 8012226:	2201      	movs	r2, #1
 8012228:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 801222a:	4b0f      	ldr	r3, [pc, #60]	@ (8012268 <calculateSPLQ31+0x5b8>)
 801222c:	2200      	movs	r2, #0
 801222e:	701a      	strb	r2, [r3, #0]
    }
}
 8012230:	46c0      	nop			@ (mov r8, r8)
 8012232:	46bd      	mov	sp, r7
 8012234:	b02f      	add	sp, #188	@ 0xbc
 8012236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012238:	200000dc 	.word	0x200000dc
 801223c:	200000e0 	.word	0x200000e0
 8012240:	200012c4 	.word	0x200012c4
 8012244:	200012c0 	.word	0x200012c0
 8012248:	200012c8 	.word	0x200012c8
 801224c:	200012e0 	.word	0x200012e0
 8012250:	20001d08 	.word	0x20001d08
 8012254:	20001d0c 	.word	0x20001d0c
 8012258:	20001d10 	.word	0x20001d10
 801225c:	20001d28 	.word	0x20001d28
 8012260:	20001d40 	.word	0x20001d40
 8012264:	200012b5 	.word	0x200012b5
 8012268:	200012b3 	.word	0x200012b3

0801226c <resetSPLstate>:

static void resetSPLstate(void)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b082      	sub	sp, #8
 8012270:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 8012272:	4b11      	ldr	r3, [pc, #68]	@ (80122b8 <resetSPLstate+0x4c>)
 8012274:	2200      	movs	r2, #0
 8012276:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 8012278:	4b10      	ldr	r3, [pc, #64]	@ (80122bc <resetSPLstate+0x50>)
 801227a:	2200      	movs	r2, #0
 801227c:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 801227e:	4b10      	ldr	r3, [pc, #64]	@ (80122c0 <resetSPLstate+0x54>)
 8012280:	2200      	movs	r2, #0
 8012282:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012284:	2300      	movs	r3, #0
 8012286:	607b      	str	r3, [r7, #4]
 8012288:	e00c      	b.n	80122a4 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 801228a:	4b0e      	ldr	r3, [pc, #56]	@ (80122c4 <resetSPLstate+0x58>)
 801228c:	687a      	ldr	r2, [r7, #4]
 801228e:	0092      	lsls	r2, r2, #2
 8012290:	2100      	movs	r1, #0
 8012292:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 8012294:	4b0c      	ldr	r3, [pc, #48]	@ (80122c8 <resetSPLstate+0x5c>)
 8012296:	687a      	ldr	r2, [r7, #4]
 8012298:	0092      	lsls	r2, r2, #2
 801229a:	2100      	movs	r1, #0
 801229c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	3301      	adds	r3, #1
 80122a2:	607b      	str	r3, [r7, #4]
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	2b05      	cmp	r3, #5
 80122a8:	d9ef      	bls.n	801228a <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 80122aa:	4b08      	ldr	r3, [pc, #32]	@ (80122cc <resetSPLstate+0x60>)
 80122ac:	2200      	movs	r2, #0
 80122ae:	701a      	strb	r2, [r3, #0]
}
 80122b0:	46c0      	nop			@ (mov r8, r8)
 80122b2:	46bd      	mov	sp, r7
 80122b4:	b002      	add	sp, #8
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	20001d08 	.word	0x20001d08
 80122bc:	20001d0c 	.word	0x20001d0c
 80122c0:	20001d40 	.word	0x20001d40
 80122c4:	20001d10 	.word	0x20001d10
 80122c8:	20001d28 	.word	0x20001d28
 80122cc:	200012b5 	.word	0x200012b5

080122d0 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 80122d0:	b5b0      	push	{r4, r5, r7, lr}
 80122d2:	b090      	sub	sp, #64	@ 0x40
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	60f8      	str	r0, [r7, #12]
 80122d8:	60b9      	str	r1, [r7, #8]
 80122da:	0019      	movs	r1, r3
 80122dc:	1dfb      	adds	r3, r7, #7
 80122de:	701a      	strb	r2, [r3, #0]
 80122e0:	1dbb      	adds	r3, r7, #6
 80122e2:	1c0a      	adds	r2, r1, #0
 80122e4:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 80122e6:	1dfb      	adds	r3, r7, #7
 80122e8:	781b      	ldrb	r3, [r3, #0]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d005      	beq.n	80122fa <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 80122ee:	4b3b      	ldr	r3, [pc, #236]	@ (80123dc <getFilteredMaxAmplitudeQ31+0x10c>)
 80122f0:	2200      	movs	r2, #0
 80122f2:	601a      	str	r2, [r3, #0]
        lastData = 0;
 80122f4:	4b3a      	ldr	r3, [pc, #232]	@ (80123e0 <getFilteredMaxAmplitudeQ31+0x110>)
 80122f6:	2200      	movs	r2, #0
 80122f8:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 80122fa:	2300      	movs	r3, #0
 80122fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 80122fe:	2300      	movs	r3, #0
 8012300:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 8012302:	2305      	movs	r3, #5
 8012304:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 8012306:	2300      	movs	r3, #0
 8012308:	637b      	str	r3, [r7, #52]	@ 0x34
 801230a:	e040      	b.n	801238e <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 801230c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801230e:	009b      	lsls	r3, r3, #2
 8012310:	68fa      	ldr	r2, [r7, #12]
 8012312:	18d3      	adds	r3, r2, r3
 8012314:	681a      	ldr	r2, [r3, #0]
 8012316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012318:	409a      	lsls	r2, r3
 801231a:	0013      	movs	r3, r2
 801231c:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 801231e:	4b30      	ldr	r3, [pc, #192]	@ (80123e0 <getFilteredMaxAmplitudeQ31+0x110>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	425a      	negs	r2, r3
 8012324:	4b2e      	ldr	r3, [pc, #184]	@ (80123e0 <getFilteredMaxAmplitudeQ31+0x110>)
 8012326:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 8012328:	2418      	movs	r4, #24
 801232a:	193a      	adds	r2, r7, r4
 801232c:	492c      	ldr	r1, [pc, #176]	@ (80123e0 <getFilteredMaxAmplitudeQ31+0x110>)
 801232e:	231c      	movs	r3, #28
 8012330:	18f8      	adds	r0, r7, r3
 8012332:	2301      	movs	r3, #1
 8012334:	f012 fc4a 	bl	8024bcc <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 8012338:	2514      	movs	r5, #20
 801233a:	197a      	adds	r2, r7, r5
 801233c:	1939      	adds	r1, r7, r4
 801233e:	4829      	ldr	r0, [pc, #164]	@ (80123e4 <getFilteredMaxAmplitudeQ31+0x114>)
 8012340:	2301      	movs	r3, #1
 8012342:	f012 fc11 	bl	8024b68 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 8012346:	2410      	movs	r4, #16
 8012348:	193a      	adds	r2, r7, r4
 801234a:	4924      	ldr	r1, [pc, #144]	@ (80123dc <getFilteredMaxAmplitudeQ31+0x10c>)
 801234c:	4826      	ldr	r0, [pc, #152]	@ (80123e8 <getFilteredMaxAmplitudeQ31+0x118>)
 801234e:	2301      	movs	r3, #1
 8012350:	f012 fc0a 	bl	8024b68 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 8012354:	4a21      	ldr	r2, [pc, #132]	@ (80123dc <getFilteredMaxAmplitudeQ31+0x10c>)
 8012356:	1939      	adds	r1, r7, r4
 8012358:	1978      	adds	r0, r7, r5
 801235a:	2301      	movs	r3, #1
 801235c:	f012 fc36 	bl	8024bcc <arm_add_q31>

        lastData = fx;
 8012360:	69fa      	ldr	r2, [r7, #28]
 8012362:	4b1f      	ldr	r3, [pc, #124]	@ (80123e0 <getFilteredMaxAmplitudeQ31+0x110>)
 8012364:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 8012366:	4b1d      	ldr	r3, [pc, #116]	@ (80123dc <getFilteredMaxAmplitudeQ31+0x10c>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801236c:	429a      	cmp	r2, r3
 801236e:	da03      	bge.n	8012378 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 8012370:	4b1a      	ldr	r3, [pc, #104]	@ (80123dc <getFilteredMaxAmplitudeQ31+0x10c>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012376:	e007      	b.n	8012388 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 8012378:	4b18      	ldr	r3, [pc, #96]	@ (80123dc <getFilteredMaxAmplitudeQ31+0x10c>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801237e:	429a      	cmp	r2, r3
 8012380:	dd02      	ble.n	8012388 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 8012382:	4b16      	ldr	r3, [pc, #88]	@ (80123dc <getFilteredMaxAmplitudeQ31+0x10c>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 8012388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801238a:	3301      	adds	r3, #1
 801238c:	637b      	str	r3, [r7, #52]	@ 0x34
 801238e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012390:	68bb      	ldr	r3, [r7, #8]
 8012392:	429a      	cmp	r2, r3
 8012394:	d3ba      	bcc.n	801230c <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 8012396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012398:	17da      	asrs	r2, r3, #31
 801239a:	189b      	adds	r3, r3, r2
 801239c:	4053      	eors	r3, r2
 801239e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 80123a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80123a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 80123a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80123a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123a8:	4293      	cmp	r3, r2
 80123aa:	d200      	bcs.n	80123ae <getFilteredMaxAmplitudeQ31+0xde>
 80123ac:	0013      	movs	r3, r2
 80123ae:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 80123b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80123b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123b4:	40da      	lsrs	r2, r3
 80123b6:	0013      	movs	r3, r2
 80123b8:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 80123ba:	1dbb      	adds	r3, r7, #6
 80123bc:	781b      	ldrb	r3, [r3, #0]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d007      	beq.n	80123d2 <getFilteredMaxAmplitudeQ31+0x102>
 80123c2:	4b0a      	ldr	r3, [pc, #40]	@ (80123ec <getFilteredMaxAmplitudeQ31+0x11c>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	6a3a      	ldr	r2, [r7, #32]
 80123c8:	429a      	cmp	r2, r3
 80123ca:	d902      	bls.n	80123d2 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 80123cc:	4b07      	ldr	r3, [pc, #28]	@ (80123ec <getFilteredMaxAmplitudeQ31+0x11c>)
 80123ce:	6a3a      	ldr	r2, [r7, #32]
 80123d0:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 80123d2:	6a3b      	ldr	r3, [r7, #32]
}
 80123d4:	0018      	movs	r0, r3
 80123d6:	46bd      	mov	sp, r7
 80123d8:	b010      	add	sp, #64	@ 0x40
 80123da:	bdb0      	pop	{r4, r5, r7, pc}
 80123dc:	20002144 	.word	0x20002144
 80123e0:	20002148 	.word	0x20002148
 80123e4:	0802e874 	.word	0x0802e874
 80123e8:	0802e878 	.word	0x0802e878
 80123ec:	200012bc 	.word	0x200012bc

080123f0 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b086      	sub	sp, #24
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	60f8      	str	r0, [r7, #12]
 80123f8:	60b9      	str	r1, [r7, #8]
 80123fa:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 80123fc:	4913      	ldr	r1, [pc, #76]	@ (801244c <floatToIntAndFrac2dp+0x5c>)
 80123fe:	68f8      	ldr	r0, [r7, #12]
 8012400:	f7ee fe1e 	bl	8001040 <__aeabi_fmul>
 8012404:	1c03      	adds	r3, r0, #0
 8012406:	1c18      	adds	r0, r3, #0
 8012408:	f017 f8b8 	bl	802957c <roundf>
 801240c:	1c03      	adds	r3, r0, #0
 801240e:	1c18      	adds	r0, r3, #0
 8012410:	f7ee f904 	bl	800061c <__aeabi_f2uiz>
 8012414:	0003      	movs	r3, r0
 8012416:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 8012418:	697b      	ldr	r3, [r7, #20]
 801241a:	2164      	movs	r1, #100	@ 0x64
 801241c:	0018      	movs	r0, r3
 801241e:	f7ed fec1 	bl	80001a4 <__udivsi3>
 8012422:	0003      	movs	r3, r0
 8012424:	001a      	movs	r2, r3
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 801242a:	697b      	ldr	r3, [r7, #20]
 801242c:	b2da      	uxtb	r2, r3
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	b2db      	uxtb	r3, r3
 8012434:	2164      	movs	r1, #100	@ 0x64
 8012436:	434b      	muls	r3, r1
 8012438:	b2db      	uxtb	r3, r3
 801243a:	1ad3      	subs	r3, r2, r3
 801243c:	b2da      	uxtb	r2, r3
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	701a      	strb	r2, [r3, #0]
}
 8012442:	46c0      	nop			@ (mov r8, r8)
 8012444:	46bd      	mov	sp, r7
 8012446:	b006      	add	sp, #24
 8012448:	bd80      	pop	{r7, pc}
 801244a:	46c0      	nop			@ (mov r8, r8)
 801244c:	42c80000 	.word	0x42c80000

08012450 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b086      	sub	sp, #24
 8012454:	af00      	add	r7, sp, #0
 8012456:	60f8      	str	r0, [r7, #12]
 8012458:	60b9      	str	r1, [r7, #8]
 801245a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 801245c:	4914      	ldr	r1, [pc, #80]	@ (80124b0 <floatToIntAndFrac1dp+0x60>)
 801245e:	68f8      	ldr	r0, [r7, #12]
 8012460:	f7ee fdee 	bl	8001040 <__aeabi_fmul>
 8012464:	1c03      	adds	r3, r0, #0
 8012466:	1c18      	adds	r0, r3, #0
 8012468:	f017 f888 	bl	802957c <roundf>
 801246c:	1c03      	adds	r3, r0, #0
 801246e:	1c18      	adds	r0, r3, #0
 8012470:	f7ee f8d4 	bl	800061c <__aeabi_f2uiz>
 8012474:	0003      	movs	r3, r0
 8012476:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	210a      	movs	r1, #10
 801247c:	0018      	movs	r0, r3
 801247e:	f7ed fe91 	bl	80001a4 <__udivsi3>
 8012482:	0003      	movs	r3, r0
 8012484:	001a      	movs	r2, r3
 8012486:	68bb      	ldr	r3, [r7, #8]
 8012488:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 801248a:	697b      	ldr	r3, [r7, #20]
 801248c:	b2da      	uxtb	r2, r3
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	b2db      	uxtb	r3, r3
 8012494:	1c19      	adds	r1, r3, #0
 8012496:	0089      	lsls	r1, r1, #2
 8012498:	18cb      	adds	r3, r1, r3
 801249a:	18db      	adds	r3, r3, r3
 801249c:	b2db      	uxtb	r3, r3
 801249e:	1ad3      	subs	r3, r2, r3
 80124a0:	b2da      	uxtb	r2, r3
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	701a      	strb	r2, [r3, #0]
}
 80124a6:	46c0      	nop			@ (mov r8, r8)
 80124a8:	46bd      	mov	sp, r7
 80124aa:	b006      	add	sp, #24
 80124ac:	bd80      	pop	{r7, pc}
 80124ae:	46c0      	nop			@ (mov r8, r8)
 80124b0:	41200000 	.word	0x41200000

080124b4 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 80124b4:	b590      	push	{r4, r7, lr}
 80124b6:	b087      	sub	sp, #28
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	60f8      	str	r0, [r7, #12]
 80124bc:	60b9      	str	r1, [r7, #8]
 80124be:	607a      	str	r2, [r7, #4]
 80124c0:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f7ef f9b0 	bl	8001828 <__aeabi_i2f>
 80124c8:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80124ca:	6838      	ldr	r0, [r7, #0]
 80124cc:	f7ef f9ac 	bl	8001828 <__aeabi_i2f>
 80124d0:	1c03      	adds	r3, r0, #0
 80124d2:	4918      	ldr	r1, [pc, #96]	@ (8012534 <sumToIntAverage+0x80>)
 80124d4:	1c18      	adds	r0, r3, #0
 80124d6:	f7ee fbe5 	bl	8000ca4 <__aeabi_fdiv>
 80124da:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80124dc:	1c19      	adds	r1, r3, #0
 80124de:	1c20      	adds	r0, r4, #0
 80124e0:	f7ee f9ee 	bl	80008c0 <__aeabi_fadd>
 80124e4:	1c03      	adds	r3, r0, #0
 80124e6:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80124e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80124ea:	f7ef f9ed 	bl	80018c8 <__aeabi_ui2f>
 80124ee:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80124f0:	1c19      	adds	r1, r3, #0
 80124f2:	1c20      	adds	r0, r4, #0
 80124f4:	f7ee fbd6 	bl	8000ca4 <__aeabi_fdiv>
 80124f8:	1c03      	adds	r3, r0, #0
 80124fa:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 80124fc:	2300      	movs	r3, #0
 80124fe:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 8012500:	68ba      	ldr	r2, [r7, #8]
 8012502:	2310      	movs	r3, #16
 8012504:	18f9      	adds	r1, r7, r3
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	1c18      	adds	r0, r3, #0
 801250a:	f7ff ffa1 	bl	8012450 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 801250e:	693b      	ldr	r3, [r7, #16]
 8012510:	2bff      	cmp	r3, #255	@ 0xff
 8012512:	d906      	bls.n	8012522 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	22ff      	movs	r2, #255	@ 0xff
 8012518:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 801251a:	68bb      	ldr	r3, [r7, #8]
 801251c:	2209      	movs	r2, #9
 801251e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 8012520:	e003      	b.n	801252a <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	b2da      	uxtb	r2, r3
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	701a      	strb	r2, [r3, #0]
}
 801252a:	46c0      	nop			@ (mov r8, r8)
 801252c:	46bd      	mov	sp, r7
 801252e:	b007      	add	sp, #28
 8012530:	bd90      	pop	{r4, r7, pc}
 8012532:	46c0      	nop			@ (mov r8, r8)
 8012534:	41200000 	.word	0x41200000

08012538 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b086      	sub	sp, #24
 801253c:	af00      	add	r7, sp, #0
 801253e:	60f8      	str	r0, [r7, #12]
 8012540:	60b9      	str	r1, [r7, #8]
 8012542:	607a      	str	r2, [r7, #4]
 8012544:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 8012546:	68bb      	ldr	r3, [r7, #8]
 8012548:	2280      	movs	r2, #128	@ 0x80
 801254a:	0612      	lsls	r2, r2, #24
 801254c:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	4a18      	ldr	r2, [pc, #96]	@ (80125b4 <findMinMax+0x7c>)
 8012552:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8012554:	2300      	movs	r3, #0
 8012556:	617b      	str	r3, [r7, #20]
 8012558:	e022      	b.n	80125a0 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 801255a:	697b      	ldr	r3, [r7, #20]
 801255c:	009b      	lsls	r3, r3, #2
 801255e:	687a      	ldr	r2, [r7, #4]
 8012560:	18d3      	adds	r3, r2, r3
 8012562:	681a      	ldr	r2, [r3, #0]
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	429a      	cmp	r2, r3
 801256a:	da06      	bge.n	801257a <findMinMax+0x42>
        {
            min[0] = array[i];
 801256c:	697b      	ldr	r3, [r7, #20]
 801256e:	009b      	lsls	r3, r3, #2
 8012570:	687a      	ldr	r2, [r7, #4]
 8012572:	18d3      	adds	r3, r2, r3
 8012574:	681a      	ldr	r2, [r3, #0]
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	009b      	lsls	r3, r3, #2
 801257e:	687a      	ldr	r2, [r7, #4]
 8012580:	18d3      	adds	r3, r2, r3
 8012582:	681a      	ldr	r2, [r3, #0]
 8012584:	68bb      	ldr	r3, [r7, #8]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	429a      	cmp	r2, r3
 801258a:	dd06      	ble.n	801259a <findMinMax+0x62>
        {
            max[0] = array[i];
 801258c:	697b      	ldr	r3, [r7, #20]
 801258e:	009b      	lsls	r3, r3, #2
 8012590:	687a      	ldr	r2, [r7, #4]
 8012592:	18d3      	adds	r3, r2, r3
 8012594:	681a      	ldr	r2, [r3, #0]
 8012596:	68bb      	ldr	r3, [r7, #8]
 8012598:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 801259a:	697b      	ldr	r3, [r7, #20]
 801259c:	3301      	adds	r3, #1
 801259e:	617b      	str	r3, [r7, #20]
 80125a0:	697a      	ldr	r2, [r7, #20]
 80125a2:	683b      	ldr	r3, [r7, #0]
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d3d8      	bcc.n	801255a <findMinMax+0x22>
        }
    }
}
 80125a8:	46c0      	nop			@ (mov r8, r8)
 80125aa:	46c0      	nop			@ (mov r8, r8)
 80125ac:	46bd      	mov	sp, r7
 80125ae:	b006      	add	sp, #24
 80125b0:	bd80      	pop	{r7, pc}
 80125b2:	46c0      	nop			@ (mov r8, r8)
 80125b4:	7fffffff 	.word	0x7fffffff

080125b8 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b084      	sub	sp, #16
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
 80125c0:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 80125c2:	2300      	movs	r3, #0
 80125c4:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 80125c6:	687a      	ldr	r2, [r7, #4]
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	429a      	cmp	r2, r3
 80125cc:	d302      	bcc.n	80125d4 <getPo2factor+0x1c>
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d107      	bne.n	80125e4 <getPo2factor+0x2c>
    {
        return 0;
 80125d4:	2300      	movs	r3, #0
 80125d6:	e00d      	b.n	80125f4 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	085b      	lsrs	r3, r3, #1
 80125dc:	607b      	str	r3, [r7, #4]
        bitShift++;
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	3301      	adds	r3, #1
 80125e2:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 80125e4:	687a      	ldr	r2, [r7, #4]
 80125e6:	683b      	ldr	r3, [r7, #0]
 80125e8:	429a      	cmp	r2, r3
 80125ea:	d2f5      	bcs.n	80125d8 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	3b01      	subs	r3, #1
 80125f0:	60fb      	str	r3, [r7, #12]
    return bitShift;
 80125f2:	68fb      	ldr	r3, [r7, #12]
}
 80125f4:	0018      	movs	r0, r3
 80125f6:	46bd      	mov	sp, r7
 80125f8:	b004      	add	sp, #16
 80125fa:	bd80      	pop	{r7, pc}

080125fc <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b086      	sub	sp, #24
 8012600:	af00      	add	r7, sp, #0
 8012602:	60f8      	str	r0, [r7, #12]
 8012604:	60b9      	str	r1, [r7, #8]
 8012606:	607a      	str	r2, [r7, #4]
 8012608:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 801260a:	68f8      	ldr	r0, [r7, #12]
 801260c:	f7ef f95c 	bl	80018c8 <__aeabi_ui2f>
 8012610:	1c03      	adds	r3, r0, #0
 8012612:	1c19      	adds	r1, r3, #0
 8012614:	68b8      	ldr	r0, [r7, #8]
 8012616:	f7ee fd13 	bl	8001040 <__aeabi_fmul>
 801261a:	1c03      	adds	r3, r0, #0
 801261c:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 801261e:	2300      	movs	r3, #0
 8012620:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 8012622:	683a      	ldr	r2, [r7, #0]
 8012624:	2310      	movs	r3, #16
 8012626:	18f9      	adds	r1, r7, r3
 8012628:	697b      	ldr	r3, [r7, #20]
 801262a:	1c18      	adds	r0, r3, #0
 801262c:	f7ff fee0 	bl	80123f0 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 8012630:	693b      	ldr	r3, [r7, #16]
 8012632:	b29a      	uxth	r2, r3
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	801a      	strh	r2, [r3, #0]
}
 8012638:	46c0      	nop			@ (mov r8, r8)
 801263a:	46bd      	mov	sp, r7
 801263c:	b006      	add	sp, #24
 801263e:	bd80      	pop	{r7, pc}

08012640 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b084      	sub	sp, #16
 8012644:	af00      	add	r7, sp, #0
 8012646:	60b8      	str	r0, [r7, #8]
 8012648:	60f9      	str	r1, [r7, #12]
 801264a:	607a      	str	r2, [r7, #4]
 801264c:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 801264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012650:	6a3a      	ldr	r2, [r7, #32]
 8012652:	68b8      	ldr	r0, [r7, #8]
 8012654:	68f9      	ldr	r1, [r7, #12]
 8012656:	f7f9 fe41 	bl	800c2dc <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 801265a:	6a3b      	ldr	r3, [r7, #32]
 801265c:	681a      	ldr	r2, [r3, #0]
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	18d2      	adds	r2, r2, r3
 8012662:	69bb      	ldr	r3, [r7, #24]
 8012664:	18d2      	adds	r2, r2, r3
 8012666:	6a3b      	ldr	r3, [r7, #32]
 8012668:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 801266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801266c:	681a      	ldr	r2, [r3, #0]
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	18d2      	adds	r2, r2, r3
 8012672:	69fb      	ldr	r3, [r7, #28]
 8012674:	18d2      	adds	r2, r2, r3
 8012676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012678:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 801267a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801267c:	6a3b      	ldr	r3, [r7, #32]
 801267e:	0011      	movs	r1, r2
 8012680:	0018      	movs	r0, r3
 8012682:	f7f9 febb 	bl	800c3fc <correctIntFracNumber>
}
 8012686:	46c0      	nop			@ (mov r8, r8)
 8012688:	46bd      	mov	sp, r7
 801268a:	b004      	add	sp, #16
 801268c:	bd80      	pop	{r7, pc}

0801268e <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 801268e:	b580      	push	{r7, lr}
 8012690:	b086      	sub	sp, #24
 8012692:	af00      	add	r7, sp, #0
 8012694:	60f8      	str	r0, [r7, #12]
 8012696:	60b9      	str	r1, [r7, #8]
 8012698:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 801269a:	2300      	movs	r3, #0
 801269c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 801269e:	2300      	movs	r3, #0
 80126a0:	613b      	str	r3, [r7, #16]
 80126a2:	e019      	b.n	80126d8 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80126a4:	693b      	ldr	r3, [r7, #16]
 80126a6:	005b      	lsls	r3, r3, #1
 80126a8:	68fa      	ldr	r2, [r7, #12]
 80126aa:	18d3      	adds	r3, r2, r3
 80126ac:	881b      	ldrh	r3, [r3, #0]
 80126ae:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 80126b0:	693a      	ldr	r2, [r7, #16]
 80126b2:	3201      	adds	r2, #1
 80126b4:	0052      	lsls	r2, r2, #1
 80126b6:	68f9      	ldr	r1, [r7, #12]
 80126b8:	188a      	adds	r2, r1, r2
 80126ba:	8812      	ldrh	r2, [r2, #0]
 80126bc:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80126be:	0019      	movs	r1, r3
 80126c0:	697b      	ldr	r3, [r7, #20]
 80126c2:	009b      	lsls	r3, r3, #2
 80126c4:	687a      	ldr	r2, [r7, #4]
 80126c6:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 80126c8:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80126ca:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 80126cc:	697b      	ldr	r3, [r7, #20]
 80126ce:	3301      	adds	r3, #1
 80126d0:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 80126d2:	693b      	ldr	r3, [r7, #16]
 80126d4:	3304      	adds	r3, #4
 80126d6:	613b      	str	r3, [r7, #16]
 80126d8:	693a      	ldr	r2, [r7, #16]
 80126da:	68bb      	ldr	r3, [r7, #8]
 80126dc:	429a      	cmp	r2, r3
 80126de:	d3e1      	bcc.n	80126a4 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 80126e0:	46c0      	nop			@ (mov r8, r8)
 80126e2:	46c0      	nop			@ (mov r8, r8)
 80126e4:	46bd      	mov	sp, r7
 80126e6:	b006      	add	sp, #24
 80126e8:	bd80      	pop	{r7, pc}
	...

080126ec <InitDone>:
float batteryCharge = 0.0;
uint8_t batteryChargeMode;
Battery_Status batteryStatus;


void InitDone(){
 80126ec:	b580      	push	{r7, lr}
 80126ee:	af00      	add	r7, sp, #0
  init = false;
 80126f0:	4b02      	ldr	r3, [pc, #8]	@ (80126fc <InitDone+0x10>)
 80126f2:	2200      	movs	r2, #0
 80126f4:	701a      	strb	r2, [r3, #0]
}
 80126f6:	46c0      	nop			@ (mov r8, r8)
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}
 80126fc:	200000e8 	.word	0x200000e8

08012700 <batteryChargeCheck>:
  "De Omgevingsmonitor" will refuse to upload data to openSenseMap.org if the battery voltage under load drops below 3.77V with SEN5x attached.
  Without a SEN5x attached the Omgevingsmonitor stops sending to OpenSenseMap at 3.75V
  Above values with standard battery
 */

void batteryChargeCheck(){
 8012700:	b5b0      	push	{r4, r5, r7, lr}
 8012702:	b084      	sub	sp, #16
 8012704:	af04      	add	r7, sp, #16
  batteryCharge = ReadBatteryVoltage();
 8012706:	f7f7 fa3d 	bl	8009b84 <ReadBatteryVoltage>
 801270a:	1c02      	adds	r2, r0, #0
 801270c:	4b2e      	ldr	r3, [pc, #184]	@ (80127c8 <batteryChargeCheck+0xc8>)
 801270e:	601a      	str	r2, [r3, #0]
  Debug("battery: %.02fV, solar: %dmV", batteryCharge, ReadSolarVoltage());
 8012710:	4b2d      	ldr	r3, [pc, #180]	@ (80127c8 <batteryChargeCheck+0xc8>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	1c18      	adds	r0, r3, #0
 8012716:	f7f1 f8bd 	bl	8003894 <__aeabi_f2d>
 801271a:	0004      	movs	r4, r0
 801271c:	000d      	movs	r5, r1
 801271e:	f7f7 fa93 	bl	8009c48 <ReadSolarVoltage>
 8012722:	0003      	movs	r3, r0
 8012724:	0019      	movs	r1, r3
 8012726:	4a29      	ldr	r2, [pc, #164]	@ (80127cc <batteryChargeCheck+0xcc>)
 8012728:	4b29      	ldr	r3, [pc, #164]	@ (80127d0 <batteryChargeCheck+0xd0>)
 801272a:	9102      	str	r1, [sp, #8]
 801272c:	9400      	str	r4, [sp, #0]
 801272e:	9501      	str	r5, [sp, #4]
 8012730:	0019      	movs	r1, r3
 8012732:	2003      	movs	r0, #3
 8012734:	f001 fbc0 	bl	8013eb8 <CreateLine>
#ifdef LARGEBATTERY
  if (batteryCharge < 3.50) {
#else
  if (batteryCharge < 3.75) {
 8012738:	4b23      	ldr	r3, [pc, #140]	@ (80127c8 <batteryChargeCheck+0xc8>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	4925      	ldr	r1, [pc, #148]	@ (80127d4 <batteryChargeCheck+0xd4>)
 801273e:	1c18      	adds	r0, r3, #0
 8012740:	f7ed fef6 	bl	8000530 <__aeabi_fcmplt>
 8012744:	1e03      	subs	r3, r0, #0
 8012746:	d002      	beq.n	801274e <batteryChargeCheck+0x4e>
#endif
    batteryStatus = BATTERY_CRITICAL;
 8012748:	4b23      	ldr	r3, [pc, #140]	@ (80127d8 <batteryChargeCheck+0xd8>)
 801274a:	2200      	movs	r2, #0
 801274c:	701a      	strb	r2, [r3, #0]
  }
#ifdef LARGEBATTERY
  if (batteryCharge >= 3.50 && batteryCharge < 3.69) {
#else
  if (batteryCharge >= 3.75 && batteryCharge < 3.85) {
 801274e:	4b1e      	ldr	r3, [pc, #120]	@ (80127c8 <batteryChargeCheck+0xc8>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	4920      	ldr	r1, [pc, #128]	@ (80127d4 <batteryChargeCheck+0xd4>)
 8012754:	1c18      	adds	r0, r3, #0
 8012756:	f7ed ff09 	bl	800056c <__aeabi_fcmpge>
 801275a:	1e03      	subs	r3, r0, #0
 801275c:	d00d      	beq.n	801277a <batteryChargeCheck+0x7a>
 801275e:	4b1a      	ldr	r3, [pc, #104]	@ (80127c8 <batteryChargeCheck+0xc8>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	1c18      	adds	r0, r3, #0
 8012764:	f7f1 f896 	bl	8003894 <__aeabi_f2d>
 8012768:	4a1c      	ldr	r2, [pc, #112]	@ (80127dc <batteryChargeCheck+0xdc>)
 801276a:	4b1d      	ldr	r3, [pc, #116]	@ (80127e0 <batteryChargeCheck+0xe0>)
 801276c:	f7ed fea6 	bl	80004bc <__aeabi_dcmplt>
 8012770:	1e03      	subs	r3, r0, #0
 8012772:	d002      	beq.n	801277a <batteryChargeCheck+0x7a>
#endif
    batteryStatus = BATTERY_LOW;
 8012774:	4b18      	ldr	r3, [pc, #96]	@ (80127d8 <batteryChargeCheck+0xd8>)
 8012776:	2201      	movs	r2, #1
 8012778:	701a      	strb	r2, [r3, #0]
  }
#ifdef LARGEBATTERY
  if (batteryCharge >= 3.69 && batteryCharge < 3.98) {
#else
    if (batteryCharge >= 3.85 && batteryCharge < 4.00) {
 801277a:	4b13      	ldr	r3, [pc, #76]	@ (80127c8 <batteryChargeCheck+0xc8>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	1c18      	adds	r0, r3, #0
 8012780:	f7f1 f888 	bl	8003894 <__aeabi_f2d>
 8012784:	4a15      	ldr	r2, [pc, #84]	@ (80127dc <batteryChargeCheck+0xdc>)
 8012786:	4b16      	ldr	r3, [pc, #88]	@ (80127e0 <batteryChargeCheck+0xe0>)
 8012788:	f7ed feb6 	bl	80004f8 <__aeabi_dcmpge>
 801278c:	1e03      	subs	r3, r0, #0
 801278e:	d00b      	beq.n	80127a8 <batteryChargeCheck+0xa8>
 8012790:	4b0d      	ldr	r3, [pc, #52]	@ (80127c8 <batteryChargeCheck+0xc8>)
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	2181      	movs	r1, #129	@ 0x81
 8012796:	05c9      	lsls	r1, r1, #23
 8012798:	1c18      	adds	r0, r3, #0
 801279a:	f7ed fec9 	bl	8000530 <__aeabi_fcmplt>
 801279e:	1e03      	subs	r3, r0, #0
 80127a0:	d002      	beq.n	80127a8 <batteryChargeCheck+0xa8>
#endif
    batteryStatus = BATTERY_GOOD;
 80127a2:	4b0d      	ldr	r3, [pc, #52]	@ (80127d8 <batteryChargeCheck+0xd8>)
 80127a4:	2202      	movs	r2, #2
 80127a6:	701a      	strb	r2, [r3, #0]
  }
#ifdef LARGEBATTERY
  if (batteryCharge >= 3.98) {
#else
  if (batteryCharge >= 4.00) {
 80127a8:	4b07      	ldr	r3, [pc, #28]	@ (80127c8 <batteryChargeCheck+0xc8>)
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	2181      	movs	r1, #129	@ 0x81
 80127ae:	05c9      	lsls	r1, r1, #23
 80127b0:	1c18      	adds	r0, r3, #0
 80127b2:	f7ed fedb 	bl	800056c <__aeabi_fcmpge>
 80127b6:	1e03      	subs	r3, r0, #0
 80127b8:	d100      	bne.n	80127bc <batteryChargeCheck+0xbc>
#endif
    batteryStatus = BATTERY_FULL;
  }
}
 80127ba:	e002      	b.n	80127c2 <batteryChargeCheck+0xc2>
    batteryStatus = BATTERY_FULL;
 80127bc:	4b06      	ldr	r3, [pc, #24]	@ (80127d8 <batteryChargeCheck+0xd8>)
 80127be:	2203      	movs	r2, #3
 80127c0:	701a      	strb	r2, [r3, #0]
}
 80127c2:	46c0      	nop			@ (mov r8, r8)
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bdb0      	pop	{r4, r5, r7, pc}
 80127c8:	20002158 	.word	0x20002158
 80127cc:	0802dc20 	.word	0x0802dc20
 80127d0:	0802dc40 	.word	0x0802dc40
 80127d4:	40700000 	.word	0x40700000
 80127d8:	2000215d 	.word	0x2000215d
 80127dc:	cccccccd 	.word	0xcccccccd
 80127e0:	400ecccc 	.word	0x400ecccc

080127e4 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 80127e4:	b5b0      	push	{r4, r5, r7, lr}
 80127e6:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 80127e8:	f7f7 fa2e 	bl	8009c48 <ReadSolarVoltage>
 80127ec:	0003      	movs	r3, r0
 80127ee:	001a      	movs	r2, r3
 80127f0:	4b1a      	ldr	r3, [pc, #104]	@ (801285c <Calculate_LED_ON+0x78>)
 80127f2:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 80127f4:	4b19      	ldr	r3, [pc, #100]	@ (801285c <Calculate_LED_ON+0x78>)
 80127f6:	881b      	ldrh	r3, [r3, #0]
 80127f8:	4a19      	ldr	r2, [pc, #100]	@ (8012860 <Calculate_LED_ON+0x7c>)
 80127fa:	4293      	cmp	r3, r2
 80127fc:	d802      	bhi.n	8012804 <Calculate_LED_ON+0x20>
    solmV = 2900;
 80127fe:	4b17      	ldr	r3, [pc, #92]	@ (801285c <Calculate_LED_ON+0x78>)
 8012800:	4a18      	ldr	r2, [pc, #96]	@ (8012864 <Calculate_LED_ON+0x80>)
 8012802:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 8012804:	4b15      	ldr	r3, [pc, #84]	@ (801285c <Calculate_LED_ON+0x78>)
 8012806:	881b      	ldrh	r3, [r3, #0]
 8012808:	4a17      	ldr	r2, [pc, #92]	@ (8012868 <Calculate_LED_ON+0x84>)
 801280a:	4293      	cmp	r3, r2
 801280c:	d902      	bls.n	8012814 <Calculate_LED_ON+0x30>
    solmV = 4700;
 801280e:	4b13      	ldr	r3, [pc, #76]	@ (801285c <Calculate_LED_ON+0x78>)
 8012810:	4a15      	ldr	r2, [pc, #84]	@ (8012868 <Calculate_LED_ON+0x84>)
 8012812:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 8012814:	4b11      	ldr	r3, [pc, #68]	@ (801285c <Calculate_LED_ON+0x78>)
 8012816:	881b      	ldrh	r3, [r3, #0]
 8012818:	0018      	movs	r0, r3
 801281a:	f7f0 ffe9 	bl	80037f0 <__aeabi_i2d>
 801281e:	0004      	movs	r4, r0
 8012820:	000d      	movs	r5, r1
 8012822:	4b0e      	ldr	r3, [pc, #56]	@ (801285c <Calculate_LED_ON+0x78>)
 8012824:	881b      	ldrh	r3, [r3, #0]
 8012826:	001a      	movs	r2, r3
 8012828:	4b10      	ldr	r3, [pc, #64]	@ (801286c <Calculate_LED_ON+0x88>)
 801282a:	1a9b      	subs	r3, r3, r2
 801282c:	0018      	movs	r0, r3
 801282e:	f7f0 ffdf 	bl	80037f0 <__aeabi_i2d>
 8012832:	2200      	movs	r2, #0
 8012834:	4b0e      	ldr	r3, [pc, #56]	@ (8012870 <Calculate_LED_ON+0x8c>)
 8012836:	f7f0 f88d 	bl	8002954 <__aeabi_dmul>
 801283a:	0002      	movs	r2, r0
 801283c:	000b      	movs	r3, r1
 801283e:	0020      	movs	r0, r4
 8012840:	0029      	movs	r1, r5
 8012842:	f7ef f887 	bl	8001954 <__aeabi_dadd>
 8012846:	0002      	movs	r2, r0
 8012848:	000b      	movs	r3, r1
 801284a:	0010      	movs	r0, r2
 801284c:	0019      	movs	r1, r3
 801284e:	f7ed fefd 	bl	800064c <__aeabi_d2uiz>
 8012852:	0003      	movs	r3, r0
 8012854:	b29b      	uxth	r3, r3
}
 8012856:	0018      	movs	r0, r3
 8012858:	46bd      	mov	sp, r7
 801285a:	bdb0      	pop	{r4, r5, r7, pc}
 801285c:	2000215e 	.word	0x2000215e
 8012860:	00000b53 	.word	0x00000b53
 8012864:	00000b54 	.word	0x00000b54
 8012868:	0000125c 	.word	0x0000125c
 801286c:	00000dee 	.word	0x00000dee
 8012870:	3ff80000 	.word	0x3ff80000

08012874 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8012874:	b590      	push	{r4, r7, lr}
 8012876:	b083      	sub	sp, #12
 8012878:	af00      	add	r7, sp, #0
 801287a:	0004      	movs	r4, r0
 801287c:	0008      	movs	r0, r1
 801287e:	0011      	movs	r1, r2
 8012880:	1dbb      	adds	r3, r7, #6
 8012882:	1c22      	adds	r2, r4, #0
 8012884:	801a      	strh	r2, [r3, #0]
 8012886:	1d3b      	adds	r3, r7, #4
 8012888:	1c02      	adds	r2, r0, #0
 801288a:	801a      	strh	r2, [r3, #0]
 801288c:	1cbb      	adds	r3, r7, #2
 801288e:	1c0a      	adds	r2, r1, #0
 8012890:	801a      	strh	r2, [r3, #0]
  if(init || userToggle){
 8012892:	4b0d      	ldr	r3, [pc, #52]	@ (80128c8 <SetStatusLED+0x54>)
 8012894:	781b      	ldrb	r3, [r3, #0]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d103      	bne.n	80128a2 <SetStatusLED+0x2e>
 801289a:	4b0c      	ldr	r3, [pc, #48]	@ (80128cc <SetStatusLED+0x58>)
 801289c:	781b      	ldrb	r3, [r3, #0]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d00e      	beq.n	80128c0 <SetStatusLED+0x4c>
    TIM2 -> CCR1 = red;
 80128a2:	2380      	movs	r3, #128	@ 0x80
 80128a4:	05db      	lsls	r3, r3, #23
 80128a6:	1dba      	adds	r2, r7, #6
 80128a8:	8812      	ldrh	r2, [r2, #0]
 80128aa:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 80128ac:	2380      	movs	r3, #128	@ 0x80
 80128ae:	05db      	lsls	r3, r3, #23
 80128b0:	1d3a      	adds	r2, r7, #4
 80128b2:	8812      	ldrh	r2, [r2, #0]
 80128b4:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 80128b6:	2380      	movs	r3, #128	@ 0x80
 80128b8:	05db      	lsls	r3, r3, #23
 80128ba:	1cba      	adds	r2, r7, #2
 80128bc:	8812      	ldrh	r2, [r2, #0]
 80128be:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80128c0:	46c0      	nop			@ (mov r8, r8)
 80128c2:	46bd      	mov	sp, r7
 80128c4:	b003      	add	sp, #12
 80128c6:	bd90      	pop	{r4, r7, pc}
 80128c8:	200000e8 	.word	0x200000e8
 80128cc:	2000214e 	.word	0x2000214e

080128d0 <SetDBLED>:

// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 80128d0:	b590      	push	{r4, r7, lr}
 80128d2:	b083      	sub	sp, #12
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	0004      	movs	r4, r0
 80128d8:	0008      	movs	r0, r1
 80128da:	0011      	movs	r1, r2
 80128dc:	1dfb      	adds	r3, r7, #7
 80128de:	1c22      	adds	r2, r4, #0
 80128e0:	701a      	strb	r2, [r3, #0]
 80128e2:	1dbb      	adds	r3, r7, #6
 80128e4:	1c02      	adds	r2, r0, #0
 80128e6:	701a      	strb	r2, [r3, #0]
 80128e8:	1d7b      	adds	r3, r7, #5
 80128ea:	1c0a      	adds	r2, r1, #0
 80128ec:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(init || userToggle){
 80128ee:	4b17      	ldr	r3, [pc, #92]	@ (801294c <SetDBLED+0x7c>)
 80128f0:	781b      	ldrb	r3, [r3, #0]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d103      	bne.n	80128fe <SetDBLED+0x2e>
 80128f6:	4b16      	ldr	r3, [pc, #88]	@ (8012950 <SetDBLED+0x80>)
 80128f8:	781b      	ldrb	r3, [r3, #0]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d022      	beq.n	8012944 <SetDBLED+0x74>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 80128fe:	1dfb      	adds	r3, r7, #7
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	2201      	movs	r2, #1
 8012904:	4053      	eors	r3, r2
 8012906:	b2db      	uxtb	r3, r3
 8012908:	001a      	movs	r2, r3
 801290a:	4b12      	ldr	r3, [pc, #72]	@ (8012954 <SetDBLED+0x84>)
 801290c:	2101      	movs	r1, #1
 801290e:	0018      	movs	r0, r3
 8012910:	f003 fab9 	bl	8015e86 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8012914:	1dbb      	adds	r3, r7, #6
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	2201      	movs	r2, #1
 801291a:	4053      	eors	r3, r2
 801291c:	b2db      	uxtb	r3, r3
 801291e:	001a      	movs	r2, r3
 8012920:	2380      	movs	r3, #128	@ 0x80
 8012922:	005b      	lsls	r3, r3, #1
 8012924:	480b      	ldr	r0, [pc, #44]	@ (8012954 <SetDBLED+0x84>)
 8012926:	0019      	movs	r1, r3
 8012928:	f003 faad 	bl	8015e86 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 801292c:	1d7b      	adds	r3, r7, #5
 801292e:	781b      	ldrb	r3, [r3, #0]
 8012930:	2201      	movs	r2, #1
 8012932:	4053      	eors	r3, r2
 8012934:	b2db      	uxtb	r3, r3
 8012936:	001a      	movs	r2, r3
 8012938:	2380      	movs	r3, #128	@ 0x80
 801293a:	009b      	lsls	r3, r3, #2
 801293c:	4805      	ldr	r0, [pc, #20]	@ (8012954 <SetDBLED+0x84>)
 801293e:	0019      	movs	r1, r3
 8012940:	f003 faa1 	bl	8015e86 <HAL_GPIO_WritePin>
  }
}
 8012944:	46c0      	nop			@ (mov r8, r8)
 8012946:	46bd      	mov	sp, r7
 8012948:	b003      	add	sp, #12
 801294a:	bd90      	pop	{r4, r7, pc}
 801294c:	200000e8 	.word	0x200000e8
 8012950:	2000214e 	.word	0x2000214e
 8012954:	50000400 	.word	0x50000400

08012958 <SetVocLED>:

// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8012958:	b590      	push	{r4, r7, lr}
 801295a:	b083      	sub	sp, #12
 801295c:	af00      	add	r7, sp, #0
 801295e:	0004      	movs	r4, r0
 8012960:	0008      	movs	r0, r1
 8012962:	0011      	movs	r1, r2
 8012964:	1dbb      	adds	r3, r7, #6
 8012966:	1c22      	adds	r2, r4, #0
 8012968:	801a      	strh	r2, [r3, #0]
 801296a:	1d3b      	adds	r3, r7, #4
 801296c:	1c02      	adds	r2, r0, #0
 801296e:	801a      	strh	r2, [r3, #0]
 8012970:	1cbb      	adds	r3, r7, #2
 8012972:	1c0a      	adds	r2, r1, #0
 8012974:	801a      	strh	r2, [r3, #0]
  if(init || userToggle){
 8012976:	4b0c      	ldr	r3, [pc, #48]	@ (80129a8 <SetVocLED+0x50>)
 8012978:	781b      	ldrb	r3, [r3, #0]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d103      	bne.n	8012986 <SetVocLED+0x2e>
 801297e:	4b0b      	ldr	r3, [pc, #44]	@ (80129ac <SetVocLED+0x54>)
 8012980:	781b      	ldrb	r3, [r3, #0]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d00b      	beq.n	801299e <SetVocLED+0x46>
    TIM3 -> CCR1 = red;
 8012986:	4b0a      	ldr	r3, [pc, #40]	@ (80129b0 <SetVocLED+0x58>)
 8012988:	1dba      	adds	r2, r7, #6
 801298a:	8812      	ldrh	r2, [r2, #0]
 801298c:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 801298e:	4b08      	ldr	r3, [pc, #32]	@ (80129b0 <SetVocLED+0x58>)
 8012990:	1d3a      	adds	r2, r7, #4
 8012992:	8812      	ldrh	r2, [r2, #0]
 8012994:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 8012996:	4b06      	ldr	r3, [pc, #24]	@ (80129b0 <SetVocLED+0x58>)
 8012998:	1cba      	adds	r2, r7, #2
 801299a:	8812      	ldrh	r2, [r2, #0]
 801299c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 801299e:	46c0      	nop			@ (mov r8, r8)
 80129a0:	46bd      	mov	sp, r7
 80129a2:	b003      	add	sp, #12
 80129a4:	bd90      	pop	{r4, r7, pc}
 80129a6:	46c0      	nop			@ (mov r8, r8)
 80129a8:	200000e8 	.word	0x200000e8
 80129ac:	2000214e 	.word	0x2000214e
 80129b0:	40000400 	.word	0x40000400

080129b4 <SetMeasurementIndicator>:

void SetMeasurementIndicator(){
 80129b4:	b580      	push	{r7, lr}
 80129b6:	af00      	add	r7, sp, #0
  if(userToggle){
 80129b8:	4b06      	ldr	r3, [pc, #24]	@ (80129d4 <SetMeasurementIndicator+0x20>)
 80129ba:	781b      	ldrb	r3, [r3, #0]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d006      	beq.n	80129ce <SetMeasurementIndicator+0x1a>
    TIM2 -> CCR3 = Calculate_LED_ON();
 80129c0:	f7ff ff10 	bl	80127e4 <Calculate_LED_ON>
 80129c4:	0003      	movs	r3, r0
 80129c6:	001a      	movs	r2, r3
 80129c8:	2380      	movs	r3, #128	@ 0x80
 80129ca:	05db      	lsls	r3, r3, #23
 80129cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80129ce:	46c0      	nop			@ (mov r8, r8)
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}
 80129d4:	2000214e 	.word	0x2000214e

080129d8 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 80129d8:	b580      	push	{r7, lr}
 80129da:	af00      	add	r7, sp, #0
  if(userToggle){
 80129dc:	4b05      	ldr	r3, [pc, #20]	@ (80129f4 <ResetMeasurementIndicator+0x1c>)
 80129de:	781b      	ldrb	r3, [r3, #0]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d004      	beq.n	80129ee <ResetMeasurementIndicator+0x16>
    TIM2 -> CCR3 = LED_OFF;
 80129e4:	2380      	movs	r3, #128	@ 0x80
 80129e6:	05db      	lsls	r3, r3, #23
 80129e8:	22fa      	movs	r2, #250	@ 0xfa
 80129ea:	0112      	lsls	r2, r2, #4
 80129ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80129ee:	46c0      	nop			@ (mov r8, r8)
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}
 80129f4:	2000214e 	.word	0x2000214e

080129f8 <SetChargeIndicator>:

void SetChargeIndicator(){
 80129f8:	b580      	push	{r7, lr}
 80129fa:	af00      	add	r7, sp, #0
  if(usbPluggedIn){
 80129fc:	4b19      	ldr	r3, [pc, #100]	@ (8012a64 <SetChargeIndicator+0x6c>)
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d011      	beq.n	8012a28 <SetChargeIndicator+0x30>
    if (batteryChargeMode == CHARGING_ON) {
 8012a04:	4b18      	ldr	r3, [pc, #96]	@ (8012a68 <SetChargeIndicator+0x70>)
 8012a06:	781b      	ldrb	r3, [r3, #0]
 8012a08:	2b01      	cmp	r3, #1
 8012a0a:	d10d      	bne.n	8012a28 <SetChargeIndicator+0x30>
      TIM2 -> CCR1 = Calculate_LED_ON();  // red
 8012a0c:	f7ff feea 	bl	80127e4 <Calculate_LED_ON>
 8012a10:	0003      	movs	r3, r0
 8012a12:	001a      	movs	r2, r3
 8012a14:	2380      	movs	r3, #128	@ 0x80
 8012a16:	05db      	lsls	r3, r3, #23
 8012a18:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = Calculate_LED_ON();  //green, create yellow statusled
 8012a1a:	f7ff fee3 	bl	80127e4 <Calculate_LED_ON>
 8012a1e:	0003      	movs	r3, r0
 8012a20:	001a      	movs	r2, r3
 8012a22:	2380      	movs	r3, #128	@ 0x80
 8012a24:	05db      	lsls	r3, r3, #23
 8012a26:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }
  // in case of not charging or full only one color is active.
  if (batteryCharge > 3.7) {
 8012a28:	4b10      	ldr	r3, [pc, #64]	@ (8012a6c <SetChargeIndicator+0x74>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	1c18      	adds	r0, r3, #0
 8012a2e:	f7f0 ff31 	bl	8003894 <__aeabi_f2d>
 8012a32:	4a0f      	ldr	r2, [pc, #60]	@ (8012a70 <SetChargeIndicator+0x78>)
 8012a34:	4b0f      	ldr	r3, [pc, #60]	@ (8012a74 <SetChargeIndicator+0x7c>)
 8012a36:	f7ed fd55 	bl	80004e4 <__aeabi_dcmpgt>
 8012a3a:	1e03      	subs	r3, r0, #0
 8012a3c:	d007      	beq.n	8012a4e <SetChargeIndicator+0x56>
    TIM2 -> CCR3 = Calculate_LED_ON();  // green
 8012a3e:	f7ff fed1 	bl	80127e4 <Calculate_LED_ON>
 8012a42:	0003      	movs	r3, r0
 8012a44:	001a      	movs	r2, r3
 8012a46:	2380      	movs	r3, #128	@ 0x80
 8012a48:	05db      	lsls	r3, r3, #23
 8012a4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  else {
    TIM2 -> CCR1 = Calculate_LED_ON();  //red
  }
}
 8012a4c:	e006      	b.n	8012a5c <SetChargeIndicator+0x64>
    TIM2 -> CCR1 = Calculate_LED_ON();  //red
 8012a4e:	f7ff fec9 	bl	80127e4 <Calculate_LED_ON>
 8012a52:	0003      	movs	r3, r0
 8012a54:	001a      	movs	r2, r3
 8012a56:	2380      	movs	r3, #128	@ 0x80
 8012a58:	05db      	lsls	r3, r3, #23
 8012a5a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8012a5c:	46c0      	nop			@ (mov r8, r8)
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}
 8012a62:	46c0      	nop			@ (mov r8, r8)
 8012a64:	2000214d 	.word	0x2000214d
 8012a68:	2000215c 	.word	0x2000215c
 8012a6c:	20002158 	.word	0x20002158
 8012a70:	9999999a 	.word	0x9999999a
 8012a74:	400d9999 	.word	0x400d9999

08012a78 <ResetChargeIndicator>:

void ResetChargeIndicator(){
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	af00      	add	r7, sp, #0
      TIM2 -> CCR3 = LED_OFF;
 8012a7c:	2380      	movs	r3, #128	@ 0x80
 8012a7e:	05db      	lsls	r3, r3, #23
 8012a80:	22fa      	movs	r2, #250	@ 0xfa
 8012a82:	0112      	lsls	r2, r2, #4
 8012a84:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR1 = LED_OFF;
 8012a86:	2380      	movs	r3, #128	@ 0x80
 8012a88:	05db      	lsls	r3, r3, #23
 8012a8a:	22fa      	movs	r2, #250	@ 0xfa
 8012a8c:	0112      	lsls	r2, r2, #4
 8012a8e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8012a90:	46c0      	nop			@ (mov r8, r8)
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bd80      	pop	{r7, pc}
	...

08012a98 <SetESPIndicator>:

void SetESPIndicator(){
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	af00      	add	r7, sp, #0
  if(userToggle){
 8012a9c:	4b06      	ldr	r3, [pc, #24]	@ (8012ab8 <SetESPIndicator+0x20>)
 8012a9e:	781b      	ldrb	r3, [r3, #0]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d006      	beq.n	8012ab2 <SetESPIndicator+0x1a>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8012aa4:	f7ff fe9e 	bl	80127e4 <Calculate_LED_ON>
 8012aa8:	0003      	movs	r3, r0
 8012aaa:	001a      	movs	r2, r3
 8012aac:	2380      	movs	r3, #128	@ 0x80
 8012aae:	05db      	lsls	r3, r3, #23
 8012ab0:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8012ab2:	46c0      	nop			@ (mov r8, r8)
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd80      	pop	{r7, pc}
 8012ab8:	2000214e 	.word	0x2000214e

08012abc <ResetESPIndicator>:
void ResetESPIndicator(){
 8012abc:	b580      	push	{r7, lr}
 8012abe:	af00      	add	r7, sp, #0
  if(userToggle){
 8012ac0:	4b05      	ldr	r3, [pc, #20]	@ (8012ad8 <ResetESPIndicator+0x1c>)
 8012ac2:	781b      	ldrb	r3, [r3, #0]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d004      	beq.n	8012ad2 <ResetESPIndicator+0x16>
    TIM2 -> CCR4 = LED_OFF;
 8012ac8:	2380      	movs	r3, #128	@ 0x80
 8012aca:	05db      	lsls	r3, r3, #23
 8012acc:	22fa      	movs	r2, #250	@ 0xfa
 8012ace:	0112      	lsls	r2, r2, #4
 8012ad0:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8012ad2:	46c0      	nop			@ (mov r8, r8)
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}
 8012ad8:	2000214e 	.word	0x2000214e

08012adc <SetPMIndicator>:

void SetPMIndicator() {
 8012adc:	b580      	push	{r7, lr}
 8012ade:	af00      	add	r7, sp, #0
  if(userToggle){
 8012ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8012b18 <SetPMIndicator+0x3c>)
 8012ae2:	781b      	ldrb	r3, [r3, #0]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d014      	beq.n	8012b12 <SetPMIndicator+0x36>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8012ae8:	f7ff fe7c 	bl	80127e4 <Calculate_LED_ON>
 8012aec:	0003      	movs	r3, r0
 8012aee:	001a      	movs	r2, r3
 8012af0:	2380      	movs	r3, #128	@ 0x80
 8012af2:	05db      	lsls	r3, r3, #23
 8012af4:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 8012af6:	f7ff fe75 	bl	80127e4 <Calculate_LED_ON>
 8012afa:	0003      	movs	r3, r0
 8012afc:	001a      	movs	r2, r3
 8012afe:	2380      	movs	r3, #128	@ 0x80
 8012b00:	05db      	lsls	r3, r3, #23
 8012b02:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 8012b04:	f7ff fe6e 	bl	80127e4 <Calculate_LED_ON>
 8012b08:	0003      	movs	r3, r0
 8012b0a:	001a      	movs	r2, r3
 8012b0c:	2380      	movs	r3, #128	@ 0x80
 8012b0e:	05db      	lsls	r3, r3, #23
 8012b10:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012b12:	46c0      	nop			@ (mov r8, r8)
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}
 8012b18:	2000214e 	.word	0x2000214e

08012b1c <ResetPMIndicator>:

void ResetPMIndicator() {
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	af00      	add	r7, sp, #0
  if(userToggle){
 8012b20:	4b0a      	ldr	r3, [pc, #40]	@ (8012b4c <ResetPMIndicator+0x30>)
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d00e      	beq.n	8012b46 <ResetPMIndicator+0x2a>
    TIM2 -> CCR4 = LED_OFF;
 8012b28:	2380      	movs	r3, #128	@ 0x80
 8012b2a:	05db      	lsls	r3, r3, #23
 8012b2c:	22fa      	movs	r2, #250	@ 0xfa
 8012b2e:	0112      	lsls	r2, r2, #4
 8012b30:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 8012b32:	2380      	movs	r3, #128	@ 0x80
 8012b34:	05db      	lsls	r3, r3, #23
 8012b36:	22fa      	movs	r2, #250	@ 0xfa
 8012b38:	0112      	lsls	r2, r2, #4
 8012b3a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012b3c:	2380      	movs	r3, #128	@ 0x80
 8012b3e:	05db      	lsls	r3, r3, #23
 8012b40:	22fa      	movs	r2, #250	@ 0xfa
 8012b42:	0112      	lsls	r2, r2, #4
 8012b44:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012b46:	46c0      	nop			@ (mov r8, r8)
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd80      	pop	{r7, pc}
 8012b4c:	2000214e 	.word	0x2000214e

08012b50 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff() {
 8012b50:	b580      	push	{r7, lr}
 8012b52:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 8012b54:	23fa      	movs	r3, #250	@ 0xfa
 8012b56:	011a      	lsls	r2, r3, #4
 8012b58:	23fa      	movs	r3, #250	@ 0xfa
 8012b5a:	0119      	lsls	r1, r3, #4
 8012b5c:	23fa      	movs	r3, #250	@ 0xfa
 8012b5e:	011b      	lsls	r3, r3, #4
 8012b60:	0018      	movs	r0, r3
 8012b62:	f7ff fe87 	bl	8012874 <SetStatusLED>
  SetDBLED(false,false,false);
 8012b66:	2200      	movs	r2, #0
 8012b68:	2100      	movs	r1, #0
 8012b6a:	2000      	movs	r0, #0
 8012b6c:	f7ff feb0 	bl	80128d0 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 8012b70:	23fa      	movs	r3, #250	@ 0xfa
 8012b72:	011a      	lsls	r2, r3, #4
 8012b74:	23fa      	movs	r3, #250	@ 0xfa
 8012b76:	0119      	lsls	r1, r3, #4
 8012b78:	23fa      	movs	r3, #250	@ 0xfa
 8012b7a:	011b      	lsls	r3, r3, #4
 8012b7c:	0018      	movs	r0, r3
 8012b7e:	f7ff feeb 	bl	8012958 <SetVocLED>
return;
 8012b82:	46c0      	nop			@ (mov r8, r8)
}
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bd80      	pop	{r7, pc}

08012b88 <SetAllREDLED>:

void SetAllREDLED() {
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  SetLEDsOff();
 8012b8c:	f7ff ffe0 	bl	8012b50 <SetLEDsOff>
  TIM2 -> CCR1 = LED_ON;
 8012b90:	2380      	movs	r3, #128	@ 0x80
 8012b92:	05db      	lsls	r3, r3, #23
 8012b94:	4a20      	ldr	r2, [pc, #128]	@ (8012c18 <SetAllREDLED+0x90>)
 8012b96:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012b98:	2380      	movs	r3, #128	@ 0x80
 8012b9a:	05db      	lsls	r3, r3, #23
 8012b9c:	22fa      	movs	r2, #250	@ 0xfa
 8012b9e:	0112      	lsls	r2, r2, #4
 8012ba0:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012ba2:	2380      	movs	r3, #128	@ 0x80
 8012ba4:	05db      	lsls	r3, r3, #23
 8012ba6:	22fa      	movs	r2, #250	@ 0xfa
 8012ba8:	0112      	lsls	r2, r2, #4
 8012baa:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 8012bac:	4b1b      	ldr	r3, [pc, #108]	@ (8012c1c <SetAllREDLED+0x94>)
 8012bae:	4a1a      	ldr	r2, [pc, #104]	@ (8012c18 <SetAllREDLED+0x90>)
 8012bb0:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8012c1c <SetAllREDLED+0x94>)
 8012bb4:	22fa      	movs	r2, #250	@ 0xfa
 8012bb6:	0112      	lsls	r2, r2, #4
 8012bb8:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8012bba:	4b18      	ldr	r3, [pc, #96]	@ (8012c1c <SetAllREDLED+0x94>)
 8012bbc:	22fa      	movs	r2, #250	@ 0xfa
 8012bbe:	0112      	lsls	r2, r2, #4
 8012bc0:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012bc2:	4b17      	ldr	r3, [pc, #92]	@ (8012c20 <SetAllREDLED+0x98>)
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	2101      	movs	r1, #1
 8012bc8:	0018      	movs	r0, r3
 8012bca:	f003 f95c 	bl	8015e86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012bce:	2380      	movs	r3, #128	@ 0x80
 8012bd0:	005b      	lsls	r3, r3, #1
 8012bd2:	4813      	ldr	r0, [pc, #76]	@ (8012c20 <SetAllREDLED+0x98>)
 8012bd4:	2201      	movs	r2, #1
 8012bd6:	0019      	movs	r1, r3
 8012bd8:	f003 f955 	bl	8015e86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012bdc:	2380      	movs	r3, #128	@ 0x80
 8012bde:	009b      	lsls	r3, r3, #2
 8012be0:	480f      	ldr	r0, [pc, #60]	@ (8012c20 <SetAllREDLED+0x98>)
 8012be2:	2201      	movs	r2, #1
 8012be4:	0019      	movs	r1, r3
 8012be6:	f003 f94e 	bl	8015e86 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8012bea:	23fa      	movs	r3, #250	@ 0xfa
 8012bec:	005b      	lsls	r3, r3, #1
 8012bee:	0018      	movs	r0, r3
 8012bf0:	f001 feec 	bl	80149cc <HAL_Delay>
  TIM2 -> CCR1 = LED_OFF;
 8012bf4:	2380      	movs	r3, #128	@ 0x80
 8012bf6:	05db      	lsls	r3, r3, #23
 8012bf8:	22fa      	movs	r2, #250	@ 0xfa
 8012bfa:	0112      	lsls	r2, r2, #4
 8012bfc:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR1 = LED_OFF;
 8012bfe:	4b07      	ldr	r3, [pc, #28]	@ (8012c1c <SetAllREDLED+0x94>)
 8012c00:	22fa      	movs	r2, #250	@ 0xfa
 8012c02:	0112      	lsls	r2, r2, #4
 8012c04:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true); //red off
 8012c06:	4b06      	ldr	r3, [pc, #24]	@ (8012c20 <SetAllREDLED+0x98>)
 8012c08:	2201      	movs	r2, #1
 8012c0a:	2101      	movs	r1, #1
 8012c0c:	0018      	movs	r0, r3
 8012c0e:	f003 f93a 	bl	8015e86 <HAL_GPIO_WritePin>
}
 8012c12:	46c0      	nop			@ (mov r8, r8)
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd80      	pop	{r7, pc}
 8012c18:	00000bb8 	.word	0x00000bb8
 8012c1c:	40000400 	.word	0x40000400
 8012c20:	50000400 	.word	0x50000400

08012c24 <WalkAllRedLED>:

void WalkAllRedLED() {
 8012c24:	b580      	push	{r7, lr}
 8012c26:	af00      	add	r7, sp, #0
// Fire all LEDs sequential to red independent of usertoggle or power status and reboot
  SetLEDsOff();
 8012c28:	f7ff ff92 	bl	8012b50 <SetLEDsOff>
  HAL_Delay(100);
 8012c2c:	2064      	movs	r0, #100	@ 0x64
 8012c2e:	f001 fecd 	bl	80149cc <HAL_Delay>

  TIM3 -> CCR1 = LED_ON;
 8012c32:	4b24      	ldr	r3, [pc, #144]	@ (8012cc4 <WalkAllRedLED+0xa0>)
 8012c34:	4a24      	ldr	r2, [pc, #144]	@ (8012cc8 <WalkAllRedLED+0xa4>)
 8012c36:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012c38:	4b22      	ldr	r3, [pc, #136]	@ (8012cc4 <WalkAllRedLED+0xa0>)
 8012c3a:	22fa      	movs	r2, #250	@ 0xfa
 8012c3c:	0112      	lsls	r2, r2, #4
 8012c3e:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8012c40:	4b20      	ldr	r3, [pc, #128]	@ (8012cc4 <WalkAllRedLED+0xa0>)
 8012c42:	22fa      	movs	r2, #250	@ 0xfa
 8012c44:	0112      	lsls	r2, r2, #4
 8012c46:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(100);
 8012c48:	2064      	movs	r0, #100	@ 0x64
 8012c4a:	f001 febf 	bl	80149cc <HAL_Delay>
  TIM3 -> CCR1 = LED_OFF;
 8012c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8012cc4 <WalkAllRedLED+0xa0>)
 8012c50:	22fa      	movs	r2, #250	@ 0xfa
 8012c52:	0112      	lsls	r2, r2, #4
 8012c54:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012c56:	4b1d      	ldr	r3, [pc, #116]	@ (8012ccc <WalkAllRedLED+0xa8>)
 8012c58:	2200      	movs	r2, #0
 8012c5a:	2101      	movs	r1, #1
 8012c5c:	0018      	movs	r0, r3
 8012c5e:	f003 f912 	bl	8015e86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012c62:	2380      	movs	r3, #128	@ 0x80
 8012c64:	005b      	lsls	r3, r3, #1
 8012c66:	4819      	ldr	r0, [pc, #100]	@ (8012ccc <WalkAllRedLED+0xa8>)
 8012c68:	2201      	movs	r2, #1
 8012c6a:	0019      	movs	r1, r3
 8012c6c:	f003 f90b 	bl	8015e86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012c70:	2380      	movs	r3, #128	@ 0x80
 8012c72:	009b      	lsls	r3, r3, #2
 8012c74:	4815      	ldr	r0, [pc, #84]	@ (8012ccc <WalkAllRedLED+0xa8>)
 8012c76:	2201      	movs	r2, #1
 8012c78:	0019      	movs	r1, r3
 8012c7a:	f003 f904 	bl	8015e86 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8012c7e:	2064      	movs	r0, #100	@ 0x64
 8012c80:	f001 fea4 	bl	80149cc <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true); //red off
 8012c84:	4b11      	ldr	r3, [pc, #68]	@ (8012ccc <WalkAllRedLED+0xa8>)
 8012c86:	2201      	movs	r2, #1
 8012c88:	2101      	movs	r1, #1
 8012c8a:	0018      	movs	r0, r3
 8012c8c:	f003 f8fb 	bl	8015e86 <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = LED_ON;
 8012c90:	2380      	movs	r3, #128	@ 0x80
 8012c92:	05db      	lsls	r3, r3, #23
 8012c94:	4a0c      	ldr	r2, [pc, #48]	@ (8012cc8 <WalkAllRedLED+0xa4>)
 8012c96:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012c98:	2380      	movs	r3, #128	@ 0x80
 8012c9a:	05db      	lsls	r3, r3, #23
 8012c9c:	22fa      	movs	r2, #250	@ 0xfa
 8012c9e:	0112      	lsls	r2, r2, #4
 8012ca0:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012ca2:	2380      	movs	r3, #128	@ 0x80
 8012ca4:	05db      	lsls	r3, r3, #23
 8012ca6:	22fa      	movs	r2, #250	@ 0xfa
 8012ca8:	0112      	lsls	r2, r2, #4
 8012caa:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_Delay(100);
 8012cac:	2064      	movs	r0, #100	@ 0x64
 8012cae:	f001 fe8d 	bl	80149cc <HAL_Delay>
  TIM2 -> CCR1 = LED_OFF;
 8012cb2:	2380      	movs	r3, #128	@ 0x80
 8012cb4:	05db      	lsls	r3, r3, #23
 8012cb6:	22fa      	movs	r2, #250	@ 0xfa
 8012cb8:	0112      	lsls	r2, r2, #4
 8012cba:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8012cbc:	46c0      	nop			@ (mov r8, r8)
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	bd80      	pop	{r7, pc}
 8012cc2:	46c0      	nop			@ (mov r8, r8)
 8012cc4:	40000400 	.word	0x40000400
 8012cc8:	00000bb8 	.word	0x00000bb8
 8012ccc:	50000400 	.word	0x50000400

08012cd0 <SetAllBlueLED>:

void SetAllBlueLED() {
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b082      	sub	sp, #8
 8012cd4:	af00      	add	r7, sp, #0
// Fire all LEDs to blue indicating barometric sensor in error independent of usertoggle or power status and reboot
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012cd6:	1dfb      	adds	r3, r7, #7
 8012cd8:	2200      	movs	r2, #0
 8012cda:	701a      	strb	r2, [r3, #0]
 8012cdc:	e040      	b.n	8012d60 <SetAllBlueLED+0x90>
    TIM2 -> CCR1 = LED_OFF;
 8012cde:	2380      	movs	r3, #128	@ 0x80
 8012ce0:	05db      	lsls	r3, r3, #23
 8012ce2:	22fa      	movs	r2, #250	@ 0xfa
 8012ce4:	0112      	lsls	r2, r2, #4
 8012ce6:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012ce8:	2380      	movs	r3, #128	@ 0x80
 8012cea:	05db      	lsls	r3, r3, #23
 8012cec:	22fa      	movs	r2, #250	@ 0xfa
 8012cee:	0112      	lsls	r2, r2, #4
 8012cf0:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = LED_ON;
 8012cf2:	2380      	movs	r3, #128	@ 0x80
 8012cf4:	05db      	lsls	r3, r3, #23
 8012cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8012d74 <SetAllBlueLED+0xa4>)
 8012cf8:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR1 = LED_OFF;
 8012cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8012d78 <SetAllBlueLED+0xa8>)
 8012cfc:	22fa      	movs	r2, #250	@ 0xfa
 8012cfe:	0112      	lsls	r2, r2, #4
 8012d00:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = LED_OFF;
 8012d02:	4b1d      	ldr	r3, [pc, #116]	@ (8012d78 <SetAllBlueLED+0xa8>)
 8012d04:	22fa      	movs	r2, #250	@ 0xfa
 8012d06:	0112      	lsls	r2, r2, #4
 8012d08:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = LED_ON;
 8012d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8012d78 <SetAllBlueLED+0xa8>)
 8012d0c:	4a19      	ldr	r2, [pc, #100]	@ (8012d74 <SetAllBlueLED+0xa4>)
 8012d0e:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true);   //red off
 8012d10:	4b1a      	ldr	r3, [pc, #104]	@ (8012d7c <SetAllBlueLED+0xac>)
 8012d12:	2201      	movs	r2, #1
 8012d14:	2101      	movs	r1, #1
 8012d16:	0018      	movs	r0, r3
 8012d18:	f003 f8b5 	bl	8015e86 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012d1c:	2380      	movs	r3, #128	@ 0x80
 8012d1e:	005b      	lsls	r3, r3, #1
 8012d20:	4816      	ldr	r0, [pc, #88]	@ (8012d7c <SetAllBlueLED+0xac>)
 8012d22:	2201      	movs	r2, #1
 8012d24:	0019      	movs	r1, r3
 8012d26:	f003 f8ae 	bl	8015e86 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, false);  // blue on
 8012d2a:	2380      	movs	r3, #128	@ 0x80
 8012d2c:	009b      	lsls	r3, r3, #2
 8012d2e:	4813      	ldr	r0, [pc, #76]	@ (8012d7c <SetAllBlueLED+0xac>)
 8012d30:	2200      	movs	r2, #0
 8012d32:	0019      	movs	r1, r3
 8012d34:	f003 f8a7 	bl	8015e86 <HAL_GPIO_WritePin>
    HAL_Delay(250);
 8012d38:	20fa      	movs	r0, #250	@ 0xfa
 8012d3a:	f001 fe47 	bl	80149cc <HAL_Delay>
    TIM2 -> CCR4 = LED_OFF;
 8012d3e:	2380      	movs	r3, #128	@ 0x80
 8012d40:	05db      	lsls	r3, r3, #23
 8012d42:	22fa      	movs	r2, #250	@ 0xfa
 8012d44:	0112      	lsls	r2, r2, #4
 8012d46:	641a      	str	r2, [r3, #64]	@ 0x40
//    TIM3 -> CCR3 = LED_OFF;  // do not switch off blue VOC led
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);  // blue off
 8012d48:	2380      	movs	r3, #128	@ 0x80
 8012d4a:	009b      	lsls	r3, r3, #2
 8012d4c:	480b      	ldr	r0, [pc, #44]	@ (8012d7c <SetAllBlueLED+0xac>)
 8012d4e:	2201      	movs	r2, #1
 8012d50:	0019      	movs	r1, r3
 8012d52:	f003 f898 	bl	8015e86 <HAL_GPIO_WritePin>
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012d56:	1dfb      	adds	r3, r7, #7
 8012d58:	781a      	ldrb	r2, [r3, #0]
 8012d5a:	1dfb      	adds	r3, r7, #7
 8012d5c:	3201      	adds	r2, #1
 8012d5e:	701a      	strb	r2, [r3, #0]
 8012d60:	1dfb      	adds	r3, r7, #7
 8012d62:	781b      	ldrb	r3, [r3, #0]
 8012d64:	2b02      	cmp	r3, #2
 8012d66:	d9ba      	bls.n	8012cde <SetAllBlueLED+0xe>
  }
}
 8012d68:	46c0      	nop			@ (mov r8, r8)
 8012d6a:	46c0      	nop			@ (mov r8, r8)
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	b002      	add	sp, #8
 8012d70:	bd80      	pop	{r7, pc}
 8012d72:	46c0      	nop			@ (mov r8, r8)
 8012d74:	00000bb8 	.word	0x00000bb8
 8012d78:	40000400 	.word	0x40000400
 8012d7c:	50000400 	.word	0x50000400

08012d80 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 8012d80:	b5b0      	push	{r4, r5, r7, lr}
 8012d82:	b082      	sub	sp, #8
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	0002      	movs	r2, r0
 8012d88:	1dbb      	adds	r3, r7, #6
 8012d8a:	801a      	strh	r2, [r3, #0]
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 8012d8c:	1dbb      	adds	r3, r7, #6
 8012d8e:	881b      	ldrh	r3, [r3, #0]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d05a      	beq.n	8012e4a <SetVOCindicator+0xca>
 8012d94:	1dbb      	adds	r3, r7, #6
 8012d96:	881b      	ldrh	r3, [r3, #0]
 8012d98:	2b64      	cmp	r3, #100	@ 0x64
 8012d9a:	d856      	bhi.n	8012e4a <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 8012d9c:	1dbb      	adds	r3, r7, #6
 8012d9e:	881b      	ldrh	r3, [r3, #0]
 8012da0:	0018      	movs	r0, r3
 8012da2:	f7f0 fd25 	bl	80037f0 <__aeabi_i2d>
 8012da6:	2200      	movs	r2, #0
 8012da8:	4b5f      	ldr	r3, [pc, #380]	@ (8012f28 <SetVOCindicator+0x1a8>)
 8012daa:	f7ef f999 	bl	80020e0 <__aeabi_ddiv>
 8012dae:	0002      	movs	r2, r0
 8012db0:	000b      	movs	r3, r1
 8012db2:	2000      	movs	r0, #0
 8012db4:	495d      	ldr	r1, [pc, #372]	@ (8012f2c <SetVOCindicator+0x1ac>)
 8012db6:	f7f0 f8b3 	bl	8002f20 <__aeabi_dsub>
 8012dba:	0002      	movs	r2, r0
 8012dbc:	000b      	movs	r3, r1
 8012dbe:	0014      	movs	r4, r2
 8012dc0:	001d      	movs	r5, r3
 8012dc2:	4b5b      	ldr	r3, [pc, #364]	@ (8012f30 <SetVOCindicator+0x1b0>)
 8012dc4:	881b      	ldrh	r3, [r3, #0]
 8012dc6:	0018      	movs	r0, r3
 8012dc8:	f7f0 fd12 	bl	80037f0 <__aeabi_i2d>
 8012dcc:	0002      	movs	r2, r0
 8012dce:	000b      	movs	r3, r1
 8012dd0:	0020      	movs	r0, r4
 8012dd2:	0029      	movs	r1, r5
 8012dd4:	f7ef fdbe 	bl	8002954 <__aeabi_dmul>
 8012dd8:	0002      	movs	r2, r0
 8012dda:	000b      	movs	r3, r1
 8012ddc:	0010      	movs	r0, r2
 8012dde:	0019      	movs	r1, r3
 8012de0:	f7ed fc34 	bl	800064c <__aeabi_d2uiz>
 8012de4:	0003      	movs	r3, r0
 8012de6:	b29a      	uxth	r2, r3
 8012de8:	4b52      	ldr	r3, [pc, #328]	@ (8012f34 <SetVOCindicator+0x1b4>)
 8012dea:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 8012dec:	1dbb      	adds	r3, r7, #6
 8012dee:	881b      	ldrh	r3, [r3, #0]
 8012df0:	0018      	movs	r0, r3
 8012df2:	f7f0 fcfd 	bl	80037f0 <__aeabi_i2d>
 8012df6:	2200      	movs	r2, #0
 8012df8:	4b4b      	ldr	r3, [pc, #300]	@ (8012f28 <SetVOCindicator+0x1a8>)
 8012dfa:	f7ef f971 	bl	80020e0 <__aeabi_ddiv>
 8012dfe:	0002      	movs	r2, r0
 8012e00:	000b      	movs	r3, r1
 8012e02:	0014      	movs	r4, r2
 8012e04:	001d      	movs	r5, r3
 8012e06:	4b4a      	ldr	r3, [pc, #296]	@ (8012f30 <SetVOCindicator+0x1b0>)
 8012e08:	881b      	ldrh	r3, [r3, #0]
 8012e0a:	0018      	movs	r0, r3
 8012e0c:	f7f0 fcf0 	bl	80037f0 <__aeabi_i2d>
 8012e10:	0002      	movs	r2, r0
 8012e12:	000b      	movs	r3, r1
 8012e14:	0020      	movs	r0, r4
 8012e16:	0029      	movs	r1, r5
 8012e18:	f7ef fd9c 	bl	8002954 <__aeabi_dmul>
 8012e1c:	0002      	movs	r2, r0
 8012e1e:	000b      	movs	r3, r1
 8012e20:	0010      	movs	r0, r2
 8012e22:	0019      	movs	r1, r3
 8012e24:	f7ed fc12 	bl	800064c <__aeabi_d2uiz>
 8012e28:	0003      	movs	r3, r0
 8012e2a:	b29a      	uxth	r2, r3
 8012e2c:	4b42      	ldr	r3, [pc, #264]	@ (8012f38 <SetVOCindicator+0x1b8>)
 8012e2e:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 8012e30:	4b3f      	ldr	r3, [pc, #252]	@ (8012f30 <SetVOCindicator+0x1b0>)
 8012e32:	881a      	ldrh	r2, [r3, #0]
 8012e34:	4b41      	ldr	r3, [pc, #260]	@ (8012f3c <SetVOCindicator+0x1bc>)
 8012e36:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012e38:	4b40      	ldr	r3, [pc, #256]	@ (8012f3c <SetVOCindicator+0x1bc>)
 8012e3a:	8818      	ldrh	r0, [r3, #0]
 8012e3c:	4b3d      	ldr	r3, [pc, #244]	@ (8012f34 <SetVOCindicator+0x1b4>)
 8012e3e:	8819      	ldrh	r1, [r3, #0]
 8012e40:	4b3d      	ldr	r3, [pc, #244]	@ (8012f38 <SetVOCindicator+0x1b8>)
 8012e42:	881b      	ldrh	r3, [r3, #0]
 8012e44:	001a      	movs	r2, r3
 8012e46:	f7ff fd87 	bl	8012958 <SetVocLED>
  }
  if(VOCi > 100){
 8012e4a:	1dbb      	adds	r3, r7, #6
 8012e4c:	881b      	ldrh	r3, [r3, #0]
 8012e4e:	2b64      	cmp	r3, #100	@ 0x64
 8012e50:	d966      	bls.n	8012f20 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 8012e52:	1dbb      	adds	r3, r7, #6
 8012e54:	881b      	ldrh	r3, [r3, #0]
 8012e56:	0018      	movs	r0, r3
 8012e58:	f7f0 fcca 	bl	80037f0 <__aeabi_i2d>
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	4b32      	ldr	r3, [pc, #200]	@ (8012f28 <SetVOCindicator+0x1a8>)
 8012e60:	f7f0 f85e 	bl	8002f20 <__aeabi_dsub>
 8012e64:	0002      	movs	r2, r0
 8012e66:	000b      	movs	r3, r1
 8012e68:	0010      	movs	r0, r2
 8012e6a:	0019      	movs	r1, r3
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	4b34      	ldr	r3, [pc, #208]	@ (8012f40 <SetVOCindicator+0x1c0>)
 8012e70:	f7ef f936 	bl	80020e0 <__aeabi_ddiv>
 8012e74:	0002      	movs	r2, r0
 8012e76:	000b      	movs	r3, r1
 8012e78:	0014      	movs	r4, r2
 8012e7a:	001d      	movs	r5, r3
 8012e7c:	4b2c      	ldr	r3, [pc, #176]	@ (8012f30 <SetVOCindicator+0x1b0>)
 8012e7e:	881b      	ldrh	r3, [r3, #0]
 8012e80:	0018      	movs	r0, r3
 8012e82:	f7f0 fcb5 	bl	80037f0 <__aeabi_i2d>
 8012e86:	0002      	movs	r2, r0
 8012e88:	000b      	movs	r3, r1
 8012e8a:	0020      	movs	r0, r4
 8012e8c:	0029      	movs	r1, r5
 8012e8e:	f7ef fd61 	bl	8002954 <__aeabi_dmul>
 8012e92:	0002      	movs	r2, r0
 8012e94:	000b      	movs	r3, r1
 8012e96:	0010      	movs	r0, r2
 8012e98:	0019      	movs	r1, r3
 8012e9a:	f7ed fbd7 	bl	800064c <__aeabi_d2uiz>
 8012e9e:	0003      	movs	r3, r0
 8012ea0:	b29a      	uxth	r2, r3
 8012ea2:	4b24      	ldr	r3, [pc, #144]	@ (8012f34 <SetVOCindicator+0x1b4>)
 8012ea4:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 8012ea6:	1dbb      	adds	r3, r7, #6
 8012ea8:	881b      	ldrh	r3, [r3, #0]
 8012eaa:	0018      	movs	r0, r3
 8012eac:	f7f0 fca0 	bl	80037f0 <__aeabi_i2d>
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8012f28 <SetVOCindicator+0x1a8>)
 8012eb4:	f7f0 f834 	bl	8002f20 <__aeabi_dsub>
 8012eb8:	0002      	movs	r2, r0
 8012eba:	000b      	movs	r3, r1
 8012ebc:	0010      	movs	r0, r2
 8012ebe:	0019      	movs	r1, r3
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8012f40 <SetVOCindicator+0x1c0>)
 8012ec4:	f7ef f90c 	bl	80020e0 <__aeabi_ddiv>
 8012ec8:	0002      	movs	r2, r0
 8012eca:	000b      	movs	r3, r1
 8012ecc:	2000      	movs	r0, #0
 8012ece:	4917      	ldr	r1, [pc, #92]	@ (8012f2c <SetVOCindicator+0x1ac>)
 8012ed0:	f7f0 f826 	bl	8002f20 <__aeabi_dsub>
 8012ed4:	0002      	movs	r2, r0
 8012ed6:	000b      	movs	r3, r1
 8012ed8:	0014      	movs	r4, r2
 8012eda:	001d      	movs	r5, r3
 8012edc:	4b14      	ldr	r3, [pc, #80]	@ (8012f30 <SetVOCindicator+0x1b0>)
 8012ede:	881b      	ldrh	r3, [r3, #0]
 8012ee0:	0018      	movs	r0, r3
 8012ee2:	f7f0 fc85 	bl	80037f0 <__aeabi_i2d>
 8012ee6:	0002      	movs	r2, r0
 8012ee8:	000b      	movs	r3, r1
 8012eea:	0020      	movs	r0, r4
 8012eec:	0029      	movs	r1, r5
 8012eee:	f7ef fd31 	bl	8002954 <__aeabi_dmul>
 8012ef2:	0002      	movs	r2, r0
 8012ef4:	000b      	movs	r3, r1
 8012ef6:	0010      	movs	r0, r2
 8012ef8:	0019      	movs	r1, r3
 8012efa:	f7ed fba7 	bl	800064c <__aeabi_d2uiz>
 8012efe:	0003      	movs	r3, r0
 8012f00:	b29a      	uxth	r2, r3
 8012f02:	4b0e      	ldr	r3, [pc, #56]	@ (8012f3c <SetVOCindicator+0x1bc>)
 8012f04:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 8012f06:	4b0a      	ldr	r3, [pc, #40]	@ (8012f30 <SetVOCindicator+0x1b0>)
 8012f08:	881a      	ldrh	r2, [r3, #0]
 8012f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8012f38 <SetVOCindicator+0x1b8>)
 8012f0c:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8012f3c <SetVOCindicator+0x1bc>)
 8012f10:	8818      	ldrh	r0, [r3, #0]
 8012f12:	4b08      	ldr	r3, [pc, #32]	@ (8012f34 <SetVOCindicator+0x1b4>)
 8012f14:	8819      	ldrh	r1, [r3, #0]
 8012f16:	4b08      	ldr	r3, [pc, #32]	@ (8012f38 <SetVOCindicator+0x1b8>)
 8012f18:	881b      	ldrh	r3, [r3, #0]
 8012f1a:	001a      	movs	r2, r3
 8012f1c:	f7ff fd1c 	bl	8012958 <SetVocLED>
  }

}
 8012f20:	46c0      	nop			@ (mov r8, r8)
 8012f22:	46bd      	mov	sp, r7
 8012f24:	b002      	add	sp, #8
 8012f26:	bdb0      	pop	{r4, r5, r7, pc}
 8012f28:	40590000 	.word	0x40590000
 8012f2c:	3ff00000 	.word	0x3ff00000
 8012f30:	200000ea 	.word	0x200000ea
 8012f34:	20002160 	.word	0x20002160
 8012f38:	20002162 	.word	0x20002162
 8012f3c:	20002164 	.word	0x20002164
 8012f40:	40790000 	.word	0x40790000

08012f44 <powerCheck>:

void powerCheck(){
 8012f44:	b580      	push	{r7, lr}
 8012f46:	af00      	add	r7, sp, #0
  batteryChargeCheck();
 8012f48:	f7ff fbda 	bl	8012700 <batteryChargeCheck>
  if(Check_USB_PowerOn()){
 8012f4c:	f7f6 fed0 	bl	8009cf0 <Check_USB_PowerOn>
 8012f50:	1e03      	subs	r3, r0, #0
 8012f52:	d002      	beq.n	8012f5a <powerCheck+0x16>
    batteryStatus = USB_PLUGGED_IN;
 8012f54:	4b02      	ldr	r3, [pc, #8]	@ (8012f60 <powerCheck+0x1c>)
 8012f56:	2204      	movs	r2, #4
 8012f58:	701a      	strb	r2, [r3, #0]
  }
}
 8012f5a:	46c0      	nop			@ (mov r8, r8)
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}
 8012f60:	2000215d 	.word	0x2000215d

08012f64 <powerDisplay>:

void powerDisplay(){
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b082      	sub	sp, #8
 8012f68:	af02      	add	r7, sp, #8
  if(batteryStatus == USB_PLUGGED_IN){
 8012f6a:	4b32      	ldr	r3, [pc, #200]	@ (8013034 <powerDisplay+0xd0>)
 8012f6c:	781b      	ldrb	r3, [r3, #0]
 8012f6e:	2b04      	cmp	r3, #4
 8012f70:	d10f      	bne.n	8012f92 <powerDisplay+0x2e>
    Debug("USB power detected, battery: %.03fV", ReadBatteryVoltage());
 8012f72:	f7f6 fe07 	bl	8009b84 <ReadBatteryVoltage>
 8012f76:	1c03      	adds	r3, r0, #0
 8012f78:	1c18      	adds	r0, r3, #0
 8012f7a:	f7f0 fc8b 	bl	8003894 <__aeabi_f2d>
 8012f7e:	0002      	movs	r2, r0
 8012f80:	000b      	movs	r3, r1
 8012f82:	482d      	ldr	r0, [pc, #180]	@ (8013038 <powerDisplay+0xd4>)
 8012f84:	492d      	ldr	r1, [pc, #180]	@ (801303c <powerDisplay+0xd8>)
 8012f86:	9200      	str	r2, [sp, #0]
 8012f88:	9301      	str	r3, [sp, #4]
 8012f8a:	0002      	movs	r2, r0
 8012f8c:	2003      	movs	r0, #3
 8012f8e:	f000 ff93 	bl	8013eb8 <CreateLine>
  }
  if(batteryStatus == BATTERY_FULL){
 8012f92:	4b28      	ldr	r3, [pc, #160]	@ (8013034 <powerDisplay+0xd0>)
 8012f94:	781b      	ldrb	r3, [r3, #0]
 8012f96:	2b03      	cmp	r3, #3
 8012f98:	d105      	bne.n	8012fa6 <powerDisplay+0x42>
    Debug("Battery fully charged");
 8012f9a:	4a29      	ldr	r2, [pc, #164]	@ (8013040 <powerDisplay+0xdc>)
 8012f9c:	4b27      	ldr	r3, [pc, #156]	@ (801303c <powerDisplay+0xd8>)
 8012f9e:	0019      	movs	r1, r3
 8012fa0:	2003      	movs	r0, #3
 8012fa2:	f000 ff89 	bl	8013eb8 <CreateLine>
  }
  if(batteryStatus == BATTERY_GOOD){
 8012fa6:	4b23      	ldr	r3, [pc, #140]	@ (8013034 <powerDisplay+0xd0>)
 8012fa8:	781b      	ldrb	r3, [r3, #0]
 8012faa:	2b02      	cmp	r3, #2
 8012fac:	d105      	bne.n	8012fba <powerDisplay+0x56>
    Debug("Battery status good");
 8012fae:	4a25      	ldr	r2, [pc, #148]	@ (8013044 <powerDisplay+0xe0>)
 8012fb0:	4b22      	ldr	r3, [pc, #136]	@ (801303c <powerDisplay+0xd8>)
 8012fb2:	0019      	movs	r1, r3
 8012fb4:	2003      	movs	r0, #3
 8012fb6:	f000 ff7f 	bl	8013eb8 <CreateLine>
  }
  if(batteryStatus == BATTERY_LOW){
 8012fba:	4b1e      	ldr	r3, [pc, #120]	@ (8013034 <powerDisplay+0xd0>)
 8012fbc:	781b      	ldrb	r3, [r3, #0]
 8012fbe:	2b01      	cmp	r3, #1
 8012fc0:	d105      	bne.n	8012fce <powerDisplay+0x6a>
    Debug("Battery status low");
 8012fc2:	4a21      	ldr	r2, [pc, #132]	@ (8013048 <powerDisplay+0xe4>)
 8012fc4:	4b1d      	ldr	r3, [pc, #116]	@ (801303c <powerDisplay+0xd8>)
 8012fc6:	0019      	movs	r1, r3
 8012fc8:	2003      	movs	r0, #3
 8012fca:	f000 ff75 	bl	8013eb8 <CreateLine>
  }
  if(batteryStatus == BATTERY_CRITICAL){
 8012fce:	4b19      	ldr	r3, [pc, #100]	@ (8013034 <powerDisplay+0xd0>)
 8012fd0:	781b      	ldrb	r3, [r3, #0]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d105      	bne.n	8012fe2 <powerDisplay+0x7e>
    Debug("Battery is critical, stop processes");
 8012fd6:	4a1d      	ldr	r2, [pc, #116]	@ (801304c <powerDisplay+0xe8>)
 8012fd8:	4b18      	ldr	r3, [pc, #96]	@ (801303c <powerDisplay+0xd8>)
 8012fda:	0019      	movs	r1, r3
 8012fdc:	2003      	movs	r0, #3
 8012fde:	f000 ff6b 	bl	8013eb8 <CreateLine>
  }
  batteryChargeMode = Read_Charge_Status();
 8012fe2:	f7f6 fea3 	bl	8009d2c <Read_Charge_Status>
 8012fe6:	0003      	movs	r3, r0
 8012fe8:	001a      	movs	r2, r3
 8012fea:	4b19      	ldr	r3, [pc, #100]	@ (8013050 <powerDisplay+0xec>)
 8012fec:	701a      	strb	r2, [r3, #0]
  switch (batteryChargeMode) {
 8012fee:	4b18      	ldr	r3, [pc, #96]	@ (8013050 <powerDisplay+0xec>)
 8012ff0:	781b      	ldrb	r3, [r3, #0]
 8012ff2:	2b02      	cmp	r3, #2
 8012ff4:	d013      	beq.n	801301e <powerDisplay+0xba>
 8012ff6:	dc19      	bgt.n	801302c <powerDisplay+0xc8>
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d002      	beq.n	8013002 <powerDisplay+0x9e>
 8012ffc:	2b01      	cmp	r3, #1
 8012ffe:	d007      	beq.n	8013010 <powerDisplay+0xac>
  case CHARGING_FULL:
    Debug("Battery full, charging off");
    break;
  }

}
 8013000:	e014      	b.n	801302c <powerDisplay+0xc8>
    Debug("Battery charging off");
 8013002:	4a14      	ldr	r2, [pc, #80]	@ (8013054 <powerDisplay+0xf0>)
 8013004:	4b0d      	ldr	r3, [pc, #52]	@ (801303c <powerDisplay+0xd8>)
 8013006:	0019      	movs	r1, r3
 8013008:	2003      	movs	r0, #3
 801300a:	f000 ff55 	bl	8013eb8 <CreateLine>
    break;
 801300e:	e00d      	b.n	801302c <powerDisplay+0xc8>
    Debug("Battery is charging");
 8013010:	4a11      	ldr	r2, [pc, #68]	@ (8013058 <powerDisplay+0xf4>)
 8013012:	4b0a      	ldr	r3, [pc, #40]	@ (801303c <powerDisplay+0xd8>)
 8013014:	0019      	movs	r1, r3
 8013016:	2003      	movs	r0, #3
 8013018:	f000 ff4e 	bl	8013eb8 <CreateLine>
    break;
 801301c:	e006      	b.n	801302c <powerDisplay+0xc8>
    Debug("Battery full, charging off");
 801301e:	4a0f      	ldr	r2, [pc, #60]	@ (801305c <powerDisplay+0xf8>)
 8013020:	4b06      	ldr	r3, [pc, #24]	@ (801303c <powerDisplay+0xd8>)
 8013022:	0019      	movs	r1, r3
 8013024:	2003      	movs	r0, #3
 8013026:	f000 ff47 	bl	8013eb8 <CreateLine>
    break;
 801302a:	46c0      	nop			@ (mov r8, r8)
}
 801302c:	46c0      	nop			@ (mov r8, r8)
 801302e:	46bd      	mov	sp, r7
 8013030:	bd80      	pop	{r7, pc}
 8013032:	46c0      	nop			@ (mov r8, r8)
 8013034:	2000215d 	.word	0x2000215d
 8013038:	0802dc44 	.word	0x0802dc44
 801303c:	0802dc40 	.word	0x0802dc40
 8013040:	0802dc68 	.word	0x0802dc68
 8013044:	0802dc80 	.word	0x0802dc80
 8013048:	0802dc94 	.word	0x0802dc94
 801304c:	0802dca8 	.word	0x0802dca8
 8013050:	2000215c 	.word	0x2000215c
 8013054:	0802dccc 	.word	0x0802dccc
 8013058:	0802dce4 	.word	0x0802dce4
 801305c:	0802dcf8 	.word	0x0802dcf8

08013060 <configCheck>:

void configCheck(){
 8013060:	b590      	push	{r4, r7, lr}
 8013062:	b083      	sub	sp, #12
 8013064:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8013066:	f7f6 febd 	bl	8009de4 <BootButton_Pressed>
 801306a:	1e03      	subs	r3, r0, #0
 801306c:	d007      	beq.n	801307e <configCheck+0x1e>
 801306e:	f7f6 fecb 	bl	8009e08 <UserButton_Pressed>
 8013072:	1e03      	subs	r3, r0, #0
 8013074:	d003      	beq.n	801307e <configCheck+0x1e>
    configSet = true;
 8013076:	4bb5      	ldr	r3, [pc, #724]	@ (801334c <configCheck+0x2ec>)
 8013078:	2201      	movs	r2, #1
 801307a:	701a      	strb	r2, [r3, #0]
 801307c:	e00a      	b.n	8013094 <configCheck+0x34>
  }
  else{
    configSet = false;
 801307e:	4bb3      	ldr	r3, [pc, #716]	@ (801334c <configCheck+0x2ec>)
 8013080:	2200      	movs	r2, #0
 8013082:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8013084:	f001 fc98 	bl	80149b8 <HAL_GetTick>
 8013088:	0003      	movs	r3, r0
 801308a:	22fa      	movs	r2, #250	@ 0xfa
 801308c:	00d2      	lsls	r2, r2, #3
 801308e:	189a      	adds	r2, r3, r2
 8013090:	4baf      	ldr	r3, [pc, #700]	@ (8013350 <configCheck+0x2f0>)
 8013092:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8013094:	4bad      	ldr	r3, [pc, #692]	@ (801334c <configCheck+0x2ec>)
 8013096:	781b      	ldrb	r3, [r3, #0]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d00d      	beq.n	80130b8 <configCheck+0x58>
 801309c:	4bac      	ldr	r3, [pc, #688]	@ (8013350 <configCheck+0x2f0>)
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	0018      	movs	r0, r3
 80130a2:	f000 feb3 	bl	8013e0c <TimestampIsReached>
 80130a6:	1e03      	subs	r3, r0, #0
 80130a8:	d006      	beq.n	80130b8 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 80130aa:	f7f1 fe9d 	bl	8004de8 <SetConfigMode>
    SetDBLED(true, true, true);
 80130ae:	2201      	movs	r2, #1
 80130b0:	2101      	movs	r1, #1
 80130b2:	2001      	movs	r0, #1
 80130b4:	f7ff fc0c 	bl	80128d0 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 80130b8:	f7f6 fe94 	bl	8009de4 <BootButton_Pressed>
 80130bc:	0003      	movs	r3, r0
 80130be:	001a      	movs	r2, r3
 80130c0:	2301      	movs	r3, #1
 80130c2:	4053      	eors	r3, r2
 80130c4:	b2db      	uxtb	r3, r3
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d05a      	beq.n	8013180 <configCheck+0x120>
 80130ca:	f7f6 fe9d 	bl	8009e08 <UserButton_Pressed>
 80130ce:	1e03      	subs	r3, r0, #0
 80130d0:	d056      	beq.n	8013180 <configCheck+0x120>
 80130d2:	4ba0      	ldr	r3, [pc, #640]	@ (8013354 <configCheck+0x2f4>)
 80130d4:	781b      	ldrb	r3, [r3, #0]
 80130d6:	2201      	movs	r2, #1
 80130d8:	4053      	eors	r3, r2
 80130da:	b2db      	uxtb	r3, r3
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d04f      	beq.n	8013180 <configCheck+0x120>
 80130e0:	f7f1 fea2 	bl	8004e28 <GetReconfigMode>
 80130e4:	0003      	movs	r3, r0
 80130e6:	001a      	movs	r2, r3
 80130e8:	2301      	movs	r3, #1
 80130ea:	4053      	eors	r3, r2
 80130ec:	b2db      	uxtb	r3, r3
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d046      	beq.n	8013180 <configCheck+0x120>
    SetLEDsOff();
 80130f2:	f7ff fd2d 	bl	8012b50 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 80130f6:	4a98      	ldr	r2, [pc, #608]	@ (8013358 <configCheck+0x2f8>)
 80130f8:	4997      	ldr	r1, [pc, #604]	@ (8013358 <configCheck+0x2f8>)
 80130fa:	4b97      	ldr	r3, [pc, #604]	@ (8013358 <configCheck+0x2f8>)
 80130fc:	0018      	movs	r0, r3
 80130fe:	f7ff fc2b 	bl	8012958 <SetVocLED>
    HAL_Delay(1500);
 8013102:	4b96      	ldr	r3, [pc, #600]	@ (801335c <configCheck+0x2fc>)
 8013104:	0018      	movs	r0, r3
 8013106:	f001 fc61 	bl	80149cc <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 801310a:	23fa      	movs	r3, #250	@ 0xfa
 801310c:	011a      	lsls	r2, r3, #4
 801310e:	23fa      	movs	r3, #250	@ 0xfa
 8013110:	0119      	lsls	r1, r3, #4
 8013112:	23fa      	movs	r3, #250	@ 0xfa
 8013114:	011b      	lsls	r3, r3, #4
 8013116:	0018      	movs	r0, r3
 8013118:	f7ff fc1e 	bl	8012958 <SetVocLED>
    userToggle = !userToggle;
 801311c:	4b90      	ldr	r3, [pc, #576]	@ (8013360 <configCheck+0x300>)
 801311e:	781b      	ldrb	r3, [r3, #0]
 8013120:	1e5a      	subs	r2, r3, #1
 8013122:	4193      	sbcs	r3, r2
 8013124:	b2db      	uxtb	r3, r3
 8013126:	2201      	movs	r2, #1
 8013128:	4053      	eors	r3, r2
 801312a:	b2db      	uxtb	r3, r3
 801312c:	1c1a      	adds	r2, r3, #0
 801312e:	2301      	movs	r3, #1
 8013130:	4013      	ands	r3, r2
 8013132:	b2da      	uxtb	r2, r3
 8013134:	4b8a      	ldr	r3, [pc, #552]	@ (8013360 <configCheck+0x300>)
 8013136:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 8013138:	4b89      	ldr	r3, [pc, #548]	@ (8013360 <configCheck+0x300>)
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d002      	beq.n	8013146 <configCheck+0xe6>
      EnabledConnectedDevices();
 8013140:	f7fa fe3c 	bl	800ddbc <EnabledConnectedDevices>
 8013144:	e004      	b.n	8013150 <configCheck+0xf0>
    }
    else {
      deviceTimeOut = HAL_GetTick();
 8013146:	f001 fc37 	bl	80149b8 <HAL_GetTick>
 801314a:	0002      	movs	r2, r0
 801314c:	4b85      	ldr	r3, [pc, #532]	@ (8013364 <configCheck+0x304>)
 801314e:	601a      	str	r2, [r3, #0]
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 8013150:	4b83      	ldr	r3, [pc, #524]	@ (8013360 <configCheck+0x300>)
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d001      	beq.n	801315c <configCheck+0xfc>
 8013158:	4b83      	ldr	r3, [pc, #524]	@ (8013368 <configCheck+0x308>)
 801315a:	e000      	b.n	801315e <configCheck+0xfe>
 801315c:	4b83      	ldr	r3, [pc, #524]	@ (801336c <configCheck+0x30c>)
 801315e:	4a84      	ldr	r2, [pc, #528]	@ (8013370 <configCheck+0x310>)
 8013160:	4984      	ldr	r1, [pc, #528]	@ (8013374 <configCheck+0x314>)
 8013162:	2003      	movs	r0, #3
 8013164:	f000 fea8 	bl	8013eb8 <CreateLine>
    userbuttonHeld = true;
 8013168:	4b7a      	ldr	r3, [pc, #488]	@ (8013354 <configCheck+0x2f4>)
 801316a:	2201      	movs	r2, #1
 801316c:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 801316e:	f001 fc23 	bl	80149b8 <HAL_GetTick>
 8013172:	0003      	movs	r3, r0
 8013174:	22fa      	movs	r2, #250	@ 0xfa
 8013176:	00d2      	lsls	r2, r2, #3
 8013178:	189a      	adds	r2, r3, r2
 801317a:	4b7f      	ldr	r3, [pc, #508]	@ (8013378 <configCheck+0x318>)
 801317c:	601a      	str	r2, [r3, #0]
 801317e:	e002      	b.n	8013186 <configCheck+0x126>
  }
  else {
    userbuttonHeld = false;
 8013180:	4b74      	ldr	r3, [pc, #464]	@ (8013354 <configCheck+0x2f4>)
 8013182:	2200      	movs	r2, #0
 8013184:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 8013186:	f7f6 fe2d 	bl	8009de4 <BootButton_Pressed>
 801318a:	0003      	movs	r3, r0
 801318c:	001a      	movs	r2, r3
 801318e:	2301      	movs	r3, #1
 8013190:	4053      	eors	r3, r2
 8013192:	b2db      	uxtb	r3, r3
 8013194:	2b00      	cmp	r3, #0
 8013196:	d100      	bne.n	801319a <configCheck+0x13a>
 8013198:	e0a4      	b.n	80132e4 <configCheck+0x284>
 801319a:	4b6e      	ldr	r3, [pc, #440]	@ (8013354 <configCheck+0x2f4>)
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d100      	bne.n	80131a4 <configCheck+0x144>
 80131a2:	e09f      	b.n	80132e4 <configCheck+0x284>
 80131a4:	4b74      	ldr	r3, [pc, #464]	@ (8013378 <configCheck+0x318>)
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	0018      	movs	r0, r3
 80131aa:	f000 fe2f 	bl	8013e0c <TimestampIsReached>
 80131ae:	1e03      	subs	r3, r0, #0
 80131b0:	d100      	bne.n	80131b4 <configCheck+0x154>
 80131b2:	e097      	b.n	80132e4 <configCheck+0x284>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80131b4:	f7fa f9c0 	bl	800d538 <GetPMSensorPresence>
 80131b8:	1e03      	subs	r3, r0, #0
 80131ba:	d100      	bne.n	80131be <configCheck+0x15e>
 80131bc:	e082      	b.n	80132c4 <configCheck+0x264>
 80131be:	4b6f      	ldr	r3, [pc, #444]	@ (801337c <configCheck+0x31c>)
 80131c0:	791b      	ldrb	r3, [r3, #4]
 80131c2:	2b34      	cmp	r3, #52	@ 0x34
 80131c4:	d004      	beq.n	80131d0 <configCheck+0x170>
 80131c6:	4b6d      	ldr	r3, [pc, #436]	@ (801337c <configCheck+0x31c>)
 80131c8:	791b      	ldrb	r3, [r3, #4]
 80131ca:	2b35      	cmp	r3, #53	@ 0x35
 80131cc:	d000      	beq.n	80131d0 <configCheck+0x170>
 80131ce:	e079      	b.n	80132c4 <configCheck+0x264>
      uint16_t color;
      VOCNOx = !VOCNOx;
 80131d0:	4b6b      	ldr	r3, [pc, #428]	@ (8013380 <configCheck+0x320>)
 80131d2:	781b      	ldrb	r3, [r3, #0]
 80131d4:	1e5a      	subs	r2, r3, #1
 80131d6:	4193      	sbcs	r3, r2
 80131d8:	b2db      	uxtb	r3, r3
 80131da:	2201      	movs	r2, #1
 80131dc:	4053      	eors	r3, r2
 80131de:	b2db      	uxtb	r3, r3
 80131e0:	1c1a      	adds	r2, r3, #0
 80131e2:	2301      	movs	r3, #1
 80131e4:	4013      	ands	r3, r2
 80131e6:	b2da      	uxtb	r2, r3
 80131e8:	4b65      	ldr	r3, [pc, #404]	@ (8013380 <configCheck+0x320>)
 80131ea:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 80131ec:	4b64      	ldr	r3, [pc, #400]	@ (8013380 <configCheck+0x320>)
 80131ee:	781b      	ldrb	r3, [r3, #0]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d005      	beq.n	8013200 <configCheck+0x1a0>
 80131f4:	1dbc      	adds	r4, r7, #6
 80131f6:	f7ff faf5 	bl	80127e4 <Calculate_LED_ON>
 80131fa:	0003      	movs	r3, r0
 80131fc:	8023      	strh	r3, [r4, #0]
 80131fe:	e003      	b.n	8013208 <configCheck+0x1a8>
        else color = 4000;
 8013200:	1dbb      	adds	r3, r7, #6
 8013202:	22fa      	movs	r2, #250	@ 0xfa
 8013204:	0112      	lsls	r2, r2, #4
 8013206:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %sabled", VOCNOx?"en":"dis");
 8013208:	4b5d      	ldr	r3, [pc, #372]	@ (8013380 <configCheck+0x320>)
 801320a:	781b      	ldrb	r3, [r3, #0]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d001      	beq.n	8013214 <configCheck+0x1b4>
 8013210:	4b55      	ldr	r3, [pc, #340]	@ (8013368 <configCheck+0x308>)
 8013212:	e000      	b.n	8013216 <configCheck+0x1b6>
 8013214:	4b55      	ldr	r3, [pc, #340]	@ (801336c <configCheck+0x30c>)
 8013216:	4a5b      	ldr	r2, [pc, #364]	@ (8013384 <configCheck+0x324>)
 8013218:	495b      	ldr	r1, [pc, #364]	@ (8013388 <configCheck+0x328>)
 801321a:	2002      	movs	r0, #2
 801321c:	f000 fe4c 	bl	8013eb8 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 8013220:	1d7b      	adds	r3, r7, #5
 8013222:	2200      	movs	r2, #0
 8013224:	701a      	strb	r2, [r3, #0]
 8013226:	e028      	b.n	801327a <configCheck+0x21a>
        TIM3 -> CCR1 = Calculate_LED_ON();
 8013228:	f7ff fadc 	bl	80127e4 <Calculate_LED_ON>
 801322c:	0003      	movs	r3, r0
 801322e:	001a      	movs	r2, r3
 8013230:	4b56      	ldr	r3, [pc, #344]	@ (801338c <configCheck+0x32c>)
 8013232:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 8013234:	4b55      	ldr	r3, [pc, #340]	@ (801338c <configCheck+0x32c>)
 8013236:	1dba      	adds	r2, r7, #6
 8013238:	8812      	ldrh	r2, [r2, #0]
 801323a:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 801323c:	4b53      	ldr	r3, [pc, #332]	@ (801338c <configCheck+0x32c>)
 801323e:	1dba      	adds	r2, r7, #6
 8013240:	8812      	ldrh	r2, [r2, #0]
 8013242:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8013244:	23c8      	movs	r3, #200	@ 0xc8
 8013246:	005b      	lsls	r3, r3, #1
 8013248:	0018      	movs	r0, r3
 801324a:	f001 fbbf 	bl	80149cc <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 801324e:	4b4f      	ldr	r3, [pc, #316]	@ (801338c <configCheck+0x32c>)
 8013250:	22fa      	movs	r2, #250	@ 0xfa
 8013252:	0112      	lsls	r2, r2, #4
 8013254:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 8013256:	4b4d      	ldr	r3, [pc, #308]	@ (801338c <configCheck+0x32c>)
 8013258:	22fa      	movs	r2, #250	@ 0xfa
 801325a:	0112      	lsls	r2, r2, #4
 801325c:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 801325e:	4b4b      	ldr	r3, [pc, #300]	@ (801338c <configCheck+0x32c>)
 8013260:	22fa      	movs	r2, #250	@ 0xfa
 8013262:	0112      	lsls	r2, r2, #4
 8013264:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8013266:	23c8      	movs	r3, #200	@ 0xc8
 8013268:	005b      	lsls	r3, r3, #1
 801326a:	0018      	movs	r0, r3
 801326c:	f001 fbae 	bl	80149cc <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 8013270:	1d7b      	adds	r3, r7, #5
 8013272:	781a      	ldrb	r2, [r3, #0]
 8013274:	1d7b      	adds	r3, r7, #5
 8013276:	3201      	adds	r2, #1
 8013278:	701a      	strb	r2, [r3, #0]
 801327a:	1d7b      	adds	r3, r7, #5
 801327c:	781b      	ldrb	r3, [r3, #0]
 801327e:	2b01      	cmp	r3, #1
 8013280:	d9d2      	bls.n	8013228 <configCheck+0x1c8>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 8013282:	4b37      	ldr	r3, [pc, #220]	@ (8013360 <configCheck+0x300>)
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	1e5a      	subs	r2, r3, #1
 8013288:	4193      	sbcs	r3, r2
 801328a:	b2db      	uxtb	r3, r3
 801328c:	2201      	movs	r2, #1
 801328e:	4053      	eors	r3, r2
 8013290:	b2db      	uxtb	r3, r3
 8013292:	1c1a      	adds	r2, r3, #0
 8013294:	2301      	movs	r3, #1
 8013296:	4013      	ands	r3, r2
 8013298:	b2da      	uxtb	r2, r3
 801329a:	4b31      	ldr	r3, [pc, #196]	@ (8013360 <configCheck+0x300>)
 801329c:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %sabled", userToggle?"en":"dis");
 801329e:	4b30      	ldr	r3, [pc, #192]	@ (8013360 <configCheck+0x300>)
 80132a0:	781b      	ldrb	r3, [r3, #0]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d001      	beq.n	80132aa <configCheck+0x24a>
 80132a6:	4b30      	ldr	r3, [pc, #192]	@ (8013368 <configCheck+0x308>)
 80132a8:	e000      	b.n	80132ac <configCheck+0x24c>
 80132aa:	4b30      	ldr	r3, [pc, #192]	@ (801336c <configCheck+0x30c>)
 80132ac:	4a38      	ldr	r2, [pc, #224]	@ (8013390 <configCheck+0x330>)
 80132ae:	4936      	ldr	r1, [pc, #216]	@ (8013388 <configCheck+0x328>)
 80132b0:	2002      	movs	r0, #2
 80132b2:	f000 fe01 	bl	8013eb8 <CreateLine>
      if (usbPluggedIn) {
 80132b6:	4b37      	ldr	r3, [pc, #220]	@ (8013394 <configCheck+0x334>)
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d009      	beq.n	80132d2 <configCheck+0x272>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 80132be:	f7fb ff67 	bl	800f190 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80132c2:	e006      	b.n	80132d2 <configCheck+0x272>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 80132c4:	4a34      	ldr	r2, [pc, #208]	@ (8013398 <configCheck+0x338>)
 80132c6:	4b30      	ldr	r3, [pc, #192]	@ (8013388 <configCheck+0x328>)
 80132c8:	0019      	movs	r1, r3
 80132ca:	2002      	movs	r0, #2
 80132cc:	f000 fdf4 	bl	8013eb8 <CreateLine>
 80132d0:	e000      	b.n	80132d4 <configCheck+0x274>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80132d2:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 80132d4:	46c0      	nop			@ (mov r8, r8)
 80132d6:	f7f6 fd97 	bl	8009e08 <UserButton_Pressed>
 80132da:	1e03      	subs	r3, r0, #0
 80132dc:	d1fb      	bne.n	80132d6 <configCheck+0x276>
    }
    userbuttonHeld = false;
 80132de:	4b1d      	ldr	r3, [pc, #116]	@ (8013354 <configCheck+0x2f4>)
 80132e0:	2200      	movs	r2, #0
 80132e2:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 80132e4:	f7f6 fd7e 	bl	8009de4 <BootButton_Pressed>
 80132e8:	0003      	movs	r3, r0
 80132ea:	001a      	movs	r2, r3
 80132ec:	2301      	movs	r3, #1
 80132ee:	4053      	eors	r3, r2
 80132f0:	b2db      	uxtb	r3, r3
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d00b      	beq.n	801330e <configCheck+0x2ae>
 80132f6:	f7f6 fd87 	bl	8009e08 <UserButton_Pressed>
 80132fa:	0003      	movs	r3, r0
 80132fc:	001a      	movs	r2, r3
 80132fe:	2301      	movs	r3, #1
 8013300:	4053      	eors	r3, r2
 8013302:	b2db      	uxtb	r3, r3
 8013304:	2b00      	cmp	r3, #0
 8013306:	d002      	beq.n	801330e <configCheck+0x2ae>
    userbuttonHeld = false;
 8013308:	4b12      	ldr	r3, [pc, #72]	@ (8013354 <configCheck+0x2f4>)
 801330a:	2200      	movs	r2, #0
 801330c:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 801330e:	f7f6 fcef 	bl	8009cf0 <Check_USB_PowerOn>
 8013312:	1e03      	subs	r3, r0, #0
 8013314:	d003      	beq.n	801331e <configCheck+0x2be>
    usbPluggedIn = true;
 8013316:	4b1f      	ldr	r3, [pc, #124]	@ (8013394 <configCheck+0x334>)
 8013318:	2201      	movs	r2, #1
 801331a:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 801331c:	e012      	b.n	8013344 <configCheck+0x2e4>
    if(!userToggle && !init){
 801331e:	4b10      	ldr	r3, [pc, #64]	@ (8013360 <configCheck+0x300>)
 8013320:	781b      	ldrb	r3, [r3, #0]
 8013322:	2201      	movs	r2, #1
 8013324:	4053      	eors	r3, r2
 8013326:	b2db      	uxtb	r3, r3
 8013328:	2b00      	cmp	r3, #0
 801332a:	d008      	beq.n	801333e <configCheck+0x2de>
 801332c:	4b1b      	ldr	r3, [pc, #108]	@ (801339c <configCheck+0x33c>)
 801332e:	781b      	ldrb	r3, [r3, #0]
 8013330:	2201      	movs	r2, #1
 8013332:	4053      	eors	r3, r2
 8013334:	b2db      	uxtb	r3, r3
 8013336:	2b00      	cmp	r3, #0
 8013338:	d001      	beq.n	801333e <configCheck+0x2de>
      SetLEDsOff();
 801333a:	f7ff fc09 	bl	8012b50 <SetLEDsOff>
    usbPluggedIn = false;
 801333e:	4b15      	ldr	r3, [pc, #84]	@ (8013394 <configCheck+0x334>)
 8013340:	2200      	movs	r2, #0
 8013342:	701a      	strb	r2, [r3, #0]
}
 8013344:	46c0      	nop			@ (mov r8, r8)
 8013346:	46bd      	mov	sp, r7
 8013348:	b003      	add	sp, #12
 801334a:	bd90      	pop	{r4, r7, pc}
 801334c:	2000214c 	.word	0x2000214c
 8013350:	20002150 	.word	0x20002150
 8013354:	2000214f 	.word	0x2000214f
 8013358:	00000bb8 	.word	0x00000bb8
 801335c:	000005dc 	.word	0x000005dc
 8013360:	2000214e 	.word	0x2000214e
 8013364:	20001114 	.word	0x20001114
 8013368:	0802dd14 	.word	0x0802dd14
 801336c:	0802dd18 	.word	0x0802dd18
 8013370:	0802dd1c 	.word	0x0802dd1c
 8013374:	0802dc40 	.word	0x0802dc40
 8013378:	20002154 	.word	0x20002154
 801337c:	200011c0 	.word	0x200011c0
 8013380:	200011be 	.word	0x200011be
 8013384:	0802dd3c 	.word	0x0802dd3c
 8013388:	0802dd64 	.word	0x0802dd64
 801338c:	40000400 	.word	0x40000400
 8013390:	0802dd68 	.word	0x0802dd68
 8013394:	2000214d 	.word	0x2000214d
 8013398:	0802dd88 	.word	0x0802dd88
 801339c:	200000e8 	.word	0x200000e8

080133a0 <Battery_Upkeep>:

void Battery_Upkeep(){
 80133a0:	b580      	push	{r7, lr}
 80133a2:	af00      	add	r7, sp, #0
  powerCheck();
 80133a4:	f7ff fdce 	bl	8012f44 <powerCheck>
  powerDisplay();  // output LEDs are okay
 80133a8:	f7ff fddc 	bl	8012f64 <powerDisplay>
}
 80133ac:	46c0      	nop			@ (mov r8, r8)
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}
	...

080133b4 <setuserToggle>:

void setuserToggle(void) {
 80133b4:	b580      	push	{r7, lr}
 80133b6:	af00      	add	r7, sp, #0
  if (!Check_USB_PowerOn()) { //operate only in battery operation mode
 80133b8:	f7f6 fc9a 	bl	8009cf0 <Check_USB_PowerOn>
 80133bc:	0003      	movs	r3, r0
 80133be:	001a      	movs	r2, r3
 80133c0:	2301      	movs	r3, #1
 80133c2:	4053      	eors	r3, r2
 80133c4:	b2db      	uxtb	r3, r3
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d004      	beq.n	80133d4 <setuserToggle+0x20>
    userToggle = true;
 80133ca:	4b04      	ldr	r3, [pc, #16]	@ (80133dc <setuserToggle+0x28>)
 80133cc:	2201      	movs	r2, #1
 80133ce:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 80133d0:	f7fa fcf4 	bl	800ddbc <EnabledConnectedDevices>
  }
}
 80133d4:	46c0      	nop			@ (mov r8, r8)
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}
 80133da:	46c0      	nop			@ (mov r8, r8)
 80133dc:	2000214e 	.word	0x2000214e

080133e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80133e0:	b580      	push	{r7, lr}
 80133e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80133e4:	4b07      	ldr	r3, [pc, #28]	@ (8013404 <HAL_MspInit+0x24>)
 80133e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80133e8:	4b06      	ldr	r3, [pc, #24]	@ (8013404 <HAL_MspInit+0x24>)
 80133ea:	2101      	movs	r1, #1
 80133ec:	430a      	orrs	r2, r1
 80133ee:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80133f0:	4b04      	ldr	r3, [pc, #16]	@ (8013404 <HAL_MspInit+0x24>)
 80133f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80133f4:	4b03      	ldr	r3, [pc, #12]	@ (8013404 <HAL_MspInit+0x24>)
 80133f6:	2180      	movs	r1, #128	@ 0x80
 80133f8:	0549      	lsls	r1, r1, #21
 80133fa:	430a      	orrs	r2, r1
 80133fc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80133fe:	46c0      	nop			@ (mov r8, r8)
 8013400:	46bd      	mov	sp, r7
 8013402:	bd80      	pop	{r7, pc}
 8013404:	40021000 	.word	0x40021000

08013408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 801340c:	46c0      	nop			@ (mov r8, r8)
 801340e:	e7fd      	b.n	801340c <NMI_Handler+0x4>

08013410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8013410:	b580      	push	{r7, lr}
 8013412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8013414:	46c0      	nop			@ (mov r8, r8)
 8013416:	e7fd      	b.n	8013414 <HardFault_Handler+0x4>

08013418 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 801341c:	46c0      	nop			@ (mov r8, r8)
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}

08013422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8013422:	b580      	push	{r7, lr}
 8013424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8013426:	46c0      	nop			@ (mov r8, r8)
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}

0801342c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8013430:	f001 fab0 	bl	8014994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8013434:	46c0      	nop			@ (mov r8, r8)
 8013436:	46bd      	mov	sp, r7
 8013438:	bd80      	pop	{r7, pc}
	...

0801343c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8013440:	4b03      	ldr	r3, [pc, #12]	@ (8013450 <RTC_IRQHandler+0x14>)
 8013442:	0018      	movs	r0, r3
 8013444:	f009 fb50 	bl	801cae8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8013448:	46c0      	nop			@ (mov r8, r8)
 801344a:	46bd      	mov	sp, r7
 801344c:	bd80      	pop	{r7, pc}
 801344e:	46c0      	nop			@ (mov r8, r8)
 8013450:	20001198 	.word	0x20001198

08013454 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 8013458:	2380      	movs	r3, #128	@ 0x80
 801345a:	021b      	lsls	r3, r3, #8
 801345c:	0018      	movs	r0, r3
 801345e:	f002 fd2f 	bl	8015ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8013462:	46c0      	nop			@ (mov r8, r8)
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}

08013468 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 801346c:	4b05      	ldr	r3, [pc, #20]	@ (8013484 <DMA1_Channel2_3_IRQHandler+0x1c>)
 801346e:	0018      	movs	r0, r3
 8013470:	f002 f8ad 	bl	80155ce <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8013474:	4b04      	ldr	r3, [pc, #16]	@ (8013488 <DMA1_Channel2_3_IRQHandler+0x20>)
 8013476:	0018      	movs	r0, r3
 8013478:	f002 f8a9 	bl	80155ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 801347c:	46c0      	nop			@ (mov r8, r8)
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}
 8013482:	46c0      	nop			@ (mov r8, r8)
 8013484:	20001028 	.word	0x20001028
 8013488:	20000fe0 	.word	0x20000fe0

0801348c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8013490:	4b07      	ldr	r3, [pc, #28]	@ (80134b0 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8013492:	0018      	movs	r0, r3
 8013494:	f002 f89b 	bl	80155ce <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8013498:	4b06      	ldr	r3, [pc, #24]	@ (80134b4 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 801349a:	0018      	movs	r0, r3
 801349c:	f002 f897 	bl	80155ce <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 80134a0:	4b05      	ldr	r3, [pc, #20]	@ (80134b8 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 80134a2:	0018      	movs	r0, r3
 80134a4:	f002 f893 	bl	80155ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80134a8:	46c0      	nop			@ (mov r8, r8)
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}
 80134ae:	46c0      	nop			@ (mov r8, r8)
 80134b0:	200010ac 	.word	0x200010ac
 80134b4:	20002454 	.word	0x20002454
 80134b8:	2000249c 	.word	0x2000249c

080134bc <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80134c0:	4b03      	ldr	r3, [pc, #12]	@ (80134d0 <USART4_5_IRQHandler+0x14>)
 80134c2:	0018      	movs	r0, r3
 80134c4:	f00a fb00 	bl	801dac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80134c8:	46c0      	nop			@ (mov r8, r8)
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bd80      	pop	{r7, pc}
 80134ce:	46c0      	nop			@ (mov r8, r8)
 80134d0:	2000239c 	.word	0x2000239c

080134d4 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 80134d8:	4b09      	ldr	r3, [pc, #36]	@ (8013500 <I2C1_IRQHandler+0x2c>)
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	699a      	ldr	r2, [r3, #24]
 80134de:	23e0      	movs	r3, #224	@ 0xe0
 80134e0:	00db      	lsls	r3, r3, #3
 80134e2:	4013      	ands	r3, r2
 80134e4:	d004      	beq.n	80134f0 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80134e6:	4b06      	ldr	r3, [pc, #24]	@ (8013500 <I2C1_IRQHandler+0x2c>)
 80134e8:	0018      	movs	r0, r3
 80134ea:	f003 fc33 	bl	8016d54 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80134ee:	e003      	b.n	80134f8 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80134f0:	4b03      	ldr	r3, [pc, #12]	@ (8013500 <I2C1_IRQHandler+0x2c>)
 80134f2:	0018      	movs	r0, r3
 80134f4:	f003 fc14 	bl	8016d20 <HAL_I2C_EV_IRQHandler>
}
 80134f8:	46c0      	nop			@ (mov r8, r8)
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bd80      	pop	{r7, pc}
 80134fe:	46c0      	nop			@ (mov r8, r8)
 8013500:	20000f38 	.word	0x20000f38

08013504 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8013504:	b580      	push	{r7, lr}
 8013506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8013508:	4b03      	ldr	r3, [pc, #12]	@ (8013518 <USART1_IRQHandler+0x14>)
 801350a:	0018      	movs	r0, r3
 801350c:	f00a fadc 	bl	801dac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8013510:	46c0      	nop			@ (mov r8, r8)
 8013512:	46bd      	mov	sp, r7
 8013514:	bd80      	pop	{r7, pc}
 8013516:	46c0      	nop			@ (mov r8, r8)
 8013518:	200022e4 	.word	0x200022e4

0801351c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 801351c:	b580      	push	{r7, lr}
 801351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8013520:	4b03      	ldr	r3, [pc, #12]	@ (8013530 <USB_IRQHandler+0x14>)
 8013522:	0018      	movs	r0, r3
 8013524:	f006 f92e 	bl	8019784 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8013528:	46c0      	nop			@ (mov r8, r8)
 801352a:	46bd      	mov	sp, r7
 801352c:	bd80      	pop	{r7, pc}
 801352e:	46c0      	nop			@ (mov r8, r8)
 8013530:	200032b8 	.word	0x200032b8

08013534 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8013534:	b580      	push	{r7, lr}
 8013536:	af00      	add	r7, sp, #0
  return 1;
 8013538:	2301      	movs	r3, #1
}
 801353a:	0018      	movs	r0, r3
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}

08013540 <_kill>:

int _kill(int pid, int sig)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b082      	sub	sp, #8
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
 8013548:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801354a:	f013 f9bd 	bl	80268c8 <__errno>
 801354e:	0003      	movs	r3, r0
 8013550:	2216      	movs	r2, #22
 8013552:	601a      	str	r2, [r3, #0]
  return -1;
 8013554:	2301      	movs	r3, #1
 8013556:	425b      	negs	r3, r3
}
 8013558:	0018      	movs	r0, r3
 801355a:	46bd      	mov	sp, r7
 801355c:	b002      	add	sp, #8
 801355e:	bd80      	pop	{r7, pc}

08013560 <_exit>:

void _exit (int status)
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b082      	sub	sp, #8
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8013568:	2301      	movs	r3, #1
 801356a:	425a      	negs	r2, r3
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	0011      	movs	r1, r2
 8013570:	0018      	movs	r0, r3
 8013572:	f7ff ffe5 	bl	8013540 <_kill>
  while (1) {}    /* Make sure we hang here */
 8013576:	46c0      	nop			@ (mov r8, r8)
 8013578:	e7fd      	b.n	8013576 <_exit+0x16>

0801357a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801357a:	b580      	push	{r7, lr}
 801357c:	b086      	sub	sp, #24
 801357e:	af00      	add	r7, sp, #0
 8013580:	60f8      	str	r0, [r7, #12]
 8013582:	60b9      	str	r1, [r7, #8]
 8013584:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013586:	2300      	movs	r3, #0
 8013588:	617b      	str	r3, [r7, #20]
 801358a:	e00a      	b.n	80135a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 801358c:	e000      	b.n	8013590 <_read+0x16>
 801358e:	bf00      	nop
 8013590:	0001      	movs	r1, r0
 8013592:	68bb      	ldr	r3, [r7, #8]
 8013594:	1c5a      	adds	r2, r3, #1
 8013596:	60ba      	str	r2, [r7, #8]
 8013598:	b2ca      	uxtb	r2, r1
 801359a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	3301      	adds	r3, #1
 80135a0:	617b      	str	r3, [r7, #20]
 80135a2:	697a      	ldr	r2, [r7, #20]
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	429a      	cmp	r2, r3
 80135a8:	dbf0      	blt.n	801358c <_read+0x12>
  }

  return len;
 80135aa:	687b      	ldr	r3, [r7, #4]
}
 80135ac:	0018      	movs	r0, r3
 80135ae:	46bd      	mov	sp, r7
 80135b0:	b006      	add	sp, #24
 80135b2:	bd80      	pop	{r7, pc}

080135b4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b082      	sub	sp, #8
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80135bc:	2301      	movs	r3, #1
 80135be:	425b      	negs	r3, r3
}
 80135c0:	0018      	movs	r0, r3
 80135c2:	46bd      	mov	sp, r7
 80135c4:	b002      	add	sp, #8
 80135c6:	bd80      	pop	{r7, pc}

080135c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
 80135d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	2280      	movs	r2, #128	@ 0x80
 80135d6:	0192      	lsls	r2, r2, #6
 80135d8:	605a      	str	r2, [r3, #4]
  return 0;
 80135da:	2300      	movs	r3, #0
}
 80135dc:	0018      	movs	r0, r3
 80135de:	46bd      	mov	sp, r7
 80135e0:	b002      	add	sp, #8
 80135e2:	bd80      	pop	{r7, pc}

080135e4 <_isatty>:

int _isatty(int file)
{
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b082      	sub	sp, #8
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80135ec:	2301      	movs	r3, #1
}
 80135ee:	0018      	movs	r0, r3
 80135f0:	46bd      	mov	sp, r7
 80135f2:	b002      	add	sp, #8
 80135f4:	bd80      	pop	{r7, pc}

080135f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80135f6:	b580      	push	{r7, lr}
 80135f8:	b084      	sub	sp, #16
 80135fa:	af00      	add	r7, sp, #0
 80135fc:	60f8      	str	r0, [r7, #12]
 80135fe:	60b9      	str	r1, [r7, #8]
 8013600:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8013602:	2300      	movs	r3, #0
}
 8013604:	0018      	movs	r0, r3
 8013606:	46bd      	mov	sp, r7
 8013608:	b004      	add	sp, #16
 801360a:	bd80      	pop	{r7, pc}

0801360c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b086      	sub	sp, #24
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8013614:	4a14      	ldr	r2, [pc, #80]	@ (8013668 <_sbrk+0x5c>)
 8013616:	4b15      	ldr	r3, [pc, #84]	@ (801366c <_sbrk+0x60>)
 8013618:	1ad3      	subs	r3, r2, r3
 801361a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801361c:	697b      	ldr	r3, [r7, #20]
 801361e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8013620:	4b13      	ldr	r3, [pc, #76]	@ (8013670 <_sbrk+0x64>)
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d102      	bne.n	801362e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8013628:	4b11      	ldr	r3, [pc, #68]	@ (8013670 <_sbrk+0x64>)
 801362a:	4a12      	ldr	r2, [pc, #72]	@ (8013674 <_sbrk+0x68>)
 801362c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801362e:	4b10      	ldr	r3, [pc, #64]	@ (8013670 <_sbrk+0x64>)
 8013630:	681a      	ldr	r2, [r3, #0]
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	18d3      	adds	r3, r2, r3
 8013636:	693a      	ldr	r2, [r7, #16]
 8013638:	429a      	cmp	r2, r3
 801363a:	d207      	bcs.n	801364c <_sbrk+0x40>
  {
    errno = ENOMEM;
 801363c:	f013 f944 	bl	80268c8 <__errno>
 8013640:	0003      	movs	r3, r0
 8013642:	220c      	movs	r2, #12
 8013644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8013646:	2301      	movs	r3, #1
 8013648:	425b      	negs	r3, r3
 801364a:	e009      	b.n	8013660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801364c:	4b08      	ldr	r3, [pc, #32]	@ (8013670 <_sbrk+0x64>)
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8013652:	4b07      	ldr	r3, [pc, #28]	@ (8013670 <_sbrk+0x64>)
 8013654:	681a      	ldr	r2, [r3, #0]
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	18d2      	adds	r2, r2, r3
 801365a:	4b05      	ldr	r3, [pc, #20]	@ (8013670 <_sbrk+0x64>)
 801365c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 801365e:	68fb      	ldr	r3, [r7, #12]
}
 8013660:	0018      	movs	r0, r3
 8013662:	46bd      	mov	sp, r7
 8013664:	b006      	add	sp, #24
 8013666:	bd80      	pop	{r7, pc}
 8013668:	20005000 	.word	0x20005000
 801366c:	00000400 	.word	0x00000400
 8013670:	20002168 	.word	0x20002168
 8013674:	20003918 	.word	0x20003918

08013678 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801367c:	46c0      	nop			@ (mov r8, r8)
 801367e:	46bd      	mov	sp, r7
 8013680:	bd80      	pop	{r7, pc}
	...

08013684 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b086      	sub	sp, #24
 8013688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801368a:	2310      	movs	r3, #16
 801368c:	18fb      	adds	r3, r7, r3
 801368e:	0018      	movs	r0, r3
 8013690:	2308      	movs	r3, #8
 8013692:	001a      	movs	r2, r3
 8013694:	2100      	movs	r1, #0
 8013696:	f013 f873 	bl	8026780 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 801369a:	003b      	movs	r3, r7
 801369c:	0018      	movs	r0, r3
 801369e:	2310      	movs	r3, #16
 80136a0:	001a      	movs	r2, r3
 80136a2:	2100      	movs	r1, #0
 80136a4:	f013 f86c 	bl	8026780 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80136a8:	4b2e      	ldr	r3, [pc, #184]	@ (8013764 <MX_TIM2_Init+0xe0>)
 80136aa:	2280      	movs	r2, #128	@ 0x80
 80136ac:	05d2      	lsls	r2, r2, #23
 80136ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80136b0:	4b2c      	ldr	r3, [pc, #176]	@ (8013764 <MX_TIM2_Init+0xe0>)
 80136b2:	2200      	movs	r2, #0
 80136b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80136b6:	4b2b      	ldr	r3, [pc, #172]	@ (8013764 <MX_TIM2_Init+0xe0>)
 80136b8:	2200      	movs	r2, #0
 80136ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80136bc:	4b29      	ldr	r3, [pc, #164]	@ (8013764 <MX_TIM2_Init+0xe0>)
 80136be:	4a2a      	ldr	r2, [pc, #168]	@ (8013768 <MX_TIM2_Init+0xe4>)
 80136c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80136c2:	4b28      	ldr	r3, [pc, #160]	@ (8013764 <MX_TIM2_Init+0xe0>)
 80136c4:	2200      	movs	r2, #0
 80136c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80136c8:	4b26      	ldr	r3, [pc, #152]	@ (8013764 <MX_TIM2_Init+0xe0>)
 80136ca:	2200      	movs	r2, #0
 80136cc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80136ce:	4b25      	ldr	r3, [pc, #148]	@ (8013764 <MX_TIM2_Init+0xe0>)
 80136d0:	0018      	movs	r0, r3
 80136d2:	f009 fb17 	bl	801cd04 <HAL_TIM_PWM_Init>
 80136d6:	1e03      	subs	r3, r0, #0
 80136d8:	d001      	beq.n	80136de <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80136da:	f7f9 fedb 	bl	800d494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80136de:	2110      	movs	r1, #16
 80136e0:	187b      	adds	r3, r7, r1
 80136e2:	2200      	movs	r2, #0
 80136e4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80136e6:	187b      	adds	r3, r7, r1
 80136e8:	2200      	movs	r2, #0
 80136ea:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80136ec:	187a      	adds	r2, r7, r1
 80136ee:	4b1d      	ldr	r3, [pc, #116]	@ (8013764 <MX_TIM2_Init+0xe0>)
 80136f0:	0011      	movs	r1, r2
 80136f2:	0018      	movs	r0, r3
 80136f4:	f009 fe24 	bl	801d340 <HAL_TIMEx_MasterConfigSynchronization>
 80136f8:	1e03      	subs	r3, r0, #0
 80136fa:	d001      	beq.n	8013700 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80136fc:	f7f9 feca 	bl	800d494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013700:	003b      	movs	r3, r7
 8013702:	2260      	movs	r2, #96	@ 0x60
 8013704:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8013706:	003b      	movs	r3, r7
 8013708:	2200      	movs	r2, #0
 801370a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801370c:	003b      	movs	r3, r7
 801370e:	2200      	movs	r2, #0
 8013710:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013712:	003b      	movs	r3, r7
 8013714:	2200      	movs	r2, #0
 8013716:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013718:	0039      	movs	r1, r7
 801371a:	4b12      	ldr	r3, [pc, #72]	@ (8013764 <MX_TIM2_Init+0xe0>)
 801371c:	2200      	movs	r2, #0
 801371e:	0018      	movs	r0, r3
 8013720:	f009 fbc2 	bl	801cea8 <HAL_TIM_PWM_ConfigChannel>
 8013724:	1e03      	subs	r3, r0, #0
 8013726:	d001      	beq.n	801372c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8013728:	f7f9 feb4 	bl	800d494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801372c:	0039      	movs	r1, r7
 801372e:	4b0d      	ldr	r3, [pc, #52]	@ (8013764 <MX_TIM2_Init+0xe0>)
 8013730:	2208      	movs	r2, #8
 8013732:	0018      	movs	r0, r3
 8013734:	f009 fbb8 	bl	801cea8 <HAL_TIM_PWM_ConfigChannel>
 8013738:	1e03      	subs	r3, r0, #0
 801373a:	d001      	beq.n	8013740 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 801373c:	f7f9 feaa 	bl	800d494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8013740:	0039      	movs	r1, r7
 8013742:	4b08      	ldr	r3, [pc, #32]	@ (8013764 <MX_TIM2_Init+0xe0>)
 8013744:	220c      	movs	r2, #12
 8013746:	0018      	movs	r0, r3
 8013748:	f009 fbae 	bl	801cea8 <HAL_TIM_PWM_ConfigChannel>
 801374c:	1e03      	subs	r3, r0, #0
 801374e:	d001      	beq.n	8013754 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8013750:	f7f9 fea0 	bl	800d494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8013754:	4b03      	ldr	r3, [pc, #12]	@ (8013764 <MX_TIM2_Init+0xe0>)
 8013756:	0018      	movs	r0, r3
 8013758:	f000 f8fe 	bl	8013958 <HAL_TIM_MspPostInit>

}
 801375c:	46c0      	nop			@ (mov r8, r8)
 801375e:	46bd      	mov	sp, r7
 8013760:	b006      	add	sp, #24
 8013762:	bd80      	pop	{r7, pc}
 8013764:	2000216c 	.word	0x2000216c
 8013768:	0000ffff 	.word	0x0000ffff

0801376c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b086      	sub	sp, #24
 8013770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013772:	2310      	movs	r3, #16
 8013774:	18fb      	adds	r3, r7, r3
 8013776:	0018      	movs	r0, r3
 8013778:	2308      	movs	r3, #8
 801377a:	001a      	movs	r2, r3
 801377c:	2100      	movs	r1, #0
 801377e:	f012 ffff 	bl	8026780 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013782:	003b      	movs	r3, r7
 8013784:	0018      	movs	r0, r3
 8013786:	2310      	movs	r3, #16
 8013788:	001a      	movs	r2, r3
 801378a:	2100      	movs	r1, #0
 801378c:	f012 fff8 	bl	8026780 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8013790:	4b32      	ldr	r3, [pc, #200]	@ (801385c <MX_TIM3_Init+0xf0>)
 8013792:	4a33      	ldr	r2, [pc, #204]	@ (8013860 <MX_TIM3_Init+0xf4>)
 8013794:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8013796:	4b31      	ldr	r3, [pc, #196]	@ (801385c <MX_TIM3_Init+0xf0>)
 8013798:	2200      	movs	r2, #0
 801379a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801379c:	4b2f      	ldr	r3, [pc, #188]	@ (801385c <MX_TIM3_Init+0xf0>)
 801379e:	2200      	movs	r2, #0
 80137a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80137a2:	4b2e      	ldr	r3, [pc, #184]	@ (801385c <MX_TIM3_Init+0xf0>)
 80137a4:	4a2f      	ldr	r2, [pc, #188]	@ (8013864 <MX_TIM3_Init+0xf8>)
 80137a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80137a8:	4b2c      	ldr	r3, [pc, #176]	@ (801385c <MX_TIM3_Init+0xf0>)
 80137aa:	2200      	movs	r2, #0
 80137ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80137ae:	4b2b      	ldr	r3, [pc, #172]	@ (801385c <MX_TIM3_Init+0xf0>)
 80137b0:	2200      	movs	r2, #0
 80137b2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80137b4:	4b29      	ldr	r3, [pc, #164]	@ (801385c <MX_TIM3_Init+0xf0>)
 80137b6:	0018      	movs	r0, r3
 80137b8:	f009 faa4 	bl	801cd04 <HAL_TIM_PWM_Init>
 80137bc:	1e03      	subs	r3, r0, #0
 80137be:	d001      	beq.n	80137c4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80137c0:	f7f9 fe68 	bl	800d494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80137c4:	2110      	movs	r1, #16
 80137c6:	187b      	adds	r3, r7, r1
 80137c8:	2200      	movs	r2, #0
 80137ca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80137cc:	187b      	adds	r3, r7, r1
 80137ce:	2200      	movs	r2, #0
 80137d0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80137d2:	187a      	adds	r2, r7, r1
 80137d4:	4b21      	ldr	r3, [pc, #132]	@ (801385c <MX_TIM3_Init+0xf0>)
 80137d6:	0011      	movs	r1, r2
 80137d8:	0018      	movs	r0, r3
 80137da:	f009 fdb1 	bl	801d340 <HAL_TIMEx_MasterConfigSynchronization>
 80137de:	1e03      	subs	r3, r0, #0
 80137e0:	d001      	beq.n	80137e6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80137e2:	f7f9 fe57 	bl	800d494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80137e6:	003b      	movs	r3, r7
 80137e8:	2260      	movs	r2, #96	@ 0x60
 80137ea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80137ec:	003b      	movs	r3, r7
 80137ee:	2200      	movs	r2, #0
 80137f0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80137f2:	003b      	movs	r3, r7
 80137f4:	2200      	movs	r2, #0
 80137f6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80137f8:	003b      	movs	r3, r7
 80137fa:	2200      	movs	r2, #0
 80137fc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80137fe:	0039      	movs	r1, r7
 8013800:	4b16      	ldr	r3, [pc, #88]	@ (801385c <MX_TIM3_Init+0xf0>)
 8013802:	2200      	movs	r2, #0
 8013804:	0018      	movs	r0, r3
 8013806:	f009 fb4f 	bl	801cea8 <HAL_TIM_PWM_ConfigChannel>
 801380a:	1e03      	subs	r3, r0, #0
 801380c:	d001      	beq.n	8013812 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 801380e:	f7f9 fe41 	bl	800d494 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8013812:	4b12      	ldr	r3, [pc, #72]	@ (801385c <MX_TIM3_Init+0xf0>)
 8013814:	2104      	movs	r1, #4
 8013816:	0018      	movs	r0, r3
 8013818:	f009 fdf0 	bl	801d3fc <HAL_TIMEx_RemapConfig>
 801381c:	1e03      	subs	r3, r0, #0
 801381e:	d001      	beq.n	8013824 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8013820:	f7f9 fe38 	bl	800d494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8013824:	0039      	movs	r1, r7
 8013826:	4b0d      	ldr	r3, [pc, #52]	@ (801385c <MX_TIM3_Init+0xf0>)
 8013828:	2204      	movs	r2, #4
 801382a:	0018      	movs	r0, r3
 801382c:	f009 fb3c 	bl	801cea8 <HAL_TIM_PWM_ConfigChannel>
 8013830:	1e03      	subs	r3, r0, #0
 8013832:	d001      	beq.n	8013838 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8013834:	f7f9 fe2e 	bl	800d494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013838:	0039      	movs	r1, r7
 801383a:	4b08      	ldr	r3, [pc, #32]	@ (801385c <MX_TIM3_Init+0xf0>)
 801383c:	2208      	movs	r2, #8
 801383e:	0018      	movs	r0, r3
 8013840:	f009 fb32 	bl	801cea8 <HAL_TIM_PWM_ConfigChannel>
 8013844:	1e03      	subs	r3, r0, #0
 8013846:	d001      	beq.n	801384c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8013848:	f7f9 fe24 	bl	800d494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 801384c:	4b03      	ldr	r3, [pc, #12]	@ (801385c <MX_TIM3_Init+0xf0>)
 801384e:	0018      	movs	r0, r3
 8013850:	f000 f882 	bl	8013958 <HAL_TIM_MspPostInit>

}
 8013854:	46c0      	nop			@ (mov r8, r8)
 8013856:	46bd      	mov	sp, r7
 8013858:	b006      	add	sp, #24
 801385a:	bd80      	pop	{r7, pc}
 801385c:	200021ac 	.word	0x200021ac
 8013860:	40000400 	.word	0x40000400
 8013864:	0000ffff 	.word	0x0000ffff

08013868 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801386e:	003b      	movs	r3, r7
 8013870:	0018      	movs	r0, r3
 8013872:	2308      	movs	r3, #8
 8013874:	001a      	movs	r2, r3
 8013876:	2100      	movs	r1, #0
 8013878:	f012 ff82 	bl	8026780 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 801387c:	4b15      	ldr	r3, [pc, #84]	@ (80138d4 <MX_TIM6_Init+0x6c>)
 801387e:	4a16      	ldr	r2, [pc, #88]	@ (80138d8 <MX_TIM6_Init+0x70>)
 8013880:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8013882:	4b14      	ldr	r3, [pc, #80]	@ (80138d4 <MX_TIM6_Init+0x6c>)
 8013884:	220a      	movs	r2, #10
 8013886:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013888:	4b12      	ldr	r3, [pc, #72]	@ (80138d4 <MX_TIM6_Init+0x6c>)
 801388a:	2200      	movs	r2, #0
 801388c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 801388e:	4b11      	ldr	r3, [pc, #68]	@ (80138d4 <MX_TIM6_Init+0x6c>)
 8013890:	4a12      	ldr	r2, [pc, #72]	@ (80138dc <MX_TIM6_Init+0x74>)
 8013892:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013894:	4b0f      	ldr	r3, [pc, #60]	@ (80138d4 <MX_TIM6_Init+0x6c>)
 8013896:	2200      	movs	r2, #0
 8013898:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801389a:	4b0e      	ldr	r3, [pc, #56]	@ (80138d4 <MX_TIM6_Init+0x6c>)
 801389c:	0018      	movs	r0, r3
 801389e:	f009 f989 	bl	801cbb4 <HAL_TIM_Base_Init>
 80138a2:	1e03      	subs	r3, r0, #0
 80138a4:	d001      	beq.n	80138aa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80138a6:	f7f9 fdf5 	bl	800d494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80138aa:	003b      	movs	r3, r7
 80138ac:	2200      	movs	r2, #0
 80138ae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80138b0:	003b      	movs	r3, r7
 80138b2:	2200      	movs	r2, #0
 80138b4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80138b6:	003a      	movs	r2, r7
 80138b8:	4b06      	ldr	r3, [pc, #24]	@ (80138d4 <MX_TIM6_Init+0x6c>)
 80138ba:	0011      	movs	r1, r2
 80138bc:	0018      	movs	r0, r3
 80138be:	f009 fd3f 	bl	801d340 <HAL_TIMEx_MasterConfigSynchronization>
 80138c2:	1e03      	subs	r3, r0, #0
 80138c4:	d001      	beq.n	80138ca <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80138c6:	f7f9 fde5 	bl	800d494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80138ca:	46c0      	nop			@ (mov r8, r8)
 80138cc:	46bd      	mov	sp, r7
 80138ce:	b002      	add	sp, #8
 80138d0:	bd80      	pop	{r7, pc}
 80138d2:	46c0      	nop			@ (mov r8, r8)
 80138d4:	200021ec 	.word	0x200021ec
 80138d8:	40001000 	.word	0x40001000
 80138dc:	0000ffff 	.word	0x0000ffff

080138e0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b082      	sub	sp, #8
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681a      	ldr	r2, [r3, #0]
 80138ec:	2380      	movs	r3, #128	@ 0x80
 80138ee:	05db      	lsls	r3, r3, #23
 80138f0:	429a      	cmp	r2, r3
 80138f2:	d106      	bne.n	8013902 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80138f4:	4b0a      	ldr	r3, [pc, #40]	@ (8013920 <HAL_TIM_PWM_MspInit+0x40>)
 80138f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80138f8:	4b09      	ldr	r3, [pc, #36]	@ (8013920 <HAL_TIM_PWM_MspInit+0x40>)
 80138fa:	2101      	movs	r1, #1
 80138fc:	430a      	orrs	r2, r1
 80138fe:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8013900:	e00a      	b.n	8013918 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	4a07      	ldr	r2, [pc, #28]	@ (8013924 <HAL_TIM_PWM_MspInit+0x44>)
 8013908:	4293      	cmp	r3, r2
 801390a:	d105      	bne.n	8013918 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801390c:	4b04      	ldr	r3, [pc, #16]	@ (8013920 <HAL_TIM_PWM_MspInit+0x40>)
 801390e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013910:	4b03      	ldr	r3, [pc, #12]	@ (8013920 <HAL_TIM_PWM_MspInit+0x40>)
 8013912:	2102      	movs	r1, #2
 8013914:	430a      	orrs	r2, r1
 8013916:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8013918:	46c0      	nop			@ (mov r8, r8)
 801391a:	46bd      	mov	sp, r7
 801391c:	b002      	add	sp, #8
 801391e:	bd80      	pop	{r7, pc}
 8013920:	40021000 	.word	0x40021000
 8013924:	40000400 	.word	0x40000400

08013928 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b082      	sub	sp, #8
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	4a06      	ldr	r2, [pc, #24]	@ (8013950 <HAL_TIM_Base_MspInit+0x28>)
 8013936:	4293      	cmp	r3, r2
 8013938:	d105      	bne.n	8013946 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 801393a:	4b06      	ldr	r3, [pc, #24]	@ (8013954 <HAL_TIM_Base_MspInit+0x2c>)
 801393c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801393e:	4b05      	ldr	r3, [pc, #20]	@ (8013954 <HAL_TIM_Base_MspInit+0x2c>)
 8013940:	2110      	movs	r1, #16
 8013942:	430a      	orrs	r2, r1
 8013944:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8013946:	46c0      	nop			@ (mov r8, r8)
 8013948:	46bd      	mov	sp, r7
 801394a:	b002      	add	sp, #8
 801394c:	bd80      	pop	{r7, pc}
 801394e:	46c0      	nop			@ (mov r8, r8)
 8013950:	40001000 	.word	0x40001000
 8013954:	40021000 	.word	0x40021000

08013958 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8013958:	b590      	push	{r4, r7, lr}
 801395a:	b08b      	sub	sp, #44	@ 0x2c
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013960:	2414      	movs	r4, #20
 8013962:	193b      	adds	r3, r7, r4
 8013964:	0018      	movs	r0, r3
 8013966:	2314      	movs	r3, #20
 8013968:	001a      	movs	r2, r3
 801396a:	2100      	movs	r1, #0
 801396c:	f012 ff08 	bl	8026780 <memset>
  if(timHandle->Instance==TIM2)
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	681a      	ldr	r2, [r3, #0]
 8013974:	2380      	movs	r3, #128	@ 0x80
 8013976:	05db      	lsls	r3, r3, #23
 8013978:	429a      	cmp	r2, r3
 801397a:	d123      	bne.n	80139c4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801397c:	4b27      	ldr	r3, [pc, #156]	@ (8013a1c <HAL_TIM_MspPostInit+0xc4>)
 801397e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013980:	4b26      	ldr	r3, [pc, #152]	@ (8013a1c <HAL_TIM_MspPostInit+0xc4>)
 8013982:	2101      	movs	r1, #1
 8013984:	430a      	orrs	r2, r1
 8013986:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013988:	4b24      	ldr	r3, [pc, #144]	@ (8013a1c <HAL_TIM_MspPostInit+0xc4>)
 801398a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801398c:	2201      	movs	r2, #1
 801398e:	4013      	ands	r3, r2
 8013990:	613b      	str	r3, [r7, #16]
 8013992:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8013994:	0021      	movs	r1, r4
 8013996:	187b      	adds	r3, r7, r1
 8013998:	220d      	movs	r2, #13
 801399a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801399c:	187b      	adds	r3, r7, r1
 801399e:	2202      	movs	r2, #2
 80139a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80139a2:	187b      	adds	r3, r7, r1
 80139a4:	2200      	movs	r2, #0
 80139a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80139a8:	187b      	adds	r3, r7, r1
 80139aa:	2200      	movs	r2, #0
 80139ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80139ae:	187b      	adds	r3, r7, r1
 80139b0:	2202      	movs	r2, #2
 80139b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80139b4:	187a      	adds	r2, r7, r1
 80139b6:	23a0      	movs	r3, #160	@ 0xa0
 80139b8:	05db      	lsls	r3, r3, #23
 80139ba:	0011      	movs	r1, r2
 80139bc:	0018      	movs	r0, r3
 80139be:	f002 f8c7 	bl	8015b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80139c2:	e027      	b.n	8013a14 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	4a15      	ldr	r2, [pc, #84]	@ (8013a20 <HAL_TIM_MspPostInit+0xc8>)
 80139ca:	4293      	cmp	r3, r2
 80139cc:	d122      	bne.n	8013a14 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80139ce:	4b13      	ldr	r3, [pc, #76]	@ (8013a1c <HAL_TIM_MspPostInit+0xc4>)
 80139d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80139d2:	4b12      	ldr	r3, [pc, #72]	@ (8013a1c <HAL_TIM_MspPostInit+0xc4>)
 80139d4:	2104      	movs	r1, #4
 80139d6:	430a      	orrs	r2, r1
 80139d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80139da:	4b10      	ldr	r3, [pc, #64]	@ (8013a1c <HAL_TIM_MspPostInit+0xc4>)
 80139dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139de:	2204      	movs	r2, #4
 80139e0:	4013      	ands	r3, r2
 80139e2:	60fb      	str	r3, [r7, #12]
 80139e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 80139e6:	2114      	movs	r1, #20
 80139e8:	187b      	adds	r3, r7, r1
 80139ea:	22e0      	movs	r2, #224	@ 0xe0
 80139ec:	0052      	lsls	r2, r2, #1
 80139ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80139f0:	187b      	adds	r3, r7, r1
 80139f2:	2202      	movs	r2, #2
 80139f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80139f6:	187b      	adds	r3, r7, r1
 80139f8:	2200      	movs	r2, #0
 80139fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80139fc:	187b      	adds	r3, r7, r1
 80139fe:	2200      	movs	r2, #0
 8013a00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8013a02:	187b      	adds	r3, r7, r1
 8013a04:	2202      	movs	r2, #2
 8013a06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013a08:	187b      	adds	r3, r7, r1
 8013a0a:	4a06      	ldr	r2, [pc, #24]	@ (8013a24 <HAL_TIM_MspPostInit+0xcc>)
 8013a0c:	0019      	movs	r1, r3
 8013a0e:	0010      	movs	r0, r2
 8013a10:	f002 f89e 	bl	8015b50 <HAL_GPIO_Init>
}
 8013a14:	46c0      	nop			@ (mov r8, r8)
 8013a16:	46bd      	mov	sp, r7
 8013a18:	b00b      	add	sp, #44	@ 0x2c
 8013a1a:	bd90      	pop	{r4, r7, pc}
 8013a1c:	40021000 	.word	0x40021000
 8013a20:	40000400 	.word	0x40000400
 8013a24:	50000800 	.word	0x50000800

08013a28 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8013a2c:	4b17      	ldr	r3, [pc, #92]	@ (8013a8c <MX_LPUART1_UART_Init+0x64>)
 8013a2e:	4a18      	ldr	r2, [pc, #96]	@ (8013a90 <MX_LPUART1_UART_Init+0x68>)
 8013a30:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8013a32:	4b16      	ldr	r3, [pc, #88]	@ (8013a8c <MX_LPUART1_UART_Init+0x64>)
 8013a34:	22e1      	movs	r2, #225	@ 0xe1
 8013a36:	0252      	lsls	r2, r2, #9
 8013a38:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8013a3a:	4b14      	ldr	r3, [pc, #80]	@ (8013a8c <MX_LPUART1_UART_Init+0x64>)
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8013a40:	4b12      	ldr	r3, [pc, #72]	@ (8013a8c <MX_LPUART1_UART_Init+0x64>)
 8013a42:	2200      	movs	r2, #0
 8013a44:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8013a46:	4b11      	ldr	r3, [pc, #68]	@ (8013a8c <MX_LPUART1_UART_Init+0x64>)
 8013a48:	2200      	movs	r2, #0
 8013a4a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8013a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8013a8c <MX_LPUART1_UART_Init+0x64>)
 8013a4e:	220c      	movs	r2, #12
 8013a50:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013a52:	4b0e      	ldr	r3, [pc, #56]	@ (8013a8c <MX_LPUART1_UART_Init+0x64>)
 8013a54:	2200      	movs	r2, #0
 8013a56:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013a58:	4b0c      	ldr	r3, [pc, #48]	@ (8013a8c <MX_LPUART1_UART_Init+0x64>)
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8013a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8013a8c <MX_LPUART1_UART_Init+0x64>)
 8013a60:	2218      	movs	r2, #24
 8013a62:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8013a64:	4b09      	ldr	r3, [pc, #36]	@ (8013a8c <MX_LPUART1_UART_Init+0x64>)
 8013a66:	2280      	movs	r2, #128	@ 0x80
 8013a68:	0212      	lsls	r2, r2, #8
 8013a6a:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8013a6c:	4b07      	ldr	r3, [pc, #28]	@ (8013a8c <MX_LPUART1_UART_Init+0x64>)
 8013a6e:	2280      	movs	r2, #128	@ 0x80
 8013a70:	0152      	lsls	r2, r2, #5
 8013a72:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8013a74:	4b05      	ldr	r3, [pc, #20]	@ (8013a8c <MX_LPUART1_UART_Init+0x64>)
 8013a76:	0018      	movs	r0, r3
 8013a78:	f009 fcde 	bl	801d438 <HAL_UART_Init>
 8013a7c:	1e03      	subs	r3, r0, #0
 8013a7e:	d001      	beq.n	8013a84 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8013a80:	f7f9 fd08 	bl	800d494 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8013a84:	46c0      	nop			@ (mov r8, r8)
 8013a86:	46bd      	mov	sp, r7
 8013a88:	bd80      	pop	{r7, pc}
 8013a8a:	46c0      	nop			@ (mov r8, r8)
 8013a8c:	2000222c 	.word	0x2000222c
 8013a90:	40004800 	.word	0x40004800

08013a94 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8013a98:	4b14      	ldr	r3, [pc, #80]	@ (8013aec <MX_USART1_UART_Init+0x58>)
 8013a9a:	4a15      	ldr	r2, [pc, #84]	@ (8013af0 <MX_USART1_UART_Init+0x5c>)
 8013a9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8013a9e:	4b13      	ldr	r3, [pc, #76]	@ (8013aec <MX_USART1_UART_Init+0x58>)
 8013aa0:	22e1      	movs	r2, #225	@ 0xe1
 8013aa2:	0252      	lsls	r2, r2, #9
 8013aa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8013aa6:	4b11      	ldr	r3, [pc, #68]	@ (8013aec <MX_USART1_UART_Init+0x58>)
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8013aac:	4b0f      	ldr	r3, [pc, #60]	@ (8013aec <MX_USART1_UART_Init+0x58>)
 8013aae:	2200      	movs	r2, #0
 8013ab0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8013ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8013aec <MX_USART1_UART_Init+0x58>)
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8013ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8013aec <MX_USART1_UART_Init+0x58>)
 8013aba:	220c      	movs	r2, #12
 8013abc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013abe:	4b0b      	ldr	r3, [pc, #44]	@ (8013aec <MX_USART1_UART_Init+0x58>)
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8013ac4:	4b09      	ldr	r3, [pc, #36]	@ (8013aec <MX_USART1_UART_Init+0x58>)
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013aca:	4b08      	ldr	r3, [pc, #32]	@ (8013aec <MX_USART1_UART_Init+0x58>)
 8013acc:	2200      	movs	r2, #0
 8013ace:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8013ad0:	4b06      	ldr	r3, [pc, #24]	@ (8013aec <MX_USART1_UART_Init+0x58>)
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8013ad6:	4b05      	ldr	r3, [pc, #20]	@ (8013aec <MX_USART1_UART_Init+0x58>)
 8013ad8:	0018      	movs	r0, r3
 8013ada:	f009 fcad 	bl	801d438 <HAL_UART_Init>
 8013ade:	1e03      	subs	r3, r0, #0
 8013ae0:	d001      	beq.n	8013ae6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8013ae2:	f7f9 fcd7 	bl	800d494 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8013ae6:	46c0      	nop			@ (mov r8, r8)
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bd80      	pop	{r7, pc}
 8013aec:	200022e4 	.word	0x200022e4
 8013af0:	40013800 	.word	0x40013800

08013af4 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_Init 0 */

  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */
  CLEAR_BIT(huart4.Instance->CR1, USART_CR1_PCE);
 8013af8:	4b24      	ldr	r3, [pc, #144]	@ (8013b8c <MX_USART4_UART_Init+0x98>)
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	681a      	ldr	r2, [r3, #0]
 8013afe:	4b23      	ldr	r3, [pc, #140]	@ (8013b8c <MX_USART4_UART_Init+0x98>)
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	4923      	ldr	r1, [pc, #140]	@ (8013b90 <MX_USART4_UART_Init+0x9c>)
 8013b04:	400a      	ands	r2, r1
 8013b06:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart4.Instance->CR1, USART_CR1_PEIE);
 8013b08:	4b20      	ldr	r3, [pc, #128]	@ (8013b8c <MX_USART4_UART_Init+0x98>)
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	681a      	ldr	r2, [r3, #0]
 8013b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8013b8c <MX_USART4_UART_Init+0x98>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	4920      	ldr	r1, [pc, #128]	@ (8013b94 <MX_USART4_UART_Init+0xa0>)
 8013b14:	400a      	ands	r2, r1
 8013b16:	601a      	str	r2, [r3, #0]

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8013b18:	4b1c      	ldr	r3, [pc, #112]	@ (8013b8c <MX_USART4_UART_Init+0x98>)
 8013b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8013b98 <MX_USART4_UART_Init+0xa4>)
 8013b1c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8013b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8013b8c <MX_USART4_UART_Init+0x98>)
 8013b20:	22e1      	movs	r2, #225	@ 0xe1
 8013b22:	0252      	lsls	r2, r2, #9
 8013b24:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8013b26:	4b19      	ldr	r3, [pc, #100]	@ (8013b8c <MX_USART4_UART_Init+0x98>)
 8013b28:	2200      	movs	r2, #0
 8013b2a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8013b2c:	4b17      	ldr	r3, [pc, #92]	@ (8013b8c <MX_USART4_UART_Init+0x98>)
 8013b2e:	2200      	movs	r2, #0
 8013b30:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8013b32:	4b16      	ldr	r3, [pc, #88]	@ (8013b8c <MX_USART4_UART_Init+0x98>)
 8013b34:	2200      	movs	r2, #0
 8013b36:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8013b38:	4b14      	ldr	r3, [pc, #80]	@ (8013b8c <MX_USART4_UART_Init+0x98>)
 8013b3a:	220c      	movs	r2, #12
 8013b3c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013b3e:	4b13      	ldr	r3, [pc, #76]	@ (8013b8c <MX_USART4_UART_Init+0x98>)
 8013b40:	2200      	movs	r2, #0
 8013b42:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8013b44:	4b11      	ldr	r3, [pc, #68]	@ (8013b8c <MX_USART4_UART_Init+0x98>)
 8013b46:	2200      	movs	r2, #0
 8013b48:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013b4a:	4b10      	ldr	r3, [pc, #64]	@ (8013b8c <MX_USART4_UART_Init+0x98>)
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8013b50:	4b0e      	ldr	r3, [pc, #56]	@ (8013b8c <MX_USART4_UART_Init+0x98>)
 8013b52:	2200      	movs	r2, #0
 8013b54:	625a      	str	r2, [r3, #36]	@ 0x24
  CLEAR_BIT(huart4.Instance->CR1, USART_CR1_PCE);
 8013b56:	4b0d      	ldr	r3, [pc, #52]	@ (8013b8c <MX_USART4_UART_Init+0x98>)
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	681a      	ldr	r2, [r3, #0]
 8013b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8013b8c <MX_USART4_UART_Init+0x98>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	490b      	ldr	r1, [pc, #44]	@ (8013b90 <MX_USART4_UART_Init+0x9c>)
 8013b62:	400a      	ands	r2, r1
 8013b64:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart4.Instance->CR1, USART_CR1_PEIE);
 8013b66:	4b09      	ldr	r3, [pc, #36]	@ (8013b8c <MX_USART4_UART_Init+0x98>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	681a      	ldr	r2, [r3, #0]
 8013b6c:	4b07      	ldr	r3, [pc, #28]	@ (8013b8c <MX_USART4_UART_Init+0x98>)
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	4908      	ldr	r1, [pc, #32]	@ (8013b94 <MX_USART4_UART_Init+0xa0>)
 8013b72:	400a      	ands	r2, r1
 8013b74:	601a      	str	r2, [r3, #0]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8013b76:	4b05      	ldr	r3, [pc, #20]	@ (8013b8c <MX_USART4_UART_Init+0x98>)
 8013b78:	0018      	movs	r0, r3
 8013b7a:	f009 fc5d 	bl	801d438 <HAL_UART_Init>
 8013b7e:	1e03      	subs	r3, r0, #0
 8013b80:	d001      	beq.n	8013b86 <MX_USART4_UART_Init+0x92>
  {
    Error_Handler();
 8013b82:	f7f9 fc87 	bl	800d494 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8013b86:	46c0      	nop			@ (mov r8, r8)
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd80      	pop	{r7, pc}
 8013b8c:	2000239c 	.word	0x2000239c
 8013b90:	fffffbff 	.word	0xfffffbff
 8013b94:	fffffeff 	.word	0xfffffeff
 8013b98:	40004c00 	.word	0x40004c00

08013b9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8013b9c:	b590      	push	{r4, r7, lr}
 8013b9e:	b08d      	sub	sp, #52	@ 0x34
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013ba4:	241c      	movs	r4, #28
 8013ba6:	193b      	adds	r3, r7, r4
 8013ba8:	0018      	movs	r0, r3
 8013baa:	2314      	movs	r3, #20
 8013bac:	001a      	movs	r2, r3
 8013bae:	2100      	movs	r1, #0
 8013bb0:	f012 fde6 	bl	8026780 <memset>
  if(uartHandle->Instance==LPUART1)
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	4a8b      	ldr	r2, [pc, #556]	@ (8013de8 <HAL_UART_MspInit+0x24c>)
 8013bba:	4293      	cmp	r3, r2
 8013bbc:	d129      	bne.n	8013c12 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8013bbe:	4b8b      	ldr	r3, [pc, #556]	@ (8013dec <HAL_UART_MspInit+0x250>)
 8013bc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013bc2:	4b8a      	ldr	r3, [pc, #552]	@ (8013dec <HAL_UART_MspInit+0x250>)
 8013bc4:	2180      	movs	r1, #128	@ 0x80
 8013bc6:	02c9      	lsls	r1, r1, #11
 8013bc8:	430a      	orrs	r2, r1
 8013bca:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013bcc:	4b87      	ldr	r3, [pc, #540]	@ (8013dec <HAL_UART_MspInit+0x250>)
 8013bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013bd0:	4b86      	ldr	r3, [pc, #536]	@ (8013dec <HAL_UART_MspInit+0x250>)
 8013bd2:	2104      	movs	r1, #4
 8013bd4:	430a      	orrs	r2, r1
 8013bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013bd8:	4b84      	ldr	r3, [pc, #528]	@ (8013dec <HAL_UART_MspInit+0x250>)
 8013bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bdc:	2204      	movs	r2, #4
 8013bde:	4013      	ands	r3, r2
 8013be0:	61bb      	str	r3, [r7, #24]
 8013be2:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8013be4:	0021      	movs	r1, r4
 8013be6:	187b      	adds	r3, r7, r1
 8013be8:	2203      	movs	r2, #3
 8013bea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013bec:	187b      	adds	r3, r7, r1
 8013bee:	2202      	movs	r2, #2
 8013bf0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013bf2:	187b      	adds	r3, r7, r1
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013bf8:	187b      	adds	r3, r7, r1
 8013bfa:	2203      	movs	r2, #3
 8013bfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8013bfe:	187b      	adds	r3, r7, r1
 8013c00:	2206      	movs	r2, #6
 8013c02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013c04:	187b      	adds	r3, r7, r1
 8013c06:	4a7a      	ldr	r2, [pc, #488]	@ (8013df0 <HAL_UART_MspInit+0x254>)
 8013c08:	0019      	movs	r1, r3
 8013c0a:	0010      	movs	r0, r2
 8013c0c:	f001 ffa0 	bl	8015b50 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8013c10:	e0e5      	b.n	8013dde <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	4a77      	ldr	r2, [pc, #476]	@ (8013df4 <HAL_UART_MspInit+0x258>)
 8013c18:	4293      	cmp	r3, r2
 8013c1a:	d133      	bne.n	8013c84 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8013c1c:	4b73      	ldr	r3, [pc, #460]	@ (8013dec <HAL_UART_MspInit+0x250>)
 8013c1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013c20:	4b72      	ldr	r3, [pc, #456]	@ (8013dec <HAL_UART_MspInit+0x250>)
 8013c22:	2180      	movs	r1, #128	@ 0x80
 8013c24:	01c9      	lsls	r1, r1, #7
 8013c26:	430a      	orrs	r2, r1
 8013c28:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013c2a:	4b70      	ldr	r3, [pc, #448]	@ (8013dec <HAL_UART_MspInit+0x250>)
 8013c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c2e:	4b6f      	ldr	r3, [pc, #444]	@ (8013dec <HAL_UART_MspInit+0x250>)
 8013c30:	2101      	movs	r1, #1
 8013c32:	430a      	orrs	r2, r1
 8013c34:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013c36:	4b6d      	ldr	r3, [pc, #436]	@ (8013dec <HAL_UART_MspInit+0x250>)
 8013c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c3a:	2201      	movs	r2, #1
 8013c3c:	4013      	ands	r3, r2
 8013c3e:	617b      	str	r3, [r7, #20]
 8013c40:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8013c42:	211c      	movs	r1, #28
 8013c44:	187b      	adds	r3, r7, r1
 8013c46:	22c0      	movs	r2, #192	@ 0xc0
 8013c48:	00d2      	lsls	r2, r2, #3
 8013c4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c4c:	187b      	adds	r3, r7, r1
 8013c4e:	2202      	movs	r2, #2
 8013c50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c52:	187b      	adds	r3, r7, r1
 8013c54:	2200      	movs	r2, #0
 8013c56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c58:	187b      	adds	r3, r7, r1
 8013c5a:	2203      	movs	r2, #3
 8013c5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8013c5e:	187b      	adds	r3, r7, r1
 8013c60:	2204      	movs	r2, #4
 8013c62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013c64:	187a      	adds	r2, r7, r1
 8013c66:	23a0      	movs	r3, #160	@ 0xa0
 8013c68:	05db      	lsls	r3, r3, #23
 8013c6a:	0011      	movs	r1, r2
 8013c6c:	0018      	movs	r0, r3
 8013c6e:	f001 ff6f 	bl	8015b50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8013c72:	2200      	movs	r2, #0
 8013c74:	2100      	movs	r1, #0
 8013c76:	201b      	movs	r0, #27
 8013c78:	f001 fb12 	bl	80152a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8013c7c:	201b      	movs	r0, #27
 8013c7e:	f001 fb24 	bl	80152ca <HAL_NVIC_EnableIRQ>
}
 8013c82:	e0ac      	b.n	8013dde <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	4a5b      	ldr	r2, [pc, #364]	@ (8013df8 <HAL_UART_MspInit+0x25c>)
 8013c8a:	4293      	cmp	r3, r2
 8013c8c:	d000      	beq.n	8013c90 <HAL_UART_MspInit+0xf4>
 8013c8e:	e0a6      	b.n	8013dde <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8013c90:	4b56      	ldr	r3, [pc, #344]	@ (8013dec <HAL_UART_MspInit+0x250>)
 8013c92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013c94:	4b55      	ldr	r3, [pc, #340]	@ (8013dec <HAL_UART_MspInit+0x250>)
 8013c96:	2180      	movs	r1, #128	@ 0x80
 8013c98:	0309      	lsls	r1, r1, #12
 8013c9a:	430a      	orrs	r2, r1
 8013c9c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013c9e:	4b53      	ldr	r3, [pc, #332]	@ (8013dec <HAL_UART_MspInit+0x250>)
 8013ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ca2:	4b52      	ldr	r3, [pc, #328]	@ (8013dec <HAL_UART_MspInit+0x250>)
 8013ca4:	2101      	movs	r1, #1
 8013ca6:	430a      	orrs	r2, r1
 8013ca8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013caa:	4b50      	ldr	r3, [pc, #320]	@ (8013dec <HAL_UART_MspInit+0x250>)
 8013cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cae:	2201      	movs	r2, #1
 8013cb0:	4013      	ands	r3, r2
 8013cb2:	613b      	str	r3, [r7, #16]
 8013cb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013cb6:	4b4d      	ldr	r3, [pc, #308]	@ (8013dec <HAL_UART_MspInit+0x250>)
 8013cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013cba:	4b4c      	ldr	r3, [pc, #304]	@ (8013dec <HAL_UART_MspInit+0x250>)
 8013cbc:	2104      	movs	r1, #4
 8013cbe:	430a      	orrs	r2, r1
 8013cc0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013cc2:	4b4a      	ldr	r3, [pc, #296]	@ (8013dec <HAL_UART_MspInit+0x250>)
 8013cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cc6:	2204      	movs	r2, #4
 8013cc8:	4013      	ands	r3, r2
 8013cca:	60fb      	str	r3, [r7, #12]
 8013ccc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8013cce:	241c      	movs	r4, #28
 8013cd0:	193b      	adds	r3, r7, r4
 8013cd2:	2202      	movs	r2, #2
 8013cd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013cd6:	193b      	adds	r3, r7, r4
 8013cd8:	2202      	movs	r2, #2
 8013cda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013cdc:	193b      	adds	r3, r7, r4
 8013cde:	2200      	movs	r2, #0
 8013ce0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013ce2:	193b      	adds	r3, r7, r4
 8013ce4:	2203      	movs	r2, #3
 8013ce6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8013ce8:	193b      	adds	r3, r7, r4
 8013cea:	2206      	movs	r2, #6
 8013cec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013cee:	193a      	adds	r2, r7, r4
 8013cf0:	23a0      	movs	r3, #160	@ 0xa0
 8013cf2:	05db      	lsls	r3, r3, #23
 8013cf4:	0011      	movs	r1, r2
 8013cf6:	0018      	movs	r0, r3
 8013cf8:	f001 ff2a 	bl	8015b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8013cfc:	0021      	movs	r1, r4
 8013cfe:	187b      	adds	r3, r7, r1
 8013d00:	2280      	movs	r2, #128	@ 0x80
 8013d02:	00d2      	lsls	r2, r2, #3
 8013d04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d06:	187b      	adds	r3, r7, r1
 8013d08:	2202      	movs	r2, #2
 8013d0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d0c:	187b      	adds	r3, r7, r1
 8013d0e:	2200      	movs	r2, #0
 8013d10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013d12:	187b      	adds	r3, r7, r1
 8013d14:	2203      	movs	r2, #3
 8013d16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8013d18:	187b      	adds	r3, r7, r1
 8013d1a:	2206      	movs	r2, #6
 8013d1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013d1e:	187b      	adds	r3, r7, r1
 8013d20:	4a33      	ldr	r2, [pc, #204]	@ (8013df0 <HAL_UART_MspInit+0x254>)
 8013d22:	0019      	movs	r1, r3
 8013d24:	0010      	movs	r0, r2
 8013d26:	f001 ff13 	bl	8015b50 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8013d2a:	4b34      	ldr	r3, [pc, #208]	@ (8013dfc <HAL_UART_MspInit+0x260>)
 8013d2c:	4a34      	ldr	r2, [pc, #208]	@ (8013e00 <HAL_UART_MspInit+0x264>)
 8013d2e:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8013d30:	4b32      	ldr	r3, [pc, #200]	@ (8013dfc <HAL_UART_MspInit+0x260>)
 8013d32:	220c      	movs	r2, #12
 8013d34:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013d36:	4b31      	ldr	r3, [pc, #196]	@ (8013dfc <HAL_UART_MspInit+0x260>)
 8013d38:	2200      	movs	r2, #0
 8013d3a:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8013dfc <HAL_UART_MspInit+0x260>)
 8013d3e:	2200      	movs	r2, #0
 8013d40:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013d42:	4b2e      	ldr	r3, [pc, #184]	@ (8013dfc <HAL_UART_MspInit+0x260>)
 8013d44:	2280      	movs	r2, #128	@ 0x80
 8013d46:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013d48:	4b2c      	ldr	r3, [pc, #176]	@ (8013dfc <HAL_UART_MspInit+0x260>)
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013d4e:	4b2b      	ldr	r3, [pc, #172]	@ (8013dfc <HAL_UART_MspInit+0x260>)
 8013d50:	2200      	movs	r2, #0
 8013d52:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8013d54:	4b29      	ldr	r3, [pc, #164]	@ (8013dfc <HAL_UART_MspInit+0x260>)
 8013d56:	2220      	movs	r2, #32
 8013d58:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013d5a:	4b28      	ldr	r3, [pc, #160]	@ (8013dfc <HAL_UART_MspInit+0x260>)
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8013d60:	4b26      	ldr	r3, [pc, #152]	@ (8013dfc <HAL_UART_MspInit+0x260>)
 8013d62:	0018      	movs	r0, r3
 8013d64:	f001 face 	bl	8015304 <HAL_DMA_Init>
 8013d68:	1e03      	subs	r3, r0, #0
 8013d6a:	d001      	beq.n	8013d70 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8013d6c:	f7f9 fb92 	bl	800d494 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	4a22      	ldr	r2, [pc, #136]	@ (8013dfc <HAL_UART_MspInit+0x260>)
 8013d74:	675a      	str	r2, [r3, #116]	@ 0x74
 8013d76:	4b21      	ldr	r3, [pc, #132]	@ (8013dfc <HAL_UART_MspInit+0x260>)
 8013d78:	687a      	ldr	r2, [r7, #4]
 8013d7a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8013d7c:	4b21      	ldr	r3, [pc, #132]	@ (8013e04 <HAL_UART_MspInit+0x268>)
 8013d7e:	4a22      	ldr	r2, [pc, #136]	@ (8013e08 <HAL_UART_MspInit+0x26c>)
 8013d80:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8013d82:	4b20      	ldr	r3, [pc, #128]	@ (8013e04 <HAL_UART_MspInit+0x268>)
 8013d84:	220c      	movs	r2, #12
 8013d86:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8013d88:	4b1e      	ldr	r3, [pc, #120]	@ (8013e04 <HAL_UART_MspInit+0x268>)
 8013d8a:	2210      	movs	r2, #16
 8013d8c:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8013e04 <HAL_UART_MspInit+0x268>)
 8013d90:	2200      	movs	r2, #0
 8013d92:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013d94:	4b1b      	ldr	r3, [pc, #108]	@ (8013e04 <HAL_UART_MspInit+0x268>)
 8013d96:	2280      	movs	r2, #128	@ 0x80
 8013d98:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8013e04 <HAL_UART_MspInit+0x268>)
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013da0:	4b18      	ldr	r3, [pc, #96]	@ (8013e04 <HAL_UART_MspInit+0x268>)
 8013da2:	2200      	movs	r2, #0
 8013da4:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8013da6:	4b17      	ldr	r3, [pc, #92]	@ (8013e04 <HAL_UART_MspInit+0x268>)
 8013da8:	2200      	movs	r2, #0
 8013daa:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013dac:	4b15      	ldr	r3, [pc, #84]	@ (8013e04 <HAL_UART_MspInit+0x268>)
 8013dae:	2200      	movs	r2, #0
 8013db0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8013db2:	4b14      	ldr	r3, [pc, #80]	@ (8013e04 <HAL_UART_MspInit+0x268>)
 8013db4:	0018      	movs	r0, r3
 8013db6:	f001 faa5 	bl	8015304 <HAL_DMA_Init>
 8013dba:	1e03      	subs	r3, r0, #0
 8013dbc:	d001      	beq.n	8013dc2 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8013dbe:	f7f9 fb69 	bl	800d494 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8013e04 <HAL_UART_MspInit+0x268>)
 8013dc6:	671a      	str	r2, [r3, #112]	@ 0x70
 8013dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8013e04 <HAL_UART_MspInit+0x268>)
 8013dca:	687a      	ldr	r2, [r7, #4]
 8013dcc:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8013dce:	2200      	movs	r2, #0
 8013dd0:	2100      	movs	r1, #0
 8013dd2:	200e      	movs	r0, #14
 8013dd4:	f001 fa64 	bl	80152a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8013dd8:	200e      	movs	r0, #14
 8013dda:	f001 fa76 	bl	80152ca <HAL_NVIC_EnableIRQ>
}
 8013dde:	46c0      	nop			@ (mov r8, r8)
 8013de0:	46bd      	mov	sp, r7
 8013de2:	b00d      	add	sp, #52	@ 0x34
 8013de4:	bd90      	pop	{r4, r7, pc}
 8013de6:	46c0      	nop			@ (mov r8, r8)
 8013de8:	40004800 	.word	0x40004800
 8013dec:	40021000 	.word	0x40021000
 8013df0:	50000800 	.word	0x50000800
 8013df4:	40013800 	.word	0x40013800
 8013df8:	40004c00 	.word	0x40004c00
 8013dfc:	20002454 	.word	0x20002454
 8013e00:	4002006c 	.word	0x4002006c
 8013e04:	2000249c 	.word	0x2000249c
 8013e08:	40020080 	.word	0x40020080

08013e0c <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 192

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b086      	sub	sp, #24
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8013e14:	f000 fdd0 	bl	80149b8 <HAL_GetTick>
 8013e18:	0003      	movs	r3, r0
 8013e1a:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8013e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8013e90 <TimestampIsReached+0x84>)
 8013e1e:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8013e20:	697a      	ldr	r2, [r7, #20]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	429a      	cmp	r2, r3
 8013e26:	d307      	bcc.n	8013e38 <TimestampIsReached+0x2c>
 8013e28:	697a      	ldr	r2, [r7, #20]
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	1ad3      	subs	r3, r2, r3
 8013e2e:	693a      	ldr	r2, [r7, #16]
 8013e30:	429a      	cmp	r2, r3
 8013e32:	d901      	bls.n	8013e38 <TimestampIsReached+0x2c>
 8013e34:	2201      	movs	r2, #1
 8013e36:	e000      	b.n	8013e3a <TimestampIsReached+0x2e>
 8013e38:	2200      	movs	r2, #0
 8013e3a:	230f      	movs	r3, #15
 8013e3c:	18fb      	adds	r3, r7, r3
 8013e3e:	701a      	strb	r2, [r3, #0]
 8013e40:	781a      	ldrb	r2, [r3, #0]
 8013e42:	2101      	movs	r1, #1
 8013e44:	400a      	ands	r2, r1
 8013e46:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8013e48:	697a      	ldr	r2, [r7, #20]
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d207      	bcs.n	8013e60 <TimestampIsReached+0x54>
 8013e50:	687a      	ldr	r2, [r7, #4]
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	1ad3      	subs	r3, r2, r3
 8013e56:	693a      	ldr	r2, [r7, #16]
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	d201      	bcs.n	8013e60 <TimestampIsReached+0x54>
 8013e5c:	2201      	movs	r2, #1
 8013e5e:	e000      	b.n	8013e62 <TimestampIsReached+0x56>
 8013e60:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8013e62:	200e      	movs	r0, #14
 8013e64:	183b      	adds	r3, r7, r0
 8013e66:	701a      	strb	r2, [r3, #0]
 8013e68:	781a      	ldrb	r2, [r3, #0]
 8013e6a:	2101      	movs	r1, #1
 8013e6c:	400a      	ands	r2, r1
 8013e6e:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8013e70:	230f      	movs	r3, #15
 8013e72:	18fb      	adds	r3, r7, r3
 8013e74:	781b      	ldrb	r3, [r3, #0]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d103      	bne.n	8013e82 <TimestampIsReached+0x76>
 8013e7a:	183b      	adds	r3, r7, r0
 8013e7c:	781b      	ldrb	r3, [r3, #0]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d001      	beq.n	8013e86 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8013e82:	2301      	movs	r3, #1
 8013e84:	e000      	b.n	8013e88 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8013e86:	2300      	movs	r3, #0
}
 8013e88:	0018      	movs	r0, r3
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	b006      	add	sp, #24
 8013e8e:	bd80      	pop	{r7, pc}
 8013e90:	7fffffff 	.word	0x7fffffff

08013e94 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b082      	sub	sp, #8
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8013e9c:	f000 fd8c 	bl	80149b8 <HAL_GetTick>
 8013ea0:	0002      	movs	r2, r0
 8013ea2:	4904      	ldr	r1, [pc, #16]	@ (8013eb4 <AddTimestamp+0x20>)
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	0018      	movs	r0, r3
 8013ea8:	f012 fb22 	bl	80264f0 <siprintf>
}
 8013eac:	46c0      	nop			@ (mov r8, r8)
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	b002      	add	sp, #8
 8013eb2:	bd80      	pop	{r7, pc}
 8013eb4:	0802ddbc 	.word	0x0802ddbc

08013eb8 <CreateLine>:


void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8013eb8:	b40c      	push	{r2, r3}
 8013eba:	b5b0      	push	{r4, r5, r7, lr}
 8013ebc:	b0b4      	sub	sp, #208	@ 0xd0
 8013ebe:	af00      	add	r7, sp, #0
 8013ec0:	0002      	movs	r2, r0
 8013ec2:	6039      	str	r1, [r7, #0]
 8013ec4:	1dfb      	adds	r3, r7, #7
 8013ec6:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8013ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8013f74 <CreateLine+0xbc>)
 8013eca:	781b      	ldrb	r3, [r3, #0]
 8013ecc:	1dfa      	adds	r2, r7, #7
 8013ece:	7812      	ldrb	r2, [r2, #0]
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d848      	bhi.n	8013f66 <CreateLine+0xae>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8013ed4:	683a      	ldr	r2, [r7, #0]
 8013ed6:	4928      	ldr	r1, [pc, #160]	@ (8013f78 <CreateLine+0xc0>)
 8013ed8:	240c      	movs	r4, #12
 8013eda:	193b      	adds	r3, r7, r4
 8013edc:	0018      	movs	r0, r3
 8013ede:	f012 fb07 	bl	80264f0 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8013ee2:	4b24      	ldr	r3, [pc, #144]	@ (8013f74 <CreateLine+0xbc>)
 8013ee4:	781b      	ldrb	r3, [r3, #0]
 8013ee6:	2b01      	cmp	r3, #1
 8013ee8:	d909      	bls.n	8013efe <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8013eea:	193b      	adds	r3, r7, r4
 8013eec:	0018      	movs	r0, r3
 8013eee:	f7ec f93d 	bl	800016c <strlen>
 8013ef2:	0002      	movs	r2, r0
 8013ef4:	193b      	adds	r3, r7, r4
 8013ef6:	189b      	adds	r3, r3, r2
 8013ef8:	0018      	movs	r0, r3
 8013efa:	f7ff ffcb 	bl	8013e94 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8013efe:	240c      	movs	r4, #12
 8013f00:	193b      	adds	r3, r7, r4
 8013f02:	0018      	movs	r0, r3
 8013f04:	f7ec f932 	bl	800016c <strlen>
 8013f08:	0003      	movs	r3, r0
 8013f0a:	21cc      	movs	r1, #204	@ 0xcc
 8013f0c:	187a      	adds	r2, r7, r1
 8013f0e:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8013f10:	23dc      	movs	r3, #220	@ 0xdc
 8013f12:	2508      	movs	r5, #8
 8013f14:	195b      	adds	r3, r3, r5
 8013f16:	19db      	adds	r3, r3, r7
 8013f18:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset - 2, format, args);
 8013f1a:	193a      	adds	r2, r7, r4
 8013f1c:	187b      	adds	r3, r7, r1
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	18d0      	adds	r0, r2, r3
 8013f22:	187b      	adds	r3, r7, r1
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	22be      	movs	r2, #190	@ 0xbe
 8013f28:	1ad3      	subs	r3, r2, r3
 8013f2a:	0019      	movs	r1, r3
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	22d8      	movs	r2, #216	@ 0xd8
 8013f30:	1952      	adds	r2, r2, r5
 8013f32:	19d2      	adds	r2, r2, r7
 8013f34:	6812      	ldr	r2, [r2, #0]
 8013f36:	f012 fb77 	bl	8026628 <vsniprintf>
  va_end(args);

  if (usblog && Check_USB_PowerOn()){
 8013f3a:	4b10      	ldr	r3, [pc, #64]	@ (8013f7c <CreateLine+0xc4>)
 8013f3c:	781b      	ldrb	r3, [r3, #0]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d009      	beq.n	8013f56 <CreateLine+0x9e>
 8013f42:	f7f5 fed5 	bl	8009cf0 <Check_USB_PowerOn>
 8013f46:	1e03      	subs	r3, r0, #0
 8013f48:	d005      	beq.n	8013f56 <CreateLine+0x9e>
    printf_USB("%s\r\n", textBuffer);
 8013f4a:	193a      	adds	r2, r7, r4
 8013f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8013f80 <CreateLine+0xc8>)
 8013f4e:	0011      	movs	r1, r2
 8013f50:	0018      	movs	r0, r3
 8013f52:	f7f4 fdd1 	bl	8008af8 <printf_USB>
      printf_USB("%s\r\n", textBuffer);
    }
*/
  }
  // Print the final formatted message to serial
  printf("%s\r\n", textBuffer);
 8013f56:	230c      	movs	r3, #12
 8013f58:	18fa      	adds	r2, r7, r3
 8013f5a:	4b09      	ldr	r3, [pc, #36]	@ (8013f80 <CreateLine+0xc8>)
 8013f5c:	0011      	movs	r1, r2
 8013f5e:	0018      	movs	r0, r3
 8013f60:	f012 fa56 	bl	8026410 <iprintf>
 8013f64:	e000      	b.n	8013f68 <CreateLine+0xb0>
    return;
 8013f66:	46c0      	nop			@ (mov r8, r8)
}
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	b034      	add	sp, #208	@ 0xd0
 8013f6c:	bcb0      	pop	{r4, r5, r7}
 8013f6e:	bc08      	pop	{r3}
 8013f70:	b002      	add	sp, #8
 8013f72:	4718      	bx	r3
 8013f74:	200000f0 	.word	0x200000f0
 8013f78:	0802ddc8 	.word	0x0802ddc8
 8013f7c:	200010f7 	.word	0x200010f7
 8013f80:	0802ddcc 	.word	0x0802ddcc

08013f84 <_write>:

int _write(int fd, void *buf, size_t count) {
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b084      	sub	sp, #16
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	60f8      	str	r0, [r7, #12]
 8013f8c:	60b9      	str	r1, [r7, #8]
 8013f8e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	b29a      	uxth	r2, r3
 8013f94:	68b9      	ldr	r1, [r7, #8]
 8013f96:	4804      	ldr	r0, [pc, #16]	@ (8013fa8 <_write+0x24>)
 8013f98:	2364      	movs	r3, #100	@ 0x64
 8013f9a:	f009 fab3 	bl	801d504 <HAL_UART_Transmit>
  return count;
 8013f9e:	687b      	ldr	r3, [r7, #4]
}
 8013fa0:	0018      	movs	r0, r3
 8013fa2:	46bd      	mov	sp, r7
 8013fa4:	b004      	add	sp, #16
 8013fa6:	bd80      	pop	{r7, pc}
 8013fa8:	200022e4 	.word	0x200022e4

08013fac <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b082      	sub	sp, #8
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	0002      	movs	r2, r0
 8013fb4:	1dfb      	adds	r3, r7, #7
 8013fb6:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 8013fb8:	4b03      	ldr	r3, [pc, #12]	@ (8013fc8 <SetVerboseLevel+0x1c>)
 8013fba:	1dfa      	adds	r2, r7, #7
 8013fbc:	7812      	ldrb	r2, [r2, #0]
 8013fbe:	701a      	strb	r2, [r3, #0]
}
 8013fc0:	46c0      	nop			@ (mov r8, r8)
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	b002      	add	sp, #8
 8013fc6:	bd80      	pop	{r7, pc}
 8013fc8:	200000f0 	.word	0x200000f0

08013fcc <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 8013fd0:	4b02      	ldr	r3, [pc, #8]	@ (8013fdc <GetVerboseLevel+0x10>)
 8013fd2:	781b      	ldrb	r3, [r3, #0]
 8013fd4:	0018      	movs	r0, r3
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}
 8013fda:	46c0      	nop			@ (mov r8, r8)
 8013fdc:	200000f0 	.word	0x200000f0

08013fe0 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b08c      	sub	sp, #48	@ 0x30
 8013fe4:	af00      	add	r7, sp, #0
#else
  char msgout[56];
#endif
#ifdef DEBUG
  #ifndef LARGEBATTERY
  sprintf(msgout,"Software version: %s, Debug build", SRC_VERSION);
 8013fe6:	4a21      	ldr	r2, [pc, #132]	@ (801406c <BinaryReleaseInfo+0x8c>)
 8013fe8:	4921      	ldr	r1, [pc, #132]	@ (8014070 <BinaryReleaseInfo+0x90>)
 8013fea:	1d3b      	adds	r3, r7, #4
 8013fec:	0018      	movs	r0, r3
 8013fee:	f012 fa7f 	bl	80264f0 <siprintf>
  #else
  sprintf(msgout,"Software version: %s Large Battery, Release build", SRC_VERSION);
  #endif
#endif
#ifdef IGNORE_PARITY_ERRORS
  sprintf(msgout,"Build ignores parity errors from ESP32");
 8013ff2:	4a20      	ldr	r2, [pc, #128]	@ (8014074 <BinaryReleaseInfo+0x94>)
 8013ff4:	1d3b      	adds	r3, r7, #4
 8013ff6:	0011      	movs	r1, r2
 8013ff8:	0018      	movs	r0, r3
 8013ffa:	f012 fa79 	bl	80264f0 <siprintf>
#endif
  if (!usblog) {
 8013ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8014078 <BinaryReleaseInfo+0x98>)
 8014000:	781b      	ldrb	r3, [r3, #0]
 8014002:	2201      	movs	r2, #1
 8014004:	4053      	eors	r3, r2
 8014006:	b2db      	uxtb	r3, r3
 8014008:	2b00      	cmp	r3, #0
 801400a:	d005      	beq.n	8014018 <BinaryReleaseInfo+0x38>
    printf_USB("%s\r\n", msgout);  // alway forced shown even if usb logging is off
 801400c:	1d3a      	adds	r2, r7, #4
 801400e:	4b1b      	ldr	r3, [pc, #108]	@ (801407c <BinaryReleaseInfo+0x9c>)
 8014010:	0011      	movs	r1, r2
 8014012:	0018      	movs	r0, r3
 8014014:	f7f4 fd70 	bl	8008af8 <printf_USB>
  }
  Info(msgout);
 8014018:	1d3a      	adds	r2, r7, #4
 801401a:	4b19      	ldr	r3, [pc, #100]	@ (8014080 <BinaryReleaseInfo+0xa0>)
 801401c:	0019      	movs	r1, r3
 801401e:	2002      	movs	r0, #2
 8014020:	f7ff ff4a 	bl	8013eb8 <CreateLine>
  sprintf(msgout,"Build on: %s at %s", __DATE__, __TIME__);
 8014024:	4b17      	ldr	r3, [pc, #92]	@ (8014084 <BinaryReleaseInfo+0xa4>)
 8014026:	4a18      	ldr	r2, [pc, #96]	@ (8014088 <BinaryReleaseInfo+0xa8>)
 8014028:	4918      	ldr	r1, [pc, #96]	@ (801408c <BinaryReleaseInfo+0xac>)
 801402a:	1d38      	adds	r0, r7, #4
 801402c:	f012 fa60 	bl	80264f0 <siprintf>
  if (!usblog) {
 8014030:	4b11      	ldr	r3, [pc, #68]	@ (8014078 <BinaryReleaseInfo+0x98>)
 8014032:	781b      	ldrb	r3, [r3, #0]
 8014034:	2201      	movs	r2, #1
 8014036:	4053      	eors	r3, r2
 8014038:	b2db      	uxtb	r3, r3
 801403a:	2b00      	cmp	r3, #0
 801403c:	d005      	beq.n	801404a <BinaryReleaseInfo+0x6a>
    printf_USB("%s\r\n", msgout);  // alway forced shown even if usb logging is off
 801403e:	1d3a      	adds	r2, r7, #4
 8014040:	4b0e      	ldr	r3, [pc, #56]	@ (801407c <BinaryReleaseInfo+0x9c>)
 8014042:	0011      	movs	r1, r2
 8014044:	0018      	movs	r0, r3
 8014046:	f7f4 fd57 	bl	8008af8 <printf_USB>
  }
  Info(msgout);
 801404a:	1d3a      	adds	r2, r7, #4
 801404c:	4b0c      	ldr	r3, [pc, #48]	@ (8014080 <BinaryReleaseInfo+0xa0>)
 801404e:	0019      	movs	r1, r3
 8014050:	2002      	movs	r0, #2
 8014052:	f7ff ff31 	bl	8013eb8 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8014056:	4b0e      	ldr	r3, [pc, #56]	@ (8014090 <BinaryReleaseInfo+0xb0>)
 8014058:	4a0e      	ldr	r2, [pc, #56]	@ (8014094 <BinaryReleaseInfo+0xb4>)
 801405a:	4909      	ldr	r1, [pc, #36]	@ (8014080 <BinaryReleaseInfo+0xa0>)
 801405c:	2002      	movs	r0, #2
 801405e:	f7ff ff2b 	bl	8013eb8 <CreateLine>
}
 8014062:	46c0      	nop			@ (mov r8, r8)
 8014064:	46bd      	mov	sp, r7
 8014066:	b00c      	add	sp, #48	@ 0x30
 8014068:	bd80      	pop	{r7, pc}
 801406a:	46c0      	nop			@ (mov r8, r8)
 801406c:	0802ddd4 	.word	0x0802ddd4
 8014070:	0802dddc 	.word	0x0802dddc
 8014074:	0802de00 	.word	0x0802de00
 8014078:	200010f7 	.word	0x200010f7
 801407c:	0802ddcc 	.word	0x0802ddcc
 8014080:	0802de28 	.word	0x0802de28
 8014084:	0802de2c 	.word	0x0802de2c
 8014088:	0802de38 	.word	0x0802de38
 801408c:	0802de44 	.word	0x0802de44
 8014090:	0802de58 	.word	0x0802de58
 8014094:	0802de64 	.word	0x0802de64

08014098 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 8014098:	b580      	push	{r7, lr}
 801409a:	b086      	sub	sp, #24
 801409c:	af02      	add	r7, sp, #8
 801409e:	60f8      	str	r0, [r7, #12]
 80140a0:	60b9      	str	r1, [r7, #8]
 80140a2:	607a      	str	r2, [r7, #4]
    Error("Error in %s at line %lu in file: %s\r\n", func, line, file);
 80140a4:	68f8      	ldr	r0, [r7, #12]
 80140a6:	4a07      	ldr	r2, [pc, #28]	@ (80140c4 <errorHandler+0x2c>)
 80140a8:	4907      	ldr	r1, [pc, #28]	@ (80140c8 <errorHandler+0x30>)
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	9301      	str	r3, [sp, #4]
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	9300      	str	r3, [sp, #0]
 80140b2:	0003      	movs	r3, r0
 80140b4:	2001      	movs	r0, #1
 80140b6:	f7ff feff 	bl	8013eb8 <CreateLine>
//    while (true)
//    {
//    }
}
 80140ba:	46c0      	nop			@ (mov r8, r8)
 80140bc:	46bd      	mov	sp, r7
 80140be:	b004      	add	sp, #16
 80140c0:	bd80      	pop	{r7, pc}
 80140c2:	46c0      	nop			@ (mov r8, r8)
 80140c4:	0802de6c 	.word	0x0802de6c
 80140c8:	0802de94 	.word	0x0802de94

080140cc <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80140cc:	b590      	push	{r4, r7, lr}
 80140ce:	b083      	sub	sp, #12
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6039      	str	r1, [r7, #0]
 80140d4:	0011      	movs	r1, r2
 80140d6:	1dfb      	adds	r3, r7, #7
 80140d8:	1c02      	adds	r2, r0, #0
 80140da:	701a      	strb	r2, [r3, #0]
 80140dc:	1dbb      	adds	r3, r7, #6
 80140de:	1c0a      	adds	r2, r1, #0
 80140e0:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 80140e2:	4b0a      	ldr	r3, [pc, #40]	@ (801410c <ReadRegister+0x40>)
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d00a      	beq.n	8014100 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 80140ea:	4b08      	ldr	r3, [pc, #32]	@ (801410c <ReadRegister+0x40>)
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	1dba      	adds	r2, r7, #6
 80140f0:	7814      	ldrb	r4, [r2, #0]
 80140f2:	6839      	ldr	r1, [r7, #0]
 80140f4:	1dfa      	adds	r2, r7, #7
 80140f6:	7810      	ldrb	r0, [r2, #0]
 80140f8:	0022      	movs	r2, r4
 80140fa:	4798      	blx	r3
 80140fc:	0003      	movs	r3, r0
 80140fe:	e000      	b.n	8014102 <ReadRegister+0x36>
	}
	return false;
 8014100:	2300      	movs	r3, #0
}
 8014102:	0018      	movs	r0, r3
 8014104:	46bd      	mov	sp, r7
 8014106:	b003      	add	sp, #12
 8014108:	bd90      	pop	{r4, r7, pc}
 801410a:	46c0      	nop			@ (mov r8, r8)
 801410c:	200024ec 	.word	0x200024ec

08014110 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8014110:	b590      	push	{r4, r7, lr}
 8014112:	b083      	sub	sp, #12
 8014114:	af00      	add	r7, sp, #0
 8014116:	6039      	str	r1, [r7, #0]
 8014118:	0011      	movs	r1, r2
 801411a:	1dfb      	adds	r3, r7, #7
 801411c:	1c02      	adds	r2, r0, #0
 801411e:	701a      	strb	r2, [r3, #0]
 8014120:	1dbb      	adds	r3, r7, #6
 8014122:	1c0a      	adds	r2, r1, #0
 8014124:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8014126:	4b0a      	ldr	r3, [pc, #40]	@ (8014150 <WriteRegister+0x40>)
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d00a      	beq.n	8014144 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 801412e:	4b08      	ldr	r3, [pc, #32]	@ (8014150 <WriteRegister+0x40>)
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	1dba      	adds	r2, r7, #6
 8014134:	7814      	ldrb	r4, [r2, #0]
 8014136:	6839      	ldr	r1, [r7, #0]
 8014138:	1dfa      	adds	r2, r7, #7
 801413a:	7810      	ldrb	r0, [r2, #0]
 801413c:	0022      	movs	r2, r4
 801413e:	4798      	blx	r3
 8014140:	0003      	movs	r3, r0
 8014142:	e000      	b.n	8014146 <WriteRegister+0x36>
  }
  return false;
 8014144:	2300      	movs	r3, #0
}
 8014146:	0018      	movs	r0, r3
 8014148:	46bd      	mov	sp, r7
 801414a:	b003      	add	sp, #12
 801414c:	bd90      	pop	{r4, r7, pc}
 801414e:	46c0      	nop			@ (mov r8, r8)
 8014150:	200024f0 	.word	0x200024f0

08014154 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8014154:	b580      	push	{r7, lr}
 8014156:	b084      	sub	sp, #16
 8014158:	af00      	add	r7, sp, #0
 801415a:	6078      	str	r0, [r7, #4]
 801415c:	000a      	movs	r2, r1
 801415e:	1cfb      	adds	r3, r7, #3
 8014160:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8014162:	230f      	movs	r3, #15
 8014164:	18fb      	adds	r3, r7, r3
 8014166:	22ff      	movs	r2, #255	@ 0xff
 8014168:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 801416a:	230e      	movs	r3, #14
 801416c:	18fb      	adds	r3, r7, r3
 801416e:	2200      	movs	r2, #0
 8014170:	701a      	strb	r2, [r3, #0]
 8014172:	e038      	b.n	80141e6 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8014174:	230e      	movs	r3, #14
 8014176:	18fb      	adds	r3, r7, r3
 8014178:	781b      	ldrb	r3, [r3, #0]
 801417a:	687a      	ldr	r2, [r7, #4]
 801417c:	18d3      	adds	r3, r2, r3
 801417e:	7819      	ldrb	r1, [r3, #0]
 8014180:	220f      	movs	r2, #15
 8014182:	18bb      	adds	r3, r7, r2
 8014184:	18ba      	adds	r2, r7, r2
 8014186:	7812      	ldrb	r2, [r2, #0]
 8014188:	404a      	eors	r2, r1
 801418a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 801418c:	230d      	movs	r3, #13
 801418e:	18fb      	adds	r3, r7, r3
 8014190:	2200      	movs	r2, #0
 8014192:	701a      	strb	r2, [r3, #0]
 8014194:	e01c      	b.n	80141d0 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8014196:	210f      	movs	r1, #15
 8014198:	187b      	adds	r3, r7, r1
 801419a:	781b      	ldrb	r3, [r3, #0]
 801419c:	b25b      	sxtb	r3, r3
 801419e:	2b00      	cmp	r3, #0
 80141a0:	da0a      	bge.n	80141b8 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 80141a2:	187b      	adds	r3, r7, r1
 80141a4:	781b      	ldrb	r3, [r3, #0]
 80141a6:	b25b      	sxtb	r3, r3
 80141a8:	18db      	adds	r3, r3, r3
 80141aa:	b25b      	sxtb	r3, r3
 80141ac:	2231      	movs	r2, #49	@ 0x31
 80141ae:	4053      	eors	r3, r2
 80141b0:	b25a      	sxtb	r2, r3
 80141b2:	187b      	adds	r3, r7, r1
 80141b4:	701a      	strb	r2, [r3, #0]
 80141b6:	e005      	b.n	80141c4 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 80141b8:	230f      	movs	r3, #15
 80141ba:	18fa      	adds	r2, r7, r3
 80141bc:	18fb      	adds	r3, r7, r3
 80141be:	781b      	ldrb	r3, [r3, #0]
 80141c0:	18db      	adds	r3, r3, r3
 80141c2:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80141c4:	210d      	movs	r1, #13
 80141c6:	187b      	adds	r3, r7, r1
 80141c8:	781a      	ldrb	r2, [r3, #0]
 80141ca:	187b      	adds	r3, r7, r1
 80141cc:	3201      	adds	r2, #1
 80141ce:	701a      	strb	r2, [r3, #0]
 80141d0:	230d      	movs	r3, #13
 80141d2:	18fb      	adds	r3, r7, r3
 80141d4:	781b      	ldrb	r3, [r3, #0]
 80141d6:	2b07      	cmp	r3, #7
 80141d8:	d9dd      	bls.n	8014196 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80141da:	210e      	movs	r1, #14
 80141dc:	187b      	adds	r3, r7, r1
 80141de:	781a      	ldrb	r2, [r3, #0]
 80141e0:	187b      	adds	r3, r7, r1
 80141e2:	3201      	adds	r2, #1
 80141e4:	701a      	strb	r2, [r3, #0]
 80141e6:	230e      	movs	r3, #14
 80141e8:	18fa      	adds	r2, r7, r3
 80141ea:	1cfb      	adds	r3, r7, #3
 80141ec:	7812      	ldrb	r2, [r2, #0]
 80141ee:	781b      	ldrb	r3, [r3, #0]
 80141f0:	429a      	cmp	r2, r3
 80141f2:	d3bf      	bcc.n	8014174 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 80141f4:	230f      	movs	r3, #15
 80141f6:	18fb      	adds	r3, r7, r3
 80141f8:	781b      	ldrb	r3, [r3, #0]
}
 80141fa:	0018      	movs	r0, r3
 80141fc:	46bd      	mov	sp, r7
 80141fe:	b004      	add	sp, #16
 8014200:	bd80      	pop	{r7, pc}
	...

08014204 <HIDS_DewPointCalculation>:

float HIDS_DewPointCalculation(float* humidity, float* temperature) {
 8014204:	b5b0      	push	{r4, r5, r7, lr}
 8014206:	b084      	sub	sp, #16
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
 801420c:	6039      	str	r1, [r7, #0]
  float lambda = (((17.27 * *temperature) / (237.7 + *temperature)) + log(*humidity/100.0));
 801420e:	683b      	ldr	r3, [r7, #0]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	1c18      	adds	r0, r3, #0
 8014214:	f7ef fb3e 	bl	8003894 <__aeabi_f2d>
 8014218:	4a2e      	ldr	r2, [pc, #184]	@ (80142d4 <HIDS_DewPointCalculation+0xd0>)
 801421a:	4b2f      	ldr	r3, [pc, #188]	@ (80142d8 <HIDS_DewPointCalculation+0xd4>)
 801421c:	f7ee fb9a 	bl	8002954 <__aeabi_dmul>
 8014220:	0002      	movs	r2, r0
 8014222:	000b      	movs	r3, r1
 8014224:	0014      	movs	r4, r2
 8014226:	001d      	movs	r5, r3
 8014228:	683b      	ldr	r3, [r7, #0]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	1c18      	adds	r0, r3, #0
 801422e:	f7ef fb31 	bl	8003894 <__aeabi_f2d>
 8014232:	4a2a      	ldr	r2, [pc, #168]	@ (80142dc <HIDS_DewPointCalculation+0xd8>)
 8014234:	4b2a      	ldr	r3, [pc, #168]	@ (80142e0 <HIDS_DewPointCalculation+0xdc>)
 8014236:	f7ed fb8d 	bl	8001954 <__aeabi_dadd>
 801423a:	0002      	movs	r2, r0
 801423c:	000b      	movs	r3, r1
 801423e:	0020      	movs	r0, r4
 8014240:	0029      	movs	r1, r5
 8014242:	f7ed ff4d 	bl	80020e0 <__aeabi_ddiv>
 8014246:	0002      	movs	r2, r0
 8014248:	000b      	movs	r3, r1
 801424a:	0014      	movs	r4, r2
 801424c:	001d      	movs	r5, r3
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	1c18      	adds	r0, r3, #0
 8014254:	f7ef fb1e 	bl	8003894 <__aeabi_f2d>
 8014258:	2200      	movs	r2, #0
 801425a:	4b22      	ldr	r3, [pc, #136]	@ (80142e4 <HIDS_DewPointCalculation+0xe0>)
 801425c:	f7ed ff40 	bl	80020e0 <__aeabi_ddiv>
 8014260:	0002      	movs	r2, r0
 8014262:	000b      	movs	r3, r1
 8014264:	0010      	movs	r0, r2
 8014266:	0019      	movs	r1, r3
 8014268:	f015 f81a 	bl	80292a0 <log>
 801426c:	0002      	movs	r2, r0
 801426e:	000b      	movs	r3, r1
 8014270:	0020      	movs	r0, r4
 8014272:	0029      	movs	r1, r5
 8014274:	f7ed fb6e 	bl	8001954 <__aeabi_dadd>
 8014278:	0002      	movs	r2, r0
 801427a:	000b      	movs	r3, r1
 801427c:	0010      	movs	r0, r2
 801427e:	0019      	movs	r1, r3
 8014280:	f7ef fb50 	bl	8003924 <__aeabi_d2f>
 8014284:	1c03      	adds	r3, r0, #0
 8014286:	60fb      	str	r3, [r7, #12]
  return ((237.7 * lambda) / (17.27 - lambda));
 8014288:	68f8      	ldr	r0, [r7, #12]
 801428a:	f7ef fb03 	bl	8003894 <__aeabi_f2d>
 801428e:	4a13      	ldr	r2, [pc, #76]	@ (80142dc <HIDS_DewPointCalculation+0xd8>)
 8014290:	4b13      	ldr	r3, [pc, #76]	@ (80142e0 <HIDS_DewPointCalculation+0xdc>)
 8014292:	f7ee fb5f 	bl	8002954 <__aeabi_dmul>
 8014296:	0002      	movs	r2, r0
 8014298:	000b      	movs	r3, r1
 801429a:	0014      	movs	r4, r2
 801429c:	001d      	movs	r5, r3
 801429e:	68f8      	ldr	r0, [r7, #12]
 80142a0:	f7ef faf8 	bl	8003894 <__aeabi_f2d>
 80142a4:	0002      	movs	r2, r0
 80142a6:	000b      	movs	r3, r1
 80142a8:	480a      	ldr	r0, [pc, #40]	@ (80142d4 <HIDS_DewPointCalculation+0xd0>)
 80142aa:	490b      	ldr	r1, [pc, #44]	@ (80142d8 <HIDS_DewPointCalculation+0xd4>)
 80142ac:	f7ee fe38 	bl	8002f20 <__aeabi_dsub>
 80142b0:	0002      	movs	r2, r0
 80142b2:	000b      	movs	r3, r1
 80142b4:	0020      	movs	r0, r4
 80142b6:	0029      	movs	r1, r5
 80142b8:	f7ed ff12 	bl	80020e0 <__aeabi_ddiv>
 80142bc:	0002      	movs	r2, r0
 80142be:	000b      	movs	r3, r1
 80142c0:	0010      	movs	r0, r2
 80142c2:	0019      	movs	r1, r3
 80142c4:	f7ef fb2e 	bl	8003924 <__aeabi_d2f>
 80142c8:	1c03      	adds	r3, r0, #0
}
 80142ca:	1c18      	adds	r0, r3, #0
 80142cc:	46bd      	mov	sp, r7
 80142ce:	b004      	add	sp, #16
 80142d0:	bdb0      	pop	{r4, r5, r7, pc}
 80142d2:	46c0      	nop			@ (mov r8, r8)
 80142d4:	b851eb85 	.word	0xb851eb85
 80142d8:	4031451e 	.word	0x4031451e
 80142dc:	66666666 	.word	0x66666666
 80142e0:	406db666 	.word	0x406db666
 80142e4:	40590000 	.word	0x40590000

080142e8 <HIDS_EnableHeater>:

void HIDS_EnableHeater(void) {
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b082      	sub	sp, #8
 80142ec:	af00      	add	r7, sp, #0
  // During heater operation, the sensor’s specifications are not valid.
  uint8_t heaterReg = HeaterMode;
 80142ee:	4b0d      	ldr	r3, [pc, #52]	@ (8014324 <HIDS_EnableHeater+0x3c>)
 80142f0:	781a      	ldrb	r2, [r3, #0]
 80142f2:	1dfb      	adds	r3, r7, #7
 80142f4:	701a      	strb	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
 80142f6:	1dfb      	adds	r3, r7, #7
 80142f8:	2201      	movs	r2, #1
 80142fa:	0019      	movs	r1, r3
 80142fc:	2044      	movs	r0, #68	@ 0x44
 80142fe:	f7ff ff07 	bl	8014110 <WriteRegister>
  Info("Started the heater in mode: %d", heaterReg);
 8014302:	1dfb      	adds	r3, r7, #7
 8014304:	781b      	ldrb	r3, [r3, #0]
 8014306:	4a08      	ldr	r2, [pc, #32]	@ (8014328 <HIDS_EnableHeater+0x40>)
 8014308:	4908      	ldr	r1, [pc, #32]	@ (801432c <HIDS_EnableHeater+0x44>)
 801430a:	2002      	movs	r0, #2
 801430c:	f7ff fdd4 	bl	8013eb8 <CreateLine>
  HIDS_LastHeaterInRTC = getPosixTime();
 8014310:	f7f6 f990 	bl	800a634 <getPosixTime>
 8014314:	0002      	movs	r2, r0
 8014316:	4b06      	ldr	r3, [pc, #24]	@ (8014330 <HIDS_EnableHeater+0x48>)
 8014318:	601a      	str	r2, [r3, #0]
}
 801431a:	46c0      	nop			@ (mov r8, r8)
 801431c:	46bd      	mov	sp, r7
 801431e:	b002      	add	sp, #8
 8014320:	bd80      	pop	{r7, pc}
 8014322:	46c0      	nop			@ (mov r8, r8)
 8014324:	200000f1 	.word	0x200000f1
 8014328:	0802de98 	.word	0x0802de98
 801432c:	0802deb8 	.word	0x0802deb8
 8014330:	20002504 	.word	0x20002504

08014334 <HIDS_Init>:

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8014334:	b580      	push	{r7, lr}
 8014336:	b082      	sub	sp, #8
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
 801433c:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 801433e:	4b0a      	ldr	r3, [pc, #40]	@ (8014368 <HIDS_Init+0x34>)
 8014340:	687a      	ldr	r2, [r7, #4]
 8014342:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8014344:	4b09      	ldr	r3, [pc, #36]	@ (801436c <HIDS_Init+0x38>)
 8014346:	683a      	ldr	r2, [r7, #0]
 8014348:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 801434a:	4b09      	ldr	r3, [pc, #36]	@ (8014370 <HIDS_Init+0x3c>)
 801434c:	781b      	ldrb	r3, [r3, #0]
 801434e:	0018      	movs	r0, r3
 8014350:	f000 f840 	bl	80143d4 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8014354:	4b07      	ldr	r3, [pc, #28]	@ (8014374 <HIDS_Init+0x40>)
 8014356:	781b      	ldrb	r3, [r3, #0]
 8014358:	0018      	movs	r0, r3
 801435a:	f000 f82b 	bl	80143b4 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 801435e:	46c0      	nop			@ (mov r8, r8)
 8014360:	46bd      	mov	sp, r7
 8014362:	b002      	add	sp, #8
 8014364:	bd80      	pop	{r7, pc}
 8014366:	46c0      	nop			@ (mov r8, r8)
 8014368:	200024ec 	.word	0x200024ec
 801436c:	200024f0 	.word	0x200024f0
 8014370:	200000f2 	.word	0x200000f2
 8014374:	200000f1 	.word	0x200000f1

08014378 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8014378:	b580      	push	{r7, lr}
 801437a:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 801437c:	f000 fb1c 	bl	80149b8 <HAL_GetTick>
 8014380:	0002      	movs	r2, r0
 8014382:	4b08      	ldr	r3, [pc, #32]	@ (80143a4 <HIDS_StartMeasurement+0x2c>)
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	18d2      	adds	r2, r2, r3
 8014388:	4b07      	ldr	r3, [pc, #28]	@ (80143a8 <HIDS_StartMeasurement+0x30>)
 801438a:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 801438c:	4b07      	ldr	r3, [pc, #28]	@ (80143ac <HIDS_StartMeasurement+0x34>)
 801438e:	2201      	movs	r2, #1
 8014390:	0019      	movs	r1, r3
 8014392:	2044      	movs	r0, #68	@ 0x44
 8014394:	f7ff febc 	bl	8014110 <WriteRegister>
  MeasurementDone = false;
 8014398:	4b05      	ldr	r3, [pc, #20]	@ (80143b0 <HIDS_StartMeasurement+0x38>)
 801439a:	2200      	movs	r2, #0
 801439c:	701a      	strb	r2, [r3, #0]
}
 801439e:	46c0      	nop			@ (mov r8, r8)
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}
 80143a4:	200000f8 	.word	0x200000f8
 80143a8:	200000f4 	.word	0x200000f4
 80143ac:	200000f2 	.word	0x200000f2
 80143b0:	20002508 	.word	0x20002508

080143b4 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b082      	sub	sp, #8
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	0002      	movs	r2, r0
 80143bc:	1dfb      	adds	r3, r7, #7
 80143be:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 80143c0:	4b03      	ldr	r3, [pc, #12]	@ (80143d0 <HIDS_SetHeaterMode+0x1c>)
 80143c2:	1dfa      	adds	r2, r7, #7
 80143c4:	7812      	ldrb	r2, [r2, #0]
 80143c6:	701a      	strb	r2, [r3, #0]
}
 80143c8:	46c0      	nop			@ (mov r8, r8)
 80143ca:	46bd      	mov	sp, r7
 80143cc:	b002      	add	sp, #8
 80143ce:	bd80      	pop	{r7, pc}
 80143d0:	200000f1 	.word	0x200000f1

080143d4 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b082      	sub	sp, #8
 80143d8:	af00      	add	r7, sp, #0
 80143da:	0002      	movs	r2, r0
 80143dc:	1dfb      	adds	r3, r7, #7
 80143de:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 80143e0:	4b03      	ldr	r3, [pc, #12]	@ (80143f0 <HIDS_SetMeasurementMode+0x1c>)
 80143e2:	1dfa      	adds	r2, r7, #7
 80143e4:	7812      	ldrb	r2, [r2, #0]
 80143e6:	701a      	strb	r2, [r3, #0]
}
 80143e8:	46c0      	nop			@ (mov r8, r8)
 80143ea:	46bd      	mov	sp, r7
 80143ec:	b002      	add	sp, #8
 80143ee:	bd80      	pop	{r7, pc}
 80143f0:	200000f2 	.word	0x200000f2

080143f4 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b082      	sub	sp, #8
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 80143fc:	f000 fadc 	bl	80149b8 <HAL_GetTick>
 8014400:	0002      	movs	r2, r0
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	18d2      	adds	r2, r2, r3
 8014406:	4b03      	ldr	r3, [pc, #12]	@ (8014414 <setHIDSTimeStamp+0x20>)
 8014408:	601a      	str	r2, [r3, #0]
}
 801440a:	46c0      	nop			@ (mov r8, r8)
 801440c:	46bd      	mov	sp, r7
 801440e:	b002      	add	sp, #8
 8014410:	bd80      	pop	{r7, pc}
 8014412:	46c0      	nop			@ (mov r8, r8)
 8014414:	2000250c 	.word	0x2000250c

08014418 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8014418:	b590      	push	{r4, r7, lr}
 801441a:	b085      	sub	sp, #20
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	781a      	ldrb	r2, [r3, #0]
 8014424:	210c      	movs	r1, #12
 8014426:	187b      	adds	r3, r7, r1
 8014428:	701a      	strb	r2, [r3, #0]
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	785a      	ldrb	r2, [r3, #1]
 801442e:	187b      	adds	r3, r7, r1
 8014430:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8014432:	240f      	movs	r4, #15
 8014434:	193b      	adds	r3, r7, r4
 8014436:	687a      	ldr	r2, [r7, #4]
 8014438:	7892      	ldrb	r2, [r2, #2]
 801443a:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 801443c:	187b      	adds	r3, r7, r1
 801443e:	2102      	movs	r1, #2
 8014440:	0018      	movs	r0, r3
 8014442:	f7ff fe87 	bl	8014154 <CalculateCRC>
 8014446:	0003      	movs	r3, r0
 8014448:	001a      	movs	r2, r3
 801444a:	193b      	adds	r3, r7, r4
 801444c:	781b      	ldrb	r3, [r3, #0]
 801444e:	4293      	cmp	r3, r2
 8014450:	d007      	beq.n	8014462 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8014452:	4a1a      	ldr	r2, [pc, #104]	@ (80144bc <CheckCRC+0xa4>)
 8014454:	4b1a      	ldr	r3, [pc, #104]	@ (80144c0 <CheckCRC+0xa8>)
 8014456:	0019      	movs	r1, r3
 8014458:	2001      	movs	r0, #1
 801445a:	f7ff fd2d 	bl	8013eb8 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 801445e:	2300      	movs	r3, #0
 8014460:	e027      	b.n	80144b2 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	78da      	ldrb	r2, [r3, #3]
 8014466:	2108      	movs	r1, #8
 8014468:	187b      	adds	r3, r7, r1
 801446a:	701a      	strb	r2, [r3, #0]
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	791a      	ldrb	r2, [r3, #4]
 8014470:	187b      	adds	r3, r7, r1
 8014472:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8014474:	240e      	movs	r4, #14
 8014476:	193b      	adds	r3, r7, r4
 8014478:	687a      	ldr	r2, [r7, #4]
 801447a:	7952      	ldrb	r2, [r2, #5]
 801447c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 801447e:	187b      	adds	r3, r7, r1
 8014480:	2102      	movs	r1, #2
 8014482:	0018      	movs	r0, r3
 8014484:	f7ff fe66 	bl	8014154 <CalculateCRC>
 8014488:	0003      	movs	r3, r0
 801448a:	001a      	movs	r2, r3
 801448c:	193b      	adds	r3, r7, r4
 801448e:	781b      	ldrb	r3, [r3, #0]
 8014490:	4293      	cmp	r3, r2
 8014492:	d00d      	beq.n	80144b0 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 8014494:	4a0b      	ldr	r2, [pc, #44]	@ (80144c4 <CheckCRC+0xac>)
 8014496:	4b0a      	ldr	r3, [pc, #40]	@ (80144c0 <CheckCRC+0xa8>)
 8014498:	0019      	movs	r1, r3
 801449a:	2001      	movs	r0, #1
 801449c:	f7ff fd0c 	bl	8013eb8 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 80144a0:	4a09      	ldr	r2, [pc, #36]	@ (80144c8 <CheckCRC+0xb0>)
 80144a2:	4b0a      	ldr	r3, [pc, #40]	@ (80144cc <CheckCRC+0xb4>)
 80144a4:	2185      	movs	r1, #133	@ 0x85
 80144a6:	0018      	movs	r0, r3
 80144a8:	f7ff fdf6 	bl	8014098 <errorHandler>
		return false;
 80144ac:	2300      	movs	r3, #0
 80144ae:	e000      	b.n	80144b2 <CheckCRC+0x9a>
	}
	return true;
 80144b0:	2301      	movs	r3, #1
}
 80144b2:	0018      	movs	r0, r3
 80144b4:	46bd      	mov	sp, r7
 80144b6:	b005      	add	sp, #20
 80144b8:	bd90      	pop	{r4, r7, pc}
 80144ba:	46c0      	nop			@ (mov r8, r8)
 80144bc:	0802debc 	.word	0x0802debc
 80144c0:	0802dee4 	.word	0x0802dee4
 80144c4:	0802dee8 	.word	0x0802dee8
 80144c8:	0802df14 	.word	0x0802df14
 80144cc:	0802e8d4 	.word	0x0802e8d4

080144d0 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b084      	sub	sp, #16
 80144d4:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 80144d6:	1dbb      	adds	r3, r7, #6
 80144d8:	2289      	movs	r2, #137	@ 0x89
 80144da:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 80144dc:	1dbb      	adds	r3, r7, #6
 80144de:	2201      	movs	r2, #1
 80144e0:	0019      	movs	r1, r3
 80144e2:	2044      	movs	r0, #68	@ 0x44
 80144e4:	f7ff fe14 	bl	8014110 <WriteRegister>
	HAL_Delay(30);
 80144e8:	201e      	movs	r0, #30
 80144ea:	f000 fa6f 	bl	80149cc <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 80144ee:	4b14      	ldr	r3, [pc, #80]	@ (8014540 <HIDS_DeviceConnected+0x70>)
 80144f0:	2206      	movs	r2, #6
 80144f2:	0019      	movs	r1, r3
 80144f4:	2044      	movs	r0, #68	@ 0x44
 80144f6:	f7ff fde9 	bl	80140cc <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80144fa:	1dfb      	adds	r3, r7, #7
 80144fc:	2200      	movs	r2, #0
 80144fe:	701a      	strb	r2, [r3, #0]
 8014500:	e011      	b.n	8014526 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8014502:	1dfb      	adds	r3, r7, #7
 8014504:	7818      	ldrb	r0, [r3, #0]
 8014506:	1dfb      	adds	r3, r7, #7
 8014508:	781b      	ldrb	r3, [r3, #0]
 801450a:	4a0d      	ldr	r2, [pc, #52]	@ (8014540 <HIDS_DeviceConnected+0x70>)
 801450c:	5cd3      	ldrb	r3, [r2, r3]
 801450e:	4a0d      	ldr	r2, [pc, #52]	@ (8014544 <HIDS_DeviceConnected+0x74>)
 8014510:	490d      	ldr	r1, [pc, #52]	@ (8014548 <HIDS_DeviceConnected+0x78>)
 8014512:	9300      	str	r3, [sp, #0]
 8014514:	0003      	movs	r3, r0
 8014516:	2002      	movs	r0, #2
 8014518:	f7ff fcce 	bl	8013eb8 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 801451c:	1dfb      	adds	r3, r7, #7
 801451e:	781a      	ldrb	r2, [r3, #0]
 8014520:	1dfb      	adds	r3, r7, #7
 8014522:	3201      	adds	r2, #1
 8014524:	701a      	strb	r2, [r3, #0]
 8014526:	1dfb      	adds	r3, r7, #7
 8014528:	781b      	ldrb	r3, [r3, #0]
 801452a:	2b05      	cmp	r3, #5
 801452c:	d9e9      	bls.n	8014502 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 801452e:	4b04      	ldr	r3, [pc, #16]	@ (8014540 <HIDS_DeviceConnected+0x70>)
 8014530:	0018      	movs	r0, r3
 8014532:	f7ff ff71 	bl	8014418 <CheckCRC>
 8014536:	0003      	movs	r3, r0
}
 8014538:	0018      	movs	r0, r3
 801453a:	46bd      	mov	sp, r7
 801453c:	b002      	add	sp, #8
 801453e:	bd80      	pop	{r7, pc}
 8014540:	200024f4 	.word	0x200024f4
 8014544:	0802df2c 	.word	0x0802df2c
 8014548:	0802deb8 	.word	0x0802deb8

0801454c <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 801454c:	b580      	push	{r7, lr}
 801454e:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8014550:	4b04      	ldr	r3, [pc, #16]	@ (8014564 <HIDS_MeasurementReady+0x18>)
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	0018      	movs	r0, r3
 8014556:	f7ff fc59 	bl	8013e0c <TimestampIsReached>
 801455a:	0003      	movs	r3, r0
}
 801455c:	0018      	movs	r0, r3
 801455e:	46bd      	mov	sp, r7
 8014560:	bd80      	pop	{r7, pc}
 8014562:	46c0      	nop			@ (mov r8, r8)
 8014564:	200000f4 	.word	0x200000f4

08014568 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8014568:	b580      	push	{r7, lr}
 801456a:	b084      	sub	sp, #16
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
 8014570:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 8014572:	4b41      	ldr	r3, [pc, #260]	@ (8014678 <HIDS_GetMeasurementValues+0x110>)
 8014574:	781b      	ldrb	r3, [r3, #0]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d001      	beq.n	801457e <HIDS_GetMeasurementValues+0x16>
 801457a:	2301      	movs	r3, #1
 801457c:	e077      	b.n	801466e <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 801457e:	f7ff ffe5 	bl	801454c <HIDS_MeasurementReady>
 8014582:	0003      	movs	r3, r0
 8014584:	001a      	movs	r2, r3
 8014586:	2301      	movs	r3, #1
 8014588:	4053      	eors	r3, r2
 801458a:	b2db      	uxtb	r3, r3
 801458c:	2b00      	cmp	r3, #0
 801458e:	d001      	beq.n	8014594 <HIDS_GetMeasurementValues+0x2c>
 8014590:	2300      	movs	r3, #0
 8014592:	e06c      	b.n	801466e <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 8014594:	4b39      	ldr	r3, [pc, #228]	@ (801467c <HIDS_GetMeasurementValues+0x114>)
 8014596:	2206      	movs	r2, #6
 8014598:	0019      	movs	r1, r3
 801459a:	2044      	movs	r0, #68	@ 0x44
 801459c:	f7ff fd96 	bl	80140cc <ReadRegister>
 80145a0:	0003      	movs	r3, r0
 80145a2:	001a      	movs	r2, r3
 80145a4:	2301      	movs	r3, #1
 80145a6:	4053      	eors	r3, r2
 80145a8:	b2db      	uxtb	r3, r3
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d005      	beq.n	80145ba <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 80145ae:	4a34      	ldr	r2, [pc, #208]	@ (8014680 <HIDS_GetMeasurementValues+0x118>)
 80145b0:	4b34      	ldr	r3, [pc, #208]	@ (8014684 <HIDS_GetMeasurementValues+0x11c>)
 80145b2:	0019      	movs	r1, r3
 80145b4:	2001      	movs	r0, #1
 80145b6:	f7ff fc7f 	bl	8013eb8 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 80145ba:	4b30      	ldr	r3, [pc, #192]	@ (801467c <HIDS_GetMeasurementValues+0x114>)
 80145bc:	0018      	movs	r0, r3
 80145be:	f7ff ff2b 	bl	8014418 <CheckCRC>
 80145c2:	0003      	movs	r3, r0
 80145c4:	001a      	movs	r2, r3
 80145c6:	2301      	movs	r3, #1
 80145c8:	4053      	eors	r3, r2
 80145ca:	b2db      	uxtb	r3, r3
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d001      	beq.n	80145d4 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 80145d0:	2300      	movs	r3, #0
 80145d2:	e04c      	b.n	801466e <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 80145d4:	4b29      	ldr	r3, [pc, #164]	@ (801467c <HIDS_GetMeasurementValues+0x114>)
 80145d6:	781b      	ldrb	r3, [r3, #0]
 80145d8:	021b      	lsls	r3, r3, #8
 80145da:	4a28      	ldr	r2, [pc, #160]	@ (801467c <HIDS_GetMeasurementValues+0x114>)
 80145dc:	7852      	ldrb	r2, [r2, #1]
 80145de:	4313      	orrs	r3, r2
 80145e0:	22af      	movs	r2, #175	@ 0xaf
 80145e2:	4353      	muls	r3, r2
 80145e4:	0018      	movs	r0, r3
 80145e6:	f7ef f903 	bl	80037f0 <__aeabi_i2d>
 80145ea:	2200      	movs	r2, #0
 80145ec:	4b26      	ldr	r3, [pc, #152]	@ (8014688 <HIDS_GetMeasurementValues+0x120>)
 80145ee:	f7ed fd77 	bl	80020e0 <__aeabi_ddiv>
 80145f2:	0002      	movs	r2, r0
 80145f4:	000b      	movs	r3, r1
 80145f6:	0010      	movs	r0, r2
 80145f8:	0019      	movs	r1, r3
 80145fa:	f7ef f993 	bl	8003924 <__aeabi_d2f>
 80145fe:	1c03      	adds	r3, r0, #0
 8014600:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 8014602:	4922      	ldr	r1, [pc, #136]	@ (801468c <HIDS_GetMeasurementValues+0x124>)
 8014604:	68f8      	ldr	r0, [r7, #12]
 8014606:	f7ec fe75 	bl	80012f4 <__aeabi_fsub>
 801460a:	1c03      	adds	r3, r0, #0
 801460c:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 801460e:	4b1b      	ldr	r3, [pc, #108]	@ (801467c <HIDS_GetMeasurementValues+0x114>)
 8014610:	78db      	ldrb	r3, [r3, #3]
 8014612:	021b      	lsls	r3, r3, #8
 8014614:	4a19      	ldr	r2, [pc, #100]	@ (801467c <HIDS_GetMeasurementValues+0x114>)
 8014616:	7912      	ldrb	r2, [r2, #4]
 8014618:	431a      	orrs	r2, r3
 801461a:	0013      	movs	r3, r2
 801461c:	015b      	lsls	r3, r3, #5
 801461e:	1a9b      	subs	r3, r3, r2
 8014620:	009b      	lsls	r3, r3, #2
 8014622:	189b      	adds	r3, r3, r2
 8014624:	0018      	movs	r0, r3
 8014626:	f7ef f8e3 	bl	80037f0 <__aeabi_i2d>
 801462a:	2200      	movs	r2, #0
 801462c:	4b16      	ldr	r3, [pc, #88]	@ (8014688 <HIDS_GetMeasurementValues+0x120>)
 801462e:	f7ed fd57 	bl	80020e0 <__aeabi_ddiv>
 8014632:	0002      	movs	r2, r0
 8014634:	000b      	movs	r3, r1
 8014636:	0010      	movs	r0, r2
 8014638:	0019      	movs	r1, r3
 801463a:	f7ef f973 	bl	8003924 <__aeabi_d2f>
 801463e:	1c03      	adds	r3, r0, #0
 8014640:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 8014642:	4913      	ldr	r1, [pc, #76]	@ (8014690 <HIDS_GetMeasurementValues+0x128>)
 8014644:	68b8      	ldr	r0, [r7, #8]
 8014646:	f7ec fe55 	bl	80012f4 <__aeabi_fsub>
 801464a:	1c03      	adds	r3, r0, #0
 801464c:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 801464e:	683b      	ldr	r3, [r7, #0]
 8014650:	68fa      	ldr	r2, [r7, #12]
 8014652:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	68ba      	ldr	r2, [r7, #8]
 8014658:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 801465a:	687a      	ldr	r2, [r7, #4]
 801465c:	683b      	ldr	r3, [r7, #0]
 801465e:	0011      	movs	r1, r2
 8014660:	0018      	movs	r0, r3
 8014662:	f7fc ff51 	bl	8011508 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 8014666:	4b04      	ldr	r3, [pc, #16]	@ (8014678 <HIDS_GetMeasurementValues+0x110>)
 8014668:	2201      	movs	r2, #1
 801466a:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 801466c:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 801466e:	0018      	movs	r0, r3
 8014670:	46bd      	mov	sp, r7
 8014672:	b004      	add	sp, #16
 8014674:	bd80      	pop	{r7, pc}
 8014676:	46c0      	nop			@ (mov r8, r8)
 8014678:	20002508 	.word	0x20002508
 801467c:	200024fc 	.word	0x200024fc
 8014680:	0802df4c 	.word	0x0802df4c
 8014684:	0802dee4 	.word	0x0802dee4
 8014688:	40efffe0 	.word	0x40efffe0
 801468c:	42340000 	.word	0x42340000
 8014690:	40c00000 	.word	0x40c00000

08014694 <ResetHIDSresults>:

void ResetHIDSresults() {
 8014694:	b580      	push	{r7, lr}
 8014696:	af00      	add	r7, sp, #0
  humid = 0.0;
 8014698:	4b04      	ldr	r3, [pc, #16]	@ (80146ac <ResetHIDSresults+0x18>)
 801469a:	2200      	movs	r2, #0
 801469c:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 801469e:	4b04      	ldr	r3, [pc, #16]	@ (80146b0 <ResetHIDSresults+0x1c>)
 80146a0:	2200      	movs	r2, #0
 80146a2:	601a      	str	r2, [r3, #0]
}
 80146a4:	46c0      	nop			@ (mov r8, r8)
 80146a6:	46bd      	mov	sp, r7
 80146a8:	bd80      	pop	{r7, pc}
 80146aa:	46c0      	nop			@ (mov r8, r8)
 80146ac:	200024e4 	.word	0x200024e4
 80146b0:	200024e8 	.word	0x200024e8

080146b4 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 80146b4:	b5b0      	push	{r4, r5, r7, lr}
 80146b6:	b084      	sub	sp, #16
 80146b8:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 80146ba:	4b69      	ldr	r3, [pc, #420]	@ (8014860 <HIDS_Upkeep+0x1ac>)
 80146bc:	781b      	ldrb	r3, [r3, #0]
 80146be:	2b06      	cmp	r3, #6
 80146c0:	d900      	bls.n	80146c4 <HIDS_Upkeep+0x10>
 80146c2:	e0bd      	b.n	8014840 <HIDS_Upkeep+0x18c>
 80146c4:	009a      	lsls	r2, r3, #2
 80146c6:	4b67      	ldr	r3, [pc, #412]	@ (8014864 <HIDS_Upkeep+0x1b0>)
 80146c8:	18d3      	adds	r3, r2, r3
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 80146ce:	4a66      	ldr	r2, [pc, #408]	@ (8014868 <HIDS_Upkeep+0x1b4>)
 80146d0:	4b66      	ldr	r3, [pc, #408]	@ (801486c <HIDS_Upkeep+0x1b8>)
 80146d2:	0019      	movs	r1, r3
 80146d4:	2003      	movs	r0, #3
 80146d6:	f7ff fbef 	bl	8013eb8 <CreateLine>
      break;
 80146da:	e0bc      	b.n	8014856 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 80146dc:	f7ff ffda 	bl	8014694 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 80146e0:	4b5f      	ldr	r3, [pc, #380]	@ (8014860 <HIDS_Upkeep+0x1ac>)
 80146e2:	2201      	movs	r2, #1
 80146e4:	701a      	strb	r2, [r3, #0]
      break;
 80146e6:	e0b6      	b.n	8014856 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_START_MEASUREMENTS:
      if (getSensorLock() != FREE) {
 80146e8:	f7f9 fc00 	bl	800deec <getSensorLock>
 80146ec:	1e03      	subs	r3, r0, #0
 80146ee:	d000      	beq.n	80146f2 <HIDS_Upkeep+0x3e>
 80146f0:	e0aa      	b.n	8014848 <HIDS_Upkeep+0x194>
        break;
      }
      setSensorLock(HIDS);
 80146f2:	2001      	movs	r0, #1
 80146f4:	f7f9 fbe6 	bl	800dec4 <setSensorLock>
      SetMeasurementIndicator();
 80146f8:	f7fe f95c 	bl	80129b4 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 80146fc:	f7ff fe3c 	bl	8014378 <HIDS_StartMeasurement>
      HAL_Delay(10); // wait for deferred DMA transfers
 8014700:	200a      	movs	r0, #10
 8014702:	f000 f963 	bl	80149cc <HAL_Delay>
      setSensorLock(FREE);
 8014706:	2000      	movs	r0, #0
 8014708:	f7f9 fbdc 	bl	800dec4 <setSensorLock>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 801470c:	4b54      	ldr	r3, [pc, #336]	@ (8014860 <HIDS_Upkeep+0x1ac>)
 801470e:	2202      	movs	r2, #2
 8014710:	701a      	strb	r2, [r3, #0]
      break;
 8014712:	e0a0      	b.n	8014856 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if (getSensorLock() != FREE) {
 8014714:	f7f9 fbea 	bl	800deec <getSensorLock>
 8014718:	1e03      	subs	r3, r0, #0
 801471a:	d000      	beq.n	801471e <HIDS_Upkeep+0x6a>
 801471c:	e096      	b.n	801484c <HIDS_Upkeep+0x198>
        break;
      }
      setSensorLock(HIDS);
 801471e:	2001      	movs	r0, #1
 8014720:	f7f9 fbd0 	bl	800dec4 <setSensorLock>
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 8014724:	4a52      	ldr	r2, [pc, #328]	@ (8014870 <HIDS_Upkeep+0x1bc>)
 8014726:	4b53      	ldr	r3, [pc, #332]	@ (8014874 <HIDS_Upkeep+0x1c0>)
 8014728:	0011      	movs	r1, r2
 801472a:	0018      	movs	r0, r3
 801472c:	f7ff ff1c 	bl	8014568 <HIDS_GetMeasurementValues>
 8014730:	1e03      	subs	r3, r0, #0
 8014732:	d002      	beq.n	801473a <HIDS_Upkeep+0x86>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 8014734:	4b4a      	ldr	r3, [pc, #296]	@ (8014860 <HIDS_Upkeep+0x1ac>)
 8014736:	2203      	movs	r2, #3
 8014738:	701a      	strb	r2, [r3, #0]
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 801473a:	200a      	movs	r0, #10
 801473c:	f000 f946 	bl	80149cc <HAL_Delay>
      setSensorLock(FREE);
 8014740:	2000      	movs	r0, #0
 8014742:	f7f9 fbbf 	bl	800dec4 <setSensorLock>
      break;
 8014746:	e086      	b.n	8014856 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_PROCESS_RESULTS:
      Info("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 8014748:	4b4a      	ldr	r3, [pc, #296]	@ (8014874 <HIDS_Upkeep+0x1c0>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	1c18      	adds	r0, r3, #0
 801474e:	f7ef f8a1 	bl	8003894 <__aeabi_f2d>
 8014752:	0004      	movs	r4, r0
 8014754:	000d      	movs	r5, r1
 8014756:	4b46      	ldr	r3, [pc, #280]	@ (8014870 <HIDS_Upkeep+0x1bc>)
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	1c18      	adds	r0, r3, #0
 801475c:	f7ef f89a 	bl	8003894 <__aeabi_f2d>
 8014760:	0002      	movs	r2, r0
 8014762:	000b      	movs	r3, r1
 8014764:	4844      	ldr	r0, [pc, #272]	@ (8014878 <HIDS_Upkeep+0x1c4>)
 8014766:	4945      	ldr	r1, [pc, #276]	@ (801487c <HIDS_Upkeep+0x1c8>)
 8014768:	9202      	str	r2, [sp, #8]
 801476a:	9303      	str	r3, [sp, #12]
 801476c:	9400      	str	r4, [sp, #0]
 801476e:	9501      	str	r5, [sp, #4]
 8014770:	0002      	movs	r2, r0
 8014772:	2002      	movs	r0, #2
 8014774:	f7ff fba0 	bl	8013eb8 <CreateLine>
      setHIDS(temp, humid);
 8014778:	4b3d      	ldr	r3, [pc, #244]	@ (8014870 <HIDS_Upkeep+0x1bc>)
 801477a:	681a      	ldr	r2, [r3, #0]
 801477c:	4b3d      	ldr	r3, [pc, #244]	@ (8014874 <HIDS_Upkeep+0x1c0>)
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	1c19      	adds	r1, r3, #0
 8014782:	1c10      	adds	r0, r2, #0
 8014784:	f7f0 f984 	bl	8004a90 <setHIDS>
      ResetMeasurementIndicator();
 8014788:	f7fe f926 	bl	80129d8 <ResetMeasurementIndicator>
      if (((temp - HIDS_DewPointCalculation(&humid, &temp)) < 1.0) && ((getPosixTime() - HIDS_LastHeaterInRTC) > 900)) {
 801478c:	4b38      	ldr	r3, [pc, #224]	@ (8014870 <HIDS_Upkeep+0x1bc>)
 801478e:	681c      	ldr	r4, [r3, #0]
 8014790:	4a37      	ldr	r2, [pc, #220]	@ (8014870 <HIDS_Upkeep+0x1bc>)
 8014792:	4b38      	ldr	r3, [pc, #224]	@ (8014874 <HIDS_Upkeep+0x1c0>)
 8014794:	0011      	movs	r1, r2
 8014796:	0018      	movs	r0, r3
 8014798:	f7ff fd34 	bl	8014204 <HIDS_DewPointCalculation>
 801479c:	1c03      	adds	r3, r0, #0
 801479e:	1c19      	adds	r1, r3, #0
 80147a0:	1c20      	adds	r0, r4, #0
 80147a2:	f7ec fda7 	bl	80012f4 <__aeabi_fsub>
 80147a6:	1c03      	adds	r3, r0, #0
 80147a8:	21fe      	movs	r1, #254	@ 0xfe
 80147aa:	0589      	lsls	r1, r1, #22
 80147ac:	1c18      	adds	r0, r3, #0
 80147ae:	f7eb febf 	bl	8000530 <__aeabi_fcmplt>
 80147b2:	1e03      	subs	r3, r0, #0
 80147b4:	d023      	beq.n	80147fe <HIDS_Upkeep+0x14a>
 80147b6:	f7f5 ff3d 	bl	800a634 <getPosixTime>
 80147ba:	0002      	movs	r2, r0
 80147bc:	4b30      	ldr	r3, [pc, #192]	@ (8014880 <HIDS_Upkeep+0x1cc>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	1ad2      	subs	r2, r2, r3
 80147c2:	23e1      	movs	r3, #225	@ 0xe1
 80147c4:	009b      	lsls	r3, r3, #2
 80147c6:	429a      	cmp	r2, r3
 80147c8:	d919      	bls.n	80147fe <HIDS_Upkeep+0x14a>
        Info("wsenHIDS The dew point is approaching, heater is started");
 80147ca:	4a2e      	ldr	r2, [pc, #184]	@ (8014884 <HIDS_Upkeep+0x1d0>)
 80147cc:	4b2b      	ldr	r3, [pc, #172]	@ (801487c <HIDS_Upkeep+0x1c8>)
 80147ce:	0019      	movs	r1, r3
 80147d0:	2002      	movs	r0, #2
 80147d2:	f7ff fb71 	bl	8013eb8 <CreateLine>
        if (getSensorLock() != FREE) {
 80147d6:	f7f9 fb89 	bl	800deec <getSensorLock>
 80147da:	1e03      	subs	r3, r0, #0
 80147dc:	d138      	bne.n	8014850 <HIDS_Upkeep+0x19c>
          break;
        }
        HIDS_EnableHeater();
 80147de:	f7ff fd83 	bl	80142e8 <HIDS_EnableHeater>
        HAL_Delay(10); // wait for deferred DMA transfers
 80147e2:	200a      	movs	r0, #10
 80147e4:	f000 f8f2 	bl	80149cc <HAL_Delay>
        setSensorLock(FREE);
 80147e8:	2000      	movs	r0, #0
 80147ea:	f7f9 fb6b 	bl	800dec4 <setSensorLock>
        HIDSTimeStamp = HAL_GetTick() + 12000;
 80147ee:	f000 f8e3 	bl	80149b8 <HAL_GetTick>
 80147f2:	0003      	movs	r3, r0
 80147f4:	4a24      	ldr	r2, [pc, #144]	@ (8014888 <HIDS_Upkeep+0x1d4>)
 80147f6:	189a      	adds	r2, r3, r2
 80147f8:	4b24      	ldr	r3, [pc, #144]	@ (801488c <HIDS_Upkeep+0x1d8>)
 80147fa:	601a      	str	r2, [r3, #0]
 80147fc:	e011      	b.n	8014822 <HIDS_Upkeep+0x16e>
      }
      else {
        HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 80147fe:	f000 f8db 	bl	80149b8 <HAL_GetTick>
 8014802:	0004      	movs	r4, r0
 8014804:	f7f5 fa74 	bl	8009cf0 <Check_USB_PowerOn>
 8014808:	1e03      	subs	r3, r0, #0
 801480a:	d103      	bne.n	8014814 <HIDS_Upkeep+0x160>
 801480c:	4b20      	ldr	r3, [pc, #128]	@ (8014890 <HIDS_Upkeep+0x1dc>)
 801480e:	781b      	ldrb	r3, [r3, #0]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d001      	beq.n	8014818 <HIDS_Upkeep+0x164>
 8014814:	4b1f      	ldr	r3, [pc, #124]	@ (8014894 <HIDS_Upkeep+0x1e0>)
 8014816:	e001      	b.n	801481c <HIDS_Upkeep+0x168>
 8014818:	23fa      	movs	r3, #250	@ 0xfa
 801481a:	009b      	lsls	r3, r3, #2
 801481c:	191a      	adds	r2, r3, r4
 801481e:	4b1b      	ldr	r3, [pc, #108]	@ (801488c <HIDS_Upkeep+0x1d8>)
 8014820:	601a      	str	r2, [r3, #0]
      }
      HIDSState = HIDS_STATE_WAIT;
 8014822:	4b0f      	ldr	r3, [pc, #60]	@ (8014860 <HIDS_Upkeep+0x1ac>)
 8014824:	2206      	movs	r2, #6
 8014826:	701a      	strb	r2, [r3, #0]
      break;
 8014828:	e015      	b.n	8014856 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 801482a:	4b18      	ldr	r3, [pc, #96]	@ (801488c <HIDS_Upkeep+0x1d8>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	0018      	movs	r0, r3
 8014830:	f7ff faec 	bl	8013e0c <TimestampIsReached>
 8014834:	1e03      	subs	r3, r0, #0
 8014836:	d00d      	beq.n	8014854 <HIDS_Upkeep+0x1a0>
        HIDSState = HIDS_STATE_INIT;
 8014838:	4b09      	ldr	r3, [pc, #36]	@ (8014860 <HIDS_Upkeep+0x1ac>)
 801483a:	2200      	movs	r2, #0
 801483c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801483e:	e009      	b.n	8014854 <HIDS_Upkeep+0x1a0>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 8014840:	4b07      	ldr	r3, [pc, #28]	@ (8014860 <HIDS_Upkeep+0x1ac>)
 8014842:	2200      	movs	r2, #0
 8014844:	701a      	strb	r2, [r3, #0]
      break;
 8014846:	e006      	b.n	8014856 <HIDS_Upkeep+0x1a2>
        break;
 8014848:	46c0      	nop			@ (mov r8, r8)
 801484a:	e004      	b.n	8014856 <HIDS_Upkeep+0x1a2>
        break;
 801484c:	46c0      	nop			@ (mov r8, r8)
 801484e:	e002      	b.n	8014856 <HIDS_Upkeep+0x1a2>
          break;
 8014850:	46c0      	nop			@ (mov r8, r8)
 8014852:	e000      	b.n	8014856 <HIDS_Upkeep+0x1a2>
      break;
 8014854:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 8014856:	4b02      	ldr	r3, [pc, #8]	@ (8014860 <HIDS_Upkeep+0x1ac>)
 8014858:	781b      	ldrb	r3, [r3, #0]
}
 801485a:	0018      	movs	r0, r3
 801485c:	46bd      	mov	sp, r7
 801485e:	bdb0      	pop	{r4, r5, r7, pc}
 8014860:	20002510 	.word	0x20002510
 8014864:	0802e8b8 	.word	0x0802e8b8
 8014868:	0802df80 	.word	0x0802df80
 801486c:	0802dfb4 	.word	0x0802dfb4
 8014870:	200024e8 	.word	0x200024e8
 8014874:	200024e4 	.word	0x200024e4
 8014878:	0802dfb8 	.word	0x0802dfb8
 801487c:	0802deb8 	.word	0x0802deb8
 8014880:	20002504 	.word	0x20002504
 8014884:	0802dfec 	.word	0x0802dfec
 8014888:	00002ee0 	.word	0x00002ee0
 801488c:	2000250c 	.word	0x2000250c
 8014890:	2000214e 	.word	0x2000214e
 8014894:	00002710 	.word	0x00002710

08014898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8014898:	480d      	ldr	r0, [pc, #52]	@ (80148d0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 801489a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 801489c:	f7fe feec 	bl	8013678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80148a0:	480c      	ldr	r0, [pc, #48]	@ (80148d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80148a2:	490d      	ldr	r1, [pc, #52]	@ (80148d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80148a4:	4a0d      	ldr	r2, [pc, #52]	@ (80148dc <LoopForever+0xe>)
  movs r3, #0
 80148a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80148a8:	e002      	b.n	80148b0 <LoopCopyDataInit>

080148aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80148aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80148ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80148ae:	3304      	adds	r3, #4

080148b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80148b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80148b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80148b4:	d3f9      	bcc.n	80148aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80148b6:	4a0a      	ldr	r2, [pc, #40]	@ (80148e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80148b8:	4c0a      	ldr	r4, [pc, #40]	@ (80148e4 <LoopForever+0x16>)
  movs r3, #0
 80148ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80148bc:	e001      	b.n	80148c2 <LoopFillZerobss>

080148be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80148be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80148c0:	3204      	adds	r2, #4

080148c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80148c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80148c4:	d3fb      	bcc.n	80148be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80148c6:	f012 f805 	bl	80268d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80148ca:	f7f8 f999 	bl	800cc00 <main>

080148ce <LoopForever>:

LoopForever:
    b LoopForever
 80148ce:	e7fe      	b.n	80148ce <LoopForever>
   ldr   r0, =_estack
 80148d0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80148d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80148d8:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 80148dc:	0802f2a0 	.word	0x0802f2a0
  ldr r2, =_sbss
 80148e0:	2000043c 	.word	0x2000043c
  ldr r4, =_ebss
 80148e4:	20003918 	.word	0x20003918

080148e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80148e8:	e7fe      	b.n	80148e8 <ADC1_COMP_IRQHandler>
	...

080148ec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b082      	sub	sp, #8
 80148f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80148f2:	1dfb      	adds	r3, r7, #7
 80148f4:	2200      	movs	r2, #0
 80148f6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80148f8:	4b0b      	ldr	r3, [pc, #44]	@ (8014928 <HAL_Init+0x3c>)
 80148fa:	681a      	ldr	r2, [r3, #0]
 80148fc:	4b0a      	ldr	r3, [pc, #40]	@ (8014928 <HAL_Init+0x3c>)
 80148fe:	2140      	movs	r1, #64	@ 0x40
 8014900:	430a      	orrs	r2, r1
 8014902:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8014904:	2003      	movs	r0, #3
 8014906:	f000 f811 	bl	801492c <HAL_InitTick>
 801490a:	1e03      	subs	r3, r0, #0
 801490c:	d003      	beq.n	8014916 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 801490e:	1dfb      	adds	r3, r7, #7
 8014910:	2201      	movs	r2, #1
 8014912:	701a      	strb	r2, [r3, #0]
 8014914:	e001      	b.n	801491a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8014916:	f7fe fd63 	bl	80133e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801491a:	1dfb      	adds	r3, r7, #7
 801491c:	781b      	ldrb	r3, [r3, #0]
}
 801491e:	0018      	movs	r0, r3
 8014920:	46bd      	mov	sp, r7
 8014922:	b002      	add	sp, #8
 8014924:	bd80      	pop	{r7, pc}
 8014926:	46c0      	nop			@ (mov r8, r8)
 8014928:	40022000 	.word	0x40022000

0801492c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801492c:	b590      	push	{r4, r7, lr}
 801492e:	b083      	sub	sp, #12
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8014934:	4b14      	ldr	r3, [pc, #80]	@ (8014988 <HAL_InitTick+0x5c>)
 8014936:	681c      	ldr	r4, [r3, #0]
 8014938:	4b14      	ldr	r3, [pc, #80]	@ (801498c <HAL_InitTick+0x60>)
 801493a:	781b      	ldrb	r3, [r3, #0]
 801493c:	0019      	movs	r1, r3
 801493e:	23fa      	movs	r3, #250	@ 0xfa
 8014940:	0098      	lsls	r0, r3, #2
 8014942:	f7eb fc2f 	bl	80001a4 <__udivsi3>
 8014946:	0003      	movs	r3, r0
 8014948:	0019      	movs	r1, r3
 801494a:	0020      	movs	r0, r4
 801494c:	f7eb fc2a 	bl	80001a4 <__udivsi3>
 8014950:	0003      	movs	r3, r0
 8014952:	0018      	movs	r0, r3
 8014954:	f000 fcc9 	bl	80152ea <HAL_SYSTICK_Config>
 8014958:	1e03      	subs	r3, r0, #0
 801495a:	d001      	beq.n	8014960 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 801495c:	2301      	movs	r3, #1
 801495e:	e00f      	b.n	8014980 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	2b03      	cmp	r3, #3
 8014964:	d80b      	bhi.n	801497e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8014966:	6879      	ldr	r1, [r7, #4]
 8014968:	2301      	movs	r3, #1
 801496a:	425b      	negs	r3, r3
 801496c:	2200      	movs	r2, #0
 801496e:	0018      	movs	r0, r3
 8014970:	f000 fc96 	bl	80152a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8014974:	4b06      	ldr	r3, [pc, #24]	@ (8014990 <HAL_InitTick+0x64>)
 8014976:	687a      	ldr	r2, [r7, #4]
 8014978:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801497a:	2300      	movs	r3, #0
 801497c:	e000      	b.n	8014980 <HAL_InitTick+0x54>
    return HAL_ERROR;
 801497e:	2301      	movs	r3, #1
}
 8014980:	0018      	movs	r0, r3
 8014982:	46bd      	mov	sp, r7
 8014984:	b003      	add	sp, #12
 8014986:	bd90      	pop	{r4, r7, pc}
 8014988:	200000ec 	.word	0x200000ec
 801498c:	20000100 	.word	0x20000100
 8014990:	200000fc 	.word	0x200000fc

08014994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8014998:	4b05      	ldr	r3, [pc, #20]	@ (80149b0 <HAL_IncTick+0x1c>)
 801499a:	781b      	ldrb	r3, [r3, #0]
 801499c:	001a      	movs	r2, r3
 801499e:	4b05      	ldr	r3, [pc, #20]	@ (80149b4 <HAL_IncTick+0x20>)
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	18d2      	adds	r2, r2, r3
 80149a4:	4b03      	ldr	r3, [pc, #12]	@ (80149b4 <HAL_IncTick+0x20>)
 80149a6:	601a      	str	r2, [r3, #0]
}
 80149a8:	46c0      	nop			@ (mov r8, r8)
 80149aa:	46bd      	mov	sp, r7
 80149ac:	bd80      	pop	{r7, pc}
 80149ae:	46c0      	nop			@ (mov r8, r8)
 80149b0:	20000100 	.word	0x20000100
 80149b4:	20002514 	.word	0x20002514

080149b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	af00      	add	r7, sp, #0
  return uwTick;
 80149bc:	4b02      	ldr	r3, [pc, #8]	@ (80149c8 <HAL_GetTick+0x10>)
 80149be:	681b      	ldr	r3, [r3, #0]
}
 80149c0:	0018      	movs	r0, r3
 80149c2:	46bd      	mov	sp, r7
 80149c4:	bd80      	pop	{r7, pc}
 80149c6:	46c0      	nop			@ (mov r8, r8)
 80149c8:	20002514 	.word	0x20002514

080149cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b084      	sub	sp, #16
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80149d4:	f7ff fff0 	bl	80149b8 <HAL_GetTick>
 80149d8:	0003      	movs	r3, r0
 80149da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	3301      	adds	r3, #1
 80149e4:	d005      	beq.n	80149f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80149e6:	4b0a      	ldr	r3, [pc, #40]	@ (8014a10 <HAL_Delay+0x44>)
 80149e8:	781b      	ldrb	r3, [r3, #0]
 80149ea:	001a      	movs	r2, r3
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	189b      	adds	r3, r3, r2
 80149f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80149f2:	46c0      	nop			@ (mov r8, r8)
 80149f4:	f7ff ffe0 	bl	80149b8 <HAL_GetTick>
 80149f8:	0002      	movs	r2, r0
 80149fa:	68bb      	ldr	r3, [r7, #8]
 80149fc:	1ad3      	subs	r3, r2, r3
 80149fe:	68fa      	ldr	r2, [r7, #12]
 8014a00:	429a      	cmp	r2, r3
 8014a02:	d8f7      	bhi.n	80149f4 <HAL_Delay+0x28>
  {
  }
}
 8014a04:	46c0      	nop			@ (mov r8, r8)
 8014a06:	46c0      	nop			@ (mov r8, r8)
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	b004      	add	sp, #16
 8014a0c:	bd80      	pop	{r7, pc}
 8014a0e:	46c0      	nop			@ (mov r8, r8)
 8014a10:	20000100 	.word	0x20000100

08014a14 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8014a18:	4b04      	ldr	r3, [pc, #16]	@ (8014a2c <HAL_SuspendTick+0x18>)
 8014a1a:	681a      	ldr	r2, [r3, #0]
 8014a1c:	4b03      	ldr	r3, [pc, #12]	@ (8014a2c <HAL_SuspendTick+0x18>)
 8014a1e:	2102      	movs	r1, #2
 8014a20:	438a      	bics	r2, r1
 8014a22:	601a      	str	r2, [r3, #0]
}
 8014a24:	46c0      	nop			@ (mov r8, r8)
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bd80      	pop	{r7, pc}
 8014a2a:	46c0      	nop			@ (mov r8, r8)
 8014a2c:	e000e010 	.word	0xe000e010

08014a30 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8014a34:	4b04      	ldr	r3, [pc, #16]	@ (8014a48 <HAL_ResumeTick+0x18>)
 8014a36:	681a      	ldr	r2, [r3, #0]
 8014a38:	4b03      	ldr	r3, [pc, #12]	@ (8014a48 <HAL_ResumeTick+0x18>)
 8014a3a:	2102      	movs	r1, #2
 8014a3c:	430a      	orrs	r2, r1
 8014a3e:	601a      	str	r2, [r3, #0]
}
 8014a40:	46c0      	nop			@ (mov r8, r8)
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}
 8014a46:	46c0      	nop			@ (mov r8, r8)
 8014a48:	e000e010 	.word	0xe000e010

08014a4c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b082      	sub	sp, #8
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d101      	bne.n	8014a5e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8014a5a:	2301      	movs	r3, #1
 8014a5c:	e159      	b.n	8014d12 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d10a      	bne.n	8014a7c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	2200      	movs	r2, #0
 8014a6a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	2250      	movs	r2, #80	@ 0x50
 8014a70:	2100      	movs	r1, #0
 8014a72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	0018      	movs	r0, r3
 8014a78:	f7f6 f9be 	bl	800adf8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a80:	2210      	movs	r2, #16
 8014a82:	4013      	ands	r3, r2
 8014a84:	2b10      	cmp	r3, #16
 8014a86:	d005      	beq.n	8014a94 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	689b      	ldr	r3, [r3, #8]
 8014a8e:	2204      	movs	r2, #4
 8014a90:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8014a92:	d00b      	beq.n	8014aac <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a98:	2210      	movs	r2, #16
 8014a9a:	431a      	orrs	r2, r3
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	2250      	movs	r2, #80	@ 0x50
 8014aa4:	2100      	movs	r1, #0
 8014aa6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014aa8:	2301      	movs	r3, #1
 8014aaa:	e132      	b.n	8014d12 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014ab0:	4a9a      	ldr	r2, [pc, #616]	@ (8014d1c <HAL_ADC_Init+0x2d0>)
 8014ab2:	4013      	ands	r3, r2
 8014ab4:	2202      	movs	r2, #2
 8014ab6:	431a      	orrs	r2, r3
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	689b      	ldr	r3, [r3, #8]
 8014ac2:	2203      	movs	r2, #3
 8014ac4:	4013      	ands	r3, r2
 8014ac6:	2b01      	cmp	r3, #1
 8014ac8:	d108      	bne.n	8014adc <HAL_ADC_Init+0x90>
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	2201      	movs	r2, #1
 8014ad2:	4013      	ands	r3, r2
 8014ad4:	2b01      	cmp	r3, #1
 8014ad6:	d101      	bne.n	8014adc <HAL_ADC_Init+0x90>
 8014ad8:	2301      	movs	r3, #1
 8014ada:	e000      	b.n	8014ade <HAL_ADC_Init+0x92>
 8014adc:	2300      	movs	r3, #0
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d149      	bne.n	8014b76 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	685a      	ldr	r2, [r3, #4]
 8014ae6:	23c0      	movs	r3, #192	@ 0xc0
 8014ae8:	061b      	lsls	r3, r3, #24
 8014aea:	429a      	cmp	r2, r3
 8014aec:	d00b      	beq.n	8014b06 <HAL_ADC_Init+0xba>
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	685a      	ldr	r2, [r3, #4]
 8014af2:	2380      	movs	r3, #128	@ 0x80
 8014af4:	05db      	lsls	r3, r3, #23
 8014af6:	429a      	cmp	r2, r3
 8014af8:	d005      	beq.n	8014b06 <HAL_ADC_Init+0xba>
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	685a      	ldr	r2, [r3, #4]
 8014afe:	2380      	movs	r3, #128	@ 0x80
 8014b00:	061b      	lsls	r3, r3, #24
 8014b02:	429a      	cmp	r2, r3
 8014b04:	d111      	bne.n	8014b2a <HAL_ADC_Init+0xde>
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	691a      	ldr	r2, [r3, #16]
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	0092      	lsls	r2, r2, #2
 8014b12:	0892      	lsrs	r2, r2, #2
 8014b14:	611a      	str	r2, [r3, #16]
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	6919      	ldr	r1, [r3, #16]
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	685a      	ldr	r2, [r3, #4]
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	430a      	orrs	r2, r1
 8014b26:	611a      	str	r2, [r3, #16]
 8014b28:	e014      	b.n	8014b54 <HAL_ADC_Init+0x108>
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	691a      	ldr	r2, [r3, #16]
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	0092      	lsls	r2, r2, #2
 8014b36:	0892      	lsrs	r2, r2, #2
 8014b38:	611a      	str	r2, [r3, #16]
 8014b3a:	4b79      	ldr	r3, [pc, #484]	@ (8014d20 <HAL_ADC_Init+0x2d4>)
 8014b3c:	681a      	ldr	r2, [r3, #0]
 8014b3e:	4b78      	ldr	r3, [pc, #480]	@ (8014d20 <HAL_ADC_Init+0x2d4>)
 8014b40:	4978      	ldr	r1, [pc, #480]	@ (8014d24 <HAL_ADC_Init+0x2d8>)
 8014b42:	400a      	ands	r2, r1
 8014b44:	601a      	str	r2, [r3, #0]
 8014b46:	4b76      	ldr	r3, [pc, #472]	@ (8014d20 <HAL_ADC_Init+0x2d4>)
 8014b48:	6819      	ldr	r1, [r3, #0]
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	685a      	ldr	r2, [r3, #4]
 8014b4e:	4b74      	ldr	r3, [pc, #464]	@ (8014d20 <HAL_ADC_Init+0x2d4>)
 8014b50:	430a      	orrs	r2, r1
 8014b52:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	68da      	ldr	r2, [r3, #12]
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	2118      	movs	r1, #24
 8014b60:	438a      	bics	r2, r1
 8014b62:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	68d9      	ldr	r1, [r3, #12]
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	689a      	ldr	r2, [r3, #8]
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	430a      	orrs	r2, r1
 8014b74:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8014b76:	4b6a      	ldr	r3, [pc, #424]	@ (8014d20 <HAL_ADC_Init+0x2d4>)
 8014b78:	681a      	ldr	r2, [r3, #0]
 8014b7a:	4b69      	ldr	r3, [pc, #420]	@ (8014d20 <HAL_ADC_Init+0x2d4>)
 8014b7c:	496a      	ldr	r1, [pc, #424]	@ (8014d28 <HAL_ADC_Init+0x2dc>)
 8014b7e:	400a      	ands	r2, r1
 8014b80:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8014b82:	4b67      	ldr	r3, [pc, #412]	@ (8014d20 <HAL_ADC_Init+0x2d4>)
 8014b84:	6819      	ldr	r1, [r3, #0]
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b8a:	065a      	lsls	r2, r3, #25
 8014b8c:	4b64      	ldr	r3, [pc, #400]	@ (8014d20 <HAL_ADC_Init+0x2d4>)
 8014b8e:	430a      	orrs	r2, r1
 8014b90:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	689a      	ldr	r2, [r3, #8]
 8014b98:	2380      	movs	r3, #128	@ 0x80
 8014b9a:	055b      	lsls	r3, r3, #21
 8014b9c:	4013      	ands	r3, r2
 8014b9e:	d108      	bne.n	8014bb2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	689a      	ldr	r2, [r3, #8]
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	2180      	movs	r1, #128	@ 0x80
 8014bac:	0549      	lsls	r1, r1, #21
 8014bae:	430a      	orrs	r2, r1
 8014bb0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	68da      	ldr	r2, [r3, #12]
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	495b      	ldr	r1, [pc, #364]	@ (8014d2c <HAL_ADC_Init+0x2e0>)
 8014bbe:	400a      	ands	r2, r1
 8014bc0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	68d9      	ldr	r1, [r3, #12]
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	691b      	ldr	r3, [r3, #16]
 8014bd0:	2b02      	cmp	r3, #2
 8014bd2:	d101      	bne.n	8014bd8 <HAL_ADC_Init+0x18c>
 8014bd4:	2304      	movs	r3, #4
 8014bd6:	e000      	b.n	8014bda <HAL_ADC_Init+0x18e>
 8014bd8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014bda:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	2020      	movs	r0, #32
 8014be0:	5c1b      	ldrb	r3, [r3, r0]
 8014be2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8014be4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	202c      	movs	r0, #44	@ 0x2c
 8014bea:	5c1b      	ldrb	r3, [r3, r0]
 8014bec:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8014bee:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014bf4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	699b      	ldr	r3, [r3, #24]
 8014bfa:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8014bfc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	69db      	ldr	r3, [r3, #28]
 8014c02:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014c04:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	430a      	orrs	r2, r1
 8014c0c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014c12:	23c2      	movs	r3, #194	@ 0xc2
 8014c14:	33ff      	adds	r3, #255	@ 0xff
 8014c16:	429a      	cmp	r2, r3
 8014c18:	d00b      	beq.n	8014c32 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	68d9      	ldr	r1, [r3, #12]
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014c28:	431a      	orrs	r2, r3
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	430a      	orrs	r2, r1
 8014c30:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	2221      	movs	r2, #33	@ 0x21
 8014c36:	5c9b      	ldrb	r3, [r3, r2]
 8014c38:	2b01      	cmp	r3, #1
 8014c3a:	d11a      	bne.n	8014c72 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	2220      	movs	r2, #32
 8014c40:	5c9b      	ldrb	r3, [r3, r2]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d109      	bne.n	8014c5a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	68da      	ldr	r2, [r3, #12]
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	2180      	movs	r1, #128	@ 0x80
 8014c52:	0249      	lsls	r1, r1, #9
 8014c54:	430a      	orrs	r2, r1
 8014c56:	60da      	str	r2, [r3, #12]
 8014c58:	e00b      	b.n	8014c72 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c5e:	2220      	movs	r2, #32
 8014c60:	431a      	orrs	r2, r3
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014c6a:	2201      	movs	r2, #1
 8014c6c:	431a      	orrs	r2, r3
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014c76:	2b01      	cmp	r3, #1
 8014c78:	d11f      	bne.n	8014cba <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	691a      	ldr	r2, [r3, #16]
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	492a      	ldr	r1, [pc, #168]	@ (8014d30 <HAL_ADC_Init+0x2e4>)
 8014c86:	400a      	ands	r2, r1
 8014c88:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	6919      	ldr	r1, [r3, #16]
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014c98:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8014c9e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	430a      	orrs	r2, r1
 8014ca6:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	691a      	ldr	r2, [r3, #16]
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	2101      	movs	r1, #1
 8014cb4:	430a      	orrs	r2, r1
 8014cb6:	611a      	str	r2, [r3, #16]
 8014cb8:	e00e      	b.n	8014cd8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	691b      	ldr	r3, [r3, #16]
 8014cc0:	2201      	movs	r2, #1
 8014cc2:	4013      	ands	r3, r2
 8014cc4:	2b01      	cmp	r3, #1
 8014cc6:	d107      	bne.n	8014cd8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	691a      	ldr	r2, [r3, #16]
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	2101      	movs	r1, #1
 8014cd4:	438a      	bics	r2, r1
 8014cd6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	695a      	ldr	r2, [r3, #20]
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	2107      	movs	r1, #7
 8014ce4:	438a      	bics	r2, r1
 8014ce6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	6959      	ldr	r1, [r3, #20]
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	430a      	orrs	r2, r1
 8014cf8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d04:	2203      	movs	r2, #3
 8014d06:	4393      	bics	r3, r2
 8014d08:	2201      	movs	r2, #1
 8014d0a:	431a      	orrs	r2, r3
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8014d10:	2300      	movs	r3, #0
}
 8014d12:	0018      	movs	r0, r3
 8014d14:	46bd      	mov	sp, r7
 8014d16:	b002      	add	sp, #8
 8014d18:	bd80      	pop	{r7, pc}
 8014d1a:	46c0      	nop			@ (mov r8, r8)
 8014d1c:	fffffefd 	.word	0xfffffefd
 8014d20:	40012708 	.word	0x40012708
 8014d24:	ffc3ffff 	.word	0xffc3ffff
 8014d28:	fdffffff 	.word	0xfdffffff
 8014d2c:	fffe0219 	.word	0xfffe0219
 8014d30:	fffffc03 	.word	0xfffffc03

08014d34 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8014d34:	b590      	push	{r4, r7, lr}
 8014d36:	b085      	sub	sp, #20
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014d3c:	230f      	movs	r3, #15
 8014d3e:	18fb      	adds	r3, r7, r3
 8014d40:	2200      	movs	r2, #0
 8014d42:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	689b      	ldr	r3, [r3, #8]
 8014d4a:	2204      	movs	r2, #4
 8014d4c:	4013      	ands	r3, r2
 8014d4e:	d138      	bne.n	8014dc2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	2250      	movs	r2, #80	@ 0x50
 8014d54:	5c9b      	ldrb	r3, [r3, r2]
 8014d56:	2b01      	cmp	r3, #1
 8014d58:	d101      	bne.n	8014d5e <HAL_ADC_Start+0x2a>
 8014d5a:	2302      	movs	r3, #2
 8014d5c:	e038      	b.n	8014dd0 <HAL_ADC_Start+0x9c>
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	2250      	movs	r2, #80	@ 0x50
 8014d62:	2101      	movs	r1, #1
 8014d64:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	69db      	ldr	r3, [r3, #28]
 8014d6a:	2b01      	cmp	r3, #1
 8014d6c:	d007      	beq.n	8014d7e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8014d6e:	230f      	movs	r3, #15
 8014d70:	18fc      	adds	r4, r7, r3
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	0018      	movs	r0, r3
 8014d76:	f000 f95f 	bl	8015038 <ADC_Enable>
 8014d7a:	0003      	movs	r3, r0
 8014d7c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8014d7e:	230f      	movs	r3, #15
 8014d80:	18fb      	adds	r3, r7, r3
 8014d82:	781b      	ldrb	r3, [r3, #0]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d120      	bne.n	8014dca <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d8c:	4a12      	ldr	r2, [pc, #72]	@ (8014dd8 <HAL_ADC_Start+0xa4>)
 8014d8e:	4013      	ands	r3, r2
 8014d90:	2280      	movs	r2, #128	@ 0x80
 8014d92:	0052      	lsls	r2, r2, #1
 8014d94:	431a      	orrs	r2, r3
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	2250      	movs	r2, #80	@ 0x50
 8014da4:	2100      	movs	r1, #0
 8014da6:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	221c      	movs	r2, #28
 8014dae:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	689a      	ldr	r2, [r3, #8]
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	2104      	movs	r1, #4
 8014dbc:	430a      	orrs	r2, r1
 8014dbe:	609a      	str	r2, [r3, #8]
 8014dc0:	e003      	b.n	8014dca <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8014dc2:	230f      	movs	r3, #15
 8014dc4:	18fb      	adds	r3, r7, r3
 8014dc6:	2202      	movs	r2, #2
 8014dc8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8014dca:	230f      	movs	r3, #15
 8014dcc:	18fb      	adds	r3, r7, r3
 8014dce:	781b      	ldrb	r3, [r3, #0]
}
 8014dd0:	0018      	movs	r0, r3
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	b005      	add	sp, #20
 8014dd6:	bd90      	pop	{r4, r7, pc}
 8014dd8:	fffff0fe 	.word	0xfffff0fe

08014ddc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b084      	sub	sp, #16
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
 8014de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8014de6:	2300      	movs	r3, #0
 8014de8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8014dea:	2300      	movs	r3, #0
 8014dec:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	695b      	ldr	r3, [r3, #20]
 8014df2:	2b08      	cmp	r3, #8
 8014df4:	d102      	bne.n	8014dfc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8014df6:	2308      	movs	r3, #8
 8014df8:	60fb      	str	r3, [r7, #12]
 8014dfa:	e014      	b.n	8014e26 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	68db      	ldr	r3, [r3, #12]
 8014e02:	2201      	movs	r2, #1
 8014e04:	4013      	ands	r3, r2
 8014e06:	2b01      	cmp	r3, #1
 8014e08:	d10b      	bne.n	8014e22 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e0e:	2220      	movs	r2, #32
 8014e10:	431a      	orrs	r2, r3
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	2250      	movs	r2, #80	@ 0x50
 8014e1a:	2100      	movs	r1, #0
 8014e1c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8014e1e:	2301      	movs	r3, #1
 8014e20:	e072      	b.n	8014f08 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8014e22:	230c      	movs	r3, #12
 8014e24:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8014e26:	f7ff fdc7 	bl	80149b8 <HAL_GetTick>
 8014e2a:	0003      	movs	r3, r0
 8014e2c:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014e2e:	e01f      	b.n	8014e70 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8014e30:	683b      	ldr	r3, [r7, #0]
 8014e32:	3301      	adds	r3, #1
 8014e34:	d01c      	beq.n	8014e70 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8014e36:	683b      	ldr	r3, [r7, #0]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d007      	beq.n	8014e4c <HAL_ADC_PollForConversion+0x70>
 8014e3c:	f7ff fdbc 	bl	80149b8 <HAL_GetTick>
 8014e40:	0002      	movs	r2, r0
 8014e42:	68bb      	ldr	r3, [r7, #8]
 8014e44:	1ad3      	subs	r3, r2, r3
 8014e46:	683a      	ldr	r2, [r7, #0]
 8014e48:	429a      	cmp	r2, r3
 8014e4a:	d211      	bcs.n	8014e70 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	68fa      	ldr	r2, [r7, #12]
 8014e54:	4013      	ands	r3, r2
 8014e56:	d10b      	bne.n	8014e70 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e5c:	2204      	movs	r2, #4
 8014e5e:	431a      	orrs	r2, r3
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	2250      	movs	r2, #80	@ 0x50
 8014e68:	2100      	movs	r1, #0
 8014e6a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8014e6c:	2303      	movs	r3, #3
 8014e6e:	e04b      	b.n	8014f08 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	68fa      	ldr	r2, [r7, #12]
 8014e78:	4013      	ands	r3, r2
 8014e7a:	d0d9      	beq.n	8014e30 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e80:	2280      	movs	r2, #128	@ 0x80
 8014e82:	0092      	lsls	r2, r2, #2
 8014e84:	431a      	orrs	r2, r3
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	68da      	ldr	r2, [r3, #12]
 8014e90:	23c0      	movs	r3, #192	@ 0xc0
 8014e92:	011b      	lsls	r3, r3, #4
 8014e94:	4013      	ands	r3, r2
 8014e96:	d12e      	bne.n	8014ef6 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2220      	movs	r2, #32
 8014e9c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d129      	bne.n	8014ef6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	2208      	movs	r2, #8
 8014eaa:	4013      	ands	r3, r2
 8014eac:	2b08      	cmp	r3, #8
 8014eae:	d122      	bne.n	8014ef6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	689b      	ldr	r3, [r3, #8]
 8014eb6:	2204      	movs	r2, #4
 8014eb8:	4013      	ands	r3, r2
 8014eba:	d110      	bne.n	8014ede <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	685a      	ldr	r2, [r3, #4]
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	210c      	movs	r1, #12
 8014ec8:	438a      	bics	r2, r1
 8014eca:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014ed0:	4a0f      	ldr	r2, [pc, #60]	@ (8014f10 <HAL_ADC_PollForConversion+0x134>)
 8014ed2:	4013      	ands	r3, r2
 8014ed4:	2201      	movs	r2, #1
 8014ed6:	431a      	orrs	r2, r3
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	655a      	str	r2, [r3, #84]	@ 0x54
 8014edc:	e00b      	b.n	8014ef6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014ee2:	2220      	movs	r2, #32
 8014ee4:	431a      	orrs	r2, r3
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014eee:	2201      	movs	r2, #1
 8014ef0:	431a      	orrs	r2, r3
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	699b      	ldr	r3, [r3, #24]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d103      	bne.n	8014f06 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	220c      	movs	r2, #12
 8014f04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014f06:	2300      	movs	r3, #0
}
 8014f08:	0018      	movs	r0, r3
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	b004      	add	sp, #16
 8014f0e:	bd80      	pop	{r7, pc}
 8014f10:	fffffefe 	.word	0xfffffefe

08014f14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8014f14:	b580      	push	{r7, lr}
 8014f16:	b082      	sub	sp, #8
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8014f22:	0018      	movs	r0, r3
 8014f24:	46bd      	mov	sp, r7
 8014f26:	b002      	add	sp, #8
 8014f28:	bd80      	pop	{r7, pc}
	...

08014f2c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b082      	sub	sp, #8
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
 8014f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	2250      	movs	r2, #80	@ 0x50
 8014f3a:	5c9b      	ldrb	r3, [r3, r2]
 8014f3c:	2b01      	cmp	r3, #1
 8014f3e:	d101      	bne.n	8014f44 <HAL_ADC_ConfigChannel+0x18>
 8014f40:	2302      	movs	r3, #2
 8014f42:	e06c      	b.n	801501e <HAL_ADC_ConfigChannel+0xf2>
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	2250      	movs	r2, #80	@ 0x50
 8014f48:	2101      	movs	r1, #1
 8014f4a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	689b      	ldr	r3, [r3, #8]
 8014f52:	2204      	movs	r2, #4
 8014f54:	4013      	ands	r3, r2
 8014f56:	d00b      	beq.n	8014f70 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f5c:	2220      	movs	r2, #32
 8014f5e:	431a      	orrs	r2, r3
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	2250      	movs	r2, #80	@ 0x50
 8014f68:	2100      	movs	r1, #0
 8014f6a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014f6c:	2301      	movs	r3, #1
 8014f6e:	e056      	b.n	801501e <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8014f70:	683b      	ldr	r3, [r7, #0]
 8014f72:	685b      	ldr	r3, [r3, #4]
 8014f74:	4a2c      	ldr	r2, [pc, #176]	@ (8015028 <HAL_ADC_ConfigChannel+0xfc>)
 8014f76:	4293      	cmp	r3, r2
 8014f78:	d028      	beq.n	8014fcc <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8014f80:	683b      	ldr	r3, [r7, #0]
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	035b      	lsls	r3, r3, #13
 8014f86:	0b5a      	lsrs	r2, r3, #13
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	430a      	orrs	r2, r1
 8014f8e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014f90:	683b      	ldr	r3, [r7, #0]
 8014f92:	681a      	ldr	r2, [r3, #0]
 8014f94:	2380      	movs	r3, #128	@ 0x80
 8014f96:	02db      	lsls	r3, r3, #11
 8014f98:	4013      	ands	r3, r2
 8014f9a:	d009      	beq.n	8014fb0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8014f9c:	4b23      	ldr	r3, [pc, #140]	@ (801502c <HAL_ADC_ConfigChannel+0x100>)
 8014f9e:	681a      	ldr	r2, [r3, #0]
 8014fa0:	4b22      	ldr	r3, [pc, #136]	@ (801502c <HAL_ADC_ConfigChannel+0x100>)
 8014fa2:	2180      	movs	r1, #128	@ 0x80
 8014fa4:	0409      	lsls	r1, r1, #16
 8014fa6:	430a      	orrs	r2, r1
 8014fa8:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8014faa:	200a      	movs	r0, #10
 8014fac:	f000 f8ac 	bl	8015108 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014fb0:	683b      	ldr	r3, [r7, #0]
 8014fb2:	681a      	ldr	r2, [r3, #0]
 8014fb4:	2380      	movs	r3, #128	@ 0x80
 8014fb6:	029b      	lsls	r3, r3, #10
 8014fb8:	4013      	ands	r3, r2
 8014fba:	d02b      	beq.n	8015014 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8014fbc:	4b1b      	ldr	r3, [pc, #108]	@ (801502c <HAL_ADC_ConfigChannel+0x100>)
 8014fbe:	681a      	ldr	r2, [r3, #0]
 8014fc0:	4b1a      	ldr	r3, [pc, #104]	@ (801502c <HAL_ADC_ConfigChannel+0x100>)
 8014fc2:	2180      	movs	r1, #128	@ 0x80
 8014fc4:	03c9      	lsls	r1, r1, #15
 8014fc6:	430a      	orrs	r2, r1
 8014fc8:	601a      	str	r2, [r3, #0]
 8014fca:	e023      	b.n	8015014 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014fd2:	683b      	ldr	r3, [r7, #0]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	035b      	lsls	r3, r3, #13
 8014fd8:	0b5b      	lsrs	r3, r3, #13
 8014fda:	43d9      	mvns	r1, r3
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	400a      	ands	r2, r1
 8014fe2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	681a      	ldr	r2, [r3, #0]
 8014fe8:	2380      	movs	r3, #128	@ 0x80
 8014fea:	02db      	lsls	r3, r3, #11
 8014fec:	4013      	ands	r3, r2
 8014fee:	d005      	beq.n	8014ffc <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8014ff0:	4b0e      	ldr	r3, [pc, #56]	@ (801502c <HAL_ADC_ConfigChannel+0x100>)
 8014ff2:	681a      	ldr	r2, [r3, #0]
 8014ff4:	4b0d      	ldr	r3, [pc, #52]	@ (801502c <HAL_ADC_ConfigChannel+0x100>)
 8014ff6:	490e      	ldr	r1, [pc, #56]	@ (8015030 <HAL_ADC_ConfigChannel+0x104>)
 8014ff8:	400a      	ands	r2, r1
 8014ffa:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014ffc:	683b      	ldr	r3, [r7, #0]
 8014ffe:	681a      	ldr	r2, [r3, #0]
 8015000:	2380      	movs	r3, #128	@ 0x80
 8015002:	029b      	lsls	r3, r3, #10
 8015004:	4013      	ands	r3, r2
 8015006:	d005      	beq.n	8015014 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8015008:	4b08      	ldr	r3, [pc, #32]	@ (801502c <HAL_ADC_ConfigChannel+0x100>)
 801500a:	681a      	ldr	r2, [r3, #0]
 801500c:	4b07      	ldr	r3, [pc, #28]	@ (801502c <HAL_ADC_ConfigChannel+0x100>)
 801500e:	4909      	ldr	r1, [pc, #36]	@ (8015034 <HAL_ADC_ConfigChannel+0x108>)
 8015010:	400a      	ands	r2, r1
 8015012:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	2250      	movs	r2, #80	@ 0x50
 8015018:	2100      	movs	r1, #0
 801501a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801501c:	2300      	movs	r3, #0
}
 801501e:	0018      	movs	r0, r3
 8015020:	46bd      	mov	sp, r7
 8015022:	b002      	add	sp, #8
 8015024:	bd80      	pop	{r7, pc}
 8015026:	46c0      	nop			@ (mov r8, r8)
 8015028:	00001001 	.word	0x00001001
 801502c:	40012708 	.word	0x40012708
 8015030:	ff7fffff 	.word	0xff7fffff
 8015034:	ffbfffff 	.word	0xffbfffff

08015038 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8015038:	b580      	push	{r7, lr}
 801503a:	b084      	sub	sp, #16
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015040:	2300      	movs	r3, #0
 8015042:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	689b      	ldr	r3, [r3, #8]
 801504a:	2203      	movs	r2, #3
 801504c:	4013      	ands	r3, r2
 801504e:	2b01      	cmp	r3, #1
 8015050:	d108      	bne.n	8015064 <ADC_Enable+0x2c>
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	2201      	movs	r2, #1
 801505a:	4013      	ands	r3, r2
 801505c:	2b01      	cmp	r3, #1
 801505e:	d101      	bne.n	8015064 <ADC_Enable+0x2c>
 8015060:	2301      	movs	r3, #1
 8015062:	e000      	b.n	8015066 <ADC_Enable+0x2e>
 8015064:	2300      	movs	r3, #0
 8015066:	2b00      	cmp	r3, #0
 8015068:	d146      	bne.n	80150f8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	689b      	ldr	r3, [r3, #8]
 8015070:	4a24      	ldr	r2, [pc, #144]	@ (8015104 <ADC_Enable+0xcc>)
 8015072:	4013      	ands	r3, r2
 8015074:	d00d      	beq.n	8015092 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801507a:	2210      	movs	r2, #16
 801507c:	431a      	orrs	r2, r3
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015086:	2201      	movs	r2, #1
 8015088:	431a      	orrs	r2, r3
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 801508e:	2301      	movs	r3, #1
 8015090:	e033      	b.n	80150fa <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	689a      	ldr	r2, [r3, #8]
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	2101      	movs	r1, #1
 801509e:	430a      	orrs	r2, r1
 80150a0:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80150a2:	2001      	movs	r0, #1
 80150a4:	f000 f830 	bl	8015108 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80150a8:	f7ff fc86 	bl	80149b8 <HAL_GetTick>
 80150ac:	0003      	movs	r3, r0
 80150ae:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80150b0:	e01b      	b.n	80150ea <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80150b2:	f7ff fc81 	bl	80149b8 <HAL_GetTick>
 80150b6:	0002      	movs	r2, r0
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	1ad3      	subs	r3, r2, r3
 80150bc:	2b0a      	cmp	r3, #10
 80150be:	d914      	bls.n	80150ea <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	2201      	movs	r2, #1
 80150c8:	4013      	ands	r3, r2
 80150ca:	2b01      	cmp	r3, #1
 80150cc:	d00d      	beq.n	80150ea <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80150d2:	2210      	movs	r2, #16
 80150d4:	431a      	orrs	r2, r3
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80150de:	2201      	movs	r2, #1
 80150e0:	431a      	orrs	r2, r3
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80150e6:	2301      	movs	r3, #1
 80150e8:	e007      	b.n	80150fa <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	2201      	movs	r2, #1
 80150f2:	4013      	ands	r3, r2
 80150f4:	2b01      	cmp	r3, #1
 80150f6:	d1dc      	bne.n	80150b2 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80150f8:	2300      	movs	r3, #0
}
 80150fa:	0018      	movs	r0, r3
 80150fc:	46bd      	mov	sp, r7
 80150fe:	b004      	add	sp, #16
 8015100:	bd80      	pop	{r7, pc}
 8015102:	46c0      	nop			@ (mov r8, r8)
 8015104:	80000017 	.word	0x80000017

08015108 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b084      	sub	sp, #16
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8015110:	4b0b      	ldr	r3, [pc, #44]	@ (8015140 <ADC_DelayMicroSecond+0x38>)
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	490b      	ldr	r1, [pc, #44]	@ (8015144 <ADC_DelayMicroSecond+0x3c>)
 8015116:	0018      	movs	r0, r3
 8015118:	f7eb f844 	bl	80001a4 <__udivsi3>
 801511c:	0003      	movs	r3, r0
 801511e:	001a      	movs	r2, r3
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	4353      	muls	r3, r2
 8015124:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8015126:	e002      	b.n	801512e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	3b01      	subs	r3, #1
 801512c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d1f9      	bne.n	8015128 <ADC_DelayMicroSecond+0x20>
  }
}
 8015134:	46c0      	nop			@ (mov r8, r8)
 8015136:	46c0      	nop			@ (mov r8, r8)
 8015138:	46bd      	mov	sp, r7
 801513a:	b004      	add	sp, #16
 801513c:	bd80      	pop	{r7, pc}
 801513e:	46c0      	nop			@ (mov r8, r8)
 8015140:	200000ec 	.word	0x200000ec
 8015144:	000f4240 	.word	0x000f4240

08015148 <__NVIC_EnableIRQ>:
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
 801514e:	0002      	movs	r2, r0
 8015150:	1dfb      	adds	r3, r7, #7
 8015152:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8015154:	1dfb      	adds	r3, r7, #7
 8015156:	781b      	ldrb	r3, [r3, #0]
 8015158:	2b7f      	cmp	r3, #127	@ 0x7f
 801515a:	d809      	bhi.n	8015170 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801515c:	1dfb      	adds	r3, r7, #7
 801515e:	781b      	ldrb	r3, [r3, #0]
 8015160:	001a      	movs	r2, r3
 8015162:	231f      	movs	r3, #31
 8015164:	401a      	ands	r2, r3
 8015166:	4b04      	ldr	r3, [pc, #16]	@ (8015178 <__NVIC_EnableIRQ+0x30>)
 8015168:	2101      	movs	r1, #1
 801516a:	4091      	lsls	r1, r2
 801516c:	000a      	movs	r2, r1
 801516e:	601a      	str	r2, [r3, #0]
}
 8015170:	46c0      	nop			@ (mov r8, r8)
 8015172:	46bd      	mov	sp, r7
 8015174:	b002      	add	sp, #8
 8015176:	bd80      	pop	{r7, pc}
 8015178:	e000e100 	.word	0xe000e100

0801517c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801517c:	b590      	push	{r4, r7, lr}
 801517e:	b083      	sub	sp, #12
 8015180:	af00      	add	r7, sp, #0
 8015182:	0002      	movs	r2, r0
 8015184:	6039      	str	r1, [r7, #0]
 8015186:	1dfb      	adds	r3, r7, #7
 8015188:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 801518a:	1dfb      	adds	r3, r7, #7
 801518c:	781b      	ldrb	r3, [r3, #0]
 801518e:	2b7f      	cmp	r3, #127	@ 0x7f
 8015190:	d828      	bhi.n	80151e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8015192:	4a2f      	ldr	r2, [pc, #188]	@ (8015250 <__NVIC_SetPriority+0xd4>)
 8015194:	1dfb      	adds	r3, r7, #7
 8015196:	781b      	ldrb	r3, [r3, #0]
 8015198:	b25b      	sxtb	r3, r3
 801519a:	089b      	lsrs	r3, r3, #2
 801519c:	33c0      	adds	r3, #192	@ 0xc0
 801519e:	009b      	lsls	r3, r3, #2
 80151a0:	589b      	ldr	r3, [r3, r2]
 80151a2:	1dfa      	adds	r2, r7, #7
 80151a4:	7812      	ldrb	r2, [r2, #0]
 80151a6:	0011      	movs	r1, r2
 80151a8:	2203      	movs	r2, #3
 80151aa:	400a      	ands	r2, r1
 80151ac:	00d2      	lsls	r2, r2, #3
 80151ae:	21ff      	movs	r1, #255	@ 0xff
 80151b0:	4091      	lsls	r1, r2
 80151b2:	000a      	movs	r2, r1
 80151b4:	43d2      	mvns	r2, r2
 80151b6:	401a      	ands	r2, r3
 80151b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80151ba:	683b      	ldr	r3, [r7, #0]
 80151bc:	019b      	lsls	r3, r3, #6
 80151be:	22ff      	movs	r2, #255	@ 0xff
 80151c0:	401a      	ands	r2, r3
 80151c2:	1dfb      	adds	r3, r7, #7
 80151c4:	781b      	ldrb	r3, [r3, #0]
 80151c6:	0018      	movs	r0, r3
 80151c8:	2303      	movs	r3, #3
 80151ca:	4003      	ands	r3, r0
 80151cc:	00db      	lsls	r3, r3, #3
 80151ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80151d0:	481f      	ldr	r0, [pc, #124]	@ (8015250 <__NVIC_SetPriority+0xd4>)
 80151d2:	1dfb      	adds	r3, r7, #7
 80151d4:	781b      	ldrb	r3, [r3, #0]
 80151d6:	b25b      	sxtb	r3, r3
 80151d8:	089b      	lsrs	r3, r3, #2
 80151da:	430a      	orrs	r2, r1
 80151dc:	33c0      	adds	r3, #192	@ 0xc0
 80151de:	009b      	lsls	r3, r3, #2
 80151e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80151e2:	e031      	b.n	8015248 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80151e4:	4a1b      	ldr	r2, [pc, #108]	@ (8015254 <__NVIC_SetPriority+0xd8>)
 80151e6:	1dfb      	adds	r3, r7, #7
 80151e8:	781b      	ldrb	r3, [r3, #0]
 80151ea:	0019      	movs	r1, r3
 80151ec:	230f      	movs	r3, #15
 80151ee:	400b      	ands	r3, r1
 80151f0:	3b08      	subs	r3, #8
 80151f2:	089b      	lsrs	r3, r3, #2
 80151f4:	3306      	adds	r3, #6
 80151f6:	009b      	lsls	r3, r3, #2
 80151f8:	18d3      	adds	r3, r2, r3
 80151fa:	3304      	adds	r3, #4
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	1dfa      	adds	r2, r7, #7
 8015200:	7812      	ldrb	r2, [r2, #0]
 8015202:	0011      	movs	r1, r2
 8015204:	2203      	movs	r2, #3
 8015206:	400a      	ands	r2, r1
 8015208:	00d2      	lsls	r2, r2, #3
 801520a:	21ff      	movs	r1, #255	@ 0xff
 801520c:	4091      	lsls	r1, r2
 801520e:	000a      	movs	r2, r1
 8015210:	43d2      	mvns	r2, r2
 8015212:	401a      	ands	r2, r3
 8015214:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8015216:	683b      	ldr	r3, [r7, #0]
 8015218:	019b      	lsls	r3, r3, #6
 801521a:	22ff      	movs	r2, #255	@ 0xff
 801521c:	401a      	ands	r2, r3
 801521e:	1dfb      	adds	r3, r7, #7
 8015220:	781b      	ldrb	r3, [r3, #0]
 8015222:	0018      	movs	r0, r3
 8015224:	2303      	movs	r3, #3
 8015226:	4003      	ands	r3, r0
 8015228:	00db      	lsls	r3, r3, #3
 801522a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801522c:	4809      	ldr	r0, [pc, #36]	@ (8015254 <__NVIC_SetPriority+0xd8>)
 801522e:	1dfb      	adds	r3, r7, #7
 8015230:	781b      	ldrb	r3, [r3, #0]
 8015232:	001c      	movs	r4, r3
 8015234:	230f      	movs	r3, #15
 8015236:	4023      	ands	r3, r4
 8015238:	3b08      	subs	r3, #8
 801523a:	089b      	lsrs	r3, r3, #2
 801523c:	430a      	orrs	r2, r1
 801523e:	3306      	adds	r3, #6
 8015240:	009b      	lsls	r3, r3, #2
 8015242:	18c3      	adds	r3, r0, r3
 8015244:	3304      	adds	r3, #4
 8015246:	601a      	str	r2, [r3, #0]
}
 8015248:	46c0      	nop			@ (mov r8, r8)
 801524a:	46bd      	mov	sp, r7
 801524c:	b003      	add	sp, #12
 801524e:	bd90      	pop	{r4, r7, pc}
 8015250:	e000e100 	.word	0xe000e100
 8015254:	e000ed00 	.word	0xe000ed00

08015258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b082      	sub	sp, #8
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	1e5a      	subs	r2, r3, #1
 8015264:	2380      	movs	r3, #128	@ 0x80
 8015266:	045b      	lsls	r3, r3, #17
 8015268:	429a      	cmp	r2, r3
 801526a:	d301      	bcc.n	8015270 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 801526c:	2301      	movs	r3, #1
 801526e:	e010      	b.n	8015292 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8015270:	4b0a      	ldr	r3, [pc, #40]	@ (801529c <SysTick_Config+0x44>)
 8015272:	687a      	ldr	r2, [r7, #4]
 8015274:	3a01      	subs	r2, #1
 8015276:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8015278:	2301      	movs	r3, #1
 801527a:	425b      	negs	r3, r3
 801527c:	2103      	movs	r1, #3
 801527e:	0018      	movs	r0, r3
 8015280:	f7ff ff7c 	bl	801517c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8015284:	4b05      	ldr	r3, [pc, #20]	@ (801529c <SysTick_Config+0x44>)
 8015286:	2200      	movs	r2, #0
 8015288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801528a:	4b04      	ldr	r3, [pc, #16]	@ (801529c <SysTick_Config+0x44>)
 801528c:	2207      	movs	r2, #7
 801528e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8015290:	2300      	movs	r3, #0
}
 8015292:	0018      	movs	r0, r3
 8015294:	46bd      	mov	sp, r7
 8015296:	b002      	add	sp, #8
 8015298:	bd80      	pop	{r7, pc}
 801529a:	46c0      	nop			@ (mov r8, r8)
 801529c:	e000e010 	.word	0xe000e010

080152a0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b084      	sub	sp, #16
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	60b9      	str	r1, [r7, #8]
 80152a8:	607a      	str	r2, [r7, #4]
 80152aa:	210f      	movs	r1, #15
 80152ac:	187b      	adds	r3, r7, r1
 80152ae:	1c02      	adds	r2, r0, #0
 80152b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80152b2:	68ba      	ldr	r2, [r7, #8]
 80152b4:	187b      	adds	r3, r7, r1
 80152b6:	781b      	ldrb	r3, [r3, #0]
 80152b8:	b25b      	sxtb	r3, r3
 80152ba:	0011      	movs	r1, r2
 80152bc:	0018      	movs	r0, r3
 80152be:	f7ff ff5d 	bl	801517c <__NVIC_SetPriority>
}
 80152c2:	46c0      	nop			@ (mov r8, r8)
 80152c4:	46bd      	mov	sp, r7
 80152c6:	b004      	add	sp, #16
 80152c8:	bd80      	pop	{r7, pc}

080152ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80152ca:	b580      	push	{r7, lr}
 80152cc:	b082      	sub	sp, #8
 80152ce:	af00      	add	r7, sp, #0
 80152d0:	0002      	movs	r2, r0
 80152d2:	1dfb      	adds	r3, r7, #7
 80152d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80152d6:	1dfb      	adds	r3, r7, #7
 80152d8:	781b      	ldrb	r3, [r3, #0]
 80152da:	b25b      	sxtb	r3, r3
 80152dc:	0018      	movs	r0, r3
 80152de:	f7ff ff33 	bl	8015148 <__NVIC_EnableIRQ>
}
 80152e2:	46c0      	nop			@ (mov r8, r8)
 80152e4:	46bd      	mov	sp, r7
 80152e6:	b002      	add	sp, #8
 80152e8:	bd80      	pop	{r7, pc}

080152ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80152ea:	b580      	push	{r7, lr}
 80152ec:	b082      	sub	sp, #8
 80152ee:	af00      	add	r7, sp, #0
 80152f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	0018      	movs	r0, r3
 80152f6:	f7ff ffaf 	bl	8015258 <SysTick_Config>
 80152fa:	0003      	movs	r3, r0
}
 80152fc:	0018      	movs	r0, r3
 80152fe:	46bd      	mov	sp, r7
 8015300:	b002      	add	sp, #8
 8015302:	bd80      	pop	{r7, pc}

08015304 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8015304:	b580      	push	{r7, lr}
 8015306:	b084      	sub	sp, #16
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d101      	bne.n	8015316 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8015312:	2301      	movs	r3, #1
 8015314:	e061      	b.n	80153da <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	4a32      	ldr	r2, [pc, #200]	@ (80153e4 <HAL_DMA_Init+0xe0>)
 801531c:	4694      	mov	ip, r2
 801531e:	4463      	add	r3, ip
 8015320:	2114      	movs	r1, #20
 8015322:	0018      	movs	r0, r3
 8015324:	f7ea ff3e 	bl	80001a4 <__udivsi3>
 8015328:	0003      	movs	r3, r0
 801532a:	009a      	lsls	r2, r3, #2
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	4a2d      	ldr	r2, [pc, #180]	@ (80153e8 <HAL_DMA_Init+0xe4>)
 8015334:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	2225      	movs	r2, #37	@ 0x25
 801533a:	2102      	movs	r1, #2
 801533c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	4a28      	ldr	r2, [pc, #160]	@ (80153ec <HAL_DMA_Init+0xe8>)
 801534a:	4013      	ands	r3, r2
 801534c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8015356:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	691b      	ldr	r3, [r3, #16]
 801535c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015362:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	699b      	ldr	r3, [r3, #24]
 8015368:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801536e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	6a1b      	ldr	r3, [r3, #32]
 8015374:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8015376:	68fa      	ldr	r2, [r7, #12]
 8015378:	4313      	orrs	r3, r2
 801537a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	68fa      	ldr	r2, [r7, #12]
 8015382:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	689a      	ldr	r2, [r3, #8]
 8015388:	2380      	movs	r3, #128	@ 0x80
 801538a:	01db      	lsls	r3, r3, #7
 801538c:	429a      	cmp	r2, r3
 801538e:	d018      	beq.n	80153c2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8015390:	4b17      	ldr	r3, [pc, #92]	@ (80153f0 <HAL_DMA_Init+0xec>)
 8015392:	681a      	ldr	r2, [r3, #0]
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015398:	211c      	movs	r1, #28
 801539a:	400b      	ands	r3, r1
 801539c:	210f      	movs	r1, #15
 801539e:	4099      	lsls	r1, r3
 80153a0:	000b      	movs	r3, r1
 80153a2:	43d9      	mvns	r1, r3
 80153a4:	4b12      	ldr	r3, [pc, #72]	@ (80153f0 <HAL_DMA_Init+0xec>)
 80153a6:	400a      	ands	r2, r1
 80153a8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80153aa:	4b11      	ldr	r3, [pc, #68]	@ (80153f0 <HAL_DMA_Init+0xec>)
 80153ac:	6819      	ldr	r1, [r3, #0]
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	685a      	ldr	r2, [r3, #4]
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80153b6:	201c      	movs	r0, #28
 80153b8:	4003      	ands	r3, r0
 80153ba:	409a      	lsls	r2, r3
 80153bc:	4b0c      	ldr	r3, [pc, #48]	@ (80153f0 <HAL_DMA_Init+0xec>)
 80153be:	430a      	orrs	r2, r1
 80153c0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	2200      	movs	r2, #0
 80153c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	2225      	movs	r2, #37	@ 0x25
 80153cc:	2101      	movs	r1, #1
 80153ce:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2224      	movs	r2, #36	@ 0x24
 80153d4:	2100      	movs	r1, #0
 80153d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80153d8:	2300      	movs	r3, #0
}
 80153da:	0018      	movs	r0, r3
 80153dc:	46bd      	mov	sp, r7
 80153de:	b004      	add	sp, #16
 80153e0:	bd80      	pop	{r7, pc}
 80153e2:	46c0      	nop			@ (mov r8, r8)
 80153e4:	bffdfff8 	.word	0xbffdfff8
 80153e8:	40020000 	.word	0x40020000
 80153ec:	ffff800f 	.word	0xffff800f
 80153f0:	400200a8 	.word	0x400200a8

080153f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b086      	sub	sp, #24
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	60f8      	str	r0, [r7, #12]
 80153fc:	60b9      	str	r1, [r7, #8]
 80153fe:	607a      	str	r2, [r7, #4]
 8015400:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015402:	2317      	movs	r3, #23
 8015404:	18fb      	adds	r3, r7, r3
 8015406:	2200      	movs	r2, #0
 8015408:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	2224      	movs	r2, #36	@ 0x24
 801540e:	5c9b      	ldrb	r3, [r3, r2]
 8015410:	2b01      	cmp	r3, #1
 8015412:	d101      	bne.n	8015418 <HAL_DMA_Start_IT+0x24>
 8015414:	2302      	movs	r3, #2
 8015416:	e04f      	b.n	80154b8 <HAL_DMA_Start_IT+0xc4>
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	2224      	movs	r2, #36	@ 0x24
 801541c:	2101      	movs	r1, #1
 801541e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	2225      	movs	r2, #37	@ 0x25
 8015424:	5c9b      	ldrb	r3, [r3, r2]
 8015426:	b2db      	uxtb	r3, r3
 8015428:	2b01      	cmp	r3, #1
 801542a:	d13a      	bne.n	80154a2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	2225      	movs	r2, #37	@ 0x25
 8015430:	2102      	movs	r1, #2
 8015432:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	2200      	movs	r2, #0
 8015438:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	681a      	ldr	r2, [r3, #0]
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	2101      	movs	r1, #1
 8015446:	438a      	bics	r2, r1
 8015448:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801544a:	683b      	ldr	r3, [r7, #0]
 801544c:	687a      	ldr	r2, [r7, #4]
 801544e:	68b9      	ldr	r1, [r7, #8]
 8015450:	68f8      	ldr	r0, [r7, #12]
 8015452:	f000 f980 	bl	8015756 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801545a:	2b00      	cmp	r3, #0
 801545c:	d008      	beq.n	8015470 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	681a      	ldr	r2, [r3, #0]
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	210e      	movs	r1, #14
 801546a:	430a      	orrs	r2, r1
 801546c:	601a      	str	r2, [r3, #0]
 801546e:	e00f      	b.n	8015490 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	681a      	ldr	r2, [r3, #0]
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	2104      	movs	r1, #4
 801547c:	438a      	bics	r2, r1
 801547e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	681a      	ldr	r2, [r3, #0]
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	210a      	movs	r1, #10
 801548c:	430a      	orrs	r2, r1
 801548e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	681a      	ldr	r2, [r3, #0]
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	2101      	movs	r1, #1
 801549c:	430a      	orrs	r2, r1
 801549e:	601a      	str	r2, [r3, #0]
 80154a0:	e007      	b.n	80154b2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	2224      	movs	r2, #36	@ 0x24
 80154a6:	2100      	movs	r1, #0
 80154a8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80154aa:	2317      	movs	r3, #23
 80154ac:	18fb      	adds	r3, r7, r3
 80154ae:	2202      	movs	r2, #2
 80154b0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80154b2:	2317      	movs	r3, #23
 80154b4:	18fb      	adds	r3, r7, r3
 80154b6:	781b      	ldrb	r3, [r3, #0]
}
 80154b8:	0018      	movs	r0, r3
 80154ba:	46bd      	mov	sp, r7
 80154bc:	b006      	add	sp, #24
 80154be:	bd80      	pop	{r7, pc}

080154c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b084      	sub	sp, #16
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80154c8:	230f      	movs	r3, #15
 80154ca:	18fb      	adds	r3, r7, r3
 80154cc:	2200      	movs	r2, #0
 80154ce:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	2225      	movs	r2, #37	@ 0x25
 80154d4:	5c9b      	ldrb	r3, [r3, r2]
 80154d6:	b2db      	uxtb	r3, r3
 80154d8:	2b02      	cmp	r3, #2
 80154da:	d008      	beq.n	80154ee <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	2204      	movs	r2, #4
 80154e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	2224      	movs	r2, #36	@ 0x24
 80154e6:	2100      	movs	r1, #0
 80154e8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80154ea:	2301      	movs	r3, #1
 80154ec:	e024      	b.n	8015538 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	681a      	ldr	r2, [r3, #0]
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	210e      	movs	r1, #14
 80154fa:	438a      	bics	r2, r1
 80154fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	681a      	ldr	r2, [r3, #0]
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	2101      	movs	r1, #1
 801550a:	438a      	bics	r2, r1
 801550c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015512:	221c      	movs	r2, #28
 8015514:	401a      	ands	r2, r3
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801551a:	2101      	movs	r1, #1
 801551c:	4091      	lsls	r1, r2
 801551e:	000a      	movs	r2, r1
 8015520:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	2225      	movs	r2, #37	@ 0x25
 8015526:	2101      	movs	r1, #1
 8015528:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	2224      	movs	r2, #36	@ 0x24
 801552e:	2100      	movs	r1, #0
 8015530:	5499      	strb	r1, [r3, r2]

    return status;
 8015532:	230f      	movs	r3, #15
 8015534:	18fb      	adds	r3, r7, r3
 8015536:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015538:	0018      	movs	r0, r3
 801553a:	46bd      	mov	sp, r7
 801553c:	b004      	add	sp, #16
 801553e:	bd80      	pop	{r7, pc}

08015540 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b084      	sub	sp, #16
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015548:	210f      	movs	r1, #15
 801554a:	187b      	adds	r3, r7, r1
 801554c:	2200      	movs	r2, #0
 801554e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	2225      	movs	r2, #37	@ 0x25
 8015554:	5c9b      	ldrb	r3, [r3, r2]
 8015556:	b2db      	uxtb	r3, r3
 8015558:	2b02      	cmp	r3, #2
 801555a:	d006      	beq.n	801556a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	2204      	movs	r2, #4
 8015560:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8015562:	187b      	adds	r3, r7, r1
 8015564:	2201      	movs	r2, #1
 8015566:	701a      	strb	r2, [r3, #0]
 8015568:	e02a      	b.n	80155c0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	681a      	ldr	r2, [r3, #0]
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	210e      	movs	r1, #14
 8015576:	438a      	bics	r2, r1
 8015578:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	681a      	ldr	r2, [r3, #0]
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	2101      	movs	r1, #1
 8015586:	438a      	bics	r2, r1
 8015588:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801558e:	221c      	movs	r2, #28
 8015590:	401a      	ands	r2, r3
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015596:	2101      	movs	r1, #1
 8015598:	4091      	lsls	r1, r2
 801559a:	000a      	movs	r2, r1
 801559c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	2225      	movs	r2, #37	@ 0x25
 80155a2:	2101      	movs	r1, #1
 80155a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	2224      	movs	r2, #36	@ 0x24
 80155aa:	2100      	movs	r1, #0
 80155ac:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d004      	beq.n	80155c0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155ba:	687a      	ldr	r2, [r7, #4]
 80155bc:	0010      	movs	r0, r2
 80155be:	4798      	blx	r3
    }
  }
  return status;
 80155c0:	230f      	movs	r3, #15
 80155c2:	18fb      	adds	r3, r7, r3
 80155c4:	781b      	ldrb	r3, [r3, #0]
}
 80155c6:	0018      	movs	r0, r3
 80155c8:	46bd      	mov	sp, r7
 80155ca:	b004      	add	sp, #16
 80155cc:	bd80      	pop	{r7, pc}

080155ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80155ce:	b580      	push	{r7, lr}
 80155d0:	b084      	sub	sp, #16
 80155d2:	af00      	add	r7, sp, #0
 80155d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155ea:	221c      	movs	r2, #28
 80155ec:	4013      	ands	r3, r2
 80155ee:	2204      	movs	r2, #4
 80155f0:	409a      	lsls	r2, r3
 80155f2:	0013      	movs	r3, r2
 80155f4:	68fa      	ldr	r2, [r7, #12]
 80155f6:	4013      	ands	r3, r2
 80155f8:	d026      	beq.n	8015648 <HAL_DMA_IRQHandler+0x7a>
 80155fa:	68bb      	ldr	r3, [r7, #8]
 80155fc:	2204      	movs	r2, #4
 80155fe:	4013      	ands	r3, r2
 8015600:	d022      	beq.n	8015648 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	2220      	movs	r2, #32
 801560a:	4013      	ands	r3, r2
 801560c:	d107      	bne.n	801561e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	681a      	ldr	r2, [r3, #0]
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	2104      	movs	r1, #4
 801561a:	438a      	bics	r2, r1
 801561c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015622:	221c      	movs	r2, #28
 8015624:	401a      	ands	r2, r3
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801562a:	2104      	movs	r1, #4
 801562c:	4091      	lsls	r1, r2
 801562e:	000a      	movs	r2, r1
 8015630:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015636:	2b00      	cmp	r3, #0
 8015638:	d100      	bne.n	801563c <HAL_DMA_IRQHandler+0x6e>
 801563a:	e071      	b.n	8015720 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015640:	687a      	ldr	r2, [r7, #4]
 8015642:	0010      	movs	r0, r2
 8015644:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8015646:	e06b      	b.n	8015720 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801564c:	221c      	movs	r2, #28
 801564e:	4013      	ands	r3, r2
 8015650:	2202      	movs	r2, #2
 8015652:	409a      	lsls	r2, r3
 8015654:	0013      	movs	r3, r2
 8015656:	68fa      	ldr	r2, [r7, #12]
 8015658:	4013      	ands	r3, r2
 801565a:	d02d      	beq.n	80156b8 <HAL_DMA_IRQHandler+0xea>
 801565c:	68bb      	ldr	r3, [r7, #8]
 801565e:	2202      	movs	r2, #2
 8015660:	4013      	ands	r3, r2
 8015662:	d029      	beq.n	80156b8 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	2220      	movs	r2, #32
 801566c:	4013      	ands	r3, r2
 801566e:	d10b      	bne.n	8015688 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	681a      	ldr	r2, [r3, #0]
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	210a      	movs	r1, #10
 801567c:	438a      	bics	r2, r1
 801567e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	2225      	movs	r2, #37	@ 0x25
 8015684:	2101      	movs	r1, #1
 8015686:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801568c:	221c      	movs	r2, #28
 801568e:	401a      	ands	r2, r3
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015694:	2102      	movs	r1, #2
 8015696:	4091      	lsls	r1, r2
 8015698:	000a      	movs	r2, r1
 801569a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	2224      	movs	r2, #36	@ 0x24
 80156a0:	2100      	movs	r1, #0
 80156a2:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d039      	beq.n	8015720 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156b0:	687a      	ldr	r2, [r7, #4]
 80156b2:	0010      	movs	r0, r2
 80156b4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80156b6:	e033      	b.n	8015720 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80156bc:	221c      	movs	r2, #28
 80156be:	4013      	ands	r3, r2
 80156c0:	2208      	movs	r2, #8
 80156c2:	409a      	lsls	r2, r3
 80156c4:	0013      	movs	r3, r2
 80156c6:	68fa      	ldr	r2, [r7, #12]
 80156c8:	4013      	ands	r3, r2
 80156ca:	d02a      	beq.n	8015722 <HAL_DMA_IRQHandler+0x154>
 80156cc:	68bb      	ldr	r3, [r7, #8]
 80156ce:	2208      	movs	r2, #8
 80156d0:	4013      	ands	r3, r2
 80156d2:	d026      	beq.n	8015722 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	681a      	ldr	r2, [r3, #0]
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	210e      	movs	r1, #14
 80156e0:	438a      	bics	r2, r1
 80156e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80156e8:	221c      	movs	r2, #28
 80156ea:	401a      	ands	r2, r3
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80156f0:	2101      	movs	r1, #1
 80156f2:	4091      	lsls	r1, r2
 80156f4:	000a      	movs	r2, r1
 80156f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	2201      	movs	r2, #1
 80156fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	2225      	movs	r2, #37	@ 0x25
 8015702:	2101      	movs	r1, #1
 8015704:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	2224      	movs	r2, #36	@ 0x24
 801570a:	2100      	movs	r1, #0
 801570c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015712:	2b00      	cmp	r3, #0
 8015714:	d005      	beq.n	8015722 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801571a:	687a      	ldr	r2, [r7, #4]
 801571c:	0010      	movs	r0, r2
 801571e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8015720:	46c0      	nop			@ (mov r8, r8)
 8015722:	46c0      	nop			@ (mov r8, r8)
}
 8015724:	46bd      	mov	sp, r7
 8015726:	b004      	add	sp, #16
 8015728:	bd80      	pop	{r7, pc}

0801572a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 801572a:	b580      	push	{r7, lr}
 801572c:	b082      	sub	sp, #8
 801572e:	af00      	add	r7, sp, #0
 8015730:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	2225      	movs	r2, #37	@ 0x25
 8015736:	5c9b      	ldrb	r3, [r3, r2]
 8015738:	b2db      	uxtb	r3, r3
}
 801573a:	0018      	movs	r0, r3
 801573c:	46bd      	mov	sp, r7
 801573e:	b002      	add	sp, #8
 8015740:	bd80      	pop	{r7, pc}

08015742 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8015742:	b580      	push	{r7, lr}
 8015744:	b082      	sub	sp, #8
 8015746:	af00      	add	r7, sp, #0
 8015748:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 801574e:	0018      	movs	r0, r3
 8015750:	46bd      	mov	sp, r7
 8015752:	b002      	add	sp, #8
 8015754:	bd80      	pop	{r7, pc}

08015756 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015756:	b580      	push	{r7, lr}
 8015758:	b084      	sub	sp, #16
 801575a:	af00      	add	r7, sp, #0
 801575c:	60f8      	str	r0, [r7, #12]
 801575e:	60b9      	str	r1, [r7, #8]
 8015760:	607a      	str	r2, [r7, #4]
 8015762:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015768:	221c      	movs	r2, #28
 801576a:	401a      	ands	r2, r3
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015770:	2101      	movs	r1, #1
 8015772:	4091      	lsls	r1, r2
 8015774:	000a      	movs	r2, r1
 8015776:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	683a      	ldr	r2, [r7, #0]
 801577e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	689b      	ldr	r3, [r3, #8]
 8015784:	2b10      	cmp	r3, #16
 8015786:	d108      	bne.n	801579a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	687a      	ldr	r2, [r7, #4]
 801578e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	68ba      	ldr	r2, [r7, #8]
 8015796:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8015798:	e007      	b.n	80157aa <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	68ba      	ldr	r2, [r7, #8]
 80157a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	687a      	ldr	r2, [r7, #4]
 80157a8:	60da      	str	r2, [r3, #12]
}
 80157aa:	46c0      	nop			@ (mov r8, r8)
 80157ac:	46bd      	mov	sp, r7
 80157ae:	b004      	add	sp, #16
 80157b0:	bd80      	pop	{r7, pc}
	...

080157b4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b084      	sub	sp, #16
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80157bc:	f7ff f8fc 	bl	80149b8 <HAL_GetTick>
 80157c0:	0003      	movs	r3, r0
 80157c2:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80157c4:	e00f      	b.n	80157e6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	3301      	adds	r3, #1
 80157ca:	d00c      	beq.n	80157e6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d007      	beq.n	80157e2 <FLASH_WaitForLastOperation+0x2e>
 80157d2:	f7ff f8f1 	bl	80149b8 <HAL_GetTick>
 80157d6:	0002      	movs	r2, r0
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	1ad3      	subs	r3, r2, r3
 80157dc:	687a      	ldr	r2, [r7, #4]
 80157de:	429a      	cmp	r2, r3
 80157e0:	d201      	bcs.n	80157e6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80157e2:	2303      	movs	r3, #3
 80157e4:	e052      	b.n	801588c <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80157e6:	4b2b      	ldr	r3, [pc, #172]	@ (8015894 <FLASH_WaitForLastOperation+0xe0>)
 80157e8:	699b      	ldr	r3, [r3, #24]
 80157ea:	2201      	movs	r2, #1
 80157ec:	4013      	ands	r3, r2
 80157ee:	2b01      	cmp	r3, #1
 80157f0:	d0e9      	beq.n	80157c6 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80157f2:	4b28      	ldr	r3, [pc, #160]	@ (8015894 <FLASH_WaitForLastOperation+0xe0>)
 80157f4:	699b      	ldr	r3, [r3, #24]
 80157f6:	2202      	movs	r2, #2
 80157f8:	4013      	ands	r3, r2
 80157fa:	2b02      	cmp	r3, #2
 80157fc:	d102      	bne.n	8015804 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80157fe:	4b25      	ldr	r3, [pc, #148]	@ (8015894 <FLASH_WaitForLastOperation+0xe0>)
 8015800:	2202      	movs	r2, #2
 8015802:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8015804:	4b23      	ldr	r3, [pc, #140]	@ (8015894 <FLASH_WaitForLastOperation+0xe0>)
 8015806:	699a      	ldr	r2, [r3, #24]
 8015808:	2380      	movs	r3, #128	@ 0x80
 801580a:	005b      	lsls	r3, r3, #1
 801580c:	401a      	ands	r2, r3
 801580e:	2380      	movs	r3, #128	@ 0x80
 8015810:	005b      	lsls	r3, r3, #1
 8015812:	429a      	cmp	r2, r3
 8015814:	d035      	beq.n	8015882 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8015816:	4b1f      	ldr	r3, [pc, #124]	@ (8015894 <FLASH_WaitForLastOperation+0xe0>)
 8015818:	699a      	ldr	r2, [r3, #24]
 801581a:	2380      	movs	r3, #128	@ 0x80
 801581c:	009b      	lsls	r3, r3, #2
 801581e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8015820:	2380      	movs	r3, #128	@ 0x80
 8015822:	009b      	lsls	r3, r3, #2
 8015824:	429a      	cmp	r2, r3
 8015826:	d02c      	beq.n	8015882 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8015828:	4b1a      	ldr	r3, [pc, #104]	@ (8015894 <FLASH_WaitForLastOperation+0xe0>)
 801582a:	699a      	ldr	r2, [r3, #24]
 801582c:	2380      	movs	r3, #128	@ 0x80
 801582e:	00db      	lsls	r3, r3, #3
 8015830:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8015832:	2380      	movs	r3, #128	@ 0x80
 8015834:	00db      	lsls	r3, r3, #3
 8015836:	429a      	cmp	r2, r3
 8015838:	d023      	beq.n	8015882 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 801583a:	4b16      	ldr	r3, [pc, #88]	@ (8015894 <FLASH_WaitForLastOperation+0xe0>)
 801583c:	699a      	ldr	r2, [r3, #24]
 801583e:	2380      	movs	r3, #128	@ 0x80
 8015840:	011b      	lsls	r3, r3, #4
 8015842:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8015844:	2380      	movs	r3, #128	@ 0x80
 8015846:	011b      	lsls	r3, r3, #4
 8015848:	429a      	cmp	r2, r3
 801584a:	d01a      	beq.n	8015882 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 801584c:	4b11      	ldr	r3, [pc, #68]	@ (8015894 <FLASH_WaitForLastOperation+0xe0>)
 801584e:	699a      	ldr	r2, [r3, #24]
 8015850:	2380      	movs	r3, #128	@ 0x80
 8015852:	019b      	lsls	r3, r3, #6
 8015854:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8015856:	2380      	movs	r3, #128	@ 0x80
 8015858:	019b      	lsls	r3, r3, #6
 801585a:	429a      	cmp	r2, r3
 801585c:	d011      	beq.n	8015882 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 801585e:	4b0d      	ldr	r3, [pc, #52]	@ (8015894 <FLASH_WaitForLastOperation+0xe0>)
 8015860:	699a      	ldr	r2, [r3, #24]
 8015862:	2380      	movs	r3, #128	@ 0x80
 8015864:	029b      	lsls	r3, r3, #10
 8015866:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8015868:	2380      	movs	r3, #128	@ 0x80
 801586a:	029b      	lsls	r3, r3, #10
 801586c:	429a      	cmp	r2, r3
 801586e:	d008      	beq.n	8015882 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8015870:	4b08      	ldr	r3, [pc, #32]	@ (8015894 <FLASH_WaitForLastOperation+0xe0>)
 8015872:	699a      	ldr	r2, [r3, #24]
 8015874:	2380      	movs	r3, #128	@ 0x80
 8015876:	025b      	lsls	r3, r3, #9
 8015878:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 801587a:	2380      	movs	r3, #128	@ 0x80
 801587c:	025b      	lsls	r3, r3, #9
 801587e:	429a      	cmp	r2, r3
 8015880:	d103      	bne.n	801588a <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8015882:	f000 f809 	bl	8015898 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8015886:	2301      	movs	r3, #1
 8015888:	e000      	b.n	801588c <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 801588a:	2300      	movs	r3, #0
}
 801588c:	0018      	movs	r0, r3
 801588e:	46bd      	mov	sp, r7
 8015890:	b004      	add	sp, #16
 8015892:	bd80      	pop	{r7, pc}
 8015894:	40022000 	.word	0x40022000

08015898 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b082      	sub	sp, #8
 801589c:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 801589e:	2300      	movs	r3, #0
 80158a0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80158a2:	4b49      	ldr	r3, [pc, #292]	@ (80159c8 <FLASH_SetErrorCode+0x130>)
 80158a4:	699a      	ldr	r2, [r3, #24]
 80158a6:	2380      	movs	r3, #128	@ 0x80
 80158a8:	005b      	lsls	r3, r3, #1
 80158aa:	401a      	ands	r2, r3
 80158ac:	2380      	movs	r3, #128	@ 0x80
 80158ae:	005b      	lsls	r3, r3, #1
 80158b0:	429a      	cmp	r2, r3
 80158b2:	d10a      	bne.n	80158ca <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80158b4:	4b45      	ldr	r3, [pc, #276]	@ (80159cc <FLASH_SetErrorCode+0x134>)
 80158b6:	695b      	ldr	r3, [r3, #20]
 80158b8:	2202      	movs	r2, #2
 80158ba:	431a      	orrs	r2, r3
 80158bc:	4b43      	ldr	r3, [pc, #268]	@ (80159cc <FLASH_SetErrorCode+0x134>)
 80158be:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	2280      	movs	r2, #128	@ 0x80
 80158c4:	0052      	lsls	r2, r2, #1
 80158c6:	4313      	orrs	r3, r2
 80158c8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80158ca:	4b3f      	ldr	r3, [pc, #252]	@ (80159c8 <FLASH_SetErrorCode+0x130>)
 80158cc:	699a      	ldr	r2, [r3, #24]
 80158ce:	2380      	movs	r3, #128	@ 0x80
 80158d0:	009b      	lsls	r3, r3, #2
 80158d2:	401a      	ands	r2, r3
 80158d4:	2380      	movs	r3, #128	@ 0x80
 80158d6:	009b      	lsls	r3, r3, #2
 80158d8:	429a      	cmp	r2, r3
 80158da:	d10a      	bne.n	80158f2 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80158dc:	4b3b      	ldr	r3, [pc, #236]	@ (80159cc <FLASH_SetErrorCode+0x134>)
 80158de:	695b      	ldr	r3, [r3, #20]
 80158e0:	2201      	movs	r2, #1
 80158e2:	431a      	orrs	r2, r3
 80158e4:	4b39      	ldr	r3, [pc, #228]	@ (80159cc <FLASH_SetErrorCode+0x134>)
 80158e6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	2280      	movs	r2, #128	@ 0x80
 80158ec:	0092      	lsls	r2, r2, #2
 80158ee:	4313      	orrs	r3, r2
 80158f0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80158f2:	4b35      	ldr	r3, [pc, #212]	@ (80159c8 <FLASH_SetErrorCode+0x130>)
 80158f4:	699a      	ldr	r2, [r3, #24]
 80158f6:	2380      	movs	r3, #128	@ 0x80
 80158f8:	00db      	lsls	r3, r3, #3
 80158fa:	401a      	ands	r2, r3
 80158fc:	2380      	movs	r3, #128	@ 0x80
 80158fe:	00db      	lsls	r3, r3, #3
 8015900:	429a      	cmp	r2, r3
 8015902:	d10a      	bne.n	801591a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8015904:	4b31      	ldr	r3, [pc, #196]	@ (80159cc <FLASH_SetErrorCode+0x134>)
 8015906:	695b      	ldr	r3, [r3, #20]
 8015908:	2208      	movs	r2, #8
 801590a:	431a      	orrs	r2, r3
 801590c:	4b2f      	ldr	r3, [pc, #188]	@ (80159cc <FLASH_SetErrorCode+0x134>)
 801590e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	2280      	movs	r2, #128	@ 0x80
 8015914:	00d2      	lsls	r2, r2, #3
 8015916:	4313      	orrs	r3, r2
 8015918:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 801591a:	4b2b      	ldr	r3, [pc, #172]	@ (80159c8 <FLASH_SetErrorCode+0x130>)
 801591c:	699a      	ldr	r2, [r3, #24]
 801591e:	2380      	movs	r3, #128	@ 0x80
 8015920:	011b      	lsls	r3, r3, #4
 8015922:	401a      	ands	r2, r3
 8015924:	2380      	movs	r3, #128	@ 0x80
 8015926:	011b      	lsls	r3, r3, #4
 8015928:	429a      	cmp	r2, r3
 801592a:	d10a      	bne.n	8015942 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 801592c:	4b27      	ldr	r3, [pc, #156]	@ (80159cc <FLASH_SetErrorCode+0x134>)
 801592e:	695b      	ldr	r3, [r3, #20]
 8015930:	2204      	movs	r2, #4
 8015932:	431a      	orrs	r2, r3
 8015934:	4b25      	ldr	r3, [pc, #148]	@ (80159cc <FLASH_SetErrorCode+0x134>)
 8015936:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	2280      	movs	r2, #128	@ 0x80
 801593c:	0112      	lsls	r2, r2, #4
 801593e:	4313      	orrs	r3, r2
 8015940:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8015942:	4b21      	ldr	r3, [pc, #132]	@ (80159c8 <FLASH_SetErrorCode+0x130>)
 8015944:	699a      	ldr	r2, [r3, #24]
 8015946:	2380      	movs	r3, #128	@ 0x80
 8015948:	019b      	lsls	r3, r3, #6
 801594a:	401a      	ands	r2, r3
 801594c:	2380      	movs	r3, #128	@ 0x80
 801594e:	019b      	lsls	r3, r3, #6
 8015950:	429a      	cmp	r2, r3
 8015952:	d10a      	bne.n	801596a <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8015954:	4b1d      	ldr	r3, [pc, #116]	@ (80159cc <FLASH_SetErrorCode+0x134>)
 8015956:	695b      	ldr	r3, [r3, #20]
 8015958:	2210      	movs	r2, #16
 801595a:	431a      	orrs	r2, r3
 801595c:	4b1b      	ldr	r3, [pc, #108]	@ (80159cc <FLASH_SetErrorCode+0x134>)
 801595e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	2280      	movs	r2, #128	@ 0x80
 8015964:	0192      	lsls	r2, r2, #6
 8015966:	4313      	orrs	r3, r2
 8015968:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 801596a:	4b17      	ldr	r3, [pc, #92]	@ (80159c8 <FLASH_SetErrorCode+0x130>)
 801596c:	699a      	ldr	r2, [r3, #24]
 801596e:	2380      	movs	r3, #128	@ 0x80
 8015970:	029b      	lsls	r3, r3, #10
 8015972:	401a      	ands	r2, r3
 8015974:	2380      	movs	r3, #128	@ 0x80
 8015976:	029b      	lsls	r3, r3, #10
 8015978:	429a      	cmp	r2, r3
 801597a:	d109      	bne.n	8015990 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 801597c:	4b13      	ldr	r3, [pc, #76]	@ (80159cc <FLASH_SetErrorCode+0x134>)
 801597e:	695b      	ldr	r3, [r3, #20]
 8015980:	2220      	movs	r2, #32
 8015982:	431a      	orrs	r2, r3
 8015984:	4b11      	ldr	r3, [pc, #68]	@ (80159cc <FLASH_SetErrorCode+0x134>)
 8015986:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	2220      	movs	r2, #32
 801598c:	4313      	orrs	r3, r2
 801598e:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8015990:	4b0d      	ldr	r3, [pc, #52]	@ (80159c8 <FLASH_SetErrorCode+0x130>)
 8015992:	699a      	ldr	r2, [r3, #24]
 8015994:	2380      	movs	r3, #128	@ 0x80
 8015996:	025b      	lsls	r3, r3, #9
 8015998:	401a      	ands	r2, r3
 801599a:	2380      	movs	r3, #128	@ 0x80
 801599c:	025b      	lsls	r3, r3, #9
 801599e:	429a      	cmp	r2, r3
 80159a0:	d10a      	bne.n	80159b8 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80159a2:	4b0a      	ldr	r3, [pc, #40]	@ (80159cc <FLASH_SetErrorCode+0x134>)
 80159a4:	695b      	ldr	r3, [r3, #20]
 80159a6:	2240      	movs	r2, #64	@ 0x40
 80159a8:	431a      	orrs	r2, r3
 80159aa:	4b08      	ldr	r3, [pc, #32]	@ (80159cc <FLASH_SetErrorCode+0x134>)
 80159ac:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	2280      	movs	r2, #128	@ 0x80
 80159b2:	0252      	lsls	r2, r2, #9
 80159b4:	4313      	orrs	r3, r2
 80159b6:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80159b8:	4b03      	ldr	r3, [pc, #12]	@ (80159c8 <FLASH_SetErrorCode+0x130>)
 80159ba:	687a      	ldr	r2, [r7, #4]
 80159bc:	619a      	str	r2, [r3, #24]
}  
 80159be:	46c0      	nop			@ (mov r8, r8)
 80159c0:	46bd      	mov	sp, r7
 80159c2:	b002      	add	sp, #8
 80159c4:	bd80      	pop	{r7, pc}
 80159c6:	46c0      	nop			@ (mov r8, r8)
 80159c8:	40022000 	.word	0x40022000
 80159cc:	20002518 	.word	0x20002518

080159d0 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b084      	sub	sp, #16
 80159d4:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80159d6:	4b12      	ldr	r3, [pc, #72]	@ (8015a20 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80159d8:	685b      	ldr	r3, [r3, #4]
 80159da:	2201      	movs	r2, #1
 80159dc:	4013      	ands	r3, r2
 80159de:	d019      	beq.n	8015a14 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80159e0:	f3ef 8310 	mrs	r3, PRIMASK
 80159e4:	607b      	str	r3, [r7, #4]
  return(result);
 80159e6:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80159e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80159ea:	b672      	cpsid	i
}
 80159ec:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80159ee:	4b0c      	ldr	r3, [pc, #48]	@ (8015a20 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80159f0:	4a0c      	ldr	r2, [pc, #48]	@ (8015a24 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 80159f2:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80159f4:	4b0a      	ldr	r3, [pc, #40]	@ (8015a20 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80159f6:	4a0c      	ldr	r2, [pc, #48]	@ (8015a28 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 80159f8:	60da      	str	r2, [r3, #12]
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80159fe:	68bb      	ldr	r3, [r7, #8]
 8015a00:	f383 8810 	msr	PRIMASK, r3
}
 8015a04:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8015a06:	4b06      	ldr	r3, [pc, #24]	@ (8015a20 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015a08:	685b      	ldr	r3, [r3, #4]
 8015a0a:	2201      	movs	r2, #1
 8015a0c:	4013      	ands	r3, r2
 8015a0e:	d001      	beq.n	8015a14 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8015a10:	2301      	movs	r3, #1
 8015a12:	e000      	b.n	8015a16 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8015a14:	2300      	movs	r3, #0
}
 8015a16:	0018      	movs	r0, r3
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	b004      	add	sp, #16
 8015a1c:	bd80      	pop	{r7, pc}
 8015a1e:	46c0      	nop			@ (mov r8, r8)
 8015a20:	40022000 	.word	0x40022000
 8015a24:	89abcdef 	.word	0x89abcdef
 8015a28:	02030405 	.word	0x02030405

08015a2c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8015a30:	4b04      	ldr	r3, [pc, #16]	@ (8015a44 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8015a32:	685a      	ldr	r2, [r3, #4]
 8015a34:	4b03      	ldr	r3, [pc, #12]	@ (8015a44 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8015a36:	2101      	movs	r1, #1
 8015a38:	430a      	orrs	r2, r1
 8015a3a:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8015a3c:	2300      	movs	r3, #0
}
 8015a3e:	0018      	movs	r0, r3
 8015a40:	46bd      	mov	sp, r7
 8015a42:	bd80      	pop	{r7, pc}
 8015a44:	40022000 	.word	0x40022000

08015a48 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8015a48:	b5b0      	push	{r4, r5, r7, lr}
 8015a4a:	b084      	sub	sp, #16
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015a50:	250f      	movs	r5, #15
 8015a52:	197b      	adds	r3, r7, r5
 8015a54:	2200      	movs	r2, #0
 8015a56:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015a58:	197c      	adds	r4, r7, r5
 8015a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8015a98 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8015a5c:	0018      	movs	r0, r3
 8015a5e:	f7ff fea9 	bl	80157b4 <FLASH_WaitForLastOperation>
 8015a62:	0003      	movs	r3, r0
 8015a64:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8015a66:	0029      	movs	r1, r5
 8015a68:	187b      	adds	r3, r7, r1
 8015a6a:	781b      	ldrb	r3, [r3, #0]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d10c      	bne.n	8015a8a <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8015a70:	4b0a      	ldr	r3, [pc, #40]	@ (8015a9c <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 8015a72:	2200      	movs	r2, #0
 8015a74:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	2200      	movs	r2, #0
 8015a7a:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015a7c:	187c      	adds	r4, r7, r1
 8015a7e:	4b06      	ldr	r3, [pc, #24]	@ (8015a98 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8015a80:	0018      	movs	r0, r3
 8015a82:	f7ff fe97 	bl	80157b4 <FLASH_WaitForLastOperation>
 8015a86:	0003      	movs	r3, r0
 8015a88:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 8015a8a:	230f      	movs	r3, #15
 8015a8c:	18fb      	adds	r3, r7, r3
 8015a8e:	781b      	ldrb	r3, [r3, #0]
}  
 8015a90:	0018      	movs	r0, r3
 8015a92:	46bd      	mov	sp, r7
 8015a94:	b004      	add	sp, #16
 8015a96:	bdb0      	pop	{r4, r5, r7, pc}
 8015a98:	0000c350 	.word	0x0000c350
 8015a9c:	20002518 	.word	0x20002518

08015aa0 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8015aa0:	b5b0      	push	{r4, r5, r7, lr}
 8015aa2:	b086      	sub	sp, #24
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	60f8      	str	r0, [r7, #12]
 8015aa8:	60b9      	str	r1, [r7, #8]
 8015aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015aac:	2317      	movs	r3, #23
 8015aae:	18fb      	adds	r3, r7, r3
 8015ab0:	2201      	movs	r2, #1
 8015ab2:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8015ab4:	4b24      	ldr	r3, [pc, #144]	@ (8015b48 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015ab6:	7c1b      	ldrb	r3, [r3, #16]
 8015ab8:	2b01      	cmp	r3, #1
 8015aba:	d101      	bne.n	8015ac0 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8015abc:	2302      	movs	r3, #2
 8015abe:	e03e      	b.n	8015b3e <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8015ac0:	4b21      	ldr	r3, [pc, #132]	@ (8015b48 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015ac2:	2201      	movs	r2, #1
 8015ac4:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015ac6:	2517      	movs	r5, #23
 8015ac8:	197c      	adds	r4, r7, r5
 8015aca:	4b20      	ldr	r3, [pc, #128]	@ (8015b4c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8015acc:	0018      	movs	r0, r3
 8015ace:	f7ff fe71 	bl	80157b4 <FLASH_WaitForLastOperation>
 8015ad2:	0003      	movs	r3, r0
 8015ad4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8015ad6:	197b      	adds	r3, r7, r5
 8015ad8:	781b      	ldrb	r3, [r3, #0]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d129      	bne.n	8015b32 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8015ade:	4b1a      	ldr	r3, [pc, #104]	@ (8015b48 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	2b02      	cmp	r3, #2
 8015ae8:	d103      	bne.n	8015af2 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8015aea:	68bb      	ldr	r3, [r7, #8]
 8015aec:	687a      	ldr	r2, [r7, #4]
 8015aee:	601a      	str	r2, [r3, #0]
 8015af0:	e013      	b.n	8015b1a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	2b01      	cmp	r3, #1
 8015af6:	d104      	bne.n	8015b02 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8015af8:	68bb      	ldr	r3, [r7, #8]
 8015afa:	687a      	ldr	r2, [r7, #4]
 8015afc:	b292      	uxth	r2, r2
 8015afe:	801a      	strh	r2, [r3, #0]
 8015b00:	e00b      	b.n	8015b1a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d104      	bne.n	8015b12 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8015b08:	68bb      	ldr	r3, [r7, #8]
 8015b0a:	687a      	ldr	r2, [r7, #4]
 8015b0c:	b2d2      	uxtb	r2, r2
 8015b0e:	701a      	strb	r2, [r3, #0]
 8015b10:	e003      	b.n	8015b1a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8015b12:	2317      	movs	r3, #23
 8015b14:	18fb      	adds	r3, r7, r3
 8015b16:	2201      	movs	r2, #1
 8015b18:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8015b1a:	2217      	movs	r2, #23
 8015b1c:	18bb      	adds	r3, r7, r2
 8015b1e:	781b      	ldrb	r3, [r3, #0]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d106      	bne.n	8015b32 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015b24:	18bc      	adds	r4, r7, r2
 8015b26:	4b09      	ldr	r3, [pc, #36]	@ (8015b4c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8015b28:	0018      	movs	r0, r3
 8015b2a:	f7ff fe43 	bl	80157b4 <FLASH_WaitForLastOperation>
 8015b2e:	0003      	movs	r3, r0
 8015b30:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8015b32:	4b05      	ldr	r3, [pc, #20]	@ (8015b48 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015b34:	2200      	movs	r2, #0
 8015b36:	741a      	strb	r2, [r3, #16]

  return status;
 8015b38:	2317      	movs	r3, #23
 8015b3a:	18fb      	adds	r3, r7, r3
 8015b3c:	781b      	ldrb	r3, [r3, #0]
}
 8015b3e:	0018      	movs	r0, r3
 8015b40:	46bd      	mov	sp, r7
 8015b42:	b006      	add	sp, #24
 8015b44:	bdb0      	pop	{r4, r5, r7, pc}
 8015b46:	46c0      	nop			@ (mov r8, r8)
 8015b48:	20002518 	.word	0x20002518
 8015b4c:	0000c350 	.word	0x0000c350

08015b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b086      	sub	sp, #24
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
 8015b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8015b5e:	2300      	movs	r3, #0
 8015b60:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8015b62:	2300      	movs	r3, #0
 8015b64:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8015b66:	e155      	b.n	8015e14 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8015b68:	683b      	ldr	r3, [r7, #0]
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	2101      	movs	r1, #1
 8015b6e:	697a      	ldr	r2, [r7, #20]
 8015b70:	4091      	lsls	r1, r2
 8015b72:	000a      	movs	r2, r1
 8015b74:	4013      	ands	r3, r2
 8015b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d100      	bne.n	8015b80 <HAL_GPIO_Init+0x30>
 8015b7e:	e146      	b.n	8015e0e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015b80:	683b      	ldr	r3, [r7, #0]
 8015b82:	685b      	ldr	r3, [r3, #4]
 8015b84:	2203      	movs	r2, #3
 8015b86:	4013      	ands	r3, r2
 8015b88:	2b01      	cmp	r3, #1
 8015b8a:	d005      	beq.n	8015b98 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8015b8c:	683b      	ldr	r3, [r7, #0]
 8015b8e:	685b      	ldr	r3, [r3, #4]
 8015b90:	2203      	movs	r2, #3
 8015b92:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015b94:	2b02      	cmp	r3, #2
 8015b96:	d130      	bne.n	8015bfa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	689b      	ldr	r3, [r3, #8]
 8015b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8015b9e:	697b      	ldr	r3, [r7, #20]
 8015ba0:	005b      	lsls	r3, r3, #1
 8015ba2:	2203      	movs	r2, #3
 8015ba4:	409a      	lsls	r2, r3
 8015ba6:	0013      	movs	r3, r2
 8015ba8:	43da      	mvns	r2, r3
 8015baa:	693b      	ldr	r3, [r7, #16]
 8015bac:	4013      	ands	r3, r2
 8015bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015bb0:	683b      	ldr	r3, [r7, #0]
 8015bb2:	68da      	ldr	r2, [r3, #12]
 8015bb4:	697b      	ldr	r3, [r7, #20]
 8015bb6:	005b      	lsls	r3, r3, #1
 8015bb8:	409a      	lsls	r2, r3
 8015bba:	0013      	movs	r3, r2
 8015bbc:	693a      	ldr	r2, [r7, #16]
 8015bbe:	4313      	orrs	r3, r2
 8015bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	693a      	ldr	r2, [r7, #16]
 8015bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	685b      	ldr	r3, [r3, #4]
 8015bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015bce:	2201      	movs	r2, #1
 8015bd0:	697b      	ldr	r3, [r7, #20]
 8015bd2:	409a      	lsls	r2, r3
 8015bd4:	0013      	movs	r3, r2
 8015bd6:	43da      	mvns	r2, r3
 8015bd8:	693b      	ldr	r3, [r7, #16]
 8015bda:	4013      	ands	r3, r2
 8015bdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015bde:	683b      	ldr	r3, [r7, #0]
 8015be0:	685b      	ldr	r3, [r3, #4]
 8015be2:	091b      	lsrs	r3, r3, #4
 8015be4:	2201      	movs	r2, #1
 8015be6:	401a      	ands	r2, r3
 8015be8:	697b      	ldr	r3, [r7, #20]
 8015bea:	409a      	lsls	r2, r3
 8015bec:	0013      	movs	r3, r2
 8015bee:	693a      	ldr	r2, [r7, #16]
 8015bf0:	4313      	orrs	r3, r2
 8015bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	693a      	ldr	r2, [r7, #16]
 8015bf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015bfa:	683b      	ldr	r3, [r7, #0]
 8015bfc:	685b      	ldr	r3, [r3, #4]
 8015bfe:	2203      	movs	r2, #3
 8015c00:	4013      	ands	r3, r2
 8015c02:	2b03      	cmp	r3, #3
 8015c04:	d017      	beq.n	8015c36 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	68db      	ldr	r3, [r3, #12]
 8015c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8015c0c:	697b      	ldr	r3, [r7, #20]
 8015c0e:	005b      	lsls	r3, r3, #1
 8015c10:	2203      	movs	r2, #3
 8015c12:	409a      	lsls	r2, r3
 8015c14:	0013      	movs	r3, r2
 8015c16:	43da      	mvns	r2, r3
 8015c18:	693b      	ldr	r3, [r7, #16]
 8015c1a:	4013      	ands	r3, r2
 8015c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015c1e:	683b      	ldr	r3, [r7, #0]
 8015c20:	689a      	ldr	r2, [r3, #8]
 8015c22:	697b      	ldr	r3, [r7, #20]
 8015c24:	005b      	lsls	r3, r3, #1
 8015c26:	409a      	lsls	r2, r3
 8015c28:	0013      	movs	r3, r2
 8015c2a:	693a      	ldr	r2, [r7, #16]
 8015c2c:	4313      	orrs	r3, r2
 8015c2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	693a      	ldr	r2, [r7, #16]
 8015c34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	685b      	ldr	r3, [r3, #4]
 8015c3a:	2203      	movs	r2, #3
 8015c3c:	4013      	ands	r3, r2
 8015c3e:	2b02      	cmp	r3, #2
 8015c40:	d123      	bne.n	8015c8a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015c42:	697b      	ldr	r3, [r7, #20]
 8015c44:	08da      	lsrs	r2, r3, #3
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	3208      	adds	r2, #8
 8015c4a:	0092      	lsls	r2, r2, #2
 8015c4c:	58d3      	ldr	r3, [r2, r3]
 8015c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8015c50:	697b      	ldr	r3, [r7, #20]
 8015c52:	2207      	movs	r2, #7
 8015c54:	4013      	ands	r3, r2
 8015c56:	009b      	lsls	r3, r3, #2
 8015c58:	220f      	movs	r2, #15
 8015c5a:	409a      	lsls	r2, r3
 8015c5c:	0013      	movs	r3, r2
 8015c5e:	43da      	mvns	r2, r3
 8015c60:	693b      	ldr	r3, [r7, #16]
 8015c62:	4013      	ands	r3, r2
 8015c64:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8015c66:	683b      	ldr	r3, [r7, #0]
 8015c68:	691a      	ldr	r2, [r3, #16]
 8015c6a:	697b      	ldr	r3, [r7, #20]
 8015c6c:	2107      	movs	r1, #7
 8015c6e:	400b      	ands	r3, r1
 8015c70:	009b      	lsls	r3, r3, #2
 8015c72:	409a      	lsls	r2, r3
 8015c74:	0013      	movs	r3, r2
 8015c76:	693a      	ldr	r2, [r7, #16]
 8015c78:	4313      	orrs	r3, r2
 8015c7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8015c7c:	697b      	ldr	r3, [r7, #20]
 8015c7e:	08da      	lsrs	r2, r3, #3
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	3208      	adds	r2, #8
 8015c84:	0092      	lsls	r2, r2, #2
 8015c86:	6939      	ldr	r1, [r7, #16]
 8015c88:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8015c90:	697b      	ldr	r3, [r7, #20]
 8015c92:	005b      	lsls	r3, r3, #1
 8015c94:	2203      	movs	r2, #3
 8015c96:	409a      	lsls	r2, r3
 8015c98:	0013      	movs	r3, r2
 8015c9a:	43da      	mvns	r2, r3
 8015c9c:	693b      	ldr	r3, [r7, #16]
 8015c9e:	4013      	ands	r3, r2
 8015ca0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015ca2:	683b      	ldr	r3, [r7, #0]
 8015ca4:	685b      	ldr	r3, [r3, #4]
 8015ca6:	2203      	movs	r2, #3
 8015ca8:	401a      	ands	r2, r3
 8015caa:	697b      	ldr	r3, [r7, #20]
 8015cac:	005b      	lsls	r3, r3, #1
 8015cae:	409a      	lsls	r2, r3
 8015cb0:	0013      	movs	r3, r2
 8015cb2:	693a      	ldr	r2, [r7, #16]
 8015cb4:	4313      	orrs	r3, r2
 8015cb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	693a      	ldr	r2, [r7, #16]
 8015cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015cbe:	683b      	ldr	r3, [r7, #0]
 8015cc0:	685a      	ldr	r2, [r3, #4]
 8015cc2:	23c0      	movs	r3, #192	@ 0xc0
 8015cc4:	029b      	lsls	r3, r3, #10
 8015cc6:	4013      	ands	r3, r2
 8015cc8:	d100      	bne.n	8015ccc <HAL_GPIO_Init+0x17c>
 8015cca:	e0a0      	b.n	8015e0e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015ccc:	4b57      	ldr	r3, [pc, #348]	@ (8015e2c <HAL_GPIO_Init+0x2dc>)
 8015cce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015cd0:	4b56      	ldr	r3, [pc, #344]	@ (8015e2c <HAL_GPIO_Init+0x2dc>)
 8015cd2:	2101      	movs	r1, #1
 8015cd4:	430a      	orrs	r2, r1
 8015cd6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8015cd8:	4a55      	ldr	r2, [pc, #340]	@ (8015e30 <HAL_GPIO_Init+0x2e0>)
 8015cda:	697b      	ldr	r3, [r7, #20]
 8015cdc:	089b      	lsrs	r3, r3, #2
 8015cde:	3302      	adds	r3, #2
 8015ce0:	009b      	lsls	r3, r3, #2
 8015ce2:	589b      	ldr	r3, [r3, r2]
 8015ce4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8015ce6:	697b      	ldr	r3, [r7, #20]
 8015ce8:	2203      	movs	r2, #3
 8015cea:	4013      	ands	r3, r2
 8015cec:	009b      	lsls	r3, r3, #2
 8015cee:	220f      	movs	r2, #15
 8015cf0:	409a      	lsls	r2, r3
 8015cf2:	0013      	movs	r3, r2
 8015cf4:	43da      	mvns	r2, r3
 8015cf6:	693b      	ldr	r3, [r7, #16]
 8015cf8:	4013      	ands	r3, r2
 8015cfa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8015cfc:	687a      	ldr	r2, [r7, #4]
 8015cfe:	23a0      	movs	r3, #160	@ 0xa0
 8015d00:	05db      	lsls	r3, r3, #23
 8015d02:	429a      	cmp	r2, r3
 8015d04:	d01f      	beq.n	8015d46 <HAL_GPIO_Init+0x1f6>
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	4a4a      	ldr	r2, [pc, #296]	@ (8015e34 <HAL_GPIO_Init+0x2e4>)
 8015d0a:	4293      	cmp	r3, r2
 8015d0c:	d019      	beq.n	8015d42 <HAL_GPIO_Init+0x1f2>
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	4a49      	ldr	r2, [pc, #292]	@ (8015e38 <HAL_GPIO_Init+0x2e8>)
 8015d12:	4293      	cmp	r3, r2
 8015d14:	d013      	beq.n	8015d3e <HAL_GPIO_Init+0x1ee>
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	4a48      	ldr	r2, [pc, #288]	@ (8015e3c <HAL_GPIO_Init+0x2ec>)
 8015d1a:	4293      	cmp	r3, r2
 8015d1c:	d00d      	beq.n	8015d3a <HAL_GPIO_Init+0x1ea>
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	4a47      	ldr	r2, [pc, #284]	@ (8015e40 <HAL_GPIO_Init+0x2f0>)
 8015d22:	4293      	cmp	r3, r2
 8015d24:	d007      	beq.n	8015d36 <HAL_GPIO_Init+0x1e6>
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	4a46      	ldr	r2, [pc, #280]	@ (8015e44 <HAL_GPIO_Init+0x2f4>)
 8015d2a:	4293      	cmp	r3, r2
 8015d2c:	d101      	bne.n	8015d32 <HAL_GPIO_Init+0x1e2>
 8015d2e:	2305      	movs	r3, #5
 8015d30:	e00a      	b.n	8015d48 <HAL_GPIO_Init+0x1f8>
 8015d32:	2306      	movs	r3, #6
 8015d34:	e008      	b.n	8015d48 <HAL_GPIO_Init+0x1f8>
 8015d36:	2304      	movs	r3, #4
 8015d38:	e006      	b.n	8015d48 <HAL_GPIO_Init+0x1f8>
 8015d3a:	2303      	movs	r3, #3
 8015d3c:	e004      	b.n	8015d48 <HAL_GPIO_Init+0x1f8>
 8015d3e:	2302      	movs	r3, #2
 8015d40:	e002      	b.n	8015d48 <HAL_GPIO_Init+0x1f8>
 8015d42:	2301      	movs	r3, #1
 8015d44:	e000      	b.n	8015d48 <HAL_GPIO_Init+0x1f8>
 8015d46:	2300      	movs	r3, #0
 8015d48:	697a      	ldr	r2, [r7, #20]
 8015d4a:	2103      	movs	r1, #3
 8015d4c:	400a      	ands	r2, r1
 8015d4e:	0092      	lsls	r2, r2, #2
 8015d50:	4093      	lsls	r3, r2
 8015d52:	693a      	ldr	r2, [r7, #16]
 8015d54:	4313      	orrs	r3, r2
 8015d56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015d58:	4935      	ldr	r1, [pc, #212]	@ (8015e30 <HAL_GPIO_Init+0x2e0>)
 8015d5a:	697b      	ldr	r3, [r7, #20]
 8015d5c:	089b      	lsrs	r3, r3, #2
 8015d5e:	3302      	adds	r3, #2
 8015d60:	009b      	lsls	r3, r3, #2
 8015d62:	693a      	ldr	r2, [r7, #16]
 8015d64:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015d66:	4b38      	ldr	r3, [pc, #224]	@ (8015e48 <HAL_GPIO_Init+0x2f8>)
 8015d68:	689b      	ldr	r3, [r3, #8]
 8015d6a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	43da      	mvns	r2, r3
 8015d70:	693b      	ldr	r3, [r7, #16]
 8015d72:	4013      	ands	r3, r2
 8015d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015d76:	683b      	ldr	r3, [r7, #0]
 8015d78:	685a      	ldr	r2, [r3, #4]
 8015d7a:	2380      	movs	r3, #128	@ 0x80
 8015d7c:	035b      	lsls	r3, r3, #13
 8015d7e:	4013      	ands	r3, r2
 8015d80:	d003      	beq.n	8015d8a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8015d82:	693a      	ldr	r2, [r7, #16]
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	4313      	orrs	r3, r2
 8015d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8015d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8015e48 <HAL_GPIO_Init+0x2f8>)
 8015d8c:	693a      	ldr	r2, [r7, #16]
 8015d8e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8015d90:	4b2d      	ldr	r3, [pc, #180]	@ (8015e48 <HAL_GPIO_Init+0x2f8>)
 8015d92:	68db      	ldr	r3, [r3, #12]
 8015d94:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	43da      	mvns	r2, r3
 8015d9a:	693b      	ldr	r3, [r7, #16]
 8015d9c:	4013      	ands	r3, r2
 8015d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015da0:	683b      	ldr	r3, [r7, #0]
 8015da2:	685a      	ldr	r2, [r3, #4]
 8015da4:	2380      	movs	r3, #128	@ 0x80
 8015da6:	039b      	lsls	r3, r3, #14
 8015da8:	4013      	ands	r3, r2
 8015daa:	d003      	beq.n	8015db4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8015dac:	693a      	ldr	r2, [r7, #16]
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	4313      	orrs	r3, r2
 8015db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8015db4:	4b24      	ldr	r3, [pc, #144]	@ (8015e48 <HAL_GPIO_Init+0x2f8>)
 8015db6:	693a      	ldr	r2, [r7, #16]
 8015db8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8015dba:	4b23      	ldr	r3, [pc, #140]	@ (8015e48 <HAL_GPIO_Init+0x2f8>)
 8015dbc:	685b      	ldr	r3, [r3, #4]
 8015dbe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	43da      	mvns	r2, r3
 8015dc4:	693b      	ldr	r3, [r7, #16]
 8015dc6:	4013      	ands	r3, r2
 8015dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015dca:	683b      	ldr	r3, [r7, #0]
 8015dcc:	685a      	ldr	r2, [r3, #4]
 8015dce:	2380      	movs	r3, #128	@ 0x80
 8015dd0:	029b      	lsls	r3, r3, #10
 8015dd2:	4013      	ands	r3, r2
 8015dd4:	d003      	beq.n	8015dde <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8015dd6:	693a      	ldr	r2, [r7, #16]
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	4313      	orrs	r3, r2
 8015ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8015dde:	4b1a      	ldr	r3, [pc, #104]	@ (8015e48 <HAL_GPIO_Init+0x2f8>)
 8015de0:	693a      	ldr	r2, [r7, #16]
 8015de2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015de4:	4b18      	ldr	r3, [pc, #96]	@ (8015e48 <HAL_GPIO_Init+0x2f8>)
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	43da      	mvns	r2, r3
 8015dee:	693b      	ldr	r3, [r7, #16]
 8015df0:	4013      	ands	r3, r2
 8015df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015df4:	683b      	ldr	r3, [r7, #0]
 8015df6:	685a      	ldr	r2, [r3, #4]
 8015df8:	2380      	movs	r3, #128	@ 0x80
 8015dfa:	025b      	lsls	r3, r3, #9
 8015dfc:	4013      	ands	r3, r2
 8015dfe:	d003      	beq.n	8015e08 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8015e00:	693a      	ldr	r2, [r7, #16]
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	4313      	orrs	r3, r2
 8015e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8015e08:	4b0f      	ldr	r3, [pc, #60]	@ (8015e48 <HAL_GPIO_Init+0x2f8>)
 8015e0a:	693a      	ldr	r2, [r7, #16]
 8015e0c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8015e0e:	697b      	ldr	r3, [r7, #20]
 8015e10:	3301      	adds	r3, #1
 8015e12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	681a      	ldr	r2, [r3, #0]
 8015e18:	697b      	ldr	r3, [r7, #20]
 8015e1a:	40da      	lsrs	r2, r3
 8015e1c:	1e13      	subs	r3, r2, #0
 8015e1e:	d000      	beq.n	8015e22 <HAL_GPIO_Init+0x2d2>
 8015e20:	e6a2      	b.n	8015b68 <HAL_GPIO_Init+0x18>
  }
}
 8015e22:	46c0      	nop			@ (mov r8, r8)
 8015e24:	46c0      	nop			@ (mov r8, r8)
 8015e26:	46bd      	mov	sp, r7
 8015e28:	b006      	add	sp, #24
 8015e2a:	bd80      	pop	{r7, pc}
 8015e2c:	40021000 	.word	0x40021000
 8015e30:	40010000 	.word	0x40010000
 8015e34:	50000400 	.word	0x50000400
 8015e38:	50000800 	.word	0x50000800
 8015e3c:	50000c00 	.word	0x50000c00
 8015e40:	50001000 	.word	0x50001000
 8015e44:	50001c00 	.word	0x50001c00
 8015e48:	40010400 	.word	0x40010400

08015e4c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b084      	sub	sp, #16
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
 8015e54:	000a      	movs	r2, r1
 8015e56:	1cbb      	adds	r3, r7, #2
 8015e58:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	691b      	ldr	r3, [r3, #16]
 8015e5e:	1cba      	adds	r2, r7, #2
 8015e60:	8812      	ldrh	r2, [r2, #0]
 8015e62:	4013      	ands	r3, r2
 8015e64:	d004      	beq.n	8015e70 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8015e66:	230f      	movs	r3, #15
 8015e68:	18fb      	adds	r3, r7, r3
 8015e6a:	2201      	movs	r2, #1
 8015e6c:	701a      	strb	r2, [r3, #0]
 8015e6e:	e003      	b.n	8015e78 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015e70:	230f      	movs	r3, #15
 8015e72:	18fb      	adds	r3, r7, r3
 8015e74:	2200      	movs	r2, #0
 8015e76:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8015e78:	230f      	movs	r3, #15
 8015e7a:	18fb      	adds	r3, r7, r3
 8015e7c:	781b      	ldrb	r3, [r3, #0]
}
 8015e7e:	0018      	movs	r0, r3
 8015e80:	46bd      	mov	sp, r7
 8015e82:	b004      	add	sp, #16
 8015e84:	bd80      	pop	{r7, pc}

08015e86 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015e86:	b580      	push	{r7, lr}
 8015e88:	b082      	sub	sp, #8
 8015e8a:	af00      	add	r7, sp, #0
 8015e8c:	6078      	str	r0, [r7, #4]
 8015e8e:	0008      	movs	r0, r1
 8015e90:	0011      	movs	r1, r2
 8015e92:	1cbb      	adds	r3, r7, #2
 8015e94:	1c02      	adds	r2, r0, #0
 8015e96:	801a      	strh	r2, [r3, #0]
 8015e98:	1c7b      	adds	r3, r7, #1
 8015e9a:	1c0a      	adds	r2, r1, #0
 8015e9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8015e9e:	1c7b      	adds	r3, r7, #1
 8015ea0:	781b      	ldrb	r3, [r3, #0]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d004      	beq.n	8015eb0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015ea6:	1cbb      	adds	r3, r7, #2
 8015ea8:	881a      	ldrh	r2, [r3, #0]
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8015eae:	e003      	b.n	8015eb8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8015eb0:	1cbb      	adds	r3, r7, #2
 8015eb2:	881a      	ldrh	r2, [r3, #0]
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8015eb8:	46c0      	nop			@ (mov r8, r8)
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	b002      	add	sp, #8
 8015ebe:	bd80      	pop	{r7, pc}

08015ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b082      	sub	sp, #8
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	0002      	movs	r2, r0
 8015ec8:	1dbb      	adds	r3, r7, #6
 8015eca:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8015ecc:	4b09      	ldr	r3, [pc, #36]	@ (8015ef4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8015ece:	695b      	ldr	r3, [r3, #20]
 8015ed0:	1dba      	adds	r2, r7, #6
 8015ed2:	8812      	ldrh	r2, [r2, #0]
 8015ed4:	4013      	ands	r3, r2
 8015ed6:	d008      	beq.n	8015eea <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8015ed8:	4b06      	ldr	r3, [pc, #24]	@ (8015ef4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8015eda:	1dba      	adds	r2, r7, #6
 8015edc:	8812      	ldrh	r2, [r2, #0]
 8015ede:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8015ee0:	1dbb      	adds	r3, r7, #6
 8015ee2:	881b      	ldrh	r3, [r3, #0]
 8015ee4:	0018      	movs	r0, r3
 8015ee6:	f7f7 fab7 	bl	800d458 <HAL_GPIO_EXTI_Callback>
  }
}
 8015eea:	46c0      	nop			@ (mov r8, r8)
 8015eec:	46bd      	mov	sp, r7
 8015eee:	b002      	add	sp, #8
 8015ef0:	bd80      	pop	{r7, pc}
 8015ef2:	46c0      	nop			@ (mov r8, r8)
 8015ef4:	40010400 	.word	0x40010400

08015ef8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b082      	sub	sp, #8
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d101      	bne.n	8015f0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015f06:	2301      	movs	r3, #1
 8015f08:	e082      	b.n	8016010 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	2241      	movs	r2, #65	@ 0x41
 8015f0e:	5c9b      	ldrb	r3, [r3, r2]
 8015f10:	b2db      	uxtb	r3, r3
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d107      	bne.n	8015f26 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	2240      	movs	r2, #64	@ 0x40
 8015f1a:	2100      	movs	r1, #0
 8015f1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	0018      	movs	r0, r3
 8015f22:	f7f6 fcb9 	bl	800c898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	2241      	movs	r2, #65	@ 0x41
 8015f2a:	2124      	movs	r1, #36	@ 0x24
 8015f2c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	681a      	ldr	r2, [r3, #0]
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	2101      	movs	r1, #1
 8015f3a:	438a      	bics	r2, r1
 8015f3c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	685a      	ldr	r2, [r3, #4]
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	4934      	ldr	r1, [pc, #208]	@ (8016018 <HAL_I2C_Init+0x120>)
 8015f48:	400a      	ands	r2, r1
 8015f4a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	689a      	ldr	r2, [r3, #8]
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	4931      	ldr	r1, [pc, #196]	@ (801601c <HAL_I2C_Init+0x124>)
 8015f58:	400a      	ands	r2, r1
 8015f5a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	68db      	ldr	r3, [r3, #12]
 8015f60:	2b01      	cmp	r3, #1
 8015f62:	d108      	bne.n	8015f76 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	689a      	ldr	r2, [r3, #8]
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	2180      	movs	r1, #128	@ 0x80
 8015f6e:	0209      	lsls	r1, r1, #8
 8015f70:	430a      	orrs	r2, r1
 8015f72:	609a      	str	r2, [r3, #8]
 8015f74:	e007      	b.n	8015f86 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	689a      	ldr	r2, [r3, #8]
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	2184      	movs	r1, #132	@ 0x84
 8015f80:	0209      	lsls	r1, r1, #8
 8015f82:	430a      	orrs	r2, r1
 8015f84:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	68db      	ldr	r3, [r3, #12]
 8015f8a:	2b02      	cmp	r3, #2
 8015f8c:	d104      	bne.n	8015f98 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	2280      	movs	r2, #128	@ 0x80
 8015f94:	0112      	lsls	r2, r2, #4
 8015f96:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	685a      	ldr	r2, [r3, #4]
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	491f      	ldr	r1, [pc, #124]	@ (8016020 <HAL_I2C_Init+0x128>)
 8015fa4:	430a      	orrs	r2, r1
 8015fa6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	68da      	ldr	r2, [r3, #12]
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	491a      	ldr	r1, [pc, #104]	@ (801601c <HAL_I2C_Init+0x124>)
 8015fb4:	400a      	ands	r2, r1
 8015fb6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	691a      	ldr	r2, [r3, #16]
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	695b      	ldr	r3, [r3, #20]
 8015fc0:	431a      	orrs	r2, r3
 8015fc2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	699b      	ldr	r3, [r3, #24]
 8015fc8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	430a      	orrs	r2, r1
 8015fd0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	69d9      	ldr	r1, [r3, #28]
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	6a1a      	ldr	r2, [r3, #32]
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	430a      	orrs	r2, r1
 8015fe0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	681a      	ldr	r2, [r3, #0]
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	2101      	movs	r1, #1
 8015fee:	430a      	orrs	r2, r1
 8015ff0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	2241      	movs	r2, #65	@ 0x41
 8015ffc:	2120      	movs	r1, #32
 8015ffe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	2200      	movs	r2, #0
 8016004:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	2242      	movs	r2, #66	@ 0x42
 801600a:	2100      	movs	r1, #0
 801600c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801600e:	2300      	movs	r3, #0
}
 8016010:	0018      	movs	r0, r3
 8016012:	46bd      	mov	sp, r7
 8016014:	b002      	add	sp, #8
 8016016:	bd80      	pop	{r7, pc}
 8016018:	f0ffffff 	.word	0xf0ffffff
 801601c:	ffff7fff 	.word	0xffff7fff
 8016020:	02008000 	.word	0x02008000

08016024 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8016024:	b590      	push	{r4, r7, lr}
 8016026:	b089      	sub	sp, #36	@ 0x24
 8016028:	af02      	add	r7, sp, #8
 801602a:	60f8      	str	r0, [r7, #12]
 801602c:	0008      	movs	r0, r1
 801602e:	607a      	str	r2, [r7, #4]
 8016030:	0019      	movs	r1, r3
 8016032:	230a      	movs	r3, #10
 8016034:	18fb      	adds	r3, r7, r3
 8016036:	1c02      	adds	r2, r0, #0
 8016038:	801a      	strh	r2, [r3, #0]
 801603a:	2308      	movs	r3, #8
 801603c:	18fb      	adds	r3, r7, r3
 801603e:	1c0a      	adds	r2, r1, #0
 8016040:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	2241      	movs	r2, #65	@ 0x41
 8016046:	5c9b      	ldrb	r3, [r3, r2]
 8016048:	b2db      	uxtb	r3, r3
 801604a:	2b20      	cmp	r3, #32
 801604c:	d000      	beq.n	8016050 <HAL_I2C_Master_Transmit+0x2c>
 801604e:	e0e7      	b.n	8016220 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	2240      	movs	r2, #64	@ 0x40
 8016054:	5c9b      	ldrb	r3, [r3, r2]
 8016056:	2b01      	cmp	r3, #1
 8016058:	d101      	bne.n	801605e <HAL_I2C_Master_Transmit+0x3a>
 801605a:	2302      	movs	r3, #2
 801605c:	e0e1      	b.n	8016222 <HAL_I2C_Master_Transmit+0x1fe>
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	2240      	movs	r2, #64	@ 0x40
 8016062:	2101      	movs	r1, #1
 8016064:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016066:	f7fe fca7 	bl	80149b8 <HAL_GetTick>
 801606a:	0003      	movs	r3, r0
 801606c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801606e:	2380      	movs	r3, #128	@ 0x80
 8016070:	0219      	lsls	r1, r3, #8
 8016072:	68f8      	ldr	r0, [r7, #12]
 8016074:	697b      	ldr	r3, [r7, #20]
 8016076:	9300      	str	r3, [sp, #0]
 8016078:	2319      	movs	r3, #25
 801607a:	2201      	movs	r2, #1
 801607c:	f002 fb34 	bl	80186e8 <I2C_WaitOnFlagUntilTimeout>
 8016080:	1e03      	subs	r3, r0, #0
 8016082:	d001      	beq.n	8016088 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8016084:	2301      	movs	r3, #1
 8016086:	e0cc      	b.n	8016222 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	2241      	movs	r2, #65	@ 0x41
 801608c:	2121      	movs	r1, #33	@ 0x21
 801608e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	2242      	movs	r2, #66	@ 0x42
 8016094:	2110      	movs	r1, #16
 8016096:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	2200      	movs	r2, #0
 801609c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	687a      	ldr	r2, [r7, #4]
 80160a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	2208      	movs	r2, #8
 80160a8:	18ba      	adds	r2, r7, r2
 80160aa:	8812      	ldrh	r2, [r2, #0]
 80160ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	2200      	movs	r2, #0
 80160b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160b8:	b29b      	uxth	r3, r3
 80160ba:	2bff      	cmp	r3, #255	@ 0xff
 80160bc:	d911      	bls.n	80160e2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	22ff      	movs	r2, #255	@ 0xff
 80160c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160c8:	b2da      	uxtb	r2, r3
 80160ca:	2380      	movs	r3, #128	@ 0x80
 80160cc:	045c      	lsls	r4, r3, #17
 80160ce:	230a      	movs	r3, #10
 80160d0:	18fb      	adds	r3, r7, r3
 80160d2:	8819      	ldrh	r1, [r3, #0]
 80160d4:	68f8      	ldr	r0, [r7, #12]
 80160d6:	4b55      	ldr	r3, [pc, #340]	@ (801622c <HAL_I2C_Master_Transmit+0x208>)
 80160d8:	9300      	str	r3, [sp, #0]
 80160da:	0023      	movs	r3, r4
 80160dc:	f002 fd56 	bl	8018b8c <I2C_TransferConfig>
 80160e0:	e075      	b.n	80161ce <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160e6:	b29a      	uxth	r2, r3
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160f0:	b2da      	uxtb	r2, r3
 80160f2:	2380      	movs	r3, #128	@ 0x80
 80160f4:	049c      	lsls	r4, r3, #18
 80160f6:	230a      	movs	r3, #10
 80160f8:	18fb      	adds	r3, r7, r3
 80160fa:	8819      	ldrh	r1, [r3, #0]
 80160fc:	68f8      	ldr	r0, [r7, #12]
 80160fe:	4b4b      	ldr	r3, [pc, #300]	@ (801622c <HAL_I2C_Master_Transmit+0x208>)
 8016100:	9300      	str	r3, [sp, #0]
 8016102:	0023      	movs	r3, r4
 8016104:	f002 fd42 	bl	8018b8c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8016108:	e061      	b.n	80161ce <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801610a:	697a      	ldr	r2, [r7, #20]
 801610c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	0018      	movs	r0, r3
 8016112:	f002 fb37 	bl	8018784 <I2C_WaitOnTXISFlagUntilTimeout>
 8016116:	1e03      	subs	r3, r0, #0
 8016118:	d001      	beq.n	801611e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 801611a:	2301      	movs	r3, #1
 801611c:	e081      	b.n	8016222 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016122:	781a      	ldrb	r2, [r3, #0]
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801612e:	1c5a      	adds	r2, r3, #1
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016138:	b29b      	uxth	r3, r3
 801613a:	3b01      	subs	r3, #1
 801613c:	b29a      	uxth	r2, r3
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016146:	3b01      	subs	r3, #1
 8016148:	b29a      	uxth	r2, r3
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016152:	b29b      	uxth	r3, r3
 8016154:	2b00      	cmp	r3, #0
 8016156:	d03a      	beq.n	80161ce <HAL_I2C_Master_Transmit+0x1aa>
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801615c:	2b00      	cmp	r3, #0
 801615e:	d136      	bne.n	80161ce <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016160:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016162:	68f8      	ldr	r0, [r7, #12]
 8016164:	697b      	ldr	r3, [r7, #20]
 8016166:	9300      	str	r3, [sp, #0]
 8016168:	0013      	movs	r3, r2
 801616a:	2200      	movs	r2, #0
 801616c:	2180      	movs	r1, #128	@ 0x80
 801616e:	f002 fabb 	bl	80186e8 <I2C_WaitOnFlagUntilTimeout>
 8016172:	1e03      	subs	r3, r0, #0
 8016174:	d001      	beq.n	801617a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8016176:	2301      	movs	r3, #1
 8016178:	e053      	b.n	8016222 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801617e:	b29b      	uxth	r3, r3
 8016180:	2bff      	cmp	r3, #255	@ 0xff
 8016182:	d911      	bls.n	80161a8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	22ff      	movs	r2, #255	@ 0xff
 8016188:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801618e:	b2da      	uxtb	r2, r3
 8016190:	2380      	movs	r3, #128	@ 0x80
 8016192:	045c      	lsls	r4, r3, #17
 8016194:	230a      	movs	r3, #10
 8016196:	18fb      	adds	r3, r7, r3
 8016198:	8819      	ldrh	r1, [r3, #0]
 801619a:	68f8      	ldr	r0, [r7, #12]
 801619c:	2300      	movs	r3, #0
 801619e:	9300      	str	r3, [sp, #0]
 80161a0:	0023      	movs	r3, r4
 80161a2:	f002 fcf3 	bl	8018b8c <I2C_TransferConfig>
 80161a6:	e012      	b.n	80161ce <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80161ac:	b29a      	uxth	r2, r3
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80161b6:	b2da      	uxtb	r2, r3
 80161b8:	2380      	movs	r3, #128	@ 0x80
 80161ba:	049c      	lsls	r4, r3, #18
 80161bc:	230a      	movs	r3, #10
 80161be:	18fb      	adds	r3, r7, r3
 80161c0:	8819      	ldrh	r1, [r3, #0]
 80161c2:	68f8      	ldr	r0, [r7, #12]
 80161c4:	2300      	movs	r3, #0
 80161c6:	9300      	str	r3, [sp, #0]
 80161c8:	0023      	movs	r3, r4
 80161ca:	f002 fcdf 	bl	8018b8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80161d2:	b29b      	uxth	r3, r3
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d198      	bne.n	801610a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80161d8:	697a      	ldr	r2, [r7, #20]
 80161da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	0018      	movs	r0, r3
 80161e0:	f002 fb16 	bl	8018810 <I2C_WaitOnSTOPFlagUntilTimeout>
 80161e4:	1e03      	subs	r3, r0, #0
 80161e6:	d001      	beq.n	80161ec <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80161e8:	2301      	movs	r3, #1
 80161ea:	e01a      	b.n	8016222 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	2220      	movs	r2, #32
 80161f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	685a      	ldr	r2, [r3, #4]
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	490c      	ldr	r1, [pc, #48]	@ (8016230 <HAL_I2C_Master_Transmit+0x20c>)
 8016200:	400a      	ands	r2, r1
 8016202:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	2241      	movs	r2, #65	@ 0x41
 8016208:	2120      	movs	r1, #32
 801620a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	2242      	movs	r2, #66	@ 0x42
 8016210:	2100      	movs	r1, #0
 8016212:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	2240      	movs	r2, #64	@ 0x40
 8016218:	2100      	movs	r1, #0
 801621a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801621c:	2300      	movs	r3, #0
 801621e:	e000      	b.n	8016222 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8016220:	2302      	movs	r3, #2
  }
}
 8016222:	0018      	movs	r0, r3
 8016224:	46bd      	mov	sp, r7
 8016226:	b007      	add	sp, #28
 8016228:	bd90      	pop	{r4, r7, pc}
 801622a:	46c0      	nop			@ (mov r8, r8)
 801622c:	80002000 	.word	0x80002000
 8016230:	fe00e800 	.word	0xfe00e800

08016234 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8016234:	b590      	push	{r4, r7, lr}
 8016236:	b089      	sub	sp, #36	@ 0x24
 8016238:	af02      	add	r7, sp, #8
 801623a:	60f8      	str	r0, [r7, #12]
 801623c:	0008      	movs	r0, r1
 801623e:	607a      	str	r2, [r7, #4]
 8016240:	0019      	movs	r1, r3
 8016242:	230a      	movs	r3, #10
 8016244:	18fb      	adds	r3, r7, r3
 8016246:	1c02      	adds	r2, r0, #0
 8016248:	801a      	strh	r2, [r3, #0]
 801624a:	2308      	movs	r3, #8
 801624c:	18fb      	adds	r3, r7, r3
 801624e:	1c0a      	adds	r2, r1, #0
 8016250:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	2241      	movs	r2, #65	@ 0x41
 8016256:	5c9b      	ldrb	r3, [r3, r2]
 8016258:	b2db      	uxtb	r3, r3
 801625a:	2b20      	cmp	r3, #32
 801625c:	d000      	beq.n	8016260 <HAL_I2C_Master_Receive+0x2c>
 801625e:	e0e8      	b.n	8016432 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	2240      	movs	r2, #64	@ 0x40
 8016264:	5c9b      	ldrb	r3, [r3, r2]
 8016266:	2b01      	cmp	r3, #1
 8016268:	d101      	bne.n	801626e <HAL_I2C_Master_Receive+0x3a>
 801626a:	2302      	movs	r3, #2
 801626c:	e0e2      	b.n	8016434 <HAL_I2C_Master_Receive+0x200>
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	2240      	movs	r2, #64	@ 0x40
 8016272:	2101      	movs	r1, #1
 8016274:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016276:	f7fe fb9f 	bl	80149b8 <HAL_GetTick>
 801627a:	0003      	movs	r3, r0
 801627c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801627e:	2380      	movs	r3, #128	@ 0x80
 8016280:	0219      	lsls	r1, r3, #8
 8016282:	68f8      	ldr	r0, [r7, #12]
 8016284:	697b      	ldr	r3, [r7, #20]
 8016286:	9300      	str	r3, [sp, #0]
 8016288:	2319      	movs	r3, #25
 801628a:	2201      	movs	r2, #1
 801628c:	f002 fa2c 	bl	80186e8 <I2C_WaitOnFlagUntilTimeout>
 8016290:	1e03      	subs	r3, r0, #0
 8016292:	d001      	beq.n	8016298 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8016294:	2301      	movs	r3, #1
 8016296:	e0cd      	b.n	8016434 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	2241      	movs	r2, #65	@ 0x41
 801629c:	2122      	movs	r1, #34	@ 0x22
 801629e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	2242      	movs	r2, #66	@ 0x42
 80162a4:	2110      	movs	r1, #16
 80162a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	2200      	movs	r2, #0
 80162ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	687a      	ldr	r2, [r7, #4]
 80162b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	2208      	movs	r2, #8
 80162b8:	18ba      	adds	r2, r7, r2
 80162ba:	8812      	ldrh	r2, [r2, #0]
 80162bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	2200      	movs	r2, #0
 80162c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162c8:	b29b      	uxth	r3, r3
 80162ca:	2bff      	cmp	r3, #255	@ 0xff
 80162cc:	d911      	bls.n	80162f2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	22ff      	movs	r2, #255	@ 0xff
 80162d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162d8:	b2da      	uxtb	r2, r3
 80162da:	2380      	movs	r3, #128	@ 0x80
 80162dc:	045c      	lsls	r4, r3, #17
 80162de:	230a      	movs	r3, #10
 80162e0:	18fb      	adds	r3, r7, r3
 80162e2:	8819      	ldrh	r1, [r3, #0]
 80162e4:	68f8      	ldr	r0, [r7, #12]
 80162e6:	4b55      	ldr	r3, [pc, #340]	@ (801643c <HAL_I2C_Master_Receive+0x208>)
 80162e8:	9300      	str	r3, [sp, #0]
 80162ea:	0023      	movs	r3, r4
 80162ec:	f002 fc4e 	bl	8018b8c <I2C_TransferConfig>
 80162f0:	e076      	b.n	80163e0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162f6:	b29a      	uxth	r2, r3
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016300:	b2da      	uxtb	r2, r3
 8016302:	2380      	movs	r3, #128	@ 0x80
 8016304:	049c      	lsls	r4, r3, #18
 8016306:	230a      	movs	r3, #10
 8016308:	18fb      	adds	r3, r7, r3
 801630a:	8819      	ldrh	r1, [r3, #0]
 801630c:	68f8      	ldr	r0, [r7, #12]
 801630e:	4b4b      	ldr	r3, [pc, #300]	@ (801643c <HAL_I2C_Master_Receive+0x208>)
 8016310:	9300      	str	r3, [sp, #0]
 8016312:	0023      	movs	r3, r4
 8016314:	f002 fc3a 	bl	8018b8c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8016318:	e062      	b.n	80163e0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801631a:	697a      	ldr	r2, [r7, #20]
 801631c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	0018      	movs	r0, r3
 8016322:	f002 fab9 	bl	8018898 <I2C_WaitOnRXNEFlagUntilTimeout>
 8016326:	1e03      	subs	r3, r0, #0
 8016328:	d001      	beq.n	801632e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 801632a:	2301      	movs	r3, #1
 801632c:	e082      	b.n	8016434 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016338:	b2d2      	uxtb	r2, r2
 801633a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016340:	1c5a      	adds	r2, r3, #1
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801634a:	3b01      	subs	r3, #1
 801634c:	b29a      	uxth	r2, r3
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016356:	b29b      	uxth	r3, r3
 8016358:	3b01      	subs	r3, #1
 801635a:	b29a      	uxth	r2, r3
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016364:	b29b      	uxth	r3, r3
 8016366:	2b00      	cmp	r3, #0
 8016368:	d03a      	beq.n	80163e0 <HAL_I2C_Master_Receive+0x1ac>
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801636e:	2b00      	cmp	r3, #0
 8016370:	d136      	bne.n	80163e0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016374:	68f8      	ldr	r0, [r7, #12]
 8016376:	697b      	ldr	r3, [r7, #20]
 8016378:	9300      	str	r3, [sp, #0]
 801637a:	0013      	movs	r3, r2
 801637c:	2200      	movs	r2, #0
 801637e:	2180      	movs	r1, #128	@ 0x80
 8016380:	f002 f9b2 	bl	80186e8 <I2C_WaitOnFlagUntilTimeout>
 8016384:	1e03      	subs	r3, r0, #0
 8016386:	d001      	beq.n	801638c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8016388:	2301      	movs	r3, #1
 801638a:	e053      	b.n	8016434 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016390:	b29b      	uxth	r3, r3
 8016392:	2bff      	cmp	r3, #255	@ 0xff
 8016394:	d911      	bls.n	80163ba <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	22ff      	movs	r2, #255	@ 0xff
 801639a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80163a0:	b2da      	uxtb	r2, r3
 80163a2:	2380      	movs	r3, #128	@ 0x80
 80163a4:	045c      	lsls	r4, r3, #17
 80163a6:	230a      	movs	r3, #10
 80163a8:	18fb      	adds	r3, r7, r3
 80163aa:	8819      	ldrh	r1, [r3, #0]
 80163ac:	68f8      	ldr	r0, [r7, #12]
 80163ae:	2300      	movs	r3, #0
 80163b0:	9300      	str	r3, [sp, #0]
 80163b2:	0023      	movs	r3, r4
 80163b4:	f002 fbea 	bl	8018b8c <I2C_TransferConfig>
 80163b8:	e012      	b.n	80163e0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80163be:	b29a      	uxth	r2, r3
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80163c8:	b2da      	uxtb	r2, r3
 80163ca:	2380      	movs	r3, #128	@ 0x80
 80163cc:	049c      	lsls	r4, r3, #18
 80163ce:	230a      	movs	r3, #10
 80163d0:	18fb      	adds	r3, r7, r3
 80163d2:	8819      	ldrh	r1, [r3, #0]
 80163d4:	68f8      	ldr	r0, [r7, #12]
 80163d6:	2300      	movs	r3, #0
 80163d8:	9300      	str	r3, [sp, #0]
 80163da:	0023      	movs	r3, r4
 80163dc:	f002 fbd6 	bl	8018b8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80163e4:	b29b      	uxth	r3, r3
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d197      	bne.n	801631a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80163ea:	697a      	ldr	r2, [r7, #20]
 80163ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	0018      	movs	r0, r3
 80163f2:	f002 fa0d 	bl	8018810 <I2C_WaitOnSTOPFlagUntilTimeout>
 80163f6:	1e03      	subs	r3, r0, #0
 80163f8:	d001      	beq.n	80163fe <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80163fa:	2301      	movs	r3, #1
 80163fc:	e01a      	b.n	8016434 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	2220      	movs	r2, #32
 8016404:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	685a      	ldr	r2, [r3, #4]
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	490b      	ldr	r1, [pc, #44]	@ (8016440 <HAL_I2C_Master_Receive+0x20c>)
 8016412:	400a      	ands	r2, r1
 8016414:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	2241      	movs	r2, #65	@ 0x41
 801641a:	2120      	movs	r1, #32
 801641c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	2242      	movs	r2, #66	@ 0x42
 8016422:	2100      	movs	r1, #0
 8016424:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	2240      	movs	r2, #64	@ 0x40
 801642a:	2100      	movs	r1, #0
 801642c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801642e:	2300      	movs	r3, #0
 8016430:	e000      	b.n	8016434 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8016432:	2302      	movs	r3, #2
  }
}
 8016434:	0018      	movs	r0, r3
 8016436:	46bd      	mov	sp, r7
 8016438:	b007      	add	sp, #28
 801643a:	bd90      	pop	{r4, r7, pc}
 801643c:	80002400 	.word	0x80002400
 8016440:	fe00e800 	.word	0xfe00e800

08016444 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8016444:	b5b0      	push	{r4, r5, r7, lr}
 8016446:	b088      	sub	sp, #32
 8016448:	af02      	add	r7, sp, #8
 801644a:	60f8      	str	r0, [r7, #12]
 801644c:	0008      	movs	r0, r1
 801644e:	607a      	str	r2, [r7, #4]
 8016450:	0019      	movs	r1, r3
 8016452:	230a      	movs	r3, #10
 8016454:	18fb      	adds	r3, r7, r3
 8016456:	1c02      	adds	r2, r0, #0
 8016458:	801a      	strh	r2, [r3, #0]
 801645a:	2308      	movs	r3, #8
 801645c:	18fb      	adds	r3, r7, r3
 801645e:	1c0a      	adds	r2, r1, #0
 8016460:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	2241      	movs	r2, #65	@ 0x41
 8016466:	5c9b      	ldrb	r3, [r3, r2]
 8016468:	b2db      	uxtb	r3, r3
 801646a:	2b20      	cmp	r3, #32
 801646c:	d000      	beq.n	8016470 <HAL_I2C_Master_Transmit_DMA+0x2c>
 801646e:	e0dd      	b.n	801662c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	699a      	ldr	r2, [r3, #24]
 8016476:	2380      	movs	r3, #128	@ 0x80
 8016478:	021b      	lsls	r3, r3, #8
 801647a:	401a      	ands	r2, r3
 801647c:	2380      	movs	r3, #128	@ 0x80
 801647e:	021b      	lsls	r3, r3, #8
 8016480:	429a      	cmp	r2, r3
 8016482:	d101      	bne.n	8016488 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8016484:	2302      	movs	r3, #2
 8016486:	e0d2      	b.n	801662e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	2240      	movs	r2, #64	@ 0x40
 801648c:	5c9b      	ldrb	r3, [r3, r2]
 801648e:	2b01      	cmp	r3, #1
 8016490:	d101      	bne.n	8016496 <HAL_I2C_Master_Transmit_DMA+0x52>
 8016492:	2302      	movs	r3, #2
 8016494:	e0cb      	b.n	801662e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	2240      	movs	r2, #64	@ 0x40
 801649a:	2101      	movs	r1, #1
 801649c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	2241      	movs	r2, #65	@ 0x41
 80164a2:	2121      	movs	r1, #33	@ 0x21
 80164a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	2242      	movs	r2, #66	@ 0x42
 80164aa:	2110      	movs	r1, #16
 80164ac:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	2200      	movs	r2, #0
 80164b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	687a      	ldr	r2, [r7, #4]
 80164b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	2208      	movs	r2, #8
 80164be:	18ba      	adds	r2, r7, r2
 80164c0:	8812      	ldrh	r2, [r2, #0]
 80164c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	4a5c      	ldr	r2, [pc, #368]	@ (8016638 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80164c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	4a5b      	ldr	r2, [pc, #364]	@ (801663c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80164ce:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164d4:	b29b      	uxth	r3, r3
 80164d6:	2bff      	cmp	r3, #255	@ 0xff
 80164d8:	d906      	bls.n	80164e8 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	22ff      	movs	r2, #255	@ 0xff
 80164de:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80164e0:	2380      	movs	r3, #128	@ 0x80
 80164e2:	045b      	lsls	r3, r3, #17
 80164e4:	617b      	str	r3, [r7, #20]
 80164e6:	e007      	b.n	80164f8 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164ec:	b29a      	uxth	r2, r3
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80164f2:	2380      	movs	r3, #128	@ 0x80
 80164f4:	049b      	lsls	r3, r3, #18
 80164f6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d100      	bne.n	8016502 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8016500:	e078      	b.n	80165f4 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016506:	2b00      	cmp	r3, #0
 8016508:	d023      	beq.n	8016552 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801650e:	4a4c      	ldr	r2, [pc, #304]	@ (8016640 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8016510:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016516:	4a4b      	ldr	r2, [pc, #300]	@ (8016644 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8016518:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801651e:	2200      	movs	r2, #0
 8016520:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016526:	2200      	movs	r2, #0
 8016528:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801652e:	6879      	ldr	r1, [r7, #4]
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	3328      	adds	r3, #40	@ 0x28
 8016536:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801653c:	2513      	movs	r5, #19
 801653e:	197c      	adds	r4, r7, r5
 8016540:	f7fe ff58 	bl	80153f4 <HAL_DMA_Start_IT>
 8016544:	0003      	movs	r3, r0
 8016546:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8016548:	197b      	adds	r3, r7, r5
 801654a:	781b      	ldrb	r3, [r3, #0]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d13d      	bne.n	80165cc <HAL_I2C_Master_Transmit_DMA+0x188>
 8016550:	e013      	b.n	801657a <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	2241      	movs	r2, #65	@ 0x41
 8016556:	2120      	movs	r1, #32
 8016558:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	2242      	movs	r2, #66	@ 0x42
 801655e:	2100      	movs	r1, #0
 8016560:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016566:	2280      	movs	r2, #128	@ 0x80
 8016568:	431a      	orrs	r2, r3
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	2240      	movs	r2, #64	@ 0x40
 8016572:	2100      	movs	r1, #0
 8016574:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8016576:	2301      	movs	r3, #1
 8016578:	e059      	b.n	801662e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801657e:	b2da      	uxtb	r2, r3
 8016580:	697c      	ldr	r4, [r7, #20]
 8016582:	230a      	movs	r3, #10
 8016584:	18fb      	adds	r3, r7, r3
 8016586:	8819      	ldrh	r1, [r3, #0]
 8016588:	68f8      	ldr	r0, [r7, #12]
 801658a:	4b2f      	ldr	r3, [pc, #188]	@ (8016648 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801658c:	9300      	str	r3, [sp, #0]
 801658e:	0023      	movs	r3, r4
 8016590:	f002 fafc 	bl	8018b8c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016598:	b29a      	uxth	r2, r3
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801659e:	1ad3      	subs	r3, r2, r3
 80165a0:	b29a      	uxth	r2, r3
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	2240      	movs	r2, #64	@ 0x40
 80165aa:	2100      	movs	r1, #0
 80165ac:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	2110      	movs	r1, #16
 80165b2:	0018      	movs	r0, r3
 80165b4:	f002 fb24 	bl	8018c00 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	681a      	ldr	r2, [r3, #0]
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	2180      	movs	r1, #128	@ 0x80
 80165c4:	01c9      	lsls	r1, r1, #7
 80165c6:	430a      	orrs	r2, r1
 80165c8:	601a      	str	r2, [r3, #0]
 80165ca:	e02d      	b.n	8016628 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	2241      	movs	r2, #65	@ 0x41
 80165d0:	2120      	movs	r1, #32
 80165d2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	2242      	movs	r2, #66	@ 0x42
 80165d8:	2100      	movs	r1, #0
 80165da:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80165e0:	2210      	movs	r2, #16
 80165e2:	431a      	orrs	r2, r3
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	2240      	movs	r2, #64	@ 0x40
 80165ec:	2100      	movs	r1, #0
 80165ee:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80165f0:	2301      	movs	r3, #1
 80165f2:	e01c      	b.n	801662e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	4a15      	ldr	r2, [pc, #84]	@ (801664c <HAL_I2C_Master_Transmit_DMA+0x208>)
 80165f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80165fe:	b2da      	uxtb	r2, r3
 8016600:	2380      	movs	r3, #128	@ 0x80
 8016602:	049c      	lsls	r4, r3, #18
 8016604:	230a      	movs	r3, #10
 8016606:	18fb      	adds	r3, r7, r3
 8016608:	8819      	ldrh	r1, [r3, #0]
 801660a:	68f8      	ldr	r0, [r7, #12]
 801660c:	4b0e      	ldr	r3, [pc, #56]	@ (8016648 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801660e:	9300      	str	r3, [sp, #0]
 8016610:	0023      	movs	r3, r4
 8016612:	f002 fabb 	bl	8018b8c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	2240      	movs	r2, #64	@ 0x40
 801661a:	2100      	movs	r1, #0
 801661c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	2101      	movs	r1, #1
 8016622:	0018      	movs	r0, r3
 8016624:	f002 faec 	bl	8018c00 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8016628:	2300      	movs	r3, #0
 801662a:	e000      	b.n	801662e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801662c:	2302      	movs	r3, #2
  }
}
 801662e:	0018      	movs	r0, r3
 8016630:	46bd      	mov	sp, r7
 8016632:	b006      	add	sp, #24
 8016634:	bdb0      	pop	{r4, r5, r7, pc}
 8016636:	46c0      	nop			@ (mov r8, r8)
 8016638:	ffff0000 	.word	0xffff0000
 801663c:	08017375 	.word	0x08017375
 8016640:	08018539 	.word	0x08018539
 8016644:	08018679 	.word	0x08018679
 8016648:	80002000 	.word	0x80002000
 801664c:	08016ec9 	.word	0x08016ec9

08016650 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8016650:	b5b0      	push	{r4, r5, r7, lr}
 8016652:	b088      	sub	sp, #32
 8016654:	af02      	add	r7, sp, #8
 8016656:	60f8      	str	r0, [r7, #12]
 8016658:	0008      	movs	r0, r1
 801665a:	607a      	str	r2, [r7, #4]
 801665c:	0019      	movs	r1, r3
 801665e:	230a      	movs	r3, #10
 8016660:	18fb      	adds	r3, r7, r3
 8016662:	1c02      	adds	r2, r0, #0
 8016664:	801a      	strh	r2, [r3, #0]
 8016666:	2308      	movs	r3, #8
 8016668:	18fb      	adds	r3, r7, r3
 801666a:	1c0a      	adds	r2, r1, #0
 801666c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	2241      	movs	r2, #65	@ 0x41
 8016672:	5c9b      	ldrb	r3, [r3, r2]
 8016674:	b2db      	uxtb	r3, r3
 8016676:	2b20      	cmp	r3, #32
 8016678:	d000      	beq.n	801667c <HAL_I2C_Master_Receive_DMA+0x2c>
 801667a:	e0dd      	b.n	8016838 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	699a      	ldr	r2, [r3, #24]
 8016682:	2380      	movs	r3, #128	@ 0x80
 8016684:	021b      	lsls	r3, r3, #8
 8016686:	401a      	ands	r2, r3
 8016688:	2380      	movs	r3, #128	@ 0x80
 801668a:	021b      	lsls	r3, r3, #8
 801668c:	429a      	cmp	r2, r3
 801668e:	d101      	bne.n	8016694 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8016690:	2302      	movs	r3, #2
 8016692:	e0d2      	b.n	801683a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	2240      	movs	r2, #64	@ 0x40
 8016698:	5c9b      	ldrb	r3, [r3, r2]
 801669a:	2b01      	cmp	r3, #1
 801669c:	d101      	bne.n	80166a2 <HAL_I2C_Master_Receive_DMA+0x52>
 801669e:	2302      	movs	r3, #2
 80166a0:	e0cb      	b.n	801683a <HAL_I2C_Master_Receive_DMA+0x1ea>
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	2240      	movs	r2, #64	@ 0x40
 80166a6:	2101      	movs	r1, #1
 80166a8:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	2241      	movs	r2, #65	@ 0x41
 80166ae:	2122      	movs	r1, #34	@ 0x22
 80166b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	2242      	movs	r2, #66	@ 0x42
 80166b6:	2110      	movs	r1, #16
 80166b8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	2200      	movs	r2, #0
 80166be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	687a      	ldr	r2, [r7, #4]
 80166c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	2208      	movs	r2, #8
 80166ca:	18ba      	adds	r2, r7, r2
 80166cc:	8812      	ldrh	r2, [r2, #0]
 80166ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	4a5c      	ldr	r2, [pc, #368]	@ (8016844 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 80166d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	4a5b      	ldr	r2, [pc, #364]	@ (8016848 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 80166da:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166e0:	b29b      	uxth	r3, r3
 80166e2:	2bff      	cmp	r3, #255	@ 0xff
 80166e4:	d906      	bls.n	80166f4 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	22ff      	movs	r2, #255	@ 0xff
 80166ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80166ec:	2380      	movs	r3, #128	@ 0x80
 80166ee:	045b      	lsls	r3, r3, #17
 80166f0:	617b      	str	r3, [r7, #20]
 80166f2:	e007      	b.n	8016704 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166f8:	b29a      	uxth	r2, r3
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80166fe:	2380      	movs	r3, #128	@ 0x80
 8016700:	049b      	lsls	r3, r3, #18
 8016702:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016708:	2b00      	cmp	r3, #0
 801670a:	d100      	bne.n	801670e <HAL_I2C_Master_Receive_DMA+0xbe>
 801670c:	e078      	b.n	8016800 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016712:	2b00      	cmp	r3, #0
 8016714:	d023      	beq.n	801675e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801671a:	4a4c      	ldr	r2, [pc, #304]	@ (801684c <HAL_I2C_Master_Receive_DMA+0x1fc>)
 801671c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016722:	4a4b      	ldr	r2, [pc, #300]	@ (8016850 <HAL_I2C_Master_Receive_DMA+0x200>)
 8016724:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801672a:	2200      	movs	r2, #0
 801672c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016732:	2200      	movs	r2, #0
 8016734:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	3324      	adds	r3, #36	@ 0x24
 8016740:	0019      	movs	r1, r3
 8016742:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8016748:	2513      	movs	r5, #19
 801674a:	197c      	adds	r4, r7, r5
 801674c:	f7fe fe52 	bl	80153f4 <HAL_DMA_Start_IT>
 8016750:	0003      	movs	r3, r0
 8016752:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8016754:	197b      	adds	r3, r7, r5
 8016756:	781b      	ldrb	r3, [r3, #0]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d13d      	bne.n	80167d8 <HAL_I2C_Master_Receive_DMA+0x188>
 801675c:	e013      	b.n	8016786 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	2241      	movs	r2, #65	@ 0x41
 8016762:	2120      	movs	r1, #32
 8016764:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	2242      	movs	r2, #66	@ 0x42
 801676a:	2100      	movs	r1, #0
 801676c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016772:	2280      	movs	r2, #128	@ 0x80
 8016774:	431a      	orrs	r2, r3
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	2240      	movs	r2, #64	@ 0x40
 801677e:	2100      	movs	r1, #0
 8016780:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8016782:	2301      	movs	r3, #1
 8016784:	e059      	b.n	801683a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801678a:	b2da      	uxtb	r2, r3
 801678c:	697c      	ldr	r4, [r7, #20]
 801678e:	230a      	movs	r3, #10
 8016790:	18fb      	adds	r3, r7, r3
 8016792:	8819      	ldrh	r1, [r3, #0]
 8016794:	68f8      	ldr	r0, [r7, #12]
 8016796:	4b2f      	ldr	r3, [pc, #188]	@ (8016854 <HAL_I2C_Master_Receive_DMA+0x204>)
 8016798:	9300      	str	r3, [sp, #0]
 801679a:	0023      	movs	r3, r4
 801679c:	f002 f9f6 	bl	8018b8c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80167a4:	b29a      	uxth	r2, r3
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80167aa:	1ad3      	subs	r3, r2, r3
 80167ac:	b29a      	uxth	r2, r3
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	2240      	movs	r2, #64	@ 0x40
 80167b6:	2100      	movs	r1, #0
 80167b8:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	2110      	movs	r1, #16
 80167be:	0018      	movs	r0, r3
 80167c0:	f002 fa1e 	bl	8018c00 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	681a      	ldr	r2, [r3, #0]
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	2180      	movs	r1, #128	@ 0x80
 80167d0:	0209      	lsls	r1, r1, #8
 80167d2:	430a      	orrs	r2, r1
 80167d4:	601a      	str	r2, [r3, #0]
 80167d6:	e02d      	b.n	8016834 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	2241      	movs	r2, #65	@ 0x41
 80167dc:	2120      	movs	r1, #32
 80167de:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	2242      	movs	r2, #66	@ 0x42
 80167e4:	2100      	movs	r1, #0
 80167e6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80167ec:	2210      	movs	r2, #16
 80167ee:	431a      	orrs	r2, r3
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	2240      	movs	r2, #64	@ 0x40
 80167f8:	2100      	movs	r1, #0
 80167fa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80167fc:	2301      	movs	r3, #1
 80167fe:	e01c      	b.n	801683a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	4a15      	ldr	r2, [pc, #84]	@ (8016858 <HAL_I2C_Master_Receive_DMA+0x208>)
 8016804:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801680a:	b2da      	uxtb	r2, r3
 801680c:	2380      	movs	r3, #128	@ 0x80
 801680e:	049c      	lsls	r4, r3, #18
 8016810:	230a      	movs	r3, #10
 8016812:	18fb      	adds	r3, r7, r3
 8016814:	8819      	ldrh	r1, [r3, #0]
 8016816:	68f8      	ldr	r0, [r7, #12]
 8016818:	4b0e      	ldr	r3, [pc, #56]	@ (8016854 <HAL_I2C_Master_Receive_DMA+0x204>)
 801681a:	9300      	str	r3, [sp, #0]
 801681c:	0023      	movs	r3, r4
 801681e:	f002 f9b5 	bl	8018b8c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	2240      	movs	r2, #64	@ 0x40
 8016826:	2100      	movs	r1, #0
 8016828:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	2101      	movs	r1, #1
 801682e:	0018      	movs	r0, r3
 8016830:	f002 f9e6 	bl	8018c00 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8016834:	2300      	movs	r3, #0
 8016836:	e000      	b.n	801683a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8016838:	2302      	movs	r3, #2
  }
}
 801683a:	0018      	movs	r0, r3
 801683c:	46bd      	mov	sp, r7
 801683e:	b006      	add	sp, #24
 8016840:	bdb0      	pop	{r4, r5, r7, pc}
 8016842:	46c0      	nop			@ (mov r8, r8)
 8016844:	ffff0000 	.word	0xffff0000
 8016848:	08017375 	.word	0x08017375
 801684c:	080185d9 	.word	0x080185d9
 8016850:	08018679 	.word	0x08018679
 8016854:	80002400 	.word	0x80002400
 8016858:	08016ec9 	.word	0x08016ec9

0801685c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801685c:	b590      	push	{r4, r7, lr}
 801685e:	b089      	sub	sp, #36	@ 0x24
 8016860:	af02      	add	r7, sp, #8
 8016862:	60f8      	str	r0, [r7, #12]
 8016864:	000c      	movs	r4, r1
 8016866:	0010      	movs	r0, r2
 8016868:	0019      	movs	r1, r3
 801686a:	230a      	movs	r3, #10
 801686c:	18fb      	adds	r3, r7, r3
 801686e:	1c22      	adds	r2, r4, #0
 8016870:	801a      	strh	r2, [r3, #0]
 8016872:	2308      	movs	r3, #8
 8016874:	18fb      	adds	r3, r7, r3
 8016876:	1c02      	adds	r2, r0, #0
 8016878:	801a      	strh	r2, [r3, #0]
 801687a:	1dbb      	adds	r3, r7, #6
 801687c:	1c0a      	adds	r2, r1, #0
 801687e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	2241      	movs	r2, #65	@ 0x41
 8016884:	5c9b      	ldrb	r3, [r3, r2]
 8016886:	b2db      	uxtb	r3, r3
 8016888:	2b20      	cmp	r3, #32
 801688a:	d000      	beq.n	801688e <HAL_I2C_Mem_Write+0x32>
 801688c:	e10c      	b.n	8016aa8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 801688e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016890:	2b00      	cmp	r3, #0
 8016892:	d004      	beq.n	801689e <HAL_I2C_Mem_Write+0x42>
 8016894:	232c      	movs	r3, #44	@ 0x2c
 8016896:	18fb      	adds	r3, r7, r3
 8016898:	881b      	ldrh	r3, [r3, #0]
 801689a:	2b00      	cmp	r3, #0
 801689c:	d105      	bne.n	80168aa <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	2280      	movs	r2, #128	@ 0x80
 80168a2:	0092      	lsls	r2, r2, #2
 80168a4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80168a6:	2301      	movs	r3, #1
 80168a8:	e0ff      	b.n	8016aaa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	2240      	movs	r2, #64	@ 0x40
 80168ae:	5c9b      	ldrb	r3, [r3, r2]
 80168b0:	2b01      	cmp	r3, #1
 80168b2:	d101      	bne.n	80168b8 <HAL_I2C_Mem_Write+0x5c>
 80168b4:	2302      	movs	r3, #2
 80168b6:	e0f8      	b.n	8016aaa <HAL_I2C_Mem_Write+0x24e>
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	2240      	movs	r2, #64	@ 0x40
 80168bc:	2101      	movs	r1, #1
 80168be:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80168c0:	f7fe f87a 	bl	80149b8 <HAL_GetTick>
 80168c4:	0003      	movs	r3, r0
 80168c6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80168c8:	2380      	movs	r3, #128	@ 0x80
 80168ca:	0219      	lsls	r1, r3, #8
 80168cc:	68f8      	ldr	r0, [r7, #12]
 80168ce:	697b      	ldr	r3, [r7, #20]
 80168d0:	9300      	str	r3, [sp, #0]
 80168d2:	2319      	movs	r3, #25
 80168d4:	2201      	movs	r2, #1
 80168d6:	f001 ff07 	bl	80186e8 <I2C_WaitOnFlagUntilTimeout>
 80168da:	1e03      	subs	r3, r0, #0
 80168dc:	d001      	beq.n	80168e2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80168de:	2301      	movs	r3, #1
 80168e0:	e0e3      	b.n	8016aaa <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	2241      	movs	r2, #65	@ 0x41
 80168e6:	2121      	movs	r1, #33	@ 0x21
 80168e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	2242      	movs	r2, #66	@ 0x42
 80168ee:	2140      	movs	r1, #64	@ 0x40
 80168f0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	2200      	movs	r2, #0
 80168f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80168fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	222c      	movs	r2, #44	@ 0x2c
 8016902:	18ba      	adds	r2, r7, r2
 8016904:	8812      	ldrh	r2, [r2, #0]
 8016906:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	2200      	movs	r2, #0
 801690c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801690e:	1dbb      	adds	r3, r7, #6
 8016910:	881c      	ldrh	r4, [r3, #0]
 8016912:	2308      	movs	r3, #8
 8016914:	18fb      	adds	r3, r7, r3
 8016916:	881a      	ldrh	r2, [r3, #0]
 8016918:	230a      	movs	r3, #10
 801691a:	18fb      	adds	r3, r7, r3
 801691c:	8819      	ldrh	r1, [r3, #0]
 801691e:	68f8      	ldr	r0, [r7, #12]
 8016920:	697b      	ldr	r3, [r7, #20]
 8016922:	9301      	str	r3, [sp, #4]
 8016924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016926:	9300      	str	r3, [sp, #0]
 8016928:	0023      	movs	r3, r4
 801692a:	f001 f855 	bl	80179d8 <I2C_RequestMemoryWrite>
 801692e:	1e03      	subs	r3, r0, #0
 8016930:	d005      	beq.n	801693e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	2240      	movs	r2, #64	@ 0x40
 8016936:	2100      	movs	r1, #0
 8016938:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 801693a:	2301      	movs	r3, #1
 801693c:	e0b5      	b.n	8016aaa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016942:	b29b      	uxth	r3, r3
 8016944:	2bff      	cmp	r3, #255	@ 0xff
 8016946:	d911      	bls.n	801696c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	22ff      	movs	r2, #255	@ 0xff
 801694c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016952:	b2da      	uxtb	r2, r3
 8016954:	2380      	movs	r3, #128	@ 0x80
 8016956:	045c      	lsls	r4, r3, #17
 8016958:	230a      	movs	r3, #10
 801695a:	18fb      	adds	r3, r7, r3
 801695c:	8819      	ldrh	r1, [r3, #0]
 801695e:	68f8      	ldr	r0, [r7, #12]
 8016960:	2300      	movs	r3, #0
 8016962:	9300      	str	r3, [sp, #0]
 8016964:	0023      	movs	r3, r4
 8016966:	f002 f911 	bl	8018b8c <I2C_TransferConfig>
 801696a:	e012      	b.n	8016992 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016970:	b29a      	uxth	r2, r3
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801697a:	b2da      	uxtb	r2, r3
 801697c:	2380      	movs	r3, #128	@ 0x80
 801697e:	049c      	lsls	r4, r3, #18
 8016980:	230a      	movs	r3, #10
 8016982:	18fb      	adds	r3, r7, r3
 8016984:	8819      	ldrh	r1, [r3, #0]
 8016986:	68f8      	ldr	r0, [r7, #12]
 8016988:	2300      	movs	r3, #0
 801698a:	9300      	str	r3, [sp, #0]
 801698c:	0023      	movs	r3, r4
 801698e:	f002 f8fd 	bl	8018b8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016992:	697a      	ldr	r2, [r7, #20]
 8016994:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	0018      	movs	r0, r3
 801699a:	f001 fef3 	bl	8018784 <I2C_WaitOnTXISFlagUntilTimeout>
 801699e:	1e03      	subs	r3, r0, #0
 80169a0:	d001      	beq.n	80169a6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80169a2:	2301      	movs	r3, #1
 80169a4:	e081      	b.n	8016aaa <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80169aa:	781a      	ldrb	r2, [r3, #0]
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80169b6:	1c5a      	adds	r2, r3, #1
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80169c0:	b29b      	uxth	r3, r3
 80169c2:	3b01      	subs	r3, #1
 80169c4:	b29a      	uxth	r2, r3
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80169ce:	3b01      	subs	r3, #1
 80169d0:	b29a      	uxth	r2, r3
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80169da:	b29b      	uxth	r3, r3
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d03a      	beq.n	8016a56 <HAL_I2C_Mem_Write+0x1fa>
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d136      	bne.n	8016a56 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80169e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80169ea:	68f8      	ldr	r0, [r7, #12]
 80169ec:	697b      	ldr	r3, [r7, #20]
 80169ee:	9300      	str	r3, [sp, #0]
 80169f0:	0013      	movs	r3, r2
 80169f2:	2200      	movs	r2, #0
 80169f4:	2180      	movs	r1, #128	@ 0x80
 80169f6:	f001 fe77 	bl	80186e8 <I2C_WaitOnFlagUntilTimeout>
 80169fa:	1e03      	subs	r3, r0, #0
 80169fc:	d001      	beq.n	8016a02 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80169fe:	2301      	movs	r3, #1
 8016a00:	e053      	b.n	8016aaa <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016a06:	b29b      	uxth	r3, r3
 8016a08:	2bff      	cmp	r3, #255	@ 0xff
 8016a0a:	d911      	bls.n	8016a30 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	22ff      	movs	r2, #255	@ 0xff
 8016a10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016a16:	b2da      	uxtb	r2, r3
 8016a18:	2380      	movs	r3, #128	@ 0x80
 8016a1a:	045c      	lsls	r4, r3, #17
 8016a1c:	230a      	movs	r3, #10
 8016a1e:	18fb      	adds	r3, r7, r3
 8016a20:	8819      	ldrh	r1, [r3, #0]
 8016a22:	68f8      	ldr	r0, [r7, #12]
 8016a24:	2300      	movs	r3, #0
 8016a26:	9300      	str	r3, [sp, #0]
 8016a28:	0023      	movs	r3, r4
 8016a2a:	f002 f8af 	bl	8018b8c <I2C_TransferConfig>
 8016a2e:	e012      	b.n	8016a56 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016a34:	b29a      	uxth	r2, r3
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016a3e:	b2da      	uxtb	r2, r3
 8016a40:	2380      	movs	r3, #128	@ 0x80
 8016a42:	049c      	lsls	r4, r3, #18
 8016a44:	230a      	movs	r3, #10
 8016a46:	18fb      	adds	r3, r7, r3
 8016a48:	8819      	ldrh	r1, [r3, #0]
 8016a4a:	68f8      	ldr	r0, [r7, #12]
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	9300      	str	r3, [sp, #0]
 8016a50:	0023      	movs	r3, r4
 8016a52:	f002 f89b 	bl	8018b8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016a5a:	b29b      	uxth	r3, r3
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d198      	bne.n	8016992 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016a60:	697a      	ldr	r2, [r7, #20]
 8016a62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	0018      	movs	r0, r3
 8016a68:	f001 fed2 	bl	8018810 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016a6c:	1e03      	subs	r3, r0, #0
 8016a6e:	d001      	beq.n	8016a74 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8016a70:	2301      	movs	r3, #1
 8016a72:	e01a      	b.n	8016aaa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	2220      	movs	r2, #32
 8016a7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	685a      	ldr	r2, [r3, #4]
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	490b      	ldr	r1, [pc, #44]	@ (8016ab4 <HAL_I2C_Mem_Write+0x258>)
 8016a88:	400a      	ands	r2, r1
 8016a8a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	2241      	movs	r2, #65	@ 0x41
 8016a90:	2120      	movs	r1, #32
 8016a92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	2242      	movs	r2, #66	@ 0x42
 8016a98:	2100      	movs	r1, #0
 8016a9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	2240      	movs	r2, #64	@ 0x40
 8016aa0:	2100      	movs	r1, #0
 8016aa2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	e000      	b.n	8016aaa <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8016aa8:	2302      	movs	r3, #2
  }
}
 8016aaa:	0018      	movs	r0, r3
 8016aac:	46bd      	mov	sp, r7
 8016aae:	b007      	add	sp, #28
 8016ab0:	bd90      	pop	{r4, r7, pc}
 8016ab2:	46c0      	nop			@ (mov r8, r8)
 8016ab4:	fe00e800 	.word	0xfe00e800

08016ab8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016ab8:	b590      	push	{r4, r7, lr}
 8016aba:	b089      	sub	sp, #36	@ 0x24
 8016abc:	af02      	add	r7, sp, #8
 8016abe:	60f8      	str	r0, [r7, #12]
 8016ac0:	000c      	movs	r4, r1
 8016ac2:	0010      	movs	r0, r2
 8016ac4:	0019      	movs	r1, r3
 8016ac6:	230a      	movs	r3, #10
 8016ac8:	18fb      	adds	r3, r7, r3
 8016aca:	1c22      	adds	r2, r4, #0
 8016acc:	801a      	strh	r2, [r3, #0]
 8016ace:	2308      	movs	r3, #8
 8016ad0:	18fb      	adds	r3, r7, r3
 8016ad2:	1c02      	adds	r2, r0, #0
 8016ad4:	801a      	strh	r2, [r3, #0]
 8016ad6:	1dbb      	adds	r3, r7, #6
 8016ad8:	1c0a      	adds	r2, r1, #0
 8016ada:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	2241      	movs	r2, #65	@ 0x41
 8016ae0:	5c9b      	ldrb	r3, [r3, r2]
 8016ae2:	b2db      	uxtb	r3, r3
 8016ae4:	2b20      	cmp	r3, #32
 8016ae6:	d000      	beq.n	8016aea <HAL_I2C_Mem_Read+0x32>
 8016ae8:	e110      	b.n	8016d0c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8016aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d004      	beq.n	8016afa <HAL_I2C_Mem_Read+0x42>
 8016af0:	232c      	movs	r3, #44	@ 0x2c
 8016af2:	18fb      	adds	r3, r7, r3
 8016af4:	881b      	ldrh	r3, [r3, #0]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d105      	bne.n	8016b06 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	2280      	movs	r2, #128	@ 0x80
 8016afe:	0092      	lsls	r2, r2, #2
 8016b00:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8016b02:	2301      	movs	r3, #1
 8016b04:	e103      	b.n	8016d0e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	2240      	movs	r2, #64	@ 0x40
 8016b0a:	5c9b      	ldrb	r3, [r3, r2]
 8016b0c:	2b01      	cmp	r3, #1
 8016b0e:	d101      	bne.n	8016b14 <HAL_I2C_Mem_Read+0x5c>
 8016b10:	2302      	movs	r3, #2
 8016b12:	e0fc      	b.n	8016d0e <HAL_I2C_Mem_Read+0x256>
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	2240      	movs	r2, #64	@ 0x40
 8016b18:	2101      	movs	r1, #1
 8016b1a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016b1c:	f7fd ff4c 	bl	80149b8 <HAL_GetTick>
 8016b20:	0003      	movs	r3, r0
 8016b22:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016b24:	2380      	movs	r3, #128	@ 0x80
 8016b26:	0219      	lsls	r1, r3, #8
 8016b28:	68f8      	ldr	r0, [r7, #12]
 8016b2a:	697b      	ldr	r3, [r7, #20]
 8016b2c:	9300      	str	r3, [sp, #0]
 8016b2e:	2319      	movs	r3, #25
 8016b30:	2201      	movs	r2, #1
 8016b32:	f001 fdd9 	bl	80186e8 <I2C_WaitOnFlagUntilTimeout>
 8016b36:	1e03      	subs	r3, r0, #0
 8016b38:	d001      	beq.n	8016b3e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8016b3a:	2301      	movs	r3, #1
 8016b3c:	e0e7      	b.n	8016d0e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	2241      	movs	r2, #65	@ 0x41
 8016b42:	2122      	movs	r1, #34	@ 0x22
 8016b44:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	2242      	movs	r2, #66	@ 0x42
 8016b4a:	2140      	movs	r1, #64	@ 0x40
 8016b4c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	2200      	movs	r2, #0
 8016b52:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016b58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	222c      	movs	r2, #44	@ 0x2c
 8016b5e:	18ba      	adds	r2, r7, r2
 8016b60:	8812      	ldrh	r2, [r2, #0]
 8016b62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	2200      	movs	r2, #0
 8016b68:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8016b6a:	1dbb      	adds	r3, r7, #6
 8016b6c:	881c      	ldrh	r4, [r3, #0]
 8016b6e:	2308      	movs	r3, #8
 8016b70:	18fb      	adds	r3, r7, r3
 8016b72:	881a      	ldrh	r2, [r3, #0]
 8016b74:	230a      	movs	r3, #10
 8016b76:	18fb      	adds	r3, r7, r3
 8016b78:	8819      	ldrh	r1, [r3, #0]
 8016b7a:	68f8      	ldr	r0, [r7, #12]
 8016b7c:	697b      	ldr	r3, [r7, #20]
 8016b7e:	9301      	str	r3, [sp, #4]
 8016b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b82:	9300      	str	r3, [sp, #0]
 8016b84:	0023      	movs	r3, r4
 8016b86:	f000 ff8b 	bl	8017aa0 <I2C_RequestMemoryRead>
 8016b8a:	1e03      	subs	r3, r0, #0
 8016b8c:	d005      	beq.n	8016b9a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	2240      	movs	r2, #64	@ 0x40
 8016b92:	2100      	movs	r1, #0
 8016b94:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8016b96:	2301      	movs	r3, #1
 8016b98:	e0b9      	b.n	8016d0e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b9e:	b29b      	uxth	r3, r3
 8016ba0:	2bff      	cmp	r3, #255	@ 0xff
 8016ba2:	d911      	bls.n	8016bc8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	22ff      	movs	r2, #255	@ 0xff
 8016ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016bae:	b2da      	uxtb	r2, r3
 8016bb0:	2380      	movs	r3, #128	@ 0x80
 8016bb2:	045c      	lsls	r4, r3, #17
 8016bb4:	230a      	movs	r3, #10
 8016bb6:	18fb      	adds	r3, r7, r3
 8016bb8:	8819      	ldrh	r1, [r3, #0]
 8016bba:	68f8      	ldr	r0, [r7, #12]
 8016bbc:	4b56      	ldr	r3, [pc, #344]	@ (8016d18 <HAL_I2C_Mem_Read+0x260>)
 8016bbe:	9300      	str	r3, [sp, #0]
 8016bc0:	0023      	movs	r3, r4
 8016bc2:	f001 ffe3 	bl	8018b8c <I2C_TransferConfig>
 8016bc6:	e012      	b.n	8016bee <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016bcc:	b29a      	uxth	r2, r3
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016bd6:	b2da      	uxtb	r2, r3
 8016bd8:	2380      	movs	r3, #128	@ 0x80
 8016bda:	049c      	lsls	r4, r3, #18
 8016bdc:	230a      	movs	r3, #10
 8016bde:	18fb      	adds	r3, r7, r3
 8016be0:	8819      	ldrh	r1, [r3, #0]
 8016be2:	68f8      	ldr	r0, [r7, #12]
 8016be4:	4b4c      	ldr	r3, [pc, #304]	@ (8016d18 <HAL_I2C_Mem_Read+0x260>)
 8016be6:	9300      	str	r3, [sp, #0]
 8016be8:	0023      	movs	r3, r4
 8016bea:	f001 ffcf 	bl	8018b8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8016bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016bf0:	68f8      	ldr	r0, [r7, #12]
 8016bf2:	697b      	ldr	r3, [r7, #20]
 8016bf4:	9300      	str	r3, [sp, #0]
 8016bf6:	0013      	movs	r3, r2
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	2104      	movs	r1, #4
 8016bfc:	f001 fd74 	bl	80186e8 <I2C_WaitOnFlagUntilTimeout>
 8016c00:	1e03      	subs	r3, r0, #0
 8016c02:	d001      	beq.n	8016c08 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8016c04:	2301      	movs	r3, #1
 8016c06:	e082      	b.n	8016d0e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c12:	b2d2      	uxtb	r2, r2
 8016c14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c1a:	1c5a      	adds	r2, r3, #1
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c24:	3b01      	subs	r3, #1
 8016c26:	b29a      	uxth	r2, r3
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c30:	b29b      	uxth	r3, r3
 8016c32:	3b01      	subs	r3, #1
 8016c34:	b29a      	uxth	r2, r3
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c3e:	b29b      	uxth	r3, r3
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d03a      	beq.n	8016cba <HAL_I2C_Mem_Read+0x202>
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d136      	bne.n	8016cba <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016c4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016c4e:	68f8      	ldr	r0, [r7, #12]
 8016c50:	697b      	ldr	r3, [r7, #20]
 8016c52:	9300      	str	r3, [sp, #0]
 8016c54:	0013      	movs	r3, r2
 8016c56:	2200      	movs	r2, #0
 8016c58:	2180      	movs	r1, #128	@ 0x80
 8016c5a:	f001 fd45 	bl	80186e8 <I2C_WaitOnFlagUntilTimeout>
 8016c5e:	1e03      	subs	r3, r0, #0
 8016c60:	d001      	beq.n	8016c66 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8016c62:	2301      	movs	r3, #1
 8016c64:	e053      	b.n	8016d0e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c6a:	b29b      	uxth	r3, r3
 8016c6c:	2bff      	cmp	r3, #255	@ 0xff
 8016c6e:	d911      	bls.n	8016c94 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	22ff      	movs	r2, #255	@ 0xff
 8016c74:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c7a:	b2da      	uxtb	r2, r3
 8016c7c:	2380      	movs	r3, #128	@ 0x80
 8016c7e:	045c      	lsls	r4, r3, #17
 8016c80:	230a      	movs	r3, #10
 8016c82:	18fb      	adds	r3, r7, r3
 8016c84:	8819      	ldrh	r1, [r3, #0]
 8016c86:	68f8      	ldr	r0, [r7, #12]
 8016c88:	2300      	movs	r3, #0
 8016c8a:	9300      	str	r3, [sp, #0]
 8016c8c:	0023      	movs	r3, r4
 8016c8e:	f001 ff7d 	bl	8018b8c <I2C_TransferConfig>
 8016c92:	e012      	b.n	8016cba <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c98:	b29a      	uxth	r2, r3
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ca2:	b2da      	uxtb	r2, r3
 8016ca4:	2380      	movs	r3, #128	@ 0x80
 8016ca6:	049c      	lsls	r4, r3, #18
 8016ca8:	230a      	movs	r3, #10
 8016caa:	18fb      	adds	r3, r7, r3
 8016cac:	8819      	ldrh	r1, [r3, #0]
 8016cae:	68f8      	ldr	r0, [r7, #12]
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	9300      	str	r3, [sp, #0]
 8016cb4:	0023      	movs	r3, r4
 8016cb6:	f001 ff69 	bl	8018b8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016cbe:	b29b      	uxth	r3, r3
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d194      	bne.n	8016bee <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016cc4:	697a      	ldr	r2, [r7, #20]
 8016cc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	0018      	movs	r0, r3
 8016ccc:	f001 fda0 	bl	8018810 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016cd0:	1e03      	subs	r3, r0, #0
 8016cd2:	d001      	beq.n	8016cd8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8016cd4:	2301      	movs	r3, #1
 8016cd6:	e01a      	b.n	8016d0e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	2220      	movs	r2, #32
 8016cde:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	685a      	ldr	r2, [r3, #4]
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	490c      	ldr	r1, [pc, #48]	@ (8016d1c <HAL_I2C_Mem_Read+0x264>)
 8016cec:	400a      	ands	r2, r1
 8016cee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	2241      	movs	r2, #65	@ 0x41
 8016cf4:	2120      	movs	r1, #32
 8016cf6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	2242      	movs	r2, #66	@ 0x42
 8016cfc:	2100      	movs	r1, #0
 8016cfe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	2240      	movs	r2, #64	@ 0x40
 8016d04:	2100      	movs	r1, #0
 8016d06:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016d08:	2300      	movs	r3, #0
 8016d0a:	e000      	b.n	8016d0e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8016d0c:	2302      	movs	r3, #2
  }
}
 8016d0e:	0018      	movs	r0, r3
 8016d10:	46bd      	mov	sp, r7
 8016d12:	b007      	add	sp, #28
 8016d14:	bd90      	pop	{r4, r7, pc}
 8016d16:	46c0      	nop			@ (mov r8, r8)
 8016d18:	80002400 	.word	0x80002400
 8016d1c:	fe00e800 	.word	0xfe00e800

08016d20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b084      	sub	sp, #16
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	699b      	ldr	r3, [r3, #24]
 8016d2e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d005      	beq.n	8016d4c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d44:	68ba      	ldr	r2, [r7, #8]
 8016d46:	68f9      	ldr	r1, [r7, #12]
 8016d48:	6878      	ldr	r0, [r7, #4]
 8016d4a:	4798      	blx	r3
  }
}
 8016d4c:	46c0      	nop			@ (mov r8, r8)
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	b004      	add	sp, #16
 8016d52:	bd80      	pop	{r7, pc}

08016d54 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8016d54:	b580      	push	{r7, lr}
 8016d56:	b086      	sub	sp, #24
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	699b      	ldr	r3, [r3, #24]
 8016d62:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016d6c:	697b      	ldr	r3, [r7, #20]
 8016d6e:	0a1b      	lsrs	r3, r3, #8
 8016d70:	001a      	movs	r2, r3
 8016d72:	2301      	movs	r3, #1
 8016d74:	4013      	ands	r3, r2
 8016d76:	d010      	beq.n	8016d9a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016d78:	693b      	ldr	r3, [r7, #16]
 8016d7a:	09db      	lsrs	r3, r3, #7
 8016d7c:	001a      	movs	r2, r3
 8016d7e:	2301      	movs	r3, #1
 8016d80:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016d82:	d00a      	beq.n	8016d9a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d88:	2201      	movs	r2, #1
 8016d8a:	431a      	orrs	r2, r3
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	2280      	movs	r2, #128	@ 0x80
 8016d96:	0052      	lsls	r2, r2, #1
 8016d98:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016d9a:	697b      	ldr	r3, [r7, #20]
 8016d9c:	0a9b      	lsrs	r3, r3, #10
 8016d9e:	001a      	movs	r2, r3
 8016da0:	2301      	movs	r3, #1
 8016da2:	4013      	ands	r3, r2
 8016da4:	d010      	beq.n	8016dc8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016da6:	693b      	ldr	r3, [r7, #16]
 8016da8:	09db      	lsrs	r3, r3, #7
 8016daa:	001a      	movs	r2, r3
 8016dac:	2301      	movs	r3, #1
 8016dae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016db0:	d00a      	beq.n	8016dc8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016db6:	2208      	movs	r2, #8
 8016db8:	431a      	orrs	r2, r3
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	2280      	movs	r2, #128	@ 0x80
 8016dc4:	00d2      	lsls	r2, r2, #3
 8016dc6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016dc8:	697b      	ldr	r3, [r7, #20]
 8016dca:	0a5b      	lsrs	r3, r3, #9
 8016dcc:	001a      	movs	r2, r3
 8016dce:	2301      	movs	r3, #1
 8016dd0:	4013      	ands	r3, r2
 8016dd2:	d010      	beq.n	8016df6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016dd4:	693b      	ldr	r3, [r7, #16]
 8016dd6:	09db      	lsrs	r3, r3, #7
 8016dd8:	001a      	movs	r2, r3
 8016dda:	2301      	movs	r3, #1
 8016ddc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016dde:	d00a      	beq.n	8016df6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016de4:	2202      	movs	r2, #2
 8016de6:	431a      	orrs	r2, r3
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	2280      	movs	r2, #128	@ 0x80
 8016df2:	0092      	lsls	r2, r2, #2
 8016df4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016dfa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	220b      	movs	r2, #11
 8016e00:	4013      	ands	r3, r2
 8016e02:	d005      	beq.n	8016e10 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8016e04:	68fa      	ldr	r2, [r7, #12]
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	0011      	movs	r1, r2
 8016e0a:	0018      	movs	r0, r3
 8016e0c:	f001 fa46 	bl	801829c <I2C_ITError>
  }
}
 8016e10:	46c0      	nop			@ (mov r8, r8)
 8016e12:	46bd      	mov	sp, r7
 8016e14:	b006      	add	sp, #24
 8016e16:	bd80      	pop	{r7, pc}

08016e18 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e18:	b580      	push	{r7, lr}
 8016e1a:	b082      	sub	sp, #8
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8016e20:	46c0      	nop			@ (mov r8, r8)
 8016e22:	46bd      	mov	sp, r7
 8016e24:	b002      	add	sp, #8
 8016e26:	bd80      	pop	{r7, pc}

08016e28 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b082      	sub	sp, #8
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8016e30:	46c0      	nop			@ (mov r8, r8)
 8016e32:	46bd      	mov	sp, r7
 8016e34:	b002      	add	sp, #8
 8016e36:	bd80      	pop	{r7, pc}

08016e38 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e38:	b580      	push	{r7, lr}
 8016e3a:	b082      	sub	sp, #8
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8016e40:	46c0      	nop			@ (mov r8, r8)
 8016e42:	46bd      	mov	sp, r7
 8016e44:	b002      	add	sp, #8
 8016e46:	bd80      	pop	{r7, pc}

08016e48 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e48:	b580      	push	{r7, lr}
 8016e4a:	b082      	sub	sp, #8
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8016e50:	46c0      	nop			@ (mov r8, r8)
 8016e52:	46bd      	mov	sp, r7
 8016e54:	b002      	add	sp, #8
 8016e56:	bd80      	pop	{r7, pc}

08016e58 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b082      	sub	sp, #8
 8016e5c:	af00      	add	r7, sp, #0
 8016e5e:	6078      	str	r0, [r7, #4]
 8016e60:	0008      	movs	r0, r1
 8016e62:	0011      	movs	r1, r2
 8016e64:	1cfb      	adds	r3, r7, #3
 8016e66:	1c02      	adds	r2, r0, #0
 8016e68:	701a      	strb	r2, [r3, #0]
 8016e6a:	003b      	movs	r3, r7
 8016e6c:	1c0a      	adds	r2, r1, #0
 8016e6e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8016e70:	46c0      	nop			@ (mov r8, r8)
 8016e72:	46bd      	mov	sp, r7
 8016e74:	b002      	add	sp, #8
 8016e76:	bd80      	pop	{r7, pc}

08016e78 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b082      	sub	sp, #8
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8016e80:	46c0      	nop			@ (mov r8, r8)
 8016e82:	46bd      	mov	sp, r7
 8016e84:	b002      	add	sp, #8
 8016e86:	bd80      	pop	{r7, pc}

08016e88 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e88:	b580      	push	{r7, lr}
 8016e8a:	b082      	sub	sp, #8
 8016e8c:	af00      	add	r7, sp, #0
 8016e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8016e90:	46c0      	nop			@ (mov r8, r8)
 8016e92:	46bd      	mov	sp, r7
 8016e94:	b002      	add	sp, #8
 8016e96:	bd80      	pop	{r7, pc}

08016e98 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b082      	sub	sp, #8
 8016e9c:	af00      	add	r7, sp, #0
 8016e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8016ea0:	46c0      	nop			@ (mov r8, r8)
 8016ea2:	46bd      	mov	sp, r7
 8016ea4:	b002      	add	sp, #8
 8016ea6:	bd80      	pop	{r7, pc}

08016ea8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b082      	sub	sp, #8
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8016eb0:	46c0      	nop			@ (mov r8, r8)
 8016eb2:	46bd      	mov	sp, r7
 8016eb4:	b002      	add	sp, #8
 8016eb6:	bd80      	pop	{r7, pc}

08016eb8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b082      	sub	sp, #8
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8016ec0:	46c0      	nop			@ (mov r8, r8)
 8016ec2:	46bd      	mov	sp, r7
 8016ec4:	b002      	add	sp, #8
 8016ec6:	bd80      	pop	{r7, pc}

08016ec8 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8016ec8:	b590      	push	{r4, r7, lr}
 8016eca:	b089      	sub	sp, #36	@ 0x24
 8016ecc:	af02      	add	r7, sp, #8
 8016ece:	60f8      	str	r0, [r7, #12]
 8016ed0:	60b9      	str	r1, [r7, #8]
 8016ed2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8016ed4:	68bb      	ldr	r3, [r7, #8]
 8016ed6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	2240      	movs	r2, #64	@ 0x40
 8016edc:	5c9b      	ldrb	r3, [r3, r2]
 8016ede:	2b01      	cmp	r3, #1
 8016ee0:	d101      	bne.n	8016ee6 <I2C_Master_ISR_IT+0x1e>
 8016ee2:	2302      	movs	r3, #2
 8016ee4:	e12b      	b.n	801713e <I2C_Master_ISR_IT+0x276>
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	2240      	movs	r2, #64	@ 0x40
 8016eea:	2101      	movs	r1, #1
 8016eec:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016eee:	697b      	ldr	r3, [r7, #20]
 8016ef0:	091b      	lsrs	r3, r3, #4
 8016ef2:	001a      	movs	r2, r3
 8016ef4:	2301      	movs	r3, #1
 8016ef6:	4013      	ands	r3, r2
 8016ef8:	d014      	beq.n	8016f24 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	091b      	lsrs	r3, r3, #4
 8016efe:	001a      	movs	r2, r3
 8016f00:	2301      	movs	r3, #1
 8016f02:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016f04:	d00e      	beq.n	8016f24 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	2210      	movs	r2, #16
 8016f0c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f12:	2204      	movs	r2, #4
 8016f14:	431a      	orrs	r2, r3
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	0018      	movs	r0, r3
 8016f1e:	f001 fae8 	bl	80184f2 <I2C_Flush_TXDR>
 8016f22:	e0f5      	b.n	8017110 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016f24:	697b      	ldr	r3, [r7, #20]
 8016f26:	089b      	lsrs	r3, r3, #2
 8016f28:	001a      	movs	r2, r3
 8016f2a:	2301      	movs	r3, #1
 8016f2c:	4013      	ands	r3, r2
 8016f2e:	d023      	beq.n	8016f78 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	089b      	lsrs	r3, r3, #2
 8016f34:	001a      	movs	r2, r3
 8016f36:	2301      	movs	r3, #1
 8016f38:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016f3a:	d01d      	beq.n	8016f78 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8016f3c:	697b      	ldr	r3, [r7, #20]
 8016f3e:	2204      	movs	r2, #4
 8016f40:	4393      	bics	r3, r2
 8016f42:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f4e:	b2d2      	uxtb	r2, r2
 8016f50:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f56:	1c5a      	adds	r2, r3, #1
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f60:	3b01      	subs	r3, #1
 8016f62:	b29a      	uxth	r2, r3
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f6c:	b29b      	uxth	r3, r3
 8016f6e:	3b01      	subs	r3, #1
 8016f70:	b29a      	uxth	r2, r3
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016f76:	e0cb      	b.n	8017110 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016f78:	697b      	ldr	r3, [r7, #20]
 8016f7a:	085b      	lsrs	r3, r3, #1
 8016f7c:	001a      	movs	r2, r3
 8016f7e:	2301      	movs	r3, #1
 8016f80:	4013      	ands	r3, r2
 8016f82:	d01e      	beq.n	8016fc2 <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	085b      	lsrs	r3, r3, #1
 8016f88:	001a      	movs	r2, r3
 8016f8a:	2301      	movs	r3, #1
 8016f8c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016f8e:	d018      	beq.n	8016fc2 <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f94:	781a      	ldrb	r2, [r3, #0]
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fa0:	1c5a      	adds	r2, r3, #1
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016faa:	3b01      	subs	r3, #1
 8016fac:	b29a      	uxth	r2, r3
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016fb6:	b29b      	uxth	r3, r3
 8016fb8:	3b01      	subs	r3, #1
 8016fba:	b29a      	uxth	r2, r3
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016fc0:	e0a6      	b.n	8017110 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8016fc2:	697b      	ldr	r3, [r7, #20]
 8016fc4:	09db      	lsrs	r3, r3, #7
 8016fc6:	001a      	movs	r2, r3
 8016fc8:	2301      	movs	r3, #1
 8016fca:	4013      	ands	r3, r2
 8016fcc:	d100      	bne.n	8016fd0 <I2C_Master_ISR_IT+0x108>
 8016fce:	e06b      	b.n	80170a8 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	099b      	lsrs	r3, r3, #6
 8016fd4:	001a      	movs	r2, r3
 8016fd6:	2301      	movs	r3, #1
 8016fd8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8016fda:	d065      	beq.n	80170a8 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016fe0:	b29b      	uxth	r3, r3
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d04a      	beq.n	801707c <I2C_Master_ISR_IT+0x1b4>
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d146      	bne.n	801707c <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	685b      	ldr	r3, [r3, #4]
 8016ff4:	b29a      	uxth	r2, r3
 8016ff6:	2112      	movs	r1, #18
 8016ff8:	187b      	adds	r3, r7, r1
 8016ffa:	0592      	lsls	r2, r2, #22
 8016ffc:	0d92      	lsrs	r2, r2, #22
 8016ffe:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017004:	b29b      	uxth	r3, r3
 8017006:	2bff      	cmp	r3, #255	@ 0xff
 8017008:	d910      	bls.n	801702c <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	22ff      	movs	r2, #255	@ 0xff
 801700e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017014:	b2da      	uxtb	r2, r3
 8017016:	2380      	movs	r3, #128	@ 0x80
 8017018:	045c      	lsls	r4, r3, #17
 801701a:	187b      	adds	r3, r7, r1
 801701c:	8819      	ldrh	r1, [r3, #0]
 801701e:	68f8      	ldr	r0, [r7, #12]
 8017020:	2300      	movs	r3, #0
 8017022:	9300      	str	r3, [sp, #0]
 8017024:	0023      	movs	r3, r4
 8017026:	f001 fdb1 	bl	8018b8c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801702a:	e03c      	b.n	80170a6 <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801702c:	68fb      	ldr	r3, [r7, #12]
 801702e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017030:	b29a      	uxth	r2, r3
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801703a:	4a43      	ldr	r2, [pc, #268]	@ (8017148 <I2C_Master_ISR_IT+0x280>)
 801703c:	4293      	cmp	r3, r2
 801703e:	d00e      	beq.n	801705e <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8017040:	68fb      	ldr	r3, [r7, #12]
 8017042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017044:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801704a:	2312      	movs	r3, #18
 801704c:	18fb      	adds	r3, r7, r3
 801704e:	8819      	ldrh	r1, [r3, #0]
 8017050:	68f8      	ldr	r0, [r7, #12]
 8017052:	2300      	movs	r3, #0
 8017054:	9300      	str	r3, [sp, #0]
 8017056:	0023      	movs	r3, r4
 8017058:	f001 fd98 	bl	8018b8c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801705c:	e023      	b.n	80170a6 <I2C_Master_ISR_IT+0x1de>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017062:	b2da      	uxtb	r2, r3
 8017064:	2380      	movs	r3, #128	@ 0x80
 8017066:	049c      	lsls	r4, r3, #18
 8017068:	2312      	movs	r3, #18
 801706a:	18fb      	adds	r3, r7, r3
 801706c:	8819      	ldrh	r1, [r3, #0]
 801706e:	68f8      	ldr	r0, [r7, #12]
 8017070:	2300      	movs	r3, #0
 8017072:	9300      	str	r3, [sp, #0]
 8017074:	0023      	movs	r3, r4
 8017076:	f001 fd89 	bl	8018b8c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801707a:	e014      	b.n	80170a6 <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	685a      	ldr	r2, [r3, #4]
 8017082:	2380      	movs	r3, #128	@ 0x80
 8017084:	049b      	lsls	r3, r3, #18
 8017086:	401a      	ands	r2, r3
 8017088:	2380      	movs	r3, #128	@ 0x80
 801708a:	049b      	lsls	r3, r3, #18
 801708c:	429a      	cmp	r2, r3
 801708e:	d004      	beq.n	801709a <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	0018      	movs	r0, r3
 8017094:	f000 fe0a 	bl	8017cac <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8017098:	e03a      	b.n	8017110 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	2140      	movs	r1, #64	@ 0x40
 801709e:	0018      	movs	r0, r3
 80170a0:	f001 f8fc 	bl	801829c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80170a4:	e034      	b.n	8017110 <I2C_Master_ISR_IT+0x248>
 80170a6:	e033      	b.n	8017110 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80170a8:	697b      	ldr	r3, [r7, #20]
 80170aa:	099b      	lsrs	r3, r3, #6
 80170ac:	001a      	movs	r2, r3
 80170ae:	2301      	movs	r3, #1
 80170b0:	4013      	ands	r3, r2
 80170b2:	d02d      	beq.n	8017110 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	099b      	lsrs	r3, r3, #6
 80170b8:	001a      	movs	r2, r3
 80170ba:	2301      	movs	r3, #1
 80170bc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80170be:	d027      	beq.n	8017110 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80170c4:	b29b      	uxth	r3, r3
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d11d      	bne.n	8017106 <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	685a      	ldr	r2, [r3, #4]
 80170d0:	2380      	movs	r3, #128	@ 0x80
 80170d2:	049b      	lsls	r3, r3, #18
 80170d4:	401a      	ands	r2, r3
 80170d6:	2380      	movs	r3, #128	@ 0x80
 80170d8:	049b      	lsls	r3, r3, #18
 80170da:	429a      	cmp	r2, r3
 80170dc:	d018      	beq.n	8017110 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80170e2:	4a19      	ldr	r2, [pc, #100]	@ (8017148 <I2C_Master_ISR_IT+0x280>)
 80170e4:	4293      	cmp	r3, r2
 80170e6:	d109      	bne.n	80170fc <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	685a      	ldr	r2, [r3, #4]
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	2180      	movs	r1, #128	@ 0x80
 80170f4:	01c9      	lsls	r1, r1, #7
 80170f6:	430a      	orrs	r2, r1
 80170f8:	605a      	str	r2, [r3, #4]
 80170fa:	e009      	b.n	8017110 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	0018      	movs	r0, r3
 8017100:	f000 fdd4 	bl	8017cac <I2C_ITMasterSeqCplt>
 8017104:	e004      	b.n	8017110 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	2140      	movs	r1, #64	@ 0x40
 801710a:	0018      	movs	r0, r3
 801710c:	f001 f8c6 	bl	801829c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017110:	697b      	ldr	r3, [r7, #20]
 8017112:	095b      	lsrs	r3, r3, #5
 8017114:	001a      	movs	r2, r3
 8017116:	2301      	movs	r3, #1
 8017118:	4013      	ands	r3, r2
 801711a:	d00b      	beq.n	8017134 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	095b      	lsrs	r3, r3, #5
 8017120:	001a      	movs	r2, r3
 8017122:	2301      	movs	r3, #1
 8017124:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017126:	d005      	beq.n	8017134 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8017128:	697a      	ldr	r2, [r7, #20]
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	0011      	movs	r1, r2
 801712e:	0018      	movs	r0, r3
 8017130:	f000 fe64 	bl	8017dfc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	2240      	movs	r2, #64	@ 0x40
 8017138:	2100      	movs	r1, #0
 801713a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801713c:	2300      	movs	r3, #0
}
 801713e:	0018      	movs	r0, r3
 8017140:	46bd      	mov	sp, r7
 8017142:	b007      	add	sp, #28
 8017144:	bd90      	pop	{r4, r7, pc}
 8017146:	46c0      	nop			@ (mov r8, r8)
 8017148:	ffff0000 	.word	0xffff0000

0801714c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 801714c:	b580      	push	{r7, lr}
 801714e:	b086      	sub	sp, #24
 8017150:	af00      	add	r7, sp, #0
 8017152:	60f8      	str	r0, [r7, #12]
 8017154:	60b9      	str	r1, [r7, #8]
 8017156:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801715c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 801715e:	68bb      	ldr	r3, [r7, #8]
 8017160:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	2240      	movs	r2, #64	@ 0x40
 8017166:	5c9b      	ldrb	r3, [r3, r2]
 8017168:	2b01      	cmp	r3, #1
 801716a:	d101      	bne.n	8017170 <I2C_Slave_ISR_IT+0x24>
 801716c:	2302      	movs	r3, #2
 801716e:	e0fa      	b.n	8017366 <I2C_Slave_ISR_IT+0x21a>
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	2240      	movs	r2, #64	@ 0x40
 8017174:	2101      	movs	r1, #1
 8017176:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017178:	693b      	ldr	r3, [r7, #16]
 801717a:	095b      	lsrs	r3, r3, #5
 801717c:	001a      	movs	r2, r3
 801717e:	2301      	movs	r3, #1
 8017180:	4013      	ands	r3, r2
 8017182:	d00b      	beq.n	801719c <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	095b      	lsrs	r3, r3, #5
 8017188:	001a      	movs	r2, r3
 801718a:	2301      	movs	r3, #1
 801718c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801718e:	d005      	beq.n	801719c <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8017190:	693a      	ldr	r2, [r7, #16]
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	0011      	movs	r1, r2
 8017196:	0018      	movs	r0, r3
 8017198:	f000 ff02 	bl	8017fa0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801719c:	693b      	ldr	r3, [r7, #16]
 801719e:	091b      	lsrs	r3, r3, #4
 80171a0:	001a      	movs	r2, r3
 80171a2:	2301      	movs	r3, #1
 80171a4:	4013      	ands	r3, r2
 80171a6:	d054      	beq.n	8017252 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	091b      	lsrs	r3, r3, #4
 80171ac:	001a      	movs	r2, r3
 80171ae:	2301      	movs	r3, #1
 80171b0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80171b2:	d04e      	beq.n	8017252 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80171b8:	b29b      	uxth	r3, r3
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d12d      	bne.n	801721a <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	2241      	movs	r2, #65	@ 0x41
 80171c2:	5c9b      	ldrb	r3, [r3, r2]
 80171c4:	b2db      	uxtb	r3, r3
 80171c6:	2b28      	cmp	r3, #40	@ 0x28
 80171c8:	d10b      	bne.n	80171e2 <I2C_Slave_ISR_IT+0x96>
 80171ca:	697a      	ldr	r2, [r7, #20]
 80171cc:	2380      	movs	r3, #128	@ 0x80
 80171ce:	049b      	lsls	r3, r3, #18
 80171d0:	429a      	cmp	r2, r3
 80171d2:	d106      	bne.n	80171e2 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80171d4:	693a      	ldr	r2, [r7, #16]
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	0011      	movs	r1, r2
 80171da:	0018      	movs	r0, r3
 80171dc:	f001 f804 	bl	80181e8 <I2C_ITListenCplt>
 80171e0:	e036      	b.n	8017250 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	2241      	movs	r2, #65	@ 0x41
 80171e6:	5c9b      	ldrb	r3, [r3, r2]
 80171e8:	b2db      	uxtb	r3, r3
 80171ea:	2b29      	cmp	r3, #41	@ 0x29
 80171ec:	d110      	bne.n	8017210 <I2C_Slave_ISR_IT+0xc4>
 80171ee:	697b      	ldr	r3, [r7, #20]
 80171f0:	4a5f      	ldr	r2, [pc, #380]	@ (8017370 <I2C_Slave_ISR_IT+0x224>)
 80171f2:	4293      	cmp	r3, r2
 80171f4:	d00c      	beq.n	8017210 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	2210      	movs	r2, #16
 80171fc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	0018      	movs	r0, r3
 8017202:	f001 f976 	bl	80184f2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	0018      	movs	r0, r3
 801720a:	f000 fd91 	bl	8017d30 <I2C_ITSlaveSeqCplt>
 801720e:	e01f      	b.n	8017250 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	2210      	movs	r2, #16
 8017216:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8017218:	e09d      	b.n	8017356 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	2210      	movs	r2, #16
 8017220:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017226:	2204      	movs	r2, #4
 8017228:	431a      	orrs	r2, r3
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801722e:	697b      	ldr	r3, [r7, #20]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d005      	beq.n	8017240 <I2C_Slave_ISR_IT+0xf4>
 8017234:	697a      	ldr	r2, [r7, #20]
 8017236:	2380      	movs	r3, #128	@ 0x80
 8017238:	045b      	lsls	r3, r3, #17
 801723a:	429a      	cmp	r2, r3
 801723c:	d000      	beq.n	8017240 <I2C_Slave_ISR_IT+0xf4>
 801723e:	e08a      	b.n	8017356 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	0011      	movs	r1, r2
 8017248:	0018      	movs	r0, r3
 801724a:	f001 f827 	bl	801829c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801724e:	e082      	b.n	8017356 <I2C_Slave_ISR_IT+0x20a>
 8017250:	e081      	b.n	8017356 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8017252:	693b      	ldr	r3, [r7, #16]
 8017254:	089b      	lsrs	r3, r3, #2
 8017256:	001a      	movs	r2, r3
 8017258:	2301      	movs	r3, #1
 801725a:	4013      	ands	r3, r2
 801725c:	d031      	beq.n	80172c2 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	089b      	lsrs	r3, r3, #2
 8017262:	001a      	movs	r2, r3
 8017264:	2301      	movs	r3, #1
 8017266:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8017268:	d02b      	beq.n	80172c2 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801726e:	b29b      	uxth	r3, r3
 8017270:	2b00      	cmp	r3, #0
 8017272:	d018      	beq.n	80172a6 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801727e:	b2d2      	uxtb	r2, r2
 8017280:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017286:	1c5a      	adds	r2, r3, #1
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017290:	3b01      	subs	r3, #1
 8017292:	b29a      	uxth	r2, r3
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801729c:	b29b      	uxth	r3, r3
 801729e:	3b01      	subs	r3, #1
 80172a0:	b29a      	uxth	r2, r3
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80172aa:	b29b      	uxth	r3, r3
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d154      	bne.n	801735a <I2C_Slave_ISR_IT+0x20e>
 80172b0:	697b      	ldr	r3, [r7, #20]
 80172b2:	4a2f      	ldr	r2, [pc, #188]	@ (8017370 <I2C_Slave_ISR_IT+0x224>)
 80172b4:	4293      	cmp	r3, r2
 80172b6:	d050      	beq.n	801735a <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	0018      	movs	r0, r3
 80172bc:	f000 fd38 	bl	8017d30 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80172c0:	e04b      	b.n	801735a <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80172c2:	693b      	ldr	r3, [r7, #16]
 80172c4:	08db      	lsrs	r3, r3, #3
 80172c6:	001a      	movs	r2, r3
 80172c8:	2301      	movs	r3, #1
 80172ca:	4013      	ands	r3, r2
 80172cc:	d00c      	beq.n	80172e8 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	08db      	lsrs	r3, r3, #3
 80172d2:	001a      	movs	r2, r3
 80172d4:	2301      	movs	r3, #1
 80172d6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80172d8:	d006      	beq.n	80172e8 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80172da:	693a      	ldr	r2, [r7, #16]
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	0011      	movs	r1, r2
 80172e0:	0018      	movs	r0, r3
 80172e2:	f000 fc3f 	bl	8017b64 <I2C_ITAddrCplt>
 80172e6:	e039      	b.n	801735c <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80172e8:	693b      	ldr	r3, [r7, #16]
 80172ea:	085b      	lsrs	r3, r3, #1
 80172ec:	001a      	movs	r2, r3
 80172ee:	2301      	movs	r3, #1
 80172f0:	4013      	ands	r3, r2
 80172f2:	d033      	beq.n	801735c <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	085b      	lsrs	r3, r3, #1
 80172f8:	001a      	movs	r2, r3
 80172fa:	2301      	movs	r3, #1
 80172fc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80172fe:	d02d      	beq.n	801735c <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017304:	b29b      	uxth	r3, r3
 8017306:	2b00      	cmp	r3, #0
 8017308:	d018      	beq.n	801733c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801730e:	781a      	ldrb	r2, [r3, #0]
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801731a:	1c5a      	adds	r2, r3, #1
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017324:	b29b      	uxth	r3, r3
 8017326:	3b01      	subs	r3, #1
 8017328:	b29a      	uxth	r2, r3
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017332:	3b01      	subs	r3, #1
 8017334:	b29a      	uxth	r2, r3
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	851a      	strh	r2, [r3, #40]	@ 0x28
 801733a:	e00f      	b.n	801735c <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 801733c:	697a      	ldr	r2, [r7, #20]
 801733e:	2380      	movs	r3, #128	@ 0x80
 8017340:	045b      	lsls	r3, r3, #17
 8017342:	429a      	cmp	r2, r3
 8017344:	d002      	beq.n	801734c <I2C_Slave_ISR_IT+0x200>
 8017346:	697b      	ldr	r3, [r7, #20]
 8017348:	2b00      	cmp	r3, #0
 801734a:	d107      	bne.n	801735c <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	0018      	movs	r0, r3
 8017350:	f000 fcee 	bl	8017d30 <I2C_ITSlaveSeqCplt>
 8017354:	e002      	b.n	801735c <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8017356:	46c0      	nop			@ (mov r8, r8)
 8017358:	e000      	b.n	801735c <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 801735a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	2240      	movs	r2, #64	@ 0x40
 8017360:	2100      	movs	r1, #0
 8017362:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017364:	2300      	movs	r3, #0
}
 8017366:	0018      	movs	r0, r3
 8017368:	46bd      	mov	sp, r7
 801736a:	b006      	add	sp, #24
 801736c:	bd80      	pop	{r7, pc}
 801736e:	46c0      	nop			@ (mov r8, r8)
 8017370:	ffff0000 	.word	0xffff0000

08017374 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8017374:	b590      	push	{r4, r7, lr}
 8017376:	b089      	sub	sp, #36	@ 0x24
 8017378:	af02      	add	r7, sp, #8
 801737a:	60f8      	str	r0, [r7, #12]
 801737c:	60b9      	str	r1, [r7, #8]
 801737e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	2240      	movs	r2, #64	@ 0x40
 8017384:	5c9b      	ldrb	r3, [r3, r2]
 8017386:	2b01      	cmp	r3, #1
 8017388:	d101      	bne.n	801738e <I2C_Master_ISR_DMA+0x1a>
 801738a:	2302      	movs	r3, #2
 801738c:	e0f7      	b.n	801757e <I2C_Master_ISR_DMA+0x20a>
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	2240      	movs	r2, #64	@ 0x40
 8017392:	2101      	movs	r1, #1
 8017394:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017396:	68bb      	ldr	r3, [r7, #8]
 8017398:	091b      	lsrs	r3, r3, #4
 801739a:	001a      	movs	r2, r3
 801739c:	2301      	movs	r3, #1
 801739e:	4013      	ands	r3, r2
 80173a0:	d019      	beq.n	80173d6 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	091b      	lsrs	r3, r3, #4
 80173a6:	001a      	movs	r2, r3
 80173a8:	2301      	movs	r3, #1
 80173aa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80173ac:	d013      	beq.n	80173d6 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	2210      	movs	r2, #16
 80173b4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80173ba:	2204      	movs	r2, #4
 80173bc:	431a      	orrs	r2, r3
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	2120      	movs	r1, #32
 80173c6:	0018      	movs	r0, r3
 80173c8:	f001 fc1a 	bl	8018c00 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	0018      	movs	r0, r3
 80173d0:	f001 f88f 	bl	80184f2 <I2C_Flush_TXDR>
 80173d4:	e0ce      	b.n	8017574 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80173d6:	68bb      	ldr	r3, [r7, #8]
 80173d8:	09db      	lsrs	r3, r3, #7
 80173da:	001a      	movs	r2, r3
 80173dc:	2301      	movs	r3, #1
 80173de:	4013      	ands	r3, r2
 80173e0:	d100      	bne.n	80173e4 <I2C_Master_ISR_DMA+0x70>
 80173e2:	e07e      	b.n	80174e2 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	099b      	lsrs	r3, r3, #6
 80173e8:	001a      	movs	r2, r3
 80173ea:	2301      	movs	r3, #1
 80173ec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80173ee:	d100      	bne.n	80173f2 <I2C_Master_ISR_DMA+0x7e>
 80173f0:	e077      	b.n	80174e2 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	681a      	ldr	r2, [r3, #0]
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	2140      	movs	r1, #64	@ 0x40
 80173fe:	438a      	bics	r2, r1
 8017400:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017406:	b29b      	uxth	r3, r3
 8017408:	2b00      	cmp	r3, #0
 801740a:	d055      	beq.n	80174b8 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	685b      	ldr	r3, [r3, #4]
 8017412:	b29a      	uxth	r2, r3
 8017414:	2312      	movs	r3, #18
 8017416:	18fb      	adds	r3, r7, r3
 8017418:	0592      	lsls	r2, r2, #22
 801741a:	0d92      	lsrs	r2, r2, #22
 801741c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017422:	b29b      	uxth	r3, r3
 8017424:	2bff      	cmp	r3, #255	@ 0xff
 8017426:	d906      	bls.n	8017436 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	22ff      	movs	r2, #255	@ 0xff
 801742c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 801742e:	2380      	movs	r3, #128	@ 0x80
 8017430:	045b      	lsls	r3, r3, #17
 8017432:	617b      	str	r3, [r7, #20]
 8017434:	e010      	b.n	8017458 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801743a:	b29a      	uxth	r2, r3
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017444:	4a50      	ldr	r2, [pc, #320]	@ (8017588 <I2C_Master_ISR_DMA+0x214>)
 8017446:	4293      	cmp	r3, r2
 8017448:	d003      	beq.n	8017452 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801744e:	617b      	str	r3, [r7, #20]
 8017450:	e002      	b.n	8017458 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8017452:	2380      	movs	r3, #128	@ 0x80
 8017454:	049b      	lsls	r3, r3, #18
 8017456:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801745c:	b2da      	uxtb	r2, r3
 801745e:	697c      	ldr	r4, [r7, #20]
 8017460:	2312      	movs	r3, #18
 8017462:	18fb      	adds	r3, r7, r3
 8017464:	8819      	ldrh	r1, [r3, #0]
 8017466:	68f8      	ldr	r0, [r7, #12]
 8017468:	2300      	movs	r3, #0
 801746a:	9300      	str	r3, [sp, #0]
 801746c:	0023      	movs	r3, r4
 801746e:	f001 fb8d 	bl	8018b8c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017476:	b29a      	uxth	r2, r3
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801747c:	1ad3      	subs	r3, r2, r3
 801747e:	b29a      	uxth	r2, r3
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	2241      	movs	r2, #65	@ 0x41
 8017488:	5c9b      	ldrb	r3, [r3, r2]
 801748a:	b2db      	uxtb	r3, r3
 801748c:	2b22      	cmp	r3, #34	@ 0x22
 801748e:	d109      	bne.n	80174a4 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	681a      	ldr	r2, [r3, #0]
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	2180      	movs	r1, #128	@ 0x80
 801749c:	0209      	lsls	r1, r1, #8
 801749e:	430a      	orrs	r2, r1
 80174a0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80174a2:	e067      	b.n	8017574 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	681a      	ldr	r2, [r3, #0]
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	2180      	movs	r1, #128	@ 0x80
 80174b0:	01c9      	lsls	r1, r1, #7
 80174b2:	430a      	orrs	r2, r1
 80174b4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80174b6:	e05d      	b.n	8017574 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	685a      	ldr	r2, [r3, #4]
 80174be:	2380      	movs	r3, #128	@ 0x80
 80174c0:	049b      	lsls	r3, r3, #18
 80174c2:	401a      	ands	r2, r3
 80174c4:	2380      	movs	r3, #128	@ 0x80
 80174c6:	049b      	lsls	r3, r3, #18
 80174c8:	429a      	cmp	r2, r3
 80174ca:	d004      	beq.n	80174d6 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	0018      	movs	r0, r3
 80174d0:	f000 fbec 	bl	8017cac <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80174d4:	e04e      	b.n	8017574 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	2140      	movs	r1, #64	@ 0x40
 80174da:	0018      	movs	r0, r3
 80174dc:	f000 fede 	bl	801829c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80174e0:	e048      	b.n	8017574 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80174e2:	68bb      	ldr	r3, [r7, #8]
 80174e4:	099b      	lsrs	r3, r3, #6
 80174e6:	001a      	movs	r2, r3
 80174e8:	2301      	movs	r3, #1
 80174ea:	4013      	ands	r3, r2
 80174ec:	d02e      	beq.n	801754c <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	099b      	lsrs	r3, r3, #6
 80174f2:	001a      	movs	r2, r3
 80174f4:	2301      	movs	r3, #1
 80174f6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80174f8:	d028      	beq.n	801754c <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80174fe:	b29b      	uxth	r3, r3
 8017500:	2b00      	cmp	r3, #0
 8017502:	d11d      	bne.n	8017540 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	685a      	ldr	r2, [r3, #4]
 801750a:	2380      	movs	r3, #128	@ 0x80
 801750c:	049b      	lsls	r3, r3, #18
 801750e:	401a      	ands	r2, r3
 8017510:	2380      	movs	r3, #128	@ 0x80
 8017512:	049b      	lsls	r3, r3, #18
 8017514:	429a      	cmp	r2, r3
 8017516:	d02c      	beq.n	8017572 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801751c:	4a1a      	ldr	r2, [pc, #104]	@ (8017588 <I2C_Master_ISR_DMA+0x214>)
 801751e:	4293      	cmp	r3, r2
 8017520:	d109      	bne.n	8017536 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8017522:	68fb      	ldr	r3, [r7, #12]
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	685a      	ldr	r2, [r3, #4]
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	2180      	movs	r1, #128	@ 0x80
 801752e:	01c9      	lsls	r1, r1, #7
 8017530:	430a      	orrs	r2, r1
 8017532:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8017534:	e01d      	b.n	8017572 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	0018      	movs	r0, r3
 801753a:	f000 fbb7 	bl	8017cac <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 801753e:	e018      	b.n	8017572 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	2140      	movs	r1, #64	@ 0x40
 8017544:	0018      	movs	r0, r3
 8017546:	f000 fea9 	bl	801829c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801754a:	e012      	b.n	8017572 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801754c:	68bb      	ldr	r3, [r7, #8]
 801754e:	095b      	lsrs	r3, r3, #5
 8017550:	001a      	movs	r2, r3
 8017552:	2301      	movs	r3, #1
 8017554:	4013      	ands	r3, r2
 8017556:	d00d      	beq.n	8017574 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	095b      	lsrs	r3, r3, #5
 801755c:	001a      	movs	r2, r3
 801755e:	2301      	movs	r3, #1
 8017560:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017562:	d007      	beq.n	8017574 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8017564:	68ba      	ldr	r2, [r7, #8]
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	0011      	movs	r1, r2
 801756a:	0018      	movs	r0, r3
 801756c:	f000 fc46 	bl	8017dfc <I2C_ITMasterCplt>
 8017570:	e000      	b.n	8017574 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8017572:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	2240      	movs	r2, #64	@ 0x40
 8017578:	2100      	movs	r1, #0
 801757a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801757c:	2300      	movs	r3, #0
}
 801757e:	0018      	movs	r0, r3
 8017580:	46bd      	mov	sp, r7
 8017582:	b007      	add	sp, #28
 8017584:	bd90      	pop	{r4, r7, pc}
 8017586:	46c0      	nop			@ (mov r8, r8)
 8017588:	ffff0000 	.word	0xffff0000

0801758c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 801758c:	b590      	push	{r4, r7, lr}
 801758e:	b089      	sub	sp, #36	@ 0x24
 8017590:	af02      	add	r7, sp, #8
 8017592:	60f8      	str	r0, [r7, #12]
 8017594:	60b9      	str	r1, [r7, #8]
 8017596:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8017598:	4b92      	ldr	r3, [pc, #584]	@ (80177e4 <I2C_Mem_ISR_DMA+0x258>)
 801759a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	2240      	movs	r2, #64	@ 0x40
 80175a0:	5c9b      	ldrb	r3, [r3, r2]
 80175a2:	2b01      	cmp	r3, #1
 80175a4:	d101      	bne.n	80175aa <I2C_Mem_ISR_DMA+0x1e>
 80175a6:	2302      	movs	r3, #2
 80175a8:	e118      	b.n	80177dc <I2C_Mem_ISR_DMA+0x250>
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	2240      	movs	r2, #64	@ 0x40
 80175ae:	2101      	movs	r1, #1
 80175b0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80175b2:	68bb      	ldr	r3, [r7, #8]
 80175b4:	091b      	lsrs	r3, r3, #4
 80175b6:	001a      	movs	r2, r3
 80175b8:	2301      	movs	r3, #1
 80175ba:	4013      	ands	r3, r2
 80175bc:	d019      	beq.n	80175f2 <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	091b      	lsrs	r3, r3, #4
 80175c2:	001a      	movs	r2, r3
 80175c4:	2301      	movs	r3, #1
 80175c6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80175c8:	d013      	beq.n	80175f2 <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	2210      	movs	r2, #16
 80175d0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80175d6:	2204      	movs	r2, #4
 80175d8:	431a      	orrs	r2, r3
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	2120      	movs	r1, #32
 80175e2:	0018      	movs	r0, r3
 80175e4:	f001 fb0c 	bl	8018c00 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	0018      	movs	r0, r3
 80175ec:	f000 ff81 	bl	80184f2 <I2C_Flush_TXDR>
 80175f0:	e0ef      	b.n	80177d2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80175f2:	68bb      	ldr	r3, [r7, #8]
 80175f4:	085b      	lsrs	r3, r3, #1
 80175f6:	001a      	movs	r2, r3
 80175f8:	2301      	movs	r3, #1
 80175fa:	4013      	ands	r3, r2
 80175fc:	d00f      	beq.n	801761e <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	085b      	lsrs	r3, r3, #1
 8017602:	001a      	movs	r2, r3
 8017604:	2301      	movs	r3, #1
 8017606:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017608:	d009      	beq.n	801761e <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	68fa      	ldr	r2, [r7, #12]
 8017610:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8017612:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	2201      	movs	r2, #1
 8017618:	4252      	negs	r2, r2
 801761a:	651a      	str	r2, [r3, #80]	@ 0x50
 801761c:	e0d9      	b.n	80177d2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801761e:	68bb      	ldr	r3, [r7, #8]
 8017620:	09db      	lsrs	r3, r3, #7
 8017622:	001a      	movs	r2, r3
 8017624:	2301      	movs	r3, #1
 8017626:	4013      	ands	r3, r2
 8017628:	d060      	beq.n	80176ec <I2C_Mem_ISR_DMA+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	099b      	lsrs	r3, r3, #6
 801762e:	001a      	movs	r2, r3
 8017630:	2301      	movs	r3, #1
 8017632:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8017634:	d05a      	beq.n	80176ec <I2C_Mem_ISR_DMA+0x160>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	2110      	movs	r1, #16
 801763a:	0018      	movs	r0, r3
 801763c:	f001 fae0 	bl	8018c00 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017644:	b29b      	uxth	r3, r3
 8017646:	2b00      	cmp	r3, #0
 8017648:	d04a      	beq.n	80176e0 <I2C_Mem_ISR_DMA+0x154>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801764e:	b29b      	uxth	r3, r3
 8017650:	2bff      	cmp	r3, #255	@ 0xff
 8017652:	d910      	bls.n	8017676 <I2C_Mem_ISR_DMA+0xea>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	22ff      	movs	r2, #255	@ 0xff
 8017658:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801765e:	b299      	uxth	r1, r3
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017664:	b2da      	uxtb	r2, r3
 8017666:	2380      	movs	r3, #128	@ 0x80
 8017668:	045b      	lsls	r3, r3, #17
 801766a:	68f8      	ldr	r0, [r7, #12]
 801766c:	2400      	movs	r4, #0
 801766e:	9400      	str	r4, [sp, #0]
 8017670:	f001 fa8c 	bl	8018b8c <I2C_TransferConfig>
 8017674:	e011      	b.n	801769a <I2C_Mem_ISR_DMA+0x10e>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801767a:	b29a      	uxth	r2, r3
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017684:	b299      	uxth	r1, r3
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801768a:	b2da      	uxtb	r2, r3
 801768c:	2380      	movs	r3, #128	@ 0x80
 801768e:	049b      	lsls	r3, r3, #18
 8017690:	68f8      	ldr	r0, [r7, #12]
 8017692:	2400      	movs	r4, #0
 8017694:	9400      	str	r4, [sp, #0]
 8017696:	f001 fa79 	bl	8018b8c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801769e:	b29a      	uxth	r2, r3
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80176a4:	1ad3      	subs	r3, r2, r3
 80176a6:	b29a      	uxth	r2, r3
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	2241      	movs	r2, #65	@ 0x41
 80176b0:	5c9b      	ldrb	r3, [r3, r2]
 80176b2:	b2db      	uxtb	r3, r3
 80176b4:	2b22      	cmp	r3, #34	@ 0x22
 80176b6:	d109      	bne.n	80176cc <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	681a      	ldr	r2, [r3, #0]
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	2180      	movs	r1, #128	@ 0x80
 80176c4:	0209      	lsls	r1, r1, #8
 80176c6:	430a      	orrs	r2, r1
 80176c8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80176ca:	e082      	b.n	80177d2 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	681a      	ldr	r2, [r3, #0]
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	2180      	movs	r1, #128	@ 0x80
 80176d8:	01c9      	lsls	r1, r1, #7
 80176da:	430a      	orrs	r2, r1
 80176dc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80176de:	e078      	b.n	80177d2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	2140      	movs	r1, #64	@ 0x40
 80176e4:	0018      	movs	r0, r3
 80176e6:	f000 fdd9 	bl	801829c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80176ea:	e072      	b.n	80177d2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80176ec:	68bb      	ldr	r3, [r7, #8]
 80176ee:	099b      	lsrs	r3, r3, #6
 80176f0:	001a      	movs	r2, r3
 80176f2:	2301      	movs	r3, #1
 80176f4:	4013      	ands	r3, r2
 80176f6:	d05a      	beq.n	80177ae <I2C_Mem_ISR_DMA+0x222>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	099b      	lsrs	r3, r3, #6
 80176fc:	001a      	movs	r2, r3
 80176fe:	2301      	movs	r3, #1
 8017700:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8017702:	d054      	beq.n	80177ae <I2C_Mem_ISR_DMA+0x222>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	2241      	movs	r2, #65	@ 0x41
 8017708:	5c9b      	ldrb	r3, [r3, r2]
 801770a:	b2db      	uxtb	r3, r3
 801770c:	2b22      	cmp	r3, #34	@ 0x22
 801770e:	d101      	bne.n	8017714 <I2C_Mem_ISR_DMA+0x188>
    {
      direction = I2C_GENERATE_START_READ;
 8017710:	4b35      	ldr	r3, [pc, #212]	@ (80177e8 <I2C_Mem_ISR_DMA+0x25c>)
 8017712:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017718:	b29b      	uxth	r3, r3
 801771a:	2bff      	cmp	r3, #255	@ 0xff
 801771c:	d911      	bls.n	8017742 <I2C_Mem_ISR_DMA+0x1b6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	22ff      	movs	r2, #255	@ 0xff
 8017722:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017728:	b299      	uxth	r1, r3
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801772e:	b2da      	uxtb	r2, r3
 8017730:	2380      	movs	r3, #128	@ 0x80
 8017732:	045c      	lsls	r4, r3, #17
 8017734:	68f8      	ldr	r0, [r7, #12]
 8017736:	697b      	ldr	r3, [r7, #20]
 8017738:	9300      	str	r3, [sp, #0]
 801773a:	0023      	movs	r3, r4
 801773c:	f001 fa26 	bl	8018b8c <I2C_TransferConfig>
 8017740:	e012      	b.n	8017768 <I2C_Mem_ISR_DMA+0x1dc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017746:	b29a      	uxth	r2, r3
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017750:	b299      	uxth	r1, r3
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017756:	b2da      	uxtb	r2, r3
 8017758:	2380      	movs	r3, #128	@ 0x80
 801775a:	049c      	lsls	r4, r3, #18
 801775c:	68f8      	ldr	r0, [r7, #12]
 801775e:	697b      	ldr	r3, [r7, #20]
 8017760:	9300      	str	r3, [sp, #0]
 8017762:	0023      	movs	r3, r4
 8017764:	f001 fa12 	bl	8018b8c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801776c:	b29a      	uxth	r2, r3
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017772:	1ad3      	subs	r3, r2, r3
 8017774:	b29a      	uxth	r2, r3
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	2241      	movs	r2, #65	@ 0x41
 801777e:	5c9b      	ldrb	r3, [r3, r2]
 8017780:	b2db      	uxtb	r3, r3
 8017782:	2b22      	cmp	r3, #34	@ 0x22
 8017784:	d109      	bne.n	801779a <I2C_Mem_ISR_DMA+0x20e>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	681a      	ldr	r2, [r3, #0]
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	2180      	movs	r1, #128	@ 0x80
 8017792:	0209      	lsls	r1, r1, #8
 8017794:	430a      	orrs	r2, r1
 8017796:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017798:	e01b      	b.n	80177d2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	681a      	ldr	r2, [r3, #0]
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	2180      	movs	r1, #128	@ 0x80
 80177a6:	01c9      	lsls	r1, r1, #7
 80177a8:	430a      	orrs	r2, r1
 80177aa:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80177ac:	e011      	b.n	80177d2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80177ae:	68bb      	ldr	r3, [r7, #8]
 80177b0:	095b      	lsrs	r3, r3, #5
 80177b2:	001a      	movs	r2, r3
 80177b4:	2301      	movs	r3, #1
 80177b6:	4013      	ands	r3, r2
 80177b8:	d00b      	beq.n	80177d2 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	095b      	lsrs	r3, r3, #5
 80177be:	001a      	movs	r2, r3
 80177c0:	2301      	movs	r3, #1
 80177c2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80177c4:	d005      	beq.n	80177d2 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80177c6:	68ba      	ldr	r2, [r7, #8]
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	0011      	movs	r1, r2
 80177cc:	0018      	movs	r0, r3
 80177ce:	f000 fb15 	bl	8017dfc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	2240      	movs	r2, #64	@ 0x40
 80177d6:	2100      	movs	r1, #0
 80177d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80177da:	2300      	movs	r3, #0
}
 80177dc:	0018      	movs	r0, r3
 80177de:	46bd      	mov	sp, r7
 80177e0:	b007      	add	sp, #28
 80177e2:	bd90      	pop	{r4, r7, pc}
 80177e4:	80002000 	.word	0x80002000
 80177e8:	80002400 	.word	0x80002400

080177ec <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80177ec:	b580      	push	{r7, lr}
 80177ee:	b088      	sub	sp, #32
 80177f0:	af00      	add	r7, sp, #0
 80177f2:	60f8      	str	r0, [r7, #12]
 80177f4:	60b9      	str	r1, [r7, #8]
 80177f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80177fc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80177fe:	2300      	movs	r3, #0
 8017800:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	2240      	movs	r2, #64	@ 0x40
 8017806:	5c9b      	ldrb	r3, [r3, r2]
 8017808:	2b01      	cmp	r3, #1
 801780a:	d101      	bne.n	8017810 <I2C_Slave_ISR_DMA+0x24>
 801780c:	2302      	movs	r3, #2
 801780e:	e0dd      	b.n	80179cc <I2C_Slave_ISR_DMA+0x1e0>
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	2240      	movs	r2, #64	@ 0x40
 8017814:	2101      	movs	r1, #1
 8017816:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017818:	68bb      	ldr	r3, [r7, #8]
 801781a:	095b      	lsrs	r3, r3, #5
 801781c:	001a      	movs	r2, r3
 801781e:	2301      	movs	r3, #1
 8017820:	4013      	ands	r3, r2
 8017822:	d00b      	beq.n	801783c <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	095b      	lsrs	r3, r3, #5
 8017828:	001a      	movs	r2, r3
 801782a:	2301      	movs	r3, #1
 801782c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801782e:	d005      	beq.n	801783c <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8017830:	68ba      	ldr	r2, [r7, #8]
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	0011      	movs	r1, r2
 8017836:	0018      	movs	r0, r3
 8017838:	f000 fbb2 	bl	8017fa0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801783c:	68bb      	ldr	r3, [r7, #8]
 801783e:	091b      	lsrs	r3, r3, #4
 8017840:	001a      	movs	r2, r3
 8017842:	2301      	movs	r3, #1
 8017844:	4013      	ands	r3, r2
 8017846:	d100      	bne.n	801784a <I2C_Slave_ISR_DMA+0x5e>
 8017848:	e0a9      	b.n	801799e <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	091b      	lsrs	r3, r3, #4
 801784e:	001a      	movs	r2, r3
 8017850:	2301      	movs	r3, #1
 8017852:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017854:	d100      	bne.n	8017858 <I2C_Slave_ISR_DMA+0x6c>
 8017856:	e0a2      	b.n	801799e <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	0b9b      	lsrs	r3, r3, #14
 801785c:	001a      	movs	r2, r3
 801785e:	2301      	movs	r3, #1
 8017860:	4013      	ands	r3, r2
 8017862:	d106      	bne.n	8017872 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	0bdb      	lsrs	r3, r3, #15
 8017868:	001a      	movs	r2, r3
 801786a:	2301      	movs	r3, #1
 801786c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801786e:	d100      	bne.n	8017872 <I2C_Slave_ISR_DMA+0x86>
 8017870:	e08e      	b.n	8017990 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017876:	2b00      	cmp	r3, #0
 8017878:	d00d      	beq.n	8017896 <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	0bdb      	lsrs	r3, r3, #15
 801787e:	001a      	movs	r2, r3
 8017880:	2301      	movs	r3, #1
 8017882:	4013      	ands	r3, r2
 8017884:	d007      	beq.n	8017896 <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	685b      	ldr	r3, [r3, #4]
 801788e:	2b00      	cmp	r3, #0
 8017890:	d101      	bne.n	8017896 <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8017892:	2301      	movs	r3, #1
 8017894:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801789a:	2b00      	cmp	r3, #0
 801789c:	d00d      	beq.n	80178ba <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	0b9b      	lsrs	r3, r3, #14
 80178a2:	001a      	movs	r2, r3
 80178a4:	2301      	movs	r3, #1
 80178a6:	4013      	ands	r3, r2
 80178a8:	d007      	beq.n	80178ba <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	685b      	ldr	r3, [r3, #4]
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d101      	bne.n	80178ba <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 80178b6:	2301      	movs	r3, #1
 80178b8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80178ba:	69fb      	ldr	r3, [r7, #28]
 80178bc:	2b01      	cmp	r3, #1
 80178be:	d12d      	bne.n	801791c <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	2241      	movs	r2, #65	@ 0x41
 80178c4:	5c9b      	ldrb	r3, [r3, r2]
 80178c6:	b2db      	uxtb	r3, r3
 80178c8:	2b28      	cmp	r3, #40	@ 0x28
 80178ca:	d10b      	bne.n	80178e4 <I2C_Slave_ISR_DMA+0xf8>
 80178cc:	69ba      	ldr	r2, [r7, #24]
 80178ce:	2380      	movs	r3, #128	@ 0x80
 80178d0:	049b      	lsls	r3, r3, #18
 80178d2:	429a      	cmp	r2, r3
 80178d4:	d106      	bne.n	80178e4 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80178d6:	68ba      	ldr	r2, [r7, #8]
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	0011      	movs	r1, r2
 80178dc:	0018      	movs	r0, r3
 80178de:	f000 fc83 	bl	80181e8 <I2C_ITListenCplt>
 80178e2:	e054      	b.n	801798e <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	2241      	movs	r2, #65	@ 0x41
 80178e8:	5c9b      	ldrb	r3, [r3, r2]
 80178ea:	b2db      	uxtb	r3, r3
 80178ec:	2b29      	cmp	r3, #41	@ 0x29
 80178ee:	d110      	bne.n	8017912 <I2C_Slave_ISR_DMA+0x126>
 80178f0:	69bb      	ldr	r3, [r7, #24]
 80178f2:	4a38      	ldr	r2, [pc, #224]	@ (80179d4 <I2C_Slave_ISR_DMA+0x1e8>)
 80178f4:	4293      	cmp	r3, r2
 80178f6:	d00c      	beq.n	8017912 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	2210      	movs	r2, #16
 80178fe:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	0018      	movs	r0, r3
 8017904:	f000 fdf5 	bl	80184f2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	0018      	movs	r0, r3
 801790c:	f000 fa10 	bl	8017d30 <I2C_ITSlaveSeqCplt>
 8017910:	e03d      	b.n	801798e <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	681b      	ldr	r3, [r3, #0]
 8017916:	2210      	movs	r2, #16
 8017918:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 801791a:	e03e      	b.n	801799a <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	2210      	movs	r2, #16
 8017922:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017928:	2204      	movs	r2, #4
 801792a:	431a      	orrs	r2, r3
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8017930:	2317      	movs	r3, #23
 8017932:	18fb      	adds	r3, r7, r3
 8017934:	68fa      	ldr	r2, [r7, #12]
 8017936:	2141      	movs	r1, #65	@ 0x41
 8017938:	5c52      	ldrb	r2, [r2, r1]
 801793a:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801793c:	69bb      	ldr	r3, [r7, #24]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d004      	beq.n	801794c <I2C_Slave_ISR_DMA+0x160>
 8017942:	69ba      	ldr	r2, [r7, #24]
 8017944:	2380      	movs	r3, #128	@ 0x80
 8017946:	045b      	lsls	r3, r3, #17
 8017948:	429a      	cmp	r2, r3
 801794a:	d126      	bne.n	801799a <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801794c:	2217      	movs	r2, #23
 801794e:	18bb      	adds	r3, r7, r2
 8017950:	781b      	ldrb	r3, [r3, #0]
 8017952:	2b21      	cmp	r3, #33	@ 0x21
 8017954:	d003      	beq.n	801795e <I2C_Slave_ISR_DMA+0x172>
 8017956:	18bb      	adds	r3, r7, r2
 8017958:	781b      	ldrb	r3, [r3, #0]
 801795a:	2b29      	cmp	r3, #41	@ 0x29
 801795c:	d103      	bne.n	8017966 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	2221      	movs	r2, #33	@ 0x21
 8017962:	631a      	str	r2, [r3, #48]	@ 0x30
 8017964:	e00b      	b.n	801797e <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017966:	2217      	movs	r2, #23
 8017968:	18bb      	adds	r3, r7, r2
 801796a:	781b      	ldrb	r3, [r3, #0]
 801796c:	2b22      	cmp	r3, #34	@ 0x22
 801796e:	d003      	beq.n	8017978 <I2C_Slave_ISR_DMA+0x18c>
 8017970:	18bb      	adds	r3, r7, r2
 8017972:	781b      	ldrb	r3, [r3, #0]
 8017974:	2b2a      	cmp	r3, #42	@ 0x2a
 8017976:	d102      	bne.n	801797e <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	2222      	movs	r2, #34	@ 0x22
 801797c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	0011      	movs	r1, r2
 8017986:	0018      	movs	r0, r3
 8017988:	f000 fc88 	bl	801829c <I2C_ITError>
      if (treatdmanack == 1U)
 801798c:	e005      	b.n	801799a <I2C_Slave_ISR_DMA+0x1ae>
 801798e:	e004      	b.n	801799a <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	2210      	movs	r2, #16
 8017996:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017998:	e013      	b.n	80179c2 <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 801799a:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801799c:	e011      	b.n	80179c2 <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801799e:	68bb      	ldr	r3, [r7, #8]
 80179a0:	08db      	lsrs	r3, r3, #3
 80179a2:	001a      	movs	r2, r3
 80179a4:	2301      	movs	r3, #1
 80179a6:	4013      	ands	r3, r2
 80179a8:	d00b      	beq.n	80179c2 <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	08db      	lsrs	r3, r3, #3
 80179ae:	001a      	movs	r2, r3
 80179b0:	2301      	movs	r3, #1
 80179b2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80179b4:	d005      	beq.n	80179c2 <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80179b6:	68ba      	ldr	r2, [r7, #8]
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	0011      	movs	r1, r2
 80179bc:	0018      	movs	r0, r3
 80179be:	f000 f8d1 	bl	8017b64 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	2240      	movs	r2, #64	@ 0x40
 80179c6:	2100      	movs	r1, #0
 80179c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80179ca:	2300      	movs	r3, #0
}
 80179cc:	0018      	movs	r0, r3
 80179ce:	46bd      	mov	sp, r7
 80179d0:	b008      	add	sp, #32
 80179d2:	bd80      	pop	{r7, pc}
 80179d4:	ffff0000 	.word	0xffff0000

080179d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80179d8:	b5b0      	push	{r4, r5, r7, lr}
 80179da:	b086      	sub	sp, #24
 80179dc:	af02      	add	r7, sp, #8
 80179de:	60f8      	str	r0, [r7, #12]
 80179e0:	000c      	movs	r4, r1
 80179e2:	0010      	movs	r0, r2
 80179e4:	0019      	movs	r1, r3
 80179e6:	250a      	movs	r5, #10
 80179e8:	197b      	adds	r3, r7, r5
 80179ea:	1c22      	adds	r2, r4, #0
 80179ec:	801a      	strh	r2, [r3, #0]
 80179ee:	2308      	movs	r3, #8
 80179f0:	18fb      	adds	r3, r7, r3
 80179f2:	1c02      	adds	r2, r0, #0
 80179f4:	801a      	strh	r2, [r3, #0]
 80179f6:	1dbb      	adds	r3, r7, #6
 80179f8:	1c0a      	adds	r2, r1, #0
 80179fa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80179fc:	1dbb      	adds	r3, r7, #6
 80179fe:	881b      	ldrh	r3, [r3, #0]
 8017a00:	b2da      	uxtb	r2, r3
 8017a02:	2380      	movs	r3, #128	@ 0x80
 8017a04:	045c      	lsls	r4, r3, #17
 8017a06:	197b      	adds	r3, r7, r5
 8017a08:	8819      	ldrh	r1, [r3, #0]
 8017a0a:	68f8      	ldr	r0, [r7, #12]
 8017a0c:	4b23      	ldr	r3, [pc, #140]	@ (8017a9c <I2C_RequestMemoryWrite+0xc4>)
 8017a0e:	9300      	str	r3, [sp, #0]
 8017a10:	0023      	movs	r3, r4
 8017a12:	f001 f8bb 	bl	8018b8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017a18:	6a39      	ldr	r1, [r7, #32]
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	0018      	movs	r0, r3
 8017a1e:	f000 feb1 	bl	8018784 <I2C_WaitOnTXISFlagUntilTimeout>
 8017a22:	1e03      	subs	r3, r0, #0
 8017a24:	d001      	beq.n	8017a2a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8017a26:	2301      	movs	r3, #1
 8017a28:	e033      	b.n	8017a92 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8017a2a:	1dbb      	adds	r3, r7, #6
 8017a2c:	881b      	ldrh	r3, [r3, #0]
 8017a2e:	2b01      	cmp	r3, #1
 8017a30:	d107      	bne.n	8017a42 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017a32:	2308      	movs	r3, #8
 8017a34:	18fb      	adds	r3, r7, r3
 8017a36:	881b      	ldrh	r3, [r3, #0]
 8017a38:	b2da      	uxtb	r2, r3
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8017a40:	e019      	b.n	8017a76 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8017a42:	2308      	movs	r3, #8
 8017a44:	18fb      	adds	r3, r7, r3
 8017a46:	881b      	ldrh	r3, [r3, #0]
 8017a48:	0a1b      	lsrs	r3, r3, #8
 8017a4a:	b29b      	uxth	r3, r3
 8017a4c:	b2da      	uxtb	r2, r3
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017a56:	6a39      	ldr	r1, [r7, #32]
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	0018      	movs	r0, r3
 8017a5c:	f000 fe92 	bl	8018784 <I2C_WaitOnTXISFlagUntilTimeout>
 8017a60:	1e03      	subs	r3, r0, #0
 8017a62:	d001      	beq.n	8017a68 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8017a64:	2301      	movs	r3, #1
 8017a66:	e014      	b.n	8017a92 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017a68:	2308      	movs	r3, #8
 8017a6a:	18fb      	adds	r3, r7, r3
 8017a6c:	881b      	ldrh	r3, [r3, #0]
 8017a6e:	b2da      	uxtb	r2, r3
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8017a76:	6a3a      	ldr	r2, [r7, #32]
 8017a78:	68f8      	ldr	r0, [r7, #12]
 8017a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a7c:	9300      	str	r3, [sp, #0]
 8017a7e:	0013      	movs	r3, r2
 8017a80:	2200      	movs	r2, #0
 8017a82:	2180      	movs	r1, #128	@ 0x80
 8017a84:	f000 fe30 	bl	80186e8 <I2C_WaitOnFlagUntilTimeout>
 8017a88:	1e03      	subs	r3, r0, #0
 8017a8a:	d001      	beq.n	8017a90 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8017a8c:	2301      	movs	r3, #1
 8017a8e:	e000      	b.n	8017a92 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8017a90:	2300      	movs	r3, #0
}
 8017a92:	0018      	movs	r0, r3
 8017a94:	46bd      	mov	sp, r7
 8017a96:	b004      	add	sp, #16
 8017a98:	bdb0      	pop	{r4, r5, r7, pc}
 8017a9a:	46c0      	nop			@ (mov r8, r8)
 8017a9c:	80002000 	.word	0x80002000

08017aa0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8017aa0:	b5b0      	push	{r4, r5, r7, lr}
 8017aa2:	b086      	sub	sp, #24
 8017aa4:	af02      	add	r7, sp, #8
 8017aa6:	60f8      	str	r0, [r7, #12]
 8017aa8:	000c      	movs	r4, r1
 8017aaa:	0010      	movs	r0, r2
 8017aac:	0019      	movs	r1, r3
 8017aae:	250a      	movs	r5, #10
 8017ab0:	197b      	adds	r3, r7, r5
 8017ab2:	1c22      	adds	r2, r4, #0
 8017ab4:	801a      	strh	r2, [r3, #0]
 8017ab6:	2308      	movs	r3, #8
 8017ab8:	18fb      	adds	r3, r7, r3
 8017aba:	1c02      	adds	r2, r0, #0
 8017abc:	801a      	strh	r2, [r3, #0]
 8017abe:	1dbb      	adds	r3, r7, #6
 8017ac0:	1c0a      	adds	r2, r1, #0
 8017ac2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8017ac4:	1dbb      	adds	r3, r7, #6
 8017ac6:	881b      	ldrh	r3, [r3, #0]
 8017ac8:	b2da      	uxtb	r2, r3
 8017aca:	197b      	adds	r3, r7, r5
 8017acc:	8819      	ldrh	r1, [r3, #0]
 8017ace:	68f8      	ldr	r0, [r7, #12]
 8017ad0:	4b23      	ldr	r3, [pc, #140]	@ (8017b60 <I2C_RequestMemoryRead+0xc0>)
 8017ad2:	9300      	str	r3, [sp, #0]
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	f001 f859 	bl	8018b8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017adc:	6a39      	ldr	r1, [r7, #32]
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	0018      	movs	r0, r3
 8017ae2:	f000 fe4f 	bl	8018784 <I2C_WaitOnTXISFlagUntilTimeout>
 8017ae6:	1e03      	subs	r3, r0, #0
 8017ae8:	d001      	beq.n	8017aee <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8017aea:	2301      	movs	r3, #1
 8017aec:	e033      	b.n	8017b56 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8017aee:	1dbb      	adds	r3, r7, #6
 8017af0:	881b      	ldrh	r3, [r3, #0]
 8017af2:	2b01      	cmp	r3, #1
 8017af4:	d107      	bne.n	8017b06 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017af6:	2308      	movs	r3, #8
 8017af8:	18fb      	adds	r3, r7, r3
 8017afa:	881b      	ldrh	r3, [r3, #0]
 8017afc:	b2da      	uxtb	r2, r3
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	629a      	str	r2, [r3, #40]	@ 0x28
 8017b04:	e019      	b.n	8017b3a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8017b06:	2308      	movs	r3, #8
 8017b08:	18fb      	adds	r3, r7, r3
 8017b0a:	881b      	ldrh	r3, [r3, #0]
 8017b0c:	0a1b      	lsrs	r3, r3, #8
 8017b0e:	b29b      	uxth	r3, r3
 8017b10:	b2da      	uxtb	r2, r3
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017b1a:	6a39      	ldr	r1, [r7, #32]
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	0018      	movs	r0, r3
 8017b20:	f000 fe30 	bl	8018784 <I2C_WaitOnTXISFlagUntilTimeout>
 8017b24:	1e03      	subs	r3, r0, #0
 8017b26:	d001      	beq.n	8017b2c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8017b28:	2301      	movs	r3, #1
 8017b2a:	e014      	b.n	8017b56 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017b2c:	2308      	movs	r3, #8
 8017b2e:	18fb      	adds	r3, r7, r3
 8017b30:	881b      	ldrh	r3, [r3, #0]
 8017b32:	b2da      	uxtb	r2, r3
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8017b3a:	6a3a      	ldr	r2, [r7, #32]
 8017b3c:	68f8      	ldr	r0, [r7, #12]
 8017b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b40:	9300      	str	r3, [sp, #0]
 8017b42:	0013      	movs	r3, r2
 8017b44:	2200      	movs	r2, #0
 8017b46:	2140      	movs	r1, #64	@ 0x40
 8017b48:	f000 fdce 	bl	80186e8 <I2C_WaitOnFlagUntilTimeout>
 8017b4c:	1e03      	subs	r3, r0, #0
 8017b4e:	d001      	beq.n	8017b54 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8017b50:	2301      	movs	r3, #1
 8017b52:	e000      	b.n	8017b56 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8017b54:	2300      	movs	r3, #0
}
 8017b56:	0018      	movs	r0, r3
 8017b58:	46bd      	mov	sp, r7
 8017b5a:	b004      	add	sp, #16
 8017b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8017b5e:	46c0      	nop			@ (mov r8, r8)
 8017b60:	80002000 	.word	0x80002000

08017b64 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017b64:	b5b0      	push	{r4, r5, r7, lr}
 8017b66:	b084      	sub	sp, #16
 8017b68:	af00      	add	r7, sp, #0
 8017b6a:	6078      	str	r0, [r7, #4]
 8017b6c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	2241      	movs	r2, #65	@ 0x41
 8017b72:	5c9b      	ldrb	r3, [r3, r2]
 8017b74:	b2db      	uxtb	r3, r3
 8017b76:	001a      	movs	r2, r3
 8017b78:	2328      	movs	r3, #40	@ 0x28
 8017b7a:	4013      	ands	r3, r2
 8017b7c:	2b28      	cmp	r3, #40	@ 0x28
 8017b7e:	d000      	beq.n	8017b82 <I2C_ITAddrCplt+0x1e>
 8017b80:	e088      	b.n	8017c94 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	699b      	ldr	r3, [r3, #24]
 8017b88:	0c1b      	lsrs	r3, r3, #16
 8017b8a:	b2da      	uxtb	r2, r3
 8017b8c:	250f      	movs	r5, #15
 8017b8e:	197b      	adds	r3, r7, r5
 8017b90:	2101      	movs	r1, #1
 8017b92:	400a      	ands	r2, r1
 8017b94:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	699b      	ldr	r3, [r3, #24]
 8017b9c:	0c1b      	lsrs	r3, r3, #16
 8017b9e:	b29a      	uxth	r2, r3
 8017ba0:	200c      	movs	r0, #12
 8017ba2:	183b      	adds	r3, r7, r0
 8017ba4:	21fe      	movs	r1, #254	@ 0xfe
 8017ba6:	400a      	ands	r2, r1
 8017ba8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	689b      	ldr	r3, [r3, #8]
 8017bb0:	b29a      	uxth	r2, r3
 8017bb2:	240a      	movs	r4, #10
 8017bb4:	193b      	adds	r3, r7, r4
 8017bb6:	0592      	lsls	r2, r2, #22
 8017bb8:	0d92      	lsrs	r2, r2, #22
 8017bba:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	681b      	ldr	r3, [r3, #0]
 8017bc0:	68db      	ldr	r3, [r3, #12]
 8017bc2:	b29a      	uxth	r2, r3
 8017bc4:	2308      	movs	r3, #8
 8017bc6:	18fb      	adds	r3, r7, r3
 8017bc8:	21fe      	movs	r1, #254	@ 0xfe
 8017bca:	400a      	ands	r2, r1
 8017bcc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	68db      	ldr	r3, [r3, #12]
 8017bd2:	2b02      	cmp	r3, #2
 8017bd4:	d148      	bne.n	8017c68 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8017bd6:	0021      	movs	r1, r4
 8017bd8:	187b      	adds	r3, r7, r1
 8017bda:	881b      	ldrh	r3, [r3, #0]
 8017bdc:	09db      	lsrs	r3, r3, #7
 8017bde:	b29a      	uxth	r2, r3
 8017be0:	183b      	adds	r3, r7, r0
 8017be2:	881b      	ldrh	r3, [r3, #0]
 8017be4:	4053      	eors	r3, r2
 8017be6:	b29b      	uxth	r3, r3
 8017be8:	001a      	movs	r2, r3
 8017bea:	2306      	movs	r3, #6
 8017bec:	4013      	ands	r3, r2
 8017bee:	d120      	bne.n	8017c32 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8017bf0:	183b      	adds	r3, r7, r0
 8017bf2:	187a      	adds	r2, r7, r1
 8017bf4:	8812      	ldrh	r2, [r2, #0]
 8017bf6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017bfc:	1c5a      	adds	r2, r3, #1
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017c06:	2b02      	cmp	r3, #2
 8017c08:	d14c      	bne.n	8017ca4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	2200      	movs	r2, #0
 8017c0e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	2208      	movs	r2, #8
 8017c16:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	2240      	movs	r2, #64	@ 0x40
 8017c1c:	2100      	movs	r1, #0
 8017c1e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017c20:	183b      	adds	r3, r7, r0
 8017c22:	881a      	ldrh	r2, [r3, #0]
 8017c24:	197b      	adds	r3, r7, r5
 8017c26:	7819      	ldrb	r1, [r3, #0]
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	0018      	movs	r0, r3
 8017c2c:	f7ff f914 	bl	8016e58 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8017c30:	e038      	b.n	8017ca4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8017c32:	240c      	movs	r4, #12
 8017c34:	193b      	adds	r3, r7, r4
 8017c36:	2208      	movs	r2, #8
 8017c38:	18ba      	adds	r2, r7, r2
 8017c3a:	8812      	ldrh	r2, [r2, #0]
 8017c3c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017c3e:	2380      	movs	r3, #128	@ 0x80
 8017c40:	021a      	lsls	r2, r3, #8
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	0011      	movs	r1, r2
 8017c46:	0018      	movs	r0, r3
 8017c48:	f001 f868 	bl	8018d1c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	2240      	movs	r2, #64	@ 0x40
 8017c50:	2100      	movs	r1, #0
 8017c52:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017c54:	193b      	adds	r3, r7, r4
 8017c56:	881a      	ldrh	r2, [r3, #0]
 8017c58:	230f      	movs	r3, #15
 8017c5a:	18fb      	adds	r3, r7, r3
 8017c5c:	7819      	ldrb	r1, [r3, #0]
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	0018      	movs	r0, r3
 8017c62:	f7ff f8f9 	bl	8016e58 <HAL_I2C_AddrCallback>
}
 8017c66:	e01d      	b.n	8017ca4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017c68:	2380      	movs	r3, #128	@ 0x80
 8017c6a:	021a      	lsls	r2, r3, #8
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	0011      	movs	r1, r2
 8017c70:	0018      	movs	r0, r3
 8017c72:	f001 f853 	bl	8018d1c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	2240      	movs	r2, #64	@ 0x40
 8017c7a:	2100      	movs	r1, #0
 8017c7c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017c7e:	230c      	movs	r3, #12
 8017c80:	18fb      	adds	r3, r7, r3
 8017c82:	881a      	ldrh	r2, [r3, #0]
 8017c84:	230f      	movs	r3, #15
 8017c86:	18fb      	adds	r3, r7, r3
 8017c88:	7819      	ldrb	r1, [r3, #0]
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	0018      	movs	r0, r3
 8017c8e:	f7ff f8e3 	bl	8016e58 <HAL_I2C_AddrCallback>
}
 8017c92:	e007      	b.n	8017ca4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	2208      	movs	r2, #8
 8017c9a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	2240      	movs	r2, #64	@ 0x40
 8017ca0:	2100      	movs	r1, #0
 8017ca2:	5499      	strb	r1, [r3, r2]
}
 8017ca4:	46c0      	nop			@ (mov r8, r8)
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	b004      	add	sp, #16
 8017caa:	bdb0      	pop	{r4, r5, r7, pc}

08017cac <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	b082      	sub	sp, #8
 8017cb0:	af00      	add	r7, sp, #0
 8017cb2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	2242      	movs	r2, #66	@ 0x42
 8017cb8:	2100      	movs	r1, #0
 8017cba:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	2241      	movs	r2, #65	@ 0x41
 8017cc0:	5c9b      	ldrb	r3, [r3, r2]
 8017cc2:	b2db      	uxtb	r3, r3
 8017cc4:	2b21      	cmp	r3, #33	@ 0x21
 8017cc6:	d117      	bne.n	8017cf8 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	2241      	movs	r2, #65	@ 0x41
 8017ccc:	2120      	movs	r1, #32
 8017cce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	2211      	movs	r2, #17
 8017cd4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	2200      	movs	r2, #0
 8017cda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	2101      	movs	r1, #1
 8017ce0:	0018      	movs	r0, r3
 8017ce2:	f001 f81b 	bl	8018d1c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	2240      	movs	r2, #64	@ 0x40
 8017cea:	2100      	movs	r1, #0
 8017cec:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	0018      	movs	r0, r3
 8017cf2:	f7ff f891 	bl	8016e18 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8017cf6:	e016      	b.n	8017d26 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	2241      	movs	r2, #65	@ 0x41
 8017cfc:	2120      	movs	r1, #32
 8017cfe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	2212      	movs	r2, #18
 8017d04:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	2200      	movs	r2, #0
 8017d0a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	2102      	movs	r1, #2
 8017d10:	0018      	movs	r0, r3
 8017d12:	f001 f803 	bl	8018d1c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	2240      	movs	r2, #64	@ 0x40
 8017d1a:	2100      	movs	r1, #0
 8017d1c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	0018      	movs	r0, r3
 8017d22:	f7ff f881 	bl	8016e28 <HAL_I2C_MasterRxCpltCallback>
}
 8017d26:	46c0      	nop			@ (mov r8, r8)
 8017d28:	46bd      	mov	sp, r7
 8017d2a:	b002      	add	sp, #8
 8017d2c:	bd80      	pop	{r7, pc}
	...

08017d30 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017d30:	b580      	push	{r7, lr}
 8017d32:	b084      	sub	sp, #16
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	2242      	movs	r2, #66	@ 0x42
 8017d44:	2100      	movs	r1, #0
 8017d46:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017d48:	68fb      	ldr	r3, [r7, #12]
 8017d4a:	0b9b      	lsrs	r3, r3, #14
 8017d4c:	001a      	movs	r2, r3
 8017d4e:	2301      	movs	r3, #1
 8017d50:	4013      	ands	r3, r2
 8017d52:	d008      	beq.n	8017d66 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	681a      	ldr	r2, [r3, #0]
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	4925      	ldr	r1, [pc, #148]	@ (8017df4 <I2C_ITSlaveSeqCplt+0xc4>)
 8017d60:	400a      	ands	r2, r1
 8017d62:	601a      	str	r2, [r3, #0]
 8017d64:	e00d      	b.n	8017d82 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	0bdb      	lsrs	r3, r3, #15
 8017d6a:	001a      	movs	r2, r3
 8017d6c:	2301      	movs	r3, #1
 8017d6e:	4013      	ands	r3, r2
 8017d70:	d007      	beq.n	8017d82 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	681a      	ldr	r2, [r3, #0]
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	491e      	ldr	r1, [pc, #120]	@ (8017df8 <I2C_ITSlaveSeqCplt+0xc8>)
 8017d7e:	400a      	ands	r2, r1
 8017d80:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	2241      	movs	r2, #65	@ 0x41
 8017d86:	5c9b      	ldrb	r3, [r3, r2]
 8017d88:	b2db      	uxtb	r3, r3
 8017d8a:	2b29      	cmp	r3, #41	@ 0x29
 8017d8c:	d114      	bne.n	8017db8 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	2241      	movs	r2, #65	@ 0x41
 8017d92:	2128      	movs	r1, #40	@ 0x28
 8017d94:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	2221      	movs	r2, #33	@ 0x21
 8017d9a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	2101      	movs	r1, #1
 8017da0:	0018      	movs	r0, r3
 8017da2:	f000 ffbb 	bl	8018d1c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	2240      	movs	r2, #64	@ 0x40
 8017daa:	2100      	movs	r1, #0
 8017dac:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	0018      	movs	r0, r3
 8017db2:	f7ff f841 	bl	8016e38 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8017db6:	e019      	b.n	8017dec <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	2241      	movs	r2, #65	@ 0x41
 8017dbc:	5c9b      	ldrb	r3, [r3, r2]
 8017dbe:	b2db      	uxtb	r3, r3
 8017dc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8017dc2:	d113      	bne.n	8017dec <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	2241      	movs	r2, #65	@ 0x41
 8017dc8:	2128      	movs	r1, #40	@ 0x28
 8017dca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	2222      	movs	r2, #34	@ 0x22
 8017dd0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	2102      	movs	r1, #2
 8017dd6:	0018      	movs	r0, r3
 8017dd8:	f000 ffa0 	bl	8018d1c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	2240      	movs	r2, #64	@ 0x40
 8017de0:	2100      	movs	r1, #0
 8017de2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	0018      	movs	r0, r3
 8017de8:	f7ff f82e 	bl	8016e48 <HAL_I2C_SlaveRxCpltCallback>
}
 8017dec:	46c0      	nop			@ (mov r8, r8)
 8017dee:	46bd      	mov	sp, r7
 8017df0:	b004      	add	sp, #16
 8017df2:	bd80      	pop	{r7, pc}
 8017df4:	ffffbfff 	.word	0xffffbfff
 8017df8:	ffff7fff 	.word	0xffff7fff

08017dfc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017dfc:	b580      	push	{r7, lr}
 8017dfe:	b086      	sub	sp, #24
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	6078      	str	r0, [r7, #4]
 8017e04:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8017e06:	683b      	ldr	r3, [r7, #0]
 8017e08:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	681b      	ldr	r3, [r3, #0]
 8017e0e:	2220      	movs	r2, #32
 8017e10:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	2241      	movs	r2, #65	@ 0x41
 8017e16:	5c9b      	ldrb	r3, [r3, r2]
 8017e18:	b2db      	uxtb	r3, r3
 8017e1a:	2b21      	cmp	r3, #33	@ 0x21
 8017e1c:	d108      	bne.n	8017e30 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	2101      	movs	r1, #1
 8017e22:	0018      	movs	r0, r3
 8017e24:	f000 ff7a 	bl	8018d1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	2211      	movs	r2, #17
 8017e2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8017e2e:	e00d      	b.n	8017e4c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	2241      	movs	r2, #65	@ 0x41
 8017e34:	5c9b      	ldrb	r3, [r3, r2]
 8017e36:	b2db      	uxtb	r3, r3
 8017e38:	2b22      	cmp	r3, #34	@ 0x22
 8017e3a:	d107      	bne.n	8017e4c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	2102      	movs	r1, #2
 8017e40:	0018      	movs	r0, r3
 8017e42:	f000 ff6b 	bl	8018d1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	2212      	movs	r2, #18
 8017e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	685a      	ldr	r2, [r3, #4]
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	4950      	ldr	r1, [pc, #320]	@ (8017f98 <I2C_ITMasterCplt+0x19c>)
 8017e58:	400a      	ands	r2, r1
 8017e5a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	2200      	movs	r2, #0
 8017e60:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	4a4d      	ldr	r2, [pc, #308]	@ (8017f9c <I2C_ITMasterCplt+0x1a0>)
 8017e66:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8017e68:	697b      	ldr	r3, [r7, #20]
 8017e6a:	091b      	lsrs	r3, r3, #4
 8017e6c:	001a      	movs	r2, r3
 8017e6e:	2301      	movs	r3, #1
 8017e70:	4013      	ands	r3, r2
 8017e72:	d009      	beq.n	8017e88 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	2210      	movs	r2, #16
 8017e7a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017e80:	2204      	movs	r2, #4
 8017e82:	431a      	orrs	r2, r3
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	2241      	movs	r2, #65	@ 0x41
 8017e8c:	5c9b      	ldrb	r3, [r3, r2]
 8017e8e:	b2db      	uxtb	r3, r3
 8017e90:	2b60      	cmp	r3, #96	@ 0x60
 8017e92:	d10b      	bne.n	8017eac <I2C_ITMasterCplt+0xb0>
 8017e94:	697b      	ldr	r3, [r7, #20]
 8017e96:	089b      	lsrs	r3, r3, #2
 8017e98:	001a      	movs	r2, r3
 8017e9a:	2301      	movs	r3, #1
 8017e9c:	4013      	ands	r3, r2
 8017e9e:	d005      	beq.n	8017eac <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ea6:	b2db      	uxtb	r3, r3
 8017ea8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8017eaa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	0018      	movs	r0, r3
 8017eb0:	f000 fb1f 	bl	80184f2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017eb8:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	2241      	movs	r2, #65	@ 0x41
 8017ebe:	5c9b      	ldrb	r3, [r3, r2]
 8017ec0:	b2db      	uxtb	r3, r3
 8017ec2:	2b60      	cmp	r3, #96	@ 0x60
 8017ec4:	d002      	beq.n	8017ecc <I2C_ITMasterCplt+0xd0>
 8017ec6:	693b      	ldr	r3, [r7, #16]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d007      	beq.n	8017edc <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	0011      	movs	r1, r2
 8017ed4:	0018      	movs	r0, r3
 8017ed6:	f000 f9e1 	bl	801829c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8017eda:	e058      	b.n	8017f8e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	2241      	movs	r2, #65	@ 0x41
 8017ee0:	5c9b      	ldrb	r3, [r3, r2]
 8017ee2:	b2db      	uxtb	r3, r3
 8017ee4:	2b21      	cmp	r3, #33	@ 0x21
 8017ee6:	d126      	bne.n	8017f36 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	2241      	movs	r2, #65	@ 0x41
 8017eec:	2120      	movs	r1, #32
 8017eee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	2242      	movs	r2, #66	@ 0x42
 8017efa:	5c9b      	ldrb	r3, [r3, r2]
 8017efc:	b2db      	uxtb	r3, r3
 8017efe:	2b40      	cmp	r3, #64	@ 0x40
 8017f00:	d10c      	bne.n	8017f1c <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	2242      	movs	r2, #66	@ 0x42
 8017f06:	2100      	movs	r1, #0
 8017f08:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	2240      	movs	r2, #64	@ 0x40
 8017f0e:	2100      	movs	r1, #0
 8017f10:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	0018      	movs	r0, r3
 8017f16:	f7fe ffb7 	bl	8016e88 <HAL_I2C_MemTxCpltCallback>
}
 8017f1a:	e038      	b.n	8017f8e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	2242      	movs	r2, #66	@ 0x42
 8017f20:	2100      	movs	r1, #0
 8017f22:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	2240      	movs	r2, #64	@ 0x40
 8017f28:	2100      	movs	r1, #0
 8017f2a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	0018      	movs	r0, r3
 8017f30:	f7fe ff72 	bl	8016e18 <HAL_I2C_MasterTxCpltCallback>
}
 8017f34:	e02b      	b.n	8017f8e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	2241      	movs	r2, #65	@ 0x41
 8017f3a:	5c9b      	ldrb	r3, [r3, r2]
 8017f3c:	b2db      	uxtb	r3, r3
 8017f3e:	2b22      	cmp	r3, #34	@ 0x22
 8017f40:	d125      	bne.n	8017f8e <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	2241      	movs	r2, #65	@ 0x41
 8017f46:	2120      	movs	r1, #32
 8017f48:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	2242      	movs	r2, #66	@ 0x42
 8017f54:	5c9b      	ldrb	r3, [r3, r2]
 8017f56:	b2db      	uxtb	r3, r3
 8017f58:	2b40      	cmp	r3, #64	@ 0x40
 8017f5a:	d10c      	bne.n	8017f76 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	2242      	movs	r2, #66	@ 0x42
 8017f60:	2100      	movs	r1, #0
 8017f62:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	2240      	movs	r2, #64	@ 0x40
 8017f68:	2100      	movs	r1, #0
 8017f6a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	0018      	movs	r0, r3
 8017f70:	f7fe ff92 	bl	8016e98 <HAL_I2C_MemRxCpltCallback>
}
 8017f74:	e00b      	b.n	8017f8e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	2242      	movs	r2, #66	@ 0x42
 8017f7a:	2100      	movs	r1, #0
 8017f7c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	2240      	movs	r2, #64	@ 0x40
 8017f82:	2100      	movs	r1, #0
 8017f84:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	0018      	movs	r0, r3
 8017f8a:	f7fe ff4d 	bl	8016e28 <HAL_I2C_MasterRxCpltCallback>
}
 8017f8e:	46c0      	nop			@ (mov r8, r8)
 8017f90:	46bd      	mov	sp, r7
 8017f92:	b006      	add	sp, #24
 8017f94:	bd80      	pop	{r7, pc}
 8017f96:	46c0      	nop			@ (mov r8, r8)
 8017f98:	fe00e800 	.word	0xfe00e800
 8017f9c:	ffff0000 	.word	0xffff0000

08017fa0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b086      	sub	sp, #24
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
 8017fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8017fb2:	683b      	ldr	r3, [r7, #0]
 8017fb4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8017fb6:	200f      	movs	r0, #15
 8017fb8:	183b      	adds	r3, r7, r0
 8017fba:	687a      	ldr	r2, [r7, #4]
 8017fbc:	2141      	movs	r1, #65	@ 0x41
 8017fbe:	5c52      	ldrb	r2, [r2, r1]
 8017fc0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	2220      	movs	r2, #32
 8017fc8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017fca:	183b      	adds	r3, r7, r0
 8017fcc:	781b      	ldrb	r3, [r3, #0]
 8017fce:	2b21      	cmp	r3, #33	@ 0x21
 8017fd0:	d003      	beq.n	8017fda <I2C_ITSlaveCplt+0x3a>
 8017fd2:	183b      	adds	r3, r7, r0
 8017fd4:	781b      	ldrb	r3, [r3, #0]
 8017fd6:	2b29      	cmp	r3, #41	@ 0x29
 8017fd8:	d109      	bne.n	8017fee <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8017fda:	4a7d      	ldr	r2, [pc, #500]	@ (80181d0 <I2C_ITSlaveCplt+0x230>)
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	0011      	movs	r1, r2
 8017fe0:	0018      	movs	r0, r3
 8017fe2:	f000 fe9b 	bl	8018d1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	2221      	movs	r2, #33	@ 0x21
 8017fea:	631a      	str	r2, [r3, #48]	@ 0x30
 8017fec:	e011      	b.n	8018012 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017fee:	220f      	movs	r2, #15
 8017ff0:	18bb      	adds	r3, r7, r2
 8017ff2:	781b      	ldrb	r3, [r3, #0]
 8017ff4:	2b22      	cmp	r3, #34	@ 0x22
 8017ff6:	d003      	beq.n	8018000 <I2C_ITSlaveCplt+0x60>
 8017ff8:	18bb      	adds	r3, r7, r2
 8017ffa:	781b      	ldrb	r3, [r3, #0]
 8017ffc:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ffe:	d108      	bne.n	8018012 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8018000:	4a74      	ldr	r2, [pc, #464]	@ (80181d4 <I2C_ITSlaveCplt+0x234>)
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	0011      	movs	r1, r2
 8018006:	0018      	movs	r0, r3
 8018008:	f000 fe88 	bl	8018d1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	2222      	movs	r2, #34	@ 0x22
 8018010:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	685a      	ldr	r2, [r3, #4]
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	2180      	movs	r1, #128	@ 0x80
 801801e:	0209      	lsls	r1, r1, #8
 8018020:	430a      	orrs	r2, r1
 8018022:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	685a      	ldr	r2, [r3, #4]
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	496a      	ldr	r1, [pc, #424]	@ (80181d8 <I2C_ITSlaveCplt+0x238>)
 8018030:	400a      	ands	r2, r1
 8018032:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	0018      	movs	r0, r3
 8018038:	f000 fa5b 	bl	80184f2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801803c:	693b      	ldr	r3, [r7, #16]
 801803e:	0b9b      	lsrs	r3, r3, #14
 8018040:	001a      	movs	r2, r3
 8018042:	2301      	movs	r3, #1
 8018044:	4013      	ands	r3, r2
 8018046:	d013      	beq.n	8018070 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	681b      	ldr	r3, [r3, #0]
 801804c:	681a      	ldr	r2, [r3, #0]
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	4962      	ldr	r1, [pc, #392]	@ (80181dc <I2C_ITSlaveCplt+0x23c>)
 8018054:	400a      	ands	r2, r1
 8018056:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801805c:	2b00      	cmp	r3, #0
 801805e:	d020      	beq.n	80180a2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	685b      	ldr	r3, [r3, #4]
 8018068:	b29a      	uxth	r2, r3
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801806e:	e018      	b.n	80180a2 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8018070:	693b      	ldr	r3, [r7, #16]
 8018072:	0bdb      	lsrs	r3, r3, #15
 8018074:	001a      	movs	r2, r3
 8018076:	2301      	movs	r3, #1
 8018078:	4013      	ands	r3, r2
 801807a:	d012      	beq.n	80180a2 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	681a      	ldr	r2, [r3, #0]
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	4956      	ldr	r1, [pc, #344]	@ (80181e0 <I2C_ITSlaveCplt+0x240>)
 8018088:	400a      	ands	r2, r1
 801808a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018090:	2b00      	cmp	r3, #0
 8018092:	d006      	beq.n	80180a2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	685b      	ldr	r3, [r3, #4]
 801809c:	b29a      	uxth	r2, r3
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80180a2:	697b      	ldr	r3, [r7, #20]
 80180a4:	089b      	lsrs	r3, r3, #2
 80180a6:	001a      	movs	r2, r3
 80180a8:	2301      	movs	r3, #1
 80180aa:	4013      	ands	r3, r2
 80180ac:	d020      	beq.n	80180f0 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80180ae:	697b      	ldr	r3, [r7, #20]
 80180b0:	2204      	movs	r2, #4
 80180b2:	4393      	bics	r3, r2
 80180b4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180c0:	b2d2      	uxtb	r2, r2
 80180c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180c8:	1c5a      	adds	r2, r3, #1
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d00c      	beq.n	80180f0 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80180da:	3b01      	subs	r3, #1
 80180dc:	b29a      	uxth	r2, r3
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80180e6:	b29b      	uxth	r3, r3
 80180e8:	3b01      	subs	r3, #1
 80180ea:	b29a      	uxth	r2, r3
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80180f4:	b29b      	uxth	r3, r3
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d005      	beq.n	8018106 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80180fe:	2204      	movs	r2, #4
 8018100:	431a      	orrs	r2, r3
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	2242      	movs	r2, #66	@ 0x42
 801810a:	2100      	movs	r1, #0
 801810c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	2200      	movs	r2, #0
 8018112:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018118:	2b00      	cmp	r3, #0
 801811a:	d013      	beq.n	8018144 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	0011      	movs	r1, r2
 8018124:	0018      	movs	r0, r3
 8018126:	f000 f8b9 	bl	801829c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	2241      	movs	r2, #65	@ 0x41
 801812e:	5c9b      	ldrb	r3, [r3, r2]
 8018130:	b2db      	uxtb	r3, r3
 8018132:	2b28      	cmp	r3, #40	@ 0x28
 8018134:	d147      	bne.n	80181c6 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8018136:	697a      	ldr	r2, [r7, #20]
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	0011      	movs	r1, r2
 801813c:	0018      	movs	r0, r3
 801813e:	f000 f853 	bl	80181e8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8018142:	e040      	b.n	80181c6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018148:	4a26      	ldr	r2, [pc, #152]	@ (80181e4 <I2C_ITSlaveCplt+0x244>)
 801814a:	4293      	cmp	r3, r2
 801814c:	d016      	beq.n	801817c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	0018      	movs	r0, r3
 8018152:	f7ff fded 	bl	8017d30 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	4a22      	ldr	r2, [pc, #136]	@ (80181e4 <I2C_ITSlaveCplt+0x244>)
 801815a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	2241      	movs	r2, #65	@ 0x41
 8018160:	2120      	movs	r1, #32
 8018162:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	2200      	movs	r2, #0
 8018168:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	2240      	movs	r2, #64	@ 0x40
 801816e:	2100      	movs	r1, #0
 8018170:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	0018      	movs	r0, r3
 8018176:	f7fe fe7f 	bl	8016e78 <HAL_I2C_ListenCpltCallback>
}
 801817a:	e024      	b.n	80181c6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	2241      	movs	r2, #65	@ 0x41
 8018180:	5c9b      	ldrb	r3, [r3, r2]
 8018182:	b2db      	uxtb	r3, r3
 8018184:	2b22      	cmp	r3, #34	@ 0x22
 8018186:	d10f      	bne.n	80181a8 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	2241      	movs	r2, #65	@ 0x41
 801818c:	2120      	movs	r1, #32
 801818e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	2200      	movs	r2, #0
 8018194:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	2240      	movs	r2, #64	@ 0x40
 801819a:	2100      	movs	r1, #0
 801819c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	0018      	movs	r0, r3
 80181a2:	f7fe fe51 	bl	8016e48 <HAL_I2C_SlaveRxCpltCallback>
}
 80181a6:	e00e      	b.n	80181c6 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	2241      	movs	r2, #65	@ 0x41
 80181ac:	2120      	movs	r1, #32
 80181ae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	2200      	movs	r2, #0
 80181b4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	2240      	movs	r2, #64	@ 0x40
 80181ba:	2100      	movs	r1, #0
 80181bc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	0018      	movs	r0, r3
 80181c2:	f7fe fe39 	bl	8016e38 <HAL_I2C_SlaveTxCpltCallback>
}
 80181c6:	46c0      	nop			@ (mov r8, r8)
 80181c8:	46bd      	mov	sp, r7
 80181ca:	b006      	add	sp, #24
 80181cc:	bd80      	pop	{r7, pc}
 80181ce:	46c0      	nop			@ (mov r8, r8)
 80181d0:	00008001 	.word	0x00008001
 80181d4:	00008002 	.word	0x00008002
 80181d8:	fe00e800 	.word	0xfe00e800
 80181dc:	ffffbfff 	.word	0xffffbfff
 80181e0:	ffff7fff 	.word	0xffff7fff
 80181e4:	ffff0000 	.word	0xffff0000

080181e8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	b082      	sub	sp, #8
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	6078      	str	r0, [r7, #4]
 80181f0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	4a27      	ldr	r2, [pc, #156]	@ (8018294 <I2C_ITListenCplt+0xac>)
 80181f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	2200      	movs	r2, #0
 80181fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	2241      	movs	r2, #65	@ 0x41
 8018202:	2120      	movs	r1, #32
 8018204:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	2242      	movs	r2, #66	@ 0x42
 801820a:	2100      	movs	r1, #0
 801820c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	2200      	movs	r2, #0
 8018212:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8018214:	683b      	ldr	r3, [r7, #0]
 8018216:	089b      	lsrs	r3, r3, #2
 8018218:	001a      	movs	r2, r3
 801821a:	2301      	movs	r3, #1
 801821c:	4013      	ands	r3, r2
 801821e:	d022      	beq.n	8018266 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801822a:	b2d2      	uxtb	r2, r2
 801822c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018232:	1c5a      	adds	r2, r3, #1
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801823c:	2b00      	cmp	r3, #0
 801823e:	d012      	beq.n	8018266 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018244:	3b01      	subs	r3, #1
 8018246:	b29a      	uxth	r2, r3
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018250:	b29b      	uxth	r3, r3
 8018252:	3b01      	subs	r3, #1
 8018254:	b29a      	uxth	r2, r3
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801825e:	2204      	movs	r2, #4
 8018260:	431a      	orrs	r2, r3
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8018266:	4a0c      	ldr	r2, [pc, #48]	@ (8018298 <I2C_ITListenCplt+0xb0>)
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	0011      	movs	r1, r2
 801826c:	0018      	movs	r0, r3
 801826e:	f000 fd55 	bl	8018d1c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	2210      	movs	r2, #16
 8018278:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	2240      	movs	r2, #64	@ 0x40
 801827e:	2100      	movs	r1, #0
 8018280:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	0018      	movs	r0, r3
 8018286:	f7fe fdf7 	bl	8016e78 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801828a:	46c0      	nop			@ (mov r8, r8)
 801828c:	46bd      	mov	sp, r7
 801828e:	b002      	add	sp, #8
 8018290:	bd80      	pop	{r7, pc}
 8018292:	46c0      	nop			@ (mov r8, r8)
 8018294:	ffff0000 	.word	0xffff0000
 8018298:	00008003 	.word	0x00008003

0801829c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 801829c:	b580      	push	{r7, lr}
 801829e:	b084      	sub	sp, #16
 80182a0:	af00      	add	r7, sp, #0
 80182a2:	6078      	str	r0, [r7, #4]
 80182a4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80182a6:	200f      	movs	r0, #15
 80182a8:	183b      	adds	r3, r7, r0
 80182aa:	687a      	ldr	r2, [r7, #4]
 80182ac:	2141      	movs	r1, #65	@ 0x41
 80182ae:	5c52      	ldrb	r2, [r2, r1]
 80182b0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	2242      	movs	r2, #66	@ 0x42
 80182b6:	2100      	movs	r1, #0
 80182b8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	4a72      	ldr	r2, [pc, #456]	@ (8018488 <I2C_ITError+0x1ec>)
 80182be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	2200      	movs	r2, #0
 80182c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80182ca:	683b      	ldr	r3, [r7, #0]
 80182cc:	431a      	orrs	r2, r3
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80182d2:	183b      	adds	r3, r7, r0
 80182d4:	781b      	ldrb	r3, [r3, #0]
 80182d6:	2b28      	cmp	r3, #40	@ 0x28
 80182d8:	d007      	beq.n	80182ea <I2C_ITError+0x4e>
 80182da:	183b      	adds	r3, r7, r0
 80182dc:	781b      	ldrb	r3, [r3, #0]
 80182de:	2b29      	cmp	r3, #41	@ 0x29
 80182e0:	d003      	beq.n	80182ea <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80182e2:	183b      	adds	r3, r7, r0
 80182e4:	781b      	ldrb	r3, [r3, #0]
 80182e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80182e8:	d10c      	bne.n	8018304 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	2103      	movs	r1, #3
 80182ee:	0018      	movs	r0, r3
 80182f0:	f000 fd14 	bl	8018d1c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	2241      	movs	r2, #65	@ 0x41
 80182f8:	2128      	movs	r1, #40	@ 0x28
 80182fa:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	4a63      	ldr	r2, [pc, #396]	@ (801848c <I2C_ITError+0x1f0>)
 8018300:	635a      	str	r2, [r3, #52]	@ 0x34
 8018302:	e032      	b.n	801836a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8018304:	4a62      	ldr	r2, [pc, #392]	@ (8018490 <I2C_ITError+0x1f4>)
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	0011      	movs	r1, r2
 801830a:	0018      	movs	r0, r3
 801830c:	f000 fd06 	bl	8018d1c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	0018      	movs	r0, r3
 8018314:	f000 f8ed 	bl	80184f2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	2241      	movs	r2, #65	@ 0x41
 801831c:	5c9b      	ldrb	r3, [r3, r2]
 801831e:	b2db      	uxtb	r3, r3
 8018320:	2b60      	cmp	r3, #96	@ 0x60
 8018322:	d01f      	beq.n	8018364 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	2241      	movs	r2, #65	@ 0x41
 8018328:	2120      	movs	r1, #32
 801832a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	699b      	ldr	r3, [r3, #24]
 8018332:	2220      	movs	r2, #32
 8018334:	4013      	ands	r3, r2
 8018336:	2b20      	cmp	r3, #32
 8018338:	d114      	bne.n	8018364 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	699b      	ldr	r3, [r3, #24]
 8018340:	2210      	movs	r2, #16
 8018342:	4013      	ands	r3, r2
 8018344:	2b10      	cmp	r3, #16
 8018346:	d109      	bne.n	801835c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	2210      	movs	r2, #16
 801834e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018354:	2204      	movs	r2, #4
 8018356:	431a      	orrs	r2, r3
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	2220      	movs	r2, #32
 8018362:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	2200      	movs	r2, #0
 8018368:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801836e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018374:	2b00      	cmp	r3, #0
 8018376:	d03b      	beq.n	80183f0 <I2C_ITError+0x154>
 8018378:	68bb      	ldr	r3, [r7, #8]
 801837a:	2b11      	cmp	r3, #17
 801837c:	d002      	beq.n	8018384 <I2C_ITError+0xe8>
 801837e:	68bb      	ldr	r3, [r7, #8]
 8018380:	2b21      	cmp	r3, #33	@ 0x21
 8018382:	d135      	bne.n	80183f0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	681a      	ldr	r2, [r3, #0]
 801838a:	2380      	movs	r3, #128	@ 0x80
 801838c:	01db      	lsls	r3, r3, #7
 801838e:	401a      	ands	r2, r3
 8018390:	2380      	movs	r3, #128	@ 0x80
 8018392:	01db      	lsls	r3, r3, #7
 8018394:	429a      	cmp	r2, r3
 8018396:	d107      	bne.n	80183a8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	681a      	ldr	r2, [r3, #0]
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	493c      	ldr	r1, [pc, #240]	@ (8018494 <I2C_ITError+0x1f8>)
 80183a4:	400a      	ands	r2, r1
 80183a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183ac:	0018      	movs	r0, r3
 80183ae:	f7fd f9bc 	bl	801572a <HAL_DMA_GetState>
 80183b2:	0003      	movs	r3, r0
 80183b4:	2b01      	cmp	r3, #1
 80183b6:	d016      	beq.n	80183e6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183bc:	4a36      	ldr	r2, [pc, #216]	@ (8018498 <I2C_ITError+0x1fc>)
 80183be:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	2240      	movs	r2, #64	@ 0x40
 80183c4:	2100      	movs	r1, #0
 80183c6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183cc:	0018      	movs	r0, r3
 80183ce:	f7fd f8b7 	bl	8015540 <HAL_DMA_Abort_IT>
 80183d2:	1e03      	subs	r3, r0, #0
 80183d4:	d051      	beq.n	801847a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183e0:	0018      	movs	r0, r3
 80183e2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80183e4:	e049      	b.n	801847a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	0018      	movs	r0, r3
 80183ea:	f000 f859 	bl	80184a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80183ee:	e044      	b.n	801847a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d03b      	beq.n	8018470 <I2C_ITError+0x1d4>
 80183f8:	68bb      	ldr	r3, [r7, #8]
 80183fa:	2b12      	cmp	r3, #18
 80183fc:	d002      	beq.n	8018404 <I2C_ITError+0x168>
 80183fe:	68bb      	ldr	r3, [r7, #8]
 8018400:	2b22      	cmp	r3, #34	@ 0x22
 8018402:	d135      	bne.n	8018470 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	681a      	ldr	r2, [r3, #0]
 801840a:	2380      	movs	r3, #128	@ 0x80
 801840c:	021b      	lsls	r3, r3, #8
 801840e:	401a      	ands	r2, r3
 8018410:	2380      	movs	r3, #128	@ 0x80
 8018412:	021b      	lsls	r3, r3, #8
 8018414:	429a      	cmp	r2, r3
 8018416:	d107      	bne.n	8018428 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	681a      	ldr	r2, [r3, #0]
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	491e      	ldr	r1, [pc, #120]	@ (801849c <I2C_ITError+0x200>)
 8018424:	400a      	ands	r2, r1
 8018426:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801842c:	0018      	movs	r0, r3
 801842e:	f7fd f97c 	bl	801572a <HAL_DMA_GetState>
 8018432:	0003      	movs	r3, r0
 8018434:	2b01      	cmp	r3, #1
 8018436:	d016      	beq.n	8018466 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801843c:	4a16      	ldr	r2, [pc, #88]	@ (8018498 <I2C_ITError+0x1fc>)
 801843e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	2240      	movs	r2, #64	@ 0x40
 8018444:	2100      	movs	r1, #0
 8018446:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801844c:	0018      	movs	r0, r3
 801844e:	f7fd f877 	bl	8015540 <HAL_DMA_Abort_IT>
 8018452:	1e03      	subs	r3, r0, #0
 8018454:	d013      	beq.n	801847e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801845a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018460:	0018      	movs	r0, r3
 8018462:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018464:	e00b      	b.n	801847e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	0018      	movs	r0, r3
 801846a:	f000 f819 	bl	80184a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801846e:	e006      	b.n	801847e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	0018      	movs	r0, r3
 8018474:	f000 f814 	bl	80184a0 <I2C_TreatErrorCallback>
  }
}
 8018478:	e002      	b.n	8018480 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801847a:	46c0      	nop			@ (mov r8, r8)
 801847c:	e000      	b.n	8018480 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801847e:	46c0      	nop			@ (mov r8, r8)
}
 8018480:	46c0      	nop			@ (mov r8, r8)
 8018482:	46bd      	mov	sp, r7
 8018484:	b004      	add	sp, #16
 8018486:	bd80      	pop	{r7, pc}
 8018488:	ffff0000 	.word	0xffff0000
 801848c:	0801714d 	.word	0x0801714d
 8018490:	00008003 	.word	0x00008003
 8018494:	ffffbfff 	.word	0xffffbfff
 8018498:	080186ab 	.word	0x080186ab
 801849c:	ffff7fff 	.word	0xffff7fff

080184a0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80184a0:	b580      	push	{r7, lr}
 80184a2:	b082      	sub	sp, #8
 80184a4:	af00      	add	r7, sp, #0
 80184a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	2241      	movs	r2, #65	@ 0x41
 80184ac:	5c9b      	ldrb	r3, [r3, r2]
 80184ae:	b2db      	uxtb	r3, r3
 80184b0:	2b60      	cmp	r3, #96	@ 0x60
 80184b2:	d10f      	bne.n	80184d4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	2241      	movs	r2, #65	@ 0x41
 80184b8:	2120      	movs	r1, #32
 80184ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	2200      	movs	r2, #0
 80184c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	2240      	movs	r2, #64	@ 0x40
 80184c6:	2100      	movs	r1, #0
 80184c8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	0018      	movs	r0, r3
 80184ce:	f7fe fcf3 	bl	8016eb8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80184d2:	e00a      	b.n	80184ea <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	2200      	movs	r2, #0
 80184d8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	2240      	movs	r2, #64	@ 0x40
 80184de:	2100      	movs	r1, #0
 80184e0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	0018      	movs	r0, r3
 80184e6:	f7fe fcdf 	bl	8016ea8 <HAL_I2C_ErrorCallback>
}
 80184ea:	46c0      	nop			@ (mov r8, r8)
 80184ec:	46bd      	mov	sp, r7
 80184ee:	b002      	add	sp, #8
 80184f0:	bd80      	pop	{r7, pc}

080184f2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80184f2:	b580      	push	{r7, lr}
 80184f4:	b082      	sub	sp, #8
 80184f6:	af00      	add	r7, sp, #0
 80184f8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	699b      	ldr	r3, [r3, #24]
 8018500:	2202      	movs	r2, #2
 8018502:	4013      	ands	r3, r2
 8018504:	2b02      	cmp	r3, #2
 8018506:	d103      	bne.n	8018510 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	2200      	movs	r2, #0
 801850e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	699b      	ldr	r3, [r3, #24]
 8018516:	2201      	movs	r2, #1
 8018518:	4013      	ands	r3, r2
 801851a:	2b01      	cmp	r3, #1
 801851c:	d007      	beq.n	801852e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	699a      	ldr	r2, [r3, #24]
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	2101      	movs	r1, #1
 801852a:	430a      	orrs	r2, r1
 801852c:	619a      	str	r2, [r3, #24]
  }
}
 801852e:	46c0      	nop			@ (mov r8, r8)
 8018530:	46bd      	mov	sp, r7
 8018532:	b002      	add	sp, #8
 8018534:	bd80      	pop	{r7, pc}
	...

08018538 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018538:	b580      	push	{r7, lr}
 801853a:	b084      	sub	sp, #16
 801853c:	af00      	add	r7, sp, #0
 801853e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018544:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	681a      	ldr	r2, [r3, #0]
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	4920      	ldr	r1, [pc, #128]	@ (80185d4 <I2C_DMAMasterTransmitCplt+0x9c>)
 8018552:	400a      	ands	r2, r1
 8018554:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801855a:	b29b      	uxth	r3, r3
 801855c:	2b00      	cmp	r3, #0
 801855e:	d105      	bne.n	801856c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8018560:	68fb      	ldr	r3, [r7, #12]
 8018562:	2120      	movs	r1, #32
 8018564:	0018      	movs	r0, r3
 8018566:	f000 fb4b 	bl	8018c00 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801856a:	e02e      	b.n	80185ca <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018570:	68fa      	ldr	r2, [r7, #12]
 8018572:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8018574:	189a      	adds	r2, r3, r2
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801857e:	b29b      	uxth	r3, r3
 8018580:	2bff      	cmp	r3, #255	@ 0xff
 8018582:	d903      	bls.n	801858c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	22ff      	movs	r2, #255	@ 0xff
 8018588:	851a      	strh	r2, [r3, #40]	@ 0x28
 801858a:	e004      	b.n	8018596 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018590:	b29a      	uxth	r2, r3
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8018596:	68fb      	ldr	r3, [r7, #12]
 8018598:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801859e:	0019      	movs	r1, r3
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	3328      	adds	r3, #40	@ 0x28
 80185a6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80185ac:	f7fc ff22 	bl	80153f4 <HAL_DMA_Start_IT>
 80185b0:	1e03      	subs	r3, r0, #0
 80185b2:	d005      	beq.n	80185c0 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80185b4:	68fb      	ldr	r3, [r7, #12]
 80185b6:	2110      	movs	r1, #16
 80185b8:	0018      	movs	r0, r3
 80185ba:	f7ff fe6f 	bl	801829c <I2C_ITError>
}
 80185be:	e004      	b.n	80185ca <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	2140      	movs	r1, #64	@ 0x40
 80185c4:	0018      	movs	r0, r3
 80185c6:	f000 fb1b 	bl	8018c00 <I2C_Enable_IRQ>
}
 80185ca:	46c0      	nop			@ (mov r8, r8)
 80185cc:	46bd      	mov	sp, r7
 80185ce:	b004      	add	sp, #16
 80185d0:	bd80      	pop	{r7, pc}
 80185d2:	46c0      	nop			@ (mov r8, r8)
 80185d4:	ffffbfff 	.word	0xffffbfff

080185d8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80185d8:	b580      	push	{r7, lr}
 80185da:	b084      	sub	sp, #16
 80185dc:	af00      	add	r7, sp, #0
 80185de:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80185e4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	681a      	ldr	r2, [r3, #0]
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	4920      	ldr	r1, [pc, #128]	@ (8018674 <I2C_DMAMasterReceiveCplt+0x9c>)
 80185f2:	400a      	ands	r2, r1
 80185f4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80185fa:	b29b      	uxth	r3, r3
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d105      	bne.n	801860c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	2120      	movs	r1, #32
 8018604:	0018      	movs	r0, r3
 8018606:	f000 fafb 	bl	8018c00 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801860a:	e02e      	b.n	801866a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018610:	68fa      	ldr	r2, [r7, #12]
 8018612:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8018614:	189a      	adds	r2, r3, r2
 8018616:	68fb      	ldr	r3, [r7, #12]
 8018618:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801861e:	b29b      	uxth	r3, r3
 8018620:	2bff      	cmp	r3, #255	@ 0xff
 8018622:	d903      	bls.n	801862c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	22ff      	movs	r2, #255	@ 0xff
 8018628:	851a      	strh	r2, [r3, #40]	@ 0x28
 801862a:	e004      	b.n	8018636 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018630:	b29a      	uxth	r2, r3
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8018636:	68fb      	ldr	r3, [r7, #12]
 8018638:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	3324      	adds	r3, #36	@ 0x24
 8018640:	0019      	movs	r1, r3
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018646:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801864c:	f7fc fed2 	bl	80153f4 <HAL_DMA_Start_IT>
 8018650:	1e03      	subs	r3, r0, #0
 8018652:	d005      	beq.n	8018660 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	2110      	movs	r1, #16
 8018658:	0018      	movs	r0, r3
 801865a:	f7ff fe1f 	bl	801829c <I2C_ITError>
}
 801865e:	e004      	b.n	801866a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	2140      	movs	r1, #64	@ 0x40
 8018664:	0018      	movs	r0, r3
 8018666:	f000 facb 	bl	8018c00 <I2C_Enable_IRQ>
}
 801866a:	46c0      	nop			@ (mov r8, r8)
 801866c:	46bd      	mov	sp, r7
 801866e:	b004      	add	sp, #16
 8018670:	bd80      	pop	{r7, pc}
 8018672:	46c0      	nop			@ (mov r8, r8)
 8018674:	ffff7fff 	.word	0xffff7fff

08018678 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8018678:	b580      	push	{r7, lr}
 801867a:	b084      	sub	sp, #16
 801867c:	af00      	add	r7, sp, #0
 801867e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018684:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	685a      	ldr	r2, [r3, #4]
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	2180      	movs	r1, #128	@ 0x80
 8018692:	0209      	lsls	r1, r1, #8
 8018694:	430a      	orrs	r2, r1
 8018696:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	2110      	movs	r1, #16
 801869c:	0018      	movs	r0, r3
 801869e:	f7ff fdfd 	bl	801829c <I2C_ITError>
}
 80186a2:	46c0      	nop			@ (mov r8, r8)
 80186a4:	46bd      	mov	sp, r7
 80186a6:	b004      	add	sp, #16
 80186a8:	bd80      	pop	{r7, pc}

080186aa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80186aa:	b580      	push	{r7, lr}
 80186ac:	b084      	sub	sp, #16
 80186ae:	af00      	add	r7, sp, #0
 80186b0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80186b6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d003      	beq.n	80186c8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80186c4:	2200      	movs	r2, #0
 80186c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d003      	beq.n	80186d8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80186d4:	2200      	movs	r2, #0
 80186d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	0018      	movs	r0, r3
 80186dc:	f7ff fee0 	bl	80184a0 <I2C_TreatErrorCallback>
}
 80186e0:	46c0      	nop			@ (mov r8, r8)
 80186e2:	46bd      	mov	sp, r7
 80186e4:	b004      	add	sp, #16
 80186e6:	bd80      	pop	{r7, pc}

080186e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80186e8:	b580      	push	{r7, lr}
 80186ea:	b084      	sub	sp, #16
 80186ec:	af00      	add	r7, sp, #0
 80186ee:	60f8      	str	r0, [r7, #12]
 80186f0:	60b9      	str	r1, [r7, #8]
 80186f2:	603b      	str	r3, [r7, #0]
 80186f4:	1dfb      	adds	r3, r7, #7
 80186f6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80186f8:	e030      	b.n	801875c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80186fa:	683b      	ldr	r3, [r7, #0]
 80186fc:	3301      	adds	r3, #1
 80186fe:	d02d      	beq.n	801875c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018700:	f7fc f95a 	bl	80149b8 <HAL_GetTick>
 8018704:	0002      	movs	r2, r0
 8018706:	69bb      	ldr	r3, [r7, #24]
 8018708:	1ad3      	subs	r3, r2, r3
 801870a:	683a      	ldr	r2, [r7, #0]
 801870c:	429a      	cmp	r2, r3
 801870e:	d302      	bcc.n	8018716 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8018710:	683b      	ldr	r3, [r7, #0]
 8018712:	2b00      	cmp	r3, #0
 8018714:	d122      	bne.n	801875c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8018716:	68fb      	ldr	r3, [r7, #12]
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	699b      	ldr	r3, [r3, #24]
 801871c:	68ba      	ldr	r2, [r7, #8]
 801871e:	4013      	ands	r3, r2
 8018720:	68ba      	ldr	r2, [r7, #8]
 8018722:	1ad3      	subs	r3, r2, r3
 8018724:	425a      	negs	r2, r3
 8018726:	4153      	adcs	r3, r2
 8018728:	b2db      	uxtb	r3, r3
 801872a:	001a      	movs	r2, r3
 801872c:	1dfb      	adds	r3, r7, #7
 801872e:	781b      	ldrb	r3, [r3, #0]
 8018730:	429a      	cmp	r2, r3
 8018732:	d113      	bne.n	801875c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018738:	2220      	movs	r2, #32
 801873a:	431a      	orrs	r2, r3
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	2241      	movs	r2, #65	@ 0x41
 8018744:	2120      	movs	r1, #32
 8018746:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	2242      	movs	r2, #66	@ 0x42
 801874c:	2100      	movs	r1, #0
 801874e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	2240      	movs	r2, #64	@ 0x40
 8018754:	2100      	movs	r1, #0
 8018756:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8018758:	2301      	movs	r3, #1
 801875a:	e00f      	b.n	801877c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	699b      	ldr	r3, [r3, #24]
 8018762:	68ba      	ldr	r2, [r7, #8]
 8018764:	4013      	ands	r3, r2
 8018766:	68ba      	ldr	r2, [r7, #8]
 8018768:	1ad3      	subs	r3, r2, r3
 801876a:	425a      	negs	r2, r3
 801876c:	4153      	adcs	r3, r2
 801876e:	b2db      	uxtb	r3, r3
 8018770:	001a      	movs	r2, r3
 8018772:	1dfb      	adds	r3, r7, #7
 8018774:	781b      	ldrb	r3, [r3, #0]
 8018776:	429a      	cmp	r2, r3
 8018778:	d0bf      	beq.n	80186fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801877a:	2300      	movs	r3, #0
}
 801877c:	0018      	movs	r0, r3
 801877e:	46bd      	mov	sp, r7
 8018780:	b004      	add	sp, #16
 8018782:	bd80      	pop	{r7, pc}

08018784 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018784:	b580      	push	{r7, lr}
 8018786:	b084      	sub	sp, #16
 8018788:	af00      	add	r7, sp, #0
 801878a:	60f8      	str	r0, [r7, #12]
 801878c:	60b9      	str	r1, [r7, #8]
 801878e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018790:	e032      	b.n	80187f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018792:	687a      	ldr	r2, [r7, #4]
 8018794:	68b9      	ldr	r1, [r7, #8]
 8018796:	68fb      	ldr	r3, [r7, #12]
 8018798:	0018      	movs	r0, r3
 801879a:	f000 f8ff 	bl	801899c <I2C_IsErrorOccurred>
 801879e:	1e03      	subs	r3, r0, #0
 80187a0:	d001      	beq.n	80187a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80187a2:	2301      	movs	r3, #1
 80187a4:	e030      	b.n	8018808 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80187a6:	68bb      	ldr	r3, [r7, #8]
 80187a8:	3301      	adds	r3, #1
 80187aa:	d025      	beq.n	80187f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80187ac:	f7fc f904 	bl	80149b8 <HAL_GetTick>
 80187b0:	0002      	movs	r2, r0
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	1ad3      	subs	r3, r2, r3
 80187b6:	68ba      	ldr	r2, [r7, #8]
 80187b8:	429a      	cmp	r2, r3
 80187ba:	d302      	bcc.n	80187c2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80187bc:	68bb      	ldr	r3, [r7, #8]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d11a      	bne.n	80187f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	699b      	ldr	r3, [r3, #24]
 80187c8:	2202      	movs	r2, #2
 80187ca:	4013      	ands	r3, r2
 80187cc:	2b02      	cmp	r3, #2
 80187ce:	d013      	beq.n	80187f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80187d0:	68fb      	ldr	r3, [r7, #12]
 80187d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80187d4:	2220      	movs	r2, #32
 80187d6:	431a      	orrs	r2, r3
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	2241      	movs	r2, #65	@ 0x41
 80187e0:	2120      	movs	r1, #32
 80187e2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	2242      	movs	r2, #66	@ 0x42
 80187e8:	2100      	movs	r1, #0
 80187ea:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	2240      	movs	r2, #64	@ 0x40
 80187f0:	2100      	movs	r1, #0
 80187f2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80187f4:	2301      	movs	r3, #1
 80187f6:	e007      	b.n	8018808 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	699b      	ldr	r3, [r3, #24]
 80187fe:	2202      	movs	r2, #2
 8018800:	4013      	ands	r3, r2
 8018802:	2b02      	cmp	r3, #2
 8018804:	d1c5      	bne.n	8018792 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8018806:	2300      	movs	r3, #0
}
 8018808:	0018      	movs	r0, r3
 801880a:	46bd      	mov	sp, r7
 801880c:	b004      	add	sp, #16
 801880e:	bd80      	pop	{r7, pc}

08018810 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018810:	b580      	push	{r7, lr}
 8018812:	b084      	sub	sp, #16
 8018814:	af00      	add	r7, sp, #0
 8018816:	60f8      	str	r0, [r7, #12]
 8018818:	60b9      	str	r1, [r7, #8]
 801881a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801881c:	e02f      	b.n	801887e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801881e:	687a      	ldr	r2, [r7, #4]
 8018820:	68b9      	ldr	r1, [r7, #8]
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	0018      	movs	r0, r3
 8018826:	f000 f8b9 	bl	801899c <I2C_IsErrorOccurred>
 801882a:	1e03      	subs	r3, r0, #0
 801882c:	d001      	beq.n	8018832 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801882e:	2301      	movs	r3, #1
 8018830:	e02d      	b.n	801888e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018832:	f7fc f8c1 	bl	80149b8 <HAL_GetTick>
 8018836:	0002      	movs	r2, r0
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	1ad3      	subs	r3, r2, r3
 801883c:	68ba      	ldr	r2, [r7, #8]
 801883e:	429a      	cmp	r2, r3
 8018840:	d302      	bcc.n	8018848 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8018842:	68bb      	ldr	r3, [r7, #8]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d11a      	bne.n	801887e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	699b      	ldr	r3, [r3, #24]
 801884e:	2220      	movs	r2, #32
 8018850:	4013      	ands	r3, r2
 8018852:	2b20      	cmp	r3, #32
 8018854:	d013      	beq.n	801887e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801885a:	2220      	movs	r2, #32
 801885c:	431a      	orrs	r2, r3
 801885e:	68fb      	ldr	r3, [r7, #12]
 8018860:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	2241      	movs	r2, #65	@ 0x41
 8018866:	2120      	movs	r1, #32
 8018868:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801886a:	68fb      	ldr	r3, [r7, #12]
 801886c:	2242      	movs	r2, #66	@ 0x42
 801886e:	2100      	movs	r1, #0
 8018870:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	2240      	movs	r2, #64	@ 0x40
 8018876:	2100      	movs	r1, #0
 8018878:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801887a:	2301      	movs	r3, #1
 801887c:	e007      	b.n	801888e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	699b      	ldr	r3, [r3, #24]
 8018884:	2220      	movs	r2, #32
 8018886:	4013      	ands	r3, r2
 8018888:	2b20      	cmp	r3, #32
 801888a:	d1c8      	bne.n	801881e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801888c:	2300      	movs	r3, #0
}
 801888e:	0018      	movs	r0, r3
 8018890:	46bd      	mov	sp, r7
 8018892:	b004      	add	sp, #16
 8018894:	bd80      	pop	{r7, pc}
	...

08018898 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018898:	b580      	push	{r7, lr}
 801889a:	b084      	sub	sp, #16
 801889c:	af00      	add	r7, sp, #0
 801889e:	60f8      	str	r0, [r7, #12]
 80188a0:	60b9      	str	r1, [r7, #8]
 80188a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80188a4:	e06b      	b.n	801897e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80188a6:	687a      	ldr	r2, [r7, #4]
 80188a8:	68b9      	ldr	r1, [r7, #8]
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	0018      	movs	r0, r3
 80188ae:	f000 f875 	bl	801899c <I2C_IsErrorOccurred>
 80188b2:	1e03      	subs	r3, r0, #0
 80188b4:	d001      	beq.n	80188ba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80188b6:	2301      	movs	r3, #1
 80188b8:	e069      	b.n	801898e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80188ba:	68fb      	ldr	r3, [r7, #12]
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	699b      	ldr	r3, [r3, #24]
 80188c0:	2220      	movs	r2, #32
 80188c2:	4013      	ands	r3, r2
 80188c4:	2b20      	cmp	r3, #32
 80188c6:	d138      	bne.n	801893a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	699b      	ldr	r3, [r3, #24]
 80188ce:	2204      	movs	r2, #4
 80188d0:	4013      	ands	r3, r2
 80188d2:	2b04      	cmp	r3, #4
 80188d4:	d105      	bne.n	80188e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d001      	beq.n	80188e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80188de:	2300      	movs	r3, #0
 80188e0:	e055      	b.n	801898e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80188e2:	68fb      	ldr	r3, [r7, #12]
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	699b      	ldr	r3, [r3, #24]
 80188e8:	2210      	movs	r2, #16
 80188ea:	4013      	ands	r3, r2
 80188ec:	2b10      	cmp	r3, #16
 80188ee:	d107      	bne.n	8018900 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	2210      	movs	r2, #16
 80188f6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	2204      	movs	r2, #4
 80188fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80188fe:	e002      	b.n	8018906 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	2200      	movs	r2, #0
 8018904:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	2220      	movs	r2, #32
 801890c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	685a      	ldr	r2, [r3, #4]
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	491f      	ldr	r1, [pc, #124]	@ (8018998 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 801891a:	400a      	ands	r2, r1
 801891c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801891e:	68fb      	ldr	r3, [r7, #12]
 8018920:	2241      	movs	r2, #65	@ 0x41
 8018922:	2120      	movs	r1, #32
 8018924:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	2242      	movs	r2, #66	@ 0x42
 801892a:	2100      	movs	r1, #0
 801892c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801892e:	68fb      	ldr	r3, [r7, #12]
 8018930:	2240      	movs	r2, #64	@ 0x40
 8018932:	2100      	movs	r1, #0
 8018934:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018936:	2301      	movs	r3, #1
 8018938:	e029      	b.n	801898e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801893a:	f7fc f83d 	bl	80149b8 <HAL_GetTick>
 801893e:	0002      	movs	r2, r0
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	1ad3      	subs	r3, r2, r3
 8018944:	68ba      	ldr	r2, [r7, #8]
 8018946:	429a      	cmp	r2, r3
 8018948:	d302      	bcc.n	8018950 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801894a:	68bb      	ldr	r3, [r7, #8]
 801894c:	2b00      	cmp	r3, #0
 801894e:	d116      	bne.n	801897e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	699b      	ldr	r3, [r3, #24]
 8018956:	2204      	movs	r2, #4
 8018958:	4013      	ands	r3, r2
 801895a:	2b04      	cmp	r3, #4
 801895c:	d00f      	beq.n	801897e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018962:	2220      	movs	r2, #32
 8018964:	431a      	orrs	r2, r3
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	2241      	movs	r2, #65	@ 0x41
 801896e:	2120      	movs	r1, #32
 8018970:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	2240      	movs	r2, #64	@ 0x40
 8018976:	2100      	movs	r1, #0
 8018978:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801897a:	2301      	movs	r3, #1
 801897c:	e007      	b.n	801898e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	699b      	ldr	r3, [r3, #24]
 8018984:	2204      	movs	r2, #4
 8018986:	4013      	ands	r3, r2
 8018988:	2b04      	cmp	r3, #4
 801898a:	d18c      	bne.n	80188a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801898c:	2300      	movs	r3, #0
}
 801898e:	0018      	movs	r0, r3
 8018990:	46bd      	mov	sp, r7
 8018992:	b004      	add	sp, #16
 8018994:	bd80      	pop	{r7, pc}
 8018996:	46c0      	nop			@ (mov r8, r8)
 8018998:	fe00e800 	.word	0xfe00e800

0801899c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801899c:	b580      	push	{r7, lr}
 801899e:	b08a      	sub	sp, #40	@ 0x28
 80189a0:	af00      	add	r7, sp, #0
 80189a2:	60f8      	str	r0, [r7, #12]
 80189a4:	60b9      	str	r1, [r7, #8]
 80189a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80189a8:	2327      	movs	r3, #39	@ 0x27
 80189aa:	18fb      	adds	r3, r7, r3
 80189ac:	2200      	movs	r2, #0
 80189ae:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	699b      	ldr	r3, [r3, #24]
 80189b6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80189b8:	2300      	movs	r3, #0
 80189ba:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80189c0:	69bb      	ldr	r3, [r7, #24]
 80189c2:	2210      	movs	r2, #16
 80189c4:	4013      	ands	r3, r2
 80189c6:	d100      	bne.n	80189ca <I2C_IsErrorOccurred+0x2e>
 80189c8:	e079      	b.n	8018abe <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80189ca:	68fb      	ldr	r3, [r7, #12]
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	2210      	movs	r2, #16
 80189d0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80189d2:	e057      	b.n	8018a84 <I2C_IsErrorOccurred+0xe8>
 80189d4:	2227      	movs	r2, #39	@ 0x27
 80189d6:	18bb      	adds	r3, r7, r2
 80189d8:	18ba      	adds	r2, r7, r2
 80189da:	7812      	ldrb	r2, [r2, #0]
 80189dc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80189de:	68bb      	ldr	r3, [r7, #8]
 80189e0:	3301      	adds	r3, #1
 80189e2:	d04f      	beq.n	8018a84 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80189e4:	f7fb ffe8 	bl	80149b8 <HAL_GetTick>
 80189e8:	0002      	movs	r2, r0
 80189ea:	69fb      	ldr	r3, [r7, #28]
 80189ec:	1ad3      	subs	r3, r2, r3
 80189ee:	68ba      	ldr	r2, [r7, #8]
 80189f0:	429a      	cmp	r2, r3
 80189f2:	d302      	bcc.n	80189fa <I2C_IsErrorOccurred+0x5e>
 80189f4:	68bb      	ldr	r3, [r7, #8]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d144      	bne.n	8018a84 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80189fa:	68fb      	ldr	r3, [r7, #12]
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	685a      	ldr	r2, [r3, #4]
 8018a00:	2380      	movs	r3, #128	@ 0x80
 8018a02:	01db      	lsls	r3, r3, #7
 8018a04:	4013      	ands	r3, r2
 8018a06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8018a08:	2013      	movs	r0, #19
 8018a0a:	183b      	adds	r3, r7, r0
 8018a0c:	68fa      	ldr	r2, [r7, #12]
 8018a0e:	2142      	movs	r1, #66	@ 0x42
 8018a10:	5c52      	ldrb	r2, [r2, r1]
 8018a12:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	699a      	ldr	r2, [r3, #24]
 8018a1a:	2380      	movs	r3, #128	@ 0x80
 8018a1c:	021b      	lsls	r3, r3, #8
 8018a1e:	401a      	ands	r2, r3
 8018a20:	2380      	movs	r3, #128	@ 0x80
 8018a22:	021b      	lsls	r3, r3, #8
 8018a24:	429a      	cmp	r2, r3
 8018a26:	d126      	bne.n	8018a76 <I2C_IsErrorOccurred+0xda>
 8018a28:	697a      	ldr	r2, [r7, #20]
 8018a2a:	2380      	movs	r3, #128	@ 0x80
 8018a2c:	01db      	lsls	r3, r3, #7
 8018a2e:	429a      	cmp	r2, r3
 8018a30:	d021      	beq.n	8018a76 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8018a32:	183b      	adds	r3, r7, r0
 8018a34:	781b      	ldrb	r3, [r3, #0]
 8018a36:	2b20      	cmp	r3, #32
 8018a38:	d01d      	beq.n	8018a76 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	685a      	ldr	r2, [r3, #4]
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	2180      	movs	r1, #128	@ 0x80
 8018a46:	01c9      	lsls	r1, r1, #7
 8018a48:	430a      	orrs	r2, r1
 8018a4a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8018a4c:	f7fb ffb4 	bl	80149b8 <HAL_GetTick>
 8018a50:	0003      	movs	r3, r0
 8018a52:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018a54:	e00f      	b.n	8018a76 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8018a56:	f7fb ffaf 	bl	80149b8 <HAL_GetTick>
 8018a5a:	0002      	movs	r2, r0
 8018a5c:	69fb      	ldr	r3, [r7, #28]
 8018a5e:	1ad3      	subs	r3, r2, r3
 8018a60:	2b19      	cmp	r3, #25
 8018a62:	d908      	bls.n	8018a76 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8018a64:	6a3b      	ldr	r3, [r7, #32]
 8018a66:	2220      	movs	r2, #32
 8018a68:	4313      	orrs	r3, r2
 8018a6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8018a6c:	2327      	movs	r3, #39	@ 0x27
 8018a6e:	18fb      	adds	r3, r7, r3
 8018a70:	2201      	movs	r2, #1
 8018a72:	701a      	strb	r2, [r3, #0]

              break;
 8018a74:	e006      	b.n	8018a84 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	699b      	ldr	r3, [r3, #24]
 8018a7c:	2220      	movs	r2, #32
 8018a7e:	4013      	ands	r3, r2
 8018a80:	2b20      	cmp	r3, #32
 8018a82:	d1e8      	bne.n	8018a56 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	699b      	ldr	r3, [r3, #24]
 8018a8a:	2220      	movs	r2, #32
 8018a8c:	4013      	ands	r3, r2
 8018a8e:	2b20      	cmp	r3, #32
 8018a90:	d004      	beq.n	8018a9c <I2C_IsErrorOccurred+0x100>
 8018a92:	2327      	movs	r3, #39	@ 0x27
 8018a94:	18fb      	adds	r3, r7, r3
 8018a96:	781b      	ldrb	r3, [r3, #0]
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d09b      	beq.n	80189d4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8018a9c:	2327      	movs	r3, #39	@ 0x27
 8018a9e:	18fb      	adds	r3, r7, r3
 8018aa0:	781b      	ldrb	r3, [r3, #0]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d103      	bne.n	8018aae <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	2220      	movs	r2, #32
 8018aac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8018aae:	6a3b      	ldr	r3, [r7, #32]
 8018ab0:	2204      	movs	r2, #4
 8018ab2:	4313      	orrs	r3, r2
 8018ab4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8018ab6:	2327      	movs	r3, #39	@ 0x27
 8018ab8:	18fb      	adds	r3, r7, r3
 8018aba:	2201      	movs	r2, #1
 8018abc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	699b      	ldr	r3, [r3, #24]
 8018ac4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8018ac6:	69ba      	ldr	r2, [r7, #24]
 8018ac8:	2380      	movs	r3, #128	@ 0x80
 8018aca:	005b      	lsls	r3, r3, #1
 8018acc:	4013      	ands	r3, r2
 8018ace:	d00c      	beq.n	8018aea <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8018ad0:	6a3b      	ldr	r3, [r7, #32]
 8018ad2:	2201      	movs	r2, #1
 8018ad4:	4313      	orrs	r3, r2
 8018ad6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8018ad8:	68fb      	ldr	r3, [r7, #12]
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	2280      	movs	r2, #128	@ 0x80
 8018ade:	0052      	lsls	r2, r2, #1
 8018ae0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018ae2:	2327      	movs	r3, #39	@ 0x27
 8018ae4:	18fb      	adds	r3, r7, r3
 8018ae6:	2201      	movs	r2, #1
 8018ae8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8018aea:	69ba      	ldr	r2, [r7, #24]
 8018aec:	2380      	movs	r3, #128	@ 0x80
 8018aee:	00db      	lsls	r3, r3, #3
 8018af0:	4013      	ands	r3, r2
 8018af2:	d00c      	beq.n	8018b0e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8018af4:	6a3b      	ldr	r3, [r7, #32]
 8018af6:	2208      	movs	r2, #8
 8018af8:	4313      	orrs	r3, r2
 8018afa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8018afc:	68fb      	ldr	r3, [r7, #12]
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	2280      	movs	r2, #128	@ 0x80
 8018b02:	00d2      	lsls	r2, r2, #3
 8018b04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018b06:	2327      	movs	r3, #39	@ 0x27
 8018b08:	18fb      	adds	r3, r7, r3
 8018b0a:	2201      	movs	r2, #1
 8018b0c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8018b0e:	69ba      	ldr	r2, [r7, #24]
 8018b10:	2380      	movs	r3, #128	@ 0x80
 8018b12:	009b      	lsls	r3, r3, #2
 8018b14:	4013      	ands	r3, r2
 8018b16:	d00c      	beq.n	8018b32 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8018b18:	6a3b      	ldr	r3, [r7, #32]
 8018b1a:	2202      	movs	r2, #2
 8018b1c:	4313      	orrs	r3, r2
 8018b1e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	2280      	movs	r2, #128	@ 0x80
 8018b26:	0092      	lsls	r2, r2, #2
 8018b28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018b2a:	2327      	movs	r3, #39	@ 0x27
 8018b2c:	18fb      	adds	r3, r7, r3
 8018b2e:	2201      	movs	r2, #1
 8018b30:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8018b32:	2327      	movs	r3, #39	@ 0x27
 8018b34:	18fb      	adds	r3, r7, r3
 8018b36:	781b      	ldrb	r3, [r3, #0]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d01d      	beq.n	8018b78 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018b3c:	68fb      	ldr	r3, [r7, #12]
 8018b3e:	0018      	movs	r0, r3
 8018b40:	f7ff fcd7 	bl	80184f2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	685a      	ldr	r2, [r3, #4]
 8018b4a:	68fb      	ldr	r3, [r7, #12]
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	490e      	ldr	r1, [pc, #56]	@ (8018b88 <I2C_IsErrorOccurred+0x1ec>)
 8018b50:	400a      	ands	r2, r1
 8018b52:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018b58:	6a3b      	ldr	r3, [r7, #32]
 8018b5a:	431a      	orrs	r2, r3
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	2241      	movs	r2, #65	@ 0x41
 8018b64:	2120      	movs	r1, #32
 8018b66:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	2242      	movs	r2, #66	@ 0x42
 8018b6c:	2100      	movs	r1, #0
 8018b6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018b70:	68fb      	ldr	r3, [r7, #12]
 8018b72:	2240      	movs	r2, #64	@ 0x40
 8018b74:	2100      	movs	r1, #0
 8018b76:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8018b78:	2327      	movs	r3, #39	@ 0x27
 8018b7a:	18fb      	adds	r3, r7, r3
 8018b7c:	781b      	ldrb	r3, [r3, #0]
}
 8018b7e:	0018      	movs	r0, r3
 8018b80:	46bd      	mov	sp, r7
 8018b82:	b00a      	add	sp, #40	@ 0x28
 8018b84:	bd80      	pop	{r7, pc}
 8018b86:	46c0      	nop			@ (mov r8, r8)
 8018b88:	fe00e800 	.word	0xfe00e800

08018b8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8018b8c:	b590      	push	{r4, r7, lr}
 8018b8e:	b087      	sub	sp, #28
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	60f8      	str	r0, [r7, #12]
 8018b94:	0008      	movs	r0, r1
 8018b96:	0011      	movs	r1, r2
 8018b98:	607b      	str	r3, [r7, #4]
 8018b9a:	240a      	movs	r4, #10
 8018b9c:	193b      	adds	r3, r7, r4
 8018b9e:	1c02      	adds	r2, r0, #0
 8018ba0:	801a      	strh	r2, [r3, #0]
 8018ba2:	2009      	movs	r0, #9
 8018ba4:	183b      	adds	r3, r7, r0
 8018ba6:	1c0a      	adds	r2, r1, #0
 8018ba8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018baa:	193b      	adds	r3, r7, r4
 8018bac:	881b      	ldrh	r3, [r3, #0]
 8018bae:	059b      	lsls	r3, r3, #22
 8018bb0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018bb2:	183b      	adds	r3, r7, r0
 8018bb4:	781b      	ldrb	r3, [r3, #0]
 8018bb6:	0419      	lsls	r1, r3, #16
 8018bb8:	23ff      	movs	r3, #255	@ 0xff
 8018bba:	041b      	lsls	r3, r3, #16
 8018bbc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018bbe:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bc6:	4313      	orrs	r3, r2
 8018bc8:	005b      	lsls	r3, r3, #1
 8018bca:	085b      	lsrs	r3, r3, #1
 8018bcc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	685b      	ldr	r3, [r3, #4]
 8018bd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018bd6:	0d51      	lsrs	r1, r2, #21
 8018bd8:	2280      	movs	r2, #128	@ 0x80
 8018bda:	00d2      	lsls	r2, r2, #3
 8018bdc:	400a      	ands	r2, r1
 8018bde:	4907      	ldr	r1, [pc, #28]	@ (8018bfc <I2C_TransferConfig+0x70>)
 8018be0:	430a      	orrs	r2, r1
 8018be2:	43d2      	mvns	r2, r2
 8018be4:	401a      	ands	r2, r3
 8018be6:	0011      	movs	r1, r2
 8018be8:	68fb      	ldr	r3, [r7, #12]
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	697a      	ldr	r2, [r7, #20]
 8018bee:	430a      	orrs	r2, r1
 8018bf0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8018bf2:	46c0      	nop			@ (mov r8, r8)
 8018bf4:	46bd      	mov	sp, r7
 8018bf6:	b007      	add	sp, #28
 8018bf8:	bd90      	pop	{r4, r7, pc}
 8018bfa:	46c0      	nop			@ (mov r8, r8)
 8018bfc:	03ff63ff 	.word	0x03ff63ff

08018c00 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8018c00:	b580      	push	{r7, lr}
 8018c02:	b084      	sub	sp, #16
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	6078      	str	r0, [r7, #4]
 8018c08:	000a      	movs	r2, r1
 8018c0a:	1cbb      	adds	r3, r7, #2
 8018c0c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8018c0e:	2300      	movs	r3, #0
 8018c10:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018c16:	4b3e      	ldr	r3, [pc, #248]	@ (8018d10 <I2C_Enable_IRQ+0x110>)
 8018c18:	429a      	cmp	r2, r3
 8018c1a:	d035      	beq.n	8018c88 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018c20:	4b3c      	ldr	r3, [pc, #240]	@ (8018d14 <I2C_Enable_IRQ+0x114>)
 8018c22:	429a      	cmp	r2, r3
 8018c24:	d030      	beq.n	8018c88 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8018c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8018d18 <I2C_Enable_IRQ+0x118>)
 8018c2c:	429a      	cmp	r2, r3
 8018c2e:	d02b      	beq.n	8018c88 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018c30:	1cbb      	adds	r3, r7, #2
 8018c32:	2200      	movs	r2, #0
 8018c34:	5e9b      	ldrsh	r3, [r3, r2]
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	da03      	bge.n	8018c42 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018c3a:	68fb      	ldr	r3, [r7, #12]
 8018c3c:	22b8      	movs	r2, #184	@ 0xb8
 8018c3e:	4313      	orrs	r3, r2
 8018c40:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018c42:	1cbb      	adds	r3, r7, #2
 8018c44:	881b      	ldrh	r3, [r3, #0]
 8018c46:	2201      	movs	r2, #1
 8018c48:	4013      	ands	r3, r2
 8018c4a:	d003      	beq.n	8018c54 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	22f2      	movs	r2, #242	@ 0xf2
 8018c50:	4313      	orrs	r3, r2
 8018c52:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018c54:	1cbb      	adds	r3, r7, #2
 8018c56:	881b      	ldrh	r3, [r3, #0]
 8018c58:	2202      	movs	r2, #2
 8018c5a:	4013      	ands	r3, r2
 8018c5c:	d003      	beq.n	8018c66 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8018c5e:	68fb      	ldr	r3, [r7, #12]
 8018c60:	22f4      	movs	r2, #244	@ 0xf4
 8018c62:	4313      	orrs	r3, r2
 8018c64:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018c66:	1cbb      	adds	r3, r7, #2
 8018c68:	881b      	ldrh	r3, [r3, #0]
 8018c6a:	2b10      	cmp	r3, #16
 8018c6c:	d103      	bne.n	8018c76 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	2290      	movs	r2, #144	@ 0x90
 8018c72:	4313      	orrs	r3, r2
 8018c74:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018c76:	1cbb      	adds	r3, r7, #2
 8018c78:	881b      	ldrh	r3, [r3, #0]
 8018c7a:	2b20      	cmp	r3, #32
 8018c7c:	d13c      	bne.n	8018cf8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8018c7e:	68fb      	ldr	r3, [r7, #12]
 8018c80:	2220      	movs	r2, #32
 8018c82:	4313      	orrs	r3, r2
 8018c84:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018c86:	e037      	b.n	8018cf8 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018c88:	1cbb      	adds	r3, r7, #2
 8018c8a:	2200      	movs	r2, #0
 8018c8c:	5e9b      	ldrsh	r3, [r3, r2]
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	da03      	bge.n	8018c9a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	22b8      	movs	r2, #184	@ 0xb8
 8018c96:	4313      	orrs	r3, r2
 8018c98:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018c9a:	1cbb      	adds	r3, r7, #2
 8018c9c:	881b      	ldrh	r3, [r3, #0]
 8018c9e:	2201      	movs	r2, #1
 8018ca0:	4013      	ands	r3, r2
 8018ca2:	d003      	beq.n	8018cac <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018ca4:	68fb      	ldr	r3, [r7, #12]
 8018ca6:	22f2      	movs	r2, #242	@ 0xf2
 8018ca8:	4313      	orrs	r3, r2
 8018caa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018cac:	1cbb      	adds	r3, r7, #2
 8018cae:	881b      	ldrh	r3, [r3, #0]
 8018cb0:	2202      	movs	r2, #2
 8018cb2:	4013      	ands	r3, r2
 8018cb4:	d003      	beq.n	8018cbe <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8018cb6:	68fb      	ldr	r3, [r7, #12]
 8018cb8:	22f4      	movs	r2, #244	@ 0xf4
 8018cba:	4313      	orrs	r3, r2
 8018cbc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018cbe:	1cbb      	adds	r3, r7, #2
 8018cc0:	881b      	ldrh	r3, [r3, #0]
 8018cc2:	2b10      	cmp	r3, #16
 8018cc4:	d103      	bne.n	8018cce <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018cc6:	68fb      	ldr	r3, [r7, #12]
 8018cc8:	2290      	movs	r2, #144	@ 0x90
 8018cca:	4313      	orrs	r3, r2
 8018ccc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018cce:	1cbb      	adds	r3, r7, #2
 8018cd0:	881b      	ldrh	r3, [r3, #0]
 8018cd2:	2b20      	cmp	r3, #32
 8018cd4:	d103      	bne.n	8018cde <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	2260      	movs	r2, #96	@ 0x60
 8018cda:	4313      	orrs	r3, r2
 8018cdc:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8018d18 <I2C_Enable_IRQ+0x118>)
 8018ce4:	429a      	cmp	r2, r3
 8018ce6:	d007      	beq.n	8018cf8 <I2C_Enable_IRQ+0xf8>
 8018ce8:	1cbb      	adds	r3, r7, #2
 8018cea:	881b      	ldrh	r3, [r3, #0]
 8018cec:	2b40      	cmp	r3, #64	@ 0x40
 8018cee:	d103      	bne.n	8018cf8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8018cf0:	68fb      	ldr	r3, [r7, #12]
 8018cf2:	2240      	movs	r2, #64	@ 0x40
 8018cf4:	4313      	orrs	r3, r2
 8018cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	6819      	ldr	r1, [r3, #0]
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	68fa      	ldr	r2, [r7, #12]
 8018d04:	430a      	orrs	r2, r1
 8018d06:	601a      	str	r2, [r3, #0]
}
 8018d08:	46c0      	nop			@ (mov r8, r8)
 8018d0a:	46bd      	mov	sp, r7
 8018d0c:	b004      	add	sp, #16
 8018d0e:	bd80      	pop	{r7, pc}
 8018d10:	08017375 	.word	0x08017375
 8018d14:	080177ed 	.word	0x080177ed
 8018d18:	0801758d 	.word	0x0801758d

08018d1c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8018d1c:	b580      	push	{r7, lr}
 8018d1e:	b084      	sub	sp, #16
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	6078      	str	r0, [r7, #4]
 8018d24:	000a      	movs	r2, r1
 8018d26:	1cbb      	adds	r3, r7, #2
 8018d28:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018d2e:	1cbb      	adds	r3, r7, #2
 8018d30:	881b      	ldrh	r3, [r3, #0]
 8018d32:	2201      	movs	r2, #1
 8018d34:	4013      	ands	r3, r2
 8018d36:	d010      	beq.n	8018d5a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8018d38:	68fb      	ldr	r3, [r7, #12]
 8018d3a:	2242      	movs	r2, #66	@ 0x42
 8018d3c:	4313      	orrs	r3, r2
 8018d3e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	2241      	movs	r2, #65	@ 0x41
 8018d44:	5c9b      	ldrb	r3, [r3, r2]
 8018d46:	b2db      	uxtb	r3, r3
 8018d48:	001a      	movs	r2, r3
 8018d4a:	2328      	movs	r3, #40	@ 0x28
 8018d4c:	4013      	ands	r3, r2
 8018d4e:	2b28      	cmp	r3, #40	@ 0x28
 8018d50:	d003      	beq.n	8018d5a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	22b0      	movs	r2, #176	@ 0xb0
 8018d56:	4313      	orrs	r3, r2
 8018d58:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018d5a:	1cbb      	adds	r3, r7, #2
 8018d5c:	881b      	ldrh	r3, [r3, #0]
 8018d5e:	2202      	movs	r2, #2
 8018d60:	4013      	ands	r3, r2
 8018d62:	d010      	beq.n	8018d86 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	2244      	movs	r2, #68	@ 0x44
 8018d68:	4313      	orrs	r3, r2
 8018d6a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	2241      	movs	r2, #65	@ 0x41
 8018d70:	5c9b      	ldrb	r3, [r3, r2]
 8018d72:	b2db      	uxtb	r3, r3
 8018d74:	001a      	movs	r2, r3
 8018d76:	2328      	movs	r3, #40	@ 0x28
 8018d78:	4013      	ands	r3, r2
 8018d7a:	2b28      	cmp	r3, #40	@ 0x28
 8018d7c:	d003      	beq.n	8018d86 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018d7e:	68fb      	ldr	r3, [r7, #12]
 8018d80:	22b0      	movs	r2, #176	@ 0xb0
 8018d82:	4313      	orrs	r3, r2
 8018d84:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018d86:	1cbb      	adds	r3, r7, #2
 8018d88:	2200      	movs	r2, #0
 8018d8a:	5e9b      	ldrsh	r3, [r3, r2]
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	da03      	bge.n	8018d98 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	22b8      	movs	r2, #184	@ 0xb8
 8018d94:	4313      	orrs	r3, r2
 8018d96:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018d98:	1cbb      	adds	r3, r7, #2
 8018d9a:	881b      	ldrh	r3, [r3, #0]
 8018d9c:	2b10      	cmp	r3, #16
 8018d9e:	d103      	bne.n	8018da8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	2290      	movs	r2, #144	@ 0x90
 8018da4:	4313      	orrs	r3, r2
 8018da6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018da8:	1cbb      	adds	r3, r7, #2
 8018daa:	881b      	ldrh	r3, [r3, #0]
 8018dac:	2b20      	cmp	r3, #32
 8018dae:	d103      	bne.n	8018db8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	2220      	movs	r2, #32
 8018db4:	4313      	orrs	r3, r2
 8018db6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8018db8:	1cbb      	adds	r3, r7, #2
 8018dba:	881b      	ldrh	r3, [r3, #0]
 8018dbc:	2b40      	cmp	r3, #64	@ 0x40
 8018dbe:	d103      	bne.n	8018dc8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	2240      	movs	r2, #64	@ 0x40
 8018dc4:	4313      	orrs	r3, r2
 8018dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	681a      	ldr	r2, [r3, #0]
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	43d9      	mvns	r1, r3
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	400a      	ands	r2, r1
 8018dd8:	601a      	str	r2, [r3, #0]
}
 8018dda:	46c0      	nop			@ (mov r8, r8)
 8018ddc:	46bd      	mov	sp, r7
 8018dde:	b004      	add	sp, #16
 8018de0:	bd80      	pop	{r7, pc}
	...

08018de4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8018de4:	b580      	push	{r7, lr}
 8018de6:	b082      	sub	sp, #8
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	6078      	str	r0, [r7, #4]
 8018dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	2241      	movs	r2, #65	@ 0x41
 8018df2:	5c9b      	ldrb	r3, [r3, r2]
 8018df4:	b2db      	uxtb	r3, r3
 8018df6:	2b20      	cmp	r3, #32
 8018df8:	d138      	bne.n	8018e6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	2240      	movs	r2, #64	@ 0x40
 8018dfe:	5c9b      	ldrb	r3, [r3, r2]
 8018e00:	2b01      	cmp	r3, #1
 8018e02:	d101      	bne.n	8018e08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8018e04:	2302      	movs	r3, #2
 8018e06:	e032      	b.n	8018e6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	2240      	movs	r2, #64	@ 0x40
 8018e0c:	2101      	movs	r1, #1
 8018e0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	2241      	movs	r2, #65	@ 0x41
 8018e14:	2124      	movs	r1, #36	@ 0x24
 8018e16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	681a      	ldr	r2, [r3, #0]
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	2101      	movs	r1, #1
 8018e24:	438a      	bics	r2, r1
 8018e26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	681a      	ldr	r2, [r3, #0]
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	4911      	ldr	r1, [pc, #68]	@ (8018e78 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8018e34:	400a      	ands	r2, r1
 8018e36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	6819      	ldr	r1, [r3, #0]
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	683a      	ldr	r2, [r7, #0]
 8018e44:	430a      	orrs	r2, r1
 8018e46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	681a      	ldr	r2, [r3, #0]
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	2101      	movs	r1, #1
 8018e54:	430a      	orrs	r2, r1
 8018e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	2241      	movs	r2, #65	@ 0x41
 8018e5c:	2120      	movs	r1, #32
 8018e5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	2240      	movs	r2, #64	@ 0x40
 8018e64:	2100      	movs	r1, #0
 8018e66:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018e68:	2300      	movs	r3, #0
 8018e6a:	e000      	b.n	8018e6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018e6c:	2302      	movs	r3, #2
  }
}
 8018e6e:	0018      	movs	r0, r3
 8018e70:	46bd      	mov	sp, r7
 8018e72:	b002      	add	sp, #8
 8018e74:	bd80      	pop	{r7, pc}
 8018e76:	46c0      	nop			@ (mov r8, r8)
 8018e78:	ffffefff 	.word	0xffffefff

08018e7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8018e7c:	b580      	push	{r7, lr}
 8018e7e:	b084      	sub	sp, #16
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	6078      	str	r0, [r7, #4]
 8018e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	2241      	movs	r2, #65	@ 0x41
 8018e8a:	5c9b      	ldrb	r3, [r3, r2]
 8018e8c:	b2db      	uxtb	r3, r3
 8018e8e:	2b20      	cmp	r3, #32
 8018e90:	d139      	bne.n	8018f06 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	2240      	movs	r2, #64	@ 0x40
 8018e96:	5c9b      	ldrb	r3, [r3, r2]
 8018e98:	2b01      	cmp	r3, #1
 8018e9a:	d101      	bne.n	8018ea0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8018e9c:	2302      	movs	r3, #2
 8018e9e:	e033      	b.n	8018f08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	2240      	movs	r2, #64	@ 0x40
 8018ea4:	2101      	movs	r1, #1
 8018ea6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	2241      	movs	r2, #65	@ 0x41
 8018eac:	2124      	movs	r1, #36	@ 0x24
 8018eae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	681a      	ldr	r2, [r3, #0]
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	2101      	movs	r1, #1
 8018ebc:	438a      	bics	r2, r1
 8018ebe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	4a11      	ldr	r2, [pc, #68]	@ (8018f10 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8018ecc:	4013      	ands	r3, r2
 8018ece:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8018ed0:	683b      	ldr	r3, [r7, #0]
 8018ed2:	021b      	lsls	r3, r3, #8
 8018ed4:	68fa      	ldr	r2, [r7, #12]
 8018ed6:	4313      	orrs	r3, r2
 8018ed8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	68fa      	ldr	r2, [r7, #12]
 8018ee0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	681a      	ldr	r2, [r3, #0]
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	2101      	movs	r1, #1
 8018eee:	430a      	orrs	r2, r1
 8018ef0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	2241      	movs	r2, #65	@ 0x41
 8018ef6:	2120      	movs	r1, #32
 8018ef8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	2240      	movs	r2, #64	@ 0x40
 8018efe:	2100      	movs	r1, #0
 8018f00:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018f02:	2300      	movs	r3, #0
 8018f04:	e000      	b.n	8018f08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8018f06:	2302      	movs	r3, #2
  }
}
 8018f08:	0018      	movs	r0, r3
 8018f0a:	46bd      	mov	sp, r7
 8018f0c:	b004      	add	sp, #16
 8018f0e:	bd80      	pop	{r7, pc}
 8018f10:	fffff0ff 	.word	0xfffff0ff

08018f14 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8018f14:	b580      	push	{r7, lr}
 8018f16:	b088      	sub	sp, #32
 8018f18:	af00      	add	r7, sp, #0
 8018f1a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d101      	bne.n	8018f26 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8018f22:	2301      	movs	r3, #1
 8018f24:	e0e1      	b.n	80190ea <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	2235      	movs	r2, #53	@ 0x35
 8018f2a:	5c9b      	ldrb	r3, [r3, r2]
 8018f2c:	b2db      	uxtb	r3, r3
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d107      	bne.n	8018f42 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	2234      	movs	r2, #52	@ 0x34
 8018f36:	2100      	movs	r1, #0
 8018f38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	0018      	movs	r0, r3
 8018f3e:	f7f3 fdad 	bl	800ca9c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	2235      	movs	r2, #53	@ 0x35
 8018f46:	2102      	movs	r1, #2
 8018f48:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	69da      	ldr	r2, [r3, #28]
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	4967      	ldr	r1, [pc, #412]	@ (80190f4 <HAL_I2S_Init+0x1e0>)
 8018f56:	400a      	ands	r2, r1
 8018f58:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	2202      	movs	r2, #2
 8018f60:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	695b      	ldr	r3, [r3, #20]
 8018f66:	2b02      	cmp	r3, #2
 8018f68:	d073      	beq.n	8019052 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	68db      	ldr	r3, [r3, #12]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d102      	bne.n	8018f78 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8018f72:	2310      	movs	r3, #16
 8018f74:	617b      	str	r3, [r7, #20]
 8018f76:	e001      	b.n	8018f7c <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8018f78:	2320      	movs	r3, #32
 8018f7a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	689b      	ldr	r3, [r3, #8]
 8018f80:	2b20      	cmp	r3, #32
 8018f82:	d802      	bhi.n	8018f8a <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8018f84:	697b      	ldr	r3, [r7, #20]
 8018f86:	005b      	lsls	r3, r3, #1
 8018f88:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8018f8a:	f002 febd 	bl	801bd08 <HAL_RCC_GetSysClockFreq>
 8018f8e:	0003      	movs	r3, r0
 8018f90:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	691a      	ldr	r2, [r3, #16]
 8018f96:	2380      	movs	r3, #128	@ 0x80
 8018f98:	009b      	lsls	r3, r3, #2
 8018f9a:	429a      	cmp	r2, r3
 8018f9c:	d131      	bne.n	8019002 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	68db      	ldr	r3, [r3, #12]
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d016      	beq.n	8018fd4 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018fa6:	697b      	ldr	r3, [r7, #20]
 8018fa8:	009b      	lsls	r3, r3, #2
 8018faa:	0019      	movs	r1, r3
 8018fac:	68f8      	ldr	r0, [r7, #12]
 8018fae:	f7e7 f8f9 	bl	80001a4 <__udivsi3>
 8018fb2:	0003      	movs	r3, r0
 8018fb4:	001a      	movs	r2, r3
 8018fb6:	0013      	movs	r3, r2
 8018fb8:	009b      	lsls	r3, r3, #2
 8018fba:	189b      	adds	r3, r3, r2
 8018fbc:	005b      	lsls	r3, r3, #1
 8018fbe:	001a      	movs	r2, r3
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	695b      	ldr	r3, [r3, #20]
 8018fc4:	0019      	movs	r1, r3
 8018fc6:	0010      	movs	r0, r2
 8018fc8:	f7e7 f8ec 	bl	80001a4 <__udivsi3>
 8018fcc:	0003      	movs	r3, r0
 8018fce:	3305      	adds	r3, #5
 8018fd0:	613b      	str	r3, [r7, #16]
 8018fd2:	e02a      	b.n	801902a <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018fd4:	697b      	ldr	r3, [r7, #20]
 8018fd6:	00db      	lsls	r3, r3, #3
 8018fd8:	0019      	movs	r1, r3
 8018fda:	68f8      	ldr	r0, [r7, #12]
 8018fdc:	f7e7 f8e2 	bl	80001a4 <__udivsi3>
 8018fe0:	0003      	movs	r3, r0
 8018fe2:	001a      	movs	r2, r3
 8018fe4:	0013      	movs	r3, r2
 8018fe6:	009b      	lsls	r3, r3, #2
 8018fe8:	189b      	adds	r3, r3, r2
 8018fea:	005b      	lsls	r3, r3, #1
 8018fec:	001a      	movs	r2, r3
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	695b      	ldr	r3, [r3, #20]
 8018ff2:	0019      	movs	r1, r3
 8018ff4:	0010      	movs	r0, r2
 8018ff6:	f7e7 f8d5 	bl	80001a4 <__udivsi3>
 8018ffa:	0003      	movs	r3, r0
 8018ffc:	3305      	adds	r3, #5
 8018ffe:	613b      	str	r3, [r7, #16]
 8019000:	e013      	b.n	801902a <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8019002:	6979      	ldr	r1, [r7, #20]
 8019004:	68f8      	ldr	r0, [r7, #12]
 8019006:	f7e7 f8cd 	bl	80001a4 <__udivsi3>
 801900a:	0003      	movs	r3, r0
 801900c:	001a      	movs	r2, r3
 801900e:	0013      	movs	r3, r2
 8019010:	009b      	lsls	r3, r3, #2
 8019012:	189b      	adds	r3, r3, r2
 8019014:	005b      	lsls	r3, r3, #1
 8019016:	001a      	movs	r2, r3
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	695b      	ldr	r3, [r3, #20]
 801901c:	0019      	movs	r1, r3
 801901e:	0010      	movs	r0, r2
 8019020:	f7e7 f8c0 	bl	80001a4 <__udivsi3>
 8019024:	0003      	movs	r3, r0
 8019026:	3305      	adds	r3, #5
 8019028:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 801902a:	693b      	ldr	r3, [r7, #16]
 801902c:	210a      	movs	r1, #10
 801902e:	0018      	movs	r0, r3
 8019030:	f7e7 f8b8 	bl	80001a4 <__udivsi3>
 8019034:	0003      	movs	r3, r0
 8019036:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8019038:	693b      	ldr	r3, [r7, #16]
 801903a:	2201      	movs	r2, #1
 801903c:	4013      	ands	r3, r2
 801903e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8019040:	693a      	ldr	r2, [r7, #16]
 8019042:	69bb      	ldr	r3, [r7, #24]
 8019044:	1ad3      	subs	r3, r2, r3
 8019046:	085b      	lsrs	r3, r3, #1
 8019048:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 801904a:	69bb      	ldr	r3, [r7, #24]
 801904c:	021b      	lsls	r3, r3, #8
 801904e:	61bb      	str	r3, [r7, #24]
 8019050:	e003      	b.n	801905a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8019052:	2302      	movs	r3, #2
 8019054:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8019056:	2300      	movs	r3, #0
 8019058:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 801905a:	69fb      	ldr	r3, [r7, #28]
 801905c:	2b01      	cmp	r3, #1
 801905e:	d902      	bls.n	8019066 <HAL_I2S_Init+0x152>
 8019060:	69fb      	ldr	r3, [r7, #28]
 8019062:	2bff      	cmp	r3, #255	@ 0xff
 8019064:	d907      	bls.n	8019076 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801906a:	2210      	movs	r2, #16
 801906c:	431a      	orrs	r2, r3
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8019072:	2301      	movs	r3, #1
 8019074:	e039      	b.n	80190ea <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	691a      	ldr	r2, [r3, #16]
 801907a:	69bb      	ldr	r3, [r7, #24]
 801907c:	431a      	orrs	r2, r3
 801907e:	0011      	movs	r1, r2
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	69fa      	ldr	r2, [r7, #28]
 8019086:	430a      	orrs	r2, r1
 8019088:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	69db      	ldr	r3, [r3, #28]
 8019090:	4a18      	ldr	r2, [pc, #96]	@ (80190f4 <HAL_I2S_Init+0x1e0>)
 8019092:	401a      	ands	r2, r3
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	6859      	ldr	r1, [r3, #4]
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	689b      	ldr	r3, [r3, #8]
 801909c:	4319      	orrs	r1, r3
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	68db      	ldr	r3, [r3, #12]
 80190a2:	4319      	orrs	r1, r3
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	699b      	ldr	r3, [r3, #24]
 80190a8:	430b      	orrs	r3, r1
 80190aa:	431a      	orrs	r2, r3
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	681b      	ldr	r3, [r3, #0]
 80190b0:	2180      	movs	r1, #128	@ 0x80
 80190b2:	0109      	lsls	r1, r1, #4
 80190b4:	430a      	orrs	r2, r1
 80190b6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	689b      	ldr	r3, [r3, #8]
 80190bc:	2b30      	cmp	r3, #48	@ 0x30
 80190be:	d003      	beq.n	80190c8 <HAL_I2S_Init+0x1b4>
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	689b      	ldr	r3, [r3, #8]
 80190c4:	2bb0      	cmp	r3, #176	@ 0xb0
 80190c6:	d108      	bne.n	80190da <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	69da      	ldr	r2, [r3, #28]
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	681b      	ldr	r3, [r3, #0]
 80190d2:	2180      	movs	r1, #128	@ 0x80
 80190d4:	0149      	lsls	r1, r1, #5
 80190d6:	430a      	orrs	r2, r1
 80190d8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	2200      	movs	r2, #0
 80190de:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	2235      	movs	r2, #53	@ 0x35
 80190e4:	2101      	movs	r1, #1
 80190e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80190e8:	2300      	movs	r3, #0
}
 80190ea:	0018      	movs	r0, r3
 80190ec:	46bd      	mov	sp, r7
 80190ee:	b008      	add	sp, #32
 80190f0:	bd80      	pop	{r7, pc}
 80190f2:	46c0      	nop			@ (mov r8, r8)
 80190f4:	fffff040 	.word	0xfffff040

080190f8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b086      	sub	sp, #24
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	60f8      	str	r0, [r7, #12]
 8019100:	60b9      	str	r1, [r7, #8]
 8019102:	1dbb      	adds	r3, r7, #6
 8019104:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8019106:	68bb      	ldr	r3, [r7, #8]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d003      	beq.n	8019114 <HAL_I2S_Receive_DMA+0x1c>
 801910c:	1dbb      	adds	r3, r7, #6
 801910e:	881b      	ldrh	r3, [r3, #0]
 8019110:	2b00      	cmp	r3, #0
 8019112:	d101      	bne.n	8019118 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8019114:	2301      	movs	r3, #1
 8019116:	e0a6      	b.n	8019266 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8019118:	68fb      	ldr	r3, [r7, #12]
 801911a:	2234      	movs	r2, #52	@ 0x34
 801911c:	5c9b      	ldrb	r3, [r3, r2]
 801911e:	b2db      	uxtb	r3, r3
 8019120:	2b01      	cmp	r3, #1
 8019122:	d101      	bne.n	8019128 <HAL_I2S_Receive_DMA+0x30>
 8019124:	2302      	movs	r3, #2
 8019126:	e09e      	b.n	8019266 <HAL_I2S_Receive_DMA+0x16e>
 8019128:	68fb      	ldr	r3, [r7, #12]
 801912a:	2234      	movs	r2, #52	@ 0x34
 801912c:	2101      	movs	r1, #1
 801912e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	2235      	movs	r2, #53	@ 0x35
 8019134:	5c9b      	ldrb	r3, [r3, r2]
 8019136:	b2db      	uxtb	r3, r3
 8019138:	2b01      	cmp	r3, #1
 801913a:	d005      	beq.n	8019148 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 801913c:	68fb      	ldr	r3, [r7, #12]
 801913e:	2234      	movs	r2, #52	@ 0x34
 8019140:	2100      	movs	r1, #0
 8019142:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8019144:	2302      	movs	r3, #2
 8019146:	e08e      	b.n	8019266 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	2235      	movs	r2, #53	@ 0x35
 801914c:	2104      	movs	r1, #4
 801914e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8019150:	68fb      	ldr	r3, [r7, #12]
 8019152:	2200      	movs	r2, #0
 8019154:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	68ba      	ldr	r2, [r7, #8]
 801915a:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	69db      	ldr	r3, [r3, #28]
 8019162:	2207      	movs	r2, #7
 8019164:	4013      	ands	r3, r2
 8019166:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8019168:	697b      	ldr	r3, [r7, #20]
 801916a:	2b03      	cmp	r3, #3
 801916c:	d002      	beq.n	8019174 <HAL_I2S_Receive_DMA+0x7c>
 801916e:	697b      	ldr	r3, [r7, #20]
 8019170:	2b05      	cmp	r3, #5
 8019172:	d10c      	bne.n	801918e <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8019174:	1dbb      	adds	r3, r7, #6
 8019176:	881b      	ldrh	r3, [r3, #0]
 8019178:	18db      	adds	r3, r3, r3
 801917a:	b29a      	uxth	r2, r3
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8019180:	1dbb      	adds	r3, r7, #6
 8019182:	881b      	ldrh	r3, [r3, #0]
 8019184:	18db      	adds	r3, r3, r3
 8019186:	b29a      	uxth	r2, r3
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801918c:	e007      	b.n	801919e <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	1dba      	adds	r2, r7, #6
 8019192:	8812      	ldrh	r2, [r2, #0]
 8019194:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	1dba      	adds	r2, r7, #6
 801919a:	8812      	ldrh	r2, [r2, #0]
 801919c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80191a2:	4a33      	ldr	r2, [pc, #204]	@ (8019270 <HAL_I2S_Receive_DMA+0x178>)
 80191a4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80191aa:	4a32      	ldr	r2, [pc, #200]	@ (8019274 <HAL_I2S_Receive_DMA+0x17c>)
 80191ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80191b2:	4a31      	ldr	r2, [pc, #196]	@ (8019278 <HAL_I2S_Receive_DMA+0x180>)
 80191b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80191b6:	68fb      	ldr	r3, [r7, #12]
 80191b8:	681b      	ldr	r3, [r3, #0]
 80191ba:	69da      	ldr	r2, [r3, #28]
 80191bc:	23c0      	movs	r3, #192	@ 0xc0
 80191be:	009b      	lsls	r3, r3, #2
 80191c0:	401a      	ands	r2, r3
 80191c2:	23c0      	movs	r3, #192	@ 0xc0
 80191c4:	009b      	lsls	r3, r3, #2
 80191c6:	429a      	cmp	r2, r3
 80191c8:	d10a      	bne.n	80191e0 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80191ca:	2300      	movs	r3, #0
 80191cc:	613b      	str	r3, [r7, #16]
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	68db      	ldr	r3, [r3, #12]
 80191d4:	613b      	str	r3, [r7, #16]
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	689b      	ldr	r3, [r3, #8]
 80191dc:	613b      	str	r3, [r7, #16]
 80191de:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	330c      	adds	r3, #12
 80191ea:	0019      	movs	r1, r3
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80191f0:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80191f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80191f8:	f7fc f8fc 	bl	80153f4 <HAL_DMA_Start_IT>
 80191fc:	1e03      	subs	r3, r0, #0
 80191fe:	d00f      	beq.n	8019220 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8019200:	68fb      	ldr	r3, [r7, #12]
 8019202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019204:	2208      	movs	r2, #8
 8019206:	431a      	orrs	r2, r3
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 801920c:	68fb      	ldr	r3, [r7, #12]
 801920e:	2235      	movs	r2, #53	@ 0x35
 8019210:	2101      	movs	r1, #1
 8019212:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	2234      	movs	r2, #52	@ 0x34
 8019218:	2100      	movs	r1, #0
 801921a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 801921c:	2301      	movs	r3, #1
 801921e:	e022      	b.n	8019266 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	69da      	ldr	r2, [r3, #28]
 8019226:	2380      	movs	r3, #128	@ 0x80
 8019228:	00db      	lsls	r3, r3, #3
 801922a:	4013      	ands	r3, r2
 801922c:	d108      	bne.n	8019240 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 801922e:	68fb      	ldr	r3, [r7, #12]
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	69da      	ldr	r2, [r3, #28]
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	2180      	movs	r1, #128	@ 0x80
 801923a:	00c9      	lsls	r1, r1, #3
 801923c:	430a      	orrs	r2, r1
 801923e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8019240:	68fb      	ldr	r3, [r7, #12]
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	685b      	ldr	r3, [r3, #4]
 8019246:	2201      	movs	r2, #1
 8019248:	4013      	ands	r3, r2
 801924a:	d107      	bne.n	801925c <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801924c:	68fb      	ldr	r3, [r7, #12]
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	685a      	ldr	r2, [r3, #4]
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	681b      	ldr	r3, [r3, #0]
 8019256:	2101      	movs	r1, #1
 8019258:	430a      	orrs	r2, r1
 801925a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 801925c:	68fb      	ldr	r3, [r7, #12]
 801925e:	2234      	movs	r2, #52	@ 0x34
 8019260:	2100      	movs	r1, #0
 8019262:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8019264:	2300      	movs	r3, #0
}
 8019266:	0018      	movs	r0, r3
 8019268:	46bd      	mov	sp, r7
 801926a:	b006      	add	sp, #24
 801926c:	bd80      	pop	{r7, pc}
 801926e:	46c0      	nop			@ (mov r8, r8)
 8019270:	08019459 	.word	0x08019459
 8019274:	08019415 	.word	0x08019415
 8019278:	08019477 	.word	0x08019477

0801927c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 801927c:	b580      	push	{r7, lr}
 801927e:	b086      	sub	sp, #24
 8019280:	af00      	add	r7, sp, #0
 8019282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8019284:	2317      	movs	r3, #23
 8019286:	18fb      	adds	r3, r7, r3
 8019288:	2200      	movs	r2, #0
 801928a:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	685a      	ldr	r2, [r3, #4]
 8019290:	2380      	movs	r3, #128	@ 0x80
 8019292:	009b      	lsls	r3, r3, #2
 8019294:	429a      	cmp	r2, r3
 8019296:	d003      	beq.n	80192a0 <HAL_I2S_DMAStop+0x24>
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	685b      	ldr	r3, [r3, #4]
 801929c:	2b00      	cmp	r3, #0
 801929e:	d158      	bne.n	8019352 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d010      	beq.n	80192ca <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80192ac:	0018      	movs	r0, r3
 80192ae:	f7fc f907 	bl	80154c0 <HAL_DMA_Abort>
 80192b2:	1e03      	subs	r3, r0, #0
 80192b4:	d009      	beq.n	80192ca <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80192ba:	2208      	movs	r2, #8
 80192bc:	431a      	orrs	r2, r3
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80192c2:	2317      	movs	r3, #23
 80192c4:	18fb      	adds	r3, r7, r3
 80192c6:	2201      	movs	r2, #1
 80192c8:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80192ca:	6878      	ldr	r0, [r7, #4]
 80192cc:	2364      	movs	r3, #100	@ 0x64
 80192ce:	2201      	movs	r2, #1
 80192d0:	2102      	movs	r1, #2
 80192d2:	f000 f8f7 	bl	80194c4 <I2S_WaitFlagStateUntilTimeout>
 80192d6:	1e03      	subs	r3, r0, #0
 80192d8:	d00d      	beq.n	80192f6 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80192de:	2201      	movs	r2, #1
 80192e0:	431a      	orrs	r2, r3
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	2235      	movs	r2, #53	@ 0x35
 80192ea:	2101      	movs	r1, #1
 80192ec:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80192ee:	2317      	movs	r3, #23
 80192f0:	18fb      	adds	r3, r7, r3
 80192f2:	2201      	movs	r2, #1
 80192f4:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80192f6:	6878      	ldr	r0, [r7, #4]
 80192f8:	2364      	movs	r3, #100	@ 0x64
 80192fa:	2200      	movs	r2, #0
 80192fc:	2180      	movs	r1, #128	@ 0x80
 80192fe:	f000 f8e1 	bl	80194c4 <I2S_WaitFlagStateUntilTimeout>
 8019302:	1e03      	subs	r3, r0, #0
 8019304:	d00d      	beq.n	8019322 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801930a:	2201      	movs	r2, #1
 801930c:	431a      	orrs	r2, r3
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	2235      	movs	r2, #53	@ 0x35
 8019316:	2101      	movs	r1, #1
 8019318:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801931a:	2317      	movs	r3, #23
 801931c:	18fb      	adds	r3, r7, r3
 801931e:	2201      	movs	r2, #1
 8019320:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	69da      	ldr	r2, [r3, #28]
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	4938      	ldr	r1, [pc, #224]	@ (8019410 <HAL_I2S_DMAStop+0x194>)
 801932e:	400a      	ands	r2, r1
 8019330:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8019332:	2300      	movs	r3, #0
 8019334:	613b      	str	r3, [r7, #16]
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	689b      	ldr	r3, [r3, #8]
 801933c:	613b      	str	r3, [r7, #16]
 801933e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	685a      	ldr	r2, [r3, #4]
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	2102      	movs	r1, #2
 801934c:	438a      	bics	r2, r1
 801934e:	605a      	str	r2, [r3, #4]
 8019350:	e053      	b.n	80193fa <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	685a      	ldr	r2, [r3, #4]
 8019356:	23c0      	movs	r3, #192	@ 0xc0
 8019358:	009b      	lsls	r3, r3, #2
 801935a:	429a      	cmp	r2, r3
 801935c:	d005      	beq.n	801936a <HAL_I2S_DMAStop+0xee>
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	685a      	ldr	r2, [r3, #4]
 8019362:	2380      	movs	r3, #128	@ 0x80
 8019364:	005b      	lsls	r3, r3, #1
 8019366:	429a      	cmp	r2, r3
 8019368:	d147      	bne.n	80193fa <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801936e:	2b00      	cmp	r3, #0
 8019370:	d010      	beq.n	8019394 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019376:	0018      	movs	r0, r3
 8019378:	f7fc f8a2 	bl	80154c0 <HAL_DMA_Abort>
 801937c:	1e03      	subs	r3, r0, #0
 801937e:	d009      	beq.n	8019394 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019384:	2208      	movs	r2, #8
 8019386:	431a      	orrs	r2, r3
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801938c:	2317      	movs	r3, #23
 801938e:	18fb      	adds	r3, r7, r3
 8019390:	2201      	movs	r2, #1
 8019392:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	69da      	ldr	r2, [r3, #28]
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	491c      	ldr	r1, [pc, #112]	@ (8019410 <HAL_I2S_DMAStop+0x194>)
 80193a0:	400a      	ands	r2, r1
 80193a2:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80193a4:	2300      	movs	r3, #0
 80193a6:	60fb      	str	r3, [r7, #12]
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	68db      	ldr	r3, [r3, #12]
 80193ae:	60fb      	str	r3, [r7, #12]
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	689b      	ldr	r3, [r3, #8]
 80193b6:	60fb      	str	r3, [r7, #12]
 80193b8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	685a      	ldr	r2, [r3, #4]
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	2101      	movs	r1, #1
 80193c6:	438a      	bics	r2, r1
 80193c8:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	685a      	ldr	r2, [r3, #4]
 80193ce:	2380      	movs	r3, #128	@ 0x80
 80193d0:	005b      	lsls	r3, r3, #1
 80193d2:	429a      	cmp	r2, r3
 80193d4:	d10e      	bne.n	80193f4 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80193da:	2240      	movs	r2, #64	@ 0x40
 80193dc:	431a      	orrs	r2, r3
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	2235      	movs	r2, #53	@ 0x35
 80193e6:	2101      	movs	r1, #1
 80193e8:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80193ea:	2317      	movs	r3, #23
 80193ec:	18fb      	adds	r3, r7, r3
 80193ee:	2201      	movs	r2, #1
 80193f0:	701a      	strb	r2, [r3, #0]
 80193f2:	e002      	b.n	80193fa <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	2235      	movs	r2, #53	@ 0x35
 80193fe:	2101      	movs	r1, #1
 8019400:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8019402:	2317      	movs	r3, #23
 8019404:	18fb      	adds	r3, r7, r3
 8019406:	781b      	ldrb	r3, [r3, #0]
}
 8019408:	0018      	movs	r0, r3
 801940a:	46bd      	mov	sp, r7
 801940c:	b006      	add	sp, #24
 801940e:	bd80      	pop	{r7, pc}
 8019410:	fffffbff 	.word	0xfffffbff

08019414 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8019414:	b580      	push	{r7, lr}
 8019416:	b084      	sub	sp, #16
 8019418:	af00      	add	r7, sp, #0
 801941a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019420:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	69db      	ldr	r3, [r3, #28]
 8019426:	2b00      	cmp	r3, #0
 8019428:	d10e      	bne.n	8019448 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801942a:	68fb      	ldr	r3, [r7, #12]
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	685a      	ldr	r2, [r3, #4]
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	2101      	movs	r1, #1
 8019436:	438a      	bics	r2, r1
 8019438:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	2200      	movs	r2, #0
 801943e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	2235      	movs	r2, #53	@ 0x35
 8019444:	2101      	movs	r1, #1
 8019446:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8019448:	68fb      	ldr	r3, [r7, #12]
 801944a:	0018      	movs	r0, r3
 801944c:	f7f8 fbc6 	bl	8011bdc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8019450:	46c0      	nop			@ (mov r8, r8)
 8019452:	46bd      	mov	sp, r7
 8019454:	b004      	add	sp, #16
 8019456:	bd80      	pop	{r7, pc}

08019458 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8019458:	b580      	push	{r7, lr}
 801945a:	b084      	sub	sp, #16
 801945c:	af00      	add	r7, sp, #0
 801945e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019464:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	0018      	movs	r0, r3
 801946a:	f7f8 fba5 	bl	8011bb8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801946e:	46c0      	nop			@ (mov r8, r8)
 8019470:	46bd      	mov	sp, r7
 8019472:	b004      	add	sp, #16
 8019474:	bd80      	pop	{r7, pc}

08019476 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8019476:	b580      	push	{r7, lr}
 8019478:	b084      	sub	sp, #16
 801947a:	af00      	add	r7, sp, #0
 801947c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019482:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	685a      	ldr	r2, [r3, #4]
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	2103      	movs	r1, #3
 8019490:	438a      	bics	r2, r1
 8019492:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	2200      	movs	r2, #0
 8019498:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 801949a:	68fb      	ldr	r3, [r7, #12]
 801949c:	2200      	movs	r2, #0
 801949e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	2235      	movs	r2, #53	@ 0x35
 80194a4:	2101      	movs	r1, #1
 80194a6:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80194a8:	68fb      	ldr	r3, [r7, #12]
 80194aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80194ac:	2208      	movs	r2, #8
 80194ae:	431a      	orrs	r2, r3
 80194b0:	68fb      	ldr	r3, [r7, #12]
 80194b2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	0018      	movs	r0, r3
 80194b8:	f7f8 fbde 	bl	8011c78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80194bc:	46c0      	nop			@ (mov r8, r8)
 80194be:	46bd      	mov	sp, r7
 80194c0:	b004      	add	sp, #16
 80194c2:	bd80      	pop	{r7, pc}

080194c4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80194c4:	b580      	push	{r7, lr}
 80194c6:	b086      	sub	sp, #24
 80194c8:	af00      	add	r7, sp, #0
 80194ca:	60f8      	str	r0, [r7, #12]
 80194cc:	60b9      	str	r1, [r7, #8]
 80194ce:	603b      	str	r3, [r7, #0]
 80194d0:	1dfb      	adds	r3, r7, #7
 80194d2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80194d4:	f7fb fa70 	bl	80149b8 <HAL_GetTick>
 80194d8:	0003      	movs	r3, r0
 80194da:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80194dc:	e017      	b.n	801950e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80194de:	683b      	ldr	r3, [r7, #0]
 80194e0:	3301      	adds	r3, #1
 80194e2:	d014      	beq.n	801950e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80194e4:	f7fb fa68 	bl	80149b8 <HAL_GetTick>
 80194e8:	0002      	movs	r2, r0
 80194ea:	697b      	ldr	r3, [r7, #20]
 80194ec:	1ad3      	subs	r3, r2, r3
 80194ee:	683a      	ldr	r2, [r7, #0]
 80194f0:	429a      	cmp	r2, r3
 80194f2:	d902      	bls.n	80194fa <I2S_WaitFlagStateUntilTimeout+0x36>
 80194f4:	683b      	ldr	r3, [r7, #0]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d109      	bne.n	801950e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80194fa:	68fb      	ldr	r3, [r7, #12]
 80194fc:	2235      	movs	r2, #53	@ 0x35
 80194fe:	2101      	movs	r1, #1
 8019500:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	2234      	movs	r2, #52	@ 0x34
 8019506:	2100      	movs	r1, #0
 8019508:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801950a:	2303      	movs	r3, #3
 801950c:	e00f      	b.n	801952e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	689b      	ldr	r3, [r3, #8]
 8019514:	68ba      	ldr	r2, [r7, #8]
 8019516:	4013      	ands	r3, r2
 8019518:	68ba      	ldr	r2, [r7, #8]
 801951a:	1ad3      	subs	r3, r2, r3
 801951c:	425a      	negs	r2, r3
 801951e:	4153      	adcs	r3, r2
 8019520:	b2db      	uxtb	r3, r3
 8019522:	001a      	movs	r2, r3
 8019524:	1dfb      	adds	r3, r7, #7
 8019526:	781b      	ldrb	r3, [r3, #0]
 8019528:	429a      	cmp	r2, r3
 801952a:	d1d8      	bne.n	80194de <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 801952c:	2300      	movs	r3, #0
}
 801952e:	0018      	movs	r0, r3
 8019530:	46bd      	mov	sp, r7
 8019532:	b006      	add	sp, #24
 8019534:	bd80      	pop	{r7, pc}
	...

08019538 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8019538:	b5f0      	push	{r4, r5, r6, r7, lr}
 801953a:	b08b      	sub	sp, #44	@ 0x2c
 801953c:	af06      	add	r7, sp, #24
 801953e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	2b00      	cmp	r3, #0
 8019544:	d101      	bne.n	801954a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8019546:	2301      	movs	r3, #1
 8019548:	e0f0      	b.n	801972c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	4a79      	ldr	r2, [pc, #484]	@ (8019734 <HAL_PCD_Init+0x1fc>)
 801954e:	5c9b      	ldrb	r3, [r3, r2]
 8019550:	b2db      	uxtb	r3, r3
 8019552:	2b00      	cmp	r3, #0
 8019554:	d108      	bne.n	8019568 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8019556:	687a      	ldr	r2, [r7, #4]
 8019558:	23aa      	movs	r3, #170	@ 0xaa
 801955a:	009b      	lsls	r3, r3, #2
 801955c:	2100      	movs	r1, #0
 801955e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	0018      	movs	r0, r3
 8019564:	f00a f856 	bl	8023614 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	4a72      	ldr	r2, [pc, #456]	@ (8019734 <HAL_PCD_Init+0x1fc>)
 801956c:	2103      	movs	r1, #3
 801956e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	0018      	movs	r0, r3
 8019576:	f005 fffb 	bl	801f570 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801957a:	230f      	movs	r3, #15
 801957c:	18fb      	adds	r3, r7, r3
 801957e:	2200      	movs	r2, #0
 8019580:	701a      	strb	r2, [r3, #0]
 8019582:	e049      	b.n	8019618 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8019584:	200f      	movs	r0, #15
 8019586:	183b      	adds	r3, r7, r0
 8019588:	781b      	ldrb	r3, [r3, #0]
 801958a:	6879      	ldr	r1, [r7, #4]
 801958c:	1c5a      	adds	r2, r3, #1
 801958e:	0013      	movs	r3, r2
 8019590:	009b      	lsls	r3, r3, #2
 8019592:	189b      	adds	r3, r3, r2
 8019594:	00db      	lsls	r3, r3, #3
 8019596:	18cb      	adds	r3, r1, r3
 8019598:	3301      	adds	r3, #1
 801959a:	2201      	movs	r2, #1
 801959c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801959e:	183b      	adds	r3, r7, r0
 80195a0:	781b      	ldrb	r3, [r3, #0]
 80195a2:	6879      	ldr	r1, [r7, #4]
 80195a4:	1c5a      	adds	r2, r3, #1
 80195a6:	0013      	movs	r3, r2
 80195a8:	009b      	lsls	r3, r3, #2
 80195aa:	189b      	adds	r3, r3, r2
 80195ac:	00db      	lsls	r3, r3, #3
 80195ae:	183a      	adds	r2, r7, r0
 80195b0:	7812      	ldrb	r2, [r2, #0]
 80195b2:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80195b4:	183b      	adds	r3, r7, r0
 80195b6:	781b      	ldrb	r3, [r3, #0]
 80195b8:	6879      	ldr	r1, [r7, #4]
 80195ba:	1c5a      	adds	r2, r3, #1
 80195bc:	0013      	movs	r3, r2
 80195be:	009b      	lsls	r3, r3, #2
 80195c0:	189b      	adds	r3, r3, r2
 80195c2:	00db      	lsls	r3, r3, #3
 80195c4:	18cb      	adds	r3, r1, r3
 80195c6:	3303      	adds	r3, #3
 80195c8:	2200      	movs	r2, #0
 80195ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80195cc:	183b      	adds	r3, r7, r0
 80195ce:	781a      	ldrb	r2, [r3, #0]
 80195d0:	6879      	ldr	r1, [r7, #4]
 80195d2:	0013      	movs	r3, r2
 80195d4:	009b      	lsls	r3, r3, #2
 80195d6:	189b      	adds	r3, r3, r2
 80195d8:	00db      	lsls	r3, r3, #3
 80195da:	18cb      	adds	r3, r1, r3
 80195dc:	3338      	adds	r3, #56	@ 0x38
 80195de:	2200      	movs	r2, #0
 80195e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80195e2:	183b      	adds	r3, r7, r0
 80195e4:	781a      	ldrb	r2, [r3, #0]
 80195e6:	6879      	ldr	r1, [r7, #4]
 80195e8:	0013      	movs	r3, r2
 80195ea:	009b      	lsls	r3, r3, #2
 80195ec:	189b      	adds	r3, r3, r2
 80195ee:	00db      	lsls	r3, r3, #3
 80195f0:	18cb      	adds	r3, r1, r3
 80195f2:	333c      	adds	r3, #60	@ 0x3c
 80195f4:	2200      	movs	r2, #0
 80195f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80195f8:	183b      	adds	r3, r7, r0
 80195fa:	781a      	ldrb	r2, [r3, #0]
 80195fc:	6879      	ldr	r1, [r7, #4]
 80195fe:	0013      	movs	r3, r2
 8019600:	009b      	lsls	r3, r3, #2
 8019602:	189b      	adds	r3, r3, r2
 8019604:	00db      	lsls	r3, r3, #3
 8019606:	18cb      	adds	r3, r1, r3
 8019608:	3340      	adds	r3, #64	@ 0x40
 801960a:	2200      	movs	r2, #0
 801960c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801960e:	183b      	adds	r3, r7, r0
 8019610:	781a      	ldrb	r2, [r3, #0]
 8019612:	183b      	adds	r3, r7, r0
 8019614:	3201      	adds	r2, #1
 8019616:	701a      	strb	r2, [r3, #0]
 8019618:	210f      	movs	r1, #15
 801961a:	187b      	adds	r3, r7, r1
 801961c:	781a      	ldrb	r2, [r3, #0]
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	685b      	ldr	r3, [r3, #4]
 8019622:	429a      	cmp	r2, r3
 8019624:	d3ae      	bcc.n	8019584 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019626:	187b      	adds	r3, r7, r1
 8019628:	2200      	movs	r2, #0
 801962a:	701a      	strb	r2, [r3, #0]
 801962c:	e056      	b.n	80196dc <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801962e:	240f      	movs	r4, #15
 8019630:	193b      	adds	r3, r7, r4
 8019632:	781a      	ldrb	r2, [r3, #0]
 8019634:	6878      	ldr	r0, [r7, #4]
 8019636:	236a      	movs	r3, #106	@ 0x6a
 8019638:	33ff      	adds	r3, #255	@ 0xff
 801963a:	0019      	movs	r1, r3
 801963c:	0013      	movs	r3, r2
 801963e:	009b      	lsls	r3, r3, #2
 8019640:	189b      	adds	r3, r3, r2
 8019642:	00db      	lsls	r3, r3, #3
 8019644:	18c3      	adds	r3, r0, r3
 8019646:	185b      	adds	r3, r3, r1
 8019648:	2200      	movs	r2, #0
 801964a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801964c:	193b      	adds	r3, r7, r4
 801964e:	781a      	ldrb	r2, [r3, #0]
 8019650:	6878      	ldr	r0, [r7, #4]
 8019652:	23b4      	movs	r3, #180	@ 0xb4
 8019654:	0059      	lsls	r1, r3, #1
 8019656:	0013      	movs	r3, r2
 8019658:	009b      	lsls	r3, r3, #2
 801965a:	189b      	adds	r3, r3, r2
 801965c:	00db      	lsls	r3, r3, #3
 801965e:	18c3      	adds	r3, r0, r3
 8019660:	185b      	adds	r3, r3, r1
 8019662:	193a      	adds	r2, r7, r4
 8019664:	7812      	ldrb	r2, [r2, #0]
 8019666:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8019668:	193b      	adds	r3, r7, r4
 801966a:	781a      	ldrb	r2, [r3, #0]
 801966c:	6878      	ldr	r0, [r7, #4]
 801966e:	236c      	movs	r3, #108	@ 0x6c
 8019670:	33ff      	adds	r3, #255	@ 0xff
 8019672:	0019      	movs	r1, r3
 8019674:	0013      	movs	r3, r2
 8019676:	009b      	lsls	r3, r3, #2
 8019678:	189b      	adds	r3, r3, r2
 801967a:	00db      	lsls	r3, r3, #3
 801967c:	18c3      	adds	r3, r0, r3
 801967e:	185b      	adds	r3, r3, r1
 8019680:	2200      	movs	r2, #0
 8019682:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8019684:	193b      	adds	r3, r7, r4
 8019686:	781a      	ldrb	r2, [r3, #0]
 8019688:	6878      	ldr	r0, [r7, #4]
 801968a:	23bc      	movs	r3, #188	@ 0xbc
 801968c:	0059      	lsls	r1, r3, #1
 801968e:	0013      	movs	r3, r2
 8019690:	009b      	lsls	r3, r3, #2
 8019692:	189b      	adds	r3, r3, r2
 8019694:	00db      	lsls	r3, r3, #3
 8019696:	18c3      	adds	r3, r0, r3
 8019698:	185b      	adds	r3, r3, r1
 801969a:	2200      	movs	r2, #0
 801969c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801969e:	193b      	adds	r3, r7, r4
 80196a0:	781a      	ldrb	r2, [r3, #0]
 80196a2:	6878      	ldr	r0, [r7, #4]
 80196a4:	23be      	movs	r3, #190	@ 0xbe
 80196a6:	0059      	lsls	r1, r3, #1
 80196a8:	0013      	movs	r3, r2
 80196aa:	009b      	lsls	r3, r3, #2
 80196ac:	189b      	adds	r3, r3, r2
 80196ae:	00db      	lsls	r3, r3, #3
 80196b0:	18c3      	adds	r3, r0, r3
 80196b2:	185b      	adds	r3, r3, r1
 80196b4:	2200      	movs	r2, #0
 80196b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80196b8:	193b      	adds	r3, r7, r4
 80196ba:	781a      	ldrb	r2, [r3, #0]
 80196bc:	6878      	ldr	r0, [r7, #4]
 80196be:	23c0      	movs	r3, #192	@ 0xc0
 80196c0:	0059      	lsls	r1, r3, #1
 80196c2:	0013      	movs	r3, r2
 80196c4:	009b      	lsls	r3, r3, #2
 80196c6:	189b      	adds	r3, r3, r2
 80196c8:	00db      	lsls	r3, r3, #3
 80196ca:	18c3      	adds	r3, r0, r3
 80196cc:	185b      	adds	r3, r3, r1
 80196ce:	2200      	movs	r2, #0
 80196d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80196d2:	193b      	adds	r3, r7, r4
 80196d4:	781a      	ldrb	r2, [r3, #0]
 80196d6:	193b      	adds	r3, r7, r4
 80196d8:	3201      	adds	r2, #1
 80196da:	701a      	strb	r2, [r3, #0]
 80196dc:	230f      	movs	r3, #15
 80196de:	18fb      	adds	r3, r7, r3
 80196e0:	781a      	ldrb	r2, [r3, #0]
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	685b      	ldr	r3, [r3, #4]
 80196e6:	429a      	cmp	r2, r3
 80196e8:	d3a1      	bcc.n	801962e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	6818      	ldr	r0, [r3, #0]
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	466a      	mov	r2, sp
 80196f2:	0011      	movs	r1, r2
 80196f4:	001a      	movs	r2, r3
 80196f6:	3210      	adds	r2, #16
 80196f8:	ca70      	ldmia	r2!, {r4, r5, r6}
 80196fa:	c170      	stmia	r1!, {r4, r5, r6}
 80196fc:	ca30      	ldmia	r2!, {r4, r5}
 80196fe:	c130      	stmia	r1!, {r4, r5}
 8019700:	6859      	ldr	r1, [r3, #4]
 8019702:	689a      	ldr	r2, [r3, #8]
 8019704:	68db      	ldr	r3, [r3, #12]
 8019706:	f005 ff4d 	bl	801f5a4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	2224      	movs	r2, #36	@ 0x24
 801970e:	2100      	movs	r1, #0
 8019710:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	4a07      	ldr	r2, [pc, #28]	@ (8019734 <HAL_PCD_Init+0x1fc>)
 8019716:	2101      	movs	r1, #1
 8019718:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	69db      	ldr	r3, [r3, #28]
 801971e:	2b01      	cmp	r3, #1
 8019720:	d103      	bne.n	801972a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	0018      	movs	r0, r3
 8019726:	f001 fd23 	bl	801b170 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801972a:	2300      	movs	r3, #0
}
 801972c:	0018      	movs	r0, r3
 801972e:	46bd      	mov	sp, r7
 8019730:	b005      	add	sp, #20
 8019732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019734:	000002a9 	.word	0x000002a9

08019738 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8019738:	b580      	push	{r7, lr}
 801973a:	b082      	sub	sp, #8
 801973c:	af00      	add	r7, sp, #0
 801973e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8019740:	687a      	ldr	r2, [r7, #4]
 8019742:	23aa      	movs	r3, #170	@ 0xaa
 8019744:	009b      	lsls	r3, r3, #2
 8019746:	5cd3      	ldrb	r3, [r2, r3]
 8019748:	2b01      	cmp	r3, #1
 801974a:	d101      	bne.n	8019750 <HAL_PCD_Start+0x18>
 801974c:	2302      	movs	r3, #2
 801974e:	e014      	b.n	801977a <HAL_PCD_Start+0x42>
 8019750:	687a      	ldr	r2, [r7, #4]
 8019752:	23aa      	movs	r3, #170	@ 0xaa
 8019754:	009b      	lsls	r3, r3, #2
 8019756:	2101      	movs	r1, #1
 8019758:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	0018      	movs	r0, r3
 8019760:	f005 fef0 	bl	801f544 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	0018      	movs	r0, r3
 801976a:	f007 fef3 	bl	8021554 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801976e:	687a      	ldr	r2, [r7, #4]
 8019770:	23aa      	movs	r3, #170	@ 0xaa
 8019772:	009b      	lsls	r3, r3, #2
 8019774:	2100      	movs	r1, #0
 8019776:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019778:	2300      	movs	r3, #0
}
 801977a:	0018      	movs	r0, r3
 801977c:	46bd      	mov	sp, r7
 801977e:	b002      	add	sp, #8
 8019780:	bd80      	pop	{r7, pc}
	...

08019784 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8019784:	b580      	push	{r7, lr}
 8019786:	b084      	sub	sp, #16
 8019788:	af00      	add	r7, sp, #0
 801978a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	0018      	movs	r0, r3
 8019792:	f007 fef5 	bl	8021580 <USB_ReadInterrupts>
 8019796:	0003      	movs	r3, r0
 8019798:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 801979a:	68fa      	ldr	r2, [r7, #12]
 801979c:	2380      	movs	r3, #128	@ 0x80
 801979e:	021b      	lsls	r3, r3, #8
 80197a0:	4013      	ands	r3, r2
 80197a2:	d004      	beq.n	80197ae <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	0018      	movs	r0, r3
 80197a8:	f000 fb62 	bl	8019e70 <PCD_EP_ISR_Handler>

    return;
 80197ac:	e11d      	b.n	80199ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80197ae:	68fa      	ldr	r2, [r7, #12]
 80197b0:	2380      	movs	r3, #128	@ 0x80
 80197b2:	00db      	lsls	r3, r3, #3
 80197b4:	4013      	ands	r3, r2
 80197b6:	d015      	beq.n	80197e4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	2244      	movs	r2, #68	@ 0x44
 80197be:	5a9b      	ldrh	r3, [r3, r2]
 80197c0:	b29a      	uxth	r2, r3
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	681b      	ldr	r3, [r3, #0]
 80197c6:	498a      	ldr	r1, [pc, #552]	@ (80199f0 <HAL_PCD_IRQHandler+0x26c>)
 80197c8:	400a      	ands	r2, r1
 80197ca:	b291      	uxth	r1, r2
 80197cc:	2244      	movs	r2, #68	@ 0x44
 80197ce:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	0018      	movs	r0, r3
 80197d4:	f009 ffa1 	bl	802371a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	2100      	movs	r1, #0
 80197dc:	0018      	movs	r0, r3
 80197de:	f000 f915 	bl	8019a0c <HAL_PCD_SetAddress>

    return;
 80197e2:	e102      	b.n	80199ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80197e4:	68fa      	ldr	r2, [r7, #12]
 80197e6:	2380      	movs	r3, #128	@ 0x80
 80197e8:	01db      	lsls	r3, r3, #7
 80197ea:	4013      	ands	r3, r2
 80197ec:	d00c      	beq.n	8019808 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	2244      	movs	r2, #68	@ 0x44
 80197f4:	5a9b      	ldrh	r3, [r3, r2]
 80197f6:	b29a      	uxth	r2, r3
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	681b      	ldr	r3, [r3, #0]
 80197fc:	497d      	ldr	r1, [pc, #500]	@ (80199f4 <HAL_PCD_IRQHandler+0x270>)
 80197fe:	400a      	ands	r2, r1
 8019800:	b291      	uxth	r1, r2
 8019802:	2244      	movs	r2, #68	@ 0x44
 8019804:	5299      	strh	r1, [r3, r2]

    return;
 8019806:	e0f0      	b.n	80199ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8019808:	68fa      	ldr	r2, [r7, #12]
 801980a:	2380      	movs	r3, #128	@ 0x80
 801980c:	019b      	lsls	r3, r3, #6
 801980e:	4013      	ands	r3, r2
 8019810:	d00c      	beq.n	801982c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	2244      	movs	r2, #68	@ 0x44
 8019818:	5a9b      	ldrh	r3, [r3, r2]
 801981a:	b29a      	uxth	r2, r3
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	681b      	ldr	r3, [r3, #0]
 8019820:	4975      	ldr	r1, [pc, #468]	@ (80199f8 <HAL_PCD_IRQHandler+0x274>)
 8019822:	400a      	ands	r2, r1
 8019824:	b291      	uxth	r1, r2
 8019826:	2244      	movs	r2, #68	@ 0x44
 8019828:	5299      	strh	r1, [r3, r2]

    return;
 801982a:	e0de      	b.n	80199ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 801982c:	68fa      	ldr	r2, [r7, #12]
 801982e:	2380      	movs	r3, #128	@ 0x80
 8019830:	015b      	lsls	r3, r3, #5
 8019832:	4013      	ands	r3, r2
 8019834:	d038      	beq.n	80198a8 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	2240      	movs	r2, #64	@ 0x40
 801983c:	5a9b      	ldrh	r3, [r3, r2]
 801983e:	b29a      	uxth	r2, r3
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	2104      	movs	r1, #4
 8019846:	438a      	bics	r2, r1
 8019848:	b291      	uxth	r1, r2
 801984a:	2240      	movs	r2, #64	@ 0x40
 801984c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	2240      	movs	r2, #64	@ 0x40
 8019854:	5a9b      	ldrh	r3, [r3, r2]
 8019856:	b29a      	uxth	r2, r3
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	2108      	movs	r1, #8
 801985e:	438a      	bics	r2, r1
 8019860:	b291      	uxth	r1, r2
 8019862:	2240      	movs	r2, #64	@ 0x40
 8019864:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8019866:	687a      	ldr	r2, [r7, #4]
 8019868:	23b8      	movs	r3, #184	@ 0xb8
 801986a:	009b      	lsls	r3, r3, #2
 801986c:	5cd3      	ldrb	r3, [r2, r3]
 801986e:	2b01      	cmp	r3, #1
 8019870:	d109      	bne.n	8019886 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8019872:	687a      	ldr	r2, [r7, #4]
 8019874:	23b8      	movs	r3, #184	@ 0xb8
 8019876:	009b      	lsls	r3, r3, #2
 8019878:	2100      	movs	r1, #0
 801987a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	2100      	movs	r1, #0
 8019880:	0018      	movs	r0, r3
 8019882:	f001 fc9f 	bl	801b1c4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	0018      	movs	r0, r3
 801988a:	f009 ff87 	bl	802379c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	2244      	movs	r2, #68	@ 0x44
 8019894:	5a9b      	ldrh	r3, [r3, r2]
 8019896:	b29a      	uxth	r2, r3
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	4957      	ldr	r1, [pc, #348]	@ (80199fc <HAL_PCD_IRQHandler+0x278>)
 801989e:	400a      	ands	r2, r1
 80198a0:	b291      	uxth	r1, r2
 80198a2:	2244      	movs	r2, #68	@ 0x44
 80198a4:	5299      	strh	r1, [r3, r2]

    return;
 80198a6:	e0a0      	b.n	80199ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80198a8:	68fa      	ldr	r2, [r7, #12]
 80198aa:	2380      	movs	r3, #128	@ 0x80
 80198ac:	011b      	lsls	r3, r3, #4
 80198ae:	4013      	ands	r3, r2
 80198b0:	d028      	beq.n	8019904 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	2240      	movs	r2, #64	@ 0x40
 80198b8:	5a9b      	ldrh	r3, [r3, r2]
 80198ba:	b29a      	uxth	r2, r3
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	2108      	movs	r1, #8
 80198c2:	430a      	orrs	r2, r1
 80198c4:	b291      	uxth	r1, r2
 80198c6:	2240      	movs	r2, #64	@ 0x40
 80198c8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	681b      	ldr	r3, [r3, #0]
 80198ce:	2244      	movs	r2, #68	@ 0x44
 80198d0:	5a9b      	ldrh	r3, [r3, r2]
 80198d2:	b29a      	uxth	r2, r3
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	4949      	ldr	r1, [pc, #292]	@ (8019a00 <HAL_PCD_IRQHandler+0x27c>)
 80198da:	400a      	ands	r2, r1
 80198dc:	b291      	uxth	r1, r2
 80198de:	2244      	movs	r2, #68	@ 0x44
 80198e0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	2240      	movs	r2, #64	@ 0x40
 80198e8:	5a9b      	ldrh	r3, [r3, r2]
 80198ea:	b29a      	uxth	r2, r3
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	2104      	movs	r1, #4
 80198f2:	430a      	orrs	r2, r1
 80198f4:	b291      	uxth	r1, r2
 80198f6:	2240      	movs	r2, #64	@ 0x40
 80198f8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	0018      	movs	r0, r3
 80198fe:	f009 ff31 	bl	8023764 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8019902:	e072      	b.n	80199ea <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	2280      	movs	r2, #128	@ 0x80
 8019908:	4013      	ands	r3, r2
 801990a:	d046      	beq.n	801999a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	2244      	movs	r2, #68	@ 0x44
 8019912:	5a9b      	ldrh	r3, [r3, r2]
 8019914:	b29a      	uxth	r2, r3
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	2180      	movs	r1, #128	@ 0x80
 801991c:	438a      	bics	r2, r1
 801991e:	b291      	uxth	r1, r2
 8019920:	2244      	movs	r2, #68	@ 0x44
 8019922:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8019924:	687a      	ldr	r2, [r7, #4]
 8019926:	23b8      	movs	r3, #184	@ 0xb8
 8019928:	009b      	lsls	r3, r3, #2
 801992a:	5cd3      	ldrb	r3, [r2, r3]
 801992c:	2b00      	cmp	r3, #0
 801992e:	d12f      	bne.n	8019990 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	2240      	movs	r2, #64	@ 0x40
 8019936:	5a9b      	ldrh	r3, [r3, r2]
 8019938:	b29a      	uxth	r2, r3
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	2104      	movs	r1, #4
 8019940:	430a      	orrs	r2, r1
 8019942:	b291      	uxth	r1, r2
 8019944:	2240      	movs	r2, #64	@ 0x40
 8019946:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	2240      	movs	r2, #64	@ 0x40
 801994e:	5a9b      	ldrh	r3, [r3, r2]
 8019950:	b29a      	uxth	r2, r3
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	2108      	movs	r1, #8
 8019958:	430a      	orrs	r2, r1
 801995a:	b291      	uxth	r1, r2
 801995c:	2240      	movs	r2, #64	@ 0x40
 801995e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8019960:	687a      	ldr	r2, [r7, #4]
 8019962:	23b8      	movs	r3, #184	@ 0xb8
 8019964:	009b      	lsls	r3, r3, #2
 8019966:	2101      	movs	r1, #1
 8019968:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	2254      	movs	r2, #84	@ 0x54
 8019970:	5a9b      	ldrh	r3, [r3, r2]
 8019972:	b29b      	uxth	r3, r3
 8019974:	089b      	lsrs	r3, r3, #2
 8019976:	223c      	movs	r2, #60	@ 0x3c
 8019978:	4013      	ands	r3, r2
 801997a:	0019      	movs	r1, r3
 801997c:	687a      	ldr	r2, [r7, #4]
 801997e:	23b9      	movs	r3, #185	@ 0xb9
 8019980:	009b      	lsls	r3, r3, #2
 8019982:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	2101      	movs	r1, #1
 8019988:	0018      	movs	r0, r3
 801998a:	f001 fc1b 	bl	801b1c4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 801998e:	e02c      	b.n	80199ea <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	0018      	movs	r0, r3
 8019994:	f009 fee6 	bl	8023764 <HAL_PCD_SuspendCallback>
    return;
 8019998:	e027      	b.n	80199ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 801999a:	68fa      	ldr	r2, [r7, #12]
 801999c:	2380      	movs	r3, #128	@ 0x80
 801999e:	009b      	lsls	r3, r3, #2
 80199a0:	4013      	ands	r3, r2
 80199a2:	d010      	beq.n	80199c6 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	2244      	movs	r2, #68	@ 0x44
 80199aa:	5a9b      	ldrh	r3, [r3, r2]
 80199ac:	b29a      	uxth	r2, r3
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	4914      	ldr	r1, [pc, #80]	@ (8019a04 <HAL_PCD_IRQHandler+0x280>)
 80199b4:	400a      	ands	r2, r1
 80199b6:	b291      	uxth	r1, r2
 80199b8:	2244      	movs	r2, #68	@ 0x44
 80199ba:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	0018      	movs	r0, r3
 80199c0:	f009 fe9c 	bl	80236fc <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80199c4:	e011      	b.n	80199ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80199c6:	68fa      	ldr	r2, [r7, #12]
 80199c8:	2380      	movs	r3, #128	@ 0x80
 80199ca:	005b      	lsls	r3, r3, #1
 80199cc:	4013      	ands	r3, r2
 80199ce:	d00c      	beq.n	80199ea <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	681b      	ldr	r3, [r3, #0]
 80199d4:	2244      	movs	r2, #68	@ 0x44
 80199d6:	5a9b      	ldrh	r3, [r3, r2]
 80199d8:	b29a      	uxth	r2, r3
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	490a      	ldr	r1, [pc, #40]	@ (8019a08 <HAL_PCD_IRQHandler+0x284>)
 80199e0:	400a      	ands	r2, r1
 80199e2:	b291      	uxth	r1, r2
 80199e4:	2244      	movs	r2, #68	@ 0x44
 80199e6:	5299      	strh	r1, [r3, r2]

    return;
 80199e8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80199ea:	46bd      	mov	sp, r7
 80199ec:	b004      	add	sp, #16
 80199ee:	bd80      	pop	{r7, pc}
 80199f0:	fffffbff 	.word	0xfffffbff
 80199f4:	ffffbfff 	.word	0xffffbfff
 80199f8:	ffffdfff 	.word	0xffffdfff
 80199fc:	ffffefff 	.word	0xffffefff
 8019a00:	fffff7ff 	.word	0xfffff7ff
 8019a04:	fffffdff 	.word	0xfffffdff
 8019a08:	fffffeff 	.word	0xfffffeff

08019a0c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8019a0c:	b580      	push	{r7, lr}
 8019a0e:	b082      	sub	sp, #8
 8019a10:	af00      	add	r7, sp, #0
 8019a12:	6078      	str	r0, [r7, #4]
 8019a14:	000a      	movs	r2, r1
 8019a16:	1cfb      	adds	r3, r7, #3
 8019a18:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8019a1a:	687a      	ldr	r2, [r7, #4]
 8019a1c:	23aa      	movs	r3, #170	@ 0xaa
 8019a1e:	009b      	lsls	r3, r3, #2
 8019a20:	5cd3      	ldrb	r3, [r2, r3]
 8019a22:	2b01      	cmp	r3, #1
 8019a24:	d101      	bne.n	8019a2a <HAL_PCD_SetAddress+0x1e>
 8019a26:	2302      	movs	r3, #2
 8019a28:	e017      	b.n	8019a5a <HAL_PCD_SetAddress+0x4e>
 8019a2a:	687a      	ldr	r2, [r7, #4]
 8019a2c:	23aa      	movs	r3, #170	@ 0xaa
 8019a2e:	009b      	lsls	r3, r3, #2
 8019a30:	2101      	movs	r1, #1
 8019a32:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	1cfa      	adds	r2, r7, #3
 8019a38:	2124      	movs	r1, #36	@ 0x24
 8019a3a:	7812      	ldrb	r2, [r2, #0]
 8019a3c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	681a      	ldr	r2, [r3, #0]
 8019a42:	1cfb      	adds	r3, r7, #3
 8019a44:	781b      	ldrb	r3, [r3, #0]
 8019a46:	0019      	movs	r1, r3
 8019a48:	0010      	movs	r0, r2
 8019a4a:	f007 fd6f 	bl	802152c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8019a4e:	687a      	ldr	r2, [r7, #4]
 8019a50:	23aa      	movs	r3, #170	@ 0xaa
 8019a52:	009b      	lsls	r3, r3, #2
 8019a54:	2100      	movs	r1, #0
 8019a56:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019a58:	2300      	movs	r3, #0
}
 8019a5a:	0018      	movs	r0, r3
 8019a5c:	46bd      	mov	sp, r7
 8019a5e:	b002      	add	sp, #8
 8019a60:	bd80      	pop	{r7, pc}

08019a62 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8019a62:	b590      	push	{r4, r7, lr}
 8019a64:	b085      	sub	sp, #20
 8019a66:	af00      	add	r7, sp, #0
 8019a68:	6078      	str	r0, [r7, #4]
 8019a6a:	000c      	movs	r4, r1
 8019a6c:	0010      	movs	r0, r2
 8019a6e:	0019      	movs	r1, r3
 8019a70:	1cfb      	adds	r3, r7, #3
 8019a72:	1c22      	adds	r2, r4, #0
 8019a74:	701a      	strb	r2, [r3, #0]
 8019a76:	003b      	movs	r3, r7
 8019a78:	1c02      	adds	r2, r0, #0
 8019a7a:	801a      	strh	r2, [r3, #0]
 8019a7c:	1cbb      	adds	r3, r7, #2
 8019a7e:	1c0a      	adds	r2, r1, #0
 8019a80:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8019a82:	230b      	movs	r3, #11
 8019a84:	18fb      	adds	r3, r7, r3
 8019a86:	2200      	movs	r2, #0
 8019a88:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8019a8a:	1cfb      	adds	r3, r7, #3
 8019a8c:	781b      	ldrb	r3, [r3, #0]
 8019a8e:	b25b      	sxtb	r3, r3
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	da0f      	bge.n	8019ab4 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019a94:	1cfb      	adds	r3, r7, #3
 8019a96:	781b      	ldrb	r3, [r3, #0]
 8019a98:	2207      	movs	r2, #7
 8019a9a:	4013      	ands	r3, r2
 8019a9c:	1c5a      	adds	r2, r3, #1
 8019a9e:	0013      	movs	r3, r2
 8019aa0:	009b      	lsls	r3, r3, #2
 8019aa2:	189b      	adds	r3, r3, r2
 8019aa4:	00db      	lsls	r3, r3, #3
 8019aa6:	687a      	ldr	r2, [r7, #4]
 8019aa8:	18d3      	adds	r3, r2, r3
 8019aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019aac:	68fb      	ldr	r3, [r7, #12]
 8019aae:	2201      	movs	r2, #1
 8019ab0:	705a      	strb	r2, [r3, #1]
 8019ab2:	e00f      	b.n	8019ad4 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019ab4:	1cfb      	adds	r3, r7, #3
 8019ab6:	781b      	ldrb	r3, [r3, #0]
 8019ab8:	2207      	movs	r2, #7
 8019aba:	401a      	ands	r2, r3
 8019abc:	0013      	movs	r3, r2
 8019abe:	009b      	lsls	r3, r3, #2
 8019ac0:	189b      	adds	r3, r3, r2
 8019ac2:	00db      	lsls	r3, r3, #3
 8019ac4:	3369      	adds	r3, #105	@ 0x69
 8019ac6:	33ff      	adds	r3, #255	@ 0xff
 8019ac8:	687a      	ldr	r2, [r7, #4]
 8019aca:	18d3      	adds	r3, r2, r3
 8019acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	2200      	movs	r2, #0
 8019ad2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8019ad4:	1cfb      	adds	r3, r7, #3
 8019ad6:	781b      	ldrb	r3, [r3, #0]
 8019ad8:	2207      	movs	r2, #7
 8019ada:	4013      	ands	r3, r2
 8019adc:	b2da      	uxtb	r2, r3
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8019ae2:	003b      	movs	r3, r7
 8019ae4:	881a      	ldrh	r2, [r3, #0]
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	1cba      	adds	r2, r7, #2
 8019aee:	7812      	ldrb	r2, [r2, #0]
 8019af0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8019af2:	1cbb      	adds	r3, r7, #2
 8019af4:	781b      	ldrb	r3, [r3, #0]
 8019af6:	2b02      	cmp	r3, #2
 8019af8:	d102      	bne.n	8019b00 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	2200      	movs	r2, #0
 8019afe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8019b00:	687a      	ldr	r2, [r7, #4]
 8019b02:	23aa      	movs	r3, #170	@ 0xaa
 8019b04:	009b      	lsls	r3, r3, #2
 8019b06:	5cd3      	ldrb	r3, [r2, r3]
 8019b08:	2b01      	cmp	r3, #1
 8019b0a:	d101      	bne.n	8019b10 <HAL_PCD_EP_Open+0xae>
 8019b0c:	2302      	movs	r3, #2
 8019b0e:	e013      	b.n	8019b38 <HAL_PCD_EP_Open+0xd6>
 8019b10:	687a      	ldr	r2, [r7, #4]
 8019b12:	23aa      	movs	r3, #170	@ 0xaa
 8019b14:	009b      	lsls	r3, r3, #2
 8019b16:	2101      	movs	r1, #1
 8019b18:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	68fa      	ldr	r2, [r7, #12]
 8019b20:	0011      	movs	r1, r2
 8019b22:	0018      	movs	r0, r3
 8019b24:	f005 fd66 	bl	801f5f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8019b28:	687a      	ldr	r2, [r7, #4]
 8019b2a:	23aa      	movs	r3, #170	@ 0xaa
 8019b2c:	009b      	lsls	r3, r3, #2
 8019b2e:	2100      	movs	r1, #0
 8019b30:	54d1      	strb	r1, [r2, r3]

  return ret;
 8019b32:	230b      	movs	r3, #11
 8019b34:	18fb      	adds	r3, r7, r3
 8019b36:	781b      	ldrb	r3, [r3, #0]
}
 8019b38:	0018      	movs	r0, r3
 8019b3a:	46bd      	mov	sp, r7
 8019b3c:	b005      	add	sp, #20
 8019b3e:	bd90      	pop	{r4, r7, pc}

08019b40 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019b40:	b580      	push	{r7, lr}
 8019b42:	b084      	sub	sp, #16
 8019b44:	af00      	add	r7, sp, #0
 8019b46:	6078      	str	r0, [r7, #4]
 8019b48:	000a      	movs	r2, r1
 8019b4a:	1cfb      	adds	r3, r7, #3
 8019b4c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8019b4e:	1cfb      	adds	r3, r7, #3
 8019b50:	781b      	ldrb	r3, [r3, #0]
 8019b52:	b25b      	sxtb	r3, r3
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	da0f      	bge.n	8019b78 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019b58:	1cfb      	adds	r3, r7, #3
 8019b5a:	781b      	ldrb	r3, [r3, #0]
 8019b5c:	2207      	movs	r2, #7
 8019b5e:	4013      	ands	r3, r2
 8019b60:	1c5a      	adds	r2, r3, #1
 8019b62:	0013      	movs	r3, r2
 8019b64:	009b      	lsls	r3, r3, #2
 8019b66:	189b      	adds	r3, r3, r2
 8019b68:	00db      	lsls	r3, r3, #3
 8019b6a:	687a      	ldr	r2, [r7, #4]
 8019b6c:	18d3      	adds	r3, r2, r3
 8019b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019b70:	68fb      	ldr	r3, [r7, #12]
 8019b72:	2201      	movs	r2, #1
 8019b74:	705a      	strb	r2, [r3, #1]
 8019b76:	e00f      	b.n	8019b98 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019b78:	1cfb      	adds	r3, r7, #3
 8019b7a:	781b      	ldrb	r3, [r3, #0]
 8019b7c:	2207      	movs	r2, #7
 8019b7e:	401a      	ands	r2, r3
 8019b80:	0013      	movs	r3, r2
 8019b82:	009b      	lsls	r3, r3, #2
 8019b84:	189b      	adds	r3, r3, r2
 8019b86:	00db      	lsls	r3, r3, #3
 8019b88:	3369      	adds	r3, #105	@ 0x69
 8019b8a:	33ff      	adds	r3, #255	@ 0xff
 8019b8c:	687a      	ldr	r2, [r7, #4]
 8019b8e:	18d3      	adds	r3, r2, r3
 8019b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	2200      	movs	r2, #0
 8019b96:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8019b98:	1cfb      	adds	r3, r7, #3
 8019b9a:	781b      	ldrb	r3, [r3, #0]
 8019b9c:	2207      	movs	r2, #7
 8019b9e:	4013      	ands	r3, r2
 8019ba0:	b2da      	uxtb	r2, r3
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019ba6:	687a      	ldr	r2, [r7, #4]
 8019ba8:	23aa      	movs	r3, #170	@ 0xaa
 8019baa:	009b      	lsls	r3, r3, #2
 8019bac:	5cd3      	ldrb	r3, [r2, r3]
 8019bae:	2b01      	cmp	r3, #1
 8019bb0:	d101      	bne.n	8019bb6 <HAL_PCD_EP_Close+0x76>
 8019bb2:	2302      	movs	r3, #2
 8019bb4:	e011      	b.n	8019bda <HAL_PCD_EP_Close+0x9a>
 8019bb6:	687a      	ldr	r2, [r7, #4]
 8019bb8:	23aa      	movs	r3, #170	@ 0xaa
 8019bba:	009b      	lsls	r3, r3, #2
 8019bbc:	2101      	movs	r1, #1
 8019bbe:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	68fa      	ldr	r2, [r7, #12]
 8019bc6:	0011      	movs	r1, r2
 8019bc8:	0018      	movs	r0, r3
 8019bca:	f006 f8b5 	bl	801fd38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8019bce:	687a      	ldr	r2, [r7, #4]
 8019bd0:	23aa      	movs	r3, #170	@ 0xaa
 8019bd2:	009b      	lsls	r3, r3, #2
 8019bd4:	2100      	movs	r1, #0
 8019bd6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8019bd8:	2300      	movs	r3, #0
}
 8019bda:	0018      	movs	r0, r3
 8019bdc:	46bd      	mov	sp, r7
 8019bde:	b004      	add	sp, #16
 8019be0:	bd80      	pop	{r7, pc}

08019be2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8019be2:	b580      	push	{r7, lr}
 8019be4:	b086      	sub	sp, #24
 8019be6:	af00      	add	r7, sp, #0
 8019be8:	60f8      	str	r0, [r7, #12]
 8019bea:	607a      	str	r2, [r7, #4]
 8019bec:	603b      	str	r3, [r7, #0]
 8019bee:	200b      	movs	r0, #11
 8019bf0:	183b      	adds	r3, r7, r0
 8019bf2:	1c0a      	adds	r2, r1, #0
 8019bf4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019bf6:	0001      	movs	r1, r0
 8019bf8:	187b      	adds	r3, r7, r1
 8019bfa:	781b      	ldrb	r3, [r3, #0]
 8019bfc:	2207      	movs	r2, #7
 8019bfe:	401a      	ands	r2, r3
 8019c00:	0013      	movs	r3, r2
 8019c02:	009b      	lsls	r3, r3, #2
 8019c04:	189b      	adds	r3, r3, r2
 8019c06:	00db      	lsls	r3, r3, #3
 8019c08:	3369      	adds	r3, #105	@ 0x69
 8019c0a:	33ff      	adds	r3, #255	@ 0xff
 8019c0c:	68fa      	ldr	r2, [r7, #12]
 8019c0e:	18d3      	adds	r3, r2, r3
 8019c10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019c12:	697b      	ldr	r3, [r7, #20]
 8019c14:	687a      	ldr	r2, [r7, #4]
 8019c16:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8019c18:	697b      	ldr	r3, [r7, #20]
 8019c1a:	683a      	ldr	r2, [r7, #0]
 8019c1c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8019c1e:	697b      	ldr	r3, [r7, #20]
 8019c20:	2200      	movs	r2, #0
 8019c22:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8019c24:	697b      	ldr	r3, [r7, #20]
 8019c26:	2200      	movs	r2, #0
 8019c28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019c2a:	187b      	adds	r3, r7, r1
 8019c2c:	781b      	ldrb	r3, [r3, #0]
 8019c2e:	2207      	movs	r2, #7
 8019c30:	4013      	ands	r3, r2
 8019c32:	b2da      	uxtb	r2, r3
 8019c34:	697b      	ldr	r3, [r7, #20]
 8019c36:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019c38:	68fb      	ldr	r3, [r7, #12]
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	697a      	ldr	r2, [r7, #20]
 8019c3e:	0011      	movs	r1, r2
 8019c40:	0018      	movs	r0, r3
 8019c42:	f006 fa39 	bl	80200b8 <USB_EPStartXfer>

  return HAL_OK;
 8019c46:	2300      	movs	r3, #0
}
 8019c48:	0018      	movs	r0, r3
 8019c4a:	46bd      	mov	sp, r7
 8019c4c:	b006      	add	sp, #24
 8019c4e:	bd80      	pop	{r7, pc}

08019c50 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019c50:	b580      	push	{r7, lr}
 8019c52:	b082      	sub	sp, #8
 8019c54:	af00      	add	r7, sp, #0
 8019c56:	6078      	str	r0, [r7, #4]
 8019c58:	000a      	movs	r2, r1
 8019c5a:	1cfb      	adds	r3, r7, #3
 8019c5c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8019c5e:	1cfb      	adds	r3, r7, #3
 8019c60:	781b      	ldrb	r3, [r3, #0]
 8019c62:	2207      	movs	r2, #7
 8019c64:	401a      	ands	r2, r3
 8019c66:	6878      	ldr	r0, [r7, #4]
 8019c68:	23c2      	movs	r3, #194	@ 0xc2
 8019c6a:	0059      	lsls	r1, r3, #1
 8019c6c:	0013      	movs	r3, r2
 8019c6e:	009b      	lsls	r3, r3, #2
 8019c70:	189b      	adds	r3, r3, r2
 8019c72:	00db      	lsls	r3, r3, #3
 8019c74:	18c3      	adds	r3, r0, r3
 8019c76:	185b      	adds	r3, r3, r1
 8019c78:	681b      	ldr	r3, [r3, #0]
}
 8019c7a:	0018      	movs	r0, r3
 8019c7c:	46bd      	mov	sp, r7
 8019c7e:	b002      	add	sp, #8
 8019c80:	bd80      	pop	{r7, pc}

08019c82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8019c82:	b580      	push	{r7, lr}
 8019c84:	b086      	sub	sp, #24
 8019c86:	af00      	add	r7, sp, #0
 8019c88:	60f8      	str	r0, [r7, #12]
 8019c8a:	607a      	str	r2, [r7, #4]
 8019c8c:	603b      	str	r3, [r7, #0]
 8019c8e:	200b      	movs	r0, #11
 8019c90:	183b      	adds	r3, r7, r0
 8019c92:	1c0a      	adds	r2, r1, #0
 8019c94:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019c96:	183b      	adds	r3, r7, r0
 8019c98:	781b      	ldrb	r3, [r3, #0]
 8019c9a:	2207      	movs	r2, #7
 8019c9c:	4013      	ands	r3, r2
 8019c9e:	1c5a      	adds	r2, r3, #1
 8019ca0:	0013      	movs	r3, r2
 8019ca2:	009b      	lsls	r3, r3, #2
 8019ca4:	189b      	adds	r3, r3, r2
 8019ca6:	00db      	lsls	r3, r3, #3
 8019ca8:	68fa      	ldr	r2, [r7, #12]
 8019caa:	18d3      	adds	r3, r2, r3
 8019cac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019cae:	697b      	ldr	r3, [r7, #20]
 8019cb0:	687a      	ldr	r2, [r7, #4]
 8019cb2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8019cb4:	697b      	ldr	r3, [r7, #20]
 8019cb6:	683a      	ldr	r2, [r7, #0]
 8019cb8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8019cba:	697b      	ldr	r3, [r7, #20]
 8019cbc:	2224      	movs	r2, #36	@ 0x24
 8019cbe:	2101      	movs	r1, #1
 8019cc0:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8019cc2:	697b      	ldr	r3, [r7, #20]
 8019cc4:	683a      	ldr	r2, [r7, #0]
 8019cc6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8019cc8:	697b      	ldr	r3, [r7, #20]
 8019cca:	2200      	movs	r2, #0
 8019ccc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8019cce:	697b      	ldr	r3, [r7, #20]
 8019cd0:	2201      	movs	r2, #1
 8019cd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019cd4:	183b      	adds	r3, r7, r0
 8019cd6:	781b      	ldrb	r3, [r3, #0]
 8019cd8:	2207      	movs	r2, #7
 8019cda:	4013      	ands	r3, r2
 8019cdc:	b2da      	uxtb	r2, r3
 8019cde:	697b      	ldr	r3, [r7, #20]
 8019ce0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	697a      	ldr	r2, [r7, #20]
 8019ce8:	0011      	movs	r1, r2
 8019cea:	0018      	movs	r0, r3
 8019cec:	f006 f9e4 	bl	80200b8 <USB_EPStartXfer>

  return HAL_OK;
 8019cf0:	2300      	movs	r3, #0
}
 8019cf2:	0018      	movs	r0, r3
 8019cf4:	46bd      	mov	sp, r7
 8019cf6:	b006      	add	sp, #24
 8019cf8:	bd80      	pop	{r7, pc}

08019cfa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019cfa:	b580      	push	{r7, lr}
 8019cfc:	b084      	sub	sp, #16
 8019cfe:	af00      	add	r7, sp, #0
 8019d00:	6078      	str	r0, [r7, #4]
 8019d02:	000a      	movs	r2, r1
 8019d04:	1cfb      	adds	r3, r7, #3
 8019d06:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8019d08:	1cfb      	adds	r3, r7, #3
 8019d0a:	781b      	ldrb	r3, [r3, #0]
 8019d0c:	2207      	movs	r2, #7
 8019d0e:	401a      	ands	r2, r3
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	685b      	ldr	r3, [r3, #4]
 8019d14:	429a      	cmp	r2, r3
 8019d16:	d901      	bls.n	8019d1c <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8019d18:	2301      	movs	r3, #1
 8019d1a:	e046      	b.n	8019daa <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8019d1c:	1cfb      	adds	r3, r7, #3
 8019d1e:	781b      	ldrb	r3, [r3, #0]
 8019d20:	b25b      	sxtb	r3, r3
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	da0f      	bge.n	8019d46 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019d26:	1cfb      	adds	r3, r7, #3
 8019d28:	781b      	ldrb	r3, [r3, #0]
 8019d2a:	2207      	movs	r2, #7
 8019d2c:	4013      	ands	r3, r2
 8019d2e:	1c5a      	adds	r2, r3, #1
 8019d30:	0013      	movs	r3, r2
 8019d32:	009b      	lsls	r3, r3, #2
 8019d34:	189b      	adds	r3, r3, r2
 8019d36:	00db      	lsls	r3, r3, #3
 8019d38:	687a      	ldr	r2, [r7, #4]
 8019d3a:	18d3      	adds	r3, r2, r3
 8019d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	2201      	movs	r2, #1
 8019d42:	705a      	strb	r2, [r3, #1]
 8019d44:	e00d      	b.n	8019d62 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8019d46:	1cfb      	adds	r3, r7, #3
 8019d48:	781a      	ldrb	r2, [r3, #0]
 8019d4a:	0013      	movs	r3, r2
 8019d4c:	009b      	lsls	r3, r3, #2
 8019d4e:	189b      	adds	r3, r3, r2
 8019d50:	00db      	lsls	r3, r3, #3
 8019d52:	3369      	adds	r3, #105	@ 0x69
 8019d54:	33ff      	adds	r3, #255	@ 0xff
 8019d56:	687a      	ldr	r2, [r7, #4]
 8019d58:	18d3      	adds	r3, r2, r3
 8019d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	2200      	movs	r2, #0
 8019d60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8019d62:	68fb      	ldr	r3, [r7, #12]
 8019d64:	2201      	movs	r2, #1
 8019d66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019d68:	1cfb      	adds	r3, r7, #3
 8019d6a:	781b      	ldrb	r3, [r3, #0]
 8019d6c:	2207      	movs	r2, #7
 8019d6e:	4013      	ands	r3, r2
 8019d70:	b2da      	uxtb	r2, r3
 8019d72:	68fb      	ldr	r3, [r7, #12]
 8019d74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019d76:	687a      	ldr	r2, [r7, #4]
 8019d78:	23aa      	movs	r3, #170	@ 0xaa
 8019d7a:	009b      	lsls	r3, r3, #2
 8019d7c:	5cd3      	ldrb	r3, [r2, r3]
 8019d7e:	2b01      	cmp	r3, #1
 8019d80:	d101      	bne.n	8019d86 <HAL_PCD_EP_SetStall+0x8c>
 8019d82:	2302      	movs	r3, #2
 8019d84:	e011      	b.n	8019daa <HAL_PCD_EP_SetStall+0xb0>
 8019d86:	687a      	ldr	r2, [r7, #4]
 8019d88:	23aa      	movs	r3, #170	@ 0xaa
 8019d8a:	009b      	lsls	r3, r3, #2
 8019d8c:	2101      	movs	r1, #1
 8019d8e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	681b      	ldr	r3, [r3, #0]
 8019d94:	68fa      	ldr	r2, [r7, #12]
 8019d96:	0011      	movs	r1, r2
 8019d98:	0018      	movs	r0, r3
 8019d9a:	f007 fac5 	bl	8021328 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8019d9e:	687a      	ldr	r2, [r7, #4]
 8019da0:	23aa      	movs	r3, #170	@ 0xaa
 8019da2:	009b      	lsls	r3, r3, #2
 8019da4:	2100      	movs	r1, #0
 8019da6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019da8:	2300      	movs	r3, #0
}
 8019daa:	0018      	movs	r0, r3
 8019dac:	46bd      	mov	sp, r7
 8019dae:	b004      	add	sp, #16
 8019db0:	bd80      	pop	{r7, pc}

08019db2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019db2:	b580      	push	{r7, lr}
 8019db4:	b084      	sub	sp, #16
 8019db6:	af00      	add	r7, sp, #0
 8019db8:	6078      	str	r0, [r7, #4]
 8019dba:	000a      	movs	r2, r1
 8019dbc:	1cfb      	adds	r3, r7, #3
 8019dbe:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8019dc0:	1cfb      	adds	r3, r7, #3
 8019dc2:	781b      	ldrb	r3, [r3, #0]
 8019dc4:	220f      	movs	r2, #15
 8019dc6:	401a      	ands	r2, r3
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	685b      	ldr	r3, [r3, #4]
 8019dcc:	429a      	cmp	r2, r3
 8019dce:	d901      	bls.n	8019dd4 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8019dd0:	2301      	movs	r3, #1
 8019dd2:	e048      	b.n	8019e66 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8019dd4:	1cfb      	adds	r3, r7, #3
 8019dd6:	781b      	ldrb	r3, [r3, #0]
 8019dd8:	b25b      	sxtb	r3, r3
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	da0f      	bge.n	8019dfe <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019dde:	1cfb      	adds	r3, r7, #3
 8019de0:	781b      	ldrb	r3, [r3, #0]
 8019de2:	2207      	movs	r2, #7
 8019de4:	4013      	ands	r3, r2
 8019de6:	1c5a      	adds	r2, r3, #1
 8019de8:	0013      	movs	r3, r2
 8019dea:	009b      	lsls	r3, r3, #2
 8019dec:	189b      	adds	r3, r3, r2
 8019dee:	00db      	lsls	r3, r3, #3
 8019df0:	687a      	ldr	r2, [r7, #4]
 8019df2:	18d3      	adds	r3, r2, r3
 8019df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019df6:	68fb      	ldr	r3, [r7, #12]
 8019df8:	2201      	movs	r2, #1
 8019dfa:	705a      	strb	r2, [r3, #1]
 8019dfc:	e00f      	b.n	8019e1e <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019dfe:	1cfb      	adds	r3, r7, #3
 8019e00:	781b      	ldrb	r3, [r3, #0]
 8019e02:	2207      	movs	r2, #7
 8019e04:	401a      	ands	r2, r3
 8019e06:	0013      	movs	r3, r2
 8019e08:	009b      	lsls	r3, r3, #2
 8019e0a:	189b      	adds	r3, r3, r2
 8019e0c:	00db      	lsls	r3, r3, #3
 8019e0e:	3369      	adds	r3, #105	@ 0x69
 8019e10:	33ff      	adds	r3, #255	@ 0xff
 8019e12:	687a      	ldr	r2, [r7, #4]
 8019e14:	18d3      	adds	r3, r2, r3
 8019e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	2200      	movs	r2, #0
 8019e1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	2200      	movs	r2, #0
 8019e22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019e24:	1cfb      	adds	r3, r7, #3
 8019e26:	781b      	ldrb	r3, [r3, #0]
 8019e28:	2207      	movs	r2, #7
 8019e2a:	4013      	ands	r3, r2
 8019e2c:	b2da      	uxtb	r2, r3
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019e32:	687a      	ldr	r2, [r7, #4]
 8019e34:	23aa      	movs	r3, #170	@ 0xaa
 8019e36:	009b      	lsls	r3, r3, #2
 8019e38:	5cd3      	ldrb	r3, [r2, r3]
 8019e3a:	2b01      	cmp	r3, #1
 8019e3c:	d101      	bne.n	8019e42 <HAL_PCD_EP_ClrStall+0x90>
 8019e3e:	2302      	movs	r3, #2
 8019e40:	e011      	b.n	8019e66 <HAL_PCD_EP_ClrStall+0xb4>
 8019e42:	687a      	ldr	r2, [r7, #4]
 8019e44:	23aa      	movs	r3, #170	@ 0xaa
 8019e46:	009b      	lsls	r3, r3, #2
 8019e48:	2101      	movs	r1, #1
 8019e4a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	68fa      	ldr	r2, [r7, #12]
 8019e52:	0011      	movs	r1, r2
 8019e54:	0018      	movs	r0, r3
 8019e56:	f007 fab7 	bl	80213c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8019e5a:	687a      	ldr	r2, [r7, #4]
 8019e5c:	23aa      	movs	r3, #170	@ 0xaa
 8019e5e:	009b      	lsls	r3, r3, #2
 8019e60:	2100      	movs	r1, #0
 8019e62:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019e64:	2300      	movs	r3, #0
}
 8019e66:	0018      	movs	r0, r3
 8019e68:	46bd      	mov	sp, r7
 8019e6a:	b004      	add	sp, #16
 8019e6c:	bd80      	pop	{r7, pc}
	...

08019e70 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8019e70:	b5b0      	push	{r4, r5, r7, lr}
 8019e72:	b096      	sub	sp, #88	@ 0x58
 8019e74:	af00      	add	r7, sp, #0
 8019e76:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8019e78:	f000 fbec 	bl	801a654 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	681a      	ldr	r2, [r3, #0]
 8019e80:	204e      	movs	r0, #78	@ 0x4e
 8019e82:	183b      	adds	r3, r7, r0
 8019e84:	2144      	movs	r1, #68	@ 0x44
 8019e86:	5a52      	ldrh	r2, [r2, r1]
 8019e88:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8019e8a:	183b      	adds	r3, r7, r0
 8019e8c:	881b      	ldrh	r3, [r3, #0]
 8019e8e:	b2da      	uxtb	r2, r3
 8019e90:	244d      	movs	r4, #77	@ 0x4d
 8019e92:	193b      	adds	r3, r7, r4
 8019e94:	210f      	movs	r1, #15
 8019e96:	400a      	ands	r2, r1
 8019e98:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8019e9a:	193b      	adds	r3, r7, r4
 8019e9c:	781b      	ldrb	r3, [r3, #0]
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	d000      	beq.n	8019ea4 <PCD_EP_ISR_Handler+0x34>
 8019ea2:	e18f      	b.n	801a1c4 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8019ea4:	183b      	adds	r3, r7, r0
 8019ea6:	881b      	ldrh	r3, [r3, #0]
 8019ea8:	2210      	movs	r2, #16
 8019eaa:	4013      	ands	r3, r2
 8019eac:	d155      	bne.n	8019f5a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	881b      	ldrh	r3, [r3, #0]
 8019eb4:	b29a      	uxth	r2, r3
 8019eb6:	200e      	movs	r0, #14
 8019eb8:	183b      	adds	r3, r7, r0
 8019eba:	49bb      	ldr	r1, [pc, #748]	@ (801a1a8 <PCD_EP_ISR_Handler+0x338>)
 8019ebc:	400a      	ands	r2, r1
 8019ebe:	801a      	strh	r2, [r3, #0]
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	183a      	adds	r2, r7, r0
 8019ec6:	8812      	ldrh	r2, [r2, #0]
 8019ec8:	49b8      	ldr	r1, [pc, #736]	@ (801a1ac <PCD_EP_ISR_Handler+0x33c>)
 8019eca:	430a      	orrs	r2, r1
 8019ecc:	b292      	uxth	r2, r2
 8019ece:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	3328      	adds	r3, #40	@ 0x28
 8019ed4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	2250      	movs	r2, #80	@ 0x50
 8019edc:	5a9b      	ldrh	r3, [r3, r2]
 8019ede:	b29b      	uxth	r3, r3
 8019ee0:	001a      	movs	r2, r3
 8019ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ee4:	781b      	ldrb	r3, [r3, #0]
 8019ee6:	00db      	lsls	r3, r3, #3
 8019ee8:	18d2      	adds	r2, r2, r3
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	18d3      	adds	r3, r2, r3
 8019ef0:	4aaf      	ldr	r2, [pc, #700]	@ (801a1b0 <PCD_EP_ISR_Handler+0x340>)
 8019ef2:	4694      	mov	ip, r2
 8019ef4:	4463      	add	r3, ip
 8019ef6:	881b      	ldrh	r3, [r3, #0]
 8019ef8:	059b      	lsls	r3, r3, #22
 8019efa:	0d9a      	lsrs	r2, r3, #22
 8019efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019efe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8019f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f02:	695a      	ldr	r2, [r3, #20]
 8019f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f06:	69db      	ldr	r3, [r3, #28]
 8019f08:	18d2      	adds	r2, r2, r3
 8019f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f0c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	2100      	movs	r1, #0
 8019f12:	0018      	movs	r0, r3
 8019f14:	f009 fbd4 	bl	80236c0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	2224      	movs	r2, #36	@ 0x24
 8019f1c:	5c9b      	ldrb	r3, [r3, r2]
 8019f1e:	b2db      	uxtb	r3, r3
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d101      	bne.n	8019f28 <PCD_EP_ISR_Handler+0xb8>
 8019f24:	f000 fb96 	bl	801a654 <PCD_EP_ISR_Handler+0x7e4>
 8019f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f2a:	699b      	ldr	r3, [r3, #24]
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d001      	beq.n	8019f34 <PCD_EP_ISR_Handler+0xc4>
 8019f30:	f000 fb90 	bl	801a654 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	2224      	movs	r2, #36	@ 0x24
 8019f38:	5c9b      	ldrb	r3, [r3, r2]
 8019f3a:	b2db      	uxtb	r3, r3
 8019f3c:	2280      	movs	r2, #128	@ 0x80
 8019f3e:	4252      	negs	r2, r2
 8019f40:	4313      	orrs	r3, r2
 8019f42:	b2da      	uxtb	r2, r3
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	0011      	movs	r1, r2
 8019f4a:	224c      	movs	r2, #76	@ 0x4c
 8019f4c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	2224      	movs	r2, #36	@ 0x24
 8019f52:	2100      	movs	r1, #0
 8019f54:	5499      	strb	r1, [r3, r2]
 8019f56:	f000 fb7d 	bl	801a654 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	3369      	adds	r3, #105	@ 0x69
 8019f5e:	33ff      	adds	r3, #255	@ 0xff
 8019f60:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	681a      	ldr	r2, [r3, #0]
 8019f66:	214a      	movs	r1, #74	@ 0x4a
 8019f68:	187b      	adds	r3, r7, r1
 8019f6a:	8812      	ldrh	r2, [r2, #0]
 8019f6c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8019f6e:	187b      	adds	r3, r7, r1
 8019f70:	881a      	ldrh	r2, [r3, #0]
 8019f72:	2380      	movs	r3, #128	@ 0x80
 8019f74:	011b      	lsls	r3, r3, #4
 8019f76:	4013      	ands	r3, r2
 8019f78:	d037      	beq.n	8019fea <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	2250      	movs	r2, #80	@ 0x50
 8019f80:	5a9b      	ldrh	r3, [r3, r2]
 8019f82:	b29b      	uxth	r3, r3
 8019f84:	001a      	movs	r2, r3
 8019f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f88:	781b      	ldrb	r3, [r3, #0]
 8019f8a:	00db      	lsls	r3, r3, #3
 8019f8c:	18d2      	adds	r2, r2, r3
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	18d3      	adds	r3, r2, r3
 8019f94:	4a87      	ldr	r2, [pc, #540]	@ (801a1b4 <PCD_EP_ISR_Handler+0x344>)
 8019f96:	4694      	mov	ip, r2
 8019f98:	4463      	add	r3, ip
 8019f9a:	881b      	ldrh	r3, [r3, #0]
 8019f9c:	059b      	lsls	r3, r3, #22
 8019f9e:	0d9a      	lsrs	r2, r3, #22
 8019fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fa2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	6818      	ldr	r0, [r3, #0]
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	22ac      	movs	r2, #172	@ 0xac
 8019fac:	0092      	lsls	r2, r2, #2
 8019fae:	1899      	adds	r1, r3, r2
 8019fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fb2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8019fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fb6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019fb8:	b29b      	uxth	r3, r3
 8019fba:	f007 fb39 	bl	8021630 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	881b      	ldrh	r3, [r3, #0]
 8019fc4:	b29a      	uxth	r2, r3
 8019fc6:	2010      	movs	r0, #16
 8019fc8:	183b      	adds	r3, r7, r0
 8019fca:	497b      	ldr	r1, [pc, #492]	@ (801a1b8 <PCD_EP_ISR_Handler+0x348>)
 8019fcc:	400a      	ands	r2, r1
 8019fce:	801a      	strh	r2, [r3, #0]
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	183a      	adds	r2, r7, r0
 8019fd6:	8812      	ldrh	r2, [r2, #0]
 8019fd8:	2180      	movs	r1, #128	@ 0x80
 8019fda:	430a      	orrs	r2, r1
 8019fdc:	b292      	uxth	r2, r2
 8019fde:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	0018      	movs	r0, r3
 8019fe4:	f009 fb36 	bl	8023654 <HAL_PCD_SetupStageCallback>
 8019fe8:	e334      	b.n	801a654 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8019fea:	234a      	movs	r3, #74	@ 0x4a
 8019fec:	18fb      	adds	r3, r7, r3
 8019fee:	2200      	movs	r2, #0
 8019ff0:	5e9b      	ldrsh	r3, [r3, r2]
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	db00      	blt.n	8019ff8 <PCD_EP_ISR_Handler+0x188>
 8019ff6:	e32d      	b.n	801a654 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	881b      	ldrh	r3, [r3, #0]
 8019ffe:	b29a      	uxth	r2, r3
 801a000:	201e      	movs	r0, #30
 801a002:	183b      	adds	r3, r7, r0
 801a004:	496c      	ldr	r1, [pc, #432]	@ (801a1b8 <PCD_EP_ISR_Handler+0x348>)
 801a006:	400a      	ands	r2, r1
 801a008:	801a      	strh	r2, [r3, #0]
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	183a      	adds	r2, r7, r0
 801a010:	8812      	ldrh	r2, [r2, #0]
 801a012:	2180      	movs	r1, #128	@ 0x80
 801a014:	430a      	orrs	r2, r1
 801a016:	b292      	uxth	r2, r2
 801a018:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	2250      	movs	r2, #80	@ 0x50
 801a020:	5a9b      	ldrh	r3, [r3, r2]
 801a022:	b29b      	uxth	r3, r3
 801a024:	001a      	movs	r2, r3
 801a026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a028:	781b      	ldrb	r3, [r3, #0]
 801a02a:	00db      	lsls	r3, r3, #3
 801a02c:	18d2      	adds	r2, r2, r3
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	18d3      	adds	r3, r2, r3
 801a034:	4a5f      	ldr	r2, [pc, #380]	@ (801a1b4 <PCD_EP_ISR_Handler+0x344>)
 801a036:	4694      	mov	ip, r2
 801a038:	4463      	add	r3, ip
 801a03a:	881b      	ldrh	r3, [r3, #0]
 801a03c:	059b      	lsls	r3, r3, #22
 801a03e:	0d9a      	lsrs	r2, r3, #22
 801a040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a042:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 801a044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a046:	69db      	ldr	r3, [r3, #28]
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d01a      	beq.n	801a082 <PCD_EP_ISR_Handler+0x212>
 801a04c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a04e:	695b      	ldr	r3, [r3, #20]
 801a050:	2b00      	cmp	r3, #0
 801a052:	d016      	beq.n	801a082 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	6818      	ldr	r0, [r3, #0]
 801a058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a05a:	6959      	ldr	r1, [r3, #20]
 801a05c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a05e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 801a060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a062:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801a064:	b29b      	uxth	r3, r3
 801a066:	f007 fae3 	bl	8021630 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 801a06a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a06c:	695a      	ldr	r2, [r3, #20]
 801a06e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a070:	69db      	ldr	r3, [r3, #28]
 801a072:	18d2      	adds	r2, r2, r3
 801a074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a076:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	2100      	movs	r1, #0
 801a07c:	0018      	movs	r0, r3
 801a07e:	f009 fafe 	bl	802367e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	681a      	ldr	r2, [r3, #0]
 801a086:	214a      	movs	r1, #74	@ 0x4a
 801a088:	187b      	adds	r3, r7, r1
 801a08a:	8812      	ldrh	r2, [r2, #0]
 801a08c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801a08e:	187b      	adds	r3, r7, r1
 801a090:	881a      	ldrh	r2, [r3, #0]
 801a092:	2380      	movs	r3, #128	@ 0x80
 801a094:	011b      	lsls	r3, r3, #4
 801a096:	4013      	ands	r3, r2
 801a098:	d000      	beq.n	801a09c <PCD_EP_ISR_Handler+0x22c>
 801a09a:	e2db      	b.n	801a654 <PCD_EP_ISR_Handler+0x7e4>
 801a09c:	187b      	adds	r3, r7, r1
 801a09e:	881a      	ldrh	r2, [r3, #0]
 801a0a0:	23c0      	movs	r3, #192	@ 0xc0
 801a0a2:	019b      	lsls	r3, r3, #6
 801a0a4:	401a      	ands	r2, r3
 801a0a6:	23c0      	movs	r3, #192	@ 0xc0
 801a0a8:	019b      	lsls	r3, r3, #6
 801a0aa:	429a      	cmp	r2, r3
 801a0ac:	d100      	bne.n	801a0b0 <PCD_EP_ISR_Handler+0x240>
 801a0ae:	e2d1      	b.n	801a654 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	61bb      	str	r3, [r7, #24]
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	2250      	movs	r2, #80	@ 0x50
 801a0bc:	5a9b      	ldrh	r3, [r3, r2]
 801a0be:	b29b      	uxth	r3, r3
 801a0c0:	001a      	movs	r2, r3
 801a0c2:	69bb      	ldr	r3, [r7, #24]
 801a0c4:	189b      	adds	r3, r3, r2
 801a0c6:	61bb      	str	r3, [r7, #24]
 801a0c8:	69bb      	ldr	r3, [r7, #24]
 801a0ca:	4a3a      	ldr	r2, [pc, #232]	@ (801a1b4 <PCD_EP_ISR_Handler+0x344>)
 801a0cc:	4694      	mov	ip, r2
 801a0ce:	4463      	add	r3, ip
 801a0d0:	617b      	str	r3, [r7, #20]
 801a0d2:	697b      	ldr	r3, [r7, #20]
 801a0d4:	881b      	ldrh	r3, [r3, #0]
 801a0d6:	b29b      	uxth	r3, r3
 801a0d8:	059b      	lsls	r3, r3, #22
 801a0da:	0d9b      	lsrs	r3, r3, #22
 801a0dc:	b29a      	uxth	r2, r3
 801a0de:	697b      	ldr	r3, [r7, #20]
 801a0e0:	801a      	strh	r2, [r3, #0]
 801a0e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0e4:	691b      	ldr	r3, [r3, #16]
 801a0e6:	2b3e      	cmp	r3, #62	@ 0x3e
 801a0e8:	d91a      	bls.n	801a120 <PCD_EP_ISR_Handler+0x2b0>
 801a0ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0ec:	691b      	ldr	r3, [r3, #16]
 801a0ee:	095b      	lsrs	r3, r3, #5
 801a0f0:	647b      	str	r3, [r7, #68]	@ 0x44
 801a0f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0f4:	691b      	ldr	r3, [r3, #16]
 801a0f6:	221f      	movs	r2, #31
 801a0f8:	4013      	ands	r3, r2
 801a0fa:	d102      	bne.n	801a102 <PCD_EP_ISR_Handler+0x292>
 801a0fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a0fe:	3b01      	subs	r3, #1
 801a100:	647b      	str	r3, [r7, #68]	@ 0x44
 801a102:	697b      	ldr	r3, [r7, #20]
 801a104:	881b      	ldrh	r3, [r3, #0]
 801a106:	b29a      	uxth	r2, r3
 801a108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a10a:	b29b      	uxth	r3, r3
 801a10c:	029b      	lsls	r3, r3, #10
 801a10e:	b29b      	uxth	r3, r3
 801a110:	4313      	orrs	r3, r2
 801a112:	b29b      	uxth	r3, r3
 801a114:	4a25      	ldr	r2, [pc, #148]	@ (801a1ac <PCD_EP_ISR_Handler+0x33c>)
 801a116:	4313      	orrs	r3, r2
 801a118:	b29a      	uxth	r2, r3
 801a11a:	697b      	ldr	r3, [r7, #20]
 801a11c:	801a      	strh	r2, [r3, #0]
 801a11e:	e023      	b.n	801a168 <PCD_EP_ISR_Handler+0x2f8>
 801a120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a122:	691b      	ldr	r3, [r3, #16]
 801a124:	2b00      	cmp	r3, #0
 801a126:	d108      	bne.n	801a13a <PCD_EP_ISR_Handler+0x2ca>
 801a128:	697b      	ldr	r3, [r7, #20]
 801a12a:	881b      	ldrh	r3, [r3, #0]
 801a12c:	b29b      	uxth	r3, r3
 801a12e:	4a1f      	ldr	r2, [pc, #124]	@ (801a1ac <PCD_EP_ISR_Handler+0x33c>)
 801a130:	4313      	orrs	r3, r2
 801a132:	b29a      	uxth	r2, r3
 801a134:	697b      	ldr	r3, [r7, #20]
 801a136:	801a      	strh	r2, [r3, #0]
 801a138:	e016      	b.n	801a168 <PCD_EP_ISR_Handler+0x2f8>
 801a13a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a13c:	691b      	ldr	r3, [r3, #16]
 801a13e:	085b      	lsrs	r3, r3, #1
 801a140:	647b      	str	r3, [r7, #68]	@ 0x44
 801a142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a144:	691b      	ldr	r3, [r3, #16]
 801a146:	2201      	movs	r2, #1
 801a148:	4013      	ands	r3, r2
 801a14a:	d002      	beq.n	801a152 <PCD_EP_ISR_Handler+0x2e2>
 801a14c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a14e:	3301      	adds	r3, #1
 801a150:	647b      	str	r3, [r7, #68]	@ 0x44
 801a152:	697b      	ldr	r3, [r7, #20]
 801a154:	881b      	ldrh	r3, [r3, #0]
 801a156:	b29a      	uxth	r2, r3
 801a158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a15a:	b29b      	uxth	r3, r3
 801a15c:	029b      	lsls	r3, r3, #10
 801a15e:	b29b      	uxth	r3, r3
 801a160:	4313      	orrs	r3, r2
 801a162:	b29a      	uxth	r2, r3
 801a164:	697b      	ldr	r3, [r7, #20]
 801a166:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	881b      	ldrh	r3, [r3, #0]
 801a16e:	b29a      	uxth	r2, r3
 801a170:	2012      	movs	r0, #18
 801a172:	183b      	adds	r3, r7, r0
 801a174:	4911      	ldr	r1, [pc, #68]	@ (801a1bc <PCD_EP_ISR_Handler+0x34c>)
 801a176:	400a      	ands	r2, r1
 801a178:	801a      	strh	r2, [r3, #0]
 801a17a:	183b      	adds	r3, r7, r0
 801a17c:	183a      	adds	r2, r7, r0
 801a17e:	8812      	ldrh	r2, [r2, #0]
 801a180:	2180      	movs	r1, #128	@ 0x80
 801a182:	0149      	lsls	r1, r1, #5
 801a184:	404a      	eors	r2, r1
 801a186:	801a      	strh	r2, [r3, #0]
 801a188:	183b      	adds	r3, r7, r0
 801a18a:	183a      	adds	r2, r7, r0
 801a18c:	8812      	ldrh	r2, [r2, #0]
 801a18e:	2180      	movs	r1, #128	@ 0x80
 801a190:	0189      	lsls	r1, r1, #6
 801a192:	404a      	eors	r2, r1
 801a194:	801a      	strh	r2, [r3, #0]
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	183a      	adds	r2, r7, r0
 801a19c:	8812      	ldrh	r2, [r2, #0]
 801a19e:	4908      	ldr	r1, [pc, #32]	@ (801a1c0 <PCD_EP_ISR_Handler+0x350>)
 801a1a0:	430a      	orrs	r2, r1
 801a1a2:	b292      	uxth	r2, r2
 801a1a4:	801a      	strh	r2, [r3, #0]
 801a1a6:	e255      	b.n	801a654 <PCD_EP_ISR_Handler+0x7e4>
 801a1a8:	ffff8f0f 	.word	0xffff8f0f
 801a1ac:	ffff8000 	.word	0xffff8000
 801a1b0:	00000402 	.word	0x00000402
 801a1b4:	00000406 	.word	0x00000406
 801a1b8:	00000f8f 	.word	0x00000f8f
 801a1bc:	ffffbf8f 	.word	0xffffbf8f
 801a1c0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	681b      	ldr	r3, [r3, #0]
 801a1c8:	001a      	movs	r2, r3
 801a1ca:	204d      	movs	r0, #77	@ 0x4d
 801a1cc:	183b      	adds	r3, r7, r0
 801a1ce:	781b      	ldrb	r3, [r3, #0]
 801a1d0:	009b      	lsls	r3, r3, #2
 801a1d2:	18d2      	adds	r2, r2, r3
 801a1d4:	214a      	movs	r1, #74	@ 0x4a
 801a1d6:	187b      	adds	r3, r7, r1
 801a1d8:	8812      	ldrh	r2, [r2, #0]
 801a1da:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801a1dc:	187b      	adds	r3, r7, r1
 801a1de:	2200      	movs	r2, #0
 801a1e0:	5e9b      	ldrsh	r3, [r3, r2]
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	db00      	blt.n	801a1e8 <PCD_EP_ISR_Handler+0x378>
 801a1e6:	e0fa      	b.n	801a3de <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	001a      	movs	r2, r3
 801a1ee:	183b      	adds	r3, r7, r0
 801a1f0:	781b      	ldrb	r3, [r3, #0]
 801a1f2:	009b      	lsls	r3, r3, #2
 801a1f4:	18d3      	adds	r3, r2, r3
 801a1f6:	881b      	ldrh	r3, [r3, #0]
 801a1f8:	b29a      	uxth	r2, r3
 801a1fa:	2448      	movs	r4, #72	@ 0x48
 801a1fc:	193b      	adds	r3, r7, r4
 801a1fe:	49d1      	ldr	r1, [pc, #836]	@ (801a544 <PCD_EP_ISR_Handler+0x6d4>)
 801a200:	400a      	ands	r2, r1
 801a202:	801a      	strh	r2, [r3, #0]
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	001a      	movs	r2, r3
 801a20a:	183b      	adds	r3, r7, r0
 801a20c:	781b      	ldrb	r3, [r3, #0]
 801a20e:	009b      	lsls	r3, r3, #2
 801a210:	18d3      	adds	r3, r2, r3
 801a212:	193a      	adds	r2, r7, r4
 801a214:	8812      	ldrh	r2, [r2, #0]
 801a216:	2180      	movs	r1, #128	@ 0x80
 801a218:	430a      	orrs	r2, r1
 801a21a:	b292      	uxth	r2, r2
 801a21c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801a21e:	183b      	adds	r3, r7, r0
 801a220:	781a      	ldrb	r2, [r3, #0]
 801a222:	0013      	movs	r3, r2
 801a224:	009b      	lsls	r3, r3, #2
 801a226:	189b      	adds	r3, r3, r2
 801a228:	00db      	lsls	r3, r3, #3
 801a22a:	3369      	adds	r3, #105	@ 0x69
 801a22c:	33ff      	adds	r3, #255	@ 0xff
 801a22e:	687a      	ldr	r2, [r7, #4]
 801a230:	18d3      	adds	r3, r2, r3
 801a232:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 801a234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a236:	7b1b      	ldrb	r3, [r3, #12]
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d125      	bne.n	801a288 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	2250      	movs	r2, #80	@ 0x50
 801a242:	5a9b      	ldrh	r3, [r3, r2]
 801a244:	b29b      	uxth	r3, r3
 801a246:	001a      	movs	r2, r3
 801a248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a24a:	781b      	ldrb	r3, [r3, #0]
 801a24c:	00db      	lsls	r3, r3, #3
 801a24e:	18d2      	adds	r2, r2, r3
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	18d3      	adds	r3, r2, r3
 801a256:	4abc      	ldr	r2, [pc, #752]	@ (801a548 <PCD_EP_ISR_Handler+0x6d8>)
 801a258:	4694      	mov	ip, r2
 801a25a:	4463      	add	r3, ip
 801a25c:	881a      	ldrh	r2, [r3, #0]
 801a25e:	2450      	movs	r4, #80	@ 0x50
 801a260:	193b      	adds	r3, r7, r4
 801a262:	0592      	lsls	r2, r2, #22
 801a264:	0d92      	lsrs	r2, r2, #22
 801a266:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 801a268:	193b      	adds	r3, r7, r4
 801a26a:	881b      	ldrh	r3, [r3, #0]
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d100      	bne.n	801a272 <PCD_EP_ISR_Handler+0x402>
 801a270:	e08d      	b.n	801a38e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	6818      	ldr	r0, [r3, #0]
 801a276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a278:	6959      	ldr	r1, [r3, #20]
 801a27a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a27c:	88da      	ldrh	r2, [r3, #6]
 801a27e:	193b      	adds	r3, r7, r4
 801a280:	881b      	ldrh	r3, [r3, #0]
 801a282:	f007 f9d5 	bl	8021630 <USB_ReadPMA>
 801a286:	e082      	b.n	801a38e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 801a288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a28a:	78db      	ldrb	r3, [r3, #3]
 801a28c:	2b02      	cmp	r3, #2
 801a28e:	d10c      	bne.n	801a2aa <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 801a290:	2350      	movs	r3, #80	@ 0x50
 801a292:	18fc      	adds	r4, r7, r3
 801a294:	234a      	movs	r3, #74	@ 0x4a
 801a296:	18fb      	adds	r3, r7, r3
 801a298:	881a      	ldrh	r2, [r3, #0]
 801a29a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	0018      	movs	r0, r3
 801a2a0:	f000 f9ec 	bl	801a67c <HAL_PCD_EP_DB_Receive>
 801a2a4:	0003      	movs	r3, r0
 801a2a6:	8023      	strh	r3, [r4, #0]
 801a2a8:	e071      	b.n	801a38e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	001a      	movs	r2, r3
 801a2b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2b2:	781b      	ldrb	r3, [r3, #0]
 801a2b4:	009b      	lsls	r3, r3, #2
 801a2b6:	18d3      	adds	r3, r2, r3
 801a2b8:	881b      	ldrh	r3, [r3, #0]
 801a2ba:	b29a      	uxth	r2, r3
 801a2bc:	2052      	movs	r0, #82	@ 0x52
 801a2be:	183b      	adds	r3, r7, r0
 801a2c0:	49a2      	ldr	r1, [pc, #648]	@ (801a54c <PCD_EP_ISR_Handler+0x6dc>)
 801a2c2:	400a      	ands	r2, r1
 801a2c4:	801a      	strh	r2, [r3, #0]
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	001a      	movs	r2, r3
 801a2cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2ce:	781b      	ldrb	r3, [r3, #0]
 801a2d0:	009b      	lsls	r3, r3, #2
 801a2d2:	18d3      	adds	r3, r2, r3
 801a2d4:	183a      	adds	r2, r7, r0
 801a2d6:	8812      	ldrh	r2, [r2, #0]
 801a2d8:	499d      	ldr	r1, [pc, #628]	@ (801a550 <PCD_EP_ISR_Handler+0x6e0>)
 801a2da:	430a      	orrs	r2, r1
 801a2dc:	b292      	uxth	r2, r2
 801a2de:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	001a      	movs	r2, r3
 801a2e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2e8:	781b      	ldrb	r3, [r3, #0]
 801a2ea:	009b      	lsls	r3, r3, #2
 801a2ec:	18d3      	adds	r3, r2, r3
 801a2ee:	881b      	ldrh	r3, [r3, #0]
 801a2f0:	b29b      	uxth	r3, r3
 801a2f2:	001a      	movs	r2, r3
 801a2f4:	2380      	movs	r3, #128	@ 0x80
 801a2f6:	01db      	lsls	r3, r3, #7
 801a2f8:	4013      	ands	r3, r2
 801a2fa:	d024      	beq.n	801a346 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	2250      	movs	r2, #80	@ 0x50
 801a302:	5a9b      	ldrh	r3, [r3, r2]
 801a304:	b29b      	uxth	r3, r3
 801a306:	001a      	movs	r2, r3
 801a308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a30a:	781b      	ldrb	r3, [r3, #0]
 801a30c:	00db      	lsls	r3, r3, #3
 801a30e:	18d2      	adds	r2, r2, r3
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	681b      	ldr	r3, [r3, #0]
 801a314:	18d3      	adds	r3, r2, r3
 801a316:	4a8f      	ldr	r2, [pc, #572]	@ (801a554 <PCD_EP_ISR_Handler+0x6e4>)
 801a318:	4694      	mov	ip, r2
 801a31a:	4463      	add	r3, ip
 801a31c:	881a      	ldrh	r2, [r3, #0]
 801a31e:	2450      	movs	r4, #80	@ 0x50
 801a320:	193b      	adds	r3, r7, r4
 801a322:	0592      	lsls	r2, r2, #22
 801a324:	0d92      	lsrs	r2, r2, #22
 801a326:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801a328:	193b      	adds	r3, r7, r4
 801a32a:	881b      	ldrh	r3, [r3, #0]
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d02e      	beq.n	801a38e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	6818      	ldr	r0, [r3, #0]
 801a334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a336:	6959      	ldr	r1, [r3, #20]
 801a338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a33a:	891a      	ldrh	r2, [r3, #8]
 801a33c:	193b      	adds	r3, r7, r4
 801a33e:	881b      	ldrh	r3, [r3, #0]
 801a340:	f007 f976 	bl	8021630 <USB_ReadPMA>
 801a344:	e023      	b.n	801a38e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	2250      	movs	r2, #80	@ 0x50
 801a34c:	5a9b      	ldrh	r3, [r3, r2]
 801a34e:	b29b      	uxth	r3, r3
 801a350:	001a      	movs	r2, r3
 801a352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a354:	781b      	ldrb	r3, [r3, #0]
 801a356:	00db      	lsls	r3, r3, #3
 801a358:	18d2      	adds	r2, r2, r3
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	18d3      	adds	r3, r2, r3
 801a360:	4a79      	ldr	r2, [pc, #484]	@ (801a548 <PCD_EP_ISR_Handler+0x6d8>)
 801a362:	4694      	mov	ip, r2
 801a364:	4463      	add	r3, ip
 801a366:	881a      	ldrh	r2, [r3, #0]
 801a368:	2450      	movs	r4, #80	@ 0x50
 801a36a:	193b      	adds	r3, r7, r4
 801a36c:	0592      	lsls	r2, r2, #22
 801a36e:	0d92      	lsrs	r2, r2, #22
 801a370:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801a372:	193b      	adds	r3, r7, r4
 801a374:	881b      	ldrh	r3, [r3, #0]
 801a376:	2b00      	cmp	r3, #0
 801a378:	d009      	beq.n	801a38e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	6818      	ldr	r0, [r3, #0]
 801a37e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a380:	6959      	ldr	r1, [r3, #20]
 801a382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a384:	895a      	ldrh	r2, [r3, #10]
 801a386:	193b      	adds	r3, r7, r4
 801a388:	881b      	ldrh	r3, [r3, #0]
 801a38a:	f007 f951 	bl	8021630 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801a38e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a390:	69da      	ldr	r2, [r3, #28]
 801a392:	2150      	movs	r1, #80	@ 0x50
 801a394:	187b      	adds	r3, r7, r1
 801a396:	881b      	ldrh	r3, [r3, #0]
 801a398:	18d2      	adds	r2, r2, r3
 801a39a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a39c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801a39e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3a0:	695a      	ldr	r2, [r3, #20]
 801a3a2:	187b      	adds	r3, r7, r1
 801a3a4:	881b      	ldrh	r3, [r3, #0]
 801a3a6:	18d2      	adds	r2, r2, r3
 801a3a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 801a3ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3ae:	699b      	ldr	r3, [r3, #24]
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d005      	beq.n	801a3c0 <PCD_EP_ISR_Handler+0x550>
 801a3b4:	187b      	adds	r3, r7, r1
 801a3b6:	881a      	ldrh	r2, [r3, #0]
 801a3b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3ba:	691b      	ldr	r3, [r3, #16]
 801a3bc:	429a      	cmp	r2, r3
 801a3be:	d207      	bcs.n	801a3d0 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 801a3c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3c2:	781a      	ldrb	r2, [r3, #0]
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	0011      	movs	r1, r2
 801a3c8:	0018      	movs	r0, r3
 801a3ca:	f009 f958 	bl	802367e <HAL_PCD_DataOutStageCallback>
 801a3ce:	e006      	b.n	801a3de <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a3d6:	0011      	movs	r1, r2
 801a3d8:	0018      	movs	r0, r3
 801a3da:	f005 fe6d 	bl	80200b8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801a3de:	244a      	movs	r4, #74	@ 0x4a
 801a3e0:	193b      	adds	r3, r7, r4
 801a3e2:	881b      	ldrh	r3, [r3, #0]
 801a3e4:	2280      	movs	r2, #128	@ 0x80
 801a3e6:	4013      	ands	r3, r2
 801a3e8:	d100      	bne.n	801a3ec <PCD_EP_ISR_Handler+0x57c>
 801a3ea:	e133      	b.n	801a654 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 801a3ec:	204d      	movs	r0, #77	@ 0x4d
 801a3ee:	183b      	adds	r3, r7, r0
 801a3f0:	781b      	ldrb	r3, [r3, #0]
 801a3f2:	1c5a      	adds	r2, r3, #1
 801a3f4:	0013      	movs	r3, r2
 801a3f6:	009b      	lsls	r3, r3, #2
 801a3f8:	189b      	adds	r3, r3, r2
 801a3fa:	00db      	lsls	r3, r3, #3
 801a3fc:	687a      	ldr	r2, [r7, #4]
 801a3fe:	18d3      	adds	r3, r2, r3
 801a400:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	001a      	movs	r2, r3
 801a408:	183b      	adds	r3, r7, r0
 801a40a:	781b      	ldrb	r3, [r3, #0]
 801a40c:	009b      	lsls	r3, r3, #2
 801a40e:	18d3      	adds	r3, r2, r3
 801a410:	881b      	ldrh	r3, [r3, #0]
 801a412:	b29a      	uxth	r2, r3
 801a414:	2542      	movs	r5, #66	@ 0x42
 801a416:	197b      	adds	r3, r7, r5
 801a418:	494f      	ldr	r1, [pc, #316]	@ (801a558 <PCD_EP_ISR_Handler+0x6e8>)
 801a41a:	400a      	ands	r2, r1
 801a41c:	801a      	strh	r2, [r3, #0]
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	001a      	movs	r2, r3
 801a424:	183b      	adds	r3, r7, r0
 801a426:	781b      	ldrb	r3, [r3, #0]
 801a428:	009b      	lsls	r3, r3, #2
 801a42a:	18d3      	adds	r3, r2, r3
 801a42c:	197a      	adds	r2, r7, r5
 801a42e:	8812      	ldrh	r2, [r2, #0]
 801a430:	494a      	ldr	r1, [pc, #296]	@ (801a55c <PCD_EP_ISR_Handler+0x6ec>)
 801a432:	430a      	orrs	r2, r1
 801a434:	b292      	uxth	r2, r2
 801a436:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 801a438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a43a:	78db      	ldrb	r3, [r3, #3]
 801a43c:	2b01      	cmp	r3, #1
 801a43e:	d000      	beq.n	801a442 <PCD_EP_ISR_Handler+0x5d2>
 801a440:	e0af      	b.n	801a5a2 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801a442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a444:	2200      	movs	r2, #0
 801a446:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 801a448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a44a:	7b1b      	ldrb	r3, [r3, #12]
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d100      	bne.n	801a452 <PCD_EP_ISR_Handler+0x5e2>
 801a450:	e09f      	b.n	801a592 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a452:	193b      	adds	r3, r7, r4
 801a454:	881b      	ldrh	r3, [r3, #0]
 801a456:	2240      	movs	r2, #64	@ 0x40
 801a458:	4013      	ands	r3, r2
 801a45a:	d046      	beq.n	801a4ea <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a45c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a45e:	785b      	ldrb	r3, [r3, #1]
 801a460:	2b00      	cmp	r3, #0
 801a462:	d125      	bne.n	801a4b0 <PCD_EP_ISR_Handler+0x640>
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	627b      	str	r3, [r7, #36]	@ 0x24
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	2250      	movs	r2, #80	@ 0x50
 801a470:	5a9b      	ldrh	r3, [r3, r2]
 801a472:	b29b      	uxth	r3, r3
 801a474:	001a      	movs	r2, r3
 801a476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a478:	189b      	adds	r3, r3, r2
 801a47a:	627b      	str	r3, [r7, #36]	@ 0x24
 801a47c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a47e:	781b      	ldrb	r3, [r3, #0]
 801a480:	00da      	lsls	r2, r3, #3
 801a482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a484:	18d3      	adds	r3, r2, r3
 801a486:	4a33      	ldr	r2, [pc, #204]	@ (801a554 <PCD_EP_ISR_Handler+0x6e4>)
 801a488:	4694      	mov	ip, r2
 801a48a:	4463      	add	r3, ip
 801a48c:	623b      	str	r3, [r7, #32]
 801a48e:	6a3b      	ldr	r3, [r7, #32]
 801a490:	881b      	ldrh	r3, [r3, #0]
 801a492:	b29b      	uxth	r3, r3
 801a494:	059b      	lsls	r3, r3, #22
 801a496:	0d9b      	lsrs	r3, r3, #22
 801a498:	b29a      	uxth	r2, r3
 801a49a:	6a3b      	ldr	r3, [r7, #32]
 801a49c:	801a      	strh	r2, [r3, #0]
 801a49e:	6a3b      	ldr	r3, [r7, #32]
 801a4a0:	881b      	ldrh	r3, [r3, #0]
 801a4a2:	b29b      	uxth	r3, r3
 801a4a4:	4a2d      	ldr	r2, [pc, #180]	@ (801a55c <PCD_EP_ISR_Handler+0x6ec>)
 801a4a6:	4313      	orrs	r3, r2
 801a4a8:	b29a      	uxth	r2, r3
 801a4aa:	6a3b      	ldr	r3, [r7, #32]
 801a4ac:	801a      	strh	r2, [r3, #0]
 801a4ae:	e070      	b.n	801a592 <PCD_EP_ISR_Handler+0x722>
 801a4b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4b2:	785b      	ldrb	r3, [r3, #1]
 801a4b4:	2b01      	cmp	r3, #1
 801a4b6:	d16c      	bne.n	801a592 <PCD_EP_ISR_Handler+0x722>
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	681b      	ldr	r3, [r3, #0]
 801a4bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	2250      	movs	r2, #80	@ 0x50
 801a4c4:	5a9b      	ldrh	r3, [r3, r2]
 801a4c6:	b29b      	uxth	r3, r3
 801a4c8:	001a      	movs	r2, r3
 801a4ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4cc:	189b      	adds	r3, r3, r2
 801a4ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a4d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4d2:	781b      	ldrb	r3, [r3, #0]
 801a4d4:	00da      	lsls	r2, r3, #3
 801a4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4d8:	18d3      	adds	r3, r2, r3
 801a4da:	4a1e      	ldr	r2, [pc, #120]	@ (801a554 <PCD_EP_ISR_Handler+0x6e4>)
 801a4dc:	4694      	mov	ip, r2
 801a4de:	4463      	add	r3, ip
 801a4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4e4:	2200      	movs	r2, #0
 801a4e6:	801a      	strh	r2, [r3, #0]
 801a4e8:	e053      	b.n	801a592 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a4f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4f2:	785b      	ldrb	r3, [r3, #1]
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d133      	bne.n	801a560 <PCD_EP_ISR_Handler+0x6f0>
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	637b      	str	r3, [r7, #52]	@ 0x34
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	2250      	movs	r2, #80	@ 0x50
 801a504:	5a9b      	ldrh	r3, [r3, r2]
 801a506:	b29b      	uxth	r3, r3
 801a508:	001a      	movs	r2, r3
 801a50a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a50c:	189b      	adds	r3, r3, r2
 801a50e:	637b      	str	r3, [r7, #52]	@ 0x34
 801a510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a512:	781b      	ldrb	r3, [r3, #0]
 801a514:	00da      	lsls	r2, r3, #3
 801a516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a518:	18d3      	adds	r3, r2, r3
 801a51a:	4a0b      	ldr	r2, [pc, #44]	@ (801a548 <PCD_EP_ISR_Handler+0x6d8>)
 801a51c:	4694      	mov	ip, r2
 801a51e:	4463      	add	r3, ip
 801a520:	633b      	str	r3, [r7, #48]	@ 0x30
 801a522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a524:	881b      	ldrh	r3, [r3, #0]
 801a526:	b29b      	uxth	r3, r3
 801a528:	059b      	lsls	r3, r3, #22
 801a52a:	0d9b      	lsrs	r3, r3, #22
 801a52c:	b29a      	uxth	r2, r3
 801a52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a530:	801a      	strh	r2, [r3, #0]
 801a532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a534:	881b      	ldrh	r3, [r3, #0]
 801a536:	b29b      	uxth	r3, r3
 801a538:	4a08      	ldr	r2, [pc, #32]	@ (801a55c <PCD_EP_ISR_Handler+0x6ec>)
 801a53a:	4313      	orrs	r3, r2
 801a53c:	b29a      	uxth	r2, r3
 801a53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a540:	801a      	strh	r2, [r3, #0]
 801a542:	e026      	b.n	801a592 <PCD_EP_ISR_Handler+0x722>
 801a544:	00000f8f 	.word	0x00000f8f
 801a548:	00000406 	.word	0x00000406
 801a54c:	ffff8f8f 	.word	0xffff8f8f
 801a550:	ffff80c0 	.word	0xffff80c0
 801a554:	00000402 	.word	0x00000402
 801a558:	ffff8f0f 	.word	0xffff8f0f
 801a55c:	ffff8000 	.word	0xffff8000
 801a560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a562:	785b      	ldrb	r3, [r3, #1]
 801a564:	2b01      	cmp	r3, #1
 801a566:	d114      	bne.n	801a592 <PCD_EP_ISR_Handler+0x722>
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	681b      	ldr	r3, [r3, #0]
 801a56c:	2250      	movs	r2, #80	@ 0x50
 801a56e:	5a9b      	ldrh	r3, [r3, r2]
 801a570:	b29b      	uxth	r3, r3
 801a572:	001a      	movs	r2, r3
 801a574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a576:	189b      	adds	r3, r3, r2
 801a578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a57a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a57c:	781b      	ldrb	r3, [r3, #0]
 801a57e:	00da      	lsls	r2, r3, #3
 801a580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a582:	18d3      	adds	r3, r2, r3
 801a584:	4a3b      	ldr	r2, [pc, #236]	@ (801a674 <PCD_EP_ISR_Handler+0x804>)
 801a586:	4694      	mov	ip, r2
 801a588:	4463      	add	r3, ip
 801a58a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a58e:	2200      	movs	r2, #0
 801a590:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a594:	781a      	ldrb	r2, [r3, #0]
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	0011      	movs	r1, r2
 801a59a:	0018      	movs	r0, r3
 801a59c:	f009 f890 	bl	80236c0 <HAL_PCD_DataInStageCallback>
 801a5a0:	e058      	b.n	801a654 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 801a5a2:	234a      	movs	r3, #74	@ 0x4a
 801a5a4:	18fb      	adds	r3, r7, r3
 801a5a6:	881a      	ldrh	r2, [r3, #0]
 801a5a8:	2380      	movs	r3, #128	@ 0x80
 801a5aa:	005b      	lsls	r3, r3, #1
 801a5ac:	4013      	ands	r3, r2
 801a5ae:	d149      	bne.n	801a644 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	2250      	movs	r2, #80	@ 0x50
 801a5b6:	5a9b      	ldrh	r3, [r3, r2]
 801a5b8:	b29b      	uxth	r3, r3
 801a5ba:	001a      	movs	r2, r3
 801a5bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5be:	781b      	ldrb	r3, [r3, #0]
 801a5c0:	00db      	lsls	r3, r3, #3
 801a5c2:	18d2      	adds	r2, r2, r3
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	18d3      	adds	r3, r2, r3
 801a5ca:	4a2b      	ldr	r2, [pc, #172]	@ (801a678 <PCD_EP_ISR_Handler+0x808>)
 801a5cc:	4694      	mov	ip, r2
 801a5ce:	4463      	add	r3, ip
 801a5d0:	881a      	ldrh	r2, [r3, #0]
 801a5d2:	2140      	movs	r1, #64	@ 0x40
 801a5d4:	187b      	adds	r3, r7, r1
 801a5d6:	0592      	lsls	r2, r2, #22
 801a5d8:	0d92      	lsrs	r2, r2, #22
 801a5da:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 801a5dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5de:	699a      	ldr	r2, [r3, #24]
 801a5e0:	187b      	adds	r3, r7, r1
 801a5e2:	881b      	ldrh	r3, [r3, #0]
 801a5e4:	429a      	cmp	r2, r3
 801a5e6:	d907      	bls.n	801a5f8 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 801a5e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5ea:	699a      	ldr	r2, [r3, #24]
 801a5ec:	187b      	adds	r3, r7, r1
 801a5ee:	881b      	ldrh	r3, [r3, #0]
 801a5f0:	1ad2      	subs	r2, r2, r3
 801a5f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5f4:	619a      	str	r2, [r3, #24]
 801a5f6:	e002      	b.n	801a5fe <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 801a5f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5fa:	2200      	movs	r2, #0
 801a5fc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 801a5fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a600:	699b      	ldr	r3, [r3, #24]
 801a602:	2b00      	cmp	r3, #0
 801a604:	d107      	bne.n	801a616 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a608:	781a      	ldrb	r2, [r3, #0]
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	0011      	movs	r1, r2
 801a60e:	0018      	movs	r0, r3
 801a610:	f009 f856 	bl	80236c0 <HAL_PCD_DataInStageCallback>
 801a614:	e01e      	b.n	801a654 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801a616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a618:	695a      	ldr	r2, [r3, #20]
 801a61a:	2140      	movs	r1, #64	@ 0x40
 801a61c:	187b      	adds	r3, r7, r1
 801a61e:	881b      	ldrh	r3, [r3, #0]
 801a620:	18d2      	adds	r2, r2, r3
 801a622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a624:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801a626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a628:	69da      	ldr	r2, [r3, #28]
 801a62a:	187b      	adds	r3, r7, r1
 801a62c:	881b      	ldrh	r3, [r3, #0]
 801a62e:	18d2      	adds	r2, r2, r3
 801a630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a632:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a63a:	0011      	movs	r1, r2
 801a63c:	0018      	movs	r0, r3
 801a63e:	f005 fd3b 	bl	80200b8 <USB_EPStartXfer>
 801a642:	e007      	b.n	801a654 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801a644:	234a      	movs	r3, #74	@ 0x4a
 801a646:	18fb      	adds	r3, r7, r3
 801a648:	881a      	ldrh	r2, [r3, #0]
 801a64a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	0018      	movs	r0, r3
 801a650:	f000 f930 	bl	801a8b4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	681b      	ldr	r3, [r3, #0]
 801a658:	2244      	movs	r2, #68	@ 0x44
 801a65a:	5a9b      	ldrh	r3, [r3, r2]
 801a65c:	b29b      	uxth	r3, r3
 801a65e:	b21b      	sxth	r3, r3
 801a660:	2b00      	cmp	r3, #0
 801a662:	da01      	bge.n	801a668 <PCD_EP_ISR_Handler+0x7f8>
 801a664:	f7ff fc0a 	bl	8019e7c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 801a668:	2300      	movs	r3, #0
}
 801a66a:	0018      	movs	r0, r3
 801a66c:	46bd      	mov	sp, r7
 801a66e:	b016      	add	sp, #88	@ 0x58
 801a670:	bdb0      	pop	{r4, r5, r7, pc}
 801a672:	46c0      	nop			@ (mov r8, r8)
 801a674:	00000406 	.word	0x00000406
 801a678:	00000402 	.word	0x00000402

0801a67c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801a67c:	b590      	push	{r4, r7, lr}
 801a67e:	b089      	sub	sp, #36	@ 0x24
 801a680:	af00      	add	r7, sp, #0
 801a682:	60f8      	str	r0, [r7, #12]
 801a684:	60b9      	str	r1, [r7, #8]
 801a686:	1dbb      	adds	r3, r7, #6
 801a688:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a68a:	1dbb      	adds	r3, r7, #6
 801a68c:	881a      	ldrh	r2, [r3, #0]
 801a68e:	2380      	movs	r3, #128	@ 0x80
 801a690:	01db      	lsls	r3, r3, #7
 801a692:	4013      	ands	r3, r2
 801a694:	d100      	bne.n	801a698 <HAL_PCD_EP_DB_Receive+0x1c>
 801a696:	e07d      	b.n	801a794 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	2250      	movs	r2, #80	@ 0x50
 801a69e:	5a9b      	ldrh	r3, [r3, r2]
 801a6a0:	b29b      	uxth	r3, r3
 801a6a2:	001a      	movs	r2, r3
 801a6a4:	68bb      	ldr	r3, [r7, #8]
 801a6a6:	781b      	ldrb	r3, [r3, #0]
 801a6a8:	00db      	lsls	r3, r3, #3
 801a6aa:	18d2      	adds	r2, r2, r3
 801a6ac:	68fb      	ldr	r3, [r7, #12]
 801a6ae:	681b      	ldr	r3, [r3, #0]
 801a6b0:	18d3      	adds	r3, r2, r3
 801a6b2:	4a7a      	ldr	r2, [pc, #488]	@ (801a89c <HAL_PCD_EP_DB_Receive+0x220>)
 801a6b4:	4694      	mov	ip, r2
 801a6b6:	4463      	add	r3, ip
 801a6b8:	881a      	ldrh	r2, [r3, #0]
 801a6ba:	211a      	movs	r1, #26
 801a6bc:	187b      	adds	r3, r7, r1
 801a6be:	0592      	lsls	r2, r2, #22
 801a6c0:	0d92      	lsrs	r2, r2, #22
 801a6c2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801a6c4:	68bb      	ldr	r3, [r7, #8]
 801a6c6:	699a      	ldr	r2, [r3, #24]
 801a6c8:	187b      	adds	r3, r7, r1
 801a6ca:	881b      	ldrh	r3, [r3, #0]
 801a6cc:	429a      	cmp	r2, r3
 801a6ce:	d307      	bcc.n	801a6e0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 801a6d0:	68bb      	ldr	r3, [r7, #8]
 801a6d2:	699a      	ldr	r2, [r3, #24]
 801a6d4:	187b      	adds	r3, r7, r1
 801a6d6:	881b      	ldrh	r3, [r3, #0]
 801a6d8:	1ad2      	subs	r2, r2, r3
 801a6da:	68bb      	ldr	r3, [r7, #8]
 801a6dc:	619a      	str	r2, [r3, #24]
 801a6de:	e002      	b.n	801a6e6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 801a6e0:	68bb      	ldr	r3, [r7, #8]
 801a6e2:	2200      	movs	r2, #0
 801a6e4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801a6e6:	68bb      	ldr	r3, [r7, #8]
 801a6e8:	699b      	ldr	r3, [r3, #24]
 801a6ea:	2b00      	cmp	r3, #0
 801a6ec:	d121      	bne.n	801a732 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801a6ee:	68fb      	ldr	r3, [r7, #12]
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	001a      	movs	r2, r3
 801a6f4:	68bb      	ldr	r3, [r7, #8]
 801a6f6:	781b      	ldrb	r3, [r3, #0]
 801a6f8:	009b      	lsls	r3, r3, #2
 801a6fa:	18d3      	adds	r3, r2, r3
 801a6fc:	881b      	ldrh	r3, [r3, #0]
 801a6fe:	b29a      	uxth	r2, r3
 801a700:	2018      	movs	r0, #24
 801a702:	183b      	adds	r3, r7, r0
 801a704:	4966      	ldr	r1, [pc, #408]	@ (801a8a0 <HAL_PCD_EP_DB_Receive+0x224>)
 801a706:	400a      	ands	r2, r1
 801a708:	801a      	strh	r2, [r3, #0]
 801a70a:	183b      	adds	r3, r7, r0
 801a70c:	183a      	adds	r2, r7, r0
 801a70e:	8812      	ldrh	r2, [r2, #0]
 801a710:	2180      	movs	r1, #128	@ 0x80
 801a712:	0189      	lsls	r1, r1, #6
 801a714:	404a      	eors	r2, r1
 801a716:	801a      	strh	r2, [r3, #0]
 801a718:	68fb      	ldr	r3, [r7, #12]
 801a71a:	681b      	ldr	r3, [r3, #0]
 801a71c:	001a      	movs	r2, r3
 801a71e:	68bb      	ldr	r3, [r7, #8]
 801a720:	781b      	ldrb	r3, [r3, #0]
 801a722:	009b      	lsls	r3, r3, #2
 801a724:	18d3      	adds	r3, r2, r3
 801a726:	183a      	adds	r2, r7, r0
 801a728:	8812      	ldrh	r2, [r2, #0]
 801a72a:	495e      	ldr	r1, [pc, #376]	@ (801a8a4 <HAL_PCD_EP_DB_Receive+0x228>)
 801a72c:	430a      	orrs	r2, r1
 801a72e:	b292      	uxth	r2, r2
 801a730:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a732:	1dbb      	adds	r3, r7, #6
 801a734:	881b      	ldrh	r3, [r3, #0]
 801a736:	2240      	movs	r2, #64	@ 0x40
 801a738:	4013      	ands	r3, r2
 801a73a:	d01a      	beq.n	801a772 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a73c:	68fb      	ldr	r3, [r7, #12]
 801a73e:	681b      	ldr	r3, [r3, #0]
 801a740:	001a      	movs	r2, r3
 801a742:	68bb      	ldr	r3, [r7, #8]
 801a744:	781b      	ldrb	r3, [r3, #0]
 801a746:	009b      	lsls	r3, r3, #2
 801a748:	18d3      	adds	r3, r2, r3
 801a74a:	881b      	ldrh	r3, [r3, #0]
 801a74c:	b29a      	uxth	r2, r3
 801a74e:	2016      	movs	r0, #22
 801a750:	183b      	adds	r3, r7, r0
 801a752:	4955      	ldr	r1, [pc, #340]	@ (801a8a8 <HAL_PCD_EP_DB_Receive+0x22c>)
 801a754:	400a      	ands	r2, r1
 801a756:	801a      	strh	r2, [r3, #0]
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	001a      	movs	r2, r3
 801a75e:	68bb      	ldr	r3, [r7, #8]
 801a760:	781b      	ldrb	r3, [r3, #0]
 801a762:	009b      	lsls	r3, r3, #2
 801a764:	18d3      	adds	r3, r2, r3
 801a766:	183a      	adds	r2, r7, r0
 801a768:	8812      	ldrh	r2, [r2, #0]
 801a76a:	4950      	ldr	r1, [pc, #320]	@ (801a8ac <HAL_PCD_EP_DB_Receive+0x230>)
 801a76c:	430a      	orrs	r2, r1
 801a76e:	b292      	uxth	r2, r2
 801a770:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801a772:	241a      	movs	r4, #26
 801a774:	193b      	adds	r3, r7, r4
 801a776:	881b      	ldrh	r3, [r3, #0]
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d100      	bne.n	801a77e <HAL_PCD_EP_DB_Receive+0x102>
 801a77c:	e086      	b.n	801a88c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801a77e:	68fb      	ldr	r3, [r7, #12]
 801a780:	6818      	ldr	r0, [r3, #0]
 801a782:	68bb      	ldr	r3, [r7, #8]
 801a784:	6959      	ldr	r1, [r3, #20]
 801a786:	68bb      	ldr	r3, [r7, #8]
 801a788:	891a      	ldrh	r2, [r3, #8]
 801a78a:	193b      	adds	r3, r7, r4
 801a78c:	881b      	ldrh	r3, [r3, #0]
 801a78e:	f006 ff4f 	bl	8021630 <USB_ReadPMA>
 801a792:	e07b      	b.n	801a88c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	2250      	movs	r2, #80	@ 0x50
 801a79a:	5a9b      	ldrh	r3, [r3, r2]
 801a79c:	b29b      	uxth	r3, r3
 801a79e:	001a      	movs	r2, r3
 801a7a0:	68bb      	ldr	r3, [r7, #8]
 801a7a2:	781b      	ldrb	r3, [r3, #0]
 801a7a4:	00db      	lsls	r3, r3, #3
 801a7a6:	18d2      	adds	r2, r2, r3
 801a7a8:	68fb      	ldr	r3, [r7, #12]
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	18d3      	adds	r3, r2, r3
 801a7ae:	4a40      	ldr	r2, [pc, #256]	@ (801a8b0 <HAL_PCD_EP_DB_Receive+0x234>)
 801a7b0:	4694      	mov	ip, r2
 801a7b2:	4463      	add	r3, ip
 801a7b4:	881a      	ldrh	r2, [r3, #0]
 801a7b6:	211a      	movs	r1, #26
 801a7b8:	187b      	adds	r3, r7, r1
 801a7ba:	0592      	lsls	r2, r2, #22
 801a7bc:	0d92      	lsrs	r2, r2, #22
 801a7be:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801a7c0:	68bb      	ldr	r3, [r7, #8]
 801a7c2:	699a      	ldr	r2, [r3, #24]
 801a7c4:	187b      	adds	r3, r7, r1
 801a7c6:	881b      	ldrh	r3, [r3, #0]
 801a7c8:	429a      	cmp	r2, r3
 801a7ca:	d307      	bcc.n	801a7dc <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 801a7cc:	68bb      	ldr	r3, [r7, #8]
 801a7ce:	699a      	ldr	r2, [r3, #24]
 801a7d0:	187b      	adds	r3, r7, r1
 801a7d2:	881b      	ldrh	r3, [r3, #0]
 801a7d4:	1ad2      	subs	r2, r2, r3
 801a7d6:	68bb      	ldr	r3, [r7, #8]
 801a7d8:	619a      	str	r2, [r3, #24]
 801a7da:	e002      	b.n	801a7e2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 801a7dc:	68bb      	ldr	r3, [r7, #8]
 801a7de:	2200      	movs	r2, #0
 801a7e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801a7e2:	68bb      	ldr	r3, [r7, #8]
 801a7e4:	699b      	ldr	r3, [r3, #24]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d121      	bne.n	801a82e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801a7ea:	68fb      	ldr	r3, [r7, #12]
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	001a      	movs	r2, r3
 801a7f0:	68bb      	ldr	r3, [r7, #8]
 801a7f2:	781b      	ldrb	r3, [r3, #0]
 801a7f4:	009b      	lsls	r3, r3, #2
 801a7f6:	18d3      	adds	r3, r2, r3
 801a7f8:	881b      	ldrh	r3, [r3, #0]
 801a7fa:	b29a      	uxth	r2, r3
 801a7fc:	201e      	movs	r0, #30
 801a7fe:	183b      	adds	r3, r7, r0
 801a800:	4927      	ldr	r1, [pc, #156]	@ (801a8a0 <HAL_PCD_EP_DB_Receive+0x224>)
 801a802:	400a      	ands	r2, r1
 801a804:	801a      	strh	r2, [r3, #0]
 801a806:	183b      	adds	r3, r7, r0
 801a808:	183a      	adds	r2, r7, r0
 801a80a:	8812      	ldrh	r2, [r2, #0]
 801a80c:	2180      	movs	r1, #128	@ 0x80
 801a80e:	0189      	lsls	r1, r1, #6
 801a810:	404a      	eors	r2, r1
 801a812:	801a      	strh	r2, [r3, #0]
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	001a      	movs	r2, r3
 801a81a:	68bb      	ldr	r3, [r7, #8]
 801a81c:	781b      	ldrb	r3, [r3, #0]
 801a81e:	009b      	lsls	r3, r3, #2
 801a820:	18d3      	adds	r3, r2, r3
 801a822:	183a      	adds	r2, r7, r0
 801a824:	8812      	ldrh	r2, [r2, #0]
 801a826:	491f      	ldr	r1, [pc, #124]	@ (801a8a4 <HAL_PCD_EP_DB_Receive+0x228>)
 801a828:	430a      	orrs	r2, r1
 801a82a:	b292      	uxth	r2, r2
 801a82c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 801a82e:	1dbb      	adds	r3, r7, #6
 801a830:	881b      	ldrh	r3, [r3, #0]
 801a832:	2240      	movs	r2, #64	@ 0x40
 801a834:	4013      	ands	r3, r2
 801a836:	d11a      	bne.n	801a86e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a838:	68fb      	ldr	r3, [r7, #12]
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	001a      	movs	r2, r3
 801a83e:	68bb      	ldr	r3, [r7, #8]
 801a840:	781b      	ldrb	r3, [r3, #0]
 801a842:	009b      	lsls	r3, r3, #2
 801a844:	18d3      	adds	r3, r2, r3
 801a846:	881b      	ldrh	r3, [r3, #0]
 801a848:	b29a      	uxth	r2, r3
 801a84a:	201c      	movs	r0, #28
 801a84c:	183b      	adds	r3, r7, r0
 801a84e:	4916      	ldr	r1, [pc, #88]	@ (801a8a8 <HAL_PCD_EP_DB_Receive+0x22c>)
 801a850:	400a      	ands	r2, r1
 801a852:	801a      	strh	r2, [r3, #0]
 801a854:	68fb      	ldr	r3, [r7, #12]
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	001a      	movs	r2, r3
 801a85a:	68bb      	ldr	r3, [r7, #8]
 801a85c:	781b      	ldrb	r3, [r3, #0]
 801a85e:	009b      	lsls	r3, r3, #2
 801a860:	18d3      	adds	r3, r2, r3
 801a862:	183a      	adds	r2, r7, r0
 801a864:	8812      	ldrh	r2, [r2, #0]
 801a866:	4911      	ldr	r1, [pc, #68]	@ (801a8ac <HAL_PCD_EP_DB_Receive+0x230>)
 801a868:	430a      	orrs	r2, r1
 801a86a:	b292      	uxth	r2, r2
 801a86c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801a86e:	241a      	movs	r4, #26
 801a870:	193b      	adds	r3, r7, r4
 801a872:	881b      	ldrh	r3, [r3, #0]
 801a874:	2b00      	cmp	r3, #0
 801a876:	d009      	beq.n	801a88c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801a878:	68fb      	ldr	r3, [r7, #12]
 801a87a:	6818      	ldr	r0, [r3, #0]
 801a87c:	68bb      	ldr	r3, [r7, #8]
 801a87e:	6959      	ldr	r1, [r3, #20]
 801a880:	68bb      	ldr	r3, [r7, #8]
 801a882:	895a      	ldrh	r2, [r3, #10]
 801a884:	193b      	adds	r3, r7, r4
 801a886:	881b      	ldrh	r3, [r3, #0]
 801a888:	f006 fed2 	bl	8021630 <USB_ReadPMA>
    }
  }

  return count;
 801a88c:	231a      	movs	r3, #26
 801a88e:	18fb      	adds	r3, r7, r3
 801a890:	881b      	ldrh	r3, [r3, #0]
}
 801a892:	0018      	movs	r0, r3
 801a894:	46bd      	mov	sp, r7
 801a896:	b009      	add	sp, #36	@ 0x24
 801a898:	bd90      	pop	{r4, r7, pc}
 801a89a:	46c0      	nop			@ (mov r8, r8)
 801a89c:	00000402 	.word	0x00000402
 801a8a0:	ffffbf8f 	.word	0xffffbf8f
 801a8a4:	ffff8080 	.word	0xffff8080
 801a8a8:	ffff8f8f 	.word	0xffff8f8f
 801a8ac:	ffff80c0 	.word	0xffff80c0
 801a8b0:	00000406 	.word	0x00000406

0801a8b4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801a8b4:	b580      	push	{r7, lr}
 801a8b6:	b0a4      	sub	sp, #144	@ 0x90
 801a8b8:	af00      	add	r7, sp, #0
 801a8ba:	60f8      	str	r0, [r7, #12]
 801a8bc:	60b9      	str	r1, [r7, #8]
 801a8be:	1dbb      	adds	r3, r7, #6
 801a8c0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a8c2:	1dbb      	adds	r3, r7, #6
 801a8c4:	881b      	ldrh	r3, [r3, #0]
 801a8c6:	2240      	movs	r2, #64	@ 0x40
 801a8c8:	4013      	ands	r3, r2
 801a8ca:	d100      	bne.n	801a8ce <HAL_PCD_EP_DB_Transmit+0x1a>
 801a8cc:	e1e4      	b.n	801ac98 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	2250      	movs	r2, #80	@ 0x50
 801a8d4:	5a9b      	ldrh	r3, [r3, r2]
 801a8d6:	b29b      	uxth	r3, r3
 801a8d8:	001a      	movs	r2, r3
 801a8da:	68bb      	ldr	r3, [r7, #8]
 801a8dc:	781b      	ldrb	r3, [r3, #0]
 801a8de:	00db      	lsls	r3, r3, #3
 801a8e0:	18d2      	adds	r2, r2, r3
 801a8e2:	68fb      	ldr	r3, [r7, #12]
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	18d3      	adds	r3, r2, r3
 801a8e8:	4ad0      	ldr	r2, [pc, #832]	@ (801ac2c <HAL_PCD_EP_DB_Transmit+0x378>)
 801a8ea:	4694      	mov	ip, r2
 801a8ec:	4463      	add	r3, ip
 801a8ee:	881a      	ldrh	r2, [r3, #0]
 801a8f0:	2186      	movs	r1, #134	@ 0x86
 801a8f2:	187b      	adds	r3, r7, r1
 801a8f4:	0592      	lsls	r2, r2, #22
 801a8f6:	0d92      	lsrs	r2, r2, #22
 801a8f8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 801a8fa:	68bb      	ldr	r3, [r7, #8]
 801a8fc:	699a      	ldr	r2, [r3, #24]
 801a8fe:	187b      	adds	r3, r7, r1
 801a900:	881b      	ldrh	r3, [r3, #0]
 801a902:	429a      	cmp	r2, r3
 801a904:	d907      	bls.n	801a916 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801a906:	68bb      	ldr	r3, [r7, #8]
 801a908:	699a      	ldr	r2, [r3, #24]
 801a90a:	187b      	adds	r3, r7, r1
 801a90c:	881b      	ldrh	r3, [r3, #0]
 801a90e:	1ad2      	subs	r2, r2, r3
 801a910:	68bb      	ldr	r3, [r7, #8]
 801a912:	619a      	str	r2, [r3, #24]
 801a914:	e002      	b.n	801a91c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801a916:	68bb      	ldr	r3, [r7, #8]
 801a918:	2200      	movs	r2, #0
 801a91a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801a91c:	68bb      	ldr	r3, [r7, #8]
 801a91e:	699b      	ldr	r3, [r3, #24]
 801a920:	2b00      	cmp	r3, #0
 801a922:	d000      	beq.n	801a926 <HAL_PCD_EP_DB_Transmit+0x72>
 801a924:	e0b5      	b.n	801aa92 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a926:	68bb      	ldr	r3, [r7, #8]
 801a928:	785b      	ldrb	r3, [r3, #1]
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	d125      	bne.n	801a97a <HAL_PCD_EP_DB_Transmit+0xc6>
 801a92e:	68fb      	ldr	r3, [r7, #12]
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a934:	68fb      	ldr	r3, [r7, #12]
 801a936:	681b      	ldr	r3, [r3, #0]
 801a938:	2250      	movs	r2, #80	@ 0x50
 801a93a:	5a9b      	ldrh	r3, [r3, r2]
 801a93c:	b29b      	uxth	r3, r3
 801a93e:	001a      	movs	r2, r3
 801a940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a942:	189b      	adds	r3, r3, r2
 801a944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a946:	68bb      	ldr	r3, [r7, #8]
 801a948:	781b      	ldrb	r3, [r3, #0]
 801a94a:	00da      	lsls	r2, r3, #3
 801a94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a94e:	18d3      	adds	r3, r2, r3
 801a950:	4ab6      	ldr	r2, [pc, #728]	@ (801ac2c <HAL_PCD_EP_DB_Transmit+0x378>)
 801a952:	4694      	mov	ip, r2
 801a954:	4463      	add	r3, ip
 801a956:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a95a:	881b      	ldrh	r3, [r3, #0]
 801a95c:	b29b      	uxth	r3, r3
 801a95e:	059b      	lsls	r3, r3, #22
 801a960:	0d9b      	lsrs	r3, r3, #22
 801a962:	b29a      	uxth	r2, r3
 801a964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a966:	801a      	strh	r2, [r3, #0]
 801a968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a96a:	881b      	ldrh	r3, [r3, #0]
 801a96c:	b29b      	uxth	r3, r3
 801a96e:	4ab0      	ldr	r2, [pc, #704]	@ (801ac30 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801a970:	4313      	orrs	r3, r2
 801a972:	b29a      	uxth	r2, r3
 801a974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a976:	801a      	strh	r2, [r3, #0]
 801a978:	e01b      	b.n	801a9b2 <HAL_PCD_EP_DB_Transmit+0xfe>
 801a97a:	68bb      	ldr	r3, [r7, #8]
 801a97c:	785b      	ldrb	r3, [r3, #1]
 801a97e:	2b01      	cmp	r3, #1
 801a980:	d117      	bne.n	801a9b2 <HAL_PCD_EP_DB_Transmit+0xfe>
 801a982:	68fb      	ldr	r3, [r7, #12]
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	637b      	str	r3, [r7, #52]	@ 0x34
 801a988:	68fb      	ldr	r3, [r7, #12]
 801a98a:	681b      	ldr	r3, [r3, #0]
 801a98c:	2250      	movs	r2, #80	@ 0x50
 801a98e:	5a9b      	ldrh	r3, [r3, r2]
 801a990:	b29b      	uxth	r3, r3
 801a992:	001a      	movs	r2, r3
 801a994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a996:	189b      	adds	r3, r3, r2
 801a998:	637b      	str	r3, [r7, #52]	@ 0x34
 801a99a:	68bb      	ldr	r3, [r7, #8]
 801a99c:	781b      	ldrb	r3, [r3, #0]
 801a99e:	00da      	lsls	r2, r3, #3
 801a9a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a9a2:	18d3      	adds	r3, r2, r3
 801a9a4:	4aa1      	ldr	r2, [pc, #644]	@ (801ac2c <HAL_PCD_EP_DB_Transmit+0x378>)
 801a9a6:	4694      	mov	ip, r2
 801a9a8:	4463      	add	r3, ip
 801a9aa:	633b      	str	r3, [r7, #48]	@ 0x30
 801a9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9ae:	2200      	movs	r2, #0
 801a9b0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a9b2:	68fb      	ldr	r3, [r7, #12]
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	627b      	str	r3, [r7, #36]	@ 0x24
 801a9b8:	68bb      	ldr	r3, [r7, #8]
 801a9ba:	785b      	ldrb	r3, [r3, #1]
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d125      	bne.n	801aa0c <HAL_PCD_EP_DB_Transmit+0x158>
 801a9c0:	68fb      	ldr	r3, [r7, #12]
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	61fb      	str	r3, [r7, #28]
 801a9c6:	68fb      	ldr	r3, [r7, #12]
 801a9c8:	681b      	ldr	r3, [r3, #0]
 801a9ca:	2250      	movs	r2, #80	@ 0x50
 801a9cc:	5a9b      	ldrh	r3, [r3, r2]
 801a9ce:	b29b      	uxth	r3, r3
 801a9d0:	001a      	movs	r2, r3
 801a9d2:	69fb      	ldr	r3, [r7, #28]
 801a9d4:	189b      	adds	r3, r3, r2
 801a9d6:	61fb      	str	r3, [r7, #28]
 801a9d8:	68bb      	ldr	r3, [r7, #8]
 801a9da:	781b      	ldrb	r3, [r3, #0]
 801a9dc:	00da      	lsls	r2, r3, #3
 801a9de:	69fb      	ldr	r3, [r7, #28]
 801a9e0:	18d3      	adds	r3, r2, r3
 801a9e2:	4a94      	ldr	r2, [pc, #592]	@ (801ac34 <HAL_PCD_EP_DB_Transmit+0x380>)
 801a9e4:	4694      	mov	ip, r2
 801a9e6:	4463      	add	r3, ip
 801a9e8:	61bb      	str	r3, [r7, #24]
 801a9ea:	69bb      	ldr	r3, [r7, #24]
 801a9ec:	881b      	ldrh	r3, [r3, #0]
 801a9ee:	b29b      	uxth	r3, r3
 801a9f0:	059b      	lsls	r3, r3, #22
 801a9f2:	0d9b      	lsrs	r3, r3, #22
 801a9f4:	b29a      	uxth	r2, r3
 801a9f6:	69bb      	ldr	r3, [r7, #24]
 801a9f8:	801a      	strh	r2, [r3, #0]
 801a9fa:	69bb      	ldr	r3, [r7, #24]
 801a9fc:	881b      	ldrh	r3, [r3, #0]
 801a9fe:	b29b      	uxth	r3, r3
 801aa00:	4a8b      	ldr	r2, [pc, #556]	@ (801ac30 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801aa02:	4313      	orrs	r3, r2
 801aa04:	b29a      	uxth	r2, r3
 801aa06:	69bb      	ldr	r3, [r7, #24]
 801aa08:	801a      	strh	r2, [r3, #0]
 801aa0a:	e018      	b.n	801aa3e <HAL_PCD_EP_DB_Transmit+0x18a>
 801aa0c:	68bb      	ldr	r3, [r7, #8]
 801aa0e:	785b      	ldrb	r3, [r3, #1]
 801aa10:	2b01      	cmp	r3, #1
 801aa12:	d114      	bne.n	801aa3e <HAL_PCD_EP_DB_Transmit+0x18a>
 801aa14:	68fb      	ldr	r3, [r7, #12]
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	2250      	movs	r2, #80	@ 0x50
 801aa1a:	5a9b      	ldrh	r3, [r3, r2]
 801aa1c:	b29b      	uxth	r3, r3
 801aa1e:	001a      	movs	r2, r3
 801aa20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa22:	189b      	adds	r3, r3, r2
 801aa24:	627b      	str	r3, [r7, #36]	@ 0x24
 801aa26:	68bb      	ldr	r3, [r7, #8]
 801aa28:	781b      	ldrb	r3, [r3, #0]
 801aa2a:	00da      	lsls	r2, r3, #3
 801aa2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa2e:	18d3      	adds	r3, r2, r3
 801aa30:	4a80      	ldr	r2, [pc, #512]	@ (801ac34 <HAL_PCD_EP_DB_Transmit+0x380>)
 801aa32:	4694      	mov	ip, r2
 801aa34:	4463      	add	r3, ip
 801aa36:	623b      	str	r3, [r7, #32]
 801aa38:	6a3b      	ldr	r3, [r7, #32]
 801aa3a:	2200      	movs	r2, #0
 801aa3c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801aa3e:	68bb      	ldr	r3, [r7, #8]
 801aa40:	781a      	ldrb	r2, [r3, #0]
 801aa42:	68fb      	ldr	r3, [r7, #12]
 801aa44:	0011      	movs	r1, r2
 801aa46:	0018      	movs	r0, r3
 801aa48:	f008 fe3a 	bl	80236c0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801aa4c:	1dbb      	adds	r3, r7, #6
 801aa4e:	881a      	ldrh	r2, [r3, #0]
 801aa50:	2380      	movs	r3, #128	@ 0x80
 801aa52:	01db      	lsls	r3, r3, #7
 801aa54:	4013      	ands	r3, r2
 801aa56:	d100      	bne.n	801aa5a <HAL_PCD_EP_DB_Transmit+0x1a6>
 801aa58:	e309      	b.n	801b06e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801aa5a:	68fb      	ldr	r3, [r7, #12]
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	001a      	movs	r2, r3
 801aa60:	68bb      	ldr	r3, [r7, #8]
 801aa62:	781b      	ldrb	r3, [r3, #0]
 801aa64:	009b      	lsls	r3, r3, #2
 801aa66:	18d3      	adds	r3, r2, r3
 801aa68:	881b      	ldrh	r3, [r3, #0]
 801aa6a:	b29a      	uxth	r2, r3
 801aa6c:	2016      	movs	r0, #22
 801aa6e:	183b      	adds	r3, r7, r0
 801aa70:	4971      	ldr	r1, [pc, #452]	@ (801ac38 <HAL_PCD_EP_DB_Transmit+0x384>)
 801aa72:	400a      	ands	r2, r1
 801aa74:	801a      	strh	r2, [r3, #0]
 801aa76:	68fb      	ldr	r3, [r7, #12]
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	001a      	movs	r2, r3
 801aa7c:	68bb      	ldr	r3, [r7, #8]
 801aa7e:	781b      	ldrb	r3, [r3, #0]
 801aa80:	009b      	lsls	r3, r3, #2
 801aa82:	18d3      	adds	r3, r2, r3
 801aa84:	183a      	adds	r2, r7, r0
 801aa86:	8812      	ldrh	r2, [r2, #0]
 801aa88:	496c      	ldr	r1, [pc, #432]	@ (801ac3c <HAL_PCD_EP_DB_Transmit+0x388>)
 801aa8a:	430a      	orrs	r2, r1
 801aa8c:	b292      	uxth	r2, r2
 801aa8e:	801a      	strh	r2, [r3, #0]
 801aa90:	e2ed      	b.n	801b06e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801aa92:	1dbb      	adds	r3, r7, #6
 801aa94:	881a      	ldrh	r2, [r3, #0]
 801aa96:	2380      	movs	r3, #128	@ 0x80
 801aa98:	01db      	lsls	r3, r3, #7
 801aa9a:	4013      	ands	r3, r2
 801aa9c:	d01a      	beq.n	801aad4 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801aa9e:	68fb      	ldr	r3, [r7, #12]
 801aaa0:	681b      	ldr	r3, [r3, #0]
 801aaa2:	001a      	movs	r2, r3
 801aaa4:	68bb      	ldr	r3, [r7, #8]
 801aaa6:	781b      	ldrb	r3, [r3, #0]
 801aaa8:	009b      	lsls	r3, r3, #2
 801aaaa:	18d3      	adds	r3, r2, r3
 801aaac:	881b      	ldrh	r3, [r3, #0]
 801aaae:	b29a      	uxth	r2, r3
 801aab0:	208a      	movs	r0, #138	@ 0x8a
 801aab2:	183b      	adds	r3, r7, r0
 801aab4:	4960      	ldr	r1, [pc, #384]	@ (801ac38 <HAL_PCD_EP_DB_Transmit+0x384>)
 801aab6:	400a      	ands	r2, r1
 801aab8:	801a      	strh	r2, [r3, #0]
 801aaba:	68fb      	ldr	r3, [r7, #12]
 801aabc:	681b      	ldr	r3, [r3, #0]
 801aabe:	001a      	movs	r2, r3
 801aac0:	68bb      	ldr	r3, [r7, #8]
 801aac2:	781b      	ldrb	r3, [r3, #0]
 801aac4:	009b      	lsls	r3, r3, #2
 801aac6:	18d3      	adds	r3, r2, r3
 801aac8:	183a      	adds	r2, r7, r0
 801aaca:	8812      	ldrh	r2, [r2, #0]
 801aacc:	495b      	ldr	r1, [pc, #364]	@ (801ac3c <HAL_PCD_EP_DB_Transmit+0x388>)
 801aace:	430a      	orrs	r2, r1
 801aad0:	b292      	uxth	r2, r2
 801aad2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801aad4:	68bb      	ldr	r3, [r7, #8]
 801aad6:	2224      	movs	r2, #36	@ 0x24
 801aad8:	5c9b      	ldrb	r3, [r3, r2]
 801aada:	2b01      	cmp	r3, #1
 801aadc:	d000      	beq.n	801aae0 <HAL_PCD_EP_DB_Transmit+0x22c>
 801aade:	e2c6      	b.n	801b06e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801aae0:	68bb      	ldr	r3, [r7, #8]
 801aae2:	695a      	ldr	r2, [r3, #20]
 801aae4:	2186      	movs	r1, #134	@ 0x86
 801aae6:	187b      	adds	r3, r7, r1
 801aae8:	881b      	ldrh	r3, [r3, #0]
 801aaea:	18d2      	adds	r2, r2, r3
 801aaec:	68bb      	ldr	r3, [r7, #8]
 801aaee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801aaf0:	68bb      	ldr	r3, [r7, #8]
 801aaf2:	69da      	ldr	r2, [r3, #28]
 801aaf4:	187b      	adds	r3, r7, r1
 801aaf6:	881b      	ldrh	r3, [r3, #0]
 801aaf8:	18d2      	adds	r2, r2, r3
 801aafa:	68bb      	ldr	r3, [r7, #8]
 801aafc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801aafe:	68bb      	ldr	r3, [r7, #8]
 801ab00:	6a1a      	ldr	r2, [r3, #32]
 801ab02:	68bb      	ldr	r3, [r7, #8]
 801ab04:	691b      	ldr	r3, [r3, #16]
 801ab06:	429a      	cmp	r2, r3
 801ab08:	d30c      	bcc.n	801ab24 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 801ab0a:	68bb      	ldr	r3, [r7, #8]
 801ab0c:	691b      	ldr	r3, [r3, #16]
 801ab0e:	218c      	movs	r1, #140	@ 0x8c
 801ab10:	187a      	adds	r2, r7, r1
 801ab12:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801ab14:	68bb      	ldr	r3, [r7, #8]
 801ab16:	6a1a      	ldr	r2, [r3, #32]
 801ab18:	187b      	adds	r3, r7, r1
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	1ad2      	subs	r2, r2, r3
 801ab1e:	68bb      	ldr	r3, [r7, #8]
 801ab20:	621a      	str	r2, [r3, #32]
 801ab22:	e01a      	b.n	801ab5a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 801ab24:	68bb      	ldr	r3, [r7, #8]
 801ab26:	6a1b      	ldr	r3, [r3, #32]
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d10a      	bne.n	801ab42 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 801ab2c:	2386      	movs	r3, #134	@ 0x86
 801ab2e:	18fb      	adds	r3, r7, r3
 801ab30:	881b      	ldrh	r3, [r3, #0]
 801ab32:	228c      	movs	r2, #140	@ 0x8c
 801ab34:	18ba      	adds	r2, r7, r2
 801ab36:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801ab38:	68bb      	ldr	r3, [r7, #8]
 801ab3a:	2224      	movs	r2, #36	@ 0x24
 801ab3c:	2100      	movs	r1, #0
 801ab3e:	5499      	strb	r1, [r3, r2]
 801ab40:	e00b      	b.n	801ab5a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 801ab42:	68bb      	ldr	r3, [r7, #8]
 801ab44:	2224      	movs	r2, #36	@ 0x24
 801ab46:	2100      	movs	r1, #0
 801ab48:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801ab4a:	68bb      	ldr	r3, [r7, #8]
 801ab4c:	6a1b      	ldr	r3, [r3, #32]
 801ab4e:	228c      	movs	r2, #140	@ 0x8c
 801ab50:	18ba      	adds	r2, r7, r2
 801ab52:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801ab54:	68bb      	ldr	r3, [r7, #8]
 801ab56:	2200      	movs	r2, #0
 801ab58:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801ab5a:	68bb      	ldr	r3, [r7, #8]
 801ab5c:	785b      	ldrb	r3, [r3, #1]
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	d000      	beq.n	801ab64 <HAL_PCD_EP_DB_Transmit+0x2b0>
 801ab62:	e06d      	b.n	801ac40 <HAL_PCD_EP_DB_Transmit+0x38c>
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	681b      	ldr	r3, [r3, #0]
 801ab68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ab6a:	68fb      	ldr	r3, [r7, #12]
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	2250      	movs	r2, #80	@ 0x50
 801ab70:	5a9b      	ldrh	r3, [r3, r2]
 801ab72:	b29b      	uxth	r3, r3
 801ab74:	001a      	movs	r2, r3
 801ab76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ab78:	189b      	adds	r3, r3, r2
 801ab7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ab7c:	68bb      	ldr	r3, [r7, #8]
 801ab7e:	781b      	ldrb	r3, [r3, #0]
 801ab80:	00da      	lsls	r2, r3, #3
 801ab82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ab84:	18d3      	adds	r3, r2, r3
 801ab86:	4a29      	ldr	r2, [pc, #164]	@ (801ac2c <HAL_PCD_EP_DB_Transmit+0x378>)
 801ab88:	4694      	mov	ip, r2
 801ab8a:	4463      	add	r3, ip
 801ab8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ab8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab90:	881b      	ldrh	r3, [r3, #0]
 801ab92:	b29b      	uxth	r3, r3
 801ab94:	059b      	lsls	r3, r3, #22
 801ab96:	0d9b      	lsrs	r3, r3, #22
 801ab98:	b29a      	uxth	r2, r3
 801ab9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab9c:	801a      	strh	r2, [r3, #0]
 801ab9e:	228c      	movs	r2, #140	@ 0x8c
 801aba0:	18bb      	adds	r3, r7, r2
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	2b3e      	cmp	r3, #62	@ 0x3e
 801aba6:	d91a      	bls.n	801abde <HAL_PCD_EP_DB_Transmit+0x32a>
 801aba8:	18bb      	adds	r3, r7, r2
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	095b      	lsrs	r3, r3, #5
 801abae:	64bb      	str	r3, [r7, #72]	@ 0x48
 801abb0:	18bb      	adds	r3, r7, r2
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	221f      	movs	r2, #31
 801abb6:	4013      	ands	r3, r2
 801abb8:	d102      	bne.n	801abc0 <HAL_PCD_EP_DB_Transmit+0x30c>
 801abba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801abbc:	3b01      	subs	r3, #1
 801abbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 801abc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abc2:	881b      	ldrh	r3, [r3, #0]
 801abc4:	b29a      	uxth	r2, r3
 801abc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801abc8:	b29b      	uxth	r3, r3
 801abca:	029b      	lsls	r3, r3, #10
 801abcc:	b29b      	uxth	r3, r3
 801abce:	4313      	orrs	r3, r2
 801abd0:	b29b      	uxth	r3, r3
 801abd2:	4a17      	ldr	r2, [pc, #92]	@ (801ac30 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801abd4:	4313      	orrs	r3, r2
 801abd6:	b29a      	uxth	r2, r3
 801abd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abda:	801a      	strh	r2, [r3, #0]
 801abdc:	e04f      	b.n	801ac7e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801abde:	238c      	movs	r3, #140	@ 0x8c
 801abe0:	18fb      	adds	r3, r7, r3
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	d108      	bne.n	801abfa <HAL_PCD_EP_DB_Transmit+0x346>
 801abe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abea:	881b      	ldrh	r3, [r3, #0]
 801abec:	b29b      	uxth	r3, r3
 801abee:	4a10      	ldr	r2, [pc, #64]	@ (801ac30 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801abf0:	4313      	orrs	r3, r2
 801abf2:	b29a      	uxth	r2, r3
 801abf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abf6:	801a      	strh	r2, [r3, #0]
 801abf8:	e041      	b.n	801ac7e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801abfa:	228c      	movs	r2, #140	@ 0x8c
 801abfc:	18bb      	adds	r3, r7, r2
 801abfe:	681b      	ldr	r3, [r3, #0]
 801ac00:	085b      	lsrs	r3, r3, #1
 801ac02:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ac04:	18bb      	adds	r3, r7, r2
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	2201      	movs	r2, #1
 801ac0a:	4013      	ands	r3, r2
 801ac0c:	d002      	beq.n	801ac14 <HAL_PCD_EP_DB_Transmit+0x360>
 801ac0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ac10:	3301      	adds	r3, #1
 801ac12:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ac14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ac16:	881b      	ldrh	r3, [r3, #0]
 801ac18:	b29a      	uxth	r2, r3
 801ac1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ac1c:	b29b      	uxth	r3, r3
 801ac1e:	029b      	lsls	r3, r3, #10
 801ac20:	b29b      	uxth	r3, r3
 801ac22:	4313      	orrs	r3, r2
 801ac24:	b29a      	uxth	r2, r3
 801ac26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ac28:	801a      	strh	r2, [r3, #0]
 801ac2a:	e028      	b.n	801ac7e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ac2c:	00000402 	.word	0x00000402
 801ac30:	ffff8000 	.word	0xffff8000
 801ac34:	00000406 	.word	0x00000406
 801ac38:	ffff8f8f 	.word	0xffff8f8f
 801ac3c:	ffffc080 	.word	0xffffc080
 801ac40:	68bb      	ldr	r3, [r7, #8]
 801ac42:	785b      	ldrb	r3, [r3, #1]
 801ac44:	2b01      	cmp	r3, #1
 801ac46:	d11a      	bne.n	801ac7e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ac48:	68fb      	ldr	r3, [r7, #12]
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	647b      	str	r3, [r7, #68]	@ 0x44
 801ac4e:	68fb      	ldr	r3, [r7, #12]
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	2250      	movs	r2, #80	@ 0x50
 801ac54:	5a9b      	ldrh	r3, [r3, r2]
 801ac56:	b29b      	uxth	r3, r3
 801ac58:	001a      	movs	r2, r3
 801ac5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ac5c:	189b      	adds	r3, r3, r2
 801ac5e:	647b      	str	r3, [r7, #68]	@ 0x44
 801ac60:	68bb      	ldr	r3, [r7, #8]
 801ac62:	781b      	ldrb	r3, [r3, #0]
 801ac64:	00da      	lsls	r2, r3, #3
 801ac66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ac68:	18d3      	adds	r3, r2, r3
 801ac6a:	4adb      	ldr	r2, [pc, #876]	@ (801afd8 <HAL_PCD_EP_DB_Transmit+0x724>)
 801ac6c:	4694      	mov	ip, r2
 801ac6e:	4463      	add	r3, ip
 801ac70:	643b      	str	r3, [r7, #64]	@ 0x40
 801ac72:	238c      	movs	r3, #140	@ 0x8c
 801ac74:	18fb      	adds	r3, r7, r3
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	b29a      	uxth	r2, r3
 801ac7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ac7c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801ac7e:	68fb      	ldr	r3, [r7, #12]
 801ac80:	6818      	ldr	r0, [r3, #0]
 801ac82:	68bb      	ldr	r3, [r7, #8]
 801ac84:	6959      	ldr	r1, [r3, #20]
 801ac86:	68bb      	ldr	r3, [r7, #8]
 801ac88:	891a      	ldrh	r2, [r3, #8]
 801ac8a:	238c      	movs	r3, #140	@ 0x8c
 801ac8c:	18fb      	adds	r3, r7, r3
 801ac8e:	681b      	ldr	r3, [r3, #0]
 801ac90:	b29b      	uxth	r3, r3
 801ac92:	f006 fc83 	bl	802159c <USB_WritePMA>
 801ac96:	e1ea      	b.n	801b06e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801ac98:	68fb      	ldr	r3, [r7, #12]
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	2250      	movs	r2, #80	@ 0x50
 801ac9e:	5a9b      	ldrh	r3, [r3, r2]
 801aca0:	b29b      	uxth	r3, r3
 801aca2:	001a      	movs	r2, r3
 801aca4:	68bb      	ldr	r3, [r7, #8]
 801aca6:	781b      	ldrb	r3, [r3, #0]
 801aca8:	00db      	lsls	r3, r3, #3
 801acaa:	18d2      	adds	r2, r2, r3
 801acac:	68fb      	ldr	r3, [r7, #12]
 801acae:	681b      	ldr	r3, [r3, #0]
 801acb0:	18d3      	adds	r3, r2, r3
 801acb2:	4aca      	ldr	r2, [pc, #808]	@ (801afdc <HAL_PCD_EP_DB_Transmit+0x728>)
 801acb4:	4694      	mov	ip, r2
 801acb6:	4463      	add	r3, ip
 801acb8:	881a      	ldrh	r2, [r3, #0]
 801acba:	2186      	movs	r1, #134	@ 0x86
 801acbc:	187b      	adds	r3, r7, r1
 801acbe:	0592      	lsls	r2, r2, #22
 801acc0:	0d92      	lsrs	r2, r2, #22
 801acc2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 801acc4:	68bb      	ldr	r3, [r7, #8]
 801acc6:	699a      	ldr	r2, [r3, #24]
 801acc8:	187b      	adds	r3, r7, r1
 801acca:	881b      	ldrh	r3, [r3, #0]
 801accc:	429a      	cmp	r2, r3
 801acce:	d307      	bcc.n	801ace0 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 801acd0:	68bb      	ldr	r3, [r7, #8]
 801acd2:	699a      	ldr	r2, [r3, #24]
 801acd4:	187b      	adds	r3, r7, r1
 801acd6:	881b      	ldrh	r3, [r3, #0]
 801acd8:	1ad2      	subs	r2, r2, r3
 801acda:	68bb      	ldr	r3, [r7, #8]
 801acdc:	619a      	str	r2, [r3, #24]
 801acde:	e002      	b.n	801ace6 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 801ace0:	68bb      	ldr	r3, [r7, #8]
 801ace2:	2200      	movs	r2, #0
 801ace4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801ace6:	68bb      	ldr	r3, [r7, #8]
 801ace8:	699b      	ldr	r3, [r3, #24]
 801acea:	2b00      	cmp	r3, #0
 801acec:	d000      	beq.n	801acf0 <HAL_PCD_EP_DB_Transmit+0x43c>
 801acee:	e0bb      	b.n	801ae68 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801acf0:	68bb      	ldr	r3, [r7, #8]
 801acf2:	785b      	ldrb	r3, [r3, #1]
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d125      	bne.n	801ad44 <HAL_PCD_EP_DB_Transmit+0x490>
 801acf8:	68fb      	ldr	r3, [r7, #12]
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801acfe:	68fb      	ldr	r3, [r7, #12]
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	2250      	movs	r2, #80	@ 0x50
 801ad04:	5a9b      	ldrh	r3, [r3, r2]
 801ad06:	b29b      	uxth	r3, r3
 801ad08:	001a      	movs	r2, r3
 801ad0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ad0c:	189b      	adds	r3, r3, r2
 801ad0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ad10:	68bb      	ldr	r3, [r7, #8]
 801ad12:	781b      	ldrb	r3, [r3, #0]
 801ad14:	00da      	lsls	r2, r3, #3
 801ad16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ad18:	18d3      	adds	r3, r2, r3
 801ad1a:	4aaf      	ldr	r2, [pc, #700]	@ (801afd8 <HAL_PCD_EP_DB_Transmit+0x724>)
 801ad1c:	4694      	mov	ip, r2
 801ad1e:	4463      	add	r3, ip
 801ad20:	67bb      	str	r3, [r7, #120]	@ 0x78
 801ad22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ad24:	881b      	ldrh	r3, [r3, #0]
 801ad26:	b29b      	uxth	r3, r3
 801ad28:	059b      	lsls	r3, r3, #22
 801ad2a:	0d9b      	lsrs	r3, r3, #22
 801ad2c:	b29a      	uxth	r2, r3
 801ad2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ad30:	801a      	strh	r2, [r3, #0]
 801ad32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ad34:	881b      	ldrh	r3, [r3, #0]
 801ad36:	b29b      	uxth	r3, r3
 801ad38:	4aa9      	ldr	r2, [pc, #676]	@ (801afe0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801ad3a:	4313      	orrs	r3, r2
 801ad3c:	b29a      	uxth	r2, r3
 801ad3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ad40:	801a      	strh	r2, [r3, #0]
 801ad42:	e01b      	b.n	801ad7c <HAL_PCD_EP_DB_Transmit+0x4c8>
 801ad44:	68bb      	ldr	r3, [r7, #8]
 801ad46:	785b      	ldrb	r3, [r3, #1]
 801ad48:	2b01      	cmp	r3, #1
 801ad4a:	d117      	bne.n	801ad7c <HAL_PCD_EP_DB_Transmit+0x4c8>
 801ad4c:	68fb      	ldr	r3, [r7, #12]
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	667b      	str	r3, [r7, #100]	@ 0x64
 801ad52:	68fb      	ldr	r3, [r7, #12]
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	2250      	movs	r2, #80	@ 0x50
 801ad58:	5a9b      	ldrh	r3, [r3, r2]
 801ad5a:	b29b      	uxth	r3, r3
 801ad5c:	001a      	movs	r2, r3
 801ad5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ad60:	189b      	adds	r3, r3, r2
 801ad62:	667b      	str	r3, [r7, #100]	@ 0x64
 801ad64:	68bb      	ldr	r3, [r7, #8]
 801ad66:	781b      	ldrb	r3, [r3, #0]
 801ad68:	00da      	lsls	r2, r3, #3
 801ad6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ad6c:	18d3      	adds	r3, r2, r3
 801ad6e:	4a9a      	ldr	r2, [pc, #616]	@ (801afd8 <HAL_PCD_EP_DB_Transmit+0x724>)
 801ad70:	4694      	mov	ip, r2
 801ad72:	4463      	add	r3, ip
 801ad74:	663b      	str	r3, [r7, #96]	@ 0x60
 801ad76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ad78:	2200      	movs	r2, #0
 801ad7a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801ad7c:	68fb      	ldr	r3, [r7, #12]
 801ad7e:	681b      	ldr	r3, [r3, #0]
 801ad80:	677b      	str	r3, [r7, #116]	@ 0x74
 801ad82:	68bb      	ldr	r3, [r7, #8]
 801ad84:	785b      	ldrb	r3, [r3, #1]
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	d12b      	bne.n	801ade2 <HAL_PCD_EP_DB_Transmit+0x52e>
 801ad8a:	68fb      	ldr	r3, [r7, #12]
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ad90:	68fb      	ldr	r3, [r7, #12]
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	2250      	movs	r2, #80	@ 0x50
 801ad96:	5a9b      	ldrh	r3, [r3, r2]
 801ad98:	b29b      	uxth	r3, r3
 801ad9a:	001a      	movs	r2, r3
 801ad9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ad9e:	189b      	adds	r3, r3, r2
 801ada0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ada2:	68bb      	ldr	r3, [r7, #8]
 801ada4:	781b      	ldrb	r3, [r3, #0]
 801ada6:	00da      	lsls	r2, r3, #3
 801ada8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801adaa:	18d3      	adds	r3, r2, r3
 801adac:	4a8b      	ldr	r2, [pc, #556]	@ (801afdc <HAL_PCD_EP_DB_Transmit+0x728>)
 801adae:	4694      	mov	ip, r2
 801adb0:	4463      	add	r3, ip
 801adb2:	2180      	movs	r1, #128	@ 0x80
 801adb4:	187a      	adds	r2, r7, r1
 801adb6:	6013      	str	r3, [r2, #0]
 801adb8:	187b      	adds	r3, r7, r1
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	881b      	ldrh	r3, [r3, #0]
 801adbe:	b29b      	uxth	r3, r3
 801adc0:	059b      	lsls	r3, r3, #22
 801adc2:	0d9b      	lsrs	r3, r3, #22
 801adc4:	b29a      	uxth	r2, r3
 801adc6:	187b      	adds	r3, r7, r1
 801adc8:	681b      	ldr	r3, [r3, #0]
 801adca:	801a      	strh	r2, [r3, #0]
 801adcc:	187b      	adds	r3, r7, r1
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	881b      	ldrh	r3, [r3, #0]
 801add2:	b29b      	uxth	r3, r3
 801add4:	4a82      	ldr	r2, [pc, #520]	@ (801afe0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801add6:	4313      	orrs	r3, r2
 801add8:	b29a      	uxth	r2, r3
 801adda:	187b      	adds	r3, r7, r1
 801addc:	681b      	ldr	r3, [r3, #0]
 801adde:	801a      	strh	r2, [r3, #0]
 801ade0:	e018      	b.n	801ae14 <HAL_PCD_EP_DB_Transmit+0x560>
 801ade2:	68bb      	ldr	r3, [r7, #8]
 801ade4:	785b      	ldrb	r3, [r3, #1]
 801ade6:	2b01      	cmp	r3, #1
 801ade8:	d114      	bne.n	801ae14 <HAL_PCD_EP_DB_Transmit+0x560>
 801adea:	68fb      	ldr	r3, [r7, #12]
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	2250      	movs	r2, #80	@ 0x50
 801adf0:	5a9b      	ldrh	r3, [r3, r2]
 801adf2:	b29b      	uxth	r3, r3
 801adf4:	001a      	movs	r2, r3
 801adf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801adf8:	189b      	adds	r3, r3, r2
 801adfa:	677b      	str	r3, [r7, #116]	@ 0x74
 801adfc:	68bb      	ldr	r3, [r7, #8]
 801adfe:	781b      	ldrb	r3, [r3, #0]
 801ae00:	00da      	lsls	r2, r3, #3
 801ae02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ae04:	18d3      	adds	r3, r2, r3
 801ae06:	4a75      	ldr	r2, [pc, #468]	@ (801afdc <HAL_PCD_EP_DB_Transmit+0x728>)
 801ae08:	4694      	mov	ip, r2
 801ae0a:	4463      	add	r3, ip
 801ae0c:	673b      	str	r3, [r7, #112]	@ 0x70
 801ae0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ae10:	2200      	movs	r2, #0
 801ae12:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801ae14:	68bb      	ldr	r3, [r7, #8]
 801ae16:	781a      	ldrb	r2, [r3, #0]
 801ae18:	68fb      	ldr	r3, [r7, #12]
 801ae1a:	0011      	movs	r1, r2
 801ae1c:	0018      	movs	r0, r3
 801ae1e:	f008 fc4f 	bl	80236c0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801ae22:	1dbb      	adds	r3, r7, #6
 801ae24:	881a      	ldrh	r2, [r3, #0]
 801ae26:	2380      	movs	r3, #128	@ 0x80
 801ae28:	01db      	lsls	r3, r3, #7
 801ae2a:	4013      	ands	r3, r2
 801ae2c:	d000      	beq.n	801ae30 <HAL_PCD_EP_DB_Transmit+0x57c>
 801ae2e:	e11e      	b.n	801b06e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801ae30:	68fb      	ldr	r3, [r7, #12]
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	001a      	movs	r2, r3
 801ae36:	68bb      	ldr	r3, [r7, #8]
 801ae38:	781b      	ldrb	r3, [r3, #0]
 801ae3a:	009b      	lsls	r3, r3, #2
 801ae3c:	18d3      	adds	r3, r2, r3
 801ae3e:	881b      	ldrh	r3, [r3, #0]
 801ae40:	b29a      	uxth	r2, r3
 801ae42:	2088      	movs	r0, #136	@ 0x88
 801ae44:	183b      	adds	r3, r7, r0
 801ae46:	4967      	ldr	r1, [pc, #412]	@ (801afe4 <HAL_PCD_EP_DB_Transmit+0x730>)
 801ae48:	400a      	ands	r2, r1
 801ae4a:	801a      	strh	r2, [r3, #0]
 801ae4c:	68fb      	ldr	r3, [r7, #12]
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	001a      	movs	r2, r3
 801ae52:	68bb      	ldr	r3, [r7, #8]
 801ae54:	781b      	ldrb	r3, [r3, #0]
 801ae56:	009b      	lsls	r3, r3, #2
 801ae58:	18d3      	adds	r3, r2, r3
 801ae5a:	183a      	adds	r2, r7, r0
 801ae5c:	8812      	ldrh	r2, [r2, #0]
 801ae5e:	4962      	ldr	r1, [pc, #392]	@ (801afe8 <HAL_PCD_EP_DB_Transmit+0x734>)
 801ae60:	430a      	orrs	r2, r1
 801ae62:	b292      	uxth	r2, r2
 801ae64:	801a      	strh	r2, [r3, #0]
 801ae66:	e102      	b.n	801b06e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801ae68:	1dbb      	adds	r3, r7, #6
 801ae6a:	881a      	ldrh	r2, [r3, #0]
 801ae6c:	2380      	movs	r3, #128	@ 0x80
 801ae6e:	01db      	lsls	r3, r3, #7
 801ae70:	4013      	ands	r3, r2
 801ae72:	d11a      	bne.n	801aeaa <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801ae74:	68fb      	ldr	r3, [r7, #12]
 801ae76:	681b      	ldr	r3, [r3, #0]
 801ae78:	001a      	movs	r2, r3
 801ae7a:	68bb      	ldr	r3, [r7, #8]
 801ae7c:	781b      	ldrb	r3, [r3, #0]
 801ae7e:	009b      	lsls	r3, r3, #2
 801ae80:	18d3      	adds	r3, r2, r3
 801ae82:	881b      	ldrh	r3, [r3, #0]
 801ae84:	b29a      	uxth	r2, r3
 801ae86:	204e      	movs	r0, #78	@ 0x4e
 801ae88:	183b      	adds	r3, r7, r0
 801ae8a:	4956      	ldr	r1, [pc, #344]	@ (801afe4 <HAL_PCD_EP_DB_Transmit+0x730>)
 801ae8c:	400a      	ands	r2, r1
 801ae8e:	801a      	strh	r2, [r3, #0]
 801ae90:	68fb      	ldr	r3, [r7, #12]
 801ae92:	681b      	ldr	r3, [r3, #0]
 801ae94:	001a      	movs	r2, r3
 801ae96:	68bb      	ldr	r3, [r7, #8]
 801ae98:	781b      	ldrb	r3, [r3, #0]
 801ae9a:	009b      	lsls	r3, r3, #2
 801ae9c:	18d3      	adds	r3, r2, r3
 801ae9e:	183a      	adds	r2, r7, r0
 801aea0:	8812      	ldrh	r2, [r2, #0]
 801aea2:	4951      	ldr	r1, [pc, #324]	@ (801afe8 <HAL_PCD_EP_DB_Transmit+0x734>)
 801aea4:	430a      	orrs	r2, r1
 801aea6:	b292      	uxth	r2, r2
 801aea8:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801aeaa:	68bb      	ldr	r3, [r7, #8]
 801aeac:	2224      	movs	r2, #36	@ 0x24
 801aeae:	5c9b      	ldrb	r3, [r3, r2]
 801aeb0:	2b01      	cmp	r3, #1
 801aeb2:	d000      	beq.n	801aeb6 <HAL_PCD_EP_DB_Transmit+0x602>
 801aeb4:	e0db      	b.n	801b06e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801aeb6:	68bb      	ldr	r3, [r7, #8]
 801aeb8:	695a      	ldr	r2, [r3, #20]
 801aeba:	2186      	movs	r1, #134	@ 0x86
 801aebc:	187b      	adds	r3, r7, r1
 801aebe:	881b      	ldrh	r3, [r3, #0]
 801aec0:	18d2      	adds	r2, r2, r3
 801aec2:	68bb      	ldr	r3, [r7, #8]
 801aec4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801aec6:	68bb      	ldr	r3, [r7, #8]
 801aec8:	69da      	ldr	r2, [r3, #28]
 801aeca:	187b      	adds	r3, r7, r1
 801aecc:	881b      	ldrh	r3, [r3, #0]
 801aece:	18d2      	adds	r2, r2, r3
 801aed0:	68bb      	ldr	r3, [r7, #8]
 801aed2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801aed4:	68bb      	ldr	r3, [r7, #8]
 801aed6:	6a1a      	ldr	r2, [r3, #32]
 801aed8:	68bb      	ldr	r3, [r7, #8]
 801aeda:	691b      	ldr	r3, [r3, #16]
 801aedc:	429a      	cmp	r2, r3
 801aede:	d30c      	bcc.n	801aefa <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 801aee0:	68bb      	ldr	r3, [r7, #8]
 801aee2:	691b      	ldr	r3, [r3, #16]
 801aee4:	218c      	movs	r1, #140	@ 0x8c
 801aee6:	187a      	adds	r2, r7, r1
 801aee8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801aeea:	68bb      	ldr	r3, [r7, #8]
 801aeec:	6a1a      	ldr	r2, [r3, #32]
 801aeee:	187b      	adds	r3, r7, r1
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	1ad2      	subs	r2, r2, r3
 801aef4:	68bb      	ldr	r3, [r7, #8]
 801aef6:	621a      	str	r2, [r3, #32]
 801aef8:	e01a      	b.n	801af30 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801aefa:	68bb      	ldr	r3, [r7, #8]
 801aefc:	6a1b      	ldr	r3, [r3, #32]
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d10a      	bne.n	801af18 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801af02:	2386      	movs	r3, #134	@ 0x86
 801af04:	18fb      	adds	r3, r7, r3
 801af06:	881b      	ldrh	r3, [r3, #0]
 801af08:	228c      	movs	r2, #140	@ 0x8c
 801af0a:	18ba      	adds	r2, r7, r2
 801af0c:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801af0e:	68bb      	ldr	r3, [r7, #8]
 801af10:	2224      	movs	r2, #36	@ 0x24
 801af12:	2100      	movs	r1, #0
 801af14:	5499      	strb	r1, [r3, r2]
 801af16:	e00b      	b.n	801af30 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 801af18:	68bb      	ldr	r3, [r7, #8]
 801af1a:	6a1b      	ldr	r3, [r3, #32]
 801af1c:	228c      	movs	r2, #140	@ 0x8c
 801af1e:	18ba      	adds	r2, r7, r2
 801af20:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801af22:	68bb      	ldr	r3, [r7, #8]
 801af24:	2200      	movs	r2, #0
 801af26:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 801af28:	68bb      	ldr	r3, [r7, #8]
 801af2a:	2224      	movs	r2, #36	@ 0x24
 801af2c:	2100      	movs	r1, #0
 801af2e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801af30:	68fb      	ldr	r3, [r7, #12]
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	657b      	str	r3, [r7, #84]	@ 0x54
 801af36:	68bb      	ldr	r3, [r7, #8]
 801af38:	785b      	ldrb	r3, [r3, #1]
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d000      	beq.n	801af40 <HAL_PCD_EP_DB_Transmit+0x68c>
 801af3e:	e06e      	b.n	801b01e <HAL_PCD_EP_DB_Transmit+0x76a>
 801af40:	68fb      	ldr	r3, [r7, #12]
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801af46:	68fb      	ldr	r3, [r7, #12]
 801af48:	681b      	ldr	r3, [r3, #0]
 801af4a:	2250      	movs	r2, #80	@ 0x50
 801af4c:	5a9b      	ldrh	r3, [r3, r2]
 801af4e:	b29b      	uxth	r3, r3
 801af50:	001a      	movs	r2, r3
 801af52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801af54:	189b      	adds	r3, r3, r2
 801af56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801af58:	68bb      	ldr	r3, [r7, #8]
 801af5a:	781b      	ldrb	r3, [r3, #0]
 801af5c:	00da      	lsls	r2, r3, #3
 801af5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801af60:	18d3      	adds	r3, r2, r3
 801af62:	4a1e      	ldr	r2, [pc, #120]	@ (801afdc <HAL_PCD_EP_DB_Transmit+0x728>)
 801af64:	4694      	mov	ip, r2
 801af66:	4463      	add	r3, ip
 801af68:	65bb      	str	r3, [r7, #88]	@ 0x58
 801af6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af6c:	881b      	ldrh	r3, [r3, #0]
 801af6e:	b29b      	uxth	r3, r3
 801af70:	059b      	lsls	r3, r3, #22
 801af72:	0d9b      	lsrs	r3, r3, #22
 801af74:	b29a      	uxth	r2, r3
 801af76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af78:	801a      	strh	r2, [r3, #0]
 801af7a:	228c      	movs	r2, #140	@ 0x8c
 801af7c:	18bb      	adds	r3, r7, r2
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	2b3e      	cmp	r3, #62	@ 0x3e
 801af82:	d91a      	bls.n	801afba <HAL_PCD_EP_DB_Transmit+0x706>
 801af84:	18bb      	adds	r3, r7, r2
 801af86:	681b      	ldr	r3, [r3, #0]
 801af88:	095b      	lsrs	r3, r3, #5
 801af8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801af8c:	18bb      	adds	r3, r7, r2
 801af8e:	681b      	ldr	r3, [r3, #0]
 801af90:	221f      	movs	r2, #31
 801af92:	4013      	ands	r3, r2
 801af94:	d102      	bne.n	801af9c <HAL_PCD_EP_DB_Transmit+0x6e8>
 801af96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801af98:	3b01      	subs	r3, #1
 801af9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801af9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af9e:	881b      	ldrh	r3, [r3, #0]
 801afa0:	b29a      	uxth	r2, r3
 801afa2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801afa4:	b29b      	uxth	r3, r3
 801afa6:	029b      	lsls	r3, r3, #10
 801afa8:	b29b      	uxth	r3, r3
 801afaa:	4313      	orrs	r3, r2
 801afac:	b29b      	uxth	r3, r3
 801afae:	4a0c      	ldr	r2, [pc, #48]	@ (801afe0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801afb0:	4313      	orrs	r3, r2
 801afb2:	b29a      	uxth	r2, r3
 801afb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801afb6:	801a      	strh	r2, [r3, #0]
 801afb8:	e04d      	b.n	801b056 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801afba:	238c      	movs	r3, #140	@ 0x8c
 801afbc:	18fb      	adds	r3, r7, r3
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d113      	bne.n	801afec <HAL_PCD_EP_DB_Transmit+0x738>
 801afc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801afc6:	881b      	ldrh	r3, [r3, #0]
 801afc8:	b29b      	uxth	r3, r3
 801afca:	4a05      	ldr	r2, [pc, #20]	@ (801afe0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801afcc:	4313      	orrs	r3, r2
 801afce:	b29a      	uxth	r2, r3
 801afd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801afd2:	801a      	strh	r2, [r3, #0]
 801afd4:	e03f      	b.n	801b056 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801afd6:	46c0      	nop			@ (mov r8, r8)
 801afd8:	00000402 	.word	0x00000402
 801afdc:	00000406 	.word	0x00000406
 801afe0:	ffff8000 	.word	0xffff8000
 801afe4:	ffff8f8f 	.word	0xffff8f8f
 801afe8:	ffffc080 	.word	0xffffc080
 801afec:	228c      	movs	r2, #140	@ 0x8c
 801afee:	18bb      	adds	r3, r7, r2
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	085b      	lsrs	r3, r3, #1
 801aff4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801aff6:	18bb      	adds	r3, r7, r2
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	2201      	movs	r2, #1
 801affc:	4013      	ands	r3, r2
 801affe:	d002      	beq.n	801b006 <HAL_PCD_EP_DB_Transmit+0x752>
 801b000:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b002:	3301      	adds	r3, #1
 801b004:	66bb      	str	r3, [r7, #104]	@ 0x68
 801b006:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b008:	881b      	ldrh	r3, [r3, #0]
 801b00a:	b29a      	uxth	r2, r3
 801b00c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b00e:	b29b      	uxth	r3, r3
 801b010:	029b      	lsls	r3, r3, #10
 801b012:	b29b      	uxth	r3, r3
 801b014:	4313      	orrs	r3, r2
 801b016:	b29a      	uxth	r2, r3
 801b018:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b01a:	801a      	strh	r2, [r3, #0]
 801b01c:	e01b      	b.n	801b056 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801b01e:	68bb      	ldr	r3, [r7, #8]
 801b020:	785b      	ldrb	r3, [r3, #1]
 801b022:	2b01      	cmp	r3, #1
 801b024:	d117      	bne.n	801b056 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801b026:	68fb      	ldr	r3, [r7, #12]
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	2250      	movs	r2, #80	@ 0x50
 801b02c:	5a9b      	ldrh	r3, [r3, r2]
 801b02e:	b29b      	uxth	r3, r3
 801b030:	001a      	movs	r2, r3
 801b032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b034:	189b      	adds	r3, r3, r2
 801b036:	657b      	str	r3, [r7, #84]	@ 0x54
 801b038:	68bb      	ldr	r3, [r7, #8]
 801b03a:	781b      	ldrb	r3, [r3, #0]
 801b03c:	00da      	lsls	r2, r3, #3
 801b03e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b040:	18d3      	adds	r3, r2, r3
 801b042:	4a21      	ldr	r2, [pc, #132]	@ (801b0c8 <HAL_PCD_EP_DB_Transmit+0x814>)
 801b044:	4694      	mov	ip, r2
 801b046:	4463      	add	r3, ip
 801b048:	653b      	str	r3, [r7, #80]	@ 0x50
 801b04a:	238c      	movs	r3, #140	@ 0x8c
 801b04c:	18fb      	adds	r3, r7, r3
 801b04e:	681b      	ldr	r3, [r3, #0]
 801b050:	b29a      	uxth	r2, r3
 801b052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b054:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801b056:	68fb      	ldr	r3, [r7, #12]
 801b058:	6818      	ldr	r0, [r3, #0]
 801b05a:	68bb      	ldr	r3, [r7, #8]
 801b05c:	6959      	ldr	r1, [r3, #20]
 801b05e:	68bb      	ldr	r3, [r7, #8]
 801b060:	895a      	ldrh	r2, [r3, #10]
 801b062:	238c      	movs	r3, #140	@ 0x8c
 801b064:	18fb      	adds	r3, r7, r3
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	b29b      	uxth	r3, r3
 801b06a:	f006 fa97 	bl	802159c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801b06e:	68fb      	ldr	r3, [r7, #12]
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	001a      	movs	r2, r3
 801b074:	68bb      	ldr	r3, [r7, #8]
 801b076:	781b      	ldrb	r3, [r3, #0]
 801b078:	009b      	lsls	r3, r3, #2
 801b07a:	18d3      	adds	r3, r2, r3
 801b07c:	881b      	ldrh	r3, [r3, #0]
 801b07e:	b29a      	uxth	r2, r3
 801b080:	2014      	movs	r0, #20
 801b082:	183b      	adds	r3, r7, r0
 801b084:	4911      	ldr	r1, [pc, #68]	@ (801b0cc <HAL_PCD_EP_DB_Transmit+0x818>)
 801b086:	400a      	ands	r2, r1
 801b088:	801a      	strh	r2, [r3, #0]
 801b08a:	183b      	adds	r3, r7, r0
 801b08c:	183a      	adds	r2, r7, r0
 801b08e:	8812      	ldrh	r2, [r2, #0]
 801b090:	2110      	movs	r1, #16
 801b092:	404a      	eors	r2, r1
 801b094:	801a      	strh	r2, [r3, #0]
 801b096:	183b      	adds	r3, r7, r0
 801b098:	183a      	adds	r2, r7, r0
 801b09a:	8812      	ldrh	r2, [r2, #0]
 801b09c:	2120      	movs	r1, #32
 801b09e:	404a      	eors	r2, r1
 801b0a0:	801a      	strh	r2, [r3, #0]
 801b0a2:	68fb      	ldr	r3, [r7, #12]
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	001a      	movs	r2, r3
 801b0a8:	68bb      	ldr	r3, [r7, #8]
 801b0aa:	781b      	ldrb	r3, [r3, #0]
 801b0ac:	009b      	lsls	r3, r3, #2
 801b0ae:	18d3      	adds	r3, r2, r3
 801b0b0:	183a      	adds	r2, r7, r0
 801b0b2:	8812      	ldrh	r2, [r2, #0]
 801b0b4:	4906      	ldr	r1, [pc, #24]	@ (801b0d0 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801b0b6:	430a      	orrs	r2, r1
 801b0b8:	b292      	uxth	r2, r2
 801b0ba:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 801b0bc:	2300      	movs	r3, #0
}
 801b0be:	0018      	movs	r0, r3
 801b0c0:	46bd      	mov	sp, r7
 801b0c2:	b024      	add	sp, #144	@ 0x90
 801b0c4:	bd80      	pop	{r7, pc}
 801b0c6:	46c0      	nop			@ (mov r8, r8)
 801b0c8:	00000406 	.word	0x00000406
 801b0cc:	ffff8fbf 	.word	0xffff8fbf
 801b0d0:	ffff8080 	.word	0xffff8080

0801b0d4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801b0d4:	b590      	push	{r4, r7, lr}
 801b0d6:	b087      	sub	sp, #28
 801b0d8:	af00      	add	r7, sp, #0
 801b0da:	60f8      	str	r0, [r7, #12]
 801b0dc:	0008      	movs	r0, r1
 801b0de:	0011      	movs	r1, r2
 801b0e0:	607b      	str	r3, [r7, #4]
 801b0e2:	240a      	movs	r4, #10
 801b0e4:	193b      	adds	r3, r7, r4
 801b0e6:	1c02      	adds	r2, r0, #0
 801b0e8:	801a      	strh	r2, [r3, #0]
 801b0ea:	2308      	movs	r3, #8
 801b0ec:	18fb      	adds	r3, r7, r3
 801b0ee:	1c0a      	adds	r2, r1, #0
 801b0f0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801b0f2:	0021      	movs	r1, r4
 801b0f4:	187b      	adds	r3, r7, r1
 801b0f6:	881b      	ldrh	r3, [r3, #0]
 801b0f8:	2280      	movs	r2, #128	@ 0x80
 801b0fa:	4013      	ands	r3, r2
 801b0fc:	b29b      	uxth	r3, r3
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d00c      	beq.n	801b11c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b102:	187b      	adds	r3, r7, r1
 801b104:	881b      	ldrh	r3, [r3, #0]
 801b106:	2207      	movs	r2, #7
 801b108:	4013      	ands	r3, r2
 801b10a:	1c5a      	adds	r2, r3, #1
 801b10c:	0013      	movs	r3, r2
 801b10e:	009b      	lsls	r3, r3, #2
 801b110:	189b      	adds	r3, r3, r2
 801b112:	00db      	lsls	r3, r3, #3
 801b114:	68fa      	ldr	r2, [r7, #12]
 801b116:	18d3      	adds	r3, r2, r3
 801b118:	617b      	str	r3, [r7, #20]
 801b11a:	e00b      	b.n	801b134 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801b11c:	230a      	movs	r3, #10
 801b11e:	18fb      	adds	r3, r7, r3
 801b120:	881a      	ldrh	r2, [r3, #0]
 801b122:	0013      	movs	r3, r2
 801b124:	009b      	lsls	r3, r3, #2
 801b126:	189b      	adds	r3, r3, r2
 801b128:	00db      	lsls	r3, r3, #3
 801b12a:	3369      	adds	r3, #105	@ 0x69
 801b12c:	33ff      	adds	r3, #255	@ 0xff
 801b12e:	68fa      	ldr	r2, [r7, #12]
 801b130:	18d3      	adds	r3, r2, r3
 801b132:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801b134:	2308      	movs	r3, #8
 801b136:	18fb      	adds	r3, r7, r3
 801b138:	881b      	ldrh	r3, [r3, #0]
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d107      	bne.n	801b14e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801b13e:	697b      	ldr	r3, [r7, #20]
 801b140:	2200      	movs	r2, #0
 801b142:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	b29a      	uxth	r2, r3
 801b148:	697b      	ldr	r3, [r7, #20]
 801b14a:	80da      	strh	r2, [r3, #6]
 801b14c:	e00b      	b.n	801b166 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801b14e:	697b      	ldr	r3, [r7, #20]
 801b150:	2201      	movs	r2, #1
 801b152:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	b29a      	uxth	r2, r3
 801b158:	697b      	ldr	r3, [r7, #20]
 801b15a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	0c1b      	lsrs	r3, r3, #16
 801b160:	b29a      	uxth	r2, r3
 801b162:	697b      	ldr	r3, [r7, #20]
 801b164:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801b166:	2300      	movs	r3, #0
}
 801b168:	0018      	movs	r0, r3
 801b16a:	46bd      	mov	sp, r7
 801b16c:	b007      	add	sp, #28
 801b16e:	bd90      	pop	{r4, r7, pc}

0801b170 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801b170:	b580      	push	{r7, lr}
 801b172:	b084      	sub	sp, #16
 801b174:	af00      	add	r7, sp, #0
 801b176:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801b17e:	687a      	ldr	r2, [r7, #4]
 801b180:	23ba      	movs	r3, #186	@ 0xba
 801b182:	009b      	lsls	r3, r3, #2
 801b184:	2101      	movs	r1, #1
 801b186:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 801b188:	687a      	ldr	r2, [r7, #4]
 801b18a:	23b8      	movs	r3, #184	@ 0xb8
 801b18c:	009b      	lsls	r3, r3, #2
 801b18e:	2100      	movs	r1, #0
 801b190:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801b192:	68fb      	ldr	r3, [r7, #12]
 801b194:	2254      	movs	r2, #84	@ 0x54
 801b196:	5a9b      	ldrh	r3, [r3, r2]
 801b198:	b29b      	uxth	r3, r3
 801b19a:	2201      	movs	r2, #1
 801b19c:	4313      	orrs	r3, r2
 801b19e:	b299      	uxth	r1, r3
 801b1a0:	68fb      	ldr	r3, [r7, #12]
 801b1a2:	2254      	movs	r2, #84	@ 0x54
 801b1a4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801b1a6:	68fb      	ldr	r3, [r7, #12]
 801b1a8:	2254      	movs	r2, #84	@ 0x54
 801b1aa:	5a9b      	ldrh	r3, [r3, r2]
 801b1ac:	b29b      	uxth	r3, r3
 801b1ae:	2202      	movs	r2, #2
 801b1b0:	4313      	orrs	r3, r2
 801b1b2:	b299      	uxth	r1, r3
 801b1b4:	68fb      	ldr	r3, [r7, #12]
 801b1b6:	2254      	movs	r2, #84	@ 0x54
 801b1b8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b1ba:	2300      	movs	r3, #0
}
 801b1bc:	0018      	movs	r0, r3
 801b1be:	46bd      	mov	sp, r7
 801b1c0:	b004      	add	sp, #16
 801b1c2:	bd80      	pop	{r7, pc}

0801b1c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801b1c4:	b580      	push	{r7, lr}
 801b1c6:	b082      	sub	sp, #8
 801b1c8:	af00      	add	r7, sp, #0
 801b1ca:	6078      	str	r0, [r7, #4]
 801b1cc:	000a      	movs	r2, r1
 801b1ce:	1cfb      	adds	r3, r7, #3
 801b1d0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801b1d2:	46c0      	nop			@ (mov r8, r8)
 801b1d4:	46bd      	mov	sp, r7
 801b1d6:	b002      	add	sp, #8
 801b1d8:	bd80      	pop	{r7, pc}
	...

0801b1dc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801b1dc:	b580      	push	{r7, lr}
 801b1de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801b1e0:	4b04      	ldr	r3, [pc, #16]	@ (801b1f4 <HAL_PWR_EnableBkUpAccess+0x18>)
 801b1e2:	681a      	ldr	r2, [r3, #0]
 801b1e4:	4b03      	ldr	r3, [pc, #12]	@ (801b1f4 <HAL_PWR_EnableBkUpAccess+0x18>)
 801b1e6:	2180      	movs	r1, #128	@ 0x80
 801b1e8:	0049      	lsls	r1, r1, #1
 801b1ea:	430a      	orrs	r2, r1
 801b1ec:	601a      	str	r2, [r3, #0]
}
 801b1ee:	46c0      	nop			@ (mov r8, r8)
 801b1f0:	46bd      	mov	sp, r7
 801b1f2:	bd80      	pop	{r7, pc}
 801b1f4:	40007000 	.word	0x40007000

0801b1f8 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 801b1f8:	b580      	push	{r7, lr}
 801b1fa:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 801b1fc:	4b04      	ldr	r3, [pc, #16]	@ (801b210 <HAL_PWR_DisableBkUpAccess+0x18>)
 801b1fe:	681a      	ldr	r2, [r3, #0]
 801b200:	4b03      	ldr	r3, [pc, #12]	@ (801b210 <HAL_PWR_DisableBkUpAccess+0x18>)
 801b202:	4904      	ldr	r1, [pc, #16]	@ (801b214 <HAL_PWR_DisableBkUpAccess+0x1c>)
 801b204:	400a      	ands	r2, r1
 801b206:	601a      	str	r2, [r3, #0]
}
 801b208:	46c0      	nop			@ (mov r8, r8)
 801b20a:	46bd      	mov	sp, r7
 801b20c:	bd80      	pop	{r7, pc}
 801b20e:	46c0      	nop			@ (mov r8, r8)
 801b210:	40007000 	.word	0x40007000
 801b214:	fffffeff 	.word	0xfffffeff

0801b218 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801b218:	b580      	push	{r7, lr}
 801b21a:	b086      	sub	sp, #24
 801b21c:	af00      	add	r7, sp, #0
 801b21e:	6078      	str	r0, [r7, #4]
 801b220:	000a      	movs	r2, r1
 801b222:	1cfb      	adds	r3, r7, #3
 801b224:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801b226:	2300      	movs	r3, #0
 801b228:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801b22a:	4b25      	ldr	r3, [pc, #148]	@ (801b2c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b22c:	681a      	ldr	r2, [r3, #0]
 801b22e:	2380      	movs	r3, #128	@ 0x80
 801b230:	009b      	lsls	r3, r3, #2
 801b232:	4013      	ands	r3, r2
 801b234:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801b236:	4b23      	ldr	r3, [pc, #140]	@ (801b2c4 <HAL_PWR_EnterSTOPMode+0xac>)
 801b238:	6a1b      	ldr	r3, [r3, #32]
 801b23a:	2201      	movs	r2, #1
 801b23c:	4013      	ands	r3, r2
 801b23e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 801b240:	693b      	ldr	r3, [r7, #16]
 801b242:	2b00      	cmp	r3, #0
 801b244:	d008      	beq.n	801b258 <HAL_PWR_EnterSTOPMode+0x40>
 801b246:	68fb      	ldr	r3, [r7, #12]
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d005      	beq.n	801b258 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801b24c:	4b1c      	ldr	r3, [pc, #112]	@ (801b2c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b24e:	681a      	ldr	r2, [r3, #0]
 801b250:	4b1b      	ldr	r3, [pc, #108]	@ (801b2c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b252:	491d      	ldr	r1, [pc, #116]	@ (801b2c8 <HAL_PWR_EnterSTOPMode+0xb0>)
 801b254:	400a      	ands	r2, r1
 801b256:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 801b258:	4b19      	ldr	r3, [pc, #100]	@ (801b2c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801b25e:	697b      	ldr	r3, [r7, #20]
 801b260:	2203      	movs	r2, #3
 801b262:	4393      	bics	r3, r2
 801b264:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801b266:	697a      	ldr	r2, [r7, #20]
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	4313      	orrs	r3, r2
 801b26c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801b26e:	4b14      	ldr	r3, [pc, #80]	@ (801b2c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b270:	697a      	ldr	r2, [r7, #20]
 801b272:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b274:	4b15      	ldr	r3, [pc, #84]	@ (801b2cc <HAL_PWR_EnterSTOPMode+0xb4>)
 801b276:	691a      	ldr	r2, [r3, #16]
 801b278:	4b14      	ldr	r3, [pc, #80]	@ (801b2cc <HAL_PWR_EnterSTOPMode+0xb4>)
 801b27a:	2104      	movs	r1, #4
 801b27c:	430a      	orrs	r2, r1
 801b27e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801b280:	1cfb      	adds	r3, r7, #3
 801b282:	781b      	ldrb	r3, [r3, #0]
 801b284:	2b01      	cmp	r3, #1
 801b286:	d101      	bne.n	801b28c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801b288:	bf30      	wfi
 801b28a:	e002      	b.n	801b292 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801b28c:	bf40      	sev
    __WFE();
 801b28e:	bf20      	wfe
    __WFE();
 801b290:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b292:	4b0e      	ldr	r3, [pc, #56]	@ (801b2cc <HAL_PWR_EnterSTOPMode+0xb4>)
 801b294:	691a      	ldr	r2, [r3, #16]
 801b296:	4b0d      	ldr	r3, [pc, #52]	@ (801b2cc <HAL_PWR_EnterSTOPMode+0xb4>)
 801b298:	2104      	movs	r1, #4
 801b29a:	438a      	bics	r2, r1
 801b29c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801b29e:	693b      	ldr	r3, [r7, #16]
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d009      	beq.n	801b2b8 <HAL_PWR_EnterSTOPMode+0xa0>
 801b2a4:	68fb      	ldr	r3, [r7, #12]
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d006      	beq.n	801b2b8 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801b2aa:	4b05      	ldr	r3, [pc, #20]	@ (801b2c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b2ac:	681a      	ldr	r2, [r3, #0]
 801b2ae:	4b04      	ldr	r3, [pc, #16]	@ (801b2c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b2b0:	2180      	movs	r1, #128	@ 0x80
 801b2b2:	0089      	lsls	r1, r1, #2
 801b2b4:	430a      	orrs	r2, r1
 801b2b6:	601a      	str	r2, [r3, #0]
  }
}
 801b2b8:	46c0      	nop			@ (mov r8, r8)
 801b2ba:	46bd      	mov	sp, r7
 801b2bc:	b006      	add	sp, #24
 801b2be:	bd80      	pop	{r7, pc}
 801b2c0:	40007000 	.word	0x40007000
 801b2c4:	40010000 	.word	0x40010000
 801b2c8:	fffffdff 	.word	0xfffffdff
 801b2cc:	e000ed00 	.word	0xe000ed00

0801b2d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b2d0:	b5b0      	push	{r4, r5, r7, lr}
 801b2d2:	b08a      	sub	sp, #40	@ 0x28
 801b2d4:	af00      	add	r7, sp, #0
 801b2d6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d102      	bne.n	801b2e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801b2de:	2301      	movs	r3, #1
 801b2e0:	f000 fbbf 	bl	801ba62 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b2e4:	4bc9      	ldr	r3, [pc, #804]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b2e6:	68db      	ldr	r3, [r3, #12]
 801b2e8:	220c      	movs	r2, #12
 801b2ea:	4013      	ands	r3, r2
 801b2ec:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b2ee:	4bc7      	ldr	r3, [pc, #796]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b2f0:	68da      	ldr	r2, [r3, #12]
 801b2f2:	2380      	movs	r3, #128	@ 0x80
 801b2f4:	025b      	lsls	r3, r3, #9
 801b2f6:	4013      	ands	r3, r2
 801b2f8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	2201      	movs	r2, #1
 801b300:	4013      	ands	r3, r2
 801b302:	d100      	bne.n	801b306 <HAL_RCC_OscConfig+0x36>
 801b304:	e07e      	b.n	801b404 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801b306:	69fb      	ldr	r3, [r7, #28]
 801b308:	2b08      	cmp	r3, #8
 801b30a:	d007      	beq.n	801b31c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801b30c:	69fb      	ldr	r3, [r7, #28]
 801b30e:	2b0c      	cmp	r3, #12
 801b310:	d112      	bne.n	801b338 <HAL_RCC_OscConfig+0x68>
 801b312:	69ba      	ldr	r2, [r7, #24]
 801b314:	2380      	movs	r3, #128	@ 0x80
 801b316:	025b      	lsls	r3, r3, #9
 801b318:	429a      	cmp	r2, r3
 801b31a:	d10d      	bne.n	801b338 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b31c:	4bbb      	ldr	r3, [pc, #748]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b31e:	681a      	ldr	r2, [r3, #0]
 801b320:	2380      	movs	r3, #128	@ 0x80
 801b322:	029b      	lsls	r3, r3, #10
 801b324:	4013      	ands	r3, r2
 801b326:	d100      	bne.n	801b32a <HAL_RCC_OscConfig+0x5a>
 801b328:	e06b      	b.n	801b402 <HAL_RCC_OscConfig+0x132>
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	685b      	ldr	r3, [r3, #4]
 801b32e:	2b00      	cmp	r3, #0
 801b330:	d167      	bne.n	801b402 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801b332:	2301      	movs	r3, #1
 801b334:	f000 fb95 	bl	801ba62 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	685a      	ldr	r2, [r3, #4]
 801b33c:	2380      	movs	r3, #128	@ 0x80
 801b33e:	025b      	lsls	r3, r3, #9
 801b340:	429a      	cmp	r2, r3
 801b342:	d107      	bne.n	801b354 <HAL_RCC_OscConfig+0x84>
 801b344:	4bb1      	ldr	r3, [pc, #708]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b346:	681a      	ldr	r2, [r3, #0]
 801b348:	4bb0      	ldr	r3, [pc, #704]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b34a:	2180      	movs	r1, #128	@ 0x80
 801b34c:	0249      	lsls	r1, r1, #9
 801b34e:	430a      	orrs	r2, r1
 801b350:	601a      	str	r2, [r3, #0]
 801b352:	e027      	b.n	801b3a4 <HAL_RCC_OscConfig+0xd4>
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	685a      	ldr	r2, [r3, #4]
 801b358:	23a0      	movs	r3, #160	@ 0xa0
 801b35a:	02db      	lsls	r3, r3, #11
 801b35c:	429a      	cmp	r2, r3
 801b35e:	d10e      	bne.n	801b37e <HAL_RCC_OscConfig+0xae>
 801b360:	4baa      	ldr	r3, [pc, #680]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b362:	681a      	ldr	r2, [r3, #0]
 801b364:	4ba9      	ldr	r3, [pc, #676]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b366:	2180      	movs	r1, #128	@ 0x80
 801b368:	02c9      	lsls	r1, r1, #11
 801b36a:	430a      	orrs	r2, r1
 801b36c:	601a      	str	r2, [r3, #0]
 801b36e:	4ba7      	ldr	r3, [pc, #668]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b370:	681a      	ldr	r2, [r3, #0]
 801b372:	4ba6      	ldr	r3, [pc, #664]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b374:	2180      	movs	r1, #128	@ 0x80
 801b376:	0249      	lsls	r1, r1, #9
 801b378:	430a      	orrs	r2, r1
 801b37a:	601a      	str	r2, [r3, #0]
 801b37c:	e012      	b.n	801b3a4 <HAL_RCC_OscConfig+0xd4>
 801b37e:	4ba3      	ldr	r3, [pc, #652]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b380:	681a      	ldr	r2, [r3, #0]
 801b382:	4ba2      	ldr	r3, [pc, #648]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b384:	49a2      	ldr	r1, [pc, #648]	@ (801b610 <HAL_RCC_OscConfig+0x340>)
 801b386:	400a      	ands	r2, r1
 801b388:	601a      	str	r2, [r3, #0]
 801b38a:	4ba0      	ldr	r3, [pc, #640]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b38c:	681a      	ldr	r2, [r3, #0]
 801b38e:	2380      	movs	r3, #128	@ 0x80
 801b390:	025b      	lsls	r3, r3, #9
 801b392:	4013      	ands	r3, r2
 801b394:	60fb      	str	r3, [r7, #12]
 801b396:	68fb      	ldr	r3, [r7, #12]
 801b398:	4b9c      	ldr	r3, [pc, #624]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b39a:	681a      	ldr	r2, [r3, #0]
 801b39c:	4b9b      	ldr	r3, [pc, #620]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b39e:	499d      	ldr	r1, [pc, #628]	@ (801b614 <HAL_RCC_OscConfig+0x344>)
 801b3a0:	400a      	ands	r2, r1
 801b3a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	685b      	ldr	r3, [r3, #4]
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	d015      	beq.n	801b3d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b3ac:	f7f9 fb04 	bl	80149b8 <HAL_GetTick>
 801b3b0:	0003      	movs	r3, r0
 801b3b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b3b4:	e009      	b.n	801b3ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b3b6:	f7f9 faff 	bl	80149b8 <HAL_GetTick>
 801b3ba:	0002      	movs	r2, r0
 801b3bc:	697b      	ldr	r3, [r7, #20]
 801b3be:	1ad3      	subs	r3, r2, r3
 801b3c0:	2b64      	cmp	r3, #100	@ 0x64
 801b3c2:	d902      	bls.n	801b3ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801b3c4:	2303      	movs	r3, #3
 801b3c6:	f000 fb4c 	bl	801ba62 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b3ca:	4b90      	ldr	r3, [pc, #576]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b3cc:	681a      	ldr	r2, [r3, #0]
 801b3ce:	2380      	movs	r3, #128	@ 0x80
 801b3d0:	029b      	lsls	r3, r3, #10
 801b3d2:	4013      	ands	r3, r2
 801b3d4:	d0ef      	beq.n	801b3b6 <HAL_RCC_OscConfig+0xe6>
 801b3d6:	e015      	b.n	801b404 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b3d8:	f7f9 faee 	bl	80149b8 <HAL_GetTick>
 801b3dc:	0003      	movs	r3, r0
 801b3de:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b3e0:	e008      	b.n	801b3f4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b3e2:	f7f9 fae9 	bl	80149b8 <HAL_GetTick>
 801b3e6:	0002      	movs	r2, r0
 801b3e8:	697b      	ldr	r3, [r7, #20]
 801b3ea:	1ad3      	subs	r3, r2, r3
 801b3ec:	2b64      	cmp	r3, #100	@ 0x64
 801b3ee:	d901      	bls.n	801b3f4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801b3f0:	2303      	movs	r3, #3
 801b3f2:	e336      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b3f4:	4b85      	ldr	r3, [pc, #532]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b3f6:	681a      	ldr	r2, [r3, #0]
 801b3f8:	2380      	movs	r3, #128	@ 0x80
 801b3fa:	029b      	lsls	r3, r3, #10
 801b3fc:	4013      	ands	r3, r2
 801b3fe:	d1f0      	bne.n	801b3e2 <HAL_RCC_OscConfig+0x112>
 801b400:	e000      	b.n	801b404 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b402:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	2202      	movs	r2, #2
 801b40a:	4013      	ands	r3, r2
 801b40c:	d100      	bne.n	801b410 <HAL_RCC_OscConfig+0x140>
 801b40e:	e099      	b.n	801b544 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	68db      	ldr	r3, [r3, #12]
 801b414:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801b416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b418:	2220      	movs	r2, #32
 801b41a:	4013      	ands	r3, r2
 801b41c:	d009      	beq.n	801b432 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801b41e:	4b7b      	ldr	r3, [pc, #492]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b420:	681a      	ldr	r2, [r3, #0]
 801b422:	4b7a      	ldr	r3, [pc, #488]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b424:	2120      	movs	r1, #32
 801b426:	430a      	orrs	r2, r1
 801b428:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801b42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b42c:	2220      	movs	r2, #32
 801b42e:	4393      	bics	r3, r2
 801b430:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801b432:	69fb      	ldr	r3, [r7, #28]
 801b434:	2b04      	cmp	r3, #4
 801b436:	d005      	beq.n	801b444 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801b438:	69fb      	ldr	r3, [r7, #28]
 801b43a:	2b0c      	cmp	r3, #12
 801b43c:	d13e      	bne.n	801b4bc <HAL_RCC_OscConfig+0x1ec>
 801b43e:	69bb      	ldr	r3, [r7, #24]
 801b440:	2b00      	cmp	r3, #0
 801b442:	d13b      	bne.n	801b4bc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 801b444:	4b71      	ldr	r3, [pc, #452]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	2204      	movs	r2, #4
 801b44a:	4013      	ands	r3, r2
 801b44c:	d004      	beq.n	801b458 <HAL_RCC_OscConfig+0x188>
 801b44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b450:	2b00      	cmp	r3, #0
 801b452:	d101      	bne.n	801b458 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 801b454:	2301      	movs	r3, #1
 801b456:	e304      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b458:	4b6c      	ldr	r3, [pc, #432]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b45a:	685b      	ldr	r3, [r3, #4]
 801b45c:	4a6e      	ldr	r2, [pc, #440]	@ (801b618 <HAL_RCC_OscConfig+0x348>)
 801b45e:	4013      	ands	r3, r2
 801b460:	0019      	movs	r1, r3
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	691b      	ldr	r3, [r3, #16]
 801b466:	021a      	lsls	r2, r3, #8
 801b468:	4b68      	ldr	r3, [pc, #416]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b46a:	430a      	orrs	r2, r1
 801b46c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801b46e:	4b67      	ldr	r3, [pc, #412]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	2209      	movs	r2, #9
 801b474:	4393      	bics	r3, r2
 801b476:	0019      	movs	r1, r3
 801b478:	4b64      	ldr	r3, [pc, #400]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b47a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b47c:	430a      	orrs	r2, r1
 801b47e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b480:	f000 fc42 	bl	801bd08 <HAL_RCC_GetSysClockFreq>
 801b484:	0001      	movs	r1, r0
 801b486:	4b61      	ldr	r3, [pc, #388]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b488:	68db      	ldr	r3, [r3, #12]
 801b48a:	091b      	lsrs	r3, r3, #4
 801b48c:	220f      	movs	r2, #15
 801b48e:	4013      	ands	r3, r2
 801b490:	4a62      	ldr	r2, [pc, #392]	@ (801b61c <HAL_RCC_OscConfig+0x34c>)
 801b492:	5cd3      	ldrb	r3, [r2, r3]
 801b494:	000a      	movs	r2, r1
 801b496:	40da      	lsrs	r2, r3
 801b498:	4b61      	ldr	r3, [pc, #388]	@ (801b620 <HAL_RCC_OscConfig+0x350>)
 801b49a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801b49c:	4b61      	ldr	r3, [pc, #388]	@ (801b624 <HAL_RCC_OscConfig+0x354>)
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	2513      	movs	r5, #19
 801b4a2:	197c      	adds	r4, r7, r5
 801b4a4:	0018      	movs	r0, r3
 801b4a6:	f7f9 fa41 	bl	801492c <HAL_InitTick>
 801b4aa:	0003      	movs	r3, r0
 801b4ac:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801b4ae:	197b      	adds	r3, r7, r5
 801b4b0:	781b      	ldrb	r3, [r3, #0]
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	d046      	beq.n	801b544 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801b4b6:	197b      	adds	r3, r7, r5
 801b4b8:	781b      	ldrb	r3, [r3, #0]
 801b4ba:	e2d2      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801b4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d027      	beq.n	801b512 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801b4c2:	4b52      	ldr	r3, [pc, #328]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b4c4:	681b      	ldr	r3, [r3, #0]
 801b4c6:	2209      	movs	r2, #9
 801b4c8:	4393      	bics	r3, r2
 801b4ca:	0019      	movs	r1, r3
 801b4cc:	4b4f      	ldr	r3, [pc, #316]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b4ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b4d0:	430a      	orrs	r2, r1
 801b4d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b4d4:	f7f9 fa70 	bl	80149b8 <HAL_GetTick>
 801b4d8:	0003      	movs	r3, r0
 801b4da:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b4dc:	e008      	b.n	801b4f0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b4de:	f7f9 fa6b 	bl	80149b8 <HAL_GetTick>
 801b4e2:	0002      	movs	r2, r0
 801b4e4:	697b      	ldr	r3, [r7, #20]
 801b4e6:	1ad3      	subs	r3, r2, r3
 801b4e8:	2b02      	cmp	r3, #2
 801b4ea:	d901      	bls.n	801b4f0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801b4ec:	2303      	movs	r3, #3
 801b4ee:	e2b8      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b4f0:	4b46      	ldr	r3, [pc, #280]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	2204      	movs	r2, #4
 801b4f6:	4013      	ands	r3, r2
 801b4f8:	d0f1      	beq.n	801b4de <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b4fa:	4b44      	ldr	r3, [pc, #272]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b4fc:	685b      	ldr	r3, [r3, #4]
 801b4fe:	4a46      	ldr	r2, [pc, #280]	@ (801b618 <HAL_RCC_OscConfig+0x348>)
 801b500:	4013      	ands	r3, r2
 801b502:	0019      	movs	r1, r3
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	691b      	ldr	r3, [r3, #16]
 801b508:	021a      	lsls	r2, r3, #8
 801b50a:	4b40      	ldr	r3, [pc, #256]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b50c:	430a      	orrs	r2, r1
 801b50e:	605a      	str	r2, [r3, #4]
 801b510:	e018      	b.n	801b544 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b512:	4b3e      	ldr	r3, [pc, #248]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b514:	681a      	ldr	r2, [r3, #0]
 801b516:	4b3d      	ldr	r3, [pc, #244]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b518:	2101      	movs	r1, #1
 801b51a:	438a      	bics	r2, r1
 801b51c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b51e:	f7f9 fa4b 	bl	80149b8 <HAL_GetTick>
 801b522:	0003      	movs	r3, r0
 801b524:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b526:	e008      	b.n	801b53a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b528:	f7f9 fa46 	bl	80149b8 <HAL_GetTick>
 801b52c:	0002      	movs	r2, r0
 801b52e:	697b      	ldr	r3, [r7, #20]
 801b530:	1ad3      	subs	r3, r2, r3
 801b532:	2b02      	cmp	r3, #2
 801b534:	d901      	bls.n	801b53a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801b536:	2303      	movs	r3, #3
 801b538:	e293      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b53a:	4b34      	ldr	r3, [pc, #208]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b53c:	681b      	ldr	r3, [r3, #0]
 801b53e:	2204      	movs	r2, #4
 801b540:	4013      	ands	r3, r2
 801b542:	d1f1      	bne.n	801b528 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	681b      	ldr	r3, [r3, #0]
 801b548:	2210      	movs	r2, #16
 801b54a:	4013      	ands	r3, r2
 801b54c:	d100      	bne.n	801b550 <HAL_RCC_OscConfig+0x280>
 801b54e:	e0a2      	b.n	801b696 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801b550:	69fb      	ldr	r3, [r7, #28]
 801b552:	2b00      	cmp	r3, #0
 801b554:	d140      	bne.n	801b5d8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801b556:	4b2d      	ldr	r3, [pc, #180]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b558:	681a      	ldr	r2, [r3, #0]
 801b55a:	2380      	movs	r3, #128	@ 0x80
 801b55c:	009b      	lsls	r3, r3, #2
 801b55e:	4013      	ands	r3, r2
 801b560:	d005      	beq.n	801b56e <HAL_RCC_OscConfig+0x29e>
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	69db      	ldr	r3, [r3, #28]
 801b566:	2b00      	cmp	r3, #0
 801b568:	d101      	bne.n	801b56e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801b56a:	2301      	movs	r3, #1
 801b56c:	e279      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b56e:	4b27      	ldr	r3, [pc, #156]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b570:	685b      	ldr	r3, [r3, #4]
 801b572:	4a2d      	ldr	r2, [pc, #180]	@ (801b628 <HAL_RCC_OscConfig+0x358>)
 801b574:	4013      	ands	r3, r2
 801b576:	0019      	movs	r1, r3
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b57c:	4b23      	ldr	r3, [pc, #140]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b57e:	430a      	orrs	r2, r1
 801b580:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b582:	4b22      	ldr	r3, [pc, #136]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b584:	685b      	ldr	r3, [r3, #4]
 801b586:	021b      	lsls	r3, r3, #8
 801b588:	0a19      	lsrs	r1, r3, #8
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	6a1b      	ldr	r3, [r3, #32]
 801b58e:	061a      	lsls	r2, r3, #24
 801b590:	4b1e      	ldr	r3, [pc, #120]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b592:	430a      	orrs	r2, r1
 801b594:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b59a:	0b5b      	lsrs	r3, r3, #13
 801b59c:	3301      	adds	r3, #1
 801b59e:	2280      	movs	r2, #128	@ 0x80
 801b5a0:	0212      	lsls	r2, r2, #8
 801b5a2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 801b5a4:	4b19      	ldr	r3, [pc, #100]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b5a6:	68db      	ldr	r3, [r3, #12]
 801b5a8:	091b      	lsrs	r3, r3, #4
 801b5aa:	210f      	movs	r1, #15
 801b5ac:	400b      	ands	r3, r1
 801b5ae:	491b      	ldr	r1, [pc, #108]	@ (801b61c <HAL_RCC_OscConfig+0x34c>)
 801b5b0:	5ccb      	ldrb	r3, [r1, r3]
 801b5b2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b5b4:	4b1a      	ldr	r3, [pc, #104]	@ (801b620 <HAL_RCC_OscConfig+0x350>)
 801b5b6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801b5b8:	4b1a      	ldr	r3, [pc, #104]	@ (801b624 <HAL_RCC_OscConfig+0x354>)
 801b5ba:	681b      	ldr	r3, [r3, #0]
 801b5bc:	2513      	movs	r5, #19
 801b5be:	197c      	adds	r4, r7, r5
 801b5c0:	0018      	movs	r0, r3
 801b5c2:	f7f9 f9b3 	bl	801492c <HAL_InitTick>
 801b5c6:	0003      	movs	r3, r0
 801b5c8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801b5ca:	197b      	adds	r3, r7, r5
 801b5cc:	781b      	ldrb	r3, [r3, #0]
 801b5ce:	2b00      	cmp	r3, #0
 801b5d0:	d061      	beq.n	801b696 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801b5d2:	197b      	adds	r3, r7, r5
 801b5d4:	781b      	ldrb	r3, [r3, #0]
 801b5d6:	e244      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	69db      	ldr	r3, [r3, #28]
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	d040      	beq.n	801b662 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801b5e0:	4b0a      	ldr	r3, [pc, #40]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b5e2:	681a      	ldr	r2, [r3, #0]
 801b5e4:	4b09      	ldr	r3, [pc, #36]	@ (801b60c <HAL_RCC_OscConfig+0x33c>)
 801b5e6:	2180      	movs	r1, #128	@ 0x80
 801b5e8:	0049      	lsls	r1, r1, #1
 801b5ea:	430a      	orrs	r2, r1
 801b5ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b5ee:	f7f9 f9e3 	bl	80149b8 <HAL_GetTick>
 801b5f2:	0003      	movs	r3, r0
 801b5f4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b5f6:	e019      	b.n	801b62c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b5f8:	f7f9 f9de 	bl	80149b8 <HAL_GetTick>
 801b5fc:	0002      	movs	r2, r0
 801b5fe:	697b      	ldr	r3, [r7, #20]
 801b600:	1ad3      	subs	r3, r2, r3
 801b602:	2b02      	cmp	r3, #2
 801b604:	d912      	bls.n	801b62c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801b606:	2303      	movs	r3, #3
 801b608:	e22b      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
 801b60a:	46c0      	nop			@ (mov r8, r8)
 801b60c:	40021000 	.word	0x40021000
 801b610:	fffeffff 	.word	0xfffeffff
 801b614:	fffbffff 	.word	0xfffbffff
 801b618:	ffffe0ff 	.word	0xffffe0ff
 801b61c:	0802e894 	.word	0x0802e894
 801b620:	200000ec 	.word	0x200000ec
 801b624:	200000fc 	.word	0x200000fc
 801b628:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b62c:	4bca      	ldr	r3, [pc, #808]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b62e:	681a      	ldr	r2, [r3, #0]
 801b630:	2380      	movs	r3, #128	@ 0x80
 801b632:	009b      	lsls	r3, r3, #2
 801b634:	4013      	ands	r3, r2
 801b636:	d0df      	beq.n	801b5f8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b638:	4bc7      	ldr	r3, [pc, #796]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b63a:	685b      	ldr	r3, [r3, #4]
 801b63c:	4ac7      	ldr	r2, [pc, #796]	@ (801b95c <HAL_RCC_OscConfig+0x68c>)
 801b63e:	4013      	ands	r3, r2
 801b640:	0019      	movs	r1, r3
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b646:	4bc4      	ldr	r3, [pc, #784]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b648:	430a      	orrs	r2, r1
 801b64a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b64c:	4bc2      	ldr	r3, [pc, #776]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b64e:	685b      	ldr	r3, [r3, #4]
 801b650:	021b      	lsls	r3, r3, #8
 801b652:	0a19      	lsrs	r1, r3, #8
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	6a1b      	ldr	r3, [r3, #32]
 801b658:	061a      	lsls	r2, r3, #24
 801b65a:	4bbf      	ldr	r3, [pc, #764]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b65c:	430a      	orrs	r2, r1
 801b65e:	605a      	str	r2, [r3, #4]
 801b660:	e019      	b.n	801b696 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801b662:	4bbd      	ldr	r3, [pc, #756]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b664:	681a      	ldr	r2, [r3, #0]
 801b666:	4bbc      	ldr	r3, [pc, #752]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b668:	49bd      	ldr	r1, [pc, #756]	@ (801b960 <HAL_RCC_OscConfig+0x690>)
 801b66a:	400a      	ands	r2, r1
 801b66c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b66e:	f7f9 f9a3 	bl	80149b8 <HAL_GetTick>
 801b672:	0003      	movs	r3, r0
 801b674:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b676:	e008      	b.n	801b68a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b678:	f7f9 f99e 	bl	80149b8 <HAL_GetTick>
 801b67c:	0002      	movs	r2, r0
 801b67e:	697b      	ldr	r3, [r7, #20]
 801b680:	1ad3      	subs	r3, r2, r3
 801b682:	2b02      	cmp	r3, #2
 801b684:	d901      	bls.n	801b68a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801b686:	2303      	movs	r3, #3
 801b688:	e1eb      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b68a:	4bb3      	ldr	r3, [pc, #716]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b68c:	681a      	ldr	r2, [r3, #0]
 801b68e:	2380      	movs	r3, #128	@ 0x80
 801b690:	009b      	lsls	r3, r3, #2
 801b692:	4013      	ands	r3, r2
 801b694:	d1f0      	bne.n	801b678 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	2208      	movs	r2, #8
 801b69c:	4013      	ands	r3, r2
 801b69e:	d036      	beq.n	801b70e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	695b      	ldr	r3, [r3, #20]
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	d019      	beq.n	801b6dc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b6a8:	4bab      	ldr	r3, [pc, #684]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b6aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b6ac:	4baa      	ldr	r3, [pc, #680]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b6ae:	2101      	movs	r1, #1
 801b6b0:	430a      	orrs	r2, r1
 801b6b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b6b4:	f7f9 f980 	bl	80149b8 <HAL_GetTick>
 801b6b8:	0003      	movs	r3, r0
 801b6ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b6bc:	e008      	b.n	801b6d0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b6be:	f7f9 f97b 	bl	80149b8 <HAL_GetTick>
 801b6c2:	0002      	movs	r2, r0
 801b6c4:	697b      	ldr	r3, [r7, #20]
 801b6c6:	1ad3      	subs	r3, r2, r3
 801b6c8:	2b02      	cmp	r3, #2
 801b6ca:	d901      	bls.n	801b6d0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801b6cc:	2303      	movs	r3, #3
 801b6ce:	e1c8      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b6d0:	4ba1      	ldr	r3, [pc, #644]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b6d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b6d4:	2202      	movs	r2, #2
 801b6d6:	4013      	ands	r3, r2
 801b6d8:	d0f1      	beq.n	801b6be <HAL_RCC_OscConfig+0x3ee>
 801b6da:	e018      	b.n	801b70e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b6dc:	4b9e      	ldr	r3, [pc, #632]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b6de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b6e0:	4b9d      	ldr	r3, [pc, #628]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b6e2:	2101      	movs	r1, #1
 801b6e4:	438a      	bics	r2, r1
 801b6e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b6e8:	f7f9 f966 	bl	80149b8 <HAL_GetTick>
 801b6ec:	0003      	movs	r3, r0
 801b6ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b6f0:	e008      	b.n	801b704 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b6f2:	f7f9 f961 	bl	80149b8 <HAL_GetTick>
 801b6f6:	0002      	movs	r2, r0
 801b6f8:	697b      	ldr	r3, [r7, #20]
 801b6fa:	1ad3      	subs	r3, r2, r3
 801b6fc:	2b02      	cmp	r3, #2
 801b6fe:	d901      	bls.n	801b704 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801b700:	2303      	movs	r3, #3
 801b702:	e1ae      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b704:	4b94      	ldr	r3, [pc, #592]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b708:	2202      	movs	r2, #2
 801b70a:	4013      	ands	r3, r2
 801b70c:	d1f1      	bne.n	801b6f2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	681b      	ldr	r3, [r3, #0]
 801b712:	2204      	movs	r2, #4
 801b714:	4013      	ands	r3, r2
 801b716:	d100      	bne.n	801b71a <HAL_RCC_OscConfig+0x44a>
 801b718:	e0ae      	b.n	801b878 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b71a:	2023      	movs	r0, #35	@ 0x23
 801b71c:	183b      	adds	r3, r7, r0
 801b71e:	2200      	movs	r2, #0
 801b720:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b722:	4b8d      	ldr	r3, [pc, #564]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b724:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b726:	2380      	movs	r3, #128	@ 0x80
 801b728:	055b      	lsls	r3, r3, #21
 801b72a:	4013      	ands	r3, r2
 801b72c:	d109      	bne.n	801b742 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b72e:	4b8a      	ldr	r3, [pc, #552]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b730:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b732:	4b89      	ldr	r3, [pc, #548]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b734:	2180      	movs	r1, #128	@ 0x80
 801b736:	0549      	lsls	r1, r1, #21
 801b738:	430a      	orrs	r2, r1
 801b73a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801b73c:	183b      	adds	r3, r7, r0
 801b73e:	2201      	movs	r2, #1
 801b740:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b742:	4b88      	ldr	r3, [pc, #544]	@ (801b964 <HAL_RCC_OscConfig+0x694>)
 801b744:	681a      	ldr	r2, [r3, #0]
 801b746:	2380      	movs	r3, #128	@ 0x80
 801b748:	005b      	lsls	r3, r3, #1
 801b74a:	4013      	ands	r3, r2
 801b74c:	d11a      	bne.n	801b784 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801b74e:	4b85      	ldr	r3, [pc, #532]	@ (801b964 <HAL_RCC_OscConfig+0x694>)
 801b750:	681a      	ldr	r2, [r3, #0]
 801b752:	4b84      	ldr	r3, [pc, #528]	@ (801b964 <HAL_RCC_OscConfig+0x694>)
 801b754:	2180      	movs	r1, #128	@ 0x80
 801b756:	0049      	lsls	r1, r1, #1
 801b758:	430a      	orrs	r2, r1
 801b75a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b75c:	f7f9 f92c 	bl	80149b8 <HAL_GetTick>
 801b760:	0003      	movs	r3, r0
 801b762:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b764:	e008      	b.n	801b778 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b766:	f7f9 f927 	bl	80149b8 <HAL_GetTick>
 801b76a:	0002      	movs	r2, r0
 801b76c:	697b      	ldr	r3, [r7, #20]
 801b76e:	1ad3      	subs	r3, r2, r3
 801b770:	2b64      	cmp	r3, #100	@ 0x64
 801b772:	d901      	bls.n	801b778 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 801b774:	2303      	movs	r3, #3
 801b776:	e174      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b778:	4b7a      	ldr	r3, [pc, #488]	@ (801b964 <HAL_RCC_OscConfig+0x694>)
 801b77a:	681a      	ldr	r2, [r3, #0]
 801b77c:	2380      	movs	r3, #128	@ 0x80
 801b77e:	005b      	lsls	r3, r3, #1
 801b780:	4013      	ands	r3, r2
 801b782:	d0f0      	beq.n	801b766 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	689a      	ldr	r2, [r3, #8]
 801b788:	2380      	movs	r3, #128	@ 0x80
 801b78a:	005b      	lsls	r3, r3, #1
 801b78c:	429a      	cmp	r2, r3
 801b78e:	d107      	bne.n	801b7a0 <HAL_RCC_OscConfig+0x4d0>
 801b790:	4b71      	ldr	r3, [pc, #452]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b792:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b794:	4b70      	ldr	r3, [pc, #448]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b796:	2180      	movs	r1, #128	@ 0x80
 801b798:	0049      	lsls	r1, r1, #1
 801b79a:	430a      	orrs	r2, r1
 801b79c:	651a      	str	r2, [r3, #80]	@ 0x50
 801b79e:	e031      	b.n	801b804 <HAL_RCC_OscConfig+0x534>
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	689b      	ldr	r3, [r3, #8]
 801b7a4:	2b00      	cmp	r3, #0
 801b7a6:	d10c      	bne.n	801b7c2 <HAL_RCC_OscConfig+0x4f2>
 801b7a8:	4b6b      	ldr	r3, [pc, #428]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b7aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b7ac:	4b6a      	ldr	r3, [pc, #424]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b7ae:	496c      	ldr	r1, [pc, #432]	@ (801b960 <HAL_RCC_OscConfig+0x690>)
 801b7b0:	400a      	ands	r2, r1
 801b7b2:	651a      	str	r2, [r3, #80]	@ 0x50
 801b7b4:	4b68      	ldr	r3, [pc, #416]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b7b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b7b8:	4b67      	ldr	r3, [pc, #412]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b7ba:	496b      	ldr	r1, [pc, #428]	@ (801b968 <HAL_RCC_OscConfig+0x698>)
 801b7bc:	400a      	ands	r2, r1
 801b7be:	651a      	str	r2, [r3, #80]	@ 0x50
 801b7c0:	e020      	b.n	801b804 <HAL_RCC_OscConfig+0x534>
 801b7c2:	687b      	ldr	r3, [r7, #4]
 801b7c4:	689a      	ldr	r2, [r3, #8]
 801b7c6:	23a0      	movs	r3, #160	@ 0xa0
 801b7c8:	00db      	lsls	r3, r3, #3
 801b7ca:	429a      	cmp	r2, r3
 801b7cc:	d10e      	bne.n	801b7ec <HAL_RCC_OscConfig+0x51c>
 801b7ce:	4b62      	ldr	r3, [pc, #392]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b7d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b7d2:	4b61      	ldr	r3, [pc, #388]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b7d4:	2180      	movs	r1, #128	@ 0x80
 801b7d6:	00c9      	lsls	r1, r1, #3
 801b7d8:	430a      	orrs	r2, r1
 801b7da:	651a      	str	r2, [r3, #80]	@ 0x50
 801b7dc:	4b5e      	ldr	r3, [pc, #376]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b7de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b7e0:	4b5d      	ldr	r3, [pc, #372]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b7e2:	2180      	movs	r1, #128	@ 0x80
 801b7e4:	0049      	lsls	r1, r1, #1
 801b7e6:	430a      	orrs	r2, r1
 801b7e8:	651a      	str	r2, [r3, #80]	@ 0x50
 801b7ea:	e00b      	b.n	801b804 <HAL_RCC_OscConfig+0x534>
 801b7ec:	4b5a      	ldr	r3, [pc, #360]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b7ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b7f0:	4b59      	ldr	r3, [pc, #356]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b7f2:	495b      	ldr	r1, [pc, #364]	@ (801b960 <HAL_RCC_OscConfig+0x690>)
 801b7f4:	400a      	ands	r2, r1
 801b7f6:	651a      	str	r2, [r3, #80]	@ 0x50
 801b7f8:	4b57      	ldr	r3, [pc, #348]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b7fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b7fc:	4b56      	ldr	r3, [pc, #344]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b7fe:	495a      	ldr	r1, [pc, #360]	@ (801b968 <HAL_RCC_OscConfig+0x698>)
 801b800:	400a      	ands	r2, r1
 801b802:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	689b      	ldr	r3, [r3, #8]
 801b808:	2b00      	cmp	r3, #0
 801b80a:	d015      	beq.n	801b838 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b80c:	f7f9 f8d4 	bl	80149b8 <HAL_GetTick>
 801b810:	0003      	movs	r3, r0
 801b812:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b814:	e009      	b.n	801b82a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b816:	f7f9 f8cf 	bl	80149b8 <HAL_GetTick>
 801b81a:	0002      	movs	r2, r0
 801b81c:	697b      	ldr	r3, [r7, #20]
 801b81e:	1ad3      	subs	r3, r2, r3
 801b820:	4a52      	ldr	r2, [pc, #328]	@ (801b96c <HAL_RCC_OscConfig+0x69c>)
 801b822:	4293      	cmp	r3, r2
 801b824:	d901      	bls.n	801b82a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801b826:	2303      	movs	r3, #3
 801b828:	e11b      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b82a:	4b4b      	ldr	r3, [pc, #300]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b82c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b82e:	2380      	movs	r3, #128	@ 0x80
 801b830:	009b      	lsls	r3, r3, #2
 801b832:	4013      	ands	r3, r2
 801b834:	d0ef      	beq.n	801b816 <HAL_RCC_OscConfig+0x546>
 801b836:	e014      	b.n	801b862 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b838:	f7f9 f8be 	bl	80149b8 <HAL_GetTick>
 801b83c:	0003      	movs	r3, r0
 801b83e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b840:	e009      	b.n	801b856 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b842:	f7f9 f8b9 	bl	80149b8 <HAL_GetTick>
 801b846:	0002      	movs	r2, r0
 801b848:	697b      	ldr	r3, [r7, #20]
 801b84a:	1ad3      	subs	r3, r2, r3
 801b84c:	4a47      	ldr	r2, [pc, #284]	@ (801b96c <HAL_RCC_OscConfig+0x69c>)
 801b84e:	4293      	cmp	r3, r2
 801b850:	d901      	bls.n	801b856 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801b852:	2303      	movs	r3, #3
 801b854:	e105      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b856:	4b40      	ldr	r3, [pc, #256]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b858:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b85a:	2380      	movs	r3, #128	@ 0x80
 801b85c:	009b      	lsls	r3, r3, #2
 801b85e:	4013      	ands	r3, r2
 801b860:	d1ef      	bne.n	801b842 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801b862:	2323      	movs	r3, #35	@ 0x23
 801b864:	18fb      	adds	r3, r7, r3
 801b866:	781b      	ldrb	r3, [r3, #0]
 801b868:	2b01      	cmp	r3, #1
 801b86a:	d105      	bne.n	801b878 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b86c:	4b3a      	ldr	r3, [pc, #232]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b86e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b870:	4b39      	ldr	r3, [pc, #228]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b872:	493f      	ldr	r1, [pc, #252]	@ (801b970 <HAL_RCC_OscConfig+0x6a0>)
 801b874:	400a      	ands	r2, r1
 801b876:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	681b      	ldr	r3, [r3, #0]
 801b87c:	2220      	movs	r2, #32
 801b87e:	4013      	ands	r3, r2
 801b880:	d049      	beq.n	801b916 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	699b      	ldr	r3, [r3, #24]
 801b886:	2b00      	cmp	r3, #0
 801b888:	d026      	beq.n	801b8d8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801b88a:	4b33      	ldr	r3, [pc, #204]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b88c:	689a      	ldr	r2, [r3, #8]
 801b88e:	4b32      	ldr	r3, [pc, #200]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b890:	2101      	movs	r1, #1
 801b892:	430a      	orrs	r2, r1
 801b894:	609a      	str	r2, [r3, #8]
 801b896:	4b30      	ldr	r3, [pc, #192]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b898:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b89a:	4b2f      	ldr	r3, [pc, #188]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b89c:	2101      	movs	r1, #1
 801b89e:	430a      	orrs	r2, r1
 801b8a0:	635a      	str	r2, [r3, #52]	@ 0x34
 801b8a2:	4b34      	ldr	r3, [pc, #208]	@ (801b974 <HAL_RCC_OscConfig+0x6a4>)
 801b8a4:	6a1a      	ldr	r2, [r3, #32]
 801b8a6:	4b33      	ldr	r3, [pc, #204]	@ (801b974 <HAL_RCC_OscConfig+0x6a4>)
 801b8a8:	2180      	movs	r1, #128	@ 0x80
 801b8aa:	0189      	lsls	r1, r1, #6
 801b8ac:	430a      	orrs	r2, r1
 801b8ae:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b8b0:	f7f9 f882 	bl	80149b8 <HAL_GetTick>
 801b8b4:	0003      	movs	r3, r0
 801b8b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b8b8:	e008      	b.n	801b8cc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b8ba:	f7f9 f87d 	bl	80149b8 <HAL_GetTick>
 801b8be:	0002      	movs	r2, r0
 801b8c0:	697b      	ldr	r3, [r7, #20]
 801b8c2:	1ad3      	subs	r3, r2, r3
 801b8c4:	2b02      	cmp	r3, #2
 801b8c6:	d901      	bls.n	801b8cc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801b8c8:	2303      	movs	r3, #3
 801b8ca:	e0ca      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b8cc:	4b22      	ldr	r3, [pc, #136]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b8ce:	689b      	ldr	r3, [r3, #8]
 801b8d0:	2202      	movs	r2, #2
 801b8d2:	4013      	ands	r3, r2
 801b8d4:	d0f1      	beq.n	801b8ba <HAL_RCC_OscConfig+0x5ea>
 801b8d6:	e01e      	b.n	801b916 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801b8d8:	4b1f      	ldr	r3, [pc, #124]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b8da:	689a      	ldr	r2, [r3, #8]
 801b8dc:	4b1e      	ldr	r3, [pc, #120]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b8de:	2101      	movs	r1, #1
 801b8e0:	438a      	bics	r2, r1
 801b8e2:	609a      	str	r2, [r3, #8]
 801b8e4:	4b23      	ldr	r3, [pc, #140]	@ (801b974 <HAL_RCC_OscConfig+0x6a4>)
 801b8e6:	6a1a      	ldr	r2, [r3, #32]
 801b8e8:	4b22      	ldr	r3, [pc, #136]	@ (801b974 <HAL_RCC_OscConfig+0x6a4>)
 801b8ea:	4923      	ldr	r1, [pc, #140]	@ (801b978 <HAL_RCC_OscConfig+0x6a8>)
 801b8ec:	400a      	ands	r2, r1
 801b8ee:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b8f0:	f7f9 f862 	bl	80149b8 <HAL_GetTick>
 801b8f4:	0003      	movs	r3, r0
 801b8f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b8f8:	e008      	b.n	801b90c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b8fa:	f7f9 f85d 	bl	80149b8 <HAL_GetTick>
 801b8fe:	0002      	movs	r2, r0
 801b900:	697b      	ldr	r3, [r7, #20]
 801b902:	1ad3      	subs	r3, r2, r3
 801b904:	2b02      	cmp	r3, #2
 801b906:	d901      	bls.n	801b90c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801b908:	2303      	movs	r3, #3
 801b90a:	e0aa      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b90c:	4b12      	ldr	r3, [pc, #72]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b90e:	689b      	ldr	r3, [r3, #8]
 801b910:	2202      	movs	r2, #2
 801b912:	4013      	ands	r3, r2
 801b914:	d1f1      	bne.n	801b8fa <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d100      	bne.n	801b920 <HAL_RCC_OscConfig+0x650>
 801b91e:	e09f      	b.n	801ba60 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801b920:	69fb      	ldr	r3, [r7, #28]
 801b922:	2b0c      	cmp	r3, #12
 801b924:	d100      	bne.n	801b928 <HAL_RCC_OscConfig+0x658>
 801b926:	e078      	b.n	801ba1a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b92c:	2b02      	cmp	r3, #2
 801b92e:	d159      	bne.n	801b9e4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b930:	4b09      	ldr	r3, [pc, #36]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b932:	681a      	ldr	r2, [r3, #0]
 801b934:	4b08      	ldr	r3, [pc, #32]	@ (801b958 <HAL_RCC_OscConfig+0x688>)
 801b936:	4911      	ldr	r1, [pc, #68]	@ (801b97c <HAL_RCC_OscConfig+0x6ac>)
 801b938:	400a      	ands	r2, r1
 801b93a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b93c:	f7f9 f83c 	bl	80149b8 <HAL_GetTick>
 801b940:	0003      	movs	r3, r0
 801b942:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b944:	e01c      	b.n	801b980 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b946:	f7f9 f837 	bl	80149b8 <HAL_GetTick>
 801b94a:	0002      	movs	r2, r0
 801b94c:	697b      	ldr	r3, [r7, #20]
 801b94e:	1ad3      	subs	r3, r2, r3
 801b950:	2b02      	cmp	r3, #2
 801b952:	d915      	bls.n	801b980 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801b954:	2303      	movs	r3, #3
 801b956:	e084      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
 801b958:	40021000 	.word	0x40021000
 801b95c:	ffff1fff 	.word	0xffff1fff
 801b960:	fffffeff 	.word	0xfffffeff
 801b964:	40007000 	.word	0x40007000
 801b968:	fffffbff 	.word	0xfffffbff
 801b96c:	00001388 	.word	0x00001388
 801b970:	efffffff 	.word	0xefffffff
 801b974:	40010000 	.word	0x40010000
 801b978:	ffffdfff 	.word	0xffffdfff
 801b97c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b980:	4b3a      	ldr	r3, [pc, #232]	@ (801ba6c <HAL_RCC_OscConfig+0x79c>)
 801b982:	681a      	ldr	r2, [r3, #0]
 801b984:	2380      	movs	r3, #128	@ 0x80
 801b986:	049b      	lsls	r3, r3, #18
 801b988:	4013      	ands	r3, r2
 801b98a:	d1dc      	bne.n	801b946 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b98c:	4b37      	ldr	r3, [pc, #220]	@ (801ba6c <HAL_RCC_OscConfig+0x79c>)
 801b98e:	68db      	ldr	r3, [r3, #12]
 801b990:	4a37      	ldr	r2, [pc, #220]	@ (801ba70 <HAL_RCC_OscConfig+0x7a0>)
 801b992:	4013      	ands	r3, r2
 801b994:	0019      	movs	r1, r3
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b99a:	687b      	ldr	r3, [r7, #4]
 801b99c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b99e:	431a      	orrs	r2, r3
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b9a4:	431a      	orrs	r2, r3
 801b9a6:	4b31      	ldr	r3, [pc, #196]	@ (801ba6c <HAL_RCC_OscConfig+0x79c>)
 801b9a8:	430a      	orrs	r2, r1
 801b9aa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b9ac:	4b2f      	ldr	r3, [pc, #188]	@ (801ba6c <HAL_RCC_OscConfig+0x79c>)
 801b9ae:	681a      	ldr	r2, [r3, #0]
 801b9b0:	4b2e      	ldr	r3, [pc, #184]	@ (801ba6c <HAL_RCC_OscConfig+0x79c>)
 801b9b2:	2180      	movs	r1, #128	@ 0x80
 801b9b4:	0449      	lsls	r1, r1, #17
 801b9b6:	430a      	orrs	r2, r1
 801b9b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b9ba:	f7f8 fffd 	bl	80149b8 <HAL_GetTick>
 801b9be:	0003      	movs	r3, r0
 801b9c0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801b9c2:	e008      	b.n	801b9d6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b9c4:	f7f8 fff8 	bl	80149b8 <HAL_GetTick>
 801b9c8:	0002      	movs	r2, r0
 801b9ca:	697b      	ldr	r3, [r7, #20]
 801b9cc:	1ad3      	subs	r3, r2, r3
 801b9ce:	2b02      	cmp	r3, #2
 801b9d0:	d901      	bls.n	801b9d6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801b9d2:	2303      	movs	r3, #3
 801b9d4:	e045      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801b9d6:	4b25      	ldr	r3, [pc, #148]	@ (801ba6c <HAL_RCC_OscConfig+0x79c>)
 801b9d8:	681a      	ldr	r2, [r3, #0]
 801b9da:	2380      	movs	r3, #128	@ 0x80
 801b9dc:	049b      	lsls	r3, r3, #18
 801b9de:	4013      	ands	r3, r2
 801b9e0:	d0f0      	beq.n	801b9c4 <HAL_RCC_OscConfig+0x6f4>
 801b9e2:	e03d      	b.n	801ba60 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b9e4:	4b21      	ldr	r3, [pc, #132]	@ (801ba6c <HAL_RCC_OscConfig+0x79c>)
 801b9e6:	681a      	ldr	r2, [r3, #0]
 801b9e8:	4b20      	ldr	r3, [pc, #128]	@ (801ba6c <HAL_RCC_OscConfig+0x79c>)
 801b9ea:	4922      	ldr	r1, [pc, #136]	@ (801ba74 <HAL_RCC_OscConfig+0x7a4>)
 801b9ec:	400a      	ands	r2, r1
 801b9ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b9f0:	f7f8 ffe2 	bl	80149b8 <HAL_GetTick>
 801b9f4:	0003      	movs	r3, r0
 801b9f6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b9f8:	e008      	b.n	801ba0c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b9fa:	f7f8 ffdd 	bl	80149b8 <HAL_GetTick>
 801b9fe:	0002      	movs	r2, r0
 801ba00:	697b      	ldr	r3, [r7, #20]
 801ba02:	1ad3      	subs	r3, r2, r3
 801ba04:	2b02      	cmp	r3, #2
 801ba06:	d901      	bls.n	801ba0c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801ba08:	2303      	movs	r3, #3
 801ba0a:	e02a      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801ba0c:	4b17      	ldr	r3, [pc, #92]	@ (801ba6c <HAL_RCC_OscConfig+0x79c>)
 801ba0e:	681a      	ldr	r2, [r3, #0]
 801ba10:	2380      	movs	r3, #128	@ 0x80
 801ba12:	049b      	lsls	r3, r3, #18
 801ba14:	4013      	ands	r3, r2
 801ba16:	d1f0      	bne.n	801b9fa <HAL_RCC_OscConfig+0x72a>
 801ba18:	e022      	b.n	801ba60 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba1e:	2b01      	cmp	r3, #1
 801ba20:	d101      	bne.n	801ba26 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801ba22:	2301      	movs	r3, #1
 801ba24:	e01d      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801ba26:	4b11      	ldr	r3, [pc, #68]	@ (801ba6c <HAL_RCC_OscConfig+0x79c>)
 801ba28:	68db      	ldr	r3, [r3, #12]
 801ba2a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801ba2c:	69ba      	ldr	r2, [r7, #24]
 801ba2e:	2380      	movs	r3, #128	@ 0x80
 801ba30:	025b      	lsls	r3, r3, #9
 801ba32:	401a      	ands	r2, r3
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba38:	429a      	cmp	r2, r3
 801ba3a:	d10f      	bne.n	801ba5c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801ba3c:	69ba      	ldr	r2, [r7, #24]
 801ba3e:	23f0      	movs	r3, #240	@ 0xf0
 801ba40:	039b      	lsls	r3, r3, #14
 801ba42:	401a      	ands	r2, r3
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801ba48:	429a      	cmp	r2, r3
 801ba4a:	d107      	bne.n	801ba5c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801ba4c:	69ba      	ldr	r2, [r7, #24]
 801ba4e:	23c0      	movs	r3, #192	@ 0xc0
 801ba50:	041b      	lsls	r3, r3, #16
 801ba52:	401a      	ands	r2, r3
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801ba58:	429a      	cmp	r2, r3
 801ba5a:	d001      	beq.n	801ba60 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801ba5c:	2301      	movs	r3, #1
 801ba5e:	e000      	b.n	801ba62 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801ba60:	2300      	movs	r3, #0
}
 801ba62:	0018      	movs	r0, r3
 801ba64:	46bd      	mov	sp, r7
 801ba66:	b00a      	add	sp, #40	@ 0x28
 801ba68:	bdb0      	pop	{r4, r5, r7, pc}
 801ba6a:	46c0      	nop			@ (mov r8, r8)
 801ba6c:	40021000 	.word	0x40021000
 801ba70:	ff02ffff 	.word	0xff02ffff
 801ba74:	feffffff 	.word	0xfeffffff

0801ba78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801ba78:	b5b0      	push	{r4, r5, r7, lr}
 801ba7a:	b084      	sub	sp, #16
 801ba7c:	af00      	add	r7, sp, #0
 801ba7e:	6078      	str	r0, [r7, #4]
 801ba80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d101      	bne.n	801ba8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801ba88:	2301      	movs	r3, #1
 801ba8a:	e128      	b.n	801bcde <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801ba8c:	4b96      	ldr	r3, [pc, #600]	@ (801bce8 <HAL_RCC_ClockConfig+0x270>)
 801ba8e:	681b      	ldr	r3, [r3, #0]
 801ba90:	2201      	movs	r2, #1
 801ba92:	4013      	ands	r3, r2
 801ba94:	683a      	ldr	r2, [r7, #0]
 801ba96:	429a      	cmp	r2, r3
 801ba98:	d91e      	bls.n	801bad8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ba9a:	4b93      	ldr	r3, [pc, #588]	@ (801bce8 <HAL_RCC_ClockConfig+0x270>)
 801ba9c:	681b      	ldr	r3, [r3, #0]
 801ba9e:	2201      	movs	r2, #1
 801baa0:	4393      	bics	r3, r2
 801baa2:	0019      	movs	r1, r3
 801baa4:	4b90      	ldr	r3, [pc, #576]	@ (801bce8 <HAL_RCC_ClockConfig+0x270>)
 801baa6:	683a      	ldr	r2, [r7, #0]
 801baa8:	430a      	orrs	r2, r1
 801baaa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801baac:	f7f8 ff84 	bl	80149b8 <HAL_GetTick>
 801bab0:	0003      	movs	r3, r0
 801bab2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bab4:	e009      	b.n	801baca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bab6:	f7f8 ff7f 	bl	80149b8 <HAL_GetTick>
 801baba:	0002      	movs	r2, r0
 801babc:	68fb      	ldr	r3, [r7, #12]
 801babe:	1ad3      	subs	r3, r2, r3
 801bac0:	4a8a      	ldr	r2, [pc, #552]	@ (801bcec <HAL_RCC_ClockConfig+0x274>)
 801bac2:	4293      	cmp	r3, r2
 801bac4:	d901      	bls.n	801baca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801bac6:	2303      	movs	r3, #3
 801bac8:	e109      	b.n	801bcde <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801baca:	4b87      	ldr	r3, [pc, #540]	@ (801bce8 <HAL_RCC_ClockConfig+0x270>)
 801bacc:	681b      	ldr	r3, [r3, #0]
 801bace:	2201      	movs	r2, #1
 801bad0:	4013      	ands	r3, r2
 801bad2:	683a      	ldr	r2, [r7, #0]
 801bad4:	429a      	cmp	r2, r3
 801bad6:	d1ee      	bne.n	801bab6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	681b      	ldr	r3, [r3, #0]
 801badc:	2202      	movs	r2, #2
 801bade:	4013      	ands	r3, r2
 801bae0:	d009      	beq.n	801baf6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801bae2:	4b83      	ldr	r3, [pc, #524]	@ (801bcf0 <HAL_RCC_ClockConfig+0x278>)
 801bae4:	68db      	ldr	r3, [r3, #12]
 801bae6:	22f0      	movs	r2, #240	@ 0xf0
 801bae8:	4393      	bics	r3, r2
 801baea:	0019      	movs	r1, r3
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	689a      	ldr	r2, [r3, #8]
 801baf0:	4b7f      	ldr	r3, [pc, #508]	@ (801bcf0 <HAL_RCC_ClockConfig+0x278>)
 801baf2:	430a      	orrs	r2, r1
 801baf4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	2201      	movs	r2, #1
 801bafc:	4013      	ands	r3, r2
 801bafe:	d100      	bne.n	801bb02 <HAL_RCC_ClockConfig+0x8a>
 801bb00:	e089      	b.n	801bc16 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	685b      	ldr	r3, [r3, #4]
 801bb06:	2b02      	cmp	r3, #2
 801bb08:	d107      	bne.n	801bb1a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801bb0a:	4b79      	ldr	r3, [pc, #484]	@ (801bcf0 <HAL_RCC_ClockConfig+0x278>)
 801bb0c:	681a      	ldr	r2, [r3, #0]
 801bb0e:	2380      	movs	r3, #128	@ 0x80
 801bb10:	029b      	lsls	r3, r3, #10
 801bb12:	4013      	ands	r3, r2
 801bb14:	d120      	bne.n	801bb58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801bb16:	2301      	movs	r3, #1
 801bb18:	e0e1      	b.n	801bcde <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	685b      	ldr	r3, [r3, #4]
 801bb1e:	2b03      	cmp	r3, #3
 801bb20:	d107      	bne.n	801bb32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801bb22:	4b73      	ldr	r3, [pc, #460]	@ (801bcf0 <HAL_RCC_ClockConfig+0x278>)
 801bb24:	681a      	ldr	r2, [r3, #0]
 801bb26:	2380      	movs	r3, #128	@ 0x80
 801bb28:	049b      	lsls	r3, r3, #18
 801bb2a:	4013      	ands	r3, r2
 801bb2c:	d114      	bne.n	801bb58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801bb2e:	2301      	movs	r3, #1
 801bb30:	e0d5      	b.n	801bcde <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	685b      	ldr	r3, [r3, #4]
 801bb36:	2b01      	cmp	r3, #1
 801bb38:	d106      	bne.n	801bb48 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bb3a:	4b6d      	ldr	r3, [pc, #436]	@ (801bcf0 <HAL_RCC_ClockConfig+0x278>)
 801bb3c:	681b      	ldr	r3, [r3, #0]
 801bb3e:	2204      	movs	r2, #4
 801bb40:	4013      	ands	r3, r2
 801bb42:	d109      	bne.n	801bb58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801bb44:	2301      	movs	r3, #1
 801bb46:	e0ca      	b.n	801bcde <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801bb48:	4b69      	ldr	r3, [pc, #420]	@ (801bcf0 <HAL_RCC_ClockConfig+0x278>)
 801bb4a:	681a      	ldr	r2, [r3, #0]
 801bb4c:	2380      	movs	r3, #128	@ 0x80
 801bb4e:	009b      	lsls	r3, r3, #2
 801bb50:	4013      	ands	r3, r2
 801bb52:	d101      	bne.n	801bb58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801bb54:	2301      	movs	r3, #1
 801bb56:	e0c2      	b.n	801bcde <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801bb58:	4b65      	ldr	r3, [pc, #404]	@ (801bcf0 <HAL_RCC_ClockConfig+0x278>)
 801bb5a:	68db      	ldr	r3, [r3, #12]
 801bb5c:	2203      	movs	r2, #3
 801bb5e:	4393      	bics	r3, r2
 801bb60:	0019      	movs	r1, r3
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	685a      	ldr	r2, [r3, #4]
 801bb66:	4b62      	ldr	r3, [pc, #392]	@ (801bcf0 <HAL_RCC_ClockConfig+0x278>)
 801bb68:	430a      	orrs	r2, r1
 801bb6a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801bb6c:	f7f8 ff24 	bl	80149b8 <HAL_GetTick>
 801bb70:	0003      	movs	r3, r0
 801bb72:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	685b      	ldr	r3, [r3, #4]
 801bb78:	2b02      	cmp	r3, #2
 801bb7a:	d111      	bne.n	801bba0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801bb7c:	e009      	b.n	801bb92 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bb7e:	f7f8 ff1b 	bl	80149b8 <HAL_GetTick>
 801bb82:	0002      	movs	r2, r0
 801bb84:	68fb      	ldr	r3, [r7, #12]
 801bb86:	1ad3      	subs	r3, r2, r3
 801bb88:	4a58      	ldr	r2, [pc, #352]	@ (801bcec <HAL_RCC_ClockConfig+0x274>)
 801bb8a:	4293      	cmp	r3, r2
 801bb8c:	d901      	bls.n	801bb92 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801bb8e:	2303      	movs	r3, #3
 801bb90:	e0a5      	b.n	801bcde <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801bb92:	4b57      	ldr	r3, [pc, #348]	@ (801bcf0 <HAL_RCC_ClockConfig+0x278>)
 801bb94:	68db      	ldr	r3, [r3, #12]
 801bb96:	220c      	movs	r2, #12
 801bb98:	4013      	ands	r3, r2
 801bb9a:	2b08      	cmp	r3, #8
 801bb9c:	d1ef      	bne.n	801bb7e <HAL_RCC_ClockConfig+0x106>
 801bb9e:	e03a      	b.n	801bc16 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	685b      	ldr	r3, [r3, #4]
 801bba4:	2b03      	cmp	r3, #3
 801bba6:	d111      	bne.n	801bbcc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801bba8:	e009      	b.n	801bbbe <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bbaa:	f7f8 ff05 	bl	80149b8 <HAL_GetTick>
 801bbae:	0002      	movs	r2, r0
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	1ad3      	subs	r3, r2, r3
 801bbb4:	4a4d      	ldr	r2, [pc, #308]	@ (801bcec <HAL_RCC_ClockConfig+0x274>)
 801bbb6:	4293      	cmp	r3, r2
 801bbb8:	d901      	bls.n	801bbbe <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801bbba:	2303      	movs	r3, #3
 801bbbc:	e08f      	b.n	801bcde <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801bbbe:	4b4c      	ldr	r3, [pc, #304]	@ (801bcf0 <HAL_RCC_ClockConfig+0x278>)
 801bbc0:	68db      	ldr	r3, [r3, #12]
 801bbc2:	220c      	movs	r2, #12
 801bbc4:	4013      	ands	r3, r2
 801bbc6:	2b0c      	cmp	r3, #12
 801bbc8:	d1ef      	bne.n	801bbaa <HAL_RCC_ClockConfig+0x132>
 801bbca:	e024      	b.n	801bc16 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	685b      	ldr	r3, [r3, #4]
 801bbd0:	2b01      	cmp	r3, #1
 801bbd2:	d11b      	bne.n	801bc0c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801bbd4:	e009      	b.n	801bbea <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bbd6:	f7f8 feef 	bl	80149b8 <HAL_GetTick>
 801bbda:	0002      	movs	r2, r0
 801bbdc:	68fb      	ldr	r3, [r7, #12]
 801bbde:	1ad3      	subs	r3, r2, r3
 801bbe0:	4a42      	ldr	r2, [pc, #264]	@ (801bcec <HAL_RCC_ClockConfig+0x274>)
 801bbe2:	4293      	cmp	r3, r2
 801bbe4:	d901      	bls.n	801bbea <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801bbe6:	2303      	movs	r3, #3
 801bbe8:	e079      	b.n	801bcde <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801bbea:	4b41      	ldr	r3, [pc, #260]	@ (801bcf0 <HAL_RCC_ClockConfig+0x278>)
 801bbec:	68db      	ldr	r3, [r3, #12]
 801bbee:	220c      	movs	r2, #12
 801bbf0:	4013      	ands	r3, r2
 801bbf2:	2b04      	cmp	r3, #4
 801bbf4:	d1ef      	bne.n	801bbd6 <HAL_RCC_ClockConfig+0x15e>
 801bbf6:	e00e      	b.n	801bc16 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bbf8:	f7f8 fede 	bl	80149b8 <HAL_GetTick>
 801bbfc:	0002      	movs	r2, r0
 801bbfe:	68fb      	ldr	r3, [r7, #12]
 801bc00:	1ad3      	subs	r3, r2, r3
 801bc02:	4a3a      	ldr	r2, [pc, #232]	@ (801bcec <HAL_RCC_ClockConfig+0x274>)
 801bc04:	4293      	cmp	r3, r2
 801bc06:	d901      	bls.n	801bc0c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801bc08:	2303      	movs	r3, #3
 801bc0a:	e068      	b.n	801bcde <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801bc0c:	4b38      	ldr	r3, [pc, #224]	@ (801bcf0 <HAL_RCC_ClockConfig+0x278>)
 801bc0e:	68db      	ldr	r3, [r3, #12]
 801bc10:	220c      	movs	r2, #12
 801bc12:	4013      	ands	r3, r2
 801bc14:	d1f0      	bne.n	801bbf8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801bc16:	4b34      	ldr	r3, [pc, #208]	@ (801bce8 <HAL_RCC_ClockConfig+0x270>)
 801bc18:	681b      	ldr	r3, [r3, #0]
 801bc1a:	2201      	movs	r2, #1
 801bc1c:	4013      	ands	r3, r2
 801bc1e:	683a      	ldr	r2, [r7, #0]
 801bc20:	429a      	cmp	r2, r3
 801bc22:	d21e      	bcs.n	801bc62 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bc24:	4b30      	ldr	r3, [pc, #192]	@ (801bce8 <HAL_RCC_ClockConfig+0x270>)
 801bc26:	681b      	ldr	r3, [r3, #0]
 801bc28:	2201      	movs	r2, #1
 801bc2a:	4393      	bics	r3, r2
 801bc2c:	0019      	movs	r1, r3
 801bc2e:	4b2e      	ldr	r3, [pc, #184]	@ (801bce8 <HAL_RCC_ClockConfig+0x270>)
 801bc30:	683a      	ldr	r2, [r7, #0]
 801bc32:	430a      	orrs	r2, r1
 801bc34:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801bc36:	f7f8 febf 	bl	80149b8 <HAL_GetTick>
 801bc3a:	0003      	movs	r3, r0
 801bc3c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bc3e:	e009      	b.n	801bc54 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bc40:	f7f8 feba 	bl	80149b8 <HAL_GetTick>
 801bc44:	0002      	movs	r2, r0
 801bc46:	68fb      	ldr	r3, [r7, #12]
 801bc48:	1ad3      	subs	r3, r2, r3
 801bc4a:	4a28      	ldr	r2, [pc, #160]	@ (801bcec <HAL_RCC_ClockConfig+0x274>)
 801bc4c:	4293      	cmp	r3, r2
 801bc4e:	d901      	bls.n	801bc54 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801bc50:	2303      	movs	r3, #3
 801bc52:	e044      	b.n	801bcde <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bc54:	4b24      	ldr	r3, [pc, #144]	@ (801bce8 <HAL_RCC_ClockConfig+0x270>)
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	2201      	movs	r2, #1
 801bc5a:	4013      	ands	r3, r2
 801bc5c:	683a      	ldr	r2, [r7, #0]
 801bc5e:	429a      	cmp	r2, r3
 801bc60:	d1ee      	bne.n	801bc40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	2204      	movs	r2, #4
 801bc68:	4013      	ands	r3, r2
 801bc6a:	d009      	beq.n	801bc80 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801bc6c:	4b20      	ldr	r3, [pc, #128]	@ (801bcf0 <HAL_RCC_ClockConfig+0x278>)
 801bc6e:	68db      	ldr	r3, [r3, #12]
 801bc70:	4a20      	ldr	r2, [pc, #128]	@ (801bcf4 <HAL_RCC_ClockConfig+0x27c>)
 801bc72:	4013      	ands	r3, r2
 801bc74:	0019      	movs	r1, r3
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	68da      	ldr	r2, [r3, #12]
 801bc7a:	4b1d      	ldr	r3, [pc, #116]	@ (801bcf0 <HAL_RCC_ClockConfig+0x278>)
 801bc7c:	430a      	orrs	r2, r1
 801bc7e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	681b      	ldr	r3, [r3, #0]
 801bc84:	2208      	movs	r2, #8
 801bc86:	4013      	ands	r3, r2
 801bc88:	d00a      	beq.n	801bca0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801bc8a:	4b19      	ldr	r3, [pc, #100]	@ (801bcf0 <HAL_RCC_ClockConfig+0x278>)
 801bc8c:	68db      	ldr	r3, [r3, #12]
 801bc8e:	4a1a      	ldr	r2, [pc, #104]	@ (801bcf8 <HAL_RCC_ClockConfig+0x280>)
 801bc90:	4013      	ands	r3, r2
 801bc92:	0019      	movs	r1, r3
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	691b      	ldr	r3, [r3, #16]
 801bc98:	00da      	lsls	r2, r3, #3
 801bc9a:	4b15      	ldr	r3, [pc, #84]	@ (801bcf0 <HAL_RCC_ClockConfig+0x278>)
 801bc9c:	430a      	orrs	r2, r1
 801bc9e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801bca0:	f000 f832 	bl	801bd08 <HAL_RCC_GetSysClockFreq>
 801bca4:	0001      	movs	r1, r0
 801bca6:	4b12      	ldr	r3, [pc, #72]	@ (801bcf0 <HAL_RCC_ClockConfig+0x278>)
 801bca8:	68db      	ldr	r3, [r3, #12]
 801bcaa:	091b      	lsrs	r3, r3, #4
 801bcac:	220f      	movs	r2, #15
 801bcae:	4013      	ands	r3, r2
 801bcb0:	4a12      	ldr	r2, [pc, #72]	@ (801bcfc <HAL_RCC_ClockConfig+0x284>)
 801bcb2:	5cd3      	ldrb	r3, [r2, r3]
 801bcb4:	000a      	movs	r2, r1
 801bcb6:	40da      	lsrs	r2, r3
 801bcb8:	4b11      	ldr	r3, [pc, #68]	@ (801bd00 <HAL_RCC_ClockConfig+0x288>)
 801bcba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801bcbc:	4b11      	ldr	r3, [pc, #68]	@ (801bd04 <HAL_RCC_ClockConfig+0x28c>)
 801bcbe:	681b      	ldr	r3, [r3, #0]
 801bcc0:	250b      	movs	r5, #11
 801bcc2:	197c      	adds	r4, r7, r5
 801bcc4:	0018      	movs	r0, r3
 801bcc6:	f7f8 fe31 	bl	801492c <HAL_InitTick>
 801bcca:	0003      	movs	r3, r0
 801bccc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801bcce:	197b      	adds	r3, r7, r5
 801bcd0:	781b      	ldrb	r3, [r3, #0]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	d002      	beq.n	801bcdc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801bcd6:	197b      	adds	r3, r7, r5
 801bcd8:	781b      	ldrb	r3, [r3, #0]
 801bcda:	e000      	b.n	801bcde <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801bcdc:	2300      	movs	r3, #0
}
 801bcde:	0018      	movs	r0, r3
 801bce0:	46bd      	mov	sp, r7
 801bce2:	b004      	add	sp, #16
 801bce4:	bdb0      	pop	{r4, r5, r7, pc}
 801bce6:	46c0      	nop			@ (mov r8, r8)
 801bce8:	40022000 	.word	0x40022000
 801bcec:	00001388 	.word	0x00001388
 801bcf0:	40021000 	.word	0x40021000
 801bcf4:	fffff8ff 	.word	0xfffff8ff
 801bcf8:	ffffc7ff 	.word	0xffffc7ff
 801bcfc:	0802e894 	.word	0x0802e894
 801bd00:	200000ec 	.word	0x200000ec
 801bd04:	200000fc 	.word	0x200000fc

0801bd08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801bd08:	b5b0      	push	{r4, r5, r7, lr}
 801bd0a:	b08e      	sub	sp, #56	@ 0x38
 801bd0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801bd0e:	4b4c      	ldr	r3, [pc, #304]	@ (801be40 <HAL_RCC_GetSysClockFreq+0x138>)
 801bd10:	68db      	ldr	r3, [r3, #12]
 801bd12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801bd14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bd16:	230c      	movs	r3, #12
 801bd18:	4013      	ands	r3, r2
 801bd1a:	2b0c      	cmp	r3, #12
 801bd1c:	d014      	beq.n	801bd48 <HAL_RCC_GetSysClockFreq+0x40>
 801bd1e:	d900      	bls.n	801bd22 <HAL_RCC_GetSysClockFreq+0x1a>
 801bd20:	e07b      	b.n	801be1a <HAL_RCC_GetSysClockFreq+0x112>
 801bd22:	2b04      	cmp	r3, #4
 801bd24:	d002      	beq.n	801bd2c <HAL_RCC_GetSysClockFreq+0x24>
 801bd26:	2b08      	cmp	r3, #8
 801bd28:	d00b      	beq.n	801bd42 <HAL_RCC_GetSysClockFreq+0x3a>
 801bd2a:	e076      	b.n	801be1a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801bd2c:	4b44      	ldr	r3, [pc, #272]	@ (801be40 <HAL_RCC_GetSysClockFreq+0x138>)
 801bd2e:	681b      	ldr	r3, [r3, #0]
 801bd30:	2210      	movs	r2, #16
 801bd32:	4013      	ands	r3, r2
 801bd34:	d002      	beq.n	801bd3c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801bd36:	4b43      	ldr	r3, [pc, #268]	@ (801be44 <HAL_RCC_GetSysClockFreq+0x13c>)
 801bd38:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801bd3a:	e07c      	b.n	801be36 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801bd3c:	4b42      	ldr	r3, [pc, #264]	@ (801be48 <HAL_RCC_GetSysClockFreq+0x140>)
 801bd3e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bd40:	e079      	b.n	801be36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801bd42:	4b42      	ldr	r3, [pc, #264]	@ (801be4c <HAL_RCC_GetSysClockFreq+0x144>)
 801bd44:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bd46:	e076      	b.n	801be36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801bd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd4a:	0c9a      	lsrs	r2, r3, #18
 801bd4c:	230f      	movs	r3, #15
 801bd4e:	401a      	ands	r2, r3
 801bd50:	4b3f      	ldr	r3, [pc, #252]	@ (801be50 <HAL_RCC_GetSysClockFreq+0x148>)
 801bd52:	5c9b      	ldrb	r3, [r3, r2]
 801bd54:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801bd56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd58:	0d9a      	lsrs	r2, r3, #22
 801bd5a:	2303      	movs	r3, #3
 801bd5c:	4013      	ands	r3, r2
 801bd5e:	3301      	adds	r3, #1
 801bd60:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801bd62:	4b37      	ldr	r3, [pc, #220]	@ (801be40 <HAL_RCC_GetSysClockFreq+0x138>)
 801bd64:	68da      	ldr	r2, [r3, #12]
 801bd66:	2380      	movs	r3, #128	@ 0x80
 801bd68:	025b      	lsls	r3, r3, #9
 801bd6a:	4013      	ands	r3, r2
 801bd6c:	d01a      	beq.n	801bda4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801bd6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd70:	61bb      	str	r3, [r7, #24]
 801bd72:	2300      	movs	r3, #0
 801bd74:	61fb      	str	r3, [r7, #28]
 801bd76:	4a35      	ldr	r2, [pc, #212]	@ (801be4c <HAL_RCC_GetSysClockFreq+0x144>)
 801bd78:	2300      	movs	r3, #0
 801bd7a:	69b8      	ldr	r0, [r7, #24]
 801bd7c:	69f9      	ldr	r1, [r7, #28]
 801bd7e:	f7e4 fc1f 	bl	80005c0 <__aeabi_lmul>
 801bd82:	0002      	movs	r2, r0
 801bd84:	000b      	movs	r3, r1
 801bd86:	0010      	movs	r0, r2
 801bd88:	0019      	movs	r1, r3
 801bd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd8c:	613b      	str	r3, [r7, #16]
 801bd8e:	2300      	movs	r3, #0
 801bd90:	617b      	str	r3, [r7, #20]
 801bd92:	693a      	ldr	r2, [r7, #16]
 801bd94:	697b      	ldr	r3, [r7, #20]
 801bd96:	f7e4 fbf3 	bl	8000580 <__aeabi_uldivmod>
 801bd9a:	0002      	movs	r2, r0
 801bd9c:	000b      	movs	r3, r1
 801bd9e:	0013      	movs	r3, r2
 801bda0:	637b      	str	r3, [r7, #52]	@ 0x34
 801bda2:	e037      	b.n	801be14 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801bda4:	4b26      	ldr	r3, [pc, #152]	@ (801be40 <HAL_RCC_GetSysClockFreq+0x138>)
 801bda6:	681b      	ldr	r3, [r3, #0]
 801bda8:	2210      	movs	r2, #16
 801bdaa:	4013      	ands	r3, r2
 801bdac:	d01a      	beq.n	801bde4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801bdae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdb0:	60bb      	str	r3, [r7, #8]
 801bdb2:	2300      	movs	r3, #0
 801bdb4:	60fb      	str	r3, [r7, #12]
 801bdb6:	4a23      	ldr	r2, [pc, #140]	@ (801be44 <HAL_RCC_GetSysClockFreq+0x13c>)
 801bdb8:	2300      	movs	r3, #0
 801bdba:	68b8      	ldr	r0, [r7, #8]
 801bdbc:	68f9      	ldr	r1, [r7, #12]
 801bdbe:	f7e4 fbff 	bl	80005c0 <__aeabi_lmul>
 801bdc2:	0002      	movs	r2, r0
 801bdc4:	000b      	movs	r3, r1
 801bdc6:	0010      	movs	r0, r2
 801bdc8:	0019      	movs	r1, r3
 801bdca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdcc:	603b      	str	r3, [r7, #0]
 801bdce:	2300      	movs	r3, #0
 801bdd0:	607b      	str	r3, [r7, #4]
 801bdd2:	683a      	ldr	r2, [r7, #0]
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	f7e4 fbd3 	bl	8000580 <__aeabi_uldivmod>
 801bdda:	0002      	movs	r2, r0
 801bddc:	000b      	movs	r3, r1
 801bdde:	0013      	movs	r3, r2
 801bde0:	637b      	str	r3, [r7, #52]	@ 0x34
 801bde2:	e017      	b.n	801be14 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801bde4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bde6:	0018      	movs	r0, r3
 801bde8:	2300      	movs	r3, #0
 801bdea:	0019      	movs	r1, r3
 801bdec:	4a16      	ldr	r2, [pc, #88]	@ (801be48 <HAL_RCC_GetSysClockFreq+0x140>)
 801bdee:	2300      	movs	r3, #0
 801bdf0:	f7e4 fbe6 	bl	80005c0 <__aeabi_lmul>
 801bdf4:	0002      	movs	r2, r0
 801bdf6:	000b      	movs	r3, r1
 801bdf8:	0010      	movs	r0, r2
 801bdfa:	0019      	movs	r1, r3
 801bdfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdfe:	001c      	movs	r4, r3
 801be00:	2300      	movs	r3, #0
 801be02:	001d      	movs	r5, r3
 801be04:	0022      	movs	r2, r4
 801be06:	002b      	movs	r3, r5
 801be08:	f7e4 fbba 	bl	8000580 <__aeabi_uldivmod>
 801be0c:	0002      	movs	r2, r0
 801be0e:	000b      	movs	r3, r1
 801be10:	0013      	movs	r3, r2
 801be12:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801be14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801be16:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801be18:	e00d      	b.n	801be36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801be1a:	4b09      	ldr	r3, [pc, #36]	@ (801be40 <HAL_RCC_GetSysClockFreq+0x138>)
 801be1c:	685b      	ldr	r3, [r3, #4]
 801be1e:	0b5b      	lsrs	r3, r3, #13
 801be20:	2207      	movs	r2, #7
 801be22:	4013      	ands	r3, r2
 801be24:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801be26:	6a3b      	ldr	r3, [r7, #32]
 801be28:	3301      	adds	r3, #1
 801be2a:	2280      	movs	r2, #128	@ 0x80
 801be2c:	0212      	lsls	r2, r2, #8
 801be2e:	409a      	lsls	r2, r3
 801be30:	0013      	movs	r3, r2
 801be32:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801be34:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801be36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801be38:	0018      	movs	r0, r3
 801be3a:	46bd      	mov	sp, r7
 801be3c:	b00e      	add	sp, #56	@ 0x38
 801be3e:	bdb0      	pop	{r4, r5, r7, pc}
 801be40:	40021000 	.word	0x40021000
 801be44:	003d0900 	.word	0x003d0900
 801be48:	00f42400 	.word	0x00f42400
 801be4c:	007a1200 	.word	0x007a1200
 801be50:	0802e8ac 	.word	0x0802e8ac

0801be54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801be54:	b580      	push	{r7, lr}
 801be56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801be58:	4b02      	ldr	r3, [pc, #8]	@ (801be64 <HAL_RCC_GetHCLKFreq+0x10>)
 801be5a:	681b      	ldr	r3, [r3, #0]
}
 801be5c:	0018      	movs	r0, r3
 801be5e:	46bd      	mov	sp, r7
 801be60:	bd80      	pop	{r7, pc}
 801be62:	46c0      	nop			@ (mov r8, r8)
 801be64:	200000ec 	.word	0x200000ec

0801be68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801be68:	b580      	push	{r7, lr}
 801be6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801be6c:	f7ff fff2 	bl	801be54 <HAL_RCC_GetHCLKFreq>
 801be70:	0001      	movs	r1, r0
 801be72:	4b06      	ldr	r3, [pc, #24]	@ (801be8c <HAL_RCC_GetPCLK1Freq+0x24>)
 801be74:	68db      	ldr	r3, [r3, #12]
 801be76:	0a1b      	lsrs	r3, r3, #8
 801be78:	2207      	movs	r2, #7
 801be7a:	4013      	ands	r3, r2
 801be7c:	4a04      	ldr	r2, [pc, #16]	@ (801be90 <HAL_RCC_GetPCLK1Freq+0x28>)
 801be7e:	5cd3      	ldrb	r3, [r2, r3]
 801be80:	40d9      	lsrs	r1, r3
 801be82:	000b      	movs	r3, r1
}
 801be84:	0018      	movs	r0, r3
 801be86:	46bd      	mov	sp, r7
 801be88:	bd80      	pop	{r7, pc}
 801be8a:	46c0      	nop			@ (mov r8, r8)
 801be8c:	40021000 	.word	0x40021000
 801be90:	0802e8a4 	.word	0x0802e8a4

0801be94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801be94:	b580      	push	{r7, lr}
 801be96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801be98:	f7ff ffdc 	bl	801be54 <HAL_RCC_GetHCLKFreq>
 801be9c:	0001      	movs	r1, r0
 801be9e:	4b06      	ldr	r3, [pc, #24]	@ (801beb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 801bea0:	68db      	ldr	r3, [r3, #12]
 801bea2:	0adb      	lsrs	r3, r3, #11
 801bea4:	2207      	movs	r2, #7
 801bea6:	4013      	ands	r3, r2
 801bea8:	4a04      	ldr	r2, [pc, #16]	@ (801bebc <HAL_RCC_GetPCLK2Freq+0x28>)
 801beaa:	5cd3      	ldrb	r3, [r2, r3]
 801beac:	40d9      	lsrs	r1, r3
 801beae:	000b      	movs	r3, r1
}
 801beb0:	0018      	movs	r0, r3
 801beb2:	46bd      	mov	sp, r7
 801beb4:	bd80      	pop	{r7, pc}
 801beb6:	46c0      	nop			@ (mov r8, r8)
 801beb8:	40021000 	.word	0x40021000
 801bebc:	0802e8a4 	.word	0x0802e8a4

0801bec0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801bec0:	b580      	push	{r7, lr}
 801bec2:	b086      	sub	sp, #24
 801bec4:	af00      	add	r7, sp, #0
 801bec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801bec8:	2017      	movs	r0, #23
 801beca:	183b      	adds	r3, r7, r0
 801becc:	2200      	movs	r2, #0
 801bece:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	681b      	ldr	r3, [r3, #0]
 801bed4:	2220      	movs	r2, #32
 801bed6:	4013      	ands	r3, r2
 801bed8:	d100      	bne.n	801bedc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801beda:	e0c7      	b.n	801c06c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801bedc:	4b9b      	ldr	r3, [pc, #620]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bede:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bee0:	2380      	movs	r3, #128	@ 0x80
 801bee2:	055b      	lsls	r3, r3, #21
 801bee4:	4013      	ands	r3, r2
 801bee6:	d109      	bne.n	801befc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801bee8:	4b98      	ldr	r3, [pc, #608]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801beea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801beec:	4b97      	ldr	r3, [pc, #604]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801beee:	2180      	movs	r1, #128	@ 0x80
 801bef0:	0549      	lsls	r1, r1, #21
 801bef2:	430a      	orrs	r2, r1
 801bef4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801bef6:	183b      	adds	r3, r7, r0
 801bef8:	2201      	movs	r2, #1
 801befa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801befc:	4b94      	ldr	r3, [pc, #592]	@ (801c150 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801befe:	681a      	ldr	r2, [r3, #0]
 801bf00:	2380      	movs	r3, #128	@ 0x80
 801bf02:	005b      	lsls	r3, r3, #1
 801bf04:	4013      	ands	r3, r2
 801bf06:	d11a      	bne.n	801bf3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801bf08:	4b91      	ldr	r3, [pc, #580]	@ (801c150 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801bf0a:	681a      	ldr	r2, [r3, #0]
 801bf0c:	4b90      	ldr	r3, [pc, #576]	@ (801c150 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801bf0e:	2180      	movs	r1, #128	@ 0x80
 801bf10:	0049      	lsls	r1, r1, #1
 801bf12:	430a      	orrs	r2, r1
 801bf14:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801bf16:	f7f8 fd4f 	bl	80149b8 <HAL_GetTick>
 801bf1a:	0003      	movs	r3, r0
 801bf1c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bf1e:	e008      	b.n	801bf32 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801bf20:	f7f8 fd4a 	bl	80149b8 <HAL_GetTick>
 801bf24:	0002      	movs	r2, r0
 801bf26:	693b      	ldr	r3, [r7, #16]
 801bf28:	1ad3      	subs	r3, r2, r3
 801bf2a:	2b64      	cmp	r3, #100	@ 0x64
 801bf2c:	d901      	bls.n	801bf32 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801bf2e:	2303      	movs	r3, #3
 801bf30:	e107      	b.n	801c142 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bf32:	4b87      	ldr	r3, [pc, #540]	@ (801c150 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801bf34:	681a      	ldr	r2, [r3, #0]
 801bf36:	2380      	movs	r3, #128	@ 0x80
 801bf38:	005b      	lsls	r3, r3, #1
 801bf3a:	4013      	ands	r3, r2
 801bf3c:	d0f0      	beq.n	801bf20 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801bf3e:	4b83      	ldr	r3, [pc, #524]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf40:	681a      	ldr	r2, [r3, #0]
 801bf42:	23c0      	movs	r3, #192	@ 0xc0
 801bf44:	039b      	lsls	r3, r3, #14
 801bf46:	4013      	ands	r3, r2
 801bf48:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	685a      	ldr	r2, [r3, #4]
 801bf4e:	23c0      	movs	r3, #192	@ 0xc0
 801bf50:	039b      	lsls	r3, r3, #14
 801bf52:	4013      	ands	r3, r2
 801bf54:	68fa      	ldr	r2, [r7, #12]
 801bf56:	429a      	cmp	r2, r3
 801bf58:	d013      	beq.n	801bf82 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	685a      	ldr	r2, [r3, #4]
 801bf5e:	23c0      	movs	r3, #192	@ 0xc0
 801bf60:	029b      	lsls	r3, r3, #10
 801bf62:	401a      	ands	r2, r3
 801bf64:	23c0      	movs	r3, #192	@ 0xc0
 801bf66:	029b      	lsls	r3, r3, #10
 801bf68:	429a      	cmp	r2, r3
 801bf6a:	d10a      	bne.n	801bf82 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801bf6c:	4b77      	ldr	r3, [pc, #476]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf6e:	681a      	ldr	r2, [r3, #0]
 801bf70:	2380      	movs	r3, #128	@ 0x80
 801bf72:	029b      	lsls	r3, r3, #10
 801bf74:	401a      	ands	r2, r3
 801bf76:	2380      	movs	r3, #128	@ 0x80
 801bf78:	029b      	lsls	r3, r3, #10
 801bf7a:	429a      	cmp	r2, r3
 801bf7c:	d101      	bne.n	801bf82 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801bf7e:	2301      	movs	r3, #1
 801bf80:	e0df      	b.n	801c142 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801bf82:	4b72      	ldr	r3, [pc, #456]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bf84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bf86:	23c0      	movs	r3, #192	@ 0xc0
 801bf88:	029b      	lsls	r3, r3, #10
 801bf8a:	4013      	ands	r3, r2
 801bf8c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801bf8e:	68fb      	ldr	r3, [r7, #12]
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d03b      	beq.n	801c00c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	685a      	ldr	r2, [r3, #4]
 801bf98:	23c0      	movs	r3, #192	@ 0xc0
 801bf9a:	029b      	lsls	r3, r3, #10
 801bf9c:	4013      	ands	r3, r2
 801bf9e:	68fa      	ldr	r2, [r7, #12]
 801bfa0:	429a      	cmp	r2, r3
 801bfa2:	d033      	beq.n	801c00c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	681b      	ldr	r3, [r3, #0]
 801bfa8:	2220      	movs	r2, #32
 801bfaa:	4013      	ands	r3, r2
 801bfac:	d02e      	beq.n	801c00c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801bfae:	4b67      	ldr	r3, [pc, #412]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bfb2:	4a68      	ldr	r2, [pc, #416]	@ (801c154 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801bfb4:	4013      	ands	r3, r2
 801bfb6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801bfb8:	4b64      	ldr	r3, [pc, #400]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bfbc:	4b63      	ldr	r3, [pc, #396]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfbe:	2180      	movs	r1, #128	@ 0x80
 801bfc0:	0309      	lsls	r1, r1, #12
 801bfc2:	430a      	orrs	r2, r1
 801bfc4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801bfc6:	4b61      	ldr	r3, [pc, #388]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bfca:	4b60      	ldr	r3, [pc, #384]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfcc:	4962      	ldr	r1, [pc, #392]	@ (801c158 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801bfce:	400a      	ands	r2, r1
 801bfd0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801bfd2:	4b5e      	ldr	r3, [pc, #376]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfd4:	68fa      	ldr	r2, [r7, #12]
 801bfd6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801bfd8:	68fa      	ldr	r2, [r7, #12]
 801bfda:	2380      	movs	r3, #128	@ 0x80
 801bfdc:	005b      	lsls	r3, r3, #1
 801bfde:	4013      	ands	r3, r2
 801bfe0:	d014      	beq.n	801c00c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801bfe2:	f7f8 fce9 	bl	80149b8 <HAL_GetTick>
 801bfe6:	0003      	movs	r3, r0
 801bfe8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bfea:	e009      	b.n	801c000 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801bfec:	f7f8 fce4 	bl	80149b8 <HAL_GetTick>
 801bff0:	0002      	movs	r2, r0
 801bff2:	693b      	ldr	r3, [r7, #16]
 801bff4:	1ad3      	subs	r3, r2, r3
 801bff6:	4a59      	ldr	r2, [pc, #356]	@ (801c15c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801bff8:	4293      	cmp	r3, r2
 801bffa:	d901      	bls.n	801c000 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801bffc:	2303      	movs	r3, #3
 801bffe:	e0a0      	b.n	801c142 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c000:	4b52      	ldr	r3, [pc, #328]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c002:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801c004:	2380      	movs	r3, #128	@ 0x80
 801c006:	009b      	lsls	r3, r3, #2
 801c008:	4013      	ands	r3, r2
 801c00a:	d0ef      	beq.n	801bfec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801c00c:	687b      	ldr	r3, [r7, #4]
 801c00e:	681b      	ldr	r3, [r3, #0]
 801c010:	2220      	movs	r2, #32
 801c012:	4013      	ands	r3, r2
 801c014:	d01f      	beq.n	801c056 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	685a      	ldr	r2, [r3, #4]
 801c01a:	23c0      	movs	r3, #192	@ 0xc0
 801c01c:	029b      	lsls	r3, r3, #10
 801c01e:	401a      	ands	r2, r3
 801c020:	23c0      	movs	r3, #192	@ 0xc0
 801c022:	029b      	lsls	r3, r3, #10
 801c024:	429a      	cmp	r2, r3
 801c026:	d10c      	bne.n	801c042 <HAL_RCCEx_PeriphCLKConfig+0x182>
 801c028:	4b48      	ldr	r3, [pc, #288]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c02a:	681b      	ldr	r3, [r3, #0]
 801c02c:	4a4c      	ldr	r2, [pc, #304]	@ (801c160 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801c02e:	4013      	ands	r3, r2
 801c030:	0019      	movs	r1, r3
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	685a      	ldr	r2, [r3, #4]
 801c036:	23c0      	movs	r3, #192	@ 0xc0
 801c038:	039b      	lsls	r3, r3, #14
 801c03a:	401a      	ands	r2, r3
 801c03c:	4b43      	ldr	r3, [pc, #268]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c03e:	430a      	orrs	r2, r1
 801c040:	601a      	str	r2, [r3, #0]
 801c042:	4b42      	ldr	r3, [pc, #264]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c044:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	685a      	ldr	r2, [r3, #4]
 801c04a:	23c0      	movs	r3, #192	@ 0xc0
 801c04c:	029b      	lsls	r3, r3, #10
 801c04e:	401a      	ands	r2, r3
 801c050:	4b3e      	ldr	r3, [pc, #248]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c052:	430a      	orrs	r2, r1
 801c054:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801c056:	2317      	movs	r3, #23
 801c058:	18fb      	adds	r3, r7, r3
 801c05a:	781b      	ldrb	r3, [r3, #0]
 801c05c:	2b01      	cmp	r3, #1
 801c05e:	d105      	bne.n	801c06c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c060:	4b3a      	ldr	r3, [pc, #232]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c062:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c064:	4b39      	ldr	r3, [pc, #228]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c066:	493f      	ldr	r1, [pc, #252]	@ (801c164 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801c068:	400a      	ands	r2, r1
 801c06a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	681b      	ldr	r3, [r3, #0]
 801c070:	2201      	movs	r2, #1
 801c072:	4013      	ands	r3, r2
 801c074:	d009      	beq.n	801c08a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801c076:	4b35      	ldr	r3, [pc, #212]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c07a:	2203      	movs	r2, #3
 801c07c:	4393      	bics	r3, r2
 801c07e:	0019      	movs	r1, r3
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	689a      	ldr	r2, [r3, #8]
 801c084:	4b31      	ldr	r3, [pc, #196]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c086:	430a      	orrs	r2, r1
 801c088:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	2202      	movs	r2, #2
 801c090:	4013      	ands	r3, r2
 801c092:	d009      	beq.n	801c0a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801c094:	4b2d      	ldr	r3, [pc, #180]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c098:	220c      	movs	r2, #12
 801c09a:	4393      	bics	r3, r2
 801c09c:	0019      	movs	r1, r3
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	68da      	ldr	r2, [r3, #12]
 801c0a2:	4b2a      	ldr	r3, [pc, #168]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0a4:	430a      	orrs	r2, r1
 801c0a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801c0a8:	687b      	ldr	r3, [r7, #4]
 801c0aa:	681b      	ldr	r3, [r3, #0]
 801c0ac:	2204      	movs	r2, #4
 801c0ae:	4013      	ands	r3, r2
 801c0b0:	d009      	beq.n	801c0c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801c0b2:	4b26      	ldr	r3, [pc, #152]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c0b6:	4a2c      	ldr	r2, [pc, #176]	@ (801c168 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801c0b8:	4013      	ands	r3, r2
 801c0ba:	0019      	movs	r1, r3
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	691a      	ldr	r2, [r3, #16]
 801c0c0:	4b22      	ldr	r3, [pc, #136]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0c2:	430a      	orrs	r2, r1
 801c0c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	681b      	ldr	r3, [r3, #0]
 801c0ca:	2208      	movs	r2, #8
 801c0cc:	4013      	ands	r3, r2
 801c0ce:	d009      	beq.n	801c0e4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801c0d0:	4b1e      	ldr	r3, [pc, #120]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c0d4:	4a25      	ldr	r2, [pc, #148]	@ (801c16c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801c0d6:	4013      	ands	r3, r2
 801c0d8:	0019      	movs	r1, r3
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	695a      	ldr	r2, [r3, #20]
 801c0de:	4b1b      	ldr	r3, [pc, #108]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0e0:	430a      	orrs	r2, r1
 801c0e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	681a      	ldr	r2, [r3, #0]
 801c0e8:	2380      	movs	r3, #128	@ 0x80
 801c0ea:	005b      	lsls	r3, r3, #1
 801c0ec:	4013      	ands	r3, r2
 801c0ee:	d009      	beq.n	801c104 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801c0f0:	4b16      	ldr	r3, [pc, #88]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c0f4:	4a17      	ldr	r2, [pc, #92]	@ (801c154 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801c0f6:	4013      	ands	r3, r2
 801c0f8:	0019      	movs	r1, r3
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	699a      	ldr	r2, [r3, #24]
 801c0fe:	4b13      	ldr	r3, [pc, #76]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c100:	430a      	orrs	r2, r1
 801c102:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801c104:	687b      	ldr	r3, [r7, #4]
 801c106:	681b      	ldr	r3, [r3, #0]
 801c108:	2240      	movs	r2, #64	@ 0x40
 801c10a:	4013      	ands	r3, r2
 801c10c:	d009      	beq.n	801c122 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801c10e:	4b0f      	ldr	r3, [pc, #60]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c112:	4a17      	ldr	r2, [pc, #92]	@ (801c170 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801c114:	4013      	ands	r3, r2
 801c116:	0019      	movs	r1, r3
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	6a1a      	ldr	r2, [r3, #32]
 801c11c:	4b0b      	ldr	r3, [pc, #44]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c11e:	430a      	orrs	r2, r1
 801c120:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	681b      	ldr	r3, [r3, #0]
 801c126:	2280      	movs	r2, #128	@ 0x80
 801c128:	4013      	ands	r3, r2
 801c12a:	d009      	beq.n	801c140 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801c12c:	4b07      	ldr	r3, [pc, #28]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c12e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c130:	4a10      	ldr	r2, [pc, #64]	@ (801c174 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801c132:	4013      	ands	r3, r2
 801c134:	0019      	movs	r1, r3
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	69da      	ldr	r2, [r3, #28]
 801c13a:	4b04      	ldr	r3, [pc, #16]	@ (801c14c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c13c:	430a      	orrs	r2, r1
 801c13e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801c140:	2300      	movs	r3, #0
}
 801c142:	0018      	movs	r0, r3
 801c144:	46bd      	mov	sp, r7
 801c146:	b006      	add	sp, #24
 801c148:	bd80      	pop	{r7, pc}
 801c14a:	46c0      	nop			@ (mov r8, r8)
 801c14c:	40021000 	.word	0x40021000
 801c150:	40007000 	.word	0x40007000
 801c154:	fffcffff 	.word	0xfffcffff
 801c158:	fff7ffff 	.word	0xfff7ffff
 801c15c:	00001388 	.word	0x00001388
 801c160:	ffcfffff 	.word	0xffcfffff
 801c164:	efffffff 	.word	0xefffffff
 801c168:	fffff3ff 	.word	0xfffff3ff
 801c16c:	ffffcfff 	.word	0xffffcfff
 801c170:	fbffffff 	.word	0xfbffffff
 801c174:	fff3ffff 	.word	0xfff3ffff

0801c178 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801c178:	b5b0      	push	{r4, r5, r7, lr}
 801c17a:	b084      	sub	sp, #16
 801c17c:	af00      	add	r7, sp, #0
 801c17e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801c180:	230f      	movs	r3, #15
 801c182:	18fb      	adds	r3, r7, r3
 801c184:	2201      	movs	r2, #1
 801c186:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	2b00      	cmp	r3, #0
 801c18c:	d101      	bne.n	801c192 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801c18e:	2301      	movs	r3, #1
 801c190:	e088      	b.n	801c2a4 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	2221      	movs	r2, #33	@ 0x21
 801c196:	5c9b      	ldrb	r3, [r3, r2]
 801c198:	b2db      	uxtb	r3, r3
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	d107      	bne.n	801c1ae <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801c19e:	687b      	ldr	r3, [r7, #4]
 801c1a0:	2220      	movs	r2, #32
 801c1a2:	2100      	movs	r1, #0
 801c1a4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	0018      	movs	r0, r3
 801c1aa:	f7f2 fa39 	bl	800e620 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	2221      	movs	r2, #33	@ 0x21
 801c1b2:	2102      	movs	r1, #2
 801c1b4:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	681b      	ldr	r3, [r3, #0]
 801c1ba:	68db      	ldr	r3, [r3, #12]
 801c1bc:	2210      	movs	r2, #16
 801c1be:	4013      	ands	r3, r2
 801c1c0:	2b10      	cmp	r3, #16
 801c1c2:	d05f      	beq.n	801c284 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	681b      	ldr	r3, [r3, #0]
 801c1c8:	22ca      	movs	r2, #202	@ 0xca
 801c1ca:	625a      	str	r2, [r3, #36]	@ 0x24
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	681b      	ldr	r3, [r3, #0]
 801c1d0:	2253      	movs	r2, #83	@ 0x53
 801c1d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801c1d4:	250f      	movs	r5, #15
 801c1d6:	197c      	adds	r4, r7, r5
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	0018      	movs	r0, r3
 801c1dc:	f000 fa99 	bl	801c712 <RTC_EnterInitMode>
 801c1e0:	0003      	movs	r3, r0
 801c1e2:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801c1e4:	0028      	movs	r0, r5
 801c1e6:	183b      	adds	r3, r7, r0
 801c1e8:	781b      	ldrb	r3, [r3, #0]
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d12c      	bne.n	801c248 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	681b      	ldr	r3, [r3, #0]
 801c1f2:	689a      	ldr	r2, [r3, #8]
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	681b      	ldr	r3, [r3, #0]
 801c1f8:	492c      	ldr	r1, [pc, #176]	@ (801c2ac <HAL_RTC_Init+0x134>)
 801c1fa:	400a      	ands	r2, r1
 801c1fc:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	681b      	ldr	r3, [r3, #0]
 801c202:	6899      	ldr	r1, [r3, #8]
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	685a      	ldr	r2, [r3, #4]
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	691b      	ldr	r3, [r3, #16]
 801c20c:	431a      	orrs	r2, r3
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	699b      	ldr	r3, [r3, #24]
 801c212:	431a      	orrs	r2, r3
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	681b      	ldr	r3, [r3, #0]
 801c218:	430a      	orrs	r2, r1
 801c21a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	681b      	ldr	r3, [r3, #0]
 801c220:	687a      	ldr	r2, [r7, #4]
 801c222:	68d2      	ldr	r2, [r2, #12]
 801c224:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	6919      	ldr	r1, [r3, #16]
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	689b      	ldr	r3, [r3, #8]
 801c230:	041a      	lsls	r2, r3, #16
 801c232:	687b      	ldr	r3, [r7, #4]
 801c234:	681b      	ldr	r3, [r3, #0]
 801c236:	430a      	orrs	r2, r1
 801c238:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801c23a:	183c      	adds	r4, r7, r0
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	0018      	movs	r0, r3
 801c240:	f000 faab 	bl	801c79a <RTC_ExitInitMode>
 801c244:	0003      	movs	r3, r0
 801c246:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801c248:	230f      	movs	r3, #15
 801c24a:	18fb      	adds	r3, r7, r3
 801c24c:	781b      	ldrb	r3, [r3, #0]
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d113      	bne.n	801c27a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	681b      	ldr	r3, [r3, #0]
 801c256:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	681b      	ldr	r3, [r3, #0]
 801c25c:	2103      	movs	r1, #3
 801c25e:	438a      	bics	r2, r1
 801c260:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	681b      	ldr	r3, [r3, #0]
 801c266:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801c268:	687b      	ldr	r3, [r7, #4]
 801c26a:	69da      	ldr	r2, [r3, #28]
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	695b      	ldr	r3, [r3, #20]
 801c270:	431a      	orrs	r2, r3
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	681b      	ldr	r3, [r3, #0]
 801c276:	430a      	orrs	r2, r1
 801c278:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	681b      	ldr	r3, [r3, #0]
 801c27e:	22ff      	movs	r2, #255	@ 0xff
 801c280:	625a      	str	r2, [r3, #36]	@ 0x24
 801c282:	e003      	b.n	801c28c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801c284:	230f      	movs	r3, #15
 801c286:	18fb      	adds	r3, r7, r3
 801c288:	2200      	movs	r2, #0
 801c28a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801c28c:	230f      	movs	r3, #15
 801c28e:	18fb      	adds	r3, r7, r3
 801c290:	781b      	ldrb	r3, [r3, #0]
 801c292:	2b00      	cmp	r3, #0
 801c294:	d103      	bne.n	801c29e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	2221      	movs	r2, #33	@ 0x21
 801c29a:	2101      	movs	r1, #1
 801c29c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801c29e:	230f      	movs	r3, #15
 801c2a0:	18fb      	adds	r3, r7, r3
 801c2a2:	781b      	ldrb	r3, [r3, #0]
}
 801c2a4:	0018      	movs	r0, r3
 801c2a6:	46bd      	mov	sp, r7
 801c2a8:	b004      	add	sp, #16
 801c2aa:	bdb0      	pop	{r4, r5, r7, pc}
 801c2ac:	ff8fffbf 	.word	0xff8fffbf

0801c2b0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c2b0:	b5b0      	push	{r4, r5, r7, lr}
 801c2b2:	b086      	sub	sp, #24
 801c2b4:	af00      	add	r7, sp, #0
 801c2b6:	60f8      	str	r0, [r7, #12]
 801c2b8:	60b9      	str	r1, [r7, #8]
 801c2ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801c2bc:	2300      	movs	r3, #0
 801c2be:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c2c0:	68fb      	ldr	r3, [r7, #12]
 801c2c2:	2220      	movs	r2, #32
 801c2c4:	5c9b      	ldrb	r3, [r3, r2]
 801c2c6:	2b01      	cmp	r3, #1
 801c2c8:	d101      	bne.n	801c2ce <HAL_RTC_SetTime+0x1e>
 801c2ca:	2302      	movs	r3, #2
 801c2cc:	e092      	b.n	801c3f4 <HAL_RTC_SetTime+0x144>
 801c2ce:	68fb      	ldr	r3, [r7, #12]
 801c2d0:	2220      	movs	r2, #32
 801c2d2:	2101      	movs	r1, #1
 801c2d4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c2d6:	68fb      	ldr	r3, [r7, #12]
 801c2d8:	2221      	movs	r2, #33	@ 0x21
 801c2da:	2102      	movs	r1, #2
 801c2dc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	2b00      	cmp	r3, #0
 801c2e2:	d125      	bne.n	801c330 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c2e4:	68fb      	ldr	r3, [r7, #12]
 801c2e6:	681b      	ldr	r3, [r3, #0]
 801c2e8:	689b      	ldr	r3, [r3, #8]
 801c2ea:	2240      	movs	r2, #64	@ 0x40
 801c2ec:	4013      	ands	r3, r2
 801c2ee:	d102      	bne.n	801c2f6 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c2f0:	68bb      	ldr	r3, [r7, #8]
 801c2f2:	2200      	movs	r2, #0
 801c2f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c2f6:	68bb      	ldr	r3, [r7, #8]
 801c2f8:	781b      	ldrb	r3, [r3, #0]
 801c2fa:	0018      	movs	r0, r3
 801c2fc:	f000 fa77 	bl	801c7ee <RTC_ByteToBcd2>
 801c300:	0003      	movs	r3, r0
 801c302:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801c304:	68bb      	ldr	r3, [r7, #8]
 801c306:	785b      	ldrb	r3, [r3, #1]
 801c308:	0018      	movs	r0, r3
 801c30a:	f000 fa70 	bl	801c7ee <RTC_ByteToBcd2>
 801c30e:	0003      	movs	r3, r0
 801c310:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c312:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801c314:	68bb      	ldr	r3, [r7, #8]
 801c316:	789b      	ldrb	r3, [r3, #2]
 801c318:	0018      	movs	r0, r3
 801c31a:	f000 fa68 	bl	801c7ee <RTC_ByteToBcd2>
 801c31e:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801c320:	0022      	movs	r2, r4
 801c322:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801c324:	68bb      	ldr	r3, [r7, #8]
 801c326:	78db      	ldrb	r3, [r3, #3]
 801c328:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c32a:	4313      	orrs	r3, r2
 801c32c:	617b      	str	r3, [r7, #20]
 801c32e:	e017      	b.n	801c360 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c330:	68fb      	ldr	r3, [r7, #12]
 801c332:	681b      	ldr	r3, [r3, #0]
 801c334:	689b      	ldr	r3, [r3, #8]
 801c336:	2240      	movs	r2, #64	@ 0x40
 801c338:	4013      	ands	r3, r2
 801c33a:	d102      	bne.n	801c342 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c33c:	68bb      	ldr	r3, [r7, #8]
 801c33e:	2200      	movs	r2, #0
 801c340:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c342:	68bb      	ldr	r3, [r7, #8]
 801c344:	781b      	ldrb	r3, [r3, #0]
 801c346:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801c348:	68bb      	ldr	r3, [r7, #8]
 801c34a:	785b      	ldrb	r3, [r3, #1]
 801c34c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c34e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801c350:	68ba      	ldr	r2, [r7, #8]
 801c352:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801c354:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801c356:	68bb      	ldr	r3, [r7, #8]
 801c358:	78db      	ldrb	r3, [r3, #3]
 801c35a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c35c:	4313      	orrs	r3, r2
 801c35e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c360:	68fb      	ldr	r3, [r7, #12]
 801c362:	681b      	ldr	r3, [r3, #0]
 801c364:	22ca      	movs	r2, #202	@ 0xca
 801c366:	625a      	str	r2, [r3, #36]	@ 0x24
 801c368:	68fb      	ldr	r3, [r7, #12]
 801c36a:	681b      	ldr	r3, [r3, #0]
 801c36c:	2253      	movs	r2, #83	@ 0x53
 801c36e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801c370:	2513      	movs	r5, #19
 801c372:	197c      	adds	r4, r7, r5
 801c374:	68fb      	ldr	r3, [r7, #12]
 801c376:	0018      	movs	r0, r3
 801c378:	f000 f9cb 	bl	801c712 <RTC_EnterInitMode>
 801c37c:	0003      	movs	r3, r0
 801c37e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801c380:	0028      	movs	r0, r5
 801c382:	183b      	adds	r3, r7, r0
 801c384:	781b      	ldrb	r3, [r3, #0]
 801c386:	2b00      	cmp	r3, #0
 801c388:	d120      	bne.n	801c3cc <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801c38a:	68fb      	ldr	r3, [r7, #12]
 801c38c:	681b      	ldr	r3, [r3, #0]
 801c38e:	697a      	ldr	r2, [r7, #20]
 801c390:	491a      	ldr	r1, [pc, #104]	@ (801c3fc <HAL_RTC_SetTime+0x14c>)
 801c392:	400a      	ands	r2, r1
 801c394:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	689a      	ldr	r2, [r3, #8]
 801c39c:	68fb      	ldr	r3, [r7, #12]
 801c39e:	681b      	ldr	r3, [r3, #0]
 801c3a0:	4917      	ldr	r1, [pc, #92]	@ (801c400 <HAL_RTC_SetTime+0x150>)
 801c3a2:	400a      	ands	r2, r1
 801c3a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801c3a6:	68fb      	ldr	r3, [r7, #12]
 801c3a8:	681b      	ldr	r3, [r3, #0]
 801c3aa:	6899      	ldr	r1, [r3, #8]
 801c3ac:	68bb      	ldr	r3, [r7, #8]
 801c3ae:	68da      	ldr	r2, [r3, #12]
 801c3b0:	68bb      	ldr	r3, [r7, #8]
 801c3b2:	691b      	ldr	r3, [r3, #16]
 801c3b4:	431a      	orrs	r2, r3
 801c3b6:	68fb      	ldr	r3, [r7, #12]
 801c3b8:	681b      	ldr	r3, [r3, #0]
 801c3ba:	430a      	orrs	r2, r1
 801c3bc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801c3be:	183c      	adds	r4, r7, r0
 801c3c0:	68fb      	ldr	r3, [r7, #12]
 801c3c2:	0018      	movs	r0, r3
 801c3c4:	f000 f9e9 	bl	801c79a <RTC_ExitInitMode>
 801c3c8:	0003      	movs	r3, r0
 801c3ca:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801c3cc:	2313      	movs	r3, #19
 801c3ce:	18fb      	adds	r3, r7, r3
 801c3d0:	781b      	ldrb	r3, [r3, #0]
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d103      	bne.n	801c3de <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c3d6:	68fb      	ldr	r3, [r7, #12]
 801c3d8:	2221      	movs	r2, #33	@ 0x21
 801c3da:	2101      	movs	r1, #1
 801c3dc:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c3de:	68fb      	ldr	r3, [r7, #12]
 801c3e0:	681b      	ldr	r3, [r3, #0]
 801c3e2:	22ff      	movs	r2, #255	@ 0xff
 801c3e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c3e6:	68fb      	ldr	r3, [r7, #12]
 801c3e8:	2220      	movs	r2, #32
 801c3ea:	2100      	movs	r1, #0
 801c3ec:	5499      	strb	r1, [r3, r2]

  return status;
 801c3ee:	2313      	movs	r3, #19
 801c3f0:	18fb      	adds	r3, r7, r3
 801c3f2:	781b      	ldrb	r3, [r3, #0]
}
 801c3f4:	0018      	movs	r0, r3
 801c3f6:	46bd      	mov	sp, r7
 801c3f8:	b006      	add	sp, #24
 801c3fa:	bdb0      	pop	{r4, r5, r7, pc}
 801c3fc:	007f7f7f 	.word	0x007f7f7f
 801c400:	fffbffff 	.word	0xfffbffff

0801c404 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c404:	b580      	push	{r7, lr}
 801c406:	b086      	sub	sp, #24
 801c408:	af00      	add	r7, sp, #0
 801c40a:	60f8      	str	r0, [r7, #12]
 801c40c:	60b9      	str	r1, [r7, #8]
 801c40e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801c410:	2300      	movs	r3, #0
 801c412:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801c414:	68fb      	ldr	r3, [r7, #12]
 801c416:	681b      	ldr	r3, [r3, #0]
 801c418:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c41a:	68bb      	ldr	r3, [r7, #8]
 801c41c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801c41e:	68fb      	ldr	r3, [r7, #12]
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	691b      	ldr	r3, [r3, #16]
 801c424:	045b      	lsls	r3, r3, #17
 801c426:	0c5a      	lsrs	r2, r3, #17
 801c428:	68bb      	ldr	r3, [r7, #8]
 801c42a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801c42c:	68fb      	ldr	r3, [r7, #12]
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	681b      	ldr	r3, [r3, #0]
 801c432:	4a22      	ldr	r2, [pc, #136]	@ (801c4bc <HAL_RTC_GetTime+0xb8>)
 801c434:	4013      	ands	r3, r2
 801c436:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801c438:	697b      	ldr	r3, [r7, #20]
 801c43a:	0c1b      	lsrs	r3, r3, #16
 801c43c:	b2db      	uxtb	r3, r3
 801c43e:	223f      	movs	r2, #63	@ 0x3f
 801c440:	4013      	ands	r3, r2
 801c442:	b2da      	uxtb	r2, r3
 801c444:	68bb      	ldr	r3, [r7, #8]
 801c446:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801c448:	697b      	ldr	r3, [r7, #20]
 801c44a:	0a1b      	lsrs	r3, r3, #8
 801c44c:	b2db      	uxtb	r3, r3
 801c44e:	227f      	movs	r2, #127	@ 0x7f
 801c450:	4013      	ands	r3, r2
 801c452:	b2da      	uxtb	r2, r3
 801c454:	68bb      	ldr	r3, [r7, #8]
 801c456:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801c458:	697b      	ldr	r3, [r7, #20]
 801c45a:	b2db      	uxtb	r3, r3
 801c45c:	227f      	movs	r2, #127	@ 0x7f
 801c45e:	4013      	ands	r3, r2
 801c460:	b2da      	uxtb	r2, r3
 801c462:	68bb      	ldr	r3, [r7, #8]
 801c464:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801c466:	697b      	ldr	r3, [r7, #20]
 801c468:	0d9b      	lsrs	r3, r3, #22
 801c46a:	b2db      	uxtb	r3, r3
 801c46c:	2201      	movs	r2, #1
 801c46e:	4013      	ands	r3, r2
 801c470:	b2da      	uxtb	r2, r3
 801c472:	68bb      	ldr	r3, [r7, #8]
 801c474:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801c476:	687b      	ldr	r3, [r7, #4]
 801c478:	2b00      	cmp	r3, #0
 801c47a:	d11a      	bne.n	801c4b2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801c47c:	68bb      	ldr	r3, [r7, #8]
 801c47e:	781b      	ldrb	r3, [r3, #0]
 801c480:	0018      	movs	r0, r3
 801c482:	f000 f9d5 	bl	801c830 <RTC_Bcd2ToByte>
 801c486:	0003      	movs	r3, r0
 801c488:	001a      	movs	r2, r3
 801c48a:	68bb      	ldr	r3, [r7, #8]
 801c48c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801c48e:	68bb      	ldr	r3, [r7, #8]
 801c490:	785b      	ldrb	r3, [r3, #1]
 801c492:	0018      	movs	r0, r3
 801c494:	f000 f9cc 	bl	801c830 <RTC_Bcd2ToByte>
 801c498:	0003      	movs	r3, r0
 801c49a:	001a      	movs	r2, r3
 801c49c:	68bb      	ldr	r3, [r7, #8]
 801c49e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801c4a0:	68bb      	ldr	r3, [r7, #8]
 801c4a2:	789b      	ldrb	r3, [r3, #2]
 801c4a4:	0018      	movs	r0, r3
 801c4a6:	f000 f9c3 	bl	801c830 <RTC_Bcd2ToByte>
 801c4aa:	0003      	movs	r3, r0
 801c4ac:	001a      	movs	r2, r3
 801c4ae:	68bb      	ldr	r3, [r7, #8]
 801c4b0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801c4b2:	2300      	movs	r3, #0
}
 801c4b4:	0018      	movs	r0, r3
 801c4b6:	46bd      	mov	sp, r7
 801c4b8:	b006      	add	sp, #24
 801c4ba:	bd80      	pop	{r7, pc}
 801c4bc:	007f7f7f 	.word	0x007f7f7f

0801c4c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801c4c0:	b5b0      	push	{r4, r5, r7, lr}
 801c4c2:	b086      	sub	sp, #24
 801c4c4:	af00      	add	r7, sp, #0
 801c4c6:	60f8      	str	r0, [r7, #12]
 801c4c8:	60b9      	str	r1, [r7, #8]
 801c4ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801c4cc:	2300      	movs	r3, #0
 801c4ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c4d0:	68fb      	ldr	r3, [r7, #12]
 801c4d2:	2220      	movs	r2, #32
 801c4d4:	5c9b      	ldrb	r3, [r3, r2]
 801c4d6:	2b01      	cmp	r3, #1
 801c4d8:	d101      	bne.n	801c4de <HAL_RTC_SetDate+0x1e>
 801c4da:	2302      	movs	r3, #2
 801c4dc:	e07e      	b.n	801c5dc <HAL_RTC_SetDate+0x11c>
 801c4de:	68fb      	ldr	r3, [r7, #12]
 801c4e0:	2220      	movs	r2, #32
 801c4e2:	2101      	movs	r1, #1
 801c4e4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c4e6:	68fb      	ldr	r3, [r7, #12]
 801c4e8:	2221      	movs	r2, #33	@ 0x21
 801c4ea:	2102      	movs	r1, #2
 801c4ec:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d10e      	bne.n	801c512 <HAL_RTC_SetDate+0x52>
 801c4f4:	68bb      	ldr	r3, [r7, #8]
 801c4f6:	785b      	ldrb	r3, [r3, #1]
 801c4f8:	001a      	movs	r2, r3
 801c4fa:	2310      	movs	r3, #16
 801c4fc:	4013      	ands	r3, r2
 801c4fe:	d008      	beq.n	801c512 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801c500:	68bb      	ldr	r3, [r7, #8]
 801c502:	785b      	ldrb	r3, [r3, #1]
 801c504:	2210      	movs	r2, #16
 801c506:	4393      	bics	r3, r2
 801c508:	b2db      	uxtb	r3, r3
 801c50a:	330a      	adds	r3, #10
 801c50c:	b2da      	uxtb	r2, r3
 801c50e:	68bb      	ldr	r3, [r7, #8]
 801c510:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	2b00      	cmp	r3, #0
 801c516:	d11c      	bne.n	801c552 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c518:	68bb      	ldr	r3, [r7, #8]
 801c51a:	78db      	ldrb	r3, [r3, #3]
 801c51c:	0018      	movs	r0, r3
 801c51e:	f000 f966 	bl	801c7ee <RTC_ByteToBcd2>
 801c522:	0003      	movs	r3, r0
 801c524:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c526:	68bb      	ldr	r3, [r7, #8]
 801c528:	785b      	ldrb	r3, [r3, #1]
 801c52a:	0018      	movs	r0, r3
 801c52c:	f000 f95f 	bl	801c7ee <RTC_ByteToBcd2>
 801c530:	0003      	movs	r3, r0
 801c532:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c534:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801c536:	68bb      	ldr	r3, [r7, #8]
 801c538:	789b      	ldrb	r3, [r3, #2]
 801c53a:	0018      	movs	r0, r3
 801c53c:	f000 f957 	bl	801c7ee <RTC_ByteToBcd2>
 801c540:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c542:	0022      	movs	r2, r4
 801c544:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801c546:	68bb      	ldr	r3, [r7, #8]
 801c548:	781b      	ldrb	r3, [r3, #0]
 801c54a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c54c:	4313      	orrs	r3, r2
 801c54e:	617b      	str	r3, [r7, #20]
 801c550:	e00e      	b.n	801c570 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c552:	68bb      	ldr	r3, [r7, #8]
 801c554:	78db      	ldrb	r3, [r3, #3]
 801c556:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c558:	68bb      	ldr	r3, [r7, #8]
 801c55a:	785b      	ldrb	r3, [r3, #1]
 801c55c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c55e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801c560:	68ba      	ldr	r2, [r7, #8]
 801c562:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c564:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801c566:	68bb      	ldr	r3, [r7, #8]
 801c568:	781b      	ldrb	r3, [r3, #0]
 801c56a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c56c:	4313      	orrs	r3, r2
 801c56e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c570:	68fb      	ldr	r3, [r7, #12]
 801c572:	681b      	ldr	r3, [r3, #0]
 801c574:	22ca      	movs	r2, #202	@ 0xca
 801c576:	625a      	str	r2, [r3, #36]	@ 0x24
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	2253      	movs	r2, #83	@ 0x53
 801c57e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801c580:	2513      	movs	r5, #19
 801c582:	197c      	adds	r4, r7, r5
 801c584:	68fb      	ldr	r3, [r7, #12]
 801c586:	0018      	movs	r0, r3
 801c588:	f000 f8c3 	bl	801c712 <RTC_EnterInitMode>
 801c58c:	0003      	movs	r3, r0
 801c58e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801c590:	0028      	movs	r0, r5
 801c592:	183b      	adds	r3, r7, r0
 801c594:	781b      	ldrb	r3, [r3, #0]
 801c596:	2b00      	cmp	r3, #0
 801c598:	d10c      	bne.n	801c5b4 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801c59a:	68fb      	ldr	r3, [r7, #12]
 801c59c:	681b      	ldr	r3, [r3, #0]
 801c59e:	697a      	ldr	r2, [r7, #20]
 801c5a0:	4910      	ldr	r1, [pc, #64]	@ (801c5e4 <HAL_RTC_SetDate+0x124>)
 801c5a2:	400a      	ands	r2, r1
 801c5a4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801c5a6:	183c      	adds	r4, r7, r0
 801c5a8:	68fb      	ldr	r3, [r7, #12]
 801c5aa:	0018      	movs	r0, r3
 801c5ac:	f000 f8f5 	bl	801c79a <RTC_ExitInitMode>
 801c5b0:	0003      	movs	r3, r0
 801c5b2:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801c5b4:	2313      	movs	r3, #19
 801c5b6:	18fb      	adds	r3, r7, r3
 801c5b8:	781b      	ldrb	r3, [r3, #0]
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d103      	bne.n	801c5c6 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c5be:	68fb      	ldr	r3, [r7, #12]
 801c5c0:	2221      	movs	r2, #33	@ 0x21
 801c5c2:	2101      	movs	r1, #1
 801c5c4:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c5c6:	68fb      	ldr	r3, [r7, #12]
 801c5c8:	681b      	ldr	r3, [r3, #0]
 801c5ca:	22ff      	movs	r2, #255	@ 0xff
 801c5cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c5ce:	68fb      	ldr	r3, [r7, #12]
 801c5d0:	2220      	movs	r2, #32
 801c5d2:	2100      	movs	r1, #0
 801c5d4:	5499      	strb	r1, [r3, r2]

  return status;
 801c5d6:	2313      	movs	r3, #19
 801c5d8:	18fb      	adds	r3, r7, r3
 801c5da:	781b      	ldrb	r3, [r3, #0]
}
 801c5dc:	0018      	movs	r0, r3
 801c5de:	46bd      	mov	sp, r7
 801c5e0:	b006      	add	sp, #24
 801c5e2:	bdb0      	pop	{r4, r5, r7, pc}
 801c5e4:	00ffff3f 	.word	0x00ffff3f

0801c5e8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801c5e8:	b580      	push	{r7, lr}
 801c5ea:	b086      	sub	sp, #24
 801c5ec:	af00      	add	r7, sp, #0
 801c5ee:	60f8      	str	r0, [r7, #12]
 801c5f0:	60b9      	str	r1, [r7, #8]
 801c5f2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801c5f4:	2300      	movs	r3, #0
 801c5f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801c5f8:	68fb      	ldr	r3, [r7, #12]
 801c5fa:	681b      	ldr	r3, [r3, #0]
 801c5fc:	685b      	ldr	r3, [r3, #4]
 801c5fe:	4a21      	ldr	r2, [pc, #132]	@ (801c684 <HAL_RTC_GetDate+0x9c>)
 801c600:	4013      	ands	r3, r2
 801c602:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801c604:	697b      	ldr	r3, [r7, #20]
 801c606:	0c1b      	lsrs	r3, r3, #16
 801c608:	b2da      	uxtb	r2, r3
 801c60a:	68bb      	ldr	r3, [r7, #8]
 801c60c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801c60e:	697b      	ldr	r3, [r7, #20]
 801c610:	0a1b      	lsrs	r3, r3, #8
 801c612:	b2db      	uxtb	r3, r3
 801c614:	221f      	movs	r2, #31
 801c616:	4013      	ands	r3, r2
 801c618:	b2da      	uxtb	r2, r3
 801c61a:	68bb      	ldr	r3, [r7, #8]
 801c61c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801c61e:	697b      	ldr	r3, [r7, #20]
 801c620:	b2db      	uxtb	r3, r3
 801c622:	223f      	movs	r2, #63	@ 0x3f
 801c624:	4013      	ands	r3, r2
 801c626:	b2da      	uxtb	r2, r3
 801c628:	68bb      	ldr	r3, [r7, #8]
 801c62a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801c62c:	697b      	ldr	r3, [r7, #20]
 801c62e:	0b5b      	lsrs	r3, r3, #13
 801c630:	b2db      	uxtb	r3, r3
 801c632:	2207      	movs	r2, #7
 801c634:	4013      	ands	r3, r2
 801c636:	b2da      	uxtb	r2, r3
 801c638:	68bb      	ldr	r3, [r7, #8]
 801c63a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d11a      	bne.n	801c678 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801c642:	68bb      	ldr	r3, [r7, #8]
 801c644:	78db      	ldrb	r3, [r3, #3]
 801c646:	0018      	movs	r0, r3
 801c648:	f000 f8f2 	bl	801c830 <RTC_Bcd2ToByte>
 801c64c:	0003      	movs	r3, r0
 801c64e:	001a      	movs	r2, r3
 801c650:	68bb      	ldr	r3, [r7, #8]
 801c652:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801c654:	68bb      	ldr	r3, [r7, #8]
 801c656:	785b      	ldrb	r3, [r3, #1]
 801c658:	0018      	movs	r0, r3
 801c65a:	f000 f8e9 	bl	801c830 <RTC_Bcd2ToByte>
 801c65e:	0003      	movs	r3, r0
 801c660:	001a      	movs	r2, r3
 801c662:	68bb      	ldr	r3, [r7, #8]
 801c664:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801c666:	68bb      	ldr	r3, [r7, #8]
 801c668:	789b      	ldrb	r3, [r3, #2]
 801c66a:	0018      	movs	r0, r3
 801c66c:	f000 f8e0 	bl	801c830 <RTC_Bcd2ToByte>
 801c670:	0003      	movs	r3, r0
 801c672:	001a      	movs	r2, r3
 801c674:	68bb      	ldr	r3, [r7, #8]
 801c676:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801c678:	2300      	movs	r3, #0
}
 801c67a:	0018      	movs	r0, r3
 801c67c:	46bd      	mov	sp, r7
 801c67e:	b006      	add	sp, #24
 801c680:	bd80      	pop	{r7, pc}
 801c682:	46c0      	nop			@ (mov r8, r8)
 801c684:	00ffff3f 	.word	0x00ffff3f

0801c688 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801c688:	b580      	push	{r7, lr}
 801c68a:	b084      	sub	sp, #16
 801c68c:	af00      	add	r7, sp, #0
 801c68e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c690:	2300      	movs	r3, #0
 801c692:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	681b      	ldr	r3, [r3, #0]
 801c698:	4a0e      	ldr	r2, [pc, #56]	@ (801c6d4 <HAL_RTC_WaitForSynchro+0x4c>)
 801c69a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801c69c:	f7f8 f98c 	bl	80149b8 <HAL_GetTick>
 801c6a0:	0003      	movs	r3, r0
 801c6a2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c6a4:	e00a      	b.n	801c6bc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c6a6:	f7f8 f987 	bl	80149b8 <HAL_GetTick>
 801c6aa:	0002      	movs	r2, r0
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	1ad2      	subs	r2, r2, r3
 801c6b0:	23fa      	movs	r3, #250	@ 0xfa
 801c6b2:	009b      	lsls	r3, r3, #2
 801c6b4:	429a      	cmp	r2, r3
 801c6b6:	d901      	bls.n	801c6bc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801c6b8:	2303      	movs	r3, #3
 801c6ba:	e006      	b.n	801c6ca <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	681b      	ldr	r3, [r3, #0]
 801c6c0:	68db      	ldr	r3, [r3, #12]
 801c6c2:	2220      	movs	r2, #32
 801c6c4:	4013      	ands	r3, r2
 801c6c6:	d0ee      	beq.n	801c6a6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801c6c8:	2300      	movs	r3, #0
}
 801c6ca:	0018      	movs	r0, r3
 801c6cc:	46bd      	mov	sp, r7
 801c6ce:	b004      	add	sp, #16
 801c6d0:	bd80      	pop	{r7, pc}
 801c6d2:	46c0      	nop			@ (mov r8, r8)
 801c6d4:	0001ff5f 	.word	0x0001ff5f

0801c6d8 <HAL_RTC_DST_Add1Hour>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_DST_Add1Hour(RTC_HandleTypeDef *hrtc)
{
 801c6d8:	b580      	push	{r7, lr}
 801c6da:	b082      	sub	sp, #8
 801c6dc:	af00      	add	r7, sp, #0
 801c6de:	6078      	str	r0, [r7, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	681b      	ldr	r3, [r3, #0]
 801c6e4:	22ca      	movs	r2, #202	@ 0xca
 801c6e6:	625a      	str	r2, [r3, #36]	@ 0x24
 801c6e8:	687b      	ldr	r3, [r7, #4]
 801c6ea:	681b      	ldr	r3, [r3, #0]
 801c6ec:	2253      	movs	r2, #83	@ 0x53
 801c6ee:	625a      	str	r2, [r3, #36]	@ 0x24
  SET_BIT(hrtc->Instance->CR, RTC_CR_ADD1H);
 801c6f0:	687b      	ldr	r3, [r7, #4]
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	689a      	ldr	r2, [r3, #8]
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	681b      	ldr	r3, [r3, #0]
 801c6fa:	2180      	movs	r1, #128	@ 0x80
 801c6fc:	0249      	lsls	r1, r1, #9
 801c6fe:	430a      	orrs	r2, r1
 801c700:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	681b      	ldr	r3, [r3, #0]
 801c706:	22ff      	movs	r2, #255	@ 0xff
 801c708:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801c70a:	46c0      	nop			@ (mov r8, r8)
 801c70c:	46bd      	mov	sp, r7
 801c70e:	b002      	add	sp, #8
 801c710:	bd80      	pop	{r7, pc}

0801c712 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801c712:	b580      	push	{r7, lr}
 801c714:	b084      	sub	sp, #16
 801c716:	af00      	add	r7, sp, #0
 801c718:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c71a:	2300      	movs	r3, #0
 801c71c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801c71e:	230f      	movs	r3, #15
 801c720:	18fb      	adds	r3, r7, r3
 801c722:	2200      	movs	r2, #0
 801c724:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	681b      	ldr	r3, [r3, #0]
 801c72a:	68db      	ldr	r3, [r3, #12]
 801c72c:	2240      	movs	r2, #64	@ 0x40
 801c72e:	4013      	ands	r3, r2
 801c730:	d12c      	bne.n	801c78c <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	681b      	ldr	r3, [r3, #0]
 801c736:	68da      	ldr	r2, [r3, #12]
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	681b      	ldr	r3, [r3, #0]
 801c73c:	2180      	movs	r1, #128	@ 0x80
 801c73e:	430a      	orrs	r2, r1
 801c740:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801c742:	f7f8 f939 	bl	80149b8 <HAL_GetTick>
 801c746:	0003      	movs	r3, r0
 801c748:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c74a:	e014      	b.n	801c776 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c74c:	f7f8 f934 	bl	80149b8 <HAL_GetTick>
 801c750:	0002      	movs	r2, r0
 801c752:	68bb      	ldr	r3, [r7, #8]
 801c754:	1ad2      	subs	r2, r2, r3
 801c756:	200f      	movs	r0, #15
 801c758:	183b      	adds	r3, r7, r0
 801c75a:	1839      	adds	r1, r7, r0
 801c75c:	7809      	ldrb	r1, [r1, #0]
 801c75e:	7019      	strb	r1, [r3, #0]
 801c760:	23fa      	movs	r3, #250	@ 0xfa
 801c762:	009b      	lsls	r3, r3, #2
 801c764:	429a      	cmp	r2, r3
 801c766:	d906      	bls.n	801c776 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	2221      	movs	r2, #33	@ 0x21
 801c76c:	2104      	movs	r1, #4
 801c76e:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801c770:	183b      	adds	r3, r7, r0
 801c772:	2201      	movs	r2, #1
 801c774:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	681b      	ldr	r3, [r3, #0]
 801c77a:	68db      	ldr	r3, [r3, #12]
 801c77c:	2240      	movs	r2, #64	@ 0x40
 801c77e:	4013      	ands	r3, r2
 801c780:	d104      	bne.n	801c78c <RTC_EnterInitMode+0x7a>
 801c782:	230f      	movs	r3, #15
 801c784:	18fb      	adds	r3, r7, r3
 801c786:	781b      	ldrb	r3, [r3, #0]
 801c788:	2b01      	cmp	r3, #1
 801c78a:	d1df      	bne.n	801c74c <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801c78c:	230f      	movs	r3, #15
 801c78e:	18fb      	adds	r3, r7, r3
 801c790:	781b      	ldrb	r3, [r3, #0]
}
 801c792:	0018      	movs	r0, r3
 801c794:	46bd      	mov	sp, r7
 801c796:	b004      	add	sp, #16
 801c798:	bd80      	pop	{r7, pc}

0801c79a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801c79a:	b590      	push	{r4, r7, lr}
 801c79c:	b085      	sub	sp, #20
 801c79e:	af00      	add	r7, sp, #0
 801c7a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c7a2:	240f      	movs	r4, #15
 801c7a4:	193b      	adds	r3, r7, r4
 801c7a6:	2200      	movs	r2, #0
 801c7a8:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	681b      	ldr	r3, [r3, #0]
 801c7ae:	68da      	ldr	r2, [r3, #12]
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	681b      	ldr	r3, [r3, #0]
 801c7b4:	2180      	movs	r1, #128	@ 0x80
 801c7b6:	438a      	bics	r2, r1
 801c7b8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801c7ba:	687b      	ldr	r3, [r7, #4]
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	689b      	ldr	r3, [r3, #8]
 801c7c0:	2220      	movs	r2, #32
 801c7c2:	4013      	ands	r3, r2
 801c7c4:	d10c      	bne.n	801c7e0 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801c7c6:	687b      	ldr	r3, [r7, #4]
 801c7c8:	0018      	movs	r0, r3
 801c7ca:	f7ff ff5d 	bl	801c688 <HAL_RTC_WaitForSynchro>
 801c7ce:	1e03      	subs	r3, r0, #0
 801c7d0:	d006      	beq.n	801c7e0 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801c7d2:	687b      	ldr	r3, [r7, #4]
 801c7d4:	2221      	movs	r2, #33	@ 0x21
 801c7d6:	2104      	movs	r1, #4
 801c7d8:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801c7da:	193b      	adds	r3, r7, r4
 801c7dc:	2201      	movs	r2, #1
 801c7de:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801c7e0:	230f      	movs	r3, #15
 801c7e2:	18fb      	adds	r3, r7, r3
 801c7e4:	781b      	ldrb	r3, [r3, #0]
}
 801c7e6:	0018      	movs	r0, r3
 801c7e8:	46bd      	mov	sp, r7
 801c7ea:	b005      	add	sp, #20
 801c7ec:	bd90      	pop	{r4, r7, pc}

0801c7ee <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 801c7ee:	b580      	push	{r7, lr}
 801c7f0:	b084      	sub	sp, #16
 801c7f2:	af00      	add	r7, sp, #0
 801c7f4:	0002      	movs	r2, r0
 801c7f6:	1dfb      	adds	r3, r7, #7
 801c7f8:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801c7fa:	2300      	movs	r3, #0
 801c7fc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801c7fe:	e007      	b.n	801c810 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	3301      	adds	r3, #1
 801c804:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801c806:	1dfb      	adds	r3, r7, #7
 801c808:	1dfa      	adds	r2, r7, #7
 801c80a:	7812      	ldrb	r2, [r2, #0]
 801c80c:	3a0a      	subs	r2, #10
 801c80e:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801c810:	1dfb      	adds	r3, r7, #7
 801c812:	781b      	ldrb	r3, [r3, #0]
 801c814:	2b09      	cmp	r3, #9
 801c816:	d8f3      	bhi.n	801c800 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801c818:	68fb      	ldr	r3, [r7, #12]
 801c81a:	b2db      	uxtb	r3, r3
 801c81c:	011b      	lsls	r3, r3, #4
 801c81e:	b2da      	uxtb	r2, r3
 801c820:	1dfb      	adds	r3, r7, #7
 801c822:	781b      	ldrb	r3, [r3, #0]
 801c824:	4313      	orrs	r3, r2
 801c826:	b2db      	uxtb	r3, r3
}
 801c828:	0018      	movs	r0, r3
 801c82a:	46bd      	mov	sp, r7
 801c82c:	b004      	add	sp, #16
 801c82e:	bd80      	pop	{r7, pc}

0801c830 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801c830:	b580      	push	{r7, lr}
 801c832:	b084      	sub	sp, #16
 801c834:	af00      	add	r7, sp, #0
 801c836:	0002      	movs	r2, r0
 801c838:	1dfb      	adds	r3, r7, #7
 801c83a:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801c83c:	2300      	movs	r3, #0
 801c83e:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801c840:	1dfb      	adds	r3, r7, #7
 801c842:	781b      	ldrb	r3, [r3, #0]
 801c844:	091b      	lsrs	r3, r3, #4
 801c846:	b2db      	uxtb	r3, r3
 801c848:	001a      	movs	r2, r3
 801c84a:	0013      	movs	r3, r2
 801c84c:	009b      	lsls	r3, r3, #2
 801c84e:	189b      	adds	r3, r3, r2
 801c850:	005b      	lsls	r3, r3, #1
 801c852:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801c854:	68fb      	ldr	r3, [r7, #12]
 801c856:	b2da      	uxtb	r2, r3
 801c858:	1dfb      	adds	r3, r7, #7
 801c85a:	781b      	ldrb	r3, [r3, #0]
 801c85c:	210f      	movs	r1, #15
 801c85e:	400b      	ands	r3, r1
 801c860:	b2db      	uxtb	r3, r3
 801c862:	18d3      	adds	r3, r2, r3
 801c864:	b2db      	uxtb	r3, r3
}
 801c866:	0018      	movs	r0, r3
 801c868:	46bd      	mov	sp, r7
 801c86a:	b004      	add	sp, #16
 801c86c:	bd80      	pop	{r7, pc}
	...

0801c870 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801c870:	b580      	push	{r7, lr}
 801c872:	b086      	sub	sp, #24
 801c874:	af00      	add	r7, sp, #0
 801c876:	60f8      	str	r0, [r7, #12]
 801c878:	60b9      	str	r1, [r7, #8]
 801c87a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801c87c:	4b64      	ldr	r3, [pc, #400]	@ (801ca10 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801c87e:	681b      	ldr	r3, [r3, #0]
 801c880:	22fa      	movs	r2, #250	@ 0xfa
 801c882:	01d1      	lsls	r1, r2, #7
 801c884:	0018      	movs	r0, r3
 801c886:	f7e3 fc8d 	bl	80001a4 <__udivsi3>
 801c88a:	0003      	movs	r3, r0
 801c88c:	001a      	movs	r2, r3
 801c88e:	0013      	movs	r3, r2
 801c890:	015b      	lsls	r3, r3, #5
 801c892:	1a9b      	subs	r3, r3, r2
 801c894:	009b      	lsls	r3, r3, #2
 801c896:	189b      	adds	r3, r3, r2
 801c898:	00db      	lsls	r3, r3, #3
 801c89a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c89c:	68fb      	ldr	r3, [r7, #12]
 801c89e:	2220      	movs	r2, #32
 801c8a0:	5c9b      	ldrb	r3, [r3, r2]
 801c8a2:	2b01      	cmp	r3, #1
 801c8a4:	d101      	bne.n	801c8aa <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801c8a6:	2302      	movs	r3, #2
 801c8a8:	e0ad      	b.n	801ca06 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801c8aa:	68fb      	ldr	r3, [r7, #12]
 801c8ac:	2220      	movs	r2, #32
 801c8ae:	2101      	movs	r1, #1
 801c8b0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c8b2:	68fb      	ldr	r3, [r7, #12]
 801c8b4:	2221      	movs	r2, #33	@ 0x21
 801c8b6:	2102      	movs	r1, #2
 801c8b8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c8ba:	68fb      	ldr	r3, [r7, #12]
 801c8bc:	681b      	ldr	r3, [r3, #0]
 801c8be:	22ca      	movs	r2, #202	@ 0xca
 801c8c0:	625a      	str	r2, [r3, #36]	@ 0x24
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	681b      	ldr	r3, [r3, #0]
 801c8c6:	2253      	movs	r2, #83	@ 0x53
 801c8c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	681b      	ldr	r3, [r3, #0]
 801c8ce:	689a      	ldr	r2, [r3, #8]
 801c8d0:	2380      	movs	r3, #128	@ 0x80
 801c8d2:	00db      	lsls	r3, r3, #3
 801c8d4:	4013      	ands	r3, r2
 801c8d6:	d019      	beq.n	801c90c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801c8d8:	697b      	ldr	r3, [r7, #20]
 801c8da:	3b01      	subs	r3, #1
 801c8dc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801c8de:	697b      	ldr	r3, [r7, #20]
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d10d      	bne.n	801c900 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c8e4:	68fb      	ldr	r3, [r7, #12]
 801c8e6:	681b      	ldr	r3, [r3, #0]
 801c8e8:	22ff      	movs	r2, #255	@ 0xff
 801c8ea:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c8ec:	68fb      	ldr	r3, [r7, #12]
 801c8ee:	2221      	movs	r2, #33	@ 0x21
 801c8f0:	2103      	movs	r1, #3
 801c8f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801c8f4:	68fb      	ldr	r3, [r7, #12]
 801c8f6:	2220      	movs	r2, #32
 801c8f8:	2100      	movs	r1, #0
 801c8fa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801c8fc:	2303      	movs	r3, #3
 801c8fe:	e082      	b.n	801ca06 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 801c900:	68fb      	ldr	r3, [r7, #12]
 801c902:	681b      	ldr	r3, [r3, #0]
 801c904:	68db      	ldr	r3, [r3, #12]
 801c906:	2204      	movs	r2, #4
 801c908:	4013      	ands	r3, r2
 801c90a:	d1e5      	bne.n	801c8d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	681b      	ldr	r3, [r3, #0]
 801c910:	689a      	ldr	r2, [r3, #8]
 801c912:	68fb      	ldr	r3, [r7, #12]
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	493f      	ldr	r1, [pc, #252]	@ (801ca14 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801c918:	400a      	ands	r2, r1
 801c91a:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801c91c:	68fb      	ldr	r3, [r7, #12]
 801c91e:	681b      	ldr	r3, [r3, #0]
 801c920:	68db      	ldr	r3, [r3, #12]
 801c922:	22ff      	movs	r2, #255	@ 0xff
 801c924:	401a      	ands	r2, r3
 801c926:	68fb      	ldr	r3, [r7, #12]
 801c928:	681b      	ldr	r3, [r3, #0]
 801c92a:	493b      	ldr	r1, [pc, #236]	@ (801ca18 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 801c92c:	430a      	orrs	r2, r1
 801c92e:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801c930:	4b37      	ldr	r3, [pc, #220]	@ (801ca10 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801c932:	681b      	ldr	r3, [r3, #0]
 801c934:	22fa      	movs	r2, #250	@ 0xfa
 801c936:	01d1      	lsls	r1, r2, #7
 801c938:	0018      	movs	r0, r3
 801c93a:	f7e3 fc33 	bl	80001a4 <__udivsi3>
 801c93e:	0003      	movs	r3, r0
 801c940:	001a      	movs	r2, r3
 801c942:	0013      	movs	r3, r2
 801c944:	015b      	lsls	r3, r3, #5
 801c946:	1a9b      	subs	r3, r3, r2
 801c948:	009b      	lsls	r3, r3, #2
 801c94a:	189b      	adds	r3, r3, r2
 801c94c:	00db      	lsls	r3, r3, #3
 801c94e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801c950:	697b      	ldr	r3, [r7, #20]
 801c952:	3b01      	subs	r3, #1
 801c954:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801c956:	697b      	ldr	r3, [r7, #20]
 801c958:	2b00      	cmp	r3, #0
 801c95a:	d10d      	bne.n	801c978 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c95c:	68fb      	ldr	r3, [r7, #12]
 801c95e:	681b      	ldr	r3, [r3, #0]
 801c960:	22ff      	movs	r2, #255	@ 0xff
 801c962:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c964:	68fb      	ldr	r3, [r7, #12]
 801c966:	2221      	movs	r2, #33	@ 0x21
 801c968:	2103      	movs	r1, #3
 801c96a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801c96c:	68fb      	ldr	r3, [r7, #12]
 801c96e:	2220      	movs	r2, #32
 801c970:	2100      	movs	r1, #0
 801c972:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801c974:	2303      	movs	r3, #3
 801c976:	e046      	b.n	801ca06 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801c978:	68fb      	ldr	r3, [r7, #12]
 801c97a:	681b      	ldr	r3, [r3, #0]
 801c97c:	68db      	ldr	r3, [r3, #12]
 801c97e:	2204      	movs	r2, #4
 801c980:	4013      	ands	r3, r2
 801c982:	d0e5      	beq.n	801c950 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801c984:	68fb      	ldr	r3, [r7, #12]
 801c986:	681b      	ldr	r3, [r3, #0]
 801c988:	689a      	ldr	r2, [r3, #8]
 801c98a:	68fb      	ldr	r3, [r7, #12]
 801c98c:	681b      	ldr	r3, [r3, #0]
 801c98e:	2107      	movs	r1, #7
 801c990:	438a      	bics	r2, r1
 801c992:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801c994:	68fb      	ldr	r3, [r7, #12]
 801c996:	681b      	ldr	r3, [r3, #0]
 801c998:	6899      	ldr	r1, [r3, #8]
 801c99a:	68fb      	ldr	r3, [r7, #12]
 801c99c:	681b      	ldr	r3, [r3, #0]
 801c99e:	687a      	ldr	r2, [r7, #4]
 801c9a0:	430a      	orrs	r2, r1
 801c9a2:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801c9a4:	68fb      	ldr	r3, [r7, #12]
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	68ba      	ldr	r2, [r7, #8]
 801c9aa:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801c9ac:	4b1b      	ldr	r3, [pc, #108]	@ (801ca1c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c9ae:	681a      	ldr	r2, [r3, #0]
 801c9b0:	4b1a      	ldr	r3, [pc, #104]	@ (801ca1c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c9b2:	2180      	movs	r1, #128	@ 0x80
 801c9b4:	0349      	lsls	r1, r1, #13
 801c9b6:	430a      	orrs	r2, r1
 801c9b8:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801c9ba:	4b18      	ldr	r3, [pc, #96]	@ (801ca1c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c9bc:	689a      	ldr	r2, [r3, #8]
 801c9be:	4b17      	ldr	r3, [pc, #92]	@ (801ca1c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c9c0:	2180      	movs	r1, #128	@ 0x80
 801c9c2:	0349      	lsls	r1, r1, #13
 801c9c4:	430a      	orrs	r2, r1
 801c9c6:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801c9c8:	68fb      	ldr	r3, [r7, #12]
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	689a      	ldr	r2, [r3, #8]
 801c9ce:	68fb      	ldr	r3, [r7, #12]
 801c9d0:	681b      	ldr	r3, [r3, #0]
 801c9d2:	2180      	movs	r1, #128	@ 0x80
 801c9d4:	01c9      	lsls	r1, r1, #7
 801c9d6:	430a      	orrs	r2, r1
 801c9d8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801c9da:	68fb      	ldr	r3, [r7, #12]
 801c9dc:	681b      	ldr	r3, [r3, #0]
 801c9de:	689a      	ldr	r2, [r3, #8]
 801c9e0:	68fb      	ldr	r3, [r7, #12]
 801c9e2:	681b      	ldr	r3, [r3, #0]
 801c9e4:	2180      	movs	r1, #128	@ 0x80
 801c9e6:	00c9      	lsls	r1, r1, #3
 801c9e8:	430a      	orrs	r2, r1
 801c9ea:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c9ec:	68fb      	ldr	r3, [r7, #12]
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	22ff      	movs	r2, #255	@ 0xff
 801c9f2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801c9f4:	68fb      	ldr	r3, [r7, #12]
 801c9f6:	2221      	movs	r2, #33	@ 0x21
 801c9f8:	2101      	movs	r1, #1
 801c9fa:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c9fc:	68fb      	ldr	r3, [r7, #12]
 801c9fe:	2220      	movs	r2, #32
 801ca00:	2100      	movs	r1, #0
 801ca02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801ca04:	2300      	movs	r3, #0
}
 801ca06:	0018      	movs	r0, r3
 801ca08:	46bd      	mov	sp, r7
 801ca0a:	b006      	add	sp, #24
 801ca0c:	bd80      	pop	{r7, pc}
 801ca0e:	46c0      	nop			@ (mov r8, r8)
 801ca10:	200000ec 	.word	0x200000ec
 801ca14:	fffffbff 	.word	0xfffffbff
 801ca18:	fffffb7f 	.word	0xfffffb7f
 801ca1c:	40010400 	.word	0x40010400

0801ca20 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801ca20:	b580      	push	{r7, lr}
 801ca22:	b084      	sub	sp, #16
 801ca24:	af00      	add	r7, sp, #0
 801ca26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801ca28:	2300      	movs	r3, #0
 801ca2a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801ca2c:	687b      	ldr	r3, [r7, #4]
 801ca2e:	2220      	movs	r2, #32
 801ca30:	5c9b      	ldrb	r3, [r3, r2]
 801ca32:	2b01      	cmp	r3, #1
 801ca34:	d101      	bne.n	801ca3a <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801ca36:	2302      	movs	r3, #2
 801ca38:	e04e      	b.n	801cad8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801ca3a:	687b      	ldr	r3, [r7, #4]
 801ca3c:	2220      	movs	r2, #32
 801ca3e:	2101      	movs	r1, #1
 801ca40:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	2221      	movs	r2, #33	@ 0x21
 801ca46:	2102      	movs	r1, #2
 801ca48:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	681b      	ldr	r3, [r3, #0]
 801ca4e:	22ca      	movs	r2, #202	@ 0xca
 801ca50:	625a      	str	r2, [r3, #36]	@ 0x24
 801ca52:	687b      	ldr	r3, [r7, #4]
 801ca54:	681b      	ldr	r3, [r3, #0]
 801ca56:	2253      	movs	r2, #83	@ 0x53
 801ca58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801ca5a:	687b      	ldr	r3, [r7, #4]
 801ca5c:	681b      	ldr	r3, [r3, #0]
 801ca5e:	689a      	ldr	r2, [r3, #8]
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	681b      	ldr	r3, [r3, #0]
 801ca64:	491e      	ldr	r1, [pc, #120]	@ (801cae0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801ca66:	400a      	ands	r2, r1
 801ca68:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	681b      	ldr	r3, [r3, #0]
 801ca6e:	689a      	ldr	r2, [r3, #8]
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	681b      	ldr	r3, [r3, #0]
 801ca74:	491b      	ldr	r1, [pc, #108]	@ (801cae4 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801ca76:	400a      	ands	r2, r1
 801ca78:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801ca7a:	f7f7 ff9d 	bl	80149b8 <HAL_GetTick>
 801ca7e:	0003      	movs	r3, r0
 801ca80:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801ca82:	e016      	b.n	801cab2 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801ca84:	f7f7 ff98 	bl	80149b8 <HAL_GetTick>
 801ca88:	0002      	movs	r2, r0
 801ca8a:	68fb      	ldr	r3, [r7, #12]
 801ca8c:	1ad2      	subs	r2, r2, r3
 801ca8e:	23fa      	movs	r3, #250	@ 0xfa
 801ca90:	009b      	lsls	r3, r3, #2
 801ca92:	429a      	cmp	r2, r3
 801ca94:	d90d      	bls.n	801cab2 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801ca96:	687b      	ldr	r3, [r7, #4]
 801ca98:	681b      	ldr	r3, [r3, #0]
 801ca9a:	22ff      	movs	r2, #255	@ 0xff
 801ca9c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	2221      	movs	r2, #33	@ 0x21
 801caa2:	2103      	movs	r1, #3
 801caa4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801caa6:	687b      	ldr	r3, [r7, #4]
 801caa8:	2220      	movs	r2, #32
 801caaa:	2100      	movs	r1, #0
 801caac:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801caae:	2303      	movs	r3, #3
 801cab0:	e012      	b.n	801cad8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	681b      	ldr	r3, [r3, #0]
 801cab6:	68db      	ldr	r3, [r3, #12]
 801cab8:	2204      	movs	r2, #4
 801caba:	4013      	ands	r3, r2
 801cabc:	d0e2      	beq.n	801ca84 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	681b      	ldr	r3, [r3, #0]
 801cac2:	22ff      	movs	r2, #255	@ 0xff
 801cac4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801cac6:	687b      	ldr	r3, [r7, #4]
 801cac8:	2221      	movs	r2, #33	@ 0x21
 801caca:	2101      	movs	r1, #1
 801cacc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	2220      	movs	r2, #32
 801cad2:	2100      	movs	r1, #0
 801cad4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cad6:	2300      	movs	r3, #0
}
 801cad8:	0018      	movs	r0, r3
 801cada:	46bd      	mov	sp, r7
 801cadc:	b004      	add	sp, #16
 801cade:	bd80      	pop	{r7, pc}
 801cae0:	fffffbff 	.word	0xfffffbff
 801cae4:	ffffbfff 	.word	0xffffbfff

0801cae8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801cae8:	b580      	push	{r7, lr}
 801caea:	b082      	sub	sp, #8
 801caec:	af00      	add	r7, sp, #0
 801caee:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801caf0:	4b13      	ldr	r3, [pc, #76]	@ (801cb40 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801caf2:	2280      	movs	r2, #128	@ 0x80
 801caf4:	0352      	lsls	r2, r2, #13
 801caf6:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	681b      	ldr	r3, [r3, #0]
 801cafc:	689a      	ldr	r2, [r3, #8]
 801cafe:	2380      	movs	r3, #128	@ 0x80
 801cb00:	01db      	lsls	r3, r3, #7
 801cb02:	4013      	ands	r3, r2
 801cb04:	d014      	beq.n	801cb30 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	681b      	ldr	r3, [r3, #0]
 801cb0a:	68da      	ldr	r2, [r3, #12]
 801cb0c:	2380      	movs	r3, #128	@ 0x80
 801cb0e:	00db      	lsls	r3, r3, #3
 801cb10:	4013      	ands	r3, r2
 801cb12:	d00d      	beq.n	801cb30 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	68db      	ldr	r3, [r3, #12]
 801cb1a:	22ff      	movs	r2, #255	@ 0xff
 801cb1c:	401a      	ands	r2, r3
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	681b      	ldr	r3, [r3, #0]
 801cb22:	4908      	ldr	r1, [pc, #32]	@ (801cb44 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801cb24:	430a      	orrs	r2, r1
 801cb26:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	0018      	movs	r0, r3
 801cb2c:	f000 f80c 	bl	801cb48 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801cb30:	687b      	ldr	r3, [r7, #4]
 801cb32:	2221      	movs	r2, #33	@ 0x21
 801cb34:	2101      	movs	r1, #1
 801cb36:	5499      	strb	r1, [r3, r2]
}
 801cb38:	46c0      	nop			@ (mov r8, r8)
 801cb3a:	46bd      	mov	sp, r7
 801cb3c:	b002      	add	sp, #8
 801cb3e:	bd80      	pop	{r7, pc}
 801cb40:	40010400 	.word	0x40010400
 801cb44:	fffffb7f 	.word	0xfffffb7f

0801cb48 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801cb48:	b580      	push	{r7, lr}
 801cb4a:	b082      	sub	sp, #8
 801cb4c:	af00      	add	r7, sp, #0
 801cb4e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801cb50:	46c0      	nop			@ (mov r8, r8)
 801cb52:	46bd      	mov	sp, r7
 801cb54:	b002      	add	sp, #8
 801cb56:	bd80      	pop	{r7, pc}

0801cb58 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801cb58:	b580      	push	{r7, lr}
 801cb5a:	b086      	sub	sp, #24
 801cb5c:	af00      	add	r7, sp, #0
 801cb5e:	60f8      	str	r0, [r7, #12]
 801cb60:	60b9      	str	r1, [r7, #8]
 801cb62:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801cb64:	2300      	movs	r3, #0
 801cb66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801cb68:	68fb      	ldr	r3, [r7, #12]
 801cb6a:	681b      	ldr	r3, [r3, #0]
 801cb6c:	3350      	adds	r3, #80	@ 0x50
 801cb6e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801cb70:	68bb      	ldr	r3, [r7, #8]
 801cb72:	009b      	lsls	r3, r3, #2
 801cb74:	697a      	ldr	r2, [r7, #20]
 801cb76:	18d3      	adds	r3, r2, r3
 801cb78:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801cb7a:	697b      	ldr	r3, [r7, #20]
 801cb7c:	687a      	ldr	r2, [r7, #4]
 801cb7e:	601a      	str	r2, [r3, #0]
}
 801cb80:	46c0      	nop			@ (mov r8, r8)
 801cb82:	46bd      	mov	sp, r7
 801cb84:	b006      	add	sp, #24
 801cb86:	bd80      	pop	{r7, pc}

0801cb88 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801cb88:	b580      	push	{r7, lr}
 801cb8a:	b084      	sub	sp, #16
 801cb8c:	af00      	add	r7, sp, #0
 801cb8e:	6078      	str	r0, [r7, #4]
 801cb90:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801cb92:	2300      	movs	r3, #0
 801cb94:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	681b      	ldr	r3, [r3, #0]
 801cb9a:	3350      	adds	r3, #80	@ 0x50
 801cb9c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801cb9e:	683b      	ldr	r3, [r7, #0]
 801cba0:	009b      	lsls	r3, r3, #2
 801cba2:	68fa      	ldr	r2, [r7, #12]
 801cba4:	18d3      	adds	r3, r2, r3
 801cba6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801cba8:	68fb      	ldr	r3, [r7, #12]
 801cbaa:	681b      	ldr	r3, [r3, #0]
}
 801cbac:	0018      	movs	r0, r3
 801cbae:	46bd      	mov	sp, r7
 801cbb0:	b004      	add	sp, #16
 801cbb2:	bd80      	pop	{r7, pc}

0801cbb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801cbb4:	b580      	push	{r7, lr}
 801cbb6:	b082      	sub	sp, #8
 801cbb8:	af00      	add	r7, sp, #0
 801cbba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cbbc:	687b      	ldr	r3, [r7, #4]
 801cbbe:	2b00      	cmp	r3, #0
 801cbc0:	d101      	bne.n	801cbc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801cbc2:	2301      	movs	r3, #1
 801cbc4:	e032      	b.n	801cc2c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	2239      	movs	r2, #57	@ 0x39
 801cbca:	5c9b      	ldrb	r3, [r3, r2]
 801cbcc:	b2db      	uxtb	r3, r3
 801cbce:	2b00      	cmp	r3, #0
 801cbd0:	d107      	bne.n	801cbe2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	2238      	movs	r2, #56	@ 0x38
 801cbd6:	2100      	movs	r1, #0
 801cbd8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	0018      	movs	r0, r3
 801cbde:	f7f6 fea3 	bl	8013928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	2239      	movs	r2, #57	@ 0x39
 801cbe6:	2102      	movs	r1, #2
 801cbe8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	681a      	ldr	r2, [r3, #0]
 801cbee:	687b      	ldr	r3, [r7, #4]
 801cbf0:	3304      	adds	r3, #4
 801cbf2:	0019      	movs	r1, r3
 801cbf4:	0010      	movs	r0, r2
 801cbf6:	f000 fa1d 	bl	801d034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cbfa:	687b      	ldr	r3, [r7, #4]
 801cbfc:	223e      	movs	r2, #62	@ 0x3e
 801cbfe:	2101      	movs	r1, #1
 801cc00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	223a      	movs	r2, #58	@ 0x3a
 801cc06:	2101      	movs	r1, #1
 801cc08:	5499      	strb	r1, [r3, r2]
 801cc0a:	687b      	ldr	r3, [r7, #4]
 801cc0c:	223b      	movs	r2, #59	@ 0x3b
 801cc0e:	2101      	movs	r1, #1
 801cc10:	5499      	strb	r1, [r3, r2]
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	223c      	movs	r2, #60	@ 0x3c
 801cc16:	2101      	movs	r1, #1
 801cc18:	5499      	strb	r1, [r3, r2]
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	223d      	movs	r2, #61	@ 0x3d
 801cc1e:	2101      	movs	r1, #1
 801cc20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cc22:	687b      	ldr	r3, [r7, #4]
 801cc24:	2239      	movs	r2, #57	@ 0x39
 801cc26:	2101      	movs	r1, #1
 801cc28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cc2a:	2300      	movs	r3, #0
}
 801cc2c:	0018      	movs	r0, r3
 801cc2e:	46bd      	mov	sp, r7
 801cc30:	b002      	add	sp, #8
 801cc32:	bd80      	pop	{r7, pc}

0801cc34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801cc34:	b580      	push	{r7, lr}
 801cc36:	b084      	sub	sp, #16
 801cc38:	af00      	add	r7, sp, #0
 801cc3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	2239      	movs	r2, #57	@ 0x39
 801cc40:	5c9b      	ldrb	r3, [r3, r2]
 801cc42:	b2db      	uxtb	r3, r3
 801cc44:	2b01      	cmp	r3, #1
 801cc46:	d001      	beq.n	801cc4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801cc48:	2301      	movs	r3, #1
 801cc4a:	e033      	b.n	801ccb4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cc4c:	687b      	ldr	r3, [r7, #4]
 801cc4e:	2239      	movs	r2, #57	@ 0x39
 801cc50:	2102      	movs	r1, #2
 801cc52:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	681a      	ldr	r2, [r3, #0]
 801cc58:	2380      	movs	r3, #128	@ 0x80
 801cc5a:	05db      	lsls	r3, r3, #23
 801cc5c:	429a      	cmp	r2, r3
 801cc5e:	d00e      	beq.n	801cc7e <HAL_TIM_Base_Start+0x4a>
 801cc60:	687b      	ldr	r3, [r7, #4]
 801cc62:	681b      	ldr	r3, [r3, #0]
 801cc64:	4a15      	ldr	r2, [pc, #84]	@ (801ccbc <HAL_TIM_Base_Start+0x88>)
 801cc66:	4293      	cmp	r3, r2
 801cc68:	d009      	beq.n	801cc7e <HAL_TIM_Base_Start+0x4a>
 801cc6a:	687b      	ldr	r3, [r7, #4]
 801cc6c:	681b      	ldr	r3, [r3, #0]
 801cc6e:	4a14      	ldr	r2, [pc, #80]	@ (801ccc0 <HAL_TIM_Base_Start+0x8c>)
 801cc70:	4293      	cmp	r3, r2
 801cc72:	d004      	beq.n	801cc7e <HAL_TIM_Base_Start+0x4a>
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	681b      	ldr	r3, [r3, #0]
 801cc78:	4a12      	ldr	r2, [pc, #72]	@ (801ccc4 <HAL_TIM_Base_Start+0x90>)
 801cc7a:	4293      	cmp	r3, r2
 801cc7c:	d111      	bne.n	801cca2 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cc7e:	687b      	ldr	r3, [r7, #4]
 801cc80:	681b      	ldr	r3, [r3, #0]
 801cc82:	689b      	ldr	r3, [r3, #8]
 801cc84:	2207      	movs	r2, #7
 801cc86:	4013      	ands	r3, r2
 801cc88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cc8a:	68fb      	ldr	r3, [r7, #12]
 801cc8c:	2b06      	cmp	r3, #6
 801cc8e:	d010      	beq.n	801ccb2 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801cc90:	687b      	ldr	r3, [r7, #4]
 801cc92:	681b      	ldr	r3, [r3, #0]
 801cc94:	681a      	ldr	r2, [r3, #0]
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	681b      	ldr	r3, [r3, #0]
 801cc9a:	2101      	movs	r1, #1
 801cc9c:	430a      	orrs	r2, r1
 801cc9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cca0:	e007      	b.n	801ccb2 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	681b      	ldr	r3, [r3, #0]
 801cca6:	681a      	ldr	r2, [r3, #0]
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	681b      	ldr	r3, [r3, #0]
 801ccac:	2101      	movs	r1, #1
 801ccae:	430a      	orrs	r2, r1
 801ccb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801ccb2:	2300      	movs	r3, #0
}
 801ccb4:	0018      	movs	r0, r3
 801ccb6:	46bd      	mov	sp, r7
 801ccb8:	b004      	add	sp, #16
 801ccba:	bd80      	pop	{r7, pc}
 801ccbc:	40000400 	.word	0x40000400
 801ccc0:	40010800 	.word	0x40010800
 801ccc4:	40011400 	.word	0x40011400

0801ccc8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801ccc8:	b580      	push	{r7, lr}
 801ccca:	b082      	sub	sp, #8
 801cccc:	af00      	add	r7, sp, #0
 801ccce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	681b      	ldr	r3, [r3, #0]
 801ccd4:	6a1b      	ldr	r3, [r3, #32]
 801ccd6:	4a0a      	ldr	r2, [pc, #40]	@ (801cd00 <HAL_TIM_Base_Stop+0x38>)
 801ccd8:	4013      	ands	r3, r2
 801ccda:	d107      	bne.n	801ccec <HAL_TIM_Base_Stop+0x24>
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	681b      	ldr	r3, [r3, #0]
 801cce0:	681a      	ldr	r2, [r3, #0]
 801cce2:	687b      	ldr	r3, [r7, #4]
 801cce4:	681b      	ldr	r3, [r3, #0]
 801cce6:	2101      	movs	r1, #1
 801cce8:	438a      	bics	r2, r1
 801ccea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	2239      	movs	r2, #57	@ 0x39
 801ccf0:	2101      	movs	r1, #1
 801ccf2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801ccf4:	2300      	movs	r3, #0
}
 801ccf6:	0018      	movs	r0, r3
 801ccf8:	46bd      	mov	sp, r7
 801ccfa:	b002      	add	sp, #8
 801ccfc:	bd80      	pop	{r7, pc}
 801ccfe:	46c0      	nop			@ (mov r8, r8)
 801cd00:	00001111 	.word	0x00001111

0801cd04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801cd04:	b580      	push	{r7, lr}
 801cd06:	b082      	sub	sp, #8
 801cd08:	af00      	add	r7, sp, #0
 801cd0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	d101      	bne.n	801cd16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801cd12:	2301      	movs	r3, #1
 801cd14:	e032      	b.n	801cd7c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	2239      	movs	r2, #57	@ 0x39
 801cd1a:	5c9b      	ldrb	r3, [r3, r2]
 801cd1c:	b2db      	uxtb	r3, r3
 801cd1e:	2b00      	cmp	r3, #0
 801cd20:	d107      	bne.n	801cd32 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	2238      	movs	r2, #56	@ 0x38
 801cd26:	2100      	movs	r1, #0
 801cd28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	0018      	movs	r0, r3
 801cd2e:	f7f6 fdd7 	bl	80138e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	2239      	movs	r2, #57	@ 0x39
 801cd36:	2102      	movs	r1, #2
 801cd38:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	681a      	ldr	r2, [r3, #0]
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	3304      	adds	r3, #4
 801cd42:	0019      	movs	r1, r3
 801cd44:	0010      	movs	r0, r2
 801cd46:	f000 f975 	bl	801d034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	223e      	movs	r2, #62	@ 0x3e
 801cd4e:	2101      	movs	r1, #1
 801cd50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	223a      	movs	r2, #58	@ 0x3a
 801cd56:	2101      	movs	r1, #1
 801cd58:	5499      	strb	r1, [r3, r2]
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	223b      	movs	r2, #59	@ 0x3b
 801cd5e:	2101      	movs	r1, #1
 801cd60:	5499      	strb	r1, [r3, r2]
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	223c      	movs	r2, #60	@ 0x3c
 801cd66:	2101      	movs	r1, #1
 801cd68:	5499      	strb	r1, [r3, r2]
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	223d      	movs	r2, #61	@ 0x3d
 801cd6e:	2101      	movs	r1, #1
 801cd70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	2239      	movs	r2, #57	@ 0x39
 801cd76:	2101      	movs	r1, #1
 801cd78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cd7a:	2300      	movs	r3, #0
}
 801cd7c:	0018      	movs	r0, r3
 801cd7e:	46bd      	mov	sp, r7
 801cd80:	b002      	add	sp, #8
 801cd82:	bd80      	pop	{r7, pc}

0801cd84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801cd84:	b580      	push	{r7, lr}
 801cd86:	b084      	sub	sp, #16
 801cd88:	af00      	add	r7, sp, #0
 801cd8a:	6078      	str	r0, [r7, #4]
 801cd8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801cd8e:	683b      	ldr	r3, [r7, #0]
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	d108      	bne.n	801cda6 <HAL_TIM_PWM_Start+0x22>
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	223a      	movs	r2, #58	@ 0x3a
 801cd98:	5c9b      	ldrb	r3, [r3, r2]
 801cd9a:	b2db      	uxtb	r3, r3
 801cd9c:	3b01      	subs	r3, #1
 801cd9e:	1e5a      	subs	r2, r3, #1
 801cda0:	4193      	sbcs	r3, r2
 801cda2:	b2db      	uxtb	r3, r3
 801cda4:	e01f      	b.n	801cde6 <HAL_TIM_PWM_Start+0x62>
 801cda6:	683b      	ldr	r3, [r7, #0]
 801cda8:	2b04      	cmp	r3, #4
 801cdaa:	d108      	bne.n	801cdbe <HAL_TIM_PWM_Start+0x3a>
 801cdac:	687b      	ldr	r3, [r7, #4]
 801cdae:	223b      	movs	r2, #59	@ 0x3b
 801cdb0:	5c9b      	ldrb	r3, [r3, r2]
 801cdb2:	b2db      	uxtb	r3, r3
 801cdb4:	3b01      	subs	r3, #1
 801cdb6:	1e5a      	subs	r2, r3, #1
 801cdb8:	4193      	sbcs	r3, r2
 801cdba:	b2db      	uxtb	r3, r3
 801cdbc:	e013      	b.n	801cde6 <HAL_TIM_PWM_Start+0x62>
 801cdbe:	683b      	ldr	r3, [r7, #0]
 801cdc0:	2b08      	cmp	r3, #8
 801cdc2:	d108      	bne.n	801cdd6 <HAL_TIM_PWM_Start+0x52>
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	223c      	movs	r2, #60	@ 0x3c
 801cdc8:	5c9b      	ldrb	r3, [r3, r2]
 801cdca:	b2db      	uxtb	r3, r3
 801cdcc:	3b01      	subs	r3, #1
 801cdce:	1e5a      	subs	r2, r3, #1
 801cdd0:	4193      	sbcs	r3, r2
 801cdd2:	b2db      	uxtb	r3, r3
 801cdd4:	e007      	b.n	801cde6 <HAL_TIM_PWM_Start+0x62>
 801cdd6:	687b      	ldr	r3, [r7, #4]
 801cdd8:	223d      	movs	r2, #61	@ 0x3d
 801cdda:	5c9b      	ldrb	r3, [r3, r2]
 801cddc:	b2db      	uxtb	r3, r3
 801cdde:	3b01      	subs	r3, #1
 801cde0:	1e5a      	subs	r2, r3, #1
 801cde2:	4193      	sbcs	r3, r2
 801cde4:	b2db      	uxtb	r3, r3
 801cde6:	2b00      	cmp	r3, #0
 801cde8:	d001      	beq.n	801cdee <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801cdea:	2301      	movs	r3, #1
 801cdec:	e052      	b.n	801ce94 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801cdee:	683b      	ldr	r3, [r7, #0]
 801cdf0:	2b00      	cmp	r3, #0
 801cdf2:	d104      	bne.n	801cdfe <HAL_TIM_PWM_Start+0x7a>
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	223a      	movs	r2, #58	@ 0x3a
 801cdf8:	2102      	movs	r1, #2
 801cdfa:	5499      	strb	r1, [r3, r2]
 801cdfc:	e013      	b.n	801ce26 <HAL_TIM_PWM_Start+0xa2>
 801cdfe:	683b      	ldr	r3, [r7, #0]
 801ce00:	2b04      	cmp	r3, #4
 801ce02:	d104      	bne.n	801ce0e <HAL_TIM_PWM_Start+0x8a>
 801ce04:	687b      	ldr	r3, [r7, #4]
 801ce06:	223b      	movs	r2, #59	@ 0x3b
 801ce08:	2102      	movs	r1, #2
 801ce0a:	5499      	strb	r1, [r3, r2]
 801ce0c:	e00b      	b.n	801ce26 <HAL_TIM_PWM_Start+0xa2>
 801ce0e:	683b      	ldr	r3, [r7, #0]
 801ce10:	2b08      	cmp	r3, #8
 801ce12:	d104      	bne.n	801ce1e <HAL_TIM_PWM_Start+0x9a>
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	223c      	movs	r2, #60	@ 0x3c
 801ce18:	2102      	movs	r1, #2
 801ce1a:	5499      	strb	r1, [r3, r2]
 801ce1c:	e003      	b.n	801ce26 <HAL_TIM_PWM_Start+0xa2>
 801ce1e:	687b      	ldr	r3, [r7, #4]
 801ce20:	223d      	movs	r2, #61	@ 0x3d
 801ce22:	2102      	movs	r1, #2
 801ce24:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	681b      	ldr	r3, [r3, #0]
 801ce2a:	6839      	ldr	r1, [r7, #0]
 801ce2c:	2201      	movs	r2, #1
 801ce2e:	0018      	movs	r0, r3
 801ce30:	f000 fa62 	bl	801d2f8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	681a      	ldr	r2, [r3, #0]
 801ce38:	2380      	movs	r3, #128	@ 0x80
 801ce3a:	05db      	lsls	r3, r3, #23
 801ce3c:	429a      	cmp	r2, r3
 801ce3e:	d00e      	beq.n	801ce5e <HAL_TIM_PWM_Start+0xda>
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	681b      	ldr	r3, [r3, #0]
 801ce44:	4a15      	ldr	r2, [pc, #84]	@ (801ce9c <HAL_TIM_PWM_Start+0x118>)
 801ce46:	4293      	cmp	r3, r2
 801ce48:	d009      	beq.n	801ce5e <HAL_TIM_PWM_Start+0xda>
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	681b      	ldr	r3, [r3, #0]
 801ce4e:	4a14      	ldr	r2, [pc, #80]	@ (801cea0 <HAL_TIM_PWM_Start+0x11c>)
 801ce50:	4293      	cmp	r3, r2
 801ce52:	d004      	beq.n	801ce5e <HAL_TIM_PWM_Start+0xda>
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	681b      	ldr	r3, [r3, #0]
 801ce58:	4a12      	ldr	r2, [pc, #72]	@ (801cea4 <HAL_TIM_PWM_Start+0x120>)
 801ce5a:	4293      	cmp	r3, r2
 801ce5c:	d111      	bne.n	801ce82 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	681b      	ldr	r3, [r3, #0]
 801ce62:	689b      	ldr	r3, [r3, #8]
 801ce64:	2207      	movs	r2, #7
 801ce66:	4013      	ands	r3, r2
 801ce68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ce6a:	68fb      	ldr	r3, [r7, #12]
 801ce6c:	2b06      	cmp	r3, #6
 801ce6e:	d010      	beq.n	801ce92 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	681a      	ldr	r2, [r3, #0]
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	681b      	ldr	r3, [r3, #0]
 801ce7a:	2101      	movs	r1, #1
 801ce7c:	430a      	orrs	r2, r1
 801ce7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ce80:	e007      	b.n	801ce92 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	681a      	ldr	r2, [r3, #0]
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	681b      	ldr	r3, [r3, #0]
 801ce8c:	2101      	movs	r1, #1
 801ce8e:	430a      	orrs	r2, r1
 801ce90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801ce92:	2300      	movs	r3, #0
}
 801ce94:	0018      	movs	r0, r3
 801ce96:	46bd      	mov	sp, r7
 801ce98:	b004      	add	sp, #16
 801ce9a:	bd80      	pop	{r7, pc}
 801ce9c:	40000400 	.word	0x40000400
 801cea0:	40010800 	.word	0x40010800
 801cea4:	40011400 	.word	0x40011400

0801cea8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801cea8:	b580      	push	{r7, lr}
 801ceaa:	b086      	sub	sp, #24
 801ceac:	af00      	add	r7, sp, #0
 801ceae:	60f8      	str	r0, [r7, #12]
 801ceb0:	60b9      	str	r1, [r7, #8]
 801ceb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ceb4:	2317      	movs	r3, #23
 801ceb6:	18fb      	adds	r3, r7, r3
 801ceb8:	2200      	movs	r2, #0
 801ceba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801cebc:	68fb      	ldr	r3, [r7, #12]
 801cebe:	2238      	movs	r2, #56	@ 0x38
 801cec0:	5c9b      	ldrb	r3, [r3, r2]
 801cec2:	2b01      	cmp	r3, #1
 801cec4:	d101      	bne.n	801ceca <HAL_TIM_PWM_ConfigChannel+0x22>
 801cec6:	2302      	movs	r3, #2
 801cec8:	e0ad      	b.n	801d026 <HAL_TIM_PWM_ConfigChannel+0x17e>
 801ceca:	68fb      	ldr	r3, [r7, #12]
 801cecc:	2238      	movs	r2, #56	@ 0x38
 801cece:	2101      	movs	r1, #1
 801ced0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	2b0c      	cmp	r3, #12
 801ced6:	d100      	bne.n	801ceda <HAL_TIM_PWM_ConfigChannel+0x32>
 801ced8:	e076      	b.n	801cfc8 <HAL_TIM_PWM_ConfigChannel+0x120>
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	2b0c      	cmp	r3, #12
 801cede:	d900      	bls.n	801cee2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 801cee0:	e095      	b.n	801d00e <HAL_TIM_PWM_ConfigChannel+0x166>
 801cee2:	687b      	ldr	r3, [r7, #4]
 801cee4:	2b08      	cmp	r3, #8
 801cee6:	d04e      	beq.n	801cf86 <HAL_TIM_PWM_ConfigChannel+0xde>
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	2b08      	cmp	r3, #8
 801ceec:	d900      	bls.n	801cef0 <HAL_TIM_PWM_ConfigChannel+0x48>
 801ceee:	e08e      	b.n	801d00e <HAL_TIM_PWM_ConfigChannel+0x166>
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	2b00      	cmp	r3, #0
 801cef4:	d003      	beq.n	801cefe <HAL_TIM_PWM_ConfigChannel+0x56>
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	2b04      	cmp	r3, #4
 801cefa:	d021      	beq.n	801cf40 <HAL_TIM_PWM_ConfigChannel+0x98>
 801cefc:	e087      	b.n	801d00e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801cefe:	68fb      	ldr	r3, [r7, #12]
 801cf00:	681b      	ldr	r3, [r3, #0]
 801cf02:	68ba      	ldr	r2, [r7, #8]
 801cf04:	0011      	movs	r1, r2
 801cf06:	0018      	movs	r0, r3
 801cf08:	f000 f8f2 	bl	801d0f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801cf0c:	68fb      	ldr	r3, [r7, #12]
 801cf0e:	681b      	ldr	r3, [r3, #0]
 801cf10:	699a      	ldr	r2, [r3, #24]
 801cf12:	68fb      	ldr	r3, [r7, #12]
 801cf14:	681b      	ldr	r3, [r3, #0]
 801cf16:	2108      	movs	r1, #8
 801cf18:	430a      	orrs	r2, r1
 801cf1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801cf1c:	68fb      	ldr	r3, [r7, #12]
 801cf1e:	681b      	ldr	r3, [r3, #0]
 801cf20:	699a      	ldr	r2, [r3, #24]
 801cf22:	68fb      	ldr	r3, [r7, #12]
 801cf24:	681b      	ldr	r3, [r3, #0]
 801cf26:	2104      	movs	r1, #4
 801cf28:	438a      	bics	r2, r1
 801cf2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801cf2c:	68fb      	ldr	r3, [r7, #12]
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	6999      	ldr	r1, [r3, #24]
 801cf32:	68bb      	ldr	r3, [r7, #8]
 801cf34:	68da      	ldr	r2, [r3, #12]
 801cf36:	68fb      	ldr	r3, [r7, #12]
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	430a      	orrs	r2, r1
 801cf3c:	619a      	str	r2, [r3, #24]
      break;
 801cf3e:	e06b      	b.n	801d018 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801cf40:	68fb      	ldr	r3, [r7, #12]
 801cf42:	681b      	ldr	r3, [r3, #0]
 801cf44:	68ba      	ldr	r2, [r7, #8]
 801cf46:	0011      	movs	r1, r2
 801cf48:	0018      	movs	r0, r3
 801cf4a:	f000 f90d 	bl	801d168 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801cf4e:	68fb      	ldr	r3, [r7, #12]
 801cf50:	681b      	ldr	r3, [r3, #0]
 801cf52:	699a      	ldr	r2, [r3, #24]
 801cf54:	68fb      	ldr	r3, [r7, #12]
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	2180      	movs	r1, #128	@ 0x80
 801cf5a:	0109      	lsls	r1, r1, #4
 801cf5c:	430a      	orrs	r2, r1
 801cf5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801cf60:	68fb      	ldr	r3, [r7, #12]
 801cf62:	681b      	ldr	r3, [r3, #0]
 801cf64:	699a      	ldr	r2, [r3, #24]
 801cf66:	68fb      	ldr	r3, [r7, #12]
 801cf68:	681b      	ldr	r3, [r3, #0]
 801cf6a:	4931      	ldr	r1, [pc, #196]	@ (801d030 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801cf6c:	400a      	ands	r2, r1
 801cf6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801cf70:	68fb      	ldr	r3, [r7, #12]
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	6999      	ldr	r1, [r3, #24]
 801cf76:	68bb      	ldr	r3, [r7, #8]
 801cf78:	68db      	ldr	r3, [r3, #12]
 801cf7a:	021a      	lsls	r2, r3, #8
 801cf7c:	68fb      	ldr	r3, [r7, #12]
 801cf7e:	681b      	ldr	r3, [r3, #0]
 801cf80:	430a      	orrs	r2, r1
 801cf82:	619a      	str	r2, [r3, #24]
      break;
 801cf84:	e048      	b.n	801d018 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801cf86:	68fb      	ldr	r3, [r7, #12]
 801cf88:	681b      	ldr	r3, [r3, #0]
 801cf8a:	68ba      	ldr	r2, [r7, #8]
 801cf8c:	0011      	movs	r1, r2
 801cf8e:	0018      	movs	r0, r3
 801cf90:	f000 f92c 	bl	801d1ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801cf94:	68fb      	ldr	r3, [r7, #12]
 801cf96:	681b      	ldr	r3, [r3, #0]
 801cf98:	69da      	ldr	r2, [r3, #28]
 801cf9a:	68fb      	ldr	r3, [r7, #12]
 801cf9c:	681b      	ldr	r3, [r3, #0]
 801cf9e:	2108      	movs	r1, #8
 801cfa0:	430a      	orrs	r2, r1
 801cfa2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801cfa4:	68fb      	ldr	r3, [r7, #12]
 801cfa6:	681b      	ldr	r3, [r3, #0]
 801cfa8:	69da      	ldr	r2, [r3, #28]
 801cfaa:	68fb      	ldr	r3, [r7, #12]
 801cfac:	681b      	ldr	r3, [r3, #0]
 801cfae:	2104      	movs	r1, #4
 801cfb0:	438a      	bics	r2, r1
 801cfb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801cfb4:	68fb      	ldr	r3, [r7, #12]
 801cfb6:	681b      	ldr	r3, [r3, #0]
 801cfb8:	69d9      	ldr	r1, [r3, #28]
 801cfba:	68bb      	ldr	r3, [r7, #8]
 801cfbc:	68da      	ldr	r2, [r3, #12]
 801cfbe:	68fb      	ldr	r3, [r7, #12]
 801cfc0:	681b      	ldr	r3, [r3, #0]
 801cfc2:	430a      	orrs	r2, r1
 801cfc4:	61da      	str	r2, [r3, #28]
      break;
 801cfc6:	e027      	b.n	801d018 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801cfc8:	68fb      	ldr	r3, [r7, #12]
 801cfca:	681b      	ldr	r3, [r3, #0]
 801cfcc:	68ba      	ldr	r2, [r7, #8]
 801cfce:	0011      	movs	r1, r2
 801cfd0:	0018      	movs	r0, r3
 801cfd2:	f000 f94b 	bl	801d26c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801cfd6:	68fb      	ldr	r3, [r7, #12]
 801cfd8:	681b      	ldr	r3, [r3, #0]
 801cfda:	69da      	ldr	r2, [r3, #28]
 801cfdc:	68fb      	ldr	r3, [r7, #12]
 801cfde:	681b      	ldr	r3, [r3, #0]
 801cfe0:	2180      	movs	r1, #128	@ 0x80
 801cfe2:	0109      	lsls	r1, r1, #4
 801cfe4:	430a      	orrs	r2, r1
 801cfe6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801cfe8:	68fb      	ldr	r3, [r7, #12]
 801cfea:	681b      	ldr	r3, [r3, #0]
 801cfec:	69da      	ldr	r2, [r3, #28]
 801cfee:	68fb      	ldr	r3, [r7, #12]
 801cff0:	681b      	ldr	r3, [r3, #0]
 801cff2:	490f      	ldr	r1, [pc, #60]	@ (801d030 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801cff4:	400a      	ands	r2, r1
 801cff6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	681b      	ldr	r3, [r3, #0]
 801cffc:	69d9      	ldr	r1, [r3, #28]
 801cffe:	68bb      	ldr	r3, [r7, #8]
 801d000:	68db      	ldr	r3, [r3, #12]
 801d002:	021a      	lsls	r2, r3, #8
 801d004:	68fb      	ldr	r3, [r7, #12]
 801d006:	681b      	ldr	r3, [r3, #0]
 801d008:	430a      	orrs	r2, r1
 801d00a:	61da      	str	r2, [r3, #28]
      break;
 801d00c:	e004      	b.n	801d018 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801d00e:	2317      	movs	r3, #23
 801d010:	18fb      	adds	r3, r7, r3
 801d012:	2201      	movs	r2, #1
 801d014:	701a      	strb	r2, [r3, #0]
      break;
 801d016:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801d018:	68fb      	ldr	r3, [r7, #12]
 801d01a:	2238      	movs	r2, #56	@ 0x38
 801d01c:	2100      	movs	r1, #0
 801d01e:	5499      	strb	r1, [r3, r2]

  return status;
 801d020:	2317      	movs	r3, #23
 801d022:	18fb      	adds	r3, r7, r3
 801d024:	781b      	ldrb	r3, [r3, #0]
}
 801d026:	0018      	movs	r0, r3
 801d028:	46bd      	mov	sp, r7
 801d02a:	b006      	add	sp, #24
 801d02c:	bd80      	pop	{r7, pc}
 801d02e:	46c0      	nop			@ (mov r8, r8)
 801d030:	fffffbff 	.word	0xfffffbff

0801d034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801d034:	b580      	push	{r7, lr}
 801d036:	b084      	sub	sp, #16
 801d038:	af00      	add	r7, sp, #0
 801d03a:	6078      	str	r0, [r7, #4]
 801d03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d03e:	687b      	ldr	r3, [r7, #4]
 801d040:	681b      	ldr	r3, [r3, #0]
 801d042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d044:	687a      	ldr	r2, [r7, #4]
 801d046:	2380      	movs	r3, #128	@ 0x80
 801d048:	05db      	lsls	r3, r3, #23
 801d04a:	429a      	cmp	r2, r3
 801d04c:	d00b      	beq.n	801d066 <TIM_Base_SetConfig+0x32>
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	4a23      	ldr	r2, [pc, #140]	@ (801d0e0 <TIM_Base_SetConfig+0xac>)
 801d052:	4293      	cmp	r3, r2
 801d054:	d007      	beq.n	801d066 <TIM_Base_SetConfig+0x32>
 801d056:	687b      	ldr	r3, [r7, #4]
 801d058:	4a22      	ldr	r2, [pc, #136]	@ (801d0e4 <TIM_Base_SetConfig+0xb0>)
 801d05a:	4293      	cmp	r3, r2
 801d05c:	d003      	beq.n	801d066 <TIM_Base_SetConfig+0x32>
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	4a21      	ldr	r2, [pc, #132]	@ (801d0e8 <TIM_Base_SetConfig+0xb4>)
 801d062:	4293      	cmp	r3, r2
 801d064:	d108      	bne.n	801d078 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d066:	68fb      	ldr	r3, [r7, #12]
 801d068:	2270      	movs	r2, #112	@ 0x70
 801d06a:	4393      	bics	r3, r2
 801d06c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d06e:	683b      	ldr	r3, [r7, #0]
 801d070:	685b      	ldr	r3, [r3, #4]
 801d072:	68fa      	ldr	r2, [r7, #12]
 801d074:	4313      	orrs	r3, r2
 801d076:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d078:	687a      	ldr	r2, [r7, #4]
 801d07a:	2380      	movs	r3, #128	@ 0x80
 801d07c:	05db      	lsls	r3, r3, #23
 801d07e:	429a      	cmp	r2, r3
 801d080:	d00b      	beq.n	801d09a <TIM_Base_SetConfig+0x66>
 801d082:	687b      	ldr	r3, [r7, #4]
 801d084:	4a16      	ldr	r2, [pc, #88]	@ (801d0e0 <TIM_Base_SetConfig+0xac>)
 801d086:	4293      	cmp	r3, r2
 801d088:	d007      	beq.n	801d09a <TIM_Base_SetConfig+0x66>
 801d08a:	687b      	ldr	r3, [r7, #4]
 801d08c:	4a15      	ldr	r2, [pc, #84]	@ (801d0e4 <TIM_Base_SetConfig+0xb0>)
 801d08e:	4293      	cmp	r3, r2
 801d090:	d003      	beq.n	801d09a <TIM_Base_SetConfig+0x66>
 801d092:	687b      	ldr	r3, [r7, #4]
 801d094:	4a14      	ldr	r2, [pc, #80]	@ (801d0e8 <TIM_Base_SetConfig+0xb4>)
 801d096:	4293      	cmp	r3, r2
 801d098:	d108      	bne.n	801d0ac <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d09a:	68fb      	ldr	r3, [r7, #12]
 801d09c:	4a13      	ldr	r2, [pc, #76]	@ (801d0ec <TIM_Base_SetConfig+0xb8>)
 801d09e:	4013      	ands	r3, r2
 801d0a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d0a2:	683b      	ldr	r3, [r7, #0]
 801d0a4:	68db      	ldr	r3, [r3, #12]
 801d0a6:	68fa      	ldr	r2, [r7, #12]
 801d0a8:	4313      	orrs	r3, r2
 801d0aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d0ac:	68fb      	ldr	r3, [r7, #12]
 801d0ae:	2280      	movs	r2, #128	@ 0x80
 801d0b0:	4393      	bics	r3, r2
 801d0b2:	001a      	movs	r2, r3
 801d0b4:	683b      	ldr	r3, [r7, #0]
 801d0b6:	691b      	ldr	r3, [r3, #16]
 801d0b8:	4313      	orrs	r3, r2
 801d0ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	68fa      	ldr	r2, [r7, #12]
 801d0c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d0c2:	683b      	ldr	r3, [r7, #0]
 801d0c4:	689a      	ldr	r2, [r3, #8]
 801d0c6:	687b      	ldr	r3, [r7, #4]
 801d0c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d0ca:	683b      	ldr	r3, [r7, #0]
 801d0cc:	681a      	ldr	r2, [r3, #0]
 801d0ce:	687b      	ldr	r3, [r7, #4]
 801d0d0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d0d2:	687b      	ldr	r3, [r7, #4]
 801d0d4:	2201      	movs	r2, #1
 801d0d6:	615a      	str	r2, [r3, #20]
}
 801d0d8:	46c0      	nop			@ (mov r8, r8)
 801d0da:	46bd      	mov	sp, r7
 801d0dc:	b004      	add	sp, #16
 801d0de:	bd80      	pop	{r7, pc}
 801d0e0:	40000400 	.word	0x40000400
 801d0e4:	40010800 	.word	0x40010800
 801d0e8:	40011400 	.word	0x40011400
 801d0ec:	fffffcff 	.word	0xfffffcff

0801d0f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d0f0:	b580      	push	{r7, lr}
 801d0f2:	b086      	sub	sp, #24
 801d0f4:	af00      	add	r7, sp, #0
 801d0f6:	6078      	str	r0, [r7, #4]
 801d0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	6a1b      	ldr	r3, [r3, #32]
 801d0fe:	2201      	movs	r2, #1
 801d100:	4393      	bics	r3, r2
 801d102:	001a      	movs	r2, r3
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	6a1b      	ldr	r3, [r3, #32]
 801d10c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d10e:	687b      	ldr	r3, [r7, #4]
 801d110:	685b      	ldr	r3, [r3, #4]
 801d112:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d114:	687b      	ldr	r3, [r7, #4]
 801d116:	699b      	ldr	r3, [r3, #24]
 801d118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d11a:	68fb      	ldr	r3, [r7, #12]
 801d11c:	2270      	movs	r2, #112	@ 0x70
 801d11e:	4393      	bics	r3, r2
 801d120:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d122:	68fb      	ldr	r3, [r7, #12]
 801d124:	2203      	movs	r2, #3
 801d126:	4393      	bics	r3, r2
 801d128:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d12a:	683b      	ldr	r3, [r7, #0]
 801d12c:	681b      	ldr	r3, [r3, #0]
 801d12e:	68fa      	ldr	r2, [r7, #12]
 801d130:	4313      	orrs	r3, r2
 801d132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d134:	697b      	ldr	r3, [r7, #20]
 801d136:	2202      	movs	r2, #2
 801d138:	4393      	bics	r3, r2
 801d13a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d13c:	683b      	ldr	r3, [r7, #0]
 801d13e:	689b      	ldr	r3, [r3, #8]
 801d140:	697a      	ldr	r2, [r7, #20]
 801d142:	4313      	orrs	r3, r2
 801d144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	693a      	ldr	r2, [r7, #16]
 801d14a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d14c:	687b      	ldr	r3, [r7, #4]
 801d14e:	68fa      	ldr	r2, [r7, #12]
 801d150:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d152:	683b      	ldr	r3, [r7, #0]
 801d154:	685a      	ldr	r2, [r3, #4]
 801d156:	687b      	ldr	r3, [r7, #4]
 801d158:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	697a      	ldr	r2, [r7, #20]
 801d15e:	621a      	str	r2, [r3, #32]
}
 801d160:	46c0      	nop			@ (mov r8, r8)
 801d162:	46bd      	mov	sp, r7
 801d164:	b006      	add	sp, #24
 801d166:	bd80      	pop	{r7, pc}

0801d168 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d168:	b580      	push	{r7, lr}
 801d16a:	b086      	sub	sp, #24
 801d16c:	af00      	add	r7, sp, #0
 801d16e:	6078      	str	r0, [r7, #4]
 801d170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	6a1b      	ldr	r3, [r3, #32]
 801d176:	2210      	movs	r2, #16
 801d178:	4393      	bics	r3, r2
 801d17a:	001a      	movs	r2, r3
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	6a1b      	ldr	r3, [r3, #32]
 801d184:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d186:	687b      	ldr	r3, [r7, #4]
 801d188:	685b      	ldr	r3, [r3, #4]
 801d18a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d18c:	687b      	ldr	r3, [r7, #4]
 801d18e:	699b      	ldr	r3, [r3, #24]
 801d190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d192:	68fb      	ldr	r3, [r7, #12]
 801d194:	4a13      	ldr	r2, [pc, #76]	@ (801d1e4 <TIM_OC2_SetConfig+0x7c>)
 801d196:	4013      	ands	r3, r2
 801d198:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d19a:	68fb      	ldr	r3, [r7, #12]
 801d19c:	4a12      	ldr	r2, [pc, #72]	@ (801d1e8 <TIM_OC2_SetConfig+0x80>)
 801d19e:	4013      	ands	r3, r2
 801d1a0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d1a2:	683b      	ldr	r3, [r7, #0]
 801d1a4:	681b      	ldr	r3, [r3, #0]
 801d1a6:	021b      	lsls	r3, r3, #8
 801d1a8:	68fa      	ldr	r2, [r7, #12]
 801d1aa:	4313      	orrs	r3, r2
 801d1ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d1ae:	697b      	ldr	r3, [r7, #20]
 801d1b0:	2220      	movs	r2, #32
 801d1b2:	4393      	bics	r3, r2
 801d1b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d1b6:	683b      	ldr	r3, [r7, #0]
 801d1b8:	689b      	ldr	r3, [r3, #8]
 801d1ba:	011b      	lsls	r3, r3, #4
 801d1bc:	697a      	ldr	r2, [r7, #20]
 801d1be:	4313      	orrs	r3, r2
 801d1c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d1c2:	687b      	ldr	r3, [r7, #4]
 801d1c4:	693a      	ldr	r2, [r7, #16]
 801d1c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	68fa      	ldr	r2, [r7, #12]
 801d1cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d1ce:	683b      	ldr	r3, [r7, #0]
 801d1d0:	685a      	ldr	r2, [r3, #4]
 801d1d2:	687b      	ldr	r3, [r7, #4]
 801d1d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d1d6:	687b      	ldr	r3, [r7, #4]
 801d1d8:	697a      	ldr	r2, [r7, #20]
 801d1da:	621a      	str	r2, [r3, #32]
}
 801d1dc:	46c0      	nop			@ (mov r8, r8)
 801d1de:	46bd      	mov	sp, r7
 801d1e0:	b006      	add	sp, #24
 801d1e2:	bd80      	pop	{r7, pc}
 801d1e4:	ffff8fff 	.word	0xffff8fff
 801d1e8:	fffffcff 	.word	0xfffffcff

0801d1ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d1ec:	b580      	push	{r7, lr}
 801d1ee:	b086      	sub	sp, #24
 801d1f0:	af00      	add	r7, sp, #0
 801d1f2:	6078      	str	r0, [r7, #4]
 801d1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d1f6:	687b      	ldr	r3, [r7, #4]
 801d1f8:	6a1b      	ldr	r3, [r3, #32]
 801d1fa:	4a1a      	ldr	r2, [pc, #104]	@ (801d264 <TIM_OC3_SetConfig+0x78>)
 801d1fc:	401a      	ands	r2, r3
 801d1fe:	687b      	ldr	r3, [r7, #4]
 801d200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d202:	687b      	ldr	r3, [r7, #4]
 801d204:	6a1b      	ldr	r3, [r3, #32]
 801d206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d208:	687b      	ldr	r3, [r7, #4]
 801d20a:	685b      	ldr	r3, [r3, #4]
 801d20c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d20e:	687b      	ldr	r3, [r7, #4]
 801d210:	69db      	ldr	r3, [r3, #28]
 801d212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d214:	68fb      	ldr	r3, [r7, #12]
 801d216:	2270      	movs	r2, #112	@ 0x70
 801d218:	4393      	bics	r3, r2
 801d21a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d21c:	68fb      	ldr	r3, [r7, #12]
 801d21e:	2203      	movs	r2, #3
 801d220:	4393      	bics	r3, r2
 801d222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d224:	683b      	ldr	r3, [r7, #0]
 801d226:	681b      	ldr	r3, [r3, #0]
 801d228:	68fa      	ldr	r2, [r7, #12]
 801d22a:	4313      	orrs	r3, r2
 801d22c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d22e:	697b      	ldr	r3, [r7, #20]
 801d230:	4a0d      	ldr	r2, [pc, #52]	@ (801d268 <TIM_OC3_SetConfig+0x7c>)
 801d232:	4013      	ands	r3, r2
 801d234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d236:	683b      	ldr	r3, [r7, #0]
 801d238:	689b      	ldr	r3, [r3, #8]
 801d23a:	021b      	lsls	r3, r3, #8
 801d23c:	697a      	ldr	r2, [r7, #20]
 801d23e:	4313      	orrs	r3, r2
 801d240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	693a      	ldr	r2, [r7, #16]
 801d246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	68fa      	ldr	r2, [r7, #12]
 801d24c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801d24e:	683b      	ldr	r3, [r7, #0]
 801d250:	685a      	ldr	r2, [r3, #4]
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	697a      	ldr	r2, [r7, #20]
 801d25a:	621a      	str	r2, [r3, #32]
}
 801d25c:	46c0      	nop			@ (mov r8, r8)
 801d25e:	46bd      	mov	sp, r7
 801d260:	b006      	add	sp, #24
 801d262:	bd80      	pop	{r7, pc}
 801d264:	fffffeff 	.word	0xfffffeff
 801d268:	fffffdff 	.word	0xfffffdff

0801d26c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d26c:	b580      	push	{r7, lr}
 801d26e:	b086      	sub	sp, #24
 801d270:	af00      	add	r7, sp, #0
 801d272:	6078      	str	r0, [r7, #4]
 801d274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801d276:	687b      	ldr	r3, [r7, #4]
 801d278:	6a1b      	ldr	r3, [r3, #32]
 801d27a:	4a1b      	ldr	r2, [pc, #108]	@ (801d2e8 <TIM_OC4_SetConfig+0x7c>)
 801d27c:	401a      	ands	r2, r3
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	6a1b      	ldr	r3, [r3, #32]
 801d286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	685b      	ldr	r3, [r3, #4]
 801d28c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d28e:	687b      	ldr	r3, [r7, #4]
 801d290:	69db      	ldr	r3, [r3, #28]
 801d292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801d294:	68fb      	ldr	r3, [r7, #12]
 801d296:	4a15      	ldr	r2, [pc, #84]	@ (801d2ec <TIM_OC4_SetConfig+0x80>)
 801d298:	4013      	ands	r3, r2
 801d29a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801d29c:	68fb      	ldr	r3, [r7, #12]
 801d29e:	4a14      	ldr	r2, [pc, #80]	@ (801d2f0 <TIM_OC4_SetConfig+0x84>)
 801d2a0:	4013      	ands	r3, r2
 801d2a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d2a4:	683b      	ldr	r3, [r7, #0]
 801d2a6:	681b      	ldr	r3, [r3, #0]
 801d2a8:	021b      	lsls	r3, r3, #8
 801d2aa:	68fa      	ldr	r2, [r7, #12]
 801d2ac:	4313      	orrs	r3, r2
 801d2ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801d2b0:	697b      	ldr	r3, [r7, #20]
 801d2b2:	4a10      	ldr	r2, [pc, #64]	@ (801d2f4 <TIM_OC4_SetConfig+0x88>)
 801d2b4:	4013      	ands	r3, r2
 801d2b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801d2b8:	683b      	ldr	r3, [r7, #0]
 801d2ba:	689b      	ldr	r3, [r3, #8]
 801d2bc:	031b      	lsls	r3, r3, #12
 801d2be:	697a      	ldr	r2, [r7, #20]
 801d2c0:	4313      	orrs	r3, r2
 801d2c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d2c4:	687b      	ldr	r3, [r7, #4]
 801d2c6:	693a      	ldr	r2, [r7, #16]
 801d2c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d2ca:	687b      	ldr	r3, [r7, #4]
 801d2cc:	68fa      	ldr	r2, [r7, #12]
 801d2ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801d2d0:	683b      	ldr	r3, [r7, #0]
 801d2d2:	685a      	ldr	r2, [r3, #4]
 801d2d4:	687b      	ldr	r3, [r7, #4]
 801d2d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d2d8:	687b      	ldr	r3, [r7, #4]
 801d2da:	697a      	ldr	r2, [r7, #20]
 801d2dc:	621a      	str	r2, [r3, #32]
}
 801d2de:	46c0      	nop			@ (mov r8, r8)
 801d2e0:	46bd      	mov	sp, r7
 801d2e2:	b006      	add	sp, #24
 801d2e4:	bd80      	pop	{r7, pc}
 801d2e6:	46c0      	nop			@ (mov r8, r8)
 801d2e8:	ffffefff 	.word	0xffffefff
 801d2ec:	ffff8fff 	.word	0xffff8fff
 801d2f0:	fffffcff 	.word	0xfffffcff
 801d2f4:	ffffdfff 	.word	0xffffdfff

0801d2f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801d2f8:	b580      	push	{r7, lr}
 801d2fa:	b086      	sub	sp, #24
 801d2fc:	af00      	add	r7, sp, #0
 801d2fe:	60f8      	str	r0, [r7, #12]
 801d300:	60b9      	str	r1, [r7, #8]
 801d302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801d304:	68bb      	ldr	r3, [r7, #8]
 801d306:	221f      	movs	r2, #31
 801d308:	4013      	ands	r3, r2
 801d30a:	2201      	movs	r2, #1
 801d30c:	409a      	lsls	r2, r3
 801d30e:	0013      	movs	r3, r2
 801d310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801d312:	68fb      	ldr	r3, [r7, #12]
 801d314:	6a1b      	ldr	r3, [r3, #32]
 801d316:	697a      	ldr	r2, [r7, #20]
 801d318:	43d2      	mvns	r2, r2
 801d31a:	401a      	ands	r2, r3
 801d31c:	68fb      	ldr	r3, [r7, #12]
 801d31e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801d320:	68fb      	ldr	r3, [r7, #12]
 801d322:	6a1a      	ldr	r2, [r3, #32]
 801d324:	68bb      	ldr	r3, [r7, #8]
 801d326:	211f      	movs	r1, #31
 801d328:	400b      	ands	r3, r1
 801d32a:	6879      	ldr	r1, [r7, #4]
 801d32c:	4099      	lsls	r1, r3
 801d32e:	000b      	movs	r3, r1
 801d330:	431a      	orrs	r2, r3
 801d332:	68fb      	ldr	r3, [r7, #12]
 801d334:	621a      	str	r2, [r3, #32]
}
 801d336:	46c0      	nop			@ (mov r8, r8)
 801d338:	46bd      	mov	sp, r7
 801d33a:	b006      	add	sp, #24
 801d33c:	bd80      	pop	{r7, pc}
	...

0801d340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801d340:	b580      	push	{r7, lr}
 801d342:	b084      	sub	sp, #16
 801d344:	af00      	add	r7, sp, #0
 801d346:	6078      	str	r0, [r7, #4]
 801d348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	2238      	movs	r2, #56	@ 0x38
 801d34e:	5c9b      	ldrb	r3, [r3, r2]
 801d350:	2b01      	cmp	r3, #1
 801d352:	d101      	bne.n	801d358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801d354:	2302      	movs	r3, #2
 801d356:	e047      	b.n	801d3e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801d358:	687b      	ldr	r3, [r7, #4]
 801d35a:	2238      	movs	r2, #56	@ 0x38
 801d35c:	2101      	movs	r1, #1
 801d35e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d360:	687b      	ldr	r3, [r7, #4]
 801d362:	2239      	movs	r2, #57	@ 0x39
 801d364:	2102      	movs	r1, #2
 801d366:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	681b      	ldr	r3, [r3, #0]
 801d36c:	685b      	ldr	r3, [r3, #4]
 801d36e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	681b      	ldr	r3, [r3, #0]
 801d374:	689b      	ldr	r3, [r3, #8]
 801d376:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801d378:	68fb      	ldr	r3, [r7, #12]
 801d37a:	2270      	movs	r2, #112	@ 0x70
 801d37c:	4393      	bics	r3, r2
 801d37e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801d380:	683b      	ldr	r3, [r7, #0]
 801d382:	681b      	ldr	r3, [r3, #0]
 801d384:	68fa      	ldr	r2, [r7, #12]
 801d386:	4313      	orrs	r3, r2
 801d388:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801d38a:	687b      	ldr	r3, [r7, #4]
 801d38c:	681b      	ldr	r3, [r3, #0]
 801d38e:	68fa      	ldr	r2, [r7, #12]
 801d390:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	681a      	ldr	r2, [r3, #0]
 801d396:	2380      	movs	r3, #128	@ 0x80
 801d398:	05db      	lsls	r3, r3, #23
 801d39a:	429a      	cmp	r2, r3
 801d39c:	d00e      	beq.n	801d3bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d39e:	687b      	ldr	r3, [r7, #4]
 801d3a0:	681b      	ldr	r3, [r3, #0]
 801d3a2:	4a13      	ldr	r2, [pc, #76]	@ (801d3f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801d3a4:	4293      	cmp	r3, r2
 801d3a6:	d009      	beq.n	801d3bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	681b      	ldr	r3, [r3, #0]
 801d3ac:	4a11      	ldr	r2, [pc, #68]	@ (801d3f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801d3ae:	4293      	cmp	r3, r2
 801d3b0:	d004      	beq.n	801d3bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	681b      	ldr	r3, [r3, #0]
 801d3b6:	4a10      	ldr	r2, [pc, #64]	@ (801d3f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801d3b8:	4293      	cmp	r3, r2
 801d3ba:	d10c      	bne.n	801d3d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801d3bc:	68bb      	ldr	r3, [r7, #8]
 801d3be:	2280      	movs	r2, #128	@ 0x80
 801d3c0:	4393      	bics	r3, r2
 801d3c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801d3c4:	683b      	ldr	r3, [r7, #0]
 801d3c6:	685b      	ldr	r3, [r3, #4]
 801d3c8:	68ba      	ldr	r2, [r7, #8]
 801d3ca:	4313      	orrs	r3, r2
 801d3cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	681b      	ldr	r3, [r3, #0]
 801d3d2:	68ba      	ldr	r2, [r7, #8]
 801d3d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801d3d6:	687b      	ldr	r3, [r7, #4]
 801d3d8:	2239      	movs	r2, #57	@ 0x39
 801d3da:	2101      	movs	r1, #1
 801d3dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801d3de:	687b      	ldr	r3, [r7, #4]
 801d3e0:	2238      	movs	r2, #56	@ 0x38
 801d3e2:	2100      	movs	r1, #0
 801d3e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d3e6:	2300      	movs	r3, #0
}
 801d3e8:	0018      	movs	r0, r3
 801d3ea:	46bd      	mov	sp, r7
 801d3ec:	b004      	add	sp, #16
 801d3ee:	bd80      	pop	{r7, pc}
 801d3f0:	40000400 	.word	0x40000400
 801d3f4:	40010800 	.word	0x40010800
 801d3f8:	40011400 	.word	0x40011400

0801d3fc <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801d3fc:	b580      	push	{r7, lr}
 801d3fe:	b082      	sub	sp, #8
 801d400:	af00      	add	r7, sp, #0
 801d402:	6078      	str	r0, [r7, #4]
 801d404:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801d406:	687b      	ldr	r3, [r7, #4]
 801d408:	2238      	movs	r2, #56	@ 0x38
 801d40a:	5c9b      	ldrb	r3, [r3, r2]
 801d40c:	2b01      	cmp	r3, #1
 801d40e:	d101      	bne.n	801d414 <HAL_TIMEx_RemapConfig+0x18>
 801d410:	2302      	movs	r3, #2
 801d412:	e00c      	b.n	801d42e <HAL_TIMEx_RemapConfig+0x32>
 801d414:	687b      	ldr	r3, [r7, #4]
 801d416:	2238      	movs	r2, #56	@ 0x38
 801d418:	2101      	movs	r1, #1
 801d41a:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801d41c:	687b      	ldr	r3, [r7, #4]
 801d41e:	681b      	ldr	r3, [r3, #0]
 801d420:	683a      	ldr	r2, [r7, #0]
 801d422:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801d424:	687b      	ldr	r3, [r7, #4]
 801d426:	2238      	movs	r2, #56	@ 0x38
 801d428:	2100      	movs	r1, #0
 801d42a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d42c:	2300      	movs	r3, #0
}
 801d42e:	0018      	movs	r0, r3
 801d430:	46bd      	mov	sp, r7
 801d432:	b002      	add	sp, #8
 801d434:	bd80      	pop	{r7, pc}
	...

0801d438 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801d438:	b580      	push	{r7, lr}
 801d43a:	b082      	sub	sp, #8
 801d43c:	af00      	add	r7, sp, #0
 801d43e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	2b00      	cmp	r3, #0
 801d444:	d101      	bne.n	801d44a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801d446:	2301      	movs	r3, #1
 801d448:	e053      	b.n	801d4f2 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d44e:	2b00      	cmp	r3, #0
 801d450:	d116      	bne.n	801d480 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801d452:	687b      	ldr	r3, [r7, #4]
 801d454:	2278      	movs	r2, #120	@ 0x78
 801d456:	2100      	movs	r1, #0
 801d458:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	0018      	movs	r0, r3
 801d45e:	f000 fe5b 	bl	801e118 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	22b0      	movs	r2, #176	@ 0xb0
 801d466:	589b      	ldr	r3, [r3, r2]
 801d468:	2b00      	cmp	r3, #0
 801d46a:	d103      	bne.n	801d474 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801d46c:	687b      	ldr	r3, [r7, #4]
 801d46e:	21b0      	movs	r1, #176	@ 0xb0
 801d470:	4a22      	ldr	r2, [pc, #136]	@ (801d4fc <HAL_UART_Init+0xc4>)
 801d472:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	22b0      	movs	r2, #176	@ 0xb0
 801d478:	589b      	ldr	r3, [r3, r2]
 801d47a:	687a      	ldr	r2, [r7, #4]
 801d47c:	0010      	movs	r0, r2
 801d47e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801d480:	687b      	ldr	r3, [r7, #4]
 801d482:	2224      	movs	r2, #36	@ 0x24
 801d484:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	681b      	ldr	r3, [r3, #0]
 801d48a:	681a      	ldr	r2, [r3, #0]
 801d48c:	687b      	ldr	r3, [r7, #4]
 801d48e:	681b      	ldr	r3, [r3, #0]
 801d490:	2101      	movs	r1, #1
 801d492:	438a      	bics	r2, r1
 801d494:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	0018      	movs	r0, r3
 801d49a:	f000 fe81 	bl	801e1a0 <UART_SetConfig>
 801d49e:	0003      	movs	r3, r0
 801d4a0:	2b01      	cmp	r3, #1
 801d4a2:	d101      	bne.n	801d4a8 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801d4a4:	2301      	movs	r3, #1
 801d4a6:	e024      	b.n	801d4f2 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801d4a8:	687b      	ldr	r3, [r7, #4]
 801d4aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d4ac:	2b00      	cmp	r3, #0
 801d4ae:	d003      	beq.n	801d4b8 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	0018      	movs	r0, r3
 801d4b4:	f001 f912 	bl	801e6dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801d4b8:	687b      	ldr	r3, [r7, #4]
 801d4ba:	681b      	ldr	r3, [r3, #0]
 801d4bc:	685a      	ldr	r2, [r3, #4]
 801d4be:	687b      	ldr	r3, [r7, #4]
 801d4c0:	681b      	ldr	r3, [r3, #0]
 801d4c2:	490f      	ldr	r1, [pc, #60]	@ (801d500 <HAL_UART_Init+0xc8>)
 801d4c4:	400a      	ands	r2, r1
 801d4c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801d4c8:	687b      	ldr	r3, [r7, #4]
 801d4ca:	681b      	ldr	r3, [r3, #0]
 801d4cc:	689a      	ldr	r2, [r3, #8]
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	681b      	ldr	r3, [r3, #0]
 801d4d2:	212a      	movs	r1, #42	@ 0x2a
 801d4d4:	438a      	bics	r2, r1
 801d4d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	681b      	ldr	r3, [r3, #0]
 801d4dc:	681a      	ldr	r2, [r3, #0]
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	681b      	ldr	r3, [r3, #0]
 801d4e2:	2101      	movs	r1, #1
 801d4e4:	430a      	orrs	r2, r1
 801d4e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801d4e8:	687b      	ldr	r3, [r7, #4]
 801d4ea:	0018      	movs	r0, r3
 801d4ec:	f001 f9aa 	bl	801e844 <UART_CheckIdleState>
 801d4f0:	0003      	movs	r3, r0
}
 801d4f2:	0018      	movs	r0, r3
 801d4f4:	46bd      	mov	sp, r7
 801d4f6:	b002      	add	sp, #8
 801d4f8:	bd80      	pop	{r7, pc}
 801d4fa:	46c0      	nop			@ (mov r8, r8)
 801d4fc:	08013b9d 	.word	0x08013b9d
 801d500:	ffffb7ff 	.word	0xffffb7ff

0801d504 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d504:	b580      	push	{r7, lr}
 801d506:	b08a      	sub	sp, #40	@ 0x28
 801d508:	af02      	add	r7, sp, #8
 801d50a:	60f8      	str	r0, [r7, #12]
 801d50c:	60b9      	str	r1, [r7, #8]
 801d50e:	603b      	str	r3, [r7, #0]
 801d510:	1dbb      	adds	r3, r7, #6
 801d512:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d514:	68fb      	ldr	r3, [r7, #12]
 801d516:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d518:	2b20      	cmp	r3, #32
 801d51a:	d000      	beq.n	801d51e <HAL_UART_Transmit+0x1a>
 801d51c:	e08c      	b.n	801d638 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801d51e:	68bb      	ldr	r3, [r7, #8]
 801d520:	2b00      	cmp	r3, #0
 801d522:	d003      	beq.n	801d52c <HAL_UART_Transmit+0x28>
 801d524:	1dbb      	adds	r3, r7, #6
 801d526:	881b      	ldrh	r3, [r3, #0]
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d101      	bne.n	801d530 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801d52c:	2301      	movs	r3, #1
 801d52e:	e084      	b.n	801d63a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d530:	68fb      	ldr	r3, [r7, #12]
 801d532:	689a      	ldr	r2, [r3, #8]
 801d534:	2380      	movs	r3, #128	@ 0x80
 801d536:	015b      	lsls	r3, r3, #5
 801d538:	429a      	cmp	r2, r3
 801d53a:	d109      	bne.n	801d550 <HAL_UART_Transmit+0x4c>
 801d53c:	68fb      	ldr	r3, [r7, #12]
 801d53e:	691b      	ldr	r3, [r3, #16]
 801d540:	2b00      	cmp	r3, #0
 801d542:	d105      	bne.n	801d550 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d544:	68bb      	ldr	r3, [r7, #8]
 801d546:	2201      	movs	r2, #1
 801d548:	4013      	ands	r3, r2
 801d54a:	d001      	beq.n	801d550 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801d54c:	2301      	movs	r3, #1
 801d54e:	e074      	b.n	801d63a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d550:	68fb      	ldr	r3, [r7, #12]
 801d552:	2284      	movs	r2, #132	@ 0x84
 801d554:	2100      	movs	r1, #0
 801d556:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d558:	68fb      	ldr	r3, [r7, #12]
 801d55a:	2221      	movs	r2, #33	@ 0x21
 801d55c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801d55e:	f7f7 fa2b 	bl	80149b8 <HAL_GetTick>
 801d562:	0003      	movs	r3, r0
 801d564:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801d566:	68fb      	ldr	r3, [r7, #12]
 801d568:	1dba      	adds	r2, r7, #6
 801d56a:	2150      	movs	r1, #80	@ 0x50
 801d56c:	8812      	ldrh	r2, [r2, #0]
 801d56e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d570:	68fb      	ldr	r3, [r7, #12]
 801d572:	1dba      	adds	r2, r7, #6
 801d574:	2152      	movs	r1, #82	@ 0x52
 801d576:	8812      	ldrh	r2, [r2, #0]
 801d578:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d57a:	68fb      	ldr	r3, [r7, #12]
 801d57c:	689a      	ldr	r2, [r3, #8]
 801d57e:	2380      	movs	r3, #128	@ 0x80
 801d580:	015b      	lsls	r3, r3, #5
 801d582:	429a      	cmp	r2, r3
 801d584:	d108      	bne.n	801d598 <HAL_UART_Transmit+0x94>
 801d586:	68fb      	ldr	r3, [r7, #12]
 801d588:	691b      	ldr	r3, [r3, #16]
 801d58a:	2b00      	cmp	r3, #0
 801d58c:	d104      	bne.n	801d598 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801d58e:	2300      	movs	r3, #0
 801d590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801d592:	68bb      	ldr	r3, [r7, #8]
 801d594:	61bb      	str	r3, [r7, #24]
 801d596:	e003      	b.n	801d5a0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801d598:	68bb      	ldr	r3, [r7, #8]
 801d59a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801d59c:	2300      	movs	r3, #0
 801d59e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801d5a0:	e02f      	b.n	801d602 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801d5a2:	697a      	ldr	r2, [r7, #20]
 801d5a4:	68f8      	ldr	r0, [r7, #12]
 801d5a6:	683b      	ldr	r3, [r7, #0]
 801d5a8:	9300      	str	r3, [sp, #0]
 801d5aa:	0013      	movs	r3, r2
 801d5ac:	2200      	movs	r2, #0
 801d5ae:	2180      	movs	r1, #128	@ 0x80
 801d5b0:	f001 f9f0 	bl	801e994 <UART_WaitOnFlagUntilTimeout>
 801d5b4:	1e03      	subs	r3, r0, #0
 801d5b6:	d004      	beq.n	801d5c2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801d5b8:	68fb      	ldr	r3, [r7, #12]
 801d5ba:	2220      	movs	r2, #32
 801d5bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801d5be:	2303      	movs	r3, #3
 801d5c0:	e03b      	b.n	801d63a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801d5c2:	69fb      	ldr	r3, [r7, #28]
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	d10b      	bne.n	801d5e0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801d5c8:	69bb      	ldr	r3, [r7, #24]
 801d5ca:	881b      	ldrh	r3, [r3, #0]
 801d5cc:	001a      	movs	r2, r3
 801d5ce:	68fb      	ldr	r3, [r7, #12]
 801d5d0:	681b      	ldr	r3, [r3, #0]
 801d5d2:	05d2      	lsls	r2, r2, #23
 801d5d4:	0dd2      	lsrs	r2, r2, #23
 801d5d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801d5d8:	69bb      	ldr	r3, [r7, #24]
 801d5da:	3302      	adds	r3, #2
 801d5dc:	61bb      	str	r3, [r7, #24]
 801d5de:	e007      	b.n	801d5f0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801d5e0:	69fb      	ldr	r3, [r7, #28]
 801d5e2:	781a      	ldrb	r2, [r3, #0]
 801d5e4:	68fb      	ldr	r3, [r7, #12]
 801d5e6:	681b      	ldr	r3, [r3, #0]
 801d5e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801d5ea:	69fb      	ldr	r3, [r7, #28]
 801d5ec:	3301      	adds	r3, #1
 801d5ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801d5f0:	68fb      	ldr	r3, [r7, #12]
 801d5f2:	2252      	movs	r2, #82	@ 0x52
 801d5f4:	5a9b      	ldrh	r3, [r3, r2]
 801d5f6:	b29b      	uxth	r3, r3
 801d5f8:	3b01      	subs	r3, #1
 801d5fa:	b299      	uxth	r1, r3
 801d5fc:	68fb      	ldr	r3, [r7, #12]
 801d5fe:	2252      	movs	r2, #82	@ 0x52
 801d600:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801d602:	68fb      	ldr	r3, [r7, #12]
 801d604:	2252      	movs	r2, #82	@ 0x52
 801d606:	5a9b      	ldrh	r3, [r3, r2]
 801d608:	b29b      	uxth	r3, r3
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	d1c9      	bne.n	801d5a2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801d60e:	697a      	ldr	r2, [r7, #20]
 801d610:	68f8      	ldr	r0, [r7, #12]
 801d612:	683b      	ldr	r3, [r7, #0]
 801d614:	9300      	str	r3, [sp, #0]
 801d616:	0013      	movs	r3, r2
 801d618:	2200      	movs	r2, #0
 801d61a:	2140      	movs	r1, #64	@ 0x40
 801d61c:	f001 f9ba 	bl	801e994 <UART_WaitOnFlagUntilTimeout>
 801d620:	1e03      	subs	r3, r0, #0
 801d622:	d004      	beq.n	801d62e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801d624:	68fb      	ldr	r3, [r7, #12]
 801d626:	2220      	movs	r2, #32
 801d628:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801d62a:	2303      	movs	r3, #3
 801d62c:	e005      	b.n	801d63a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801d62e:	68fb      	ldr	r3, [r7, #12]
 801d630:	2220      	movs	r2, #32
 801d632:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801d634:	2300      	movs	r3, #0
 801d636:	e000      	b.n	801d63a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801d638:	2302      	movs	r3, #2
  }
}
 801d63a:	0018      	movs	r0, r3
 801d63c:	46bd      	mov	sp, r7
 801d63e:	b008      	add	sp, #32
 801d640:	bd80      	pop	{r7, pc}
	...

0801d644 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d644:	b580      	push	{r7, lr}
 801d646:	b088      	sub	sp, #32
 801d648:	af00      	add	r7, sp, #0
 801d64a:	60f8      	str	r0, [r7, #12]
 801d64c:	60b9      	str	r1, [r7, #8]
 801d64e:	1dbb      	adds	r3, r7, #6
 801d650:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d652:	68fb      	ldr	r3, [r7, #12]
 801d654:	2280      	movs	r2, #128	@ 0x80
 801d656:	589b      	ldr	r3, [r3, r2]
 801d658:	2b20      	cmp	r3, #32
 801d65a:	d14a      	bne.n	801d6f2 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801d65c:	68bb      	ldr	r3, [r7, #8]
 801d65e:	2b00      	cmp	r3, #0
 801d660:	d003      	beq.n	801d66a <HAL_UART_Receive_IT+0x26>
 801d662:	1dbb      	adds	r3, r7, #6
 801d664:	881b      	ldrh	r3, [r3, #0]
 801d666:	2b00      	cmp	r3, #0
 801d668:	d101      	bne.n	801d66e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801d66a:	2301      	movs	r3, #1
 801d66c:	e042      	b.n	801d6f4 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d66e:	68fb      	ldr	r3, [r7, #12]
 801d670:	689a      	ldr	r2, [r3, #8]
 801d672:	2380      	movs	r3, #128	@ 0x80
 801d674:	015b      	lsls	r3, r3, #5
 801d676:	429a      	cmp	r2, r3
 801d678:	d109      	bne.n	801d68e <HAL_UART_Receive_IT+0x4a>
 801d67a:	68fb      	ldr	r3, [r7, #12]
 801d67c:	691b      	ldr	r3, [r3, #16]
 801d67e:	2b00      	cmp	r3, #0
 801d680:	d105      	bne.n	801d68e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d682:	68bb      	ldr	r3, [r7, #8]
 801d684:	2201      	movs	r2, #1
 801d686:	4013      	ands	r3, r2
 801d688:	d001      	beq.n	801d68e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801d68a:	2301      	movs	r3, #1
 801d68c:	e032      	b.n	801d6f4 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d68e:	68fb      	ldr	r3, [r7, #12]
 801d690:	2200      	movs	r2, #0
 801d692:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d694:	68fb      	ldr	r3, [r7, #12]
 801d696:	681b      	ldr	r3, [r3, #0]
 801d698:	4a18      	ldr	r2, [pc, #96]	@ (801d6fc <HAL_UART_Receive_IT+0xb8>)
 801d69a:	4293      	cmp	r3, r2
 801d69c:	d020      	beq.n	801d6e0 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d69e:	68fb      	ldr	r3, [r7, #12]
 801d6a0:	681b      	ldr	r3, [r3, #0]
 801d6a2:	685a      	ldr	r2, [r3, #4]
 801d6a4:	2380      	movs	r3, #128	@ 0x80
 801d6a6:	041b      	lsls	r3, r3, #16
 801d6a8:	4013      	ands	r3, r2
 801d6aa:	d019      	beq.n	801d6e0 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d6ac:	f3ef 8310 	mrs	r3, PRIMASK
 801d6b0:	613b      	str	r3, [r7, #16]
  return(result);
 801d6b2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d6b4:	61fb      	str	r3, [r7, #28]
 801d6b6:	2301      	movs	r3, #1
 801d6b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d6ba:	697b      	ldr	r3, [r7, #20]
 801d6bc:	f383 8810 	msr	PRIMASK, r3
}
 801d6c0:	46c0      	nop			@ (mov r8, r8)
 801d6c2:	68fb      	ldr	r3, [r7, #12]
 801d6c4:	681b      	ldr	r3, [r3, #0]
 801d6c6:	681a      	ldr	r2, [r3, #0]
 801d6c8:	68fb      	ldr	r3, [r7, #12]
 801d6ca:	681b      	ldr	r3, [r3, #0]
 801d6cc:	2180      	movs	r1, #128	@ 0x80
 801d6ce:	04c9      	lsls	r1, r1, #19
 801d6d0:	430a      	orrs	r2, r1
 801d6d2:	601a      	str	r2, [r3, #0]
 801d6d4:	69fb      	ldr	r3, [r7, #28]
 801d6d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d6d8:	69bb      	ldr	r3, [r7, #24]
 801d6da:	f383 8810 	msr	PRIMASK, r3
}
 801d6de:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801d6e0:	1dbb      	adds	r3, r7, #6
 801d6e2:	881a      	ldrh	r2, [r3, #0]
 801d6e4:	68b9      	ldr	r1, [r7, #8]
 801d6e6:	68fb      	ldr	r3, [r7, #12]
 801d6e8:	0018      	movs	r0, r3
 801d6ea:	f001 f9bd 	bl	801ea68 <UART_Start_Receive_IT>
 801d6ee:	0003      	movs	r3, r0
 801d6f0:	e000      	b.n	801d6f4 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801d6f2:	2302      	movs	r3, #2
  }
}
 801d6f4:	0018      	movs	r0, r3
 801d6f6:	46bd      	mov	sp, r7
 801d6f8:	b008      	add	sp, #32
 801d6fa:	bd80      	pop	{r7, pc}
 801d6fc:	40004800 	.word	0x40004800

0801d700 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801d700:	b580      	push	{r7, lr}
 801d702:	b088      	sub	sp, #32
 801d704:	af00      	add	r7, sp, #0
 801d706:	60f8      	str	r0, [r7, #12]
 801d708:	60b9      	str	r1, [r7, #8]
 801d70a:	1dbb      	adds	r3, r7, #6
 801d70c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d70e:	68fb      	ldr	r3, [r7, #12]
 801d710:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d712:	2b20      	cmp	r3, #32
 801d714:	d000      	beq.n	801d718 <HAL_UART_Transmit_DMA+0x18>
 801d716:	e077      	b.n	801d808 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801d718:	68bb      	ldr	r3, [r7, #8]
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	d003      	beq.n	801d726 <HAL_UART_Transmit_DMA+0x26>
 801d71e:	1dbb      	adds	r3, r7, #6
 801d720:	881b      	ldrh	r3, [r3, #0]
 801d722:	2b00      	cmp	r3, #0
 801d724:	d101      	bne.n	801d72a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801d726:	2301      	movs	r3, #1
 801d728:	e06f      	b.n	801d80a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d72a:	68fb      	ldr	r3, [r7, #12]
 801d72c:	689a      	ldr	r2, [r3, #8]
 801d72e:	2380      	movs	r3, #128	@ 0x80
 801d730:	015b      	lsls	r3, r3, #5
 801d732:	429a      	cmp	r2, r3
 801d734:	d109      	bne.n	801d74a <HAL_UART_Transmit_DMA+0x4a>
 801d736:	68fb      	ldr	r3, [r7, #12]
 801d738:	691b      	ldr	r3, [r3, #16]
 801d73a:	2b00      	cmp	r3, #0
 801d73c:	d105      	bne.n	801d74a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d73e:	68bb      	ldr	r3, [r7, #8]
 801d740:	2201      	movs	r2, #1
 801d742:	4013      	ands	r3, r2
 801d744:	d001      	beq.n	801d74a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801d746:	2301      	movs	r3, #1
 801d748:	e05f      	b.n	801d80a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	68ba      	ldr	r2, [r7, #8]
 801d74e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801d750:	68fb      	ldr	r3, [r7, #12]
 801d752:	1dba      	adds	r2, r7, #6
 801d754:	2150      	movs	r1, #80	@ 0x50
 801d756:	8812      	ldrh	r2, [r2, #0]
 801d758:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d75a:	68fb      	ldr	r3, [r7, #12]
 801d75c:	1dba      	adds	r2, r7, #6
 801d75e:	2152      	movs	r1, #82	@ 0x52
 801d760:	8812      	ldrh	r2, [r2, #0]
 801d762:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d764:	68fb      	ldr	r3, [r7, #12]
 801d766:	2284      	movs	r2, #132	@ 0x84
 801d768:	2100      	movs	r1, #0
 801d76a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d76c:	68fb      	ldr	r3, [r7, #12]
 801d76e:	2221      	movs	r2, #33	@ 0x21
 801d770:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801d772:	68fb      	ldr	r3, [r7, #12]
 801d774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d776:	2b00      	cmp	r3, #0
 801d778:	d027      	beq.n	801d7ca <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801d77a:	68fb      	ldr	r3, [r7, #12]
 801d77c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d77e:	4a25      	ldr	r2, [pc, #148]	@ (801d814 <HAL_UART_Transmit_DMA+0x114>)
 801d780:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801d782:	68fb      	ldr	r3, [r7, #12]
 801d784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d786:	4a24      	ldr	r2, [pc, #144]	@ (801d818 <HAL_UART_Transmit_DMA+0x118>)
 801d788:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801d78a:	68fb      	ldr	r3, [r7, #12]
 801d78c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d78e:	4a23      	ldr	r2, [pc, #140]	@ (801d81c <HAL_UART_Transmit_DMA+0x11c>)
 801d790:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801d792:	68fb      	ldr	r3, [r7, #12]
 801d794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d796:	2200      	movs	r2, #0
 801d798:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801d79a:	68fb      	ldr	r3, [r7, #12]
 801d79c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801d79e:	68fb      	ldr	r3, [r7, #12]
 801d7a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d7a2:	0019      	movs	r1, r3
 801d7a4:	68fb      	ldr	r3, [r7, #12]
 801d7a6:	681b      	ldr	r3, [r3, #0]
 801d7a8:	3328      	adds	r3, #40	@ 0x28
 801d7aa:	001a      	movs	r2, r3
 801d7ac:	1dbb      	adds	r3, r7, #6
 801d7ae:	881b      	ldrh	r3, [r3, #0]
 801d7b0:	f7f7 fe20 	bl	80153f4 <HAL_DMA_Start_IT>
 801d7b4:	1e03      	subs	r3, r0, #0
 801d7b6:	d008      	beq.n	801d7ca <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801d7b8:	68fb      	ldr	r3, [r7, #12]
 801d7ba:	2284      	movs	r2, #132	@ 0x84
 801d7bc:	2110      	movs	r1, #16
 801d7be:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801d7c0:	68fb      	ldr	r3, [r7, #12]
 801d7c2:	2220      	movs	r2, #32
 801d7c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801d7c6:	2301      	movs	r3, #1
 801d7c8:	e01f      	b.n	801d80a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801d7ca:	68fb      	ldr	r3, [r7, #12]
 801d7cc:	681b      	ldr	r3, [r3, #0]
 801d7ce:	2240      	movs	r2, #64	@ 0x40
 801d7d0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d7d2:	f3ef 8310 	mrs	r3, PRIMASK
 801d7d6:	613b      	str	r3, [r7, #16]
  return(result);
 801d7d8:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801d7da:	61fb      	str	r3, [r7, #28]
 801d7dc:	2301      	movs	r3, #1
 801d7de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7e0:	697b      	ldr	r3, [r7, #20]
 801d7e2:	f383 8810 	msr	PRIMASK, r3
}
 801d7e6:	46c0      	nop			@ (mov r8, r8)
 801d7e8:	68fb      	ldr	r3, [r7, #12]
 801d7ea:	681b      	ldr	r3, [r3, #0]
 801d7ec:	689a      	ldr	r2, [r3, #8]
 801d7ee:	68fb      	ldr	r3, [r7, #12]
 801d7f0:	681b      	ldr	r3, [r3, #0]
 801d7f2:	2180      	movs	r1, #128	@ 0x80
 801d7f4:	430a      	orrs	r2, r1
 801d7f6:	609a      	str	r2, [r3, #8]
 801d7f8:	69fb      	ldr	r3, [r7, #28]
 801d7fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7fc:	69bb      	ldr	r3, [r7, #24]
 801d7fe:	f383 8810 	msr	PRIMASK, r3
}
 801d802:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801d804:	2300      	movs	r3, #0
 801d806:	e000      	b.n	801d80a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801d808:	2302      	movs	r3, #2
  }
}
 801d80a:	0018      	movs	r0, r3
 801d80c:	46bd      	mov	sp, r7
 801d80e:	b008      	add	sp, #32
 801d810:	bd80      	pop	{r7, pc}
 801d812:	46c0      	nop			@ (mov r8, r8)
 801d814:	0801ee4d 	.word	0x0801ee4d
 801d818:	0801eee9 	.word	0x0801eee9
 801d81c:	0801f089 	.word	0x0801f089

0801d820 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d820:	b580      	push	{r7, lr}
 801d822:	b088      	sub	sp, #32
 801d824:	af00      	add	r7, sp, #0
 801d826:	60f8      	str	r0, [r7, #12]
 801d828:	60b9      	str	r1, [r7, #8]
 801d82a:	1dbb      	adds	r3, r7, #6
 801d82c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d82e:	68fb      	ldr	r3, [r7, #12]
 801d830:	2280      	movs	r2, #128	@ 0x80
 801d832:	589b      	ldr	r3, [r3, r2]
 801d834:	2b20      	cmp	r3, #32
 801d836:	d14a      	bne.n	801d8ce <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801d838:	68bb      	ldr	r3, [r7, #8]
 801d83a:	2b00      	cmp	r3, #0
 801d83c:	d003      	beq.n	801d846 <HAL_UART_Receive_DMA+0x26>
 801d83e:	1dbb      	adds	r3, r7, #6
 801d840:	881b      	ldrh	r3, [r3, #0]
 801d842:	2b00      	cmp	r3, #0
 801d844:	d101      	bne.n	801d84a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801d846:	2301      	movs	r3, #1
 801d848:	e042      	b.n	801d8d0 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d84a:	68fb      	ldr	r3, [r7, #12]
 801d84c:	689a      	ldr	r2, [r3, #8]
 801d84e:	2380      	movs	r3, #128	@ 0x80
 801d850:	015b      	lsls	r3, r3, #5
 801d852:	429a      	cmp	r2, r3
 801d854:	d109      	bne.n	801d86a <HAL_UART_Receive_DMA+0x4a>
 801d856:	68fb      	ldr	r3, [r7, #12]
 801d858:	691b      	ldr	r3, [r3, #16]
 801d85a:	2b00      	cmp	r3, #0
 801d85c:	d105      	bne.n	801d86a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d85e:	68bb      	ldr	r3, [r7, #8]
 801d860:	2201      	movs	r2, #1
 801d862:	4013      	ands	r3, r2
 801d864:	d001      	beq.n	801d86a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801d866:	2301      	movs	r3, #1
 801d868:	e032      	b.n	801d8d0 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d86a:	68fb      	ldr	r3, [r7, #12]
 801d86c:	2200      	movs	r2, #0
 801d86e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d870:	68fb      	ldr	r3, [r7, #12]
 801d872:	681b      	ldr	r3, [r3, #0]
 801d874:	4a18      	ldr	r2, [pc, #96]	@ (801d8d8 <HAL_UART_Receive_DMA+0xb8>)
 801d876:	4293      	cmp	r3, r2
 801d878:	d020      	beq.n	801d8bc <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d87a:	68fb      	ldr	r3, [r7, #12]
 801d87c:	681b      	ldr	r3, [r3, #0]
 801d87e:	685a      	ldr	r2, [r3, #4]
 801d880:	2380      	movs	r3, #128	@ 0x80
 801d882:	041b      	lsls	r3, r3, #16
 801d884:	4013      	ands	r3, r2
 801d886:	d019      	beq.n	801d8bc <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d888:	f3ef 8310 	mrs	r3, PRIMASK
 801d88c:	613b      	str	r3, [r7, #16]
  return(result);
 801d88e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d890:	61fb      	str	r3, [r7, #28]
 801d892:	2301      	movs	r3, #1
 801d894:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d896:	697b      	ldr	r3, [r7, #20]
 801d898:	f383 8810 	msr	PRIMASK, r3
}
 801d89c:	46c0      	nop			@ (mov r8, r8)
 801d89e:	68fb      	ldr	r3, [r7, #12]
 801d8a0:	681b      	ldr	r3, [r3, #0]
 801d8a2:	681a      	ldr	r2, [r3, #0]
 801d8a4:	68fb      	ldr	r3, [r7, #12]
 801d8a6:	681b      	ldr	r3, [r3, #0]
 801d8a8:	2180      	movs	r1, #128	@ 0x80
 801d8aa:	04c9      	lsls	r1, r1, #19
 801d8ac:	430a      	orrs	r2, r1
 801d8ae:	601a      	str	r2, [r3, #0]
 801d8b0:	69fb      	ldr	r3, [r7, #28]
 801d8b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8b4:	69bb      	ldr	r3, [r7, #24]
 801d8b6:	f383 8810 	msr	PRIMASK, r3
}
 801d8ba:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801d8bc:	1dbb      	adds	r3, r7, #6
 801d8be:	881a      	ldrh	r2, [r3, #0]
 801d8c0:	68b9      	ldr	r1, [r7, #8]
 801d8c2:	68fb      	ldr	r3, [r7, #12]
 801d8c4:	0018      	movs	r0, r3
 801d8c6:	f001 f999 	bl	801ebfc <UART_Start_Receive_DMA>
 801d8ca:	0003      	movs	r3, r0
 801d8cc:	e000      	b.n	801d8d0 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801d8ce:	2302      	movs	r3, #2
  }
}
 801d8d0:	0018      	movs	r0, r3
 801d8d2:	46bd      	mov	sp, r7
 801d8d4:	b008      	add	sp, #32
 801d8d6:	bd80      	pop	{r7, pc}
 801d8d8:	40004800 	.word	0x40004800

0801d8dc <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 801d8dc:	b580      	push	{r7, lr}
 801d8de:	b096      	sub	sp, #88	@ 0x58
 801d8e0:	af00      	add	r7, sp, #0
 801d8e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d8e4:	f3ef 8310 	mrs	r3, PRIMASK
 801d8e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801d8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 801d8ec:	657b      	str	r3, [r7, #84]	@ 0x54
 801d8ee:	2301      	movs	r3, #1
 801d8f0:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d8f4:	f383 8810 	msr	PRIMASK, r3
}
 801d8f8:	46c0      	nop			@ (mov r8, r8)
 801d8fa:	687b      	ldr	r3, [r7, #4]
 801d8fc:	681b      	ldr	r3, [r3, #0]
 801d8fe:	681a      	ldr	r2, [r3, #0]
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	681b      	ldr	r3, [r3, #0]
 801d904:	496f      	ldr	r1, [pc, #444]	@ (801dac4 <HAL_UART_Abort+0x1e8>)
 801d906:	400a      	ands	r2, r1
 801d908:	601a      	str	r2, [r3, #0]
 801d90a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d90c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d90e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d910:	f383 8810 	msr	PRIMASK, r3
}
 801d914:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d916:	f3ef 8310 	mrs	r3, PRIMASK
 801d91a:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 801d91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d91e:	653b      	str	r3, [r7, #80]	@ 0x50
 801d920:	2301      	movs	r3, #1
 801d922:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d926:	f383 8810 	msr	PRIMASK, r3
}
 801d92a:	46c0      	nop			@ (mov r8, r8)
 801d92c:	687b      	ldr	r3, [r7, #4]
 801d92e:	681b      	ldr	r3, [r3, #0]
 801d930:	689a      	ldr	r2, [r3, #8]
 801d932:	687b      	ldr	r3, [r7, #4]
 801d934:	681b      	ldr	r3, [r3, #0]
 801d936:	2101      	movs	r1, #1
 801d938:	438a      	bics	r2, r1
 801d93a:	609a      	str	r2, [r3, #8]
 801d93c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d93e:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d940:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d942:	f383 8810 	msr	PRIMASK, r3
}
 801d946:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d948:	687b      	ldr	r3, [r7, #4]
 801d94a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d94c:	2b01      	cmp	r3, #1
 801d94e:	d118      	bne.n	801d982 <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d950:	f3ef 8310 	mrs	r3, PRIMASK
 801d954:	623b      	str	r3, [r7, #32]
  return(result);
 801d956:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801d958:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801d95a:	2301      	movs	r3, #1
 801d95c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d960:	f383 8810 	msr	PRIMASK, r3
}
 801d964:	46c0      	nop			@ (mov r8, r8)
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	681b      	ldr	r3, [r3, #0]
 801d96a:	681a      	ldr	r2, [r3, #0]
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	681b      	ldr	r3, [r3, #0]
 801d970:	2110      	movs	r1, #16
 801d972:	438a      	bics	r2, r1
 801d974:	601a      	str	r2, [r3, #0]
 801d976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d978:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d97c:	f383 8810 	msr	PRIMASK, r3
}
 801d980:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801d982:	687b      	ldr	r3, [r7, #4]
 801d984:	681b      	ldr	r3, [r3, #0]
 801d986:	689b      	ldr	r3, [r3, #8]
 801d988:	2280      	movs	r2, #128	@ 0x80
 801d98a:	4013      	ands	r3, r2
 801d98c:	2b80      	cmp	r3, #128	@ 0x80
 801d98e:	d135      	bne.n	801d9fc <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d990:	f3ef 8310 	mrs	r3, PRIMASK
 801d994:	617b      	str	r3, [r7, #20]
  return(result);
 801d996:	697b      	ldr	r3, [r7, #20]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801d998:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d99a:	2301      	movs	r3, #1
 801d99c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d99e:	69bb      	ldr	r3, [r7, #24]
 801d9a0:	f383 8810 	msr	PRIMASK, r3
}
 801d9a4:	46c0      	nop			@ (mov r8, r8)
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	681b      	ldr	r3, [r3, #0]
 801d9aa:	689a      	ldr	r2, [r3, #8]
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	681b      	ldr	r3, [r3, #0]
 801d9b0:	2180      	movs	r1, #128	@ 0x80
 801d9b2:	438a      	bics	r2, r1
 801d9b4:	609a      	str	r2, [r3, #8]
 801d9b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d9b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d9ba:	69fb      	ldr	r3, [r7, #28]
 801d9bc:	f383 8810 	msr	PRIMASK, r3
}
 801d9c0:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 801d9c2:	687b      	ldr	r3, [r7, #4]
 801d9c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d9c6:	2b00      	cmp	r3, #0
 801d9c8:	d018      	beq.n	801d9fc <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 801d9ca:	687b      	ldr	r3, [r7, #4]
 801d9cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d9ce:	2200      	movs	r2, #0
 801d9d0:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d9d6:	0018      	movs	r0, r3
 801d9d8:	f7f7 fd72 	bl	80154c0 <HAL_DMA_Abort>
 801d9dc:	1e03      	subs	r3, r0, #0
 801d9de:	d00d      	beq.n	801d9fc <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d9e4:	0018      	movs	r0, r3
 801d9e6:	f7f7 feac 	bl	8015742 <HAL_DMA_GetError>
 801d9ea:	0003      	movs	r3, r0
 801d9ec:	2b20      	cmp	r3, #32
 801d9ee:	d105      	bne.n	801d9fc <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801d9f0:	687b      	ldr	r3, [r7, #4]
 801d9f2:	2284      	movs	r2, #132	@ 0x84
 801d9f4:	2110      	movs	r1, #16
 801d9f6:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 801d9f8:	2303      	movs	r3, #3
 801d9fa:	e05f      	b.n	801dabc <HAL_UART_Abort+0x1e0>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d9fc:	687b      	ldr	r3, [r7, #4]
 801d9fe:	681b      	ldr	r3, [r3, #0]
 801da00:	689b      	ldr	r3, [r3, #8]
 801da02:	2240      	movs	r2, #64	@ 0x40
 801da04:	4013      	ands	r3, r2
 801da06:	2b40      	cmp	r3, #64	@ 0x40
 801da08:	d135      	bne.n	801da76 <HAL_UART_Abort+0x19a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da0a:	f3ef 8310 	mrs	r3, PRIMASK
 801da0e:	60bb      	str	r3, [r7, #8]
  return(result);
 801da10:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801da12:	647b      	str	r3, [r7, #68]	@ 0x44
 801da14:	2301      	movs	r3, #1
 801da16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da18:	68fb      	ldr	r3, [r7, #12]
 801da1a:	f383 8810 	msr	PRIMASK, r3
}
 801da1e:	46c0      	nop			@ (mov r8, r8)
 801da20:	687b      	ldr	r3, [r7, #4]
 801da22:	681b      	ldr	r3, [r3, #0]
 801da24:	689a      	ldr	r2, [r3, #8]
 801da26:	687b      	ldr	r3, [r7, #4]
 801da28:	681b      	ldr	r3, [r3, #0]
 801da2a:	2140      	movs	r1, #64	@ 0x40
 801da2c:	438a      	bics	r2, r1
 801da2e:	609a      	str	r2, [r3, #8]
 801da30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801da32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da34:	693b      	ldr	r3, [r7, #16]
 801da36:	f383 8810 	msr	PRIMASK, r3
}
 801da3a:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801da3c:	687b      	ldr	r3, [r7, #4]
 801da3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801da40:	2b00      	cmp	r3, #0
 801da42:	d018      	beq.n	801da76 <HAL_UART_Abort+0x19a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801da44:	687b      	ldr	r3, [r7, #4]
 801da46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801da48:	2200      	movs	r2, #0
 801da4a:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801da4c:	687b      	ldr	r3, [r7, #4]
 801da4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801da50:	0018      	movs	r0, r3
 801da52:	f7f7 fd35 	bl	80154c0 <HAL_DMA_Abort>
 801da56:	1e03      	subs	r3, r0, #0
 801da58:	d00d      	beq.n	801da76 <HAL_UART_Abort+0x19a>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801da5a:	687b      	ldr	r3, [r7, #4]
 801da5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801da5e:	0018      	movs	r0, r3
 801da60:	f7f7 fe6f 	bl	8015742 <HAL_DMA_GetError>
 801da64:	0003      	movs	r3, r0
 801da66:	2b20      	cmp	r3, #32
 801da68:	d105      	bne.n	801da76 <HAL_UART_Abort+0x19a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	2284      	movs	r2, #132	@ 0x84
 801da6e:	2110      	movs	r1, #16
 801da70:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 801da72:	2303      	movs	r3, #3
 801da74:	e022      	b.n	801dabc <HAL_UART_Abort+0x1e0>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 801da76:	687b      	ldr	r3, [r7, #4]
 801da78:	2252      	movs	r2, #82	@ 0x52
 801da7a:	2100      	movs	r1, #0
 801da7c:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 801da7e:	687b      	ldr	r3, [r7, #4]
 801da80:	225a      	movs	r2, #90	@ 0x5a
 801da82:	2100      	movs	r1, #0
 801da84:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	681b      	ldr	r3, [r3, #0]
 801da8a:	220f      	movs	r2, #15
 801da8c:	621a      	str	r2, [r3, #32]


  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	681b      	ldr	r3, [r3, #0]
 801da92:	699a      	ldr	r2, [r3, #24]
 801da94:	687b      	ldr	r3, [r7, #4]
 801da96:	681b      	ldr	r3, [r3, #0]
 801da98:	2108      	movs	r1, #8
 801da9a:	430a      	orrs	r2, r1
 801da9c:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 801da9e:	687b      	ldr	r3, [r7, #4]
 801daa0:	2220      	movs	r2, #32
 801daa2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	2280      	movs	r2, #128	@ 0x80
 801daa8:	2120      	movs	r1, #32
 801daaa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	2200      	movs	r2, #0
 801dab0:	661a      	str	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801dab2:	687b      	ldr	r3, [r7, #4]
 801dab4:	2284      	movs	r2, #132	@ 0x84
 801dab6:	2100      	movs	r1, #0
 801dab8:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 801daba:	2300      	movs	r3, #0
}
 801dabc:	0018      	movs	r0, r3
 801dabe:	46bd      	mov	sp, r7
 801dac0:	b016      	add	sp, #88	@ 0x58
 801dac2:	bd80      	pop	{r7, pc}
 801dac4:	fffffe1f 	.word	0xfffffe1f

0801dac8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801dac8:	b590      	push	{r4, r7, lr}
 801daca:	b0ab      	sub	sp, #172	@ 0xac
 801dacc:	af00      	add	r7, sp, #0
 801dace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	681b      	ldr	r3, [r3, #0]
 801dad4:	69db      	ldr	r3, [r3, #28]
 801dad6:	22a4      	movs	r2, #164	@ 0xa4
 801dad8:	18b9      	adds	r1, r7, r2
 801dada:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801dadc:	687b      	ldr	r3, [r7, #4]
 801dade:	681b      	ldr	r3, [r3, #0]
 801dae0:	681b      	ldr	r3, [r3, #0]
 801dae2:	20a0      	movs	r0, #160	@ 0xa0
 801dae4:	1839      	adds	r1, r7, r0
 801dae6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801dae8:	687b      	ldr	r3, [r7, #4]
 801daea:	681b      	ldr	r3, [r3, #0]
 801daec:	689b      	ldr	r3, [r3, #8]
 801daee:	219c      	movs	r1, #156	@ 0x9c
 801daf0:	1879      	adds	r1, r7, r1
 801daf2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801daf4:	0011      	movs	r1, r2
 801daf6:	18bb      	adds	r3, r7, r2
 801daf8:	681b      	ldr	r3, [r3, #0]
 801dafa:	4a9c      	ldr	r2, [pc, #624]	@ (801dd6c <HAL_UART_IRQHandler+0x2a4>)
 801dafc:	4013      	ands	r3, r2
 801dafe:	2298      	movs	r2, #152	@ 0x98
 801db00:	18bc      	adds	r4, r7, r2
 801db02:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801db04:	18bb      	adds	r3, r7, r2
 801db06:	681b      	ldr	r3, [r3, #0]
 801db08:	2b00      	cmp	r3, #0
 801db0a:	d114      	bne.n	801db36 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801db0c:	187b      	adds	r3, r7, r1
 801db0e:	681b      	ldr	r3, [r3, #0]
 801db10:	2220      	movs	r2, #32
 801db12:	4013      	ands	r3, r2
 801db14:	d00f      	beq.n	801db36 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801db16:	183b      	adds	r3, r7, r0
 801db18:	681b      	ldr	r3, [r3, #0]
 801db1a:	2220      	movs	r2, #32
 801db1c:	4013      	ands	r3, r2
 801db1e:	d00a      	beq.n	801db36 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801db20:	687b      	ldr	r3, [r7, #4]
 801db22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801db24:	2b00      	cmp	r3, #0
 801db26:	d100      	bne.n	801db2a <HAL_UART_IRQHandler+0x62>
 801db28:	e2aa      	b.n	801e080 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801db2e:	687a      	ldr	r2, [r7, #4]
 801db30:	0010      	movs	r0, r2
 801db32:	4798      	blx	r3
      }
      return;
 801db34:	e2a4      	b.n	801e080 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801db36:	2398      	movs	r3, #152	@ 0x98
 801db38:	18fb      	adds	r3, r7, r3
 801db3a:	681b      	ldr	r3, [r3, #0]
 801db3c:	2b00      	cmp	r3, #0
 801db3e:	d100      	bne.n	801db42 <HAL_UART_IRQHandler+0x7a>
 801db40:	e11a      	b.n	801dd78 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801db42:	239c      	movs	r3, #156	@ 0x9c
 801db44:	18fb      	adds	r3, r7, r3
 801db46:	681b      	ldr	r3, [r3, #0]
 801db48:	2201      	movs	r2, #1
 801db4a:	4013      	ands	r3, r2
 801db4c:	d106      	bne.n	801db5c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801db4e:	23a0      	movs	r3, #160	@ 0xa0
 801db50:	18fb      	adds	r3, r7, r3
 801db52:	681b      	ldr	r3, [r3, #0]
 801db54:	4a86      	ldr	r2, [pc, #536]	@ (801dd70 <HAL_UART_IRQHandler+0x2a8>)
 801db56:	4013      	ands	r3, r2
 801db58:	d100      	bne.n	801db5c <HAL_UART_IRQHandler+0x94>
 801db5a:	e10d      	b.n	801dd78 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801db5c:	23a4      	movs	r3, #164	@ 0xa4
 801db5e:	18fb      	adds	r3, r7, r3
 801db60:	681b      	ldr	r3, [r3, #0]
 801db62:	2201      	movs	r2, #1
 801db64:	4013      	ands	r3, r2
 801db66:	d012      	beq.n	801db8e <HAL_UART_IRQHandler+0xc6>
 801db68:	23a0      	movs	r3, #160	@ 0xa0
 801db6a:	18fb      	adds	r3, r7, r3
 801db6c:	681a      	ldr	r2, [r3, #0]
 801db6e:	2380      	movs	r3, #128	@ 0x80
 801db70:	005b      	lsls	r3, r3, #1
 801db72:	4013      	ands	r3, r2
 801db74:	d00b      	beq.n	801db8e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801db76:	687b      	ldr	r3, [r7, #4]
 801db78:	681b      	ldr	r3, [r3, #0]
 801db7a:	2201      	movs	r2, #1
 801db7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	2284      	movs	r2, #132	@ 0x84
 801db82:	589b      	ldr	r3, [r3, r2]
 801db84:	2201      	movs	r2, #1
 801db86:	431a      	orrs	r2, r3
 801db88:	687b      	ldr	r3, [r7, #4]
 801db8a:	2184      	movs	r1, #132	@ 0x84
 801db8c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801db8e:	23a4      	movs	r3, #164	@ 0xa4
 801db90:	18fb      	adds	r3, r7, r3
 801db92:	681b      	ldr	r3, [r3, #0]
 801db94:	2202      	movs	r2, #2
 801db96:	4013      	ands	r3, r2
 801db98:	d011      	beq.n	801dbbe <HAL_UART_IRQHandler+0xf6>
 801db9a:	239c      	movs	r3, #156	@ 0x9c
 801db9c:	18fb      	adds	r3, r7, r3
 801db9e:	681b      	ldr	r3, [r3, #0]
 801dba0:	2201      	movs	r2, #1
 801dba2:	4013      	ands	r3, r2
 801dba4:	d00b      	beq.n	801dbbe <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801dba6:	687b      	ldr	r3, [r7, #4]
 801dba8:	681b      	ldr	r3, [r3, #0]
 801dbaa:	2202      	movs	r2, #2
 801dbac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801dbae:	687b      	ldr	r3, [r7, #4]
 801dbb0:	2284      	movs	r2, #132	@ 0x84
 801dbb2:	589b      	ldr	r3, [r3, r2]
 801dbb4:	2204      	movs	r2, #4
 801dbb6:	431a      	orrs	r2, r3
 801dbb8:	687b      	ldr	r3, [r7, #4]
 801dbba:	2184      	movs	r1, #132	@ 0x84
 801dbbc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801dbbe:	23a4      	movs	r3, #164	@ 0xa4
 801dbc0:	18fb      	adds	r3, r7, r3
 801dbc2:	681b      	ldr	r3, [r3, #0]
 801dbc4:	2204      	movs	r2, #4
 801dbc6:	4013      	ands	r3, r2
 801dbc8:	d011      	beq.n	801dbee <HAL_UART_IRQHandler+0x126>
 801dbca:	239c      	movs	r3, #156	@ 0x9c
 801dbcc:	18fb      	adds	r3, r7, r3
 801dbce:	681b      	ldr	r3, [r3, #0]
 801dbd0:	2201      	movs	r2, #1
 801dbd2:	4013      	ands	r3, r2
 801dbd4:	d00b      	beq.n	801dbee <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801dbd6:	687b      	ldr	r3, [r7, #4]
 801dbd8:	681b      	ldr	r3, [r3, #0]
 801dbda:	2204      	movs	r2, #4
 801dbdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801dbde:	687b      	ldr	r3, [r7, #4]
 801dbe0:	2284      	movs	r2, #132	@ 0x84
 801dbe2:	589b      	ldr	r3, [r3, r2]
 801dbe4:	2202      	movs	r2, #2
 801dbe6:	431a      	orrs	r2, r3
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	2184      	movs	r1, #132	@ 0x84
 801dbec:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801dbee:	23a4      	movs	r3, #164	@ 0xa4
 801dbf0:	18fb      	adds	r3, r7, r3
 801dbf2:	681b      	ldr	r3, [r3, #0]
 801dbf4:	2208      	movs	r2, #8
 801dbf6:	4013      	ands	r3, r2
 801dbf8:	d017      	beq.n	801dc2a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801dbfa:	23a0      	movs	r3, #160	@ 0xa0
 801dbfc:	18fb      	adds	r3, r7, r3
 801dbfe:	681b      	ldr	r3, [r3, #0]
 801dc00:	2220      	movs	r2, #32
 801dc02:	4013      	ands	r3, r2
 801dc04:	d105      	bne.n	801dc12 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801dc06:	239c      	movs	r3, #156	@ 0x9c
 801dc08:	18fb      	adds	r3, r7, r3
 801dc0a:	681b      	ldr	r3, [r3, #0]
 801dc0c:	2201      	movs	r2, #1
 801dc0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801dc10:	d00b      	beq.n	801dc2a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801dc12:	687b      	ldr	r3, [r7, #4]
 801dc14:	681b      	ldr	r3, [r3, #0]
 801dc16:	2208      	movs	r2, #8
 801dc18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	2284      	movs	r2, #132	@ 0x84
 801dc1e:	589b      	ldr	r3, [r3, r2]
 801dc20:	2208      	movs	r2, #8
 801dc22:	431a      	orrs	r2, r3
 801dc24:	687b      	ldr	r3, [r7, #4]
 801dc26:	2184      	movs	r1, #132	@ 0x84
 801dc28:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801dc2a:	23a4      	movs	r3, #164	@ 0xa4
 801dc2c:	18fb      	adds	r3, r7, r3
 801dc2e:	681a      	ldr	r2, [r3, #0]
 801dc30:	2380      	movs	r3, #128	@ 0x80
 801dc32:	011b      	lsls	r3, r3, #4
 801dc34:	4013      	ands	r3, r2
 801dc36:	d013      	beq.n	801dc60 <HAL_UART_IRQHandler+0x198>
 801dc38:	23a0      	movs	r3, #160	@ 0xa0
 801dc3a:	18fb      	adds	r3, r7, r3
 801dc3c:	681a      	ldr	r2, [r3, #0]
 801dc3e:	2380      	movs	r3, #128	@ 0x80
 801dc40:	04db      	lsls	r3, r3, #19
 801dc42:	4013      	ands	r3, r2
 801dc44:	d00c      	beq.n	801dc60 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801dc46:	687b      	ldr	r3, [r7, #4]
 801dc48:	681b      	ldr	r3, [r3, #0]
 801dc4a:	2280      	movs	r2, #128	@ 0x80
 801dc4c:	0112      	lsls	r2, r2, #4
 801dc4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801dc50:	687b      	ldr	r3, [r7, #4]
 801dc52:	2284      	movs	r2, #132	@ 0x84
 801dc54:	589b      	ldr	r3, [r3, r2]
 801dc56:	2220      	movs	r2, #32
 801dc58:	431a      	orrs	r2, r3
 801dc5a:	687b      	ldr	r3, [r7, #4]
 801dc5c:	2184      	movs	r1, #132	@ 0x84
 801dc5e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801dc60:	687b      	ldr	r3, [r7, #4]
 801dc62:	2284      	movs	r2, #132	@ 0x84
 801dc64:	589b      	ldr	r3, [r3, r2]
 801dc66:	2b00      	cmp	r3, #0
 801dc68:	d100      	bne.n	801dc6c <HAL_UART_IRQHandler+0x1a4>
 801dc6a:	e20b      	b.n	801e084 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801dc6c:	23a4      	movs	r3, #164	@ 0xa4
 801dc6e:	18fb      	adds	r3, r7, r3
 801dc70:	681b      	ldr	r3, [r3, #0]
 801dc72:	2220      	movs	r2, #32
 801dc74:	4013      	ands	r3, r2
 801dc76:	d00e      	beq.n	801dc96 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801dc78:	23a0      	movs	r3, #160	@ 0xa0
 801dc7a:	18fb      	adds	r3, r7, r3
 801dc7c:	681b      	ldr	r3, [r3, #0]
 801dc7e:	2220      	movs	r2, #32
 801dc80:	4013      	ands	r3, r2
 801dc82:	d008      	beq.n	801dc96 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801dc84:	687b      	ldr	r3, [r7, #4]
 801dc86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801dc88:	2b00      	cmp	r3, #0
 801dc8a:	d004      	beq.n	801dc96 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801dc90:	687a      	ldr	r2, [r7, #4]
 801dc92:	0010      	movs	r0, r2
 801dc94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	2284      	movs	r2, #132	@ 0x84
 801dc9a:	589b      	ldr	r3, [r3, r2]
 801dc9c:	2194      	movs	r1, #148	@ 0x94
 801dc9e:	187a      	adds	r2, r7, r1
 801dca0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801dca2:	687b      	ldr	r3, [r7, #4]
 801dca4:	681b      	ldr	r3, [r3, #0]
 801dca6:	689b      	ldr	r3, [r3, #8]
 801dca8:	2240      	movs	r2, #64	@ 0x40
 801dcaa:	4013      	ands	r3, r2
 801dcac:	2b40      	cmp	r3, #64	@ 0x40
 801dcae:	d004      	beq.n	801dcba <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801dcb0:	187b      	adds	r3, r7, r1
 801dcb2:	681b      	ldr	r3, [r3, #0]
 801dcb4:	2228      	movs	r2, #40	@ 0x28
 801dcb6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801dcb8:	d04b      	beq.n	801dd52 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801dcba:	687b      	ldr	r3, [r7, #4]
 801dcbc:	0018      	movs	r0, r3
 801dcbe:	f001 f861 	bl	801ed84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dcc2:	687b      	ldr	r3, [r7, #4]
 801dcc4:	681b      	ldr	r3, [r3, #0]
 801dcc6:	689b      	ldr	r3, [r3, #8]
 801dcc8:	2240      	movs	r2, #64	@ 0x40
 801dcca:	4013      	ands	r3, r2
 801dccc:	2b40      	cmp	r3, #64	@ 0x40
 801dcce:	d139      	bne.n	801dd44 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dcd0:	f3ef 8310 	mrs	r3, PRIMASK
 801dcd4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801dcd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801dcd8:	2090      	movs	r0, #144	@ 0x90
 801dcda:	183a      	adds	r2, r7, r0
 801dcdc:	6013      	str	r3, [r2, #0]
 801dcde:	2301      	movs	r3, #1
 801dce0:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dce2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dce4:	f383 8810 	msr	PRIMASK, r3
}
 801dce8:	46c0      	nop			@ (mov r8, r8)
 801dcea:	687b      	ldr	r3, [r7, #4]
 801dcec:	681b      	ldr	r3, [r3, #0]
 801dcee:	689a      	ldr	r2, [r3, #8]
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	681b      	ldr	r3, [r3, #0]
 801dcf4:	2140      	movs	r1, #64	@ 0x40
 801dcf6:	438a      	bics	r2, r1
 801dcf8:	609a      	str	r2, [r3, #8]
 801dcfa:	183b      	adds	r3, r7, r0
 801dcfc:	681b      	ldr	r3, [r3, #0]
 801dcfe:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dd02:	f383 8810 	msr	PRIMASK, r3
}
 801dd06:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801dd08:	687b      	ldr	r3, [r7, #4]
 801dd0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	d012      	beq.n	801dd36 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dd14:	4a17      	ldr	r2, [pc, #92]	@ (801dd74 <HAL_UART_IRQHandler+0x2ac>)
 801dd16:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dd1c:	0018      	movs	r0, r3
 801dd1e:	f7f7 fc0f 	bl	8015540 <HAL_DMA_Abort_IT>
 801dd22:	1e03      	subs	r3, r0, #0
 801dd24:	d020      	beq.n	801dd68 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dd2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dd30:	0018      	movs	r0, r3
 801dd32:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dd34:	e018      	b.n	801dd68 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801dd36:	687b      	ldr	r3, [r7, #4]
 801dd38:	2298      	movs	r2, #152	@ 0x98
 801dd3a:	589b      	ldr	r3, [r3, r2]
 801dd3c:	687a      	ldr	r2, [r7, #4]
 801dd3e:	0010      	movs	r0, r2
 801dd40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dd42:	e011      	b.n	801dd68 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801dd44:	687b      	ldr	r3, [r7, #4]
 801dd46:	2298      	movs	r2, #152	@ 0x98
 801dd48:	589b      	ldr	r3, [r3, r2]
 801dd4a:	687a      	ldr	r2, [r7, #4]
 801dd4c:	0010      	movs	r0, r2
 801dd4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dd50:	e00a      	b.n	801dd68 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801dd52:	687b      	ldr	r3, [r7, #4]
 801dd54:	2298      	movs	r2, #152	@ 0x98
 801dd56:	589b      	ldr	r3, [r3, r2]
 801dd58:	687a      	ldr	r2, [r7, #4]
 801dd5a:	0010      	movs	r0, r2
 801dd5c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801dd5e:	687b      	ldr	r3, [r7, #4]
 801dd60:	2284      	movs	r2, #132	@ 0x84
 801dd62:	2100      	movs	r1, #0
 801dd64:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801dd66:	e18d      	b.n	801e084 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dd68:	46c0      	nop			@ (mov r8, r8)
    return;
 801dd6a:	e18b      	b.n	801e084 <HAL_UART_IRQHandler+0x5bc>
 801dd6c:	0000080f 	.word	0x0000080f
 801dd70:	04000120 	.word	0x04000120
 801dd74:	0801f111 	.word	0x0801f111

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801dd78:	687b      	ldr	r3, [r7, #4]
 801dd7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801dd7c:	2b01      	cmp	r3, #1
 801dd7e:	d000      	beq.n	801dd82 <HAL_UART_IRQHandler+0x2ba>
 801dd80:	e13d      	b.n	801dffe <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801dd82:	23a4      	movs	r3, #164	@ 0xa4
 801dd84:	18fb      	adds	r3, r7, r3
 801dd86:	681b      	ldr	r3, [r3, #0]
 801dd88:	2210      	movs	r2, #16
 801dd8a:	4013      	ands	r3, r2
 801dd8c:	d100      	bne.n	801dd90 <HAL_UART_IRQHandler+0x2c8>
 801dd8e:	e136      	b.n	801dffe <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801dd90:	23a0      	movs	r3, #160	@ 0xa0
 801dd92:	18fb      	adds	r3, r7, r3
 801dd94:	681b      	ldr	r3, [r3, #0]
 801dd96:	2210      	movs	r2, #16
 801dd98:	4013      	ands	r3, r2
 801dd9a:	d100      	bne.n	801dd9e <HAL_UART_IRQHandler+0x2d6>
 801dd9c:	e12f      	b.n	801dffe <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801dd9e:	687b      	ldr	r3, [r7, #4]
 801dda0:	681b      	ldr	r3, [r3, #0]
 801dda2:	2210      	movs	r2, #16
 801dda4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dda6:	687b      	ldr	r3, [r7, #4]
 801dda8:	681b      	ldr	r3, [r3, #0]
 801ddaa:	689b      	ldr	r3, [r3, #8]
 801ddac:	2240      	movs	r2, #64	@ 0x40
 801ddae:	4013      	ands	r3, r2
 801ddb0:	2b40      	cmp	r3, #64	@ 0x40
 801ddb2:	d000      	beq.n	801ddb6 <HAL_UART_IRQHandler+0x2ee>
 801ddb4:	e0a2      	b.n	801defc <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ddba:	681b      	ldr	r3, [r3, #0]
 801ddbc:	685a      	ldr	r2, [r3, #4]
 801ddbe:	217e      	movs	r1, #126	@ 0x7e
 801ddc0:	187b      	adds	r3, r7, r1
 801ddc2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801ddc4:	187b      	adds	r3, r7, r1
 801ddc6:	881b      	ldrh	r3, [r3, #0]
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	d100      	bne.n	801ddce <HAL_UART_IRQHandler+0x306>
 801ddcc:	e15c      	b.n	801e088 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801ddce:	687b      	ldr	r3, [r7, #4]
 801ddd0:	2258      	movs	r2, #88	@ 0x58
 801ddd2:	5a9b      	ldrh	r3, [r3, r2]
 801ddd4:	187a      	adds	r2, r7, r1
 801ddd6:	8812      	ldrh	r2, [r2, #0]
 801ddd8:	429a      	cmp	r2, r3
 801ddda:	d300      	bcc.n	801ddde <HAL_UART_IRQHandler+0x316>
 801dddc:	e154      	b.n	801e088 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801ddde:	687b      	ldr	r3, [r7, #4]
 801dde0:	187a      	adds	r2, r7, r1
 801dde2:	215a      	movs	r1, #90	@ 0x5a
 801dde4:	8812      	ldrh	r2, [r2, #0]
 801dde6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801dde8:	687b      	ldr	r3, [r7, #4]
 801ddea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ddec:	681b      	ldr	r3, [r3, #0]
 801ddee:	681b      	ldr	r3, [r3, #0]
 801ddf0:	2220      	movs	r2, #32
 801ddf2:	4013      	ands	r3, r2
 801ddf4:	d16f      	bne.n	801ded6 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ddf6:	f3ef 8310 	mrs	r3, PRIMASK
 801ddfa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801ddfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ddfe:	67bb      	str	r3, [r7, #120]	@ 0x78
 801de00:	2301      	movs	r3, #1
 801de02:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801de06:	f383 8810 	msr	PRIMASK, r3
}
 801de0a:	46c0      	nop			@ (mov r8, r8)
 801de0c:	687b      	ldr	r3, [r7, #4]
 801de0e:	681b      	ldr	r3, [r3, #0]
 801de10:	681a      	ldr	r2, [r3, #0]
 801de12:	687b      	ldr	r3, [r7, #4]
 801de14:	681b      	ldr	r3, [r3, #0]
 801de16:	49a0      	ldr	r1, [pc, #640]	@ (801e098 <HAL_UART_IRQHandler+0x5d0>)
 801de18:	400a      	ands	r2, r1
 801de1a:	601a      	str	r2, [r3, #0]
 801de1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801de1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801de22:	f383 8810 	msr	PRIMASK, r3
}
 801de26:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de28:	f3ef 8310 	mrs	r3, PRIMASK
 801de2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801de2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801de30:	677b      	str	r3, [r7, #116]	@ 0x74
 801de32:	2301      	movs	r3, #1
 801de34:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801de38:	f383 8810 	msr	PRIMASK, r3
}
 801de3c:	46c0      	nop			@ (mov r8, r8)
 801de3e:	687b      	ldr	r3, [r7, #4]
 801de40:	681b      	ldr	r3, [r3, #0]
 801de42:	689a      	ldr	r2, [r3, #8]
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	681b      	ldr	r3, [r3, #0]
 801de48:	2101      	movs	r1, #1
 801de4a:	438a      	bics	r2, r1
 801de4c:	609a      	str	r2, [r3, #8]
 801de4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801de50:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801de54:	f383 8810 	msr	PRIMASK, r3
}
 801de58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de5a:	f3ef 8310 	mrs	r3, PRIMASK
 801de5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801de60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801de62:	673b      	str	r3, [r7, #112]	@ 0x70
 801de64:	2301      	movs	r3, #1
 801de66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801de6a:	f383 8810 	msr	PRIMASK, r3
}
 801de6e:	46c0      	nop			@ (mov r8, r8)
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	681b      	ldr	r3, [r3, #0]
 801de74:	689a      	ldr	r2, [r3, #8]
 801de76:	687b      	ldr	r3, [r7, #4]
 801de78:	681b      	ldr	r3, [r3, #0]
 801de7a:	2140      	movs	r1, #64	@ 0x40
 801de7c:	438a      	bics	r2, r1
 801de7e:	609a      	str	r2, [r3, #8]
 801de80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801de82:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801de86:	f383 8810 	msr	PRIMASK, r3
}
 801de8a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801de8c:	687b      	ldr	r3, [r7, #4]
 801de8e:	2280      	movs	r2, #128	@ 0x80
 801de90:	2120      	movs	r1, #32
 801de92:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	2200      	movs	r2, #0
 801de98:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de9a:	f3ef 8310 	mrs	r3, PRIMASK
 801de9e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801dea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dea2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801dea4:	2301      	movs	r3, #1
 801dea6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dea8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801deaa:	f383 8810 	msr	PRIMASK, r3
}
 801deae:	46c0      	nop			@ (mov r8, r8)
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	681b      	ldr	r3, [r3, #0]
 801deb4:	681a      	ldr	r2, [r3, #0]
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	681b      	ldr	r3, [r3, #0]
 801deba:	2110      	movs	r1, #16
 801debc:	438a      	bics	r2, r1
 801debe:	601a      	str	r2, [r3, #0]
 801dec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801dec2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dec4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801dec6:	f383 8810 	msr	PRIMASK, r3
}
 801deca:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801decc:	687b      	ldr	r3, [r7, #4]
 801dece:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ded0:	0018      	movs	r0, r3
 801ded2:	f7f7 faf5 	bl	80154c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801ded6:	687b      	ldr	r3, [r7, #4]
 801ded8:	2202      	movs	r2, #2
 801deda:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	22ac      	movs	r2, #172	@ 0xac
 801dee0:	589b      	ldr	r3, [r3, r2]
 801dee2:	687a      	ldr	r2, [r7, #4]
 801dee4:	2158      	movs	r1, #88	@ 0x58
 801dee6:	5a51      	ldrh	r1, [r2, r1]
 801dee8:	687a      	ldr	r2, [r7, #4]
 801deea:	205a      	movs	r0, #90	@ 0x5a
 801deec:	5a12      	ldrh	r2, [r2, r0]
 801deee:	b292      	uxth	r2, r2
 801def0:	1a8a      	subs	r2, r1, r2
 801def2:	b291      	uxth	r1, r2
 801def4:	687a      	ldr	r2, [r7, #4]
 801def6:	0010      	movs	r0, r2
 801def8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801defa:	e0c5      	b.n	801e088 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801defc:	687b      	ldr	r3, [r7, #4]
 801defe:	2258      	movs	r2, #88	@ 0x58
 801df00:	5a99      	ldrh	r1, [r3, r2]
 801df02:	687b      	ldr	r3, [r7, #4]
 801df04:	225a      	movs	r2, #90	@ 0x5a
 801df06:	5a9b      	ldrh	r3, [r3, r2]
 801df08:	b29a      	uxth	r2, r3
 801df0a:	208e      	movs	r0, #142	@ 0x8e
 801df0c:	183b      	adds	r3, r7, r0
 801df0e:	1a8a      	subs	r2, r1, r2
 801df10:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801df12:	687b      	ldr	r3, [r7, #4]
 801df14:	225a      	movs	r2, #90	@ 0x5a
 801df16:	5a9b      	ldrh	r3, [r3, r2]
 801df18:	b29b      	uxth	r3, r3
 801df1a:	2b00      	cmp	r3, #0
 801df1c:	d100      	bne.n	801df20 <HAL_UART_IRQHandler+0x458>
 801df1e:	e0b5      	b.n	801e08c <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801df20:	183b      	adds	r3, r7, r0
 801df22:	881b      	ldrh	r3, [r3, #0]
 801df24:	2b00      	cmp	r3, #0
 801df26:	d100      	bne.n	801df2a <HAL_UART_IRQHandler+0x462>
 801df28:	e0b0      	b.n	801e08c <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801df2a:	f3ef 8310 	mrs	r3, PRIMASK
 801df2e:	60fb      	str	r3, [r7, #12]
  return(result);
 801df30:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801df32:	2488      	movs	r4, #136	@ 0x88
 801df34:	193a      	adds	r2, r7, r4
 801df36:	6013      	str	r3, [r2, #0]
 801df38:	2301      	movs	r3, #1
 801df3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df3c:	693b      	ldr	r3, [r7, #16]
 801df3e:	f383 8810 	msr	PRIMASK, r3
}
 801df42:	46c0      	nop			@ (mov r8, r8)
 801df44:	687b      	ldr	r3, [r7, #4]
 801df46:	681b      	ldr	r3, [r3, #0]
 801df48:	681a      	ldr	r2, [r3, #0]
 801df4a:	687b      	ldr	r3, [r7, #4]
 801df4c:	681b      	ldr	r3, [r3, #0]
 801df4e:	4953      	ldr	r1, [pc, #332]	@ (801e09c <HAL_UART_IRQHandler+0x5d4>)
 801df50:	400a      	ands	r2, r1
 801df52:	601a      	str	r2, [r3, #0]
 801df54:	193b      	adds	r3, r7, r4
 801df56:	681b      	ldr	r3, [r3, #0]
 801df58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df5a:	697b      	ldr	r3, [r7, #20]
 801df5c:	f383 8810 	msr	PRIMASK, r3
}
 801df60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801df62:	f3ef 8310 	mrs	r3, PRIMASK
 801df66:	61bb      	str	r3, [r7, #24]
  return(result);
 801df68:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801df6a:	2484      	movs	r4, #132	@ 0x84
 801df6c:	193a      	adds	r2, r7, r4
 801df6e:	6013      	str	r3, [r2, #0]
 801df70:	2301      	movs	r3, #1
 801df72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df74:	69fb      	ldr	r3, [r7, #28]
 801df76:	f383 8810 	msr	PRIMASK, r3
}
 801df7a:	46c0      	nop			@ (mov r8, r8)
 801df7c:	687b      	ldr	r3, [r7, #4]
 801df7e:	681b      	ldr	r3, [r3, #0]
 801df80:	689a      	ldr	r2, [r3, #8]
 801df82:	687b      	ldr	r3, [r7, #4]
 801df84:	681b      	ldr	r3, [r3, #0]
 801df86:	2101      	movs	r1, #1
 801df88:	438a      	bics	r2, r1
 801df8a:	609a      	str	r2, [r3, #8]
 801df8c:	193b      	adds	r3, r7, r4
 801df8e:	681b      	ldr	r3, [r3, #0]
 801df90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df92:	6a3b      	ldr	r3, [r7, #32]
 801df94:	f383 8810 	msr	PRIMASK, r3
}
 801df98:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801df9a:	687b      	ldr	r3, [r7, #4]
 801df9c:	2280      	movs	r2, #128	@ 0x80
 801df9e:	2120      	movs	r1, #32
 801dfa0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dfa2:	687b      	ldr	r3, [r7, #4]
 801dfa4:	2200      	movs	r2, #0
 801dfa6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	2200      	movs	r2, #0
 801dfac:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dfae:	f3ef 8310 	mrs	r3, PRIMASK
 801dfb2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801dfb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dfb6:	2480      	movs	r4, #128	@ 0x80
 801dfb8:	193a      	adds	r2, r7, r4
 801dfba:	6013      	str	r3, [r2, #0]
 801dfbc:	2301      	movs	r3, #1
 801dfbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dfc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dfc2:	f383 8810 	msr	PRIMASK, r3
}
 801dfc6:	46c0      	nop			@ (mov r8, r8)
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	681b      	ldr	r3, [r3, #0]
 801dfcc:	681a      	ldr	r2, [r3, #0]
 801dfce:	687b      	ldr	r3, [r7, #4]
 801dfd0:	681b      	ldr	r3, [r3, #0]
 801dfd2:	2110      	movs	r1, #16
 801dfd4:	438a      	bics	r2, r1
 801dfd6:	601a      	str	r2, [r3, #0]
 801dfd8:	193b      	adds	r3, r7, r4
 801dfda:	681b      	ldr	r3, [r3, #0]
 801dfdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dfde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dfe0:	f383 8810 	msr	PRIMASK, r3
}
 801dfe4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801dfe6:	687b      	ldr	r3, [r7, #4]
 801dfe8:	2202      	movs	r2, #2
 801dfea:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	22ac      	movs	r2, #172	@ 0xac
 801dff0:	589b      	ldr	r3, [r3, r2]
 801dff2:	183a      	adds	r2, r7, r0
 801dff4:	8811      	ldrh	r1, [r2, #0]
 801dff6:	687a      	ldr	r2, [r7, #4]
 801dff8:	0010      	movs	r0, r2
 801dffa:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801dffc:	e046      	b.n	801e08c <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801dffe:	23a4      	movs	r3, #164	@ 0xa4
 801e000:	18fb      	adds	r3, r7, r3
 801e002:	681a      	ldr	r2, [r3, #0]
 801e004:	2380      	movs	r3, #128	@ 0x80
 801e006:	035b      	lsls	r3, r3, #13
 801e008:	4013      	ands	r3, r2
 801e00a:	d012      	beq.n	801e032 <HAL_UART_IRQHandler+0x56a>
 801e00c:	239c      	movs	r3, #156	@ 0x9c
 801e00e:	18fb      	adds	r3, r7, r3
 801e010:	681a      	ldr	r2, [r3, #0]
 801e012:	2380      	movs	r3, #128	@ 0x80
 801e014:	03db      	lsls	r3, r3, #15
 801e016:	4013      	ands	r3, r2
 801e018:	d00b      	beq.n	801e032 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801e01a:	687b      	ldr	r3, [r7, #4]
 801e01c:	681b      	ldr	r3, [r3, #0]
 801e01e:	2280      	movs	r2, #128	@ 0x80
 801e020:	0352      	lsls	r2, r2, #13
 801e022:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801e024:	687b      	ldr	r3, [r7, #4]
 801e026:	22a8      	movs	r2, #168	@ 0xa8
 801e028:	589b      	ldr	r3, [r3, r2]
 801e02a:	687a      	ldr	r2, [r7, #4]
 801e02c:	0010      	movs	r0, r2
 801e02e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801e030:	e02f      	b.n	801e092 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801e032:	23a4      	movs	r3, #164	@ 0xa4
 801e034:	18fb      	adds	r3, r7, r3
 801e036:	681b      	ldr	r3, [r3, #0]
 801e038:	2280      	movs	r2, #128	@ 0x80
 801e03a:	4013      	ands	r3, r2
 801e03c:	d00f      	beq.n	801e05e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801e03e:	23a0      	movs	r3, #160	@ 0xa0
 801e040:	18fb      	adds	r3, r7, r3
 801e042:	681b      	ldr	r3, [r3, #0]
 801e044:	2280      	movs	r2, #128	@ 0x80
 801e046:	4013      	ands	r3, r2
 801e048:	d009      	beq.n	801e05e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801e04a:	687b      	ldr	r3, [r7, #4]
 801e04c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e04e:	2b00      	cmp	r3, #0
 801e050:	d01e      	beq.n	801e090 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e056:	687a      	ldr	r2, [r7, #4]
 801e058:	0010      	movs	r0, r2
 801e05a:	4798      	blx	r3
    }
    return;
 801e05c:	e018      	b.n	801e090 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801e05e:	23a4      	movs	r3, #164	@ 0xa4
 801e060:	18fb      	adds	r3, r7, r3
 801e062:	681b      	ldr	r3, [r3, #0]
 801e064:	2240      	movs	r2, #64	@ 0x40
 801e066:	4013      	ands	r3, r2
 801e068:	d013      	beq.n	801e092 <HAL_UART_IRQHandler+0x5ca>
 801e06a:	23a0      	movs	r3, #160	@ 0xa0
 801e06c:	18fb      	adds	r3, r7, r3
 801e06e:	681b      	ldr	r3, [r3, #0]
 801e070:	2240      	movs	r2, #64	@ 0x40
 801e072:	4013      	ands	r3, r2
 801e074:	d00d      	beq.n	801e092 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801e076:	687b      	ldr	r3, [r7, #4]
 801e078:	0018      	movs	r0, r3
 801e07a:	f001 f862 	bl	801f142 <UART_EndTransmit_IT>
    return;
 801e07e:	e008      	b.n	801e092 <HAL_UART_IRQHandler+0x5ca>
      return;
 801e080:	46c0      	nop			@ (mov r8, r8)
 801e082:	e006      	b.n	801e092 <HAL_UART_IRQHandler+0x5ca>
    return;
 801e084:	46c0      	nop			@ (mov r8, r8)
 801e086:	e004      	b.n	801e092 <HAL_UART_IRQHandler+0x5ca>
      return;
 801e088:	46c0      	nop			@ (mov r8, r8)
 801e08a:	e002      	b.n	801e092 <HAL_UART_IRQHandler+0x5ca>
      return;
 801e08c:	46c0      	nop			@ (mov r8, r8)
 801e08e:	e000      	b.n	801e092 <HAL_UART_IRQHandler+0x5ca>
    return;
 801e090:	46c0      	nop			@ (mov r8, r8)
  }

}
 801e092:	46bd      	mov	sp, r7
 801e094:	b02b      	add	sp, #172	@ 0xac
 801e096:	bd90      	pop	{r4, r7, pc}
 801e098:	fffffeff 	.word	0xfffffeff
 801e09c:	fffffedf 	.word	0xfffffedf

0801e0a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801e0a0:	b580      	push	{r7, lr}
 801e0a2:	b082      	sub	sp, #8
 801e0a4:	af00      	add	r7, sp, #0
 801e0a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801e0a8:	46c0      	nop			@ (mov r8, r8)
 801e0aa:	46bd      	mov	sp, r7
 801e0ac:	b002      	add	sp, #8
 801e0ae:	bd80      	pop	{r7, pc}

0801e0b0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801e0b0:	b580      	push	{r7, lr}
 801e0b2:	b082      	sub	sp, #8
 801e0b4:	af00      	add	r7, sp, #0
 801e0b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801e0b8:	46c0      	nop			@ (mov r8, r8)
 801e0ba:	46bd      	mov	sp, r7
 801e0bc:	b002      	add	sp, #8
 801e0be:	bd80      	pop	{r7, pc}

0801e0c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801e0c0:	b580      	push	{r7, lr}
 801e0c2:	b082      	sub	sp, #8
 801e0c4:	af00      	add	r7, sp, #0
 801e0c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801e0c8:	46c0      	nop			@ (mov r8, r8)
 801e0ca:	46bd      	mov	sp, r7
 801e0cc:	b002      	add	sp, #8
 801e0ce:	bd80      	pop	{r7, pc}

0801e0d0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801e0d0:	b580      	push	{r7, lr}
 801e0d2:	b082      	sub	sp, #8
 801e0d4:	af00      	add	r7, sp, #0
 801e0d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801e0d8:	46c0      	nop			@ (mov r8, r8)
 801e0da:	46bd      	mov	sp, r7
 801e0dc:	b002      	add	sp, #8
 801e0de:	bd80      	pop	{r7, pc}

0801e0e0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801e0e0:	b580      	push	{r7, lr}
 801e0e2:	b082      	sub	sp, #8
 801e0e4:	af00      	add	r7, sp, #0
 801e0e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801e0e8:	46c0      	nop			@ (mov r8, r8)
 801e0ea:	46bd      	mov	sp, r7
 801e0ec:	b002      	add	sp, #8
 801e0ee:	bd80      	pop	{r7, pc}

0801e0f0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801e0f0:	b580      	push	{r7, lr}
 801e0f2:	b082      	sub	sp, #8
 801e0f4:	af00      	add	r7, sp, #0
 801e0f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801e0f8:	46c0      	nop			@ (mov r8, r8)
 801e0fa:	46bd      	mov	sp, r7
 801e0fc:	b002      	add	sp, #8
 801e0fe:	bd80      	pop	{r7, pc}

0801e100 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801e100:	b580      	push	{r7, lr}
 801e102:	b082      	sub	sp, #8
 801e104:	af00      	add	r7, sp, #0
 801e106:	6078      	str	r0, [r7, #4]
 801e108:	000a      	movs	r2, r1
 801e10a:	1cbb      	adds	r3, r7, #2
 801e10c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801e10e:	46c0      	nop			@ (mov r8, r8)
 801e110:	46bd      	mov	sp, r7
 801e112:	b002      	add	sp, #8
 801e114:	bd80      	pop	{r7, pc}
	...

0801e118 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801e118:	b580      	push	{r7, lr}
 801e11a:	b082      	sub	sp, #8
 801e11c:	af00      	add	r7, sp, #0
 801e11e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	2188      	movs	r1, #136	@ 0x88
 801e124:	4a14      	ldr	r2, [pc, #80]	@ (801e178 <UART_InitCallbacksToDefault+0x60>)
 801e126:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	218c      	movs	r1, #140	@ 0x8c
 801e12c:	4a13      	ldr	r2, [pc, #76]	@ (801e17c <UART_InitCallbacksToDefault+0x64>)
 801e12e:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	2190      	movs	r1, #144	@ 0x90
 801e134:	4a12      	ldr	r2, [pc, #72]	@ (801e180 <UART_InitCallbacksToDefault+0x68>)
 801e136:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801e138:	687b      	ldr	r3, [r7, #4]
 801e13a:	2194      	movs	r1, #148	@ 0x94
 801e13c:	4a11      	ldr	r2, [pc, #68]	@ (801e184 <UART_InitCallbacksToDefault+0x6c>)
 801e13e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801e140:	687b      	ldr	r3, [r7, #4]
 801e142:	2198      	movs	r1, #152	@ 0x98
 801e144:	4a10      	ldr	r2, [pc, #64]	@ (801e188 <UART_InitCallbacksToDefault+0x70>)
 801e146:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801e148:	687b      	ldr	r3, [r7, #4]
 801e14a:	219c      	movs	r1, #156	@ 0x9c
 801e14c:	4a0f      	ldr	r2, [pc, #60]	@ (801e18c <UART_InitCallbacksToDefault+0x74>)
 801e14e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801e150:	687b      	ldr	r3, [r7, #4]
 801e152:	21a0      	movs	r1, #160	@ 0xa0
 801e154:	4a0e      	ldr	r2, [pc, #56]	@ (801e190 <UART_InitCallbacksToDefault+0x78>)
 801e156:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801e158:	687b      	ldr	r3, [r7, #4]
 801e15a:	21a4      	movs	r1, #164	@ 0xa4
 801e15c:	4a0d      	ldr	r2, [pc, #52]	@ (801e194 <UART_InitCallbacksToDefault+0x7c>)
 801e15e:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801e160:	687b      	ldr	r3, [r7, #4]
 801e162:	21a8      	movs	r1, #168	@ 0xa8
 801e164:	4a0c      	ldr	r2, [pc, #48]	@ (801e198 <UART_InitCallbacksToDefault+0x80>)
 801e166:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	21ac      	movs	r1, #172	@ 0xac
 801e16c:	4a0b      	ldr	r2, [pc, #44]	@ (801e19c <UART_InitCallbacksToDefault+0x84>)
 801e16e:	505a      	str	r2, [r3, r1]

}
 801e170:	46c0      	nop			@ (mov r8, r8)
 801e172:	46bd      	mov	sp, r7
 801e174:	b002      	add	sp, #8
 801e176:	bd80      	pop	{r7, pc}
 801e178:	0801e0b1 	.word	0x0801e0b1
 801e17c:	0801e0a1 	.word	0x0801e0a1
 801e180:	0801e0c1 	.word	0x0801e0c1
 801e184:	0800d429 	.word	0x0800d429
 801e188:	08005071 	.word	0x08005071
 801e18c:	0801e0d1 	.word	0x0801e0d1
 801e190:	0801e0e1 	.word	0x0801e0e1
 801e194:	0801e0f1 	.word	0x0801e0f1
 801e198:	0801f535 	.word	0x0801f535
 801e19c:	0801e101 	.word	0x0801e101

0801e1a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801e1a0:	b5b0      	push	{r4, r5, r7, lr}
 801e1a2:	b08e      	sub	sp, #56	@ 0x38
 801e1a4:	af00      	add	r7, sp, #0
 801e1a6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801e1a8:	231a      	movs	r3, #26
 801e1aa:	2218      	movs	r2, #24
 801e1ac:	189b      	adds	r3, r3, r2
 801e1ae:	19db      	adds	r3, r3, r7
 801e1b0:	2200      	movs	r2, #0
 801e1b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801e1b4:	69fb      	ldr	r3, [r7, #28]
 801e1b6:	689a      	ldr	r2, [r3, #8]
 801e1b8:	69fb      	ldr	r3, [r7, #28]
 801e1ba:	691b      	ldr	r3, [r3, #16]
 801e1bc:	431a      	orrs	r2, r3
 801e1be:	69fb      	ldr	r3, [r7, #28]
 801e1c0:	695b      	ldr	r3, [r3, #20]
 801e1c2:	431a      	orrs	r2, r3
 801e1c4:	69fb      	ldr	r3, [r7, #28]
 801e1c6:	69db      	ldr	r3, [r3, #28]
 801e1c8:	4313      	orrs	r3, r2
 801e1ca:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801e1cc:	69fb      	ldr	r3, [r7, #28]
 801e1ce:	681b      	ldr	r3, [r3, #0]
 801e1d0:	681b      	ldr	r3, [r3, #0]
 801e1d2:	4ac3      	ldr	r2, [pc, #780]	@ (801e4e0 <UART_SetConfig+0x340>)
 801e1d4:	4013      	ands	r3, r2
 801e1d6:	0019      	movs	r1, r3
 801e1d8:	69fb      	ldr	r3, [r7, #28]
 801e1da:	681b      	ldr	r3, [r3, #0]
 801e1dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e1de:	430a      	orrs	r2, r1
 801e1e0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801e1e2:	69fb      	ldr	r3, [r7, #28]
 801e1e4:	681b      	ldr	r3, [r3, #0]
 801e1e6:	685b      	ldr	r3, [r3, #4]
 801e1e8:	4abe      	ldr	r2, [pc, #760]	@ (801e4e4 <UART_SetConfig+0x344>)
 801e1ea:	4013      	ands	r3, r2
 801e1ec:	0019      	movs	r1, r3
 801e1ee:	69fb      	ldr	r3, [r7, #28]
 801e1f0:	68da      	ldr	r2, [r3, #12]
 801e1f2:	69fb      	ldr	r3, [r7, #28]
 801e1f4:	681b      	ldr	r3, [r3, #0]
 801e1f6:	430a      	orrs	r2, r1
 801e1f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801e1fa:	69fb      	ldr	r3, [r7, #28]
 801e1fc:	699b      	ldr	r3, [r3, #24]
 801e1fe:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801e200:	69fb      	ldr	r3, [r7, #28]
 801e202:	681b      	ldr	r3, [r3, #0]
 801e204:	4ab8      	ldr	r2, [pc, #736]	@ (801e4e8 <UART_SetConfig+0x348>)
 801e206:	4293      	cmp	r3, r2
 801e208:	d004      	beq.n	801e214 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801e20a:	69fb      	ldr	r3, [r7, #28]
 801e20c:	6a1b      	ldr	r3, [r3, #32]
 801e20e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e210:	4313      	orrs	r3, r2
 801e212:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801e214:	69fb      	ldr	r3, [r7, #28]
 801e216:	681b      	ldr	r3, [r3, #0]
 801e218:	689b      	ldr	r3, [r3, #8]
 801e21a:	4ab4      	ldr	r2, [pc, #720]	@ (801e4ec <UART_SetConfig+0x34c>)
 801e21c:	4013      	ands	r3, r2
 801e21e:	0019      	movs	r1, r3
 801e220:	69fb      	ldr	r3, [r7, #28]
 801e222:	681b      	ldr	r3, [r3, #0]
 801e224:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e226:	430a      	orrs	r2, r1
 801e228:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801e22a:	69fb      	ldr	r3, [r7, #28]
 801e22c:	681b      	ldr	r3, [r3, #0]
 801e22e:	4ab0      	ldr	r2, [pc, #704]	@ (801e4f0 <UART_SetConfig+0x350>)
 801e230:	4293      	cmp	r3, r2
 801e232:	d131      	bne.n	801e298 <UART_SetConfig+0xf8>
 801e234:	4baf      	ldr	r3, [pc, #700]	@ (801e4f4 <UART_SetConfig+0x354>)
 801e236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e238:	2203      	movs	r2, #3
 801e23a:	4013      	ands	r3, r2
 801e23c:	2b03      	cmp	r3, #3
 801e23e:	d01d      	beq.n	801e27c <UART_SetConfig+0xdc>
 801e240:	d823      	bhi.n	801e28a <UART_SetConfig+0xea>
 801e242:	2b02      	cmp	r3, #2
 801e244:	d00c      	beq.n	801e260 <UART_SetConfig+0xc0>
 801e246:	d820      	bhi.n	801e28a <UART_SetConfig+0xea>
 801e248:	2b00      	cmp	r3, #0
 801e24a:	d002      	beq.n	801e252 <UART_SetConfig+0xb2>
 801e24c:	2b01      	cmp	r3, #1
 801e24e:	d00e      	beq.n	801e26e <UART_SetConfig+0xce>
 801e250:	e01b      	b.n	801e28a <UART_SetConfig+0xea>
 801e252:	231b      	movs	r3, #27
 801e254:	2218      	movs	r2, #24
 801e256:	189b      	adds	r3, r3, r2
 801e258:	19db      	adds	r3, r3, r7
 801e25a:	2201      	movs	r2, #1
 801e25c:	701a      	strb	r2, [r3, #0]
 801e25e:	e0b4      	b.n	801e3ca <UART_SetConfig+0x22a>
 801e260:	231b      	movs	r3, #27
 801e262:	2218      	movs	r2, #24
 801e264:	189b      	adds	r3, r3, r2
 801e266:	19db      	adds	r3, r3, r7
 801e268:	2202      	movs	r2, #2
 801e26a:	701a      	strb	r2, [r3, #0]
 801e26c:	e0ad      	b.n	801e3ca <UART_SetConfig+0x22a>
 801e26e:	231b      	movs	r3, #27
 801e270:	2218      	movs	r2, #24
 801e272:	189b      	adds	r3, r3, r2
 801e274:	19db      	adds	r3, r3, r7
 801e276:	2204      	movs	r2, #4
 801e278:	701a      	strb	r2, [r3, #0]
 801e27a:	e0a6      	b.n	801e3ca <UART_SetConfig+0x22a>
 801e27c:	231b      	movs	r3, #27
 801e27e:	2218      	movs	r2, #24
 801e280:	189b      	adds	r3, r3, r2
 801e282:	19db      	adds	r3, r3, r7
 801e284:	2208      	movs	r2, #8
 801e286:	701a      	strb	r2, [r3, #0]
 801e288:	e09f      	b.n	801e3ca <UART_SetConfig+0x22a>
 801e28a:	231b      	movs	r3, #27
 801e28c:	2218      	movs	r2, #24
 801e28e:	189b      	adds	r3, r3, r2
 801e290:	19db      	adds	r3, r3, r7
 801e292:	2210      	movs	r2, #16
 801e294:	701a      	strb	r2, [r3, #0]
 801e296:	e098      	b.n	801e3ca <UART_SetConfig+0x22a>
 801e298:	69fb      	ldr	r3, [r7, #28]
 801e29a:	681b      	ldr	r3, [r3, #0]
 801e29c:	4a96      	ldr	r2, [pc, #600]	@ (801e4f8 <UART_SetConfig+0x358>)
 801e29e:	4293      	cmp	r3, r2
 801e2a0:	d131      	bne.n	801e306 <UART_SetConfig+0x166>
 801e2a2:	4b94      	ldr	r3, [pc, #592]	@ (801e4f4 <UART_SetConfig+0x354>)
 801e2a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e2a6:	220c      	movs	r2, #12
 801e2a8:	4013      	ands	r3, r2
 801e2aa:	2b0c      	cmp	r3, #12
 801e2ac:	d01d      	beq.n	801e2ea <UART_SetConfig+0x14a>
 801e2ae:	d823      	bhi.n	801e2f8 <UART_SetConfig+0x158>
 801e2b0:	2b08      	cmp	r3, #8
 801e2b2:	d00c      	beq.n	801e2ce <UART_SetConfig+0x12e>
 801e2b4:	d820      	bhi.n	801e2f8 <UART_SetConfig+0x158>
 801e2b6:	2b00      	cmp	r3, #0
 801e2b8:	d002      	beq.n	801e2c0 <UART_SetConfig+0x120>
 801e2ba:	2b04      	cmp	r3, #4
 801e2bc:	d00e      	beq.n	801e2dc <UART_SetConfig+0x13c>
 801e2be:	e01b      	b.n	801e2f8 <UART_SetConfig+0x158>
 801e2c0:	231b      	movs	r3, #27
 801e2c2:	2218      	movs	r2, #24
 801e2c4:	189b      	adds	r3, r3, r2
 801e2c6:	19db      	adds	r3, r3, r7
 801e2c8:	2200      	movs	r2, #0
 801e2ca:	701a      	strb	r2, [r3, #0]
 801e2cc:	e07d      	b.n	801e3ca <UART_SetConfig+0x22a>
 801e2ce:	231b      	movs	r3, #27
 801e2d0:	2218      	movs	r2, #24
 801e2d2:	189b      	adds	r3, r3, r2
 801e2d4:	19db      	adds	r3, r3, r7
 801e2d6:	2202      	movs	r2, #2
 801e2d8:	701a      	strb	r2, [r3, #0]
 801e2da:	e076      	b.n	801e3ca <UART_SetConfig+0x22a>
 801e2dc:	231b      	movs	r3, #27
 801e2de:	2218      	movs	r2, #24
 801e2e0:	189b      	adds	r3, r3, r2
 801e2e2:	19db      	adds	r3, r3, r7
 801e2e4:	2204      	movs	r2, #4
 801e2e6:	701a      	strb	r2, [r3, #0]
 801e2e8:	e06f      	b.n	801e3ca <UART_SetConfig+0x22a>
 801e2ea:	231b      	movs	r3, #27
 801e2ec:	2218      	movs	r2, #24
 801e2ee:	189b      	adds	r3, r3, r2
 801e2f0:	19db      	adds	r3, r3, r7
 801e2f2:	2208      	movs	r2, #8
 801e2f4:	701a      	strb	r2, [r3, #0]
 801e2f6:	e068      	b.n	801e3ca <UART_SetConfig+0x22a>
 801e2f8:	231b      	movs	r3, #27
 801e2fa:	2218      	movs	r2, #24
 801e2fc:	189b      	adds	r3, r3, r2
 801e2fe:	19db      	adds	r3, r3, r7
 801e300:	2210      	movs	r2, #16
 801e302:	701a      	strb	r2, [r3, #0]
 801e304:	e061      	b.n	801e3ca <UART_SetConfig+0x22a>
 801e306:	69fb      	ldr	r3, [r7, #28]
 801e308:	681b      	ldr	r3, [r3, #0]
 801e30a:	4a7c      	ldr	r2, [pc, #496]	@ (801e4fc <UART_SetConfig+0x35c>)
 801e30c:	4293      	cmp	r3, r2
 801e30e:	d106      	bne.n	801e31e <UART_SetConfig+0x17e>
 801e310:	231b      	movs	r3, #27
 801e312:	2218      	movs	r2, #24
 801e314:	189b      	adds	r3, r3, r2
 801e316:	19db      	adds	r3, r3, r7
 801e318:	2200      	movs	r2, #0
 801e31a:	701a      	strb	r2, [r3, #0]
 801e31c:	e055      	b.n	801e3ca <UART_SetConfig+0x22a>
 801e31e:	69fb      	ldr	r3, [r7, #28]
 801e320:	681b      	ldr	r3, [r3, #0]
 801e322:	4a77      	ldr	r2, [pc, #476]	@ (801e500 <UART_SetConfig+0x360>)
 801e324:	4293      	cmp	r3, r2
 801e326:	d106      	bne.n	801e336 <UART_SetConfig+0x196>
 801e328:	231b      	movs	r3, #27
 801e32a:	2218      	movs	r2, #24
 801e32c:	189b      	adds	r3, r3, r2
 801e32e:	19db      	adds	r3, r3, r7
 801e330:	2200      	movs	r2, #0
 801e332:	701a      	strb	r2, [r3, #0]
 801e334:	e049      	b.n	801e3ca <UART_SetConfig+0x22a>
 801e336:	69fb      	ldr	r3, [r7, #28]
 801e338:	681b      	ldr	r3, [r3, #0]
 801e33a:	4a6b      	ldr	r2, [pc, #428]	@ (801e4e8 <UART_SetConfig+0x348>)
 801e33c:	4293      	cmp	r3, r2
 801e33e:	d13e      	bne.n	801e3be <UART_SetConfig+0x21e>
 801e340:	4b6c      	ldr	r3, [pc, #432]	@ (801e4f4 <UART_SetConfig+0x354>)
 801e342:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801e344:	23c0      	movs	r3, #192	@ 0xc0
 801e346:	011b      	lsls	r3, r3, #4
 801e348:	4013      	ands	r3, r2
 801e34a:	22c0      	movs	r2, #192	@ 0xc0
 801e34c:	0112      	lsls	r2, r2, #4
 801e34e:	4293      	cmp	r3, r2
 801e350:	d027      	beq.n	801e3a2 <UART_SetConfig+0x202>
 801e352:	22c0      	movs	r2, #192	@ 0xc0
 801e354:	0112      	lsls	r2, r2, #4
 801e356:	4293      	cmp	r3, r2
 801e358:	d82a      	bhi.n	801e3b0 <UART_SetConfig+0x210>
 801e35a:	2280      	movs	r2, #128	@ 0x80
 801e35c:	0112      	lsls	r2, r2, #4
 801e35e:	4293      	cmp	r3, r2
 801e360:	d011      	beq.n	801e386 <UART_SetConfig+0x1e6>
 801e362:	2280      	movs	r2, #128	@ 0x80
 801e364:	0112      	lsls	r2, r2, #4
 801e366:	4293      	cmp	r3, r2
 801e368:	d822      	bhi.n	801e3b0 <UART_SetConfig+0x210>
 801e36a:	2b00      	cmp	r3, #0
 801e36c:	d004      	beq.n	801e378 <UART_SetConfig+0x1d8>
 801e36e:	2280      	movs	r2, #128	@ 0x80
 801e370:	00d2      	lsls	r2, r2, #3
 801e372:	4293      	cmp	r3, r2
 801e374:	d00e      	beq.n	801e394 <UART_SetConfig+0x1f4>
 801e376:	e01b      	b.n	801e3b0 <UART_SetConfig+0x210>
 801e378:	231b      	movs	r3, #27
 801e37a:	2218      	movs	r2, #24
 801e37c:	189b      	adds	r3, r3, r2
 801e37e:	19db      	adds	r3, r3, r7
 801e380:	2200      	movs	r2, #0
 801e382:	701a      	strb	r2, [r3, #0]
 801e384:	e021      	b.n	801e3ca <UART_SetConfig+0x22a>
 801e386:	231b      	movs	r3, #27
 801e388:	2218      	movs	r2, #24
 801e38a:	189b      	adds	r3, r3, r2
 801e38c:	19db      	adds	r3, r3, r7
 801e38e:	2202      	movs	r2, #2
 801e390:	701a      	strb	r2, [r3, #0]
 801e392:	e01a      	b.n	801e3ca <UART_SetConfig+0x22a>
 801e394:	231b      	movs	r3, #27
 801e396:	2218      	movs	r2, #24
 801e398:	189b      	adds	r3, r3, r2
 801e39a:	19db      	adds	r3, r3, r7
 801e39c:	2204      	movs	r2, #4
 801e39e:	701a      	strb	r2, [r3, #0]
 801e3a0:	e013      	b.n	801e3ca <UART_SetConfig+0x22a>
 801e3a2:	231b      	movs	r3, #27
 801e3a4:	2218      	movs	r2, #24
 801e3a6:	189b      	adds	r3, r3, r2
 801e3a8:	19db      	adds	r3, r3, r7
 801e3aa:	2208      	movs	r2, #8
 801e3ac:	701a      	strb	r2, [r3, #0]
 801e3ae:	e00c      	b.n	801e3ca <UART_SetConfig+0x22a>
 801e3b0:	231b      	movs	r3, #27
 801e3b2:	2218      	movs	r2, #24
 801e3b4:	189b      	adds	r3, r3, r2
 801e3b6:	19db      	adds	r3, r3, r7
 801e3b8:	2210      	movs	r2, #16
 801e3ba:	701a      	strb	r2, [r3, #0]
 801e3bc:	e005      	b.n	801e3ca <UART_SetConfig+0x22a>
 801e3be:	231b      	movs	r3, #27
 801e3c0:	2218      	movs	r2, #24
 801e3c2:	189b      	adds	r3, r3, r2
 801e3c4:	19db      	adds	r3, r3, r7
 801e3c6:	2210      	movs	r2, #16
 801e3c8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801e3ca:	69fb      	ldr	r3, [r7, #28]
 801e3cc:	681b      	ldr	r3, [r3, #0]
 801e3ce:	4a46      	ldr	r2, [pc, #280]	@ (801e4e8 <UART_SetConfig+0x348>)
 801e3d0:	4293      	cmp	r3, r2
 801e3d2:	d000      	beq.n	801e3d6 <UART_SetConfig+0x236>
 801e3d4:	e09a      	b.n	801e50c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801e3d6:	231b      	movs	r3, #27
 801e3d8:	2218      	movs	r2, #24
 801e3da:	189b      	adds	r3, r3, r2
 801e3dc:	19db      	adds	r3, r3, r7
 801e3de:	781b      	ldrb	r3, [r3, #0]
 801e3e0:	2b08      	cmp	r3, #8
 801e3e2:	d01d      	beq.n	801e420 <UART_SetConfig+0x280>
 801e3e4:	dc20      	bgt.n	801e428 <UART_SetConfig+0x288>
 801e3e6:	2b04      	cmp	r3, #4
 801e3e8:	d015      	beq.n	801e416 <UART_SetConfig+0x276>
 801e3ea:	dc1d      	bgt.n	801e428 <UART_SetConfig+0x288>
 801e3ec:	2b00      	cmp	r3, #0
 801e3ee:	d002      	beq.n	801e3f6 <UART_SetConfig+0x256>
 801e3f0:	2b02      	cmp	r3, #2
 801e3f2:	d005      	beq.n	801e400 <UART_SetConfig+0x260>
 801e3f4:	e018      	b.n	801e428 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e3f6:	f7fd fd37 	bl	801be68 <HAL_RCC_GetPCLK1Freq>
 801e3fa:	0003      	movs	r3, r0
 801e3fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e3fe:	e01c      	b.n	801e43a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e400:	4b3c      	ldr	r3, [pc, #240]	@ (801e4f4 <UART_SetConfig+0x354>)
 801e402:	681b      	ldr	r3, [r3, #0]
 801e404:	2210      	movs	r2, #16
 801e406:	4013      	ands	r3, r2
 801e408:	d002      	beq.n	801e410 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e40a:	4b3e      	ldr	r3, [pc, #248]	@ (801e504 <UART_SetConfig+0x364>)
 801e40c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e40e:	e014      	b.n	801e43a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801e410:	4b3d      	ldr	r3, [pc, #244]	@ (801e508 <UART_SetConfig+0x368>)
 801e412:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e414:	e011      	b.n	801e43a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e416:	f7fd fc77 	bl	801bd08 <HAL_RCC_GetSysClockFreq>
 801e41a:	0003      	movs	r3, r0
 801e41c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e41e:	e00c      	b.n	801e43a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e420:	2380      	movs	r3, #128	@ 0x80
 801e422:	021b      	lsls	r3, r3, #8
 801e424:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e426:	e008      	b.n	801e43a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801e428:	2300      	movs	r3, #0
 801e42a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e42c:	231a      	movs	r3, #26
 801e42e:	2218      	movs	r2, #24
 801e430:	189b      	adds	r3, r3, r2
 801e432:	19db      	adds	r3, r3, r7
 801e434:	2201      	movs	r2, #1
 801e436:	701a      	strb	r2, [r3, #0]
        break;
 801e438:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801e43a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e43c:	2b00      	cmp	r3, #0
 801e43e:	d100      	bne.n	801e442 <UART_SetConfig+0x2a2>
 801e440:	e133      	b.n	801e6aa <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801e442:	69fb      	ldr	r3, [r7, #28]
 801e444:	685a      	ldr	r2, [r3, #4]
 801e446:	0013      	movs	r3, r2
 801e448:	005b      	lsls	r3, r3, #1
 801e44a:	189b      	adds	r3, r3, r2
 801e44c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e44e:	429a      	cmp	r2, r3
 801e450:	d305      	bcc.n	801e45e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801e452:	69fb      	ldr	r3, [r7, #28]
 801e454:	685b      	ldr	r3, [r3, #4]
 801e456:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801e458:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e45a:	429a      	cmp	r2, r3
 801e45c:	d906      	bls.n	801e46c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801e45e:	231a      	movs	r3, #26
 801e460:	2218      	movs	r2, #24
 801e462:	189b      	adds	r3, r3, r2
 801e464:	19db      	adds	r3, r3, r7
 801e466:	2201      	movs	r2, #1
 801e468:	701a      	strb	r2, [r3, #0]
 801e46a:	e11e      	b.n	801e6aa <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801e46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e46e:	613b      	str	r3, [r7, #16]
 801e470:	2300      	movs	r3, #0
 801e472:	617b      	str	r3, [r7, #20]
 801e474:	6939      	ldr	r1, [r7, #16]
 801e476:	697a      	ldr	r2, [r7, #20]
 801e478:	000b      	movs	r3, r1
 801e47a:	0e1b      	lsrs	r3, r3, #24
 801e47c:	0010      	movs	r0, r2
 801e47e:	0205      	lsls	r5, r0, #8
 801e480:	431d      	orrs	r5, r3
 801e482:	000b      	movs	r3, r1
 801e484:	021c      	lsls	r4, r3, #8
 801e486:	69fb      	ldr	r3, [r7, #28]
 801e488:	685b      	ldr	r3, [r3, #4]
 801e48a:	085b      	lsrs	r3, r3, #1
 801e48c:	60bb      	str	r3, [r7, #8]
 801e48e:	2300      	movs	r3, #0
 801e490:	60fb      	str	r3, [r7, #12]
 801e492:	68b8      	ldr	r0, [r7, #8]
 801e494:	68f9      	ldr	r1, [r7, #12]
 801e496:	1900      	adds	r0, r0, r4
 801e498:	4169      	adcs	r1, r5
 801e49a:	69fb      	ldr	r3, [r7, #28]
 801e49c:	685b      	ldr	r3, [r3, #4]
 801e49e:	603b      	str	r3, [r7, #0]
 801e4a0:	2300      	movs	r3, #0
 801e4a2:	607b      	str	r3, [r7, #4]
 801e4a4:	683a      	ldr	r2, [r7, #0]
 801e4a6:	687b      	ldr	r3, [r7, #4]
 801e4a8:	f7e2 f86a 	bl	8000580 <__aeabi_uldivmod>
 801e4ac:	0002      	movs	r2, r0
 801e4ae:	000b      	movs	r3, r1
 801e4b0:	0013      	movs	r3, r2
 801e4b2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801e4b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e4b6:	23c0      	movs	r3, #192	@ 0xc0
 801e4b8:	009b      	lsls	r3, r3, #2
 801e4ba:	429a      	cmp	r2, r3
 801e4bc:	d309      	bcc.n	801e4d2 <UART_SetConfig+0x332>
 801e4be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e4c0:	2380      	movs	r3, #128	@ 0x80
 801e4c2:	035b      	lsls	r3, r3, #13
 801e4c4:	429a      	cmp	r2, r3
 801e4c6:	d204      	bcs.n	801e4d2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801e4c8:	69fb      	ldr	r3, [r7, #28]
 801e4ca:	681b      	ldr	r3, [r3, #0]
 801e4cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e4ce:	60da      	str	r2, [r3, #12]
 801e4d0:	e0eb      	b.n	801e6aa <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801e4d2:	231a      	movs	r3, #26
 801e4d4:	2218      	movs	r2, #24
 801e4d6:	189b      	adds	r3, r3, r2
 801e4d8:	19db      	adds	r3, r3, r7
 801e4da:	2201      	movs	r2, #1
 801e4dc:	701a      	strb	r2, [r3, #0]
 801e4de:	e0e4      	b.n	801e6aa <UART_SetConfig+0x50a>
 801e4e0:	efff69f3 	.word	0xefff69f3
 801e4e4:	ffffcfff 	.word	0xffffcfff
 801e4e8:	40004800 	.word	0x40004800
 801e4ec:	fffff4ff 	.word	0xfffff4ff
 801e4f0:	40013800 	.word	0x40013800
 801e4f4:	40021000 	.word	0x40021000
 801e4f8:	40004400 	.word	0x40004400
 801e4fc:	40004c00 	.word	0x40004c00
 801e500:	40005000 	.word	0x40005000
 801e504:	003d0900 	.word	0x003d0900
 801e508:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801e50c:	69fb      	ldr	r3, [r7, #28]
 801e50e:	69da      	ldr	r2, [r3, #28]
 801e510:	2380      	movs	r3, #128	@ 0x80
 801e512:	021b      	lsls	r3, r3, #8
 801e514:	429a      	cmp	r2, r3
 801e516:	d000      	beq.n	801e51a <UART_SetConfig+0x37a>
 801e518:	e070      	b.n	801e5fc <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801e51a:	231b      	movs	r3, #27
 801e51c:	2218      	movs	r2, #24
 801e51e:	189b      	adds	r3, r3, r2
 801e520:	19db      	adds	r3, r3, r7
 801e522:	781b      	ldrb	r3, [r3, #0]
 801e524:	2b08      	cmp	r3, #8
 801e526:	d822      	bhi.n	801e56e <UART_SetConfig+0x3ce>
 801e528:	009a      	lsls	r2, r3, #2
 801e52a:	4b67      	ldr	r3, [pc, #412]	@ (801e6c8 <UART_SetConfig+0x528>)
 801e52c:	18d3      	adds	r3, r2, r3
 801e52e:	681b      	ldr	r3, [r3, #0]
 801e530:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e532:	f7fd fc99 	bl	801be68 <HAL_RCC_GetPCLK1Freq>
 801e536:	0003      	movs	r3, r0
 801e538:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e53a:	e021      	b.n	801e580 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e53c:	f7fd fcaa 	bl	801be94 <HAL_RCC_GetPCLK2Freq>
 801e540:	0003      	movs	r3, r0
 801e542:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e544:	e01c      	b.n	801e580 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e546:	4b61      	ldr	r3, [pc, #388]	@ (801e6cc <UART_SetConfig+0x52c>)
 801e548:	681b      	ldr	r3, [r3, #0]
 801e54a:	2210      	movs	r2, #16
 801e54c:	4013      	ands	r3, r2
 801e54e:	d002      	beq.n	801e556 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e550:	4b5f      	ldr	r3, [pc, #380]	@ (801e6d0 <UART_SetConfig+0x530>)
 801e552:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e554:	e014      	b.n	801e580 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801e556:	4b5f      	ldr	r3, [pc, #380]	@ (801e6d4 <UART_SetConfig+0x534>)
 801e558:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e55a:	e011      	b.n	801e580 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e55c:	f7fd fbd4 	bl	801bd08 <HAL_RCC_GetSysClockFreq>
 801e560:	0003      	movs	r3, r0
 801e562:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e564:	e00c      	b.n	801e580 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e566:	2380      	movs	r3, #128	@ 0x80
 801e568:	021b      	lsls	r3, r3, #8
 801e56a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e56c:	e008      	b.n	801e580 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801e56e:	2300      	movs	r3, #0
 801e570:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e572:	231a      	movs	r3, #26
 801e574:	2218      	movs	r2, #24
 801e576:	189b      	adds	r3, r3, r2
 801e578:	19db      	adds	r3, r3, r7
 801e57a:	2201      	movs	r2, #1
 801e57c:	701a      	strb	r2, [r3, #0]
        break;
 801e57e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801e580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e582:	2b00      	cmp	r3, #0
 801e584:	d100      	bne.n	801e588 <UART_SetConfig+0x3e8>
 801e586:	e090      	b.n	801e6aa <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801e588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e58a:	005a      	lsls	r2, r3, #1
 801e58c:	69fb      	ldr	r3, [r7, #28]
 801e58e:	685b      	ldr	r3, [r3, #4]
 801e590:	085b      	lsrs	r3, r3, #1
 801e592:	18d2      	adds	r2, r2, r3
 801e594:	69fb      	ldr	r3, [r7, #28]
 801e596:	685b      	ldr	r3, [r3, #4]
 801e598:	0019      	movs	r1, r3
 801e59a:	0010      	movs	r0, r2
 801e59c:	f7e1 fe02 	bl	80001a4 <__udivsi3>
 801e5a0:	0003      	movs	r3, r0
 801e5a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e5a6:	2b0f      	cmp	r3, #15
 801e5a8:	d921      	bls.n	801e5ee <UART_SetConfig+0x44e>
 801e5aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e5ac:	2380      	movs	r3, #128	@ 0x80
 801e5ae:	025b      	lsls	r3, r3, #9
 801e5b0:	429a      	cmp	r2, r3
 801e5b2:	d21c      	bcs.n	801e5ee <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801e5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e5b6:	b29a      	uxth	r2, r3
 801e5b8:	200e      	movs	r0, #14
 801e5ba:	2418      	movs	r4, #24
 801e5bc:	1903      	adds	r3, r0, r4
 801e5be:	19db      	adds	r3, r3, r7
 801e5c0:	210f      	movs	r1, #15
 801e5c2:	438a      	bics	r2, r1
 801e5c4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801e5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e5c8:	085b      	lsrs	r3, r3, #1
 801e5ca:	b29b      	uxth	r3, r3
 801e5cc:	2207      	movs	r2, #7
 801e5ce:	4013      	ands	r3, r2
 801e5d0:	b299      	uxth	r1, r3
 801e5d2:	1903      	adds	r3, r0, r4
 801e5d4:	19db      	adds	r3, r3, r7
 801e5d6:	1902      	adds	r2, r0, r4
 801e5d8:	19d2      	adds	r2, r2, r7
 801e5da:	8812      	ldrh	r2, [r2, #0]
 801e5dc:	430a      	orrs	r2, r1
 801e5de:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801e5e0:	69fb      	ldr	r3, [r7, #28]
 801e5e2:	681b      	ldr	r3, [r3, #0]
 801e5e4:	1902      	adds	r2, r0, r4
 801e5e6:	19d2      	adds	r2, r2, r7
 801e5e8:	8812      	ldrh	r2, [r2, #0]
 801e5ea:	60da      	str	r2, [r3, #12]
 801e5ec:	e05d      	b.n	801e6aa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801e5ee:	231a      	movs	r3, #26
 801e5f0:	2218      	movs	r2, #24
 801e5f2:	189b      	adds	r3, r3, r2
 801e5f4:	19db      	adds	r3, r3, r7
 801e5f6:	2201      	movs	r2, #1
 801e5f8:	701a      	strb	r2, [r3, #0]
 801e5fa:	e056      	b.n	801e6aa <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801e5fc:	231b      	movs	r3, #27
 801e5fe:	2218      	movs	r2, #24
 801e600:	189b      	adds	r3, r3, r2
 801e602:	19db      	adds	r3, r3, r7
 801e604:	781b      	ldrb	r3, [r3, #0]
 801e606:	2b08      	cmp	r3, #8
 801e608:	d822      	bhi.n	801e650 <UART_SetConfig+0x4b0>
 801e60a:	009a      	lsls	r2, r3, #2
 801e60c:	4b32      	ldr	r3, [pc, #200]	@ (801e6d8 <UART_SetConfig+0x538>)
 801e60e:	18d3      	adds	r3, r2, r3
 801e610:	681b      	ldr	r3, [r3, #0]
 801e612:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e614:	f7fd fc28 	bl	801be68 <HAL_RCC_GetPCLK1Freq>
 801e618:	0003      	movs	r3, r0
 801e61a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e61c:	e021      	b.n	801e662 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e61e:	f7fd fc39 	bl	801be94 <HAL_RCC_GetPCLK2Freq>
 801e622:	0003      	movs	r3, r0
 801e624:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e626:	e01c      	b.n	801e662 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e628:	4b28      	ldr	r3, [pc, #160]	@ (801e6cc <UART_SetConfig+0x52c>)
 801e62a:	681b      	ldr	r3, [r3, #0]
 801e62c:	2210      	movs	r2, #16
 801e62e:	4013      	ands	r3, r2
 801e630:	d002      	beq.n	801e638 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e632:	4b27      	ldr	r3, [pc, #156]	@ (801e6d0 <UART_SetConfig+0x530>)
 801e634:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e636:	e014      	b.n	801e662 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801e638:	4b26      	ldr	r3, [pc, #152]	@ (801e6d4 <UART_SetConfig+0x534>)
 801e63a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e63c:	e011      	b.n	801e662 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e63e:	f7fd fb63 	bl	801bd08 <HAL_RCC_GetSysClockFreq>
 801e642:	0003      	movs	r3, r0
 801e644:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e646:	e00c      	b.n	801e662 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e648:	2380      	movs	r3, #128	@ 0x80
 801e64a:	021b      	lsls	r3, r3, #8
 801e64c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e64e:	e008      	b.n	801e662 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801e650:	2300      	movs	r3, #0
 801e652:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e654:	231a      	movs	r3, #26
 801e656:	2218      	movs	r2, #24
 801e658:	189b      	adds	r3, r3, r2
 801e65a:	19db      	adds	r3, r3, r7
 801e65c:	2201      	movs	r2, #1
 801e65e:	701a      	strb	r2, [r3, #0]
        break;
 801e660:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801e662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e664:	2b00      	cmp	r3, #0
 801e666:	d020      	beq.n	801e6aa <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801e668:	69fb      	ldr	r3, [r7, #28]
 801e66a:	685b      	ldr	r3, [r3, #4]
 801e66c:	085a      	lsrs	r2, r3, #1
 801e66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e670:	18d2      	adds	r2, r2, r3
 801e672:	69fb      	ldr	r3, [r7, #28]
 801e674:	685b      	ldr	r3, [r3, #4]
 801e676:	0019      	movs	r1, r3
 801e678:	0010      	movs	r0, r2
 801e67a:	f7e1 fd93 	bl	80001a4 <__udivsi3>
 801e67e:	0003      	movs	r3, r0
 801e680:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e684:	2b0f      	cmp	r3, #15
 801e686:	d90a      	bls.n	801e69e <UART_SetConfig+0x4fe>
 801e688:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e68a:	2380      	movs	r3, #128	@ 0x80
 801e68c:	025b      	lsls	r3, r3, #9
 801e68e:	429a      	cmp	r2, r3
 801e690:	d205      	bcs.n	801e69e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801e692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e694:	b29a      	uxth	r2, r3
 801e696:	69fb      	ldr	r3, [r7, #28]
 801e698:	681b      	ldr	r3, [r3, #0]
 801e69a:	60da      	str	r2, [r3, #12]
 801e69c:	e005      	b.n	801e6aa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801e69e:	231a      	movs	r3, #26
 801e6a0:	2218      	movs	r2, #24
 801e6a2:	189b      	adds	r3, r3, r2
 801e6a4:	19db      	adds	r3, r3, r7
 801e6a6:	2201      	movs	r2, #1
 801e6a8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801e6aa:	69fb      	ldr	r3, [r7, #28]
 801e6ac:	2200      	movs	r2, #0
 801e6ae:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801e6b0:	69fb      	ldr	r3, [r7, #28]
 801e6b2:	2200      	movs	r2, #0
 801e6b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801e6b6:	231a      	movs	r3, #26
 801e6b8:	2218      	movs	r2, #24
 801e6ba:	189b      	adds	r3, r3, r2
 801e6bc:	19db      	adds	r3, r3, r7
 801e6be:	781b      	ldrb	r3, [r3, #0]
}
 801e6c0:	0018      	movs	r0, r3
 801e6c2:	46bd      	mov	sp, r7
 801e6c4:	b00e      	add	sp, #56	@ 0x38
 801e6c6:	bdb0      	pop	{r4, r5, r7, pc}
 801e6c8:	0802e8e0 	.word	0x0802e8e0
 801e6cc:	40021000 	.word	0x40021000
 801e6d0:	003d0900 	.word	0x003d0900
 801e6d4:	00f42400 	.word	0x00f42400
 801e6d8:	0802e904 	.word	0x0802e904

0801e6dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801e6dc:	b580      	push	{r7, lr}
 801e6de:	b082      	sub	sp, #8
 801e6e0:	af00      	add	r7, sp, #0
 801e6e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e6e8:	2201      	movs	r2, #1
 801e6ea:	4013      	ands	r3, r2
 801e6ec:	d00b      	beq.n	801e706 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801e6ee:	687b      	ldr	r3, [r7, #4]
 801e6f0:	681b      	ldr	r3, [r3, #0]
 801e6f2:	685b      	ldr	r3, [r3, #4]
 801e6f4:	4a4a      	ldr	r2, [pc, #296]	@ (801e820 <UART_AdvFeatureConfig+0x144>)
 801e6f6:	4013      	ands	r3, r2
 801e6f8:	0019      	movs	r1, r3
 801e6fa:	687b      	ldr	r3, [r7, #4]
 801e6fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801e6fe:	687b      	ldr	r3, [r7, #4]
 801e700:	681b      	ldr	r3, [r3, #0]
 801e702:	430a      	orrs	r2, r1
 801e704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801e706:	687b      	ldr	r3, [r7, #4]
 801e708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e70a:	2202      	movs	r2, #2
 801e70c:	4013      	ands	r3, r2
 801e70e:	d00b      	beq.n	801e728 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801e710:	687b      	ldr	r3, [r7, #4]
 801e712:	681b      	ldr	r3, [r3, #0]
 801e714:	685b      	ldr	r3, [r3, #4]
 801e716:	4a43      	ldr	r2, [pc, #268]	@ (801e824 <UART_AdvFeatureConfig+0x148>)
 801e718:	4013      	ands	r3, r2
 801e71a:	0019      	movs	r1, r3
 801e71c:	687b      	ldr	r3, [r7, #4]
 801e71e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e720:	687b      	ldr	r3, [r7, #4]
 801e722:	681b      	ldr	r3, [r3, #0]
 801e724:	430a      	orrs	r2, r1
 801e726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801e728:	687b      	ldr	r3, [r7, #4]
 801e72a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e72c:	2204      	movs	r2, #4
 801e72e:	4013      	ands	r3, r2
 801e730:	d00b      	beq.n	801e74a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	681b      	ldr	r3, [r3, #0]
 801e736:	685b      	ldr	r3, [r3, #4]
 801e738:	4a3b      	ldr	r2, [pc, #236]	@ (801e828 <UART_AdvFeatureConfig+0x14c>)
 801e73a:	4013      	ands	r3, r2
 801e73c:	0019      	movs	r1, r3
 801e73e:	687b      	ldr	r3, [r7, #4]
 801e740:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801e742:	687b      	ldr	r3, [r7, #4]
 801e744:	681b      	ldr	r3, [r3, #0]
 801e746:	430a      	orrs	r2, r1
 801e748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801e74a:	687b      	ldr	r3, [r7, #4]
 801e74c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e74e:	2208      	movs	r2, #8
 801e750:	4013      	ands	r3, r2
 801e752:	d00b      	beq.n	801e76c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801e754:	687b      	ldr	r3, [r7, #4]
 801e756:	681b      	ldr	r3, [r3, #0]
 801e758:	685b      	ldr	r3, [r3, #4]
 801e75a:	4a34      	ldr	r2, [pc, #208]	@ (801e82c <UART_AdvFeatureConfig+0x150>)
 801e75c:	4013      	ands	r3, r2
 801e75e:	0019      	movs	r1, r3
 801e760:	687b      	ldr	r3, [r7, #4]
 801e762:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e764:	687b      	ldr	r3, [r7, #4]
 801e766:	681b      	ldr	r3, [r3, #0]
 801e768:	430a      	orrs	r2, r1
 801e76a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801e76c:	687b      	ldr	r3, [r7, #4]
 801e76e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e770:	2210      	movs	r2, #16
 801e772:	4013      	ands	r3, r2
 801e774:	d00b      	beq.n	801e78e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801e776:	687b      	ldr	r3, [r7, #4]
 801e778:	681b      	ldr	r3, [r3, #0]
 801e77a:	689b      	ldr	r3, [r3, #8]
 801e77c:	4a2c      	ldr	r2, [pc, #176]	@ (801e830 <UART_AdvFeatureConfig+0x154>)
 801e77e:	4013      	ands	r3, r2
 801e780:	0019      	movs	r1, r3
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e786:	687b      	ldr	r3, [r7, #4]
 801e788:	681b      	ldr	r3, [r3, #0]
 801e78a:	430a      	orrs	r2, r1
 801e78c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801e78e:	687b      	ldr	r3, [r7, #4]
 801e790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e792:	2220      	movs	r2, #32
 801e794:	4013      	ands	r3, r2
 801e796:	d00b      	beq.n	801e7b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801e798:	687b      	ldr	r3, [r7, #4]
 801e79a:	681b      	ldr	r3, [r3, #0]
 801e79c:	689b      	ldr	r3, [r3, #8]
 801e79e:	4a25      	ldr	r2, [pc, #148]	@ (801e834 <UART_AdvFeatureConfig+0x158>)
 801e7a0:	4013      	ands	r3, r2
 801e7a2:	0019      	movs	r1, r3
 801e7a4:	687b      	ldr	r3, [r7, #4]
 801e7a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801e7a8:	687b      	ldr	r3, [r7, #4]
 801e7aa:	681b      	ldr	r3, [r3, #0]
 801e7ac:	430a      	orrs	r2, r1
 801e7ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801e7b0:	687b      	ldr	r3, [r7, #4]
 801e7b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e7b4:	2240      	movs	r2, #64	@ 0x40
 801e7b6:	4013      	ands	r3, r2
 801e7b8:	d01d      	beq.n	801e7f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801e7ba:	687b      	ldr	r3, [r7, #4]
 801e7bc:	681b      	ldr	r3, [r3, #0]
 801e7be:	685b      	ldr	r3, [r3, #4]
 801e7c0:	4a1d      	ldr	r2, [pc, #116]	@ (801e838 <UART_AdvFeatureConfig+0x15c>)
 801e7c2:	4013      	ands	r3, r2
 801e7c4:	0019      	movs	r1, r3
 801e7c6:	687b      	ldr	r3, [r7, #4]
 801e7c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e7ca:	687b      	ldr	r3, [r7, #4]
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	430a      	orrs	r2, r1
 801e7d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801e7d2:	687b      	ldr	r3, [r7, #4]
 801e7d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e7d6:	2380      	movs	r3, #128	@ 0x80
 801e7d8:	035b      	lsls	r3, r3, #13
 801e7da:	429a      	cmp	r2, r3
 801e7dc:	d10b      	bne.n	801e7f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801e7de:	687b      	ldr	r3, [r7, #4]
 801e7e0:	681b      	ldr	r3, [r3, #0]
 801e7e2:	685b      	ldr	r3, [r3, #4]
 801e7e4:	4a15      	ldr	r2, [pc, #84]	@ (801e83c <UART_AdvFeatureConfig+0x160>)
 801e7e6:	4013      	ands	r3, r2
 801e7e8:	0019      	movs	r1, r3
 801e7ea:	687b      	ldr	r3, [r7, #4]
 801e7ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801e7ee:	687b      	ldr	r3, [r7, #4]
 801e7f0:	681b      	ldr	r3, [r3, #0]
 801e7f2:	430a      	orrs	r2, r1
 801e7f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801e7f6:	687b      	ldr	r3, [r7, #4]
 801e7f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e7fa:	2280      	movs	r2, #128	@ 0x80
 801e7fc:	4013      	ands	r3, r2
 801e7fe:	d00b      	beq.n	801e818 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801e800:	687b      	ldr	r3, [r7, #4]
 801e802:	681b      	ldr	r3, [r3, #0]
 801e804:	685b      	ldr	r3, [r3, #4]
 801e806:	4a0e      	ldr	r2, [pc, #56]	@ (801e840 <UART_AdvFeatureConfig+0x164>)
 801e808:	4013      	ands	r3, r2
 801e80a:	0019      	movs	r1, r3
 801e80c:	687b      	ldr	r3, [r7, #4]
 801e80e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801e810:	687b      	ldr	r3, [r7, #4]
 801e812:	681b      	ldr	r3, [r3, #0]
 801e814:	430a      	orrs	r2, r1
 801e816:	605a      	str	r2, [r3, #4]
  }
}
 801e818:	46c0      	nop			@ (mov r8, r8)
 801e81a:	46bd      	mov	sp, r7
 801e81c:	b002      	add	sp, #8
 801e81e:	bd80      	pop	{r7, pc}
 801e820:	fffdffff 	.word	0xfffdffff
 801e824:	fffeffff 	.word	0xfffeffff
 801e828:	fffbffff 	.word	0xfffbffff
 801e82c:	ffff7fff 	.word	0xffff7fff
 801e830:	ffffefff 	.word	0xffffefff
 801e834:	ffffdfff 	.word	0xffffdfff
 801e838:	ffefffff 	.word	0xffefffff
 801e83c:	ff9fffff 	.word	0xff9fffff
 801e840:	fff7ffff 	.word	0xfff7ffff

0801e844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801e844:	b580      	push	{r7, lr}
 801e846:	b092      	sub	sp, #72	@ 0x48
 801e848:	af02      	add	r7, sp, #8
 801e84a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e84c:	687b      	ldr	r3, [r7, #4]
 801e84e:	2284      	movs	r2, #132	@ 0x84
 801e850:	2100      	movs	r1, #0
 801e852:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801e854:	f7f6 f8b0 	bl	80149b8 <HAL_GetTick>
 801e858:	0003      	movs	r3, r0
 801e85a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801e85c:	687b      	ldr	r3, [r7, #4]
 801e85e:	681b      	ldr	r3, [r3, #0]
 801e860:	681b      	ldr	r3, [r3, #0]
 801e862:	2208      	movs	r2, #8
 801e864:	4013      	ands	r3, r2
 801e866:	2b08      	cmp	r3, #8
 801e868:	d12c      	bne.n	801e8c4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e86a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e86c:	2280      	movs	r2, #128	@ 0x80
 801e86e:	0391      	lsls	r1, r2, #14
 801e870:	6878      	ldr	r0, [r7, #4]
 801e872:	4a46      	ldr	r2, [pc, #280]	@ (801e98c <UART_CheckIdleState+0x148>)
 801e874:	9200      	str	r2, [sp, #0]
 801e876:	2200      	movs	r2, #0
 801e878:	f000 f88c 	bl	801e994 <UART_WaitOnFlagUntilTimeout>
 801e87c:	1e03      	subs	r3, r0, #0
 801e87e:	d021      	beq.n	801e8c4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e880:	f3ef 8310 	mrs	r3, PRIMASK
 801e884:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801e886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801e888:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e88a:	2301      	movs	r3, #1
 801e88c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e890:	f383 8810 	msr	PRIMASK, r3
}
 801e894:	46c0      	nop			@ (mov r8, r8)
 801e896:	687b      	ldr	r3, [r7, #4]
 801e898:	681b      	ldr	r3, [r3, #0]
 801e89a:	681a      	ldr	r2, [r3, #0]
 801e89c:	687b      	ldr	r3, [r7, #4]
 801e89e:	681b      	ldr	r3, [r3, #0]
 801e8a0:	2180      	movs	r1, #128	@ 0x80
 801e8a2:	438a      	bics	r2, r1
 801e8a4:	601a      	str	r2, [r3, #0]
 801e8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e8a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e8ac:	f383 8810 	msr	PRIMASK, r3
}
 801e8b0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801e8b2:	687b      	ldr	r3, [r7, #4]
 801e8b4:	2220      	movs	r2, #32
 801e8b6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801e8b8:	687b      	ldr	r3, [r7, #4]
 801e8ba:	2278      	movs	r2, #120	@ 0x78
 801e8bc:	2100      	movs	r1, #0
 801e8be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e8c0:	2303      	movs	r3, #3
 801e8c2:	e05f      	b.n	801e984 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	681b      	ldr	r3, [r3, #0]
 801e8c8:	681b      	ldr	r3, [r3, #0]
 801e8ca:	2204      	movs	r2, #4
 801e8cc:	4013      	ands	r3, r2
 801e8ce:	2b04      	cmp	r3, #4
 801e8d0:	d146      	bne.n	801e960 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e8d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e8d4:	2280      	movs	r2, #128	@ 0x80
 801e8d6:	03d1      	lsls	r1, r2, #15
 801e8d8:	6878      	ldr	r0, [r7, #4]
 801e8da:	4a2c      	ldr	r2, [pc, #176]	@ (801e98c <UART_CheckIdleState+0x148>)
 801e8dc:	9200      	str	r2, [sp, #0]
 801e8de:	2200      	movs	r2, #0
 801e8e0:	f000 f858 	bl	801e994 <UART_WaitOnFlagUntilTimeout>
 801e8e4:	1e03      	subs	r3, r0, #0
 801e8e6:	d03b      	beq.n	801e960 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e8e8:	f3ef 8310 	mrs	r3, PRIMASK
 801e8ec:	60fb      	str	r3, [r7, #12]
  return(result);
 801e8ee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e8f0:	637b      	str	r3, [r7, #52]	@ 0x34
 801e8f2:	2301      	movs	r3, #1
 801e8f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8f6:	693b      	ldr	r3, [r7, #16]
 801e8f8:	f383 8810 	msr	PRIMASK, r3
}
 801e8fc:	46c0      	nop			@ (mov r8, r8)
 801e8fe:	687b      	ldr	r3, [r7, #4]
 801e900:	681b      	ldr	r3, [r3, #0]
 801e902:	681a      	ldr	r2, [r3, #0]
 801e904:	687b      	ldr	r3, [r7, #4]
 801e906:	681b      	ldr	r3, [r3, #0]
 801e908:	4921      	ldr	r1, [pc, #132]	@ (801e990 <UART_CheckIdleState+0x14c>)
 801e90a:	400a      	ands	r2, r1
 801e90c:	601a      	str	r2, [r3, #0]
 801e90e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e910:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e912:	697b      	ldr	r3, [r7, #20]
 801e914:	f383 8810 	msr	PRIMASK, r3
}
 801e918:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e91a:	f3ef 8310 	mrs	r3, PRIMASK
 801e91e:	61bb      	str	r3, [r7, #24]
  return(result);
 801e920:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e922:	633b      	str	r3, [r7, #48]	@ 0x30
 801e924:	2301      	movs	r3, #1
 801e926:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e928:	69fb      	ldr	r3, [r7, #28]
 801e92a:	f383 8810 	msr	PRIMASK, r3
}
 801e92e:	46c0      	nop			@ (mov r8, r8)
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	681b      	ldr	r3, [r3, #0]
 801e934:	689a      	ldr	r2, [r3, #8]
 801e936:	687b      	ldr	r3, [r7, #4]
 801e938:	681b      	ldr	r3, [r3, #0]
 801e93a:	2101      	movs	r1, #1
 801e93c:	438a      	bics	r2, r1
 801e93e:	609a      	str	r2, [r3, #8]
 801e940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e942:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e944:	6a3b      	ldr	r3, [r7, #32]
 801e946:	f383 8810 	msr	PRIMASK, r3
}
 801e94a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801e94c:	687b      	ldr	r3, [r7, #4]
 801e94e:	2280      	movs	r2, #128	@ 0x80
 801e950:	2120      	movs	r1, #32
 801e952:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801e954:	687b      	ldr	r3, [r7, #4]
 801e956:	2278      	movs	r2, #120	@ 0x78
 801e958:	2100      	movs	r1, #0
 801e95a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e95c:	2303      	movs	r3, #3
 801e95e:	e011      	b.n	801e984 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801e960:	687b      	ldr	r3, [r7, #4]
 801e962:	2220      	movs	r2, #32
 801e964:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801e966:	687b      	ldr	r3, [r7, #4]
 801e968:	2280      	movs	r2, #128	@ 0x80
 801e96a:	2120      	movs	r1, #32
 801e96c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e96e:	687b      	ldr	r3, [r7, #4]
 801e970:	2200      	movs	r2, #0
 801e972:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e974:	687b      	ldr	r3, [r7, #4]
 801e976:	2200      	movs	r2, #0
 801e978:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801e97a:	687b      	ldr	r3, [r7, #4]
 801e97c:	2278      	movs	r2, #120	@ 0x78
 801e97e:	2100      	movs	r1, #0
 801e980:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801e982:	2300      	movs	r3, #0
}
 801e984:	0018      	movs	r0, r3
 801e986:	46bd      	mov	sp, r7
 801e988:	b010      	add	sp, #64	@ 0x40
 801e98a:	bd80      	pop	{r7, pc}
 801e98c:	01ffffff 	.word	0x01ffffff
 801e990:	fffffedf 	.word	0xfffffedf

0801e994 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801e994:	b580      	push	{r7, lr}
 801e996:	b084      	sub	sp, #16
 801e998:	af00      	add	r7, sp, #0
 801e99a:	60f8      	str	r0, [r7, #12]
 801e99c:	60b9      	str	r1, [r7, #8]
 801e99e:	603b      	str	r3, [r7, #0]
 801e9a0:	1dfb      	adds	r3, r7, #7
 801e9a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e9a4:	e04b      	b.n	801ea3e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801e9a6:	69bb      	ldr	r3, [r7, #24]
 801e9a8:	3301      	adds	r3, #1
 801e9aa:	d048      	beq.n	801ea3e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801e9ac:	f7f6 f804 	bl	80149b8 <HAL_GetTick>
 801e9b0:	0002      	movs	r2, r0
 801e9b2:	683b      	ldr	r3, [r7, #0]
 801e9b4:	1ad3      	subs	r3, r2, r3
 801e9b6:	69ba      	ldr	r2, [r7, #24]
 801e9b8:	429a      	cmp	r2, r3
 801e9ba:	d302      	bcc.n	801e9c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 801e9bc:	69bb      	ldr	r3, [r7, #24]
 801e9be:	2b00      	cmp	r3, #0
 801e9c0:	d101      	bne.n	801e9c6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801e9c2:	2303      	movs	r3, #3
 801e9c4:	e04b      	b.n	801ea5e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801e9c6:	68fb      	ldr	r3, [r7, #12]
 801e9c8:	681b      	ldr	r3, [r3, #0]
 801e9ca:	681b      	ldr	r3, [r3, #0]
 801e9cc:	2204      	movs	r2, #4
 801e9ce:	4013      	ands	r3, r2
 801e9d0:	d035      	beq.n	801ea3e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801e9d2:	68fb      	ldr	r3, [r7, #12]
 801e9d4:	681b      	ldr	r3, [r3, #0]
 801e9d6:	69db      	ldr	r3, [r3, #28]
 801e9d8:	2208      	movs	r2, #8
 801e9da:	4013      	ands	r3, r2
 801e9dc:	2b08      	cmp	r3, #8
 801e9de:	d111      	bne.n	801ea04 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801e9e0:	68fb      	ldr	r3, [r7, #12]
 801e9e2:	681b      	ldr	r3, [r3, #0]
 801e9e4:	2208      	movs	r2, #8
 801e9e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801e9e8:	68fb      	ldr	r3, [r7, #12]
 801e9ea:	0018      	movs	r0, r3
 801e9ec:	f000 f9ca 	bl	801ed84 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801e9f0:	68fb      	ldr	r3, [r7, #12]
 801e9f2:	2284      	movs	r2, #132	@ 0x84
 801e9f4:	2108      	movs	r1, #8
 801e9f6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801e9f8:	68fb      	ldr	r3, [r7, #12]
 801e9fa:	2278      	movs	r2, #120	@ 0x78
 801e9fc:	2100      	movs	r1, #0
 801e9fe:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801ea00:	2301      	movs	r3, #1
 801ea02:	e02c      	b.n	801ea5e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801ea04:	68fb      	ldr	r3, [r7, #12]
 801ea06:	681b      	ldr	r3, [r3, #0]
 801ea08:	69da      	ldr	r2, [r3, #28]
 801ea0a:	2380      	movs	r3, #128	@ 0x80
 801ea0c:	011b      	lsls	r3, r3, #4
 801ea0e:	401a      	ands	r2, r3
 801ea10:	2380      	movs	r3, #128	@ 0x80
 801ea12:	011b      	lsls	r3, r3, #4
 801ea14:	429a      	cmp	r2, r3
 801ea16:	d112      	bne.n	801ea3e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801ea18:	68fb      	ldr	r3, [r7, #12]
 801ea1a:	681b      	ldr	r3, [r3, #0]
 801ea1c:	2280      	movs	r2, #128	@ 0x80
 801ea1e:	0112      	lsls	r2, r2, #4
 801ea20:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801ea22:	68fb      	ldr	r3, [r7, #12]
 801ea24:	0018      	movs	r0, r3
 801ea26:	f000 f9ad 	bl	801ed84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801ea2a:	68fb      	ldr	r3, [r7, #12]
 801ea2c:	2284      	movs	r2, #132	@ 0x84
 801ea2e:	2120      	movs	r1, #32
 801ea30:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801ea32:	68fb      	ldr	r3, [r7, #12]
 801ea34:	2278      	movs	r2, #120	@ 0x78
 801ea36:	2100      	movs	r1, #0
 801ea38:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801ea3a:	2303      	movs	r3, #3
 801ea3c:	e00f      	b.n	801ea5e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ea3e:	68fb      	ldr	r3, [r7, #12]
 801ea40:	681b      	ldr	r3, [r3, #0]
 801ea42:	69db      	ldr	r3, [r3, #28]
 801ea44:	68ba      	ldr	r2, [r7, #8]
 801ea46:	4013      	ands	r3, r2
 801ea48:	68ba      	ldr	r2, [r7, #8]
 801ea4a:	1ad3      	subs	r3, r2, r3
 801ea4c:	425a      	negs	r2, r3
 801ea4e:	4153      	adcs	r3, r2
 801ea50:	b2db      	uxtb	r3, r3
 801ea52:	001a      	movs	r2, r3
 801ea54:	1dfb      	adds	r3, r7, #7
 801ea56:	781b      	ldrb	r3, [r3, #0]
 801ea58:	429a      	cmp	r2, r3
 801ea5a:	d0a4      	beq.n	801e9a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801ea5c:	2300      	movs	r3, #0
}
 801ea5e:	0018      	movs	r0, r3
 801ea60:	46bd      	mov	sp, r7
 801ea62:	b004      	add	sp, #16
 801ea64:	bd80      	pop	{r7, pc}
	...

0801ea68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801ea68:	b580      	push	{r7, lr}
 801ea6a:	b090      	sub	sp, #64	@ 0x40
 801ea6c:	af00      	add	r7, sp, #0
 801ea6e:	60f8      	str	r0, [r7, #12]
 801ea70:	60b9      	str	r1, [r7, #8]
 801ea72:	1dbb      	adds	r3, r7, #6
 801ea74:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801ea76:	68fb      	ldr	r3, [r7, #12]
 801ea78:	68ba      	ldr	r2, [r7, #8]
 801ea7a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801ea7c:	68fb      	ldr	r3, [r7, #12]
 801ea7e:	1dba      	adds	r2, r7, #6
 801ea80:	2158      	movs	r1, #88	@ 0x58
 801ea82:	8812      	ldrh	r2, [r2, #0]
 801ea84:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801ea86:	68fb      	ldr	r3, [r7, #12]
 801ea88:	1dba      	adds	r2, r7, #6
 801ea8a:	215a      	movs	r1, #90	@ 0x5a
 801ea8c:	8812      	ldrh	r2, [r2, #0]
 801ea8e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801ea90:	68fb      	ldr	r3, [r7, #12]
 801ea92:	2200      	movs	r2, #0
 801ea94:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801ea96:	68fb      	ldr	r3, [r7, #12]
 801ea98:	689a      	ldr	r2, [r3, #8]
 801ea9a:	2380      	movs	r3, #128	@ 0x80
 801ea9c:	015b      	lsls	r3, r3, #5
 801ea9e:	429a      	cmp	r2, r3
 801eaa0:	d10d      	bne.n	801eabe <UART_Start_Receive_IT+0x56>
 801eaa2:	68fb      	ldr	r3, [r7, #12]
 801eaa4:	691b      	ldr	r3, [r3, #16]
 801eaa6:	2b00      	cmp	r3, #0
 801eaa8:	d104      	bne.n	801eab4 <UART_Start_Receive_IT+0x4c>
 801eaaa:	68fb      	ldr	r3, [r7, #12]
 801eaac:	225c      	movs	r2, #92	@ 0x5c
 801eaae:	4950      	ldr	r1, [pc, #320]	@ (801ebf0 <UART_Start_Receive_IT+0x188>)
 801eab0:	5299      	strh	r1, [r3, r2]
 801eab2:	e02e      	b.n	801eb12 <UART_Start_Receive_IT+0xaa>
 801eab4:	68fb      	ldr	r3, [r7, #12]
 801eab6:	225c      	movs	r2, #92	@ 0x5c
 801eab8:	21ff      	movs	r1, #255	@ 0xff
 801eaba:	5299      	strh	r1, [r3, r2]
 801eabc:	e029      	b.n	801eb12 <UART_Start_Receive_IT+0xaa>
 801eabe:	68fb      	ldr	r3, [r7, #12]
 801eac0:	689b      	ldr	r3, [r3, #8]
 801eac2:	2b00      	cmp	r3, #0
 801eac4:	d10d      	bne.n	801eae2 <UART_Start_Receive_IT+0x7a>
 801eac6:	68fb      	ldr	r3, [r7, #12]
 801eac8:	691b      	ldr	r3, [r3, #16]
 801eaca:	2b00      	cmp	r3, #0
 801eacc:	d104      	bne.n	801ead8 <UART_Start_Receive_IT+0x70>
 801eace:	68fb      	ldr	r3, [r7, #12]
 801ead0:	225c      	movs	r2, #92	@ 0x5c
 801ead2:	21ff      	movs	r1, #255	@ 0xff
 801ead4:	5299      	strh	r1, [r3, r2]
 801ead6:	e01c      	b.n	801eb12 <UART_Start_Receive_IT+0xaa>
 801ead8:	68fb      	ldr	r3, [r7, #12]
 801eada:	225c      	movs	r2, #92	@ 0x5c
 801eadc:	217f      	movs	r1, #127	@ 0x7f
 801eade:	5299      	strh	r1, [r3, r2]
 801eae0:	e017      	b.n	801eb12 <UART_Start_Receive_IT+0xaa>
 801eae2:	68fb      	ldr	r3, [r7, #12]
 801eae4:	689a      	ldr	r2, [r3, #8]
 801eae6:	2380      	movs	r3, #128	@ 0x80
 801eae8:	055b      	lsls	r3, r3, #21
 801eaea:	429a      	cmp	r2, r3
 801eaec:	d10d      	bne.n	801eb0a <UART_Start_Receive_IT+0xa2>
 801eaee:	68fb      	ldr	r3, [r7, #12]
 801eaf0:	691b      	ldr	r3, [r3, #16]
 801eaf2:	2b00      	cmp	r3, #0
 801eaf4:	d104      	bne.n	801eb00 <UART_Start_Receive_IT+0x98>
 801eaf6:	68fb      	ldr	r3, [r7, #12]
 801eaf8:	225c      	movs	r2, #92	@ 0x5c
 801eafa:	217f      	movs	r1, #127	@ 0x7f
 801eafc:	5299      	strh	r1, [r3, r2]
 801eafe:	e008      	b.n	801eb12 <UART_Start_Receive_IT+0xaa>
 801eb00:	68fb      	ldr	r3, [r7, #12]
 801eb02:	225c      	movs	r2, #92	@ 0x5c
 801eb04:	213f      	movs	r1, #63	@ 0x3f
 801eb06:	5299      	strh	r1, [r3, r2]
 801eb08:	e003      	b.n	801eb12 <UART_Start_Receive_IT+0xaa>
 801eb0a:	68fb      	ldr	r3, [r7, #12]
 801eb0c:	225c      	movs	r2, #92	@ 0x5c
 801eb0e:	2100      	movs	r1, #0
 801eb10:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801eb12:	68fb      	ldr	r3, [r7, #12]
 801eb14:	2284      	movs	r2, #132	@ 0x84
 801eb16:	2100      	movs	r1, #0
 801eb18:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801eb1a:	68fb      	ldr	r3, [r7, #12]
 801eb1c:	2280      	movs	r2, #128	@ 0x80
 801eb1e:	2122      	movs	r1, #34	@ 0x22
 801eb20:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb22:	f3ef 8310 	mrs	r3, PRIMASK
 801eb26:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801eb28:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801eb2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801eb2c:	2301      	movs	r3, #1
 801eb2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb32:	f383 8810 	msr	PRIMASK, r3
}
 801eb36:	46c0      	nop			@ (mov r8, r8)
 801eb38:	68fb      	ldr	r3, [r7, #12]
 801eb3a:	681b      	ldr	r3, [r3, #0]
 801eb3c:	689a      	ldr	r2, [r3, #8]
 801eb3e:	68fb      	ldr	r3, [r7, #12]
 801eb40:	681b      	ldr	r3, [r3, #0]
 801eb42:	2101      	movs	r1, #1
 801eb44:	430a      	orrs	r2, r1
 801eb46:	609a      	str	r2, [r3, #8]
 801eb48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801eb4a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eb4e:	f383 8810 	msr	PRIMASK, r3
}
 801eb52:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801eb54:	68fb      	ldr	r3, [r7, #12]
 801eb56:	689a      	ldr	r2, [r3, #8]
 801eb58:	2380      	movs	r3, #128	@ 0x80
 801eb5a:	015b      	lsls	r3, r3, #5
 801eb5c:	429a      	cmp	r2, r3
 801eb5e:	d107      	bne.n	801eb70 <UART_Start_Receive_IT+0x108>
 801eb60:	68fb      	ldr	r3, [r7, #12]
 801eb62:	691b      	ldr	r3, [r3, #16]
 801eb64:	2b00      	cmp	r3, #0
 801eb66:	d103      	bne.n	801eb70 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801eb68:	68fb      	ldr	r3, [r7, #12]
 801eb6a:	4a22      	ldr	r2, [pc, #136]	@ (801ebf4 <UART_Start_Receive_IT+0x18c>)
 801eb6c:	669a      	str	r2, [r3, #104]	@ 0x68
 801eb6e:	e002      	b.n	801eb76 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801eb70:	68fb      	ldr	r3, [r7, #12]
 801eb72:	4a21      	ldr	r2, [pc, #132]	@ (801ebf8 <UART_Start_Receive_IT+0x190>)
 801eb74:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801eb76:	68fb      	ldr	r3, [r7, #12]
 801eb78:	691b      	ldr	r3, [r3, #16]
 801eb7a:	2b00      	cmp	r3, #0
 801eb7c:	d019      	beq.n	801ebb2 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb7e:	f3ef 8310 	mrs	r3, PRIMASK
 801eb82:	61fb      	str	r3, [r7, #28]
  return(result);
 801eb84:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801eb86:	637b      	str	r3, [r7, #52]	@ 0x34
 801eb88:	2301      	movs	r3, #1
 801eb8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb8c:	6a3b      	ldr	r3, [r7, #32]
 801eb8e:	f383 8810 	msr	PRIMASK, r3
}
 801eb92:	46c0      	nop			@ (mov r8, r8)
 801eb94:	68fb      	ldr	r3, [r7, #12]
 801eb96:	681b      	ldr	r3, [r3, #0]
 801eb98:	681a      	ldr	r2, [r3, #0]
 801eb9a:	68fb      	ldr	r3, [r7, #12]
 801eb9c:	681b      	ldr	r3, [r3, #0]
 801eb9e:	2190      	movs	r1, #144	@ 0x90
 801eba0:	0049      	lsls	r1, r1, #1
 801eba2:	430a      	orrs	r2, r1
 801eba4:	601a      	str	r2, [r3, #0]
 801eba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eba8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ebac:	f383 8810 	msr	PRIMASK, r3
}
 801ebb0:	e018      	b.n	801ebe4 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ebb2:	f3ef 8310 	mrs	r3, PRIMASK
 801ebb6:	613b      	str	r3, [r7, #16]
  return(result);
 801ebb8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801ebba:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ebbc:	2301      	movs	r3, #1
 801ebbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebc0:	697b      	ldr	r3, [r7, #20]
 801ebc2:	f383 8810 	msr	PRIMASK, r3
}
 801ebc6:	46c0      	nop			@ (mov r8, r8)
 801ebc8:	68fb      	ldr	r3, [r7, #12]
 801ebca:	681b      	ldr	r3, [r3, #0]
 801ebcc:	681a      	ldr	r2, [r3, #0]
 801ebce:	68fb      	ldr	r3, [r7, #12]
 801ebd0:	681b      	ldr	r3, [r3, #0]
 801ebd2:	2120      	movs	r1, #32
 801ebd4:	430a      	orrs	r2, r1
 801ebd6:	601a      	str	r2, [r3, #0]
 801ebd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ebda:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebdc:	69bb      	ldr	r3, [r7, #24]
 801ebde:	f383 8810 	msr	PRIMASK, r3
}
 801ebe2:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801ebe4:	2300      	movs	r3, #0
}
 801ebe6:	0018      	movs	r0, r3
 801ebe8:	46bd      	mov	sp, r7
 801ebea:	b010      	add	sp, #64	@ 0x40
 801ebec:	bd80      	pop	{r7, pc}
 801ebee:	46c0      	nop			@ (mov r8, r8)
 801ebf0:	000001ff 	.word	0x000001ff
 801ebf4:	0801f369 	.word	0x0801f369
 801ebf8:	0801f19d 	.word	0x0801f19d

0801ebfc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801ebfc:	b580      	push	{r7, lr}
 801ebfe:	b090      	sub	sp, #64	@ 0x40
 801ec00:	af00      	add	r7, sp, #0
 801ec02:	60f8      	str	r0, [r7, #12]
 801ec04:	60b9      	str	r1, [r7, #8]
 801ec06:	1dbb      	adds	r3, r7, #6
 801ec08:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801ec0a:	68fb      	ldr	r3, [r7, #12]
 801ec0c:	68ba      	ldr	r2, [r7, #8]
 801ec0e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801ec10:	68fb      	ldr	r3, [r7, #12]
 801ec12:	1dba      	adds	r2, r7, #6
 801ec14:	2158      	movs	r1, #88	@ 0x58
 801ec16:	8812      	ldrh	r2, [r2, #0]
 801ec18:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ec1a:	68fb      	ldr	r3, [r7, #12]
 801ec1c:	2284      	movs	r2, #132	@ 0x84
 801ec1e:	2100      	movs	r1, #0
 801ec20:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801ec22:	68fb      	ldr	r3, [r7, #12]
 801ec24:	2280      	movs	r2, #128	@ 0x80
 801ec26:	2122      	movs	r1, #34	@ 0x22
 801ec28:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801ec2a:	68fb      	ldr	r3, [r7, #12]
 801ec2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec2e:	2b00      	cmp	r3, #0
 801ec30:	d028      	beq.n	801ec84 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801ec32:	68fb      	ldr	r3, [r7, #12]
 801ec34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec36:	4a3e      	ldr	r2, [pc, #248]	@ (801ed30 <UART_Start_Receive_DMA+0x134>)
 801ec38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801ec3a:	68fb      	ldr	r3, [r7, #12]
 801ec3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec3e:	4a3d      	ldr	r2, [pc, #244]	@ (801ed34 <UART_Start_Receive_DMA+0x138>)
 801ec40:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801ec42:	68fb      	ldr	r3, [r7, #12]
 801ec44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec46:	4a3c      	ldr	r2, [pc, #240]	@ (801ed38 <UART_Start_Receive_DMA+0x13c>)
 801ec48:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801ec4a:	68fb      	ldr	r3, [r7, #12]
 801ec4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec4e:	2200      	movs	r2, #0
 801ec50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801ec52:	68fb      	ldr	r3, [r7, #12]
 801ec54:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801ec56:	68fb      	ldr	r3, [r7, #12]
 801ec58:	681b      	ldr	r3, [r3, #0]
 801ec5a:	3324      	adds	r3, #36	@ 0x24
 801ec5c:	0019      	movs	r1, r3
 801ec5e:	68fb      	ldr	r3, [r7, #12]
 801ec60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ec62:	001a      	movs	r2, r3
 801ec64:	1dbb      	adds	r3, r7, #6
 801ec66:	881b      	ldrh	r3, [r3, #0]
 801ec68:	f7f6 fbc4 	bl	80153f4 <HAL_DMA_Start_IT>
 801ec6c:	1e03      	subs	r3, r0, #0
 801ec6e:	d009      	beq.n	801ec84 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801ec70:	68fb      	ldr	r3, [r7, #12]
 801ec72:	2284      	movs	r2, #132	@ 0x84
 801ec74:	2110      	movs	r1, #16
 801ec76:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801ec78:	68fb      	ldr	r3, [r7, #12]
 801ec7a:	2280      	movs	r2, #128	@ 0x80
 801ec7c:	2120      	movs	r1, #32
 801ec7e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801ec80:	2301      	movs	r3, #1
 801ec82:	e050      	b.n	801ed26 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801ec84:	68fb      	ldr	r3, [r7, #12]
 801ec86:	691b      	ldr	r3, [r3, #16]
 801ec88:	2b00      	cmp	r3, #0
 801ec8a:	d019      	beq.n	801ecc0 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec8c:	f3ef 8310 	mrs	r3, PRIMASK
 801ec90:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801ec92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ec94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ec96:	2301      	movs	r3, #1
 801ec98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec9c:	f383 8810 	msr	PRIMASK, r3
}
 801eca0:	46c0      	nop			@ (mov r8, r8)
 801eca2:	68fb      	ldr	r3, [r7, #12]
 801eca4:	681b      	ldr	r3, [r3, #0]
 801eca6:	681a      	ldr	r2, [r3, #0]
 801eca8:	68fb      	ldr	r3, [r7, #12]
 801ecaa:	681b      	ldr	r3, [r3, #0]
 801ecac:	2180      	movs	r1, #128	@ 0x80
 801ecae:	0049      	lsls	r1, r1, #1
 801ecb0:	430a      	orrs	r2, r1
 801ecb2:	601a      	str	r2, [r3, #0]
 801ecb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ecb6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ecba:	f383 8810 	msr	PRIMASK, r3
}
 801ecbe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ecc0:	f3ef 8310 	mrs	r3, PRIMASK
 801ecc4:	613b      	str	r3, [r7, #16]
  return(result);
 801ecc6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ecc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ecca:	2301      	movs	r3, #1
 801eccc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecce:	697b      	ldr	r3, [r7, #20]
 801ecd0:	f383 8810 	msr	PRIMASK, r3
}
 801ecd4:	46c0      	nop			@ (mov r8, r8)
 801ecd6:	68fb      	ldr	r3, [r7, #12]
 801ecd8:	681b      	ldr	r3, [r3, #0]
 801ecda:	689a      	ldr	r2, [r3, #8]
 801ecdc:	68fb      	ldr	r3, [r7, #12]
 801ecde:	681b      	ldr	r3, [r3, #0]
 801ece0:	2101      	movs	r1, #1
 801ece2:	430a      	orrs	r2, r1
 801ece4:	609a      	str	r2, [r3, #8]
 801ece6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ece8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecea:	69bb      	ldr	r3, [r7, #24]
 801ecec:	f383 8810 	msr	PRIMASK, r3
}
 801ecf0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ecf2:	f3ef 8310 	mrs	r3, PRIMASK
 801ecf6:	61fb      	str	r3, [r7, #28]
  return(result);
 801ecf8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ecfa:	637b      	str	r3, [r7, #52]	@ 0x34
 801ecfc:	2301      	movs	r3, #1
 801ecfe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed00:	6a3b      	ldr	r3, [r7, #32]
 801ed02:	f383 8810 	msr	PRIMASK, r3
}
 801ed06:	46c0      	nop			@ (mov r8, r8)
 801ed08:	68fb      	ldr	r3, [r7, #12]
 801ed0a:	681b      	ldr	r3, [r3, #0]
 801ed0c:	689a      	ldr	r2, [r3, #8]
 801ed0e:	68fb      	ldr	r3, [r7, #12]
 801ed10:	681b      	ldr	r3, [r3, #0]
 801ed12:	2140      	movs	r1, #64	@ 0x40
 801ed14:	430a      	orrs	r2, r1
 801ed16:	609a      	str	r2, [r3, #8]
 801ed18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ed1a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed1e:	f383 8810 	msr	PRIMASK, r3
}
 801ed22:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801ed24:	2300      	movs	r3, #0
}
 801ed26:	0018      	movs	r0, r3
 801ed28:	46bd      	mov	sp, r7
 801ed2a:	b010      	add	sp, #64	@ 0x40
 801ed2c:	bd80      	pop	{r7, pc}
 801ed2e:	46c0      	nop			@ (mov r8, r8)
 801ed30:	0801ef0d 	.word	0x0801ef0d
 801ed34:	0801f041 	.word	0x0801f041
 801ed38:	0801f089 	.word	0x0801f089

0801ed3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801ed3c:	b580      	push	{r7, lr}
 801ed3e:	b086      	sub	sp, #24
 801ed40:	af00      	add	r7, sp, #0
 801ed42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed44:	f3ef 8310 	mrs	r3, PRIMASK
 801ed48:	60bb      	str	r3, [r7, #8]
  return(result);
 801ed4a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801ed4c:	617b      	str	r3, [r7, #20]
 801ed4e:	2301      	movs	r3, #1
 801ed50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed52:	68fb      	ldr	r3, [r7, #12]
 801ed54:	f383 8810 	msr	PRIMASK, r3
}
 801ed58:	46c0      	nop			@ (mov r8, r8)
 801ed5a:	687b      	ldr	r3, [r7, #4]
 801ed5c:	681b      	ldr	r3, [r3, #0]
 801ed5e:	681a      	ldr	r2, [r3, #0]
 801ed60:	687b      	ldr	r3, [r7, #4]
 801ed62:	681b      	ldr	r3, [r3, #0]
 801ed64:	21c0      	movs	r1, #192	@ 0xc0
 801ed66:	438a      	bics	r2, r1
 801ed68:	601a      	str	r2, [r3, #0]
 801ed6a:	697b      	ldr	r3, [r7, #20]
 801ed6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed6e:	693b      	ldr	r3, [r7, #16]
 801ed70:	f383 8810 	msr	PRIMASK, r3
}
 801ed74:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801ed76:	687b      	ldr	r3, [r7, #4]
 801ed78:	2220      	movs	r2, #32
 801ed7a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801ed7c:	46c0      	nop			@ (mov r8, r8)
 801ed7e:	46bd      	mov	sp, r7
 801ed80:	b006      	add	sp, #24
 801ed82:	bd80      	pop	{r7, pc}

0801ed84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801ed84:	b580      	push	{r7, lr}
 801ed86:	b08e      	sub	sp, #56	@ 0x38
 801ed88:	af00      	add	r7, sp, #0
 801ed8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed8c:	f3ef 8310 	mrs	r3, PRIMASK
 801ed90:	617b      	str	r3, [r7, #20]
  return(result);
 801ed92:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ed94:	637b      	str	r3, [r7, #52]	@ 0x34
 801ed96:	2301      	movs	r3, #1
 801ed98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed9a:	69bb      	ldr	r3, [r7, #24]
 801ed9c:	f383 8810 	msr	PRIMASK, r3
}
 801eda0:	46c0      	nop			@ (mov r8, r8)
 801eda2:	687b      	ldr	r3, [r7, #4]
 801eda4:	681b      	ldr	r3, [r3, #0]
 801eda6:	681a      	ldr	r2, [r3, #0]
 801eda8:	687b      	ldr	r3, [r7, #4]
 801edaa:	681b      	ldr	r3, [r3, #0]
 801edac:	4926      	ldr	r1, [pc, #152]	@ (801ee48 <UART_EndRxTransfer+0xc4>)
 801edae:	400a      	ands	r2, r1
 801edb0:	601a      	str	r2, [r3, #0]
 801edb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801edb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801edb6:	69fb      	ldr	r3, [r7, #28]
 801edb8:	f383 8810 	msr	PRIMASK, r3
}
 801edbc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801edbe:	f3ef 8310 	mrs	r3, PRIMASK
 801edc2:	623b      	str	r3, [r7, #32]
  return(result);
 801edc4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801edc6:	633b      	str	r3, [r7, #48]	@ 0x30
 801edc8:	2301      	movs	r3, #1
 801edca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801edcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801edce:	f383 8810 	msr	PRIMASK, r3
}
 801edd2:	46c0      	nop			@ (mov r8, r8)
 801edd4:	687b      	ldr	r3, [r7, #4]
 801edd6:	681b      	ldr	r3, [r3, #0]
 801edd8:	689a      	ldr	r2, [r3, #8]
 801edda:	687b      	ldr	r3, [r7, #4]
 801eddc:	681b      	ldr	r3, [r3, #0]
 801edde:	2101      	movs	r1, #1
 801ede0:	438a      	bics	r2, r1
 801ede2:	609a      	str	r2, [r3, #8]
 801ede4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ede6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ede8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801edea:	f383 8810 	msr	PRIMASK, r3
}
 801edee:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801edf4:	2b01      	cmp	r3, #1
 801edf6:	d118      	bne.n	801ee2a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801edf8:	f3ef 8310 	mrs	r3, PRIMASK
 801edfc:	60bb      	str	r3, [r7, #8]
  return(result);
 801edfe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ee00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ee02:	2301      	movs	r3, #1
 801ee04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee06:	68fb      	ldr	r3, [r7, #12]
 801ee08:	f383 8810 	msr	PRIMASK, r3
}
 801ee0c:	46c0      	nop			@ (mov r8, r8)
 801ee0e:	687b      	ldr	r3, [r7, #4]
 801ee10:	681b      	ldr	r3, [r3, #0]
 801ee12:	681a      	ldr	r2, [r3, #0]
 801ee14:	687b      	ldr	r3, [r7, #4]
 801ee16:	681b      	ldr	r3, [r3, #0]
 801ee18:	2110      	movs	r1, #16
 801ee1a:	438a      	bics	r2, r1
 801ee1c:	601a      	str	r2, [r3, #0]
 801ee1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee22:	693b      	ldr	r3, [r7, #16]
 801ee24:	f383 8810 	msr	PRIMASK, r3
}
 801ee28:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801ee2a:	687b      	ldr	r3, [r7, #4]
 801ee2c:	2280      	movs	r2, #128	@ 0x80
 801ee2e:	2120      	movs	r1, #32
 801ee30:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ee32:	687b      	ldr	r3, [r7, #4]
 801ee34:	2200      	movs	r2, #0
 801ee36:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801ee38:	687b      	ldr	r3, [r7, #4]
 801ee3a:	2200      	movs	r2, #0
 801ee3c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801ee3e:	46c0      	nop			@ (mov r8, r8)
 801ee40:	46bd      	mov	sp, r7
 801ee42:	b00e      	add	sp, #56	@ 0x38
 801ee44:	bd80      	pop	{r7, pc}
 801ee46:	46c0      	nop			@ (mov r8, r8)
 801ee48:	fffffedf 	.word	0xfffffedf

0801ee4c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801ee4c:	b580      	push	{r7, lr}
 801ee4e:	b08c      	sub	sp, #48	@ 0x30
 801ee50:	af00      	add	r7, sp, #0
 801ee52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ee54:	687b      	ldr	r3, [r7, #4]
 801ee56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ee58:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801ee5a:	687b      	ldr	r3, [r7, #4]
 801ee5c:	681b      	ldr	r3, [r3, #0]
 801ee5e:	681b      	ldr	r3, [r3, #0]
 801ee60:	2220      	movs	r2, #32
 801ee62:	4013      	ands	r3, r2
 801ee64:	d135      	bne.n	801eed2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801ee66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee68:	2252      	movs	r2, #82	@ 0x52
 801ee6a:	2100      	movs	r1, #0
 801ee6c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee6e:	f3ef 8310 	mrs	r3, PRIMASK
 801ee72:	60fb      	str	r3, [r7, #12]
  return(result);
 801ee74:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801ee76:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ee78:	2301      	movs	r3, #1
 801ee7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee7c:	693b      	ldr	r3, [r7, #16]
 801ee7e:	f383 8810 	msr	PRIMASK, r3
}
 801ee82:	46c0      	nop			@ (mov r8, r8)
 801ee84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee86:	681b      	ldr	r3, [r3, #0]
 801ee88:	689a      	ldr	r2, [r3, #8]
 801ee8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee8c:	681b      	ldr	r3, [r3, #0]
 801ee8e:	2180      	movs	r1, #128	@ 0x80
 801ee90:	438a      	bics	r2, r1
 801ee92:	609a      	str	r2, [r3, #8]
 801ee94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee98:	697b      	ldr	r3, [r7, #20]
 801ee9a:	f383 8810 	msr	PRIMASK, r3
}
 801ee9e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eea0:	f3ef 8310 	mrs	r3, PRIMASK
 801eea4:	61bb      	str	r3, [r7, #24]
  return(result);
 801eea6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801eea8:	627b      	str	r3, [r7, #36]	@ 0x24
 801eeaa:	2301      	movs	r3, #1
 801eeac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eeae:	69fb      	ldr	r3, [r7, #28]
 801eeb0:	f383 8810 	msr	PRIMASK, r3
}
 801eeb4:	46c0      	nop			@ (mov r8, r8)
 801eeb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eeb8:	681b      	ldr	r3, [r3, #0]
 801eeba:	681a      	ldr	r2, [r3, #0]
 801eebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eebe:	681b      	ldr	r3, [r3, #0]
 801eec0:	2140      	movs	r1, #64	@ 0x40
 801eec2:	430a      	orrs	r2, r1
 801eec4:	601a      	str	r2, [r3, #0]
 801eec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eec8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eeca:	6a3b      	ldr	r3, [r7, #32]
 801eecc:	f383 8810 	msr	PRIMASK, r3
}
 801eed0:	e006      	b.n	801eee0 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801eed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eed4:	228c      	movs	r2, #140	@ 0x8c
 801eed6:	589b      	ldr	r3, [r3, r2]
 801eed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801eeda:	0010      	movs	r0, r2
 801eedc:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801eede:	46c0      	nop			@ (mov r8, r8)
 801eee0:	46c0      	nop			@ (mov r8, r8)
 801eee2:	46bd      	mov	sp, r7
 801eee4:	b00c      	add	sp, #48	@ 0x30
 801eee6:	bd80      	pop	{r7, pc}

0801eee8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801eee8:	b580      	push	{r7, lr}
 801eeea:	b084      	sub	sp, #16
 801eeec:	af00      	add	r7, sp, #0
 801eeee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eef4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801eef6:	68fb      	ldr	r3, [r7, #12]
 801eef8:	2288      	movs	r2, #136	@ 0x88
 801eefa:	589b      	ldr	r3, [r3, r2]
 801eefc:	68fa      	ldr	r2, [r7, #12]
 801eefe:	0010      	movs	r0, r2
 801ef00:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ef02:	46c0      	nop			@ (mov r8, r8)
 801ef04:	46bd      	mov	sp, r7
 801ef06:	b004      	add	sp, #16
 801ef08:	bd80      	pop	{r7, pc}
	...

0801ef0c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801ef0c:	b580      	push	{r7, lr}
 801ef0e:	b094      	sub	sp, #80	@ 0x50
 801ef10:	af00      	add	r7, sp, #0
 801ef12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ef14:	687b      	ldr	r3, [r7, #4]
 801ef16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef18:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801ef1a:	687b      	ldr	r3, [r7, #4]
 801ef1c:	681b      	ldr	r3, [r3, #0]
 801ef1e:	681b      	ldr	r3, [r3, #0]
 801ef20:	2220      	movs	r2, #32
 801ef22:	4013      	ands	r3, r2
 801ef24:	d16f      	bne.n	801f006 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801ef26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef28:	225a      	movs	r2, #90	@ 0x5a
 801ef2a:	2100      	movs	r1, #0
 801ef2c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ef2e:	f3ef 8310 	mrs	r3, PRIMASK
 801ef32:	61bb      	str	r3, [r7, #24]
  return(result);
 801ef34:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ef36:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ef38:	2301      	movs	r3, #1
 801ef3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef3c:	69fb      	ldr	r3, [r7, #28]
 801ef3e:	f383 8810 	msr	PRIMASK, r3
}
 801ef42:	46c0      	nop			@ (mov r8, r8)
 801ef44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef46:	681b      	ldr	r3, [r3, #0]
 801ef48:	681a      	ldr	r2, [r3, #0]
 801ef4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef4c:	681b      	ldr	r3, [r3, #0]
 801ef4e:	493b      	ldr	r1, [pc, #236]	@ (801f03c <UART_DMAReceiveCplt+0x130>)
 801ef50:	400a      	ands	r2, r1
 801ef52:	601a      	str	r2, [r3, #0]
 801ef54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ef56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef58:	6a3b      	ldr	r3, [r7, #32]
 801ef5a:	f383 8810 	msr	PRIMASK, r3
}
 801ef5e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ef60:	f3ef 8310 	mrs	r3, PRIMASK
 801ef64:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801ef66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ef68:	647b      	str	r3, [r7, #68]	@ 0x44
 801ef6a:	2301      	movs	r3, #1
 801ef6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ef70:	f383 8810 	msr	PRIMASK, r3
}
 801ef74:	46c0      	nop			@ (mov r8, r8)
 801ef76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef78:	681b      	ldr	r3, [r3, #0]
 801ef7a:	689a      	ldr	r2, [r3, #8]
 801ef7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef7e:	681b      	ldr	r3, [r3, #0]
 801ef80:	2101      	movs	r1, #1
 801ef82:	438a      	bics	r2, r1
 801ef84:	609a      	str	r2, [r3, #8]
 801ef86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ef88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef8c:	f383 8810 	msr	PRIMASK, r3
}
 801ef90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ef92:	f3ef 8310 	mrs	r3, PRIMASK
 801ef96:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801ef98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ef9a:	643b      	str	r3, [r7, #64]	@ 0x40
 801ef9c:	2301      	movs	r3, #1
 801ef9e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801efa2:	f383 8810 	msr	PRIMASK, r3
}
 801efa6:	46c0      	nop			@ (mov r8, r8)
 801efa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801efaa:	681b      	ldr	r3, [r3, #0]
 801efac:	689a      	ldr	r2, [r3, #8]
 801efae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801efb0:	681b      	ldr	r3, [r3, #0]
 801efb2:	2140      	movs	r1, #64	@ 0x40
 801efb4:	438a      	bics	r2, r1
 801efb6:	609a      	str	r2, [r3, #8]
 801efb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801efba:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801efbe:	f383 8810 	msr	PRIMASK, r3
}
 801efc2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801efc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801efc6:	2280      	movs	r2, #128	@ 0x80
 801efc8:	2120      	movs	r1, #32
 801efca:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801efcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801efce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801efd0:	2b01      	cmp	r3, #1
 801efd2:	d118      	bne.n	801f006 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801efd4:	f3ef 8310 	mrs	r3, PRIMASK
 801efd8:	60fb      	str	r3, [r7, #12]
  return(result);
 801efda:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801efdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801efde:	2301      	movs	r3, #1
 801efe0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efe2:	693b      	ldr	r3, [r7, #16]
 801efe4:	f383 8810 	msr	PRIMASK, r3
}
 801efe8:	46c0      	nop			@ (mov r8, r8)
 801efea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801efec:	681b      	ldr	r3, [r3, #0]
 801efee:	681a      	ldr	r2, [r3, #0]
 801eff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eff2:	681b      	ldr	r3, [r3, #0]
 801eff4:	2110      	movs	r1, #16
 801eff6:	438a      	bics	r2, r1
 801eff8:	601a      	str	r2, [r3, #0]
 801effa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801effc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801effe:	697b      	ldr	r3, [r7, #20]
 801f000:	f383 8810 	msr	PRIMASK, r3
}
 801f004:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f008:	2200      	movs	r2, #0
 801f00a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f00c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f00e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f010:	2b01      	cmp	r3, #1
 801f012:	d109      	bne.n	801f028 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801f014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f016:	22ac      	movs	r2, #172	@ 0xac
 801f018:	589b      	ldr	r3, [r3, r2]
 801f01a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801f01c:	2158      	movs	r1, #88	@ 0x58
 801f01e:	5a51      	ldrh	r1, [r2, r1]
 801f020:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801f022:	0010      	movs	r0, r2
 801f024:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801f026:	e005      	b.n	801f034 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801f028:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f02a:	2294      	movs	r2, #148	@ 0x94
 801f02c:	589b      	ldr	r3, [r3, r2]
 801f02e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801f030:	0010      	movs	r0, r2
 801f032:	4798      	blx	r3
}
 801f034:	46c0      	nop			@ (mov r8, r8)
 801f036:	46bd      	mov	sp, r7
 801f038:	b014      	add	sp, #80	@ 0x50
 801f03a:	bd80      	pop	{r7, pc}
 801f03c:	fffffeff 	.word	0xfffffeff

0801f040 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801f040:	b580      	push	{r7, lr}
 801f042:	b084      	sub	sp, #16
 801f044:	af00      	add	r7, sp, #0
 801f046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801f048:	687b      	ldr	r3, [r7, #4]
 801f04a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f04c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801f04e:	68fb      	ldr	r3, [r7, #12]
 801f050:	2201      	movs	r2, #1
 801f052:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f054:	68fb      	ldr	r3, [r7, #12]
 801f056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f058:	2b01      	cmp	r3, #1
 801f05a:	d10b      	bne.n	801f074 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801f05c:	68fb      	ldr	r3, [r7, #12]
 801f05e:	22ac      	movs	r2, #172	@ 0xac
 801f060:	589b      	ldr	r3, [r3, r2]
 801f062:	68fa      	ldr	r2, [r7, #12]
 801f064:	2158      	movs	r1, #88	@ 0x58
 801f066:	5a52      	ldrh	r2, [r2, r1]
 801f068:	0852      	lsrs	r2, r2, #1
 801f06a:	b291      	uxth	r1, r2
 801f06c:	68fa      	ldr	r2, [r7, #12]
 801f06e:	0010      	movs	r0, r2
 801f070:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801f072:	e005      	b.n	801f080 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801f074:	68fb      	ldr	r3, [r7, #12]
 801f076:	2290      	movs	r2, #144	@ 0x90
 801f078:	589b      	ldr	r3, [r3, r2]
 801f07a:	68fa      	ldr	r2, [r7, #12]
 801f07c:	0010      	movs	r0, r2
 801f07e:	4798      	blx	r3
}
 801f080:	46c0      	nop			@ (mov r8, r8)
 801f082:	46bd      	mov	sp, r7
 801f084:	b004      	add	sp, #16
 801f086:	bd80      	pop	{r7, pc}

0801f088 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801f088:	b580      	push	{r7, lr}
 801f08a:	b086      	sub	sp, #24
 801f08c:	af00      	add	r7, sp, #0
 801f08e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801f090:	687b      	ldr	r3, [r7, #4]
 801f092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f094:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801f096:	697b      	ldr	r3, [r7, #20]
 801f098:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f09a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801f09c:	697b      	ldr	r3, [r7, #20]
 801f09e:	2280      	movs	r2, #128	@ 0x80
 801f0a0:	589b      	ldr	r3, [r3, r2]
 801f0a2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801f0a4:	697b      	ldr	r3, [r7, #20]
 801f0a6:	681b      	ldr	r3, [r3, #0]
 801f0a8:	689b      	ldr	r3, [r3, #8]
 801f0aa:	2280      	movs	r2, #128	@ 0x80
 801f0ac:	4013      	ands	r3, r2
 801f0ae:	2b80      	cmp	r3, #128	@ 0x80
 801f0b0:	d10a      	bne.n	801f0c8 <UART_DMAError+0x40>
 801f0b2:	693b      	ldr	r3, [r7, #16]
 801f0b4:	2b21      	cmp	r3, #33	@ 0x21
 801f0b6:	d107      	bne.n	801f0c8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801f0b8:	697b      	ldr	r3, [r7, #20]
 801f0ba:	2252      	movs	r2, #82	@ 0x52
 801f0bc:	2100      	movs	r1, #0
 801f0be:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801f0c0:	697b      	ldr	r3, [r7, #20]
 801f0c2:	0018      	movs	r0, r3
 801f0c4:	f7ff fe3a 	bl	801ed3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801f0c8:	697b      	ldr	r3, [r7, #20]
 801f0ca:	681b      	ldr	r3, [r3, #0]
 801f0cc:	689b      	ldr	r3, [r3, #8]
 801f0ce:	2240      	movs	r2, #64	@ 0x40
 801f0d0:	4013      	ands	r3, r2
 801f0d2:	2b40      	cmp	r3, #64	@ 0x40
 801f0d4:	d10a      	bne.n	801f0ec <UART_DMAError+0x64>
 801f0d6:	68fb      	ldr	r3, [r7, #12]
 801f0d8:	2b22      	cmp	r3, #34	@ 0x22
 801f0da:	d107      	bne.n	801f0ec <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801f0dc:	697b      	ldr	r3, [r7, #20]
 801f0de:	225a      	movs	r2, #90	@ 0x5a
 801f0e0:	2100      	movs	r1, #0
 801f0e2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801f0e4:	697b      	ldr	r3, [r7, #20]
 801f0e6:	0018      	movs	r0, r3
 801f0e8:	f7ff fe4c 	bl	801ed84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801f0ec:	697b      	ldr	r3, [r7, #20]
 801f0ee:	2284      	movs	r2, #132	@ 0x84
 801f0f0:	589b      	ldr	r3, [r3, r2]
 801f0f2:	2210      	movs	r2, #16
 801f0f4:	431a      	orrs	r2, r3
 801f0f6:	697b      	ldr	r3, [r7, #20]
 801f0f8:	2184      	movs	r1, #132	@ 0x84
 801f0fa:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801f0fc:	697b      	ldr	r3, [r7, #20]
 801f0fe:	2298      	movs	r2, #152	@ 0x98
 801f100:	589b      	ldr	r3, [r3, r2]
 801f102:	697a      	ldr	r2, [r7, #20]
 801f104:	0010      	movs	r0, r2
 801f106:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f108:	46c0      	nop			@ (mov r8, r8)
 801f10a:	46bd      	mov	sp, r7
 801f10c:	b006      	add	sp, #24
 801f10e:	bd80      	pop	{r7, pc}

0801f110 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801f110:	b580      	push	{r7, lr}
 801f112:	b084      	sub	sp, #16
 801f114:	af00      	add	r7, sp, #0
 801f116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801f118:	687b      	ldr	r3, [r7, #4]
 801f11a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f11c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801f11e:	68fb      	ldr	r3, [r7, #12]
 801f120:	225a      	movs	r2, #90	@ 0x5a
 801f122:	2100      	movs	r1, #0
 801f124:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801f126:	68fb      	ldr	r3, [r7, #12]
 801f128:	2252      	movs	r2, #82	@ 0x52
 801f12a:	2100      	movs	r1, #0
 801f12c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801f12e:	68fb      	ldr	r3, [r7, #12]
 801f130:	2298      	movs	r2, #152	@ 0x98
 801f132:	589b      	ldr	r3, [r3, r2]
 801f134:	68fa      	ldr	r2, [r7, #12]
 801f136:	0010      	movs	r0, r2
 801f138:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f13a:	46c0      	nop			@ (mov r8, r8)
 801f13c:	46bd      	mov	sp, r7
 801f13e:	b004      	add	sp, #16
 801f140:	bd80      	pop	{r7, pc}

0801f142 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801f142:	b580      	push	{r7, lr}
 801f144:	b086      	sub	sp, #24
 801f146:	af00      	add	r7, sp, #0
 801f148:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f14a:	f3ef 8310 	mrs	r3, PRIMASK
 801f14e:	60bb      	str	r3, [r7, #8]
  return(result);
 801f150:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801f152:	617b      	str	r3, [r7, #20]
 801f154:	2301      	movs	r3, #1
 801f156:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f158:	68fb      	ldr	r3, [r7, #12]
 801f15a:	f383 8810 	msr	PRIMASK, r3
}
 801f15e:	46c0      	nop			@ (mov r8, r8)
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	681b      	ldr	r3, [r3, #0]
 801f164:	681a      	ldr	r2, [r3, #0]
 801f166:	687b      	ldr	r3, [r7, #4]
 801f168:	681b      	ldr	r3, [r3, #0]
 801f16a:	2140      	movs	r1, #64	@ 0x40
 801f16c:	438a      	bics	r2, r1
 801f16e:	601a      	str	r2, [r3, #0]
 801f170:	697b      	ldr	r3, [r7, #20]
 801f172:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f174:	693b      	ldr	r3, [r7, #16]
 801f176:	f383 8810 	msr	PRIMASK, r3
}
 801f17a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801f17c:	687b      	ldr	r3, [r7, #4]
 801f17e:	2220      	movs	r2, #32
 801f180:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	2200      	movs	r2, #0
 801f186:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801f188:	687b      	ldr	r3, [r7, #4]
 801f18a:	228c      	movs	r2, #140	@ 0x8c
 801f18c:	589b      	ldr	r3, [r3, r2]
 801f18e:	687a      	ldr	r2, [r7, #4]
 801f190:	0010      	movs	r0, r2
 801f192:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f194:	46c0      	nop			@ (mov r8, r8)
 801f196:	46bd      	mov	sp, r7
 801f198:	b006      	add	sp, #24
 801f19a:	bd80      	pop	{r7, pc}

0801f19c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801f19c:	b580      	push	{r7, lr}
 801f19e:	b094      	sub	sp, #80	@ 0x50
 801f1a0:	af00      	add	r7, sp, #0
 801f1a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801f1a4:	204e      	movs	r0, #78	@ 0x4e
 801f1a6:	183b      	adds	r3, r7, r0
 801f1a8:	687a      	ldr	r2, [r7, #4]
 801f1aa:	215c      	movs	r1, #92	@ 0x5c
 801f1ac:	5a52      	ldrh	r2, [r2, r1]
 801f1ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801f1b0:	687b      	ldr	r3, [r7, #4]
 801f1b2:	2280      	movs	r2, #128	@ 0x80
 801f1b4:	589b      	ldr	r3, [r3, r2]
 801f1b6:	2b22      	cmp	r3, #34	@ 0x22
 801f1b8:	d000      	beq.n	801f1bc <UART_RxISR_8BIT+0x20>
 801f1ba:	e0c2      	b.n	801f342 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801f1bc:	687b      	ldr	r3, [r7, #4]
 801f1be:	681b      	ldr	r3, [r3, #0]
 801f1c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f1c2:	214c      	movs	r1, #76	@ 0x4c
 801f1c4:	187b      	adds	r3, r7, r1
 801f1c6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801f1c8:	187b      	adds	r3, r7, r1
 801f1ca:	881b      	ldrh	r3, [r3, #0]
 801f1cc:	b2da      	uxtb	r2, r3
 801f1ce:	183b      	adds	r3, r7, r0
 801f1d0:	881b      	ldrh	r3, [r3, #0]
 801f1d2:	b2d9      	uxtb	r1, r3
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f1d8:	400a      	ands	r2, r1
 801f1da:	b2d2      	uxtb	r2, r2
 801f1dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801f1de:	687b      	ldr	r3, [r7, #4]
 801f1e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f1e2:	1c5a      	adds	r2, r3, #1
 801f1e4:	687b      	ldr	r3, [r7, #4]
 801f1e6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	225a      	movs	r2, #90	@ 0x5a
 801f1ec:	5a9b      	ldrh	r3, [r3, r2]
 801f1ee:	b29b      	uxth	r3, r3
 801f1f0:	3b01      	subs	r3, #1
 801f1f2:	b299      	uxth	r1, r3
 801f1f4:	687b      	ldr	r3, [r7, #4]
 801f1f6:	225a      	movs	r2, #90	@ 0x5a
 801f1f8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801f1fa:	687b      	ldr	r3, [r7, #4]
 801f1fc:	225a      	movs	r2, #90	@ 0x5a
 801f1fe:	5a9b      	ldrh	r3, [r3, r2]
 801f200:	b29b      	uxth	r3, r3
 801f202:	2b00      	cmp	r3, #0
 801f204:	d000      	beq.n	801f208 <UART_RxISR_8BIT+0x6c>
 801f206:	e0a4      	b.n	801f352 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f208:	f3ef 8310 	mrs	r3, PRIMASK
 801f20c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801f20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f210:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f212:	2301      	movs	r3, #1
 801f214:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f218:	f383 8810 	msr	PRIMASK, r3
}
 801f21c:	46c0      	nop			@ (mov r8, r8)
 801f21e:	687b      	ldr	r3, [r7, #4]
 801f220:	681b      	ldr	r3, [r3, #0]
 801f222:	681a      	ldr	r2, [r3, #0]
 801f224:	687b      	ldr	r3, [r7, #4]
 801f226:	681b      	ldr	r3, [r3, #0]
 801f228:	494c      	ldr	r1, [pc, #304]	@ (801f35c <UART_RxISR_8BIT+0x1c0>)
 801f22a:	400a      	ands	r2, r1
 801f22c:	601a      	str	r2, [r3, #0]
 801f22e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f230:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f234:	f383 8810 	msr	PRIMASK, r3
}
 801f238:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f23a:	f3ef 8310 	mrs	r3, PRIMASK
 801f23e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801f240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f242:	647b      	str	r3, [r7, #68]	@ 0x44
 801f244:	2301      	movs	r3, #1
 801f246:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f24a:	f383 8810 	msr	PRIMASK, r3
}
 801f24e:	46c0      	nop			@ (mov r8, r8)
 801f250:	687b      	ldr	r3, [r7, #4]
 801f252:	681b      	ldr	r3, [r3, #0]
 801f254:	689a      	ldr	r2, [r3, #8]
 801f256:	687b      	ldr	r3, [r7, #4]
 801f258:	681b      	ldr	r3, [r3, #0]
 801f25a:	2101      	movs	r1, #1
 801f25c:	438a      	bics	r2, r1
 801f25e:	609a      	str	r2, [r3, #8]
 801f260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f262:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f266:	f383 8810 	msr	PRIMASK, r3
}
 801f26a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f26c:	687b      	ldr	r3, [r7, #4]
 801f26e:	2280      	movs	r2, #128	@ 0x80
 801f270:	2120      	movs	r1, #32
 801f272:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f274:	687b      	ldr	r3, [r7, #4]
 801f276:	2200      	movs	r2, #0
 801f278:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f27a:	687b      	ldr	r3, [r7, #4]
 801f27c:	2200      	movs	r2, #0
 801f27e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801f280:	687b      	ldr	r3, [r7, #4]
 801f282:	681b      	ldr	r3, [r3, #0]
 801f284:	4a36      	ldr	r2, [pc, #216]	@ (801f360 <UART_RxISR_8BIT+0x1c4>)
 801f286:	4293      	cmp	r3, r2
 801f288:	d01f      	beq.n	801f2ca <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801f28a:	687b      	ldr	r3, [r7, #4]
 801f28c:	681b      	ldr	r3, [r3, #0]
 801f28e:	685a      	ldr	r2, [r3, #4]
 801f290:	2380      	movs	r3, #128	@ 0x80
 801f292:	041b      	lsls	r3, r3, #16
 801f294:	4013      	ands	r3, r2
 801f296:	d018      	beq.n	801f2ca <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f298:	f3ef 8310 	mrs	r3, PRIMASK
 801f29c:	61bb      	str	r3, [r7, #24]
  return(result);
 801f29e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801f2a0:	643b      	str	r3, [r7, #64]	@ 0x40
 801f2a2:	2301      	movs	r3, #1
 801f2a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f2a6:	69fb      	ldr	r3, [r7, #28]
 801f2a8:	f383 8810 	msr	PRIMASK, r3
}
 801f2ac:	46c0      	nop			@ (mov r8, r8)
 801f2ae:	687b      	ldr	r3, [r7, #4]
 801f2b0:	681b      	ldr	r3, [r3, #0]
 801f2b2:	681a      	ldr	r2, [r3, #0]
 801f2b4:	687b      	ldr	r3, [r7, #4]
 801f2b6:	681b      	ldr	r3, [r3, #0]
 801f2b8:	492a      	ldr	r1, [pc, #168]	@ (801f364 <UART_RxISR_8BIT+0x1c8>)
 801f2ba:	400a      	ands	r2, r1
 801f2bc:	601a      	str	r2, [r3, #0]
 801f2be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f2c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f2c2:	6a3b      	ldr	r3, [r7, #32]
 801f2c4:	f383 8810 	msr	PRIMASK, r3
}
 801f2c8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f2ca:	687b      	ldr	r3, [r7, #4]
 801f2cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f2ce:	2b01      	cmp	r3, #1
 801f2d0:	d130      	bne.n	801f334 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f2d2:	687b      	ldr	r3, [r7, #4]
 801f2d4:	2200      	movs	r2, #0
 801f2d6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f2d8:	f3ef 8310 	mrs	r3, PRIMASK
 801f2dc:	60fb      	str	r3, [r7, #12]
  return(result);
 801f2de:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f2e2:	2301      	movs	r3, #1
 801f2e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f2e6:	693b      	ldr	r3, [r7, #16]
 801f2e8:	f383 8810 	msr	PRIMASK, r3
}
 801f2ec:	46c0      	nop			@ (mov r8, r8)
 801f2ee:	687b      	ldr	r3, [r7, #4]
 801f2f0:	681b      	ldr	r3, [r3, #0]
 801f2f2:	681a      	ldr	r2, [r3, #0]
 801f2f4:	687b      	ldr	r3, [r7, #4]
 801f2f6:	681b      	ldr	r3, [r3, #0]
 801f2f8:	2110      	movs	r1, #16
 801f2fa:	438a      	bics	r2, r1
 801f2fc:	601a      	str	r2, [r3, #0]
 801f2fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f300:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f302:	697b      	ldr	r3, [r7, #20]
 801f304:	f383 8810 	msr	PRIMASK, r3
}
 801f308:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f30a:	687b      	ldr	r3, [r7, #4]
 801f30c:	681b      	ldr	r3, [r3, #0]
 801f30e:	69db      	ldr	r3, [r3, #28]
 801f310:	2210      	movs	r2, #16
 801f312:	4013      	ands	r3, r2
 801f314:	2b10      	cmp	r3, #16
 801f316:	d103      	bne.n	801f320 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f318:	687b      	ldr	r3, [r7, #4]
 801f31a:	681b      	ldr	r3, [r3, #0]
 801f31c:	2210      	movs	r2, #16
 801f31e:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f320:	687b      	ldr	r3, [r7, #4]
 801f322:	22ac      	movs	r2, #172	@ 0xac
 801f324:	589b      	ldr	r3, [r3, r2]
 801f326:	687a      	ldr	r2, [r7, #4]
 801f328:	2158      	movs	r1, #88	@ 0x58
 801f32a:	5a51      	ldrh	r1, [r2, r1]
 801f32c:	687a      	ldr	r2, [r7, #4]
 801f32e:	0010      	movs	r0, r2
 801f330:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f332:	e00e      	b.n	801f352 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801f334:	687b      	ldr	r3, [r7, #4]
 801f336:	2294      	movs	r2, #148	@ 0x94
 801f338:	589b      	ldr	r3, [r3, r2]
 801f33a:	687a      	ldr	r2, [r7, #4]
 801f33c:	0010      	movs	r0, r2
 801f33e:	4798      	blx	r3
}
 801f340:	e007      	b.n	801f352 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f342:	687b      	ldr	r3, [r7, #4]
 801f344:	681b      	ldr	r3, [r3, #0]
 801f346:	699a      	ldr	r2, [r3, #24]
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	681b      	ldr	r3, [r3, #0]
 801f34c:	2108      	movs	r1, #8
 801f34e:	430a      	orrs	r2, r1
 801f350:	619a      	str	r2, [r3, #24]
}
 801f352:	46c0      	nop			@ (mov r8, r8)
 801f354:	46bd      	mov	sp, r7
 801f356:	b014      	add	sp, #80	@ 0x50
 801f358:	bd80      	pop	{r7, pc}
 801f35a:	46c0      	nop			@ (mov r8, r8)
 801f35c:	fffffedf 	.word	0xfffffedf
 801f360:	40004800 	.word	0x40004800
 801f364:	fbffffff 	.word	0xfbffffff

0801f368 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801f368:	b580      	push	{r7, lr}
 801f36a:	b094      	sub	sp, #80	@ 0x50
 801f36c:	af00      	add	r7, sp, #0
 801f36e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801f370:	204e      	movs	r0, #78	@ 0x4e
 801f372:	183b      	adds	r3, r7, r0
 801f374:	687a      	ldr	r2, [r7, #4]
 801f376:	215c      	movs	r1, #92	@ 0x5c
 801f378:	5a52      	ldrh	r2, [r2, r1]
 801f37a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801f37c:	687b      	ldr	r3, [r7, #4]
 801f37e:	2280      	movs	r2, #128	@ 0x80
 801f380:	589b      	ldr	r3, [r3, r2]
 801f382:	2b22      	cmp	r3, #34	@ 0x22
 801f384:	d000      	beq.n	801f388 <UART_RxISR_16BIT+0x20>
 801f386:	e0c2      	b.n	801f50e <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801f388:	687b      	ldr	r3, [r7, #4]
 801f38a:	681b      	ldr	r3, [r3, #0]
 801f38c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f38e:	214c      	movs	r1, #76	@ 0x4c
 801f390:	187b      	adds	r3, r7, r1
 801f392:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801f394:	687b      	ldr	r3, [r7, #4]
 801f396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f398:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801f39a:	187b      	adds	r3, r7, r1
 801f39c:	183a      	adds	r2, r7, r0
 801f39e:	881b      	ldrh	r3, [r3, #0]
 801f3a0:	8812      	ldrh	r2, [r2, #0]
 801f3a2:	4013      	ands	r3, r2
 801f3a4:	b29a      	uxth	r2, r3
 801f3a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f3a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801f3aa:	687b      	ldr	r3, [r7, #4]
 801f3ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f3ae:	1c9a      	adds	r2, r3, #2
 801f3b0:	687b      	ldr	r3, [r7, #4]
 801f3b2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801f3b4:	687b      	ldr	r3, [r7, #4]
 801f3b6:	225a      	movs	r2, #90	@ 0x5a
 801f3b8:	5a9b      	ldrh	r3, [r3, r2]
 801f3ba:	b29b      	uxth	r3, r3
 801f3bc:	3b01      	subs	r3, #1
 801f3be:	b299      	uxth	r1, r3
 801f3c0:	687b      	ldr	r3, [r7, #4]
 801f3c2:	225a      	movs	r2, #90	@ 0x5a
 801f3c4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801f3c6:	687b      	ldr	r3, [r7, #4]
 801f3c8:	225a      	movs	r2, #90	@ 0x5a
 801f3ca:	5a9b      	ldrh	r3, [r3, r2]
 801f3cc:	b29b      	uxth	r3, r3
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	d000      	beq.n	801f3d4 <UART_RxISR_16BIT+0x6c>
 801f3d2:	e0a4      	b.n	801f51e <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f3d4:	f3ef 8310 	mrs	r3, PRIMASK
 801f3d8:	623b      	str	r3, [r7, #32]
  return(result);
 801f3da:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f3dc:	647b      	str	r3, [r7, #68]	@ 0x44
 801f3de:	2301      	movs	r3, #1
 801f3e0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f3e4:	f383 8810 	msr	PRIMASK, r3
}
 801f3e8:	46c0      	nop			@ (mov r8, r8)
 801f3ea:	687b      	ldr	r3, [r7, #4]
 801f3ec:	681b      	ldr	r3, [r3, #0]
 801f3ee:	681a      	ldr	r2, [r3, #0]
 801f3f0:	687b      	ldr	r3, [r7, #4]
 801f3f2:	681b      	ldr	r3, [r3, #0]
 801f3f4:	494c      	ldr	r1, [pc, #304]	@ (801f528 <UART_RxISR_16BIT+0x1c0>)
 801f3f6:	400a      	ands	r2, r1
 801f3f8:	601a      	str	r2, [r3, #0]
 801f3fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f3fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f400:	f383 8810 	msr	PRIMASK, r3
}
 801f404:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f406:	f3ef 8310 	mrs	r3, PRIMASK
 801f40a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801f40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f40e:	643b      	str	r3, [r7, #64]	@ 0x40
 801f410:	2301      	movs	r3, #1
 801f412:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f416:	f383 8810 	msr	PRIMASK, r3
}
 801f41a:	46c0      	nop			@ (mov r8, r8)
 801f41c:	687b      	ldr	r3, [r7, #4]
 801f41e:	681b      	ldr	r3, [r3, #0]
 801f420:	689a      	ldr	r2, [r3, #8]
 801f422:	687b      	ldr	r3, [r7, #4]
 801f424:	681b      	ldr	r3, [r3, #0]
 801f426:	2101      	movs	r1, #1
 801f428:	438a      	bics	r2, r1
 801f42a:	609a      	str	r2, [r3, #8]
 801f42c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f42e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f432:	f383 8810 	msr	PRIMASK, r3
}
 801f436:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f438:	687b      	ldr	r3, [r7, #4]
 801f43a:	2280      	movs	r2, #128	@ 0x80
 801f43c:	2120      	movs	r1, #32
 801f43e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f440:	687b      	ldr	r3, [r7, #4]
 801f442:	2200      	movs	r2, #0
 801f444:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f446:	687b      	ldr	r3, [r7, #4]
 801f448:	2200      	movs	r2, #0
 801f44a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801f44c:	687b      	ldr	r3, [r7, #4]
 801f44e:	681b      	ldr	r3, [r3, #0]
 801f450:	4a36      	ldr	r2, [pc, #216]	@ (801f52c <UART_RxISR_16BIT+0x1c4>)
 801f452:	4293      	cmp	r3, r2
 801f454:	d01f      	beq.n	801f496 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801f456:	687b      	ldr	r3, [r7, #4]
 801f458:	681b      	ldr	r3, [r3, #0]
 801f45a:	685a      	ldr	r2, [r3, #4]
 801f45c:	2380      	movs	r3, #128	@ 0x80
 801f45e:	041b      	lsls	r3, r3, #16
 801f460:	4013      	ands	r3, r2
 801f462:	d018      	beq.n	801f496 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f464:	f3ef 8310 	mrs	r3, PRIMASK
 801f468:	617b      	str	r3, [r7, #20]
  return(result);
 801f46a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801f46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f46e:	2301      	movs	r3, #1
 801f470:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f472:	69bb      	ldr	r3, [r7, #24]
 801f474:	f383 8810 	msr	PRIMASK, r3
}
 801f478:	46c0      	nop			@ (mov r8, r8)
 801f47a:	687b      	ldr	r3, [r7, #4]
 801f47c:	681b      	ldr	r3, [r3, #0]
 801f47e:	681a      	ldr	r2, [r3, #0]
 801f480:	687b      	ldr	r3, [r7, #4]
 801f482:	681b      	ldr	r3, [r3, #0]
 801f484:	492a      	ldr	r1, [pc, #168]	@ (801f530 <UART_RxISR_16BIT+0x1c8>)
 801f486:	400a      	ands	r2, r1
 801f488:	601a      	str	r2, [r3, #0]
 801f48a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f48c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f48e:	69fb      	ldr	r3, [r7, #28]
 801f490:	f383 8810 	msr	PRIMASK, r3
}
 801f494:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f496:	687b      	ldr	r3, [r7, #4]
 801f498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f49a:	2b01      	cmp	r3, #1
 801f49c:	d130      	bne.n	801f500 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f49e:	687b      	ldr	r3, [r7, #4]
 801f4a0:	2200      	movs	r2, #0
 801f4a2:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f4a4:	f3ef 8310 	mrs	r3, PRIMASK
 801f4a8:	60bb      	str	r3, [r7, #8]
  return(result);
 801f4aa:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f4ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f4ae:	2301      	movs	r3, #1
 801f4b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f4b2:	68fb      	ldr	r3, [r7, #12]
 801f4b4:	f383 8810 	msr	PRIMASK, r3
}
 801f4b8:	46c0      	nop			@ (mov r8, r8)
 801f4ba:	687b      	ldr	r3, [r7, #4]
 801f4bc:	681b      	ldr	r3, [r3, #0]
 801f4be:	681a      	ldr	r2, [r3, #0]
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	681b      	ldr	r3, [r3, #0]
 801f4c4:	2110      	movs	r1, #16
 801f4c6:	438a      	bics	r2, r1
 801f4c8:	601a      	str	r2, [r3, #0]
 801f4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f4cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f4ce:	693b      	ldr	r3, [r7, #16]
 801f4d0:	f383 8810 	msr	PRIMASK, r3
}
 801f4d4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f4d6:	687b      	ldr	r3, [r7, #4]
 801f4d8:	681b      	ldr	r3, [r3, #0]
 801f4da:	69db      	ldr	r3, [r3, #28]
 801f4dc:	2210      	movs	r2, #16
 801f4de:	4013      	ands	r3, r2
 801f4e0:	2b10      	cmp	r3, #16
 801f4e2:	d103      	bne.n	801f4ec <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f4e4:	687b      	ldr	r3, [r7, #4]
 801f4e6:	681b      	ldr	r3, [r3, #0]
 801f4e8:	2210      	movs	r2, #16
 801f4ea:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f4ec:	687b      	ldr	r3, [r7, #4]
 801f4ee:	22ac      	movs	r2, #172	@ 0xac
 801f4f0:	589b      	ldr	r3, [r3, r2]
 801f4f2:	687a      	ldr	r2, [r7, #4]
 801f4f4:	2158      	movs	r1, #88	@ 0x58
 801f4f6:	5a51      	ldrh	r1, [r2, r1]
 801f4f8:	687a      	ldr	r2, [r7, #4]
 801f4fa:	0010      	movs	r0, r2
 801f4fc:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f4fe:	e00e      	b.n	801f51e <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801f500:	687b      	ldr	r3, [r7, #4]
 801f502:	2294      	movs	r2, #148	@ 0x94
 801f504:	589b      	ldr	r3, [r3, r2]
 801f506:	687a      	ldr	r2, [r7, #4]
 801f508:	0010      	movs	r0, r2
 801f50a:	4798      	blx	r3
}
 801f50c:	e007      	b.n	801f51e <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f50e:	687b      	ldr	r3, [r7, #4]
 801f510:	681b      	ldr	r3, [r3, #0]
 801f512:	699a      	ldr	r2, [r3, #24]
 801f514:	687b      	ldr	r3, [r7, #4]
 801f516:	681b      	ldr	r3, [r3, #0]
 801f518:	2108      	movs	r1, #8
 801f51a:	430a      	orrs	r2, r1
 801f51c:	619a      	str	r2, [r3, #24]
}
 801f51e:	46c0      	nop			@ (mov r8, r8)
 801f520:	46bd      	mov	sp, r7
 801f522:	b014      	add	sp, #80	@ 0x50
 801f524:	bd80      	pop	{r7, pc}
 801f526:	46c0      	nop			@ (mov r8, r8)
 801f528:	fffffedf 	.word	0xfffffedf
 801f52c:	40004800 	.word	0x40004800
 801f530:	fbffffff 	.word	0xfbffffff

0801f534 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801f534:	b580      	push	{r7, lr}
 801f536:	b082      	sub	sp, #8
 801f538:	af00      	add	r7, sp, #0
 801f53a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801f53c:	46c0      	nop			@ (mov r8, r8)
 801f53e:	46bd      	mov	sp, r7
 801f540:	b002      	add	sp, #8
 801f542:	bd80      	pop	{r7, pc}

0801f544 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801f544:	b580      	push	{r7, lr}
 801f546:	b084      	sub	sp, #16
 801f548:	af00      	add	r7, sp, #0
 801f54a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801f54c:	687b      	ldr	r3, [r7, #4]
 801f54e:	2244      	movs	r2, #68	@ 0x44
 801f550:	2100      	movs	r1, #0
 801f552:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801f554:	4b05      	ldr	r3, [pc, #20]	@ (801f56c <USB_EnableGlobalInt+0x28>)
 801f556:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801f558:	68fb      	ldr	r3, [r7, #12]
 801f55a:	b299      	uxth	r1, r3
 801f55c:	687b      	ldr	r3, [r7, #4]
 801f55e:	2240      	movs	r2, #64	@ 0x40
 801f560:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f562:	2300      	movs	r3, #0
}
 801f564:	0018      	movs	r0, r3
 801f566:	46bd      	mov	sp, r7
 801f568:	b004      	add	sp, #16
 801f56a:	bd80      	pop	{r7, pc}
 801f56c:	0000bf80 	.word	0x0000bf80

0801f570 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801f570:	b580      	push	{r7, lr}
 801f572:	b084      	sub	sp, #16
 801f574:	af00      	add	r7, sp, #0
 801f576:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801f578:	4b09      	ldr	r3, [pc, #36]	@ (801f5a0 <USB_DisableGlobalInt+0x30>)
 801f57a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801f57c:	687b      	ldr	r3, [r7, #4]
 801f57e:	2240      	movs	r2, #64	@ 0x40
 801f580:	5a9b      	ldrh	r3, [r3, r2]
 801f582:	b29b      	uxth	r3, r3
 801f584:	68fa      	ldr	r2, [r7, #12]
 801f586:	b292      	uxth	r2, r2
 801f588:	43d2      	mvns	r2, r2
 801f58a:	b292      	uxth	r2, r2
 801f58c:	4013      	ands	r3, r2
 801f58e:	b299      	uxth	r1, r3
 801f590:	687b      	ldr	r3, [r7, #4]
 801f592:	2240      	movs	r2, #64	@ 0x40
 801f594:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f596:	2300      	movs	r3, #0
}
 801f598:	0018      	movs	r0, r3
 801f59a:	46bd      	mov	sp, r7
 801f59c:	b004      	add	sp, #16
 801f59e:	bd80      	pop	{r7, pc}
 801f5a0:	0000bf80 	.word	0x0000bf80

0801f5a4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801f5a4:	b084      	sub	sp, #16
 801f5a6:	b590      	push	{r4, r7, lr}
 801f5a8:	b083      	sub	sp, #12
 801f5aa:	af00      	add	r7, sp, #0
 801f5ac:	6078      	str	r0, [r7, #4]
 801f5ae:	2004      	movs	r0, #4
 801f5b0:	2410      	movs	r4, #16
 801f5b2:	1900      	adds	r0, r0, r4
 801f5b4:	2408      	movs	r4, #8
 801f5b6:	46a4      	mov	ip, r4
 801f5b8:	44bc      	add	ip, r7
 801f5ba:	4460      	add	r0, ip
 801f5bc:	6001      	str	r1, [r0, #0]
 801f5be:	6042      	str	r2, [r0, #4]
 801f5c0:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801f5c2:	687b      	ldr	r3, [r7, #4]
 801f5c4:	2240      	movs	r2, #64	@ 0x40
 801f5c6:	2101      	movs	r1, #1
 801f5c8:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801f5ca:	687b      	ldr	r3, [r7, #4]
 801f5cc:	2240      	movs	r2, #64	@ 0x40
 801f5ce:	2100      	movs	r1, #0
 801f5d0:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801f5d2:	687b      	ldr	r3, [r7, #4]
 801f5d4:	2244      	movs	r2, #68	@ 0x44
 801f5d6:	2100      	movs	r1, #0
 801f5d8:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801f5da:	687b      	ldr	r3, [r7, #4]
 801f5dc:	2250      	movs	r2, #80	@ 0x50
 801f5de:	2100      	movs	r1, #0
 801f5e0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f5e2:	2300      	movs	r3, #0
}
 801f5e4:	0018      	movs	r0, r3
 801f5e6:	46bd      	mov	sp, r7
 801f5e8:	b003      	add	sp, #12
 801f5ea:	bc90      	pop	{r4, r7}
 801f5ec:	bc08      	pop	{r3}
 801f5ee:	b004      	add	sp, #16
 801f5f0:	4718      	bx	r3
	...

0801f5f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801f5f4:	b580      	push	{r7, lr}
 801f5f6:	b09c      	sub	sp, #112	@ 0x70
 801f5f8:	af00      	add	r7, sp, #0
 801f5fa:	6078      	str	r0, [r7, #4]
 801f5fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801f5fe:	236f      	movs	r3, #111	@ 0x6f
 801f600:	18fb      	adds	r3, r7, r3
 801f602:	2200      	movs	r2, #0
 801f604:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801f606:	687a      	ldr	r2, [r7, #4]
 801f608:	683b      	ldr	r3, [r7, #0]
 801f60a:	781b      	ldrb	r3, [r3, #0]
 801f60c:	009b      	lsls	r3, r3, #2
 801f60e:	18d3      	adds	r3, r2, r3
 801f610:	881b      	ldrh	r3, [r3, #0]
 801f612:	b29a      	uxth	r2, r3
 801f614:	236c      	movs	r3, #108	@ 0x6c
 801f616:	18fb      	adds	r3, r7, r3
 801f618:	49a3      	ldr	r1, [pc, #652]	@ (801f8a8 <USB_ActivateEndpoint+0x2b4>)
 801f61a:	400a      	ands	r2, r1
 801f61c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801f61e:	683b      	ldr	r3, [r7, #0]
 801f620:	78db      	ldrb	r3, [r3, #3]
 801f622:	2b03      	cmp	r3, #3
 801f624:	d017      	beq.n	801f656 <USB_ActivateEndpoint+0x62>
 801f626:	dc28      	bgt.n	801f67a <USB_ActivateEndpoint+0x86>
 801f628:	2b02      	cmp	r3, #2
 801f62a:	d00e      	beq.n	801f64a <USB_ActivateEndpoint+0x56>
 801f62c:	dc25      	bgt.n	801f67a <USB_ActivateEndpoint+0x86>
 801f62e:	2b00      	cmp	r3, #0
 801f630:	d002      	beq.n	801f638 <USB_ActivateEndpoint+0x44>
 801f632:	2b01      	cmp	r3, #1
 801f634:	d018      	beq.n	801f668 <USB_ActivateEndpoint+0x74>
 801f636:	e020      	b.n	801f67a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801f638:	226c      	movs	r2, #108	@ 0x6c
 801f63a:	18bb      	adds	r3, r7, r2
 801f63c:	18ba      	adds	r2, r7, r2
 801f63e:	8812      	ldrh	r2, [r2, #0]
 801f640:	2180      	movs	r1, #128	@ 0x80
 801f642:	0089      	lsls	r1, r1, #2
 801f644:	430a      	orrs	r2, r1
 801f646:	801a      	strh	r2, [r3, #0]
      break;
 801f648:	e01c      	b.n	801f684 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801f64a:	226c      	movs	r2, #108	@ 0x6c
 801f64c:	18bb      	adds	r3, r7, r2
 801f64e:	18ba      	adds	r2, r7, r2
 801f650:	8812      	ldrh	r2, [r2, #0]
 801f652:	801a      	strh	r2, [r3, #0]
      break;
 801f654:	e016      	b.n	801f684 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801f656:	226c      	movs	r2, #108	@ 0x6c
 801f658:	18bb      	adds	r3, r7, r2
 801f65a:	18ba      	adds	r2, r7, r2
 801f65c:	8812      	ldrh	r2, [r2, #0]
 801f65e:	21c0      	movs	r1, #192	@ 0xc0
 801f660:	00c9      	lsls	r1, r1, #3
 801f662:	430a      	orrs	r2, r1
 801f664:	801a      	strh	r2, [r3, #0]
      break;
 801f666:	e00d      	b.n	801f684 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801f668:	226c      	movs	r2, #108	@ 0x6c
 801f66a:	18bb      	adds	r3, r7, r2
 801f66c:	18ba      	adds	r2, r7, r2
 801f66e:	8812      	ldrh	r2, [r2, #0]
 801f670:	2180      	movs	r1, #128	@ 0x80
 801f672:	00c9      	lsls	r1, r1, #3
 801f674:	430a      	orrs	r2, r1
 801f676:	801a      	strh	r2, [r3, #0]
      break;
 801f678:	e004      	b.n	801f684 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801f67a:	236f      	movs	r3, #111	@ 0x6f
 801f67c:	18fb      	adds	r3, r7, r3
 801f67e:	2201      	movs	r2, #1
 801f680:	701a      	strb	r2, [r3, #0]
      break;
 801f682:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801f684:	687a      	ldr	r2, [r7, #4]
 801f686:	683b      	ldr	r3, [r7, #0]
 801f688:	781b      	ldrb	r3, [r3, #0]
 801f68a:	009b      	lsls	r3, r3, #2
 801f68c:	18d3      	adds	r3, r2, r3
 801f68e:	226c      	movs	r2, #108	@ 0x6c
 801f690:	18ba      	adds	r2, r7, r2
 801f692:	8812      	ldrh	r2, [r2, #0]
 801f694:	4985      	ldr	r1, [pc, #532]	@ (801f8ac <USB_ActivateEndpoint+0x2b8>)
 801f696:	430a      	orrs	r2, r1
 801f698:	b292      	uxth	r2, r2
 801f69a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801f69c:	687a      	ldr	r2, [r7, #4]
 801f69e:	683b      	ldr	r3, [r7, #0]
 801f6a0:	781b      	ldrb	r3, [r3, #0]
 801f6a2:	009b      	lsls	r3, r3, #2
 801f6a4:	18d3      	adds	r3, r2, r3
 801f6a6:	881b      	ldrh	r3, [r3, #0]
 801f6a8:	b29b      	uxth	r3, r3
 801f6aa:	b21b      	sxth	r3, r3
 801f6ac:	4a80      	ldr	r2, [pc, #512]	@ (801f8b0 <USB_ActivateEndpoint+0x2bc>)
 801f6ae:	4013      	ands	r3, r2
 801f6b0:	b21a      	sxth	r2, r3
 801f6b2:	683b      	ldr	r3, [r7, #0]
 801f6b4:	781b      	ldrb	r3, [r3, #0]
 801f6b6:	b21b      	sxth	r3, r3
 801f6b8:	4313      	orrs	r3, r2
 801f6ba:	b21a      	sxth	r2, r3
 801f6bc:	2166      	movs	r1, #102	@ 0x66
 801f6be:	187b      	adds	r3, r7, r1
 801f6c0:	801a      	strh	r2, [r3, #0]
 801f6c2:	687a      	ldr	r2, [r7, #4]
 801f6c4:	683b      	ldr	r3, [r7, #0]
 801f6c6:	781b      	ldrb	r3, [r3, #0]
 801f6c8:	009b      	lsls	r3, r3, #2
 801f6ca:	18d3      	adds	r3, r2, r3
 801f6cc:	187a      	adds	r2, r7, r1
 801f6ce:	8812      	ldrh	r2, [r2, #0]
 801f6d0:	4976      	ldr	r1, [pc, #472]	@ (801f8ac <USB_ActivateEndpoint+0x2b8>)
 801f6d2:	430a      	orrs	r2, r1
 801f6d4:	b292      	uxth	r2, r2
 801f6d6:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801f6d8:	683b      	ldr	r3, [r7, #0]
 801f6da:	7b1b      	ldrb	r3, [r3, #12]
 801f6dc:	2b00      	cmp	r3, #0
 801f6de:	d000      	beq.n	801f6e2 <USB_ActivateEndpoint+0xee>
 801f6e0:	e178      	b.n	801f9d4 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801f6e2:	683b      	ldr	r3, [r7, #0]
 801f6e4:	785b      	ldrb	r3, [r3, #1]
 801f6e6:	2b00      	cmp	r3, #0
 801f6e8:	d100      	bne.n	801f6ec <USB_ActivateEndpoint+0xf8>
 801f6ea:	e07a      	b.n	801f7e2 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801f6ec:	687b      	ldr	r3, [r7, #4]
 801f6ee:	61bb      	str	r3, [r7, #24]
 801f6f0:	687b      	ldr	r3, [r7, #4]
 801f6f2:	2250      	movs	r2, #80	@ 0x50
 801f6f4:	5a9b      	ldrh	r3, [r3, r2]
 801f6f6:	b29b      	uxth	r3, r3
 801f6f8:	001a      	movs	r2, r3
 801f6fa:	69bb      	ldr	r3, [r7, #24]
 801f6fc:	189b      	adds	r3, r3, r2
 801f6fe:	61bb      	str	r3, [r7, #24]
 801f700:	683b      	ldr	r3, [r7, #0]
 801f702:	781b      	ldrb	r3, [r3, #0]
 801f704:	00da      	lsls	r2, r3, #3
 801f706:	69bb      	ldr	r3, [r7, #24]
 801f708:	18d3      	adds	r3, r2, r3
 801f70a:	2280      	movs	r2, #128	@ 0x80
 801f70c:	00d2      	lsls	r2, r2, #3
 801f70e:	4694      	mov	ip, r2
 801f710:	4463      	add	r3, ip
 801f712:	617b      	str	r3, [r7, #20]
 801f714:	683b      	ldr	r3, [r7, #0]
 801f716:	88db      	ldrh	r3, [r3, #6]
 801f718:	085b      	lsrs	r3, r3, #1
 801f71a:	b29b      	uxth	r3, r3
 801f71c:	18db      	adds	r3, r3, r3
 801f71e:	b29a      	uxth	r2, r3
 801f720:	697b      	ldr	r3, [r7, #20]
 801f722:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f724:	687a      	ldr	r2, [r7, #4]
 801f726:	683b      	ldr	r3, [r7, #0]
 801f728:	781b      	ldrb	r3, [r3, #0]
 801f72a:	009b      	lsls	r3, r3, #2
 801f72c:	18d2      	adds	r2, r2, r3
 801f72e:	2112      	movs	r1, #18
 801f730:	187b      	adds	r3, r7, r1
 801f732:	8812      	ldrh	r2, [r2, #0]
 801f734:	801a      	strh	r2, [r3, #0]
 801f736:	187b      	adds	r3, r7, r1
 801f738:	881b      	ldrh	r3, [r3, #0]
 801f73a:	2240      	movs	r2, #64	@ 0x40
 801f73c:	4013      	ands	r3, r2
 801f73e:	d016      	beq.n	801f76e <USB_ActivateEndpoint+0x17a>
 801f740:	687a      	ldr	r2, [r7, #4]
 801f742:	683b      	ldr	r3, [r7, #0]
 801f744:	781b      	ldrb	r3, [r3, #0]
 801f746:	009b      	lsls	r3, r3, #2
 801f748:	18d3      	adds	r3, r2, r3
 801f74a:	881b      	ldrh	r3, [r3, #0]
 801f74c:	b29a      	uxth	r2, r3
 801f74e:	2010      	movs	r0, #16
 801f750:	183b      	adds	r3, r7, r0
 801f752:	4957      	ldr	r1, [pc, #348]	@ (801f8b0 <USB_ActivateEndpoint+0x2bc>)
 801f754:	400a      	ands	r2, r1
 801f756:	801a      	strh	r2, [r3, #0]
 801f758:	687a      	ldr	r2, [r7, #4]
 801f75a:	683b      	ldr	r3, [r7, #0]
 801f75c:	781b      	ldrb	r3, [r3, #0]
 801f75e:	009b      	lsls	r3, r3, #2
 801f760:	18d3      	adds	r3, r2, r3
 801f762:	183a      	adds	r2, r7, r0
 801f764:	8812      	ldrh	r2, [r2, #0]
 801f766:	4953      	ldr	r1, [pc, #332]	@ (801f8b4 <USB_ActivateEndpoint+0x2c0>)
 801f768:	430a      	orrs	r2, r1
 801f76a:	b292      	uxth	r2, r2
 801f76c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801f76e:	683b      	ldr	r3, [r7, #0]
 801f770:	78db      	ldrb	r3, [r3, #3]
 801f772:	2b01      	cmp	r3, #1
 801f774:	d01d      	beq.n	801f7b2 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801f776:	687a      	ldr	r2, [r7, #4]
 801f778:	683b      	ldr	r3, [r7, #0]
 801f77a:	781b      	ldrb	r3, [r3, #0]
 801f77c:	009b      	lsls	r3, r3, #2
 801f77e:	18d3      	adds	r3, r2, r3
 801f780:	881b      	ldrh	r3, [r3, #0]
 801f782:	b29a      	uxth	r2, r3
 801f784:	200c      	movs	r0, #12
 801f786:	183b      	adds	r3, r7, r0
 801f788:	494b      	ldr	r1, [pc, #300]	@ (801f8b8 <USB_ActivateEndpoint+0x2c4>)
 801f78a:	400a      	ands	r2, r1
 801f78c:	801a      	strh	r2, [r3, #0]
 801f78e:	183b      	adds	r3, r7, r0
 801f790:	183a      	adds	r2, r7, r0
 801f792:	8812      	ldrh	r2, [r2, #0]
 801f794:	2120      	movs	r1, #32
 801f796:	404a      	eors	r2, r1
 801f798:	801a      	strh	r2, [r3, #0]
 801f79a:	687a      	ldr	r2, [r7, #4]
 801f79c:	683b      	ldr	r3, [r7, #0]
 801f79e:	781b      	ldrb	r3, [r3, #0]
 801f7a0:	009b      	lsls	r3, r3, #2
 801f7a2:	18d3      	adds	r3, r2, r3
 801f7a4:	183a      	adds	r2, r7, r0
 801f7a6:	8812      	ldrh	r2, [r2, #0]
 801f7a8:	4940      	ldr	r1, [pc, #256]	@ (801f8ac <USB_ActivateEndpoint+0x2b8>)
 801f7aa:	430a      	orrs	r2, r1
 801f7ac:	b292      	uxth	r2, r2
 801f7ae:	801a      	strh	r2, [r3, #0]
 801f7b0:	e2b4      	b.n	801fd1c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f7b2:	687a      	ldr	r2, [r7, #4]
 801f7b4:	683b      	ldr	r3, [r7, #0]
 801f7b6:	781b      	ldrb	r3, [r3, #0]
 801f7b8:	009b      	lsls	r3, r3, #2
 801f7ba:	18d3      	adds	r3, r2, r3
 801f7bc:	881b      	ldrh	r3, [r3, #0]
 801f7be:	b29a      	uxth	r2, r3
 801f7c0:	200e      	movs	r0, #14
 801f7c2:	183b      	adds	r3, r7, r0
 801f7c4:	493c      	ldr	r1, [pc, #240]	@ (801f8b8 <USB_ActivateEndpoint+0x2c4>)
 801f7c6:	400a      	ands	r2, r1
 801f7c8:	801a      	strh	r2, [r3, #0]
 801f7ca:	687a      	ldr	r2, [r7, #4]
 801f7cc:	683b      	ldr	r3, [r7, #0]
 801f7ce:	781b      	ldrb	r3, [r3, #0]
 801f7d0:	009b      	lsls	r3, r3, #2
 801f7d2:	18d3      	adds	r3, r2, r3
 801f7d4:	183a      	adds	r2, r7, r0
 801f7d6:	8812      	ldrh	r2, [r2, #0]
 801f7d8:	4934      	ldr	r1, [pc, #208]	@ (801f8ac <USB_ActivateEndpoint+0x2b8>)
 801f7da:	430a      	orrs	r2, r1
 801f7dc:	b292      	uxth	r2, r2
 801f7de:	801a      	strh	r2, [r3, #0]
 801f7e0:	e29c      	b.n	801fd1c <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801f7e2:	687b      	ldr	r3, [r7, #4]
 801f7e4:	633b      	str	r3, [r7, #48]	@ 0x30
 801f7e6:	687b      	ldr	r3, [r7, #4]
 801f7e8:	2250      	movs	r2, #80	@ 0x50
 801f7ea:	5a9b      	ldrh	r3, [r3, r2]
 801f7ec:	b29b      	uxth	r3, r3
 801f7ee:	001a      	movs	r2, r3
 801f7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f7f2:	189b      	adds	r3, r3, r2
 801f7f4:	633b      	str	r3, [r7, #48]	@ 0x30
 801f7f6:	683b      	ldr	r3, [r7, #0]
 801f7f8:	781b      	ldrb	r3, [r3, #0]
 801f7fa:	00da      	lsls	r2, r3, #3
 801f7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f7fe:	18d3      	adds	r3, r2, r3
 801f800:	4a2e      	ldr	r2, [pc, #184]	@ (801f8bc <USB_ActivateEndpoint+0x2c8>)
 801f802:	4694      	mov	ip, r2
 801f804:	4463      	add	r3, ip
 801f806:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f808:	683b      	ldr	r3, [r7, #0]
 801f80a:	88db      	ldrh	r3, [r3, #6]
 801f80c:	085b      	lsrs	r3, r3, #1
 801f80e:	b29b      	uxth	r3, r3
 801f810:	18db      	adds	r3, r3, r3
 801f812:	b29a      	uxth	r2, r3
 801f814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f816:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801f818:	687b      	ldr	r3, [r7, #4]
 801f81a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f81c:	687b      	ldr	r3, [r7, #4]
 801f81e:	2250      	movs	r2, #80	@ 0x50
 801f820:	5a9b      	ldrh	r3, [r3, r2]
 801f822:	b29b      	uxth	r3, r3
 801f824:	001a      	movs	r2, r3
 801f826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f828:	189b      	adds	r3, r3, r2
 801f82a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f82c:	683b      	ldr	r3, [r7, #0]
 801f82e:	781b      	ldrb	r3, [r3, #0]
 801f830:	00da      	lsls	r2, r3, #3
 801f832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f834:	18d3      	adds	r3, r2, r3
 801f836:	4a22      	ldr	r2, [pc, #136]	@ (801f8c0 <USB_ActivateEndpoint+0x2cc>)
 801f838:	4694      	mov	ip, r2
 801f83a:	4463      	add	r3, ip
 801f83c:	627b      	str	r3, [r7, #36]	@ 0x24
 801f83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f840:	881b      	ldrh	r3, [r3, #0]
 801f842:	b29b      	uxth	r3, r3
 801f844:	059b      	lsls	r3, r3, #22
 801f846:	0d9b      	lsrs	r3, r3, #22
 801f848:	b29a      	uxth	r2, r3
 801f84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f84c:	801a      	strh	r2, [r3, #0]
 801f84e:	683b      	ldr	r3, [r7, #0]
 801f850:	691b      	ldr	r3, [r3, #16]
 801f852:	2b3e      	cmp	r3, #62	@ 0x3e
 801f854:	d91a      	bls.n	801f88c <USB_ActivateEndpoint+0x298>
 801f856:	683b      	ldr	r3, [r7, #0]
 801f858:	691b      	ldr	r3, [r3, #16]
 801f85a:	095b      	lsrs	r3, r3, #5
 801f85c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f85e:	683b      	ldr	r3, [r7, #0]
 801f860:	691b      	ldr	r3, [r3, #16]
 801f862:	221f      	movs	r2, #31
 801f864:	4013      	ands	r3, r2
 801f866:	d102      	bne.n	801f86e <USB_ActivateEndpoint+0x27a>
 801f868:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f86a:	3b01      	subs	r3, #1
 801f86c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f870:	881b      	ldrh	r3, [r3, #0]
 801f872:	b29a      	uxth	r2, r3
 801f874:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f876:	b29b      	uxth	r3, r3
 801f878:	029b      	lsls	r3, r3, #10
 801f87a:	b29b      	uxth	r3, r3
 801f87c:	4313      	orrs	r3, r2
 801f87e:	b29b      	uxth	r3, r3
 801f880:	4a10      	ldr	r2, [pc, #64]	@ (801f8c4 <USB_ActivateEndpoint+0x2d0>)
 801f882:	4313      	orrs	r3, r2
 801f884:	b29a      	uxth	r2, r3
 801f886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f888:	801a      	strh	r2, [r3, #0]
 801f88a:	e034      	b.n	801f8f6 <USB_ActivateEndpoint+0x302>
 801f88c:	683b      	ldr	r3, [r7, #0]
 801f88e:	691b      	ldr	r3, [r3, #16]
 801f890:	2b00      	cmp	r3, #0
 801f892:	d119      	bne.n	801f8c8 <USB_ActivateEndpoint+0x2d4>
 801f894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f896:	881b      	ldrh	r3, [r3, #0]
 801f898:	b29b      	uxth	r3, r3
 801f89a:	4a0a      	ldr	r2, [pc, #40]	@ (801f8c4 <USB_ActivateEndpoint+0x2d0>)
 801f89c:	4313      	orrs	r3, r2
 801f89e:	b29a      	uxth	r2, r3
 801f8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f8a2:	801a      	strh	r2, [r3, #0]
 801f8a4:	e027      	b.n	801f8f6 <USB_ActivateEndpoint+0x302>
 801f8a6:	46c0      	nop			@ (mov r8, r8)
 801f8a8:	ffff898f 	.word	0xffff898f
 801f8ac:	ffff8080 	.word	0xffff8080
 801f8b0:	ffff8f8f 	.word	0xffff8f8f
 801f8b4:	ffff80c0 	.word	0xffff80c0
 801f8b8:	ffff8fbf 	.word	0xffff8fbf
 801f8bc:	00000404 	.word	0x00000404
 801f8c0:	00000406 	.word	0x00000406
 801f8c4:	ffff8000 	.word	0xffff8000
 801f8c8:	683b      	ldr	r3, [r7, #0]
 801f8ca:	691b      	ldr	r3, [r3, #16]
 801f8cc:	085b      	lsrs	r3, r3, #1
 801f8ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f8d0:	683b      	ldr	r3, [r7, #0]
 801f8d2:	691b      	ldr	r3, [r3, #16]
 801f8d4:	2201      	movs	r2, #1
 801f8d6:	4013      	ands	r3, r2
 801f8d8:	d002      	beq.n	801f8e0 <USB_ActivateEndpoint+0x2ec>
 801f8da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f8dc:	3301      	adds	r3, #1
 801f8de:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f8e2:	881b      	ldrh	r3, [r3, #0]
 801f8e4:	b29a      	uxth	r2, r3
 801f8e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f8e8:	b29b      	uxth	r3, r3
 801f8ea:	029b      	lsls	r3, r3, #10
 801f8ec:	b29b      	uxth	r3, r3
 801f8ee:	4313      	orrs	r3, r2
 801f8f0:	b29a      	uxth	r2, r3
 801f8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f8f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f8f6:	687a      	ldr	r2, [r7, #4]
 801f8f8:	683b      	ldr	r3, [r7, #0]
 801f8fa:	781b      	ldrb	r3, [r3, #0]
 801f8fc:	009b      	lsls	r3, r3, #2
 801f8fe:	18d2      	adds	r2, r2, r3
 801f900:	2122      	movs	r1, #34	@ 0x22
 801f902:	187b      	adds	r3, r7, r1
 801f904:	8812      	ldrh	r2, [r2, #0]
 801f906:	801a      	strh	r2, [r3, #0]
 801f908:	187b      	adds	r3, r7, r1
 801f90a:	881a      	ldrh	r2, [r3, #0]
 801f90c:	2380      	movs	r3, #128	@ 0x80
 801f90e:	01db      	lsls	r3, r3, #7
 801f910:	4013      	ands	r3, r2
 801f912:	d016      	beq.n	801f942 <USB_ActivateEndpoint+0x34e>
 801f914:	687a      	ldr	r2, [r7, #4]
 801f916:	683b      	ldr	r3, [r7, #0]
 801f918:	781b      	ldrb	r3, [r3, #0]
 801f91a:	009b      	lsls	r3, r3, #2
 801f91c:	18d3      	adds	r3, r2, r3
 801f91e:	881b      	ldrh	r3, [r3, #0]
 801f920:	b29a      	uxth	r2, r3
 801f922:	2020      	movs	r0, #32
 801f924:	183b      	adds	r3, r7, r0
 801f926:	49dd      	ldr	r1, [pc, #884]	@ (801fc9c <USB_ActivateEndpoint+0x6a8>)
 801f928:	400a      	ands	r2, r1
 801f92a:	801a      	strh	r2, [r3, #0]
 801f92c:	687a      	ldr	r2, [r7, #4]
 801f92e:	683b      	ldr	r3, [r7, #0]
 801f930:	781b      	ldrb	r3, [r3, #0]
 801f932:	009b      	lsls	r3, r3, #2
 801f934:	18d3      	adds	r3, r2, r3
 801f936:	183a      	adds	r2, r7, r0
 801f938:	8812      	ldrh	r2, [r2, #0]
 801f93a:	49d9      	ldr	r1, [pc, #868]	@ (801fca0 <USB_ActivateEndpoint+0x6ac>)
 801f93c:	430a      	orrs	r2, r1
 801f93e:	b292      	uxth	r2, r2
 801f940:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801f942:	683b      	ldr	r3, [r7, #0]
 801f944:	781b      	ldrb	r3, [r3, #0]
 801f946:	2b00      	cmp	r3, #0
 801f948:	d125      	bne.n	801f996 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801f94a:	687a      	ldr	r2, [r7, #4]
 801f94c:	683b      	ldr	r3, [r7, #0]
 801f94e:	781b      	ldrb	r3, [r3, #0]
 801f950:	009b      	lsls	r3, r3, #2
 801f952:	18d3      	adds	r3, r2, r3
 801f954:	881b      	ldrh	r3, [r3, #0]
 801f956:	b29a      	uxth	r2, r3
 801f958:	201c      	movs	r0, #28
 801f95a:	183b      	adds	r3, r7, r0
 801f95c:	49d1      	ldr	r1, [pc, #836]	@ (801fca4 <USB_ActivateEndpoint+0x6b0>)
 801f95e:	400a      	ands	r2, r1
 801f960:	801a      	strh	r2, [r3, #0]
 801f962:	183b      	adds	r3, r7, r0
 801f964:	183a      	adds	r2, r7, r0
 801f966:	8812      	ldrh	r2, [r2, #0]
 801f968:	2180      	movs	r1, #128	@ 0x80
 801f96a:	0149      	lsls	r1, r1, #5
 801f96c:	404a      	eors	r2, r1
 801f96e:	801a      	strh	r2, [r3, #0]
 801f970:	183b      	adds	r3, r7, r0
 801f972:	183a      	adds	r2, r7, r0
 801f974:	8812      	ldrh	r2, [r2, #0]
 801f976:	2180      	movs	r1, #128	@ 0x80
 801f978:	0189      	lsls	r1, r1, #6
 801f97a:	404a      	eors	r2, r1
 801f97c:	801a      	strh	r2, [r3, #0]
 801f97e:	687a      	ldr	r2, [r7, #4]
 801f980:	683b      	ldr	r3, [r7, #0]
 801f982:	781b      	ldrb	r3, [r3, #0]
 801f984:	009b      	lsls	r3, r3, #2
 801f986:	18d3      	adds	r3, r2, r3
 801f988:	183a      	adds	r2, r7, r0
 801f98a:	8812      	ldrh	r2, [r2, #0]
 801f98c:	49c6      	ldr	r1, [pc, #792]	@ (801fca8 <USB_ActivateEndpoint+0x6b4>)
 801f98e:	430a      	orrs	r2, r1
 801f990:	b292      	uxth	r2, r2
 801f992:	801a      	strh	r2, [r3, #0]
 801f994:	e1c2      	b.n	801fd1c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801f996:	687a      	ldr	r2, [r7, #4]
 801f998:	683b      	ldr	r3, [r7, #0]
 801f99a:	781b      	ldrb	r3, [r3, #0]
 801f99c:	009b      	lsls	r3, r3, #2
 801f99e:	18d3      	adds	r3, r2, r3
 801f9a0:	881b      	ldrh	r3, [r3, #0]
 801f9a2:	b29a      	uxth	r2, r3
 801f9a4:	201e      	movs	r0, #30
 801f9a6:	183b      	adds	r3, r7, r0
 801f9a8:	49be      	ldr	r1, [pc, #760]	@ (801fca4 <USB_ActivateEndpoint+0x6b0>)
 801f9aa:	400a      	ands	r2, r1
 801f9ac:	801a      	strh	r2, [r3, #0]
 801f9ae:	183b      	adds	r3, r7, r0
 801f9b0:	183a      	adds	r2, r7, r0
 801f9b2:	8812      	ldrh	r2, [r2, #0]
 801f9b4:	2180      	movs	r1, #128	@ 0x80
 801f9b6:	0189      	lsls	r1, r1, #6
 801f9b8:	404a      	eors	r2, r1
 801f9ba:	801a      	strh	r2, [r3, #0]
 801f9bc:	687a      	ldr	r2, [r7, #4]
 801f9be:	683b      	ldr	r3, [r7, #0]
 801f9c0:	781b      	ldrb	r3, [r3, #0]
 801f9c2:	009b      	lsls	r3, r3, #2
 801f9c4:	18d3      	adds	r3, r2, r3
 801f9c6:	183a      	adds	r2, r7, r0
 801f9c8:	8812      	ldrh	r2, [r2, #0]
 801f9ca:	49b7      	ldr	r1, [pc, #732]	@ (801fca8 <USB_ActivateEndpoint+0x6b4>)
 801f9cc:	430a      	orrs	r2, r1
 801f9ce:	b292      	uxth	r2, r2
 801f9d0:	801a      	strh	r2, [r3, #0]
 801f9d2:	e1a3      	b.n	801fd1c <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801f9d4:	683b      	ldr	r3, [r7, #0]
 801f9d6:	78db      	ldrb	r3, [r3, #3]
 801f9d8:	2b02      	cmp	r3, #2
 801f9da:	d117      	bne.n	801fa0c <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801f9dc:	687a      	ldr	r2, [r7, #4]
 801f9de:	683b      	ldr	r3, [r7, #0]
 801f9e0:	781b      	ldrb	r3, [r3, #0]
 801f9e2:	009b      	lsls	r3, r3, #2
 801f9e4:	18d3      	adds	r3, r2, r3
 801f9e6:	881b      	ldrh	r3, [r3, #0]
 801f9e8:	b29a      	uxth	r2, r3
 801f9ea:	2062      	movs	r0, #98	@ 0x62
 801f9ec:	183b      	adds	r3, r7, r0
 801f9ee:	49ab      	ldr	r1, [pc, #684]	@ (801fc9c <USB_ActivateEndpoint+0x6a8>)
 801f9f0:	400a      	ands	r2, r1
 801f9f2:	801a      	strh	r2, [r3, #0]
 801f9f4:	687a      	ldr	r2, [r7, #4]
 801f9f6:	683b      	ldr	r3, [r7, #0]
 801f9f8:	781b      	ldrb	r3, [r3, #0]
 801f9fa:	009b      	lsls	r3, r3, #2
 801f9fc:	18d3      	adds	r3, r2, r3
 801f9fe:	183a      	adds	r2, r7, r0
 801fa00:	8812      	ldrh	r2, [r2, #0]
 801fa02:	49aa      	ldr	r1, [pc, #680]	@ (801fcac <USB_ActivateEndpoint+0x6b8>)
 801fa04:	430a      	orrs	r2, r1
 801fa06:	b292      	uxth	r2, r2
 801fa08:	801a      	strh	r2, [r3, #0]
 801fa0a:	e016      	b.n	801fa3a <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801fa0c:	687a      	ldr	r2, [r7, #4]
 801fa0e:	683b      	ldr	r3, [r7, #0]
 801fa10:	781b      	ldrb	r3, [r3, #0]
 801fa12:	009b      	lsls	r3, r3, #2
 801fa14:	18d3      	adds	r3, r2, r3
 801fa16:	881b      	ldrh	r3, [r3, #0]
 801fa18:	b29a      	uxth	r2, r3
 801fa1a:	2064      	movs	r0, #100	@ 0x64
 801fa1c:	183b      	adds	r3, r7, r0
 801fa1e:	49a4      	ldr	r1, [pc, #656]	@ (801fcb0 <USB_ActivateEndpoint+0x6bc>)
 801fa20:	400a      	ands	r2, r1
 801fa22:	801a      	strh	r2, [r3, #0]
 801fa24:	687a      	ldr	r2, [r7, #4]
 801fa26:	683b      	ldr	r3, [r7, #0]
 801fa28:	781b      	ldrb	r3, [r3, #0]
 801fa2a:	009b      	lsls	r3, r3, #2
 801fa2c:	18d3      	adds	r3, r2, r3
 801fa2e:	183a      	adds	r2, r7, r0
 801fa30:	8812      	ldrh	r2, [r2, #0]
 801fa32:	499d      	ldr	r1, [pc, #628]	@ (801fca8 <USB_ActivateEndpoint+0x6b4>)
 801fa34:	430a      	orrs	r2, r1
 801fa36:	b292      	uxth	r2, r2
 801fa38:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801fa3a:	687b      	ldr	r3, [r7, #4]
 801fa3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801fa3e:	687b      	ldr	r3, [r7, #4]
 801fa40:	2250      	movs	r2, #80	@ 0x50
 801fa42:	5a9b      	ldrh	r3, [r3, r2]
 801fa44:	b29b      	uxth	r3, r3
 801fa46:	001a      	movs	r2, r3
 801fa48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801fa4a:	189b      	adds	r3, r3, r2
 801fa4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801fa4e:	683b      	ldr	r3, [r7, #0]
 801fa50:	781b      	ldrb	r3, [r3, #0]
 801fa52:	00da      	lsls	r2, r3, #3
 801fa54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801fa56:	18d3      	adds	r3, r2, r3
 801fa58:	2280      	movs	r2, #128	@ 0x80
 801fa5a:	00d2      	lsls	r2, r2, #3
 801fa5c:	4694      	mov	ip, r2
 801fa5e:	4463      	add	r3, ip
 801fa60:	65bb      	str	r3, [r7, #88]	@ 0x58
 801fa62:	683b      	ldr	r3, [r7, #0]
 801fa64:	891b      	ldrh	r3, [r3, #8]
 801fa66:	085b      	lsrs	r3, r3, #1
 801fa68:	b29b      	uxth	r3, r3
 801fa6a:	18db      	adds	r3, r3, r3
 801fa6c:	b29a      	uxth	r2, r3
 801fa6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801fa70:	801a      	strh	r2, [r3, #0]
 801fa72:	687b      	ldr	r3, [r7, #4]
 801fa74:	657b      	str	r3, [r7, #84]	@ 0x54
 801fa76:	687b      	ldr	r3, [r7, #4]
 801fa78:	2250      	movs	r2, #80	@ 0x50
 801fa7a:	5a9b      	ldrh	r3, [r3, r2]
 801fa7c:	b29b      	uxth	r3, r3
 801fa7e:	001a      	movs	r2, r3
 801fa80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fa82:	189b      	adds	r3, r3, r2
 801fa84:	657b      	str	r3, [r7, #84]	@ 0x54
 801fa86:	683b      	ldr	r3, [r7, #0]
 801fa88:	781b      	ldrb	r3, [r3, #0]
 801fa8a:	00da      	lsls	r2, r3, #3
 801fa8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fa8e:	18d3      	adds	r3, r2, r3
 801fa90:	4a88      	ldr	r2, [pc, #544]	@ (801fcb4 <USB_ActivateEndpoint+0x6c0>)
 801fa92:	4694      	mov	ip, r2
 801fa94:	4463      	add	r3, ip
 801fa96:	653b      	str	r3, [r7, #80]	@ 0x50
 801fa98:	683b      	ldr	r3, [r7, #0]
 801fa9a:	895b      	ldrh	r3, [r3, #10]
 801fa9c:	085b      	lsrs	r3, r3, #1
 801fa9e:	b29b      	uxth	r3, r3
 801faa0:	18db      	adds	r3, r3, r3
 801faa2:	b29a      	uxth	r2, r3
 801faa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801faa6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801faa8:	683b      	ldr	r3, [r7, #0]
 801faaa:	785b      	ldrb	r3, [r3, #1]
 801faac:	2b00      	cmp	r3, #0
 801faae:	d000      	beq.n	801fab2 <USB_ActivateEndpoint+0x4be>
 801fab0:	e087      	b.n	801fbc2 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fab2:	687a      	ldr	r2, [r7, #4]
 801fab4:	683b      	ldr	r3, [r7, #0]
 801fab6:	781b      	ldrb	r3, [r3, #0]
 801fab8:	009b      	lsls	r3, r3, #2
 801faba:	18d2      	adds	r2, r2, r3
 801fabc:	2140      	movs	r1, #64	@ 0x40
 801fabe:	187b      	adds	r3, r7, r1
 801fac0:	8812      	ldrh	r2, [r2, #0]
 801fac2:	801a      	strh	r2, [r3, #0]
 801fac4:	187b      	adds	r3, r7, r1
 801fac6:	881a      	ldrh	r2, [r3, #0]
 801fac8:	2380      	movs	r3, #128	@ 0x80
 801faca:	01db      	lsls	r3, r3, #7
 801facc:	4013      	ands	r3, r2
 801face:	d016      	beq.n	801fafe <USB_ActivateEndpoint+0x50a>
 801fad0:	687a      	ldr	r2, [r7, #4]
 801fad2:	683b      	ldr	r3, [r7, #0]
 801fad4:	781b      	ldrb	r3, [r3, #0]
 801fad6:	009b      	lsls	r3, r3, #2
 801fad8:	18d3      	adds	r3, r2, r3
 801fada:	881b      	ldrh	r3, [r3, #0]
 801fadc:	b29a      	uxth	r2, r3
 801fade:	203e      	movs	r0, #62	@ 0x3e
 801fae0:	183b      	adds	r3, r7, r0
 801fae2:	496e      	ldr	r1, [pc, #440]	@ (801fc9c <USB_ActivateEndpoint+0x6a8>)
 801fae4:	400a      	ands	r2, r1
 801fae6:	801a      	strh	r2, [r3, #0]
 801fae8:	687a      	ldr	r2, [r7, #4]
 801faea:	683b      	ldr	r3, [r7, #0]
 801faec:	781b      	ldrb	r3, [r3, #0]
 801faee:	009b      	lsls	r3, r3, #2
 801faf0:	18d3      	adds	r3, r2, r3
 801faf2:	183a      	adds	r2, r7, r0
 801faf4:	8812      	ldrh	r2, [r2, #0]
 801faf6:	496a      	ldr	r1, [pc, #424]	@ (801fca0 <USB_ActivateEndpoint+0x6ac>)
 801faf8:	430a      	orrs	r2, r1
 801fafa:	b292      	uxth	r2, r2
 801fafc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fafe:	687a      	ldr	r2, [r7, #4]
 801fb00:	683b      	ldr	r3, [r7, #0]
 801fb02:	781b      	ldrb	r3, [r3, #0]
 801fb04:	009b      	lsls	r3, r3, #2
 801fb06:	18d2      	adds	r2, r2, r3
 801fb08:	213c      	movs	r1, #60	@ 0x3c
 801fb0a:	187b      	adds	r3, r7, r1
 801fb0c:	8812      	ldrh	r2, [r2, #0]
 801fb0e:	801a      	strh	r2, [r3, #0]
 801fb10:	187b      	adds	r3, r7, r1
 801fb12:	881b      	ldrh	r3, [r3, #0]
 801fb14:	2240      	movs	r2, #64	@ 0x40
 801fb16:	4013      	ands	r3, r2
 801fb18:	d016      	beq.n	801fb48 <USB_ActivateEndpoint+0x554>
 801fb1a:	687a      	ldr	r2, [r7, #4]
 801fb1c:	683b      	ldr	r3, [r7, #0]
 801fb1e:	781b      	ldrb	r3, [r3, #0]
 801fb20:	009b      	lsls	r3, r3, #2
 801fb22:	18d3      	adds	r3, r2, r3
 801fb24:	881b      	ldrh	r3, [r3, #0]
 801fb26:	b29a      	uxth	r2, r3
 801fb28:	203a      	movs	r0, #58	@ 0x3a
 801fb2a:	183b      	adds	r3, r7, r0
 801fb2c:	495b      	ldr	r1, [pc, #364]	@ (801fc9c <USB_ActivateEndpoint+0x6a8>)
 801fb2e:	400a      	ands	r2, r1
 801fb30:	801a      	strh	r2, [r3, #0]
 801fb32:	687a      	ldr	r2, [r7, #4]
 801fb34:	683b      	ldr	r3, [r7, #0]
 801fb36:	781b      	ldrb	r3, [r3, #0]
 801fb38:	009b      	lsls	r3, r3, #2
 801fb3a:	18d3      	adds	r3, r2, r3
 801fb3c:	183a      	adds	r2, r7, r0
 801fb3e:	8812      	ldrh	r2, [r2, #0]
 801fb40:	495d      	ldr	r1, [pc, #372]	@ (801fcb8 <USB_ActivateEndpoint+0x6c4>)
 801fb42:	430a      	orrs	r2, r1
 801fb44:	b292      	uxth	r2, r2
 801fb46:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801fb48:	687a      	ldr	r2, [r7, #4]
 801fb4a:	683b      	ldr	r3, [r7, #0]
 801fb4c:	781b      	ldrb	r3, [r3, #0]
 801fb4e:	009b      	lsls	r3, r3, #2
 801fb50:	18d3      	adds	r3, r2, r3
 801fb52:	881b      	ldrh	r3, [r3, #0]
 801fb54:	b29a      	uxth	r2, r3
 801fb56:	2038      	movs	r0, #56	@ 0x38
 801fb58:	183b      	adds	r3, r7, r0
 801fb5a:	4952      	ldr	r1, [pc, #328]	@ (801fca4 <USB_ActivateEndpoint+0x6b0>)
 801fb5c:	400a      	ands	r2, r1
 801fb5e:	801a      	strh	r2, [r3, #0]
 801fb60:	183b      	adds	r3, r7, r0
 801fb62:	183a      	adds	r2, r7, r0
 801fb64:	8812      	ldrh	r2, [r2, #0]
 801fb66:	2180      	movs	r1, #128	@ 0x80
 801fb68:	0149      	lsls	r1, r1, #5
 801fb6a:	404a      	eors	r2, r1
 801fb6c:	801a      	strh	r2, [r3, #0]
 801fb6e:	183b      	adds	r3, r7, r0
 801fb70:	183a      	adds	r2, r7, r0
 801fb72:	8812      	ldrh	r2, [r2, #0]
 801fb74:	2180      	movs	r1, #128	@ 0x80
 801fb76:	0189      	lsls	r1, r1, #6
 801fb78:	404a      	eors	r2, r1
 801fb7a:	801a      	strh	r2, [r3, #0]
 801fb7c:	687a      	ldr	r2, [r7, #4]
 801fb7e:	683b      	ldr	r3, [r7, #0]
 801fb80:	781b      	ldrb	r3, [r3, #0]
 801fb82:	009b      	lsls	r3, r3, #2
 801fb84:	18d3      	adds	r3, r2, r3
 801fb86:	183a      	adds	r2, r7, r0
 801fb88:	8812      	ldrh	r2, [r2, #0]
 801fb8a:	4947      	ldr	r1, [pc, #284]	@ (801fca8 <USB_ActivateEndpoint+0x6b4>)
 801fb8c:	430a      	orrs	r2, r1
 801fb8e:	b292      	uxth	r2, r2
 801fb90:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fb92:	687a      	ldr	r2, [r7, #4]
 801fb94:	683b      	ldr	r3, [r7, #0]
 801fb96:	781b      	ldrb	r3, [r3, #0]
 801fb98:	009b      	lsls	r3, r3, #2
 801fb9a:	18d3      	adds	r3, r2, r3
 801fb9c:	881b      	ldrh	r3, [r3, #0]
 801fb9e:	b29a      	uxth	r2, r3
 801fba0:	2036      	movs	r0, #54	@ 0x36
 801fba2:	183b      	adds	r3, r7, r0
 801fba4:	4945      	ldr	r1, [pc, #276]	@ (801fcbc <USB_ActivateEndpoint+0x6c8>)
 801fba6:	400a      	ands	r2, r1
 801fba8:	801a      	strh	r2, [r3, #0]
 801fbaa:	687a      	ldr	r2, [r7, #4]
 801fbac:	683b      	ldr	r3, [r7, #0]
 801fbae:	781b      	ldrb	r3, [r3, #0]
 801fbb0:	009b      	lsls	r3, r3, #2
 801fbb2:	18d3      	adds	r3, r2, r3
 801fbb4:	183a      	adds	r2, r7, r0
 801fbb6:	8812      	ldrh	r2, [r2, #0]
 801fbb8:	493b      	ldr	r1, [pc, #236]	@ (801fca8 <USB_ActivateEndpoint+0x6b4>)
 801fbba:	430a      	orrs	r2, r1
 801fbbc:	b292      	uxth	r2, r2
 801fbbe:	801a      	strh	r2, [r3, #0]
 801fbc0:	e0ac      	b.n	801fd1c <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fbc2:	687a      	ldr	r2, [r7, #4]
 801fbc4:	683b      	ldr	r3, [r7, #0]
 801fbc6:	781b      	ldrb	r3, [r3, #0]
 801fbc8:	009b      	lsls	r3, r3, #2
 801fbca:	18d2      	adds	r2, r2, r3
 801fbcc:	214e      	movs	r1, #78	@ 0x4e
 801fbce:	187b      	adds	r3, r7, r1
 801fbd0:	8812      	ldrh	r2, [r2, #0]
 801fbd2:	801a      	strh	r2, [r3, #0]
 801fbd4:	187b      	adds	r3, r7, r1
 801fbd6:	881a      	ldrh	r2, [r3, #0]
 801fbd8:	2380      	movs	r3, #128	@ 0x80
 801fbda:	01db      	lsls	r3, r3, #7
 801fbdc:	4013      	ands	r3, r2
 801fbde:	d016      	beq.n	801fc0e <USB_ActivateEndpoint+0x61a>
 801fbe0:	687a      	ldr	r2, [r7, #4]
 801fbe2:	683b      	ldr	r3, [r7, #0]
 801fbe4:	781b      	ldrb	r3, [r3, #0]
 801fbe6:	009b      	lsls	r3, r3, #2
 801fbe8:	18d3      	adds	r3, r2, r3
 801fbea:	881b      	ldrh	r3, [r3, #0]
 801fbec:	b29a      	uxth	r2, r3
 801fbee:	204c      	movs	r0, #76	@ 0x4c
 801fbf0:	183b      	adds	r3, r7, r0
 801fbf2:	492a      	ldr	r1, [pc, #168]	@ (801fc9c <USB_ActivateEndpoint+0x6a8>)
 801fbf4:	400a      	ands	r2, r1
 801fbf6:	801a      	strh	r2, [r3, #0]
 801fbf8:	687a      	ldr	r2, [r7, #4]
 801fbfa:	683b      	ldr	r3, [r7, #0]
 801fbfc:	781b      	ldrb	r3, [r3, #0]
 801fbfe:	009b      	lsls	r3, r3, #2
 801fc00:	18d3      	adds	r3, r2, r3
 801fc02:	183a      	adds	r2, r7, r0
 801fc04:	8812      	ldrh	r2, [r2, #0]
 801fc06:	4926      	ldr	r1, [pc, #152]	@ (801fca0 <USB_ActivateEndpoint+0x6ac>)
 801fc08:	430a      	orrs	r2, r1
 801fc0a:	b292      	uxth	r2, r2
 801fc0c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fc0e:	687a      	ldr	r2, [r7, #4]
 801fc10:	683b      	ldr	r3, [r7, #0]
 801fc12:	781b      	ldrb	r3, [r3, #0]
 801fc14:	009b      	lsls	r3, r3, #2
 801fc16:	18d2      	adds	r2, r2, r3
 801fc18:	214a      	movs	r1, #74	@ 0x4a
 801fc1a:	187b      	adds	r3, r7, r1
 801fc1c:	8812      	ldrh	r2, [r2, #0]
 801fc1e:	801a      	strh	r2, [r3, #0]
 801fc20:	187b      	adds	r3, r7, r1
 801fc22:	881b      	ldrh	r3, [r3, #0]
 801fc24:	2240      	movs	r2, #64	@ 0x40
 801fc26:	4013      	ands	r3, r2
 801fc28:	d016      	beq.n	801fc58 <USB_ActivateEndpoint+0x664>
 801fc2a:	687a      	ldr	r2, [r7, #4]
 801fc2c:	683b      	ldr	r3, [r7, #0]
 801fc2e:	781b      	ldrb	r3, [r3, #0]
 801fc30:	009b      	lsls	r3, r3, #2
 801fc32:	18d3      	adds	r3, r2, r3
 801fc34:	881b      	ldrh	r3, [r3, #0]
 801fc36:	b29a      	uxth	r2, r3
 801fc38:	2048      	movs	r0, #72	@ 0x48
 801fc3a:	183b      	adds	r3, r7, r0
 801fc3c:	4917      	ldr	r1, [pc, #92]	@ (801fc9c <USB_ActivateEndpoint+0x6a8>)
 801fc3e:	400a      	ands	r2, r1
 801fc40:	801a      	strh	r2, [r3, #0]
 801fc42:	687a      	ldr	r2, [r7, #4]
 801fc44:	683b      	ldr	r3, [r7, #0]
 801fc46:	781b      	ldrb	r3, [r3, #0]
 801fc48:	009b      	lsls	r3, r3, #2
 801fc4a:	18d3      	adds	r3, r2, r3
 801fc4c:	183a      	adds	r2, r7, r0
 801fc4e:	8812      	ldrh	r2, [r2, #0]
 801fc50:	4919      	ldr	r1, [pc, #100]	@ (801fcb8 <USB_ActivateEndpoint+0x6c4>)
 801fc52:	430a      	orrs	r2, r1
 801fc54:	b292      	uxth	r2, r2
 801fc56:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801fc58:	683b      	ldr	r3, [r7, #0]
 801fc5a:	78db      	ldrb	r3, [r3, #3]
 801fc5c:	2b01      	cmp	r3, #1
 801fc5e:	d02f      	beq.n	801fcc0 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801fc60:	687a      	ldr	r2, [r7, #4]
 801fc62:	683b      	ldr	r3, [r7, #0]
 801fc64:	781b      	ldrb	r3, [r3, #0]
 801fc66:	009b      	lsls	r3, r3, #2
 801fc68:	18d3      	adds	r3, r2, r3
 801fc6a:	881b      	ldrh	r3, [r3, #0]
 801fc6c:	b29a      	uxth	r2, r3
 801fc6e:	2044      	movs	r0, #68	@ 0x44
 801fc70:	183b      	adds	r3, r7, r0
 801fc72:	4912      	ldr	r1, [pc, #72]	@ (801fcbc <USB_ActivateEndpoint+0x6c8>)
 801fc74:	400a      	ands	r2, r1
 801fc76:	801a      	strh	r2, [r3, #0]
 801fc78:	183b      	adds	r3, r7, r0
 801fc7a:	183a      	adds	r2, r7, r0
 801fc7c:	8812      	ldrh	r2, [r2, #0]
 801fc7e:	2120      	movs	r1, #32
 801fc80:	404a      	eors	r2, r1
 801fc82:	801a      	strh	r2, [r3, #0]
 801fc84:	687a      	ldr	r2, [r7, #4]
 801fc86:	683b      	ldr	r3, [r7, #0]
 801fc88:	781b      	ldrb	r3, [r3, #0]
 801fc8a:	009b      	lsls	r3, r3, #2
 801fc8c:	18d3      	adds	r3, r2, r3
 801fc8e:	183a      	adds	r2, r7, r0
 801fc90:	8812      	ldrh	r2, [r2, #0]
 801fc92:	4905      	ldr	r1, [pc, #20]	@ (801fca8 <USB_ActivateEndpoint+0x6b4>)
 801fc94:	430a      	orrs	r2, r1
 801fc96:	b292      	uxth	r2, r2
 801fc98:	801a      	strh	r2, [r3, #0]
 801fc9a:	e028      	b.n	801fcee <USB_ActivateEndpoint+0x6fa>
 801fc9c:	ffff8f8f 	.word	0xffff8f8f
 801fca0:	ffffc080 	.word	0xffffc080
 801fca4:	ffffbf8f 	.word	0xffffbf8f
 801fca8:	ffff8080 	.word	0xffff8080
 801fcac:	ffff8180 	.word	0xffff8180
 801fcb0:	ffff8e8f 	.word	0xffff8e8f
 801fcb4:	00000404 	.word	0x00000404
 801fcb8:	ffff80c0 	.word	0xffff80c0
 801fcbc:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fcc0:	687a      	ldr	r2, [r7, #4]
 801fcc2:	683b      	ldr	r3, [r7, #0]
 801fcc4:	781b      	ldrb	r3, [r3, #0]
 801fcc6:	009b      	lsls	r3, r3, #2
 801fcc8:	18d3      	adds	r3, r2, r3
 801fcca:	881b      	ldrh	r3, [r3, #0]
 801fccc:	b29a      	uxth	r2, r3
 801fcce:	2046      	movs	r0, #70	@ 0x46
 801fcd0:	183b      	adds	r3, r7, r0
 801fcd2:	4916      	ldr	r1, [pc, #88]	@ (801fd2c <USB_ActivateEndpoint+0x738>)
 801fcd4:	400a      	ands	r2, r1
 801fcd6:	801a      	strh	r2, [r3, #0]
 801fcd8:	687a      	ldr	r2, [r7, #4]
 801fcda:	683b      	ldr	r3, [r7, #0]
 801fcdc:	781b      	ldrb	r3, [r3, #0]
 801fcde:	009b      	lsls	r3, r3, #2
 801fce0:	18d3      	adds	r3, r2, r3
 801fce2:	183a      	adds	r2, r7, r0
 801fce4:	8812      	ldrh	r2, [r2, #0]
 801fce6:	4912      	ldr	r1, [pc, #72]	@ (801fd30 <USB_ActivateEndpoint+0x73c>)
 801fce8:	430a      	orrs	r2, r1
 801fcea:	b292      	uxth	r2, r2
 801fcec:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fcee:	687a      	ldr	r2, [r7, #4]
 801fcf0:	683b      	ldr	r3, [r7, #0]
 801fcf2:	781b      	ldrb	r3, [r3, #0]
 801fcf4:	009b      	lsls	r3, r3, #2
 801fcf6:	18d3      	adds	r3, r2, r3
 801fcf8:	881b      	ldrh	r3, [r3, #0]
 801fcfa:	b29a      	uxth	r2, r3
 801fcfc:	2042      	movs	r0, #66	@ 0x42
 801fcfe:	183b      	adds	r3, r7, r0
 801fd00:	490c      	ldr	r1, [pc, #48]	@ (801fd34 <USB_ActivateEndpoint+0x740>)
 801fd02:	400a      	ands	r2, r1
 801fd04:	801a      	strh	r2, [r3, #0]
 801fd06:	687a      	ldr	r2, [r7, #4]
 801fd08:	683b      	ldr	r3, [r7, #0]
 801fd0a:	781b      	ldrb	r3, [r3, #0]
 801fd0c:	009b      	lsls	r3, r3, #2
 801fd0e:	18d3      	adds	r3, r2, r3
 801fd10:	183a      	adds	r2, r7, r0
 801fd12:	8812      	ldrh	r2, [r2, #0]
 801fd14:	4906      	ldr	r1, [pc, #24]	@ (801fd30 <USB_ActivateEndpoint+0x73c>)
 801fd16:	430a      	orrs	r2, r1
 801fd18:	b292      	uxth	r2, r2
 801fd1a:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801fd1c:	236f      	movs	r3, #111	@ 0x6f
 801fd1e:	18fb      	adds	r3, r7, r3
 801fd20:	781b      	ldrb	r3, [r3, #0]
}
 801fd22:	0018      	movs	r0, r3
 801fd24:	46bd      	mov	sp, r7
 801fd26:	b01c      	add	sp, #112	@ 0x70
 801fd28:	bd80      	pop	{r7, pc}
 801fd2a:	46c0      	nop			@ (mov r8, r8)
 801fd2c:	ffff8fbf 	.word	0xffff8fbf
 801fd30:	ffff8080 	.word	0xffff8080
 801fd34:	ffffbf8f 	.word	0xffffbf8f

0801fd38 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801fd38:	b580      	push	{r7, lr}
 801fd3a:	b08c      	sub	sp, #48	@ 0x30
 801fd3c:	af00      	add	r7, sp, #0
 801fd3e:	6078      	str	r0, [r7, #4]
 801fd40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801fd42:	683b      	ldr	r3, [r7, #0]
 801fd44:	7b1b      	ldrb	r3, [r3, #12]
 801fd46:	2b00      	cmp	r3, #0
 801fd48:	d000      	beq.n	801fd4c <USB_DeactivateEndpoint+0x14>
 801fd4a:	e07e      	b.n	801fe4a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801fd4c:	683b      	ldr	r3, [r7, #0]
 801fd4e:	785b      	ldrb	r3, [r3, #1]
 801fd50:	2b00      	cmp	r3, #0
 801fd52:	d03c      	beq.n	801fdce <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fd54:	687a      	ldr	r2, [r7, #4]
 801fd56:	683b      	ldr	r3, [r7, #0]
 801fd58:	781b      	ldrb	r3, [r3, #0]
 801fd5a:	009b      	lsls	r3, r3, #2
 801fd5c:	18d2      	adds	r2, r2, r3
 801fd5e:	210c      	movs	r1, #12
 801fd60:	187b      	adds	r3, r7, r1
 801fd62:	8812      	ldrh	r2, [r2, #0]
 801fd64:	801a      	strh	r2, [r3, #0]
 801fd66:	187b      	adds	r3, r7, r1
 801fd68:	881b      	ldrh	r3, [r3, #0]
 801fd6a:	2240      	movs	r2, #64	@ 0x40
 801fd6c:	4013      	ands	r3, r2
 801fd6e:	d016      	beq.n	801fd9e <USB_DeactivateEndpoint+0x66>
 801fd70:	687a      	ldr	r2, [r7, #4]
 801fd72:	683b      	ldr	r3, [r7, #0]
 801fd74:	781b      	ldrb	r3, [r3, #0]
 801fd76:	009b      	lsls	r3, r3, #2
 801fd78:	18d3      	adds	r3, r2, r3
 801fd7a:	881b      	ldrh	r3, [r3, #0]
 801fd7c:	b29a      	uxth	r2, r3
 801fd7e:	200a      	movs	r0, #10
 801fd80:	183b      	adds	r3, r7, r0
 801fd82:	49c7      	ldr	r1, [pc, #796]	@ (80200a0 <USB_DeactivateEndpoint+0x368>)
 801fd84:	400a      	ands	r2, r1
 801fd86:	801a      	strh	r2, [r3, #0]
 801fd88:	687a      	ldr	r2, [r7, #4]
 801fd8a:	683b      	ldr	r3, [r7, #0]
 801fd8c:	781b      	ldrb	r3, [r3, #0]
 801fd8e:	009b      	lsls	r3, r3, #2
 801fd90:	18d3      	adds	r3, r2, r3
 801fd92:	183a      	adds	r2, r7, r0
 801fd94:	8812      	ldrh	r2, [r2, #0]
 801fd96:	49c3      	ldr	r1, [pc, #780]	@ (80200a4 <USB_DeactivateEndpoint+0x36c>)
 801fd98:	430a      	orrs	r2, r1
 801fd9a:	b292      	uxth	r2, r2
 801fd9c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fd9e:	687a      	ldr	r2, [r7, #4]
 801fda0:	683b      	ldr	r3, [r7, #0]
 801fda2:	781b      	ldrb	r3, [r3, #0]
 801fda4:	009b      	lsls	r3, r3, #2
 801fda6:	18d3      	adds	r3, r2, r3
 801fda8:	881b      	ldrh	r3, [r3, #0]
 801fdaa:	b29a      	uxth	r2, r3
 801fdac:	2008      	movs	r0, #8
 801fdae:	183b      	adds	r3, r7, r0
 801fdb0:	49bd      	ldr	r1, [pc, #756]	@ (80200a8 <USB_DeactivateEndpoint+0x370>)
 801fdb2:	400a      	ands	r2, r1
 801fdb4:	801a      	strh	r2, [r3, #0]
 801fdb6:	687a      	ldr	r2, [r7, #4]
 801fdb8:	683b      	ldr	r3, [r7, #0]
 801fdba:	781b      	ldrb	r3, [r3, #0]
 801fdbc:	009b      	lsls	r3, r3, #2
 801fdbe:	18d3      	adds	r3, r2, r3
 801fdc0:	183a      	adds	r2, r7, r0
 801fdc2:	8812      	ldrh	r2, [r2, #0]
 801fdc4:	49b9      	ldr	r1, [pc, #740]	@ (80200ac <USB_DeactivateEndpoint+0x374>)
 801fdc6:	430a      	orrs	r2, r1
 801fdc8:	b292      	uxth	r2, r2
 801fdca:	801a      	strh	r2, [r3, #0]
 801fdcc:	e163      	b.n	8020096 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fdce:	687a      	ldr	r2, [r7, #4]
 801fdd0:	683b      	ldr	r3, [r7, #0]
 801fdd2:	781b      	ldrb	r3, [r3, #0]
 801fdd4:	009b      	lsls	r3, r3, #2
 801fdd6:	18d2      	adds	r2, r2, r3
 801fdd8:	2112      	movs	r1, #18
 801fdda:	187b      	adds	r3, r7, r1
 801fddc:	8812      	ldrh	r2, [r2, #0]
 801fdde:	801a      	strh	r2, [r3, #0]
 801fde0:	187b      	adds	r3, r7, r1
 801fde2:	881a      	ldrh	r2, [r3, #0]
 801fde4:	2380      	movs	r3, #128	@ 0x80
 801fde6:	01db      	lsls	r3, r3, #7
 801fde8:	4013      	ands	r3, r2
 801fdea:	d016      	beq.n	801fe1a <USB_DeactivateEndpoint+0xe2>
 801fdec:	687a      	ldr	r2, [r7, #4]
 801fdee:	683b      	ldr	r3, [r7, #0]
 801fdf0:	781b      	ldrb	r3, [r3, #0]
 801fdf2:	009b      	lsls	r3, r3, #2
 801fdf4:	18d3      	adds	r3, r2, r3
 801fdf6:	881b      	ldrh	r3, [r3, #0]
 801fdf8:	b29a      	uxth	r2, r3
 801fdfa:	2010      	movs	r0, #16
 801fdfc:	183b      	adds	r3, r7, r0
 801fdfe:	49a8      	ldr	r1, [pc, #672]	@ (80200a0 <USB_DeactivateEndpoint+0x368>)
 801fe00:	400a      	ands	r2, r1
 801fe02:	801a      	strh	r2, [r3, #0]
 801fe04:	687a      	ldr	r2, [r7, #4]
 801fe06:	683b      	ldr	r3, [r7, #0]
 801fe08:	781b      	ldrb	r3, [r3, #0]
 801fe0a:	009b      	lsls	r3, r3, #2
 801fe0c:	18d3      	adds	r3, r2, r3
 801fe0e:	183a      	adds	r2, r7, r0
 801fe10:	8812      	ldrh	r2, [r2, #0]
 801fe12:	49a7      	ldr	r1, [pc, #668]	@ (80200b0 <USB_DeactivateEndpoint+0x378>)
 801fe14:	430a      	orrs	r2, r1
 801fe16:	b292      	uxth	r2, r2
 801fe18:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fe1a:	687a      	ldr	r2, [r7, #4]
 801fe1c:	683b      	ldr	r3, [r7, #0]
 801fe1e:	781b      	ldrb	r3, [r3, #0]
 801fe20:	009b      	lsls	r3, r3, #2
 801fe22:	18d3      	adds	r3, r2, r3
 801fe24:	881b      	ldrh	r3, [r3, #0]
 801fe26:	b29a      	uxth	r2, r3
 801fe28:	200e      	movs	r0, #14
 801fe2a:	183b      	adds	r3, r7, r0
 801fe2c:	49a1      	ldr	r1, [pc, #644]	@ (80200b4 <USB_DeactivateEndpoint+0x37c>)
 801fe2e:	400a      	ands	r2, r1
 801fe30:	801a      	strh	r2, [r3, #0]
 801fe32:	687a      	ldr	r2, [r7, #4]
 801fe34:	683b      	ldr	r3, [r7, #0]
 801fe36:	781b      	ldrb	r3, [r3, #0]
 801fe38:	009b      	lsls	r3, r3, #2
 801fe3a:	18d3      	adds	r3, r2, r3
 801fe3c:	183a      	adds	r2, r7, r0
 801fe3e:	8812      	ldrh	r2, [r2, #0]
 801fe40:	499a      	ldr	r1, [pc, #616]	@ (80200ac <USB_DeactivateEndpoint+0x374>)
 801fe42:	430a      	orrs	r2, r1
 801fe44:	b292      	uxth	r2, r2
 801fe46:	801a      	strh	r2, [r3, #0]
 801fe48:	e125      	b.n	8020096 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801fe4a:	683b      	ldr	r3, [r7, #0]
 801fe4c:	785b      	ldrb	r3, [r3, #1]
 801fe4e:	2b00      	cmp	r3, #0
 801fe50:	d000      	beq.n	801fe54 <USB_DeactivateEndpoint+0x11c>
 801fe52:	e090      	b.n	801ff76 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fe54:	687a      	ldr	r2, [r7, #4]
 801fe56:	683b      	ldr	r3, [r7, #0]
 801fe58:	781b      	ldrb	r3, [r3, #0]
 801fe5a:	009b      	lsls	r3, r3, #2
 801fe5c:	18d2      	adds	r2, r2, r3
 801fe5e:	2120      	movs	r1, #32
 801fe60:	187b      	adds	r3, r7, r1
 801fe62:	8812      	ldrh	r2, [r2, #0]
 801fe64:	801a      	strh	r2, [r3, #0]
 801fe66:	187b      	adds	r3, r7, r1
 801fe68:	881a      	ldrh	r2, [r3, #0]
 801fe6a:	2380      	movs	r3, #128	@ 0x80
 801fe6c:	01db      	lsls	r3, r3, #7
 801fe6e:	4013      	ands	r3, r2
 801fe70:	d016      	beq.n	801fea0 <USB_DeactivateEndpoint+0x168>
 801fe72:	687a      	ldr	r2, [r7, #4]
 801fe74:	683b      	ldr	r3, [r7, #0]
 801fe76:	781b      	ldrb	r3, [r3, #0]
 801fe78:	009b      	lsls	r3, r3, #2
 801fe7a:	18d3      	adds	r3, r2, r3
 801fe7c:	881b      	ldrh	r3, [r3, #0]
 801fe7e:	b29a      	uxth	r2, r3
 801fe80:	201e      	movs	r0, #30
 801fe82:	183b      	adds	r3, r7, r0
 801fe84:	4986      	ldr	r1, [pc, #536]	@ (80200a0 <USB_DeactivateEndpoint+0x368>)
 801fe86:	400a      	ands	r2, r1
 801fe88:	801a      	strh	r2, [r3, #0]
 801fe8a:	687a      	ldr	r2, [r7, #4]
 801fe8c:	683b      	ldr	r3, [r7, #0]
 801fe8e:	781b      	ldrb	r3, [r3, #0]
 801fe90:	009b      	lsls	r3, r3, #2
 801fe92:	18d3      	adds	r3, r2, r3
 801fe94:	183a      	adds	r2, r7, r0
 801fe96:	8812      	ldrh	r2, [r2, #0]
 801fe98:	4985      	ldr	r1, [pc, #532]	@ (80200b0 <USB_DeactivateEndpoint+0x378>)
 801fe9a:	430a      	orrs	r2, r1
 801fe9c:	b292      	uxth	r2, r2
 801fe9e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fea0:	687a      	ldr	r2, [r7, #4]
 801fea2:	683b      	ldr	r3, [r7, #0]
 801fea4:	781b      	ldrb	r3, [r3, #0]
 801fea6:	009b      	lsls	r3, r3, #2
 801fea8:	18d2      	adds	r2, r2, r3
 801feaa:	211c      	movs	r1, #28
 801feac:	187b      	adds	r3, r7, r1
 801feae:	8812      	ldrh	r2, [r2, #0]
 801feb0:	801a      	strh	r2, [r3, #0]
 801feb2:	187b      	adds	r3, r7, r1
 801feb4:	881b      	ldrh	r3, [r3, #0]
 801feb6:	2240      	movs	r2, #64	@ 0x40
 801feb8:	4013      	ands	r3, r2
 801feba:	d016      	beq.n	801feea <USB_DeactivateEndpoint+0x1b2>
 801febc:	687a      	ldr	r2, [r7, #4]
 801febe:	683b      	ldr	r3, [r7, #0]
 801fec0:	781b      	ldrb	r3, [r3, #0]
 801fec2:	009b      	lsls	r3, r3, #2
 801fec4:	18d3      	adds	r3, r2, r3
 801fec6:	881b      	ldrh	r3, [r3, #0]
 801fec8:	b29a      	uxth	r2, r3
 801feca:	201a      	movs	r0, #26
 801fecc:	183b      	adds	r3, r7, r0
 801fece:	4974      	ldr	r1, [pc, #464]	@ (80200a0 <USB_DeactivateEndpoint+0x368>)
 801fed0:	400a      	ands	r2, r1
 801fed2:	801a      	strh	r2, [r3, #0]
 801fed4:	687a      	ldr	r2, [r7, #4]
 801fed6:	683b      	ldr	r3, [r7, #0]
 801fed8:	781b      	ldrb	r3, [r3, #0]
 801feda:	009b      	lsls	r3, r3, #2
 801fedc:	18d3      	adds	r3, r2, r3
 801fede:	183a      	adds	r2, r7, r0
 801fee0:	8812      	ldrh	r2, [r2, #0]
 801fee2:	4970      	ldr	r1, [pc, #448]	@ (80200a4 <USB_DeactivateEndpoint+0x36c>)
 801fee4:	430a      	orrs	r2, r1
 801fee6:	b292      	uxth	r2, r2
 801fee8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801feea:	687a      	ldr	r2, [r7, #4]
 801feec:	683b      	ldr	r3, [r7, #0]
 801feee:	781b      	ldrb	r3, [r3, #0]
 801fef0:	009b      	lsls	r3, r3, #2
 801fef2:	18d3      	adds	r3, r2, r3
 801fef4:	881b      	ldrh	r3, [r3, #0]
 801fef6:	b29a      	uxth	r2, r3
 801fef8:	2018      	movs	r0, #24
 801fefa:	183b      	adds	r3, r7, r0
 801fefc:	4968      	ldr	r1, [pc, #416]	@ (80200a0 <USB_DeactivateEndpoint+0x368>)
 801fefe:	400a      	ands	r2, r1
 801ff00:	801a      	strh	r2, [r3, #0]
 801ff02:	687a      	ldr	r2, [r7, #4]
 801ff04:	683b      	ldr	r3, [r7, #0]
 801ff06:	781b      	ldrb	r3, [r3, #0]
 801ff08:	009b      	lsls	r3, r3, #2
 801ff0a:	18d3      	adds	r3, r2, r3
 801ff0c:	183a      	adds	r2, r7, r0
 801ff0e:	8812      	ldrh	r2, [r2, #0]
 801ff10:	4964      	ldr	r1, [pc, #400]	@ (80200a4 <USB_DeactivateEndpoint+0x36c>)
 801ff12:	430a      	orrs	r2, r1
 801ff14:	b292      	uxth	r2, r2
 801ff16:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801ff18:	687a      	ldr	r2, [r7, #4]
 801ff1a:	683b      	ldr	r3, [r7, #0]
 801ff1c:	781b      	ldrb	r3, [r3, #0]
 801ff1e:	009b      	lsls	r3, r3, #2
 801ff20:	18d3      	adds	r3, r2, r3
 801ff22:	881b      	ldrh	r3, [r3, #0]
 801ff24:	b29a      	uxth	r2, r3
 801ff26:	2016      	movs	r0, #22
 801ff28:	183b      	adds	r3, r7, r0
 801ff2a:	4962      	ldr	r1, [pc, #392]	@ (80200b4 <USB_DeactivateEndpoint+0x37c>)
 801ff2c:	400a      	ands	r2, r1
 801ff2e:	801a      	strh	r2, [r3, #0]
 801ff30:	687a      	ldr	r2, [r7, #4]
 801ff32:	683b      	ldr	r3, [r7, #0]
 801ff34:	781b      	ldrb	r3, [r3, #0]
 801ff36:	009b      	lsls	r3, r3, #2
 801ff38:	18d3      	adds	r3, r2, r3
 801ff3a:	183a      	adds	r2, r7, r0
 801ff3c:	8812      	ldrh	r2, [r2, #0]
 801ff3e:	495b      	ldr	r1, [pc, #364]	@ (80200ac <USB_DeactivateEndpoint+0x374>)
 801ff40:	430a      	orrs	r2, r1
 801ff42:	b292      	uxth	r2, r2
 801ff44:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ff46:	687a      	ldr	r2, [r7, #4]
 801ff48:	683b      	ldr	r3, [r7, #0]
 801ff4a:	781b      	ldrb	r3, [r3, #0]
 801ff4c:	009b      	lsls	r3, r3, #2
 801ff4e:	18d3      	adds	r3, r2, r3
 801ff50:	881b      	ldrh	r3, [r3, #0]
 801ff52:	b29a      	uxth	r2, r3
 801ff54:	2014      	movs	r0, #20
 801ff56:	183b      	adds	r3, r7, r0
 801ff58:	4953      	ldr	r1, [pc, #332]	@ (80200a8 <USB_DeactivateEndpoint+0x370>)
 801ff5a:	400a      	ands	r2, r1
 801ff5c:	801a      	strh	r2, [r3, #0]
 801ff5e:	687a      	ldr	r2, [r7, #4]
 801ff60:	683b      	ldr	r3, [r7, #0]
 801ff62:	781b      	ldrb	r3, [r3, #0]
 801ff64:	009b      	lsls	r3, r3, #2
 801ff66:	18d3      	adds	r3, r2, r3
 801ff68:	183a      	adds	r2, r7, r0
 801ff6a:	8812      	ldrh	r2, [r2, #0]
 801ff6c:	494f      	ldr	r1, [pc, #316]	@ (80200ac <USB_DeactivateEndpoint+0x374>)
 801ff6e:	430a      	orrs	r2, r1
 801ff70:	b292      	uxth	r2, r2
 801ff72:	801a      	strh	r2, [r3, #0]
 801ff74:	e08f      	b.n	8020096 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ff76:	687a      	ldr	r2, [r7, #4]
 801ff78:	683b      	ldr	r3, [r7, #0]
 801ff7a:	781b      	ldrb	r3, [r3, #0]
 801ff7c:	009b      	lsls	r3, r3, #2
 801ff7e:	18d2      	adds	r2, r2, r3
 801ff80:	212e      	movs	r1, #46	@ 0x2e
 801ff82:	187b      	adds	r3, r7, r1
 801ff84:	8812      	ldrh	r2, [r2, #0]
 801ff86:	801a      	strh	r2, [r3, #0]
 801ff88:	187b      	adds	r3, r7, r1
 801ff8a:	881a      	ldrh	r2, [r3, #0]
 801ff8c:	2380      	movs	r3, #128	@ 0x80
 801ff8e:	01db      	lsls	r3, r3, #7
 801ff90:	4013      	ands	r3, r2
 801ff92:	d016      	beq.n	801ffc2 <USB_DeactivateEndpoint+0x28a>
 801ff94:	687a      	ldr	r2, [r7, #4]
 801ff96:	683b      	ldr	r3, [r7, #0]
 801ff98:	781b      	ldrb	r3, [r3, #0]
 801ff9a:	009b      	lsls	r3, r3, #2
 801ff9c:	18d3      	adds	r3, r2, r3
 801ff9e:	881b      	ldrh	r3, [r3, #0]
 801ffa0:	b29a      	uxth	r2, r3
 801ffa2:	202c      	movs	r0, #44	@ 0x2c
 801ffa4:	183b      	adds	r3, r7, r0
 801ffa6:	493e      	ldr	r1, [pc, #248]	@ (80200a0 <USB_DeactivateEndpoint+0x368>)
 801ffa8:	400a      	ands	r2, r1
 801ffaa:	801a      	strh	r2, [r3, #0]
 801ffac:	687a      	ldr	r2, [r7, #4]
 801ffae:	683b      	ldr	r3, [r7, #0]
 801ffb0:	781b      	ldrb	r3, [r3, #0]
 801ffb2:	009b      	lsls	r3, r3, #2
 801ffb4:	18d3      	adds	r3, r2, r3
 801ffb6:	183a      	adds	r2, r7, r0
 801ffb8:	8812      	ldrh	r2, [r2, #0]
 801ffba:	493d      	ldr	r1, [pc, #244]	@ (80200b0 <USB_DeactivateEndpoint+0x378>)
 801ffbc:	430a      	orrs	r2, r1
 801ffbe:	b292      	uxth	r2, r2
 801ffc0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ffc2:	687a      	ldr	r2, [r7, #4]
 801ffc4:	683b      	ldr	r3, [r7, #0]
 801ffc6:	781b      	ldrb	r3, [r3, #0]
 801ffc8:	009b      	lsls	r3, r3, #2
 801ffca:	18d2      	adds	r2, r2, r3
 801ffcc:	212a      	movs	r1, #42	@ 0x2a
 801ffce:	187b      	adds	r3, r7, r1
 801ffd0:	8812      	ldrh	r2, [r2, #0]
 801ffd2:	801a      	strh	r2, [r3, #0]
 801ffd4:	187b      	adds	r3, r7, r1
 801ffd6:	881b      	ldrh	r3, [r3, #0]
 801ffd8:	2240      	movs	r2, #64	@ 0x40
 801ffda:	4013      	ands	r3, r2
 801ffdc:	d016      	beq.n	802000c <USB_DeactivateEndpoint+0x2d4>
 801ffde:	687a      	ldr	r2, [r7, #4]
 801ffe0:	683b      	ldr	r3, [r7, #0]
 801ffe2:	781b      	ldrb	r3, [r3, #0]
 801ffe4:	009b      	lsls	r3, r3, #2
 801ffe6:	18d3      	adds	r3, r2, r3
 801ffe8:	881b      	ldrh	r3, [r3, #0]
 801ffea:	b29a      	uxth	r2, r3
 801ffec:	2028      	movs	r0, #40	@ 0x28
 801ffee:	183b      	adds	r3, r7, r0
 801fff0:	492b      	ldr	r1, [pc, #172]	@ (80200a0 <USB_DeactivateEndpoint+0x368>)
 801fff2:	400a      	ands	r2, r1
 801fff4:	801a      	strh	r2, [r3, #0]
 801fff6:	687a      	ldr	r2, [r7, #4]
 801fff8:	683b      	ldr	r3, [r7, #0]
 801fffa:	781b      	ldrb	r3, [r3, #0]
 801fffc:	009b      	lsls	r3, r3, #2
 801fffe:	18d3      	adds	r3, r2, r3
 8020000:	183a      	adds	r2, r7, r0
 8020002:	8812      	ldrh	r2, [r2, #0]
 8020004:	4927      	ldr	r1, [pc, #156]	@ (80200a4 <USB_DeactivateEndpoint+0x36c>)
 8020006:	430a      	orrs	r2, r1
 8020008:	b292      	uxth	r2, r2
 802000a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 802000c:	687a      	ldr	r2, [r7, #4]
 802000e:	683b      	ldr	r3, [r7, #0]
 8020010:	781b      	ldrb	r3, [r3, #0]
 8020012:	009b      	lsls	r3, r3, #2
 8020014:	18d3      	adds	r3, r2, r3
 8020016:	881b      	ldrh	r3, [r3, #0]
 8020018:	b29a      	uxth	r2, r3
 802001a:	2026      	movs	r0, #38	@ 0x26
 802001c:	183b      	adds	r3, r7, r0
 802001e:	4920      	ldr	r1, [pc, #128]	@ (80200a0 <USB_DeactivateEndpoint+0x368>)
 8020020:	400a      	ands	r2, r1
 8020022:	801a      	strh	r2, [r3, #0]
 8020024:	687a      	ldr	r2, [r7, #4]
 8020026:	683b      	ldr	r3, [r7, #0]
 8020028:	781b      	ldrb	r3, [r3, #0]
 802002a:	009b      	lsls	r3, r3, #2
 802002c:	18d3      	adds	r3, r2, r3
 802002e:	183a      	adds	r2, r7, r0
 8020030:	8812      	ldrh	r2, [r2, #0]
 8020032:	491f      	ldr	r1, [pc, #124]	@ (80200b0 <USB_DeactivateEndpoint+0x378>)
 8020034:	430a      	orrs	r2, r1
 8020036:	b292      	uxth	r2, r2
 8020038:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 802003a:	687a      	ldr	r2, [r7, #4]
 802003c:	683b      	ldr	r3, [r7, #0]
 802003e:	781b      	ldrb	r3, [r3, #0]
 8020040:	009b      	lsls	r3, r3, #2
 8020042:	18d3      	adds	r3, r2, r3
 8020044:	881b      	ldrh	r3, [r3, #0]
 8020046:	b29a      	uxth	r2, r3
 8020048:	2024      	movs	r0, #36	@ 0x24
 802004a:	183b      	adds	r3, r7, r0
 802004c:	4916      	ldr	r1, [pc, #88]	@ (80200a8 <USB_DeactivateEndpoint+0x370>)
 802004e:	400a      	ands	r2, r1
 8020050:	801a      	strh	r2, [r3, #0]
 8020052:	687a      	ldr	r2, [r7, #4]
 8020054:	683b      	ldr	r3, [r7, #0]
 8020056:	781b      	ldrb	r3, [r3, #0]
 8020058:	009b      	lsls	r3, r3, #2
 802005a:	18d3      	adds	r3, r2, r3
 802005c:	183a      	adds	r2, r7, r0
 802005e:	8812      	ldrh	r2, [r2, #0]
 8020060:	4912      	ldr	r1, [pc, #72]	@ (80200ac <USB_DeactivateEndpoint+0x374>)
 8020062:	430a      	orrs	r2, r1
 8020064:	b292      	uxth	r2, r2
 8020066:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8020068:	687a      	ldr	r2, [r7, #4]
 802006a:	683b      	ldr	r3, [r7, #0]
 802006c:	781b      	ldrb	r3, [r3, #0]
 802006e:	009b      	lsls	r3, r3, #2
 8020070:	18d3      	adds	r3, r2, r3
 8020072:	881b      	ldrh	r3, [r3, #0]
 8020074:	b29a      	uxth	r2, r3
 8020076:	2022      	movs	r0, #34	@ 0x22
 8020078:	183b      	adds	r3, r7, r0
 802007a:	490e      	ldr	r1, [pc, #56]	@ (80200b4 <USB_DeactivateEndpoint+0x37c>)
 802007c:	400a      	ands	r2, r1
 802007e:	801a      	strh	r2, [r3, #0]
 8020080:	687a      	ldr	r2, [r7, #4]
 8020082:	683b      	ldr	r3, [r7, #0]
 8020084:	781b      	ldrb	r3, [r3, #0]
 8020086:	009b      	lsls	r3, r3, #2
 8020088:	18d3      	adds	r3, r2, r3
 802008a:	183a      	adds	r2, r7, r0
 802008c:	8812      	ldrh	r2, [r2, #0]
 802008e:	4907      	ldr	r1, [pc, #28]	@ (80200ac <USB_DeactivateEndpoint+0x374>)
 8020090:	430a      	orrs	r2, r1
 8020092:	b292      	uxth	r2, r2
 8020094:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8020096:	2300      	movs	r3, #0
}
 8020098:	0018      	movs	r0, r3
 802009a:	46bd      	mov	sp, r7
 802009c:	b00c      	add	sp, #48	@ 0x30
 802009e:	bd80      	pop	{r7, pc}
 80200a0:	ffff8f8f 	.word	0xffff8f8f
 80200a4:	ffff80c0 	.word	0xffff80c0
 80200a8:	ffff8fbf 	.word	0xffff8fbf
 80200ac:	ffff8080 	.word	0xffff8080
 80200b0:	ffffc080 	.word	0xffffc080
 80200b4:	ffffbf8f 	.word	0xffffbf8f

080200b8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80200b8:	b590      	push	{r4, r7, lr}
 80200ba:	b0c3      	sub	sp, #268	@ 0x10c
 80200bc:	af00      	add	r7, sp, #0
 80200be:	6078      	str	r0, [r7, #4]
 80200c0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80200c2:	683b      	ldr	r3, [r7, #0]
 80200c4:	785b      	ldrb	r3, [r3, #1]
 80200c6:	2b01      	cmp	r3, #1
 80200c8:	d001      	beq.n	80200ce <USB_EPStartXfer+0x16>
 80200ca:	f000 fd2d 	bl	8020b28 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80200ce:	683b      	ldr	r3, [r7, #0]
 80200d0:	699a      	ldr	r2, [r3, #24]
 80200d2:	683b      	ldr	r3, [r7, #0]
 80200d4:	691b      	ldr	r3, [r3, #16]
 80200d6:	429a      	cmp	r2, r3
 80200d8:	d905      	bls.n	80200e6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80200da:	683b      	ldr	r3, [r7, #0]
 80200dc:	691b      	ldr	r3, [r3, #16]
 80200de:	1d7a      	adds	r2, r7, #5
 80200e0:	32ff      	adds	r2, #255	@ 0xff
 80200e2:	6013      	str	r3, [r2, #0]
 80200e4:	e004      	b.n	80200f0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80200e6:	683b      	ldr	r3, [r7, #0]
 80200e8:	699b      	ldr	r3, [r3, #24]
 80200ea:	1d7a      	adds	r2, r7, #5
 80200ec:	32ff      	adds	r2, #255	@ 0xff
 80200ee:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80200f0:	683b      	ldr	r3, [r7, #0]
 80200f2:	7b1b      	ldrb	r3, [r3, #12]
 80200f4:	2b00      	cmp	r3, #0
 80200f6:	d125      	bne.n	8020144 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80200f8:	683b      	ldr	r3, [r7, #0]
 80200fa:	6959      	ldr	r1, [r3, #20]
 80200fc:	683b      	ldr	r3, [r7, #0]
 80200fe:	88da      	ldrh	r2, [r3, #6]
 8020100:	1d7b      	adds	r3, r7, #5
 8020102:	33ff      	adds	r3, #255	@ 0xff
 8020104:	681b      	ldr	r3, [r3, #0]
 8020106:	b29b      	uxth	r3, r3
 8020108:	6878      	ldr	r0, [r7, #4]
 802010a:	f001 fa47 	bl	802159c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 802010e:	687b      	ldr	r3, [r7, #4]
 8020110:	613b      	str	r3, [r7, #16]
 8020112:	687b      	ldr	r3, [r7, #4]
 8020114:	2250      	movs	r2, #80	@ 0x50
 8020116:	5a9b      	ldrh	r3, [r3, r2]
 8020118:	b29b      	uxth	r3, r3
 802011a:	001a      	movs	r2, r3
 802011c:	693b      	ldr	r3, [r7, #16]
 802011e:	189b      	adds	r3, r3, r2
 8020120:	613b      	str	r3, [r7, #16]
 8020122:	683b      	ldr	r3, [r7, #0]
 8020124:	781b      	ldrb	r3, [r3, #0]
 8020126:	00da      	lsls	r2, r3, #3
 8020128:	693b      	ldr	r3, [r7, #16]
 802012a:	18d3      	adds	r3, r2, r3
 802012c:	4ad7      	ldr	r2, [pc, #860]	@ (802048c <USB_EPStartXfer+0x3d4>)
 802012e:	4694      	mov	ip, r2
 8020130:	4463      	add	r3, ip
 8020132:	60fb      	str	r3, [r7, #12]
 8020134:	1d7b      	adds	r3, r7, #5
 8020136:	33ff      	adds	r3, #255	@ 0xff
 8020138:	681b      	ldr	r3, [r3, #0]
 802013a:	b29a      	uxth	r2, r3
 802013c:	68fb      	ldr	r3, [r7, #12]
 802013e:	801a      	strh	r2, [r3, #0]
 8020140:	f000 fccd 	bl	8020ade <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8020144:	683b      	ldr	r3, [r7, #0]
 8020146:	78db      	ldrb	r3, [r3, #3]
 8020148:	2b02      	cmp	r3, #2
 802014a:	d000      	beq.n	802014e <USB_EPStartXfer+0x96>
 802014c:	e362      	b.n	8020814 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 802014e:	683b      	ldr	r3, [r7, #0]
 8020150:	6a1a      	ldr	r2, [r3, #32]
 8020152:	683b      	ldr	r3, [r7, #0]
 8020154:	691b      	ldr	r3, [r3, #16]
 8020156:	429a      	cmp	r2, r3
 8020158:	d800      	bhi.n	802015c <USB_EPStartXfer+0xa4>
 802015a:	e309      	b.n	8020770 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 802015c:	687a      	ldr	r2, [r7, #4]
 802015e:	683b      	ldr	r3, [r7, #0]
 8020160:	781b      	ldrb	r3, [r3, #0]
 8020162:	009b      	lsls	r3, r3, #2
 8020164:	18d3      	adds	r3, r2, r3
 8020166:	881b      	ldrh	r3, [r3, #0]
 8020168:	b29a      	uxth	r2, r3
 802016a:	2056      	movs	r0, #86	@ 0x56
 802016c:	183b      	adds	r3, r7, r0
 802016e:	49c8      	ldr	r1, [pc, #800]	@ (8020490 <USB_EPStartXfer+0x3d8>)
 8020170:	400a      	ands	r2, r1
 8020172:	801a      	strh	r2, [r3, #0]
 8020174:	687a      	ldr	r2, [r7, #4]
 8020176:	683b      	ldr	r3, [r7, #0]
 8020178:	781b      	ldrb	r3, [r3, #0]
 802017a:	009b      	lsls	r3, r3, #2
 802017c:	18d3      	adds	r3, r2, r3
 802017e:	183a      	adds	r2, r7, r0
 8020180:	8812      	ldrh	r2, [r2, #0]
 8020182:	49c4      	ldr	r1, [pc, #784]	@ (8020494 <USB_EPStartXfer+0x3dc>)
 8020184:	430a      	orrs	r2, r1
 8020186:	b292      	uxth	r2, r2
 8020188:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 802018a:	683b      	ldr	r3, [r7, #0]
 802018c:	6a1a      	ldr	r2, [r3, #32]
 802018e:	1d7b      	adds	r3, r7, #5
 8020190:	33ff      	adds	r3, #255	@ 0xff
 8020192:	681b      	ldr	r3, [r3, #0]
 8020194:	1ad2      	subs	r2, r2, r3
 8020196:	683b      	ldr	r3, [r7, #0]
 8020198:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 802019a:	687a      	ldr	r2, [r7, #4]
 802019c:	683b      	ldr	r3, [r7, #0]
 802019e:	781b      	ldrb	r3, [r3, #0]
 80201a0:	009b      	lsls	r3, r3, #2
 80201a2:	18d3      	adds	r3, r2, r3
 80201a4:	881b      	ldrh	r3, [r3, #0]
 80201a6:	b29b      	uxth	r3, r3
 80201a8:	001a      	movs	r2, r3
 80201aa:	2340      	movs	r3, #64	@ 0x40
 80201ac:	4013      	ands	r3, r2
 80201ae:	d100      	bne.n	80201b2 <USB_EPStartXfer+0xfa>
 80201b0:	e176      	b.n	80204a0 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80201b2:	687b      	ldr	r3, [r7, #4]
 80201b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80201b6:	683b      	ldr	r3, [r7, #0]
 80201b8:	785b      	ldrb	r3, [r3, #1]
 80201ba:	2b00      	cmp	r3, #0
 80201bc:	d000      	beq.n	80201c0 <USB_EPStartXfer+0x108>
 80201be:	e074      	b.n	80202aa <USB_EPStartXfer+0x1f2>
 80201c0:	687b      	ldr	r3, [r7, #4]
 80201c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80201c4:	687b      	ldr	r3, [r7, #4]
 80201c6:	2250      	movs	r2, #80	@ 0x50
 80201c8:	5a9b      	ldrh	r3, [r3, r2]
 80201ca:	b29b      	uxth	r3, r3
 80201cc:	001a      	movs	r2, r3
 80201ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80201d0:	189b      	adds	r3, r3, r2
 80201d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80201d4:	683b      	ldr	r3, [r7, #0]
 80201d6:	781b      	ldrb	r3, [r3, #0]
 80201d8:	00da      	lsls	r2, r3, #3
 80201da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80201dc:	18d3      	adds	r3, r2, r3
 80201de:	4aae      	ldr	r2, [pc, #696]	@ (8020498 <USB_EPStartXfer+0x3e0>)
 80201e0:	4694      	mov	ip, r2
 80201e2:	4463      	add	r3, ip
 80201e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80201e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80201e8:	881b      	ldrh	r3, [r3, #0]
 80201ea:	b29b      	uxth	r3, r3
 80201ec:	059b      	lsls	r3, r3, #22
 80201ee:	0d9b      	lsrs	r3, r3, #22
 80201f0:	b29a      	uxth	r2, r3
 80201f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80201f4:	801a      	strh	r2, [r3, #0]
 80201f6:	1d7b      	adds	r3, r7, #5
 80201f8:	33ff      	adds	r3, #255	@ 0xff
 80201fa:	681b      	ldr	r3, [r3, #0]
 80201fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80201fe:	d924      	bls.n	802024a <USB_EPStartXfer+0x192>
 8020200:	1d7b      	adds	r3, r7, #5
 8020202:	33ff      	adds	r3, #255	@ 0xff
 8020204:	681b      	ldr	r3, [r3, #0]
 8020206:	095b      	lsrs	r3, r3, #5
 8020208:	1c7a      	adds	r2, r7, #1
 802020a:	32ff      	adds	r2, #255	@ 0xff
 802020c:	6013      	str	r3, [r2, #0]
 802020e:	1d7b      	adds	r3, r7, #5
 8020210:	33ff      	adds	r3, #255	@ 0xff
 8020212:	681b      	ldr	r3, [r3, #0]
 8020214:	221f      	movs	r2, #31
 8020216:	4013      	ands	r3, r2
 8020218:	d106      	bne.n	8020228 <USB_EPStartXfer+0x170>
 802021a:	1c7b      	adds	r3, r7, #1
 802021c:	33ff      	adds	r3, #255	@ 0xff
 802021e:	681b      	ldr	r3, [r3, #0]
 8020220:	3b01      	subs	r3, #1
 8020222:	1c7a      	adds	r2, r7, #1
 8020224:	32ff      	adds	r2, #255	@ 0xff
 8020226:	6013      	str	r3, [r2, #0]
 8020228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802022a:	881b      	ldrh	r3, [r3, #0]
 802022c:	b29a      	uxth	r2, r3
 802022e:	1c7b      	adds	r3, r7, #1
 8020230:	33ff      	adds	r3, #255	@ 0xff
 8020232:	681b      	ldr	r3, [r3, #0]
 8020234:	b29b      	uxth	r3, r3
 8020236:	029b      	lsls	r3, r3, #10
 8020238:	b29b      	uxth	r3, r3
 802023a:	4313      	orrs	r3, r2
 802023c:	b29b      	uxth	r3, r3
 802023e:	4a97      	ldr	r2, [pc, #604]	@ (802049c <USB_EPStartXfer+0x3e4>)
 8020240:	4313      	orrs	r3, r2
 8020242:	b29a      	uxth	r2, r3
 8020244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020246:	801a      	strh	r2, [r3, #0]
 8020248:	e04a      	b.n	80202e0 <USB_EPStartXfer+0x228>
 802024a:	1d7b      	adds	r3, r7, #5
 802024c:	33ff      	adds	r3, #255	@ 0xff
 802024e:	681b      	ldr	r3, [r3, #0]
 8020250:	2b00      	cmp	r3, #0
 8020252:	d108      	bne.n	8020266 <USB_EPStartXfer+0x1ae>
 8020254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020256:	881b      	ldrh	r3, [r3, #0]
 8020258:	b29b      	uxth	r3, r3
 802025a:	4a90      	ldr	r2, [pc, #576]	@ (802049c <USB_EPStartXfer+0x3e4>)
 802025c:	4313      	orrs	r3, r2
 802025e:	b29a      	uxth	r2, r3
 8020260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020262:	801a      	strh	r2, [r3, #0]
 8020264:	e03c      	b.n	80202e0 <USB_EPStartXfer+0x228>
 8020266:	1d7b      	adds	r3, r7, #5
 8020268:	33ff      	adds	r3, #255	@ 0xff
 802026a:	681b      	ldr	r3, [r3, #0]
 802026c:	085b      	lsrs	r3, r3, #1
 802026e:	1c7a      	adds	r2, r7, #1
 8020270:	32ff      	adds	r2, #255	@ 0xff
 8020272:	6013      	str	r3, [r2, #0]
 8020274:	1d7b      	adds	r3, r7, #5
 8020276:	33ff      	adds	r3, #255	@ 0xff
 8020278:	681b      	ldr	r3, [r3, #0]
 802027a:	2201      	movs	r2, #1
 802027c:	4013      	ands	r3, r2
 802027e:	d006      	beq.n	802028e <USB_EPStartXfer+0x1d6>
 8020280:	1c7b      	adds	r3, r7, #1
 8020282:	33ff      	adds	r3, #255	@ 0xff
 8020284:	681b      	ldr	r3, [r3, #0]
 8020286:	3301      	adds	r3, #1
 8020288:	1c7a      	adds	r2, r7, #1
 802028a:	32ff      	adds	r2, #255	@ 0xff
 802028c:	6013      	str	r3, [r2, #0]
 802028e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020290:	881b      	ldrh	r3, [r3, #0]
 8020292:	b29a      	uxth	r2, r3
 8020294:	1c7b      	adds	r3, r7, #1
 8020296:	33ff      	adds	r3, #255	@ 0xff
 8020298:	681b      	ldr	r3, [r3, #0]
 802029a:	b29b      	uxth	r3, r3
 802029c:	029b      	lsls	r3, r3, #10
 802029e:	b29b      	uxth	r3, r3
 80202a0:	4313      	orrs	r3, r2
 80202a2:	b29a      	uxth	r2, r3
 80202a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80202a6:	801a      	strh	r2, [r3, #0]
 80202a8:	e01a      	b.n	80202e0 <USB_EPStartXfer+0x228>
 80202aa:	683b      	ldr	r3, [r7, #0]
 80202ac:	785b      	ldrb	r3, [r3, #1]
 80202ae:	2b01      	cmp	r3, #1
 80202b0:	d116      	bne.n	80202e0 <USB_EPStartXfer+0x228>
 80202b2:	687b      	ldr	r3, [r7, #4]
 80202b4:	2250      	movs	r2, #80	@ 0x50
 80202b6:	5a9b      	ldrh	r3, [r3, r2]
 80202b8:	b29b      	uxth	r3, r3
 80202ba:	001a      	movs	r2, r3
 80202bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80202be:	189b      	adds	r3, r3, r2
 80202c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80202c2:	683b      	ldr	r3, [r7, #0]
 80202c4:	781b      	ldrb	r3, [r3, #0]
 80202c6:	00da      	lsls	r2, r3, #3
 80202c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80202ca:	18d3      	adds	r3, r2, r3
 80202cc:	4a72      	ldr	r2, [pc, #456]	@ (8020498 <USB_EPStartXfer+0x3e0>)
 80202ce:	4694      	mov	ip, r2
 80202d0:	4463      	add	r3, ip
 80202d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80202d4:	1d7b      	adds	r3, r7, #5
 80202d6:	33ff      	adds	r3, #255	@ 0xff
 80202d8:	681b      	ldr	r3, [r3, #0]
 80202da:	b29a      	uxth	r2, r3
 80202dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80202de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80202e0:	2076      	movs	r0, #118	@ 0x76
 80202e2:	183b      	adds	r3, r7, r0
 80202e4:	683a      	ldr	r2, [r7, #0]
 80202e6:	8952      	ldrh	r2, [r2, #10]
 80202e8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80202ea:	683b      	ldr	r3, [r7, #0]
 80202ec:	6959      	ldr	r1, [r3, #20]
 80202ee:	1d7b      	adds	r3, r7, #5
 80202f0:	33ff      	adds	r3, #255	@ 0xff
 80202f2:	681b      	ldr	r3, [r3, #0]
 80202f4:	b29c      	uxth	r4, r3
 80202f6:	183b      	adds	r3, r7, r0
 80202f8:	881a      	ldrh	r2, [r3, #0]
 80202fa:	6878      	ldr	r0, [r7, #4]
 80202fc:	0023      	movs	r3, r4
 80202fe:	f001 f94d 	bl	802159c <USB_WritePMA>
            ep->xfer_buff += len;
 8020302:	683b      	ldr	r3, [r7, #0]
 8020304:	695a      	ldr	r2, [r3, #20]
 8020306:	1d7b      	adds	r3, r7, #5
 8020308:	33ff      	adds	r3, #255	@ 0xff
 802030a:	681b      	ldr	r3, [r3, #0]
 802030c:	18d2      	adds	r2, r2, r3
 802030e:	683b      	ldr	r3, [r7, #0]
 8020310:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8020312:	683b      	ldr	r3, [r7, #0]
 8020314:	6a1a      	ldr	r2, [r3, #32]
 8020316:	683b      	ldr	r3, [r7, #0]
 8020318:	691b      	ldr	r3, [r3, #16]
 802031a:	429a      	cmp	r2, r3
 802031c:	d908      	bls.n	8020330 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 802031e:	683b      	ldr	r3, [r7, #0]
 8020320:	6a1a      	ldr	r2, [r3, #32]
 8020322:	1d7b      	adds	r3, r7, #5
 8020324:	33ff      	adds	r3, #255	@ 0xff
 8020326:	681b      	ldr	r3, [r3, #0]
 8020328:	1ad2      	subs	r2, r2, r3
 802032a:	683b      	ldr	r3, [r7, #0]
 802032c:	621a      	str	r2, [r3, #32]
 802032e:	e007      	b.n	8020340 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8020330:	683b      	ldr	r3, [r7, #0]
 8020332:	6a1b      	ldr	r3, [r3, #32]
 8020334:	1d7a      	adds	r2, r7, #5
 8020336:	32ff      	adds	r2, #255	@ 0xff
 8020338:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 802033a:	683b      	ldr	r3, [r7, #0]
 802033c:	2200      	movs	r2, #0
 802033e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8020340:	683b      	ldr	r3, [r7, #0]
 8020342:	785b      	ldrb	r3, [r3, #1]
 8020344:	2b00      	cmp	r3, #0
 8020346:	d000      	beq.n	802034a <USB_EPStartXfer+0x292>
 8020348:	e070      	b.n	802042c <USB_EPStartXfer+0x374>
 802034a:	687b      	ldr	r3, [r7, #4]
 802034c:	61bb      	str	r3, [r7, #24]
 802034e:	687b      	ldr	r3, [r7, #4]
 8020350:	2250      	movs	r2, #80	@ 0x50
 8020352:	5a9b      	ldrh	r3, [r3, r2]
 8020354:	b29b      	uxth	r3, r3
 8020356:	001a      	movs	r2, r3
 8020358:	69bb      	ldr	r3, [r7, #24]
 802035a:	189b      	adds	r3, r3, r2
 802035c:	61bb      	str	r3, [r7, #24]
 802035e:	683b      	ldr	r3, [r7, #0]
 8020360:	781b      	ldrb	r3, [r3, #0]
 8020362:	00da      	lsls	r2, r3, #3
 8020364:	69bb      	ldr	r3, [r7, #24]
 8020366:	18d3      	adds	r3, r2, r3
 8020368:	4a48      	ldr	r2, [pc, #288]	@ (802048c <USB_EPStartXfer+0x3d4>)
 802036a:	4694      	mov	ip, r2
 802036c:	4463      	add	r3, ip
 802036e:	617b      	str	r3, [r7, #20]
 8020370:	697b      	ldr	r3, [r7, #20]
 8020372:	881b      	ldrh	r3, [r3, #0]
 8020374:	b29b      	uxth	r3, r3
 8020376:	059b      	lsls	r3, r3, #22
 8020378:	0d9b      	lsrs	r3, r3, #22
 802037a:	b29a      	uxth	r2, r3
 802037c:	697b      	ldr	r3, [r7, #20]
 802037e:	801a      	strh	r2, [r3, #0]
 8020380:	1d7b      	adds	r3, r7, #5
 8020382:	33ff      	adds	r3, #255	@ 0xff
 8020384:	681b      	ldr	r3, [r3, #0]
 8020386:	2b3e      	cmp	r3, #62	@ 0x3e
 8020388:	d922      	bls.n	80203d0 <USB_EPStartXfer+0x318>
 802038a:	1d7b      	adds	r3, r7, #5
 802038c:	33ff      	adds	r3, #255	@ 0xff
 802038e:	681b      	ldr	r3, [r3, #0]
 8020390:	095b      	lsrs	r3, r3, #5
 8020392:	21fc      	movs	r1, #252	@ 0xfc
 8020394:	187a      	adds	r2, r7, r1
 8020396:	6013      	str	r3, [r2, #0]
 8020398:	1d7b      	adds	r3, r7, #5
 802039a:	33ff      	adds	r3, #255	@ 0xff
 802039c:	681b      	ldr	r3, [r3, #0]
 802039e:	221f      	movs	r2, #31
 80203a0:	4013      	ands	r3, r2
 80203a2:	d104      	bne.n	80203ae <USB_EPStartXfer+0x2f6>
 80203a4:	187b      	adds	r3, r7, r1
 80203a6:	681b      	ldr	r3, [r3, #0]
 80203a8:	3b01      	subs	r3, #1
 80203aa:	187a      	adds	r2, r7, r1
 80203ac:	6013      	str	r3, [r2, #0]
 80203ae:	697b      	ldr	r3, [r7, #20]
 80203b0:	881b      	ldrh	r3, [r3, #0]
 80203b2:	b29a      	uxth	r2, r3
 80203b4:	23fc      	movs	r3, #252	@ 0xfc
 80203b6:	18fb      	adds	r3, r7, r3
 80203b8:	681b      	ldr	r3, [r3, #0]
 80203ba:	b29b      	uxth	r3, r3
 80203bc:	029b      	lsls	r3, r3, #10
 80203be:	b29b      	uxth	r3, r3
 80203c0:	4313      	orrs	r3, r2
 80203c2:	b29b      	uxth	r3, r3
 80203c4:	4a35      	ldr	r2, [pc, #212]	@ (802049c <USB_EPStartXfer+0x3e4>)
 80203c6:	4313      	orrs	r3, r2
 80203c8:	b29a      	uxth	r2, r3
 80203ca:	697b      	ldr	r3, [r7, #20]
 80203cc:	801a      	strh	r2, [r3, #0]
 80203ce:	e04a      	b.n	8020466 <USB_EPStartXfer+0x3ae>
 80203d0:	1d7b      	adds	r3, r7, #5
 80203d2:	33ff      	adds	r3, #255	@ 0xff
 80203d4:	681b      	ldr	r3, [r3, #0]
 80203d6:	2b00      	cmp	r3, #0
 80203d8:	d108      	bne.n	80203ec <USB_EPStartXfer+0x334>
 80203da:	697b      	ldr	r3, [r7, #20]
 80203dc:	881b      	ldrh	r3, [r3, #0]
 80203de:	b29b      	uxth	r3, r3
 80203e0:	4a2e      	ldr	r2, [pc, #184]	@ (802049c <USB_EPStartXfer+0x3e4>)
 80203e2:	4313      	orrs	r3, r2
 80203e4:	b29a      	uxth	r2, r3
 80203e6:	697b      	ldr	r3, [r7, #20]
 80203e8:	801a      	strh	r2, [r3, #0]
 80203ea:	e03c      	b.n	8020466 <USB_EPStartXfer+0x3ae>
 80203ec:	1d7b      	adds	r3, r7, #5
 80203ee:	33ff      	adds	r3, #255	@ 0xff
 80203f0:	681b      	ldr	r3, [r3, #0]
 80203f2:	085b      	lsrs	r3, r3, #1
 80203f4:	21fc      	movs	r1, #252	@ 0xfc
 80203f6:	187a      	adds	r2, r7, r1
 80203f8:	6013      	str	r3, [r2, #0]
 80203fa:	1d7b      	adds	r3, r7, #5
 80203fc:	33ff      	adds	r3, #255	@ 0xff
 80203fe:	681b      	ldr	r3, [r3, #0]
 8020400:	2201      	movs	r2, #1
 8020402:	4013      	ands	r3, r2
 8020404:	d004      	beq.n	8020410 <USB_EPStartXfer+0x358>
 8020406:	187b      	adds	r3, r7, r1
 8020408:	681b      	ldr	r3, [r3, #0]
 802040a:	3301      	adds	r3, #1
 802040c:	187a      	adds	r2, r7, r1
 802040e:	6013      	str	r3, [r2, #0]
 8020410:	697b      	ldr	r3, [r7, #20]
 8020412:	881b      	ldrh	r3, [r3, #0]
 8020414:	b29a      	uxth	r2, r3
 8020416:	23fc      	movs	r3, #252	@ 0xfc
 8020418:	18fb      	adds	r3, r7, r3
 802041a:	681b      	ldr	r3, [r3, #0]
 802041c:	b29b      	uxth	r3, r3
 802041e:	029b      	lsls	r3, r3, #10
 8020420:	b29b      	uxth	r3, r3
 8020422:	4313      	orrs	r3, r2
 8020424:	b29a      	uxth	r2, r3
 8020426:	697b      	ldr	r3, [r7, #20]
 8020428:	801a      	strh	r2, [r3, #0]
 802042a:	e01c      	b.n	8020466 <USB_EPStartXfer+0x3ae>
 802042c:	683b      	ldr	r3, [r7, #0]
 802042e:	785b      	ldrb	r3, [r3, #1]
 8020430:	2b01      	cmp	r3, #1
 8020432:	d118      	bne.n	8020466 <USB_EPStartXfer+0x3ae>
 8020434:	687b      	ldr	r3, [r7, #4]
 8020436:	623b      	str	r3, [r7, #32]
 8020438:	687b      	ldr	r3, [r7, #4]
 802043a:	2250      	movs	r2, #80	@ 0x50
 802043c:	5a9b      	ldrh	r3, [r3, r2]
 802043e:	b29b      	uxth	r3, r3
 8020440:	001a      	movs	r2, r3
 8020442:	6a3b      	ldr	r3, [r7, #32]
 8020444:	189b      	adds	r3, r3, r2
 8020446:	623b      	str	r3, [r7, #32]
 8020448:	683b      	ldr	r3, [r7, #0]
 802044a:	781b      	ldrb	r3, [r3, #0]
 802044c:	00da      	lsls	r2, r3, #3
 802044e:	6a3b      	ldr	r3, [r7, #32]
 8020450:	18d3      	adds	r3, r2, r3
 8020452:	4a0e      	ldr	r2, [pc, #56]	@ (802048c <USB_EPStartXfer+0x3d4>)
 8020454:	4694      	mov	ip, r2
 8020456:	4463      	add	r3, ip
 8020458:	61fb      	str	r3, [r7, #28]
 802045a:	1d7b      	adds	r3, r7, #5
 802045c:	33ff      	adds	r3, #255	@ 0xff
 802045e:	681b      	ldr	r3, [r3, #0]
 8020460:	b29a      	uxth	r2, r3
 8020462:	69fb      	ldr	r3, [r7, #28]
 8020464:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8020466:	2076      	movs	r0, #118	@ 0x76
 8020468:	183b      	adds	r3, r7, r0
 802046a:	683a      	ldr	r2, [r7, #0]
 802046c:	8912      	ldrh	r2, [r2, #8]
 802046e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020470:	683b      	ldr	r3, [r7, #0]
 8020472:	6959      	ldr	r1, [r3, #20]
 8020474:	1d7b      	adds	r3, r7, #5
 8020476:	33ff      	adds	r3, #255	@ 0xff
 8020478:	681b      	ldr	r3, [r3, #0]
 802047a:	b29c      	uxth	r4, r3
 802047c:	183b      	adds	r3, r7, r0
 802047e:	881a      	ldrh	r2, [r3, #0]
 8020480:	6878      	ldr	r0, [r7, #4]
 8020482:	0023      	movs	r3, r4
 8020484:	f001 f88a 	bl	802159c <USB_WritePMA>
 8020488:	e329      	b.n	8020ade <USB_EPStartXfer+0xa26>
 802048a:	46c0      	nop			@ (mov r8, r8)
 802048c:	00000402 	.word	0x00000402
 8020490:	ffff8f8f 	.word	0xffff8f8f
 8020494:	ffff8180 	.word	0xffff8180
 8020498:	00000406 	.word	0x00000406
 802049c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80204a0:	683b      	ldr	r3, [r7, #0]
 80204a2:	785b      	ldrb	r3, [r3, #1]
 80204a4:	2b00      	cmp	r3, #0
 80204a6:	d000      	beq.n	80204aa <USB_EPStartXfer+0x3f2>
 80204a8:	e070      	b.n	802058c <USB_EPStartXfer+0x4d4>
 80204aa:	687b      	ldr	r3, [r7, #4]
 80204ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80204ae:	687b      	ldr	r3, [r7, #4]
 80204b0:	2250      	movs	r2, #80	@ 0x50
 80204b2:	5a9b      	ldrh	r3, [r3, r2]
 80204b4:	b29b      	uxth	r3, r3
 80204b6:	001a      	movs	r2, r3
 80204b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80204ba:	189b      	adds	r3, r3, r2
 80204bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80204be:	683b      	ldr	r3, [r7, #0]
 80204c0:	781b      	ldrb	r3, [r3, #0]
 80204c2:	00da      	lsls	r2, r3, #3
 80204c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80204c6:	18d3      	adds	r3, r2, r3
 80204c8:	4acd      	ldr	r2, [pc, #820]	@ (8020800 <USB_EPStartXfer+0x748>)
 80204ca:	4694      	mov	ip, r2
 80204cc:	4463      	add	r3, ip
 80204ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80204d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80204d2:	881b      	ldrh	r3, [r3, #0]
 80204d4:	b29b      	uxth	r3, r3
 80204d6:	059b      	lsls	r3, r3, #22
 80204d8:	0d9b      	lsrs	r3, r3, #22
 80204da:	b29a      	uxth	r2, r3
 80204dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80204de:	801a      	strh	r2, [r3, #0]
 80204e0:	1d7b      	adds	r3, r7, #5
 80204e2:	33ff      	adds	r3, #255	@ 0xff
 80204e4:	681b      	ldr	r3, [r3, #0]
 80204e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80204e8:	d922      	bls.n	8020530 <USB_EPStartXfer+0x478>
 80204ea:	1d7b      	adds	r3, r7, #5
 80204ec:	33ff      	adds	r3, #255	@ 0xff
 80204ee:	681b      	ldr	r3, [r3, #0]
 80204f0:	095b      	lsrs	r3, r3, #5
 80204f2:	21f8      	movs	r1, #248	@ 0xf8
 80204f4:	187a      	adds	r2, r7, r1
 80204f6:	6013      	str	r3, [r2, #0]
 80204f8:	1d7b      	adds	r3, r7, #5
 80204fa:	33ff      	adds	r3, #255	@ 0xff
 80204fc:	681b      	ldr	r3, [r3, #0]
 80204fe:	221f      	movs	r2, #31
 8020500:	4013      	ands	r3, r2
 8020502:	d104      	bne.n	802050e <USB_EPStartXfer+0x456>
 8020504:	187b      	adds	r3, r7, r1
 8020506:	681b      	ldr	r3, [r3, #0]
 8020508:	3b01      	subs	r3, #1
 802050a:	187a      	adds	r2, r7, r1
 802050c:	6013      	str	r3, [r2, #0]
 802050e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020510:	881b      	ldrh	r3, [r3, #0]
 8020512:	b29a      	uxth	r2, r3
 8020514:	23f8      	movs	r3, #248	@ 0xf8
 8020516:	18fb      	adds	r3, r7, r3
 8020518:	681b      	ldr	r3, [r3, #0]
 802051a:	b29b      	uxth	r3, r3
 802051c:	029b      	lsls	r3, r3, #10
 802051e:	b29b      	uxth	r3, r3
 8020520:	4313      	orrs	r3, r2
 8020522:	b29b      	uxth	r3, r3
 8020524:	4ab7      	ldr	r2, [pc, #732]	@ (8020804 <USB_EPStartXfer+0x74c>)
 8020526:	4313      	orrs	r3, r2
 8020528:	b29a      	uxth	r2, r3
 802052a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802052c:	801a      	strh	r2, [r3, #0]
 802052e:	e04a      	b.n	80205c6 <USB_EPStartXfer+0x50e>
 8020530:	1d7b      	adds	r3, r7, #5
 8020532:	33ff      	adds	r3, #255	@ 0xff
 8020534:	681b      	ldr	r3, [r3, #0]
 8020536:	2b00      	cmp	r3, #0
 8020538:	d108      	bne.n	802054c <USB_EPStartXfer+0x494>
 802053a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802053c:	881b      	ldrh	r3, [r3, #0]
 802053e:	b29b      	uxth	r3, r3
 8020540:	4ab0      	ldr	r2, [pc, #704]	@ (8020804 <USB_EPStartXfer+0x74c>)
 8020542:	4313      	orrs	r3, r2
 8020544:	b29a      	uxth	r2, r3
 8020546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020548:	801a      	strh	r2, [r3, #0]
 802054a:	e03c      	b.n	80205c6 <USB_EPStartXfer+0x50e>
 802054c:	1d7b      	adds	r3, r7, #5
 802054e:	33ff      	adds	r3, #255	@ 0xff
 8020550:	681b      	ldr	r3, [r3, #0]
 8020552:	085b      	lsrs	r3, r3, #1
 8020554:	21f8      	movs	r1, #248	@ 0xf8
 8020556:	187a      	adds	r2, r7, r1
 8020558:	6013      	str	r3, [r2, #0]
 802055a:	1d7b      	adds	r3, r7, #5
 802055c:	33ff      	adds	r3, #255	@ 0xff
 802055e:	681b      	ldr	r3, [r3, #0]
 8020560:	2201      	movs	r2, #1
 8020562:	4013      	ands	r3, r2
 8020564:	d004      	beq.n	8020570 <USB_EPStartXfer+0x4b8>
 8020566:	187b      	adds	r3, r7, r1
 8020568:	681b      	ldr	r3, [r3, #0]
 802056a:	3301      	adds	r3, #1
 802056c:	187a      	adds	r2, r7, r1
 802056e:	6013      	str	r3, [r2, #0]
 8020570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020572:	881b      	ldrh	r3, [r3, #0]
 8020574:	b29a      	uxth	r2, r3
 8020576:	23f8      	movs	r3, #248	@ 0xf8
 8020578:	18fb      	adds	r3, r7, r3
 802057a:	681b      	ldr	r3, [r3, #0]
 802057c:	b29b      	uxth	r3, r3
 802057e:	029b      	lsls	r3, r3, #10
 8020580:	b29b      	uxth	r3, r3
 8020582:	4313      	orrs	r3, r2
 8020584:	b29a      	uxth	r2, r3
 8020586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020588:	801a      	strh	r2, [r3, #0]
 802058a:	e01c      	b.n	80205c6 <USB_EPStartXfer+0x50e>
 802058c:	683b      	ldr	r3, [r7, #0]
 802058e:	785b      	ldrb	r3, [r3, #1]
 8020590:	2b01      	cmp	r3, #1
 8020592:	d118      	bne.n	80205c6 <USB_EPStartXfer+0x50e>
 8020594:	687b      	ldr	r3, [r7, #4]
 8020596:	653b      	str	r3, [r7, #80]	@ 0x50
 8020598:	687b      	ldr	r3, [r7, #4]
 802059a:	2250      	movs	r2, #80	@ 0x50
 802059c:	5a9b      	ldrh	r3, [r3, r2]
 802059e:	b29b      	uxth	r3, r3
 80205a0:	001a      	movs	r2, r3
 80205a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80205a4:	189b      	adds	r3, r3, r2
 80205a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80205a8:	683b      	ldr	r3, [r7, #0]
 80205aa:	781b      	ldrb	r3, [r3, #0]
 80205ac:	00da      	lsls	r2, r3, #3
 80205ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80205b0:	18d3      	adds	r3, r2, r3
 80205b2:	4a93      	ldr	r2, [pc, #588]	@ (8020800 <USB_EPStartXfer+0x748>)
 80205b4:	4694      	mov	ip, r2
 80205b6:	4463      	add	r3, ip
 80205b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80205ba:	1d7b      	adds	r3, r7, #5
 80205bc:	33ff      	adds	r3, #255	@ 0xff
 80205be:	681b      	ldr	r3, [r3, #0]
 80205c0:	b29a      	uxth	r2, r3
 80205c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80205c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80205c6:	2076      	movs	r0, #118	@ 0x76
 80205c8:	183b      	adds	r3, r7, r0
 80205ca:	683a      	ldr	r2, [r7, #0]
 80205cc:	8912      	ldrh	r2, [r2, #8]
 80205ce:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80205d0:	683b      	ldr	r3, [r7, #0]
 80205d2:	6959      	ldr	r1, [r3, #20]
 80205d4:	1d7b      	adds	r3, r7, #5
 80205d6:	33ff      	adds	r3, #255	@ 0xff
 80205d8:	681b      	ldr	r3, [r3, #0]
 80205da:	b29c      	uxth	r4, r3
 80205dc:	183b      	adds	r3, r7, r0
 80205de:	881a      	ldrh	r2, [r3, #0]
 80205e0:	6878      	ldr	r0, [r7, #4]
 80205e2:	0023      	movs	r3, r4
 80205e4:	f000 ffda 	bl	802159c <USB_WritePMA>
            ep->xfer_buff += len;
 80205e8:	683b      	ldr	r3, [r7, #0]
 80205ea:	695a      	ldr	r2, [r3, #20]
 80205ec:	1d7b      	adds	r3, r7, #5
 80205ee:	33ff      	adds	r3, #255	@ 0xff
 80205f0:	681b      	ldr	r3, [r3, #0]
 80205f2:	18d2      	adds	r2, r2, r3
 80205f4:	683b      	ldr	r3, [r7, #0]
 80205f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80205f8:	683b      	ldr	r3, [r7, #0]
 80205fa:	6a1a      	ldr	r2, [r3, #32]
 80205fc:	683b      	ldr	r3, [r7, #0]
 80205fe:	691b      	ldr	r3, [r3, #16]
 8020600:	429a      	cmp	r2, r3
 8020602:	d908      	bls.n	8020616 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8020604:	683b      	ldr	r3, [r7, #0]
 8020606:	6a1a      	ldr	r2, [r3, #32]
 8020608:	1d7b      	adds	r3, r7, #5
 802060a:	33ff      	adds	r3, #255	@ 0xff
 802060c:	681b      	ldr	r3, [r3, #0]
 802060e:	1ad2      	subs	r2, r2, r3
 8020610:	683b      	ldr	r3, [r7, #0]
 8020612:	621a      	str	r2, [r3, #32]
 8020614:	e007      	b.n	8020626 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8020616:	683b      	ldr	r3, [r7, #0]
 8020618:	6a1b      	ldr	r3, [r3, #32]
 802061a:	1d7a      	adds	r2, r7, #5
 802061c:	32ff      	adds	r2, #255	@ 0xff
 802061e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8020620:	683b      	ldr	r3, [r7, #0]
 8020622:	2200      	movs	r2, #0
 8020624:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8020626:	687b      	ldr	r3, [r7, #4]
 8020628:	643b      	str	r3, [r7, #64]	@ 0x40
 802062a:	683b      	ldr	r3, [r7, #0]
 802062c:	785b      	ldrb	r3, [r3, #1]
 802062e:	2b00      	cmp	r3, #0
 8020630:	d000      	beq.n	8020634 <USB_EPStartXfer+0x57c>
 8020632:	e070      	b.n	8020716 <USB_EPStartXfer+0x65e>
 8020634:	687b      	ldr	r3, [r7, #4]
 8020636:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020638:	687b      	ldr	r3, [r7, #4]
 802063a:	2250      	movs	r2, #80	@ 0x50
 802063c:	5a9b      	ldrh	r3, [r3, r2]
 802063e:	b29b      	uxth	r3, r3
 8020640:	001a      	movs	r2, r3
 8020642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020644:	189b      	adds	r3, r3, r2
 8020646:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020648:	683b      	ldr	r3, [r7, #0]
 802064a:	781b      	ldrb	r3, [r3, #0]
 802064c:	00da      	lsls	r2, r3, #3
 802064e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020650:	18d3      	adds	r3, r2, r3
 8020652:	4a6d      	ldr	r2, [pc, #436]	@ (8020808 <USB_EPStartXfer+0x750>)
 8020654:	4694      	mov	ip, r2
 8020656:	4463      	add	r3, ip
 8020658:	637b      	str	r3, [r7, #52]	@ 0x34
 802065a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802065c:	881b      	ldrh	r3, [r3, #0]
 802065e:	b29b      	uxth	r3, r3
 8020660:	059b      	lsls	r3, r3, #22
 8020662:	0d9b      	lsrs	r3, r3, #22
 8020664:	b29a      	uxth	r2, r3
 8020666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020668:	801a      	strh	r2, [r3, #0]
 802066a:	1d7b      	adds	r3, r7, #5
 802066c:	33ff      	adds	r3, #255	@ 0xff
 802066e:	681b      	ldr	r3, [r3, #0]
 8020670:	2b3e      	cmp	r3, #62	@ 0x3e
 8020672:	d922      	bls.n	80206ba <USB_EPStartXfer+0x602>
 8020674:	1d7b      	adds	r3, r7, #5
 8020676:	33ff      	adds	r3, #255	@ 0xff
 8020678:	681b      	ldr	r3, [r3, #0]
 802067a:	095b      	lsrs	r3, r3, #5
 802067c:	21f4      	movs	r1, #244	@ 0xf4
 802067e:	187a      	adds	r2, r7, r1
 8020680:	6013      	str	r3, [r2, #0]
 8020682:	1d7b      	adds	r3, r7, #5
 8020684:	33ff      	adds	r3, #255	@ 0xff
 8020686:	681b      	ldr	r3, [r3, #0]
 8020688:	221f      	movs	r2, #31
 802068a:	4013      	ands	r3, r2
 802068c:	d104      	bne.n	8020698 <USB_EPStartXfer+0x5e0>
 802068e:	187b      	adds	r3, r7, r1
 8020690:	681b      	ldr	r3, [r3, #0]
 8020692:	3b01      	subs	r3, #1
 8020694:	187a      	adds	r2, r7, r1
 8020696:	6013      	str	r3, [r2, #0]
 8020698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802069a:	881b      	ldrh	r3, [r3, #0]
 802069c:	b29a      	uxth	r2, r3
 802069e:	23f4      	movs	r3, #244	@ 0xf4
 80206a0:	18fb      	adds	r3, r7, r3
 80206a2:	681b      	ldr	r3, [r3, #0]
 80206a4:	b29b      	uxth	r3, r3
 80206a6:	029b      	lsls	r3, r3, #10
 80206a8:	b29b      	uxth	r3, r3
 80206aa:	4313      	orrs	r3, r2
 80206ac:	b29b      	uxth	r3, r3
 80206ae:	4a55      	ldr	r2, [pc, #340]	@ (8020804 <USB_EPStartXfer+0x74c>)
 80206b0:	4313      	orrs	r3, r2
 80206b2:	b29a      	uxth	r2, r3
 80206b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80206b6:	801a      	strh	r2, [r3, #0]
 80206b8:	e048      	b.n	802074c <USB_EPStartXfer+0x694>
 80206ba:	1d7b      	adds	r3, r7, #5
 80206bc:	33ff      	adds	r3, #255	@ 0xff
 80206be:	681b      	ldr	r3, [r3, #0]
 80206c0:	2b00      	cmp	r3, #0
 80206c2:	d108      	bne.n	80206d6 <USB_EPStartXfer+0x61e>
 80206c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80206c6:	881b      	ldrh	r3, [r3, #0]
 80206c8:	b29b      	uxth	r3, r3
 80206ca:	4a4e      	ldr	r2, [pc, #312]	@ (8020804 <USB_EPStartXfer+0x74c>)
 80206cc:	4313      	orrs	r3, r2
 80206ce:	b29a      	uxth	r2, r3
 80206d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80206d2:	801a      	strh	r2, [r3, #0]
 80206d4:	e03a      	b.n	802074c <USB_EPStartXfer+0x694>
 80206d6:	1d7b      	adds	r3, r7, #5
 80206d8:	33ff      	adds	r3, #255	@ 0xff
 80206da:	681b      	ldr	r3, [r3, #0]
 80206dc:	085b      	lsrs	r3, r3, #1
 80206de:	21f4      	movs	r1, #244	@ 0xf4
 80206e0:	187a      	adds	r2, r7, r1
 80206e2:	6013      	str	r3, [r2, #0]
 80206e4:	1d7b      	adds	r3, r7, #5
 80206e6:	33ff      	adds	r3, #255	@ 0xff
 80206e8:	681b      	ldr	r3, [r3, #0]
 80206ea:	2201      	movs	r2, #1
 80206ec:	4013      	ands	r3, r2
 80206ee:	d004      	beq.n	80206fa <USB_EPStartXfer+0x642>
 80206f0:	187b      	adds	r3, r7, r1
 80206f2:	681b      	ldr	r3, [r3, #0]
 80206f4:	3301      	adds	r3, #1
 80206f6:	187a      	adds	r2, r7, r1
 80206f8:	6013      	str	r3, [r2, #0]
 80206fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80206fc:	881b      	ldrh	r3, [r3, #0]
 80206fe:	b29a      	uxth	r2, r3
 8020700:	23f4      	movs	r3, #244	@ 0xf4
 8020702:	18fb      	adds	r3, r7, r3
 8020704:	681b      	ldr	r3, [r3, #0]
 8020706:	b29b      	uxth	r3, r3
 8020708:	029b      	lsls	r3, r3, #10
 802070a:	b29b      	uxth	r3, r3
 802070c:	4313      	orrs	r3, r2
 802070e:	b29a      	uxth	r2, r3
 8020710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020712:	801a      	strh	r2, [r3, #0]
 8020714:	e01a      	b.n	802074c <USB_EPStartXfer+0x694>
 8020716:	683b      	ldr	r3, [r7, #0]
 8020718:	785b      	ldrb	r3, [r3, #1]
 802071a:	2b01      	cmp	r3, #1
 802071c:	d116      	bne.n	802074c <USB_EPStartXfer+0x694>
 802071e:	687b      	ldr	r3, [r7, #4]
 8020720:	2250      	movs	r2, #80	@ 0x50
 8020722:	5a9b      	ldrh	r3, [r3, r2]
 8020724:	b29b      	uxth	r3, r3
 8020726:	001a      	movs	r2, r3
 8020728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802072a:	189b      	adds	r3, r3, r2
 802072c:	643b      	str	r3, [r7, #64]	@ 0x40
 802072e:	683b      	ldr	r3, [r7, #0]
 8020730:	781b      	ldrb	r3, [r3, #0]
 8020732:	00da      	lsls	r2, r3, #3
 8020734:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020736:	18d3      	adds	r3, r2, r3
 8020738:	4a33      	ldr	r2, [pc, #204]	@ (8020808 <USB_EPStartXfer+0x750>)
 802073a:	4694      	mov	ip, r2
 802073c:	4463      	add	r3, ip
 802073e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020740:	1d7b      	adds	r3, r7, #5
 8020742:	33ff      	adds	r3, #255	@ 0xff
 8020744:	681b      	ldr	r3, [r3, #0]
 8020746:	b29a      	uxth	r2, r3
 8020748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802074a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 802074c:	2076      	movs	r0, #118	@ 0x76
 802074e:	183b      	adds	r3, r7, r0
 8020750:	683a      	ldr	r2, [r7, #0]
 8020752:	8952      	ldrh	r2, [r2, #10]
 8020754:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020756:	683b      	ldr	r3, [r7, #0]
 8020758:	6959      	ldr	r1, [r3, #20]
 802075a:	1d7b      	adds	r3, r7, #5
 802075c:	33ff      	adds	r3, #255	@ 0xff
 802075e:	681b      	ldr	r3, [r3, #0]
 8020760:	b29c      	uxth	r4, r3
 8020762:	183b      	adds	r3, r7, r0
 8020764:	881a      	ldrh	r2, [r3, #0]
 8020766:	6878      	ldr	r0, [r7, #4]
 8020768:	0023      	movs	r3, r4
 802076a:	f000 ff17 	bl	802159c <USB_WritePMA>
 802076e:	e1b6      	b.n	8020ade <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8020770:	683b      	ldr	r3, [r7, #0]
 8020772:	6a1b      	ldr	r3, [r3, #32]
 8020774:	1d7a      	adds	r2, r7, #5
 8020776:	32ff      	adds	r2, #255	@ 0xff
 8020778:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 802077a:	687a      	ldr	r2, [r7, #4]
 802077c:	683b      	ldr	r3, [r7, #0]
 802077e:	781b      	ldrb	r3, [r3, #0]
 8020780:	009b      	lsls	r3, r3, #2
 8020782:	18d3      	adds	r3, r2, r3
 8020784:	881b      	ldrh	r3, [r3, #0]
 8020786:	b29a      	uxth	r2, r3
 8020788:	2062      	movs	r0, #98	@ 0x62
 802078a:	183b      	adds	r3, r7, r0
 802078c:	491f      	ldr	r1, [pc, #124]	@ (802080c <USB_EPStartXfer+0x754>)
 802078e:	400a      	ands	r2, r1
 8020790:	801a      	strh	r2, [r3, #0]
 8020792:	687a      	ldr	r2, [r7, #4]
 8020794:	683b      	ldr	r3, [r7, #0]
 8020796:	781b      	ldrb	r3, [r3, #0]
 8020798:	009b      	lsls	r3, r3, #2
 802079a:	18d3      	adds	r3, r2, r3
 802079c:	183a      	adds	r2, r7, r0
 802079e:	8812      	ldrh	r2, [r2, #0]
 80207a0:	491b      	ldr	r1, [pc, #108]	@ (8020810 <USB_EPStartXfer+0x758>)
 80207a2:	430a      	orrs	r2, r1
 80207a4:	b292      	uxth	r2, r2
 80207a6:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80207a8:	687b      	ldr	r3, [r7, #4]
 80207aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80207ac:	687b      	ldr	r3, [r7, #4]
 80207ae:	2250      	movs	r2, #80	@ 0x50
 80207b0:	5a9b      	ldrh	r3, [r3, r2]
 80207b2:	b29b      	uxth	r3, r3
 80207b4:	001a      	movs	r2, r3
 80207b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80207b8:	189b      	adds	r3, r3, r2
 80207ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80207bc:	683b      	ldr	r3, [r7, #0]
 80207be:	781b      	ldrb	r3, [r3, #0]
 80207c0:	00da      	lsls	r2, r3, #3
 80207c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80207c4:	18d3      	adds	r3, r2, r3
 80207c6:	4a0e      	ldr	r2, [pc, #56]	@ (8020800 <USB_EPStartXfer+0x748>)
 80207c8:	4694      	mov	ip, r2
 80207ca:	4463      	add	r3, ip
 80207cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80207ce:	1d7b      	adds	r3, r7, #5
 80207d0:	33ff      	adds	r3, #255	@ 0xff
 80207d2:	681b      	ldr	r3, [r3, #0]
 80207d4:	b29a      	uxth	r2, r3
 80207d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80207d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80207da:	2076      	movs	r0, #118	@ 0x76
 80207dc:	183b      	adds	r3, r7, r0
 80207de:	683a      	ldr	r2, [r7, #0]
 80207e0:	8912      	ldrh	r2, [r2, #8]
 80207e2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80207e4:	683b      	ldr	r3, [r7, #0]
 80207e6:	6959      	ldr	r1, [r3, #20]
 80207e8:	1d7b      	adds	r3, r7, #5
 80207ea:	33ff      	adds	r3, #255	@ 0xff
 80207ec:	681b      	ldr	r3, [r3, #0]
 80207ee:	b29c      	uxth	r4, r3
 80207f0:	183b      	adds	r3, r7, r0
 80207f2:	881a      	ldrh	r2, [r3, #0]
 80207f4:	6878      	ldr	r0, [r7, #4]
 80207f6:	0023      	movs	r3, r4
 80207f8:	f000 fed0 	bl	802159c <USB_WritePMA>
 80207fc:	e16f      	b.n	8020ade <USB_EPStartXfer+0xa26>
 80207fe:	46c0      	nop			@ (mov r8, r8)
 8020800:	00000402 	.word	0x00000402
 8020804:	ffff8000 	.word	0xffff8000
 8020808:	00000406 	.word	0x00000406
 802080c:	ffff8e8f 	.word	0xffff8e8f
 8020810:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8020814:	683b      	ldr	r3, [r7, #0]
 8020816:	6a1a      	ldr	r2, [r3, #32]
 8020818:	1d7b      	adds	r3, r7, #5
 802081a:	33ff      	adds	r3, #255	@ 0xff
 802081c:	681b      	ldr	r3, [r3, #0]
 802081e:	1ad2      	subs	r2, r2, r3
 8020820:	683b      	ldr	r3, [r7, #0]
 8020822:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8020824:	687a      	ldr	r2, [r7, #4]
 8020826:	683b      	ldr	r3, [r7, #0]
 8020828:	781b      	ldrb	r3, [r3, #0]
 802082a:	009b      	lsls	r3, r3, #2
 802082c:	18d3      	adds	r3, r2, r3
 802082e:	881b      	ldrh	r3, [r3, #0]
 8020830:	b29b      	uxth	r3, r3
 8020832:	001a      	movs	r2, r3
 8020834:	2340      	movs	r3, #64	@ 0x40
 8020836:	4013      	ands	r3, r2
 8020838:	d100      	bne.n	802083c <USB_EPStartXfer+0x784>
 802083a:	e0a4      	b.n	8020986 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 802083c:	687b      	ldr	r3, [r7, #4]
 802083e:	673b      	str	r3, [r7, #112]	@ 0x70
 8020840:	683b      	ldr	r3, [r7, #0]
 8020842:	785b      	ldrb	r3, [r3, #1]
 8020844:	2b00      	cmp	r3, #0
 8020846:	d000      	beq.n	802084a <USB_EPStartXfer+0x792>
 8020848:	e070      	b.n	802092c <USB_EPStartXfer+0x874>
 802084a:	687b      	ldr	r3, [r7, #4]
 802084c:	66bb      	str	r3, [r7, #104]	@ 0x68
 802084e:	687b      	ldr	r3, [r7, #4]
 8020850:	2250      	movs	r2, #80	@ 0x50
 8020852:	5a9b      	ldrh	r3, [r3, r2]
 8020854:	b29b      	uxth	r3, r3
 8020856:	001a      	movs	r2, r3
 8020858:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 802085a:	189b      	adds	r3, r3, r2
 802085c:	66bb      	str	r3, [r7, #104]	@ 0x68
 802085e:	683b      	ldr	r3, [r7, #0]
 8020860:	781b      	ldrb	r3, [r3, #0]
 8020862:	00da      	lsls	r2, r3, #3
 8020864:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8020866:	18d3      	adds	r3, r2, r3
 8020868:	4abc      	ldr	r2, [pc, #752]	@ (8020b5c <USB_EPStartXfer+0xaa4>)
 802086a:	4694      	mov	ip, r2
 802086c:	4463      	add	r3, ip
 802086e:	667b      	str	r3, [r7, #100]	@ 0x64
 8020870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020872:	881b      	ldrh	r3, [r3, #0]
 8020874:	b29b      	uxth	r3, r3
 8020876:	059b      	lsls	r3, r3, #22
 8020878:	0d9b      	lsrs	r3, r3, #22
 802087a:	b29a      	uxth	r2, r3
 802087c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802087e:	801a      	strh	r2, [r3, #0]
 8020880:	1d7b      	adds	r3, r7, #5
 8020882:	33ff      	adds	r3, #255	@ 0xff
 8020884:	681b      	ldr	r3, [r3, #0]
 8020886:	2b3e      	cmp	r3, #62	@ 0x3e
 8020888:	d922      	bls.n	80208d0 <USB_EPStartXfer+0x818>
 802088a:	1d7b      	adds	r3, r7, #5
 802088c:	33ff      	adds	r3, #255	@ 0xff
 802088e:	681b      	ldr	r3, [r3, #0]
 8020890:	095b      	lsrs	r3, r3, #5
 8020892:	21f0      	movs	r1, #240	@ 0xf0
 8020894:	187a      	adds	r2, r7, r1
 8020896:	6013      	str	r3, [r2, #0]
 8020898:	1d7b      	adds	r3, r7, #5
 802089a:	33ff      	adds	r3, #255	@ 0xff
 802089c:	681b      	ldr	r3, [r3, #0]
 802089e:	221f      	movs	r2, #31
 80208a0:	4013      	ands	r3, r2
 80208a2:	d104      	bne.n	80208ae <USB_EPStartXfer+0x7f6>
 80208a4:	187b      	adds	r3, r7, r1
 80208a6:	681b      	ldr	r3, [r3, #0]
 80208a8:	3b01      	subs	r3, #1
 80208aa:	187a      	adds	r2, r7, r1
 80208ac:	6013      	str	r3, [r2, #0]
 80208ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80208b0:	881b      	ldrh	r3, [r3, #0]
 80208b2:	b29a      	uxth	r2, r3
 80208b4:	23f0      	movs	r3, #240	@ 0xf0
 80208b6:	18fb      	adds	r3, r7, r3
 80208b8:	681b      	ldr	r3, [r3, #0]
 80208ba:	b29b      	uxth	r3, r3
 80208bc:	029b      	lsls	r3, r3, #10
 80208be:	b29b      	uxth	r3, r3
 80208c0:	4313      	orrs	r3, r2
 80208c2:	b29b      	uxth	r3, r3
 80208c4:	4aa6      	ldr	r2, [pc, #664]	@ (8020b60 <USB_EPStartXfer+0xaa8>)
 80208c6:	4313      	orrs	r3, r2
 80208c8:	b29a      	uxth	r2, r3
 80208ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80208cc:	801a      	strh	r2, [r3, #0]
 80208ce:	e048      	b.n	8020962 <USB_EPStartXfer+0x8aa>
 80208d0:	1d7b      	adds	r3, r7, #5
 80208d2:	33ff      	adds	r3, #255	@ 0xff
 80208d4:	681b      	ldr	r3, [r3, #0]
 80208d6:	2b00      	cmp	r3, #0
 80208d8:	d108      	bne.n	80208ec <USB_EPStartXfer+0x834>
 80208da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80208dc:	881b      	ldrh	r3, [r3, #0]
 80208de:	b29b      	uxth	r3, r3
 80208e0:	4a9f      	ldr	r2, [pc, #636]	@ (8020b60 <USB_EPStartXfer+0xaa8>)
 80208e2:	4313      	orrs	r3, r2
 80208e4:	b29a      	uxth	r2, r3
 80208e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80208e8:	801a      	strh	r2, [r3, #0]
 80208ea:	e03a      	b.n	8020962 <USB_EPStartXfer+0x8aa>
 80208ec:	1d7b      	adds	r3, r7, #5
 80208ee:	33ff      	adds	r3, #255	@ 0xff
 80208f0:	681b      	ldr	r3, [r3, #0]
 80208f2:	085b      	lsrs	r3, r3, #1
 80208f4:	21f0      	movs	r1, #240	@ 0xf0
 80208f6:	187a      	adds	r2, r7, r1
 80208f8:	6013      	str	r3, [r2, #0]
 80208fa:	1d7b      	adds	r3, r7, #5
 80208fc:	33ff      	adds	r3, #255	@ 0xff
 80208fe:	681b      	ldr	r3, [r3, #0]
 8020900:	2201      	movs	r2, #1
 8020902:	4013      	ands	r3, r2
 8020904:	d004      	beq.n	8020910 <USB_EPStartXfer+0x858>
 8020906:	187b      	adds	r3, r7, r1
 8020908:	681b      	ldr	r3, [r3, #0]
 802090a:	3301      	adds	r3, #1
 802090c:	187a      	adds	r2, r7, r1
 802090e:	6013      	str	r3, [r2, #0]
 8020910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020912:	881b      	ldrh	r3, [r3, #0]
 8020914:	b29a      	uxth	r2, r3
 8020916:	23f0      	movs	r3, #240	@ 0xf0
 8020918:	18fb      	adds	r3, r7, r3
 802091a:	681b      	ldr	r3, [r3, #0]
 802091c:	b29b      	uxth	r3, r3
 802091e:	029b      	lsls	r3, r3, #10
 8020920:	b29b      	uxth	r3, r3
 8020922:	4313      	orrs	r3, r2
 8020924:	b29a      	uxth	r2, r3
 8020926:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020928:	801a      	strh	r2, [r3, #0]
 802092a:	e01a      	b.n	8020962 <USB_EPStartXfer+0x8aa>
 802092c:	683b      	ldr	r3, [r7, #0]
 802092e:	785b      	ldrb	r3, [r3, #1]
 8020930:	2b01      	cmp	r3, #1
 8020932:	d116      	bne.n	8020962 <USB_EPStartXfer+0x8aa>
 8020934:	687b      	ldr	r3, [r7, #4]
 8020936:	2250      	movs	r2, #80	@ 0x50
 8020938:	5a9b      	ldrh	r3, [r3, r2]
 802093a:	b29b      	uxth	r3, r3
 802093c:	001a      	movs	r2, r3
 802093e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8020940:	189b      	adds	r3, r3, r2
 8020942:	673b      	str	r3, [r7, #112]	@ 0x70
 8020944:	683b      	ldr	r3, [r7, #0]
 8020946:	781b      	ldrb	r3, [r3, #0]
 8020948:	00da      	lsls	r2, r3, #3
 802094a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 802094c:	18d3      	adds	r3, r2, r3
 802094e:	4a83      	ldr	r2, [pc, #524]	@ (8020b5c <USB_EPStartXfer+0xaa4>)
 8020950:	4694      	mov	ip, r2
 8020952:	4463      	add	r3, ip
 8020954:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8020956:	1d7b      	adds	r3, r7, #5
 8020958:	33ff      	adds	r3, #255	@ 0xff
 802095a:	681b      	ldr	r3, [r3, #0]
 802095c:	b29a      	uxth	r2, r3
 802095e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8020960:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8020962:	2076      	movs	r0, #118	@ 0x76
 8020964:	183b      	adds	r3, r7, r0
 8020966:	683a      	ldr	r2, [r7, #0]
 8020968:	8952      	ldrh	r2, [r2, #10]
 802096a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 802096c:	683b      	ldr	r3, [r7, #0]
 802096e:	6959      	ldr	r1, [r3, #20]
 8020970:	1d7b      	adds	r3, r7, #5
 8020972:	33ff      	adds	r3, #255	@ 0xff
 8020974:	681b      	ldr	r3, [r3, #0]
 8020976:	b29c      	uxth	r4, r3
 8020978:	183b      	adds	r3, r7, r0
 802097a:	881a      	ldrh	r2, [r3, #0]
 802097c:	6878      	ldr	r0, [r7, #4]
 802097e:	0023      	movs	r3, r4
 8020980:	f000 fe0c 	bl	802159c <USB_WritePMA>
 8020984:	e0ab      	b.n	8020ade <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8020986:	683b      	ldr	r3, [r7, #0]
 8020988:	785b      	ldrb	r3, [r3, #1]
 802098a:	2b00      	cmp	r3, #0
 802098c:	d000      	beq.n	8020990 <USB_EPStartXfer+0x8d8>
 802098e:	e070      	b.n	8020a72 <USB_EPStartXfer+0x9ba>
 8020990:	687b      	ldr	r3, [r7, #4]
 8020992:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8020994:	687b      	ldr	r3, [r7, #4]
 8020996:	2250      	movs	r2, #80	@ 0x50
 8020998:	5a9b      	ldrh	r3, [r3, r2]
 802099a:	b29b      	uxth	r3, r3
 802099c:	001a      	movs	r2, r3
 802099e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80209a0:	189b      	adds	r3, r3, r2
 80209a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80209a4:	683b      	ldr	r3, [r7, #0]
 80209a6:	781b      	ldrb	r3, [r3, #0]
 80209a8:	00da      	lsls	r2, r3, #3
 80209aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80209ac:	18d3      	adds	r3, r2, r3
 80209ae:	4a6d      	ldr	r2, [pc, #436]	@ (8020b64 <USB_EPStartXfer+0xaac>)
 80209b0:	4694      	mov	ip, r2
 80209b2:	4463      	add	r3, ip
 80209b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80209b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80209b8:	881b      	ldrh	r3, [r3, #0]
 80209ba:	b29b      	uxth	r3, r3
 80209bc:	059b      	lsls	r3, r3, #22
 80209be:	0d9b      	lsrs	r3, r3, #22
 80209c0:	b29a      	uxth	r2, r3
 80209c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80209c4:	801a      	strh	r2, [r3, #0]
 80209c6:	1d7b      	adds	r3, r7, #5
 80209c8:	33ff      	adds	r3, #255	@ 0xff
 80209ca:	681b      	ldr	r3, [r3, #0]
 80209cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80209ce:	d922      	bls.n	8020a16 <USB_EPStartXfer+0x95e>
 80209d0:	1d7b      	adds	r3, r7, #5
 80209d2:	33ff      	adds	r3, #255	@ 0xff
 80209d4:	681b      	ldr	r3, [r3, #0]
 80209d6:	095b      	lsrs	r3, r3, #5
 80209d8:	21ec      	movs	r1, #236	@ 0xec
 80209da:	187a      	adds	r2, r7, r1
 80209dc:	6013      	str	r3, [r2, #0]
 80209de:	1d7b      	adds	r3, r7, #5
 80209e0:	33ff      	adds	r3, #255	@ 0xff
 80209e2:	681b      	ldr	r3, [r3, #0]
 80209e4:	221f      	movs	r2, #31
 80209e6:	4013      	ands	r3, r2
 80209e8:	d104      	bne.n	80209f4 <USB_EPStartXfer+0x93c>
 80209ea:	187b      	adds	r3, r7, r1
 80209ec:	681b      	ldr	r3, [r3, #0]
 80209ee:	3b01      	subs	r3, #1
 80209f0:	187a      	adds	r2, r7, r1
 80209f2:	6013      	str	r3, [r2, #0]
 80209f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80209f6:	881b      	ldrh	r3, [r3, #0]
 80209f8:	b29a      	uxth	r2, r3
 80209fa:	23ec      	movs	r3, #236	@ 0xec
 80209fc:	18fb      	adds	r3, r7, r3
 80209fe:	681b      	ldr	r3, [r3, #0]
 8020a00:	b29b      	uxth	r3, r3
 8020a02:	029b      	lsls	r3, r3, #10
 8020a04:	b29b      	uxth	r3, r3
 8020a06:	4313      	orrs	r3, r2
 8020a08:	b29b      	uxth	r3, r3
 8020a0a:	4a55      	ldr	r2, [pc, #340]	@ (8020b60 <USB_EPStartXfer+0xaa8>)
 8020a0c:	4313      	orrs	r3, r2
 8020a0e:	b29a      	uxth	r2, r3
 8020a10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020a12:	801a      	strh	r2, [r3, #0]
 8020a14:	e052      	b.n	8020abc <USB_EPStartXfer+0xa04>
 8020a16:	1d7b      	adds	r3, r7, #5
 8020a18:	33ff      	adds	r3, #255	@ 0xff
 8020a1a:	681b      	ldr	r3, [r3, #0]
 8020a1c:	2b00      	cmp	r3, #0
 8020a1e:	d108      	bne.n	8020a32 <USB_EPStartXfer+0x97a>
 8020a20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020a22:	881b      	ldrh	r3, [r3, #0]
 8020a24:	b29b      	uxth	r3, r3
 8020a26:	4a4e      	ldr	r2, [pc, #312]	@ (8020b60 <USB_EPStartXfer+0xaa8>)
 8020a28:	4313      	orrs	r3, r2
 8020a2a:	b29a      	uxth	r2, r3
 8020a2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020a2e:	801a      	strh	r2, [r3, #0]
 8020a30:	e044      	b.n	8020abc <USB_EPStartXfer+0xa04>
 8020a32:	1d7b      	adds	r3, r7, #5
 8020a34:	33ff      	adds	r3, #255	@ 0xff
 8020a36:	681b      	ldr	r3, [r3, #0]
 8020a38:	085b      	lsrs	r3, r3, #1
 8020a3a:	21ec      	movs	r1, #236	@ 0xec
 8020a3c:	187a      	adds	r2, r7, r1
 8020a3e:	6013      	str	r3, [r2, #0]
 8020a40:	1d7b      	adds	r3, r7, #5
 8020a42:	33ff      	adds	r3, #255	@ 0xff
 8020a44:	681b      	ldr	r3, [r3, #0]
 8020a46:	2201      	movs	r2, #1
 8020a48:	4013      	ands	r3, r2
 8020a4a:	d004      	beq.n	8020a56 <USB_EPStartXfer+0x99e>
 8020a4c:	187b      	adds	r3, r7, r1
 8020a4e:	681b      	ldr	r3, [r3, #0]
 8020a50:	3301      	adds	r3, #1
 8020a52:	187a      	adds	r2, r7, r1
 8020a54:	6013      	str	r3, [r2, #0]
 8020a56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020a58:	881b      	ldrh	r3, [r3, #0]
 8020a5a:	b29a      	uxth	r2, r3
 8020a5c:	23ec      	movs	r3, #236	@ 0xec
 8020a5e:	18fb      	adds	r3, r7, r3
 8020a60:	681b      	ldr	r3, [r3, #0]
 8020a62:	b29b      	uxth	r3, r3
 8020a64:	029b      	lsls	r3, r3, #10
 8020a66:	b29b      	uxth	r3, r3
 8020a68:	4313      	orrs	r3, r2
 8020a6a:	b29a      	uxth	r2, r3
 8020a6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020a6e:	801a      	strh	r2, [r3, #0]
 8020a70:	e024      	b.n	8020abc <USB_EPStartXfer+0xa04>
 8020a72:	683b      	ldr	r3, [r7, #0]
 8020a74:	785b      	ldrb	r3, [r3, #1]
 8020a76:	2b01      	cmp	r3, #1
 8020a78:	d120      	bne.n	8020abc <USB_EPStartXfer+0xa04>
 8020a7a:	687b      	ldr	r3, [r7, #4]
 8020a7c:	2184      	movs	r1, #132	@ 0x84
 8020a7e:	187a      	adds	r2, r7, r1
 8020a80:	6013      	str	r3, [r2, #0]
 8020a82:	687b      	ldr	r3, [r7, #4]
 8020a84:	2250      	movs	r2, #80	@ 0x50
 8020a86:	5a9b      	ldrh	r3, [r3, r2]
 8020a88:	b29b      	uxth	r3, r3
 8020a8a:	001a      	movs	r2, r3
 8020a8c:	187b      	adds	r3, r7, r1
 8020a8e:	681b      	ldr	r3, [r3, #0]
 8020a90:	189b      	adds	r3, r3, r2
 8020a92:	187a      	adds	r2, r7, r1
 8020a94:	6013      	str	r3, [r2, #0]
 8020a96:	683b      	ldr	r3, [r7, #0]
 8020a98:	781b      	ldrb	r3, [r3, #0]
 8020a9a:	00da      	lsls	r2, r3, #3
 8020a9c:	187b      	adds	r3, r7, r1
 8020a9e:	681b      	ldr	r3, [r3, #0]
 8020aa0:	18d3      	adds	r3, r2, r3
 8020aa2:	4a30      	ldr	r2, [pc, #192]	@ (8020b64 <USB_EPStartXfer+0xaac>)
 8020aa4:	4694      	mov	ip, r2
 8020aa6:	4463      	add	r3, ip
 8020aa8:	2180      	movs	r1, #128	@ 0x80
 8020aaa:	187a      	adds	r2, r7, r1
 8020aac:	6013      	str	r3, [r2, #0]
 8020aae:	1d7b      	adds	r3, r7, #5
 8020ab0:	33ff      	adds	r3, #255	@ 0xff
 8020ab2:	681b      	ldr	r3, [r3, #0]
 8020ab4:	b29a      	uxth	r2, r3
 8020ab6:	187b      	adds	r3, r7, r1
 8020ab8:	681b      	ldr	r3, [r3, #0]
 8020aba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8020abc:	2076      	movs	r0, #118	@ 0x76
 8020abe:	183b      	adds	r3, r7, r0
 8020ac0:	683a      	ldr	r2, [r7, #0]
 8020ac2:	8912      	ldrh	r2, [r2, #8]
 8020ac4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020ac6:	683b      	ldr	r3, [r7, #0]
 8020ac8:	6959      	ldr	r1, [r3, #20]
 8020aca:	1d7b      	adds	r3, r7, #5
 8020acc:	33ff      	adds	r3, #255	@ 0xff
 8020ace:	681b      	ldr	r3, [r3, #0]
 8020ad0:	b29c      	uxth	r4, r3
 8020ad2:	183b      	adds	r3, r7, r0
 8020ad4:	881a      	ldrh	r2, [r3, #0]
 8020ad6:	6878      	ldr	r0, [r7, #4]
 8020ad8:	0023      	movs	r3, r4
 8020ada:	f000 fd5f 	bl	802159c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8020ade:	687a      	ldr	r2, [r7, #4]
 8020ae0:	683b      	ldr	r3, [r7, #0]
 8020ae2:	781b      	ldrb	r3, [r3, #0]
 8020ae4:	009b      	lsls	r3, r3, #2
 8020ae6:	18d3      	adds	r3, r2, r3
 8020ae8:	881b      	ldrh	r3, [r3, #0]
 8020aea:	b29a      	uxth	r2, r3
 8020aec:	200a      	movs	r0, #10
 8020aee:	183b      	adds	r3, r7, r0
 8020af0:	491d      	ldr	r1, [pc, #116]	@ (8020b68 <USB_EPStartXfer+0xab0>)
 8020af2:	400a      	ands	r2, r1
 8020af4:	801a      	strh	r2, [r3, #0]
 8020af6:	183b      	adds	r3, r7, r0
 8020af8:	183a      	adds	r2, r7, r0
 8020afa:	8812      	ldrh	r2, [r2, #0]
 8020afc:	2110      	movs	r1, #16
 8020afe:	404a      	eors	r2, r1
 8020b00:	801a      	strh	r2, [r3, #0]
 8020b02:	183b      	adds	r3, r7, r0
 8020b04:	183a      	adds	r2, r7, r0
 8020b06:	8812      	ldrh	r2, [r2, #0]
 8020b08:	2120      	movs	r1, #32
 8020b0a:	404a      	eors	r2, r1
 8020b0c:	801a      	strh	r2, [r3, #0]
 8020b0e:	687a      	ldr	r2, [r7, #4]
 8020b10:	683b      	ldr	r3, [r7, #0]
 8020b12:	781b      	ldrb	r3, [r3, #0]
 8020b14:	009b      	lsls	r3, r3, #2
 8020b16:	18d3      	adds	r3, r2, r3
 8020b18:	183a      	adds	r2, r7, r0
 8020b1a:	8812      	ldrh	r2, [r2, #0]
 8020b1c:	4913      	ldr	r1, [pc, #76]	@ (8020b6c <USB_EPStartXfer+0xab4>)
 8020b1e:	430a      	orrs	r2, r1
 8020b20:	b292      	uxth	r2, r2
 8020b22:	801a      	strh	r2, [r3, #0]
 8020b24:	f000 fbf4 	bl	8021310 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8020b28:	683b      	ldr	r3, [r7, #0]
 8020b2a:	7b1b      	ldrb	r3, [r3, #12]
 8020b2c:	2b00      	cmp	r3, #0
 8020b2e:	d000      	beq.n	8020b32 <USB_EPStartXfer+0xa7a>
 8020b30:	e0a9      	b.n	8020c86 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8020b32:	683b      	ldr	r3, [r7, #0]
 8020b34:	699a      	ldr	r2, [r3, #24]
 8020b36:	683b      	ldr	r3, [r7, #0]
 8020b38:	691b      	ldr	r3, [r3, #16]
 8020b3a:	429a      	cmp	r2, r3
 8020b3c:	d918      	bls.n	8020b70 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8020b3e:	683b      	ldr	r3, [r7, #0]
 8020b40:	691b      	ldr	r3, [r3, #16]
 8020b42:	1d7a      	adds	r2, r7, #5
 8020b44:	32ff      	adds	r2, #255	@ 0xff
 8020b46:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8020b48:	683b      	ldr	r3, [r7, #0]
 8020b4a:	699a      	ldr	r2, [r3, #24]
 8020b4c:	1d7b      	adds	r3, r7, #5
 8020b4e:	33ff      	adds	r3, #255	@ 0xff
 8020b50:	681b      	ldr	r3, [r3, #0]
 8020b52:	1ad2      	subs	r2, r2, r3
 8020b54:	683b      	ldr	r3, [r7, #0]
 8020b56:	619a      	str	r2, [r3, #24]
 8020b58:	e012      	b.n	8020b80 <USB_EPStartXfer+0xac8>
 8020b5a:	46c0      	nop			@ (mov r8, r8)
 8020b5c:	00000406 	.word	0x00000406
 8020b60:	ffff8000 	.word	0xffff8000
 8020b64:	00000402 	.word	0x00000402
 8020b68:	ffff8fbf 	.word	0xffff8fbf
 8020b6c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8020b70:	683b      	ldr	r3, [r7, #0]
 8020b72:	699b      	ldr	r3, [r3, #24]
 8020b74:	1d7a      	adds	r2, r7, #5
 8020b76:	32ff      	adds	r2, #255	@ 0xff
 8020b78:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8020b7a:	683b      	ldr	r3, [r7, #0]
 8020b7c:	2200      	movs	r2, #0
 8020b7e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8020b80:	687b      	ldr	r3, [r7, #4]
 8020b82:	2190      	movs	r1, #144	@ 0x90
 8020b84:	187a      	adds	r2, r7, r1
 8020b86:	6013      	str	r3, [r2, #0]
 8020b88:	687b      	ldr	r3, [r7, #4]
 8020b8a:	2250      	movs	r2, #80	@ 0x50
 8020b8c:	5a9b      	ldrh	r3, [r3, r2]
 8020b8e:	b29b      	uxth	r3, r3
 8020b90:	001a      	movs	r2, r3
 8020b92:	187b      	adds	r3, r7, r1
 8020b94:	681b      	ldr	r3, [r3, #0]
 8020b96:	189b      	adds	r3, r3, r2
 8020b98:	187a      	adds	r2, r7, r1
 8020b9a:	6013      	str	r3, [r2, #0]
 8020b9c:	683b      	ldr	r3, [r7, #0]
 8020b9e:	781b      	ldrb	r3, [r3, #0]
 8020ba0:	00da      	lsls	r2, r3, #3
 8020ba2:	187b      	adds	r3, r7, r1
 8020ba4:	681b      	ldr	r3, [r3, #0]
 8020ba6:	18d3      	adds	r3, r2, r3
 8020ba8:	4acf      	ldr	r2, [pc, #828]	@ (8020ee8 <USB_EPStartXfer+0xe30>)
 8020baa:	4694      	mov	ip, r2
 8020bac:	4463      	add	r3, ip
 8020bae:	218c      	movs	r1, #140	@ 0x8c
 8020bb0:	187a      	adds	r2, r7, r1
 8020bb2:	6013      	str	r3, [r2, #0]
 8020bb4:	187b      	adds	r3, r7, r1
 8020bb6:	681b      	ldr	r3, [r3, #0]
 8020bb8:	881b      	ldrh	r3, [r3, #0]
 8020bba:	b29b      	uxth	r3, r3
 8020bbc:	059b      	lsls	r3, r3, #22
 8020bbe:	0d9b      	lsrs	r3, r3, #22
 8020bc0:	b29a      	uxth	r2, r3
 8020bc2:	187b      	adds	r3, r7, r1
 8020bc4:	681b      	ldr	r3, [r3, #0]
 8020bc6:	801a      	strh	r2, [r3, #0]
 8020bc8:	1d7b      	adds	r3, r7, #5
 8020bca:	33ff      	adds	r3, #255	@ 0xff
 8020bcc:	681b      	ldr	r3, [r3, #0]
 8020bce:	2b3e      	cmp	r3, #62	@ 0x3e
 8020bd0:	d925      	bls.n	8020c1e <USB_EPStartXfer+0xb66>
 8020bd2:	1d7b      	adds	r3, r7, #5
 8020bd4:	33ff      	adds	r3, #255	@ 0xff
 8020bd6:	681b      	ldr	r3, [r3, #0]
 8020bd8:	095b      	lsrs	r3, r3, #5
 8020bda:	21e8      	movs	r1, #232	@ 0xe8
 8020bdc:	187a      	adds	r2, r7, r1
 8020bde:	6013      	str	r3, [r2, #0]
 8020be0:	1d7b      	adds	r3, r7, #5
 8020be2:	33ff      	adds	r3, #255	@ 0xff
 8020be4:	681b      	ldr	r3, [r3, #0]
 8020be6:	221f      	movs	r2, #31
 8020be8:	4013      	ands	r3, r2
 8020bea:	d104      	bne.n	8020bf6 <USB_EPStartXfer+0xb3e>
 8020bec:	187b      	adds	r3, r7, r1
 8020bee:	681b      	ldr	r3, [r3, #0]
 8020bf0:	3b01      	subs	r3, #1
 8020bf2:	187a      	adds	r2, r7, r1
 8020bf4:	6013      	str	r3, [r2, #0]
 8020bf6:	218c      	movs	r1, #140	@ 0x8c
 8020bf8:	187b      	adds	r3, r7, r1
 8020bfa:	681b      	ldr	r3, [r3, #0]
 8020bfc:	881b      	ldrh	r3, [r3, #0]
 8020bfe:	b29a      	uxth	r2, r3
 8020c00:	23e8      	movs	r3, #232	@ 0xe8
 8020c02:	18fb      	adds	r3, r7, r3
 8020c04:	681b      	ldr	r3, [r3, #0]
 8020c06:	b29b      	uxth	r3, r3
 8020c08:	029b      	lsls	r3, r3, #10
 8020c0a:	b29b      	uxth	r3, r3
 8020c0c:	4313      	orrs	r3, r2
 8020c0e:	b29b      	uxth	r3, r3
 8020c10:	4ab6      	ldr	r2, [pc, #728]	@ (8020eec <USB_EPStartXfer+0xe34>)
 8020c12:	4313      	orrs	r3, r2
 8020c14:	b29a      	uxth	r2, r3
 8020c16:	187b      	adds	r3, r7, r1
 8020c18:	681b      	ldr	r3, [r3, #0]
 8020c1a:	801a      	strh	r2, [r3, #0]
 8020c1c:	e353      	b.n	80212c6 <USB_EPStartXfer+0x120e>
 8020c1e:	1d7b      	adds	r3, r7, #5
 8020c20:	33ff      	adds	r3, #255	@ 0xff
 8020c22:	681b      	ldr	r3, [r3, #0]
 8020c24:	2b00      	cmp	r3, #0
 8020c26:	d10b      	bne.n	8020c40 <USB_EPStartXfer+0xb88>
 8020c28:	218c      	movs	r1, #140	@ 0x8c
 8020c2a:	187b      	adds	r3, r7, r1
 8020c2c:	681b      	ldr	r3, [r3, #0]
 8020c2e:	881b      	ldrh	r3, [r3, #0]
 8020c30:	b29b      	uxth	r3, r3
 8020c32:	4aae      	ldr	r2, [pc, #696]	@ (8020eec <USB_EPStartXfer+0xe34>)
 8020c34:	4313      	orrs	r3, r2
 8020c36:	b29a      	uxth	r2, r3
 8020c38:	187b      	adds	r3, r7, r1
 8020c3a:	681b      	ldr	r3, [r3, #0]
 8020c3c:	801a      	strh	r2, [r3, #0]
 8020c3e:	e342      	b.n	80212c6 <USB_EPStartXfer+0x120e>
 8020c40:	1d7b      	adds	r3, r7, #5
 8020c42:	33ff      	adds	r3, #255	@ 0xff
 8020c44:	681b      	ldr	r3, [r3, #0]
 8020c46:	085b      	lsrs	r3, r3, #1
 8020c48:	21e8      	movs	r1, #232	@ 0xe8
 8020c4a:	187a      	adds	r2, r7, r1
 8020c4c:	6013      	str	r3, [r2, #0]
 8020c4e:	1d7b      	adds	r3, r7, #5
 8020c50:	33ff      	adds	r3, #255	@ 0xff
 8020c52:	681b      	ldr	r3, [r3, #0]
 8020c54:	2201      	movs	r2, #1
 8020c56:	4013      	ands	r3, r2
 8020c58:	d004      	beq.n	8020c64 <USB_EPStartXfer+0xbac>
 8020c5a:	187b      	adds	r3, r7, r1
 8020c5c:	681b      	ldr	r3, [r3, #0]
 8020c5e:	3301      	adds	r3, #1
 8020c60:	187a      	adds	r2, r7, r1
 8020c62:	6013      	str	r3, [r2, #0]
 8020c64:	218c      	movs	r1, #140	@ 0x8c
 8020c66:	187b      	adds	r3, r7, r1
 8020c68:	681b      	ldr	r3, [r3, #0]
 8020c6a:	881b      	ldrh	r3, [r3, #0]
 8020c6c:	b29a      	uxth	r2, r3
 8020c6e:	23e8      	movs	r3, #232	@ 0xe8
 8020c70:	18fb      	adds	r3, r7, r3
 8020c72:	681b      	ldr	r3, [r3, #0]
 8020c74:	b29b      	uxth	r3, r3
 8020c76:	029b      	lsls	r3, r3, #10
 8020c78:	b29b      	uxth	r3, r3
 8020c7a:	4313      	orrs	r3, r2
 8020c7c:	b29a      	uxth	r2, r3
 8020c7e:	187b      	adds	r3, r7, r1
 8020c80:	681b      	ldr	r3, [r3, #0]
 8020c82:	801a      	strh	r2, [r3, #0]
 8020c84:	e31f      	b.n	80212c6 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8020c86:	683b      	ldr	r3, [r7, #0]
 8020c88:	78db      	ldrb	r3, [r3, #3]
 8020c8a:	2b02      	cmp	r3, #2
 8020c8c:	d000      	beq.n	8020c90 <USB_EPStartXfer+0xbd8>
 8020c8e:	e191      	b.n	8020fb4 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8020c90:	683b      	ldr	r3, [r7, #0]
 8020c92:	785b      	ldrb	r3, [r3, #1]
 8020c94:	2b00      	cmp	r3, #0
 8020c96:	d000      	beq.n	8020c9a <USB_EPStartXfer+0xbe2>
 8020c98:	e07c      	b.n	8020d94 <USB_EPStartXfer+0xcdc>
 8020c9a:	687b      	ldr	r3, [r7, #4]
 8020c9c:	21ac      	movs	r1, #172	@ 0xac
 8020c9e:	187a      	adds	r2, r7, r1
 8020ca0:	6013      	str	r3, [r2, #0]
 8020ca2:	687b      	ldr	r3, [r7, #4]
 8020ca4:	2250      	movs	r2, #80	@ 0x50
 8020ca6:	5a9b      	ldrh	r3, [r3, r2]
 8020ca8:	b29b      	uxth	r3, r3
 8020caa:	001a      	movs	r2, r3
 8020cac:	187b      	adds	r3, r7, r1
 8020cae:	681b      	ldr	r3, [r3, #0]
 8020cb0:	189b      	adds	r3, r3, r2
 8020cb2:	187a      	adds	r2, r7, r1
 8020cb4:	6013      	str	r3, [r2, #0]
 8020cb6:	683b      	ldr	r3, [r7, #0]
 8020cb8:	781b      	ldrb	r3, [r3, #0]
 8020cba:	00da      	lsls	r2, r3, #3
 8020cbc:	187b      	adds	r3, r7, r1
 8020cbe:	681b      	ldr	r3, [r3, #0]
 8020cc0:	18d3      	adds	r3, r2, r3
 8020cc2:	4a8b      	ldr	r2, [pc, #556]	@ (8020ef0 <USB_EPStartXfer+0xe38>)
 8020cc4:	4694      	mov	ip, r2
 8020cc6:	4463      	add	r3, ip
 8020cc8:	21a8      	movs	r1, #168	@ 0xa8
 8020cca:	187a      	adds	r2, r7, r1
 8020ccc:	6013      	str	r3, [r2, #0]
 8020cce:	187b      	adds	r3, r7, r1
 8020cd0:	681b      	ldr	r3, [r3, #0]
 8020cd2:	881b      	ldrh	r3, [r3, #0]
 8020cd4:	b29b      	uxth	r3, r3
 8020cd6:	059b      	lsls	r3, r3, #22
 8020cd8:	0d9b      	lsrs	r3, r3, #22
 8020cda:	b29a      	uxth	r2, r3
 8020cdc:	187b      	adds	r3, r7, r1
 8020cde:	681b      	ldr	r3, [r3, #0]
 8020ce0:	801a      	strh	r2, [r3, #0]
 8020ce2:	683b      	ldr	r3, [r7, #0]
 8020ce4:	691b      	ldr	r3, [r3, #16]
 8020ce6:	2b3e      	cmp	r3, #62	@ 0x3e
 8020ce8:	d923      	bls.n	8020d32 <USB_EPStartXfer+0xc7a>
 8020cea:	683b      	ldr	r3, [r7, #0]
 8020cec:	691b      	ldr	r3, [r3, #16]
 8020cee:	095b      	lsrs	r3, r3, #5
 8020cf0:	21e4      	movs	r1, #228	@ 0xe4
 8020cf2:	187a      	adds	r2, r7, r1
 8020cf4:	6013      	str	r3, [r2, #0]
 8020cf6:	683b      	ldr	r3, [r7, #0]
 8020cf8:	691b      	ldr	r3, [r3, #16]
 8020cfa:	221f      	movs	r2, #31
 8020cfc:	4013      	ands	r3, r2
 8020cfe:	d104      	bne.n	8020d0a <USB_EPStartXfer+0xc52>
 8020d00:	187b      	adds	r3, r7, r1
 8020d02:	681b      	ldr	r3, [r3, #0]
 8020d04:	3b01      	subs	r3, #1
 8020d06:	187a      	adds	r2, r7, r1
 8020d08:	6013      	str	r3, [r2, #0]
 8020d0a:	21a8      	movs	r1, #168	@ 0xa8
 8020d0c:	187b      	adds	r3, r7, r1
 8020d0e:	681b      	ldr	r3, [r3, #0]
 8020d10:	881b      	ldrh	r3, [r3, #0]
 8020d12:	b29a      	uxth	r2, r3
 8020d14:	23e4      	movs	r3, #228	@ 0xe4
 8020d16:	18fb      	adds	r3, r7, r3
 8020d18:	681b      	ldr	r3, [r3, #0]
 8020d1a:	b29b      	uxth	r3, r3
 8020d1c:	029b      	lsls	r3, r3, #10
 8020d1e:	b29b      	uxth	r3, r3
 8020d20:	4313      	orrs	r3, r2
 8020d22:	b29b      	uxth	r3, r3
 8020d24:	4a71      	ldr	r2, [pc, #452]	@ (8020eec <USB_EPStartXfer+0xe34>)
 8020d26:	4313      	orrs	r3, r2
 8020d28:	b29a      	uxth	r2, r3
 8020d2a:	187b      	adds	r3, r7, r1
 8020d2c:	681b      	ldr	r3, [r3, #0]
 8020d2e:	801a      	strh	r2, [r3, #0]
 8020d30:	e054      	b.n	8020ddc <USB_EPStartXfer+0xd24>
 8020d32:	683b      	ldr	r3, [r7, #0]
 8020d34:	691b      	ldr	r3, [r3, #16]
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	d10b      	bne.n	8020d52 <USB_EPStartXfer+0xc9a>
 8020d3a:	21a8      	movs	r1, #168	@ 0xa8
 8020d3c:	187b      	adds	r3, r7, r1
 8020d3e:	681b      	ldr	r3, [r3, #0]
 8020d40:	881b      	ldrh	r3, [r3, #0]
 8020d42:	b29b      	uxth	r3, r3
 8020d44:	4a69      	ldr	r2, [pc, #420]	@ (8020eec <USB_EPStartXfer+0xe34>)
 8020d46:	4313      	orrs	r3, r2
 8020d48:	b29a      	uxth	r2, r3
 8020d4a:	187b      	adds	r3, r7, r1
 8020d4c:	681b      	ldr	r3, [r3, #0]
 8020d4e:	801a      	strh	r2, [r3, #0]
 8020d50:	e044      	b.n	8020ddc <USB_EPStartXfer+0xd24>
 8020d52:	683b      	ldr	r3, [r7, #0]
 8020d54:	691b      	ldr	r3, [r3, #16]
 8020d56:	085b      	lsrs	r3, r3, #1
 8020d58:	21e4      	movs	r1, #228	@ 0xe4
 8020d5a:	187a      	adds	r2, r7, r1
 8020d5c:	6013      	str	r3, [r2, #0]
 8020d5e:	683b      	ldr	r3, [r7, #0]
 8020d60:	691b      	ldr	r3, [r3, #16]
 8020d62:	2201      	movs	r2, #1
 8020d64:	4013      	ands	r3, r2
 8020d66:	d004      	beq.n	8020d72 <USB_EPStartXfer+0xcba>
 8020d68:	187b      	adds	r3, r7, r1
 8020d6a:	681b      	ldr	r3, [r3, #0]
 8020d6c:	3301      	adds	r3, #1
 8020d6e:	187a      	adds	r2, r7, r1
 8020d70:	6013      	str	r3, [r2, #0]
 8020d72:	21a8      	movs	r1, #168	@ 0xa8
 8020d74:	187b      	adds	r3, r7, r1
 8020d76:	681b      	ldr	r3, [r3, #0]
 8020d78:	881b      	ldrh	r3, [r3, #0]
 8020d7a:	b29a      	uxth	r2, r3
 8020d7c:	23e4      	movs	r3, #228	@ 0xe4
 8020d7e:	18fb      	adds	r3, r7, r3
 8020d80:	681b      	ldr	r3, [r3, #0]
 8020d82:	b29b      	uxth	r3, r3
 8020d84:	029b      	lsls	r3, r3, #10
 8020d86:	b29b      	uxth	r3, r3
 8020d88:	4313      	orrs	r3, r2
 8020d8a:	b29a      	uxth	r2, r3
 8020d8c:	187b      	adds	r3, r7, r1
 8020d8e:	681b      	ldr	r3, [r3, #0]
 8020d90:	801a      	strh	r2, [r3, #0]
 8020d92:	e023      	b.n	8020ddc <USB_EPStartXfer+0xd24>
 8020d94:	683b      	ldr	r3, [r7, #0]
 8020d96:	785b      	ldrb	r3, [r3, #1]
 8020d98:	2b01      	cmp	r3, #1
 8020d9a:	d11f      	bne.n	8020ddc <USB_EPStartXfer+0xd24>
 8020d9c:	687b      	ldr	r3, [r7, #4]
 8020d9e:	21b4      	movs	r1, #180	@ 0xb4
 8020da0:	187a      	adds	r2, r7, r1
 8020da2:	6013      	str	r3, [r2, #0]
 8020da4:	687b      	ldr	r3, [r7, #4]
 8020da6:	2250      	movs	r2, #80	@ 0x50
 8020da8:	5a9b      	ldrh	r3, [r3, r2]
 8020daa:	b29b      	uxth	r3, r3
 8020dac:	001a      	movs	r2, r3
 8020dae:	187b      	adds	r3, r7, r1
 8020db0:	681b      	ldr	r3, [r3, #0]
 8020db2:	189b      	adds	r3, r3, r2
 8020db4:	187a      	adds	r2, r7, r1
 8020db6:	6013      	str	r3, [r2, #0]
 8020db8:	683b      	ldr	r3, [r7, #0]
 8020dba:	781b      	ldrb	r3, [r3, #0]
 8020dbc:	00da      	lsls	r2, r3, #3
 8020dbe:	187b      	adds	r3, r7, r1
 8020dc0:	681b      	ldr	r3, [r3, #0]
 8020dc2:	18d3      	adds	r3, r2, r3
 8020dc4:	4a4a      	ldr	r2, [pc, #296]	@ (8020ef0 <USB_EPStartXfer+0xe38>)
 8020dc6:	4694      	mov	ip, r2
 8020dc8:	4463      	add	r3, ip
 8020dca:	21b0      	movs	r1, #176	@ 0xb0
 8020dcc:	187a      	adds	r2, r7, r1
 8020dce:	6013      	str	r3, [r2, #0]
 8020dd0:	683b      	ldr	r3, [r7, #0]
 8020dd2:	691b      	ldr	r3, [r3, #16]
 8020dd4:	b29a      	uxth	r2, r3
 8020dd6:	187b      	adds	r3, r7, r1
 8020dd8:	681b      	ldr	r3, [r3, #0]
 8020dda:	801a      	strh	r2, [r3, #0]
 8020ddc:	687b      	ldr	r3, [r7, #4]
 8020dde:	22a4      	movs	r2, #164	@ 0xa4
 8020de0:	18ba      	adds	r2, r7, r2
 8020de2:	6013      	str	r3, [r2, #0]
 8020de4:	683b      	ldr	r3, [r7, #0]
 8020de6:	785b      	ldrb	r3, [r3, #1]
 8020de8:	2b00      	cmp	r3, #0
 8020dea:	d000      	beq.n	8020dee <USB_EPStartXfer+0xd36>
 8020dec:	e082      	b.n	8020ef4 <USB_EPStartXfer+0xe3c>
 8020dee:	687b      	ldr	r3, [r7, #4]
 8020df0:	219c      	movs	r1, #156	@ 0x9c
 8020df2:	187a      	adds	r2, r7, r1
 8020df4:	6013      	str	r3, [r2, #0]
 8020df6:	687b      	ldr	r3, [r7, #4]
 8020df8:	2250      	movs	r2, #80	@ 0x50
 8020dfa:	5a9b      	ldrh	r3, [r3, r2]
 8020dfc:	b29b      	uxth	r3, r3
 8020dfe:	001a      	movs	r2, r3
 8020e00:	187b      	adds	r3, r7, r1
 8020e02:	681b      	ldr	r3, [r3, #0]
 8020e04:	189b      	adds	r3, r3, r2
 8020e06:	187a      	adds	r2, r7, r1
 8020e08:	6013      	str	r3, [r2, #0]
 8020e0a:	683b      	ldr	r3, [r7, #0]
 8020e0c:	781b      	ldrb	r3, [r3, #0]
 8020e0e:	00da      	lsls	r2, r3, #3
 8020e10:	187b      	adds	r3, r7, r1
 8020e12:	681b      	ldr	r3, [r3, #0]
 8020e14:	18d3      	adds	r3, r2, r3
 8020e16:	4a34      	ldr	r2, [pc, #208]	@ (8020ee8 <USB_EPStartXfer+0xe30>)
 8020e18:	4694      	mov	ip, r2
 8020e1a:	4463      	add	r3, ip
 8020e1c:	2198      	movs	r1, #152	@ 0x98
 8020e1e:	187a      	adds	r2, r7, r1
 8020e20:	6013      	str	r3, [r2, #0]
 8020e22:	187b      	adds	r3, r7, r1
 8020e24:	681b      	ldr	r3, [r3, #0]
 8020e26:	881b      	ldrh	r3, [r3, #0]
 8020e28:	b29b      	uxth	r3, r3
 8020e2a:	059b      	lsls	r3, r3, #22
 8020e2c:	0d9b      	lsrs	r3, r3, #22
 8020e2e:	b29a      	uxth	r2, r3
 8020e30:	187b      	adds	r3, r7, r1
 8020e32:	681b      	ldr	r3, [r3, #0]
 8020e34:	801a      	strh	r2, [r3, #0]
 8020e36:	683b      	ldr	r3, [r7, #0]
 8020e38:	691b      	ldr	r3, [r3, #16]
 8020e3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8020e3c:	d923      	bls.n	8020e86 <USB_EPStartXfer+0xdce>
 8020e3e:	683b      	ldr	r3, [r7, #0]
 8020e40:	691b      	ldr	r3, [r3, #16]
 8020e42:	095b      	lsrs	r3, r3, #5
 8020e44:	21e0      	movs	r1, #224	@ 0xe0
 8020e46:	187a      	adds	r2, r7, r1
 8020e48:	6013      	str	r3, [r2, #0]
 8020e4a:	683b      	ldr	r3, [r7, #0]
 8020e4c:	691b      	ldr	r3, [r3, #16]
 8020e4e:	221f      	movs	r2, #31
 8020e50:	4013      	ands	r3, r2
 8020e52:	d104      	bne.n	8020e5e <USB_EPStartXfer+0xda6>
 8020e54:	187b      	adds	r3, r7, r1
 8020e56:	681b      	ldr	r3, [r3, #0]
 8020e58:	3b01      	subs	r3, #1
 8020e5a:	187a      	adds	r2, r7, r1
 8020e5c:	6013      	str	r3, [r2, #0]
 8020e5e:	2198      	movs	r1, #152	@ 0x98
 8020e60:	187b      	adds	r3, r7, r1
 8020e62:	681b      	ldr	r3, [r3, #0]
 8020e64:	881b      	ldrh	r3, [r3, #0]
 8020e66:	b29a      	uxth	r2, r3
 8020e68:	23e0      	movs	r3, #224	@ 0xe0
 8020e6a:	18fb      	adds	r3, r7, r3
 8020e6c:	681b      	ldr	r3, [r3, #0]
 8020e6e:	b29b      	uxth	r3, r3
 8020e70:	029b      	lsls	r3, r3, #10
 8020e72:	b29b      	uxth	r3, r3
 8020e74:	4313      	orrs	r3, r2
 8020e76:	b29b      	uxth	r3, r3
 8020e78:	4a1c      	ldr	r2, [pc, #112]	@ (8020eec <USB_EPStartXfer+0xe34>)
 8020e7a:	4313      	orrs	r3, r2
 8020e7c:	b29a      	uxth	r2, r3
 8020e7e:	187b      	adds	r3, r7, r1
 8020e80:	681b      	ldr	r3, [r3, #0]
 8020e82:	801a      	strh	r2, [r3, #0]
 8020e84:	e057      	b.n	8020f36 <USB_EPStartXfer+0xe7e>
 8020e86:	683b      	ldr	r3, [r7, #0]
 8020e88:	691b      	ldr	r3, [r3, #16]
 8020e8a:	2b00      	cmp	r3, #0
 8020e8c:	d10b      	bne.n	8020ea6 <USB_EPStartXfer+0xdee>
 8020e8e:	2198      	movs	r1, #152	@ 0x98
 8020e90:	187b      	adds	r3, r7, r1
 8020e92:	681b      	ldr	r3, [r3, #0]
 8020e94:	881b      	ldrh	r3, [r3, #0]
 8020e96:	b29b      	uxth	r3, r3
 8020e98:	4a14      	ldr	r2, [pc, #80]	@ (8020eec <USB_EPStartXfer+0xe34>)
 8020e9a:	4313      	orrs	r3, r2
 8020e9c:	b29a      	uxth	r2, r3
 8020e9e:	187b      	adds	r3, r7, r1
 8020ea0:	681b      	ldr	r3, [r3, #0]
 8020ea2:	801a      	strh	r2, [r3, #0]
 8020ea4:	e047      	b.n	8020f36 <USB_EPStartXfer+0xe7e>
 8020ea6:	683b      	ldr	r3, [r7, #0]
 8020ea8:	691b      	ldr	r3, [r3, #16]
 8020eaa:	085b      	lsrs	r3, r3, #1
 8020eac:	21e0      	movs	r1, #224	@ 0xe0
 8020eae:	187a      	adds	r2, r7, r1
 8020eb0:	6013      	str	r3, [r2, #0]
 8020eb2:	683b      	ldr	r3, [r7, #0]
 8020eb4:	691b      	ldr	r3, [r3, #16]
 8020eb6:	2201      	movs	r2, #1
 8020eb8:	4013      	ands	r3, r2
 8020eba:	d004      	beq.n	8020ec6 <USB_EPStartXfer+0xe0e>
 8020ebc:	187b      	adds	r3, r7, r1
 8020ebe:	681b      	ldr	r3, [r3, #0]
 8020ec0:	3301      	adds	r3, #1
 8020ec2:	187a      	adds	r2, r7, r1
 8020ec4:	6013      	str	r3, [r2, #0]
 8020ec6:	2198      	movs	r1, #152	@ 0x98
 8020ec8:	187b      	adds	r3, r7, r1
 8020eca:	681b      	ldr	r3, [r3, #0]
 8020ecc:	881b      	ldrh	r3, [r3, #0]
 8020ece:	b29a      	uxth	r2, r3
 8020ed0:	23e0      	movs	r3, #224	@ 0xe0
 8020ed2:	18fb      	adds	r3, r7, r3
 8020ed4:	681b      	ldr	r3, [r3, #0]
 8020ed6:	b29b      	uxth	r3, r3
 8020ed8:	029b      	lsls	r3, r3, #10
 8020eda:	b29b      	uxth	r3, r3
 8020edc:	4313      	orrs	r3, r2
 8020ede:	b29a      	uxth	r2, r3
 8020ee0:	187b      	adds	r3, r7, r1
 8020ee2:	681b      	ldr	r3, [r3, #0]
 8020ee4:	801a      	strh	r2, [r3, #0]
 8020ee6:	e026      	b.n	8020f36 <USB_EPStartXfer+0xe7e>
 8020ee8:	00000406 	.word	0x00000406
 8020eec:	ffff8000 	.word	0xffff8000
 8020ef0:	00000402 	.word	0x00000402
 8020ef4:	683b      	ldr	r3, [r7, #0]
 8020ef6:	785b      	ldrb	r3, [r3, #1]
 8020ef8:	2b01      	cmp	r3, #1
 8020efa:	d11c      	bne.n	8020f36 <USB_EPStartXfer+0xe7e>
 8020efc:	687b      	ldr	r3, [r7, #4]
 8020efe:	2250      	movs	r2, #80	@ 0x50
 8020f00:	5a9b      	ldrh	r3, [r3, r2]
 8020f02:	b29b      	uxth	r3, r3
 8020f04:	001a      	movs	r2, r3
 8020f06:	21a4      	movs	r1, #164	@ 0xa4
 8020f08:	187b      	adds	r3, r7, r1
 8020f0a:	681b      	ldr	r3, [r3, #0]
 8020f0c:	189b      	adds	r3, r3, r2
 8020f0e:	187a      	adds	r2, r7, r1
 8020f10:	6013      	str	r3, [r2, #0]
 8020f12:	683b      	ldr	r3, [r7, #0]
 8020f14:	781b      	ldrb	r3, [r3, #0]
 8020f16:	00da      	lsls	r2, r3, #3
 8020f18:	187b      	adds	r3, r7, r1
 8020f1a:	681b      	ldr	r3, [r3, #0]
 8020f1c:	18d3      	adds	r3, r2, r3
 8020f1e:	4ad2      	ldr	r2, [pc, #840]	@ (8021268 <USB_EPStartXfer+0x11b0>)
 8020f20:	4694      	mov	ip, r2
 8020f22:	4463      	add	r3, ip
 8020f24:	21a0      	movs	r1, #160	@ 0xa0
 8020f26:	187a      	adds	r2, r7, r1
 8020f28:	6013      	str	r3, [r2, #0]
 8020f2a:	683b      	ldr	r3, [r7, #0]
 8020f2c:	691b      	ldr	r3, [r3, #16]
 8020f2e:	b29a      	uxth	r2, r3
 8020f30:	187b      	adds	r3, r7, r1
 8020f32:	681b      	ldr	r3, [r3, #0]
 8020f34:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8020f36:	683b      	ldr	r3, [r7, #0]
 8020f38:	69db      	ldr	r3, [r3, #28]
 8020f3a:	2b00      	cmp	r3, #0
 8020f3c:	d100      	bne.n	8020f40 <USB_EPStartXfer+0xe88>
 8020f3e:	e1c2      	b.n	80212c6 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8020f40:	687a      	ldr	r2, [r7, #4]
 8020f42:	683b      	ldr	r3, [r7, #0]
 8020f44:	781b      	ldrb	r3, [r3, #0]
 8020f46:	009b      	lsls	r3, r3, #2
 8020f48:	18d2      	adds	r2, r2, r3
 8020f4a:	2196      	movs	r1, #150	@ 0x96
 8020f4c:	187b      	adds	r3, r7, r1
 8020f4e:	8812      	ldrh	r2, [r2, #0]
 8020f50:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8020f52:	187b      	adds	r3, r7, r1
 8020f54:	881a      	ldrh	r2, [r3, #0]
 8020f56:	2380      	movs	r3, #128	@ 0x80
 8020f58:	01db      	lsls	r3, r3, #7
 8020f5a:	4013      	ands	r3, r2
 8020f5c:	d004      	beq.n	8020f68 <USB_EPStartXfer+0xeb0>
 8020f5e:	187b      	adds	r3, r7, r1
 8020f60:	881b      	ldrh	r3, [r3, #0]
 8020f62:	2240      	movs	r2, #64	@ 0x40
 8020f64:	4013      	ands	r3, r2
 8020f66:	d10d      	bne.n	8020f84 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020f68:	2196      	movs	r1, #150	@ 0x96
 8020f6a:	187b      	adds	r3, r7, r1
 8020f6c:	881a      	ldrh	r2, [r3, #0]
 8020f6e:	2380      	movs	r3, #128	@ 0x80
 8020f70:	01db      	lsls	r3, r3, #7
 8020f72:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8020f74:	d000      	beq.n	8020f78 <USB_EPStartXfer+0xec0>
 8020f76:	e1a6      	b.n	80212c6 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020f78:	187b      	adds	r3, r7, r1
 8020f7a:	881b      	ldrh	r3, [r3, #0]
 8020f7c:	2240      	movs	r2, #64	@ 0x40
 8020f7e:	4013      	ands	r3, r2
 8020f80:	d000      	beq.n	8020f84 <USB_EPStartXfer+0xecc>
 8020f82:	e1a0      	b.n	80212c6 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8020f84:	687a      	ldr	r2, [r7, #4]
 8020f86:	683b      	ldr	r3, [r7, #0]
 8020f88:	781b      	ldrb	r3, [r3, #0]
 8020f8a:	009b      	lsls	r3, r3, #2
 8020f8c:	18d3      	adds	r3, r2, r3
 8020f8e:	881b      	ldrh	r3, [r3, #0]
 8020f90:	b29a      	uxth	r2, r3
 8020f92:	2094      	movs	r0, #148	@ 0x94
 8020f94:	183b      	adds	r3, r7, r0
 8020f96:	49b5      	ldr	r1, [pc, #724]	@ (802126c <USB_EPStartXfer+0x11b4>)
 8020f98:	400a      	ands	r2, r1
 8020f9a:	801a      	strh	r2, [r3, #0]
 8020f9c:	687a      	ldr	r2, [r7, #4]
 8020f9e:	683b      	ldr	r3, [r7, #0]
 8020fa0:	781b      	ldrb	r3, [r3, #0]
 8020fa2:	009b      	lsls	r3, r3, #2
 8020fa4:	18d3      	adds	r3, r2, r3
 8020fa6:	183a      	adds	r2, r7, r0
 8020fa8:	8812      	ldrh	r2, [r2, #0]
 8020faa:	49b1      	ldr	r1, [pc, #708]	@ (8021270 <USB_EPStartXfer+0x11b8>)
 8020fac:	430a      	orrs	r2, r1
 8020fae:	b292      	uxth	r2, r2
 8020fb0:	801a      	strh	r2, [r3, #0]
 8020fb2:	e188      	b.n	80212c6 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8020fb4:	683b      	ldr	r3, [r7, #0]
 8020fb6:	78db      	ldrb	r3, [r3, #3]
 8020fb8:	2b01      	cmp	r3, #1
 8020fba:	d000      	beq.n	8020fbe <USB_EPStartXfer+0xf06>
 8020fbc:	e181      	b.n	80212c2 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8020fbe:	683b      	ldr	r3, [r7, #0]
 8020fc0:	699a      	ldr	r2, [r3, #24]
 8020fc2:	683b      	ldr	r3, [r7, #0]
 8020fc4:	691b      	ldr	r3, [r3, #16]
 8020fc6:	429a      	cmp	r2, r3
 8020fc8:	d90d      	bls.n	8020fe6 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8020fca:	683b      	ldr	r3, [r7, #0]
 8020fcc:	691b      	ldr	r3, [r3, #16]
 8020fce:	1d7a      	adds	r2, r7, #5
 8020fd0:	32ff      	adds	r2, #255	@ 0xff
 8020fd2:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8020fd4:	683b      	ldr	r3, [r7, #0]
 8020fd6:	699a      	ldr	r2, [r3, #24]
 8020fd8:	1d7b      	adds	r3, r7, #5
 8020fda:	33ff      	adds	r3, #255	@ 0xff
 8020fdc:	681b      	ldr	r3, [r3, #0]
 8020fde:	1ad2      	subs	r2, r2, r3
 8020fe0:	683b      	ldr	r3, [r7, #0]
 8020fe2:	619a      	str	r2, [r3, #24]
 8020fe4:	e007      	b.n	8020ff6 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8020fe6:	683b      	ldr	r3, [r7, #0]
 8020fe8:	699b      	ldr	r3, [r3, #24]
 8020fea:	1d7a      	adds	r2, r7, #5
 8020fec:	32ff      	adds	r2, #255	@ 0xff
 8020fee:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8020ff0:	683b      	ldr	r3, [r7, #0]
 8020ff2:	2200      	movs	r2, #0
 8020ff4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8020ff6:	683b      	ldr	r3, [r7, #0]
 8020ff8:	785b      	ldrb	r3, [r3, #1]
 8020ffa:	2b00      	cmp	r3, #0
 8020ffc:	d000      	beq.n	8021000 <USB_EPStartXfer+0xf48>
 8020ffe:	e082      	b.n	8021106 <USB_EPStartXfer+0x104e>
 8021000:	687b      	ldr	r3, [r7, #4]
 8021002:	21cc      	movs	r1, #204	@ 0xcc
 8021004:	187a      	adds	r2, r7, r1
 8021006:	6013      	str	r3, [r2, #0]
 8021008:	687b      	ldr	r3, [r7, #4]
 802100a:	2250      	movs	r2, #80	@ 0x50
 802100c:	5a9b      	ldrh	r3, [r3, r2]
 802100e:	b29b      	uxth	r3, r3
 8021010:	001a      	movs	r2, r3
 8021012:	187b      	adds	r3, r7, r1
 8021014:	681b      	ldr	r3, [r3, #0]
 8021016:	189b      	adds	r3, r3, r2
 8021018:	187a      	adds	r2, r7, r1
 802101a:	6013      	str	r3, [r2, #0]
 802101c:	683b      	ldr	r3, [r7, #0]
 802101e:	781b      	ldrb	r3, [r3, #0]
 8021020:	00da      	lsls	r2, r3, #3
 8021022:	187b      	adds	r3, r7, r1
 8021024:	681b      	ldr	r3, [r3, #0]
 8021026:	18d3      	adds	r3, r2, r3
 8021028:	4a92      	ldr	r2, [pc, #584]	@ (8021274 <USB_EPStartXfer+0x11bc>)
 802102a:	4694      	mov	ip, r2
 802102c:	4463      	add	r3, ip
 802102e:	21c8      	movs	r1, #200	@ 0xc8
 8021030:	187a      	adds	r2, r7, r1
 8021032:	6013      	str	r3, [r2, #0]
 8021034:	187b      	adds	r3, r7, r1
 8021036:	681b      	ldr	r3, [r3, #0]
 8021038:	881b      	ldrh	r3, [r3, #0]
 802103a:	b29b      	uxth	r3, r3
 802103c:	059b      	lsls	r3, r3, #22
 802103e:	0d9b      	lsrs	r3, r3, #22
 8021040:	b29a      	uxth	r2, r3
 8021042:	187b      	adds	r3, r7, r1
 8021044:	681b      	ldr	r3, [r3, #0]
 8021046:	801a      	strh	r2, [r3, #0]
 8021048:	1d7b      	adds	r3, r7, #5
 802104a:	33ff      	adds	r3, #255	@ 0xff
 802104c:	681b      	ldr	r3, [r3, #0]
 802104e:	2b3e      	cmp	r3, #62	@ 0x3e
 8021050:	d925      	bls.n	802109e <USB_EPStartXfer+0xfe6>
 8021052:	1d7b      	adds	r3, r7, #5
 8021054:	33ff      	adds	r3, #255	@ 0xff
 8021056:	681b      	ldr	r3, [r3, #0]
 8021058:	095b      	lsrs	r3, r3, #5
 802105a:	21dc      	movs	r1, #220	@ 0xdc
 802105c:	187a      	adds	r2, r7, r1
 802105e:	6013      	str	r3, [r2, #0]
 8021060:	1d7b      	adds	r3, r7, #5
 8021062:	33ff      	adds	r3, #255	@ 0xff
 8021064:	681b      	ldr	r3, [r3, #0]
 8021066:	221f      	movs	r2, #31
 8021068:	4013      	ands	r3, r2
 802106a:	d104      	bne.n	8021076 <USB_EPStartXfer+0xfbe>
 802106c:	187b      	adds	r3, r7, r1
 802106e:	681b      	ldr	r3, [r3, #0]
 8021070:	3b01      	subs	r3, #1
 8021072:	187a      	adds	r2, r7, r1
 8021074:	6013      	str	r3, [r2, #0]
 8021076:	21c8      	movs	r1, #200	@ 0xc8
 8021078:	187b      	adds	r3, r7, r1
 802107a:	681b      	ldr	r3, [r3, #0]
 802107c:	881b      	ldrh	r3, [r3, #0]
 802107e:	b29a      	uxth	r2, r3
 8021080:	23dc      	movs	r3, #220	@ 0xdc
 8021082:	18fb      	adds	r3, r7, r3
 8021084:	681b      	ldr	r3, [r3, #0]
 8021086:	b29b      	uxth	r3, r3
 8021088:	029b      	lsls	r3, r3, #10
 802108a:	b29b      	uxth	r3, r3
 802108c:	4313      	orrs	r3, r2
 802108e:	b29b      	uxth	r3, r3
 8021090:	4a79      	ldr	r2, [pc, #484]	@ (8021278 <USB_EPStartXfer+0x11c0>)
 8021092:	4313      	orrs	r3, r2
 8021094:	b29a      	uxth	r2, r3
 8021096:	187b      	adds	r3, r7, r1
 8021098:	681b      	ldr	r3, [r3, #0]
 802109a:	801a      	strh	r2, [r3, #0]
 802109c:	e058      	b.n	8021150 <USB_EPStartXfer+0x1098>
 802109e:	1d7b      	adds	r3, r7, #5
 80210a0:	33ff      	adds	r3, #255	@ 0xff
 80210a2:	681b      	ldr	r3, [r3, #0]
 80210a4:	2b00      	cmp	r3, #0
 80210a6:	d10b      	bne.n	80210c0 <USB_EPStartXfer+0x1008>
 80210a8:	21c8      	movs	r1, #200	@ 0xc8
 80210aa:	187b      	adds	r3, r7, r1
 80210ac:	681b      	ldr	r3, [r3, #0]
 80210ae:	881b      	ldrh	r3, [r3, #0]
 80210b0:	b29b      	uxth	r3, r3
 80210b2:	4a71      	ldr	r2, [pc, #452]	@ (8021278 <USB_EPStartXfer+0x11c0>)
 80210b4:	4313      	orrs	r3, r2
 80210b6:	b29a      	uxth	r2, r3
 80210b8:	187b      	adds	r3, r7, r1
 80210ba:	681b      	ldr	r3, [r3, #0]
 80210bc:	801a      	strh	r2, [r3, #0]
 80210be:	e047      	b.n	8021150 <USB_EPStartXfer+0x1098>
 80210c0:	1d7b      	adds	r3, r7, #5
 80210c2:	33ff      	adds	r3, #255	@ 0xff
 80210c4:	681b      	ldr	r3, [r3, #0]
 80210c6:	085b      	lsrs	r3, r3, #1
 80210c8:	21dc      	movs	r1, #220	@ 0xdc
 80210ca:	187a      	adds	r2, r7, r1
 80210cc:	6013      	str	r3, [r2, #0]
 80210ce:	1d7b      	adds	r3, r7, #5
 80210d0:	33ff      	adds	r3, #255	@ 0xff
 80210d2:	681b      	ldr	r3, [r3, #0]
 80210d4:	2201      	movs	r2, #1
 80210d6:	4013      	ands	r3, r2
 80210d8:	d004      	beq.n	80210e4 <USB_EPStartXfer+0x102c>
 80210da:	187b      	adds	r3, r7, r1
 80210dc:	681b      	ldr	r3, [r3, #0]
 80210de:	3301      	adds	r3, #1
 80210e0:	187a      	adds	r2, r7, r1
 80210e2:	6013      	str	r3, [r2, #0]
 80210e4:	21c8      	movs	r1, #200	@ 0xc8
 80210e6:	187b      	adds	r3, r7, r1
 80210e8:	681b      	ldr	r3, [r3, #0]
 80210ea:	881b      	ldrh	r3, [r3, #0]
 80210ec:	b29a      	uxth	r2, r3
 80210ee:	23dc      	movs	r3, #220	@ 0xdc
 80210f0:	18fb      	adds	r3, r7, r3
 80210f2:	681b      	ldr	r3, [r3, #0]
 80210f4:	b29b      	uxth	r3, r3
 80210f6:	029b      	lsls	r3, r3, #10
 80210f8:	b29b      	uxth	r3, r3
 80210fa:	4313      	orrs	r3, r2
 80210fc:	b29a      	uxth	r2, r3
 80210fe:	187b      	adds	r3, r7, r1
 8021100:	681b      	ldr	r3, [r3, #0]
 8021102:	801a      	strh	r2, [r3, #0]
 8021104:	e024      	b.n	8021150 <USB_EPStartXfer+0x1098>
 8021106:	683b      	ldr	r3, [r7, #0]
 8021108:	785b      	ldrb	r3, [r3, #1]
 802110a:	2b01      	cmp	r3, #1
 802110c:	d120      	bne.n	8021150 <USB_EPStartXfer+0x1098>
 802110e:	687b      	ldr	r3, [r7, #4]
 8021110:	21d4      	movs	r1, #212	@ 0xd4
 8021112:	187a      	adds	r2, r7, r1
 8021114:	6013      	str	r3, [r2, #0]
 8021116:	687b      	ldr	r3, [r7, #4]
 8021118:	2250      	movs	r2, #80	@ 0x50
 802111a:	5a9b      	ldrh	r3, [r3, r2]
 802111c:	b29b      	uxth	r3, r3
 802111e:	001a      	movs	r2, r3
 8021120:	187b      	adds	r3, r7, r1
 8021122:	681b      	ldr	r3, [r3, #0]
 8021124:	189b      	adds	r3, r3, r2
 8021126:	187a      	adds	r2, r7, r1
 8021128:	6013      	str	r3, [r2, #0]
 802112a:	683b      	ldr	r3, [r7, #0]
 802112c:	781b      	ldrb	r3, [r3, #0]
 802112e:	00da      	lsls	r2, r3, #3
 8021130:	187b      	adds	r3, r7, r1
 8021132:	681b      	ldr	r3, [r3, #0]
 8021134:	18d3      	adds	r3, r2, r3
 8021136:	4a4f      	ldr	r2, [pc, #316]	@ (8021274 <USB_EPStartXfer+0x11bc>)
 8021138:	4694      	mov	ip, r2
 802113a:	4463      	add	r3, ip
 802113c:	21d0      	movs	r1, #208	@ 0xd0
 802113e:	187a      	adds	r2, r7, r1
 8021140:	6013      	str	r3, [r2, #0]
 8021142:	1d7b      	adds	r3, r7, #5
 8021144:	33ff      	adds	r3, #255	@ 0xff
 8021146:	681b      	ldr	r3, [r3, #0]
 8021148:	b29a      	uxth	r2, r3
 802114a:	187b      	adds	r3, r7, r1
 802114c:	681b      	ldr	r3, [r3, #0]
 802114e:	801a      	strh	r2, [r3, #0]
 8021150:	687b      	ldr	r3, [r7, #4]
 8021152:	22c4      	movs	r2, #196	@ 0xc4
 8021154:	18ba      	adds	r2, r7, r2
 8021156:	6013      	str	r3, [r2, #0]
 8021158:	683b      	ldr	r3, [r7, #0]
 802115a:	785b      	ldrb	r3, [r3, #1]
 802115c:	2b00      	cmp	r3, #0
 802115e:	d000      	beq.n	8021162 <USB_EPStartXfer+0x10aa>
 8021160:	e08c      	b.n	802127c <USB_EPStartXfer+0x11c4>
 8021162:	687b      	ldr	r3, [r7, #4]
 8021164:	21bc      	movs	r1, #188	@ 0xbc
 8021166:	187a      	adds	r2, r7, r1
 8021168:	6013      	str	r3, [r2, #0]
 802116a:	687b      	ldr	r3, [r7, #4]
 802116c:	2250      	movs	r2, #80	@ 0x50
 802116e:	5a9b      	ldrh	r3, [r3, r2]
 8021170:	b29b      	uxth	r3, r3
 8021172:	001a      	movs	r2, r3
 8021174:	187b      	adds	r3, r7, r1
 8021176:	681b      	ldr	r3, [r3, #0]
 8021178:	189b      	adds	r3, r3, r2
 802117a:	187a      	adds	r2, r7, r1
 802117c:	6013      	str	r3, [r2, #0]
 802117e:	683b      	ldr	r3, [r7, #0]
 8021180:	781b      	ldrb	r3, [r3, #0]
 8021182:	00da      	lsls	r2, r3, #3
 8021184:	187b      	adds	r3, r7, r1
 8021186:	681b      	ldr	r3, [r3, #0]
 8021188:	18d3      	adds	r3, r2, r3
 802118a:	4a37      	ldr	r2, [pc, #220]	@ (8021268 <USB_EPStartXfer+0x11b0>)
 802118c:	4694      	mov	ip, r2
 802118e:	4463      	add	r3, ip
 8021190:	21b8      	movs	r1, #184	@ 0xb8
 8021192:	187a      	adds	r2, r7, r1
 8021194:	6013      	str	r3, [r2, #0]
 8021196:	187b      	adds	r3, r7, r1
 8021198:	681b      	ldr	r3, [r3, #0]
 802119a:	881b      	ldrh	r3, [r3, #0]
 802119c:	b29b      	uxth	r3, r3
 802119e:	059b      	lsls	r3, r3, #22
 80211a0:	0d9b      	lsrs	r3, r3, #22
 80211a2:	b29a      	uxth	r2, r3
 80211a4:	187b      	adds	r3, r7, r1
 80211a6:	681b      	ldr	r3, [r3, #0]
 80211a8:	801a      	strh	r2, [r3, #0]
 80211aa:	1d7b      	adds	r3, r7, #5
 80211ac:	33ff      	adds	r3, #255	@ 0xff
 80211ae:	681b      	ldr	r3, [r3, #0]
 80211b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80211b2:	d925      	bls.n	8021200 <USB_EPStartXfer+0x1148>
 80211b4:	1d7b      	adds	r3, r7, #5
 80211b6:	33ff      	adds	r3, #255	@ 0xff
 80211b8:	681b      	ldr	r3, [r3, #0]
 80211ba:	095b      	lsrs	r3, r3, #5
 80211bc:	21d8      	movs	r1, #216	@ 0xd8
 80211be:	187a      	adds	r2, r7, r1
 80211c0:	6013      	str	r3, [r2, #0]
 80211c2:	1d7b      	adds	r3, r7, #5
 80211c4:	33ff      	adds	r3, #255	@ 0xff
 80211c6:	681b      	ldr	r3, [r3, #0]
 80211c8:	221f      	movs	r2, #31
 80211ca:	4013      	ands	r3, r2
 80211cc:	d104      	bne.n	80211d8 <USB_EPStartXfer+0x1120>
 80211ce:	187b      	adds	r3, r7, r1
 80211d0:	681b      	ldr	r3, [r3, #0]
 80211d2:	3b01      	subs	r3, #1
 80211d4:	187a      	adds	r2, r7, r1
 80211d6:	6013      	str	r3, [r2, #0]
 80211d8:	21b8      	movs	r1, #184	@ 0xb8
 80211da:	187b      	adds	r3, r7, r1
 80211dc:	681b      	ldr	r3, [r3, #0]
 80211de:	881b      	ldrh	r3, [r3, #0]
 80211e0:	b29a      	uxth	r2, r3
 80211e2:	23d8      	movs	r3, #216	@ 0xd8
 80211e4:	18fb      	adds	r3, r7, r3
 80211e6:	681b      	ldr	r3, [r3, #0]
 80211e8:	b29b      	uxth	r3, r3
 80211ea:	029b      	lsls	r3, r3, #10
 80211ec:	b29b      	uxth	r3, r3
 80211ee:	4313      	orrs	r3, r2
 80211f0:	b29b      	uxth	r3, r3
 80211f2:	4a21      	ldr	r2, [pc, #132]	@ (8021278 <USB_EPStartXfer+0x11c0>)
 80211f4:	4313      	orrs	r3, r2
 80211f6:	b29a      	uxth	r2, r3
 80211f8:	187b      	adds	r3, r7, r1
 80211fa:	681b      	ldr	r3, [r3, #0]
 80211fc:	801a      	strh	r2, [r3, #0]
 80211fe:	e062      	b.n	80212c6 <USB_EPStartXfer+0x120e>
 8021200:	1d7b      	adds	r3, r7, #5
 8021202:	33ff      	adds	r3, #255	@ 0xff
 8021204:	681b      	ldr	r3, [r3, #0]
 8021206:	2b00      	cmp	r3, #0
 8021208:	d10b      	bne.n	8021222 <USB_EPStartXfer+0x116a>
 802120a:	21b8      	movs	r1, #184	@ 0xb8
 802120c:	187b      	adds	r3, r7, r1
 802120e:	681b      	ldr	r3, [r3, #0]
 8021210:	881b      	ldrh	r3, [r3, #0]
 8021212:	b29b      	uxth	r3, r3
 8021214:	4a18      	ldr	r2, [pc, #96]	@ (8021278 <USB_EPStartXfer+0x11c0>)
 8021216:	4313      	orrs	r3, r2
 8021218:	b29a      	uxth	r2, r3
 802121a:	187b      	adds	r3, r7, r1
 802121c:	681b      	ldr	r3, [r3, #0]
 802121e:	801a      	strh	r2, [r3, #0]
 8021220:	e051      	b.n	80212c6 <USB_EPStartXfer+0x120e>
 8021222:	1d7b      	adds	r3, r7, #5
 8021224:	33ff      	adds	r3, #255	@ 0xff
 8021226:	681b      	ldr	r3, [r3, #0]
 8021228:	085b      	lsrs	r3, r3, #1
 802122a:	21d8      	movs	r1, #216	@ 0xd8
 802122c:	187a      	adds	r2, r7, r1
 802122e:	6013      	str	r3, [r2, #0]
 8021230:	1d7b      	adds	r3, r7, #5
 8021232:	33ff      	adds	r3, #255	@ 0xff
 8021234:	681b      	ldr	r3, [r3, #0]
 8021236:	2201      	movs	r2, #1
 8021238:	4013      	ands	r3, r2
 802123a:	d004      	beq.n	8021246 <USB_EPStartXfer+0x118e>
 802123c:	187b      	adds	r3, r7, r1
 802123e:	681b      	ldr	r3, [r3, #0]
 8021240:	3301      	adds	r3, #1
 8021242:	187a      	adds	r2, r7, r1
 8021244:	6013      	str	r3, [r2, #0]
 8021246:	21b8      	movs	r1, #184	@ 0xb8
 8021248:	187b      	adds	r3, r7, r1
 802124a:	681b      	ldr	r3, [r3, #0]
 802124c:	881b      	ldrh	r3, [r3, #0]
 802124e:	b29a      	uxth	r2, r3
 8021250:	23d8      	movs	r3, #216	@ 0xd8
 8021252:	18fb      	adds	r3, r7, r3
 8021254:	681b      	ldr	r3, [r3, #0]
 8021256:	b29b      	uxth	r3, r3
 8021258:	029b      	lsls	r3, r3, #10
 802125a:	b29b      	uxth	r3, r3
 802125c:	4313      	orrs	r3, r2
 802125e:	b29a      	uxth	r2, r3
 8021260:	187b      	adds	r3, r7, r1
 8021262:	681b      	ldr	r3, [r3, #0]
 8021264:	801a      	strh	r2, [r3, #0]
 8021266:	e02e      	b.n	80212c6 <USB_EPStartXfer+0x120e>
 8021268:	00000406 	.word	0x00000406
 802126c:	ffff8f8f 	.word	0xffff8f8f
 8021270:	ffff80c0 	.word	0xffff80c0
 8021274:	00000402 	.word	0x00000402
 8021278:	ffff8000 	.word	0xffff8000
 802127c:	683b      	ldr	r3, [r7, #0]
 802127e:	785b      	ldrb	r3, [r3, #1]
 8021280:	2b01      	cmp	r3, #1
 8021282:	d120      	bne.n	80212c6 <USB_EPStartXfer+0x120e>
 8021284:	687b      	ldr	r3, [r7, #4]
 8021286:	2250      	movs	r2, #80	@ 0x50
 8021288:	5a9b      	ldrh	r3, [r3, r2]
 802128a:	b29b      	uxth	r3, r3
 802128c:	001a      	movs	r2, r3
 802128e:	21c4      	movs	r1, #196	@ 0xc4
 8021290:	187b      	adds	r3, r7, r1
 8021292:	681b      	ldr	r3, [r3, #0]
 8021294:	189b      	adds	r3, r3, r2
 8021296:	187a      	adds	r2, r7, r1
 8021298:	6013      	str	r3, [r2, #0]
 802129a:	683b      	ldr	r3, [r7, #0]
 802129c:	781b      	ldrb	r3, [r3, #0]
 802129e:	00da      	lsls	r2, r3, #3
 80212a0:	187b      	adds	r3, r7, r1
 80212a2:	681b      	ldr	r3, [r3, #0]
 80212a4:	18d3      	adds	r3, r2, r3
 80212a6:	4a1d      	ldr	r2, [pc, #116]	@ (802131c <USB_EPStartXfer+0x1264>)
 80212a8:	4694      	mov	ip, r2
 80212aa:	4463      	add	r3, ip
 80212ac:	21c0      	movs	r1, #192	@ 0xc0
 80212ae:	187a      	adds	r2, r7, r1
 80212b0:	6013      	str	r3, [r2, #0]
 80212b2:	1d7b      	adds	r3, r7, #5
 80212b4:	33ff      	adds	r3, #255	@ 0xff
 80212b6:	681b      	ldr	r3, [r3, #0]
 80212b8:	b29a      	uxth	r2, r3
 80212ba:	187b      	adds	r3, r7, r1
 80212bc:	681b      	ldr	r3, [r3, #0]
 80212be:	801a      	strh	r2, [r3, #0]
 80212c0:	e001      	b.n	80212c6 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80212c2:	2301      	movs	r3, #1
 80212c4:	e025      	b.n	8021312 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80212c6:	687a      	ldr	r2, [r7, #4]
 80212c8:	683b      	ldr	r3, [r7, #0]
 80212ca:	781b      	ldrb	r3, [r3, #0]
 80212cc:	009b      	lsls	r3, r3, #2
 80212ce:	18d3      	adds	r3, r2, r3
 80212d0:	881b      	ldrh	r3, [r3, #0]
 80212d2:	b29a      	uxth	r2, r3
 80212d4:	208a      	movs	r0, #138	@ 0x8a
 80212d6:	183b      	adds	r3, r7, r0
 80212d8:	4911      	ldr	r1, [pc, #68]	@ (8021320 <USB_EPStartXfer+0x1268>)
 80212da:	400a      	ands	r2, r1
 80212dc:	801a      	strh	r2, [r3, #0]
 80212de:	183b      	adds	r3, r7, r0
 80212e0:	183a      	adds	r2, r7, r0
 80212e2:	8812      	ldrh	r2, [r2, #0]
 80212e4:	2180      	movs	r1, #128	@ 0x80
 80212e6:	0149      	lsls	r1, r1, #5
 80212e8:	404a      	eors	r2, r1
 80212ea:	801a      	strh	r2, [r3, #0]
 80212ec:	183b      	adds	r3, r7, r0
 80212ee:	183a      	adds	r2, r7, r0
 80212f0:	8812      	ldrh	r2, [r2, #0]
 80212f2:	2180      	movs	r1, #128	@ 0x80
 80212f4:	0189      	lsls	r1, r1, #6
 80212f6:	404a      	eors	r2, r1
 80212f8:	801a      	strh	r2, [r3, #0]
 80212fa:	687a      	ldr	r2, [r7, #4]
 80212fc:	683b      	ldr	r3, [r7, #0]
 80212fe:	781b      	ldrb	r3, [r3, #0]
 8021300:	009b      	lsls	r3, r3, #2
 8021302:	18d3      	adds	r3, r2, r3
 8021304:	183a      	adds	r2, r7, r0
 8021306:	8812      	ldrh	r2, [r2, #0]
 8021308:	4906      	ldr	r1, [pc, #24]	@ (8021324 <USB_EPStartXfer+0x126c>)
 802130a:	430a      	orrs	r2, r1
 802130c:	b292      	uxth	r2, r2
 802130e:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8021310:	2300      	movs	r3, #0
}
 8021312:	0018      	movs	r0, r3
 8021314:	46bd      	mov	sp, r7
 8021316:	b043      	add	sp, #268	@ 0x10c
 8021318:	bd90      	pop	{r4, r7, pc}
 802131a:	46c0      	nop			@ (mov r8, r8)
 802131c:	00000406 	.word	0x00000406
 8021320:	ffffbf8f 	.word	0xffffbf8f
 8021324:	ffff8080 	.word	0xffff8080

08021328 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8021328:	b580      	push	{r7, lr}
 802132a:	b084      	sub	sp, #16
 802132c:	af00      	add	r7, sp, #0
 802132e:	6078      	str	r0, [r7, #4]
 8021330:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8021332:	683b      	ldr	r3, [r7, #0]
 8021334:	785b      	ldrb	r3, [r3, #1]
 8021336:	2b00      	cmp	r3, #0
 8021338:	d01d      	beq.n	8021376 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 802133a:	687a      	ldr	r2, [r7, #4]
 802133c:	683b      	ldr	r3, [r7, #0]
 802133e:	781b      	ldrb	r3, [r3, #0]
 8021340:	009b      	lsls	r3, r3, #2
 8021342:	18d3      	adds	r3, r2, r3
 8021344:	881b      	ldrh	r3, [r3, #0]
 8021346:	b29a      	uxth	r2, r3
 8021348:	200c      	movs	r0, #12
 802134a:	183b      	adds	r3, r7, r0
 802134c:	491b      	ldr	r1, [pc, #108]	@ (80213bc <USB_EPSetStall+0x94>)
 802134e:	400a      	ands	r2, r1
 8021350:	801a      	strh	r2, [r3, #0]
 8021352:	183b      	adds	r3, r7, r0
 8021354:	183a      	adds	r2, r7, r0
 8021356:	8812      	ldrh	r2, [r2, #0]
 8021358:	2110      	movs	r1, #16
 802135a:	404a      	eors	r2, r1
 802135c:	801a      	strh	r2, [r3, #0]
 802135e:	687a      	ldr	r2, [r7, #4]
 8021360:	683b      	ldr	r3, [r7, #0]
 8021362:	781b      	ldrb	r3, [r3, #0]
 8021364:	009b      	lsls	r3, r3, #2
 8021366:	18d3      	adds	r3, r2, r3
 8021368:	183a      	adds	r2, r7, r0
 802136a:	8812      	ldrh	r2, [r2, #0]
 802136c:	4914      	ldr	r1, [pc, #80]	@ (80213c0 <USB_EPSetStall+0x98>)
 802136e:	430a      	orrs	r2, r1
 8021370:	b292      	uxth	r2, r2
 8021372:	801a      	strh	r2, [r3, #0]
 8021374:	e01d      	b.n	80213b2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8021376:	687a      	ldr	r2, [r7, #4]
 8021378:	683b      	ldr	r3, [r7, #0]
 802137a:	781b      	ldrb	r3, [r3, #0]
 802137c:	009b      	lsls	r3, r3, #2
 802137e:	18d3      	adds	r3, r2, r3
 8021380:	881b      	ldrh	r3, [r3, #0]
 8021382:	b29a      	uxth	r2, r3
 8021384:	200e      	movs	r0, #14
 8021386:	183b      	adds	r3, r7, r0
 8021388:	490e      	ldr	r1, [pc, #56]	@ (80213c4 <USB_EPSetStall+0x9c>)
 802138a:	400a      	ands	r2, r1
 802138c:	801a      	strh	r2, [r3, #0]
 802138e:	183b      	adds	r3, r7, r0
 8021390:	183a      	adds	r2, r7, r0
 8021392:	8812      	ldrh	r2, [r2, #0]
 8021394:	2180      	movs	r1, #128	@ 0x80
 8021396:	0149      	lsls	r1, r1, #5
 8021398:	404a      	eors	r2, r1
 802139a:	801a      	strh	r2, [r3, #0]
 802139c:	687a      	ldr	r2, [r7, #4]
 802139e:	683b      	ldr	r3, [r7, #0]
 80213a0:	781b      	ldrb	r3, [r3, #0]
 80213a2:	009b      	lsls	r3, r3, #2
 80213a4:	18d3      	adds	r3, r2, r3
 80213a6:	183a      	adds	r2, r7, r0
 80213a8:	8812      	ldrh	r2, [r2, #0]
 80213aa:	4905      	ldr	r1, [pc, #20]	@ (80213c0 <USB_EPSetStall+0x98>)
 80213ac:	430a      	orrs	r2, r1
 80213ae:	b292      	uxth	r2, r2
 80213b0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80213b2:	2300      	movs	r3, #0
}
 80213b4:	0018      	movs	r0, r3
 80213b6:	46bd      	mov	sp, r7
 80213b8:	b004      	add	sp, #16
 80213ba:	bd80      	pop	{r7, pc}
 80213bc:	ffff8fbf 	.word	0xffff8fbf
 80213c0:	ffff8080 	.word	0xffff8080
 80213c4:	ffffbf8f 	.word	0xffffbf8f

080213c8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80213c8:	b580      	push	{r7, lr}
 80213ca:	b086      	sub	sp, #24
 80213cc:	af00      	add	r7, sp, #0
 80213ce:	6078      	str	r0, [r7, #4]
 80213d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80213d2:	683b      	ldr	r3, [r7, #0]
 80213d4:	7b1b      	ldrb	r3, [r3, #12]
 80213d6:	2b00      	cmp	r3, #0
 80213d8:	d000      	beq.n	80213dc <USB_EPClearStall+0x14>
 80213da:	e095      	b.n	8021508 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80213dc:	683b      	ldr	r3, [r7, #0]
 80213de:	785b      	ldrb	r3, [r3, #1]
 80213e0:	2b00      	cmp	r3, #0
 80213e2:	d046      	beq.n	8021472 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80213e4:	687a      	ldr	r2, [r7, #4]
 80213e6:	683b      	ldr	r3, [r7, #0]
 80213e8:	781b      	ldrb	r3, [r3, #0]
 80213ea:	009b      	lsls	r3, r3, #2
 80213ec:	18d2      	adds	r2, r2, r3
 80213ee:	2110      	movs	r1, #16
 80213f0:	187b      	adds	r3, r7, r1
 80213f2:	8812      	ldrh	r2, [r2, #0]
 80213f4:	801a      	strh	r2, [r3, #0]
 80213f6:	187b      	adds	r3, r7, r1
 80213f8:	881b      	ldrh	r3, [r3, #0]
 80213fa:	2240      	movs	r2, #64	@ 0x40
 80213fc:	4013      	ands	r3, r2
 80213fe:	d016      	beq.n	802142e <USB_EPClearStall+0x66>
 8021400:	687a      	ldr	r2, [r7, #4]
 8021402:	683b      	ldr	r3, [r7, #0]
 8021404:	781b      	ldrb	r3, [r3, #0]
 8021406:	009b      	lsls	r3, r3, #2
 8021408:	18d3      	adds	r3, r2, r3
 802140a:	881b      	ldrh	r3, [r3, #0]
 802140c:	b29a      	uxth	r2, r3
 802140e:	200e      	movs	r0, #14
 8021410:	183b      	adds	r3, r7, r0
 8021412:	4940      	ldr	r1, [pc, #256]	@ (8021514 <USB_EPClearStall+0x14c>)
 8021414:	400a      	ands	r2, r1
 8021416:	801a      	strh	r2, [r3, #0]
 8021418:	687a      	ldr	r2, [r7, #4]
 802141a:	683b      	ldr	r3, [r7, #0]
 802141c:	781b      	ldrb	r3, [r3, #0]
 802141e:	009b      	lsls	r3, r3, #2
 8021420:	18d3      	adds	r3, r2, r3
 8021422:	183a      	adds	r2, r7, r0
 8021424:	8812      	ldrh	r2, [r2, #0]
 8021426:	493c      	ldr	r1, [pc, #240]	@ (8021518 <USB_EPClearStall+0x150>)
 8021428:	430a      	orrs	r2, r1
 802142a:	b292      	uxth	r2, r2
 802142c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 802142e:	683b      	ldr	r3, [r7, #0]
 8021430:	78db      	ldrb	r3, [r3, #3]
 8021432:	2b01      	cmp	r3, #1
 8021434:	d068      	beq.n	8021508 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8021436:	687a      	ldr	r2, [r7, #4]
 8021438:	683b      	ldr	r3, [r7, #0]
 802143a:	781b      	ldrb	r3, [r3, #0]
 802143c:	009b      	lsls	r3, r3, #2
 802143e:	18d3      	adds	r3, r2, r3
 8021440:	881b      	ldrh	r3, [r3, #0]
 8021442:	b29a      	uxth	r2, r3
 8021444:	200c      	movs	r0, #12
 8021446:	183b      	adds	r3, r7, r0
 8021448:	4934      	ldr	r1, [pc, #208]	@ (802151c <USB_EPClearStall+0x154>)
 802144a:	400a      	ands	r2, r1
 802144c:	801a      	strh	r2, [r3, #0]
 802144e:	183b      	adds	r3, r7, r0
 8021450:	183a      	adds	r2, r7, r0
 8021452:	8812      	ldrh	r2, [r2, #0]
 8021454:	2120      	movs	r1, #32
 8021456:	404a      	eors	r2, r1
 8021458:	801a      	strh	r2, [r3, #0]
 802145a:	687a      	ldr	r2, [r7, #4]
 802145c:	683b      	ldr	r3, [r7, #0]
 802145e:	781b      	ldrb	r3, [r3, #0]
 8021460:	009b      	lsls	r3, r3, #2
 8021462:	18d3      	adds	r3, r2, r3
 8021464:	183a      	adds	r2, r7, r0
 8021466:	8812      	ldrh	r2, [r2, #0]
 8021468:	492d      	ldr	r1, [pc, #180]	@ (8021520 <USB_EPClearStall+0x158>)
 802146a:	430a      	orrs	r2, r1
 802146c:	b292      	uxth	r2, r2
 802146e:	801a      	strh	r2, [r3, #0]
 8021470:	e04a      	b.n	8021508 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8021472:	687a      	ldr	r2, [r7, #4]
 8021474:	683b      	ldr	r3, [r7, #0]
 8021476:	781b      	ldrb	r3, [r3, #0]
 8021478:	009b      	lsls	r3, r3, #2
 802147a:	18d2      	adds	r2, r2, r3
 802147c:	2116      	movs	r1, #22
 802147e:	187b      	adds	r3, r7, r1
 8021480:	8812      	ldrh	r2, [r2, #0]
 8021482:	801a      	strh	r2, [r3, #0]
 8021484:	187b      	adds	r3, r7, r1
 8021486:	881a      	ldrh	r2, [r3, #0]
 8021488:	2380      	movs	r3, #128	@ 0x80
 802148a:	01db      	lsls	r3, r3, #7
 802148c:	4013      	ands	r3, r2
 802148e:	d016      	beq.n	80214be <USB_EPClearStall+0xf6>
 8021490:	687a      	ldr	r2, [r7, #4]
 8021492:	683b      	ldr	r3, [r7, #0]
 8021494:	781b      	ldrb	r3, [r3, #0]
 8021496:	009b      	lsls	r3, r3, #2
 8021498:	18d3      	adds	r3, r2, r3
 802149a:	881b      	ldrh	r3, [r3, #0]
 802149c:	b29a      	uxth	r2, r3
 802149e:	2014      	movs	r0, #20
 80214a0:	183b      	adds	r3, r7, r0
 80214a2:	491c      	ldr	r1, [pc, #112]	@ (8021514 <USB_EPClearStall+0x14c>)
 80214a4:	400a      	ands	r2, r1
 80214a6:	801a      	strh	r2, [r3, #0]
 80214a8:	687a      	ldr	r2, [r7, #4]
 80214aa:	683b      	ldr	r3, [r7, #0]
 80214ac:	781b      	ldrb	r3, [r3, #0]
 80214ae:	009b      	lsls	r3, r3, #2
 80214b0:	18d3      	adds	r3, r2, r3
 80214b2:	183a      	adds	r2, r7, r0
 80214b4:	8812      	ldrh	r2, [r2, #0]
 80214b6:	491b      	ldr	r1, [pc, #108]	@ (8021524 <USB_EPClearStall+0x15c>)
 80214b8:	430a      	orrs	r2, r1
 80214ba:	b292      	uxth	r2, r2
 80214bc:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80214be:	687a      	ldr	r2, [r7, #4]
 80214c0:	683b      	ldr	r3, [r7, #0]
 80214c2:	781b      	ldrb	r3, [r3, #0]
 80214c4:	009b      	lsls	r3, r3, #2
 80214c6:	18d3      	adds	r3, r2, r3
 80214c8:	881b      	ldrh	r3, [r3, #0]
 80214ca:	b29a      	uxth	r2, r3
 80214cc:	2012      	movs	r0, #18
 80214ce:	183b      	adds	r3, r7, r0
 80214d0:	4915      	ldr	r1, [pc, #84]	@ (8021528 <USB_EPClearStall+0x160>)
 80214d2:	400a      	ands	r2, r1
 80214d4:	801a      	strh	r2, [r3, #0]
 80214d6:	183b      	adds	r3, r7, r0
 80214d8:	183a      	adds	r2, r7, r0
 80214da:	8812      	ldrh	r2, [r2, #0]
 80214dc:	2180      	movs	r1, #128	@ 0x80
 80214de:	0149      	lsls	r1, r1, #5
 80214e0:	404a      	eors	r2, r1
 80214e2:	801a      	strh	r2, [r3, #0]
 80214e4:	183b      	adds	r3, r7, r0
 80214e6:	183a      	adds	r2, r7, r0
 80214e8:	8812      	ldrh	r2, [r2, #0]
 80214ea:	2180      	movs	r1, #128	@ 0x80
 80214ec:	0189      	lsls	r1, r1, #6
 80214ee:	404a      	eors	r2, r1
 80214f0:	801a      	strh	r2, [r3, #0]
 80214f2:	687a      	ldr	r2, [r7, #4]
 80214f4:	683b      	ldr	r3, [r7, #0]
 80214f6:	781b      	ldrb	r3, [r3, #0]
 80214f8:	009b      	lsls	r3, r3, #2
 80214fa:	18d3      	adds	r3, r2, r3
 80214fc:	183a      	adds	r2, r7, r0
 80214fe:	8812      	ldrh	r2, [r2, #0]
 8021500:	4907      	ldr	r1, [pc, #28]	@ (8021520 <USB_EPClearStall+0x158>)
 8021502:	430a      	orrs	r2, r1
 8021504:	b292      	uxth	r2, r2
 8021506:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8021508:	2300      	movs	r3, #0
}
 802150a:	0018      	movs	r0, r3
 802150c:	46bd      	mov	sp, r7
 802150e:	b006      	add	sp, #24
 8021510:	bd80      	pop	{r7, pc}
 8021512:	46c0      	nop			@ (mov r8, r8)
 8021514:	ffff8f8f 	.word	0xffff8f8f
 8021518:	ffff80c0 	.word	0xffff80c0
 802151c:	ffff8fbf 	.word	0xffff8fbf
 8021520:	ffff8080 	.word	0xffff8080
 8021524:	ffffc080 	.word	0xffffc080
 8021528:	ffffbf8f 	.word	0xffffbf8f

0802152c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 802152c:	b580      	push	{r7, lr}
 802152e:	b082      	sub	sp, #8
 8021530:	af00      	add	r7, sp, #0
 8021532:	6078      	str	r0, [r7, #4]
 8021534:	000a      	movs	r2, r1
 8021536:	1cfb      	adds	r3, r7, #3
 8021538:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 802153a:	1cfb      	adds	r3, r7, #3
 802153c:	781b      	ldrb	r3, [r3, #0]
 802153e:	2b00      	cmp	r3, #0
 8021540:	d103      	bne.n	802154a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8021542:	687b      	ldr	r3, [r7, #4]
 8021544:	224c      	movs	r2, #76	@ 0x4c
 8021546:	2180      	movs	r1, #128	@ 0x80
 8021548:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 802154a:	2300      	movs	r3, #0
}
 802154c:	0018      	movs	r0, r3
 802154e:	46bd      	mov	sp, r7
 8021550:	b002      	add	sp, #8
 8021552:	bd80      	pop	{r7, pc}

08021554 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8021554:	b580      	push	{r7, lr}
 8021556:	b082      	sub	sp, #8
 8021558:	af00      	add	r7, sp, #0
 802155a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 802155c:	687b      	ldr	r3, [r7, #4]
 802155e:	2258      	movs	r2, #88	@ 0x58
 8021560:	5a9b      	ldrh	r3, [r3, r2]
 8021562:	b29b      	uxth	r3, r3
 8021564:	4a05      	ldr	r2, [pc, #20]	@ (802157c <USB_DevConnect+0x28>)
 8021566:	4313      	orrs	r3, r2
 8021568:	b299      	uxth	r1, r3
 802156a:	687b      	ldr	r3, [r7, #4]
 802156c:	2258      	movs	r2, #88	@ 0x58
 802156e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8021570:	2300      	movs	r3, #0
}
 8021572:	0018      	movs	r0, r3
 8021574:	46bd      	mov	sp, r7
 8021576:	b002      	add	sp, #8
 8021578:	bd80      	pop	{r7, pc}
 802157a:	46c0      	nop			@ (mov r8, r8)
 802157c:	ffff8000 	.word	0xffff8000

08021580 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8021580:	b580      	push	{r7, lr}
 8021582:	b084      	sub	sp, #16
 8021584:	af00      	add	r7, sp, #0
 8021586:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8021588:	687b      	ldr	r3, [r7, #4]
 802158a:	2244      	movs	r2, #68	@ 0x44
 802158c:	5a9b      	ldrh	r3, [r3, r2]
 802158e:	b29b      	uxth	r3, r3
 8021590:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8021592:	68fb      	ldr	r3, [r7, #12]
}
 8021594:	0018      	movs	r0, r3
 8021596:	46bd      	mov	sp, r7
 8021598:	b004      	add	sp, #16
 802159a:	bd80      	pop	{r7, pc}

0802159c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 802159c:	b580      	push	{r7, lr}
 802159e:	b08a      	sub	sp, #40	@ 0x28
 80215a0:	af00      	add	r7, sp, #0
 80215a2:	60f8      	str	r0, [r7, #12]
 80215a4:	60b9      	str	r1, [r7, #8]
 80215a6:	0019      	movs	r1, r3
 80215a8:	1dbb      	adds	r3, r7, #6
 80215aa:	801a      	strh	r2, [r3, #0]
 80215ac:	1d3b      	adds	r3, r7, #4
 80215ae:	1c0a      	adds	r2, r1, #0
 80215b0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80215b2:	1d3b      	adds	r3, r7, #4
 80215b4:	881b      	ldrh	r3, [r3, #0]
 80215b6:	3301      	adds	r3, #1
 80215b8:	085b      	lsrs	r3, r3, #1
 80215ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80215bc:	68fb      	ldr	r3, [r7, #12]
 80215be:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80215c0:	68bb      	ldr	r3, [r7, #8]
 80215c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80215c4:	1dbb      	adds	r3, r7, #6
 80215c6:	881a      	ldrh	r2, [r3, #0]
 80215c8:	697b      	ldr	r3, [r7, #20]
 80215ca:	18d3      	adds	r3, r2, r3
 80215cc:	2280      	movs	r2, #128	@ 0x80
 80215ce:	00d2      	lsls	r2, r2, #3
 80215d0:	4694      	mov	ip, r2
 80215d2:	4463      	add	r3, ip
 80215d4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80215d6:	69bb      	ldr	r3, [r7, #24]
 80215d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80215da:	e021      	b.n	8021620 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 80215dc:	69fb      	ldr	r3, [r7, #28]
 80215de:	781a      	ldrb	r2, [r3, #0]
 80215e0:	2112      	movs	r1, #18
 80215e2:	187b      	adds	r3, r7, r1
 80215e4:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80215e6:	69fb      	ldr	r3, [r7, #28]
 80215e8:	3301      	adds	r3, #1
 80215ea:	781b      	ldrb	r3, [r3, #0]
 80215ec:	b21b      	sxth	r3, r3
 80215ee:	021b      	lsls	r3, r3, #8
 80215f0:	b21a      	sxth	r2, r3
 80215f2:	187b      	adds	r3, r7, r1
 80215f4:	2000      	movs	r0, #0
 80215f6:	5e1b      	ldrsh	r3, [r3, r0]
 80215f8:	4313      	orrs	r3, r2
 80215fa:	b21a      	sxth	r2, r3
 80215fc:	187b      	adds	r3, r7, r1
 80215fe:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8021600:	6a3b      	ldr	r3, [r7, #32]
 8021602:	187a      	adds	r2, r7, r1
 8021604:	8812      	ldrh	r2, [r2, #0]
 8021606:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8021608:	6a3b      	ldr	r3, [r7, #32]
 802160a:	3302      	adds	r3, #2
 802160c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 802160e:	69fb      	ldr	r3, [r7, #28]
 8021610:	3301      	adds	r3, #1
 8021612:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8021614:	69fb      	ldr	r3, [r7, #28]
 8021616:	3301      	adds	r3, #1
 8021618:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 802161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802161c:	3b01      	subs	r3, #1
 802161e:	627b      	str	r3, [r7, #36]	@ 0x24
 8021620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021622:	2b00      	cmp	r3, #0
 8021624:	d1da      	bne.n	80215dc <USB_WritePMA+0x40>
  }
}
 8021626:	46c0      	nop			@ (mov r8, r8)
 8021628:	46c0      	nop			@ (mov r8, r8)
 802162a:	46bd      	mov	sp, r7
 802162c:	b00a      	add	sp, #40	@ 0x28
 802162e:	bd80      	pop	{r7, pc}

08021630 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8021630:	b580      	push	{r7, lr}
 8021632:	b08a      	sub	sp, #40	@ 0x28
 8021634:	af00      	add	r7, sp, #0
 8021636:	60f8      	str	r0, [r7, #12]
 8021638:	60b9      	str	r1, [r7, #8]
 802163a:	0019      	movs	r1, r3
 802163c:	1dbb      	adds	r3, r7, #6
 802163e:	801a      	strh	r2, [r3, #0]
 8021640:	1d3b      	adds	r3, r7, #4
 8021642:	1c0a      	adds	r2, r1, #0
 8021644:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8021646:	1d3b      	adds	r3, r7, #4
 8021648:	881b      	ldrh	r3, [r3, #0]
 802164a:	085b      	lsrs	r3, r3, #1
 802164c:	b29b      	uxth	r3, r3
 802164e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8021650:	68fb      	ldr	r3, [r7, #12]
 8021652:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8021654:	68bb      	ldr	r3, [r7, #8]
 8021656:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8021658:	1dbb      	adds	r3, r7, #6
 802165a:	881a      	ldrh	r2, [r3, #0]
 802165c:	697b      	ldr	r3, [r7, #20]
 802165e:	18d3      	adds	r3, r2, r3
 8021660:	2280      	movs	r2, #128	@ 0x80
 8021662:	00d2      	lsls	r2, r2, #3
 8021664:	4694      	mov	ip, r2
 8021666:	4463      	add	r3, ip
 8021668:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 802166a:	69bb      	ldr	r3, [r7, #24]
 802166c:	627b      	str	r3, [r7, #36]	@ 0x24
 802166e:	e018      	b.n	80216a2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8021670:	6a3b      	ldr	r3, [r7, #32]
 8021672:	881b      	ldrh	r3, [r3, #0]
 8021674:	b29b      	uxth	r3, r3
 8021676:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8021678:	6a3b      	ldr	r3, [r7, #32]
 802167a:	3302      	adds	r3, #2
 802167c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 802167e:	693b      	ldr	r3, [r7, #16]
 8021680:	b2da      	uxtb	r2, r3
 8021682:	69fb      	ldr	r3, [r7, #28]
 8021684:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8021686:	69fb      	ldr	r3, [r7, #28]
 8021688:	3301      	adds	r3, #1
 802168a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 802168c:	693b      	ldr	r3, [r7, #16]
 802168e:	0a1b      	lsrs	r3, r3, #8
 8021690:	b2da      	uxtb	r2, r3
 8021692:	69fb      	ldr	r3, [r7, #28]
 8021694:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8021696:	69fb      	ldr	r3, [r7, #28]
 8021698:	3301      	adds	r3, #1
 802169a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 802169c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802169e:	3b01      	subs	r3, #1
 80216a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80216a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80216a4:	2b00      	cmp	r3, #0
 80216a6:	d1e3      	bne.n	8021670 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80216a8:	1d3b      	adds	r3, r7, #4
 80216aa:	881b      	ldrh	r3, [r3, #0]
 80216ac:	2201      	movs	r2, #1
 80216ae:	4013      	ands	r3, r2
 80216b0:	b29b      	uxth	r3, r3
 80216b2:	2b00      	cmp	r3, #0
 80216b4:	d007      	beq.n	80216c6 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80216b6:	6a3b      	ldr	r3, [r7, #32]
 80216b8:	881b      	ldrh	r3, [r3, #0]
 80216ba:	b29b      	uxth	r3, r3
 80216bc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80216be:	693b      	ldr	r3, [r7, #16]
 80216c0:	b2da      	uxtb	r2, r3
 80216c2:	69fb      	ldr	r3, [r7, #28]
 80216c4:	701a      	strb	r2, [r3, #0]
  }
}
 80216c6:	46c0      	nop			@ (mov r8, r8)
 80216c8:	46bd      	mov	sp, r7
 80216ca:	b00a      	add	sp, #40	@ 0x28
 80216cc:	bd80      	pop	{r7, pc}

080216ce <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80216ce:	b580      	push	{r7, lr}
 80216d0:	b084      	sub	sp, #16
 80216d2:	af00      	add	r7, sp, #0
 80216d4:	6078      	str	r0, [r7, #4]
 80216d6:	000a      	movs	r2, r1
 80216d8:	1cfb      	adds	r3, r7, #3
 80216da:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80216dc:	230f      	movs	r3, #15
 80216de:	18fb      	adds	r3, r7, r3
 80216e0:	2200      	movs	r2, #0
 80216e2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80216e4:	687b      	ldr	r3, [r7, #4]
 80216e6:	7c1b      	ldrb	r3, [r3, #16]
 80216e8:	2b00      	cmp	r3, #0
 80216ea:	d116      	bne.n	802171a <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80216ec:	2380      	movs	r3, #128	@ 0x80
 80216ee:	009b      	lsls	r3, r3, #2
 80216f0:	6878      	ldr	r0, [r7, #4]
 80216f2:	2202      	movs	r2, #2
 80216f4:	2181      	movs	r1, #129	@ 0x81
 80216f6:	f002 f8f8 	bl	80238ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80216fa:	687b      	ldr	r3, [r7, #4]
 80216fc:	2201      	movs	r2, #1
 80216fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8021700:	2380      	movs	r3, #128	@ 0x80
 8021702:	009b      	lsls	r3, r3, #2
 8021704:	6878      	ldr	r0, [r7, #4]
 8021706:	2202      	movs	r2, #2
 8021708:	2101      	movs	r1, #1
 802170a:	f002 f8ee 	bl	80238ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 802170e:	687a      	ldr	r2, [r7, #4]
 8021710:	23b6      	movs	r3, #182	@ 0xb6
 8021712:	005b      	lsls	r3, r3, #1
 8021714:	2101      	movs	r1, #1
 8021716:	50d1      	str	r1, [r2, r3]
 8021718:	e013      	b.n	8021742 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 802171a:	6878      	ldr	r0, [r7, #4]
 802171c:	2340      	movs	r3, #64	@ 0x40
 802171e:	2202      	movs	r2, #2
 8021720:	2181      	movs	r1, #129	@ 0x81
 8021722:	f002 f8e2 	bl	80238ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8021726:	687b      	ldr	r3, [r7, #4]
 8021728:	2201      	movs	r2, #1
 802172a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 802172c:	6878      	ldr	r0, [r7, #4]
 802172e:	2340      	movs	r3, #64	@ 0x40
 8021730:	2202      	movs	r2, #2
 8021732:	2101      	movs	r1, #1
 8021734:	f002 f8d9 	bl	80238ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8021738:	687a      	ldr	r2, [r7, #4]
 802173a:	23b6      	movs	r3, #182	@ 0xb6
 802173c:	005b      	lsls	r3, r3, #1
 802173e:	2101      	movs	r1, #1
 8021740:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8021742:	6878      	ldr	r0, [r7, #4]
 8021744:	2308      	movs	r3, #8
 8021746:	2203      	movs	r2, #3
 8021748:	2182      	movs	r1, #130	@ 0x82
 802174a:	f002 f8ce 	bl	80238ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 802174e:	687b      	ldr	r3, [r7, #4]
 8021750:	2201      	movs	r2, #1
 8021752:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8021754:	2387      	movs	r3, #135	@ 0x87
 8021756:	009b      	lsls	r3, r3, #2
 8021758:	0018      	movs	r0, r3
 802175a:	f002 fa5f 	bl	8023c1c <USBD_static_malloc>
 802175e:	0001      	movs	r1, r0
 8021760:	687a      	ldr	r2, [r7, #4]
 8021762:	23ae      	movs	r3, #174	@ 0xae
 8021764:	009b      	lsls	r3, r3, #2
 8021766:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8021768:	687a      	ldr	r2, [r7, #4]
 802176a:	23ae      	movs	r3, #174	@ 0xae
 802176c:	009b      	lsls	r3, r3, #2
 802176e:	58d3      	ldr	r3, [r2, r3]
 8021770:	2b00      	cmp	r3, #0
 8021772:	d104      	bne.n	802177e <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8021774:	230f      	movs	r3, #15
 8021776:	18fb      	adds	r3, r7, r3
 8021778:	2201      	movs	r2, #1
 802177a:	701a      	strb	r2, [r3, #0]
 802177c:	e02c      	b.n	80217d8 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802177e:	687a      	ldr	r2, [r7, #4]
 8021780:	23ae      	movs	r3, #174	@ 0xae
 8021782:	009b      	lsls	r3, r3, #2
 8021784:	58d3      	ldr	r3, [r2, r3]
 8021786:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8021788:	687a      	ldr	r2, [r7, #4]
 802178a:	23af      	movs	r3, #175	@ 0xaf
 802178c:	009b      	lsls	r3, r3, #2
 802178e:	58d3      	ldr	r3, [r2, r3]
 8021790:	681b      	ldr	r3, [r3, #0]
 8021792:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8021794:	68ba      	ldr	r2, [r7, #8]
 8021796:	2385      	movs	r3, #133	@ 0x85
 8021798:	009b      	lsls	r3, r3, #2
 802179a:	2100      	movs	r1, #0
 802179c:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 802179e:	68ba      	ldr	r2, [r7, #8]
 80217a0:	2386      	movs	r3, #134	@ 0x86
 80217a2:	009b      	lsls	r3, r3, #2
 80217a4:	2100      	movs	r1, #0
 80217a6:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80217a8:	687b      	ldr	r3, [r7, #4]
 80217aa:	7c1b      	ldrb	r3, [r3, #16]
 80217ac:	2b00      	cmp	r3, #0
 80217ae:	d10a      	bne.n	80217c6 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80217b0:	68ba      	ldr	r2, [r7, #8]
 80217b2:	2381      	movs	r3, #129	@ 0x81
 80217b4:	009b      	lsls	r3, r3, #2
 80217b6:	58d2      	ldr	r2, [r2, r3]
 80217b8:	2380      	movs	r3, #128	@ 0x80
 80217ba:	009b      	lsls	r3, r3, #2
 80217bc:	6878      	ldr	r0, [r7, #4]
 80217be:	2101      	movs	r1, #1
 80217c0:	f002 f9de 	bl	8023b80 <USBD_LL_PrepareReceive>
 80217c4:	e008      	b.n	80217d8 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80217c6:	68ba      	ldr	r2, [r7, #8]
 80217c8:	2381      	movs	r3, #129	@ 0x81
 80217ca:	009b      	lsls	r3, r3, #2
 80217cc:	58d2      	ldr	r2, [r2, r3]
 80217ce:	6878      	ldr	r0, [r7, #4]
 80217d0:	2340      	movs	r3, #64	@ 0x40
 80217d2:	2101      	movs	r1, #1
 80217d4:	f002 f9d4 	bl	8023b80 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80217d8:	230f      	movs	r3, #15
 80217da:	18fb      	adds	r3, r7, r3
 80217dc:	781b      	ldrb	r3, [r3, #0]
}
 80217de:	0018      	movs	r0, r3
 80217e0:	46bd      	mov	sp, r7
 80217e2:	b004      	add	sp, #16
 80217e4:	bd80      	pop	{r7, pc}

080217e6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80217e6:	b580      	push	{r7, lr}
 80217e8:	b084      	sub	sp, #16
 80217ea:	af00      	add	r7, sp, #0
 80217ec:	6078      	str	r0, [r7, #4]
 80217ee:	000a      	movs	r2, r1
 80217f0:	1cfb      	adds	r3, r7, #3
 80217f2:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80217f4:	230f      	movs	r3, #15
 80217f6:	18fb      	adds	r3, r7, r3
 80217f8:	2200      	movs	r2, #0
 80217fa:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80217fc:	687b      	ldr	r3, [r7, #4]
 80217fe:	2181      	movs	r1, #129	@ 0x81
 8021800:	0018      	movs	r0, r3
 8021802:	f002 f8a9 	bl	8023958 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8021806:	687b      	ldr	r3, [r7, #4]
 8021808:	2200      	movs	r2, #0
 802180a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 802180c:	687b      	ldr	r3, [r7, #4]
 802180e:	2101      	movs	r1, #1
 8021810:	0018      	movs	r0, r3
 8021812:	f002 f8a1 	bl	8023958 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8021816:	687a      	ldr	r2, [r7, #4]
 8021818:	23b6      	movs	r3, #182	@ 0xb6
 802181a:	005b      	lsls	r3, r3, #1
 802181c:	2100      	movs	r1, #0
 802181e:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8021820:	687b      	ldr	r3, [r7, #4]
 8021822:	2182      	movs	r1, #130	@ 0x82
 8021824:	0018      	movs	r0, r3
 8021826:	f002 f897 	bl	8023958 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 802182a:	687b      	ldr	r3, [r7, #4]
 802182c:	2200      	movs	r2, #0
 802182e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8021830:	687a      	ldr	r2, [r7, #4]
 8021832:	23ae      	movs	r3, #174	@ 0xae
 8021834:	009b      	lsls	r3, r3, #2
 8021836:	58d3      	ldr	r3, [r2, r3]
 8021838:	2b00      	cmp	r3, #0
 802183a:	d011      	beq.n	8021860 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 802183c:	687a      	ldr	r2, [r7, #4]
 802183e:	23af      	movs	r3, #175	@ 0xaf
 8021840:	009b      	lsls	r3, r3, #2
 8021842:	58d3      	ldr	r3, [r2, r3]
 8021844:	685b      	ldr	r3, [r3, #4]
 8021846:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8021848:	687a      	ldr	r2, [r7, #4]
 802184a:	23ae      	movs	r3, #174	@ 0xae
 802184c:	009b      	lsls	r3, r3, #2
 802184e:	58d3      	ldr	r3, [r2, r3]
 8021850:	0018      	movs	r0, r3
 8021852:	f002 f9ef 	bl	8023c34 <USBD_static_free>
    pdev->pClassData = NULL;
 8021856:	687a      	ldr	r2, [r7, #4]
 8021858:	23ae      	movs	r3, #174	@ 0xae
 802185a:	009b      	lsls	r3, r3, #2
 802185c:	2100      	movs	r1, #0
 802185e:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8021860:	230f      	movs	r3, #15
 8021862:	18fb      	adds	r3, r7, r3
 8021864:	781b      	ldrb	r3, [r3, #0]
}
 8021866:	0018      	movs	r0, r3
 8021868:	46bd      	mov	sp, r7
 802186a:	b004      	add	sp, #16
 802186c:	bd80      	pop	{r7, pc}
	...

08021870 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8021870:	b580      	push	{r7, lr}
 8021872:	b086      	sub	sp, #24
 8021874:	af00      	add	r7, sp, #0
 8021876:	6078      	str	r0, [r7, #4]
 8021878:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802187a:	687a      	ldr	r2, [r7, #4]
 802187c:	23ae      	movs	r3, #174	@ 0xae
 802187e:	009b      	lsls	r3, r3, #2
 8021880:	58d3      	ldr	r3, [r2, r3]
 8021882:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8021884:	230f      	movs	r3, #15
 8021886:	18fb      	adds	r3, r7, r3
 8021888:	2200      	movs	r2, #0
 802188a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 802188c:	230c      	movs	r3, #12
 802188e:	18fb      	adds	r3, r7, r3
 8021890:	2200      	movs	r2, #0
 8021892:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8021894:	2317      	movs	r3, #23
 8021896:	18fb      	adds	r3, r7, r3
 8021898:	2200      	movs	r2, #0
 802189a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802189c:	683b      	ldr	r3, [r7, #0]
 802189e:	781b      	ldrb	r3, [r3, #0]
 80218a0:	001a      	movs	r2, r3
 80218a2:	2360      	movs	r3, #96	@ 0x60
 80218a4:	4013      	ands	r3, r2
 80218a6:	d03d      	beq.n	8021924 <USBD_CDC_Setup+0xb4>
 80218a8:	2b20      	cmp	r3, #32
 80218aa:	d000      	beq.n	80218ae <USBD_CDC_Setup+0x3e>
 80218ac:	e094      	b.n	80219d8 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80218ae:	683b      	ldr	r3, [r7, #0]
 80218b0:	88db      	ldrh	r3, [r3, #6]
 80218b2:	2b00      	cmp	r3, #0
 80218b4:	d02b      	beq.n	802190e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80218b6:	683b      	ldr	r3, [r7, #0]
 80218b8:	781b      	ldrb	r3, [r3, #0]
 80218ba:	b25b      	sxtb	r3, r3
 80218bc:	2b00      	cmp	r3, #0
 80218be:	da12      	bge.n	80218e6 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80218c0:	687a      	ldr	r2, [r7, #4]
 80218c2:	23af      	movs	r3, #175	@ 0xaf
 80218c4:	009b      	lsls	r3, r3, #2
 80218c6:	58d3      	ldr	r3, [r2, r3]
 80218c8:	689b      	ldr	r3, [r3, #8]
 80218ca:	683a      	ldr	r2, [r7, #0]
 80218cc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80218ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80218d0:	683a      	ldr	r2, [r7, #0]
 80218d2:	88d2      	ldrh	r2, [r2, #6]
 80218d4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80218d6:	6939      	ldr	r1, [r7, #16]
 80218d8:	683b      	ldr	r3, [r7, #0]
 80218da:	88da      	ldrh	r2, [r3, #6]
 80218dc:	687b      	ldr	r3, [r7, #4]
 80218de:	0018      	movs	r0, r3
 80218e0:	f001 fbaf 	bl	8023042 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80218e4:	e083      	b.n	80219ee <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80218e6:	683b      	ldr	r3, [r7, #0]
 80218e8:	7859      	ldrb	r1, [r3, #1]
 80218ea:	693a      	ldr	r2, [r7, #16]
 80218ec:	2380      	movs	r3, #128	@ 0x80
 80218ee:	009b      	lsls	r3, r3, #2
 80218f0:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80218f2:	683b      	ldr	r3, [r7, #0]
 80218f4:	88db      	ldrh	r3, [r3, #6]
 80218f6:	b2d9      	uxtb	r1, r3
 80218f8:	693b      	ldr	r3, [r7, #16]
 80218fa:	4a40      	ldr	r2, [pc, #256]	@ (80219fc <USBD_CDC_Setup+0x18c>)
 80218fc:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80218fe:	6939      	ldr	r1, [r7, #16]
 8021900:	683b      	ldr	r3, [r7, #0]
 8021902:	88da      	ldrh	r2, [r3, #6]
 8021904:	687b      	ldr	r3, [r7, #4]
 8021906:	0018      	movs	r0, r3
 8021908:	f001 fbce 	bl	80230a8 <USBD_CtlPrepareRx>
      break;
 802190c:	e06f      	b.n	80219ee <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 802190e:	687a      	ldr	r2, [r7, #4]
 8021910:	23af      	movs	r3, #175	@ 0xaf
 8021912:	009b      	lsls	r3, r3, #2
 8021914:	58d3      	ldr	r3, [r2, r3]
 8021916:	689b      	ldr	r3, [r3, #8]
 8021918:	683a      	ldr	r2, [r7, #0]
 802191a:	7850      	ldrb	r0, [r2, #1]
 802191c:	6839      	ldr	r1, [r7, #0]
 802191e:	2200      	movs	r2, #0
 8021920:	4798      	blx	r3
      break;
 8021922:	e064      	b.n	80219ee <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021924:	683b      	ldr	r3, [r7, #0]
 8021926:	785b      	ldrb	r3, [r3, #1]
 8021928:	2b0b      	cmp	r3, #11
 802192a:	d037      	beq.n	802199c <USBD_CDC_Setup+0x12c>
 802192c:	dc47      	bgt.n	80219be <USBD_CDC_Setup+0x14e>
 802192e:	2b00      	cmp	r3, #0
 8021930:	d002      	beq.n	8021938 <USBD_CDC_Setup+0xc8>
 8021932:	2b0a      	cmp	r3, #10
 8021934:	d019      	beq.n	802196a <USBD_CDC_Setup+0xfa>
 8021936:	e042      	b.n	80219be <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021938:	687a      	ldr	r2, [r7, #4]
 802193a:	23a7      	movs	r3, #167	@ 0xa7
 802193c:	009b      	lsls	r3, r3, #2
 802193e:	5cd3      	ldrb	r3, [r2, r3]
 8021940:	2b03      	cmp	r3, #3
 8021942:	d107      	bne.n	8021954 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8021944:	230c      	movs	r3, #12
 8021946:	18f9      	adds	r1, r7, r3
 8021948:	687b      	ldr	r3, [r7, #4]
 802194a:	2202      	movs	r2, #2
 802194c:	0018      	movs	r0, r3
 802194e:	f001 fb78 	bl	8023042 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8021952:	e040      	b.n	80219d6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8021954:	683a      	ldr	r2, [r7, #0]
 8021956:	687b      	ldr	r3, [r7, #4]
 8021958:	0011      	movs	r1, r2
 802195a:	0018      	movs	r0, r3
 802195c:	f001 faf3 	bl	8022f46 <USBD_CtlError>
            ret = USBD_FAIL;
 8021960:	2317      	movs	r3, #23
 8021962:	18fb      	adds	r3, r7, r3
 8021964:	2202      	movs	r2, #2
 8021966:	701a      	strb	r2, [r3, #0]
          break;
 8021968:	e035      	b.n	80219d6 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802196a:	687a      	ldr	r2, [r7, #4]
 802196c:	23a7      	movs	r3, #167	@ 0xa7
 802196e:	009b      	lsls	r3, r3, #2
 8021970:	5cd3      	ldrb	r3, [r2, r3]
 8021972:	2b03      	cmp	r3, #3
 8021974:	d107      	bne.n	8021986 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8021976:	230f      	movs	r3, #15
 8021978:	18f9      	adds	r1, r7, r3
 802197a:	687b      	ldr	r3, [r7, #4]
 802197c:	2201      	movs	r2, #1
 802197e:	0018      	movs	r0, r3
 8021980:	f001 fb5f 	bl	8023042 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8021984:	e027      	b.n	80219d6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8021986:	683a      	ldr	r2, [r7, #0]
 8021988:	687b      	ldr	r3, [r7, #4]
 802198a:	0011      	movs	r1, r2
 802198c:	0018      	movs	r0, r3
 802198e:	f001 fada 	bl	8022f46 <USBD_CtlError>
            ret = USBD_FAIL;
 8021992:	2317      	movs	r3, #23
 8021994:	18fb      	adds	r3, r7, r3
 8021996:	2202      	movs	r2, #2
 8021998:	701a      	strb	r2, [r3, #0]
          break;
 802199a:	e01c      	b.n	80219d6 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 802199c:	687a      	ldr	r2, [r7, #4]
 802199e:	23a7      	movs	r3, #167	@ 0xa7
 80219a0:	009b      	lsls	r3, r3, #2
 80219a2:	5cd3      	ldrb	r3, [r2, r3]
 80219a4:	2b03      	cmp	r3, #3
 80219a6:	d015      	beq.n	80219d4 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 80219a8:	683a      	ldr	r2, [r7, #0]
 80219aa:	687b      	ldr	r3, [r7, #4]
 80219ac:	0011      	movs	r1, r2
 80219ae:	0018      	movs	r0, r3
 80219b0:	f001 fac9 	bl	8022f46 <USBD_CtlError>
            ret = USBD_FAIL;
 80219b4:	2317      	movs	r3, #23
 80219b6:	18fb      	adds	r3, r7, r3
 80219b8:	2202      	movs	r2, #2
 80219ba:	701a      	strb	r2, [r3, #0]
          }
          break;
 80219bc:	e00a      	b.n	80219d4 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 80219be:	683a      	ldr	r2, [r7, #0]
 80219c0:	687b      	ldr	r3, [r7, #4]
 80219c2:	0011      	movs	r1, r2
 80219c4:	0018      	movs	r0, r3
 80219c6:	f001 fabe 	bl	8022f46 <USBD_CtlError>
          ret = USBD_FAIL;
 80219ca:	2317      	movs	r3, #23
 80219cc:	18fb      	adds	r3, r7, r3
 80219ce:	2202      	movs	r2, #2
 80219d0:	701a      	strb	r2, [r3, #0]
          break;
 80219d2:	e000      	b.n	80219d6 <USBD_CDC_Setup+0x166>
          break;
 80219d4:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80219d6:	e00a      	b.n	80219ee <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80219d8:	683a      	ldr	r2, [r7, #0]
 80219da:	687b      	ldr	r3, [r7, #4]
 80219dc:	0011      	movs	r1, r2
 80219de:	0018      	movs	r0, r3
 80219e0:	f001 fab1 	bl	8022f46 <USBD_CtlError>
      ret = USBD_FAIL;
 80219e4:	2317      	movs	r3, #23
 80219e6:	18fb      	adds	r3, r7, r3
 80219e8:	2202      	movs	r2, #2
 80219ea:	701a      	strb	r2, [r3, #0]
      break;
 80219ec:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80219ee:	2317      	movs	r3, #23
 80219f0:	18fb      	adds	r3, r7, r3
 80219f2:	781b      	ldrb	r3, [r3, #0]
}
 80219f4:	0018      	movs	r0, r3
 80219f6:	46bd      	mov	sp, r7
 80219f8:	b006      	add	sp, #24
 80219fa:	bd80      	pop	{r7, pc}
 80219fc:	00000201 	.word	0x00000201

08021a00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8021a00:	b580      	push	{r7, lr}
 8021a02:	b084      	sub	sp, #16
 8021a04:	af00      	add	r7, sp, #0
 8021a06:	6078      	str	r0, [r7, #4]
 8021a08:	000a      	movs	r2, r1
 8021a0a:	1cfb      	adds	r3, r7, #3
 8021a0c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8021a0e:	687a      	ldr	r2, [r7, #4]
 8021a10:	23ae      	movs	r3, #174	@ 0xae
 8021a12:	009b      	lsls	r3, r3, #2
 8021a14:	58d3      	ldr	r3, [r2, r3]
 8021a16:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8021a18:	687a      	ldr	r2, [r7, #4]
 8021a1a:	23b0      	movs	r3, #176	@ 0xb0
 8021a1c:	009b      	lsls	r3, r3, #2
 8021a1e:	58d3      	ldr	r3, [r2, r3]
 8021a20:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8021a22:	687a      	ldr	r2, [r7, #4]
 8021a24:	23ae      	movs	r3, #174	@ 0xae
 8021a26:	009b      	lsls	r3, r3, #2
 8021a28:	58d3      	ldr	r3, [r2, r3]
 8021a2a:	2b00      	cmp	r3, #0
 8021a2c:	d03e      	beq.n	8021aac <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8021a2e:	1cfb      	adds	r3, r7, #3
 8021a30:	781a      	ldrb	r2, [r3, #0]
 8021a32:	6879      	ldr	r1, [r7, #4]
 8021a34:	0013      	movs	r3, r2
 8021a36:	009b      	lsls	r3, r3, #2
 8021a38:	189b      	adds	r3, r3, r2
 8021a3a:	009b      	lsls	r3, r3, #2
 8021a3c:	18cb      	adds	r3, r1, r3
 8021a3e:	331c      	adds	r3, #28
 8021a40:	681b      	ldr	r3, [r3, #0]
 8021a42:	2b00      	cmp	r3, #0
 8021a44:	d02b      	beq.n	8021a9e <USBD_CDC_DataIn+0x9e>
 8021a46:	1cfb      	adds	r3, r7, #3
 8021a48:	781a      	ldrb	r2, [r3, #0]
 8021a4a:	6879      	ldr	r1, [r7, #4]
 8021a4c:	0013      	movs	r3, r2
 8021a4e:	009b      	lsls	r3, r3, #2
 8021a50:	189b      	adds	r3, r3, r2
 8021a52:	009b      	lsls	r3, r3, #2
 8021a54:	18cb      	adds	r3, r1, r3
 8021a56:	331c      	adds	r3, #28
 8021a58:	6818      	ldr	r0, [r3, #0]
 8021a5a:	1cfb      	adds	r3, r7, #3
 8021a5c:	781a      	ldrb	r2, [r3, #0]
 8021a5e:	68b9      	ldr	r1, [r7, #8]
 8021a60:	0013      	movs	r3, r2
 8021a62:	009b      	lsls	r3, r3, #2
 8021a64:	189b      	adds	r3, r3, r2
 8021a66:	00db      	lsls	r3, r3, #3
 8021a68:	18cb      	adds	r3, r1, r3
 8021a6a:	3338      	adds	r3, #56	@ 0x38
 8021a6c:	681b      	ldr	r3, [r3, #0]
 8021a6e:	0019      	movs	r1, r3
 8021a70:	f7de fc1e 	bl	80002b0 <__aeabi_uidivmod>
 8021a74:	1e0b      	subs	r3, r1, #0
 8021a76:	d112      	bne.n	8021a9e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8021a78:	1cfb      	adds	r3, r7, #3
 8021a7a:	781a      	ldrb	r2, [r3, #0]
 8021a7c:	6879      	ldr	r1, [r7, #4]
 8021a7e:	0013      	movs	r3, r2
 8021a80:	009b      	lsls	r3, r3, #2
 8021a82:	189b      	adds	r3, r3, r2
 8021a84:	009b      	lsls	r3, r3, #2
 8021a86:	18cb      	adds	r3, r1, r3
 8021a88:	331c      	adds	r3, #28
 8021a8a:	2200      	movs	r2, #0
 8021a8c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8021a8e:	1cfb      	adds	r3, r7, #3
 8021a90:	7819      	ldrb	r1, [r3, #0]
 8021a92:	6878      	ldr	r0, [r7, #4]
 8021a94:	2300      	movs	r3, #0
 8021a96:	2200      	movs	r2, #0
 8021a98:	f002 f83b 	bl	8023b12 <USBD_LL_Transmit>
 8021a9c:	e004      	b.n	8021aa8 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8021a9e:	68fa      	ldr	r2, [r7, #12]
 8021aa0:	2385      	movs	r3, #133	@ 0x85
 8021aa2:	009b      	lsls	r3, r3, #2
 8021aa4:	2100      	movs	r1, #0
 8021aa6:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8021aa8:	2300      	movs	r3, #0
 8021aaa:	e000      	b.n	8021aae <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8021aac:	2302      	movs	r3, #2
  }
}
 8021aae:	0018      	movs	r0, r3
 8021ab0:	46bd      	mov	sp, r7
 8021ab2:	b004      	add	sp, #16
 8021ab4:	bd80      	pop	{r7, pc}

08021ab6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8021ab6:	b580      	push	{r7, lr}
 8021ab8:	b084      	sub	sp, #16
 8021aba:	af00      	add	r7, sp, #0
 8021abc:	6078      	str	r0, [r7, #4]
 8021abe:	000a      	movs	r2, r1
 8021ac0:	1cfb      	adds	r3, r7, #3
 8021ac2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021ac4:	687a      	ldr	r2, [r7, #4]
 8021ac6:	23ae      	movs	r3, #174	@ 0xae
 8021ac8:	009b      	lsls	r3, r3, #2
 8021aca:	58d3      	ldr	r3, [r2, r3]
 8021acc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8021ace:	1cfb      	adds	r3, r7, #3
 8021ad0:	781a      	ldrb	r2, [r3, #0]
 8021ad2:	687b      	ldr	r3, [r7, #4]
 8021ad4:	0011      	movs	r1, r2
 8021ad6:	0018      	movs	r0, r3
 8021ad8:	f002 f889 	bl	8023bee <USBD_LL_GetRxDataSize>
 8021adc:	0001      	movs	r1, r0
 8021ade:	68fa      	ldr	r2, [r7, #12]
 8021ae0:	2383      	movs	r3, #131	@ 0x83
 8021ae2:	009b      	lsls	r3, r3, #2
 8021ae4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8021ae6:	687a      	ldr	r2, [r7, #4]
 8021ae8:	23ae      	movs	r3, #174	@ 0xae
 8021aea:	009b      	lsls	r3, r3, #2
 8021aec:	58d3      	ldr	r3, [r2, r3]
 8021aee:	2b00      	cmp	r3, #0
 8021af0:	d011      	beq.n	8021b16 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8021af2:	687a      	ldr	r2, [r7, #4]
 8021af4:	23af      	movs	r3, #175	@ 0xaf
 8021af6:	009b      	lsls	r3, r3, #2
 8021af8:	58d3      	ldr	r3, [r2, r3]
 8021afa:	68da      	ldr	r2, [r3, #12]
 8021afc:	68f9      	ldr	r1, [r7, #12]
 8021afe:	2381      	movs	r3, #129	@ 0x81
 8021b00:	009b      	lsls	r3, r3, #2
 8021b02:	58c8      	ldr	r0, [r1, r3]
 8021b04:	68fb      	ldr	r3, [r7, #12]
 8021b06:	2183      	movs	r1, #131	@ 0x83
 8021b08:	0089      	lsls	r1, r1, #2
 8021b0a:	468c      	mov	ip, r1
 8021b0c:	4463      	add	r3, ip
 8021b0e:	0019      	movs	r1, r3
 8021b10:	4790      	blx	r2

    return USBD_OK;
 8021b12:	2300      	movs	r3, #0
 8021b14:	e000      	b.n	8021b18 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8021b16:	2302      	movs	r3, #2
  }
}
 8021b18:	0018      	movs	r0, r3
 8021b1a:	46bd      	mov	sp, r7
 8021b1c:	b004      	add	sp, #16
 8021b1e:	bd80      	pop	{r7, pc}

08021b20 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8021b20:	b590      	push	{r4, r7, lr}
 8021b22:	b085      	sub	sp, #20
 8021b24:	af00      	add	r7, sp, #0
 8021b26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021b28:	687a      	ldr	r2, [r7, #4]
 8021b2a:	23ae      	movs	r3, #174	@ 0xae
 8021b2c:	009b      	lsls	r3, r3, #2
 8021b2e:	58d3      	ldr	r3, [r2, r3]
 8021b30:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8021b32:	687a      	ldr	r2, [r7, #4]
 8021b34:	23af      	movs	r3, #175	@ 0xaf
 8021b36:	009b      	lsls	r3, r3, #2
 8021b38:	58d3      	ldr	r3, [r2, r3]
 8021b3a:	2b00      	cmp	r3, #0
 8021b3c:	d018      	beq.n	8021b70 <USBD_CDC_EP0_RxReady+0x50>
 8021b3e:	68fa      	ldr	r2, [r7, #12]
 8021b40:	2380      	movs	r3, #128	@ 0x80
 8021b42:	009b      	lsls	r3, r3, #2
 8021b44:	5cd3      	ldrb	r3, [r2, r3]
 8021b46:	2bff      	cmp	r3, #255	@ 0xff
 8021b48:	d012      	beq.n	8021b70 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8021b4a:	687a      	ldr	r2, [r7, #4]
 8021b4c:	23af      	movs	r3, #175	@ 0xaf
 8021b4e:	009b      	lsls	r3, r3, #2
 8021b50:	58d3      	ldr	r3, [r2, r3]
 8021b52:	689b      	ldr	r3, [r3, #8]
 8021b54:	68f9      	ldr	r1, [r7, #12]
 8021b56:	2280      	movs	r2, #128	@ 0x80
 8021b58:	0092      	lsls	r2, r2, #2
 8021b5a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8021b5c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8021b5e:	68fa      	ldr	r2, [r7, #12]
 8021b60:	4c06      	ldr	r4, [pc, #24]	@ (8021b7c <USBD_CDC_EP0_RxReady+0x5c>)
 8021b62:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8021b64:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8021b66:	68fa      	ldr	r2, [r7, #12]
 8021b68:	2380      	movs	r3, #128	@ 0x80
 8021b6a:	009b      	lsls	r3, r3, #2
 8021b6c:	21ff      	movs	r1, #255	@ 0xff
 8021b6e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8021b70:	2300      	movs	r3, #0
}
 8021b72:	0018      	movs	r0, r3
 8021b74:	46bd      	mov	sp, r7
 8021b76:	b005      	add	sp, #20
 8021b78:	bd90      	pop	{r4, r7, pc}
 8021b7a:	46c0      	nop			@ (mov r8, r8)
 8021b7c:	00000201 	.word	0x00000201

08021b80 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8021b80:	b580      	push	{r7, lr}
 8021b82:	b082      	sub	sp, #8
 8021b84:	af00      	add	r7, sp, #0
 8021b86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8021b88:	687b      	ldr	r3, [r7, #4]
 8021b8a:	2243      	movs	r2, #67	@ 0x43
 8021b8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8021b8e:	4b02      	ldr	r3, [pc, #8]	@ (8021b98 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8021b90:	0018      	movs	r0, r3
 8021b92:	46bd      	mov	sp, r7
 8021b94:	b002      	add	sp, #8
 8021b96:	bd80      	pop	{r7, pc}
 8021b98:	2000018c 	.word	0x2000018c

08021b9c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8021b9c:	b580      	push	{r7, lr}
 8021b9e:	b082      	sub	sp, #8
 8021ba0:	af00      	add	r7, sp, #0
 8021ba2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8021ba4:	687b      	ldr	r3, [r7, #4]
 8021ba6:	2243      	movs	r2, #67	@ 0x43
 8021ba8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8021baa:	4b02      	ldr	r3, [pc, #8]	@ (8021bb4 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8021bac:	0018      	movs	r0, r3
 8021bae:	46bd      	mov	sp, r7
 8021bb0:	b002      	add	sp, #8
 8021bb2:	bd80      	pop	{r7, pc}
 8021bb4:	20000148 	.word	0x20000148

08021bb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8021bb8:	b580      	push	{r7, lr}
 8021bba:	b082      	sub	sp, #8
 8021bbc:	af00      	add	r7, sp, #0
 8021bbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8021bc0:	687b      	ldr	r3, [r7, #4]
 8021bc2:	2243      	movs	r2, #67	@ 0x43
 8021bc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8021bc6:	4b02      	ldr	r3, [pc, #8]	@ (8021bd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8021bc8:	0018      	movs	r0, r3
 8021bca:	46bd      	mov	sp, r7
 8021bcc:	b002      	add	sp, #8
 8021bce:	bd80      	pop	{r7, pc}
 8021bd0:	200001d0 	.word	0x200001d0

08021bd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8021bd4:	b580      	push	{r7, lr}
 8021bd6:	b082      	sub	sp, #8
 8021bd8:	af00      	add	r7, sp, #0
 8021bda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8021bdc:	687b      	ldr	r3, [r7, #4]
 8021bde:	220a      	movs	r2, #10
 8021be0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8021be2:	4b02      	ldr	r3, [pc, #8]	@ (8021bec <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8021be4:	0018      	movs	r0, r3
 8021be6:	46bd      	mov	sp, r7
 8021be8:	b002      	add	sp, #8
 8021bea:	bd80      	pop	{r7, pc}
 8021bec:	20000104 	.word	0x20000104

08021bf0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8021bf0:	b580      	push	{r7, lr}
 8021bf2:	b084      	sub	sp, #16
 8021bf4:	af00      	add	r7, sp, #0
 8021bf6:	6078      	str	r0, [r7, #4]
 8021bf8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8021bfa:	200f      	movs	r0, #15
 8021bfc:	183b      	adds	r3, r7, r0
 8021bfe:	2202      	movs	r2, #2
 8021c00:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8021c02:	683b      	ldr	r3, [r7, #0]
 8021c04:	2b00      	cmp	r3, #0
 8021c06:	d007      	beq.n	8021c18 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8021c08:	687a      	ldr	r2, [r7, #4]
 8021c0a:	23af      	movs	r3, #175	@ 0xaf
 8021c0c:	009b      	lsls	r3, r3, #2
 8021c0e:	6839      	ldr	r1, [r7, #0]
 8021c10:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8021c12:	183b      	adds	r3, r7, r0
 8021c14:	2200      	movs	r2, #0
 8021c16:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8021c18:	230f      	movs	r3, #15
 8021c1a:	18fb      	adds	r3, r7, r3
 8021c1c:	781b      	ldrb	r3, [r3, #0]
}
 8021c1e:	0018      	movs	r0, r3
 8021c20:	46bd      	mov	sp, r7
 8021c22:	b004      	add	sp, #16
 8021c24:	bd80      	pop	{r7, pc}

08021c26 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8021c26:	b580      	push	{r7, lr}
 8021c28:	b086      	sub	sp, #24
 8021c2a:	af00      	add	r7, sp, #0
 8021c2c:	60f8      	str	r0, [r7, #12]
 8021c2e:	60b9      	str	r1, [r7, #8]
 8021c30:	1dbb      	adds	r3, r7, #6
 8021c32:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021c34:	68fa      	ldr	r2, [r7, #12]
 8021c36:	23ae      	movs	r3, #174	@ 0xae
 8021c38:	009b      	lsls	r3, r3, #2
 8021c3a:	58d3      	ldr	r3, [r2, r3]
 8021c3c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8021c3e:	697a      	ldr	r2, [r7, #20]
 8021c40:	2382      	movs	r3, #130	@ 0x82
 8021c42:	009b      	lsls	r3, r3, #2
 8021c44:	68b9      	ldr	r1, [r7, #8]
 8021c46:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8021c48:	1dbb      	adds	r3, r7, #6
 8021c4a:	8819      	ldrh	r1, [r3, #0]
 8021c4c:	697a      	ldr	r2, [r7, #20]
 8021c4e:	2384      	movs	r3, #132	@ 0x84
 8021c50:	009b      	lsls	r3, r3, #2
 8021c52:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8021c54:	2300      	movs	r3, #0
}
 8021c56:	0018      	movs	r0, r3
 8021c58:	46bd      	mov	sp, r7
 8021c5a:	b006      	add	sp, #24
 8021c5c:	bd80      	pop	{r7, pc}

08021c5e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8021c5e:	b580      	push	{r7, lr}
 8021c60:	b084      	sub	sp, #16
 8021c62:	af00      	add	r7, sp, #0
 8021c64:	6078      	str	r0, [r7, #4]
 8021c66:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021c68:	687a      	ldr	r2, [r7, #4]
 8021c6a:	23ae      	movs	r3, #174	@ 0xae
 8021c6c:	009b      	lsls	r3, r3, #2
 8021c6e:	58d3      	ldr	r3, [r2, r3]
 8021c70:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8021c72:	68fa      	ldr	r2, [r7, #12]
 8021c74:	2381      	movs	r3, #129	@ 0x81
 8021c76:	009b      	lsls	r3, r3, #2
 8021c78:	6839      	ldr	r1, [r7, #0]
 8021c7a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8021c7c:	2300      	movs	r3, #0
}
 8021c7e:	0018      	movs	r0, r3
 8021c80:	46bd      	mov	sp, r7
 8021c82:	b004      	add	sp, #16
 8021c84:	bd80      	pop	{r7, pc}

08021c86 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8021c86:	b580      	push	{r7, lr}
 8021c88:	b084      	sub	sp, #16
 8021c8a:	af00      	add	r7, sp, #0
 8021c8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021c8e:	687a      	ldr	r2, [r7, #4]
 8021c90:	23ae      	movs	r3, #174	@ 0xae
 8021c92:	009b      	lsls	r3, r3, #2
 8021c94:	58d3      	ldr	r3, [r2, r3]
 8021c96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8021c98:	687a      	ldr	r2, [r7, #4]
 8021c9a:	23ae      	movs	r3, #174	@ 0xae
 8021c9c:	009b      	lsls	r3, r3, #2
 8021c9e:	58d3      	ldr	r3, [r2, r3]
 8021ca0:	2b00      	cmp	r3, #0
 8021ca2:	d022      	beq.n	8021cea <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8021ca4:	68fa      	ldr	r2, [r7, #12]
 8021ca6:	2385      	movs	r3, #133	@ 0x85
 8021ca8:	009b      	lsls	r3, r3, #2
 8021caa:	58d3      	ldr	r3, [r2, r3]
 8021cac:	2b00      	cmp	r3, #0
 8021cae:	d11a      	bne.n	8021ce6 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8021cb0:	68fa      	ldr	r2, [r7, #12]
 8021cb2:	2385      	movs	r3, #133	@ 0x85
 8021cb4:	009b      	lsls	r3, r3, #2
 8021cb6:	2101      	movs	r1, #1
 8021cb8:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8021cba:	68fa      	ldr	r2, [r7, #12]
 8021cbc:	2384      	movs	r3, #132	@ 0x84
 8021cbe:	009b      	lsls	r3, r3, #2
 8021cc0:	58d2      	ldr	r2, [r2, r3]
 8021cc2:	687b      	ldr	r3, [r7, #4]
 8021cc4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8021cc6:	68fa      	ldr	r2, [r7, #12]
 8021cc8:	2382      	movs	r3, #130	@ 0x82
 8021cca:	009b      	lsls	r3, r3, #2
 8021ccc:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8021cce:	68fa      	ldr	r2, [r7, #12]
 8021cd0:	2384      	movs	r3, #132	@ 0x84
 8021cd2:	009b      	lsls	r3, r3, #2
 8021cd4:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8021cd6:	b29b      	uxth	r3, r3
 8021cd8:	6878      	ldr	r0, [r7, #4]
 8021cda:	000a      	movs	r2, r1
 8021cdc:	2181      	movs	r1, #129	@ 0x81
 8021cde:	f001 ff18 	bl	8023b12 <USBD_LL_Transmit>

      return USBD_OK;
 8021ce2:	2300      	movs	r3, #0
 8021ce4:	e002      	b.n	8021cec <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8021ce6:	2301      	movs	r3, #1
 8021ce8:	e000      	b.n	8021cec <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8021cea:	2302      	movs	r3, #2
  }
}
 8021cec:	0018      	movs	r0, r3
 8021cee:	46bd      	mov	sp, r7
 8021cf0:	b004      	add	sp, #16
 8021cf2:	bd80      	pop	{r7, pc}

08021cf4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8021cf4:	b580      	push	{r7, lr}
 8021cf6:	b084      	sub	sp, #16
 8021cf8:	af00      	add	r7, sp, #0
 8021cfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021cfc:	687a      	ldr	r2, [r7, #4]
 8021cfe:	23ae      	movs	r3, #174	@ 0xae
 8021d00:	009b      	lsls	r3, r3, #2
 8021d02:	58d3      	ldr	r3, [r2, r3]
 8021d04:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8021d06:	687a      	ldr	r2, [r7, #4]
 8021d08:	23ae      	movs	r3, #174	@ 0xae
 8021d0a:	009b      	lsls	r3, r3, #2
 8021d0c:	58d3      	ldr	r3, [r2, r3]
 8021d0e:	2b00      	cmp	r3, #0
 8021d10:	d019      	beq.n	8021d46 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021d12:	687b      	ldr	r3, [r7, #4]
 8021d14:	7c1b      	ldrb	r3, [r3, #16]
 8021d16:	2b00      	cmp	r3, #0
 8021d18:	d10a      	bne.n	8021d30 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021d1a:	68fa      	ldr	r2, [r7, #12]
 8021d1c:	2381      	movs	r3, #129	@ 0x81
 8021d1e:	009b      	lsls	r3, r3, #2
 8021d20:	58d2      	ldr	r2, [r2, r3]
 8021d22:	2380      	movs	r3, #128	@ 0x80
 8021d24:	009b      	lsls	r3, r3, #2
 8021d26:	6878      	ldr	r0, [r7, #4]
 8021d28:	2101      	movs	r1, #1
 8021d2a:	f001 ff29 	bl	8023b80 <USBD_LL_PrepareReceive>
 8021d2e:	e008      	b.n	8021d42 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021d30:	68fa      	ldr	r2, [r7, #12]
 8021d32:	2381      	movs	r3, #129	@ 0x81
 8021d34:	009b      	lsls	r3, r3, #2
 8021d36:	58d2      	ldr	r2, [r2, r3]
 8021d38:	6878      	ldr	r0, [r7, #4]
 8021d3a:	2340      	movs	r3, #64	@ 0x40
 8021d3c:	2101      	movs	r1, #1
 8021d3e:	f001 ff1f 	bl	8023b80 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8021d42:	2300      	movs	r3, #0
 8021d44:	e000      	b.n	8021d48 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8021d46:	2302      	movs	r3, #2
  }
}
 8021d48:	0018      	movs	r0, r3
 8021d4a:	46bd      	mov	sp, r7
 8021d4c:	b004      	add	sp, #16
 8021d4e:	bd80      	pop	{r7, pc}

08021d50 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8021d50:	b580      	push	{r7, lr}
 8021d52:	b084      	sub	sp, #16
 8021d54:	af00      	add	r7, sp, #0
 8021d56:	60f8      	str	r0, [r7, #12]
 8021d58:	60b9      	str	r1, [r7, #8]
 8021d5a:	1dfb      	adds	r3, r7, #7
 8021d5c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8021d5e:	68fb      	ldr	r3, [r7, #12]
 8021d60:	2b00      	cmp	r3, #0
 8021d62:	d101      	bne.n	8021d68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8021d64:	2302      	movs	r3, #2
 8021d66:	e020      	b.n	8021daa <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8021d68:	68fa      	ldr	r2, [r7, #12]
 8021d6a:	23ad      	movs	r3, #173	@ 0xad
 8021d6c:	009b      	lsls	r3, r3, #2
 8021d6e:	58d3      	ldr	r3, [r2, r3]
 8021d70:	2b00      	cmp	r3, #0
 8021d72:	d004      	beq.n	8021d7e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8021d74:	68fa      	ldr	r2, [r7, #12]
 8021d76:	23ad      	movs	r3, #173	@ 0xad
 8021d78:	009b      	lsls	r3, r3, #2
 8021d7a:	2100      	movs	r1, #0
 8021d7c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8021d7e:	68bb      	ldr	r3, [r7, #8]
 8021d80:	2b00      	cmp	r3, #0
 8021d82:	d004      	beq.n	8021d8e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8021d84:	68fa      	ldr	r2, [r7, #12]
 8021d86:	23ac      	movs	r3, #172	@ 0xac
 8021d88:	009b      	lsls	r3, r3, #2
 8021d8a:	68b9      	ldr	r1, [r7, #8]
 8021d8c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021d8e:	68fa      	ldr	r2, [r7, #12]
 8021d90:	23a7      	movs	r3, #167	@ 0xa7
 8021d92:	009b      	lsls	r3, r3, #2
 8021d94:	2101      	movs	r1, #1
 8021d96:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8021d98:	68fb      	ldr	r3, [r7, #12]
 8021d9a:	1dfa      	adds	r2, r7, #7
 8021d9c:	7812      	ldrb	r2, [r2, #0]
 8021d9e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8021da0:	68fb      	ldr	r3, [r7, #12]
 8021da2:	0018      	movs	r0, r3
 8021da4:	f001 fd18 	bl	80237d8 <USBD_LL_Init>

  return USBD_OK;
 8021da8:	2300      	movs	r3, #0
}
 8021daa:	0018      	movs	r0, r3
 8021dac:	46bd      	mov	sp, r7
 8021dae:	b004      	add	sp, #16
 8021db0:	bd80      	pop	{r7, pc}

08021db2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8021db2:	b580      	push	{r7, lr}
 8021db4:	b084      	sub	sp, #16
 8021db6:	af00      	add	r7, sp, #0
 8021db8:	6078      	str	r0, [r7, #4]
 8021dba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8021dbc:	200f      	movs	r0, #15
 8021dbe:	183b      	adds	r3, r7, r0
 8021dc0:	2200      	movs	r2, #0
 8021dc2:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8021dc4:	683b      	ldr	r3, [r7, #0]
 8021dc6:	2b00      	cmp	r3, #0
 8021dc8:	d008      	beq.n	8021ddc <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8021dca:	687a      	ldr	r2, [r7, #4]
 8021dcc:	23ad      	movs	r3, #173	@ 0xad
 8021dce:	009b      	lsls	r3, r3, #2
 8021dd0:	6839      	ldr	r1, [r7, #0]
 8021dd2:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8021dd4:	183b      	adds	r3, r7, r0
 8021dd6:	2200      	movs	r2, #0
 8021dd8:	701a      	strb	r2, [r3, #0]
 8021dda:	e003      	b.n	8021de4 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8021ddc:	230f      	movs	r3, #15
 8021dde:	18fb      	adds	r3, r7, r3
 8021de0:	2202      	movs	r2, #2
 8021de2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8021de4:	230f      	movs	r3, #15
 8021de6:	18fb      	adds	r3, r7, r3
 8021de8:	781b      	ldrb	r3, [r3, #0]
}
 8021dea:	0018      	movs	r0, r3
 8021dec:	46bd      	mov	sp, r7
 8021dee:	b004      	add	sp, #16
 8021df0:	bd80      	pop	{r7, pc}

08021df2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8021df2:	b580      	push	{r7, lr}
 8021df4:	b082      	sub	sp, #8
 8021df6:	af00      	add	r7, sp, #0
 8021df8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8021dfa:	687b      	ldr	r3, [r7, #4]
 8021dfc:	0018      	movs	r0, r3
 8021dfe:	f001 fd4f 	bl	80238a0 <USBD_LL_Start>

  return USBD_OK;
 8021e02:	2300      	movs	r3, #0
}
 8021e04:	0018      	movs	r0, r3
 8021e06:	46bd      	mov	sp, r7
 8021e08:	b002      	add	sp, #8
 8021e0a:	bd80      	pop	{r7, pc}

08021e0c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8021e0c:	b580      	push	{r7, lr}
 8021e0e:	b082      	sub	sp, #8
 8021e10:	af00      	add	r7, sp, #0
 8021e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8021e14:	2300      	movs	r3, #0
}
 8021e16:	0018      	movs	r0, r3
 8021e18:	46bd      	mov	sp, r7
 8021e1a:	b002      	add	sp, #8
 8021e1c:	bd80      	pop	{r7, pc}

08021e1e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021e1e:	b590      	push	{r4, r7, lr}
 8021e20:	b085      	sub	sp, #20
 8021e22:	af00      	add	r7, sp, #0
 8021e24:	6078      	str	r0, [r7, #4]
 8021e26:	000a      	movs	r2, r1
 8021e28:	1cfb      	adds	r3, r7, #3
 8021e2a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8021e2c:	240f      	movs	r4, #15
 8021e2e:	193b      	adds	r3, r7, r4
 8021e30:	2202      	movs	r2, #2
 8021e32:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8021e34:	687a      	ldr	r2, [r7, #4]
 8021e36:	23ad      	movs	r3, #173	@ 0xad
 8021e38:	009b      	lsls	r3, r3, #2
 8021e3a:	58d3      	ldr	r3, [r2, r3]
 8021e3c:	2b00      	cmp	r3, #0
 8021e3e:	d00e      	beq.n	8021e5e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8021e40:	687a      	ldr	r2, [r7, #4]
 8021e42:	23ad      	movs	r3, #173	@ 0xad
 8021e44:	009b      	lsls	r3, r3, #2
 8021e46:	58d3      	ldr	r3, [r2, r3]
 8021e48:	681b      	ldr	r3, [r3, #0]
 8021e4a:	1cfa      	adds	r2, r7, #3
 8021e4c:	7811      	ldrb	r1, [r2, #0]
 8021e4e:	687a      	ldr	r2, [r7, #4]
 8021e50:	0010      	movs	r0, r2
 8021e52:	4798      	blx	r3
 8021e54:	1e03      	subs	r3, r0, #0
 8021e56:	d102      	bne.n	8021e5e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8021e58:	193b      	adds	r3, r7, r4
 8021e5a:	2200      	movs	r2, #0
 8021e5c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8021e5e:	230f      	movs	r3, #15
 8021e60:	18fb      	adds	r3, r7, r3
 8021e62:	781b      	ldrb	r3, [r3, #0]
}
 8021e64:	0018      	movs	r0, r3
 8021e66:	46bd      	mov	sp, r7
 8021e68:	b005      	add	sp, #20
 8021e6a:	bd90      	pop	{r4, r7, pc}

08021e6c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021e6c:	b580      	push	{r7, lr}
 8021e6e:	b082      	sub	sp, #8
 8021e70:	af00      	add	r7, sp, #0
 8021e72:	6078      	str	r0, [r7, #4]
 8021e74:	000a      	movs	r2, r1
 8021e76:	1cfb      	adds	r3, r7, #3
 8021e78:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8021e7a:	687a      	ldr	r2, [r7, #4]
 8021e7c:	23ad      	movs	r3, #173	@ 0xad
 8021e7e:	009b      	lsls	r3, r3, #2
 8021e80:	58d3      	ldr	r3, [r2, r3]
 8021e82:	685b      	ldr	r3, [r3, #4]
 8021e84:	1cfa      	adds	r2, r7, #3
 8021e86:	7811      	ldrb	r1, [r2, #0]
 8021e88:	687a      	ldr	r2, [r7, #4]
 8021e8a:	0010      	movs	r0, r2
 8021e8c:	4798      	blx	r3

  return USBD_OK;
 8021e8e:	2300      	movs	r3, #0
}
 8021e90:	0018      	movs	r0, r3
 8021e92:	46bd      	mov	sp, r7
 8021e94:	b002      	add	sp, #8
 8021e96:	bd80      	pop	{r7, pc}

08021e98 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8021e98:	b580      	push	{r7, lr}
 8021e9a:	b082      	sub	sp, #8
 8021e9c:	af00      	add	r7, sp, #0
 8021e9e:	6078      	str	r0, [r7, #4]
 8021ea0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8021ea2:	687b      	ldr	r3, [r7, #4]
 8021ea4:	22aa      	movs	r2, #170	@ 0xaa
 8021ea6:	0092      	lsls	r2, r2, #2
 8021ea8:	4694      	mov	ip, r2
 8021eaa:	4463      	add	r3, ip
 8021eac:	683a      	ldr	r2, [r7, #0]
 8021eae:	0011      	movs	r1, r2
 8021eb0:	0018      	movs	r0, r3
 8021eb2:	f001 f810 	bl	8022ed6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8021eb6:	687a      	ldr	r2, [r7, #4]
 8021eb8:	23a5      	movs	r3, #165	@ 0xa5
 8021eba:	009b      	lsls	r3, r3, #2
 8021ebc:	2101      	movs	r1, #1
 8021ebe:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8021ec0:	687b      	ldr	r3, [r7, #4]
 8021ec2:	4a23      	ldr	r2, [pc, #140]	@ (8021f50 <USBD_LL_SetupStage+0xb8>)
 8021ec4:	5a9b      	ldrh	r3, [r3, r2]
 8021ec6:	0019      	movs	r1, r3
 8021ec8:	687a      	ldr	r2, [r7, #4]
 8021eca:	23a6      	movs	r3, #166	@ 0xa6
 8021ecc:	009b      	lsls	r3, r3, #2
 8021ece:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8021ed0:	687a      	ldr	r2, [r7, #4]
 8021ed2:	23aa      	movs	r3, #170	@ 0xaa
 8021ed4:	009b      	lsls	r3, r3, #2
 8021ed6:	5cd3      	ldrb	r3, [r2, r3]
 8021ed8:	001a      	movs	r2, r3
 8021eda:	231f      	movs	r3, #31
 8021edc:	4013      	ands	r3, r2
 8021ede:	2b02      	cmp	r3, #2
 8021ee0:	d019      	beq.n	8021f16 <USBD_LL_SetupStage+0x7e>
 8021ee2:	d822      	bhi.n	8021f2a <USBD_LL_SetupStage+0x92>
 8021ee4:	2b00      	cmp	r3, #0
 8021ee6:	d002      	beq.n	8021eee <USBD_LL_SetupStage+0x56>
 8021ee8:	2b01      	cmp	r3, #1
 8021eea:	d00a      	beq.n	8021f02 <USBD_LL_SetupStage+0x6a>
 8021eec:	e01d      	b.n	8021f2a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8021eee:	687b      	ldr	r3, [r7, #4]
 8021ef0:	22aa      	movs	r2, #170	@ 0xaa
 8021ef2:	0092      	lsls	r2, r2, #2
 8021ef4:	189a      	adds	r2, r3, r2
 8021ef6:	687b      	ldr	r3, [r7, #4]
 8021ef8:	0011      	movs	r1, r2
 8021efa:	0018      	movs	r0, r3
 8021efc:	f000 fa10 	bl	8022320 <USBD_StdDevReq>
      break;
 8021f00:	e020      	b.n	8021f44 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8021f02:	687b      	ldr	r3, [r7, #4]
 8021f04:	22aa      	movs	r2, #170	@ 0xaa
 8021f06:	0092      	lsls	r2, r2, #2
 8021f08:	189a      	adds	r2, r3, r2
 8021f0a:	687b      	ldr	r3, [r7, #4]
 8021f0c:	0011      	movs	r1, r2
 8021f0e:	0018      	movs	r0, r3
 8021f10:	f000 fa78 	bl	8022404 <USBD_StdItfReq>
      break;
 8021f14:	e016      	b.n	8021f44 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8021f16:	687b      	ldr	r3, [r7, #4]
 8021f18:	22aa      	movs	r2, #170	@ 0xaa
 8021f1a:	0092      	lsls	r2, r2, #2
 8021f1c:	189a      	adds	r2, r3, r2
 8021f1e:	687b      	ldr	r3, [r7, #4]
 8021f20:	0011      	movs	r1, r2
 8021f22:	0018      	movs	r0, r3
 8021f24:	f000 fac5 	bl	80224b2 <USBD_StdEPReq>
      break;
 8021f28:	e00c      	b.n	8021f44 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8021f2a:	687a      	ldr	r2, [r7, #4]
 8021f2c:	23aa      	movs	r3, #170	@ 0xaa
 8021f2e:	009b      	lsls	r3, r3, #2
 8021f30:	5cd3      	ldrb	r3, [r2, r3]
 8021f32:	227f      	movs	r2, #127	@ 0x7f
 8021f34:	4393      	bics	r3, r2
 8021f36:	b2da      	uxtb	r2, r3
 8021f38:	687b      	ldr	r3, [r7, #4]
 8021f3a:	0011      	movs	r1, r2
 8021f3c:	0018      	movs	r0, r3
 8021f3e:	f001 fd36 	bl	80239ae <USBD_LL_StallEP>
      break;
 8021f42:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8021f44:	2300      	movs	r3, #0
}
 8021f46:	0018      	movs	r0, r3
 8021f48:	46bd      	mov	sp, r7
 8021f4a:	b002      	add	sp, #8
 8021f4c:	bd80      	pop	{r7, pc}
 8021f4e:	46c0      	nop			@ (mov r8, r8)
 8021f50:	000002ae 	.word	0x000002ae

08021f54 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8021f54:	b580      	push	{r7, lr}
 8021f56:	b086      	sub	sp, #24
 8021f58:	af00      	add	r7, sp, #0
 8021f5a:	60f8      	str	r0, [r7, #12]
 8021f5c:	607a      	str	r2, [r7, #4]
 8021f5e:	200b      	movs	r0, #11
 8021f60:	183b      	adds	r3, r7, r0
 8021f62:	1c0a      	adds	r2, r1, #0
 8021f64:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8021f66:	183b      	adds	r3, r7, r0
 8021f68:	781b      	ldrb	r3, [r3, #0]
 8021f6a:	2b00      	cmp	r3, #0
 8021f6c:	d154      	bne.n	8022018 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8021f6e:	68fb      	ldr	r3, [r7, #12]
 8021f70:	3355      	adds	r3, #85	@ 0x55
 8021f72:	33ff      	adds	r3, #255	@ 0xff
 8021f74:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8021f76:	68fa      	ldr	r2, [r7, #12]
 8021f78:	23a5      	movs	r3, #165	@ 0xa5
 8021f7a:	009b      	lsls	r3, r3, #2
 8021f7c:	58d3      	ldr	r3, [r2, r3]
 8021f7e:	2b03      	cmp	r3, #3
 8021f80:	d139      	bne.n	8021ff6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8021f82:	697b      	ldr	r3, [r7, #20]
 8021f84:	68da      	ldr	r2, [r3, #12]
 8021f86:	697b      	ldr	r3, [r7, #20]
 8021f88:	691b      	ldr	r3, [r3, #16]
 8021f8a:	429a      	cmp	r2, r3
 8021f8c:	d919      	bls.n	8021fc2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8021f8e:	697b      	ldr	r3, [r7, #20]
 8021f90:	68da      	ldr	r2, [r3, #12]
 8021f92:	697b      	ldr	r3, [r7, #20]
 8021f94:	691b      	ldr	r3, [r3, #16]
 8021f96:	1ad2      	subs	r2, r2, r3
 8021f98:	697b      	ldr	r3, [r7, #20]
 8021f9a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021f9c:	697b      	ldr	r3, [r7, #20]
 8021f9e:	68da      	ldr	r2, [r3, #12]
 8021fa0:	697b      	ldr	r3, [r7, #20]
 8021fa2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8021fa4:	429a      	cmp	r2, r3
 8021fa6:	d203      	bcs.n	8021fb0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021fa8:	697b      	ldr	r3, [r7, #20]
 8021faa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8021fac:	b29b      	uxth	r3, r3
 8021fae:	e002      	b.n	8021fb6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021fb0:	697b      	ldr	r3, [r7, #20]
 8021fb2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8021fb4:	b29b      	uxth	r3, r3
 8021fb6:	6879      	ldr	r1, [r7, #4]
 8021fb8:	68f8      	ldr	r0, [r7, #12]
 8021fba:	001a      	movs	r2, r3
 8021fbc:	f001 f898 	bl	80230f0 <USBD_CtlContinueRx>
 8021fc0:	e045      	b.n	802204e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8021fc2:	68fa      	ldr	r2, [r7, #12]
 8021fc4:	23ad      	movs	r3, #173	@ 0xad
 8021fc6:	009b      	lsls	r3, r3, #2
 8021fc8:	58d3      	ldr	r3, [r2, r3]
 8021fca:	691b      	ldr	r3, [r3, #16]
 8021fcc:	2b00      	cmp	r3, #0
 8021fce:	d00d      	beq.n	8021fec <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021fd0:	68fa      	ldr	r2, [r7, #12]
 8021fd2:	23a7      	movs	r3, #167	@ 0xa7
 8021fd4:	009b      	lsls	r3, r3, #2
 8021fd6:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8021fd8:	2b03      	cmp	r3, #3
 8021fda:	d107      	bne.n	8021fec <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8021fdc:	68fa      	ldr	r2, [r7, #12]
 8021fde:	23ad      	movs	r3, #173	@ 0xad
 8021fe0:	009b      	lsls	r3, r3, #2
 8021fe2:	58d3      	ldr	r3, [r2, r3]
 8021fe4:	691b      	ldr	r3, [r3, #16]
 8021fe6:	68fa      	ldr	r2, [r7, #12]
 8021fe8:	0010      	movs	r0, r2
 8021fea:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8021fec:	68fb      	ldr	r3, [r7, #12]
 8021fee:	0018      	movs	r0, r3
 8021ff0:	f001 f891 	bl	8023116 <USBD_CtlSendStatus>
 8021ff4:	e02b      	b.n	802204e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8021ff6:	68fa      	ldr	r2, [r7, #12]
 8021ff8:	23a5      	movs	r3, #165	@ 0xa5
 8021ffa:	009b      	lsls	r3, r3, #2
 8021ffc:	58d3      	ldr	r3, [r2, r3]
 8021ffe:	2b05      	cmp	r3, #5
 8022000:	d125      	bne.n	802204e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8022002:	68fa      	ldr	r2, [r7, #12]
 8022004:	23a5      	movs	r3, #165	@ 0xa5
 8022006:	009b      	lsls	r3, r3, #2
 8022008:	2100      	movs	r1, #0
 802200a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 802200c:	68fb      	ldr	r3, [r7, #12]
 802200e:	2100      	movs	r1, #0
 8022010:	0018      	movs	r0, r3
 8022012:	f001 fccc 	bl	80239ae <USBD_LL_StallEP>
 8022016:	e01a      	b.n	802204e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8022018:	68fa      	ldr	r2, [r7, #12]
 802201a:	23ad      	movs	r3, #173	@ 0xad
 802201c:	009b      	lsls	r3, r3, #2
 802201e:	58d3      	ldr	r3, [r2, r3]
 8022020:	699b      	ldr	r3, [r3, #24]
 8022022:	2b00      	cmp	r3, #0
 8022024:	d011      	beq.n	802204a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8022026:	68fa      	ldr	r2, [r7, #12]
 8022028:	23a7      	movs	r3, #167	@ 0xa7
 802202a:	009b      	lsls	r3, r3, #2
 802202c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 802202e:	2b03      	cmp	r3, #3
 8022030:	d10b      	bne.n	802204a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8022032:	68fa      	ldr	r2, [r7, #12]
 8022034:	23ad      	movs	r3, #173	@ 0xad
 8022036:	009b      	lsls	r3, r3, #2
 8022038:	58d3      	ldr	r3, [r2, r3]
 802203a:	699b      	ldr	r3, [r3, #24]
 802203c:	220b      	movs	r2, #11
 802203e:	18ba      	adds	r2, r7, r2
 8022040:	7811      	ldrb	r1, [r2, #0]
 8022042:	68fa      	ldr	r2, [r7, #12]
 8022044:	0010      	movs	r0, r2
 8022046:	4798      	blx	r3
 8022048:	e001      	b.n	802204e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 802204a:	2302      	movs	r3, #2
 802204c:	e000      	b.n	8022050 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 802204e:	2300      	movs	r3, #0
}
 8022050:	0018      	movs	r0, r3
 8022052:	46bd      	mov	sp, r7
 8022054:	b006      	add	sp, #24
 8022056:	bd80      	pop	{r7, pc}

08022058 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8022058:	b580      	push	{r7, lr}
 802205a:	b086      	sub	sp, #24
 802205c:	af00      	add	r7, sp, #0
 802205e:	60f8      	str	r0, [r7, #12]
 8022060:	607a      	str	r2, [r7, #4]
 8022062:	200b      	movs	r0, #11
 8022064:	183b      	adds	r3, r7, r0
 8022066:	1c0a      	adds	r2, r1, #0
 8022068:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 802206a:	183b      	adds	r3, r7, r0
 802206c:	781b      	ldrb	r3, [r3, #0]
 802206e:	2b00      	cmp	r3, #0
 8022070:	d000      	beq.n	8022074 <USBD_LL_DataInStage+0x1c>
 8022072:	e08e      	b.n	8022192 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8022074:	68fb      	ldr	r3, [r7, #12]
 8022076:	3314      	adds	r3, #20
 8022078:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 802207a:	68fa      	ldr	r2, [r7, #12]
 802207c:	23a5      	movs	r3, #165	@ 0xa5
 802207e:	009b      	lsls	r3, r3, #2
 8022080:	58d3      	ldr	r3, [r2, r3]
 8022082:	2b02      	cmp	r3, #2
 8022084:	d164      	bne.n	8022150 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8022086:	697b      	ldr	r3, [r7, #20]
 8022088:	68da      	ldr	r2, [r3, #12]
 802208a:	697b      	ldr	r3, [r7, #20]
 802208c:	691b      	ldr	r3, [r3, #16]
 802208e:	429a      	cmp	r2, r3
 8022090:	d915      	bls.n	80220be <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8022092:	697b      	ldr	r3, [r7, #20]
 8022094:	68da      	ldr	r2, [r3, #12]
 8022096:	697b      	ldr	r3, [r7, #20]
 8022098:	691b      	ldr	r3, [r3, #16]
 802209a:	1ad2      	subs	r2, r2, r3
 802209c:	697b      	ldr	r3, [r7, #20]
 802209e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80220a0:	697b      	ldr	r3, [r7, #20]
 80220a2:	68db      	ldr	r3, [r3, #12]
 80220a4:	b29a      	uxth	r2, r3
 80220a6:	6879      	ldr	r1, [r7, #4]
 80220a8:	68fb      	ldr	r3, [r7, #12]
 80220aa:	0018      	movs	r0, r3
 80220ac:	f000 ffe9 	bl	8023082 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80220b0:	68f8      	ldr	r0, [r7, #12]
 80220b2:	2300      	movs	r3, #0
 80220b4:	2200      	movs	r2, #0
 80220b6:	2100      	movs	r1, #0
 80220b8:	f001 fd62 	bl	8023b80 <USBD_LL_PrepareReceive>
 80220bc:	e059      	b.n	8022172 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80220be:	697b      	ldr	r3, [r7, #20]
 80220c0:	689a      	ldr	r2, [r3, #8]
 80220c2:	697b      	ldr	r3, [r7, #20]
 80220c4:	691b      	ldr	r3, [r3, #16]
 80220c6:	0019      	movs	r1, r3
 80220c8:	0010      	movs	r0, r2
 80220ca:	f7de f8f1 	bl	80002b0 <__aeabi_uidivmod>
 80220ce:	1e0b      	subs	r3, r1, #0
 80220d0:	d11f      	bne.n	8022112 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 80220d2:	697b      	ldr	r3, [r7, #20]
 80220d4:	689a      	ldr	r2, [r3, #8]
 80220d6:	697b      	ldr	r3, [r7, #20]
 80220d8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80220da:	429a      	cmp	r2, r3
 80220dc:	d319      	bcc.n	8022112 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 80220de:	697b      	ldr	r3, [r7, #20]
 80220e0:	689a      	ldr	r2, [r3, #8]
 80220e2:	68f9      	ldr	r1, [r7, #12]
 80220e4:	23a6      	movs	r3, #166	@ 0xa6
 80220e6:	009b      	lsls	r3, r3, #2
 80220e8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80220ea:	429a      	cmp	r2, r3
 80220ec:	d211      	bcs.n	8022112 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80220ee:	68fb      	ldr	r3, [r7, #12]
 80220f0:	2200      	movs	r2, #0
 80220f2:	2100      	movs	r1, #0
 80220f4:	0018      	movs	r0, r3
 80220f6:	f000 ffc4 	bl	8023082 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80220fa:	68fa      	ldr	r2, [r7, #12]
 80220fc:	23a6      	movs	r3, #166	@ 0xa6
 80220fe:	009b      	lsls	r3, r3, #2
 8022100:	2100      	movs	r1, #0
 8022102:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022104:	68f8      	ldr	r0, [r7, #12]
 8022106:	2300      	movs	r3, #0
 8022108:	2200      	movs	r2, #0
 802210a:	2100      	movs	r1, #0
 802210c:	f001 fd38 	bl	8023b80 <USBD_LL_PrepareReceive>
 8022110:	e02f      	b.n	8022172 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8022112:	68fa      	ldr	r2, [r7, #12]
 8022114:	23ad      	movs	r3, #173	@ 0xad
 8022116:	009b      	lsls	r3, r3, #2
 8022118:	58d3      	ldr	r3, [r2, r3]
 802211a:	68db      	ldr	r3, [r3, #12]
 802211c:	2b00      	cmp	r3, #0
 802211e:	d00d      	beq.n	802213c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8022120:	68fa      	ldr	r2, [r7, #12]
 8022122:	23a7      	movs	r3, #167	@ 0xa7
 8022124:	009b      	lsls	r3, r3, #2
 8022126:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8022128:	2b03      	cmp	r3, #3
 802212a:	d107      	bne.n	802213c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 802212c:	68fa      	ldr	r2, [r7, #12]
 802212e:	23ad      	movs	r3, #173	@ 0xad
 8022130:	009b      	lsls	r3, r3, #2
 8022132:	58d3      	ldr	r3, [r2, r3]
 8022134:	68db      	ldr	r3, [r3, #12]
 8022136:	68fa      	ldr	r2, [r7, #12]
 8022138:	0010      	movs	r0, r2
 802213a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 802213c:	68fb      	ldr	r3, [r7, #12]
 802213e:	2180      	movs	r1, #128	@ 0x80
 8022140:	0018      	movs	r0, r3
 8022142:	f001 fc34 	bl	80239ae <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8022146:	68fb      	ldr	r3, [r7, #12]
 8022148:	0018      	movs	r0, r3
 802214a:	f000 fff8 	bl	802313e <USBD_CtlReceiveStatus>
 802214e:	e010      	b.n	8022172 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8022150:	68fa      	ldr	r2, [r7, #12]
 8022152:	23a5      	movs	r3, #165	@ 0xa5
 8022154:	009b      	lsls	r3, r3, #2
 8022156:	58d3      	ldr	r3, [r2, r3]
 8022158:	2b04      	cmp	r3, #4
 802215a:	d005      	beq.n	8022168 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 802215c:	68fa      	ldr	r2, [r7, #12]
 802215e:	23a5      	movs	r3, #165	@ 0xa5
 8022160:	009b      	lsls	r3, r3, #2
 8022162:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8022164:	2b00      	cmp	r3, #0
 8022166:	d104      	bne.n	8022172 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8022168:	68fb      	ldr	r3, [r7, #12]
 802216a:	2180      	movs	r1, #128	@ 0x80
 802216c:	0018      	movs	r0, r3
 802216e:	f001 fc1e 	bl	80239ae <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8022172:	68fa      	ldr	r2, [r7, #12]
 8022174:	23a8      	movs	r3, #168	@ 0xa8
 8022176:	009b      	lsls	r3, r3, #2
 8022178:	5cd3      	ldrb	r3, [r2, r3]
 802217a:	2b01      	cmp	r3, #1
 802217c:	d124      	bne.n	80221c8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 802217e:	68fb      	ldr	r3, [r7, #12]
 8022180:	0018      	movs	r0, r3
 8022182:	f7ff fe43 	bl	8021e0c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8022186:	68fa      	ldr	r2, [r7, #12]
 8022188:	23a8      	movs	r3, #168	@ 0xa8
 802218a:	009b      	lsls	r3, r3, #2
 802218c:	2100      	movs	r1, #0
 802218e:	54d1      	strb	r1, [r2, r3]
 8022190:	e01a      	b.n	80221c8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8022192:	68fa      	ldr	r2, [r7, #12]
 8022194:	23ad      	movs	r3, #173	@ 0xad
 8022196:	009b      	lsls	r3, r3, #2
 8022198:	58d3      	ldr	r3, [r2, r3]
 802219a:	695b      	ldr	r3, [r3, #20]
 802219c:	2b00      	cmp	r3, #0
 802219e:	d011      	beq.n	80221c4 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80221a0:	68fa      	ldr	r2, [r7, #12]
 80221a2:	23a7      	movs	r3, #167	@ 0xa7
 80221a4:	009b      	lsls	r3, r3, #2
 80221a6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80221a8:	2b03      	cmp	r3, #3
 80221aa:	d10b      	bne.n	80221c4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80221ac:	68fa      	ldr	r2, [r7, #12]
 80221ae:	23ad      	movs	r3, #173	@ 0xad
 80221b0:	009b      	lsls	r3, r3, #2
 80221b2:	58d3      	ldr	r3, [r2, r3]
 80221b4:	695b      	ldr	r3, [r3, #20]
 80221b6:	220b      	movs	r2, #11
 80221b8:	18ba      	adds	r2, r7, r2
 80221ba:	7811      	ldrb	r1, [r2, #0]
 80221bc:	68fa      	ldr	r2, [r7, #12]
 80221be:	0010      	movs	r0, r2
 80221c0:	4798      	blx	r3
 80221c2:	e001      	b.n	80221c8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80221c4:	2302      	movs	r3, #2
 80221c6:	e000      	b.n	80221ca <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80221c8:	2300      	movs	r3, #0
}
 80221ca:	0018      	movs	r0, r3
 80221cc:	46bd      	mov	sp, r7
 80221ce:	b006      	add	sp, #24
 80221d0:	bd80      	pop	{r7, pc}

080221d2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80221d2:	b580      	push	{r7, lr}
 80221d4:	b082      	sub	sp, #8
 80221d6:	af00      	add	r7, sp, #0
 80221d8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80221da:	6878      	ldr	r0, [r7, #4]
 80221dc:	2340      	movs	r3, #64	@ 0x40
 80221de:	2200      	movs	r2, #0
 80221e0:	2100      	movs	r1, #0
 80221e2:	f001 fb82 	bl	80238ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80221e6:	687a      	ldr	r2, [r7, #4]
 80221e8:	23ac      	movs	r3, #172	@ 0xac
 80221ea:	005b      	lsls	r3, r3, #1
 80221ec:	2101      	movs	r1, #1
 80221ee:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80221f0:	687a      	ldr	r2, [r7, #4]
 80221f2:	23b2      	movs	r3, #178	@ 0xb2
 80221f4:	005b      	lsls	r3, r3, #1
 80221f6:	2140      	movs	r1, #64	@ 0x40
 80221f8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80221fa:	6878      	ldr	r0, [r7, #4]
 80221fc:	2340      	movs	r3, #64	@ 0x40
 80221fe:	2200      	movs	r2, #0
 8022200:	2180      	movs	r1, #128	@ 0x80
 8022202:	f001 fb72 	bl	80238ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8022206:	687b      	ldr	r3, [r7, #4]
 8022208:	2201      	movs	r2, #1
 802220a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 802220c:	687b      	ldr	r3, [r7, #4]
 802220e:	2240      	movs	r2, #64	@ 0x40
 8022210:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8022212:	687a      	ldr	r2, [r7, #4]
 8022214:	23a7      	movs	r3, #167	@ 0xa7
 8022216:	009b      	lsls	r3, r3, #2
 8022218:	2101      	movs	r1, #1
 802221a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 802221c:	687a      	ldr	r2, [r7, #4]
 802221e:	23a5      	movs	r3, #165	@ 0xa5
 8022220:	009b      	lsls	r3, r3, #2
 8022222:	2100      	movs	r1, #0
 8022224:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8022226:	687b      	ldr	r3, [r7, #4]
 8022228:	2200      	movs	r2, #0
 802222a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 802222c:	687a      	ldr	r2, [r7, #4]
 802222e:	23a9      	movs	r3, #169	@ 0xa9
 8022230:	009b      	lsls	r3, r3, #2
 8022232:	2100      	movs	r1, #0
 8022234:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8022236:	687a      	ldr	r2, [r7, #4]
 8022238:	23ae      	movs	r3, #174	@ 0xae
 802223a:	009b      	lsls	r3, r3, #2
 802223c:	58d3      	ldr	r3, [r2, r3]
 802223e:	2b00      	cmp	r3, #0
 8022240:	d00a      	beq.n	8022258 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8022242:	687a      	ldr	r2, [r7, #4]
 8022244:	23ad      	movs	r3, #173	@ 0xad
 8022246:	009b      	lsls	r3, r3, #2
 8022248:	58d3      	ldr	r3, [r2, r3]
 802224a:	685a      	ldr	r2, [r3, #4]
 802224c:	687b      	ldr	r3, [r7, #4]
 802224e:	685b      	ldr	r3, [r3, #4]
 8022250:	b2d9      	uxtb	r1, r3
 8022252:	687b      	ldr	r3, [r7, #4]
 8022254:	0018      	movs	r0, r3
 8022256:	4790      	blx	r2
  }

  return USBD_OK;
 8022258:	2300      	movs	r3, #0
}
 802225a:	0018      	movs	r0, r3
 802225c:	46bd      	mov	sp, r7
 802225e:	b002      	add	sp, #8
 8022260:	bd80      	pop	{r7, pc}

08022262 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8022262:	b580      	push	{r7, lr}
 8022264:	b082      	sub	sp, #8
 8022266:	af00      	add	r7, sp, #0
 8022268:	6078      	str	r0, [r7, #4]
 802226a:	000a      	movs	r2, r1
 802226c:	1cfb      	adds	r3, r7, #3
 802226e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8022270:	687b      	ldr	r3, [r7, #4]
 8022272:	1cfa      	adds	r2, r7, #3
 8022274:	7812      	ldrb	r2, [r2, #0]
 8022276:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8022278:	2300      	movs	r3, #0
}
 802227a:	0018      	movs	r0, r3
 802227c:	46bd      	mov	sp, r7
 802227e:	b002      	add	sp, #8
 8022280:	bd80      	pop	{r7, pc}
	...

08022284 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8022284:	b580      	push	{r7, lr}
 8022286:	b082      	sub	sp, #8
 8022288:	af00      	add	r7, sp, #0
 802228a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 802228c:	687a      	ldr	r2, [r7, #4]
 802228e:	23a7      	movs	r3, #167	@ 0xa7
 8022290:	009b      	lsls	r3, r3, #2
 8022292:	5cd1      	ldrb	r1, [r2, r3]
 8022294:	687b      	ldr	r3, [r7, #4]
 8022296:	4a06      	ldr	r2, [pc, #24]	@ (80222b0 <USBD_LL_Suspend+0x2c>)
 8022298:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 802229a:	687a      	ldr	r2, [r7, #4]
 802229c:	23a7      	movs	r3, #167	@ 0xa7
 802229e:	009b      	lsls	r3, r3, #2
 80222a0:	2104      	movs	r1, #4
 80222a2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80222a4:	2300      	movs	r3, #0
}
 80222a6:	0018      	movs	r0, r3
 80222a8:	46bd      	mov	sp, r7
 80222aa:	b002      	add	sp, #8
 80222ac:	bd80      	pop	{r7, pc}
 80222ae:	46c0      	nop			@ (mov r8, r8)
 80222b0:	0000029d 	.word	0x0000029d

080222b4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80222b4:	b580      	push	{r7, lr}
 80222b6:	b082      	sub	sp, #8
 80222b8:	af00      	add	r7, sp, #0
 80222ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80222bc:	687a      	ldr	r2, [r7, #4]
 80222be:	23a7      	movs	r3, #167	@ 0xa7
 80222c0:	009b      	lsls	r3, r3, #2
 80222c2:	5cd3      	ldrb	r3, [r2, r3]
 80222c4:	2b04      	cmp	r3, #4
 80222c6:	d106      	bne.n	80222d6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80222c8:	687b      	ldr	r3, [r7, #4]
 80222ca:	4a05      	ldr	r2, [pc, #20]	@ (80222e0 <USBD_LL_Resume+0x2c>)
 80222cc:	5c99      	ldrb	r1, [r3, r2]
 80222ce:	687a      	ldr	r2, [r7, #4]
 80222d0:	23a7      	movs	r3, #167	@ 0xa7
 80222d2:	009b      	lsls	r3, r3, #2
 80222d4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80222d6:	2300      	movs	r3, #0
}
 80222d8:	0018      	movs	r0, r3
 80222da:	46bd      	mov	sp, r7
 80222dc:	b002      	add	sp, #8
 80222de:	bd80      	pop	{r7, pc}
 80222e0:	0000029d 	.word	0x0000029d

080222e4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80222e4:	b580      	push	{r7, lr}
 80222e6:	b082      	sub	sp, #8
 80222e8:	af00      	add	r7, sp, #0
 80222ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80222ec:	687a      	ldr	r2, [r7, #4]
 80222ee:	23a7      	movs	r3, #167	@ 0xa7
 80222f0:	009b      	lsls	r3, r3, #2
 80222f2:	5cd3      	ldrb	r3, [r2, r3]
 80222f4:	2b03      	cmp	r3, #3
 80222f6:	d10e      	bne.n	8022316 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80222f8:	687a      	ldr	r2, [r7, #4]
 80222fa:	23ad      	movs	r3, #173	@ 0xad
 80222fc:	009b      	lsls	r3, r3, #2
 80222fe:	58d3      	ldr	r3, [r2, r3]
 8022300:	69db      	ldr	r3, [r3, #28]
 8022302:	2b00      	cmp	r3, #0
 8022304:	d007      	beq.n	8022316 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8022306:	687a      	ldr	r2, [r7, #4]
 8022308:	23ad      	movs	r3, #173	@ 0xad
 802230a:	009b      	lsls	r3, r3, #2
 802230c:	58d3      	ldr	r3, [r2, r3]
 802230e:	69db      	ldr	r3, [r3, #28]
 8022310:	687a      	ldr	r2, [r7, #4]
 8022312:	0010      	movs	r0, r2
 8022314:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8022316:	2300      	movs	r3, #0
}
 8022318:	0018      	movs	r0, r3
 802231a:	46bd      	mov	sp, r7
 802231c:	b002      	add	sp, #8
 802231e:	bd80      	pop	{r7, pc}

08022320 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8022320:	b580      	push	{r7, lr}
 8022322:	b084      	sub	sp, #16
 8022324:	af00      	add	r7, sp, #0
 8022326:	6078      	str	r0, [r7, #4]
 8022328:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802232a:	230f      	movs	r3, #15
 802232c:	18fb      	adds	r3, r7, r3
 802232e:	2200      	movs	r2, #0
 8022330:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8022332:	683b      	ldr	r3, [r7, #0]
 8022334:	781b      	ldrb	r3, [r3, #0]
 8022336:	001a      	movs	r2, r3
 8022338:	2360      	movs	r3, #96	@ 0x60
 802233a:	4013      	ands	r3, r2
 802233c:	2b40      	cmp	r3, #64	@ 0x40
 802233e:	d004      	beq.n	802234a <USBD_StdDevReq+0x2a>
 8022340:	d84f      	bhi.n	80223e2 <USBD_StdDevReq+0xc2>
 8022342:	2b00      	cmp	r3, #0
 8022344:	d00b      	beq.n	802235e <USBD_StdDevReq+0x3e>
 8022346:	2b20      	cmp	r3, #32
 8022348:	d14b      	bne.n	80223e2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 802234a:	687a      	ldr	r2, [r7, #4]
 802234c:	23ad      	movs	r3, #173	@ 0xad
 802234e:	009b      	lsls	r3, r3, #2
 8022350:	58d3      	ldr	r3, [r2, r3]
 8022352:	689b      	ldr	r3, [r3, #8]
 8022354:	6839      	ldr	r1, [r7, #0]
 8022356:	687a      	ldr	r2, [r7, #4]
 8022358:	0010      	movs	r0, r2
 802235a:	4798      	blx	r3
      break;
 802235c:	e048      	b.n	80223f0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802235e:	683b      	ldr	r3, [r7, #0]
 8022360:	785b      	ldrb	r3, [r3, #1]
 8022362:	2b09      	cmp	r3, #9
 8022364:	d835      	bhi.n	80223d2 <USBD_StdDevReq+0xb2>
 8022366:	009a      	lsls	r2, r3, #2
 8022368:	4b25      	ldr	r3, [pc, #148]	@ (8022400 <USBD_StdDevReq+0xe0>)
 802236a:	18d3      	adds	r3, r2, r3
 802236c:	681b      	ldr	r3, [r3, #0]
 802236e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8022370:	683a      	ldr	r2, [r7, #0]
 8022372:	687b      	ldr	r3, [r7, #4]
 8022374:	0011      	movs	r1, r2
 8022376:	0018      	movs	r0, r3
 8022378:	f000 fa52 	bl	8022820 <USBD_GetDescriptor>
          break;
 802237c:	e030      	b.n	80223e0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 802237e:	683a      	ldr	r2, [r7, #0]
 8022380:	687b      	ldr	r3, [r7, #4]
 8022382:	0011      	movs	r1, r2
 8022384:	0018      	movs	r0, r3
 8022386:	f000 fbfd 	bl	8022b84 <USBD_SetAddress>
          break;
 802238a:	e029      	b.n	80223e0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 802238c:	683a      	ldr	r2, [r7, #0]
 802238e:	687b      	ldr	r3, [r7, #4]
 8022390:	0011      	movs	r1, r2
 8022392:	0018      	movs	r0, r3
 8022394:	f000 fc4a 	bl	8022c2c <USBD_SetConfig>
          break;
 8022398:	e022      	b.n	80223e0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 802239a:	683a      	ldr	r2, [r7, #0]
 802239c:	687b      	ldr	r3, [r7, #4]
 802239e:	0011      	movs	r1, r2
 80223a0:	0018      	movs	r0, r3
 80223a2:	f000 fce7 	bl	8022d74 <USBD_GetConfig>
          break;
 80223a6:	e01b      	b.n	80223e0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80223a8:	683a      	ldr	r2, [r7, #0]
 80223aa:	687b      	ldr	r3, [r7, #4]
 80223ac:	0011      	movs	r1, r2
 80223ae:	0018      	movs	r0, r3
 80223b0:	f000 fd1b 	bl	8022dea <USBD_GetStatus>
          break;
 80223b4:	e014      	b.n	80223e0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80223b6:	683a      	ldr	r2, [r7, #0]
 80223b8:	687b      	ldr	r3, [r7, #4]
 80223ba:	0011      	movs	r1, r2
 80223bc:	0018      	movs	r0, r3
 80223be:	f000 fd4e 	bl	8022e5e <USBD_SetFeature>
          break;
 80223c2:	e00d      	b.n	80223e0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80223c4:	683a      	ldr	r2, [r7, #0]
 80223c6:	687b      	ldr	r3, [r7, #4]
 80223c8:	0011      	movs	r1, r2
 80223ca:	0018      	movs	r0, r3
 80223cc:	f000 fd5d 	bl	8022e8a <USBD_ClrFeature>
          break;
 80223d0:	e006      	b.n	80223e0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80223d2:	683a      	ldr	r2, [r7, #0]
 80223d4:	687b      	ldr	r3, [r7, #4]
 80223d6:	0011      	movs	r1, r2
 80223d8:	0018      	movs	r0, r3
 80223da:	f000 fdb4 	bl	8022f46 <USBD_CtlError>
          break;
 80223de:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80223e0:	e006      	b.n	80223f0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80223e2:	683a      	ldr	r2, [r7, #0]
 80223e4:	687b      	ldr	r3, [r7, #4]
 80223e6:	0011      	movs	r1, r2
 80223e8:	0018      	movs	r0, r3
 80223ea:	f000 fdac 	bl	8022f46 <USBD_CtlError>
      break;
 80223ee:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80223f0:	230f      	movs	r3, #15
 80223f2:	18fb      	adds	r3, r7, r3
 80223f4:	781b      	ldrb	r3, [r3, #0]
}
 80223f6:	0018      	movs	r0, r3
 80223f8:	46bd      	mov	sp, r7
 80223fa:	b004      	add	sp, #16
 80223fc:	bd80      	pop	{r7, pc}
 80223fe:	46c0      	nop			@ (mov r8, r8)
 8022400:	0802e928 	.word	0x0802e928

08022404 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8022404:	b5b0      	push	{r4, r5, r7, lr}
 8022406:	b084      	sub	sp, #16
 8022408:	af00      	add	r7, sp, #0
 802240a:	6078      	str	r0, [r7, #4]
 802240c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802240e:	230f      	movs	r3, #15
 8022410:	18fb      	adds	r3, r7, r3
 8022412:	2200      	movs	r2, #0
 8022414:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8022416:	683b      	ldr	r3, [r7, #0]
 8022418:	781b      	ldrb	r3, [r3, #0]
 802241a:	001a      	movs	r2, r3
 802241c:	2360      	movs	r3, #96	@ 0x60
 802241e:	4013      	ands	r3, r2
 8022420:	2b40      	cmp	r3, #64	@ 0x40
 8022422:	d004      	beq.n	802242e <USBD_StdItfReq+0x2a>
 8022424:	d839      	bhi.n	802249a <USBD_StdItfReq+0x96>
 8022426:	2b00      	cmp	r3, #0
 8022428:	d001      	beq.n	802242e <USBD_StdItfReq+0x2a>
 802242a:	2b20      	cmp	r3, #32
 802242c:	d135      	bne.n	802249a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 802242e:	687a      	ldr	r2, [r7, #4]
 8022430:	23a7      	movs	r3, #167	@ 0xa7
 8022432:	009b      	lsls	r3, r3, #2
 8022434:	5cd3      	ldrb	r3, [r2, r3]
 8022436:	3b01      	subs	r3, #1
 8022438:	2b02      	cmp	r3, #2
 802243a:	d825      	bhi.n	8022488 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 802243c:	683b      	ldr	r3, [r7, #0]
 802243e:	889b      	ldrh	r3, [r3, #4]
 8022440:	b2db      	uxtb	r3, r3
 8022442:	2b01      	cmp	r3, #1
 8022444:	d819      	bhi.n	802247a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8022446:	687a      	ldr	r2, [r7, #4]
 8022448:	23ad      	movs	r3, #173	@ 0xad
 802244a:	009b      	lsls	r3, r3, #2
 802244c:	58d3      	ldr	r3, [r2, r3]
 802244e:	689b      	ldr	r3, [r3, #8]
 8022450:	250f      	movs	r5, #15
 8022452:	197c      	adds	r4, r7, r5
 8022454:	6839      	ldr	r1, [r7, #0]
 8022456:	687a      	ldr	r2, [r7, #4]
 8022458:	0010      	movs	r0, r2
 802245a:	4798      	blx	r3
 802245c:	0003      	movs	r3, r0
 802245e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8022460:	683b      	ldr	r3, [r7, #0]
 8022462:	88db      	ldrh	r3, [r3, #6]
 8022464:	2b00      	cmp	r3, #0
 8022466:	d116      	bne.n	8022496 <USBD_StdItfReq+0x92>
 8022468:	197b      	adds	r3, r7, r5
 802246a:	781b      	ldrb	r3, [r3, #0]
 802246c:	2b00      	cmp	r3, #0
 802246e:	d112      	bne.n	8022496 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8022470:	687b      	ldr	r3, [r7, #4]
 8022472:	0018      	movs	r0, r3
 8022474:	f000 fe4f 	bl	8023116 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8022478:	e00d      	b.n	8022496 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 802247a:	683a      	ldr	r2, [r7, #0]
 802247c:	687b      	ldr	r3, [r7, #4]
 802247e:	0011      	movs	r1, r2
 8022480:	0018      	movs	r0, r3
 8022482:	f000 fd60 	bl	8022f46 <USBD_CtlError>
          break;
 8022486:	e006      	b.n	8022496 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8022488:	683a      	ldr	r2, [r7, #0]
 802248a:	687b      	ldr	r3, [r7, #4]
 802248c:	0011      	movs	r1, r2
 802248e:	0018      	movs	r0, r3
 8022490:	f000 fd59 	bl	8022f46 <USBD_CtlError>
          break;
 8022494:	e000      	b.n	8022498 <USBD_StdItfReq+0x94>
          break;
 8022496:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8022498:	e006      	b.n	80224a8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 802249a:	683a      	ldr	r2, [r7, #0]
 802249c:	687b      	ldr	r3, [r7, #4]
 802249e:	0011      	movs	r1, r2
 80224a0:	0018      	movs	r0, r3
 80224a2:	f000 fd50 	bl	8022f46 <USBD_CtlError>
      break;
 80224a6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80224a8:	2300      	movs	r3, #0
}
 80224aa:	0018      	movs	r0, r3
 80224ac:	46bd      	mov	sp, r7
 80224ae:	b004      	add	sp, #16
 80224b0:	bdb0      	pop	{r4, r5, r7, pc}

080224b2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80224b2:	b5b0      	push	{r4, r5, r7, lr}
 80224b4:	b084      	sub	sp, #16
 80224b6:	af00      	add	r7, sp, #0
 80224b8:	6078      	str	r0, [r7, #4]
 80224ba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80224bc:	230f      	movs	r3, #15
 80224be:	18fb      	adds	r3, r7, r3
 80224c0:	2200      	movs	r2, #0
 80224c2:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80224c4:	683b      	ldr	r3, [r7, #0]
 80224c6:	889a      	ldrh	r2, [r3, #4]
 80224c8:	230e      	movs	r3, #14
 80224ca:	18fb      	adds	r3, r7, r3
 80224cc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80224ce:	683b      	ldr	r3, [r7, #0]
 80224d0:	781b      	ldrb	r3, [r3, #0]
 80224d2:	001a      	movs	r2, r3
 80224d4:	2360      	movs	r3, #96	@ 0x60
 80224d6:	4013      	ands	r3, r2
 80224d8:	2b40      	cmp	r3, #64	@ 0x40
 80224da:	d006      	beq.n	80224ea <USBD_StdEPReq+0x38>
 80224dc:	d900      	bls.n	80224e0 <USBD_StdEPReq+0x2e>
 80224de:	e190      	b.n	8022802 <USBD_StdEPReq+0x350>
 80224e0:	2b00      	cmp	r3, #0
 80224e2:	d00c      	beq.n	80224fe <USBD_StdEPReq+0x4c>
 80224e4:	2b20      	cmp	r3, #32
 80224e6:	d000      	beq.n	80224ea <USBD_StdEPReq+0x38>
 80224e8:	e18b      	b.n	8022802 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80224ea:	687a      	ldr	r2, [r7, #4]
 80224ec:	23ad      	movs	r3, #173	@ 0xad
 80224ee:	009b      	lsls	r3, r3, #2
 80224f0:	58d3      	ldr	r3, [r2, r3]
 80224f2:	689b      	ldr	r3, [r3, #8]
 80224f4:	6839      	ldr	r1, [r7, #0]
 80224f6:	687a      	ldr	r2, [r7, #4]
 80224f8:	0010      	movs	r0, r2
 80224fa:	4798      	blx	r3
      break;
 80224fc:	e188      	b.n	8022810 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80224fe:	683b      	ldr	r3, [r7, #0]
 8022500:	781b      	ldrb	r3, [r3, #0]
 8022502:	001a      	movs	r2, r3
 8022504:	2360      	movs	r3, #96	@ 0x60
 8022506:	4013      	ands	r3, r2
 8022508:	2b20      	cmp	r3, #32
 802250a:	d10f      	bne.n	802252c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802250c:	687a      	ldr	r2, [r7, #4]
 802250e:	23ad      	movs	r3, #173	@ 0xad
 8022510:	009b      	lsls	r3, r3, #2
 8022512:	58d3      	ldr	r3, [r2, r3]
 8022514:	689b      	ldr	r3, [r3, #8]
 8022516:	250f      	movs	r5, #15
 8022518:	197c      	adds	r4, r7, r5
 802251a:	6839      	ldr	r1, [r7, #0]
 802251c:	687a      	ldr	r2, [r7, #4]
 802251e:	0010      	movs	r0, r2
 8022520:	4798      	blx	r3
 8022522:	0003      	movs	r3, r0
 8022524:	7023      	strb	r3, [r4, #0]

        return ret;
 8022526:	197b      	adds	r3, r7, r5
 8022528:	781b      	ldrb	r3, [r3, #0]
 802252a:	e174      	b.n	8022816 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 802252c:	683b      	ldr	r3, [r7, #0]
 802252e:	785b      	ldrb	r3, [r3, #1]
 8022530:	2b03      	cmp	r3, #3
 8022532:	d007      	beq.n	8022544 <USBD_StdEPReq+0x92>
 8022534:	dd00      	ble.n	8022538 <USBD_StdEPReq+0x86>
 8022536:	e15c      	b.n	80227f2 <USBD_StdEPReq+0x340>
 8022538:	2b00      	cmp	r3, #0
 802253a:	d100      	bne.n	802253e <USBD_StdEPReq+0x8c>
 802253c:	e092      	b.n	8022664 <USBD_StdEPReq+0x1b2>
 802253e:	2b01      	cmp	r3, #1
 8022540:	d04b      	beq.n	80225da <USBD_StdEPReq+0x128>
 8022542:	e156      	b.n	80227f2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8022544:	687a      	ldr	r2, [r7, #4]
 8022546:	23a7      	movs	r3, #167	@ 0xa7
 8022548:	009b      	lsls	r3, r3, #2
 802254a:	5cd3      	ldrb	r3, [r2, r3]
 802254c:	2b02      	cmp	r3, #2
 802254e:	d002      	beq.n	8022556 <USBD_StdEPReq+0xa4>
 8022550:	2b03      	cmp	r3, #3
 8022552:	d01d      	beq.n	8022590 <USBD_StdEPReq+0xde>
 8022554:	e039      	b.n	80225ca <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8022556:	220e      	movs	r2, #14
 8022558:	18bb      	adds	r3, r7, r2
 802255a:	781b      	ldrb	r3, [r3, #0]
 802255c:	2b00      	cmp	r3, #0
 802255e:	d010      	beq.n	8022582 <USBD_StdEPReq+0xd0>
 8022560:	18bb      	adds	r3, r7, r2
 8022562:	781b      	ldrb	r3, [r3, #0]
 8022564:	2b80      	cmp	r3, #128	@ 0x80
 8022566:	d00c      	beq.n	8022582 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8022568:	18bb      	adds	r3, r7, r2
 802256a:	781a      	ldrb	r2, [r3, #0]
 802256c:	687b      	ldr	r3, [r7, #4]
 802256e:	0011      	movs	r1, r2
 8022570:	0018      	movs	r0, r3
 8022572:	f001 fa1c 	bl	80239ae <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8022576:	687b      	ldr	r3, [r7, #4]
 8022578:	2180      	movs	r1, #128	@ 0x80
 802257a:	0018      	movs	r0, r3
 802257c:	f001 fa17 	bl	80239ae <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8022580:	e02a      	b.n	80225d8 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8022582:	683a      	ldr	r2, [r7, #0]
 8022584:	687b      	ldr	r3, [r7, #4]
 8022586:	0011      	movs	r1, r2
 8022588:	0018      	movs	r0, r3
 802258a:	f000 fcdc 	bl	8022f46 <USBD_CtlError>
              break;
 802258e:	e023      	b.n	80225d8 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8022590:	683b      	ldr	r3, [r7, #0]
 8022592:	885b      	ldrh	r3, [r3, #2]
 8022594:	2b00      	cmp	r3, #0
 8022596:	d113      	bne.n	80225c0 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8022598:	220e      	movs	r2, #14
 802259a:	18bb      	adds	r3, r7, r2
 802259c:	781b      	ldrb	r3, [r3, #0]
 802259e:	2b00      	cmp	r3, #0
 80225a0:	d00e      	beq.n	80225c0 <USBD_StdEPReq+0x10e>
 80225a2:	18bb      	adds	r3, r7, r2
 80225a4:	781b      	ldrb	r3, [r3, #0]
 80225a6:	2b80      	cmp	r3, #128	@ 0x80
 80225a8:	d00a      	beq.n	80225c0 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80225aa:	683b      	ldr	r3, [r7, #0]
 80225ac:	88db      	ldrh	r3, [r3, #6]
 80225ae:	2b00      	cmp	r3, #0
 80225b0:	d106      	bne.n	80225c0 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80225b2:	18bb      	adds	r3, r7, r2
 80225b4:	781a      	ldrb	r2, [r3, #0]
 80225b6:	687b      	ldr	r3, [r7, #4]
 80225b8:	0011      	movs	r1, r2
 80225ba:	0018      	movs	r0, r3
 80225bc:	f001 f9f7 	bl	80239ae <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80225c0:	687b      	ldr	r3, [r7, #4]
 80225c2:	0018      	movs	r0, r3
 80225c4:	f000 fda7 	bl	8023116 <USBD_CtlSendStatus>

              break;
 80225c8:	e006      	b.n	80225d8 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80225ca:	683a      	ldr	r2, [r7, #0]
 80225cc:	687b      	ldr	r3, [r7, #4]
 80225ce:	0011      	movs	r1, r2
 80225d0:	0018      	movs	r0, r3
 80225d2:	f000 fcb8 	bl	8022f46 <USBD_CtlError>
              break;
 80225d6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80225d8:	e112      	b.n	8022800 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80225da:	687a      	ldr	r2, [r7, #4]
 80225dc:	23a7      	movs	r3, #167	@ 0xa7
 80225de:	009b      	lsls	r3, r3, #2
 80225e0:	5cd3      	ldrb	r3, [r2, r3]
 80225e2:	2b02      	cmp	r3, #2
 80225e4:	d002      	beq.n	80225ec <USBD_StdEPReq+0x13a>
 80225e6:	2b03      	cmp	r3, #3
 80225e8:	d01d      	beq.n	8022626 <USBD_StdEPReq+0x174>
 80225ea:	e032      	b.n	8022652 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80225ec:	220e      	movs	r2, #14
 80225ee:	18bb      	adds	r3, r7, r2
 80225f0:	781b      	ldrb	r3, [r3, #0]
 80225f2:	2b00      	cmp	r3, #0
 80225f4:	d010      	beq.n	8022618 <USBD_StdEPReq+0x166>
 80225f6:	18bb      	adds	r3, r7, r2
 80225f8:	781b      	ldrb	r3, [r3, #0]
 80225fa:	2b80      	cmp	r3, #128	@ 0x80
 80225fc:	d00c      	beq.n	8022618 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80225fe:	18bb      	adds	r3, r7, r2
 8022600:	781a      	ldrb	r2, [r3, #0]
 8022602:	687b      	ldr	r3, [r7, #4]
 8022604:	0011      	movs	r1, r2
 8022606:	0018      	movs	r0, r3
 8022608:	f001 f9d1 	bl	80239ae <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 802260c:	687b      	ldr	r3, [r7, #4]
 802260e:	2180      	movs	r1, #128	@ 0x80
 8022610:	0018      	movs	r0, r3
 8022612:	f001 f9cc 	bl	80239ae <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8022616:	e024      	b.n	8022662 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8022618:	683a      	ldr	r2, [r7, #0]
 802261a:	687b      	ldr	r3, [r7, #4]
 802261c:	0011      	movs	r1, r2
 802261e:	0018      	movs	r0, r3
 8022620:	f000 fc91 	bl	8022f46 <USBD_CtlError>
              break;
 8022624:	e01d      	b.n	8022662 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8022626:	683b      	ldr	r3, [r7, #0]
 8022628:	885b      	ldrh	r3, [r3, #2]
 802262a:	2b00      	cmp	r3, #0
 802262c:	d118      	bne.n	8022660 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 802262e:	210e      	movs	r1, #14
 8022630:	187b      	adds	r3, r7, r1
 8022632:	781b      	ldrb	r3, [r3, #0]
 8022634:	227f      	movs	r2, #127	@ 0x7f
 8022636:	4013      	ands	r3, r2
 8022638:	d006      	beq.n	8022648 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 802263a:	187b      	adds	r3, r7, r1
 802263c:	781a      	ldrb	r2, [r3, #0]
 802263e:	687b      	ldr	r3, [r7, #4]
 8022640:	0011      	movs	r1, r2
 8022642:	0018      	movs	r0, r3
 8022644:	f001 f9de 	bl	8023a04 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8022648:	687b      	ldr	r3, [r7, #4]
 802264a:	0018      	movs	r0, r3
 802264c:	f000 fd63 	bl	8023116 <USBD_CtlSendStatus>
              }
              break;
 8022650:	e006      	b.n	8022660 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8022652:	683a      	ldr	r2, [r7, #0]
 8022654:	687b      	ldr	r3, [r7, #4]
 8022656:	0011      	movs	r1, r2
 8022658:	0018      	movs	r0, r3
 802265a:	f000 fc74 	bl	8022f46 <USBD_CtlError>
              break;
 802265e:	e000      	b.n	8022662 <USBD_StdEPReq+0x1b0>
              break;
 8022660:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8022662:	e0cd      	b.n	8022800 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8022664:	687a      	ldr	r2, [r7, #4]
 8022666:	23a7      	movs	r3, #167	@ 0xa7
 8022668:	009b      	lsls	r3, r3, #2
 802266a:	5cd3      	ldrb	r3, [r2, r3]
 802266c:	2b02      	cmp	r3, #2
 802266e:	d002      	beq.n	8022676 <USBD_StdEPReq+0x1c4>
 8022670:	2b03      	cmp	r3, #3
 8022672:	d03c      	beq.n	80226ee <USBD_StdEPReq+0x23c>
 8022674:	e0b5      	b.n	80227e2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8022676:	220e      	movs	r2, #14
 8022678:	18bb      	adds	r3, r7, r2
 802267a:	781b      	ldrb	r3, [r3, #0]
 802267c:	2b00      	cmp	r3, #0
 802267e:	d00a      	beq.n	8022696 <USBD_StdEPReq+0x1e4>
 8022680:	18bb      	adds	r3, r7, r2
 8022682:	781b      	ldrb	r3, [r3, #0]
 8022684:	2b80      	cmp	r3, #128	@ 0x80
 8022686:	d006      	beq.n	8022696 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8022688:	683a      	ldr	r2, [r7, #0]
 802268a:	687b      	ldr	r3, [r7, #4]
 802268c:	0011      	movs	r1, r2
 802268e:	0018      	movs	r0, r3
 8022690:	f000 fc59 	bl	8022f46 <USBD_CtlError>
                break;
 8022694:	e0ac      	b.n	80227f0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022696:	220e      	movs	r2, #14
 8022698:	18bb      	adds	r3, r7, r2
 802269a:	781b      	ldrb	r3, [r3, #0]
 802269c:	b25b      	sxtb	r3, r3
 802269e:	2b00      	cmp	r3, #0
 80226a0:	da0c      	bge.n	80226bc <USBD_StdEPReq+0x20a>
 80226a2:	18bb      	adds	r3, r7, r2
 80226a4:	781b      	ldrb	r3, [r3, #0]
 80226a6:	227f      	movs	r2, #127	@ 0x7f
 80226a8:	401a      	ands	r2, r3
 80226aa:	0013      	movs	r3, r2
 80226ac:	009b      	lsls	r3, r3, #2
 80226ae:	189b      	adds	r3, r3, r2
 80226b0:	009b      	lsls	r3, r3, #2
 80226b2:	3310      	adds	r3, #16
 80226b4:	687a      	ldr	r2, [r7, #4]
 80226b6:	18d3      	adds	r3, r2, r3
 80226b8:	3304      	adds	r3, #4
 80226ba:	e00d      	b.n	80226d8 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80226bc:	230e      	movs	r3, #14
 80226be:	18fb      	adds	r3, r7, r3
 80226c0:	781b      	ldrb	r3, [r3, #0]
 80226c2:	227f      	movs	r2, #127	@ 0x7f
 80226c4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80226c6:	0013      	movs	r3, r2
 80226c8:	009b      	lsls	r3, r3, #2
 80226ca:	189b      	adds	r3, r3, r2
 80226cc:	009b      	lsls	r3, r3, #2
 80226ce:	3351      	adds	r3, #81	@ 0x51
 80226d0:	33ff      	adds	r3, #255	@ 0xff
 80226d2:	687a      	ldr	r2, [r7, #4]
 80226d4:	18d3      	adds	r3, r2, r3
 80226d6:	3304      	adds	r3, #4
 80226d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80226da:	68bb      	ldr	r3, [r7, #8]
 80226dc:	2200      	movs	r2, #0
 80226de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80226e0:	68b9      	ldr	r1, [r7, #8]
 80226e2:	687b      	ldr	r3, [r7, #4]
 80226e4:	2202      	movs	r2, #2
 80226e6:	0018      	movs	r0, r3
 80226e8:	f000 fcab 	bl	8023042 <USBD_CtlSendData>
              break;
 80226ec:	e080      	b.n	80227f0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80226ee:	220e      	movs	r2, #14
 80226f0:	18bb      	adds	r3, r7, r2
 80226f2:	781b      	ldrb	r3, [r3, #0]
 80226f4:	b25b      	sxtb	r3, r3
 80226f6:	2b00      	cmp	r3, #0
 80226f8:	da14      	bge.n	8022724 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80226fa:	18bb      	adds	r3, r7, r2
 80226fc:	781b      	ldrb	r3, [r3, #0]
 80226fe:	220f      	movs	r2, #15
 8022700:	401a      	ands	r2, r3
 8022702:	6879      	ldr	r1, [r7, #4]
 8022704:	0013      	movs	r3, r2
 8022706:	009b      	lsls	r3, r3, #2
 8022708:	189b      	adds	r3, r3, r2
 802270a:	009b      	lsls	r3, r3, #2
 802270c:	18cb      	adds	r3, r1, r3
 802270e:	3318      	adds	r3, #24
 8022710:	681b      	ldr	r3, [r3, #0]
 8022712:	2b00      	cmp	r3, #0
 8022714:	d11e      	bne.n	8022754 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8022716:	683a      	ldr	r2, [r7, #0]
 8022718:	687b      	ldr	r3, [r7, #4]
 802271a:	0011      	movs	r1, r2
 802271c:	0018      	movs	r0, r3
 802271e:	f000 fc12 	bl	8022f46 <USBD_CtlError>
                  break;
 8022722:	e065      	b.n	80227f0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8022724:	230e      	movs	r3, #14
 8022726:	18fb      	adds	r3, r7, r3
 8022728:	781b      	ldrb	r3, [r3, #0]
 802272a:	220f      	movs	r2, #15
 802272c:	401a      	ands	r2, r3
 802272e:	6878      	ldr	r0, [r7, #4]
 8022730:	23ac      	movs	r3, #172	@ 0xac
 8022732:	0059      	lsls	r1, r3, #1
 8022734:	0013      	movs	r3, r2
 8022736:	009b      	lsls	r3, r3, #2
 8022738:	189b      	adds	r3, r3, r2
 802273a:	009b      	lsls	r3, r3, #2
 802273c:	18c3      	adds	r3, r0, r3
 802273e:	185b      	adds	r3, r3, r1
 8022740:	681b      	ldr	r3, [r3, #0]
 8022742:	2b00      	cmp	r3, #0
 8022744:	d106      	bne.n	8022754 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8022746:	683a      	ldr	r2, [r7, #0]
 8022748:	687b      	ldr	r3, [r7, #4]
 802274a:	0011      	movs	r1, r2
 802274c:	0018      	movs	r0, r3
 802274e:	f000 fbfa 	bl	8022f46 <USBD_CtlError>
                  break;
 8022752:	e04d      	b.n	80227f0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022754:	220e      	movs	r2, #14
 8022756:	18bb      	adds	r3, r7, r2
 8022758:	781b      	ldrb	r3, [r3, #0]
 802275a:	b25b      	sxtb	r3, r3
 802275c:	2b00      	cmp	r3, #0
 802275e:	da0c      	bge.n	802277a <USBD_StdEPReq+0x2c8>
 8022760:	18bb      	adds	r3, r7, r2
 8022762:	781b      	ldrb	r3, [r3, #0]
 8022764:	227f      	movs	r2, #127	@ 0x7f
 8022766:	401a      	ands	r2, r3
 8022768:	0013      	movs	r3, r2
 802276a:	009b      	lsls	r3, r3, #2
 802276c:	189b      	adds	r3, r3, r2
 802276e:	009b      	lsls	r3, r3, #2
 8022770:	3310      	adds	r3, #16
 8022772:	687a      	ldr	r2, [r7, #4]
 8022774:	18d3      	adds	r3, r2, r3
 8022776:	3304      	adds	r3, #4
 8022778:	e00d      	b.n	8022796 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802277a:	230e      	movs	r3, #14
 802277c:	18fb      	adds	r3, r7, r3
 802277e:	781b      	ldrb	r3, [r3, #0]
 8022780:	227f      	movs	r2, #127	@ 0x7f
 8022782:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022784:	0013      	movs	r3, r2
 8022786:	009b      	lsls	r3, r3, #2
 8022788:	189b      	adds	r3, r3, r2
 802278a:	009b      	lsls	r3, r3, #2
 802278c:	3351      	adds	r3, #81	@ 0x51
 802278e:	33ff      	adds	r3, #255	@ 0xff
 8022790:	687a      	ldr	r2, [r7, #4]
 8022792:	18d3      	adds	r3, r2, r3
 8022794:	3304      	adds	r3, #4
 8022796:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8022798:	220e      	movs	r2, #14
 802279a:	18bb      	adds	r3, r7, r2
 802279c:	781b      	ldrb	r3, [r3, #0]
 802279e:	2b00      	cmp	r3, #0
 80227a0:	d003      	beq.n	80227aa <USBD_StdEPReq+0x2f8>
 80227a2:	18bb      	adds	r3, r7, r2
 80227a4:	781b      	ldrb	r3, [r3, #0]
 80227a6:	2b80      	cmp	r3, #128	@ 0x80
 80227a8:	d103      	bne.n	80227b2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80227aa:	68bb      	ldr	r3, [r7, #8]
 80227ac:	2200      	movs	r2, #0
 80227ae:	601a      	str	r2, [r3, #0]
 80227b0:	e010      	b.n	80227d4 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80227b2:	230e      	movs	r3, #14
 80227b4:	18fb      	adds	r3, r7, r3
 80227b6:	781a      	ldrb	r2, [r3, #0]
 80227b8:	687b      	ldr	r3, [r7, #4]
 80227ba:	0011      	movs	r1, r2
 80227bc:	0018      	movs	r0, r3
 80227be:	f001 f94c 	bl	8023a5a <USBD_LL_IsStallEP>
 80227c2:	1e03      	subs	r3, r0, #0
 80227c4:	d003      	beq.n	80227ce <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80227c6:	68bb      	ldr	r3, [r7, #8]
 80227c8:	2201      	movs	r2, #1
 80227ca:	601a      	str	r2, [r3, #0]
 80227cc:	e002      	b.n	80227d4 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80227ce:	68bb      	ldr	r3, [r7, #8]
 80227d0:	2200      	movs	r2, #0
 80227d2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80227d4:	68b9      	ldr	r1, [r7, #8]
 80227d6:	687b      	ldr	r3, [r7, #4]
 80227d8:	2202      	movs	r2, #2
 80227da:	0018      	movs	r0, r3
 80227dc:	f000 fc31 	bl	8023042 <USBD_CtlSendData>
              break;
 80227e0:	e006      	b.n	80227f0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80227e2:	683a      	ldr	r2, [r7, #0]
 80227e4:	687b      	ldr	r3, [r7, #4]
 80227e6:	0011      	movs	r1, r2
 80227e8:	0018      	movs	r0, r3
 80227ea:	f000 fbac 	bl	8022f46 <USBD_CtlError>
              break;
 80227ee:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80227f0:	e006      	b.n	8022800 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80227f2:	683a      	ldr	r2, [r7, #0]
 80227f4:	687b      	ldr	r3, [r7, #4]
 80227f6:	0011      	movs	r1, r2
 80227f8:	0018      	movs	r0, r3
 80227fa:	f000 fba4 	bl	8022f46 <USBD_CtlError>
          break;
 80227fe:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8022800:	e006      	b.n	8022810 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8022802:	683a      	ldr	r2, [r7, #0]
 8022804:	687b      	ldr	r3, [r7, #4]
 8022806:	0011      	movs	r1, r2
 8022808:	0018      	movs	r0, r3
 802280a:	f000 fb9c 	bl	8022f46 <USBD_CtlError>
      break;
 802280e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8022810:	230f      	movs	r3, #15
 8022812:	18fb      	adds	r3, r7, r3
 8022814:	781b      	ldrb	r3, [r3, #0]
}
 8022816:	0018      	movs	r0, r3
 8022818:	46bd      	mov	sp, r7
 802281a:	b004      	add	sp, #16
 802281c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08022820 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8022820:	b580      	push	{r7, lr}
 8022822:	b084      	sub	sp, #16
 8022824:	af00      	add	r7, sp, #0
 8022826:	6078      	str	r0, [r7, #4]
 8022828:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802282a:	2308      	movs	r3, #8
 802282c:	18fb      	adds	r3, r7, r3
 802282e:	2200      	movs	r2, #0
 8022830:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8022832:	2300      	movs	r3, #0
 8022834:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8022836:	230b      	movs	r3, #11
 8022838:	18fb      	adds	r3, r7, r3
 802283a:	2200      	movs	r2, #0
 802283c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 802283e:	683b      	ldr	r3, [r7, #0]
 8022840:	885b      	ldrh	r3, [r3, #2]
 8022842:	0a1b      	lsrs	r3, r3, #8
 8022844:	b29b      	uxth	r3, r3
 8022846:	2b07      	cmp	r3, #7
 8022848:	d900      	bls.n	802284c <USBD_GetDescriptor+0x2c>
 802284a:	e159      	b.n	8022b00 <USBD_GetDescriptor+0x2e0>
 802284c:	009a      	lsls	r2, r3, #2
 802284e:	4bcb      	ldr	r3, [pc, #812]	@ (8022b7c <USBD_GetDescriptor+0x35c>)
 8022850:	18d3      	adds	r3, r2, r3
 8022852:	681b      	ldr	r3, [r3, #0]
 8022854:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8022856:	687a      	ldr	r2, [r7, #4]
 8022858:	23ac      	movs	r3, #172	@ 0xac
 802285a:	009b      	lsls	r3, r3, #2
 802285c:	58d3      	ldr	r3, [r2, r3]
 802285e:	681b      	ldr	r3, [r3, #0]
 8022860:	687a      	ldr	r2, [r7, #4]
 8022862:	7c12      	ldrb	r2, [r2, #16]
 8022864:	2108      	movs	r1, #8
 8022866:	1879      	adds	r1, r7, r1
 8022868:	0010      	movs	r0, r2
 802286a:	4798      	blx	r3
 802286c:	0003      	movs	r3, r0
 802286e:	60fb      	str	r3, [r7, #12]
      break;
 8022870:	e153      	b.n	8022b1a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8022872:	687b      	ldr	r3, [r7, #4]
 8022874:	7c1b      	ldrb	r3, [r3, #16]
 8022876:	2b00      	cmp	r3, #0
 8022878:	d10f      	bne.n	802289a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 802287a:	687a      	ldr	r2, [r7, #4]
 802287c:	23ad      	movs	r3, #173	@ 0xad
 802287e:	009b      	lsls	r3, r3, #2
 8022880:	58d3      	ldr	r3, [r2, r3]
 8022882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022884:	2208      	movs	r2, #8
 8022886:	18ba      	adds	r2, r7, r2
 8022888:	0010      	movs	r0, r2
 802288a:	4798      	blx	r3
 802288c:	0003      	movs	r3, r0
 802288e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8022890:	68fb      	ldr	r3, [r7, #12]
 8022892:	3301      	adds	r3, #1
 8022894:	2202      	movs	r2, #2
 8022896:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8022898:	e13f      	b.n	8022b1a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 802289a:	687a      	ldr	r2, [r7, #4]
 802289c:	23ad      	movs	r3, #173	@ 0xad
 802289e:	009b      	lsls	r3, r3, #2
 80228a0:	58d3      	ldr	r3, [r2, r3]
 80228a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80228a4:	2208      	movs	r2, #8
 80228a6:	18ba      	adds	r2, r7, r2
 80228a8:	0010      	movs	r0, r2
 80228aa:	4798      	blx	r3
 80228ac:	0003      	movs	r3, r0
 80228ae:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80228b0:	68fb      	ldr	r3, [r7, #12]
 80228b2:	3301      	adds	r3, #1
 80228b4:	2202      	movs	r2, #2
 80228b6:	701a      	strb	r2, [r3, #0]
      break;
 80228b8:	e12f      	b.n	8022b1a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80228ba:	683b      	ldr	r3, [r7, #0]
 80228bc:	885b      	ldrh	r3, [r3, #2]
 80228be:	b2db      	uxtb	r3, r3
 80228c0:	2b05      	cmp	r3, #5
 80228c2:	d900      	bls.n	80228c6 <USBD_GetDescriptor+0xa6>
 80228c4:	e0d0      	b.n	8022a68 <USBD_GetDescriptor+0x248>
 80228c6:	009a      	lsls	r2, r3, #2
 80228c8:	4bad      	ldr	r3, [pc, #692]	@ (8022b80 <USBD_GetDescriptor+0x360>)
 80228ca:	18d3      	adds	r3, r2, r3
 80228cc:	681b      	ldr	r3, [r3, #0]
 80228ce:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80228d0:	687a      	ldr	r2, [r7, #4]
 80228d2:	23ac      	movs	r3, #172	@ 0xac
 80228d4:	009b      	lsls	r3, r3, #2
 80228d6:	58d3      	ldr	r3, [r2, r3]
 80228d8:	685b      	ldr	r3, [r3, #4]
 80228da:	2b00      	cmp	r3, #0
 80228dc:	d00d      	beq.n	80228fa <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80228de:	687a      	ldr	r2, [r7, #4]
 80228e0:	23ac      	movs	r3, #172	@ 0xac
 80228e2:	009b      	lsls	r3, r3, #2
 80228e4:	58d3      	ldr	r3, [r2, r3]
 80228e6:	685b      	ldr	r3, [r3, #4]
 80228e8:	687a      	ldr	r2, [r7, #4]
 80228ea:	7c12      	ldrb	r2, [r2, #16]
 80228ec:	2108      	movs	r1, #8
 80228ee:	1879      	adds	r1, r7, r1
 80228f0:	0010      	movs	r0, r2
 80228f2:	4798      	blx	r3
 80228f4:	0003      	movs	r3, r0
 80228f6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80228f8:	e0c3      	b.n	8022a82 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80228fa:	683a      	ldr	r2, [r7, #0]
 80228fc:	687b      	ldr	r3, [r7, #4]
 80228fe:	0011      	movs	r1, r2
 8022900:	0018      	movs	r0, r3
 8022902:	f000 fb20 	bl	8022f46 <USBD_CtlError>
            err++;
 8022906:	210b      	movs	r1, #11
 8022908:	187b      	adds	r3, r7, r1
 802290a:	781a      	ldrb	r2, [r3, #0]
 802290c:	187b      	adds	r3, r7, r1
 802290e:	3201      	adds	r2, #1
 8022910:	701a      	strb	r2, [r3, #0]
          break;
 8022912:	e0b6      	b.n	8022a82 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8022914:	687a      	ldr	r2, [r7, #4]
 8022916:	23ac      	movs	r3, #172	@ 0xac
 8022918:	009b      	lsls	r3, r3, #2
 802291a:	58d3      	ldr	r3, [r2, r3]
 802291c:	689b      	ldr	r3, [r3, #8]
 802291e:	2b00      	cmp	r3, #0
 8022920:	d00d      	beq.n	802293e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8022922:	687a      	ldr	r2, [r7, #4]
 8022924:	23ac      	movs	r3, #172	@ 0xac
 8022926:	009b      	lsls	r3, r3, #2
 8022928:	58d3      	ldr	r3, [r2, r3]
 802292a:	689b      	ldr	r3, [r3, #8]
 802292c:	687a      	ldr	r2, [r7, #4]
 802292e:	7c12      	ldrb	r2, [r2, #16]
 8022930:	2108      	movs	r1, #8
 8022932:	1879      	adds	r1, r7, r1
 8022934:	0010      	movs	r0, r2
 8022936:	4798      	blx	r3
 8022938:	0003      	movs	r3, r0
 802293a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802293c:	e0a1      	b.n	8022a82 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802293e:	683a      	ldr	r2, [r7, #0]
 8022940:	687b      	ldr	r3, [r7, #4]
 8022942:	0011      	movs	r1, r2
 8022944:	0018      	movs	r0, r3
 8022946:	f000 fafe 	bl	8022f46 <USBD_CtlError>
            err++;
 802294a:	210b      	movs	r1, #11
 802294c:	187b      	adds	r3, r7, r1
 802294e:	781a      	ldrb	r2, [r3, #0]
 8022950:	187b      	adds	r3, r7, r1
 8022952:	3201      	adds	r2, #1
 8022954:	701a      	strb	r2, [r3, #0]
          break;
 8022956:	e094      	b.n	8022a82 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8022958:	687a      	ldr	r2, [r7, #4]
 802295a:	23ac      	movs	r3, #172	@ 0xac
 802295c:	009b      	lsls	r3, r3, #2
 802295e:	58d3      	ldr	r3, [r2, r3]
 8022960:	68db      	ldr	r3, [r3, #12]
 8022962:	2b00      	cmp	r3, #0
 8022964:	d00d      	beq.n	8022982 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8022966:	687a      	ldr	r2, [r7, #4]
 8022968:	23ac      	movs	r3, #172	@ 0xac
 802296a:	009b      	lsls	r3, r3, #2
 802296c:	58d3      	ldr	r3, [r2, r3]
 802296e:	68db      	ldr	r3, [r3, #12]
 8022970:	687a      	ldr	r2, [r7, #4]
 8022972:	7c12      	ldrb	r2, [r2, #16]
 8022974:	2108      	movs	r1, #8
 8022976:	1879      	adds	r1, r7, r1
 8022978:	0010      	movs	r0, r2
 802297a:	4798      	blx	r3
 802297c:	0003      	movs	r3, r0
 802297e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022980:	e07f      	b.n	8022a82 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022982:	683a      	ldr	r2, [r7, #0]
 8022984:	687b      	ldr	r3, [r7, #4]
 8022986:	0011      	movs	r1, r2
 8022988:	0018      	movs	r0, r3
 802298a:	f000 fadc 	bl	8022f46 <USBD_CtlError>
            err++;
 802298e:	210b      	movs	r1, #11
 8022990:	187b      	adds	r3, r7, r1
 8022992:	781a      	ldrb	r2, [r3, #0]
 8022994:	187b      	adds	r3, r7, r1
 8022996:	3201      	adds	r2, #1
 8022998:	701a      	strb	r2, [r3, #0]
          break;
 802299a:	e072      	b.n	8022a82 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 802299c:	687a      	ldr	r2, [r7, #4]
 802299e:	23ac      	movs	r3, #172	@ 0xac
 80229a0:	009b      	lsls	r3, r3, #2
 80229a2:	58d3      	ldr	r3, [r2, r3]
 80229a4:	691b      	ldr	r3, [r3, #16]
 80229a6:	2b00      	cmp	r3, #0
 80229a8:	d00d      	beq.n	80229c6 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80229aa:	687a      	ldr	r2, [r7, #4]
 80229ac:	23ac      	movs	r3, #172	@ 0xac
 80229ae:	009b      	lsls	r3, r3, #2
 80229b0:	58d3      	ldr	r3, [r2, r3]
 80229b2:	691b      	ldr	r3, [r3, #16]
 80229b4:	687a      	ldr	r2, [r7, #4]
 80229b6:	7c12      	ldrb	r2, [r2, #16]
 80229b8:	2108      	movs	r1, #8
 80229ba:	1879      	adds	r1, r7, r1
 80229bc:	0010      	movs	r0, r2
 80229be:	4798      	blx	r3
 80229c0:	0003      	movs	r3, r0
 80229c2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80229c4:	e05d      	b.n	8022a82 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80229c6:	683a      	ldr	r2, [r7, #0]
 80229c8:	687b      	ldr	r3, [r7, #4]
 80229ca:	0011      	movs	r1, r2
 80229cc:	0018      	movs	r0, r3
 80229ce:	f000 faba 	bl	8022f46 <USBD_CtlError>
            err++;
 80229d2:	210b      	movs	r1, #11
 80229d4:	187b      	adds	r3, r7, r1
 80229d6:	781a      	ldrb	r2, [r3, #0]
 80229d8:	187b      	adds	r3, r7, r1
 80229da:	3201      	adds	r2, #1
 80229dc:	701a      	strb	r2, [r3, #0]
          break;
 80229de:	e050      	b.n	8022a82 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80229e0:	687a      	ldr	r2, [r7, #4]
 80229e2:	23ac      	movs	r3, #172	@ 0xac
 80229e4:	009b      	lsls	r3, r3, #2
 80229e6:	58d3      	ldr	r3, [r2, r3]
 80229e8:	695b      	ldr	r3, [r3, #20]
 80229ea:	2b00      	cmp	r3, #0
 80229ec:	d00d      	beq.n	8022a0a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80229ee:	687a      	ldr	r2, [r7, #4]
 80229f0:	23ac      	movs	r3, #172	@ 0xac
 80229f2:	009b      	lsls	r3, r3, #2
 80229f4:	58d3      	ldr	r3, [r2, r3]
 80229f6:	695b      	ldr	r3, [r3, #20]
 80229f8:	687a      	ldr	r2, [r7, #4]
 80229fa:	7c12      	ldrb	r2, [r2, #16]
 80229fc:	2108      	movs	r1, #8
 80229fe:	1879      	adds	r1, r7, r1
 8022a00:	0010      	movs	r0, r2
 8022a02:	4798      	blx	r3
 8022a04:	0003      	movs	r3, r0
 8022a06:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022a08:	e03b      	b.n	8022a82 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022a0a:	683a      	ldr	r2, [r7, #0]
 8022a0c:	687b      	ldr	r3, [r7, #4]
 8022a0e:	0011      	movs	r1, r2
 8022a10:	0018      	movs	r0, r3
 8022a12:	f000 fa98 	bl	8022f46 <USBD_CtlError>
            err++;
 8022a16:	210b      	movs	r1, #11
 8022a18:	187b      	adds	r3, r7, r1
 8022a1a:	781a      	ldrb	r2, [r3, #0]
 8022a1c:	187b      	adds	r3, r7, r1
 8022a1e:	3201      	adds	r2, #1
 8022a20:	701a      	strb	r2, [r3, #0]
          break;
 8022a22:	e02e      	b.n	8022a82 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8022a24:	687a      	ldr	r2, [r7, #4]
 8022a26:	23ac      	movs	r3, #172	@ 0xac
 8022a28:	009b      	lsls	r3, r3, #2
 8022a2a:	58d3      	ldr	r3, [r2, r3]
 8022a2c:	699b      	ldr	r3, [r3, #24]
 8022a2e:	2b00      	cmp	r3, #0
 8022a30:	d00d      	beq.n	8022a4e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8022a32:	687a      	ldr	r2, [r7, #4]
 8022a34:	23ac      	movs	r3, #172	@ 0xac
 8022a36:	009b      	lsls	r3, r3, #2
 8022a38:	58d3      	ldr	r3, [r2, r3]
 8022a3a:	699b      	ldr	r3, [r3, #24]
 8022a3c:	687a      	ldr	r2, [r7, #4]
 8022a3e:	7c12      	ldrb	r2, [r2, #16]
 8022a40:	2108      	movs	r1, #8
 8022a42:	1879      	adds	r1, r7, r1
 8022a44:	0010      	movs	r0, r2
 8022a46:	4798      	blx	r3
 8022a48:	0003      	movs	r3, r0
 8022a4a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022a4c:	e019      	b.n	8022a82 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022a4e:	683a      	ldr	r2, [r7, #0]
 8022a50:	687b      	ldr	r3, [r7, #4]
 8022a52:	0011      	movs	r1, r2
 8022a54:	0018      	movs	r0, r3
 8022a56:	f000 fa76 	bl	8022f46 <USBD_CtlError>
            err++;
 8022a5a:	210b      	movs	r1, #11
 8022a5c:	187b      	adds	r3, r7, r1
 8022a5e:	781a      	ldrb	r2, [r3, #0]
 8022a60:	187b      	adds	r3, r7, r1
 8022a62:	3201      	adds	r2, #1
 8022a64:	701a      	strb	r2, [r3, #0]
          break;
 8022a66:	e00c      	b.n	8022a82 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8022a68:	683a      	ldr	r2, [r7, #0]
 8022a6a:	687b      	ldr	r3, [r7, #4]
 8022a6c:	0011      	movs	r1, r2
 8022a6e:	0018      	movs	r0, r3
 8022a70:	f000 fa69 	bl	8022f46 <USBD_CtlError>
          err++;
 8022a74:	210b      	movs	r1, #11
 8022a76:	187b      	adds	r3, r7, r1
 8022a78:	781a      	ldrb	r2, [r3, #0]
 8022a7a:	187b      	adds	r3, r7, r1
 8022a7c:	3201      	adds	r2, #1
 8022a7e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8022a80:	e04b      	b.n	8022b1a <USBD_GetDescriptor+0x2fa>
 8022a82:	e04a      	b.n	8022b1a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8022a84:	687b      	ldr	r3, [r7, #4]
 8022a86:	7c1b      	ldrb	r3, [r3, #16]
 8022a88:	2b00      	cmp	r3, #0
 8022a8a:	d10b      	bne.n	8022aa4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8022a8c:	687a      	ldr	r2, [r7, #4]
 8022a8e:	23ad      	movs	r3, #173	@ 0xad
 8022a90:	009b      	lsls	r3, r3, #2
 8022a92:	58d3      	ldr	r3, [r2, r3]
 8022a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a96:	2208      	movs	r2, #8
 8022a98:	18ba      	adds	r2, r7, r2
 8022a9a:	0010      	movs	r0, r2
 8022a9c:	4798      	blx	r3
 8022a9e:	0003      	movs	r3, r0
 8022aa0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8022aa2:	e03a      	b.n	8022b1a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8022aa4:	683a      	ldr	r2, [r7, #0]
 8022aa6:	687b      	ldr	r3, [r7, #4]
 8022aa8:	0011      	movs	r1, r2
 8022aaa:	0018      	movs	r0, r3
 8022aac:	f000 fa4b 	bl	8022f46 <USBD_CtlError>
        err++;
 8022ab0:	210b      	movs	r1, #11
 8022ab2:	187b      	adds	r3, r7, r1
 8022ab4:	781a      	ldrb	r2, [r3, #0]
 8022ab6:	187b      	adds	r3, r7, r1
 8022ab8:	3201      	adds	r2, #1
 8022aba:	701a      	strb	r2, [r3, #0]
      break;
 8022abc:	e02d      	b.n	8022b1a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8022abe:	687b      	ldr	r3, [r7, #4]
 8022ac0:	7c1b      	ldrb	r3, [r3, #16]
 8022ac2:	2b00      	cmp	r3, #0
 8022ac4:	d10f      	bne.n	8022ae6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8022ac6:	687a      	ldr	r2, [r7, #4]
 8022ac8:	23ad      	movs	r3, #173	@ 0xad
 8022aca:	009b      	lsls	r3, r3, #2
 8022acc:	58d3      	ldr	r3, [r2, r3]
 8022ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022ad0:	2208      	movs	r2, #8
 8022ad2:	18ba      	adds	r2, r7, r2
 8022ad4:	0010      	movs	r0, r2
 8022ad6:	4798      	blx	r3
 8022ad8:	0003      	movs	r3, r0
 8022ada:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8022adc:	68fb      	ldr	r3, [r7, #12]
 8022ade:	3301      	adds	r3, #1
 8022ae0:	2207      	movs	r2, #7
 8022ae2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8022ae4:	e019      	b.n	8022b1a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8022ae6:	683a      	ldr	r2, [r7, #0]
 8022ae8:	687b      	ldr	r3, [r7, #4]
 8022aea:	0011      	movs	r1, r2
 8022aec:	0018      	movs	r0, r3
 8022aee:	f000 fa2a 	bl	8022f46 <USBD_CtlError>
        err++;
 8022af2:	210b      	movs	r1, #11
 8022af4:	187b      	adds	r3, r7, r1
 8022af6:	781a      	ldrb	r2, [r3, #0]
 8022af8:	187b      	adds	r3, r7, r1
 8022afa:	3201      	adds	r2, #1
 8022afc:	701a      	strb	r2, [r3, #0]
      break;
 8022afe:	e00c      	b.n	8022b1a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8022b00:	683a      	ldr	r2, [r7, #0]
 8022b02:	687b      	ldr	r3, [r7, #4]
 8022b04:	0011      	movs	r1, r2
 8022b06:	0018      	movs	r0, r3
 8022b08:	f000 fa1d 	bl	8022f46 <USBD_CtlError>
      err++;
 8022b0c:	210b      	movs	r1, #11
 8022b0e:	187b      	adds	r3, r7, r1
 8022b10:	781a      	ldrb	r2, [r3, #0]
 8022b12:	187b      	adds	r3, r7, r1
 8022b14:	3201      	adds	r2, #1
 8022b16:	701a      	strb	r2, [r3, #0]
      break;
 8022b18:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8022b1a:	230b      	movs	r3, #11
 8022b1c:	18fb      	adds	r3, r7, r3
 8022b1e:	781b      	ldrb	r3, [r3, #0]
 8022b20:	2b00      	cmp	r3, #0
 8022b22:	d127      	bne.n	8022b74 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8022b24:	2108      	movs	r1, #8
 8022b26:	187b      	adds	r3, r7, r1
 8022b28:	881b      	ldrh	r3, [r3, #0]
 8022b2a:	2b00      	cmp	r3, #0
 8022b2c:	d019      	beq.n	8022b62 <USBD_GetDescriptor+0x342>
 8022b2e:	683b      	ldr	r3, [r7, #0]
 8022b30:	88db      	ldrh	r3, [r3, #6]
 8022b32:	2b00      	cmp	r3, #0
 8022b34:	d015      	beq.n	8022b62 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8022b36:	683b      	ldr	r3, [r7, #0]
 8022b38:	88da      	ldrh	r2, [r3, #6]
 8022b3a:	187b      	adds	r3, r7, r1
 8022b3c:	881b      	ldrh	r3, [r3, #0]
 8022b3e:	1c18      	adds	r0, r3, #0
 8022b40:	1c11      	adds	r1, r2, #0
 8022b42:	b28a      	uxth	r2, r1
 8022b44:	b283      	uxth	r3, r0
 8022b46:	429a      	cmp	r2, r3
 8022b48:	d900      	bls.n	8022b4c <USBD_GetDescriptor+0x32c>
 8022b4a:	1c01      	adds	r1, r0, #0
 8022b4c:	b28a      	uxth	r2, r1
 8022b4e:	2108      	movs	r1, #8
 8022b50:	187b      	adds	r3, r7, r1
 8022b52:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8022b54:	187b      	adds	r3, r7, r1
 8022b56:	881a      	ldrh	r2, [r3, #0]
 8022b58:	68f9      	ldr	r1, [r7, #12]
 8022b5a:	687b      	ldr	r3, [r7, #4]
 8022b5c:	0018      	movs	r0, r3
 8022b5e:	f000 fa70 	bl	8023042 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8022b62:	683b      	ldr	r3, [r7, #0]
 8022b64:	88db      	ldrh	r3, [r3, #6]
 8022b66:	2b00      	cmp	r3, #0
 8022b68:	d105      	bne.n	8022b76 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8022b6a:	687b      	ldr	r3, [r7, #4]
 8022b6c:	0018      	movs	r0, r3
 8022b6e:	f000 fad2 	bl	8023116 <USBD_CtlSendStatus>
 8022b72:	e000      	b.n	8022b76 <USBD_GetDescriptor+0x356>
    return;
 8022b74:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8022b76:	46bd      	mov	sp, r7
 8022b78:	b004      	add	sp, #16
 8022b7a:	bd80      	pop	{r7, pc}
 8022b7c:	0802e950 	.word	0x0802e950
 8022b80:	0802e970 	.word	0x0802e970

08022b84 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022b84:	b590      	push	{r4, r7, lr}
 8022b86:	b085      	sub	sp, #20
 8022b88:	af00      	add	r7, sp, #0
 8022b8a:	6078      	str	r0, [r7, #4]
 8022b8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8022b8e:	683b      	ldr	r3, [r7, #0]
 8022b90:	889b      	ldrh	r3, [r3, #4]
 8022b92:	2b00      	cmp	r3, #0
 8022b94:	d13d      	bne.n	8022c12 <USBD_SetAddress+0x8e>
 8022b96:	683b      	ldr	r3, [r7, #0]
 8022b98:	88db      	ldrh	r3, [r3, #6]
 8022b9a:	2b00      	cmp	r3, #0
 8022b9c:	d139      	bne.n	8022c12 <USBD_SetAddress+0x8e>
 8022b9e:	683b      	ldr	r3, [r7, #0]
 8022ba0:	885b      	ldrh	r3, [r3, #2]
 8022ba2:	2b7f      	cmp	r3, #127	@ 0x7f
 8022ba4:	d835      	bhi.n	8022c12 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8022ba6:	683b      	ldr	r3, [r7, #0]
 8022ba8:	885b      	ldrh	r3, [r3, #2]
 8022baa:	b2da      	uxtb	r2, r3
 8022bac:	230f      	movs	r3, #15
 8022bae:	18fb      	adds	r3, r7, r3
 8022bb0:	217f      	movs	r1, #127	@ 0x7f
 8022bb2:	400a      	ands	r2, r1
 8022bb4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022bb6:	687a      	ldr	r2, [r7, #4]
 8022bb8:	23a7      	movs	r3, #167	@ 0xa7
 8022bba:	009b      	lsls	r3, r3, #2
 8022bbc:	5cd3      	ldrb	r3, [r2, r3]
 8022bbe:	2b03      	cmp	r3, #3
 8022bc0:	d106      	bne.n	8022bd0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8022bc2:	683a      	ldr	r2, [r7, #0]
 8022bc4:	687b      	ldr	r3, [r7, #4]
 8022bc6:	0011      	movs	r1, r2
 8022bc8:	0018      	movs	r0, r3
 8022bca:	f000 f9bc 	bl	8022f46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022bce:	e027      	b.n	8022c20 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8022bd0:	687b      	ldr	r3, [r7, #4]
 8022bd2:	240f      	movs	r4, #15
 8022bd4:	193a      	adds	r2, r7, r4
 8022bd6:	4914      	ldr	r1, [pc, #80]	@ (8022c28 <USBD_SetAddress+0xa4>)
 8022bd8:	7812      	ldrb	r2, [r2, #0]
 8022bda:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8022bdc:	193b      	adds	r3, r7, r4
 8022bde:	781a      	ldrb	r2, [r3, #0]
 8022be0:	687b      	ldr	r3, [r7, #4]
 8022be2:	0011      	movs	r1, r2
 8022be4:	0018      	movs	r0, r3
 8022be6:	f000 ff69 	bl	8023abc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8022bea:	687b      	ldr	r3, [r7, #4]
 8022bec:	0018      	movs	r0, r3
 8022bee:	f000 fa92 	bl	8023116 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8022bf2:	193b      	adds	r3, r7, r4
 8022bf4:	781b      	ldrb	r3, [r3, #0]
 8022bf6:	2b00      	cmp	r3, #0
 8022bf8:	d005      	beq.n	8022c06 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8022bfa:	687a      	ldr	r2, [r7, #4]
 8022bfc:	23a7      	movs	r3, #167	@ 0xa7
 8022bfe:	009b      	lsls	r3, r3, #2
 8022c00:	2102      	movs	r1, #2
 8022c02:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022c04:	e00c      	b.n	8022c20 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8022c06:	687a      	ldr	r2, [r7, #4]
 8022c08:	23a7      	movs	r3, #167	@ 0xa7
 8022c0a:	009b      	lsls	r3, r3, #2
 8022c0c:	2101      	movs	r1, #1
 8022c0e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022c10:	e006      	b.n	8022c20 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8022c12:	683a      	ldr	r2, [r7, #0]
 8022c14:	687b      	ldr	r3, [r7, #4]
 8022c16:	0011      	movs	r1, r2
 8022c18:	0018      	movs	r0, r3
 8022c1a:	f000 f994 	bl	8022f46 <USBD_CtlError>
  }
}
 8022c1e:	46c0      	nop			@ (mov r8, r8)
 8022c20:	46c0      	nop			@ (mov r8, r8)
 8022c22:	46bd      	mov	sp, r7
 8022c24:	b005      	add	sp, #20
 8022c26:	bd90      	pop	{r4, r7, pc}
 8022c28:	0000029e 	.word	0x0000029e

08022c2c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022c2c:	b580      	push	{r7, lr}
 8022c2e:	b082      	sub	sp, #8
 8022c30:	af00      	add	r7, sp, #0
 8022c32:	6078      	str	r0, [r7, #4]
 8022c34:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8022c36:	683b      	ldr	r3, [r7, #0]
 8022c38:	885b      	ldrh	r3, [r3, #2]
 8022c3a:	b2da      	uxtb	r2, r3
 8022c3c:	4b4c      	ldr	r3, [pc, #304]	@ (8022d70 <USBD_SetConfig+0x144>)
 8022c3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8022c40:	4b4b      	ldr	r3, [pc, #300]	@ (8022d70 <USBD_SetConfig+0x144>)
 8022c42:	781b      	ldrb	r3, [r3, #0]
 8022c44:	2b01      	cmp	r3, #1
 8022c46:	d906      	bls.n	8022c56 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8022c48:	683a      	ldr	r2, [r7, #0]
 8022c4a:	687b      	ldr	r3, [r7, #4]
 8022c4c:	0011      	movs	r1, r2
 8022c4e:	0018      	movs	r0, r3
 8022c50:	f000 f979 	bl	8022f46 <USBD_CtlError>
 8022c54:	e088      	b.n	8022d68 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8022c56:	687a      	ldr	r2, [r7, #4]
 8022c58:	23a7      	movs	r3, #167	@ 0xa7
 8022c5a:	009b      	lsls	r3, r3, #2
 8022c5c:	5cd3      	ldrb	r3, [r2, r3]
 8022c5e:	2b02      	cmp	r3, #2
 8022c60:	d002      	beq.n	8022c68 <USBD_SetConfig+0x3c>
 8022c62:	2b03      	cmp	r3, #3
 8022c64:	d029      	beq.n	8022cba <USBD_SetConfig+0x8e>
 8022c66:	e071      	b.n	8022d4c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8022c68:	4b41      	ldr	r3, [pc, #260]	@ (8022d70 <USBD_SetConfig+0x144>)
 8022c6a:	781b      	ldrb	r3, [r3, #0]
 8022c6c:	2b00      	cmp	r3, #0
 8022c6e:	d01f      	beq.n	8022cb0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8022c70:	4b3f      	ldr	r3, [pc, #252]	@ (8022d70 <USBD_SetConfig+0x144>)
 8022c72:	781b      	ldrb	r3, [r3, #0]
 8022c74:	001a      	movs	r2, r3
 8022c76:	687b      	ldr	r3, [r7, #4]
 8022c78:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8022c7a:	687a      	ldr	r2, [r7, #4]
 8022c7c:	23a7      	movs	r3, #167	@ 0xa7
 8022c7e:	009b      	lsls	r3, r3, #2
 8022c80:	2103      	movs	r1, #3
 8022c82:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8022c84:	4b3a      	ldr	r3, [pc, #232]	@ (8022d70 <USBD_SetConfig+0x144>)
 8022c86:	781a      	ldrb	r2, [r3, #0]
 8022c88:	687b      	ldr	r3, [r7, #4]
 8022c8a:	0011      	movs	r1, r2
 8022c8c:	0018      	movs	r0, r3
 8022c8e:	f7ff f8c6 	bl	8021e1e <USBD_SetClassConfig>
 8022c92:	0003      	movs	r3, r0
 8022c94:	2b02      	cmp	r3, #2
 8022c96:	d106      	bne.n	8022ca6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8022c98:	683a      	ldr	r2, [r7, #0]
 8022c9a:	687b      	ldr	r3, [r7, #4]
 8022c9c:	0011      	movs	r1, r2
 8022c9e:	0018      	movs	r0, r3
 8022ca0:	f000 f951 	bl	8022f46 <USBD_CtlError>
            return;
 8022ca4:	e060      	b.n	8022d68 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8022ca6:	687b      	ldr	r3, [r7, #4]
 8022ca8:	0018      	movs	r0, r3
 8022caa:	f000 fa34 	bl	8023116 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8022cae:	e05b      	b.n	8022d68 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022cb0:	687b      	ldr	r3, [r7, #4]
 8022cb2:	0018      	movs	r0, r3
 8022cb4:	f000 fa2f 	bl	8023116 <USBD_CtlSendStatus>
        break;
 8022cb8:	e056      	b.n	8022d68 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8022cba:	4b2d      	ldr	r3, [pc, #180]	@ (8022d70 <USBD_SetConfig+0x144>)
 8022cbc:	781b      	ldrb	r3, [r3, #0]
 8022cbe:	2b00      	cmp	r3, #0
 8022cc0:	d115      	bne.n	8022cee <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8022cc2:	687a      	ldr	r2, [r7, #4]
 8022cc4:	23a7      	movs	r3, #167	@ 0xa7
 8022cc6:	009b      	lsls	r3, r3, #2
 8022cc8:	2102      	movs	r1, #2
 8022cca:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8022ccc:	4b28      	ldr	r3, [pc, #160]	@ (8022d70 <USBD_SetConfig+0x144>)
 8022cce:	781b      	ldrb	r3, [r3, #0]
 8022cd0:	001a      	movs	r2, r3
 8022cd2:	687b      	ldr	r3, [r7, #4]
 8022cd4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8022cd6:	4b26      	ldr	r3, [pc, #152]	@ (8022d70 <USBD_SetConfig+0x144>)
 8022cd8:	781a      	ldrb	r2, [r3, #0]
 8022cda:	687b      	ldr	r3, [r7, #4]
 8022cdc:	0011      	movs	r1, r2
 8022cde:	0018      	movs	r0, r3
 8022ce0:	f7ff f8c4 	bl	8021e6c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8022ce4:	687b      	ldr	r3, [r7, #4]
 8022ce6:	0018      	movs	r0, r3
 8022ce8:	f000 fa15 	bl	8023116 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8022cec:	e03c      	b.n	8022d68 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8022cee:	4b20      	ldr	r3, [pc, #128]	@ (8022d70 <USBD_SetConfig+0x144>)
 8022cf0:	781b      	ldrb	r3, [r3, #0]
 8022cf2:	001a      	movs	r2, r3
 8022cf4:	687b      	ldr	r3, [r7, #4]
 8022cf6:	685b      	ldr	r3, [r3, #4]
 8022cf8:	429a      	cmp	r2, r3
 8022cfa:	d022      	beq.n	8022d42 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8022cfc:	687b      	ldr	r3, [r7, #4]
 8022cfe:	685b      	ldr	r3, [r3, #4]
 8022d00:	b2da      	uxtb	r2, r3
 8022d02:	687b      	ldr	r3, [r7, #4]
 8022d04:	0011      	movs	r1, r2
 8022d06:	0018      	movs	r0, r3
 8022d08:	f7ff f8b0 	bl	8021e6c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8022d0c:	4b18      	ldr	r3, [pc, #96]	@ (8022d70 <USBD_SetConfig+0x144>)
 8022d0e:	781b      	ldrb	r3, [r3, #0]
 8022d10:	001a      	movs	r2, r3
 8022d12:	687b      	ldr	r3, [r7, #4]
 8022d14:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8022d16:	4b16      	ldr	r3, [pc, #88]	@ (8022d70 <USBD_SetConfig+0x144>)
 8022d18:	781a      	ldrb	r2, [r3, #0]
 8022d1a:	687b      	ldr	r3, [r7, #4]
 8022d1c:	0011      	movs	r1, r2
 8022d1e:	0018      	movs	r0, r3
 8022d20:	f7ff f87d 	bl	8021e1e <USBD_SetClassConfig>
 8022d24:	0003      	movs	r3, r0
 8022d26:	2b02      	cmp	r3, #2
 8022d28:	d106      	bne.n	8022d38 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8022d2a:	683a      	ldr	r2, [r7, #0]
 8022d2c:	687b      	ldr	r3, [r7, #4]
 8022d2e:	0011      	movs	r1, r2
 8022d30:	0018      	movs	r0, r3
 8022d32:	f000 f908 	bl	8022f46 <USBD_CtlError>
            return;
 8022d36:	e017      	b.n	8022d68 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022d38:	687b      	ldr	r3, [r7, #4]
 8022d3a:	0018      	movs	r0, r3
 8022d3c:	f000 f9eb 	bl	8023116 <USBD_CtlSendStatus>
        break;
 8022d40:	e012      	b.n	8022d68 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022d42:	687b      	ldr	r3, [r7, #4]
 8022d44:	0018      	movs	r0, r3
 8022d46:	f000 f9e6 	bl	8023116 <USBD_CtlSendStatus>
        break;
 8022d4a:	e00d      	b.n	8022d68 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8022d4c:	683a      	ldr	r2, [r7, #0]
 8022d4e:	687b      	ldr	r3, [r7, #4]
 8022d50:	0011      	movs	r1, r2
 8022d52:	0018      	movs	r0, r3
 8022d54:	f000 f8f7 	bl	8022f46 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8022d58:	4b05      	ldr	r3, [pc, #20]	@ (8022d70 <USBD_SetConfig+0x144>)
 8022d5a:	781a      	ldrb	r2, [r3, #0]
 8022d5c:	687b      	ldr	r3, [r7, #4]
 8022d5e:	0011      	movs	r1, r2
 8022d60:	0018      	movs	r0, r3
 8022d62:	f7ff f883 	bl	8021e6c <USBD_ClrClassConfig>
        break;
 8022d66:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8022d68:	46bd      	mov	sp, r7
 8022d6a:	b002      	add	sp, #8
 8022d6c:	bd80      	pop	{r7, pc}
 8022d6e:	46c0      	nop			@ (mov r8, r8)
 8022d70:	20002530 	.word	0x20002530

08022d74 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022d74:	b580      	push	{r7, lr}
 8022d76:	b082      	sub	sp, #8
 8022d78:	af00      	add	r7, sp, #0
 8022d7a:	6078      	str	r0, [r7, #4]
 8022d7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8022d7e:	683b      	ldr	r3, [r7, #0]
 8022d80:	88db      	ldrh	r3, [r3, #6]
 8022d82:	2b01      	cmp	r3, #1
 8022d84:	d006      	beq.n	8022d94 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8022d86:	683a      	ldr	r2, [r7, #0]
 8022d88:	687b      	ldr	r3, [r7, #4]
 8022d8a:	0011      	movs	r1, r2
 8022d8c:	0018      	movs	r0, r3
 8022d8e:	f000 f8da 	bl	8022f46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8022d92:	e026      	b.n	8022de2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8022d94:	687a      	ldr	r2, [r7, #4]
 8022d96:	23a7      	movs	r3, #167	@ 0xa7
 8022d98:	009b      	lsls	r3, r3, #2
 8022d9a:	5cd3      	ldrb	r3, [r2, r3]
 8022d9c:	2b02      	cmp	r3, #2
 8022d9e:	dc02      	bgt.n	8022da6 <USBD_GetConfig+0x32>
 8022da0:	2b00      	cmp	r3, #0
 8022da2:	dc03      	bgt.n	8022dac <USBD_GetConfig+0x38>
 8022da4:	e016      	b.n	8022dd4 <USBD_GetConfig+0x60>
 8022da6:	2b03      	cmp	r3, #3
 8022da8:	d00c      	beq.n	8022dc4 <USBD_GetConfig+0x50>
 8022daa:	e013      	b.n	8022dd4 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8022dac:	687b      	ldr	r3, [r7, #4]
 8022dae:	2200      	movs	r2, #0
 8022db0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8022db2:	687b      	ldr	r3, [r7, #4]
 8022db4:	3308      	adds	r3, #8
 8022db6:	0019      	movs	r1, r3
 8022db8:	687b      	ldr	r3, [r7, #4]
 8022dba:	2201      	movs	r2, #1
 8022dbc:	0018      	movs	r0, r3
 8022dbe:	f000 f940 	bl	8023042 <USBD_CtlSendData>
        break;
 8022dc2:	e00e      	b.n	8022de2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8022dc4:	687b      	ldr	r3, [r7, #4]
 8022dc6:	1d19      	adds	r1, r3, #4
 8022dc8:	687b      	ldr	r3, [r7, #4]
 8022dca:	2201      	movs	r2, #1
 8022dcc:	0018      	movs	r0, r3
 8022dce:	f000 f938 	bl	8023042 <USBD_CtlSendData>
        break;
 8022dd2:	e006      	b.n	8022de2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8022dd4:	683a      	ldr	r2, [r7, #0]
 8022dd6:	687b      	ldr	r3, [r7, #4]
 8022dd8:	0011      	movs	r1, r2
 8022dda:	0018      	movs	r0, r3
 8022ddc:	f000 f8b3 	bl	8022f46 <USBD_CtlError>
        break;
 8022de0:	46c0      	nop			@ (mov r8, r8)
}
 8022de2:	46c0      	nop			@ (mov r8, r8)
 8022de4:	46bd      	mov	sp, r7
 8022de6:	b002      	add	sp, #8
 8022de8:	bd80      	pop	{r7, pc}

08022dea <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022dea:	b580      	push	{r7, lr}
 8022dec:	b082      	sub	sp, #8
 8022dee:	af00      	add	r7, sp, #0
 8022df0:	6078      	str	r0, [r7, #4]
 8022df2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022df4:	687a      	ldr	r2, [r7, #4]
 8022df6:	23a7      	movs	r3, #167	@ 0xa7
 8022df8:	009b      	lsls	r3, r3, #2
 8022dfa:	5cd3      	ldrb	r3, [r2, r3]
 8022dfc:	3b01      	subs	r3, #1
 8022dfe:	2b02      	cmp	r3, #2
 8022e00:	d822      	bhi.n	8022e48 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8022e02:	683b      	ldr	r3, [r7, #0]
 8022e04:	88db      	ldrh	r3, [r3, #6]
 8022e06:	2b02      	cmp	r3, #2
 8022e08:	d006      	beq.n	8022e18 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8022e0a:	683a      	ldr	r2, [r7, #0]
 8022e0c:	687b      	ldr	r3, [r7, #4]
 8022e0e:	0011      	movs	r1, r2
 8022e10:	0018      	movs	r0, r3
 8022e12:	f000 f898 	bl	8022f46 <USBD_CtlError>
        break;
 8022e16:	e01e      	b.n	8022e56 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8022e18:	687b      	ldr	r3, [r7, #4]
 8022e1a:	2201      	movs	r2, #1
 8022e1c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8022e1e:	687a      	ldr	r2, [r7, #4]
 8022e20:	23a9      	movs	r3, #169	@ 0xa9
 8022e22:	009b      	lsls	r3, r3, #2
 8022e24:	58d3      	ldr	r3, [r2, r3]
 8022e26:	2b00      	cmp	r3, #0
 8022e28:	d005      	beq.n	8022e36 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8022e2a:	687b      	ldr	r3, [r7, #4]
 8022e2c:	68db      	ldr	r3, [r3, #12]
 8022e2e:	2202      	movs	r2, #2
 8022e30:	431a      	orrs	r2, r3
 8022e32:	687b      	ldr	r3, [r7, #4]
 8022e34:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8022e36:	687b      	ldr	r3, [r7, #4]
 8022e38:	330c      	adds	r3, #12
 8022e3a:	0019      	movs	r1, r3
 8022e3c:	687b      	ldr	r3, [r7, #4]
 8022e3e:	2202      	movs	r2, #2
 8022e40:	0018      	movs	r0, r3
 8022e42:	f000 f8fe 	bl	8023042 <USBD_CtlSendData>
      break;
 8022e46:	e006      	b.n	8022e56 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8022e48:	683a      	ldr	r2, [r7, #0]
 8022e4a:	687b      	ldr	r3, [r7, #4]
 8022e4c:	0011      	movs	r1, r2
 8022e4e:	0018      	movs	r0, r3
 8022e50:	f000 f879 	bl	8022f46 <USBD_CtlError>
      break;
 8022e54:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022e56:	46c0      	nop			@ (mov r8, r8)
 8022e58:	46bd      	mov	sp, r7
 8022e5a:	b002      	add	sp, #8
 8022e5c:	bd80      	pop	{r7, pc}

08022e5e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022e5e:	b580      	push	{r7, lr}
 8022e60:	b082      	sub	sp, #8
 8022e62:	af00      	add	r7, sp, #0
 8022e64:	6078      	str	r0, [r7, #4]
 8022e66:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022e68:	683b      	ldr	r3, [r7, #0]
 8022e6a:	885b      	ldrh	r3, [r3, #2]
 8022e6c:	2b01      	cmp	r3, #1
 8022e6e:	d108      	bne.n	8022e82 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8022e70:	687a      	ldr	r2, [r7, #4]
 8022e72:	23a9      	movs	r3, #169	@ 0xa9
 8022e74:	009b      	lsls	r3, r3, #2
 8022e76:	2101      	movs	r1, #1
 8022e78:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8022e7a:	687b      	ldr	r3, [r7, #4]
 8022e7c:	0018      	movs	r0, r3
 8022e7e:	f000 f94a 	bl	8023116 <USBD_CtlSendStatus>
  }
}
 8022e82:	46c0      	nop			@ (mov r8, r8)
 8022e84:	46bd      	mov	sp, r7
 8022e86:	b002      	add	sp, #8
 8022e88:	bd80      	pop	{r7, pc}

08022e8a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022e8a:	b580      	push	{r7, lr}
 8022e8c:	b082      	sub	sp, #8
 8022e8e:	af00      	add	r7, sp, #0
 8022e90:	6078      	str	r0, [r7, #4]
 8022e92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022e94:	687a      	ldr	r2, [r7, #4]
 8022e96:	23a7      	movs	r3, #167	@ 0xa7
 8022e98:	009b      	lsls	r3, r3, #2
 8022e9a:	5cd3      	ldrb	r3, [r2, r3]
 8022e9c:	3b01      	subs	r3, #1
 8022e9e:	2b02      	cmp	r3, #2
 8022ea0:	d80d      	bhi.n	8022ebe <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022ea2:	683b      	ldr	r3, [r7, #0]
 8022ea4:	885b      	ldrh	r3, [r3, #2]
 8022ea6:	2b01      	cmp	r3, #1
 8022ea8:	d110      	bne.n	8022ecc <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8022eaa:	687a      	ldr	r2, [r7, #4]
 8022eac:	23a9      	movs	r3, #169	@ 0xa9
 8022eae:	009b      	lsls	r3, r3, #2
 8022eb0:	2100      	movs	r1, #0
 8022eb2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8022eb4:	687b      	ldr	r3, [r7, #4]
 8022eb6:	0018      	movs	r0, r3
 8022eb8:	f000 f92d 	bl	8023116 <USBD_CtlSendStatus>
      }
      break;
 8022ebc:	e006      	b.n	8022ecc <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8022ebe:	683a      	ldr	r2, [r7, #0]
 8022ec0:	687b      	ldr	r3, [r7, #4]
 8022ec2:	0011      	movs	r1, r2
 8022ec4:	0018      	movs	r0, r3
 8022ec6:	f000 f83e 	bl	8022f46 <USBD_CtlError>
      break;
 8022eca:	e000      	b.n	8022ece <USBD_ClrFeature+0x44>
      break;
 8022ecc:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022ece:	46c0      	nop			@ (mov r8, r8)
 8022ed0:	46bd      	mov	sp, r7
 8022ed2:	b002      	add	sp, #8
 8022ed4:	bd80      	pop	{r7, pc}

08022ed6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8022ed6:	b580      	push	{r7, lr}
 8022ed8:	b082      	sub	sp, #8
 8022eda:	af00      	add	r7, sp, #0
 8022edc:	6078      	str	r0, [r7, #4]
 8022ede:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8022ee0:	683b      	ldr	r3, [r7, #0]
 8022ee2:	781a      	ldrb	r2, [r3, #0]
 8022ee4:	687b      	ldr	r3, [r7, #4]
 8022ee6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8022ee8:	683b      	ldr	r3, [r7, #0]
 8022eea:	785a      	ldrb	r2, [r3, #1]
 8022eec:	687b      	ldr	r3, [r7, #4]
 8022eee:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8022ef0:	683b      	ldr	r3, [r7, #0]
 8022ef2:	3302      	adds	r3, #2
 8022ef4:	781b      	ldrb	r3, [r3, #0]
 8022ef6:	001a      	movs	r2, r3
 8022ef8:	683b      	ldr	r3, [r7, #0]
 8022efa:	3303      	adds	r3, #3
 8022efc:	781b      	ldrb	r3, [r3, #0]
 8022efe:	021b      	lsls	r3, r3, #8
 8022f00:	b29b      	uxth	r3, r3
 8022f02:	18d3      	adds	r3, r2, r3
 8022f04:	b29a      	uxth	r2, r3
 8022f06:	687b      	ldr	r3, [r7, #4]
 8022f08:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8022f0a:	683b      	ldr	r3, [r7, #0]
 8022f0c:	3304      	adds	r3, #4
 8022f0e:	781b      	ldrb	r3, [r3, #0]
 8022f10:	001a      	movs	r2, r3
 8022f12:	683b      	ldr	r3, [r7, #0]
 8022f14:	3305      	adds	r3, #5
 8022f16:	781b      	ldrb	r3, [r3, #0]
 8022f18:	021b      	lsls	r3, r3, #8
 8022f1a:	b29b      	uxth	r3, r3
 8022f1c:	18d3      	adds	r3, r2, r3
 8022f1e:	b29a      	uxth	r2, r3
 8022f20:	687b      	ldr	r3, [r7, #4]
 8022f22:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8022f24:	683b      	ldr	r3, [r7, #0]
 8022f26:	3306      	adds	r3, #6
 8022f28:	781b      	ldrb	r3, [r3, #0]
 8022f2a:	001a      	movs	r2, r3
 8022f2c:	683b      	ldr	r3, [r7, #0]
 8022f2e:	3307      	adds	r3, #7
 8022f30:	781b      	ldrb	r3, [r3, #0]
 8022f32:	021b      	lsls	r3, r3, #8
 8022f34:	b29b      	uxth	r3, r3
 8022f36:	18d3      	adds	r3, r2, r3
 8022f38:	b29a      	uxth	r2, r3
 8022f3a:	687b      	ldr	r3, [r7, #4]
 8022f3c:	80da      	strh	r2, [r3, #6]

}
 8022f3e:	46c0      	nop			@ (mov r8, r8)
 8022f40:	46bd      	mov	sp, r7
 8022f42:	b002      	add	sp, #8
 8022f44:	bd80      	pop	{r7, pc}

08022f46 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8022f46:	b580      	push	{r7, lr}
 8022f48:	b082      	sub	sp, #8
 8022f4a:	af00      	add	r7, sp, #0
 8022f4c:	6078      	str	r0, [r7, #4]
 8022f4e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8022f50:	687b      	ldr	r3, [r7, #4]
 8022f52:	2180      	movs	r1, #128	@ 0x80
 8022f54:	0018      	movs	r0, r3
 8022f56:	f000 fd2a 	bl	80239ae <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8022f5a:	687b      	ldr	r3, [r7, #4]
 8022f5c:	2100      	movs	r1, #0
 8022f5e:	0018      	movs	r0, r3
 8022f60:	f000 fd25 	bl	80239ae <USBD_LL_StallEP>
}
 8022f64:	46c0      	nop			@ (mov r8, r8)
 8022f66:	46bd      	mov	sp, r7
 8022f68:	b002      	add	sp, #8
 8022f6a:	bd80      	pop	{r7, pc}

08022f6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8022f6c:	b590      	push	{r4, r7, lr}
 8022f6e:	b087      	sub	sp, #28
 8022f70:	af00      	add	r7, sp, #0
 8022f72:	60f8      	str	r0, [r7, #12]
 8022f74:	60b9      	str	r1, [r7, #8]
 8022f76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8022f78:	2417      	movs	r4, #23
 8022f7a:	193b      	adds	r3, r7, r4
 8022f7c:	2200      	movs	r2, #0
 8022f7e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8022f80:	68fb      	ldr	r3, [r7, #12]
 8022f82:	2b00      	cmp	r3, #0
 8022f84:	d03c      	beq.n	8023000 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8022f86:	68fb      	ldr	r3, [r7, #12]
 8022f88:	0018      	movs	r0, r3
 8022f8a:	f000 f83d 	bl	8023008 <USBD_GetLen>
 8022f8e:	0003      	movs	r3, r0
 8022f90:	3301      	adds	r3, #1
 8022f92:	b29b      	uxth	r3, r3
 8022f94:	18db      	adds	r3, r3, r3
 8022f96:	b29a      	uxth	r2, r3
 8022f98:	687b      	ldr	r3, [r7, #4]
 8022f9a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8022f9c:	193b      	adds	r3, r7, r4
 8022f9e:	781b      	ldrb	r3, [r3, #0]
 8022fa0:	193a      	adds	r2, r7, r4
 8022fa2:	1c59      	adds	r1, r3, #1
 8022fa4:	7011      	strb	r1, [r2, #0]
 8022fa6:	001a      	movs	r2, r3
 8022fa8:	68bb      	ldr	r3, [r7, #8]
 8022faa:	189b      	adds	r3, r3, r2
 8022fac:	687a      	ldr	r2, [r7, #4]
 8022fae:	7812      	ldrb	r2, [r2, #0]
 8022fb0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8022fb2:	193b      	adds	r3, r7, r4
 8022fb4:	781b      	ldrb	r3, [r3, #0]
 8022fb6:	193a      	adds	r2, r7, r4
 8022fb8:	1c59      	adds	r1, r3, #1
 8022fba:	7011      	strb	r1, [r2, #0]
 8022fbc:	001a      	movs	r2, r3
 8022fbe:	68bb      	ldr	r3, [r7, #8]
 8022fc0:	189b      	adds	r3, r3, r2
 8022fc2:	2203      	movs	r2, #3
 8022fc4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8022fc6:	e017      	b.n	8022ff8 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8022fc8:	68fb      	ldr	r3, [r7, #12]
 8022fca:	1c5a      	adds	r2, r3, #1
 8022fcc:	60fa      	str	r2, [r7, #12]
 8022fce:	2417      	movs	r4, #23
 8022fd0:	193a      	adds	r2, r7, r4
 8022fd2:	7812      	ldrb	r2, [r2, #0]
 8022fd4:	1939      	adds	r1, r7, r4
 8022fd6:	1c50      	adds	r0, r2, #1
 8022fd8:	7008      	strb	r0, [r1, #0]
 8022fda:	0011      	movs	r1, r2
 8022fdc:	68ba      	ldr	r2, [r7, #8]
 8022fde:	1852      	adds	r2, r2, r1
 8022fe0:	781b      	ldrb	r3, [r3, #0]
 8022fe2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8022fe4:	193b      	adds	r3, r7, r4
 8022fe6:	781b      	ldrb	r3, [r3, #0]
 8022fe8:	193a      	adds	r2, r7, r4
 8022fea:	1c59      	adds	r1, r3, #1
 8022fec:	7011      	strb	r1, [r2, #0]
 8022fee:	001a      	movs	r2, r3
 8022ff0:	68bb      	ldr	r3, [r7, #8]
 8022ff2:	189b      	adds	r3, r3, r2
 8022ff4:	2200      	movs	r2, #0
 8022ff6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8022ff8:	68fb      	ldr	r3, [r7, #12]
 8022ffa:	781b      	ldrb	r3, [r3, #0]
 8022ffc:	2b00      	cmp	r3, #0
 8022ffe:	d1e3      	bne.n	8022fc8 <USBD_GetString+0x5c>
    }
  }
}
 8023000:	46c0      	nop			@ (mov r8, r8)
 8023002:	46bd      	mov	sp, r7
 8023004:	b007      	add	sp, #28
 8023006:	bd90      	pop	{r4, r7, pc}

08023008 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8023008:	b580      	push	{r7, lr}
 802300a:	b084      	sub	sp, #16
 802300c:	af00      	add	r7, sp, #0
 802300e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8023010:	230f      	movs	r3, #15
 8023012:	18fb      	adds	r3, r7, r3
 8023014:	2200      	movs	r2, #0
 8023016:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8023018:	e008      	b.n	802302c <USBD_GetLen+0x24>
  {
    len++;
 802301a:	210f      	movs	r1, #15
 802301c:	187b      	adds	r3, r7, r1
 802301e:	781a      	ldrb	r2, [r3, #0]
 8023020:	187b      	adds	r3, r7, r1
 8023022:	3201      	adds	r2, #1
 8023024:	701a      	strb	r2, [r3, #0]
    buf++;
 8023026:	687b      	ldr	r3, [r7, #4]
 8023028:	3301      	adds	r3, #1
 802302a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 802302c:	687b      	ldr	r3, [r7, #4]
 802302e:	781b      	ldrb	r3, [r3, #0]
 8023030:	2b00      	cmp	r3, #0
 8023032:	d1f2      	bne.n	802301a <USBD_GetLen+0x12>
  }

  return len;
 8023034:	230f      	movs	r3, #15
 8023036:	18fb      	adds	r3, r7, r3
 8023038:	781b      	ldrb	r3, [r3, #0]
}
 802303a:	0018      	movs	r0, r3
 802303c:	46bd      	mov	sp, r7
 802303e:	b004      	add	sp, #16
 8023040:	bd80      	pop	{r7, pc}

08023042 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8023042:	b580      	push	{r7, lr}
 8023044:	b084      	sub	sp, #16
 8023046:	af00      	add	r7, sp, #0
 8023048:	60f8      	str	r0, [r7, #12]
 802304a:	60b9      	str	r1, [r7, #8]
 802304c:	1dbb      	adds	r3, r7, #6
 802304e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8023050:	68fa      	ldr	r2, [r7, #12]
 8023052:	23a5      	movs	r3, #165	@ 0xa5
 8023054:	009b      	lsls	r3, r3, #2
 8023056:	2102      	movs	r1, #2
 8023058:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 802305a:	1dbb      	adds	r3, r7, #6
 802305c:	881a      	ldrh	r2, [r3, #0]
 802305e:	68fb      	ldr	r3, [r7, #12]
 8023060:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8023062:	1dbb      	adds	r3, r7, #6
 8023064:	881a      	ldrh	r2, [r3, #0]
 8023066:	68fb      	ldr	r3, [r7, #12]
 8023068:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802306a:	1dbb      	adds	r3, r7, #6
 802306c:	881b      	ldrh	r3, [r3, #0]
 802306e:	68ba      	ldr	r2, [r7, #8]
 8023070:	68f8      	ldr	r0, [r7, #12]
 8023072:	2100      	movs	r1, #0
 8023074:	f000 fd4d 	bl	8023b12 <USBD_LL_Transmit>

  return USBD_OK;
 8023078:	2300      	movs	r3, #0
}
 802307a:	0018      	movs	r0, r3
 802307c:	46bd      	mov	sp, r7
 802307e:	b004      	add	sp, #16
 8023080:	bd80      	pop	{r7, pc}

08023082 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8023082:	b580      	push	{r7, lr}
 8023084:	b084      	sub	sp, #16
 8023086:	af00      	add	r7, sp, #0
 8023088:	60f8      	str	r0, [r7, #12]
 802308a:	60b9      	str	r1, [r7, #8]
 802308c:	1dbb      	adds	r3, r7, #6
 802308e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8023090:	1dbb      	adds	r3, r7, #6
 8023092:	881b      	ldrh	r3, [r3, #0]
 8023094:	68ba      	ldr	r2, [r7, #8]
 8023096:	68f8      	ldr	r0, [r7, #12]
 8023098:	2100      	movs	r1, #0
 802309a:	f000 fd3a 	bl	8023b12 <USBD_LL_Transmit>

  return USBD_OK;
 802309e:	2300      	movs	r3, #0
}
 80230a0:	0018      	movs	r0, r3
 80230a2:	46bd      	mov	sp, r7
 80230a4:	b004      	add	sp, #16
 80230a6:	bd80      	pop	{r7, pc}

080230a8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80230a8:	b580      	push	{r7, lr}
 80230aa:	b084      	sub	sp, #16
 80230ac:	af00      	add	r7, sp, #0
 80230ae:	60f8      	str	r0, [r7, #12]
 80230b0:	60b9      	str	r1, [r7, #8]
 80230b2:	1dbb      	adds	r3, r7, #6
 80230b4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80230b6:	68fa      	ldr	r2, [r7, #12]
 80230b8:	23a5      	movs	r3, #165	@ 0xa5
 80230ba:	009b      	lsls	r3, r3, #2
 80230bc:	2103      	movs	r1, #3
 80230be:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80230c0:	1dbb      	adds	r3, r7, #6
 80230c2:	8819      	ldrh	r1, [r3, #0]
 80230c4:	68fa      	ldr	r2, [r7, #12]
 80230c6:	23ae      	movs	r3, #174	@ 0xae
 80230c8:	005b      	lsls	r3, r3, #1
 80230ca:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80230cc:	1dbb      	adds	r3, r7, #6
 80230ce:	8819      	ldrh	r1, [r3, #0]
 80230d0:	68fa      	ldr	r2, [r7, #12]
 80230d2:	23b0      	movs	r3, #176	@ 0xb0
 80230d4:	005b      	lsls	r3, r3, #1
 80230d6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80230d8:	1dbb      	adds	r3, r7, #6
 80230da:	881b      	ldrh	r3, [r3, #0]
 80230dc:	68ba      	ldr	r2, [r7, #8]
 80230de:	68f8      	ldr	r0, [r7, #12]
 80230e0:	2100      	movs	r1, #0
 80230e2:	f000 fd4d 	bl	8023b80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80230e6:	2300      	movs	r3, #0
}
 80230e8:	0018      	movs	r0, r3
 80230ea:	46bd      	mov	sp, r7
 80230ec:	b004      	add	sp, #16
 80230ee:	bd80      	pop	{r7, pc}

080230f0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80230f0:	b580      	push	{r7, lr}
 80230f2:	b084      	sub	sp, #16
 80230f4:	af00      	add	r7, sp, #0
 80230f6:	60f8      	str	r0, [r7, #12]
 80230f8:	60b9      	str	r1, [r7, #8]
 80230fa:	1dbb      	adds	r3, r7, #6
 80230fc:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80230fe:	1dbb      	adds	r3, r7, #6
 8023100:	881b      	ldrh	r3, [r3, #0]
 8023102:	68ba      	ldr	r2, [r7, #8]
 8023104:	68f8      	ldr	r0, [r7, #12]
 8023106:	2100      	movs	r1, #0
 8023108:	f000 fd3a 	bl	8023b80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802310c:	2300      	movs	r3, #0
}
 802310e:	0018      	movs	r0, r3
 8023110:	46bd      	mov	sp, r7
 8023112:	b004      	add	sp, #16
 8023114:	bd80      	pop	{r7, pc}

08023116 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8023116:	b580      	push	{r7, lr}
 8023118:	b082      	sub	sp, #8
 802311a:	af00      	add	r7, sp, #0
 802311c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 802311e:	687a      	ldr	r2, [r7, #4]
 8023120:	23a5      	movs	r3, #165	@ 0xa5
 8023122:	009b      	lsls	r3, r3, #2
 8023124:	2104      	movs	r1, #4
 8023126:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8023128:	6878      	ldr	r0, [r7, #4]
 802312a:	2300      	movs	r3, #0
 802312c:	2200      	movs	r2, #0
 802312e:	2100      	movs	r1, #0
 8023130:	f000 fcef 	bl	8023b12 <USBD_LL_Transmit>

  return USBD_OK;
 8023134:	2300      	movs	r3, #0
}
 8023136:	0018      	movs	r0, r3
 8023138:	46bd      	mov	sp, r7
 802313a:	b002      	add	sp, #8
 802313c:	bd80      	pop	{r7, pc}

0802313e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 802313e:	b580      	push	{r7, lr}
 8023140:	b082      	sub	sp, #8
 8023142:	af00      	add	r7, sp, #0
 8023144:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8023146:	687a      	ldr	r2, [r7, #4]
 8023148:	23a5      	movs	r3, #165	@ 0xa5
 802314a:	009b      	lsls	r3, r3, #2
 802314c:	2105      	movs	r1, #5
 802314e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8023150:	6878      	ldr	r0, [r7, #4]
 8023152:	2300      	movs	r3, #0
 8023154:	2200      	movs	r2, #0
 8023156:	2100      	movs	r1, #0
 8023158:	f000 fd12 	bl	8023b80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802315c:	2300      	movs	r3, #0
}
 802315e:	0018      	movs	r0, r3
 8023160:	46bd      	mov	sp, r7
 8023162:	b002      	add	sp, #8
 8023164:	bd80      	pop	{r7, pc}
	...

08023168 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8023168:	b580      	push	{r7, lr}
 802316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 802316c:	4914      	ldr	r1, [pc, #80]	@ (80231c0 <MX_USB_DEVICE_Init+0x58>)
 802316e:	4b15      	ldr	r3, [pc, #84]	@ (80231c4 <MX_USB_DEVICE_Init+0x5c>)
 8023170:	2200      	movs	r2, #0
 8023172:	0018      	movs	r0, r3
 8023174:	f7fe fdec 	bl	8021d50 <USBD_Init>
 8023178:	1e03      	subs	r3, r0, #0
 802317a:	d001      	beq.n	8023180 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 802317c:	f7ea f98a 	bl	800d494 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8023180:	4a11      	ldr	r2, [pc, #68]	@ (80231c8 <MX_USB_DEVICE_Init+0x60>)
 8023182:	4b10      	ldr	r3, [pc, #64]	@ (80231c4 <MX_USB_DEVICE_Init+0x5c>)
 8023184:	0011      	movs	r1, r2
 8023186:	0018      	movs	r0, r3
 8023188:	f7fe fe13 	bl	8021db2 <USBD_RegisterClass>
 802318c:	1e03      	subs	r3, r0, #0
 802318e:	d001      	beq.n	8023194 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8023190:	f7ea f980 	bl	800d494 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8023194:	4a0d      	ldr	r2, [pc, #52]	@ (80231cc <MX_USB_DEVICE_Init+0x64>)
 8023196:	4b0b      	ldr	r3, [pc, #44]	@ (80231c4 <MX_USB_DEVICE_Init+0x5c>)
 8023198:	0011      	movs	r1, r2
 802319a:	0018      	movs	r0, r3
 802319c:	f7fe fd28 	bl	8021bf0 <USBD_CDC_RegisterInterface>
 80231a0:	1e03      	subs	r3, r0, #0
 80231a2:	d001      	beq.n	80231a8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80231a4:	f7ea f976 	bl	800d494 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80231a8:	4b06      	ldr	r3, [pc, #24]	@ (80231c4 <MX_USB_DEVICE_Init+0x5c>)
 80231aa:	0018      	movs	r0, r3
 80231ac:	f7fe fe21 	bl	8021df2 <USBD_Start>
 80231b0:	1e03      	subs	r3, r0, #0
 80231b2:	d001      	beq.n	80231b8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80231b4:	f7ea f96e 	bl	800d494 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80231b8:	46c0      	nop			@ (mov r8, r8)
 80231ba:	46bd      	mov	sp, r7
 80231bc:	bd80      	pop	{r7, pc}
 80231be:	46c0      	nop			@ (mov r8, r8)
 80231c0:	20000224 	.word	0x20000224
 80231c4:	20002534 	.word	0x20002534
 80231c8:	20000110 	.word	0x20000110
 80231cc:	20000214 	.word	0x20000214

080231d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80231d0:	b580      	push	{r7, lr}
 80231d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80231d4:	4907      	ldr	r1, [pc, #28]	@ (80231f4 <CDC_Init_FS+0x24>)
 80231d6:	4b08      	ldr	r3, [pc, #32]	@ (80231f8 <CDC_Init_FS+0x28>)
 80231d8:	2200      	movs	r2, #0
 80231da:	0018      	movs	r0, r3
 80231dc:	f7fe fd23 	bl	8021c26 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80231e0:	4a06      	ldr	r2, [pc, #24]	@ (80231fc <CDC_Init_FS+0x2c>)
 80231e2:	4b05      	ldr	r3, [pc, #20]	@ (80231f8 <CDC_Init_FS+0x28>)
 80231e4:	0011      	movs	r1, r2
 80231e6:	0018      	movs	r0, r3
 80231e8:	f7fe fd39 	bl	8021c5e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80231ec:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80231ee:	0018      	movs	r0, r3
 80231f0:	46bd      	mov	sp, r7
 80231f2:	bd80      	pop	{r7, pc}
 80231f4:	20002cb8 	.word	0x20002cb8
 80231f8:	20002534 	.word	0x20002534
 80231fc:	200028b8 	.word	0x200028b8

08023200 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8023200:	b580      	push	{r7, lr}
 8023202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8023204:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8023206:	0018      	movs	r0, r3
 8023208:	46bd      	mov	sp, r7
 802320a:	bd80      	pop	{r7, pc}

0802320c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 802320c:	b580      	push	{r7, lr}
 802320e:	b084      	sub	sp, #16
 8023210:	af00      	add	r7, sp, #0
 8023212:	6039      	str	r1, [r7, #0]
 8023214:	0011      	movs	r1, r2
 8023216:	1dfb      	adds	r3, r7, #7
 8023218:	1c02      	adds	r2, r0, #0
 802321a:	701a      	strb	r2, [r3, #0]
 802321c:	1d3b      	adds	r3, r7, #4
 802321e:	1c0a      	adds	r2, r1, #0
 8023220:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8023222:	1dfb      	adds	r3, r7, #7
 8023224:	781b      	ldrb	r3, [r3, #0]
 8023226:	2b23      	cmp	r3, #35	@ 0x23
 8023228:	d810      	bhi.n	802324c <CDC_Control_FS+0x40>
 802322a:	009a      	lsls	r2, r3, #2
 802322c:	4b0a      	ldr	r3, [pc, #40]	@ (8023258 <CDC_Control_FS+0x4c>)
 802322e:	18d3      	adds	r3, r2, r3
 8023230:	681b      	ldr	r3, [r3, #0]
 8023232:	469f      	mov	pc, r3

    break;

    case CDC_SET_CONTROL_LINE_STATE:
      // === inserted for detecting USB is ready for dumping USB_LOGGING 28-jul-2025
            USBD_SetupReqTypedef * req = (USBD_SetupReqTypedef *)pbuf;
 8023234:	683b      	ldr	r3, [r7, #0]
 8023236:	60fb      	str	r3, [r7, #12]

            if((req->wValue &0x0001) != 0)
 8023238:	68fb      	ldr	r3, [r7, #12]
 802323a:	885b      	ldrh	r3, [r3, #2]
 802323c:	001a      	movs	r2, r3
 802323e:	2301      	movs	r3, #1
 8023240:	4013      	ands	r3, r2
 8023242:	d001      	beq.n	8023248 <CDC_Control_FS+0x3c>
              return (USBD_FAIL);
 8023244:	2302      	movs	r3, #2
 8023246:	e003      	b.n	8023250 <CDC_Control_FS+0x44>
              //host_com_port_open = 1;
            else
              return (USBD_OK);
 8023248:	2300      	movs	r3, #0
 802324a:	e001      	b.n	8023250 <CDC_Control_FS+0x44>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 802324c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 802324e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8023250:	0018      	movs	r0, r3
 8023252:	46bd      	mov	sp, r7
 8023254:	b004      	add	sp, #16
 8023256:	bd80      	pop	{r7, pc}
 8023258:	0802e988 	.word	0x0802e988

0802325c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 802325c:	b580      	push	{r7, lr}
 802325e:	b082      	sub	sp, #8
 8023260:	af00      	add	r7, sp, #0
 8023262:	6078      	str	r0, [r7, #4]
 8023264:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8023266:	4b12      	ldr	r3, [pc, #72]	@ (80232b0 <CDC_Receive_FS+0x54>)
 8023268:	781b      	ldrb	r3, [r3, #0]
 802326a:	2b00      	cmp	r3, #0
 802326c:	d013      	beq.n	8023296 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 802326e:	683b      	ldr	r3, [r7, #0]
 8023270:	681b      	ldr	r3, [r3, #0]
 8023272:	b29a      	uxth	r2, r3
 8023274:	2301      	movs	r3, #1
 8023276:	425b      	negs	r3, r3
 8023278:	6879      	ldr	r1, [r7, #4]
 802327a:	480e      	ldr	r0, [pc, #56]	@ (80232b4 <CDC_Receive_FS+0x58>)
 802327c:	f7fa f942 	bl	801d504 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8023280:	687a      	ldr	r2, [r7, #4]
 8023282:	4b0d      	ldr	r3, [pc, #52]	@ (80232b8 <CDC_Receive_FS+0x5c>)
 8023284:	0011      	movs	r1, r2
 8023286:	0018      	movs	r0, r3
 8023288:	f7fe fce9 	bl	8021c5e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 802328c:	4b0a      	ldr	r3, [pc, #40]	@ (80232b8 <CDC_Receive_FS+0x5c>)
 802328e:	0018      	movs	r0, r3
 8023290:	f7fe fd30 	bl	8021cf4 <USBD_CDC_ReceivePacket>
 8023294:	e006      	b.n	80232a4 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 8023296:	683b      	ldr	r3, [r7, #0]
 8023298:	681a      	ldr	r2, [r3, #0]
 802329a:	4b08      	ldr	r3, [pc, #32]	@ (80232bc <CDC_Receive_FS+0x60>)
 802329c:	681b      	ldr	r3, [r3, #0]
 802329e:	18d2      	adds	r2, r2, r3
 80232a0:	4b06      	ldr	r3, [pc, #24]	@ (80232bc <CDC_Receive_FS+0x60>)
 80232a2:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 80232a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80232a6:	0018      	movs	r0, r3
 80232a8:	46bd      	mov	sp, r7
 80232aa:	b002      	add	sp, #8
 80232ac:	bd80      	pop	{r7, pc}
 80232ae:	46c0      	nop			@ (mov r8, r8)
 80232b0:	200027f8 	.word	0x200027f8
 80232b4:	200027fc 	.word	0x200027fc
 80232b8:	20002534 	.word	0x20002534
 80232bc:	200028b4 	.word	0x200028b4

080232c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80232c0:	b5b0      	push	{r4, r5, r7, lr}
 80232c2:	b084      	sub	sp, #16
 80232c4:	af00      	add	r7, sp, #0
 80232c6:	6078      	str	r0, [r7, #4]
 80232c8:	000a      	movs	r2, r1
 80232ca:	1cbb      	adds	r3, r7, #2
 80232cc:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80232ce:	230f      	movs	r3, #15
 80232d0:	18fb      	adds	r3, r7, r3
 80232d2:	2200      	movs	r2, #0
 80232d4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80232d6:	4a11      	ldr	r2, [pc, #68]	@ (802331c <CDC_Transmit_FS+0x5c>)
 80232d8:	23ae      	movs	r3, #174	@ 0xae
 80232da:	009b      	lsls	r3, r3, #2
 80232dc:	58d3      	ldr	r3, [r2, r3]
 80232de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80232e0:	68ba      	ldr	r2, [r7, #8]
 80232e2:	2385      	movs	r3, #133	@ 0x85
 80232e4:	009b      	lsls	r3, r3, #2
 80232e6:	58d3      	ldr	r3, [r2, r3]
 80232e8:	2b00      	cmp	r3, #0
 80232ea:	d001      	beq.n	80232f0 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80232ec:	2301      	movs	r3, #1
 80232ee:	e010      	b.n	8023312 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80232f0:	1cbb      	adds	r3, r7, #2
 80232f2:	881a      	ldrh	r2, [r3, #0]
 80232f4:	6879      	ldr	r1, [r7, #4]
 80232f6:	4b09      	ldr	r3, [pc, #36]	@ (802331c <CDC_Transmit_FS+0x5c>)
 80232f8:	0018      	movs	r0, r3
 80232fa:	f7fe fc94 	bl	8021c26 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80232fe:	250f      	movs	r5, #15
 8023300:	197c      	adds	r4, r7, r5
 8023302:	4b06      	ldr	r3, [pc, #24]	@ (802331c <CDC_Transmit_FS+0x5c>)
 8023304:	0018      	movs	r0, r3
 8023306:	f7fe fcbe 	bl	8021c86 <USBD_CDC_TransmitPacket>
 802330a:	0003      	movs	r3, r0
 802330c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 802330e:	197b      	adds	r3, r7, r5
 8023310:	781b      	ldrb	r3, [r3, #0]
}
 8023312:	0018      	movs	r0, r3
 8023314:	46bd      	mov	sp, r7
 8023316:	b004      	add	sp, #16
 8023318:	bdb0      	pop	{r4, r5, r7, pc}
 802331a:	46c0      	nop			@ (mov r8, r8)
 802331c:	20002534 	.word	0x20002534

08023320 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8023320:	b580      	push	{r7, lr}
 8023322:	af00      	add	r7, sp, #0
  ESPProg = true;
 8023324:	4b02      	ldr	r3, [pc, #8]	@ (8023330 <EnableESPProg+0x10>)
 8023326:	2201      	movs	r2, #1
 8023328:	701a      	strb	r2, [r3, #0]
}
 802332a:	46c0      	nop			@ (mov r8, r8)
 802332c:	46bd      	mov	sp, r7
 802332e:	bd80      	pop	{r7, pc}
 8023330:	200027f8 	.word	0x200027f8

08023334 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 8023334:	b580      	push	{r7, lr}
 8023336:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8023338:	4b01      	ldr	r3, [pc, #4]	@ (8023340 <GetUsbRxPointer+0xc>)
}
 802333a:	0018      	movs	r0, r3
 802333c:	46bd      	mov	sp, r7
 802333e:	bd80      	pop	{r7, pc}
 8023340:	200028b8 	.word	0x200028b8

08023344 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 8023344:	b580      	push	{r7, lr}
 8023346:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8023348:	4b07      	ldr	r3, [pc, #28]	@ (8023368 <ResetUsbRxDataSize+0x24>)
 802334a:	2200      	movs	r2, #0
 802334c:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 802334e:	4a07      	ldr	r2, [pc, #28]	@ (802336c <ResetUsbRxDataSize+0x28>)
 8023350:	4b07      	ldr	r3, [pc, #28]	@ (8023370 <ResetUsbRxDataSize+0x2c>)
 8023352:	0011      	movs	r1, r2
 8023354:	0018      	movs	r0, r3
 8023356:	f7fe fc82 	bl	8021c5e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 802335a:	4b05      	ldr	r3, [pc, #20]	@ (8023370 <ResetUsbRxDataSize+0x2c>)
 802335c:	0018      	movs	r0, r3
 802335e:	f7fe fcc9 	bl	8021cf4 <USBD_CDC_ReceivePacket>
}
 8023362:	46c0      	nop			@ (mov r8, r8)
 8023364:	46bd      	mov	sp, r7
 8023366:	bd80      	pop	{r7, pc}
 8023368:	200028b4 	.word	0x200028b4
 802336c:	200028b8 	.word	0x200028b8
 8023370:	20002534 	.word	0x20002534

08023374 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8023374:	b580      	push	{r7, lr}
 8023376:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8023378:	4b02      	ldr	r3, [pc, #8]	@ (8023384 <GetUsbRxDataSize+0x10>)
 802337a:	681b      	ldr	r3, [r3, #0]
}
 802337c:	0018      	movs	r0, r3
 802337e:	46bd      	mov	sp, r7
 8023380:	bd80      	pop	{r7, pc}
 8023382:	46c0      	nop			@ (mov r8, r8)
 8023384:	200028b4 	.word	0x200028b4

08023388 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8023388:	b580      	push	{r7, lr}
 802338a:	b082      	sub	sp, #8
 802338c:	af00      	add	r7, sp, #0
 802338e:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8023390:	687a      	ldr	r2, [r7, #4]
 8023392:	4b07      	ldr	r3, [pc, #28]	@ (80233b0 <GetUsbRxNextChunk+0x28>)
 8023394:	18d2      	adds	r2, r2, r3
 8023396:	4b07      	ldr	r3, [pc, #28]	@ (80233b4 <GetUsbRxNextChunk+0x2c>)
 8023398:	0011      	movs	r1, r2
 802339a:	0018      	movs	r0, r3
 802339c:	f7fe fc5f 	bl	8021c5e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80233a0:	4b04      	ldr	r3, [pc, #16]	@ (80233b4 <GetUsbRxNextChunk+0x2c>)
 80233a2:	0018      	movs	r0, r3
 80233a4:	f7fe fca6 	bl	8021cf4 <USBD_CDC_ReceivePacket>
}
 80233a8:	46c0      	nop			@ (mov r8, r8)
 80233aa:	46bd      	mov	sp, r7
 80233ac:	b002      	add	sp, #8
 80233ae:	bd80      	pop	{r7, pc}
 80233b0:	200028b8 	.word	0x200028b8
 80233b4:	20002534 	.word	0x20002534

080233b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80233b8:	b580      	push	{r7, lr}
 80233ba:	b082      	sub	sp, #8
 80233bc:	af00      	add	r7, sp, #0
 80233be:	0002      	movs	r2, r0
 80233c0:	6039      	str	r1, [r7, #0]
 80233c2:	1dfb      	adds	r3, r7, #7
 80233c4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80233c6:	683b      	ldr	r3, [r7, #0]
 80233c8:	2212      	movs	r2, #18
 80233ca:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80233cc:	4b02      	ldr	r3, [pc, #8]	@ (80233d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80233ce:	0018      	movs	r0, r3
 80233d0:	46bd      	mov	sp, r7
 80233d2:	b002      	add	sp, #8
 80233d4:	bd80      	pop	{r7, pc}
 80233d6:	46c0      	nop			@ (mov r8, r8)
 80233d8:	20000240 	.word	0x20000240

080233dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80233dc:	b580      	push	{r7, lr}
 80233de:	b082      	sub	sp, #8
 80233e0:	af00      	add	r7, sp, #0
 80233e2:	0002      	movs	r2, r0
 80233e4:	6039      	str	r1, [r7, #0]
 80233e6:	1dfb      	adds	r3, r7, #7
 80233e8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80233ea:	683b      	ldr	r3, [r7, #0]
 80233ec:	2204      	movs	r2, #4
 80233ee:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80233f0:	4b02      	ldr	r3, [pc, #8]	@ (80233fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80233f2:	0018      	movs	r0, r3
 80233f4:	46bd      	mov	sp, r7
 80233f6:	b002      	add	sp, #8
 80233f8:	bd80      	pop	{r7, pc}
 80233fa:	46c0      	nop			@ (mov r8, r8)
 80233fc:	20000254 	.word	0x20000254

08023400 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023400:	b580      	push	{r7, lr}
 8023402:	b082      	sub	sp, #8
 8023404:	af00      	add	r7, sp, #0
 8023406:	0002      	movs	r2, r0
 8023408:	6039      	str	r1, [r7, #0]
 802340a:	1dfb      	adds	r3, r7, #7
 802340c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 802340e:	1dfb      	adds	r3, r7, #7
 8023410:	781b      	ldrb	r3, [r3, #0]
 8023412:	2b00      	cmp	r3, #0
 8023414:	d106      	bne.n	8023424 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8023416:	683a      	ldr	r2, [r7, #0]
 8023418:	4908      	ldr	r1, [pc, #32]	@ (802343c <USBD_FS_ProductStrDescriptor+0x3c>)
 802341a:	4b09      	ldr	r3, [pc, #36]	@ (8023440 <USBD_FS_ProductStrDescriptor+0x40>)
 802341c:	0018      	movs	r0, r3
 802341e:	f7ff fda5 	bl	8022f6c <USBD_GetString>
 8023422:	e005      	b.n	8023430 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8023424:	683a      	ldr	r2, [r7, #0]
 8023426:	4905      	ldr	r1, [pc, #20]	@ (802343c <USBD_FS_ProductStrDescriptor+0x3c>)
 8023428:	4b05      	ldr	r3, [pc, #20]	@ (8023440 <USBD_FS_ProductStrDescriptor+0x40>)
 802342a:	0018      	movs	r0, r3
 802342c:	f7ff fd9e 	bl	8022f6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8023430:	4b02      	ldr	r3, [pc, #8]	@ (802343c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8023432:	0018      	movs	r0, r3
 8023434:	46bd      	mov	sp, r7
 8023436:	b002      	add	sp, #8
 8023438:	bd80      	pop	{r7, pc}
 802343a:	46c0      	nop			@ (mov r8, r8)
 802343c:	200030b8 	.word	0x200030b8
 8023440:	0802e028 	.word	0x0802e028

08023444 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023444:	b580      	push	{r7, lr}
 8023446:	b082      	sub	sp, #8
 8023448:	af00      	add	r7, sp, #0
 802344a:	0002      	movs	r2, r0
 802344c:	6039      	str	r1, [r7, #0]
 802344e:	1dfb      	adds	r3, r7, #7
 8023450:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8023452:	683a      	ldr	r2, [r7, #0]
 8023454:	4904      	ldr	r1, [pc, #16]	@ (8023468 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8023456:	4b05      	ldr	r3, [pc, #20]	@ (802346c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8023458:	0018      	movs	r0, r3
 802345a:	f7ff fd87 	bl	8022f6c <USBD_GetString>
  return USBD_StrDesc;
 802345e:	4b02      	ldr	r3, [pc, #8]	@ (8023468 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8023460:	0018      	movs	r0, r3
 8023462:	46bd      	mov	sp, r7
 8023464:	b002      	add	sp, #8
 8023466:	bd80      	pop	{r7, pc}
 8023468:	200030b8 	.word	0x200030b8
 802346c:	0802e040 	.word	0x0802e040

08023470 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023470:	b580      	push	{r7, lr}
 8023472:	b082      	sub	sp, #8
 8023474:	af00      	add	r7, sp, #0
 8023476:	0002      	movs	r2, r0
 8023478:	6039      	str	r1, [r7, #0]
 802347a:	1dfb      	adds	r3, r7, #7
 802347c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 802347e:	683b      	ldr	r3, [r7, #0]
 8023480:	221a      	movs	r2, #26
 8023482:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8023484:	f000 f84c 	bl	8023520 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8023488:	4b02      	ldr	r3, [pc, #8]	@ (8023494 <USBD_FS_SerialStrDescriptor+0x24>)
}
 802348a:	0018      	movs	r0, r3
 802348c:	46bd      	mov	sp, r7
 802348e:	b002      	add	sp, #8
 8023490:	bd80      	pop	{r7, pc}
 8023492:	46c0      	nop			@ (mov r8, r8)
 8023494:	20000258 	.word	0x20000258

08023498 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023498:	b580      	push	{r7, lr}
 802349a:	b082      	sub	sp, #8
 802349c:	af00      	add	r7, sp, #0
 802349e:	0002      	movs	r2, r0
 80234a0:	6039      	str	r1, [r7, #0]
 80234a2:	1dfb      	adds	r3, r7, #7
 80234a4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80234a6:	1dfb      	adds	r3, r7, #7
 80234a8:	781b      	ldrb	r3, [r3, #0]
 80234aa:	2b00      	cmp	r3, #0
 80234ac:	d106      	bne.n	80234bc <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80234ae:	683a      	ldr	r2, [r7, #0]
 80234b0:	4908      	ldr	r1, [pc, #32]	@ (80234d4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80234b2:	4b09      	ldr	r3, [pc, #36]	@ (80234d8 <USBD_FS_ConfigStrDescriptor+0x40>)
 80234b4:	0018      	movs	r0, r3
 80234b6:	f7ff fd59 	bl	8022f6c <USBD_GetString>
 80234ba:	e005      	b.n	80234c8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80234bc:	683a      	ldr	r2, [r7, #0]
 80234be:	4905      	ldr	r1, [pc, #20]	@ (80234d4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80234c0:	4b05      	ldr	r3, [pc, #20]	@ (80234d8 <USBD_FS_ConfigStrDescriptor+0x40>)
 80234c2:	0018      	movs	r0, r3
 80234c4:	f7ff fd52 	bl	8022f6c <USBD_GetString>
  }
  return USBD_StrDesc;
 80234c8:	4b02      	ldr	r3, [pc, #8]	@ (80234d4 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80234ca:	0018      	movs	r0, r3
 80234cc:	46bd      	mov	sp, r7
 80234ce:	b002      	add	sp, #8
 80234d0:	bd80      	pop	{r7, pc}
 80234d2:	46c0      	nop			@ (mov r8, r8)
 80234d4:	200030b8 	.word	0x200030b8
 80234d8:	0802e054 	.word	0x0802e054

080234dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80234dc:	b580      	push	{r7, lr}
 80234de:	b082      	sub	sp, #8
 80234e0:	af00      	add	r7, sp, #0
 80234e2:	0002      	movs	r2, r0
 80234e4:	6039      	str	r1, [r7, #0]
 80234e6:	1dfb      	adds	r3, r7, #7
 80234e8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80234ea:	1dfb      	adds	r3, r7, #7
 80234ec:	781b      	ldrb	r3, [r3, #0]
 80234ee:	2b00      	cmp	r3, #0
 80234f0:	d106      	bne.n	8023500 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80234f2:	683a      	ldr	r2, [r7, #0]
 80234f4:	4908      	ldr	r1, [pc, #32]	@ (8023518 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80234f6:	4b09      	ldr	r3, [pc, #36]	@ (802351c <USBD_FS_InterfaceStrDescriptor+0x40>)
 80234f8:	0018      	movs	r0, r3
 80234fa:	f7ff fd37 	bl	8022f6c <USBD_GetString>
 80234fe:	e005      	b.n	802350c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8023500:	683a      	ldr	r2, [r7, #0]
 8023502:	4905      	ldr	r1, [pc, #20]	@ (8023518 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8023504:	4b05      	ldr	r3, [pc, #20]	@ (802351c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8023506:	0018      	movs	r0, r3
 8023508:	f7ff fd30 	bl	8022f6c <USBD_GetString>
  }
  return USBD_StrDesc;
 802350c:	4b02      	ldr	r3, [pc, #8]	@ (8023518 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 802350e:	0018      	movs	r0, r3
 8023510:	46bd      	mov	sp, r7
 8023512:	b002      	add	sp, #8
 8023514:	bd80      	pop	{r7, pc}
 8023516:	46c0      	nop			@ (mov r8, r8)
 8023518:	200030b8 	.word	0x200030b8
 802351c:	0802e060 	.word	0x0802e060

08023520 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8023520:	b580      	push	{r7, lr}
 8023522:	b084      	sub	sp, #16
 8023524:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8023526:	4b10      	ldr	r3, [pc, #64]	@ (8023568 <Get_SerialNum+0x48>)
 8023528:	681b      	ldr	r3, [r3, #0]
 802352a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 802352c:	4b0f      	ldr	r3, [pc, #60]	@ (802356c <Get_SerialNum+0x4c>)
 802352e:	681b      	ldr	r3, [r3, #0]
 8023530:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8023532:	4b0f      	ldr	r3, [pc, #60]	@ (8023570 <Get_SerialNum+0x50>)
 8023534:	681b      	ldr	r3, [r3, #0]
 8023536:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8023538:	68fa      	ldr	r2, [r7, #12]
 802353a:	687b      	ldr	r3, [r7, #4]
 802353c:	18d3      	adds	r3, r2, r3
 802353e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8023540:	68fb      	ldr	r3, [r7, #12]
 8023542:	2b00      	cmp	r3, #0
 8023544:	d00b      	beq.n	802355e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8023546:	490b      	ldr	r1, [pc, #44]	@ (8023574 <Get_SerialNum+0x54>)
 8023548:	68fb      	ldr	r3, [r7, #12]
 802354a:	2208      	movs	r2, #8
 802354c:	0018      	movs	r0, r3
 802354e:	f000 f815 	bl	802357c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8023552:	4909      	ldr	r1, [pc, #36]	@ (8023578 <Get_SerialNum+0x58>)
 8023554:	68bb      	ldr	r3, [r7, #8]
 8023556:	2204      	movs	r2, #4
 8023558:	0018      	movs	r0, r3
 802355a:	f000 f80f 	bl	802357c <IntToUnicode>
  }
}
 802355e:	46c0      	nop			@ (mov r8, r8)
 8023560:	46bd      	mov	sp, r7
 8023562:	b004      	add	sp, #16
 8023564:	bd80      	pop	{r7, pc}
 8023566:	46c0      	nop			@ (mov r8, r8)
 8023568:	1ff80050 	.word	0x1ff80050
 802356c:	1ff80054 	.word	0x1ff80054
 8023570:	1ff80058 	.word	0x1ff80058
 8023574:	2000025a 	.word	0x2000025a
 8023578:	2000026a 	.word	0x2000026a

0802357c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 802357c:	b580      	push	{r7, lr}
 802357e:	b086      	sub	sp, #24
 8023580:	af00      	add	r7, sp, #0
 8023582:	60f8      	str	r0, [r7, #12]
 8023584:	60b9      	str	r1, [r7, #8]
 8023586:	1dfb      	adds	r3, r7, #7
 8023588:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 802358a:	2117      	movs	r1, #23
 802358c:	187b      	adds	r3, r7, r1
 802358e:	2200      	movs	r2, #0
 8023590:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8023592:	187b      	adds	r3, r7, r1
 8023594:	2200      	movs	r2, #0
 8023596:	701a      	strb	r2, [r3, #0]
 8023598:	e02f      	b.n	80235fa <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 802359a:	68fb      	ldr	r3, [r7, #12]
 802359c:	0f1b      	lsrs	r3, r3, #28
 802359e:	2b09      	cmp	r3, #9
 80235a0:	d80d      	bhi.n	80235be <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80235a2:	68fb      	ldr	r3, [r7, #12]
 80235a4:	0f1b      	lsrs	r3, r3, #28
 80235a6:	b2da      	uxtb	r2, r3
 80235a8:	2317      	movs	r3, #23
 80235aa:	18fb      	adds	r3, r7, r3
 80235ac:	781b      	ldrb	r3, [r3, #0]
 80235ae:	005b      	lsls	r3, r3, #1
 80235b0:	0019      	movs	r1, r3
 80235b2:	68bb      	ldr	r3, [r7, #8]
 80235b4:	185b      	adds	r3, r3, r1
 80235b6:	3230      	adds	r2, #48	@ 0x30
 80235b8:	b2d2      	uxtb	r2, r2
 80235ba:	701a      	strb	r2, [r3, #0]
 80235bc:	e00c      	b.n	80235d8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80235be:	68fb      	ldr	r3, [r7, #12]
 80235c0:	0f1b      	lsrs	r3, r3, #28
 80235c2:	b2da      	uxtb	r2, r3
 80235c4:	2317      	movs	r3, #23
 80235c6:	18fb      	adds	r3, r7, r3
 80235c8:	781b      	ldrb	r3, [r3, #0]
 80235ca:	005b      	lsls	r3, r3, #1
 80235cc:	0019      	movs	r1, r3
 80235ce:	68bb      	ldr	r3, [r7, #8]
 80235d0:	185b      	adds	r3, r3, r1
 80235d2:	3237      	adds	r2, #55	@ 0x37
 80235d4:	b2d2      	uxtb	r2, r2
 80235d6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80235d8:	68fb      	ldr	r3, [r7, #12]
 80235da:	011b      	lsls	r3, r3, #4
 80235dc:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80235de:	2117      	movs	r1, #23
 80235e0:	187b      	adds	r3, r7, r1
 80235e2:	781b      	ldrb	r3, [r3, #0]
 80235e4:	005b      	lsls	r3, r3, #1
 80235e6:	3301      	adds	r3, #1
 80235e8:	68ba      	ldr	r2, [r7, #8]
 80235ea:	18d3      	adds	r3, r2, r3
 80235ec:	2200      	movs	r2, #0
 80235ee:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80235f0:	187b      	adds	r3, r7, r1
 80235f2:	781a      	ldrb	r2, [r3, #0]
 80235f4:	187b      	adds	r3, r7, r1
 80235f6:	3201      	adds	r2, #1
 80235f8:	701a      	strb	r2, [r3, #0]
 80235fa:	2317      	movs	r3, #23
 80235fc:	18fa      	adds	r2, r7, r3
 80235fe:	1dfb      	adds	r3, r7, #7
 8023600:	7812      	ldrb	r2, [r2, #0]
 8023602:	781b      	ldrb	r3, [r3, #0]
 8023604:	429a      	cmp	r2, r3
 8023606:	d3c8      	bcc.n	802359a <IntToUnicode+0x1e>
  }
}
 8023608:	46c0      	nop			@ (mov r8, r8)
 802360a:	46c0      	nop			@ (mov r8, r8)
 802360c:	46bd      	mov	sp, r7
 802360e:	b006      	add	sp, #24
 8023610:	bd80      	pop	{r7, pc}
	...

08023614 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8023614:	b580      	push	{r7, lr}
 8023616:	b082      	sub	sp, #8
 8023618:	af00      	add	r7, sp, #0
 802361a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 802361c:	687b      	ldr	r3, [r7, #4]
 802361e:	681b      	ldr	r3, [r3, #0]
 8023620:	4a0a      	ldr	r2, [pc, #40]	@ (802364c <HAL_PCD_MspInit+0x38>)
 8023622:	4293      	cmp	r3, r2
 8023624:	d10e      	bne.n	8023644 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8023626:	4b0a      	ldr	r3, [pc, #40]	@ (8023650 <HAL_PCD_MspInit+0x3c>)
 8023628:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802362a:	4b09      	ldr	r3, [pc, #36]	@ (8023650 <HAL_PCD_MspInit+0x3c>)
 802362c:	2180      	movs	r1, #128	@ 0x80
 802362e:	0409      	lsls	r1, r1, #16
 8023630:	430a      	orrs	r2, r1
 8023632:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8023634:	2200      	movs	r2, #0
 8023636:	2100      	movs	r1, #0
 8023638:	201f      	movs	r0, #31
 802363a:	f7f1 fe31 	bl	80152a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 802363e:	201f      	movs	r0, #31
 8023640:	f7f1 fe43 	bl	80152ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8023644:	46c0      	nop			@ (mov r8, r8)
 8023646:	46bd      	mov	sp, r7
 8023648:	b002      	add	sp, #8
 802364a:	bd80      	pop	{r7, pc}
 802364c:	40005c00 	.word	0x40005c00
 8023650:	40021000 	.word	0x40021000

08023654 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023654:	b580      	push	{r7, lr}
 8023656:	b082      	sub	sp, #8
 8023658:	af00      	add	r7, sp, #0
 802365a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 802365c:	687a      	ldr	r2, [r7, #4]
 802365e:	23bc      	movs	r3, #188	@ 0xbc
 8023660:	009b      	lsls	r3, r3, #2
 8023662:	58d2      	ldr	r2, [r2, r3]
 8023664:	687b      	ldr	r3, [r7, #4]
 8023666:	21ac      	movs	r1, #172	@ 0xac
 8023668:	0089      	lsls	r1, r1, #2
 802366a:	468c      	mov	ip, r1
 802366c:	4463      	add	r3, ip
 802366e:	0019      	movs	r1, r3
 8023670:	0010      	movs	r0, r2
 8023672:	f7fe fc11 	bl	8021e98 <USBD_LL_SetupStage>
}
 8023676:	46c0      	nop			@ (mov r8, r8)
 8023678:	46bd      	mov	sp, r7
 802367a:	b002      	add	sp, #8
 802367c:	bd80      	pop	{r7, pc}

0802367e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802367e:	b590      	push	{r4, r7, lr}
 8023680:	b083      	sub	sp, #12
 8023682:	af00      	add	r7, sp, #0
 8023684:	6078      	str	r0, [r7, #4]
 8023686:	000a      	movs	r2, r1
 8023688:	1cfb      	adds	r3, r7, #3
 802368a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 802368c:	687a      	ldr	r2, [r7, #4]
 802368e:	23bc      	movs	r3, #188	@ 0xbc
 8023690:	009b      	lsls	r3, r3, #2
 8023692:	58d4      	ldr	r4, [r2, r3]
 8023694:	1cfb      	adds	r3, r7, #3
 8023696:	781a      	ldrb	r2, [r3, #0]
 8023698:	6878      	ldr	r0, [r7, #4]
 802369a:	23be      	movs	r3, #190	@ 0xbe
 802369c:	0059      	lsls	r1, r3, #1
 802369e:	0013      	movs	r3, r2
 80236a0:	009b      	lsls	r3, r3, #2
 80236a2:	189b      	adds	r3, r3, r2
 80236a4:	00db      	lsls	r3, r3, #3
 80236a6:	18c3      	adds	r3, r0, r3
 80236a8:	185b      	adds	r3, r3, r1
 80236aa:	681a      	ldr	r2, [r3, #0]
 80236ac:	1cfb      	adds	r3, r7, #3
 80236ae:	781b      	ldrb	r3, [r3, #0]
 80236b0:	0019      	movs	r1, r3
 80236b2:	0020      	movs	r0, r4
 80236b4:	f7fe fc4e 	bl	8021f54 <USBD_LL_DataOutStage>
}
 80236b8:	46c0      	nop			@ (mov r8, r8)
 80236ba:	46bd      	mov	sp, r7
 80236bc:	b003      	add	sp, #12
 80236be:	bd90      	pop	{r4, r7, pc}

080236c0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80236c0:	b580      	push	{r7, lr}
 80236c2:	b082      	sub	sp, #8
 80236c4:	af00      	add	r7, sp, #0
 80236c6:	6078      	str	r0, [r7, #4]
 80236c8:	000a      	movs	r2, r1
 80236ca:	1cfb      	adds	r3, r7, #3
 80236cc:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80236ce:	687a      	ldr	r2, [r7, #4]
 80236d0:	23bc      	movs	r3, #188	@ 0xbc
 80236d2:	009b      	lsls	r3, r3, #2
 80236d4:	58d0      	ldr	r0, [r2, r3]
 80236d6:	1cfb      	adds	r3, r7, #3
 80236d8:	781a      	ldrb	r2, [r3, #0]
 80236da:	6879      	ldr	r1, [r7, #4]
 80236dc:	0013      	movs	r3, r2
 80236de:	009b      	lsls	r3, r3, #2
 80236e0:	189b      	adds	r3, r3, r2
 80236e2:	00db      	lsls	r3, r3, #3
 80236e4:	18cb      	adds	r3, r1, r3
 80236e6:	333c      	adds	r3, #60	@ 0x3c
 80236e8:	681a      	ldr	r2, [r3, #0]
 80236ea:	1cfb      	adds	r3, r7, #3
 80236ec:	781b      	ldrb	r3, [r3, #0]
 80236ee:	0019      	movs	r1, r3
 80236f0:	f7fe fcb2 	bl	8022058 <USBD_LL_DataInStage>
}
 80236f4:	46c0      	nop			@ (mov r8, r8)
 80236f6:	46bd      	mov	sp, r7
 80236f8:	b002      	add	sp, #8
 80236fa:	bd80      	pop	{r7, pc}

080236fc <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80236fc:	b580      	push	{r7, lr}
 80236fe:	b082      	sub	sp, #8
 8023700:	af00      	add	r7, sp, #0
 8023702:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8023704:	687a      	ldr	r2, [r7, #4]
 8023706:	23bc      	movs	r3, #188	@ 0xbc
 8023708:	009b      	lsls	r3, r3, #2
 802370a:	58d3      	ldr	r3, [r2, r3]
 802370c:	0018      	movs	r0, r3
 802370e:	f7fe fde9 	bl	80222e4 <USBD_LL_SOF>
}
 8023712:	46c0      	nop			@ (mov r8, r8)
 8023714:	46bd      	mov	sp, r7
 8023716:	b002      	add	sp, #8
 8023718:	bd80      	pop	{r7, pc}

0802371a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802371a:	b580      	push	{r7, lr}
 802371c:	b084      	sub	sp, #16
 802371e:	af00      	add	r7, sp, #0
 8023720:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8023722:	230f      	movs	r3, #15
 8023724:	18fb      	adds	r3, r7, r3
 8023726:	2201      	movs	r2, #1
 8023728:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 802372a:	687b      	ldr	r3, [r7, #4]
 802372c:	689b      	ldr	r3, [r3, #8]
 802372e:	2b02      	cmp	r3, #2
 8023730:	d001      	beq.n	8023736 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8023732:	f7e9 feaf 	bl	800d494 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8023736:	687a      	ldr	r2, [r7, #4]
 8023738:	23bc      	movs	r3, #188	@ 0xbc
 802373a:	009b      	lsls	r3, r3, #2
 802373c:	58d2      	ldr	r2, [r2, r3]
 802373e:	230f      	movs	r3, #15
 8023740:	18fb      	adds	r3, r7, r3
 8023742:	781b      	ldrb	r3, [r3, #0]
 8023744:	0019      	movs	r1, r3
 8023746:	0010      	movs	r0, r2
 8023748:	f7fe fd8b 	bl	8022262 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802374c:	687a      	ldr	r2, [r7, #4]
 802374e:	23bc      	movs	r3, #188	@ 0xbc
 8023750:	009b      	lsls	r3, r3, #2
 8023752:	58d3      	ldr	r3, [r2, r3]
 8023754:	0018      	movs	r0, r3
 8023756:	f7fe fd3c 	bl	80221d2 <USBD_LL_Reset>
}
 802375a:	46c0      	nop			@ (mov r8, r8)
 802375c:	46bd      	mov	sp, r7
 802375e:	b004      	add	sp, #16
 8023760:	bd80      	pop	{r7, pc}
	...

08023764 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023764:	b580      	push	{r7, lr}
 8023766:	b082      	sub	sp, #8
 8023768:	af00      	add	r7, sp, #0
 802376a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 802376c:	687a      	ldr	r2, [r7, #4]
 802376e:	23bc      	movs	r3, #188	@ 0xbc
 8023770:	009b      	lsls	r3, r3, #2
 8023772:	58d3      	ldr	r3, [r2, r3]
 8023774:	0018      	movs	r0, r3
 8023776:	f7fe fd85 	bl	8022284 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802377a:	687b      	ldr	r3, [r7, #4]
 802377c:	699b      	ldr	r3, [r3, #24]
 802377e:	2b00      	cmp	r3, #0
 8023780:	d005      	beq.n	802378e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023782:	4b05      	ldr	r3, [pc, #20]	@ (8023798 <HAL_PCD_SuspendCallback+0x34>)
 8023784:	691a      	ldr	r2, [r3, #16]
 8023786:	4b04      	ldr	r3, [pc, #16]	@ (8023798 <HAL_PCD_SuspendCallback+0x34>)
 8023788:	2106      	movs	r1, #6
 802378a:	430a      	orrs	r2, r1
 802378c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 802378e:	46c0      	nop			@ (mov r8, r8)
 8023790:	46bd      	mov	sp, r7
 8023792:	b002      	add	sp, #8
 8023794:	bd80      	pop	{r7, pc}
 8023796:	46c0      	nop			@ (mov r8, r8)
 8023798:	e000ed00 	.word	0xe000ed00

0802379c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802379c:	b580      	push	{r7, lr}
 802379e:	b082      	sub	sp, #8
 80237a0:	af00      	add	r7, sp, #0
 80237a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80237a4:	687b      	ldr	r3, [r7, #4]
 80237a6:	699b      	ldr	r3, [r3, #24]
 80237a8:	2b00      	cmp	r3, #0
 80237aa:	d007      	beq.n	80237bc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80237ac:	4b09      	ldr	r3, [pc, #36]	@ (80237d4 <HAL_PCD_ResumeCallback+0x38>)
 80237ae:	691a      	ldr	r2, [r3, #16]
 80237b0:	4b08      	ldr	r3, [pc, #32]	@ (80237d4 <HAL_PCD_ResumeCallback+0x38>)
 80237b2:	2106      	movs	r1, #6
 80237b4:	438a      	bics	r2, r1
 80237b6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80237b8:	f000 fa44 	bl	8023c44 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80237bc:	687a      	ldr	r2, [r7, #4]
 80237be:	23bc      	movs	r3, #188	@ 0xbc
 80237c0:	009b      	lsls	r3, r3, #2
 80237c2:	58d3      	ldr	r3, [r2, r3]
 80237c4:	0018      	movs	r0, r3
 80237c6:	f7fe fd75 	bl	80222b4 <USBD_LL_Resume>
}
 80237ca:	46c0      	nop			@ (mov r8, r8)
 80237cc:	46bd      	mov	sp, r7
 80237ce:	b002      	add	sp, #8
 80237d0:	bd80      	pop	{r7, pc}
 80237d2:	46c0      	nop			@ (mov r8, r8)
 80237d4:	e000ed00 	.word	0xe000ed00

080237d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80237d8:	b580      	push	{r7, lr}
 80237da:	b082      	sub	sp, #8
 80237dc:	af00      	add	r7, sp, #0
 80237de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80237e0:	4a2d      	ldr	r2, [pc, #180]	@ (8023898 <USBD_LL_Init+0xc0>)
 80237e2:	23bc      	movs	r3, #188	@ 0xbc
 80237e4:	009b      	lsls	r3, r3, #2
 80237e6:	6879      	ldr	r1, [r7, #4]
 80237e8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80237ea:	687a      	ldr	r2, [r7, #4]
 80237ec:	23b0      	movs	r3, #176	@ 0xb0
 80237ee:	009b      	lsls	r3, r3, #2
 80237f0:	4929      	ldr	r1, [pc, #164]	@ (8023898 <USBD_LL_Init+0xc0>)
 80237f2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80237f4:	4b28      	ldr	r3, [pc, #160]	@ (8023898 <USBD_LL_Init+0xc0>)
 80237f6:	4a29      	ldr	r2, [pc, #164]	@ (802389c <USBD_LL_Init+0xc4>)
 80237f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80237fa:	4b27      	ldr	r3, [pc, #156]	@ (8023898 <USBD_LL_Init+0xc0>)
 80237fc:	2208      	movs	r2, #8
 80237fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8023800:	4b25      	ldr	r3, [pc, #148]	@ (8023898 <USBD_LL_Init+0xc0>)
 8023802:	2202      	movs	r2, #2
 8023804:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8023806:	4b24      	ldr	r3, [pc, #144]	@ (8023898 <USBD_LL_Init+0xc0>)
 8023808:	2202      	movs	r2, #2
 802380a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 802380c:	4b22      	ldr	r3, [pc, #136]	@ (8023898 <USBD_LL_Init+0xc0>)
 802380e:	2200      	movs	r2, #0
 8023810:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8023812:	4b21      	ldr	r3, [pc, #132]	@ (8023898 <USBD_LL_Init+0xc0>)
 8023814:	2200      	movs	r2, #0
 8023816:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8023818:	4b1f      	ldr	r3, [pc, #124]	@ (8023898 <USBD_LL_Init+0xc0>)
 802381a:	2200      	movs	r2, #0
 802381c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 802381e:	4b1e      	ldr	r3, [pc, #120]	@ (8023898 <USBD_LL_Init+0xc0>)
 8023820:	0018      	movs	r0, r3
 8023822:	f7f5 fe89 	bl	8019538 <HAL_PCD_Init>
 8023826:	1e03      	subs	r3, r0, #0
 8023828:	d001      	beq.n	802382e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 802382a:	f7e9 fe33 	bl	800d494 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 802382e:	687a      	ldr	r2, [r7, #4]
 8023830:	23b0      	movs	r3, #176	@ 0xb0
 8023832:	009b      	lsls	r3, r3, #2
 8023834:	58d0      	ldr	r0, [r2, r3]
 8023836:	2318      	movs	r3, #24
 8023838:	2200      	movs	r2, #0
 802383a:	2100      	movs	r1, #0
 802383c:	f7f7 fc4a 	bl	801b0d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8023840:	687a      	ldr	r2, [r7, #4]
 8023842:	23b0      	movs	r3, #176	@ 0xb0
 8023844:	009b      	lsls	r3, r3, #2
 8023846:	58d0      	ldr	r0, [r2, r3]
 8023848:	2358      	movs	r3, #88	@ 0x58
 802384a:	2200      	movs	r2, #0
 802384c:	2180      	movs	r1, #128	@ 0x80
 802384e:	f7f7 fc41 	bl	801b0d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8023852:	687a      	ldr	r2, [r7, #4]
 8023854:	23b0      	movs	r3, #176	@ 0xb0
 8023856:	009b      	lsls	r3, r3, #2
 8023858:	58d0      	ldr	r0, [r2, r3]
 802385a:	23c0      	movs	r3, #192	@ 0xc0
 802385c:	2200      	movs	r2, #0
 802385e:	2181      	movs	r1, #129	@ 0x81
 8023860:	f7f7 fc38 	bl	801b0d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8023864:	687a      	ldr	r2, [r7, #4]
 8023866:	23b0      	movs	r3, #176	@ 0xb0
 8023868:	009b      	lsls	r3, r3, #2
 802386a:	58d0      	ldr	r0, [r2, r3]
 802386c:	2388      	movs	r3, #136	@ 0x88
 802386e:	005b      	lsls	r3, r3, #1
 8023870:	2200      	movs	r2, #0
 8023872:	2101      	movs	r1, #1
 8023874:	f7f7 fc2e 	bl	801b0d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8023878:	687a      	ldr	r2, [r7, #4]
 802387a:	23b0      	movs	r3, #176	@ 0xb0
 802387c:	009b      	lsls	r3, r3, #2
 802387e:	58d0      	ldr	r0, [r2, r3]
 8023880:	2380      	movs	r3, #128	@ 0x80
 8023882:	005b      	lsls	r3, r3, #1
 8023884:	2200      	movs	r2, #0
 8023886:	2182      	movs	r1, #130	@ 0x82
 8023888:	f7f7 fc24 	bl	801b0d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 802388c:	2300      	movs	r3, #0
}
 802388e:	0018      	movs	r0, r3
 8023890:	46bd      	mov	sp, r7
 8023892:	b002      	add	sp, #8
 8023894:	bd80      	pop	{r7, pc}
 8023896:	46c0      	nop			@ (mov r8, r8)
 8023898:	200032b8 	.word	0x200032b8
 802389c:	40005c00 	.word	0x40005c00

080238a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80238a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80238a2:	b085      	sub	sp, #20
 80238a4:	af00      	add	r7, sp, #0
 80238a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80238a8:	210f      	movs	r1, #15
 80238aa:	187b      	adds	r3, r7, r1
 80238ac:	2200      	movs	r2, #0
 80238ae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80238b0:	260e      	movs	r6, #14
 80238b2:	19bb      	adds	r3, r7, r6
 80238b4:	2200      	movs	r2, #0
 80238b6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80238b8:	687a      	ldr	r2, [r7, #4]
 80238ba:	23b0      	movs	r3, #176	@ 0xb0
 80238bc:	009b      	lsls	r3, r3, #2
 80238be:	58d3      	ldr	r3, [r2, r3]
 80238c0:	000d      	movs	r5, r1
 80238c2:	187c      	adds	r4, r7, r1
 80238c4:	0018      	movs	r0, r3
 80238c6:	f7f5 ff37 	bl	8019738 <HAL_PCD_Start>
 80238ca:	0003      	movs	r3, r0
 80238cc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80238ce:	19bc      	adds	r4, r7, r6
 80238d0:	197b      	adds	r3, r7, r5
 80238d2:	781b      	ldrb	r3, [r3, #0]
 80238d4:	0018      	movs	r0, r3
 80238d6:	f000 f9bc 	bl	8023c52 <USBD_Get_USB_Status>
 80238da:	0003      	movs	r3, r0
 80238dc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80238de:	19bb      	adds	r3, r7, r6
 80238e0:	781b      	ldrb	r3, [r3, #0]
}
 80238e2:	0018      	movs	r0, r3
 80238e4:	46bd      	mov	sp, r7
 80238e6:	b005      	add	sp, #20
 80238e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080238ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80238ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80238ec:	b085      	sub	sp, #20
 80238ee:	af00      	add	r7, sp, #0
 80238f0:	6078      	str	r0, [r7, #4]
 80238f2:	000c      	movs	r4, r1
 80238f4:	0010      	movs	r0, r2
 80238f6:	0019      	movs	r1, r3
 80238f8:	1cfb      	adds	r3, r7, #3
 80238fa:	1c22      	adds	r2, r4, #0
 80238fc:	701a      	strb	r2, [r3, #0]
 80238fe:	1cbb      	adds	r3, r7, #2
 8023900:	1c02      	adds	r2, r0, #0
 8023902:	701a      	strb	r2, [r3, #0]
 8023904:	003b      	movs	r3, r7
 8023906:	1c0a      	adds	r2, r1, #0
 8023908:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802390a:	260f      	movs	r6, #15
 802390c:	19bb      	adds	r3, r7, r6
 802390e:	2200      	movs	r2, #0
 8023910:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023912:	250e      	movs	r5, #14
 8023914:	197b      	adds	r3, r7, r5
 8023916:	2200      	movs	r2, #0
 8023918:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 802391a:	687a      	ldr	r2, [r7, #4]
 802391c:	23b0      	movs	r3, #176	@ 0xb0
 802391e:	009b      	lsls	r3, r3, #2
 8023920:	58d0      	ldr	r0, [r2, r3]
 8023922:	19bc      	adds	r4, r7, r6
 8023924:	1cbb      	adds	r3, r7, #2
 8023926:	781d      	ldrb	r5, [r3, #0]
 8023928:	003b      	movs	r3, r7
 802392a:	881a      	ldrh	r2, [r3, #0]
 802392c:	1cfb      	adds	r3, r7, #3
 802392e:	7819      	ldrb	r1, [r3, #0]
 8023930:	002b      	movs	r3, r5
 8023932:	f7f6 f896 	bl	8019a62 <HAL_PCD_EP_Open>
 8023936:	0003      	movs	r3, r0
 8023938:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802393a:	250e      	movs	r5, #14
 802393c:	197c      	adds	r4, r7, r5
 802393e:	19bb      	adds	r3, r7, r6
 8023940:	781b      	ldrb	r3, [r3, #0]
 8023942:	0018      	movs	r0, r3
 8023944:	f000 f985 	bl	8023c52 <USBD_Get_USB_Status>
 8023948:	0003      	movs	r3, r0
 802394a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802394c:	197b      	adds	r3, r7, r5
 802394e:	781b      	ldrb	r3, [r3, #0]
}
 8023950:	0018      	movs	r0, r3
 8023952:	46bd      	mov	sp, r7
 8023954:	b005      	add	sp, #20
 8023956:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023958 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023958:	b5f0      	push	{r4, r5, r6, r7, lr}
 802395a:	b085      	sub	sp, #20
 802395c:	af00      	add	r7, sp, #0
 802395e:	6078      	str	r0, [r7, #4]
 8023960:	000a      	movs	r2, r1
 8023962:	1cfb      	adds	r3, r7, #3
 8023964:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023966:	210f      	movs	r1, #15
 8023968:	187b      	adds	r3, r7, r1
 802396a:	2200      	movs	r2, #0
 802396c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802396e:	260e      	movs	r6, #14
 8023970:	19bb      	adds	r3, r7, r6
 8023972:	2200      	movs	r2, #0
 8023974:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023976:	687a      	ldr	r2, [r7, #4]
 8023978:	23b0      	movs	r3, #176	@ 0xb0
 802397a:	009b      	lsls	r3, r3, #2
 802397c:	58d2      	ldr	r2, [r2, r3]
 802397e:	000d      	movs	r5, r1
 8023980:	187c      	adds	r4, r7, r1
 8023982:	1cfb      	adds	r3, r7, #3
 8023984:	781b      	ldrb	r3, [r3, #0]
 8023986:	0019      	movs	r1, r3
 8023988:	0010      	movs	r0, r2
 802398a:	f7f6 f8d9 	bl	8019b40 <HAL_PCD_EP_Close>
 802398e:	0003      	movs	r3, r0
 8023990:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023992:	19bc      	adds	r4, r7, r6
 8023994:	197b      	adds	r3, r7, r5
 8023996:	781b      	ldrb	r3, [r3, #0]
 8023998:	0018      	movs	r0, r3
 802399a:	f000 f95a 	bl	8023c52 <USBD_Get_USB_Status>
 802399e:	0003      	movs	r3, r0
 80239a0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80239a2:	19bb      	adds	r3, r7, r6
 80239a4:	781b      	ldrb	r3, [r3, #0]
}
 80239a6:	0018      	movs	r0, r3
 80239a8:	46bd      	mov	sp, r7
 80239aa:	b005      	add	sp, #20
 80239ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080239ae <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80239ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80239b0:	b085      	sub	sp, #20
 80239b2:	af00      	add	r7, sp, #0
 80239b4:	6078      	str	r0, [r7, #4]
 80239b6:	000a      	movs	r2, r1
 80239b8:	1cfb      	adds	r3, r7, #3
 80239ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80239bc:	210f      	movs	r1, #15
 80239be:	187b      	adds	r3, r7, r1
 80239c0:	2200      	movs	r2, #0
 80239c2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80239c4:	260e      	movs	r6, #14
 80239c6:	19bb      	adds	r3, r7, r6
 80239c8:	2200      	movs	r2, #0
 80239ca:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80239cc:	687a      	ldr	r2, [r7, #4]
 80239ce:	23b0      	movs	r3, #176	@ 0xb0
 80239d0:	009b      	lsls	r3, r3, #2
 80239d2:	58d2      	ldr	r2, [r2, r3]
 80239d4:	000d      	movs	r5, r1
 80239d6:	187c      	adds	r4, r7, r1
 80239d8:	1cfb      	adds	r3, r7, #3
 80239da:	781b      	ldrb	r3, [r3, #0]
 80239dc:	0019      	movs	r1, r3
 80239de:	0010      	movs	r0, r2
 80239e0:	f7f6 f98b 	bl	8019cfa <HAL_PCD_EP_SetStall>
 80239e4:	0003      	movs	r3, r0
 80239e6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80239e8:	19bc      	adds	r4, r7, r6
 80239ea:	197b      	adds	r3, r7, r5
 80239ec:	781b      	ldrb	r3, [r3, #0]
 80239ee:	0018      	movs	r0, r3
 80239f0:	f000 f92f 	bl	8023c52 <USBD_Get_USB_Status>
 80239f4:	0003      	movs	r3, r0
 80239f6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80239f8:	19bb      	adds	r3, r7, r6
 80239fa:	781b      	ldrb	r3, [r3, #0]
}
 80239fc:	0018      	movs	r0, r3
 80239fe:	46bd      	mov	sp, r7
 8023a00:	b005      	add	sp, #20
 8023a02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023a04 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a06:	b085      	sub	sp, #20
 8023a08:	af00      	add	r7, sp, #0
 8023a0a:	6078      	str	r0, [r7, #4]
 8023a0c:	000a      	movs	r2, r1
 8023a0e:	1cfb      	adds	r3, r7, #3
 8023a10:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023a12:	210f      	movs	r1, #15
 8023a14:	187b      	adds	r3, r7, r1
 8023a16:	2200      	movs	r2, #0
 8023a18:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023a1a:	260e      	movs	r6, #14
 8023a1c:	19bb      	adds	r3, r7, r6
 8023a1e:	2200      	movs	r2, #0
 8023a20:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8023a22:	687a      	ldr	r2, [r7, #4]
 8023a24:	23b0      	movs	r3, #176	@ 0xb0
 8023a26:	009b      	lsls	r3, r3, #2
 8023a28:	58d2      	ldr	r2, [r2, r3]
 8023a2a:	000d      	movs	r5, r1
 8023a2c:	187c      	adds	r4, r7, r1
 8023a2e:	1cfb      	adds	r3, r7, #3
 8023a30:	781b      	ldrb	r3, [r3, #0]
 8023a32:	0019      	movs	r1, r3
 8023a34:	0010      	movs	r0, r2
 8023a36:	f7f6 f9bc 	bl	8019db2 <HAL_PCD_EP_ClrStall>
 8023a3a:	0003      	movs	r3, r0
 8023a3c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023a3e:	19bc      	adds	r4, r7, r6
 8023a40:	197b      	adds	r3, r7, r5
 8023a42:	781b      	ldrb	r3, [r3, #0]
 8023a44:	0018      	movs	r0, r3
 8023a46:	f000 f904 	bl	8023c52 <USBD_Get_USB_Status>
 8023a4a:	0003      	movs	r3, r0
 8023a4c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023a4e:	19bb      	adds	r3, r7, r6
 8023a50:	781b      	ldrb	r3, [r3, #0]
}
 8023a52:	0018      	movs	r0, r3
 8023a54:	46bd      	mov	sp, r7
 8023a56:	b005      	add	sp, #20
 8023a58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023a5a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023a5a:	b580      	push	{r7, lr}
 8023a5c:	b084      	sub	sp, #16
 8023a5e:	af00      	add	r7, sp, #0
 8023a60:	6078      	str	r0, [r7, #4]
 8023a62:	000a      	movs	r2, r1
 8023a64:	1cfb      	adds	r3, r7, #3
 8023a66:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8023a68:	687a      	ldr	r2, [r7, #4]
 8023a6a:	23b0      	movs	r3, #176	@ 0xb0
 8023a6c:	009b      	lsls	r3, r3, #2
 8023a6e:	58d3      	ldr	r3, [r2, r3]
 8023a70:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8023a72:	1cfb      	adds	r3, r7, #3
 8023a74:	781b      	ldrb	r3, [r3, #0]
 8023a76:	b25b      	sxtb	r3, r3
 8023a78:	2b00      	cmp	r3, #0
 8023a7a:	da0d      	bge.n	8023a98 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8023a7c:	1cfb      	adds	r3, r7, #3
 8023a7e:	781b      	ldrb	r3, [r3, #0]
 8023a80:	227f      	movs	r2, #127	@ 0x7f
 8023a82:	4013      	ands	r3, r2
 8023a84:	68f9      	ldr	r1, [r7, #12]
 8023a86:	1c5a      	adds	r2, r3, #1
 8023a88:	0013      	movs	r3, r2
 8023a8a:	009b      	lsls	r3, r3, #2
 8023a8c:	189b      	adds	r3, r3, r2
 8023a8e:	00db      	lsls	r3, r3, #3
 8023a90:	18cb      	adds	r3, r1, r3
 8023a92:	3302      	adds	r3, #2
 8023a94:	781b      	ldrb	r3, [r3, #0]
 8023a96:	e00d      	b.n	8023ab4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8023a98:	1cfb      	adds	r3, r7, #3
 8023a9a:	781b      	ldrb	r3, [r3, #0]
 8023a9c:	227f      	movs	r2, #127	@ 0x7f
 8023a9e:	401a      	ands	r2, r3
 8023aa0:	68f8      	ldr	r0, [r7, #12]
 8023aa2:	23b5      	movs	r3, #181	@ 0xb5
 8023aa4:	0059      	lsls	r1, r3, #1
 8023aa6:	0013      	movs	r3, r2
 8023aa8:	009b      	lsls	r3, r3, #2
 8023aaa:	189b      	adds	r3, r3, r2
 8023aac:	00db      	lsls	r3, r3, #3
 8023aae:	18c3      	adds	r3, r0, r3
 8023ab0:	185b      	adds	r3, r3, r1
 8023ab2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8023ab4:	0018      	movs	r0, r3
 8023ab6:	46bd      	mov	sp, r7
 8023ab8:	b004      	add	sp, #16
 8023aba:	bd80      	pop	{r7, pc}

08023abc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8023abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023abe:	b085      	sub	sp, #20
 8023ac0:	af00      	add	r7, sp, #0
 8023ac2:	6078      	str	r0, [r7, #4]
 8023ac4:	000a      	movs	r2, r1
 8023ac6:	1cfb      	adds	r3, r7, #3
 8023ac8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023aca:	210f      	movs	r1, #15
 8023acc:	187b      	adds	r3, r7, r1
 8023ace:	2200      	movs	r2, #0
 8023ad0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023ad2:	260e      	movs	r6, #14
 8023ad4:	19bb      	adds	r3, r7, r6
 8023ad6:	2200      	movs	r2, #0
 8023ad8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8023ada:	687a      	ldr	r2, [r7, #4]
 8023adc:	23b0      	movs	r3, #176	@ 0xb0
 8023ade:	009b      	lsls	r3, r3, #2
 8023ae0:	58d2      	ldr	r2, [r2, r3]
 8023ae2:	000d      	movs	r5, r1
 8023ae4:	187c      	adds	r4, r7, r1
 8023ae6:	1cfb      	adds	r3, r7, #3
 8023ae8:	781b      	ldrb	r3, [r3, #0]
 8023aea:	0019      	movs	r1, r3
 8023aec:	0010      	movs	r0, r2
 8023aee:	f7f5 ff8d 	bl	8019a0c <HAL_PCD_SetAddress>
 8023af2:	0003      	movs	r3, r0
 8023af4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023af6:	19bc      	adds	r4, r7, r6
 8023af8:	197b      	adds	r3, r7, r5
 8023afa:	781b      	ldrb	r3, [r3, #0]
 8023afc:	0018      	movs	r0, r3
 8023afe:	f000 f8a8 	bl	8023c52 <USBD_Get_USB_Status>
 8023b02:	0003      	movs	r3, r0
 8023b04:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023b06:	19bb      	adds	r3, r7, r6
 8023b08:	781b      	ldrb	r3, [r3, #0]
}
 8023b0a:	0018      	movs	r0, r3
 8023b0c:	46bd      	mov	sp, r7
 8023b0e:	b005      	add	sp, #20
 8023b10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023b12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8023b12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023b14:	b087      	sub	sp, #28
 8023b16:	af00      	add	r7, sp, #0
 8023b18:	60f8      	str	r0, [r7, #12]
 8023b1a:	0008      	movs	r0, r1
 8023b1c:	607a      	str	r2, [r7, #4]
 8023b1e:	0019      	movs	r1, r3
 8023b20:	230b      	movs	r3, #11
 8023b22:	18fb      	adds	r3, r7, r3
 8023b24:	1c02      	adds	r2, r0, #0
 8023b26:	701a      	strb	r2, [r3, #0]
 8023b28:	2408      	movs	r4, #8
 8023b2a:	193b      	adds	r3, r7, r4
 8023b2c:	1c0a      	adds	r2, r1, #0
 8023b2e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023b30:	2117      	movs	r1, #23
 8023b32:	187b      	adds	r3, r7, r1
 8023b34:	2200      	movs	r2, #0
 8023b36:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023b38:	2516      	movs	r5, #22
 8023b3a:	197b      	adds	r3, r7, r5
 8023b3c:	2200      	movs	r2, #0
 8023b3e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023b40:	68fa      	ldr	r2, [r7, #12]
 8023b42:	23b0      	movs	r3, #176	@ 0xb0
 8023b44:	009b      	lsls	r3, r3, #2
 8023b46:	58d0      	ldr	r0, [r2, r3]
 8023b48:	193b      	adds	r3, r7, r4
 8023b4a:	881d      	ldrh	r5, [r3, #0]
 8023b4c:	000e      	movs	r6, r1
 8023b4e:	187c      	adds	r4, r7, r1
 8023b50:	687a      	ldr	r2, [r7, #4]
 8023b52:	230b      	movs	r3, #11
 8023b54:	18fb      	adds	r3, r7, r3
 8023b56:	7819      	ldrb	r1, [r3, #0]
 8023b58:	002b      	movs	r3, r5
 8023b5a:	f7f6 f892 	bl	8019c82 <HAL_PCD_EP_Transmit>
 8023b5e:	0003      	movs	r3, r0
 8023b60:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023b62:	2516      	movs	r5, #22
 8023b64:	197c      	adds	r4, r7, r5
 8023b66:	19bb      	adds	r3, r7, r6
 8023b68:	781b      	ldrb	r3, [r3, #0]
 8023b6a:	0018      	movs	r0, r3
 8023b6c:	f000 f871 	bl	8023c52 <USBD_Get_USB_Status>
 8023b70:	0003      	movs	r3, r0
 8023b72:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023b74:	197b      	adds	r3, r7, r5
 8023b76:	781b      	ldrb	r3, [r3, #0]
}
 8023b78:	0018      	movs	r0, r3
 8023b7a:	46bd      	mov	sp, r7
 8023b7c:	b007      	add	sp, #28
 8023b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023b80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8023b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023b82:	b087      	sub	sp, #28
 8023b84:	af00      	add	r7, sp, #0
 8023b86:	60f8      	str	r0, [r7, #12]
 8023b88:	0008      	movs	r0, r1
 8023b8a:	607a      	str	r2, [r7, #4]
 8023b8c:	0019      	movs	r1, r3
 8023b8e:	230b      	movs	r3, #11
 8023b90:	18fb      	adds	r3, r7, r3
 8023b92:	1c02      	adds	r2, r0, #0
 8023b94:	701a      	strb	r2, [r3, #0]
 8023b96:	2408      	movs	r4, #8
 8023b98:	193b      	adds	r3, r7, r4
 8023b9a:	1c0a      	adds	r2, r1, #0
 8023b9c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023b9e:	2117      	movs	r1, #23
 8023ba0:	187b      	adds	r3, r7, r1
 8023ba2:	2200      	movs	r2, #0
 8023ba4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023ba6:	2516      	movs	r5, #22
 8023ba8:	197b      	adds	r3, r7, r5
 8023baa:	2200      	movs	r2, #0
 8023bac:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023bae:	68fa      	ldr	r2, [r7, #12]
 8023bb0:	23b0      	movs	r3, #176	@ 0xb0
 8023bb2:	009b      	lsls	r3, r3, #2
 8023bb4:	58d0      	ldr	r0, [r2, r3]
 8023bb6:	193b      	adds	r3, r7, r4
 8023bb8:	881d      	ldrh	r5, [r3, #0]
 8023bba:	000e      	movs	r6, r1
 8023bbc:	187c      	adds	r4, r7, r1
 8023bbe:	687a      	ldr	r2, [r7, #4]
 8023bc0:	230b      	movs	r3, #11
 8023bc2:	18fb      	adds	r3, r7, r3
 8023bc4:	7819      	ldrb	r1, [r3, #0]
 8023bc6:	002b      	movs	r3, r5
 8023bc8:	f7f6 f80b 	bl	8019be2 <HAL_PCD_EP_Receive>
 8023bcc:	0003      	movs	r3, r0
 8023bce:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023bd0:	2516      	movs	r5, #22
 8023bd2:	197c      	adds	r4, r7, r5
 8023bd4:	19bb      	adds	r3, r7, r6
 8023bd6:	781b      	ldrb	r3, [r3, #0]
 8023bd8:	0018      	movs	r0, r3
 8023bda:	f000 f83a 	bl	8023c52 <USBD_Get_USB_Status>
 8023bde:	0003      	movs	r3, r0
 8023be0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023be2:	197b      	adds	r3, r7, r5
 8023be4:	781b      	ldrb	r3, [r3, #0]
}
 8023be6:	0018      	movs	r0, r3
 8023be8:	46bd      	mov	sp, r7
 8023bea:	b007      	add	sp, #28
 8023bec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023bee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023bee:	b580      	push	{r7, lr}
 8023bf0:	b082      	sub	sp, #8
 8023bf2:	af00      	add	r7, sp, #0
 8023bf4:	6078      	str	r0, [r7, #4]
 8023bf6:	000a      	movs	r2, r1
 8023bf8:	1cfb      	adds	r3, r7, #3
 8023bfa:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8023bfc:	687a      	ldr	r2, [r7, #4]
 8023bfe:	23b0      	movs	r3, #176	@ 0xb0
 8023c00:	009b      	lsls	r3, r3, #2
 8023c02:	58d2      	ldr	r2, [r2, r3]
 8023c04:	1cfb      	adds	r3, r7, #3
 8023c06:	781b      	ldrb	r3, [r3, #0]
 8023c08:	0019      	movs	r1, r3
 8023c0a:	0010      	movs	r0, r2
 8023c0c:	f7f6 f820 	bl	8019c50 <HAL_PCD_EP_GetRxCount>
 8023c10:	0003      	movs	r3, r0
}
 8023c12:	0018      	movs	r0, r3
 8023c14:	46bd      	mov	sp, r7
 8023c16:	b002      	add	sp, #8
 8023c18:	bd80      	pop	{r7, pc}
	...

08023c1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8023c1c:	b580      	push	{r7, lr}
 8023c1e:	b082      	sub	sp, #8
 8023c20:	af00      	add	r7, sp, #0
 8023c22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8023c24:	4b02      	ldr	r3, [pc, #8]	@ (8023c30 <USBD_static_malloc+0x14>)
}
 8023c26:	0018      	movs	r0, r3
 8023c28:	46bd      	mov	sp, r7
 8023c2a:	b002      	add	sp, #8
 8023c2c:	bd80      	pop	{r7, pc}
 8023c2e:	46c0      	nop			@ (mov r8, r8)
 8023c30:	200035ac 	.word	0x200035ac

08023c34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8023c34:	b580      	push	{r7, lr}
 8023c36:	b082      	sub	sp, #8
 8023c38:	af00      	add	r7, sp, #0
 8023c3a:	6078      	str	r0, [r7, #4]

}
 8023c3c:	46c0      	nop			@ (mov r8, r8)
 8023c3e:	46bd      	mov	sp, r7
 8023c40:	b002      	add	sp, #8
 8023c42:	bd80      	pop	{r7, pc}

08023c44 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8023c44:	b580      	push	{r7, lr}
 8023c46:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8023c48:	f7e9 fab8 	bl	800d1bc <SystemClock_Config>
}
 8023c4c:	46c0      	nop			@ (mov r8, r8)
 8023c4e:	46bd      	mov	sp, r7
 8023c50:	bd80      	pop	{r7, pc}

08023c52 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8023c52:	b580      	push	{r7, lr}
 8023c54:	b084      	sub	sp, #16
 8023c56:	af00      	add	r7, sp, #0
 8023c58:	0002      	movs	r2, r0
 8023c5a:	1dfb      	adds	r3, r7, #7
 8023c5c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023c5e:	230f      	movs	r3, #15
 8023c60:	18fb      	adds	r3, r7, r3
 8023c62:	2200      	movs	r2, #0
 8023c64:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8023c66:	1dfb      	adds	r3, r7, #7
 8023c68:	781b      	ldrb	r3, [r3, #0]
 8023c6a:	2b03      	cmp	r3, #3
 8023c6c:	d017      	beq.n	8023c9e <USBD_Get_USB_Status+0x4c>
 8023c6e:	dc1b      	bgt.n	8023ca8 <USBD_Get_USB_Status+0x56>
 8023c70:	2b02      	cmp	r3, #2
 8023c72:	d00f      	beq.n	8023c94 <USBD_Get_USB_Status+0x42>
 8023c74:	dc18      	bgt.n	8023ca8 <USBD_Get_USB_Status+0x56>
 8023c76:	2b00      	cmp	r3, #0
 8023c78:	d002      	beq.n	8023c80 <USBD_Get_USB_Status+0x2e>
 8023c7a:	2b01      	cmp	r3, #1
 8023c7c:	d005      	beq.n	8023c8a <USBD_Get_USB_Status+0x38>
 8023c7e:	e013      	b.n	8023ca8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8023c80:	230f      	movs	r3, #15
 8023c82:	18fb      	adds	r3, r7, r3
 8023c84:	2200      	movs	r2, #0
 8023c86:	701a      	strb	r2, [r3, #0]
    break;
 8023c88:	e013      	b.n	8023cb2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8023c8a:	230f      	movs	r3, #15
 8023c8c:	18fb      	adds	r3, r7, r3
 8023c8e:	2202      	movs	r2, #2
 8023c90:	701a      	strb	r2, [r3, #0]
    break;
 8023c92:	e00e      	b.n	8023cb2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8023c94:	230f      	movs	r3, #15
 8023c96:	18fb      	adds	r3, r7, r3
 8023c98:	2201      	movs	r2, #1
 8023c9a:	701a      	strb	r2, [r3, #0]
    break;
 8023c9c:	e009      	b.n	8023cb2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8023c9e:	230f      	movs	r3, #15
 8023ca0:	18fb      	adds	r3, r7, r3
 8023ca2:	2202      	movs	r2, #2
 8023ca4:	701a      	strb	r2, [r3, #0]
    break;
 8023ca6:	e004      	b.n	8023cb2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8023ca8:	230f      	movs	r3, #15
 8023caa:	18fb      	adds	r3, r7, r3
 8023cac:	2202      	movs	r2, #2
 8023cae:	701a      	strb	r2, [r3, #0]
    break;
 8023cb0:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8023cb2:	230f      	movs	r3, #15
 8023cb4:	18fb      	adds	r3, r7, r3
 8023cb6:	781b      	ldrb	r3, [r3, #0]
}
 8023cb8:	0018      	movs	r0, r3
 8023cba:	46bd      	mov	sp, r7
 8023cbc:	b004      	add	sp, #16
 8023cbe:	bd80      	pop	{r7, pc}

08023cc0 <arm_cfft_radix4by2_q31>:
 8023cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023cc2:	465f      	mov	r7, fp
 8023cc4:	4656      	mov	r6, sl
 8023cc6:	464d      	mov	r5, r9
 8023cc8:	4644      	mov	r4, r8
 8023cca:	000b      	movs	r3, r1
 8023ccc:	b4f0      	push	{r4, r5, r6, r7}
 8023cce:	085b      	lsrs	r3, r3, #1
 8023cd0:	b08f      	sub	sp, #60	@ 0x3c
 8023cd2:	910a      	str	r1, [sp, #40]	@ 0x28
 8023cd4:	0007      	movs	r7, r0
 8023cd6:	9009      	str	r0, [sp, #36]	@ 0x24
 8023cd8:	0011      	movs	r1, r2
 8023cda:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023cdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8023cde:	2b00      	cmp	r3, #0
 8023ce0:	d100      	bne.n	8023ce4 <arm_cfft_radix4by2_q31+0x24>
 8023ce2:	e0a0      	b.n	8023e26 <arm_cfft_radix4by2_q31+0x166>
 8023ce4:	0002      	movs	r2, r0
 8023ce6:	00db      	lsls	r3, r3, #3
 8023ce8:	3204      	adds	r2, #4
 8023cea:	4691      	mov	r9, r2
 8023cec:	4698      	mov	r8, r3
 8023cee:	000a      	movs	r2, r1
 8023cf0:	464e      	mov	r6, r9
 8023cf2:	4442      	add	r2, r8
 8023cf4:	4699      	mov	r9, r3
 8023cf6:	4688      	mov	r8, r1
 8023cf8:	9208      	str	r2, [sp, #32]
 8023cfa:	900d      	str	r0, [sp, #52]	@ 0x34
 8023cfc:	4643      	mov	r3, r8
 8023cfe:	681b      	ldr	r3, [r3, #0]
 8023d00:	469b      	mov	fp, r3
 8023d02:	4643      	mov	r3, r8
 8023d04:	685b      	ldr	r3, [r3, #4]
 8023d06:	469a      	mov	sl, r3
 8023d08:	683b      	ldr	r3, [r7, #0]
 8023d0a:	109c      	asrs	r4, r3, #2
 8023d0c:	464b      	mov	r3, r9
 8023d0e:	58fb      	ldr	r3, [r7, r3]
 8023d10:	109a      	asrs	r2, r3, #2
 8023d12:	18a3      	adds	r3, r4, r2
 8023d14:	603b      	str	r3, [r7, #0]
 8023d16:	6833      	ldr	r3, [r6, #0]
 8023d18:	1aa4      	subs	r4, r4, r2
 8023d1a:	109d      	asrs	r5, r3, #2
 8023d1c:	464b      	mov	r3, r9
 8023d1e:	58f3      	ldr	r3, [r6, r3]
 8023d20:	17e2      	asrs	r2, r4, #31
 8023d22:	109b      	asrs	r3, r3, #2
 8023d24:	18e9      	adds	r1, r5, r3
 8023d26:	6031      	str	r1, [r6, #0]
 8023d28:	0011      	movs	r1, r2
 8023d2a:	465a      	mov	r2, fp
 8023d2c:	17d2      	asrs	r2, r2, #31
 8023d2e:	0010      	movs	r0, r2
 8023d30:	4652      	mov	r2, sl
 8023d32:	1aed      	subs	r5, r5, r3
 8023d34:	17eb      	asrs	r3, r5, #31
 8023d36:	17d2      	asrs	r2, r2, #31
 8023d38:	9307      	str	r3, [sp, #28]
 8023d3a:	9204      	str	r2, [sp, #16]
 8023d3c:	0003      	movs	r3, r0
 8023d3e:	465a      	mov	r2, fp
 8023d40:	9006      	str	r0, [sp, #24]
 8023d42:	0020      	movs	r0, r4
 8023d44:	9105      	str	r1, [sp, #20]
 8023d46:	f7dc fc3b 	bl	80005c0 <__aeabi_lmul>
 8023d4a:	2280      	movs	r2, #128	@ 0x80
 8023d4c:	2300      	movs	r3, #0
 8023d4e:	0612      	lsls	r2, r2, #24
 8023d50:	1880      	adds	r0, r0, r2
 8023d52:	4159      	adcs	r1, r3
 8023d54:	2300      	movs	r3, #0
 8023d56:	9101      	str	r1, [sp, #4]
 8023d58:	9300      	str	r3, [sp, #0]
 8023d5a:	4652      	mov	r2, sl
 8023d5c:	9b04      	ldr	r3, [sp, #16]
 8023d5e:	0028      	movs	r0, r5
 8023d60:	17e9      	asrs	r1, r5, #31
 8023d62:	f7dc fc2d 	bl	80005c0 <__aeabi_lmul>
 8023d66:	9a00      	ldr	r2, [sp, #0]
 8023d68:	9b01      	ldr	r3, [sp, #4]
 8023d6a:	1880      	adds	r0, r0, r2
 8023d6c:	4159      	adcs	r1, r3
 8023d6e:	2280      	movs	r2, #128	@ 0x80
 8023d70:	2300      	movs	r3, #0
 8023d72:	0612      	lsls	r2, r2, #24
 8023d74:	1880      	adds	r0, r0, r2
 8023d76:	4159      	adcs	r1, r3
 8023d78:	464a      	mov	r2, r9
 8023d7a:	004b      	lsls	r3, r1, #1
 8023d7c:	50bb      	str	r3, [r7, r2]
 8023d7e:	4658      	mov	r0, fp
 8023d80:	002a      	movs	r2, r5
 8023d82:	9b07      	ldr	r3, [sp, #28]
 8023d84:	9906      	ldr	r1, [sp, #24]
 8023d86:	f7dc fc1b 	bl	80005c0 <__aeabi_lmul>
 8023d8a:	2280      	movs	r2, #128	@ 0x80
 8023d8c:	2300      	movs	r3, #0
 8023d8e:	0612      	lsls	r2, r2, #24
 8023d90:	1880      	adds	r0, r0, r2
 8023d92:	4159      	adcs	r1, r3
 8023d94:	2000      	movs	r0, #0
 8023d96:	9103      	str	r1, [sp, #12]
 8023d98:	9002      	str	r0, [sp, #8]
 8023d9a:	4652      	mov	r2, sl
 8023d9c:	9b04      	ldr	r3, [sp, #16]
 8023d9e:	0020      	movs	r0, r4
 8023da0:	9905      	ldr	r1, [sp, #20]
 8023da2:	f7dc fc0d 	bl	80005c0 <__aeabi_lmul>
 8023da6:	9a02      	ldr	r2, [sp, #8]
 8023da8:	9b03      	ldr	r3, [sp, #12]
 8023daa:	1a12      	subs	r2, r2, r0
 8023dac:	418b      	sbcs	r3, r1
 8023dae:	2080      	movs	r0, #128	@ 0x80
 8023db0:	2100      	movs	r1, #0
 8023db2:	0600      	lsls	r0, r0, #24
 8023db4:	1812      	adds	r2, r2, r0
 8023db6:	414b      	adcs	r3, r1
 8023db8:	464a      	mov	r2, r9
 8023dba:	005b      	lsls	r3, r3, #1
 8023dbc:	50b3      	str	r3, [r6, r2]
 8023dbe:	2308      	movs	r3, #8
 8023dc0:	469c      	mov	ip, r3
 8023dc2:	9b08      	ldr	r3, [sp, #32]
 8023dc4:	44e0      	add	r8, ip
 8023dc6:	3708      	adds	r7, #8
 8023dc8:	3608      	adds	r6, #8
 8023dca:	4598      	cmp	r8, r3
 8023dcc:	d196      	bne.n	8023cfc <arm_cfft_radix4by2_q31+0x3c>
 8023dce:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023dd0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023dd2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023dd4:	2302      	movs	r3, #2
 8023dd6:	003a      	movs	r2, r7
 8023dd8:	0029      	movs	r1, r5
 8023dda:	0020      	movs	r0, r4
 8023ddc:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8023dde:	f000 f957 	bl	8024090 <arm_radix4_butterfly_q31>
 8023de2:	46a4      	mov	ip, r4
 8023de4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023de6:	2302      	movs	r3, #2
 8023de8:	0088      	lsls	r0, r1, #2
 8023dea:	4460      	add	r0, ip
 8023dec:	003a      	movs	r2, r7
 8023dee:	0029      	movs	r1, r5
 8023df0:	f000 f94e 	bl	8024090 <arm_radix4_butterfly_q31>
 8023df4:	46a4      	mov	ip, r4
 8023df6:	0128      	lsls	r0, r5, #4
 8023df8:	4460      	add	r0, ip
 8023dfa:	6833      	ldr	r3, [r6, #0]
 8023dfc:	005b      	lsls	r3, r3, #1
 8023dfe:	6033      	str	r3, [r6, #0]
 8023e00:	6873      	ldr	r3, [r6, #4]
 8023e02:	005b      	lsls	r3, r3, #1
 8023e04:	6073      	str	r3, [r6, #4]
 8023e06:	68b3      	ldr	r3, [r6, #8]
 8023e08:	005b      	lsls	r3, r3, #1
 8023e0a:	60b3      	str	r3, [r6, #8]
 8023e0c:	68f3      	ldr	r3, [r6, #12]
 8023e0e:	005b      	lsls	r3, r3, #1
 8023e10:	60f3      	str	r3, [r6, #12]
 8023e12:	3610      	adds	r6, #16
 8023e14:	42b0      	cmp	r0, r6
 8023e16:	d1f0      	bne.n	8023dfa <arm_cfft_radix4by2_q31+0x13a>
 8023e18:	b00f      	add	sp, #60	@ 0x3c
 8023e1a:	bc3c      	pop	{r2, r3, r4, r5}
 8023e1c:	4690      	mov	r8, r2
 8023e1e:	4699      	mov	r9, r3
 8023e20:	46a2      	mov	sl, r4
 8023e22:	46ab      	mov	fp, r5
 8023e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023e26:	2302      	movs	r3, #2
 8023e28:	2100      	movs	r1, #0
 8023e2a:	0015      	movs	r5, r2
 8023e2c:	f000 f930 	bl	8024090 <arm_radix4_butterfly_q31>
 8023e30:	46bc      	mov	ip, r7
 8023e32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023e34:	002a      	movs	r2, r5
 8023e36:	0098      	lsls	r0, r3, #2
 8023e38:	4460      	add	r0, ip
 8023e3a:	2302      	movs	r3, #2
 8023e3c:	2100      	movs	r1, #0
 8023e3e:	f000 f927 	bl	8024090 <arm_radix4_butterfly_q31>
 8023e42:	e7e9      	b.n	8023e18 <arm_cfft_radix4by2_q31+0x158>

08023e44 <arm_cfft_radix4by2_inverse_q31>:
 8023e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023e46:	465f      	mov	r7, fp
 8023e48:	4656      	mov	r6, sl
 8023e4a:	464d      	mov	r5, r9
 8023e4c:	4644      	mov	r4, r8
 8023e4e:	000b      	movs	r3, r1
 8023e50:	b4f0      	push	{r4, r5, r6, r7}
 8023e52:	085b      	lsrs	r3, r3, #1
 8023e54:	b08f      	sub	sp, #60	@ 0x3c
 8023e56:	910a      	str	r1, [sp, #40]	@ 0x28
 8023e58:	0007      	movs	r7, r0
 8023e5a:	9009      	str	r0, [sp, #36]	@ 0x24
 8023e5c:	0011      	movs	r1, r2
 8023e5e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023e60:	930c      	str	r3, [sp, #48]	@ 0x30
 8023e62:	2b00      	cmp	r3, #0
 8023e64:	d100      	bne.n	8023e68 <arm_cfft_radix4by2_inverse_q31+0x24>
 8023e66:	e0a0      	b.n	8023faa <arm_cfft_radix4by2_inverse_q31+0x166>
 8023e68:	0002      	movs	r2, r0
 8023e6a:	00db      	lsls	r3, r3, #3
 8023e6c:	3204      	adds	r2, #4
 8023e6e:	4691      	mov	r9, r2
 8023e70:	4698      	mov	r8, r3
 8023e72:	000a      	movs	r2, r1
 8023e74:	464e      	mov	r6, r9
 8023e76:	4442      	add	r2, r8
 8023e78:	4699      	mov	r9, r3
 8023e7a:	4688      	mov	r8, r1
 8023e7c:	9208      	str	r2, [sp, #32]
 8023e7e:	900d      	str	r0, [sp, #52]	@ 0x34
 8023e80:	4643      	mov	r3, r8
 8023e82:	681b      	ldr	r3, [r3, #0]
 8023e84:	469b      	mov	fp, r3
 8023e86:	4643      	mov	r3, r8
 8023e88:	685b      	ldr	r3, [r3, #4]
 8023e8a:	469a      	mov	sl, r3
 8023e8c:	683b      	ldr	r3, [r7, #0]
 8023e8e:	109c      	asrs	r4, r3, #2
 8023e90:	464b      	mov	r3, r9
 8023e92:	58fb      	ldr	r3, [r7, r3]
 8023e94:	109a      	asrs	r2, r3, #2
 8023e96:	18a3      	adds	r3, r4, r2
 8023e98:	603b      	str	r3, [r7, #0]
 8023e9a:	6833      	ldr	r3, [r6, #0]
 8023e9c:	1aa4      	subs	r4, r4, r2
 8023e9e:	109d      	asrs	r5, r3, #2
 8023ea0:	464b      	mov	r3, r9
 8023ea2:	58f3      	ldr	r3, [r6, r3]
 8023ea4:	17e2      	asrs	r2, r4, #31
 8023ea6:	109b      	asrs	r3, r3, #2
 8023ea8:	18e9      	adds	r1, r5, r3
 8023eaa:	6031      	str	r1, [r6, #0]
 8023eac:	0011      	movs	r1, r2
 8023eae:	465a      	mov	r2, fp
 8023eb0:	17d2      	asrs	r2, r2, #31
 8023eb2:	0010      	movs	r0, r2
 8023eb4:	4652      	mov	r2, sl
 8023eb6:	1aed      	subs	r5, r5, r3
 8023eb8:	17eb      	asrs	r3, r5, #31
 8023eba:	17d2      	asrs	r2, r2, #31
 8023ebc:	9307      	str	r3, [sp, #28]
 8023ebe:	9204      	str	r2, [sp, #16]
 8023ec0:	0003      	movs	r3, r0
 8023ec2:	465a      	mov	r2, fp
 8023ec4:	9006      	str	r0, [sp, #24]
 8023ec6:	0020      	movs	r0, r4
 8023ec8:	9105      	str	r1, [sp, #20]
 8023eca:	f7dc fb79 	bl	80005c0 <__aeabi_lmul>
 8023ece:	2280      	movs	r2, #128	@ 0x80
 8023ed0:	2300      	movs	r3, #0
 8023ed2:	0612      	lsls	r2, r2, #24
 8023ed4:	1880      	adds	r0, r0, r2
 8023ed6:	4159      	adcs	r1, r3
 8023ed8:	2300      	movs	r3, #0
 8023eda:	9101      	str	r1, [sp, #4]
 8023edc:	9300      	str	r3, [sp, #0]
 8023ede:	4652      	mov	r2, sl
 8023ee0:	9b04      	ldr	r3, [sp, #16]
 8023ee2:	0028      	movs	r0, r5
 8023ee4:	17e9      	asrs	r1, r5, #31
 8023ee6:	f7dc fb6b 	bl	80005c0 <__aeabi_lmul>
 8023eea:	9a00      	ldr	r2, [sp, #0]
 8023eec:	9b01      	ldr	r3, [sp, #4]
 8023eee:	1a12      	subs	r2, r2, r0
 8023ef0:	418b      	sbcs	r3, r1
 8023ef2:	2080      	movs	r0, #128	@ 0x80
 8023ef4:	2100      	movs	r1, #0
 8023ef6:	0600      	lsls	r0, r0, #24
 8023ef8:	1812      	adds	r2, r2, r0
 8023efa:	414b      	adcs	r3, r1
 8023efc:	464a      	mov	r2, r9
 8023efe:	005b      	lsls	r3, r3, #1
 8023f00:	50bb      	str	r3, [r7, r2]
 8023f02:	4658      	mov	r0, fp
 8023f04:	002a      	movs	r2, r5
 8023f06:	9b07      	ldr	r3, [sp, #28]
 8023f08:	9906      	ldr	r1, [sp, #24]
 8023f0a:	f7dc fb59 	bl	80005c0 <__aeabi_lmul>
 8023f0e:	2280      	movs	r2, #128	@ 0x80
 8023f10:	2300      	movs	r3, #0
 8023f12:	0612      	lsls	r2, r2, #24
 8023f14:	1880      	adds	r0, r0, r2
 8023f16:	4159      	adcs	r1, r3
 8023f18:	2000      	movs	r0, #0
 8023f1a:	9103      	str	r1, [sp, #12]
 8023f1c:	9002      	str	r0, [sp, #8]
 8023f1e:	4652      	mov	r2, sl
 8023f20:	9b04      	ldr	r3, [sp, #16]
 8023f22:	0020      	movs	r0, r4
 8023f24:	9905      	ldr	r1, [sp, #20]
 8023f26:	f7dc fb4b 	bl	80005c0 <__aeabi_lmul>
 8023f2a:	9b02      	ldr	r3, [sp, #8]
 8023f2c:	9c03      	ldr	r4, [sp, #12]
 8023f2e:	18c0      	adds	r0, r0, r3
 8023f30:	4161      	adcs	r1, r4
 8023f32:	2380      	movs	r3, #128	@ 0x80
 8023f34:	2400      	movs	r4, #0
 8023f36:	061b      	lsls	r3, r3, #24
 8023f38:	18c0      	adds	r0, r0, r3
 8023f3a:	4161      	adcs	r1, r4
 8023f3c:	464a      	mov	r2, r9
 8023f3e:	004b      	lsls	r3, r1, #1
 8023f40:	50b3      	str	r3, [r6, r2]
 8023f42:	2308      	movs	r3, #8
 8023f44:	469c      	mov	ip, r3
 8023f46:	9b08      	ldr	r3, [sp, #32]
 8023f48:	44e0      	add	r8, ip
 8023f4a:	3708      	adds	r7, #8
 8023f4c:	3608      	adds	r6, #8
 8023f4e:	4598      	cmp	r8, r3
 8023f50:	d196      	bne.n	8023e80 <arm_cfft_radix4by2_inverse_q31+0x3c>
 8023f52:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023f54:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023f56:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023f58:	2302      	movs	r3, #2
 8023f5a:	003a      	movs	r2, r7
 8023f5c:	0029      	movs	r1, r5
 8023f5e:	0020      	movs	r0, r4
 8023f60:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8023f62:	f000 fb3b 	bl	80245dc <arm_radix4_butterfly_inverse_q31>
 8023f66:	46a4      	mov	ip, r4
 8023f68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023f6a:	2302      	movs	r3, #2
 8023f6c:	0088      	lsls	r0, r1, #2
 8023f6e:	4460      	add	r0, ip
 8023f70:	003a      	movs	r2, r7
 8023f72:	0029      	movs	r1, r5
 8023f74:	f000 fb32 	bl	80245dc <arm_radix4_butterfly_inverse_q31>
 8023f78:	46a4      	mov	ip, r4
 8023f7a:	0128      	lsls	r0, r5, #4
 8023f7c:	4460      	add	r0, ip
 8023f7e:	6833      	ldr	r3, [r6, #0]
 8023f80:	005b      	lsls	r3, r3, #1
 8023f82:	6033      	str	r3, [r6, #0]
 8023f84:	6873      	ldr	r3, [r6, #4]
 8023f86:	005b      	lsls	r3, r3, #1
 8023f88:	6073      	str	r3, [r6, #4]
 8023f8a:	68b3      	ldr	r3, [r6, #8]
 8023f8c:	005b      	lsls	r3, r3, #1
 8023f8e:	60b3      	str	r3, [r6, #8]
 8023f90:	68f3      	ldr	r3, [r6, #12]
 8023f92:	005b      	lsls	r3, r3, #1
 8023f94:	60f3      	str	r3, [r6, #12]
 8023f96:	3610      	adds	r6, #16
 8023f98:	42b0      	cmp	r0, r6
 8023f9a:	d1f0      	bne.n	8023f7e <arm_cfft_radix4by2_inverse_q31+0x13a>
 8023f9c:	b00f      	add	sp, #60	@ 0x3c
 8023f9e:	bc3c      	pop	{r2, r3, r4, r5}
 8023fa0:	4690      	mov	r8, r2
 8023fa2:	4699      	mov	r9, r3
 8023fa4:	46a2      	mov	sl, r4
 8023fa6:	46ab      	mov	fp, r5
 8023fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023faa:	2302      	movs	r3, #2
 8023fac:	2100      	movs	r1, #0
 8023fae:	0015      	movs	r5, r2
 8023fb0:	f000 fb14 	bl	80245dc <arm_radix4_butterfly_inverse_q31>
 8023fb4:	46bc      	mov	ip, r7
 8023fb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023fb8:	002a      	movs	r2, r5
 8023fba:	0098      	lsls	r0, r3, #2
 8023fbc:	4460      	add	r0, ip
 8023fbe:	2302      	movs	r3, #2
 8023fc0:	2100      	movs	r1, #0
 8023fc2:	f000 fb0b 	bl	80245dc <arm_radix4_butterfly_inverse_q31>
 8023fc6:	e7e9      	b.n	8023f9c <arm_cfft_radix4by2_inverse_q31+0x158>

08023fc8 <arm_cfft_q31>:
 8023fc8:	b570      	push	{r4, r5, r6, lr}
 8023fca:	001e      	movs	r6, r3
 8023fcc:	2380      	movs	r3, #128	@ 0x80
 8023fce:	000d      	movs	r5, r1
 8023fd0:	0004      	movs	r4, r0
 8023fd2:	8801      	ldrh	r1, [r0, #0]
 8023fd4:	005b      	lsls	r3, r3, #1
 8023fd6:	2a01      	cmp	r2, #1
 8023fd8:	d028      	beq.n	802402c <arm_cfft_q31+0x64>
 8023fda:	4299      	cmp	r1, r3
 8023fdc:	d020      	beq.n	8024020 <arm_cfft_q31+0x58>
 8023fde:	d812      	bhi.n	8024006 <arm_cfft_q31+0x3e>
 8023fe0:	2920      	cmp	r1, #32
 8023fe2:	d004      	beq.n	8023fee <arm_cfft_q31+0x26>
 8023fe4:	d949      	bls.n	802407a <arm_cfft_q31+0xb2>
 8023fe6:	2940      	cmp	r1, #64	@ 0x40
 8023fe8:	d01a      	beq.n	8024020 <arm_cfft_q31+0x58>
 8023fea:	2980      	cmp	r1, #128	@ 0x80
 8023fec:	d103      	bne.n	8023ff6 <arm_cfft_q31+0x2e>
 8023fee:	6862      	ldr	r2, [r4, #4]
 8023ff0:	0028      	movs	r0, r5
 8023ff2:	f7ff fe65 	bl	8023cc0 <arm_cfft_radix4by2_q31>
 8023ff6:	2e00      	cmp	r6, #0
 8023ff8:	d004      	beq.n	8024004 <arm_cfft_q31+0x3c>
 8023ffa:	68a2      	ldr	r2, [r4, #8]
 8023ffc:	89a1      	ldrh	r1, [r4, #12]
 8023ffe:	0028      	movs	r0, r5
 8024000:	f7dc f882 	bl	8000108 <arm_bitreversal_32>
 8024004:	bd70      	pop	{r4, r5, r6, pc}
 8024006:	2380      	movs	r3, #128	@ 0x80
 8024008:	00db      	lsls	r3, r3, #3
 802400a:	4299      	cmp	r1, r3
 802400c:	d008      	beq.n	8024020 <arm_cfft_q31+0x58>
 802400e:	d92f      	bls.n	8024070 <arm_cfft_q31+0xa8>
 8024010:	2380      	movs	r3, #128	@ 0x80
 8024012:	011b      	lsls	r3, r3, #4
 8024014:	4299      	cmp	r1, r3
 8024016:	d0ea      	beq.n	8023fee <arm_cfft_q31+0x26>
 8024018:	2380      	movs	r3, #128	@ 0x80
 802401a:	015b      	lsls	r3, r3, #5
 802401c:	4299      	cmp	r1, r3
 802401e:	d1ea      	bne.n	8023ff6 <arm_cfft_q31+0x2e>
 8024020:	2301      	movs	r3, #1
 8024022:	6862      	ldr	r2, [r4, #4]
 8024024:	0028      	movs	r0, r5
 8024026:	f000 f833 	bl	8024090 <arm_radix4_butterfly_q31>
 802402a:	e7e4      	b.n	8023ff6 <arm_cfft_q31+0x2e>
 802402c:	4299      	cmp	r1, r3
 802402e:	d019      	beq.n	8024064 <arm_cfft_q31+0x9c>
 8024030:	d80b      	bhi.n	802404a <arm_cfft_q31+0x82>
 8024032:	2920      	cmp	r1, #32
 8024034:	d004      	beq.n	8024040 <arm_cfft_q31+0x78>
 8024036:	d928      	bls.n	802408a <arm_cfft_q31+0xc2>
 8024038:	2940      	cmp	r1, #64	@ 0x40
 802403a:	d013      	beq.n	8024064 <arm_cfft_q31+0x9c>
 802403c:	2980      	cmp	r1, #128	@ 0x80
 802403e:	d1da      	bne.n	8023ff6 <arm_cfft_q31+0x2e>
 8024040:	6862      	ldr	r2, [r4, #4]
 8024042:	0028      	movs	r0, r5
 8024044:	f7ff fefe 	bl	8023e44 <arm_cfft_radix4by2_inverse_q31>
 8024048:	e7d5      	b.n	8023ff6 <arm_cfft_q31+0x2e>
 802404a:	2380      	movs	r3, #128	@ 0x80
 802404c:	00db      	lsls	r3, r3, #3
 802404e:	4299      	cmp	r1, r3
 8024050:	d008      	beq.n	8024064 <arm_cfft_q31+0x9c>
 8024052:	d915      	bls.n	8024080 <arm_cfft_q31+0xb8>
 8024054:	2380      	movs	r3, #128	@ 0x80
 8024056:	011b      	lsls	r3, r3, #4
 8024058:	4299      	cmp	r1, r3
 802405a:	d0f1      	beq.n	8024040 <arm_cfft_q31+0x78>
 802405c:	2380      	movs	r3, #128	@ 0x80
 802405e:	015b      	lsls	r3, r3, #5
 8024060:	4299      	cmp	r1, r3
 8024062:	d1c8      	bne.n	8023ff6 <arm_cfft_q31+0x2e>
 8024064:	2301      	movs	r3, #1
 8024066:	6862      	ldr	r2, [r4, #4]
 8024068:	0028      	movs	r0, r5
 802406a:	f000 fab7 	bl	80245dc <arm_radix4_butterfly_inverse_q31>
 802406e:	e7c2      	b.n	8023ff6 <arm_cfft_q31+0x2e>
 8024070:	2380      	movs	r3, #128	@ 0x80
 8024072:	009b      	lsls	r3, r3, #2
 8024074:	4299      	cmp	r1, r3
 8024076:	d0ba      	beq.n	8023fee <arm_cfft_q31+0x26>
 8024078:	e7bd      	b.n	8023ff6 <arm_cfft_q31+0x2e>
 802407a:	2910      	cmp	r1, #16
 802407c:	d1bb      	bne.n	8023ff6 <arm_cfft_q31+0x2e>
 802407e:	e7cf      	b.n	8024020 <arm_cfft_q31+0x58>
 8024080:	2380      	movs	r3, #128	@ 0x80
 8024082:	009b      	lsls	r3, r3, #2
 8024084:	4299      	cmp	r1, r3
 8024086:	d0db      	beq.n	8024040 <arm_cfft_q31+0x78>
 8024088:	e7b5      	b.n	8023ff6 <arm_cfft_q31+0x2e>
 802408a:	2910      	cmp	r1, #16
 802408c:	d1b3      	bne.n	8023ff6 <arm_cfft_q31+0x2e>
 802408e:	e7e9      	b.n	8024064 <arm_cfft_q31+0x9c>

08024090 <arm_radix4_butterfly_q31>:
 8024090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024092:	464d      	mov	r5, r9
 8024094:	4644      	mov	r4, r8
 8024096:	465f      	mov	r7, fp
 8024098:	4656      	mov	r6, sl
 802409a:	469c      	mov	ip, r3
 802409c:	b4f0      	push	{r4, r5, r6, r7}
 802409e:	b0a7      	sub	sp, #156	@ 0x9c
 80240a0:	9114      	str	r1, [sp, #80]	@ 0x50
 80240a2:	0889      	lsrs	r1, r1, #2
 80240a4:	9310      	str	r3, [sp, #64]	@ 0x40
 80240a6:	00cb      	lsls	r3, r1, #3
 80240a8:	0015      	movs	r5, r2
 80240aa:	9223      	str	r2, [sp, #140]	@ 0x8c
 80240ac:	18c2      	adds	r2, r0, r3
 80240ae:	000c      	movs	r4, r1
 80240b0:	469a      	mov	sl, r3
 80240b2:	9124      	str	r1, [sp, #144]	@ 0x90
 80240b4:	18d1      	adds	r1, r2, r3
 80240b6:	4663      	mov	r3, ip
 80240b8:	468b      	mov	fp, r1
 80240ba:	0119      	lsls	r1, r3, #4
 80240bc:	910d      	str	r1, [sp, #52]	@ 0x34
 80240be:	00d9      	lsls	r1, r3, #3
 80240c0:	005b      	lsls	r3, r3, #1
 80240c2:	4463      	add	r3, ip
 80240c4:	910e      	str	r1, [sp, #56]	@ 0x38
 80240c6:	00d9      	lsls	r1, r3, #3
 80240c8:	465b      	mov	r3, fp
 80240ca:	44da      	add	sl, fp
 80240cc:	4690      	mov	r8, r2
 80240ce:	4683      	mov	fp, r0
 80240d0:	4699      	mov	r9, r3
 80240d2:	9022      	str	r0, [sp, #136]	@ 0x88
 80240d4:	9025      	str	r0, [sp, #148]	@ 0x94
 80240d6:	910f      	str	r1, [sp, #60]	@ 0x3c
 80240d8:	9502      	str	r5, [sp, #8]
 80240da:	9500      	str	r5, [sp, #0]
 80240dc:	9501      	str	r5, [sp, #4]
 80240de:	9407      	str	r4, [sp, #28]
 80240e0:	465b      	mov	r3, fp
 80240e2:	681b      	ldr	r3, [r3, #0]
 80240e4:	4642      	mov	r2, r8
 80240e6:	111c      	asrs	r4, r3, #4
 80240e8:	464b      	mov	r3, r9
 80240ea:	4658      	mov	r0, fp
 80240ec:	681b      	ldr	r3, [r3, #0]
 80240ee:	6812      	ldr	r2, [r2, #0]
 80240f0:	111b      	asrs	r3, r3, #4
 80240f2:	18e7      	adds	r7, r4, r3
 80240f4:	1ae3      	subs	r3, r4, r3
 80240f6:	1114      	asrs	r4, r2, #4
 80240f8:	4652      	mov	r2, sl
 80240fa:	6840      	ldr	r0, [r0, #4]
 80240fc:	6812      	ldr	r2, [r2, #0]
 80240fe:	1105      	asrs	r5, r0, #4
 8024100:	4648      	mov	r0, r9
 8024102:	9303      	str	r3, [sp, #12]
 8024104:	1113      	asrs	r3, r2, #4
 8024106:	18e2      	adds	r2, r4, r3
 8024108:	465c      	mov	r4, fp
 802410a:	6840      	ldr	r0, [r0, #4]
 802410c:	1103      	asrs	r3, r0, #4
 802410e:	18ee      	adds	r6, r5, r3
 8024110:	1ae8      	subs	r0, r5, r3
 8024112:	18bb      	adds	r3, r7, r2
 8024114:	6023      	str	r3, [r4, #0]
 8024116:	4644      	mov	r4, r8
 8024118:	6864      	ldr	r4, [r4, #4]
 802411a:	9004      	str	r0, [sp, #16]
 802411c:	1125      	asrs	r5, r4, #4
 802411e:	4654      	mov	r4, sl
 8024120:	6864      	ldr	r4, [r4, #4]
 8024122:	1123      	asrs	r3, r4, #4
 8024124:	465c      	mov	r4, fp
 8024126:	18eb      	adds	r3, r5, r3
 8024128:	18f1      	adds	r1, r6, r3
 802412a:	6061      	str	r1, [r4, #4]
 802412c:	4655      	mov	r5, sl
 802412e:	4644      	mov	r4, r8
 8024130:	686d      	ldr	r5, [r5, #4]
 8024132:	6864      	ldr	r4, [r4, #4]
 8024134:	1129      	asrs	r1, r5, #4
 8024136:	1124      	asrs	r4, r4, #4
 8024138:	1a64      	subs	r4, r4, r1
 802413a:	4641      	mov	r1, r8
 802413c:	6809      	ldr	r1, [r1, #0]
 802413e:	9405      	str	r4, [sp, #20]
 8024140:	1108      	asrs	r0, r1, #4
 8024142:	4651      	mov	r1, sl
 8024144:	6809      	ldr	r1, [r1, #0]
 8024146:	1abc      	subs	r4, r7, r2
 8024148:	1109      	asrs	r1, r1, #4
 802414a:	1a41      	subs	r1, r0, r1
 802414c:	17e2      	asrs	r2, r4, #31
 802414e:	9106      	str	r1, [sp, #24]
 8024150:	0011      	movs	r1, r2
 8024152:	9a01      	ldr	r2, [sp, #4]
 8024154:	9108      	str	r1, [sp, #32]
 8024156:	6817      	ldr	r7, [r2, #0]
 8024158:	17fd      	asrs	r5, r7, #31
 802415a:	0028      	movs	r0, r5
 802415c:	1af5      	subs	r5, r6, r3
 802415e:	17ee      	asrs	r6, r5, #31
 8024160:	960a      	str	r6, [sp, #40]	@ 0x28
 8024162:	6856      	ldr	r6, [r2, #4]
 8024164:	9009      	str	r0, [sp, #36]	@ 0x24
 8024166:	17f3      	asrs	r3, r6, #31
 8024168:	003a      	movs	r2, r7
 802416a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802416c:	0003      	movs	r3, r0
 802416e:	0020      	movs	r0, r4
 8024170:	f7dc fa26 	bl	80005c0 <__aeabi_lmul>
 8024174:	0032      	movs	r2, r6
 8024176:	17f3      	asrs	r3, r6, #31
 8024178:	910c      	str	r1, [sp, #48]	@ 0x30
 802417a:	0028      	movs	r0, r5
 802417c:	17e9      	asrs	r1, r5, #31
 802417e:	f7dc fa1f 	bl	80005c0 <__aeabi_lmul>
 8024182:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024184:	002a      	movs	r2, r5
 8024186:	4684      	mov	ip, r0
 8024188:	4640      	mov	r0, r8
 802418a:	4461      	add	r1, ip
 802418c:	0049      	lsls	r1, r1, #1
 802418e:	6001      	str	r1, [r0, #0]
 8024190:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024192:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024194:	0038      	movs	r0, r7
 8024196:	f7dc fa13 	bl	80005c0 <__aeabi_lmul>
 802419a:	0032      	movs	r2, r6
 802419c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802419e:	000d      	movs	r5, r1
 80241a0:	0020      	movs	r0, r4
 80241a2:	9908      	ldr	r1, [sp, #32]
 80241a4:	f7dc fa0c 	bl	80005c0 <__aeabi_lmul>
 80241a8:	4646      	mov	r6, r8
 80241aa:	1a6d      	subs	r5, r5, r1
 80241ac:	006d      	lsls	r5, r5, #1
 80241ae:	6075      	str	r5, [r6, #4]
 80241b0:	9903      	ldr	r1, [sp, #12]
 80241b2:	9d05      	ldr	r5, [sp, #20]
 80241b4:	000c      	movs	r4, r1
 80241b6:	46ac      	mov	ip, r5
 80241b8:	4464      	add	r4, ip
 80241ba:	17e6      	asrs	r6, r4, #31
 80241bc:	0031      	movs	r1, r6
 80241be:	9b00      	ldr	r3, [sp, #0]
 80241c0:	9804      	ldr	r0, [sp, #16]
 80241c2:	681e      	ldr	r6, [r3, #0]
 80241c4:	17f7      	asrs	r7, r6, #31
 80241c6:	9709      	str	r7, [sp, #36]	@ 0x24
 80241c8:	9f06      	ldr	r7, [sp, #24]
 80241ca:	0032      	movs	r2, r6
 80241cc:	1bc7      	subs	r7, r0, r7
 80241ce:	17fd      	asrs	r5, r7, #31
 80241d0:	950a      	str	r5, [sp, #40]	@ 0x28
 80241d2:	685d      	ldr	r5, [r3, #4]
 80241d4:	17f3      	asrs	r3, r6, #31
 80241d6:	17e8      	asrs	r0, r5, #31
 80241d8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80241da:	0020      	movs	r0, r4
 80241dc:	9108      	str	r1, [sp, #32]
 80241de:	f7dc f9ef 	bl	80005c0 <__aeabi_lmul>
 80241e2:	002a      	movs	r2, r5
 80241e4:	17eb      	asrs	r3, r5, #31
 80241e6:	910c      	str	r1, [sp, #48]	@ 0x30
 80241e8:	0038      	movs	r0, r7
 80241ea:	17f9      	asrs	r1, r7, #31
 80241ec:	f7dc f9e8 	bl	80005c0 <__aeabi_lmul>
 80241f0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80241f2:	003a      	movs	r2, r7
 80241f4:	4684      	mov	ip, r0
 80241f6:	4648      	mov	r0, r9
 80241f8:	4461      	add	r1, ip
 80241fa:	0049      	lsls	r1, r1, #1
 80241fc:	6001      	str	r1, [r0, #0]
 80241fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024200:	0030      	movs	r0, r6
 8024202:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024204:	f7dc f9dc 	bl	80005c0 <__aeabi_lmul>
 8024208:	002a      	movs	r2, r5
 802420a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802420c:	000e      	movs	r6, r1
 802420e:	0020      	movs	r0, r4
 8024210:	9908      	ldr	r1, [sp, #32]
 8024212:	f7dc f9d5 	bl	80005c0 <__aeabi_lmul>
 8024216:	464c      	mov	r4, r9
 8024218:	9d05      	ldr	r5, [sp, #20]
 802421a:	1a76      	subs	r6, r6, r1
 802421c:	9903      	ldr	r1, [sp, #12]
 802421e:	0076      	lsls	r6, r6, #1
 8024220:	6066      	str	r6, [r4, #4]
 8024222:	1b4c      	subs	r4, r1, r5
 8024224:	9e06      	ldr	r6, [sp, #24]
 8024226:	17e1      	asrs	r1, r4, #31
 8024228:	9103      	str	r1, [sp, #12]
 802422a:	9902      	ldr	r1, [sp, #8]
 802422c:	46b4      	mov	ip, r6
 802422e:	680f      	ldr	r7, [r1, #0]
 8024230:	9804      	ldr	r0, [sp, #16]
 8024232:	17fd      	asrs	r5, r7, #31
 8024234:	002b      	movs	r3, r5
 8024236:	684e      	ldr	r6, [r1, #4]
 8024238:	4460      	add	r0, ip
 802423a:	0005      	movs	r5, r0
 802423c:	17c0      	asrs	r0, r0, #31
 802423e:	9005      	str	r0, [sp, #20]
 8024240:	17f0      	asrs	r0, r6, #31
 8024242:	9006      	str	r0, [sp, #24]
 8024244:	003a      	movs	r2, r7
 8024246:	0020      	movs	r0, r4
 8024248:	17e1      	asrs	r1, r4, #31
 802424a:	9304      	str	r3, [sp, #16]
 802424c:	f7dc f9b8 	bl	80005c0 <__aeabi_lmul>
 8024250:	0032      	movs	r2, r6
 8024252:	9108      	str	r1, [sp, #32]
 8024254:	17f3      	asrs	r3, r6, #31
 8024256:	0028      	movs	r0, r5
 8024258:	17e9      	asrs	r1, r5, #31
 802425a:	f7dc f9b1 	bl	80005c0 <__aeabi_lmul>
 802425e:	9808      	ldr	r0, [sp, #32]
 8024260:	002a      	movs	r2, r5
 8024262:	4684      	mov	ip, r0
 8024264:	4650      	mov	r0, sl
 8024266:	4461      	add	r1, ip
 8024268:	0049      	lsls	r1, r1, #1
 802426a:	6001      	str	r1, [r0, #0]
 802426c:	9b05      	ldr	r3, [sp, #20]
 802426e:	9904      	ldr	r1, [sp, #16]
 8024270:	0038      	movs	r0, r7
 8024272:	f7dc f9a5 	bl	80005c0 <__aeabi_lmul>
 8024276:	0020      	movs	r0, r4
 8024278:	2408      	movs	r4, #8
 802427a:	000d      	movs	r5, r1
 802427c:	0032      	movs	r2, r6
 802427e:	9b06      	ldr	r3, [sp, #24]
 8024280:	9903      	ldr	r1, [sp, #12]
 8024282:	f7dc f99d 	bl	80005c0 <__aeabi_lmul>
 8024286:	46a4      	mov	ip, r4
 8024288:	4650      	mov	r0, sl
 802428a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802428c:	44e3      	add	fp, ip
 802428e:	44e0      	add	r8, ip
 8024290:	44e1      	add	r9, ip
 8024292:	44e2      	add	sl, ip
 8024294:	46a4      	mov	ip, r4
 8024296:	1a6d      	subs	r5, r5, r1
 8024298:	006d      	lsls	r5, r5, #1
 802429a:	9a01      	ldr	r2, [sp, #4]
 802429c:	6045      	str	r5, [r0, #4]
 802429e:	9807      	ldr	r0, [sp, #28]
 80242a0:	4462      	add	r2, ip
 80242a2:	3801      	subs	r0, #1
 80242a4:	9201      	str	r2, [sp, #4]
 80242a6:	9007      	str	r0, [sp, #28]
 80242a8:	9b00      	ldr	r3, [sp, #0]
 80242aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80242ac:	9902      	ldr	r1, [sp, #8]
 80242ae:	4694      	mov	ip, r2
 80242b0:	4463      	add	r3, ip
 80242b2:	9300      	str	r3, [sp, #0]
 80242b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80242b6:	469c      	mov	ip, r3
 80242b8:	4461      	add	r1, ip
 80242ba:	9102      	str	r1, [sp, #8]
 80242bc:	2800      	cmp	r0, #0
 80242be:	d000      	beq.n	80242c2 <arm_radix4_butterfly_q31+0x232>
 80242c0:	e70e      	b.n	80240e0 <arm_radix4_butterfly_q31+0x50>
 80242c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80242c4:	009b      	lsls	r3, r3, #2
 80242c6:	931f      	str	r3, [sp, #124]	@ 0x7c
 80242c8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80242ca:	9320      	str	r3, [sp, #128]	@ 0x80
 80242cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80242ce:	2b04      	cmp	r3, #4
 80242d0:	d800      	bhi.n	80242d4 <arm_radix4_butterfly_q31+0x244>
 80242d2:	e180      	b.n	80245d6 <arm_radix4_butterfly_q31+0x546>
 80242d4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80242d6:	0893      	lsrs	r3, r2, #2
 80242d8:	1e59      	subs	r1, r3, #1
 80242da:	9321      	str	r3, [sp, #132]	@ 0x84
 80242dc:	00db      	lsls	r3, r3, #3
 80242de:	931b      	str	r3, [sp, #108]	@ 0x6c
 80242e0:	00d3      	lsls	r3, r2, #3
 80242e2:	9300      	str	r3, [sp, #0]
 80242e4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80242e6:	911a      	str	r1, [sp, #104]	@ 0x68
 80242e8:	00da      	lsls	r2, r3, #3
 80242ea:	921e      	str	r2, [sp, #120]	@ 0x78
 80242ec:	011a      	lsls	r2, r3, #4
 80242ee:	921d      	str	r2, [sp, #116]	@ 0x74
 80242f0:	001a      	movs	r2, r3
 80242f2:	4694      	mov	ip, r2
 80242f4:	005b      	lsls	r3, r3, #1
 80242f6:	4463      	add	r3, ip
 80242f8:	00db      	lsls	r3, r3, #3
 80242fa:	931c      	str	r3, [sp, #112]	@ 0x70
 80242fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80242fe:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024300:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024302:	9318      	str	r3, [sp, #96]	@ 0x60
 8024304:	9319      	str	r3, [sp, #100]	@ 0x64
 8024306:	9316      	str	r3, [sp, #88]	@ 0x58
 8024308:	2300      	movs	r3, #0
 802430a:	9315      	str	r3, [sp, #84]	@ 0x54
 802430c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802430e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024310:	681a      	ldr	r2, [r3, #0]
 8024312:	685b      	ldr	r3, [r3, #4]
 8024314:	9205      	str	r2, [sp, #20]
 8024316:	9306      	str	r3, [sp, #24]
 8024318:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802431a:	468c      	mov	ip, r1
 802431c:	681a      	ldr	r2, [r3, #0]
 802431e:	685b      	ldr	r3, [r3, #4]
 8024320:	9207      	str	r2, [sp, #28]
 8024322:	9308      	str	r3, [sp, #32]
 8024324:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024326:	681a      	ldr	r2, [r3, #0]
 8024328:	685b      	ldr	r3, [r3, #4]
 802432a:	9209      	str	r2, [sp, #36]	@ 0x24
 802432c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802432e:	930a      	str	r3, [sp, #40]	@ 0x28
 8024330:	0013      	movs	r3, r2
 8024332:	4463      	add	r3, ip
 8024334:	4698      	mov	r8, r3
 8024336:	0013      	movs	r3, r2
 8024338:	4442      	add	r2, r8
 802433a:	4691      	mov	r9, r2
 802433c:	001a      	movs	r2, r3
 802433e:	444a      	add	r2, r9
 8024340:	4692      	mov	sl, r2
 8024342:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024344:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024346:	4293      	cmp	r3, r2
 8024348:	d800      	bhi.n	802434c <arm_radix4_butterfly_q31+0x2bc>
 802434a:	e0dd      	b.n	8024508 <arm_radix4_butterfly_q31+0x478>
 802434c:	4694      	mov	ip, r2
 802434e:	468b      	mov	fp, r1
 8024350:	4644      	mov	r4, r8
 8024352:	4655      	mov	r5, sl
 8024354:	9b07      	ldr	r3, [sp, #28]
 8024356:	17db      	asrs	r3, r3, #31
 8024358:	930c      	str	r3, [sp, #48]	@ 0x30
 802435a:	9b08      	ldr	r3, [sp, #32]
 802435c:	17db      	asrs	r3, r3, #31
 802435e:	930d      	str	r3, [sp, #52]	@ 0x34
 8024360:	9b05      	ldr	r3, [sp, #20]
 8024362:	17db      	asrs	r3, r3, #31
 8024364:	930e      	str	r3, [sp, #56]	@ 0x38
 8024366:	9b06      	ldr	r3, [sp, #24]
 8024368:	17db      	asrs	r3, r3, #31
 802436a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802436c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802436e:	17db      	asrs	r3, r3, #31
 8024370:	9310      	str	r3, [sp, #64]	@ 0x40
 8024372:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024374:	17db      	asrs	r3, r3, #31
 8024376:	9311      	str	r3, [sp, #68]	@ 0x44
 8024378:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802437a:	4463      	add	r3, ip
 802437c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802437e:	465b      	mov	r3, fp
 8024380:	4659      	mov	r1, fp
 8024382:	681a      	ldr	r2, [r3, #0]
 8024384:	464b      	mov	r3, r9
 8024386:	684f      	ldr	r7, [r1, #4]
 8024388:	4649      	mov	r1, r9
 802438a:	681b      	ldr	r3, [r3, #0]
 802438c:	18d6      	adds	r6, r2, r3
 802438e:	1ad3      	subs	r3, r2, r3
 8024390:	9301      	str	r3, [sp, #4]
 8024392:	684b      	ldr	r3, [r1, #4]
 8024394:	18f8      	adds	r0, r7, r3
 8024396:	1af9      	subs	r1, r7, r3
 8024398:	6827      	ldr	r7, [r4, #0]
 802439a:	9102      	str	r1, [sp, #8]
 802439c:	003a      	movs	r2, r7
 802439e:	682f      	ldr	r7, [r5, #0]
 80243a0:	46bc      	mov	ip, r7
 80243a2:	465f      	mov	r7, fp
 80243a4:	4462      	add	r2, ip
 80243a6:	18b3      	adds	r3, r6, r2
 80243a8:	109b      	asrs	r3, r3, #2
 80243aa:	603b      	str	r3, [r7, #0]
 80243ac:	6867      	ldr	r7, [r4, #4]
 80243ae:	1ab6      	subs	r6, r6, r2
 80243b0:	46b8      	mov	r8, r7
 80243b2:	686f      	ldr	r7, [r5, #4]
 80243b4:	17f2      	asrs	r2, r6, #31
 80243b6:	46bc      	mov	ip, r7
 80243b8:	44e0      	add	r8, ip
 80243ba:	4643      	mov	r3, r8
 80243bc:	465f      	mov	r7, fp
 80243be:	18c1      	adds	r1, r0, r3
 80243c0:	1089      	asrs	r1, r1, #2
 80243c2:	6079      	str	r1, [r7, #4]
 80243c4:	9900      	ldr	r1, [sp, #0]
 80243c6:	4690      	mov	r8, r2
 80243c8:	468c      	mov	ip, r1
 80243ca:	6867      	ldr	r7, [r4, #4]
 80243cc:	6869      	ldr	r1, [r5, #4]
 80243ce:	44e3      	add	fp, ip
 80243d0:	1a7f      	subs	r7, r7, r1
 80243d2:	9703      	str	r7, [sp, #12]
 80243d4:	6829      	ldr	r1, [r5, #0]
 80243d6:	6827      	ldr	r7, [r4, #0]
 80243d8:	1a7f      	subs	r7, r7, r1
 80243da:	9704      	str	r7, [sp, #16]
 80243dc:	1ac7      	subs	r7, r0, r3
 80243de:	17fa      	asrs	r2, r7, #31
 80243e0:	4692      	mov	sl, r2
 80243e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80243e4:	9a07      	ldr	r2, [sp, #28]
 80243e6:	0030      	movs	r0, r6
 80243e8:	4641      	mov	r1, r8
 80243ea:	f7dc f8e9 	bl	80005c0 <__aeabi_lmul>
 80243ee:	9a08      	ldr	r2, [sp, #32]
 80243f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80243f2:	9112      	str	r1, [sp, #72]	@ 0x48
 80243f4:	0038      	movs	r0, r7
 80243f6:	4651      	mov	r1, sl
 80243f8:	f7dc f8e2 	bl	80005c0 <__aeabi_lmul>
 80243fc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80243fe:	9a07      	ldr	r2, [sp, #28]
 8024400:	4684      	mov	ip, r0
 8024402:	4461      	add	r1, ip
 8024404:	1049      	asrs	r1, r1, #1
 8024406:	6021      	str	r1, [r4, #0]
 8024408:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802440a:	0038      	movs	r0, r7
 802440c:	4651      	mov	r1, sl
 802440e:	f7dc f8d7 	bl	80005c0 <__aeabi_lmul>
 8024412:	9a08      	ldr	r2, [sp, #32]
 8024414:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024416:	000f      	movs	r7, r1
 8024418:	0030      	movs	r0, r6
 802441a:	4641      	mov	r1, r8
 802441c:	f7dc f8d0 	bl	80005c0 <__aeabi_lmul>
 8024420:	9b00      	ldr	r3, [sp, #0]
 8024422:	9a01      	ldr	r2, [sp, #4]
 8024424:	469c      	mov	ip, r3
 8024426:	9803      	ldr	r0, [sp, #12]
 8024428:	1a7f      	subs	r7, r7, r1
 802442a:	107f      	asrs	r7, r7, #1
 802442c:	6067      	str	r7, [r4, #4]
 802442e:	0016      	movs	r6, r2
 8024430:	4464      	add	r4, ip
 8024432:	4684      	mov	ip, r0
 8024434:	4466      	add	r6, ip
 8024436:	17f2      	asrs	r2, r6, #31
 8024438:	4690      	mov	r8, r2
 802443a:	9902      	ldr	r1, [sp, #8]
 802443c:	9f04      	ldr	r7, [sp, #16]
 802443e:	0030      	movs	r0, r6
 8024440:	1bcf      	subs	r7, r1, r7
 8024442:	17fa      	asrs	r2, r7, #31
 8024444:	4692      	mov	sl, r2
 8024446:	4641      	mov	r1, r8
 8024448:	9a05      	ldr	r2, [sp, #20]
 802444a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802444c:	f7dc f8b8 	bl	80005c0 <__aeabi_lmul>
 8024450:	9a06      	ldr	r2, [sp, #24]
 8024452:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024454:	9112      	str	r1, [sp, #72]	@ 0x48
 8024456:	0038      	movs	r0, r7
 8024458:	4651      	mov	r1, sl
 802445a:	f7dc f8b1 	bl	80005c0 <__aeabi_lmul>
 802445e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024460:	9a05      	ldr	r2, [sp, #20]
 8024462:	4684      	mov	ip, r0
 8024464:	4648      	mov	r0, r9
 8024466:	4461      	add	r1, ip
 8024468:	1049      	asrs	r1, r1, #1
 802446a:	6001      	str	r1, [r0, #0]
 802446c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802446e:	0038      	movs	r0, r7
 8024470:	4651      	mov	r1, sl
 8024472:	f7dc f8a5 	bl	80005c0 <__aeabi_lmul>
 8024476:	9a06      	ldr	r2, [sp, #24]
 8024478:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802447a:	000f      	movs	r7, r1
 802447c:	0030      	movs	r0, r6
 802447e:	4641      	mov	r1, r8
 8024480:	f7dc f89e 	bl	80005c0 <__aeabi_lmul>
 8024484:	464e      	mov	r6, r9
 8024486:	9a00      	ldr	r2, [sp, #0]
 8024488:	9b01      	ldr	r3, [sp, #4]
 802448a:	4694      	mov	ip, r2
 802448c:	9803      	ldr	r0, [sp, #12]
 802448e:	1a7f      	subs	r7, r7, r1
 8024490:	107f      	asrs	r7, r7, #1
 8024492:	6077      	str	r7, [r6, #4]
 8024494:	1a1e      	subs	r6, r3, r0
 8024496:	9b04      	ldr	r3, [sp, #16]
 8024498:	44e1      	add	r9, ip
 802449a:	469c      	mov	ip, r3
 802449c:	17f0      	asrs	r0, r6, #31
 802449e:	4680      	mov	r8, r0
 80244a0:	9902      	ldr	r1, [sp, #8]
 80244a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80244a4:	4461      	add	r1, ip
 80244a6:	17cb      	asrs	r3, r1, #31
 80244a8:	000f      	movs	r7, r1
 80244aa:	469a      	mov	sl, r3
 80244ac:	0030      	movs	r0, r6
 80244ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80244b0:	4641      	mov	r1, r8
 80244b2:	f7dc f885 	bl	80005c0 <__aeabi_lmul>
 80244b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80244b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80244ba:	9101      	str	r1, [sp, #4]
 80244bc:	0038      	movs	r0, r7
 80244be:	4651      	mov	r1, sl
 80244c0:	f7dc f87e 	bl	80005c0 <__aeabi_lmul>
 80244c4:	9801      	ldr	r0, [sp, #4]
 80244c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80244c8:	4684      	mov	ip, r0
 80244ca:	4461      	add	r1, ip
 80244cc:	1049      	asrs	r1, r1, #1
 80244ce:	6029      	str	r1, [r5, #0]
 80244d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80244d2:	0038      	movs	r0, r7
 80244d4:	4651      	mov	r1, sl
 80244d6:	f7dc f873 	bl	80005c0 <__aeabi_lmul>
 80244da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80244dc:	000f      	movs	r7, r1
 80244de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80244e0:	0030      	movs	r0, r6
 80244e2:	4641      	mov	r1, r8
 80244e4:	f7dc f86c 	bl	80005c0 <__aeabi_lmul>
 80244e8:	1a7f      	subs	r7, r7, r1
 80244ea:	107f      	asrs	r7, r7, #1
 80244ec:	606f      	str	r7, [r5, #4]
 80244ee:	9a00      	ldr	r2, [sp, #0]
 80244f0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80244f2:	4694      	mov	ip, r2
 80244f4:	4465      	add	r5, ip
 80244f6:	468c      	mov	ip, r1
 80244f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80244fa:	0013      	movs	r3, r2
 80244fc:	4462      	add	r2, ip
 80244fe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024500:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024502:	429a      	cmp	r2, r3
 8024504:	d900      	bls.n	8024508 <arm_radix4_butterfly_q31+0x478>
 8024506:	e73a      	b.n	802437e <arm_radix4_butterfly_q31+0x2ee>
 8024508:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802450a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802450c:	468c      	mov	ip, r1
 802450e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8024510:	4462      	add	r2, ip
 8024512:	468c      	mov	ip, r1
 8024514:	9216      	str	r2, [sp, #88]	@ 0x58
 8024516:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8024518:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802451a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802451c:	4462      	add	r2, ip
 802451e:	468c      	mov	ip, r1
 8024520:	9219      	str	r2, [sp, #100]	@ 0x64
 8024522:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024524:	3301      	adds	r3, #1
 8024526:	4462      	add	r2, ip
 8024528:	9218      	str	r2, [sp, #96]	@ 0x60
 802452a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802452c:	9315      	str	r3, [sp, #84]	@ 0x54
 802452e:	3208      	adds	r2, #8
 8024530:	9217      	str	r2, [sp, #92]	@ 0x5c
 8024532:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024534:	4293      	cmp	r3, r2
 8024536:	d800      	bhi.n	802453a <arm_radix4_butterfly_q31+0x4aa>
 8024538:	e6e8      	b.n	802430c <arm_radix4_butterfly_q31+0x27c>
 802453a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802453c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802453e:	009b      	lsls	r3, r3, #2
 8024540:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024542:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024544:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024546:	089b      	lsrs	r3, r3, #2
 8024548:	9320      	str	r3, [sp, #128]	@ 0x80
 802454a:	2b04      	cmp	r3, #4
 802454c:	d900      	bls.n	8024550 <arm_radix4_butterfly_q31+0x4c0>
 802454e:	e6c1      	b.n	80242d4 <arm_radix4_butterfly_q31+0x244>
 8024550:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024552:	469a      	mov	sl, r3
 8024554:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024556:	691c      	ldr	r4, [r3, #16]
 8024558:	685a      	ldr	r2, [r3, #4]
 802455a:	46a1      	mov	r9, r4
 802455c:	4690      	mov	r8, r2
 802455e:	6819      	ldr	r1, [r3, #0]
 8024560:	689a      	ldr	r2, [r3, #8]
 8024562:	699f      	ldr	r7, [r3, #24]
 8024564:	188d      	adds	r5, r1, r2
 8024566:	444d      	add	r5, r9
 8024568:	19ed      	adds	r5, r5, r7
 802456a:	69de      	ldr	r6, [r3, #28]
 802456c:	601d      	str	r5, [r3, #0]
 802456e:	4645      	mov	r5, r8
 8024570:	46b4      	mov	ip, r6
 8024572:	68d8      	ldr	r0, [r3, #12]
 8024574:	695c      	ldr	r4, [r3, #20]
 8024576:	182d      	adds	r5, r5, r0
 8024578:	192d      	adds	r5, r5, r4
 802457a:	4465      	add	r5, ip
 802457c:	605d      	str	r5, [r3, #4]
 802457e:	1a8d      	subs	r5, r1, r2
 8024580:	444d      	add	r5, r9
 8024582:	1bed      	subs	r5, r5, r7
 8024584:	609d      	str	r5, [r3, #8]
 8024586:	4645      	mov	r5, r8
 8024588:	1a2d      	subs	r5, r5, r0
 802458a:	192d      	adds	r5, r5, r4
 802458c:	1bad      	subs	r5, r5, r6
 802458e:	464e      	mov	r6, r9
 8024590:	60dd      	str	r5, [r3, #12]
 8024592:	180d      	adds	r5, r1, r0
 8024594:	1bad      	subs	r5, r5, r6
 8024596:	4666      	mov	r6, ip
 8024598:	1bad      	subs	r5, r5, r6
 802459a:	611d      	str	r5, [r3, #16]
 802459c:	4645      	mov	r5, r8
 802459e:	1aad      	subs	r5, r5, r2
 80245a0:	4442      	add	r2, r8
 80245a2:	1b12      	subs	r2, r2, r4
 80245a4:	1bd2      	subs	r2, r2, r7
 80245a6:	1a08      	subs	r0, r1, r0
 80245a8:	61da      	str	r2, [r3, #28]
 80245aa:	4649      	mov	r1, r9
 80245ac:	2201      	movs	r2, #1
 80245ae:	1a41      	subs	r1, r0, r1
 80245b0:	4252      	negs	r2, r2
 80245b2:	4461      	add	r1, ip
 80245b4:	4694      	mov	ip, r2
 80245b6:	44e2      	add	sl, ip
 80245b8:	4652      	mov	r2, sl
 80245ba:	1b2d      	subs	r5, r5, r4
 80245bc:	19ed      	adds	r5, r5, r7
 80245be:	615d      	str	r5, [r3, #20]
 80245c0:	6199      	str	r1, [r3, #24]
 80245c2:	3320      	adds	r3, #32
 80245c4:	2a00      	cmp	r2, #0
 80245c6:	d1c6      	bne.n	8024556 <arm_radix4_butterfly_q31+0x4c6>
 80245c8:	b027      	add	sp, #156	@ 0x9c
 80245ca:	bc3c      	pop	{r2, r3, r4, r5}
 80245cc:	4690      	mov	r8, r2
 80245ce:	4699      	mov	r9, r3
 80245d0:	46a2      	mov	sl, r4
 80245d2:	46ab      	mov	fp, r5
 80245d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80245d6:	469a      	mov	sl, r3
 80245d8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80245da:	e7bc      	b.n	8024556 <arm_radix4_butterfly_q31+0x4c6>

080245dc <arm_radix4_butterfly_inverse_q31>:
 80245dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80245de:	464d      	mov	r5, r9
 80245e0:	4644      	mov	r4, r8
 80245e2:	465f      	mov	r7, fp
 80245e4:	4656      	mov	r6, sl
 80245e6:	b4f0      	push	{r4, r5, r6, r7}
 80245e8:	b0a7      	sub	sp, #156	@ 0x9c
 80245ea:	469c      	mov	ip, r3
 80245ec:	9114      	str	r1, [sp, #80]	@ 0x50
 80245ee:	0889      	lsrs	r1, r1, #2
 80245f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80245f2:	00cb      	lsls	r3, r1, #3
 80245f4:	0015      	movs	r5, r2
 80245f6:	9223      	str	r2, [sp, #140]	@ 0x8c
 80245f8:	18c2      	adds	r2, r0, r3
 80245fa:	000c      	movs	r4, r1
 80245fc:	9124      	str	r1, [sp, #144]	@ 0x90
 80245fe:	18d1      	adds	r1, r2, r3
 8024600:	468b      	mov	fp, r1
 8024602:	469a      	mov	sl, r3
 8024604:	4663      	mov	r3, ip
 8024606:	44da      	add	sl, fp
 8024608:	46d0      	mov	r8, sl
 802460a:	4681      	mov	r9, r0
 802460c:	4692      	mov	sl, r2
 802460e:	0119      	lsls	r1, r3, #4
 8024610:	910d      	str	r1, [sp, #52]	@ 0x34
 8024612:	00d9      	lsls	r1, r3, #3
 8024614:	005b      	lsls	r3, r3, #1
 8024616:	4463      	add	r3, ip
 8024618:	910e      	str	r1, [sp, #56]	@ 0x38
 802461a:	00d9      	lsls	r1, r3, #3
 802461c:	9022      	str	r0, [sp, #136]	@ 0x88
 802461e:	9025      	str	r0, [sp, #148]	@ 0x94
 8024620:	910f      	str	r1, [sp, #60]	@ 0x3c
 8024622:	9502      	str	r5, [sp, #8]
 8024624:	9500      	str	r5, [sp, #0]
 8024626:	9501      	str	r5, [sp, #4]
 8024628:	9409      	str	r4, [sp, #36]	@ 0x24
 802462a:	464b      	mov	r3, r9
 802462c:	681b      	ldr	r3, [r3, #0]
 802462e:	4652      	mov	r2, sl
 8024630:	111c      	asrs	r4, r3, #4
 8024632:	465b      	mov	r3, fp
 8024634:	4648      	mov	r0, r9
 8024636:	681b      	ldr	r3, [r3, #0]
 8024638:	6812      	ldr	r2, [r2, #0]
 802463a:	6840      	ldr	r0, [r0, #4]
 802463c:	111b      	asrs	r3, r3, #4
 802463e:	18e7      	adds	r7, r4, r3
 8024640:	1ae3      	subs	r3, r4, r3
 8024642:	1114      	asrs	r4, r2, #4
 8024644:	4642      	mov	r2, r8
 8024646:	1105      	asrs	r5, r0, #4
 8024648:	4658      	mov	r0, fp
 802464a:	6812      	ldr	r2, [r2, #0]
 802464c:	6840      	ldr	r0, [r0, #4]
 802464e:	9303      	str	r3, [sp, #12]
 8024650:	1113      	asrs	r3, r2, #4
 8024652:	18e2      	adds	r2, r4, r3
 8024654:	1103      	asrs	r3, r0, #4
 8024656:	18ee      	adds	r6, r5, r3
 8024658:	1ae8      	subs	r0, r5, r3
 802465a:	464d      	mov	r5, r9
 802465c:	18bb      	adds	r3, r7, r2
 802465e:	602b      	str	r3, [r5, #0]
 8024660:	4641      	mov	r1, r8
 8024662:	4655      	mov	r5, sl
 8024664:	6849      	ldr	r1, [r1, #4]
 8024666:	686d      	ldr	r5, [r5, #4]
 8024668:	110b      	asrs	r3, r1, #4
 802466a:	112d      	asrs	r5, r5, #4
 802466c:	18eb      	adds	r3, r5, r3
 802466e:	464d      	mov	r5, r9
 8024670:	18f1      	adds	r1, r6, r3
 8024672:	6069      	str	r1, [r5, #4]
 8024674:	4655      	mov	r5, sl
 8024676:	686d      	ldr	r5, [r5, #4]
 8024678:	9004      	str	r0, [sp, #16]
 802467a:	112c      	asrs	r4, r5, #4
 802467c:	4645      	mov	r5, r8
 802467e:	686d      	ldr	r5, [r5, #4]
 8024680:	1129      	asrs	r1, r5, #4
 8024682:	1a65      	subs	r5, r4, r1
 8024684:	4651      	mov	r1, sl
 8024686:	6809      	ldr	r1, [r1, #0]
 8024688:	1abc      	subs	r4, r7, r2
 802468a:	1108      	asrs	r0, r1, #4
 802468c:	4641      	mov	r1, r8
 802468e:	17e2      	asrs	r2, r4, #31
 8024690:	6809      	ldr	r1, [r1, #0]
 8024692:	9207      	str	r2, [sp, #28]
 8024694:	9a01      	ldr	r2, [sp, #4]
 8024696:	1109      	asrs	r1, r1, #4
 8024698:	6817      	ldr	r7, [r2, #0]
 802469a:	1a41      	subs	r1, r0, r1
 802469c:	9106      	str	r1, [sp, #24]
 802469e:	0039      	movs	r1, r7
 80246a0:	17ff      	asrs	r7, r7, #31
 80246a2:	0038      	movs	r0, r7
 80246a4:	9505      	str	r5, [sp, #20]
 80246a6:	1af5      	subs	r5, r6, r3
 80246a8:	17ef      	asrs	r7, r5, #31
 80246aa:	970b      	str	r7, [sp, #44]	@ 0x2c
 80246ac:	6857      	ldr	r7, [r2, #4]
 80246ae:	0003      	movs	r3, r0
 80246b0:	17fe      	asrs	r6, r7, #31
 80246b2:	000a      	movs	r2, r1
 80246b4:	9108      	str	r1, [sp, #32]
 80246b6:	900a      	str	r0, [sp, #40]	@ 0x28
 80246b8:	17e1      	asrs	r1, r4, #31
 80246ba:	0020      	movs	r0, r4
 80246bc:	960c      	str	r6, [sp, #48]	@ 0x30
 80246be:	f7db ff7f 	bl	80005c0 <__aeabi_lmul>
 80246c2:	003a      	movs	r2, r7
 80246c4:	17fb      	asrs	r3, r7, #31
 80246c6:	000e      	movs	r6, r1
 80246c8:	0028      	movs	r0, r5
 80246ca:	17e9      	asrs	r1, r5, #31
 80246cc:	f7db ff78 	bl	80005c0 <__aeabi_lmul>
 80246d0:	4653      	mov	r3, sl
 80246d2:	1a76      	subs	r6, r6, r1
 80246d4:	0076      	lsls	r6, r6, #1
 80246d6:	601e      	str	r6, [r3, #0]
 80246d8:	002a      	movs	r2, r5
 80246da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80246dc:	9808      	ldr	r0, [sp, #32]
 80246de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80246e0:	f7db ff6e 	bl	80005c0 <__aeabi_lmul>
 80246e4:	003a      	movs	r2, r7
 80246e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80246e8:	000d      	movs	r5, r1
 80246ea:	0020      	movs	r0, r4
 80246ec:	9907      	ldr	r1, [sp, #28]
 80246ee:	f7db ff67 	bl	80005c0 <__aeabi_lmul>
 80246f2:	4657      	mov	r7, sl
 80246f4:	186d      	adds	r5, r5, r1
 80246f6:	006d      	lsls	r5, r5, #1
 80246f8:	607d      	str	r5, [r7, #4]
 80246fa:	9b03      	ldr	r3, [sp, #12]
 80246fc:	9e06      	ldr	r6, [sp, #24]
 80246fe:	9d05      	ldr	r5, [sp, #20]
 8024700:	46b4      	mov	ip, r6
 8024702:	1b5d      	subs	r5, r3, r5
 8024704:	9b00      	ldr	r3, [sp, #0]
 8024706:	17ef      	asrs	r7, r5, #31
 8024708:	0039      	movs	r1, r7
 802470a:	681f      	ldr	r7, [r3, #0]
 802470c:	17fc      	asrs	r4, r7, #31
 802470e:	0020      	movs	r0, r4
 8024710:	9c04      	ldr	r4, [sp, #16]
 8024712:	4464      	add	r4, ip
 8024714:	17e6      	asrs	r6, r4, #31
 8024716:	9407      	str	r4, [sp, #28]
 8024718:	9608      	str	r6, [sp, #32]
 802471a:	685e      	ldr	r6, [r3, #4]
 802471c:	900b      	str	r0, [sp, #44]	@ 0x2c
 802471e:	17f2      	asrs	r2, r6, #31
 8024720:	0003      	movs	r3, r0
 8024722:	920c      	str	r2, [sp, #48]	@ 0x30
 8024724:	0028      	movs	r0, r5
 8024726:	003a      	movs	r2, r7
 8024728:	910a      	str	r1, [sp, #40]	@ 0x28
 802472a:	f7db ff49 	bl	80005c0 <__aeabi_lmul>
 802472e:	0032      	movs	r2, r6
 8024730:	17f3      	asrs	r3, r6, #31
 8024732:	9807      	ldr	r0, [sp, #28]
 8024734:	000c      	movs	r4, r1
 8024736:	9908      	ldr	r1, [sp, #32]
 8024738:	f7db ff42 	bl	80005c0 <__aeabi_lmul>
 802473c:	4658      	mov	r0, fp
 802473e:	1a64      	subs	r4, r4, r1
 8024740:	0064      	lsls	r4, r4, #1
 8024742:	9a07      	ldr	r2, [sp, #28]
 8024744:	6004      	str	r4, [r0, #0]
 8024746:	9b08      	ldr	r3, [sp, #32]
 8024748:	0038      	movs	r0, r7
 802474a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802474c:	f7db ff38 	bl	80005c0 <__aeabi_lmul>
 8024750:	0032      	movs	r2, r6
 8024752:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024754:	000c      	movs	r4, r1
 8024756:	0028      	movs	r0, r5
 8024758:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802475a:	f7db ff31 	bl	80005c0 <__aeabi_lmul>
 802475e:	9d05      	ldr	r5, [sp, #20]
 8024760:	465f      	mov	r7, fp
 8024762:	46ac      	mov	ip, r5
 8024764:	1864      	adds	r4, r4, r1
 8024766:	9903      	ldr	r1, [sp, #12]
 8024768:	0064      	lsls	r4, r4, #1
 802476a:	4461      	add	r1, ip
 802476c:	607c      	str	r4, [r7, #4]
 802476e:	000c      	movs	r4, r1
 8024770:	17c9      	asrs	r1, r1, #31
 8024772:	9105      	str	r1, [sp, #20]
 8024774:	9902      	ldr	r1, [sp, #8]
 8024776:	9804      	ldr	r0, [sp, #16]
 8024778:	680d      	ldr	r5, [r1, #0]
 802477a:	9e06      	ldr	r6, [sp, #24]
 802477c:	002b      	movs	r3, r5
 802477e:	17ed      	asrs	r5, r5, #31
 8024780:	684f      	ldr	r7, [r1, #4]
 8024782:	9503      	str	r5, [sp, #12]
 8024784:	1b85      	subs	r5, r0, r6
 8024786:	17e8      	asrs	r0, r5, #31
 8024788:	001a      	movs	r2, r3
 802478a:	9006      	str	r0, [sp, #24]
 802478c:	17fe      	asrs	r6, r7, #31
 802478e:	9304      	str	r3, [sp, #16]
 8024790:	0020      	movs	r0, r4
 8024792:	9b03      	ldr	r3, [sp, #12]
 8024794:	17e1      	asrs	r1, r4, #31
 8024796:	9607      	str	r6, [sp, #28]
 8024798:	f7db ff12 	bl	80005c0 <__aeabi_lmul>
 802479c:	003a      	movs	r2, r7
 802479e:	000e      	movs	r6, r1
 80247a0:	17fb      	asrs	r3, r7, #31
 80247a2:	0028      	movs	r0, r5
 80247a4:	17e9      	asrs	r1, r5, #31
 80247a6:	f7db ff0b 	bl	80005c0 <__aeabi_lmul>
 80247aa:	4640      	mov	r0, r8
 80247ac:	1a76      	subs	r6, r6, r1
 80247ae:	0076      	lsls	r6, r6, #1
 80247b0:	002a      	movs	r2, r5
 80247b2:	9b06      	ldr	r3, [sp, #24]
 80247b4:	6006      	str	r6, [r0, #0]
 80247b6:	9903      	ldr	r1, [sp, #12]
 80247b8:	9804      	ldr	r0, [sp, #16]
 80247ba:	f7db ff01 	bl	80005c0 <__aeabi_lmul>
 80247be:	0020      	movs	r0, r4
 80247c0:	2408      	movs	r4, #8
 80247c2:	9b07      	ldr	r3, [sp, #28]
 80247c4:	000d      	movs	r5, r1
 80247c6:	003a      	movs	r2, r7
 80247c8:	9905      	ldr	r1, [sp, #20]
 80247ca:	f7db fef9 	bl	80005c0 <__aeabi_lmul>
 80247ce:	4640      	mov	r0, r8
 80247d0:	46a4      	mov	ip, r4
 80247d2:	186d      	adds	r5, r5, r1
 80247d4:	006d      	lsls	r5, r5, #1
 80247d6:	6045      	str	r5, [r0, #4]
 80247d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80247da:	44e1      	add	r9, ip
 80247dc:	3801      	subs	r0, #1
 80247de:	9009      	str	r0, [sp, #36]	@ 0x24
 80247e0:	9a01      	ldr	r2, [sp, #4]
 80247e2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80247e4:	44e2      	add	sl, ip
 80247e6:	44e3      	add	fp, ip
 80247e8:	44e0      	add	r8, ip
 80247ea:	46a4      	mov	ip, r4
 80247ec:	4462      	add	r2, ip
 80247ee:	9201      	str	r2, [sp, #4]
 80247f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80247f2:	9b00      	ldr	r3, [sp, #0]
 80247f4:	4694      	mov	ip, r2
 80247f6:	4463      	add	r3, ip
 80247f8:	9300      	str	r3, [sp, #0]
 80247fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80247fc:	9902      	ldr	r1, [sp, #8]
 80247fe:	469c      	mov	ip, r3
 8024800:	4461      	add	r1, ip
 8024802:	9102      	str	r1, [sp, #8]
 8024804:	2800      	cmp	r0, #0
 8024806:	d000      	beq.n	802480a <arm_radix4_butterfly_inverse_q31+0x22e>
 8024808:	e70f      	b.n	802462a <arm_radix4_butterfly_inverse_q31+0x4e>
 802480a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802480c:	009b      	lsls	r3, r3, #2
 802480e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024810:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024812:	9320      	str	r3, [sp, #128]	@ 0x80
 8024814:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024816:	2b04      	cmp	r3, #4
 8024818:	d800      	bhi.n	802481c <arm_radix4_butterfly_inverse_q31+0x240>
 802481a:	e17c      	b.n	8024b16 <arm_radix4_butterfly_inverse_q31+0x53a>
 802481c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802481e:	0893      	lsrs	r3, r2, #2
 8024820:	1e59      	subs	r1, r3, #1
 8024822:	9321      	str	r3, [sp, #132]	@ 0x84
 8024824:	00db      	lsls	r3, r3, #3
 8024826:	931b      	str	r3, [sp, #108]	@ 0x6c
 8024828:	00d3      	lsls	r3, r2, #3
 802482a:	9300      	str	r3, [sp, #0]
 802482c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802482e:	911a      	str	r1, [sp, #104]	@ 0x68
 8024830:	00da      	lsls	r2, r3, #3
 8024832:	921e      	str	r2, [sp, #120]	@ 0x78
 8024834:	011a      	lsls	r2, r3, #4
 8024836:	921d      	str	r2, [sp, #116]	@ 0x74
 8024838:	001a      	movs	r2, r3
 802483a:	4694      	mov	ip, r2
 802483c:	005b      	lsls	r3, r3, #1
 802483e:	4463      	add	r3, ip
 8024840:	00db      	lsls	r3, r3, #3
 8024842:	931c      	str	r3, [sp, #112]	@ 0x70
 8024844:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024846:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024848:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802484a:	9318      	str	r3, [sp, #96]	@ 0x60
 802484c:	9319      	str	r3, [sp, #100]	@ 0x64
 802484e:	9316      	str	r3, [sp, #88]	@ 0x58
 8024850:	2300      	movs	r3, #0
 8024852:	9315      	str	r3, [sp, #84]	@ 0x54
 8024854:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024856:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024858:	681a      	ldr	r2, [r3, #0]
 802485a:	685b      	ldr	r3, [r3, #4]
 802485c:	9205      	str	r2, [sp, #20]
 802485e:	9306      	str	r3, [sp, #24]
 8024860:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024862:	468c      	mov	ip, r1
 8024864:	681a      	ldr	r2, [r3, #0]
 8024866:	685b      	ldr	r3, [r3, #4]
 8024868:	9207      	str	r2, [sp, #28]
 802486a:	9308      	str	r3, [sp, #32]
 802486c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802486e:	681a      	ldr	r2, [r3, #0]
 8024870:	685b      	ldr	r3, [r3, #4]
 8024872:	9209      	str	r2, [sp, #36]	@ 0x24
 8024874:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024876:	930a      	str	r3, [sp, #40]	@ 0x28
 8024878:	0013      	movs	r3, r2
 802487a:	4463      	add	r3, ip
 802487c:	4698      	mov	r8, r3
 802487e:	0013      	movs	r3, r2
 8024880:	4442      	add	r2, r8
 8024882:	4691      	mov	r9, r2
 8024884:	001a      	movs	r2, r3
 8024886:	444a      	add	r2, r9
 8024888:	4692      	mov	sl, r2
 802488a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802488c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802488e:	4293      	cmp	r3, r2
 8024890:	d800      	bhi.n	8024894 <arm_radix4_butterfly_inverse_q31+0x2b8>
 8024892:	e0d9      	b.n	8024a48 <arm_radix4_butterfly_inverse_q31+0x46c>
 8024894:	4694      	mov	ip, r2
 8024896:	4644      	mov	r4, r8
 8024898:	4655      	mov	r5, sl
 802489a:	4688      	mov	r8, r1
 802489c:	9b07      	ldr	r3, [sp, #28]
 802489e:	17db      	asrs	r3, r3, #31
 80248a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80248a2:	9b08      	ldr	r3, [sp, #32]
 80248a4:	17db      	asrs	r3, r3, #31
 80248a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80248a8:	9b05      	ldr	r3, [sp, #20]
 80248aa:	17db      	asrs	r3, r3, #31
 80248ac:	930e      	str	r3, [sp, #56]	@ 0x38
 80248ae:	9b06      	ldr	r3, [sp, #24]
 80248b0:	17db      	asrs	r3, r3, #31
 80248b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80248b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80248b6:	17db      	asrs	r3, r3, #31
 80248b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80248ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80248bc:	17db      	asrs	r3, r3, #31
 80248be:	9311      	str	r3, [sp, #68]	@ 0x44
 80248c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80248c2:	4463      	add	r3, ip
 80248c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80248c6:	4643      	mov	r3, r8
 80248c8:	4641      	mov	r1, r8
 80248ca:	681a      	ldr	r2, [r3, #0]
 80248cc:	464b      	mov	r3, r9
 80248ce:	684f      	ldr	r7, [r1, #4]
 80248d0:	4649      	mov	r1, r9
 80248d2:	681b      	ldr	r3, [r3, #0]
 80248d4:	18d6      	adds	r6, r2, r3
 80248d6:	1ad3      	subs	r3, r2, r3
 80248d8:	9301      	str	r3, [sp, #4]
 80248da:	684b      	ldr	r3, [r1, #4]
 80248dc:	1af9      	subs	r1, r7, r3
 80248de:	9102      	str	r1, [sp, #8]
 80248e0:	6829      	ldr	r1, [r5, #0]
 80248e2:	18f8      	adds	r0, r7, r3
 80248e4:	468c      	mov	ip, r1
 80248e6:	6827      	ldr	r7, [r4, #0]
 80248e8:	4467      	add	r7, ip
 80248ea:	003a      	movs	r2, r7
 80248ec:	19f3      	adds	r3, r6, r7
 80248ee:	4647      	mov	r7, r8
 80248f0:	109b      	asrs	r3, r3, #2
 80248f2:	603b      	str	r3, [r7, #0]
 80248f4:	6869      	ldr	r1, [r5, #4]
 80248f6:	6867      	ldr	r7, [r4, #4]
 80248f8:	468c      	mov	ip, r1
 80248fa:	4467      	add	r7, ip
 80248fc:	003b      	movs	r3, r7
 80248fe:	19c1      	adds	r1, r0, r7
 8024900:	4647      	mov	r7, r8
 8024902:	1ab6      	subs	r6, r6, r2
 8024904:	1089      	asrs	r1, r1, #2
 8024906:	6079      	str	r1, [r7, #4]
 8024908:	17f2      	asrs	r2, r6, #31
 802490a:	9900      	ldr	r1, [sp, #0]
 802490c:	4692      	mov	sl, r2
 802490e:	468c      	mov	ip, r1
 8024910:	6867      	ldr	r7, [r4, #4]
 8024912:	6869      	ldr	r1, [r5, #4]
 8024914:	44e0      	add	r8, ip
 8024916:	1a7f      	subs	r7, r7, r1
 8024918:	9703      	str	r7, [sp, #12]
 802491a:	6821      	ldr	r1, [r4, #0]
 802491c:	682f      	ldr	r7, [r5, #0]
 802491e:	1bc9      	subs	r1, r1, r7
 8024920:	1ac7      	subs	r7, r0, r3
 8024922:	17fa      	asrs	r2, r7, #31
 8024924:	4693      	mov	fp, r2
 8024926:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024928:	9a07      	ldr	r2, [sp, #28]
 802492a:	9104      	str	r1, [sp, #16]
 802492c:	0030      	movs	r0, r6
 802492e:	4651      	mov	r1, sl
 8024930:	f7db fe46 	bl	80005c0 <__aeabi_lmul>
 8024934:	9a08      	ldr	r2, [sp, #32]
 8024936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024938:	9112      	str	r1, [sp, #72]	@ 0x48
 802493a:	0038      	movs	r0, r7
 802493c:	4659      	mov	r1, fp
 802493e:	f7db fe3f 	bl	80005c0 <__aeabi_lmul>
 8024942:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024944:	9a07      	ldr	r2, [sp, #28]
 8024946:	1a41      	subs	r1, r0, r1
 8024948:	1049      	asrs	r1, r1, #1
 802494a:	6021      	str	r1, [r4, #0]
 802494c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802494e:	0038      	movs	r0, r7
 8024950:	4659      	mov	r1, fp
 8024952:	f7db fe35 	bl	80005c0 <__aeabi_lmul>
 8024956:	9a08      	ldr	r2, [sp, #32]
 8024958:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802495a:	000f      	movs	r7, r1
 802495c:	0030      	movs	r0, r6
 802495e:	4651      	mov	r1, sl
 8024960:	f7db fe2e 	bl	80005c0 <__aeabi_lmul>
 8024964:	9b00      	ldr	r3, [sp, #0]
 8024966:	187f      	adds	r7, r7, r1
 8024968:	469c      	mov	ip, r3
 802496a:	107f      	asrs	r7, r7, #1
 802496c:	6067      	str	r7, [r4, #4]
 802496e:	9a01      	ldr	r2, [sp, #4]
 8024970:	9f03      	ldr	r7, [sp, #12]
 8024972:	9802      	ldr	r0, [sp, #8]
 8024974:	1bd7      	subs	r7, r2, r7
 8024976:	17fe      	asrs	r6, r7, #31
 8024978:	0031      	movs	r1, r6
 802497a:	9e04      	ldr	r6, [sp, #16]
 802497c:	4682      	mov	sl, r0
 802497e:	4464      	add	r4, ip
 8024980:	46b4      	mov	ip, r6
 8024982:	44e2      	add	sl, ip
 8024984:	4652      	mov	r2, sl
 8024986:	17d2      	asrs	r2, r2, #31
 8024988:	4693      	mov	fp, r2
 802498a:	0038      	movs	r0, r7
 802498c:	9a05      	ldr	r2, [sp, #20]
 802498e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024990:	9112      	str	r1, [sp, #72]	@ 0x48
 8024992:	f7db fe15 	bl	80005c0 <__aeabi_lmul>
 8024996:	9a06      	ldr	r2, [sp, #24]
 8024998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802499a:	000e      	movs	r6, r1
 802499c:	4650      	mov	r0, sl
 802499e:	4659      	mov	r1, fp
 80249a0:	f7db fe0e 	bl	80005c0 <__aeabi_lmul>
 80249a4:	4648      	mov	r0, r9
 80249a6:	1a76      	subs	r6, r6, r1
 80249a8:	1076      	asrs	r6, r6, #1
 80249aa:	6006      	str	r6, [r0, #0]
 80249ac:	9a05      	ldr	r2, [sp, #20]
 80249ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80249b0:	4650      	mov	r0, sl
 80249b2:	4659      	mov	r1, fp
 80249b4:	f7db fe04 	bl	80005c0 <__aeabi_lmul>
 80249b8:	9a06      	ldr	r2, [sp, #24]
 80249ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80249bc:	000e      	movs	r6, r1
 80249be:	0038      	movs	r0, r7
 80249c0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80249c2:	f7db fdfd 	bl	80005c0 <__aeabi_lmul>
 80249c6:	9a00      	ldr	r2, [sp, #0]
 80249c8:	9f03      	ldr	r7, [sp, #12]
 80249ca:	4694      	mov	ip, r2
 80249cc:	1876      	adds	r6, r6, r1
 80249ce:	4649      	mov	r1, r9
 80249d0:	44e1      	add	r9, ip
 80249d2:	46bc      	mov	ip, r7
 80249d4:	9b01      	ldr	r3, [sp, #4]
 80249d6:	1076      	asrs	r6, r6, #1
 80249d8:	4463      	add	r3, ip
 80249da:	17df      	asrs	r7, r3, #31
 80249dc:	604e      	str	r6, [r1, #4]
 80249de:	46ba      	mov	sl, r7
 80249e0:	001e      	movs	r6, r3
 80249e2:	9802      	ldr	r0, [sp, #8]
 80249e4:	9b04      	ldr	r3, [sp, #16]
 80249e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80249e8:	1ac7      	subs	r7, r0, r3
 80249ea:	17fb      	asrs	r3, r7, #31
 80249ec:	469b      	mov	fp, r3
 80249ee:	0030      	movs	r0, r6
 80249f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80249f2:	4651      	mov	r1, sl
 80249f4:	f7db fde4 	bl	80005c0 <__aeabi_lmul>
 80249f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80249fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80249fc:	9101      	str	r1, [sp, #4]
 80249fe:	0038      	movs	r0, r7
 8024a00:	4659      	mov	r1, fp
 8024a02:	f7db fddd 	bl	80005c0 <__aeabi_lmul>
 8024a06:	9801      	ldr	r0, [sp, #4]
 8024a08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024a0a:	1a41      	subs	r1, r0, r1
 8024a0c:	1049      	asrs	r1, r1, #1
 8024a0e:	6029      	str	r1, [r5, #0]
 8024a10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024a12:	0038      	movs	r0, r7
 8024a14:	4659      	mov	r1, fp
 8024a16:	f7db fdd3 	bl	80005c0 <__aeabi_lmul>
 8024a1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024a1c:	000f      	movs	r7, r1
 8024a1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024a20:	0030      	movs	r0, r6
 8024a22:	4651      	mov	r1, sl
 8024a24:	f7db fdcc 	bl	80005c0 <__aeabi_lmul>
 8024a28:	187f      	adds	r7, r7, r1
 8024a2a:	107f      	asrs	r7, r7, #1
 8024a2c:	606f      	str	r7, [r5, #4]
 8024a2e:	9a00      	ldr	r2, [sp, #0]
 8024a30:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024a32:	4694      	mov	ip, r2
 8024a34:	4465      	add	r5, ip
 8024a36:	468c      	mov	ip, r1
 8024a38:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024a3a:	0013      	movs	r3, r2
 8024a3c:	4462      	add	r2, ip
 8024a3e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024a40:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024a42:	429a      	cmp	r2, r3
 8024a44:	d900      	bls.n	8024a48 <arm_radix4_butterfly_inverse_q31+0x46c>
 8024a46:	e73e      	b.n	80248c6 <arm_radix4_butterfly_inverse_q31+0x2ea>
 8024a48:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024a4a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8024a4c:	468c      	mov	ip, r1
 8024a4e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8024a50:	4462      	add	r2, ip
 8024a52:	468c      	mov	ip, r1
 8024a54:	9216      	str	r2, [sp, #88]	@ 0x58
 8024a56:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8024a58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8024a5a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024a5c:	4462      	add	r2, ip
 8024a5e:	468c      	mov	ip, r1
 8024a60:	9219      	str	r2, [sp, #100]	@ 0x64
 8024a62:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024a64:	3301      	adds	r3, #1
 8024a66:	4462      	add	r2, ip
 8024a68:	9218      	str	r2, [sp, #96]	@ 0x60
 8024a6a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8024a6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8024a6e:	3208      	adds	r2, #8
 8024a70:	9217      	str	r2, [sp, #92]	@ 0x5c
 8024a72:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024a74:	4293      	cmp	r3, r2
 8024a76:	d800      	bhi.n	8024a7a <arm_radix4_butterfly_inverse_q31+0x49e>
 8024a78:	e6ec      	b.n	8024854 <arm_radix4_butterfly_inverse_q31+0x278>
 8024a7a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024a7c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024a7e:	009b      	lsls	r3, r3, #2
 8024a80:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024a82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024a84:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024a86:	089b      	lsrs	r3, r3, #2
 8024a88:	9320      	str	r3, [sp, #128]	@ 0x80
 8024a8a:	2b04      	cmp	r3, #4
 8024a8c:	d900      	bls.n	8024a90 <arm_radix4_butterfly_inverse_q31+0x4b4>
 8024a8e:	e6c5      	b.n	802481c <arm_radix4_butterfly_inverse_q31+0x240>
 8024a90:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024a92:	469a      	mov	sl, r3
 8024a94:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024a96:	681a      	ldr	r2, [r3, #0]
 8024a98:	6918      	ldr	r0, [r3, #16]
 8024a9a:	4691      	mov	r9, r2
 8024a9c:	464c      	mov	r4, r9
 8024a9e:	4680      	mov	r8, r0
 8024aa0:	69de      	ldr	r6, [r3, #28]
 8024aa2:	689d      	ldr	r5, [r3, #8]
 8024aa4:	46b4      	mov	ip, r6
 8024aa6:	6998      	ldr	r0, [r3, #24]
 8024aa8:	1964      	adds	r4, r4, r5
 8024aaa:	6859      	ldr	r1, [r3, #4]
 8024aac:	68da      	ldr	r2, [r3, #12]
 8024aae:	4444      	add	r4, r8
 8024ab0:	695f      	ldr	r7, [r3, #20]
 8024ab2:	1824      	adds	r4, r4, r0
 8024ab4:	601c      	str	r4, [r3, #0]
 8024ab6:	188c      	adds	r4, r1, r2
 8024ab8:	19e4      	adds	r4, r4, r7
 8024aba:	4464      	add	r4, ip
 8024abc:	605c      	str	r4, [r3, #4]
 8024abe:	464c      	mov	r4, r9
 8024ac0:	1b64      	subs	r4, r4, r5
 8024ac2:	4444      	add	r4, r8
 8024ac4:	1a24      	subs	r4, r4, r0
 8024ac6:	609c      	str	r4, [r3, #8]
 8024ac8:	1a8c      	subs	r4, r1, r2
 8024aca:	19e4      	adds	r4, r4, r7
 8024acc:	1ba4      	subs	r4, r4, r6
 8024ace:	60dc      	str	r4, [r3, #12]
 8024ad0:	464c      	mov	r4, r9
 8024ad2:	4646      	mov	r6, r8
 8024ad4:	1aa4      	subs	r4, r4, r2
 8024ad6:	1ba4      	subs	r4, r4, r6
 8024ad8:	4464      	add	r4, ip
 8024ada:	611c      	str	r4, [r3, #16]
 8024adc:	194c      	adds	r4, r1, r5
 8024ade:	1be4      	subs	r4, r4, r7
 8024ae0:	1a24      	subs	r4, r4, r0
 8024ae2:	615c      	str	r4, [r3, #20]
 8024ae4:	4644      	mov	r4, r8
 8024ae6:	4666      	mov	r6, ip
 8024ae8:	444a      	add	r2, r9
 8024aea:	1b12      	subs	r2, r2, r4
 8024aec:	1b92      	subs	r2, r2, r6
 8024aee:	619a      	str	r2, [r3, #24]
 8024af0:	1b4a      	subs	r2, r1, r5
 8024af2:	1bd1      	subs	r1, r2, r7
 8024af4:	2201      	movs	r2, #1
 8024af6:	4252      	negs	r2, r2
 8024af8:	4694      	mov	ip, r2
 8024afa:	44e2      	add	sl, ip
 8024afc:	4652      	mov	r2, sl
 8024afe:	1809      	adds	r1, r1, r0
 8024b00:	61d9      	str	r1, [r3, #28]
 8024b02:	3320      	adds	r3, #32
 8024b04:	2a00      	cmp	r2, #0
 8024b06:	d1c6      	bne.n	8024a96 <arm_radix4_butterfly_inverse_q31+0x4ba>
 8024b08:	b027      	add	sp, #156	@ 0x9c
 8024b0a:	bc3c      	pop	{r2, r3, r4, r5}
 8024b0c:	4690      	mov	r8, r2
 8024b0e:	4699      	mov	r9, r3
 8024b10:	46a2      	mov	sl, r4
 8024b12:	46ab      	mov	fp, r5
 8024b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024b16:	469a      	mov	sl, r3
 8024b18:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024b1a:	e7bc      	b.n	8024a96 <arm_radix4_butterfly_inverse_q31+0x4ba>

08024b1c <arm_cmplx_mag_squared_q31>:
 8024b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024b1e:	464f      	mov	r7, r9
 8024b20:	4646      	mov	r6, r8
 8024b22:	0004      	movs	r4, r0
 8024b24:	b4c0      	push	{r6, r7}
 8024b26:	0016      	movs	r6, r2
 8024b28:	000f      	movs	r7, r1
 8024b2a:	2a00      	cmp	r2, #0
 8024b2c:	d018      	beq.n	8024b60 <arm_cmplx_mag_squared_q31+0x44>
 8024b2e:	6823      	ldr	r3, [r4, #0]
 8024b30:	6822      	ldr	r2, [r4, #0]
 8024b32:	17d9      	asrs	r1, r3, #31
 8024b34:	6863      	ldr	r3, [r4, #4]
 8024b36:	0010      	movs	r0, r2
 8024b38:	4698      	mov	r8, r3
 8024b3a:	17db      	asrs	r3, r3, #31
 8024b3c:	4699      	mov	r9, r3
 8024b3e:	000b      	movs	r3, r1
 8024b40:	f7db fd3e 	bl	80005c0 <__aeabi_lmul>
 8024b44:	4642      	mov	r2, r8
 8024b46:	104d      	asrs	r5, r1, #1
 8024b48:	464b      	mov	r3, r9
 8024b4a:	4640      	mov	r0, r8
 8024b4c:	4649      	mov	r1, r9
 8024b4e:	f7db fd37 	bl	80005c0 <__aeabi_lmul>
 8024b52:	1049      	asrs	r1, r1, #1
 8024b54:	1869      	adds	r1, r5, r1
 8024b56:	3e01      	subs	r6, #1
 8024b58:	c702      	stmia	r7!, {r1}
 8024b5a:	3408      	adds	r4, #8
 8024b5c:	2e00      	cmp	r6, #0
 8024b5e:	d1e6      	bne.n	8024b2e <arm_cmplx_mag_squared_q31+0x12>
 8024b60:	bc0c      	pop	{r2, r3}
 8024b62:	4690      	mov	r8, r2
 8024b64:	4699      	mov	r9, r3
 8024b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08024b68 <arm_mult_q31>:
 8024b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024b6a:	4646      	mov	r6, r8
 8024b6c:	464f      	mov	r7, r9
 8024b6e:	4690      	mov	r8, r2
 8024b70:	b4c0      	push	{r6, r7}
 8024b72:	001d      	movs	r5, r3
 8024b74:	0006      	movs	r6, r0
 8024b76:	000f      	movs	r7, r1
 8024b78:	2400      	movs	r4, #0
 8024b7a:	2b00      	cmp	r3, #0
 8024b7c:	d020      	beq.n	8024bc0 <arm_mult_q31+0x58>
 8024b7e:	4b12      	ldr	r3, [pc, #72]	@ (8024bc8 <arm_mult_q31+0x60>)
 8024b80:	4699      	mov	r9, r3
 8024b82:	e007      	b.n	8024b94 <arm_mult_q31+0x2c>
 8024b84:	464b      	mov	r3, r9
 8024b86:	4059      	eors	r1, r3
 8024b88:	4643      	mov	r3, r8
 8024b8a:	3d01      	subs	r5, #1
 8024b8c:	5119      	str	r1, [r3, r4]
 8024b8e:	3404      	adds	r4, #4
 8024b90:	2d00      	cmp	r5, #0
 8024b92:	d015      	beq.n	8024bc0 <arm_mult_q31+0x58>
 8024b94:	5933      	ldr	r3, [r6, r4]
 8024b96:	593a      	ldr	r2, [r7, r4]
 8024b98:	17d9      	asrs	r1, r3, #31
 8024b9a:	593b      	ldr	r3, [r7, r4]
 8024b9c:	5930      	ldr	r0, [r6, r4]
 8024b9e:	17db      	asrs	r3, r3, #31
 8024ba0:	f7db fd0e 	bl	80005c0 <__aeabi_lmul>
 8024ba4:	004b      	lsls	r3, r1, #1
 8024ba6:	0fc0      	lsrs	r0, r0, #31
 8024ba8:	4318      	orrs	r0, r3
 8024baa:	17c9      	asrs	r1, r1, #31
 8024bac:	17c3      	asrs	r3, r0, #31
 8024bae:	428b      	cmp	r3, r1
 8024bb0:	d1e8      	bne.n	8024b84 <arm_mult_q31+0x1c>
 8024bb2:	0001      	movs	r1, r0
 8024bb4:	4643      	mov	r3, r8
 8024bb6:	3d01      	subs	r5, #1
 8024bb8:	5119      	str	r1, [r3, r4]
 8024bba:	3404      	adds	r4, #4
 8024bbc:	2d00      	cmp	r5, #0
 8024bbe:	d1e9      	bne.n	8024b94 <arm_mult_q31+0x2c>
 8024bc0:	bc0c      	pop	{r2, r3}
 8024bc2:	4690      	mov	r8, r2
 8024bc4:	4699      	mov	r9, r3
 8024bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024bc8:	7fffffff 	.word	0x7fffffff

08024bcc <arm_add_q31>:
 8024bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024bce:	465f      	mov	r7, fp
 8024bd0:	4656      	mov	r6, sl
 8024bd2:	464d      	mov	r5, r9
 8024bd4:	4644      	mov	r4, r8
 8024bd6:	b4f0      	push	{r4, r5, r6, r7}
 8024bd8:	4693      	mov	fp, r2
 8024bda:	b083      	sub	sp, #12
 8024bdc:	4681      	mov	r9, r0
 8024bde:	468a      	mov	sl, r1
 8024be0:	4698      	mov	r8, r3
 8024be2:	2200      	movs	r2, #0
 8024be4:	2b00      	cmp	r3, #0
 8024be6:	d020      	beq.n	8024c2a <arm_add_q31+0x5e>
 8024be8:	4649      	mov	r1, r9
 8024bea:	4653      	mov	r3, sl
 8024bec:	588e      	ldr	r6, [r1, r2]
 8024bee:	589b      	ldr	r3, [r3, r2]
 8024bf0:	17f7      	asrs	r7, r6, #31
 8024bf2:	001c      	movs	r4, r3
 8024bf4:	0030      	movs	r0, r6
 8024bf6:	0039      	movs	r1, r7
 8024bf8:	17dd      	asrs	r5, r3, #31
 8024bfa:	46b4      	mov	ip, r6
 8024bfc:	1900      	adds	r0, r0, r4
 8024bfe:	4169      	adcs	r1, r5
 8024c00:	4463      	add	r3, ip
 8024c02:	9000      	str	r0, [sp, #0]
 8024c04:	9101      	str	r1, [sp, #4]
 8024c06:	17d9      	asrs	r1, r3, #31
 8024c08:	468c      	mov	ip, r1
 8024c0a:	9901      	ldr	r1, [sp, #4]
 8024c0c:	458c      	cmp	ip, r1
 8024c0e:	d002      	beq.n	8024c16 <arm_add_q31+0x4a>
 8024c10:	17cb      	asrs	r3, r1, #31
 8024c12:	4909      	ldr	r1, [pc, #36]	@ (8024c38 <arm_add_q31+0x6c>)
 8024c14:	404b      	eors	r3, r1
 8024c16:	4659      	mov	r1, fp
 8024c18:	508b      	str	r3, [r1, r2]
 8024c1a:	2301      	movs	r3, #1
 8024c1c:	425b      	negs	r3, r3
 8024c1e:	469c      	mov	ip, r3
 8024c20:	44e0      	add	r8, ip
 8024c22:	4643      	mov	r3, r8
 8024c24:	3204      	adds	r2, #4
 8024c26:	2b00      	cmp	r3, #0
 8024c28:	d1de      	bne.n	8024be8 <arm_add_q31+0x1c>
 8024c2a:	b003      	add	sp, #12
 8024c2c:	bc3c      	pop	{r2, r3, r4, r5}
 8024c2e:	4690      	mov	r8, r2
 8024c30:	4699      	mov	r9, r3
 8024c32:	46a2      	mov	sl, r4
 8024c34:	46ab      	mov	fp, r5
 8024c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024c38:	7fffffff 	.word	0x7fffffff

08024c3c <atof>:
 8024c3c:	b510      	push	{r4, lr}
 8024c3e:	2100      	movs	r1, #0
 8024c40:	f000 fe1e 	bl	8025880 <strtod>
 8024c44:	bd10      	pop	{r4, pc}

08024c46 <atoi>:
 8024c46:	b510      	push	{r4, lr}
 8024c48:	220a      	movs	r2, #10
 8024c4a:	2100      	movs	r1, #0
 8024c4c:	f000 feb0 	bl	80259b0 <strtol>
 8024c50:	bd10      	pop	{r4, pc}
	...

08024c54 <sulp>:
 8024c54:	b570      	push	{r4, r5, r6, lr}
 8024c56:	0016      	movs	r6, r2
 8024c58:	000d      	movs	r5, r1
 8024c5a:	f003 fced 	bl	8028638 <__ulp>
 8024c5e:	2e00      	cmp	r6, #0
 8024c60:	d00d      	beq.n	8024c7e <sulp+0x2a>
 8024c62:	236b      	movs	r3, #107	@ 0x6b
 8024c64:	006a      	lsls	r2, r5, #1
 8024c66:	0d52      	lsrs	r2, r2, #21
 8024c68:	1a9b      	subs	r3, r3, r2
 8024c6a:	2b00      	cmp	r3, #0
 8024c6c:	dd07      	ble.n	8024c7e <sulp+0x2a>
 8024c6e:	2400      	movs	r4, #0
 8024c70:	4a03      	ldr	r2, [pc, #12]	@ (8024c80 <sulp+0x2c>)
 8024c72:	051b      	lsls	r3, r3, #20
 8024c74:	189d      	adds	r5, r3, r2
 8024c76:	002b      	movs	r3, r5
 8024c78:	0022      	movs	r2, r4
 8024c7a:	f7dd fe6b 	bl	8002954 <__aeabi_dmul>
 8024c7e:	bd70      	pop	{r4, r5, r6, pc}
 8024c80:	3ff00000 	.word	0x3ff00000

08024c84 <_strtod_l>:
 8024c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024c86:	b0a3      	sub	sp, #140	@ 0x8c
 8024c88:	921b      	str	r2, [sp, #108]	@ 0x6c
 8024c8a:	2200      	movs	r2, #0
 8024c8c:	2600      	movs	r6, #0
 8024c8e:	2700      	movs	r7, #0
 8024c90:	9005      	str	r0, [sp, #20]
 8024c92:	9109      	str	r1, [sp, #36]	@ 0x24
 8024c94:	921e      	str	r2, [sp, #120]	@ 0x78
 8024c96:	911d      	str	r1, [sp, #116]	@ 0x74
 8024c98:	780a      	ldrb	r2, [r1, #0]
 8024c9a:	2a2b      	cmp	r2, #43	@ 0x2b
 8024c9c:	d053      	beq.n	8024d46 <_strtod_l+0xc2>
 8024c9e:	d83f      	bhi.n	8024d20 <_strtod_l+0x9c>
 8024ca0:	2a0d      	cmp	r2, #13
 8024ca2:	d839      	bhi.n	8024d18 <_strtod_l+0x94>
 8024ca4:	2a08      	cmp	r2, #8
 8024ca6:	d839      	bhi.n	8024d1c <_strtod_l+0x98>
 8024ca8:	2a00      	cmp	r2, #0
 8024caa:	d042      	beq.n	8024d32 <_strtod_l+0xae>
 8024cac:	2200      	movs	r2, #0
 8024cae:	9212      	str	r2, [sp, #72]	@ 0x48
 8024cb0:	2100      	movs	r1, #0
 8024cb2:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8024cb4:	910c      	str	r1, [sp, #48]	@ 0x30
 8024cb6:	782a      	ldrb	r2, [r5, #0]
 8024cb8:	2a30      	cmp	r2, #48	@ 0x30
 8024cba:	d000      	beq.n	8024cbe <_strtod_l+0x3a>
 8024cbc:	e083      	b.n	8024dc6 <_strtod_l+0x142>
 8024cbe:	786a      	ldrb	r2, [r5, #1]
 8024cc0:	3120      	adds	r1, #32
 8024cc2:	438a      	bics	r2, r1
 8024cc4:	2a58      	cmp	r2, #88	@ 0x58
 8024cc6:	d000      	beq.n	8024cca <_strtod_l+0x46>
 8024cc8:	e073      	b.n	8024db2 <_strtod_l+0x12e>
 8024cca:	9302      	str	r3, [sp, #8]
 8024ccc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024cce:	4a9b      	ldr	r2, [pc, #620]	@ (8024f3c <_strtod_l+0x2b8>)
 8024cd0:	9301      	str	r3, [sp, #4]
 8024cd2:	ab1e      	add	r3, sp, #120	@ 0x78
 8024cd4:	9300      	str	r3, [sp, #0]
 8024cd6:	9805      	ldr	r0, [sp, #20]
 8024cd8:	ab1f      	add	r3, sp, #124	@ 0x7c
 8024cda:	a91d      	add	r1, sp, #116	@ 0x74
 8024cdc:	f002 fd64 	bl	80277a8 <__gethex>
 8024ce0:	230f      	movs	r3, #15
 8024ce2:	0002      	movs	r2, r0
 8024ce4:	401a      	ands	r2, r3
 8024ce6:	0004      	movs	r4, r0
 8024ce8:	9206      	str	r2, [sp, #24]
 8024cea:	4218      	tst	r0, r3
 8024cec:	d005      	beq.n	8024cfa <_strtod_l+0x76>
 8024cee:	2a06      	cmp	r2, #6
 8024cf0:	d12b      	bne.n	8024d4a <_strtod_l+0xc6>
 8024cf2:	2300      	movs	r3, #0
 8024cf4:	3501      	adds	r5, #1
 8024cf6:	951d      	str	r5, [sp, #116]	@ 0x74
 8024cf8:	9312      	str	r3, [sp, #72]	@ 0x48
 8024cfa:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024cfc:	2b00      	cmp	r3, #0
 8024cfe:	d002      	beq.n	8024d06 <_strtod_l+0x82>
 8024d00:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d02:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024d04:	6013      	str	r3, [r2, #0]
 8024d06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024d08:	2b00      	cmp	r3, #0
 8024d0a:	d019      	beq.n	8024d40 <_strtod_l+0xbc>
 8024d0c:	2380      	movs	r3, #128	@ 0x80
 8024d0e:	0030      	movs	r0, r6
 8024d10:	061b      	lsls	r3, r3, #24
 8024d12:	18f9      	adds	r1, r7, r3
 8024d14:	b023      	add	sp, #140	@ 0x8c
 8024d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024d18:	2a20      	cmp	r2, #32
 8024d1a:	d1c7      	bne.n	8024cac <_strtod_l+0x28>
 8024d1c:	3101      	adds	r1, #1
 8024d1e:	e7ba      	b.n	8024c96 <_strtod_l+0x12>
 8024d20:	2a2d      	cmp	r2, #45	@ 0x2d
 8024d22:	d1c3      	bne.n	8024cac <_strtod_l+0x28>
 8024d24:	3a2c      	subs	r2, #44	@ 0x2c
 8024d26:	9212      	str	r2, [sp, #72]	@ 0x48
 8024d28:	1c4a      	adds	r2, r1, #1
 8024d2a:	921d      	str	r2, [sp, #116]	@ 0x74
 8024d2c:	784a      	ldrb	r2, [r1, #1]
 8024d2e:	2a00      	cmp	r2, #0
 8024d30:	d1be      	bne.n	8024cb0 <_strtod_l+0x2c>
 8024d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024d34:	931d      	str	r3, [sp, #116]	@ 0x74
 8024d36:	2300      	movs	r3, #0
 8024d38:	9312      	str	r3, [sp, #72]	@ 0x48
 8024d3a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024d3c:	2b00      	cmp	r3, #0
 8024d3e:	d1df      	bne.n	8024d00 <_strtod_l+0x7c>
 8024d40:	0030      	movs	r0, r6
 8024d42:	0039      	movs	r1, r7
 8024d44:	e7e6      	b.n	8024d14 <_strtod_l+0x90>
 8024d46:	2200      	movs	r2, #0
 8024d48:	e7ed      	b.n	8024d26 <_strtod_l+0xa2>
 8024d4a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8024d4c:	2a00      	cmp	r2, #0
 8024d4e:	d007      	beq.n	8024d60 <_strtod_l+0xdc>
 8024d50:	2135      	movs	r1, #53	@ 0x35
 8024d52:	a820      	add	r0, sp, #128	@ 0x80
 8024d54:	f003 fd66 	bl	8028824 <__copybits>
 8024d58:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024d5a:	9805      	ldr	r0, [sp, #20]
 8024d5c:	f003 f928 	bl	8027fb0 <_Bfree>
 8024d60:	9806      	ldr	r0, [sp, #24]
 8024d62:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024d64:	3801      	subs	r0, #1
 8024d66:	2804      	cmp	r0, #4
 8024d68:	d806      	bhi.n	8024d78 <_strtod_l+0xf4>
 8024d6a:	f7db fa07 	bl	800017c <__gnu_thumb1_case_uqi>
 8024d6e:	0312      	.short	0x0312
 8024d70:	1e1c      	.short	0x1e1c
 8024d72:	12          	.byte	0x12
 8024d73:	00          	.byte	0x00
 8024d74:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024d76:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8024d78:	05e4      	lsls	r4, r4, #23
 8024d7a:	d502      	bpl.n	8024d82 <_strtod_l+0xfe>
 8024d7c:	2380      	movs	r3, #128	@ 0x80
 8024d7e:	061b      	lsls	r3, r3, #24
 8024d80:	431f      	orrs	r7, r3
 8024d82:	4b6f      	ldr	r3, [pc, #444]	@ (8024f40 <_strtod_l+0x2bc>)
 8024d84:	423b      	tst	r3, r7
 8024d86:	d1b8      	bne.n	8024cfa <_strtod_l+0x76>
 8024d88:	f001 fd9e 	bl	80268c8 <__errno>
 8024d8c:	2322      	movs	r3, #34	@ 0x22
 8024d8e:	6003      	str	r3, [r0, #0]
 8024d90:	e7b3      	b.n	8024cfa <_strtod_l+0x76>
 8024d92:	496c      	ldr	r1, [pc, #432]	@ (8024f44 <_strtod_l+0x2c0>)
 8024d94:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024d96:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024d98:	400a      	ands	r2, r1
 8024d9a:	496b      	ldr	r1, [pc, #428]	@ (8024f48 <_strtod_l+0x2c4>)
 8024d9c:	185b      	adds	r3, r3, r1
 8024d9e:	051b      	lsls	r3, r3, #20
 8024da0:	431a      	orrs	r2, r3
 8024da2:	0017      	movs	r7, r2
 8024da4:	e7e8      	b.n	8024d78 <_strtod_l+0xf4>
 8024da6:	4f66      	ldr	r7, [pc, #408]	@ (8024f40 <_strtod_l+0x2bc>)
 8024da8:	e7e6      	b.n	8024d78 <_strtod_l+0xf4>
 8024daa:	2601      	movs	r6, #1
 8024dac:	4f67      	ldr	r7, [pc, #412]	@ (8024f4c <_strtod_l+0x2c8>)
 8024dae:	4276      	negs	r6, r6
 8024db0:	e7e2      	b.n	8024d78 <_strtod_l+0xf4>
 8024db2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024db4:	1c5a      	adds	r2, r3, #1
 8024db6:	921d      	str	r2, [sp, #116]	@ 0x74
 8024db8:	785b      	ldrb	r3, [r3, #1]
 8024dba:	2b30      	cmp	r3, #48	@ 0x30
 8024dbc:	d0f9      	beq.n	8024db2 <_strtod_l+0x12e>
 8024dbe:	2b00      	cmp	r3, #0
 8024dc0:	d09b      	beq.n	8024cfa <_strtod_l+0x76>
 8024dc2:	2301      	movs	r3, #1
 8024dc4:	930c      	str	r3, [sp, #48]	@ 0x30
 8024dc6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024dc8:	220a      	movs	r2, #10
 8024dca:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024dcc:	2300      	movs	r3, #0
 8024dce:	9310      	str	r3, [sp, #64]	@ 0x40
 8024dd0:	930d      	str	r3, [sp, #52]	@ 0x34
 8024dd2:	9308      	str	r3, [sp, #32]
 8024dd4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8024dd6:	7804      	ldrb	r4, [r0, #0]
 8024dd8:	0023      	movs	r3, r4
 8024dda:	3b30      	subs	r3, #48	@ 0x30
 8024ddc:	b2d9      	uxtb	r1, r3
 8024dde:	2909      	cmp	r1, #9
 8024de0:	d927      	bls.n	8024e32 <_strtod_l+0x1ae>
 8024de2:	2201      	movs	r2, #1
 8024de4:	495a      	ldr	r1, [pc, #360]	@ (8024f50 <_strtod_l+0x2cc>)
 8024de6:	f001 fce1 	bl	80267ac <strncmp>
 8024dea:	2800      	cmp	r0, #0
 8024dec:	d033      	beq.n	8024e56 <_strtod_l+0x1d2>
 8024dee:	2000      	movs	r0, #0
 8024df0:	0023      	movs	r3, r4
 8024df2:	4684      	mov	ip, r0
 8024df4:	9a08      	ldr	r2, [sp, #32]
 8024df6:	900e      	str	r0, [sp, #56]	@ 0x38
 8024df8:	9206      	str	r2, [sp, #24]
 8024dfa:	2220      	movs	r2, #32
 8024dfc:	0019      	movs	r1, r3
 8024dfe:	4391      	bics	r1, r2
 8024e00:	000a      	movs	r2, r1
 8024e02:	2100      	movs	r1, #0
 8024e04:	9107      	str	r1, [sp, #28]
 8024e06:	2a45      	cmp	r2, #69	@ 0x45
 8024e08:	d000      	beq.n	8024e0c <_strtod_l+0x188>
 8024e0a:	e0cb      	b.n	8024fa4 <_strtod_l+0x320>
 8024e0c:	9b06      	ldr	r3, [sp, #24]
 8024e0e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024e10:	4303      	orrs	r3, r0
 8024e12:	4313      	orrs	r3, r2
 8024e14:	428b      	cmp	r3, r1
 8024e16:	d08c      	beq.n	8024d32 <_strtod_l+0xae>
 8024e18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024e1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8024e1c:	3301      	adds	r3, #1
 8024e1e:	931d      	str	r3, [sp, #116]	@ 0x74
 8024e20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024e22:	785b      	ldrb	r3, [r3, #1]
 8024e24:	2b2b      	cmp	r3, #43	@ 0x2b
 8024e26:	d07b      	beq.n	8024f20 <_strtod_l+0x29c>
 8024e28:	000c      	movs	r4, r1
 8024e2a:	2b2d      	cmp	r3, #45	@ 0x2d
 8024e2c:	d17e      	bne.n	8024f2c <_strtod_l+0x2a8>
 8024e2e:	2401      	movs	r4, #1
 8024e30:	e077      	b.n	8024f22 <_strtod_l+0x29e>
 8024e32:	9908      	ldr	r1, [sp, #32]
 8024e34:	2908      	cmp	r1, #8
 8024e36:	dc09      	bgt.n	8024e4c <_strtod_l+0x1c8>
 8024e38:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024e3a:	4351      	muls	r1, r2
 8024e3c:	185b      	adds	r3, r3, r1
 8024e3e:	930d      	str	r3, [sp, #52]	@ 0x34
 8024e40:	9b08      	ldr	r3, [sp, #32]
 8024e42:	3001      	adds	r0, #1
 8024e44:	3301      	adds	r3, #1
 8024e46:	9308      	str	r3, [sp, #32]
 8024e48:	901d      	str	r0, [sp, #116]	@ 0x74
 8024e4a:	e7c3      	b.n	8024dd4 <_strtod_l+0x150>
 8024e4c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024e4e:	4355      	muls	r5, r2
 8024e50:	195b      	adds	r3, r3, r5
 8024e52:	9310      	str	r3, [sp, #64]	@ 0x40
 8024e54:	e7f4      	b.n	8024e40 <_strtod_l+0x1bc>
 8024e56:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024e58:	1c5a      	adds	r2, r3, #1
 8024e5a:	921d      	str	r2, [sp, #116]	@ 0x74
 8024e5c:	9a08      	ldr	r2, [sp, #32]
 8024e5e:	785b      	ldrb	r3, [r3, #1]
 8024e60:	2a00      	cmp	r2, #0
 8024e62:	d03e      	beq.n	8024ee2 <_strtod_l+0x25e>
 8024e64:	900e      	str	r0, [sp, #56]	@ 0x38
 8024e66:	9206      	str	r2, [sp, #24]
 8024e68:	001a      	movs	r2, r3
 8024e6a:	3a30      	subs	r2, #48	@ 0x30
 8024e6c:	2a09      	cmp	r2, #9
 8024e6e:	d912      	bls.n	8024e96 <_strtod_l+0x212>
 8024e70:	2201      	movs	r2, #1
 8024e72:	4694      	mov	ip, r2
 8024e74:	e7c1      	b.n	8024dfa <_strtod_l+0x176>
 8024e76:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024e78:	3001      	adds	r0, #1
 8024e7a:	1c5a      	adds	r2, r3, #1
 8024e7c:	921d      	str	r2, [sp, #116]	@ 0x74
 8024e7e:	785b      	ldrb	r3, [r3, #1]
 8024e80:	2b30      	cmp	r3, #48	@ 0x30
 8024e82:	d0f8      	beq.n	8024e76 <_strtod_l+0x1f2>
 8024e84:	001a      	movs	r2, r3
 8024e86:	3a31      	subs	r2, #49	@ 0x31
 8024e88:	2a08      	cmp	r2, #8
 8024e8a:	d844      	bhi.n	8024f16 <_strtod_l+0x292>
 8024e8c:	900e      	str	r0, [sp, #56]	@ 0x38
 8024e8e:	2000      	movs	r0, #0
 8024e90:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8024e92:	9006      	str	r0, [sp, #24]
 8024e94:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024e96:	001c      	movs	r4, r3
 8024e98:	1c42      	adds	r2, r0, #1
 8024e9a:	3c30      	subs	r4, #48	@ 0x30
 8024e9c:	2b30      	cmp	r3, #48	@ 0x30
 8024e9e:	d01a      	beq.n	8024ed6 <_strtod_l+0x252>
 8024ea0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024ea2:	9906      	ldr	r1, [sp, #24]
 8024ea4:	189b      	adds	r3, r3, r2
 8024ea6:	930e      	str	r3, [sp, #56]	@ 0x38
 8024ea8:	230a      	movs	r3, #10
 8024eaa:	469c      	mov	ip, r3
 8024eac:	9d06      	ldr	r5, [sp, #24]
 8024eae:	1c4b      	adds	r3, r1, #1
 8024eb0:	1b5d      	subs	r5, r3, r5
 8024eb2:	42aa      	cmp	r2, r5
 8024eb4:	dc17      	bgt.n	8024ee6 <_strtod_l+0x262>
 8024eb6:	43c3      	mvns	r3, r0
 8024eb8:	9a06      	ldr	r2, [sp, #24]
 8024eba:	17db      	asrs	r3, r3, #31
 8024ebc:	4003      	ands	r3, r0
 8024ebe:	18d1      	adds	r1, r2, r3
 8024ec0:	3201      	adds	r2, #1
 8024ec2:	18d3      	adds	r3, r2, r3
 8024ec4:	9306      	str	r3, [sp, #24]
 8024ec6:	2908      	cmp	r1, #8
 8024ec8:	dc1c      	bgt.n	8024f04 <_strtod_l+0x280>
 8024eca:	230a      	movs	r3, #10
 8024ecc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024ece:	4353      	muls	r3, r2
 8024ed0:	2200      	movs	r2, #0
 8024ed2:	18e3      	adds	r3, r4, r3
 8024ed4:	930d      	str	r3, [sp, #52]	@ 0x34
 8024ed6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024ed8:	0010      	movs	r0, r2
 8024eda:	1c59      	adds	r1, r3, #1
 8024edc:	911d      	str	r1, [sp, #116]	@ 0x74
 8024ede:	785b      	ldrb	r3, [r3, #1]
 8024ee0:	e7c2      	b.n	8024e68 <_strtod_l+0x1e4>
 8024ee2:	9808      	ldr	r0, [sp, #32]
 8024ee4:	e7cc      	b.n	8024e80 <_strtod_l+0x1fc>
 8024ee6:	2908      	cmp	r1, #8
 8024ee8:	dc05      	bgt.n	8024ef6 <_strtod_l+0x272>
 8024eea:	4665      	mov	r5, ip
 8024eec:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024eee:	4369      	muls	r1, r5
 8024ef0:	910d      	str	r1, [sp, #52]	@ 0x34
 8024ef2:	0019      	movs	r1, r3
 8024ef4:	e7da      	b.n	8024eac <_strtod_l+0x228>
 8024ef6:	2b10      	cmp	r3, #16
 8024ef8:	dcfb      	bgt.n	8024ef2 <_strtod_l+0x26e>
 8024efa:	4661      	mov	r1, ip
 8024efc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024efe:	434d      	muls	r5, r1
 8024f00:	9510      	str	r5, [sp, #64]	@ 0x40
 8024f02:	e7f6      	b.n	8024ef2 <_strtod_l+0x26e>
 8024f04:	2200      	movs	r2, #0
 8024f06:	290f      	cmp	r1, #15
 8024f08:	dce5      	bgt.n	8024ed6 <_strtod_l+0x252>
 8024f0a:	230a      	movs	r3, #10
 8024f0c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024f0e:	435d      	muls	r5, r3
 8024f10:	1963      	adds	r3, r4, r5
 8024f12:	9310      	str	r3, [sp, #64]	@ 0x40
 8024f14:	e7df      	b.n	8024ed6 <_strtod_l+0x252>
 8024f16:	2200      	movs	r2, #0
 8024f18:	920e      	str	r2, [sp, #56]	@ 0x38
 8024f1a:	9206      	str	r2, [sp, #24]
 8024f1c:	3201      	adds	r2, #1
 8024f1e:	e7a8      	b.n	8024e72 <_strtod_l+0x1ee>
 8024f20:	2400      	movs	r4, #0
 8024f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024f24:	3302      	adds	r3, #2
 8024f26:	931d      	str	r3, [sp, #116]	@ 0x74
 8024f28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024f2a:	789b      	ldrb	r3, [r3, #2]
 8024f2c:	001a      	movs	r2, r3
 8024f2e:	3a30      	subs	r2, #48	@ 0x30
 8024f30:	2a09      	cmp	r2, #9
 8024f32:	d913      	bls.n	8024f5c <_strtod_l+0x2d8>
 8024f34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024f36:	921d      	str	r2, [sp, #116]	@ 0x74
 8024f38:	2200      	movs	r2, #0
 8024f3a:	e032      	b.n	8024fa2 <_strtod_l+0x31e>
 8024f3c:	0802eff0 	.word	0x0802eff0
 8024f40:	7ff00000 	.word	0x7ff00000
 8024f44:	ffefffff 	.word	0xffefffff
 8024f48:	00000433 	.word	0x00000433
 8024f4c:	7fffffff 	.word	0x7fffffff
 8024f50:	0802ee08 	.word	0x0802ee08
 8024f54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024f56:	1c5a      	adds	r2, r3, #1
 8024f58:	921d      	str	r2, [sp, #116]	@ 0x74
 8024f5a:	785b      	ldrb	r3, [r3, #1]
 8024f5c:	2b30      	cmp	r3, #48	@ 0x30
 8024f5e:	d0f9      	beq.n	8024f54 <_strtod_l+0x2d0>
 8024f60:	2200      	movs	r2, #0
 8024f62:	9207      	str	r2, [sp, #28]
 8024f64:	001a      	movs	r2, r3
 8024f66:	3a31      	subs	r2, #49	@ 0x31
 8024f68:	2a08      	cmp	r2, #8
 8024f6a:	d81b      	bhi.n	8024fa4 <_strtod_l+0x320>
 8024f6c:	3b30      	subs	r3, #48	@ 0x30
 8024f6e:	001a      	movs	r2, r3
 8024f70:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024f72:	9307      	str	r3, [sp, #28]
 8024f74:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024f76:	1c59      	adds	r1, r3, #1
 8024f78:	911d      	str	r1, [sp, #116]	@ 0x74
 8024f7a:	785b      	ldrb	r3, [r3, #1]
 8024f7c:	001d      	movs	r5, r3
 8024f7e:	3d30      	subs	r5, #48	@ 0x30
 8024f80:	2d09      	cmp	r5, #9
 8024f82:	d93a      	bls.n	8024ffa <_strtod_l+0x376>
 8024f84:	9d07      	ldr	r5, [sp, #28]
 8024f86:	1b49      	subs	r1, r1, r5
 8024f88:	000d      	movs	r5, r1
 8024f8a:	49b3      	ldr	r1, [pc, #716]	@ (8025258 <_strtod_l+0x5d4>)
 8024f8c:	9107      	str	r1, [sp, #28]
 8024f8e:	2d08      	cmp	r5, #8
 8024f90:	dc03      	bgt.n	8024f9a <_strtod_l+0x316>
 8024f92:	9207      	str	r2, [sp, #28]
 8024f94:	428a      	cmp	r2, r1
 8024f96:	dd00      	ble.n	8024f9a <_strtod_l+0x316>
 8024f98:	9107      	str	r1, [sp, #28]
 8024f9a:	2c00      	cmp	r4, #0
 8024f9c:	d002      	beq.n	8024fa4 <_strtod_l+0x320>
 8024f9e:	9a07      	ldr	r2, [sp, #28]
 8024fa0:	4252      	negs	r2, r2
 8024fa2:	9207      	str	r2, [sp, #28]
 8024fa4:	9a06      	ldr	r2, [sp, #24]
 8024fa6:	2a00      	cmp	r2, #0
 8024fa8:	d14b      	bne.n	8025042 <_strtod_l+0x3be>
 8024faa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024fac:	4310      	orrs	r0, r2
 8024fae:	d000      	beq.n	8024fb2 <_strtod_l+0x32e>
 8024fb0:	e6a3      	b.n	8024cfa <_strtod_l+0x76>
 8024fb2:	4662      	mov	r2, ip
 8024fb4:	2a00      	cmp	r2, #0
 8024fb6:	d000      	beq.n	8024fba <_strtod_l+0x336>
 8024fb8:	e6bb      	b.n	8024d32 <_strtod_l+0xae>
 8024fba:	2b69      	cmp	r3, #105	@ 0x69
 8024fbc:	d025      	beq.n	802500a <_strtod_l+0x386>
 8024fbe:	dc21      	bgt.n	8025004 <_strtod_l+0x380>
 8024fc0:	2b49      	cmp	r3, #73	@ 0x49
 8024fc2:	d022      	beq.n	802500a <_strtod_l+0x386>
 8024fc4:	2b4e      	cmp	r3, #78	@ 0x4e
 8024fc6:	d000      	beq.n	8024fca <_strtod_l+0x346>
 8024fc8:	e6b3      	b.n	8024d32 <_strtod_l+0xae>
 8024fca:	49a4      	ldr	r1, [pc, #656]	@ (802525c <_strtod_l+0x5d8>)
 8024fcc:	a81d      	add	r0, sp, #116	@ 0x74
 8024fce:	f002 fe21 	bl	8027c14 <__match>
 8024fd2:	2800      	cmp	r0, #0
 8024fd4:	d100      	bne.n	8024fd8 <_strtod_l+0x354>
 8024fd6:	e6ac      	b.n	8024d32 <_strtod_l+0xae>
 8024fd8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024fda:	781b      	ldrb	r3, [r3, #0]
 8024fdc:	2b28      	cmp	r3, #40	@ 0x28
 8024fde:	d12a      	bne.n	8025036 <_strtod_l+0x3b2>
 8024fe0:	499f      	ldr	r1, [pc, #636]	@ (8025260 <_strtod_l+0x5dc>)
 8024fe2:	aa20      	add	r2, sp, #128	@ 0x80
 8024fe4:	a81d      	add	r0, sp, #116	@ 0x74
 8024fe6:	f002 fe29 	bl	8027c3c <__hexnan>
 8024fea:	2805      	cmp	r0, #5
 8024fec:	d123      	bne.n	8025036 <_strtod_l+0x3b2>
 8024fee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024ff0:	4a9c      	ldr	r2, [pc, #624]	@ (8025264 <_strtod_l+0x5e0>)
 8024ff2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024ff4:	431a      	orrs	r2, r3
 8024ff6:	0017      	movs	r7, r2
 8024ff8:	e67f      	b.n	8024cfa <_strtod_l+0x76>
 8024ffa:	210a      	movs	r1, #10
 8024ffc:	434a      	muls	r2, r1
 8024ffe:	18d2      	adds	r2, r2, r3
 8025000:	3a30      	subs	r2, #48	@ 0x30
 8025002:	e7b7      	b.n	8024f74 <_strtod_l+0x2f0>
 8025004:	2b6e      	cmp	r3, #110	@ 0x6e
 8025006:	d0e0      	beq.n	8024fca <_strtod_l+0x346>
 8025008:	e693      	b.n	8024d32 <_strtod_l+0xae>
 802500a:	4997      	ldr	r1, [pc, #604]	@ (8025268 <_strtod_l+0x5e4>)
 802500c:	a81d      	add	r0, sp, #116	@ 0x74
 802500e:	f002 fe01 	bl	8027c14 <__match>
 8025012:	2800      	cmp	r0, #0
 8025014:	d100      	bne.n	8025018 <_strtod_l+0x394>
 8025016:	e68c      	b.n	8024d32 <_strtod_l+0xae>
 8025018:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802501a:	4994      	ldr	r1, [pc, #592]	@ (802526c <_strtod_l+0x5e8>)
 802501c:	3b01      	subs	r3, #1
 802501e:	a81d      	add	r0, sp, #116	@ 0x74
 8025020:	931d      	str	r3, [sp, #116]	@ 0x74
 8025022:	f002 fdf7 	bl	8027c14 <__match>
 8025026:	2800      	cmp	r0, #0
 8025028:	d102      	bne.n	8025030 <_strtod_l+0x3ac>
 802502a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802502c:	3301      	adds	r3, #1
 802502e:	931d      	str	r3, [sp, #116]	@ 0x74
 8025030:	2600      	movs	r6, #0
 8025032:	4f8c      	ldr	r7, [pc, #560]	@ (8025264 <_strtod_l+0x5e0>)
 8025034:	e661      	b.n	8024cfa <_strtod_l+0x76>
 8025036:	488e      	ldr	r0, [pc, #568]	@ (8025270 <_strtod_l+0x5ec>)
 8025038:	f001 fc88 	bl	802694c <nan>
 802503c:	0006      	movs	r6, r0
 802503e:	000f      	movs	r7, r1
 8025040:	e65b      	b.n	8024cfa <_strtod_l+0x76>
 8025042:	9b07      	ldr	r3, [sp, #28]
 8025044:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025046:	1a9b      	subs	r3, r3, r2
 8025048:	930c      	str	r3, [sp, #48]	@ 0x30
 802504a:	9b08      	ldr	r3, [sp, #32]
 802504c:	2b00      	cmp	r3, #0
 802504e:	d101      	bne.n	8025054 <_strtod_l+0x3d0>
 8025050:	9b06      	ldr	r3, [sp, #24]
 8025052:	9308      	str	r3, [sp, #32]
 8025054:	9c06      	ldr	r4, [sp, #24]
 8025056:	2c10      	cmp	r4, #16
 8025058:	dd00      	ble.n	802505c <_strtod_l+0x3d8>
 802505a:	2410      	movs	r4, #16
 802505c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802505e:	f7de fbf5 	bl	800384c <__aeabi_ui2d>
 8025062:	9b06      	ldr	r3, [sp, #24]
 8025064:	0006      	movs	r6, r0
 8025066:	000f      	movs	r7, r1
 8025068:	2b09      	cmp	r3, #9
 802506a:	dc13      	bgt.n	8025094 <_strtod_l+0x410>
 802506c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802506e:	2b00      	cmp	r3, #0
 8025070:	d100      	bne.n	8025074 <_strtod_l+0x3f0>
 8025072:	e642      	b.n	8024cfa <_strtod_l+0x76>
 8025074:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025076:	2b00      	cmp	r3, #0
 8025078:	dc00      	bgt.n	802507c <_strtod_l+0x3f8>
 802507a:	e07e      	b.n	802517a <_strtod_l+0x4f6>
 802507c:	2b16      	cmp	r3, #22
 802507e:	dc63      	bgt.n	8025148 <_strtod_l+0x4c4>
 8025080:	497c      	ldr	r1, [pc, #496]	@ (8025274 <_strtod_l+0x5f0>)
 8025082:	00db      	lsls	r3, r3, #3
 8025084:	18c9      	adds	r1, r1, r3
 8025086:	0032      	movs	r2, r6
 8025088:	6808      	ldr	r0, [r1, #0]
 802508a:	6849      	ldr	r1, [r1, #4]
 802508c:	003b      	movs	r3, r7
 802508e:	f7dd fc61 	bl	8002954 <__aeabi_dmul>
 8025092:	e7d3      	b.n	802503c <_strtod_l+0x3b8>
 8025094:	0022      	movs	r2, r4
 8025096:	4b77      	ldr	r3, [pc, #476]	@ (8025274 <_strtod_l+0x5f0>)
 8025098:	3a09      	subs	r2, #9
 802509a:	00d2      	lsls	r2, r2, #3
 802509c:	189b      	adds	r3, r3, r2
 802509e:	681a      	ldr	r2, [r3, #0]
 80250a0:	685b      	ldr	r3, [r3, #4]
 80250a2:	f7dd fc57 	bl	8002954 <__aeabi_dmul>
 80250a6:	0006      	movs	r6, r0
 80250a8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80250aa:	000f      	movs	r7, r1
 80250ac:	f7de fbce 	bl	800384c <__aeabi_ui2d>
 80250b0:	000b      	movs	r3, r1
 80250b2:	0002      	movs	r2, r0
 80250b4:	0039      	movs	r1, r7
 80250b6:	0030      	movs	r0, r6
 80250b8:	f7dc fc4c 	bl	8001954 <__aeabi_dadd>
 80250bc:	9b06      	ldr	r3, [sp, #24]
 80250be:	0006      	movs	r6, r0
 80250c0:	000f      	movs	r7, r1
 80250c2:	2b0f      	cmp	r3, #15
 80250c4:	ddd2      	ble.n	802506c <_strtod_l+0x3e8>
 80250c6:	9b06      	ldr	r3, [sp, #24]
 80250c8:	1b1c      	subs	r4, r3, r4
 80250ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80250cc:	18e4      	adds	r4, r4, r3
 80250ce:	2c00      	cmp	r4, #0
 80250d0:	dc00      	bgt.n	80250d4 <_strtod_l+0x450>
 80250d2:	e09b      	b.n	802520c <_strtod_l+0x588>
 80250d4:	220f      	movs	r2, #15
 80250d6:	0023      	movs	r3, r4
 80250d8:	4013      	ands	r3, r2
 80250da:	4214      	tst	r4, r2
 80250dc:	d00a      	beq.n	80250f4 <_strtod_l+0x470>
 80250de:	4965      	ldr	r1, [pc, #404]	@ (8025274 <_strtod_l+0x5f0>)
 80250e0:	00db      	lsls	r3, r3, #3
 80250e2:	18c9      	adds	r1, r1, r3
 80250e4:	0032      	movs	r2, r6
 80250e6:	6808      	ldr	r0, [r1, #0]
 80250e8:	6849      	ldr	r1, [r1, #4]
 80250ea:	003b      	movs	r3, r7
 80250ec:	f7dd fc32 	bl	8002954 <__aeabi_dmul>
 80250f0:	0006      	movs	r6, r0
 80250f2:	000f      	movs	r7, r1
 80250f4:	230f      	movs	r3, #15
 80250f6:	439c      	bics	r4, r3
 80250f8:	d073      	beq.n	80251e2 <_strtod_l+0x55e>
 80250fa:	3326      	adds	r3, #38	@ 0x26
 80250fc:	33ff      	adds	r3, #255	@ 0xff
 80250fe:	429c      	cmp	r4, r3
 8025100:	dd4b      	ble.n	802519a <_strtod_l+0x516>
 8025102:	2300      	movs	r3, #0
 8025104:	9306      	str	r3, [sp, #24]
 8025106:	9307      	str	r3, [sp, #28]
 8025108:	930d      	str	r3, [sp, #52]	@ 0x34
 802510a:	9308      	str	r3, [sp, #32]
 802510c:	2322      	movs	r3, #34	@ 0x22
 802510e:	2600      	movs	r6, #0
 8025110:	9a05      	ldr	r2, [sp, #20]
 8025112:	4f54      	ldr	r7, [pc, #336]	@ (8025264 <_strtod_l+0x5e0>)
 8025114:	6013      	str	r3, [r2, #0]
 8025116:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025118:	42b3      	cmp	r3, r6
 802511a:	d100      	bne.n	802511e <_strtod_l+0x49a>
 802511c:	e5ed      	b.n	8024cfa <_strtod_l+0x76>
 802511e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8025120:	9805      	ldr	r0, [sp, #20]
 8025122:	f002 ff45 	bl	8027fb0 <_Bfree>
 8025126:	9908      	ldr	r1, [sp, #32]
 8025128:	9805      	ldr	r0, [sp, #20]
 802512a:	f002 ff41 	bl	8027fb0 <_Bfree>
 802512e:	9907      	ldr	r1, [sp, #28]
 8025130:	9805      	ldr	r0, [sp, #20]
 8025132:	f002 ff3d 	bl	8027fb0 <_Bfree>
 8025136:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8025138:	9805      	ldr	r0, [sp, #20]
 802513a:	f002 ff39 	bl	8027fb0 <_Bfree>
 802513e:	9906      	ldr	r1, [sp, #24]
 8025140:	9805      	ldr	r0, [sp, #20]
 8025142:	f002 ff35 	bl	8027fb0 <_Bfree>
 8025146:	e5d8      	b.n	8024cfa <_strtod_l+0x76>
 8025148:	2325      	movs	r3, #37	@ 0x25
 802514a:	9a06      	ldr	r2, [sp, #24]
 802514c:	1a9b      	subs	r3, r3, r2
 802514e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025150:	4293      	cmp	r3, r2
 8025152:	dbb8      	blt.n	80250c6 <_strtod_l+0x442>
 8025154:	240f      	movs	r4, #15
 8025156:	9b06      	ldr	r3, [sp, #24]
 8025158:	4d46      	ldr	r5, [pc, #280]	@ (8025274 <_strtod_l+0x5f0>)
 802515a:	1ae4      	subs	r4, r4, r3
 802515c:	00e1      	lsls	r1, r4, #3
 802515e:	1869      	adds	r1, r5, r1
 8025160:	0032      	movs	r2, r6
 8025162:	6808      	ldr	r0, [r1, #0]
 8025164:	6849      	ldr	r1, [r1, #4]
 8025166:	003b      	movs	r3, r7
 8025168:	f7dd fbf4 	bl	8002954 <__aeabi_dmul>
 802516c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802516e:	1b1c      	subs	r4, r3, r4
 8025170:	00e4      	lsls	r4, r4, #3
 8025172:	192d      	adds	r5, r5, r4
 8025174:	682a      	ldr	r2, [r5, #0]
 8025176:	686b      	ldr	r3, [r5, #4]
 8025178:	e789      	b.n	802508e <_strtod_l+0x40a>
 802517a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802517c:	3316      	adds	r3, #22
 802517e:	dba2      	blt.n	80250c6 <_strtod_l+0x442>
 8025180:	9907      	ldr	r1, [sp, #28]
 8025182:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025184:	4b3b      	ldr	r3, [pc, #236]	@ (8025274 <_strtod_l+0x5f0>)
 8025186:	1a52      	subs	r2, r2, r1
 8025188:	00d2      	lsls	r2, r2, #3
 802518a:	189b      	adds	r3, r3, r2
 802518c:	0030      	movs	r0, r6
 802518e:	681a      	ldr	r2, [r3, #0]
 8025190:	685b      	ldr	r3, [r3, #4]
 8025192:	0039      	movs	r1, r7
 8025194:	f7dc ffa4 	bl	80020e0 <__aeabi_ddiv>
 8025198:	e750      	b.n	802503c <_strtod_l+0x3b8>
 802519a:	2300      	movs	r3, #0
 802519c:	0030      	movs	r0, r6
 802519e:	0039      	movs	r1, r7
 80251a0:	4d35      	ldr	r5, [pc, #212]	@ (8025278 <_strtod_l+0x5f4>)
 80251a2:	1124      	asrs	r4, r4, #4
 80251a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80251a6:	2c01      	cmp	r4, #1
 80251a8:	dc1e      	bgt.n	80251e8 <_strtod_l+0x564>
 80251aa:	2b00      	cmp	r3, #0
 80251ac:	d001      	beq.n	80251b2 <_strtod_l+0x52e>
 80251ae:	0006      	movs	r6, r0
 80251b0:	000f      	movs	r7, r1
 80251b2:	4b32      	ldr	r3, [pc, #200]	@ (802527c <_strtod_l+0x5f8>)
 80251b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80251b6:	18ff      	adds	r7, r7, r3
 80251b8:	4b2f      	ldr	r3, [pc, #188]	@ (8025278 <_strtod_l+0x5f4>)
 80251ba:	00d5      	lsls	r5, r2, #3
 80251bc:	195d      	adds	r5, r3, r5
 80251be:	0032      	movs	r2, r6
 80251c0:	6828      	ldr	r0, [r5, #0]
 80251c2:	6869      	ldr	r1, [r5, #4]
 80251c4:	003b      	movs	r3, r7
 80251c6:	f7dd fbc5 	bl	8002954 <__aeabi_dmul>
 80251ca:	4b26      	ldr	r3, [pc, #152]	@ (8025264 <_strtod_l+0x5e0>)
 80251cc:	4a2c      	ldr	r2, [pc, #176]	@ (8025280 <_strtod_l+0x5fc>)
 80251ce:	0006      	movs	r6, r0
 80251d0:	400b      	ands	r3, r1
 80251d2:	4293      	cmp	r3, r2
 80251d4:	d895      	bhi.n	8025102 <_strtod_l+0x47e>
 80251d6:	4a2b      	ldr	r2, [pc, #172]	@ (8025284 <_strtod_l+0x600>)
 80251d8:	4293      	cmp	r3, r2
 80251da:	d913      	bls.n	8025204 <_strtod_l+0x580>
 80251dc:	2601      	movs	r6, #1
 80251de:	4f2a      	ldr	r7, [pc, #168]	@ (8025288 <_strtod_l+0x604>)
 80251e0:	4276      	negs	r6, r6
 80251e2:	2300      	movs	r3, #0
 80251e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80251e6:	e086      	b.n	80252f6 <_strtod_l+0x672>
 80251e8:	2201      	movs	r2, #1
 80251ea:	4214      	tst	r4, r2
 80251ec:	d004      	beq.n	80251f8 <_strtod_l+0x574>
 80251ee:	682a      	ldr	r2, [r5, #0]
 80251f0:	686b      	ldr	r3, [r5, #4]
 80251f2:	f7dd fbaf 	bl	8002954 <__aeabi_dmul>
 80251f6:	2301      	movs	r3, #1
 80251f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80251fa:	1064      	asrs	r4, r4, #1
 80251fc:	3201      	adds	r2, #1
 80251fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8025200:	3508      	adds	r5, #8
 8025202:	e7d0      	b.n	80251a6 <_strtod_l+0x522>
 8025204:	23d4      	movs	r3, #212	@ 0xd4
 8025206:	049b      	lsls	r3, r3, #18
 8025208:	18cf      	adds	r7, r1, r3
 802520a:	e7ea      	b.n	80251e2 <_strtod_l+0x55e>
 802520c:	2c00      	cmp	r4, #0
 802520e:	d0e8      	beq.n	80251e2 <_strtod_l+0x55e>
 8025210:	4264      	negs	r4, r4
 8025212:	230f      	movs	r3, #15
 8025214:	0022      	movs	r2, r4
 8025216:	401a      	ands	r2, r3
 8025218:	421c      	tst	r4, r3
 802521a:	d00a      	beq.n	8025232 <_strtod_l+0x5ae>
 802521c:	4b15      	ldr	r3, [pc, #84]	@ (8025274 <_strtod_l+0x5f0>)
 802521e:	00d2      	lsls	r2, r2, #3
 8025220:	189b      	adds	r3, r3, r2
 8025222:	0030      	movs	r0, r6
 8025224:	681a      	ldr	r2, [r3, #0]
 8025226:	685b      	ldr	r3, [r3, #4]
 8025228:	0039      	movs	r1, r7
 802522a:	f7dc ff59 	bl	80020e0 <__aeabi_ddiv>
 802522e:	0006      	movs	r6, r0
 8025230:	000f      	movs	r7, r1
 8025232:	1124      	asrs	r4, r4, #4
 8025234:	d0d5      	beq.n	80251e2 <_strtod_l+0x55e>
 8025236:	2c1f      	cmp	r4, #31
 8025238:	dd28      	ble.n	802528c <_strtod_l+0x608>
 802523a:	2300      	movs	r3, #0
 802523c:	9306      	str	r3, [sp, #24]
 802523e:	9307      	str	r3, [sp, #28]
 8025240:	930d      	str	r3, [sp, #52]	@ 0x34
 8025242:	9308      	str	r3, [sp, #32]
 8025244:	2322      	movs	r3, #34	@ 0x22
 8025246:	9a05      	ldr	r2, [sp, #20]
 8025248:	2600      	movs	r6, #0
 802524a:	6013      	str	r3, [r2, #0]
 802524c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802524e:	2700      	movs	r7, #0
 8025250:	2b00      	cmp	r3, #0
 8025252:	d000      	beq.n	8025256 <_strtod_l+0x5d2>
 8025254:	e763      	b.n	802511e <_strtod_l+0x49a>
 8025256:	e550      	b.n	8024cfa <_strtod_l+0x76>
 8025258:	00004e1f 	.word	0x00004e1f
 802525c:	0802ee17 	.word	0x0802ee17
 8025260:	0802efdc 	.word	0x0802efdc
 8025264:	7ff00000 	.word	0x7ff00000
 8025268:	0802ee0f 	.word	0x0802ee0f
 802526c:	0802ee49 	.word	0x0802ee49
 8025270:	0802efd8 	.word	0x0802efd8
 8025274:	0802f168 	.word	0x0802f168
 8025278:	0802f140 	.word	0x0802f140
 802527c:	fcb00000 	.word	0xfcb00000
 8025280:	7ca00000 	.word	0x7ca00000
 8025284:	7c900000 	.word	0x7c900000
 8025288:	7fefffff 	.word	0x7fefffff
 802528c:	2310      	movs	r3, #16
 802528e:	0022      	movs	r2, r4
 8025290:	401a      	ands	r2, r3
 8025292:	9209      	str	r2, [sp, #36]	@ 0x24
 8025294:	421c      	tst	r4, r3
 8025296:	d001      	beq.n	802529c <_strtod_l+0x618>
 8025298:	335a      	adds	r3, #90	@ 0x5a
 802529a:	9309      	str	r3, [sp, #36]	@ 0x24
 802529c:	0030      	movs	r0, r6
 802529e:	0039      	movs	r1, r7
 80252a0:	2300      	movs	r3, #0
 80252a2:	4dc0      	ldr	r5, [pc, #768]	@ (80255a4 <_strtod_l+0x920>)
 80252a4:	2201      	movs	r2, #1
 80252a6:	4214      	tst	r4, r2
 80252a8:	d004      	beq.n	80252b4 <_strtod_l+0x630>
 80252aa:	682a      	ldr	r2, [r5, #0]
 80252ac:	686b      	ldr	r3, [r5, #4]
 80252ae:	f7dd fb51 	bl	8002954 <__aeabi_dmul>
 80252b2:	2301      	movs	r3, #1
 80252b4:	1064      	asrs	r4, r4, #1
 80252b6:	3508      	adds	r5, #8
 80252b8:	2c00      	cmp	r4, #0
 80252ba:	d1f3      	bne.n	80252a4 <_strtod_l+0x620>
 80252bc:	2b00      	cmp	r3, #0
 80252be:	d001      	beq.n	80252c4 <_strtod_l+0x640>
 80252c0:	0006      	movs	r6, r0
 80252c2:	000f      	movs	r7, r1
 80252c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80252c6:	2b00      	cmp	r3, #0
 80252c8:	d00d      	beq.n	80252e6 <_strtod_l+0x662>
 80252ca:	236b      	movs	r3, #107	@ 0x6b
 80252cc:	007a      	lsls	r2, r7, #1
 80252ce:	0d52      	lsrs	r2, r2, #21
 80252d0:	0039      	movs	r1, r7
 80252d2:	1a9b      	subs	r3, r3, r2
 80252d4:	2b00      	cmp	r3, #0
 80252d6:	dd06      	ble.n	80252e6 <_strtod_l+0x662>
 80252d8:	2b1f      	cmp	r3, #31
 80252da:	dd5c      	ble.n	8025396 <_strtod_l+0x712>
 80252dc:	2600      	movs	r6, #0
 80252de:	2b34      	cmp	r3, #52	@ 0x34
 80252e0:	dd52      	ble.n	8025388 <_strtod_l+0x704>
 80252e2:	27dc      	movs	r7, #220	@ 0xdc
 80252e4:	04bf      	lsls	r7, r7, #18
 80252e6:	2200      	movs	r2, #0
 80252e8:	2300      	movs	r3, #0
 80252ea:	0030      	movs	r0, r6
 80252ec:	0039      	movs	r1, r7
 80252ee:	f7db f8df 	bl	80004b0 <__aeabi_dcmpeq>
 80252f2:	2800      	cmp	r0, #0
 80252f4:	d1a1      	bne.n	802523a <_strtod_l+0x5b6>
 80252f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80252f8:	9a08      	ldr	r2, [sp, #32]
 80252fa:	9300      	str	r3, [sp, #0]
 80252fc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80252fe:	9b06      	ldr	r3, [sp, #24]
 8025300:	9805      	ldr	r0, [sp, #20]
 8025302:	f002 febd 	bl	8028080 <__s2b>
 8025306:	900d      	str	r0, [sp, #52]	@ 0x34
 8025308:	2800      	cmp	r0, #0
 802530a:	d100      	bne.n	802530e <_strtod_l+0x68a>
 802530c:	e6f9      	b.n	8025102 <_strtod_l+0x47e>
 802530e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025310:	9907      	ldr	r1, [sp, #28]
 8025312:	43db      	mvns	r3, r3
 8025314:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025316:	17db      	asrs	r3, r3, #31
 8025318:	1a52      	subs	r2, r2, r1
 802531a:	9214      	str	r2, [sp, #80]	@ 0x50
 802531c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802531e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8025320:	17d2      	asrs	r2, r2, #31
 8025322:	4011      	ands	r1, r2
 8025324:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025326:	9114      	str	r1, [sp, #80]	@ 0x50
 8025328:	401a      	ands	r2, r3
 802532a:	2300      	movs	r3, #0
 802532c:	921a      	str	r2, [sp, #104]	@ 0x68
 802532e:	9306      	str	r3, [sp, #24]
 8025330:	9307      	str	r3, [sp, #28]
 8025332:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025334:	9805      	ldr	r0, [sp, #20]
 8025336:	6859      	ldr	r1, [r3, #4]
 8025338:	f002 fdf6 	bl	8027f28 <_Balloc>
 802533c:	9008      	str	r0, [sp, #32]
 802533e:	2800      	cmp	r0, #0
 8025340:	d100      	bne.n	8025344 <_strtod_l+0x6c0>
 8025342:	e6e3      	b.n	802510c <_strtod_l+0x488>
 8025344:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025346:	300c      	adds	r0, #12
 8025348:	0019      	movs	r1, r3
 802534a:	691a      	ldr	r2, [r3, #16]
 802534c:	310c      	adds	r1, #12
 802534e:	3202      	adds	r2, #2
 8025350:	0092      	lsls	r2, r2, #2
 8025352:	f001 faf1 	bl	8026938 <memcpy>
 8025356:	ab20      	add	r3, sp, #128	@ 0x80
 8025358:	9301      	str	r3, [sp, #4]
 802535a:	ab1f      	add	r3, sp, #124	@ 0x7c
 802535c:	9300      	str	r3, [sp, #0]
 802535e:	0032      	movs	r2, r6
 8025360:	003b      	movs	r3, r7
 8025362:	9805      	ldr	r0, [sp, #20]
 8025364:	9610      	str	r6, [sp, #64]	@ 0x40
 8025366:	9711      	str	r7, [sp, #68]	@ 0x44
 8025368:	f003 f9d2 	bl	8028710 <__d2b>
 802536c:	901e      	str	r0, [sp, #120]	@ 0x78
 802536e:	2800      	cmp	r0, #0
 8025370:	d100      	bne.n	8025374 <_strtod_l+0x6f0>
 8025372:	e6cb      	b.n	802510c <_strtod_l+0x488>
 8025374:	2101      	movs	r1, #1
 8025376:	9805      	ldr	r0, [sp, #20]
 8025378:	f002 ff1e 	bl	80281b8 <__i2b>
 802537c:	9007      	str	r0, [sp, #28]
 802537e:	2800      	cmp	r0, #0
 8025380:	d10e      	bne.n	80253a0 <_strtod_l+0x71c>
 8025382:	2300      	movs	r3, #0
 8025384:	9307      	str	r3, [sp, #28]
 8025386:	e6c1      	b.n	802510c <_strtod_l+0x488>
 8025388:	234b      	movs	r3, #75	@ 0x4b
 802538a:	1a9a      	subs	r2, r3, r2
 802538c:	3b4c      	subs	r3, #76	@ 0x4c
 802538e:	4093      	lsls	r3, r2
 8025390:	4019      	ands	r1, r3
 8025392:	000f      	movs	r7, r1
 8025394:	e7a7      	b.n	80252e6 <_strtod_l+0x662>
 8025396:	2201      	movs	r2, #1
 8025398:	4252      	negs	r2, r2
 802539a:	409a      	lsls	r2, r3
 802539c:	4016      	ands	r6, r2
 802539e:	e7a2      	b.n	80252e6 <_strtod_l+0x662>
 80253a0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80253a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80253a4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80253a6:	1ad4      	subs	r4, r2, r3
 80253a8:	2b00      	cmp	r3, #0
 80253aa:	db01      	blt.n	80253b0 <_strtod_l+0x72c>
 80253ac:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80253ae:	195d      	adds	r5, r3, r5
 80253b0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80253b2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80253b4:	1a5b      	subs	r3, r3, r1
 80253b6:	2136      	movs	r1, #54	@ 0x36
 80253b8:	189b      	adds	r3, r3, r2
 80253ba:	1a8a      	subs	r2, r1, r2
 80253bc:	497a      	ldr	r1, [pc, #488]	@ (80255a8 <_strtod_l+0x924>)
 80253be:	2001      	movs	r0, #1
 80253c0:	468c      	mov	ip, r1
 80253c2:	2100      	movs	r1, #0
 80253c4:	3b01      	subs	r3, #1
 80253c6:	9115      	str	r1, [sp, #84]	@ 0x54
 80253c8:	9016      	str	r0, [sp, #88]	@ 0x58
 80253ca:	4563      	cmp	r3, ip
 80253cc:	da06      	bge.n	80253dc <_strtod_l+0x758>
 80253ce:	4661      	mov	r1, ip
 80253d0:	1ac9      	subs	r1, r1, r3
 80253d2:	1a52      	subs	r2, r2, r1
 80253d4:	291f      	cmp	r1, #31
 80253d6:	dc3f      	bgt.n	8025458 <_strtod_l+0x7d4>
 80253d8:	4088      	lsls	r0, r1
 80253da:	9016      	str	r0, [sp, #88]	@ 0x58
 80253dc:	18ab      	adds	r3, r5, r2
 80253de:	930e      	str	r3, [sp, #56]	@ 0x38
 80253e0:	18a4      	adds	r4, r4, r2
 80253e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80253e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80253e6:	191c      	adds	r4, r3, r4
 80253e8:	002b      	movs	r3, r5
 80253ea:	4295      	cmp	r5, r2
 80253ec:	dd00      	ble.n	80253f0 <_strtod_l+0x76c>
 80253ee:	0013      	movs	r3, r2
 80253f0:	42a3      	cmp	r3, r4
 80253f2:	dd00      	ble.n	80253f6 <_strtod_l+0x772>
 80253f4:	0023      	movs	r3, r4
 80253f6:	2b00      	cmp	r3, #0
 80253f8:	dd04      	ble.n	8025404 <_strtod_l+0x780>
 80253fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80253fc:	1ae4      	subs	r4, r4, r3
 80253fe:	1ad2      	subs	r2, r2, r3
 8025400:	920e      	str	r2, [sp, #56]	@ 0x38
 8025402:	1aed      	subs	r5, r5, r3
 8025404:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025406:	2b00      	cmp	r3, #0
 8025408:	dd16      	ble.n	8025438 <_strtod_l+0x7b4>
 802540a:	001a      	movs	r2, r3
 802540c:	9907      	ldr	r1, [sp, #28]
 802540e:	9805      	ldr	r0, [sp, #20]
 8025410:	f002 ff94 	bl	802833c <__pow5mult>
 8025414:	9007      	str	r0, [sp, #28]
 8025416:	2800      	cmp	r0, #0
 8025418:	d0b3      	beq.n	8025382 <_strtod_l+0x6fe>
 802541a:	0001      	movs	r1, r0
 802541c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802541e:	9805      	ldr	r0, [sp, #20]
 8025420:	f002 fee2 	bl	80281e8 <__multiply>
 8025424:	9013      	str	r0, [sp, #76]	@ 0x4c
 8025426:	2800      	cmp	r0, #0
 8025428:	d100      	bne.n	802542c <_strtod_l+0x7a8>
 802542a:	e66f      	b.n	802510c <_strtod_l+0x488>
 802542c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802542e:	9805      	ldr	r0, [sp, #20]
 8025430:	f002 fdbe 	bl	8027fb0 <_Bfree>
 8025434:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025436:	931e      	str	r3, [sp, #120]	@ 0x78
 8025438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802543a:	2b00      	cmp	r3, #0
 802543c:	dc12      	bgt.n	8025464 <_strtod_l+0x7e0>
 802543e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025440:	2b00      	cmp	r3, #0
 8025442:	dd18      	ble.n	8025476 <_strtod_l+0x7f2>
 8025444:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8025446:	9908      	ldr	r1, [sp, #32]
 8025448:	9805      	ldr	r0, [sp, #20]
 802544a:	f002 ff77 	bl	802833c <__pow5mult>
 802544e:	9008      	str	r0, [sp, #32]
 8025450:	2800      	cmp	r0, #0
 8025452:	d110      	bne.n	8025476 <_strtod_l+0x7f2>
 8025454:	2300      	movs	r3, #0
 8025456:	e658      	b.n	802510a <_strtod_l+0x486>
 8025458:	4954      	ldr	r1, [pc, #336]	@ (80255ac <_strtod_l+0x928>)
 802545a:	1acb      	subs	r3, r1, r3
 802545c:	0001      	movs	r1, r0
 802545e:	4099      	lsls	r1, r3
 8025460:	9115      	str	r1, [sp, #84]	@ 0x54
 8025462:	e7ba      	b.n	80253da <_strtod_l+0x756>
 8025464:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025466:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8025468:	9805      	ldr	r0, [sp, #20]
 802546a:	f002 ffc3 	bl	80283f4 <__lshift>
 802546e:	901e      	str	r0, [sp, #120]	@ 0x78
 8025470:	2800      	cmp	r0, #0
 8025472:	d1e4      	bne.n	802543e <_strtod_l+0x7ba>
 8025474:	e64a      	b.n	802510c <_strtod_l+0x488>
 8025476:	2c00      	cmp	r4, #0
 8025478:	dd07      	ble.n	802548a <_strtod_l+0x806>
 802547a:	0022      	movs	r2, r4
 802547c:	9908      	ldr	r1, [sp, #32]
 802547e:	9805      	ldr	r0, [sp, #20]
 8025480:	f002 ffb8 	bl	80283f4 <__lshift>
 8025484:	9008      	str	r0, [sp, #32]
 8025486:	2800      	cmp	r0, #0
 8025488:	d0e4      	beq.n	8025454 <_strtod_l+0x7d0>
 802548a:	2d00      	cmp	r5, #0
 802548c:	dd08      	ble.n	80254a0 <_strtod_l+0x81c>
 802548e:	002a      	movs	r2, r5
 8025490:	9907      	ldr	r1, [sp, #28]
 8025492:	9805      	ldr	r0, [sp, #20]
 8025494:	f002 ffae 	bl	80283f4 <__lshift>
 8025498:	9007      	str	r0, [sp, #28]
 802549a:	2800      	cmp	r0, #0
 802549c:	d100      	bne.n	80254a0 <_strtod_l+0x81c>
 802549e:	e635      	b.n	802510c <_strtod_l+0x488>
 80254a0:	9a08      	ldr	r2, [sp, #32]
 80254a2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80254a4:	9805      	ldr	r0, [sp, #20]
 80254a6:	f003 f82d 	bl	8028504 <__mdiff>
 80254aa:	9006      	str	r0, [sp, #24]
 80254ac:	2800      	cmp	r0, #0
 80254ae:	d100      	bne.n	80254b2 <_strtod_l+0x82e>
 80254b0:	e62c      	b.n	802510c <_strtod_l+0x488>
 80254b2:	68c3      	ldr	r3, [r0, #12]
 80254b4:	9907      	ldr	r1, [sp, #28]
 80254b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80254b8:	2300      	movs	r3, #0
 80254ba:	60c3      	str	r3, [r0, #12]
 80254bc:	f003 f806 	bl	80284cc <__mcmp>
 80254c0:	2800      	cmp	r0, #0
 80254c2:	da3b      	bge.n	802553c <_strtod_l+0x8b8>
 80254c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80254c6:	4333      	orrs	r3, r6
 80254c8:	d167      	bne.n	802559a <_strtod_l+0x916>
 80254ca:	033b      	lsls	r3, r7, #12
 80254cc:	d165      	bne.n	802559a <_strtod_l+0x916>
 80254ce:	22d6      	movs	r2, #214	@ 0xd6
 80254d0:	4b37      	ldr	r3, [pc, #220]	@ (80255b0 <_strtod_l+0x92c>)
 80254d2:	04d2      	lsls	r2, r2, #19
 80254d4:	403b      	ands	r3, r7
 80254d6:	4293      	cmp	r3, r2
 80254d8:	d95f      	bls.n	802559a <_strtod_l+0x916>
 80254da:	9b06      	ldr	r3, [sp, #24]
 80254dc:	695b      	ldr	r3, [r3, #20]
 80254de:	2b00      	cmp	r3, #0
 80254e0:	d103      	bne.n	80254ea <_strtod_l+0x866>
 80254e2:	9b06      	ldr	r3, [sp, #24]
 80254e4:	691b      	ldr	r3, [r3, #16]
 80254e6:	2b01      	cmp	r3, #1
 80254e8:	dd57      	ble.n	802559a <_strtod_l+0x916>
 80254ea:	9906      	ldr	r1, [sp, #24]
 80254ec:	2201      	movs	r2, #1
 80254ee:	9805      	ldr	r0, [sp, #20]
 80254f0:	f002 ff80 	bl	80283f4 <__lshift>
 80254f4:	9907      	ldr	r1, [sp, #28]
 80254f6:	9006      	str	r0, [sp, #24]
 80254f8:	f002 ffe8 	bl	80284cc <__mcmp>
 80254fc:	2800      	cmp	r0, #0
 80254fe:	dd4c      	ble.n	802559a <_strtod_l+0x916>
 8025500:	4b2b      	ldr	r3, [pc, #172]	@ (80255b0 <_strtod_l+0x92c>)
 8025502:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025504:	403b      	ands	r3, r7
 8025506:	2a00      	cmp	r2, #0
 8025508:	d074      	beq.n	80255f4 <_strtod_l+0x970>
 802550a:	22d6      	movs	r2, #214	@ 0xd6
 802550c:	04d2      	lsls	r2, r2, #19
 802550e:	4293      	cmp	r3, r2
 8025510:	d870      	bhi.n	80255f4 <_strtod_l+0x970>
 8025512:	22dc      	movs	r2, #220	@ 0xdc
 8025514:	0492      	lsls	r2, r2, #18
 8025516:	4293      	cmp	r3, r2
 8025518:	d800      	bhi.n	802551c <_strtod_l+0x898>
 802551a:	e693      	b.n	8025244 <_strtod_l+0x5c0>
 802551c:	0030      	movs	r0, r6
 802551e:	0039      	movs	r1, r7
 8025520:	4b24      	ldr	r3, [pc, #144]	@ (80255b4 <_strtod_l+0x930>)
 8025522:	2200      	movs	r2, #0
 8025524:	f7dd fa16 	bl	8002954 <__aeabi_dmul>
 8025528:	4b21      	ldr	r3, [pc, #132]	@ (80255b0 <_strtod_l+0x92c>)
 802552a:	0006      	movs	r6, r0
 802552c:	000f      	movs	r7, r1
 802552e:	420b      	tst	r3, r1
 8025530:	d000      	beq.n	8025534 <_strtod_l+0x8b0>
 8025532:	e5f4      	b.n	802511e <_strtod_l+0x49a>
 8025534:	2322      	movs	r3, #34	@ 0x22
 8025536:	9a05      	ldr	r2, [sp, #20]
 8025538:	6013      	str	r3, [r2, #0]
 802553a:	e5f0      	b.n	802511e <_strtod_l+0x49a>
 802553c:	970e      	str	r7, [sp, #56]	@ 0x38
 802553e:	2800      	cmp	r0, #0
 8025540:	d175      	bne.n	802562e <_strtod_l+0x9aa>
 8025542:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025544:	033b      	lsls	r3, r7, #12
 8025546:	0b1b      	lsrs	r3, r3, #12
 8025548:	2a00      	cmp	r2, #0
 802554a:	d039      	beq.n	80255c0 <_strtod_l+0x93c>
 802554c:	4a1a      	ldr	r2, [pc, #104]	@ (80255b8 <_strtod_l+0x934>)
 802554e:	4293      	cmp	r3, r2
 8025550:	d138      	bne.n	80255c4 <_strtod_l+0x940>
 8025552:	2101      	movs	r1, #1
 8025554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025556:	4249      	negs	r1, r1
 8025558:	0032      	movs	r2, r6
 802555a:	0008      	movs	r0, r1
 802555c:	2b00      	cmp	r3, #0
 802555e:	d00b      	beq.n	8025578 <_strtod_l+0x8f4>
 8025560:	24d4      	movs	r4, #212	@ 0xd4
 8025562:	4b13      	ldr	r3, [pc, #76]	@ (80255b0 <_strtod_l+0x92c>)
 8025564:	0008      	movs	r0, r1
 8025566:	403b      	ands	r3, r7
 8025568:	04e4      	lsls	r4, r4, #19
 802556a:	42a3      	cmp	r3, r4
 802556c:	d804      	bhi.n	8025578 <_strtod_l+0x8f4>
 802556e:	306c      	adds	r0, #108	@ 0x6c
 8025570:	0d1b      	lsrs	r3, r3, #20
 8025572:	1ac3      	subs	r3, r0, r3
 8025574:	4099      	lsls	r1, r3
 8025576:	0008      	movs	r0, r1
 8025578:	4282      	cmp	r2, r0
 802557a:	d123      	bne.n	80255c4 <_strtod_l+0x940>
 802557c:	4b0f      	ldr	r3, [pc, #60]	@ (80255bc <_strtod_l+0x938>)
 802557e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025580:	4299      	cmp	r1, r3
 8025582:	d102      	bne.n	802558a <_strtod_l+0x906>
 8025584:	3201      	adds	r2, #1
 8025586:	d100      	bne.n	802558a <_strtod_l+0x906>
 8025588:	e5c0      	b.n	802510c <_strtod_l+0x488>
 802558a:	4b09      	ldr	r3, [pc, #36]	@ (80255b0 <_strtod_l+0x92c>)
 802558c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802558e:	2600      	movs	r6, #0
 8025590:	401a      	ands	r2, r3
 8025592:	0013      	movs	r3, r2
 8025594:	2280      	movs	r2, #128	@ 0x80
 8025596:	0352      	lsls	r2, r2, #13
 8025598:	189f      	adds	r7, r3, r2
 802559a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802559c:	2b00      	cmp	r3, #0
 802559e:	d1bd      	bne.n	802551c <_strtod_l+0x898>
 80255a0:	e5bd      	b.n	802511e <_strtod_l+0x49a>
 80255a2:	46c0      	nop			@ (mov r8, r8)
 80255a4:	0802f008 	.word	0x0802f008
 80255a8:	fffffc02 	.word	0xfffffc02
 80255ac:	fffffbe2 	.word	0xfffffbe2
 80255b0:	7ff00000 	.word	0x7ff00000
 80255b4:	39500000 	.word	0x39500000
 80255b8:	000fffff 	.word	0x000fffff
 80255bc:	7fefffff 	.word	0x7fefffff
 80255c0:	4333      	orrs	r3, r6
 80255c2:	d09d      	beq.n	8025500 <_strtod_l+0x87c>
 80255c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80255c6:	2b00      	cmp	r3, #0
 80255c8:	d01c      	beq.n	8025604 <_strtod_l+0x980>
 80255ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80255cc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80255ce:	4213      	tst	r3, r2
 80255d0:	d0e3      	beq.n	802559a <_strtod_l+0x916>
 80255d2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80255d4:	0030      	movs	r0, r6
 80255d6:	0039      	movs	r1, r7
 80255d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80255da:	2b00      	cmp	r3, #0
 80255dc:	d016      	beq.n	802560c <_strtod_l+0x988>
 80255de:	f7ff fb39 	bl	8024c54 <sulp>
 80255e2:	0002      	movs	r2, r0
 80255e4:	000b      	movs	r3, r1
 80255e6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80255e8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80255ea:	f7dc f9b3 	bl	8001954 <__aeabi_dadd>
 80255ee:	0006      	movs	r6, r0
 80255f0:	000f      	movs	r7, r1
 80255f2:	e7d2      	b.n	802559a <_strtod_l+0x916>
 80255f4:	2601      	movs	r6, #1
 80255f6:	4a92      	ldr	r2, [pc, #584]	@ (8025840 <_strtod_l+0xbbc>)
 80255f8:	4276      	negs	r6, r6
 80255fa:	189b      	adds	r3, r3, r2
 80255fc:	4a91      	ldr	r2, [pc, #580]	@ (8025844 <_strtod_l+0xbc0>)
 80255fe:	431a      	orrs	r2, r3
 8025600:	0017      	movs	r7, r2
 8025602:	e7ca      	b.n	802559a <_strtod_l+0x916>
 8025604:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025606:	4233      	tst	r3, r6
 8025608:	d0c7      	beq.n	802559a <_strtod_l+0x916>
 802560a:	e7e2      	b.n	80255d2 <_strtod_l+0x94e>
 802560c:	f7ff fb22 	bl	8024c54 <sulp>
 8025610:	0002      	movs	r2, r0
 8025612:	000b      	movs	r3, r1
 8025614:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025616:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025618:	f7dd fc82 	bl	8002f20 <__aeabi_dsub>
 802561c:	2200      	movs	r2, #0
 802561e:	2300      	movs	r3, #0
 8025620:	0006      	movs	r6, r0
 8025622:	000f      	movs	r7, r1
 8025624:	f7da ff44 	bl	80004b0 <__aeabi_dcmpeq>
 8025628:	2800      	cmp	r0, #0
 802562a:	d0b6      	beq.n	802559a <_strtod_l+0x916>
 802562c:	e60a      	b.n	8025244 <_strtod_l+0x5c0>
 802562e:	9907      	ldr	r1, [sp, #28]
 8025630:	9806      	ldr	r0, [sp, #24]
 8025632:	f003 f8cd 	bl	80287d0 <__ratio>
 8025636:	2380      	movs	r3, #128	@ 0x80
 8025638:	2200      	movs	r2, #0
 802563a:	05db      	lsls	r3, r3, #23
 802563c:	0004      	movs	r4, r0
 802563e:	000d      	movs	r5, r1
 8025640:	f7da ff46 	bl	80004d0 <__aeabi_dcmple>
 8025644:	2800      	cmp	r0, #0
 8025646:	d06c      	beq.n	8025722 <_strtod_l+0xa9e>
 8025648:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802564a:	2b00      	cmp	r3, #0
 802564c:	d177      	bne.n	802573e <_strtod_l+0xaba>
 802564e:	2e00      	cmp	r6, #0
 8025650:	d157      	bne.n	8025702 <_strtod_l+0xa7e>
 8025652:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025654:	031b      	lsls	r3, r3, #12
 8025656:	d15a      	bne.n	802570e <_strtod_l+0xa8a>
 8025658:	2200      	movs	r2, #0
 802565a:	0020      	movs	r0, r4
 802565c:	0029      	movs	r1, r5
 802565e:	4b7a      	ldr	r3, [pc, #488]	@ (8025848 <_strtod_l+0xbc4>)
 8025660:	f7da ff2c 	bl	80004bc <__aeabi_dcmplt>
 8025664:	2800      	cmp	r0, #0
 8025666:	d159      	bne.n	802571c <_strtod_l+0xa98>
 8025668:	0020      	movs	r0, r4
 802566a:	0029      	movs	r1, r5
 802566c:	2200      	movs	r2, #0
 802566e:	4b77      	ldr	r3, [pc, #476]	@ (802584c <_strtod_l+0xbc8>)
 8025670:	f7dd f970 	bl	8002954 <__aeabi_dmul>
 8025674:	0004      	movs	r4, r0
 8025676:	000d      	movs	r5, r1
 8025678:	2380      	movs	r3, #128	@ 0x80
 802567a:	061b      	lsls	r3, r3, #24
 802567c:	18eb      	adds	r3, r5, r3
 802567e:	940a      	str	r4, [sp, #40]	@ 0x28
 8025680:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025682:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025684:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025686:	9216      	str	r2, [sp, #88]	@ 0x58
 8025688:	9317      	str	r3, [sp, #92]	@ 0x5c
 802568a:	4a71      	ldr	r2, [pc, #452]	@ (8025850 <_strtod_l+0xbcc>)
 802568c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802568e:	4013      	ands	r3, r2
 8025690:	9315      	str	r3, [sp, #84]	@ 0x54
 8025692:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025694:	4b6f      	ldr	r3, [pc, #444]	@ (8025854 <_strtod_l+0xbd0>)
 8025696:	429a      	cmp	r2, r3
 8025698:	d000      	beq.n	802569c <_strtod_l+0xa18>
 802569a:	e087      	b.n	80257ac <_strtod_l+0xb28>
 802569c:	4a6e      	ldr	r2, [pc, #440]	@ (8025858 <_strtod_l+0xbd4>)
 802569e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80256a0:	4694      	mov	ip, r2
 80256a2:	4463      	add	r3, ip
 80256a4:	001f      	movs	r7, r3
 80256a6:	0030      	movs	r0, r6
 80256a8:	0019      	movs	r1, r3
 80256aa:	f002 ffc5 	bl	8028638 <__ulp>
 80256ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80256b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80256b2:	f7dd f94f 	bl	8002954 <__aeabi_dmul>
 80256b6:	0032      	movs	r2, r6
 80256b8:	003b      	movs	r3, r7
 80256ba:	f7dc f94b 	bl	8001954 <__aeabi_dadd>
 80256be:	4a64      	ldr	r2, [pc, #400]	@ (8025850 <_strtod_l+0xbcc>)
 80256c0:	4b66      	ldr	r3, [pc, #408]	@ (802585c <_strtod_l+0xbd8>)
 80256c2:	0006      	movs	r6, r0
 80256c4:	400a      	ands	r2, r1
 80256c6:	429a      	cmp	r2, r3
 80256c8:	d940      	bls.n	802574c <_strtod_l+0xac8>
 80256ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80256cc:	4a64      	ldr	r2, [pc, #400]	@ (8025860 <_strtod_l+0xbdc>)
 80256ce:	4293      	cmp	r3, r2
 80256d0:	d103      	bne.n	80256da <_strtod_l+0xa56>
 80256d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80256d4:	3301      	adds	r3, #1
 80256d6:	d100      	bne.n	80256da <_strtod_l+0xa56>
 80256d8:	e518      	b.n	802510c <_strtod_l+0x488>
 80256da:	2601      	movs	r6, #1
 80256dc:	4f60      	ldr	r7, [pc, #384]	@ (8025860 <_strtod_l+0xbdc>)
 80256de:	4276      	negs	r6, r6
 80256e0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80256e2:	9805      	ldr	r0, [sp, #20]
 80256e4:	f002 fc64 	bl	8027fb0 <_Bfree>
 80256e8:	9908      	ldr	r1, [sp, #32]
 80256ea:	9805      	ldr	r0, [sp, #20]
 80256ec:	f002 fc60 	bl	8027fb0 <_Bfree>
 80256f0:	9907      	ldr	r1, [sp, #28]
 80256f2:	9805      	ldr	r0, [sp, #20]
 80256f4:	f002 fc5c 	bl	8027fb0 <_Bfree>
 80256f8:	9906      	ldr	r1, [sp, #24]
 80256fa:	9805      	ldr	r0, [sp, #20]
 80256fc:	f002 fc58 	bl	8027fb0 <_Bfree>
 8025700:	e617      	b.n	8025332 <_strtod_l+0x6ae>
 8025702:	2e01      	cmp	r6, #1
 8025704:	d103      	bne.n	802570e <_strtod_l+0xa8a>
 8025706:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025708:	2b00      	cmp	r3, #0
 802570a:	d100      	bne.n	802570e <_strtod_l+0xa8a>
 802570c:	e59a      	b.n	8025244 <_strtod_l+0x5c0>
 802570e:	2300      	movs	r3, #0
 8025710:	4c54      	ldr	r4, [pc, #336]	@ (8025864 <_strtod_l+0xbe0>)
 8025712:	4d4d      	ldr	r5, [pc, #308]	@ (8025848 <_strtod_l+0xbc4>)
 8025714:	930a      	str	r3, [sp, #40]	@ 0x28
 8025716:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025718:	2400      	movs	r4, #0
 802571a:	e7b2      	b.n	8025682 <_strtod_l+0x9fe>
 802571c:	2400      	movs	r4, #0
 802571e:	4d4b      	ldr	r5, [pc, #300]	@ (802584c <_strtod_l+0xbc8>)
 8025720:	e7aa      	b.n	8025678 <_strtod_l+0x9f4>
 8025722:	0020      	movs	r0, r4
 8025724:	0029      	movs	r1, r5
 8025726:	4b49      	ldr	r3, [pc, #292]	@ (802584c <_strtod_l+0xbc8>)
 8025728:	2200      	movs	r2, #0
 802572a:	f7dd f913 	bl	8002954 <__aeabi_dmul>
 802572e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025730:	0004      	movs	r4, r0
 8025732:	000d      	movs	r5, r1
 8025734:	2b00      	cmp	r3, #0
 8025736:	d09f      	beq.n	8025678 <_strtod_l+0x9f4>
 8025738:	940a      	str	r4, [sp, #40]	@ 0x28
 802573a:	950b      	str	r5, [sp, #44]	@ 0x2c
 802573c:	e7a1      	b.n	8025682 <_strtod_l+0x9fe>
 802573e:	2300      	movs	r3, #0
 8025740:	4c41      	ldr	r4, [pc, #260]	@ (8025848 <_strtod_l+0xbc4>)
 8025742:	0025      	movs	r5, r4
 8025744:	930a      	str	r3, [sp, #40]	@ 0x28
 8025746:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025748:	001c      	movs	r4, r3
 802574a:	e79a      	b.n	8025682 <_strtod_l+0x9fe>
 802574c:	23d4      	movs	r3, #212	@ 0xd4
 802574e:	049b      	lsls	r3, r3, #18
 8025750:	18cf      	adds	r7, r1, r3
 8025752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025754:	9710      	str	r7, [sp, #64]	@ 0x40
 8025756:	2b00      	cmp	r3, #0
 8025758:	d1c2      	bne.n	80256e0 <_strtod_l+0xa5c>
 802575a:	4b3d      	ldr	r3, [pc, #244]	@ (8025850 <_strtod_l+0xbcc>)
 802575c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802575e:	403b      	ands	r3, r7
 8025760:	429a      	cmp	r2, r3
 8025762:	d1bd      	bne.n	80256e0 <_strtod_l+0xa5c>
 8025764:	0020      	movs	r0, r4
 8025766:	0029      	movs	r1, r5
 8025768:	f7da ff8e 	bl	8000688 <__aeabi_d2lz>
 802576c:	f7da ffc6 	bl	80006fc <__aeabi_l2d>
 8025770:	0002      	movs	r2, r0
 8025772:	000b      	movs	r3, r1
 8025774:	0020      	movs	r0, r4
 8025776:	0029      	movs	r1, r5
 8025778:	f7dd fbd2 	bl	8002f20 <__aeabi_dsub>
 802577c:	033c      	lsls	r4, r7, #12
 802577e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025780:	0b24      	lsrs	r4, r4, #12
 8025782:	4334      	orrs	r4, r6
 8025784:	900e      	str	r0, [sp, #56]	@ 0x38
 8025786:	910f      	str	r1, [sp, #60]	@ 0x3c
 8025788:	4a37      	ldr	r2, [pc, #220]	@ (8025868 <_strtod_l+0xbe4>)
 802578a:	431c      	orrs	r4, r3
 802578c:	d052      	beq.n	8025834 <_strtod_l+0xbb0>
 802578e:	4b37      	ldr	r3, [pc, #220]	@ (802586c <_strtod_l+0xbe8>)
 8025790:	f7da fe94 	bl	80004bc <__aeabi_dcmplt>
 8025794:	2800      	cmp	r0, #0
 8025796:	d000      	beq.n	802579a <_strtod_l+0xb16>
 8025798:	e4c1      	b.n	802511e <_strtod_l+0x49a>
 802579a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802579c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802579e:	4a34      	ldr	r2, [pc, #208]	@ (8025870 <_strtod_l+0xbec>)
 80257a0:	4b2a      	ldr	r3, [pc, #168]	@ (802584c <_strtod_l+0xbc8>)
 80257a2:	f7da fe9f 	bl	80004e4 <__aeabi_dcmpgt>
 80257a6:	2800      	cmp	r0, #0
 80257a8:	d09a      	beq.n	80256e0 <_strtod_l+0xa5c>
 80257aa:	e4b8      	b.n	802511e <_strtod_l+0x49a>
 80257ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80257ae:	2b00      	cmp	r3, #0
 80257b0:	d02a      	beq.n	8025808 <_strtod_l+0xb84>
 80257b2:	23d4      	movs	r3, #212	@ 0xd4
 80257b4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80257b6:	04db      	lsls	r3, r3, #19
 80257b8:	429a      	cmp	r2, r3
 80257ba:	d825      	bhi.n	8025808 <_strtod_l+0xb84>
 80257bc:	0020      	movs	r0, r4
 80257be:	0029      	movs	r1, r5
 80257c0:	4a2c      	ldr	r2, [pc, #176]	@ (8025874 <_strtod_l+0xbf0>)
 80257c2:	4b2d      	ldr	r3, [pc, #180]	@ (8025878 <_strtod_l+0xbf4>)
 80257c4:	f7da fe84 	bl	80004d0 <__aeabi_dcmple>
 80257c8:	2800      	cmp	r0, #0
 80257ca:	d016      	beq.n	80257fa <_strtod_l+0xb76>
 80257cc:	0020      	movs	r0, r4
 80257ce:	0029      	movs	r1, r5
 80257d0:	f7da ff3c 	bl	800064c <__aeabi_d2uiz>
 80257d4:	2800      	cmp	r0, #0
 80257d6:	d100      	bne.n	80257da <_strtod_l+0xb56>
 80257d8:	3001      	adds	r0, #1
 80257da:	f7de f837 	bl	800384c <__aeabi_ui2d>
 80257de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80257e0:	0004      	movs	r4, r0
 80257e2:	000d      	movs	r5, r1
 80257e4:	2b00      	cmp	r3, #0
 80257e6:	d122      	bne.n	802582e <_strtod_l+0xbaa>
 80257e8:	2380      	movs	r3, #128	@ 0x80
 80257ea:	061b      	lsls	r3, r3, #24
 80257ec:	18cb      	adds	r3, r1, r3
 80257ee:	9018      	str	r0, [sp, #96]	@ 0x60
 80257f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80257f2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80257f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80257f6:	9216      	str	r2, [sp, #88]	@ 0x58
 80257f8:	9317      	str	r3, [sp, #92]	@ 0x5c
 80257fa:	22d6      	movs	r2, #214	@ 0xd6
 80257fc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80257fe:	04d2      	lsls	r2, r2, #19
 8025800:	189b      	adds	r3, r3, r2
 8025802:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025804:	1a9b      	subs	r3, r3, r2
 8025806:	9317      	str	r3, [sp, #92]	@ 0x5c
 8025808:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802580a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802580c:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 802580e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8025810:	f002 ff12 	bl	8028638 <__ulp>
 8025814:	0002      	movs	r2, r0
 8025816:	000b      	movs	r3, r1
 8025818:	0030      	movs	r0, r6
 802581a:	0039      	movs	r1, r7
 802581c:	f7dd f89a 	bl	8002954 <__aeabi_dmul>
 8025820:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8025822:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025824:	f7dc f896 	bl	8001954 <__aeabi_dadd>
 8025828:	0006      	movs	r6, r0
 802582a:	000f      	movs	r7, r1
 802582c:	e791      	b.n	8025752 <_strtod_l+0xace>
 802582e:	9418      	str	r4, [sp, #96]	@ 0x60
 8025830:	9519      	str	r5, [sp, #100]	@ 0x64
 8025832:	e7de      	b.n	80257f2 <_strtod_l+0xb6e>
 8025834:	4b11      	ldr	r3, [pc, #68]	@ (802587c <_strtod_l+0xbf8>)
 8025836:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8025838:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802583a:	f7da fe3f 	bl	80004bc <__aeabi_dcmplt>
 802583e:	e7b2      	b.n	80257a6 <_strtod_l+0xb22>
 8025840:	fff00000 	.word	0xfff00000
 8025844:	000fffff 	.word	0x000fffff
 8025848:	3ff00000 	.word	0x3ff00000
 802584c:	3fe00000 	.word	0x3fe00000
 8025850:	7ff00000 	.word	0x7ff00000
 8025854:	7fe00000 	.word	0x7fe00000
 8025858:	fcb00000 	.word	0xfcb00000
 802585c:	7c9fffff 	.word	0x7c9fffff
 8025860:	7fefffff 	.word	0x7fefffff
 8025864:	bff00000 	.word	0xbff00000
 8025868:	94a03595 	.word	0x94a03595
 802586c:	3fdfffff 	.word	0x3fdfffff
 8025870:	35afe535 	.word	0x35afe535
 8025874:	ffc00000 	.word	0xffc00000
 8025878:	41dfffff 	.word	0x41dfffff
 802587c:	3fcfffff 	.word	0x3fcfffff

08025880 <strtod>:
 8025880:	b510      	push	{r4, lr}
 8025882:	4c04      	ldr	r4, [pc, #16]	@ (8025894 <strtod+0x14>)
 8025884:	000a      	movs	r2, r1
 8025886:	0001      	movs	r1, r0
 8025888:	4b03      	ldr	r3, [pc, #12]	@ (8025898 <strtod+0x18>)
 802588a:	6820      	ldr	r0, [r4, #0]
 802588c:	f7ff f9fa 	bl	8024c84 <_strtod_l>
 8025890:	bd10      	pop	{r4, pc}
 8025892:	46c0      	nop			@ (mov r8, r8)
 8025894:	200003ec 	.word	0x200003ec
 8025898:	20000280 	.word	0x20000280

0802589c <_strtol_l.isra.0>:
 802589c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802589e:	b085      	sub	sp, #20
 80258a0:	0017      	movs	r7, r2
 80258a2:	001e      	movs	r6, r3
 80258a4:	9003      	str	r0, [sp, #12]
 80258a6:	9101      	str	r1, [sp, #4]
 80258a8:	2b24      	cmp	r3, #36	@ 0x24
 80258aa:	d823      	bhi.n	80258f4 <_strtol_l.isra.0+0x58>
 80258ac:	000c      	movs	r4, r1
 80258ae:	2b01      	cmp	r3, #1
 80258b0:	d020      	beq.n	80258f4 <_strtol_l.isra.0+0x58>
 80258b2:	4b3d      	ldr	r3, [pc, #244]	@ (80259a8 <_strtol_l.isra.0+0x10c>)
 80258b4:	2208      	movs	r2, #8
 80258b6:	469c      	mov	ip, r3
 80258b8:	0023      	movs	r3, r4
 80258ba:	4661      	mov	r1, ip
 80258bc:	781d      	ldrb	r5, [r3, #0]
 80258be:	3401      	adds	r4, #1
 80258c0:	5d48      	ldrb	r0, [r1, r5]
 80258c2:	0001      	movs	r1, r0
 80258c4:	4011      	ands	r1, r2
 80258c6:	4210      	tst	r0, r2
 80258c8:	d1f6      	bne.n	80258b8 <_strtol_l.isra.0+0x1c>
 80258ca:	2d2d      	cmp	r5, #45	@ 0x2d
 80258cc:	d119      	bne.n	8025902 <_strtol_l.isra.0+0x66>
 80258ce:	7825      	ldrb	r5, [r4, #0]
 80258d0:	1c9c      	adds	r4, r3, #2
 80258d2:	2301      	movs	r3, #1
 80258d4:	9300      	str	r3, [sp, #0]
 80258d6:	2210      	movs	r2, #16
 80258d8:	0033      	movs	r3, r6
 80258da:	4393      	bics	r3, r2
 80258dc:	d11d      	bne.n	802591a <_strtol_l.isra.0+0x7e>
 80258de:	2d30      	cmp	r5, #48	@ 0x30
 80258e0:	d115      	bne.n	802590e <_strtol_l.isra.0+0x72>
 80258e2:	2120      	movs	r1, #32
 80258e4:	7823      	ldrb	r3, [r4, #0]
 80258e6:	438b      	bics	r3, r1
 80258e8:	2b58      	cmp	r3, #88	@ 0x58
 80258ea:	d110      	bne.n	802590e <_strtol_l.isra.0+0x72>
 80258ec:	7865      	ldrb	r5, [r4, #1]
 80258ee:	3402      	adds	r4, #2
 80258f0:	2610      	movs	r6, #16
 80258f2:	e012      	b.n	802591a <_strtol_l.isra.0+0x7e>
 80258f4:	f000 ffe8 	bl	80268c8 <__errno>
 80258f8:	2316      	movs	r3, #22
 80258fa:	6003      	str	r3, [r0, #0]
 80258fc:	2000      	movs	r0, #0
 80258fe:	b005      	add	sp, #20
 8025900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025902:	9100      	str	r1, [sp, #0]
 8025904:	2d2b      	cmp	r5, #43	@ 0x2b
 8025906:	d1e6      	bne.n	80258d6 <_strtol_l.isra.0+0x3a>
 8025908:	7825      	ldrb	r5, [r4, #0]
 802590a:	1c9c      	adds	r4, r3, #2
 802590c:	e7e3      	b.n	80258d6 <_strtol_l.isra.0+0x3a>
 802590e:	2e00      	cmp	r6, #0
 8025910:	d1ee      	bne.n	80258f0 <_strtol_l.isra.0+0x54>
 8025912:	360a      	adds	r6, #10
 8025914:	2d30      	cmp	r5, #48	@ 0x30
 8025916:	d100      	bne.n	802591a <_strtol_l.isra.0+0x7e>
 8025918:	3e02      	subs	r6, #2
 802591a:	4a24      	ldr	r2, [pc, #144]	@ (80259ac <_strtol_l.isra.0+0x110>)
 802591c:	9b00      	ldr	r3, [sp, #0]
 802591e:	4694      	mov	ip, r2
 8025920:	4463      	add	r3, ip
 8025922:	0031      	movs	r1, r6
 8025924:	0018      	movs	r0, r3
 8025926:	9302      	str	r3, [sp, #8]
 8025928:	f7da fcc2 	bl	80002b0 <__aeabi_uidivmod>
 802592c:	2200      	movs	r2, #0
 802592e:	4684      	mov	ip, r0
 8025930:	0010      	movs	r0, r2
 8025932:	002b      	movs	r3, r5
 8025934:	3b30      	subs	r3, #48	@ 0x30
 8025936:	2b09      	cmp	r3, #9
 8025938:	d811      	bhi.n	802595e <_strtol_l.isra.0+0xc2>
 802593a:	001d      	movs	r5, r3
 802593c:	42ae      	cmp	r6, r5
 802593e:	dd1d      	ble.n	802597c <_strtol_l.isra.0+0xe0>
 8025940:	1c53      	adds	r3, r2, #1
 8025942:	d009      	beq.n	8025958 <_strtol_l.isra.0+0xbc>
 8025944:	2201      	movs	r2, #1
 8025946:	4252      	negs	r2, r2
 8025948:	4584      	cmp	ip, r0
 802594a:	d305      	bcc.n	8025958 <_strtol_l.isra.0+0xbc>
 802594c:	d101      	bne.n	8025952 <_strtol_l.isra.0+0xb6>
 802594e:	42a9      	cmp	r1, r5
 8025950:	db11      	blt.n	8025976 <_strtol_l.isra.0+0xda>
 8025952:	2201      	movs	r2, #1
 8025954:	4370      	muls	r0, r6
 8025956:	1828      	adds	r0, r5, r0
 8025958:	7825      	ldrb	r5, [r4, #0]
 802595a:	3401      	adds	r4, #1
 802595c:	e7e9      	b.n	8025932 <_strtol_l.isra.0+0x96>
 802595e:	002b      	movs	r3, r5
 8025960:	3b41      	subs	r3, #65	@ 0x41
 8025962:	2b19      	cmp	r3, #25
 8025964:	d801      	bhi.n	802596a <_strtol_l.isra.0+0xce>
 8025966:	3d37      	subs	r5, #55	@ 0x37
 8025968:	e7e8      	b.n	802593c <_strtol_l.isra.0+0xa0>
 802596a:	002b      	movs	r3, r5
 802596c:	3b61      	subs	r3, #97	@ 0x61
 802596e:	2b19      	cmp	r3, #25
 8025970:	d804      	bhi.n	802597c <_strtol_l.isra.0+0xe0>
 8025972:	3d57      	subs	r5, #87	@ 0x57
 8025974:	e7e2      	b.n	802593c <_strtol_l.isra.0+0xa0>
 8025976:	2201      	movs	r2, #1
 8025978:	4252      	negs	r2, r2
 802597a:	e7ed      	b.n	8025958 <_strtol_l.isra.0+0xbc>
 802597c:	1c53      	adds	r3, r2, #1
 802597e:	d108      	bne.n	8025992 <_strtol_l.isra.0+0xf6>
 8025980:	2322      	movs	r3, #34	@ 0x22
 8025982:	9a03      	ldr	r2, [sp, #12]
 8025984:	9802      	ldr	r0, [sp, #8]
 8025986:	6013      	str	r3, [r2, #0]
 8025988:	2f00      	cmp	r7, #0
 802598a:	d0b8      	beq.n	80258fe <_strtol_l.isra.0+0x62>
 802598c:	1e63      	subs	r3, r4, #1
 802598e:	9301      	str	r3, [sp, #4]
 8025990:	e007      	b.n	80259a2 <_strtol_l.isra.0+0x106>
 8025992:	9b00      	ldr	r3, [sp, #0]
 8025994:	2b00      	cmp	r3, #0
 8025996:	d000      	beq.n	802599a <_strtol_l.isra.0+0xfe>
 8025998:	4240      	negs	r0, r0
 802599a:	2f00      	cmp	r7, #0
 802599c:	d0af      	beq.n	80258fe <_strtol_l.isra.0+0x62>
 802599e:	2a00      	cmp	r2, #0
 80259a0:	d1f4      	bne.n	802598c <_strtol_l.isra.0+0xf0>
 80259a2:	9b01      	ldr	r3, [sp, #4]
 80259a4:	603b      	str	r3, [r7, #0]
 80259a6:	e7aa      	b.n	80258fe <_strtol_l.isra.0+0x62>
 80259a8:	0802f031 	.word	0x0802f031
 80259ac:	7fffffff 	.word	0x7fffffff

080259b0 <strtol>:
 80259b0:	b510      	push	{r4, lr}
 80259b2:	4c04      	ldr	r4, [pc, #16]	@ (80259c4 <strtol+0x14>)
 80259b4:	0013      	movs	r3, r2
 80259b6:	000a      	movs	r2, r1
 80259b8:	0001      	movs	r1, r0
 80259ba:	6820      	ldr	r0, [r4, #0]
 80259bc:	f7ff ff6e 	bl	802589c <_strtol_l.isra.0>
 80259c0:	bd10      	pop	{r4, pc}
 80259c2:	46c0      	nop			@ (mov r8, r8)
 80259c4:	200003ec 	.word	0x200003ec

080259c8 <__cvt>:
 80259c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80259ca:	001f      	movs	r7, r3
 80259cc:	2300      	movs	r3, #0
 80259ce:	0016      	movs	r6, r2
 80259d0:	b08b      	sub	sp, #44	@ 0x2c
 80259d2:	429f      	cmp	r7, r3
 80259d4:	da04      	bge.n	80259e0 <__cvt+0x18>
 80259d6:	2180      	movs	r1, #128	@ 0x80
 80259d8:	0609      	lsls	r1, r1, #24
 80259da:	187b      	adds	r3, r7, r1
 80259dc:	001f      	movs	r7, r3
 80259de:	232d      	movs	r3, #45	@ 0x2d
 80259e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80259e2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80259e4:	7013      	strb	r3, [r2, #0]
 80259e6:	2320      	movs	r3, #32
 80259e8:	2203      	movs	r2, #3
 80259ea:	439d      	bics	r5, r3
 80259ec:	2d46      	cmp	r5, #70	@ 0x46
 80259ee:	d007      	beq.n	8025a00 <__cvt+0x38>
 80259f0:	002b      	movs	r3, r5
 80259f2:	3b45      	subs	r3, #69	@ 0x45
 80259f4:	4259      	negs	r1, r3
 80259f6:	414b      	adcs	r3, r1
 80259f8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80259fa:	3a01      	subs	r2, #1
 80259fc:	18cb      	adds	r3, r1, r3
 80259fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8025a00:	ab09      	add	r3, sp, #36	@ 0x24
 8025a02:	9304      	str	r3, [sp, #16]
 8025a04:	ab08      	add	r3, sp, #32
 8025a06:	9303      	str	r3, [sp, #12]
 8025a08:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025a0a:	9200      	str	r2, [sp, #0]
 8025a0c:	9302      	str	r3, [sp, #8]
 8025a0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025a10:	0032      	movs	r2, r6
 8025a12:	9301      	str	r3, [sp, #4]
 8025a14:	003b      	movs	r3, r7
 8025a16:	f001 f825 	bl	8026a64 <_dtoa_r>
 8025a1a:	0004      	movs	r4, r0
 8025a1c:	2d47      	cmp	r5, #71	@ 0x47
 8025a1e:	d11b      	bne.n	8025a58 <__cvt+0x90>
 8025a20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025a22:	07db      	lsls	r3, r3, #31
 8025a24:	d511      	bpl.n	8025a4a <__cvt+0x82>
 8025a26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025a28:	18c3      	adds	r3, r0, r3
 8025a2a:	9307      	str	r3, [sp, #28]
 8025a2c:	2200      	movs	r2, #0
 8025a2e:	2300      	movs	r3, #0
 8025a30:	0030      	movs	r0, r6
 8025a32:	0039      	movs	r1, r7
 8025a34:	f7da fd3c 	bl	80004b0 <__aeabi_dcmpeq>
 8025a38:	2800      	cmp	r0, #0
 8025a3a:	d001      	beq.n	8025a40 <__cvt+0x78>
 8025a3c:	9b07      	ldr	r3, [sp, #28]
 8025a3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8025a40:	2230      	movs	r2, #48	@ 0x30
 8025a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025a44:	9907      	ldr	r1, [sp, #28]
 8025a46:	428b      	cmp	r3, r1
 8025a48:	d320      	bcc.n	8025a8c <__cvt+0xc4>
 8025a4a:	0020      	movs	r0, r4
 8025a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025a4e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025a50:	1b1b      	subs	r3, r3, r4
 8025a52:	6013      	str	r3, [r2, #0]
 8025a54:	b00b      	add	sp, #44	@ 0x2c
 8025a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025a58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025a5a:	18c3      	adds	r3, r0, r3
 8025a5c:	9307      	str	r3, [sp, #28]
 8025a5e:	2d46      	cmp	r5, #70	@ 0x46
 8025a60:	d1e4      	bne.n	8025a2c <__cvt+0x64>
 8025a62:	7803      	ldrb	r3, [r0, #0]
 8025a64:	2b30      	cmp	r3, #48	@ 0x30
 8025a66:	d10c      	bne.n	8025a82 <__cvt+0xba>
 8025a68:	2200      	movs	r2, #0
 8025a6a:	2300      	movs	r3, #0
 8025a6c:	0030      	movs	r0, r6
 8025a6e:	0039      	movs	r1, r7
 8025a70:	f7da fd1e 	bl	80004b0 <__aeabi_dcmpeq>
 8025a74:	2800      	cmp	r0, #0
 8025a76:	d104      	bne.n	8025a82 <__cvt+0xba>
 8025a78:	2301      	movs	r3, #1
 8025a7a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8025a7c:	1a9b      	subs	r3, r3, r2
 8025a7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025a80:	6013      	str	r3, [r2, #0]
 8025a82:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025a84:	9a07      	ldr	r2, [sp, #28]
 8025a86:	681b      	ldr	r3, [r3, #0]
 8025a88:	18d3      	adds	r3, r2, r3
 8025a8a:	e7ce      	b.n	8025a2a <__cvt+0x62>
 8025a8c:	1c59      	adds	r1, r3, #1
 8025a8e:	9109      	str	r1, [sp, #36]	@ 0x24
 8025a90:	701a      	strb	r2, [r3, #0]
 8025a92:	e7d6      	b.n	8025a42 <__cvt+0x7a>

08025a94 <__exponent>:
 8025a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025a96:	232b      	movs	r3, #43	@ 0x2b
 8025a98:	b085      	sub	sp, #20
 8025a9a:	0005      	movs	r5, r0
 8025a9c:	1e0c      	subs	r4, r1, #0
 8025a9e:	7002      	strb	r2, [r0, #0]
 8025aa0:	da01      	bge.n	8025aa6 <__exponent+0x12>
 8025aa2:	424c      	negs	r4, r1
 8025aa4:	3302      	adds	r3, #2
 8025aa6:	706b      	strb	r3, [r5, #1]
 8025aa8:	2c09      	cmp	r4, #9
 8025aaa:	dd2c      	ble.n	8025b06 <__exponent+0x72>
 8025aac:	ab02      	add	r3, sp, #8
 8025aae:	1dde      	adds	r6, r3, #7
 8025ab0:	0020      	movs	r0, r4
 8025ab2:	210a      	movs	r1, #10
 8025ab4:	f7da fce6 	bl	8000484 <__aeabi_idivmod>
 8025ab8:	0037      	movs	r7, r6
 8025aba:	3130      	adds	r1, #48	@ 0x30
 8025abc:	3e01      	subs	r6, #1
 8025abe:	0020      	movs	r0, r4
 8025ac0:	7031      	strb	r1, [r6, #0]
 8025ac2:	210a      	movs	r1, #10
 8025ac4:	9401      	str	r4, [sp, #4]
 8025ac6:	f7da fbf7 	bl	80002b8 <__divsi3>
 8025aca:	9b01      	ldr	r3, [sp, #4]
 8025acc:	0004      	movs	r4, r0
 8025ace:	2b63      	cmp	r3, #99	@ 0x63
 8025ad0:	dcee      	bgt.n	8025ab0 <__exponent+0x1c>
 8025ad2:	1eba      	subs	r2, r7, #2
 8025ad4:	1ca8      	adds	r0, r5, #2
 8025ad6:	0001      	movs	r1, r0
 8025ad8:	0013      	movs	r3, r2
 8025ada:	3430      	adds	r4, #48	@ 0x30
 8025adc:	7014      	strb	r4, [r2, #0]
 8025ade:	ac02      	add	r4, sp, #8
 8025ae0:	3407      	adds	r4, #7
 8025ae2:	429c      	cmp	r4, r3
 8025ae4:	d80a      	bhi.n	8025afc <__exponent+0x68>
 8025ae6:	2300      	movs	r3, #0
 8025ae8:	4294      	cmp	r4, r2
 8025aea:	d303      	bcc.n	8025af4 <__exponent+0x60>
 8025aec:	3309      	adds	r3, #9
 8025aee:	aa02      	add	r2, sp, #8
 8025af0:	189b      	adds	r3, r3, r2
 8025af2:	1bdb      	subs	r3, r3, r7
 8025af4:	18c0      	adds	r0, r0, r3
 8025af6:	1b40      	subs	r0, r0, r5
 8025af8:	b005      	add	sp, #20
 8025afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025afc:	781c      	ldrb	r4, [r3, #0]
 8025afe:	3301      	adds	r3, #1
 8025b00:	700c      	strb	r4, [r1, #0]
 8025b02:	3101      	adds	r1, #1
 8025b04:	e7eb      	b.n	8025ade <__exponent+0x4a>
 8025b06:	2330      	movs	r3, #48	@ 0x30
 8025b08:	18e4      	adds	r4, r4, r3
 8025b0a:	70ab      	strb	r3, [r5, #2]
 8025b0c:	1d28      	adds	r0, r5, #4
 8025b0e:	70ec      	strb	r4, [r5, #3]
 8025b10:	e7f1      	b.n	8025af6 <__exponent+0x62>
	...

08025b14 <_printf_float>:
 8025b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025b16:	b097      	sub	sp, #92	@ 0x5c
 8025b18:	000d      	movs	r5, r1
 8025b1a:	920a      	str	r2, [sp, #40]	@ 0x28
 8025b1c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8025b1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025b20:	9009      	str	r0, [sp, #36]	@ 0x24
 8025b22:	f000 fe7f 	bl	8026824 <_localeconv_r>
 8025b26:	6803      	ldr	r3, [r0, #0]
 8025b28:	0018      	movs	r0, r3
 8025b2a:	930d      	str	r3, [sp, #52]	@ 0x34
 8025b2c:	f7da fb1e 	bl	800016c <strlen>
 8025b30:	2300      	movs	r3, #0
 8025b32:	900f      	str	r0, [sp, #60]	@ 0x3c
 8025b34:	9314      	str	r3, [sp, #80]	@ 0x50
 8025b36:	7e2b      	ldrb	r3, [r5, #24]
 8025b38:	2207      	movs	r2, #7
 8025b3a:	930c      	str	r3, [sp, #48]	@ 0x30
 8025b3c:	682b      	ldr	r3, [r5, #0]
 8025b3e:	930e      	str	r3, [sp, #56]	@ 0x38
 8025b40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025b42:	6823      	ldr	r3, [r4, #0]
 8025b44:	05c9      	lsls	r1, r1, #23
 8025b46:	d545      	bpl.n	8025bd4 <_printf_float+0xc0>
 8025b48:	189b      	adds	r3, r3, r2
 8025b4a:	4393      	bics	r3, r2
 8025b4c:	001a      	movs	r2, r3
 8025b4e:	3208      	adds	r2, #8
 8025b50:	6022      	str	r2, [r4, #0]
 8025b52:	2201      	movs	r2, #1
 8025b54:	681e      	ldr	r6, [r3, #0]
 8025b56:	685f      	ldr	r7, [r3, #4]
 8025b58:	007b      	lsls	r3, r7, #1
 8025b5a:	085b      	lsrs	r3, r3, #1
 8025b5c:	9311      	str	r3, [sp, #68]	@ 0x44
 8025b5e:	9610      	str	r6, [sp, #64]	@ 0x40
 8025b60:	64ae      	str	r6, [r5, #72]	@ 0x48
 8025b62:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8025b64:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025b66:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025b68:	4ba7      	ldr	r3, [pc, #668]	@ (8025e08 <_printf_float+0x2f4>)
 8025b6a:	4252      	negs	r2, r2
 8025b6c:	f7dd fde2 	bl	8003734 <__aeabi_dcmpun>
 8025b70:	2800      	cmp	r0, #0
 8025b72:	d131      	bne.n	8025bd8 <_printf_float+0xc4>
 8025b74:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025b76:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025b78:	2201      	movs	r2, #1
 8025b7a:	4ba3      	ldr	r3, [pc, #652]	@ (8025e08 <_printf_float+0x2f4>)
 8025b7c:	4252      	negs	r2, r2
 8025b7e:	f7da fca7 	bl	80004d0 <__aeabi_dcmple>
 8025b82:	2800      	cmp	r0, #0
 8025b84:	d128      	bne.n	8025bd8 <_printf_float+0xc4>
 8025b86:	2200      	movs	r2, #0
 8025b88:	2300      	movs	r3, #0
 8025b8a:	0030      	movs	r0, r6
 8025b8c:	0039      	movs	r1, r7
 8025b8e:	f7da fc95 	bl	80004bc <__aeabi_dcmplt>
 8025b92:	2800      	cmp	r0, #0
 8025b94:	d003      	beq.n	8025b9e <_printf_float+0x8a>
 8025b96:	002b      	movs	r3, r5
 8025b98:	222d      	movs	r2, #45	@ 0x2d
 8025b9a:	3343      	adds	r3, #67	@ 0x43
 8025b9c:	701a      	strb	r2, [r3, #0]
 8025b9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025ba0:	4f9a      	ldr	r7, [pc, #616]	@ (8025e0c <_printf_float+0x2f8>)
 8025ba2:	2b47      	cmp	r3, #71	@ 0x47
 8025ba4:	d800      	bhi.n	8025ba8 <_printf_float+0x94>
 8025ba6:	4f9a      	ldr	r7, [pc, #616]	@ (8025e10 <_printf_float+0x2fc>)
 8025ba8:	2303      	movs	r3, #3
 8025baa:	2400      	movs	r4, #0
 8025bac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025bae:	612b      	str	r3, [r5, #16]
 8025bb0:	3301      	adds	r3, #1
 8025bb2:	439a      	bics	r2, r3
 8025bb4:	602a      	str	r2, [r5, #0]
 8025bb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025bb8:	0029      	movs	r1, r5
 8025bba:	9300      	str	r3, [sp, #0]
 8025bbc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025bbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025bc0:	aa15      	add	r2, sp, #84	@ 0x54
 8025bc2:	f000 f9e5 	bl	8025f90 <_printf_common>
 8025bc6:	3001      	adds	r0, #1
 8025bc8:	d000      	beq.n	8025bcc <_printf_float+0xb8>
 8025bca:	e09e      	b.n	8025d0a <_printf_float+0x1f6>
 8025bcc:	2001      	movs	r0, #1
 8025bce:	4240      	negs	r0, r0
 8025bd0:	b017      	add	sp, #92	@ 0x5c
 8025bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025bd4:	3307      	adds	r3, #7
 8025bd6:	e7b8      	b.n	8025b4a <_printf_float+0x36>
 8025bd8:	0032      	movs	r2, r6
 8025bda:	003b      	movs	r3, r7
 8025bdc:	0030      	movs	r0, r6
 8025bde:	0039      	movs	r1, r7
 8025be0:	f7dd fda8 	bl	8003734 <__aeabi_dcmpun>
 8025be4:	2800      	cmp	r0, #0
 8025be6:	d00b      	beq.n	8025c00 <_printf_float+0xec>
 8025be8:	2f00      	cmp	r7, #0
 8025bea:	da03      	bge.n	8025bf4 <_printf_float+0xe0>
 8025bec:	002b      	movs	r3, r5
 8025bee:	222d      	movs	r2, #45	@ 0x2d
 8025bf0:	3343      	adds	r3, #67	@ 0x43
 8025bf2:	701a      	strb	r2, [r3, #0]
 8025bf4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025bf6:	4f87      	ldr	r7, [pc, #540]	@ (8025e14 <_printf_float+0x300>)
 8025bf8:	2b47      	cmp	r3, #71	@ 0x47
 8025bfa:	d8d5      	bhi.n	8025ba8 <_printf_float+0x94>
 8025bfc:	4f86      	ldr	r7, [pc, #536]	@ (8025e18 <_printf_float+0x304>)
 8025bfe:	e7d3      	b.n	8025ba8 <_printf_float+0x94>
 8025c00:	2220      	movs	r2, #32
 8025c02:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025c04:	686b      	ldr	r3, [r5, #4]
 8025c06:	4394      	bics	r4, r2
 8025c08:	1c5a      	adds	r2, r3, #1
 8025c0a:	d146      	bne.n	8025c9a <_printf_float+0x186>
 8025c0c:	3307      	adds	r3, #7
 8025c0e:	606b      	str	r3, [r5, #4]
 8025c10:	2380      	movs	r3, #128	@ 0x80
 8025c12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025c14:	00db      	lsls	r3, r3, #3
 8025c16:	4313      	orrs	r3, r2
 8025c18:	2200      	movs	r2, #0
 8025c1a:	602b      	str	r3, [r5, #0]
 8025c1c:	9206      	str	r2, [sp, #24]
 8025c1e:	aa14      	add	r2, sp, #80	@ 0x50
 8025c20:	9205      	str	r2, [sp, #20]
 8025c22:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025c24:	a90a      	add	r1, sp, #40	@ 0x28
 8025c26:	9204      	str	r2, [sp, #16]
 8025c28:	aa13      	add	r2, sp, #76	@ 0x4c
 8025c2a:	9203      	str	r2, [sp, #12]
 8025c2c:	2223      	movs	r2, #35	@ 0x23
 8025c2e:	1852      	adds	r2, r2, r1
 8025c30:	9202      	str	r2, [sp, #8]
 8025c32:	9301      	str	r3, [sp, #4]
 8025c34:	686b      	ldr	r3, [r5, #4]
 8025c36:	0032      	movs	r2, r6
 8025c38:	9300      	str	r3, [sp, #0]
 8025c3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c3c:	003b      	movs	r3, r7
 8025c3e:	f7ff fec3 	bl	80259c8 <__cvt>
 8025c42:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025c44:	0007      	movs	r7, r0
 8025c46:	2c47      	cmp	r4, #71	@ 0x47
 8025c48:	d12d      	bne.n	8025ca6 <_printf_float+0x192>
 8025c4a:	1cd3      	adds	r3, r2, #3
 8025c4c:	db02      	blt.n	8025c54 <_printf_float+0x140>
 8025c4e:	686b      	ldr	r3, [r5, #4]
 8025c50:	429a      	cmp	r2, r3
 8025c52:	dd47      	ble.n	8025ce4 <_printf_float+0x1d0>
 8025c54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025c56:	3b02      	subs	r3, #2
 8025c58:	b2db      	uxtb	r3, r3
 8025c5a:	930c      	str	r3, [sp, #48]	@ 0x30
 8025c5c:	0028      	movs	r0, r5
 8025c5e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025c60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025c62:	3901      	subs	r1, #1
 8025c64:	3050      	adds	r0, #80	@ 0x50
 8025c66:	9113      	str	r1, [sp, #76]	@ 0x4c
 8025c68:	f7ff ff14 	bl	8025a94 <__exponent>
 8025c6c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025c6e:	0004      	movs	r4, r0
 8025c70:	1813      	adds	r3, r2, r0
 8025c72:	612b      	str	r3, [r5, #16]
 8025c74:	2a01      	cmp	r2, #1
 8025c76:	dc02      	bgt.n	8025c7e <_printf_float+0x16a>
 8025c78:	682a      	ldr	r2, [r5, #0]
 8025c7a:	07d2      	lsls	r2, r2, #31
 8025c7c:	d501      	bpl.n	8025c82 <_printf_float+0x16e>
 8025c7e:	3301      	adds	r3, #1
 8025c80:	612b      	str	r3, [r5, #16]
 8025c82:	2323      	movs	r3, #35	@ 0x23
 8025c84:	aa0a      	add	r2, sp, #40	@ 0x28
 8025c86:	189b      	adds	r3, r3, r2
 8025c88:	781b      	ldrb	r3, [r3, #0]
 8025c8a:	2b00      	cmp	r3, #0
 8025c8c:	d100      	bne.n	8025c90 <_printf_float+0x17c>
 8025c8e:	e792      	b.n	8025bb6 <_printf_float+0xa2>
 8025c90:	002b      	movs	r3, r5
 8025c92:	222d      	movs	r2, #45	@ 0x2d
 8025c94:	3343      	adds	r3, #67	@ 0x43
 8025c96:	701a      	strb	r2, [r3, #0]
 8025c98:	e78d      	b.n	8025bb6 <_printf_float+0xa2>
 8025c9a:	2c47      	cmp	r4, #71	@ 0x47
 8025c9c:	d1b8      	bne.n	8025c10 <_printf_float+0xfc>
 8025c9e:	2b00      	cmp	r3, #0
 8025ca0:	d1b6      	bne.n	8025c10 <_printf_float+0xfc>
 8025ca2:	3301      	adds	r3, #1
 8025ca4:	e7b3      	b.n	8025c0e <_printf_float+0xfa>
 8025ca6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025ca8:	2b65      	cmp	r3, #101	@ 0x65
 8025caa:	d9d7      	bls.n	8025c5c <_printf_float+0x148>
 8025cac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025cae:	2b66      	cmp	r3, #102	@ 0x66
 8025cb0:	d11a      	bne.n	8025ce8 <_printf_float+0x1d4>
 8025cb2:	686b      	ldr	r3, [r5, #4]
 8025cb4:	2a00      	cmp	r2, #0
 8025cb6:	dd09      	ble.n	8025ccc <_printf_float+0x1b8>
 8025cb8:	612a      	str	r2, [r5, #16]
 8025cba:	2b00      	cmp	r3, #0
 8025cbc:	d102      	bne.n	8025cc4 <_printf_float+0x1b0>
 8025cbe:	6829      	ldr	r1, [r5, #0]
 8025cc0:	07c9      	lsls	r1, r1, #31
 8025cc2:	d50b      	bpl.n	8025cdc <_printf_float+0x1c8>
 8025cc4:	3301      	adds	r3, #1
 8025cc6:	189b      	adds	r3, r3, r2
 8025cc8:	612b      	str	r3, [r5, #16]
 8025cca:	e007      	b.n	8025cdc <_printf_float+0x1c8>
 8025ccc:	2b00      	cmp	r3, #0
 8025cce:	d103      	bne.n	8025cd8 <_printf_float+0x1c4>
 8025cd0:	2201      	movs	r2, #1
 8025cd2:	6829      	ldr	r1, [r5, #0]
 8025cd4:	4211      	tst	r1, r2
 8025cd6:	d000      	beq.n	8025cda <_printf_float+0x1c6>
 8025cd8:	1c9a      	adds	r2, r3, #2
 8025cda:	612a      	str	r2, [r5, #16]
 8025cdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025cde:	2400      	movs	r4, #0
 8025ce0:	65ab      	str	r3, [r5, #88]	@ 0x58
 8025ce2:	e7ce      	b.n	8025c82 <_printf_float+0x16e>
 8025ce4:	2367      	movs	r3, #103	@ 0x67
 8025ce6:	930c      	str	r3, [sp, #48]	@ 0x30
 8025ce8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025cea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025cec:	4299      	cmp	r1, r3
 8025cee:	db06      	blt.n	8025cfe <_printf_float+0x1ea>
 8025cf0:	682b      	ldr	r3, [r5, #0]
 8025cf2:	6129      	str	r1, [r5, #16]
 8025cf4:	07db      	lsls	r3, r3, #31
 8025cf6:	d5f1      	bpl.n	8025cdc <_printf_float+0x1c8>
 8025cf8:	3101      	adds	r1, #1
 8025cfa:	6129      	str	r1, [r5, #16]
 8025cfc:	e7ee      	b.n	8025cdc <_printf_float+0x1c8>
 8025cfe:	2201      	movs	r2, #1
 8025d00:	2900      	cmp	r1, #0
 8025d02:	dce0      	bgt.n	8025cc6 <_printf_float+0x1b2>
 8025d04:	1892      	adds	r2, r2, r2
 8025d06:	1a52      	subs	r2, r2, r1
 8025d08:	e7dd      	b.n	8025cc6 <_printf_float+0x1b2>
 8025d0a:	682a      	ldr	r2, [r5, #0]
 8025d0c:	0553      	lsls	r3, r2, #21
 8025d0e:	d408      	bmi.n	8025d22 <_printf_float+0x20e>
 8025d10:	692b      	ldr	r3, [r5, #16]
 8025d12:	003a      	movs	r2, r7
 8025d14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025d16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025d18:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025d1a:	47a0      	blx	r4
 8025d1c:	3001      	adds	r0, #1
 8025d1e:	d129      	bne.n	8025d74 <_printf_float+0x260>
 8025d20:	e754      	b.n	8025bcc <_printf_float+0xb8>
 8025d22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025d24:	2b65      	cmp	r3, #101	@ 0x65
 8025d26:	d800      	bhi.n	8025d2a <_printf_float+0x216>
 8025d28:	e0db      	b.n	8025ee2 <_printf_float+0x3ce>
 8025d2a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025d2c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025d2e:	2200      	movs	r2, #0
 8025d30:	2300      	movs	r3, #0
 8025d32:	f7da fbbd 	bl	80004b0 <__aeabi_dcmpeq>
 8025d36:	2800      	cmp	r0, #0
 8025d38:	d033      	beq.n	8025da2 <_printf_float+0x28e>
 8025d3a:	2301      	movs	r3, #1
 8025d3c:	4a37      	ldr	r2, [pc, #220]	@ (8025e1c <_printf_float+0x308>)
 8025d3e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025d40:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025d42:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025d44:	47a0      	blx	r4
 8025d46:	3001      	adds	r0, #1
 8025d48:	d100      	bne.n	8025d4c <_printf_float+0x238>
 8025d4a:	e73f      	b.n	8025bcc <_printf_float+0xb8>
 8025d4c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025d4e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025d50:	42b3      	cmp	r3, r6
 8025d52:	db02      	blt.n	8025d5a <_printf_float+0x246>
 8025d54:	682b      	ldr	r3, [r5, #0]
 8025d56:	07db      	lsls	r3, r3, #31
 8025d58:	d50c      	bpl.n	8025d74 <_printf_float+0x260>
 8025d5a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025d5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025d5e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025d60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025d62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025d64:	47a0      	blx	r4
 8025d66:	2400      	movs	r4, #0
 8025d68:	3001      	adds	r0, #1
 8025d6a:	d100      	bne.n	8025d6e <_printf_float+0x25a>
 8025d6c:	e72e      	b.n	8025bcc <_printf_float+0xb8>
 8025d6e:	1e73      	subs	r3, r6, #1
 8025d70:	42a3      	cmp	r3, r4
 8025d72:	dc0a      	bgt.n	8025d8a <_printf_float+0x276>
 8025d74:	682b      	ldr	r3, [r5, #0]
 8025d76:	079b      	lsls	r3, r3, #30
 8025d78:	d500      	bpl.n	8025d7c <_printf_float+0x268>
 8025d7a:	e106      	b.n	8025f8a <_printf_float+0x476>
 8025d7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025d7e:	68e8      	ldr	r0, [r5, #12]
 8025d80:	4298      	cmp	r0, r3
 8025d82:	db00      	blt.n	8025d86 <_printf_float+0x272>
 8025d84:	e724      	b.n	8025bd0 <_printf_float+0xbc>
 8025d86:	0018      	movs	r0, r3
 8025d88:	e722      	b.n	8025bd0 <_printf_float+0xbc>
 8025d8a:	002a      	movs	r2, r5
 8025d8c:	2301      	movs	r3, #1
 8025d8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025d90:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025d92:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025d94:	321a      	adds	r2, #26
 8025d96:	47b8      	blx	r7
 8025d98:	3001      	adds	r0, #1
 8025d9a:	d100      	bne.n	8025d9e <_printf_float+0x28a>
 8025d9c:	e716      	b.n	8025bcc <_printf_float+0xb8>
 8025d9e:	3401      	adds	r4, #1
 8025da0:	e7e5      	b.n	8025d6e <_printf_float+0x25a>
 8025da2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025da4:	2b00      	cmp	r3, #0
 8025da6:	dc3b      	bgt.n	8025e20 <_printf_float+0x30c>
 8025da8:	2301      	movs	r3, #1
 8025daa:	4a1c      	ldr	r2, [pc, #112]	@ (8025e1c <_printf_float+0x308>)
 8025dac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025dae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025db0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025db2:	47a0      	blx	r4
 8025db4:	3001      	adds	r0, #1
 8025db6:	d100      	bne.n	8025dba <_printf_float+0x2a6>
 8025db8:	e708      	b.n	8025bcc <_printf_float+0xb8>
 8025dba:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025dbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025dbe:	4333      	orrs	r3, r6
 8025dc0:	d102      	bne.n	8025dc8 <_printf_float+0x2b4>
 8025dc2:	682b      	ldr	r3, [r5, #0]
 8025dc4:	07db      	lsls	r3, r3, #31
 8025dc6:	d5d5      	bpl.n	8025d74 <_printf_float+0x260>
 8025dc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025dca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025dcc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025dce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025dd0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025dd2:	47a0      	blx	r4
 8025dd4:	2300      	movs	r3, #0
 8025dd6:	3001      	adds	r0, #1
 8025dd8:	d100      	bne.n	8025ddc <_printf_float+0x2c8>
 8025dda:	e6f7      	b.n	8025bcc <_printf_float+0xb8>
 8025ddc:	930c      	str	r3, [sp, #48]	@ 0x30
 8025dde:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025de0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025de2:	425b      	negs	r3, r3
 8025de4:	4293      	cmp	r3, r2
 8025de6:	dc01      	bgt.n	8025dec <_printf_float+0x2d8>
 8025de8:	0033      	movs	r3, r6
 8025dea:	e792      	b.n	8025d12 <_printf_float+0x1fe>
 8025dec:	002a      	movs	r2, r5
 8025dee:	2301      	movs	r3, #1
 8025df0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025df2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025df4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025df6:	321a      	adds	r2, #26
 8025df8:	47a0      	blx	r4
 8025dfa:	3001      	adds	r0, #1
 8025dfc:	d100      	bne.n	8025e00 <_printf_float+0x2ec>
 8025dfe:	e6e5      	b.n	8025bcc <_printf_float+0xb8>
 8025e00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025e02:	3301      	adds	r3, #1
 8025e04:	e7ea      	b.n	8025ddc <_printf_float+0x2c8>
 8025e06:	46c0      	nop			@ (mov r8, r8)
 8025e08:	7fefffff 	.word	0x7fefffff
 8025e0c:	0802ee0e 	.word	0x0802ee0e
 8025e10:	0802ee0a 	.word	0x0802ee0a
 8025e14:	0802ee16 	.word	0x0802ee16
 8025e18:	0802ee12 	.word	0x0802ee12
 8025e1c:	0802ee1a 	.word	0x0802ee1a
 8025e20:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025e22:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025e24:	930c      	str	r3, [sp, #48]	@ 0x30
 8025e26:	429e      	cmp	r6, r3
 8025e28:	dd00      	ble.n	8025e2c <_printf_float+0x318>
 8025e2a:	001e      	movs	r6, r3
 8025e2c:	2e00      	cmp	r6, #0
 8025e2e:	dc31      	bgt.n	8025e94 <_printf_float+0x380>
 8025e30:	43f3      	mvns	r3, r6
 8025e32:	2400      	movs	r4, #0
 8025e34:	17db      	asrs	r3, r3, #31
 8025e36:	4033      	ands	r3, r6
 8025e38:	930e      	str	r3, [sp, #56]	@ 0x38
 8025e3a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025e3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025e3e:	1af3      	subs	r3, r6, r3
 8025e40:	42a3      	cmp	r3, r4
 8025e42:	dc30      	bgt.n	8025ea6 <_printf_float+0x392>
 8025e44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025e46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025e48:	429a      	cmp	r2, r3
 8025e4a:	dc38      	bgt.n	8025ebe <_printf_float+0x3aa>
 8025e4c:	682b      	ldr	r3, [r5, #0]
 8025e4e:	07db      	lsls	r3, r3, #31
 8025e50:	d435      	bmi.n	8025ebe <_printf_float+0x3aa>
 8025e52:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025e54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025e56:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025e58:	1b9b      	subs	r3, r3, r6
 8025e5a:	1b14      	subs	r4, r2, r4
 8025e5c:	429c      	cmp	r4, r3
 8025e5e:	dd00      	ble.n	8025e62 <_printf_float+0x34e>
 8025e60:	001c      	movs	r4, r3
 8025e62:	2c00      	cmp	r4, #0
 8025e64:	dc34      	bgt.n	8025ed0 <_printf_float+0x3bc>
 8025e66:	43e3      	mvns	r3, r4
 8025e68:	2600      	movs	r6, #0
 8025e6a:	17db      	asrs	r3, r3, #31
 8025e6c:	401c      	ands	r4, r3
 8025e6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025e70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025e72:	1ad3      	subs	r3, r2, r3
 8025e74:	1b1b      	subs	r3, r3, r4
 8025e76:	42b3      	cmp	r3, r6
 8025e78:	dc00      	bgt.n	8025e7c <_printf_float+0x368>
 8025e7a:	e77b      	b.n	8025d74 <_printf_float+0x260>
 8025e7c:	002a      	movs	r2, r5
 8025e7e:	2301      	movs	r3, #1
 8025e80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025e82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025e84:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025e86:	321a      	adds	r2, #26
 8025e88:	47b8      	blx	r7
 8025e8a:	3001      	adds	r0, #1
 8025e8c:	d100      	bne.n	8025e90 <_printf_float+0x37c>
 8025e8e:	e69d      	b.n	8025bcc <_printf_float+0xb8>
 8025e90:	3601      	adds	r6, #1
 8025e92:	e7ec      	b.n	8025e6e <_printf_float+0x35a>
 8025e94:	0033      	movs	r3, r6
 8025e96:	003a      	movs	r2, r7
 8025e98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025e9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025e9c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025e9e:	47a0      	blx	r4
 8025ea0:	3001      	adds	r0, #1
 8025ea2:	d1c5      	bne.n	8025e30 <_printf_float+0x31c>
 8025ea4:	e692      	b.n	8025bcc <_printf_float+0xb8>
 8025ea6:	002a      	movs	r2, r5
 8025ea8:	2301      	movs	r3, #1
 8025eaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025eac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025eae:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025eb0:	321a      	adds	r2, #26
 8025eb2:	47b0      	blx	r6
 8025eb4:	3001      	adds	r0, #1
 8025eb6:	d100      	bne.n	8025eba <_printf_float+0x3a6>
 8025eb8:	e688      	b.n	8025bcc <_printf_float+0xb8>
 8025eba:	3401      	adds	r4, #1
 8025ebc:	e7bd      	b.n	8025e3a <_printf_float+0x326>
 8025ebe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025ec0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025ec2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025ec4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025ec6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025ec8:	47a0      	blx	r4
 8025eca:	3001      	adds	r0, #1
 8025ecc:	d1c1      	bne.n	8025e52 <_printf_float+0x33e>
 8025ece:	e67d      	b.n	8025bcc <_printf_float+0xb8>
 8025ed0:	19ba      	adds	r2, r7, r6
 8025ed2:	0023      	movs	r3, r4
 8025ed4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025ed8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025eda:	47b0      	blx	r6
 8025edc:	3001      	adds	r0, #1
 8025ede:	d1c2      	bne.n	8025e66 <_printf_float+0x352>
 8025ee0:	e674      	b.n	8025bcc <_printf_float+0xb8>
 8025ee2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025ee4:	930c      	str	r3, [sp, #48]	@ 0x30
 8025ee6:	2b01      	cmp	r3, #1
 8025ee8:	dc02      	bgt.n	8025ef0 <_printf_float+0x3dc>
 8025eea:	2301      	movs	r3, #1
 8025eec:	421a      	tst	r2, r3
 8025eee:	d039      	beq.n	8025f64 <_printf_float+0x450>
 8025ef0:	2301      	movs	r3, #1
 8025ef2:	003a      	movs	r2, r7
 8025ef4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025ef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025ef8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025efa:	47b0      	blx	r6
 8025efc:	3001      	adds	r0, #1
 8025efe:	d100      	bne.n	8025f02 <_printf_float+0x3ee>
 8025f00:	e664      	b.n	8025bcc <_printf_float+0xb8>
 8025f02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025f04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025f06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025f08:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025f0a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025f0c:	47b0      	blx	r6
 8025f0e:	3001      	adds	r0, #1
 8025f10:	d100      	bne.n	8025f14 <_printf_float+0x400>
 8025f12:	e65b      	b.n	8025bcc <_printf_float+0xb8>
 8025f14:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025f16:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025f18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025f1a:	2200      	movs	r2, #0
 8025f1c:	3b01      	subs	r3, #1
 8025f1e:	930c      	str	r3, [sp, #48]	@ 0x30
 8025f20:	2300      	movs	r3, #0
 8025f22:	f7da fac5 	bl	80004b0 <__aeabi_dcmpeq>
 8025f26:	2800      	cmp	r0, #0
 8025f28:	d11a      	bne.n	8025f60 <_printf_float+0x44c>
 8025f2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025f2c:	1c7a      	adds	r2, r7, #1
 8025f2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025f30:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025f32:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025f34:	47b0      	blx	r6
 8025f36:	3001      	adds	r0, #1
 8025f38:	d10e      	bne.n	8025f58 <_printf_float+0x444>
 8025f3a:	e647      	b.n	8025bcc <_printf_float+0xb8>
 8025f3c:	002a      	movs	r2, r5
 8025f3e:	2301      	movs	r3, #1
 8025f40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025f42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025f44:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025f46:	321a      	adds	r2, #26
 8025f48:	47b8      	blx	r7
 8025f4a:	3001      	adds	r0, #1
 8025f4c:	d100      	bne.n	8025f50 <_printf_float+0x43c>
 8025f4e:	e63d      	b.n	8025bcc <_printf_float+0xb8>
 8025f50:	3601      	adds	r6, #1
 8025f52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025f54:	429e      	cmp	r6, r3
 8025f56:	dbf1      	blt.n	8025f3c <_printf_float+0x428>
 8025f58:	002a      	movs	r2, r5
 8025f5a:	0023      	movs	r3, r4
 8025f5c:	3250      	adds	r2, #80	@ 0x50
 8025f5e:	e6d9      	b.n	8025d14 <_printf_float+0x200>
 8025f60:	2600      	movs	r6, #0
 8025f62:	e7f6      	b.n	8025f52 <_printf_float+0x43e>
 8025f64:	003a      	movs	r2, r7
 8025f66:	e7e2      	b.n	8025f2e <_printf_float+0x41a>
 8025f68:	002a      	movs	r2, r5
 8025f6a:	2301      	movs	r3, #1
 8025f6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025f6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025f70:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025f72:	3219      	adds	r2, #25
 8025f74:	47b0      	blx	r6
 8025f76:	3001      	adds	r0, #1
 8025f78:	d100      	bne.n	8025f7c <_printf_float+0x468>
 8025f7a:	e627      	b.n	8025bcc <_printf_float+0xb8>
 8025f7c:	3401      	adds	r4, #1
 8025f7e:	68eb      	ldr	r3, [r5, #12]
 8025f80:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025f82:	1a9b      	subs	r3, r3, r2
 8025f84:	42a3      	cmp	r3, r4
 8025f86:	dcef      	bgt.n	8025f68 <_printf_float+0x454>
 8025f88:	e6f8      	b.n	8025d7c <_printf_float+0x268>
 8025f8a:	2400      	movs	r4, #0
 8025f8c:	e7f7      	b.n	8025f7e <_printf_float+0x46a>
 8025f8e:	46c0      	nop			@ (mov r8, r8)

08025f90 <_printf_common>:
 8025f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025f92:	0016      	movs	r6, r2
 8025f94:	9301      	str	r3, [sp, #4]
 8025f96:	688a      	ldr	r2, [r1, #8]
 8025f98:	690b      	ldr	r3, [r1, #16]
 8025f9a:	000c      	movs	r4, r1
 8025f9c:	9000      	str	r0, [sp, #0]
 8025f9e:	4293      	cmp	r3, r2
 8025fa0:	da00      	bge.n	8025fa4 <_printf_common+0x14>
 8025fa2:	0013      	movs	r3, r2
 8025fa4:	0022      	movs	r2, r4
 8025fa6:	6033      	str	r3, [r6, #0]
 8025fa8:	3243      	adds	r2, #67	@ 0x43
 8025faa:	7812      	ldrb	r2, [r2, #0]
 8025fac:	2a00      	cmp	r2, #0
 8025fae:	d001      	beq.n	8025fb4 <_printf_common+0x24>
 8025fb0:	3301      	adds	r3, #1
 8025fb2:	6033      	str	r3, [r6, #0]
 8025fb4:	6823      	ldr	r3, [r4, #0]
 8025fb6:	069b      	lsls	r3, r3, #26
 8025fb8:	d502      	bpl.n	8025fc0 <_printf_common+0x30>
 8025fba:	6833      	ldr	r3, [r6, #0]
 8025fbc:	3302      	adds	r3, #2
 8025fbe:	6033      	str	r3, [r6, #0]
 8025fc0:	6822      	ldr	r2, [r4, #0]
 8025fc2:	2306      	movs	r3, #6
 8025fc4:	0015      	movs	r5, r2
 8025fc6:	401d      	ands	r5, r3
 8025fc8:	421a      	tst	r2, r3
 8025fca:	d027      	beq.n	802601c <_printf_common+0x8c>
 8025fcc:	0023      	movs	r3, r4
 8025fce:	3343      	adds	r3, #67	@ 0x43
 8025fd0:	781b      	ldrb	r3, [r3, #0]
 8025fd2:	1e5a      	subs	r2, r3, #1
 8025fd4:	4193      	sbcs	r3, r2
 8025fd6:	6822      	ldr	r2, [r4, #0]
 8025fd8:	0692      	lsls	r2, r2, #26
 8025fda:	d430      	bmi.n	802603e <_printf_common+0xae>
 8025fdc:	0022      	movs	r2, r4
 8025fde:	9901      	ldr	r1, [sp, #4]
 8025fe0:	9800      	ldr	r0, [sp, #0]
 8025fe2:	9d08      	ldr	r5, [sp, #32]
 8025fe4:	3243      	adds	r2, #67	@ 0x43
 8025fe6:	47a8      	blx	r5
 8025fe8:	3001      	adds	r0, #1
 8025fea:	d025      	beq.n	8026038 <_printf_common+0xa8>
 8025fec:	2206      	movs	r2, #6
 8025fee:	6823      	ldr	r3, [r4, #0]
 8025ff0:	2500      	movs	r5, #0
 8025ff2:	4013      	ands	r3, r2
 8025ff4:	2b04      	cmp	r3, #4
 8025ff6:	d105      	bne.n	8026004 <_printf_common+0x74>
 8025ff8:	6833      	ldr	r3, [r6, #0]
 8025ffa:	68e5      	ldr	r5, [r4, #12]
 8025ffc:	1aed      	subs	r5, r5, r3
 8025ffe:	43eb      	mvns	r3, r5
 8026000:	17db      	asrs	r3, r3, #31
 8026002:	401d      	ands	r5, r3
 8026004:	68a3      	ldr	r3, [r4, #8]
 8026006:	6922      	ldr	r2, [r4, #16]
 8026008:	4293      	cmp	r3, r2
 802600a:	dd01      	ble.n	8026010 <_printf_common+0x80>
 802600c:	1a9b      	subs	r3, r3, r2
 802600e:	18ed      	adds	r5, r5, r3
 8026010:	2600      	movs	r6, #0
 8026012:	42b5      	cmp	r5, r6
 8026014:	d120      	bne.n	8026058 <_printf_common+0xc8>
 8026016:	2000      	movs	r0, #0
 8026018:	e010      	b.n	802603c <_printf_common+0xac>
 802601a:	3501      	adds	r5, #1
 802601c:	68e3      	ldr	r3, [r4, #12]
 802601e:	6832      	ldr	r2, [r6, #0]
 8026020:	1a9b      	subs	r3, r3, r2
 8026022:	42ab      	cmp	r3, r5
 8026024:	ddd2      	ble.n	8025fcc <_printf_common+0x3c>
 8026026:	0022      	movs	r2, r4
 8026028:	2301      	movs	r3, #1
 802602a:	9901      	ldr	r1, [sp, #4]
 802602c:	9800      	ldr	r0, [sp, #0]
 802602e:	9f08      	ldr	r7, [sp, #32]
 8026030:	3219      	adds	r2, #25
 8026032:	47b8      	blx	r7
 8026034:	3001      	adds	r0, #1
 8026036:	d1f0      	bne.n	802601a <_printf_common+0x8a>
 8026038:	2001      	movs	r0, #1
 802603a:	4240      	negs	r0, r0
 802603c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802603e:	2030      	movs	r0, #48	@ 0x30
 8026040:	18e1      	adds	r1, r4, r3
 8026042:	3143      	adds	r1, #67	@ 0x43
 8026044:	7008      	strb	r0, [r1, #0]
 8026046:	0021      	movs	r1, r4
 8026048:	1c5a      	adds	r2, r3, #1
 802604a:	3145      	adds	r1, #69	@ 0x45
 802604c:	7809      	ldrb	r1, [r1, #0]
 802604e:	18a2      	adds	r2, r4, r2
 8026050:	3243      	adds	r2, #67	@ 0x43
 8026052:	3302      	adds	r3, #2
 8026054:	7011      	strb	r1, [r2, #0]
 8026056:	e7c1      	b.n	8025fdc <_printf_common+0x4c>
 8026058:	0022      	movs	r2, r4
 802605a:	2301      	movs	r3, #1
 802605c:	9901      	ldr	r1, [sp, #4]
 802605e:	9800      	ldr	r0, [sp, #0]
 8026060:	9f08      	ldr	r7, [sp, #32]
 8026062:	321a      	adds	r2, #26
 8026064:	47b8      	blx	r7
 8026066:	3001      	adds	r0, #1
 8026068:	d0e6      	beq.n	8026038 <_printf_common+0xa8>
 802606a:	3601      	adds	r6, #1
 802606c:	e7d1      	b.n	8026012 <_printf_common+0x82>
	...

08026070 <_printf_i>:
 8026070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026072:	b08b      	sub	sp, #44	@ 0x2c
 8026074:	9206      	str	r2, [sp, #24]
 8026076:	000a      	movs	r2, r1
 8026078:	3243      	adds	r2, #67	@ 0x43
 802607a:	9307      	str	r3, [sp, #28]
 802607c:	9005      	str	r0, [sp, #20]
 802607e:	9203      	str	r2, [sp, #12]
 8026080:	7e0a      	ldrb	r2, [r1, #24]
 8026082:	000c      	movs	r4, r1
 8026084:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026086:	2a78      	cmp	r2, #120	@ 0x78
 8026088:	d809      	bhi.n	802609e <_printf_i+0x2e>
 802608a:	2a62      	cmp	r2, #98	@ 0x62
 802608c:	d80b      	bhi.n	80260a6 <_printf_i+0x36>
 802608e:	2a00      	cmp	r2, #0
 8026090:	d100      	bne.n	8026094 <_printf_i+0x24>
 8026092:	e0ba      	b.n	802620a <_printf_i+0x19a>
 8026094:	497a      	ldr	r1, [pc, #488]	@ (8026280 <_printf_i+0x210>)
 8026096:	9104      	str	r1, [sp, #16]
 8026098:	2a58      	cmp	r2, #88	@ 0x58
 802609a:	d100      	bne.n	802609e <_printf_i+0x2e>
 802609c:	e08e      	b.n	80261bc <_printf_i+0x14c>
 802609e:	0025      	movs	r5, r4
 80260a0:	3542      	adds	r5, #66	@ 0x42
 80260a2:	702a      	strb	r2, [r5, #0]
 80260a4:	e022      	b.n	80260ec <_printf_i+0x7c>
 80260a6:	0010      	movs	r0, r2
 80260a8:	3863      	subs	r0, #99	@ 0x63
 80260aa:	2815      	cmp	r0, #21
 80260ac:	d8f7      	bhi.n	802609e <_printf_i+0x2e>
 80260ae:	f7da f86f 	bl	8000190 <__gnu_thumb1_case_shi>
 80260b2:	0016      	.short	0x0016
 80260b4:	fff6001f 	.word	0xfff6001f
 80260b8:	fff6fff6 	.word	0xfff6fff6
 80260bc:	001ffff6 	.word	0x001ffff6
 80260c0:	fff6fff6 	.word	0xfff6fff6
 80260c4:	fff6fff6 	.word	0xfff6fff6
 80260c8:	0036009f 	.word	0x0036009f
 80260cc:	fff6007e 	.word	0xfff6007e
 80260d0:	00b0fff6 	.word	0x00b0fff6
 80260d4:	0036fff6 	.word	0x0036fff6
 80260d8:	fff6fff6 	.word	0xfff6fff6
 80260dc:	0082      	.short	0x0082
 80260de:	0025      	movs	r5, r4
 80260e0:	681a      	ldr	r2, [r3, #0]
 80260e2:	3542      	adds	r5, #66	@ 0x42
 80260e4:	1d11      	adds	r1, r2, #4
 80260e6:	6019      	str	r1, [r3, #0]
 80260e8:	6813      	ldr	r3, [r2, #0]
 80260ea:	702b      	strb	r3, [r5, #0]
 80260ec:	2301      	movs	r3, #1
 80260ee:	e09e      	b.n	802622e <_printf_i+0x1be>
 80260f0:	6818      	ldr	r0, [r3, #0]
 80260f2:	6809      	ldr	r1, [r1, #0]
 80260f4:	1d02      	adds	r2, r0, #4
 80260f6:	060d      	lsls	r5, r1, #24
 80260f8:	d50b      	bpl.n	8026112 <_printf_i+0xa2>
 80260fa:	6806      	ldr	r6, [r0, #0]
 80260fc:	601a      	str	r2, [r3, #0]
 80260fe:	2e00      	cmp	r6, #0
 8026100:	da03      	bge.n	802610a <_printf_i+0x9a>
 8026102:	232d      	movs	r3, #45	@ 0x2d
 8026104:	9a03      	ldr	r2, [sp, #12]
 8026106:	4276      	negs	r6, r6
 8026108:	7013      	strb	r3, [r2, #0]
 802610a:	4b5d      	ldr	r3, [pc, #372]	@ (8026280 <_printf_i+0x210>)
 802610c:	270a      	movs	r7, #10
 802610e:	9304      	str	r3, [sp, #16]
 8026110:	e018      	b.n	8026144 <_printf_i+0xd4>
 8026112:	6806      	ldr	r6, [r0, #0]
 8026114:	601a      	str	r2, [r3, #0]
 8026116:	0649      	lsls	r1, r1, #25
 8026118:	d5f1      	bpl.n	80260fe <_printf_i+0x8e>
 802611a:	b236      	sxth	r6, r6
 802611c:	e7ef      	b.n	80260fe <_printf_i+0x8e>
 802611e:	6808      	ldr	r0, [r1, #0]
 8026120:	6819      	ldr	r1, [r3, #0]
 8026122:	c940      	ldmia	r1!, {r6}
 8026124:	0605      	lsls	r5, r0, #24
 8026126:	d402      	bmi.n	802612e <_printf_i+0xbe>
 8026128:	0640      	lsls	r0, r0, #25
 802612a:	d500      	bpl.n	802612e <_printf_i+0xbe>
 802612c:	b2b6      	uxth	r6, r6
 802612e:	6019      	str	r1, [r3, #0]
 8026130:	4b53      	ldr	r3, [pc, #332]	@ (8026280 <_printf_i+0x210>)
 8026132:	270a      	movs	r7, #10
 8026134:	9304      	str	r3, [sp, #16]
 8026136:	2a6f      	cmp	r2, #111	@ 0x6f
 8026138:	d100      	bne.n	802613c <_printf_i+0xcc>
 802613a:	3f02      	subs	r7, #2
 802613c:	0023      	movs	r3, r4
 802613e:	2200      	movs	r2, #0
 8026140:	3343      	adds	r3, #67	@ 0x43
 8026142:	701a      	strb	r2, [r3, #0]
 8026144:	6863      	ldr	r3, [r4, #4]
 8026146:	60a3      	str	r3, [r4, #8]
 8026148:	2b00      	cmp	r3, #0
 802614a:	db06      	blt.n	802615a <_printf_i+0xea>
 802614c:	2104      	movs	r1, #4
 802614e:	6822      	ldr	r2, [r4, #0]
 8026150:	9d03      	ldr	r5, [sp, #12]
 8026152:	438a      	bics	r2, r1
 8026154:	6022      	str	r2, [r4, #0]
 8026156:	4333      	orrs	r3, r6
 8026158:	d00c      	beq.n	8026174 <_printf_i+0x104>
 802615a:	9d03      	ldr	r5, [sp, #12]
 802615c:	0030      	movs	r0, r6
 802615e:	0039      	movs	r1, r7
 8026160:	f7da f8a6 	bl	80002b0 <__aeabi_uidivmod>
 8026164:	9b04      	ldr	r3, [sp, #16]
 8026166:	3d01      	subs	r5, #1
 8026168:	5c5b      	ldrb	r3, [r3, r1]
 802616a:	702b      	strb	r3, [r5, #0]
 802616c:	0033      	movs	r3, r6
 802616e:	0006      	movs	r6, r0
 8026170:	429f      	cmp	r7, r3
 8026172:	d9f3      	bls.n	802615c <_printf_i+0xec>
 8026174:	2f08      	cmp	r7, #8
 8026176:	d109      	bne.n	802618c <_printf_i+0x11c>
 8026178:	6823      	ldr	r3, [r4, #0]
 802617a:	07db      	lsls	r3, r3, #31
 802617c:	d506      	bpl.n	802618c <_printf_i+0x11c>
 802617e:	6862      	ldr	r2, [r4, #4]
 8026180:	6923      	ldr	r3, [r4, #16]
 8026182:	429a      	cmp	r2, r3
 8026184:	dc02      	bgt.n	802618c <_printf_i+0x11c>
 8026186:	2330      	movs	r3, #48	@ 0x30
 8026188:	3d01      	subs	r5, #1
 802618a:	702b      	strb	r3, [r5, #0]
 802618c:	9b03      	ldr	r3, [sp, #12]
 802618e:	1b5b      	subs	r3, r3, r5
 8026190:	6123      	str	r3, [r4, #16]
 8026192:	9b07      	ldr	r3, [sp, #28]
 8026194:	0021      	movs	r1, r4
 8026196:	9300      	str	r3, [sp, #0]
 8026198:	9805      	ldr	r0, [sp, #20]
 802619a:	9b06      	ldr	r3, [sp, #24]
 802619c:	aa09      	add	r2, sp, #36	@ 0x24
 802619e:	f7ff fef7 	bl	8025f90 <_printf_common>
 80261a2:	3001      	adds	r0, #1
 80261a4:	d148      	bne.n	8026238 <_printf_i+0x1c8>
 80261a6:	2001      	movs	r0, #1
 80261a8:	4240      	negs	r0, r0
 80261aa:	b00b      	add	sp, #44	@ 0x2c
 80261ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80261ae:	2220      	movs	r2, #32
 80261b0:	6809      	ldr	r1, [r1, #0]
 80261b2:	430a      	orrs	r2, r1
 80261b4:	6022      	str	r2, [r4, #0]
 80261b6:	2278      	movs	r2, #120	@ 0x78
 80261b8:	4932      	ldr	r1, [pc, #200]	@ (8026284 <_printf_i+0x214>)
 80261ba:	9104      	str	r1, [sp, #16]
 80261bc:	0021      	movs	r1, r4
 80261be:	3145      	adds	r1, #69	@ 0x45
 80261c0:	700a      	strb	r2, [r1, #0]
 80261c2:	6819      	ldr	r1, [r3, #0]
 80261c4:	6822      	ldr	r2, [r4, #0]
 80261c6:	c940      	ldmia	r1!, {r6}
 80261c8:	0610      	lsls	r0, r2, #24
 80261ca:	d402      	bmi.n	80261d2 <_printf_i+0x162>
 80261cc:	0650      	lsls	r0, r2, #25
 80261ce:	d500      	bpl.n	80261d2 <_printf_i+0x162>
 80261d0:	b2b6      	uxth	r6, r6
 80261d2:	6019      	str	r1, [r3, #0]
 80261d4:	07d3      	lsls	r3, r2, #31
 80261d6:	d502      	bpl.n	80261de <_printf_i+0x16e>
 80261d8:	2320      	movs	r3, #32
 80261da:	4313      	orrs	r3, r2
 80261dc:	6023      	str	r3, [r4, #0]
 80261de:	2e00      	cmp	r6, #0
 80261e0:	d001      	beq.n	80261e6 <_printf_i+0x176>
 80261e2:	2710      	movs	r7, #16
 80261e4:	e7aa      	b.n	802613c <_printf_i+0xcc>
 80261e6:	2220      	movs	r2, #32
 80261e8:	6823      	ldr	r3, [r4, #0]
 80261ea:	4393      	bics	r3, r2
 80261ec:	6023      	str	r3, [r4, #0]
 80261ee:	e7f8      	b.n	80261e2 <_printf_i+0x172>
 80261f0:	681a      	ldr	r2, [r3, #0]
 80261f2:	680d      	ldr	r5, [r1, #0]
 80261f4:	1d10      	adds	r0, r2, #4
 80261f6:	6949      	ldr	r1, [r1, #20]
 80261f8:	6018      	str	r0, [r3, #0]
 80261fa:	6813      	ldr	r3, [r2, #0]
 80261fc:	062e      	lsls	r6, r5, #24
 80261fe:	d501      	bpl.n	8026204 <_printf_i+0x194>
 8026200:	6019      	str	r1, [r3, #0]
 8026202:	e002      	b.n	802620a <_printf_i+0x19a>
 8026204:	066d      	lsls	r5, r5, #25
 8026206:	d5fb      	bpl.n	8026200 <_printf_i+0x190>
 8026208:	8019      	strh	r1, [r3, #0]
 802620a:	2300      	movs	r3, #0
 802620c:	9d03      	ldr	r5, [sp, #12]
 802620e:	6123      	str	r3, [r4, #16]
 8026210:	e7bf      	b.n	8026192 <_printf_i+0x122>
 8026212:	681a      	ldr	r2, [r3, #0]
 8026214:	1d11      	adds	r1, r2, #4
 8026216:	6019      	str	r1, [r3, #0]
 8026218:	6815      	ldr	r5, [r2, #0]
 802621a:	2100      	movs	r1, #0
 802621c:	0028      	movs	r0, r5
 802621e:	6862      	ldr	r2, [r4, #4]
 8026220:	f000 fb7f 	bl	8026922 <memchr>
 8026224:	2800      	cmp	r0, #0
 8026226:	d001      	beq.n	802622c <_printf_i+0x1bc>
 8026228:	1b40      	subs	r0, r0, r5
 802622a:	6060      	str	r0, [r4, #4]
 802622c:	6863      	ldr	r3, [r4, #4]
 802622e:	6123      	str	r3, [r4, #16]
 8026230:	2300      	movs	r3, #0
 8026232:	9a03      	ldr	r2, [sp, #12]
 8026234:	7013      	strb	r3, [r2, #0]
 8026236:	e7ac      	b.n	8026192 <_printf_i+0x122>
 8026238:	002a      	movs	r2, r5
 802623a:	6923      	ldr	r3, [r4, #16]
 802623c:	9906      	ldr	r1, [sp, #24]
 802623e:	9805      	ldr	r0, [sp, #20]
 8026240:	9d07      	ldr	r5, [sp, #28]
 8026242:	47a8      	blx	r5
 8026244:	3001      	adds	r0, #1
 8026246:	d0ae      	beq.n	80261a6 <_printf_i+0x136>
 8026248:	6823      	ldr	r3, [r4, #0]
 802624a:	079b      	lsls	r3, r3, #30
 802624c:	d415      	bmi.n	802627a <_printf_i+0x20a>
 802624e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026250:	68e0      	ldr	r0, [r4, #12]
 8026252:	4298      	cmp	r0, r3
 8026254:	daa9      	bge.n	80261aa <_printf_i+0x13a>
 8026256:	0018      	movs	r0, r3
 8026258:	e7a7      	b.n	80261aa <_printf_i+0x13a>
 802625a:	0022      	movs	r2, r4
 802625c:	2301      	movs	r3, #1
 802625e:	9906      	ldr	r1, [sp, #24]
 8026260:	9805      	ldr	r0, [sp, #20]
 8026262:	9e07      	ldr	r6, [sp, #28]
 8026264:	3219      	adds	r2, #25
 8026266:	47b0      	blx	r6
 8026268:	3001      	adds	r0, #1
 802626a:	d09c      	beq.n	80261a6 <_printf_i+0x136>
 802626c:	3501      	adds	r5, #1
 802626e:	68e3      	ldr	r3, [r4, #12]
 8026270:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026272:	1a9b      	subs	r3, r3, r2
 8026274:	42ab      	cmp	r3, r5
 8026276:	dcf0      	bgt.n	802625a <_printf_i+0x1ea>
 8026278:	e7e9      	b.n	802624e <_printf_i+0x1de>
 802627a:	2500      	movs	r5, #0
 802627c:	e7f7      	b.n	802626e <_printf_i+0x1fe>
 802627e:	46c0      	nop			@ (mov r8, r8)
 8026280:	0802ee1c 	.word	0x0802ee1c
 8026284:	0802ee2d 	.word	0x0802ee2d

08026288 <std>:
 8026288:	2300      	movs	r3, #0
 802628a:	b510      	push	{r4, lr}
 802628c:	0004      	movs	r4, r0
 802628e:	6003      	str	r3, [r0, #0]
 8026290:	6043      	str	r3, [r0, #4]
 8026292:	6083      	str	r3, [r0, #8]
 8026294:	8181      	strh	r1, [r0, #12]
 8026296:	6643      	str	r3, [r0, #100]	@ 0x64
 8026298:	81c2      	strh	r2, [r0, #14]
 802629a:	6103      	str	r3, [r0, #16]
 802629c:	6143      	str	r3, [r0, #20]
 802629e:	6183      	str	r3, [r0, #24]
 80262a0:	0019      	movs	r1, r3
 80262a2:	2208      	movs	r2, #8
 80262a4:	305c      	adds	r0, #92	@ 0x5c
 80262a6:	f000 fa6b 	bl	8026780 <memset>
 80262aa:	4b0b      	ldr	r3, [pc, #44]	@ (80262d8 <std+0x50>)
 80262ac:	6224      	str	r4, [r4, #32]
 80262ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80262b0:	4b0a      	ldr	r3, [pc, #40]	@ (80262dc <std+0x54>)
 80262b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80262b4:	4b0a      	ldr	r3, [pc, #40]	@ (80262e0 <std+0x58>)
 80262b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80262b8:	4b0a      	ldr	r3, [pc, #40]	@ (80262e4 <std+0x5c>)
 80262ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80262bc:	4b0a      	ldr	r3, [pc, #40]	@ (80262e8 <std+0x60>)
 80262be:	429c      	cmp	r4, r3
 80262c0:	d005      	beq.n	80262ce <std+0x46>
 80262c2:	4b0a      	ldr	r3, [pc, #40]	@ (80262ec <std+0x64>)
 80262c4:	429c      	cmp	r4, r3
 80262c6:	d002      	beq.n	80262ce <std+0x46>
 80262c8:	4b09      	ldr	r3, [pc, #36]	@ (80262f0 <std+0x68>)
 80262ca:	429c      	cmp	r4, r3
 80262cc:	d103      	bne.n	80262d6 <std+0x4e>
 80262ce:	0020      	movs	r0, r4
 80262d0:	3058      	adds	r0, #88	@ 0x58
 80262d2:	f000 fb23 	bl	802691c <__retarget_lock_init_recursive>
 80262d6:	bd10      	pop	{r4, pc}
 80262d8:	08026535 	.word	0x08026535
 80262dc:	0802655d 	.word	0x0802655d
 80262e0:	08026595 	.word	0x08026595
 80262e4:	080265c1 	.word	0x080265c1
 80262e8:	200037cc 	.word	0x200037cc
 80262ec:	20003834 	.word	0x20003834
 80262f0:	2000389c 	.word	0x2000389c

080262f4 <stdio_exit_handler>:
 80262f4:	b510      	push	{r4, lr}
 80262f6:	4a03      	ldr	r2, [pc, #12]	@ (8026304 <stdio_exit_handler+0x10>)
 80262f8:	4903      	ldr	r1, [pc, #12]	@ (8026308 <stdio_exit_handler+0x14>)
 80262fa:	4804      	ldr	r0, [pc, #16]	@ (802630c <stdio_exit_handler+0x18>)
 80262fc:	f000 f86c 	bl	80263d8 <_fwalk_sglue>
 8026300:	bd10      	pop	{r4, pc}
 8026302:	46c0      	nop			@ (mov r8, r8)
 8026304:	20000274 	.word	0x20000274
 8026308:	08028f19 	.word	0x08028f19
 802630c:	200003f0 	.word	0x200003f0

08026310 <cleanup_stdio>:
 8026310:	6841      	ldr	r1, [r0, #4]
 8026312:	4b0b      	ldr	r3, [pc, #44]	@ (8026340 <cleanup_stdio+0x30>)
 8026314:	b510      	push	{r4, lr}
 8026316:	0004      	movs	r4, r0
 8026318:	4299      	cmp	r1, r3
 802631a:	d001      	beq.n	8026320 <cleanup_stdio+0x10>
 802631c:	f002 fdfc 	bl	8028f18 <_fflush_r>
 8026320:	68a1      	ldr	r1, [r4, #8]
 8026322:	4b08      	ldr	r3, [pc, #32]	@ (8026344 <cleanup_stdio+0x34>)
 8026324:	4299      	cmp	r1, r3
 8026326:	d002      	beq.n	802632e <cleanup_stdio+0x1e>
 8026328:	0020      	movs	r0, r4
 802632a:	f002 fdf5 	bl	8028f18 <_fflush_r>
 802632e:	68e1      	ldr	r1, [r4, #12]
 8026330:	4b05      	ldr	r3, [pc, #20]	@ (8026348 <cleanup_stdio+0x38>)
 8026332:	4299      	cmp	r1, r3
 8026334:	d002      	beq.n	802633c <cleanup_stdio+0x2c>
 8026336:	0020      	movs	r0, r4
 8026338:	f002 fdee 	bl	8028f18 <_fflush_r>
 802633c:	bd10      	pop	{r4, pc}
 802633e:	46c0      	nop			@ (mov r8, r8)
 8026340:	200037cc 	.word	0x200037cc
 8026344:	20003834 	.word	0x20003834
 8026348:	2000389c 	.word	0x2000389c

0802634c <global_stdio_init.part.0>:
 802634c:	b510      	push	{r4, lr}
 802634e:	4b09      	ldr	r3, [pc, #36]	@ (8026374 <global_stdio_init.part.0+0x28>)
 8026350:	4a09      	ldr	r2, [pc, #36]	@ (8026378 <global_stdio_init.part.0+0x2c>)
 8026352:	2104      	movs	r1, #4
 8026354:	601a      	str	r2, [r3, #0]
 8026356:	4809      	ldr	r0, [pc, #36]	@ (802637c <global_stdio_init.part.0+0x30>)
 8026358:	2200      	movs	r2, #0
 802635a:	f7ff ff95 	bl	8026288 <std>
 802635e:	2201      	movs	r2, #1
 8026360:	2109      	movs	r1, #9
 8026362:	4807      	ldr	r0, [pc, #28]	@ (8026380 <global_stdio_init.part.0+0x34>)
 8026364:	f7ff ff90 	bl	8026288 <std>
 8026368:	2202      	movs	r2, #2
 802636a:	2112      	movs	r1, #18
 802636c:	4805      	ldr	r0, [pc, #20]	@ (8026384 <global_stdio_init.part.0+0x38>)
 802636e:	f7ff ff8b 	bl	8026288 <std>
 8026372:	bd10      	pop	{r4, pc}
 8026374:	20003904 	.word	0x20003904
 8026378:	080262f5 	.word	0x080262f5
 802637c:	200037cc 	.word	0x200037cc
 8026380:	20003834 	.word	0x20003834
 8026384:	2000389c 	.word	0x2000389c

08026388 <__sfp_lock_acquire>:
 8026388:	b510      	push	{r4, lr}
 802638a:	4802      	ldr	r0, [pc, #8]	@ (8026394 <__sfp_lock_acquire+0xc>)
 802638c:	f000 fac7 	bl	802691e <__retarget_lock_acquire_recursive>
 8026390:	bd10      	pop	{r4, pc}
 8026392:	46c0      	nop			@ (mov r8, r8)
 8026394:	2000390d 	.word	0x2000390d

08026398 <__sfp_lock_release>:
 8026398:	b510      	push	{r4, lr}
 802639a:	4802      	ldr	r0, [pc, #8]	@ (80263a4 <__sfp_lock_release+0xc>)
 802639c:	f000 fac0 	bl	8026920 <__retarget_lock_release_recursive>
 80263a0:	bd10      	pop	{r4, pc}
 80263a2:	46c0      	nop			@ (mov r8, r8)
 80263a4:	2000390d 	.word	0x2000390d

080263a8 <__sinit>:
 80263a8:	b510      	push	{r4, lr}
 80263aa:	0004      	movs	r4, r0
 80263ac:	f7ff ffec 	bl	8026388 <__sfp_lock_acquire>
 80263b0:	6a23      	ldr	r3, [r4, #32]
 80263b2:	2b00      	cmp	r3, #0
 80263b4:	d002      	beq.n	80263bc <__sinit+0x14>
 80263b6:	f7ff ffef 	bl	8026398 <__sfp_lock_release>
 80263ba:	bd10      	pop	{r4, pc}
 80263bc:	4b04      	ldr	r3, [pc, #16]	@ (80263d0 <__sinit+0x28>)
 80263be:	6223      	str	r3, [r4, #32]
 80263c0:	4b04      	ldr	r3, [pc, #16]	@ (80263d4 <__sinit+0x2c>)
 80263c2:	681b      	ldr	r3, [r3, #0]
 80263c4:	2b00      	cmp	r3, #0
 80263c6:	d1f6      	bne.n	80263b6 <__sinit+0xe>
 80263c8:	f7ff ffc0 	bl	802634c <global_stdio_init.part.0>
 80263cc:	e7f3      	b.n	80263b6 <__sinit+0xe>
 80263ce:	46c0      	nop			@ (mov r8, r8)
 80263d0:	08026311 	.word	0x08026311
 80263d4:	20003904 	.word	0x20003904

080263d8 <_fwalk_sglue>:
 80263d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80263da:	0014      	movs	r4, r2
 80263dc:	2600      	movs	r6, #0
 80263de:	9000      	str	r0, [sp, #0]
 80263e0:	9101      	str	r1, [sp, #4]
 80263e2:	68a5      	ldr	r5, [r4, #8]
 80263e4:	6867      	ldr	r7, [r4, #4]
 80263e6:	3f01      	subs	r7, #1
 80263e8:	d504      	bpl.n	80263f4 <_fwalk_sglue+0x1c>
 80263ea:	6824      	ldr	r4, [r4, #0]
 80263ec:	2c00      	cmp	r4, #0
 80263ee:	d1f8      	bne.n	80263e2 <_fwalk_sglue+0xa>
 80263f0:	0030      	movs	r0, r6
 80263f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80263f4:	89ab      	ldrh	r3, [r5, #12]
 80263f6:	2b01      	cmp	r3, #1
 80263f8:	d908      	bls.n	802640c <_fwalk_sglue+0x34>
 80263fa:	220e      	movs	r2, #14
 80263fc:	5eab      	ldrsh	r3, [r5, r2]
 80263fe:	3301      	adds	r3, #1
 8026400:	d004      	beq.n	802640c <_fwalk_sglue+0x34>
 8026402:	0029      	movs	r1, r5
 8026404:	9800      	ldr	r0, [sp, #0]
 8026406:	9b01      	ldr	r3, [sp, #4]
 8026408:	4798      	blx	r3
 802640a:	4306      	orrs	r6, r0
 802640c:	3568      	adds	r5, #104	@ 0x68
 802640e:	e7ea      	b.n	80263e6 <_fwalk_sglue+0xe>

08026410 <iprintf>:
 8026410:	b40f      	push	{r0, r1, r2, r3}
 8026412:	b507      	push	{r0, r1, r2, lr}
 8026414:	4905      	ldr	r1, [pc, #20]	@ (802642c <iprintf+0x1c>)
 8026416:	ab04      	add	r3, sp, #16
 8026418:	6808      	ldr	r0, [r1, #0]
 802641a:	cb04      	ldmia	r3!, {r2}
 802641c:	6881      	ldr	r1, [r0, #8]
 802641e:	9301      	str	r3, [sp, #4]
 8026420:	f002 fbd8 	bl	8028bd4 <_vfiprintf_r>
 8026424:	b003      	add	sp, #12
 8026426:	bc08      	pop	{r3}
 8026428:	b004      	add	sp, #16
 802642a:	4718      	bx	r3
 802642c:	200003ec 	.word	0x200003ec

08026430 <_puts_r>:
 8026430:	6a03      	ldr	r3, [r0, #32]
 8026432:	b570      	push	{r4, r5, r6, lr}
 8026434:	0005      	movs	r5, r0
 8026436:	000e      	movs	r6, r1
 8026438:	6884      	ldr	r4, [r0, #8]
 802643a:	2b00      	cmp	r3, #0
 802643c:	d101      	bne.n	8026442 <_puts_r+0x12>
 802643e:	f7ff ffb3 	bl	80263a8 <__sinit>
 8026442:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026444:	07db      	lsls	r3, r3, #31
 8026446:	d405      	bmi.n	8026454 <_puts_r+0x24>
 8026448:	89a3      	ldrh	r3, [r4, #12]
 802644a:	059b      	lsls	r3, r3, #22
 802644c:	d402      	bmi.n	8026454 <_puts_r+0x24>
 802644e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026450:	f000 fa65 	bl	802691e <__retarget_lock_acquire_recursive>
 8026454:	89a3      	ldrh	r3, [r4, #12]
 8026456:	071b      	lsls	r3, r3, #28
 8026458:	d502      	bpl.n	8026460 <_puts_r+0x30>
 802645a:	6923      	ldr	r3, [r4, #16]
 802645c:	2b00      	cmp	r3, #0
 802645e:	d11f      	bne.n	80264a0 <_puts_r+0x70>
 8026460:	0021      	movs	r1, r4
 8026462:	0028      	movs	r0, r5
 8026464:	f000 f92e 	bl	80266c4 <__swsetup_r>
 8026468:	2800      	cmp	r0, #0
 802646a:	d019      	beq.n	80264a0 <_puts_r+0x70>
 802646c:	2501      	movs	r5, #1
 802646e:	426d      	negs	r5, r5
 8026470:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026472:	07db      	lsls	r3, r3, #31
 8026474:	d405      	bmi.n	8026482 <_puts_r+0x52>
 8026476:	89a3      	ldrh	r3, [r4, #12]
 8026478:	059b      	lsls	r3, r3, #22
 802647a:	d402      	bmi.n	8026482 <_puts_r+0x52>
 802647c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802647e:	f000 fa4f 	bl	8026920 <__retarget_lock_release_recursive>
 8026482:	0028      	movs	r0, r5
 8026484:	bd70      	pop	{r4, r5, r6, pc}
 8026486:	3601      	adds	r6, #1
 8026488:	60a3      	str	r3, [r4, #8]
 802648a:	2b00      	cmp	r3, #0
 802648c:	da04      	bge.n	8026498 <_puts_r+0x68>
 802648e:	69a2      	ldr	r2, [r4, #24]
 8026490:	429a      	cmp	r2, r3
 8026492:	dc16      	bgt.n	80264c2 <_puts_r+0x92>
 8026494:	290a      	cmp	r1, #10
 8026496:	d014      	beq.n	80264c2 <_puts_r+0x92>
 8026498:	6823      	ldr	r3, [r4, #0]
 802649a:	1c5a      	adds	r2, r3, #1
 802649c:	6022      	str	r2, [r4, #0]
 802649e:	7019      	strb	r1, [r3, #0]
 80264a0:	68a3      	ldr	r3, [r4, #8]
 80264a2:	7831      	ldrb	r1, [r6, #0]
 80264a4:	3b01      	subs	r3, #1
 80264a6:	2900      	cmp	r1, #0
 80264a8:	d1ed      	bne.n	8026486 <_puts_r+0x56>
 80264aa:	60a3      	str	r3, [r4, #8]
 80264ac:	2b00      	cmp	r3, #0
 80264ae:	da0f      	bge.n	80264d0 <_puts_r+0xa0>
 80264b0:	0022      	movs	r2, r4
 80264b2:	0028      	movs	r0, r5
 80264b4:	310a      	adds	r1, #10
 80264b6:	f000 f8c3 	bl	8026640 <__swbuf_r>
 80264ba:	3001      	adds	r0, #1
 80264bc:	d0d6      	beq.n	802646c <_puts_r+0x3c>
 80264be:	250a      	movs	r5, #10
 80264c0:	e7d6      	b.n	8026470 <_puts_r+0x40>
 80264c2:	0022      	movs	r2, r4
 80264c4:	0028      	movs	r0, r5
 80264c6:	f000 f8bb 	bl	8026640 <__swbuf_r>
 80264ca:	3001      	adds	r0, #1
 80264cc:	d1e8      	bne.n	80264a0 <_puts_r+0x70>
 80264ce:	e7cd      	b.n	802646c <_puts_r+0x3c>
 80264d0:	6823      	ldr	r3, [r4, #0]
 80264d2:	1c5a      	adds	r2, r3, #1
 80264d4:	6022      	str	r2, [r4, #0]
 80264d6:	220a      	movs	r2, #10
 80264d8:	701a      	strb	r2, [r3, #0]
 80264da:	e7f0      	b.n	80264be <_puts_r+0x8e>

080264dc <puts>:
 80264dc:	b510      	push	{r4, lr}
 80264de:	4b03      	ldr	r3, [pc, #12]	@ (80264ec <puts+0x10>)
 80264e0:	0001      	movs	r1, r0
 80264e2:	6818      	ldr	r0, [r3, #0]
 80264e4:	f7ff ffa4 	bl	8026430 <_puts_r>
 80264e8:	bd10      	pop	{r4, pc}
 80264ea:	46c0      	nop			@ (mov r8, r8)
 80264ec:	200003ec 	.word	0x200003ec

080264f0 <siprintf>:
 80264f0:	b40e      	push	{r1, r2, r3}
 80264f2:	b510      	push	{r4, lr}
 80264f4:	2400      	movs	r4, #0
 80264f6:	490c      	ldr	r1, [pc, #48]	@ (8026528 <siprintf+0x38>)
 80264f8:	b09d      	sub	sp, #116	@ 0x74
 80264fa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80264fc:	9002      	str	r0, [sp, #8]
 80264fe:	9006      	str	r0, [sp, #24]
 8026500:	9107      	str	r1, [sp, #28]
 8026502:	9104      	str	r1, [sp, #16]
 8026504:	4809      	ldr	r0, [pc, #36]	@ (802652c <siprintf+0x3c>)
 8026506:	490a      	ldr	r1, [pc, #40]	@ (8026530 <siprintf+0x40>)
 8026508:	cb04      	ldmia	r3!, {r2}
 802650a:	9105      	str	r1, [sp, #20]
 802650c:	6800      	ldr	r0, [r0, #0]
 802650e:	a902      	add	r1, sp, #8
 8026510:	9301      	str	r3, [sp, #4]
 8026512:	941b      	str	r4, [sp, #108]	@ 0x6c
 8026514:	f002 fa38 	bl	8028988 <_svfiprintf_r>
 8026518:	9b02      	ldr	r3, [sp, #8]
 802651a:	701c      	strb	r4, [r3, #0]
 802651c:	b01d      	add	sp, #116	@ 0x74
 802651e:	bc10      	pop	{r4}
 8026520:	bc08      	pop	{r3}
 8026522:	b003      	add	sp, #12
 8026524:	4718      	bx	r3
 8026526:	46c0      	nop			@ (mov r8, r8)
 8026528:	7fffffff 	.word	0x7fffffff
 802652c:	200003ec 	.word	0x200003ec
 8026530:	ffff0208 	.word	0xffff0208

08026534 <__sread>:
 8026534:	b570      	push	{r4, r5, r6, lr}
 8026536:	000c      	movs	r4, r1
 8026538:	250e      	movs	r5, #14
 802653a:	5f49      	ldrsh	r1, [r1, r5]
 802653c:	f000 f99c 	bl	8026878 <_read_r>
 8026540:	2800      	cmp	r0, #0
 8026542:	db03      	blt.n	802654c <__sread+0x18>
 8026544:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8026546:	181b      	adds	r3, r3, r0
 8026548:	6563      	str	r3, [r4, #84]	@ 0x54
 802654a:	bd70      	pop	{r4, r5, r6, pc}
 802654c:	89a3      	ldrh	r3, [r4, #12]
 802654e:	4a02      	ldr	r2, [pc, #8]	@ (8026558 <__sread+0x24>)
 8026550:	4013      	ands	r3, r2
 8026552:	81a3      	strh	r3, [r4, #12]
 8026554:	e7f9      	b.n	802654a <__sread+0x16>
 8026556:	46c0      	nop			@ (mov r8, r8)
 8026558:	ffffefff 	.word	0xffffefff

0802655c <__swrite>:
 802655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802655e:	001f      	movs	r7, r3
 8026560:	898b      	ldrh	r3, [r1, #12]
 8026562:	0005      	movs	r5, r0
 8026564:	000c      	movs	r4, r1
 8026566:	0016      	movs	r6, r2
 8026568:	05db      	lsls	r3, r3, #23
 802656a:	d505      	bpl.n	8026578 <__swrite+0x1c>
 802656c:	230e      	movs	r3, #14
 802656e:	5ec9      	ldrsh	r1, [r1, r3]
 8026570:	2200      	movs	r2, #0
 8026572:	2302      	movs	r3, #2
 8026574:	f000 f96c 	bl	8026850 <_lseek_r>
 8026578:	89a3      	ldrh	r3, [r4, #12]
 802657a:	4a05      	ldr	r2, [pc, #20]	@ (8026590 <__swrite+0x34>)
 802657c:	0028      	movs	r0, r5
 802657e:	4013      	ands	r3, r2
 8026580:	81a3      	strh	r3, [r4, #12]
 8026582:	0032      	movs	r2, r6
 8026584:	230e      	movs	r3, #14
 8026586:	5ee1      	ldrsh	r1, [r4, r3]
 8026588:	003b      	movs	r3, r7
 802658a:	f000 f989 	bl	80268a0 <_write_r>
 802658e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026590:	ffffefff 	.word	0xffffefff

08026594 <__sseek>:
 8026594:	b570      	push	{r4, r5, r6, lr}
 8026596:	000c      	movs	r4, r1
 8026598:	250e      	movs	r5, #14
 802659a:	5f49      	ldrsh	r1, [r1, r5]
 802659c:	f000 f958 	bl	8026850 <_lseek_r>
 80265a0:	89a3      	ldrh	r3, [r4, #12]
 80265a2:	1c42      	adds	r2, r0, #1
 80265a4:	d103      	bne.n	80265ae <__sseek+0x1a>
 80265a6:	4a05      	ldr	r2, [pc, #20]	@ (80265bc <__sseek+0x28>)
 80265a8:	4013      	ands	r3, r2
 80265aa:	81a3      	strh	r3, [r4, #12]
 80265ac:	bd70      	pop	{r4, r5, r6, pc}
 80265ae:	2280      	movs	r2, #128	@ 0x80
 80265b0:	0152      	lsls	r2, r2, #5
 80265b2:	4313      	orrs	r3, r2
 80265b4:	81a3      	strh	r3, [r4, #12]
 80265b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80265b8:	e7f8      	b.n	80265ac <__sseek+0x18>
 80265ba:	46c0      	nop			@ (mov r8, r8)
 80265bc:	ffffefff 	.word	0xffffefff

080265c0 <__sclose>:
 80265c0:	b510      	push	{r4, lr}
 80265c2:	230e      	movs	r3, #14
 80265c4:	5ec9      	ldrsh	r1, [r1, r3]
 80265c6:	f000 f931 	bl	802682c <_close_r>
 80265ca:	bd10      	pop	{r4, pc}

080265cc <_vsniprintf_r>:
 80265cc:	b530      	push	{r4, r5, lr}
 80265ce:	0005      	movs	r5, r0
 80265d0:	0014      	movs	r4, r2
 80265d2:	0008      	movs	r0, r1
 80265d4:	001a      	movs	r2, r3
 80265d6:	b09b      	sub	sp, #108	@ 0x6c
 80265d8:	2c00      	cmp	r4, #0
 80265da:	da05      	bge.n	80265e8 <_vsniprintf_r+0x1c>
 80265dc:	238b      	movs	r3, #139	@ 0x8b
 80265de:	2001      	movs	r0, #1
 80265e0:	602b      	str	r3, [r5, #0]
 80265e2:	4240      	negs	r0, r0
 80265e4:	b01b      	add	sp, #108	@ 0x6c
 80265e6:	bd30      	pop	{r4, r5, pc}
 80265e8:	2382      	movs	r3, #130	@ 0x82
 80265ea:	4669      	mov	r1, sp
 80265ec:	009b      	lsls	r3, r3, #2
 80265ee:	818b      	strh	r3, [r1, #12]
 80265f0:	2100      	movs	r1, #0
 80265f2:	9000      	str	r0, [sp, #0]
 80265f4:	9119      	str	r1, [sp, #100]	@ 0x64
 80265f6:	9004      	str	r0, [sp, #16]
 80265f8:	428c      	cmp	r4, r1
 80265fa:	d000      	beq.n	80265fe <_vsniprintf_r+0x32>
 80265fc:	1e61      	subs	r1, r4, #1
 80265fe:	2301      	movs	r3, #1
 8026600:	9102      	str	r1, [sp, #8]
 8026602:	9105      	str	r1, [sp, #20]
 8026604:	4669      	mov	r1, sp
 8026606:	425b      	negs	r3, r3
 8026608:	81cb      	strh	r3, [r1, #14]
 802660a:	0028      	movs	r0, r5
 802660c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802660e:	f002 f9bb 	bl	8028988 <_svfiprintf_r>
 8026612:	1c43      	adds	r3, r0, #1
 8026614:	da01      	bge.n	802661a <_vsniprintf_r+0x4e>
 8026616:	238b      	movs	r3, #139	@ 0x8b
 8026618:	602b      	str	r3, [r5, #0]
 802661a:	2c00      	cmp	r4, #0
 802661c:	d0e2      	beq.n	80265e4 <_vsniprintf_r+0x18>
 802661e:	2200      	movs	r2, #0
 8026620:	9b00      	ldr	r3, [sp, #0]
 8026622:	701a      	strb	r2, [r3, #0]
 8026624:	e7de      	b.n	80265e4 <_vsniprintf_r+0x18>
	...

08026628 <vsniprintf>:
 8026628:	b513      	push	{r0, r1, r4, lr}
 802662a:	4c04      	ldr	r4, [pc, #16]	@ (802663c <vsniprintf+0x14>)
 802662c:	9300      	str	r3, [sp, #0]
 802662e:	0013      	movs	r3, r2
 8026630:	000a      	movs	r2, r1
 8026632:	0001      	movs	r1, r0
 8026634:	6820      	ldr	r0, [r4, #0]
 8026636:	f7ff ffc9 	bl	80265cc <_vsniprintf_r>
 802663a:	bd16      	pop	{r1, r2, r4, pc}
 802663c:	200003ec 	.word	0x200003ec

08026640 <__swbuf_r>:
 8026640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026642:	0006      	movs	r6, r0
 8026644:	000d      	movs	r5, r1
 8026646:	0014      	movs	r4, r2
 8026648:	2800      	cmp	r0, #0
 802664a:	d004      	beq.n	8026656 <__swbuf_r+0x16>
 802664c:	6a03      	ldr	r3, [r0, #32]
 802664e:	2b00      	cmp	r3, #0
 8026650:	d101      	bne.n	8026656 <__swbuf_r+0x16>
 8026652:	f7ff fea9 	bl	80263a8 <__sinit>
 8026656:	69a3      	ldr	r3, [r4, #24]
 8026658:	60a3      	str	r3, [r4, #8]
 802665a:	89a3      	ldrh	r3, [r4, #12]
 802665c:	071b      	lsls	r3, r3, #28
 802665e:	d502      	bpl.n	8026666 <__swbuf_r+0x26>
 8026660:	6923      	ldr	r3, [r4, #16]
 8026662:	2b00      	cmp	r3, #0
 8026664:	d109      	bne.n	802667a <__swbuf_r+0x3a>
 8026666:	0021      	movs	r1, r4
 8026668:	0030      	movs	r0, r6
 802666a:	f000 f82b 	bl	80266c4 <__swsetup_r>
 802666e:	2800      	cmp	r0, #0
 8026670:	d003      	beq.n	802667a <__swbuf_r+0x3a>
 8026672:	2501      	movs	r5, #1
 8026674:	426d      	negs	r5, r5
 8026676:	0028      	movs	r0, r5
 8026678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802667a:	6923      	ldr	r3, [r4, #16]
 802667c:	6820      	ldr	r0, [r4, #0]
 802667e:	b2ef      	uxtb	r7, r5
 8026680:	1ac0      	subs	r0, r0, r3
 8026682:	6963      	ldr	r3, [r4, #20]
 8026684:	b2ed      	uxtb	r5, r5
 8026686:	4283      	cmp	r3, r0
 8026688:	dc05      	bgt.n	8026696 <__swbuf_r+0x56>
 802668a:	0021      	movs	r1, r4
 802668c:	0030      	movs	r0, r6
 802668e:	f002 fc43 	bl	8028f18 <_fflush_r>
 8026692:	2800      	cmp	r0, #0
 8026694:	d1ed      	bne.n	8026672 <__swbuf_r+0x32>
 8026696:	68a3      	ldr	r3, [r4, #8]
 8026698:	3001      	adds	r0, #1
 802669a:	3b01      	subs	r3, #1
 802669c:	60a3      	str	r3, [r4, #8]
 802669e:	6823      	ldr	r3, [r4, #0]
 80266a0:	1c5a      	adds	r2, r3, #1
 80266a2:	6022      	str	r2, [r4, #0]
 80266a4:	701f      	strb	r7, [r3, #0]
 80266a6:	6963      	ldr	r3, [r4, #20]
 80266a8:	4283      	cmp	r3, r0
 80266aa:	d004      	beq.n	80266b6 <__swbuf_r+0x76>
 80266ac:	89a3      	ldrh	r3, [r4, #12]
 80266ae:	07db      	lsls	r3, r3, #31
 80266b0:	d5e1      	bpl.n	8026676 <__swbuf_r+0x36>
 80266b2:	2d0a      	cmp	r5, #10
 80266b4:	d1df      	bne.n	8026676 <__swbuf_r+0x36>
 80266b6:	0021      	movs	r1, r4
 80266b8:	0030      	movs	r0, r6
 80266ba:	f002 fc2d 	bl	8028f18 <_fflush_r>
 80266be:	2800      	cmp	r0, #0
 80266c0:	d0d9      	beq.n	8026676 <__swbuf_r+0x36>
 80266c2:	e7d6      	b.n	8026672 <__swbuf_r+0x32>

080266c4 <__swsetup_r>:
 80266c4:	4b2d      	ldr	r3, [pc, #180]	@ (802677c <__swsetup_r+0xb8>)
 80266c6:	b570      	push	{r4, r5, r6, lr}
 80266c8:	0005      	movs	r5, r0
 80266ca:	6818      	ldr	r0, [r3, #0]
 80266cc:	000c      	movs	r4, r1
 80266ce:	2800      	cmp	r0, #0
 80266d0:	d004      	beq.n	80266dc <__swsetup_r+0x18>
 80266d2:	6a03      	ldr	r3, [r0, #32]
 80266d4:	2b00      	cmp	r3, #0
 80266d6:	d101      	bne.n	80266dc <__swsetup_r+0x18>
 80266d8:	f7ff fe66 	bl	80263a8 <__sinit>
 80266dc:	220c      	movs	r2, #12
 80266de:	5ea3      	ldrsh	r3, [r4, r2]
 80266e0:	071a      	lsls	r2, r3, #28
 80266e2:	d423      	bmi.n	802672c <__swsetup_r+0x68>
 80266e4:	06da      	lsls	r2, r3, #27
 80266e6:	d407      	bmi.n	80266f8 <__swsetup_r+0x34>
 80266e8:	2209      	movs	r2, #9
 80266ea:	602a      	str	r2, [r5, #0]
 80266ec:	2240      	movs	r2, #64	@ 0x40
 80266ee:	2001      	movs	r0, #1
 80266f0:	4313      	orrs	r3, r2
 80266f2:	81a3      	strh	r3, [r4, #12]
 80266f4:	4240      	negs	r0, r0
 80266f6:	e03a      	b.n	802676e <__swsetup_r+0xaa>
 80266f8:	075b      	lsls	r3, r3, #29
 80266fa:	d513      	bpl.n	8026724 <__swsetup_r+0x60>
 80266fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80266fe:	2900      	cmp	r1, #0
 8026700:	d008      	beq.n	8026714 <__swsetup_r+0x50>
 8026702:	0023      	movs	r3, r4
 8026704:	3344      	adds	r3, #68	@ 0x44
 8026706:	4299      	cmp	r1, r3
 8026708:	d002      	beq.n	8026710 <__swsetup_r+0x4c>
 802670a:	0028      	movs	r0, r5
 802670c:	f000 ff9a 	bl	8027644 <_free_r>
 8026710:	2300      	movs	r3, #0
 8026712:	6363      	str	r3, [r4, #52]	@ 0x34
 8026714:	2224      	movs	r2, #36	@ 0x24
 8026716:	89a3      	ldrh	r3, [r4, #12]
 8026718:	4393      	bics	r3, r2
 802671a:	81a3      	strh	r3, [r4, #12]
 802671c:	2300      	movs	r3, #0
 802671e:	6063      	str	r3, [r4, #4]
 8026720:	6923      	ldr	r3, [r4, #16]
 8026722:	6023      	str	r3, [r4, #0]
 8026724:	2308      	movs	r3, #8
 8026726:	89a2      	ldrh	r2, [r4, #12]
 8026728:	4313      	orrs	r3, r2
 802672a:	81a3      	strh	r3, [r4, #12]
 802672c:	6923      	ldr	r3, [r4, #16]
 802672e:	2b00      	cmp	r3, #0
 8026730:	d10b      	bne.n	802674a <__swsetup_r+0x86>
 8026732:	21a0      	movs	r1, #160	@ 0xa0
 8026734:	2280      	movs	r2, #128	@ 0x80
 8026736:	89a3      	ldrh	r3, [r4, #12]
 8026738:	0089      	lsls	r1, r1, #2
 802673a:	0092      	lsls	r2, r2, #2
 802673c:	400b      	ands	r3, r1
 802673e:	4293      	cmp	r3, r2
 8026740:	d003      	beq.n	802674a <__swsetup_r+0x86>
 8026742:	0021      	movs	r1, r4
 8026744:	0028      	movs	r0, r5
 8026746:	f002 fc3d 	bl	8028fc4 <__smakebuf_r>
 802674a:	220c      	movs	r2, #12
 802674c:	5ea3      	ldrsh	r3, [r4, r2]
 802674e:	2101      	movs	r1, #1
 8026750:	001a      	movs	r2, r3
 8026752:	400a      	ands	r2, r1
 8026754:	420b      	tst	r3, r1
 8026756:	d00b      	beq.n	8026770 <__swsetup_r+0xac>
 8026758:	2200      	movs	r2, #0
 802675a:	60a2      	str	r2, [r4, #8]
 802675c:	6962      	ldr	r2, [r4, #20]
 802675e:	4252      	negs	r2, r2
 8026760:	61a2      	str	r2, [r4, #24]
 8026762:	2000      	movs	r0, #0
 8026764:	6922      	ldr	r2, [r4, #16]
 8026766:	4282      	cmp	r2, r0
 8026768:	d101      	bne.n	802676e <__swsetup_r+0xaa>
 802676a:	061a      	lsls	r2, r3, #24
 802676c:	d4be      	bmi.n	80266ec <__swsetup_r+0x28>
 802676e:	bd70      	pop	{r4, r5, r6, pc}
 8026770:	0799      	lsls	r1, r3, #30
 8026772:	d400      	bmi.n	8026776 <__swsetup_r+0xb2>
 8026774:	6962      	ldr	r2, [r4, #20]
 8026776:	60a2      	str	r2, [r4, #8]
 8026778:	e7f3      	b.n	8026762 <__swsetup_r+0x9e>
 802677a:	46c0      	nop			@ (mov r8, r8)
 802677c:	200003ec 	.word	0x200003ec

08026780 <memset>:
 8026780:	0003      	movs	r3, r0
 8026782:	1882      	adds	r2, r0, r2
 8026784:	4293      	cmp	r3, r2
 8026786:	d100      	bne.n	802678a <memset+0xa>
 8026788:	4770      	bx	lr
 802678a:	7019      	strb	r1, [r3, #0]
 802678c:	3301      	adds	r3, #1
 802678e:	e7f9      	b.n	8026784 <memset+0x4>

08026790 <strchr>:
 8026790:	b2c9      	uxtb	r1, r1
 8026792:	7803      	ldrb	r3, [r0, #0]
 8026794:	2b00      	cmp	r3, #0
 8026796:	d004      	beq.n	80267a2 <strchr+0x12>
 8026798:	428b      	cmp	r3, r1
 802679a:	d100      	bne.n	802679e <strchr+0xe>
 802679c:	4770      	bx	lr
 802679e:	3001      	adds	r0, #1
 80267a0:	e7f7      	b.n	8026792 <strchr+0x2>
 80267a2:	424b      	negs	r3, r1
 80267a4:	4159      	adcs	r1, r3
 80267a6:	4249      	negs	r1, r1
 80267a8:	4008      	ands	r0, r1
 80267aa:	e7f7      	b.n	802679c <strchr+0xc>

080267ac <strncmp>:
 80267ac:	b530      	push	{r4, r5, lr}
 80267ae:	0005      	movs	r5, r0
 80267b0:	1e10      	subs	r0, r2, #0
 80267b2:	d00b      	beq.n	80267cc <strncmp+0x20>
 80267b4:	2400      	movs	r4, #0
 80267b6:	3a01      	subs	r2, #1
 80267b8:	5d2b      	ldrb	r3, [r5, r4]
 80267ba:	5d08      	ldrb	r0, [r1, r4]
 80267bc:	4283      	cmp	r3, r0
 80267be:	d104      	bne.n	80267ca <strncmp+0x1e>
 80267c0:	4294      	cmp	r4, r2
 80267c2:	d002      	beq.n	80267ca <strncmp+0x1e>
 80267c4:	3401      	adds	r4, #1
 80267c6:	2b00      	cmp	r3, #0
 80267c8:	d1f6      	bne.n	80267b8 <strncmp+0xc>
 80267ca:	1a18      	subs	r0, r3, r0
 80267cc:	bd30      	pop	{r4, r5, pc}

080267ce <strncpy>:
 80267ce:	0003      	movs	r3, r0
 80267d0:	b530      	push	{r4, r5, lr}
 80267d2:	001d      	movs	r5, r3
 80267d4:	2a00      	cmp	r2, #0
 80267d6:	d006      	beq.n	80267e6 <strncpy+0x18>
 80267d8:	780c      	ldrb	r4, [r1, #0]
 80267da:	3a01      	subs	r2, #1
 80267dc:	3301      	adds	r3, #1
 80267de:	702c      	strb	r4, [r5, #0]
 80267e0:	3101      	adds	r1, #1
 80267e2:	2c00      	cmp	r4, #0
 80267e4:	d1f5      	bne.n	80267d2 <strncpy+0x4>
 80267e6:	2100      	movs	r1, #0
 80267e8:	189a      	adds	r2, r3, r2
 80267ea:	4293      	cmp	r3, r2
 80267ec:	d100      	bne.n	80267f0 <strncpy+0x22>
 80267ee:	bd30      	pop	{r4, r5, pc}
 80267f0:	7019      	strb	r1, [r3, #0]
 80267f2:	3301      	adds	r3, #1
 80267f4:	e7f9      	b.n	80267ea <strncpy+0x1c>

080267f6 <strstr>:
 80267f6:	780a      	ldrb	r2, [r1, #0]
 80267f8:	b530      	push	{r4, r5, lr}
 80267fa:	2a00      	cmp	r2, #0
 80267fc:	d10c      	bne.n	8026818 <strstr+0x22>
 80267fe:	bd30      	pop	{r4, r5, pc}
 8026800:	429a      	cmp	r2, r3
 8026802:	d108      	bne.n	8026816 <strstr+0x20>
 8026804:	2301      	movs	r3, #1
 8026806:	5ccc      	ldrb	r4, [r1, r3]
 8026808:	2c00      	cmp	r4, #0
 802680a:	d0f8      	beq.n	80267fe <strstr+0x8>
 802680c:	5cc5      	ldrb	r5, [r0, r3]
 802680e:	42a5      	cmp	r5, r4
 8026810:	d101      	bne.n	8026816 <strstr+0x20>
 8026812:	3301      	adds	r3, #1
 8026814:	e7f7      	b.n	8026806 <strstr+0x10>
 8026816:	3001      	adds	r0, #1
 8026818:	7803      	ldrb	r3, [r0, #0]
 802681a:	2b00      	cmp	r3, #0
 802681c:	d1f0      	bne.n	8026800 <strstr+0xa>
 802681e:	0018      	movs	r0, r3
 8026820:	e7ed      	b.n	80267fe <strstr+0x8>
	...

08026824 <_localeconv_r>:
 8026824:	4800      	ldr	r0, [pc, #0]	@ (8026828 <_localeconv_r+0x4>)
 8026826:	4770      	bx	lr
 8026828:	20000370 	.word	0x20000370

0802682c <_close_r>:
 802682c:	2300      	movs	r3, #0
 802682e:	b570      	push	{r4, r5, r6, lr}
 8026830:	4d06      	ldr	r5, [pc, #24]	@ (802684c <_close_r+0x20>)
 8026832:	0004      	movs	r4, r0
 8026834:	0008      	movs	r0, r1
 8026836:	602b      	str	r3, [r5, #0]
 8026838:	f7ec febc 	bl	80135b4 <_close>
 802683c:	1c43      	adds	r3, r0, #1
 802683e:	d103      	bne.n	8026848 <_close_r+0x1c>
 8026840:	682b      	ldr	r3, [r5, #0]
 8026842:	2b00      	cmp	r3, #0
 8026844:	d000      	beq.n	8026848 <_close_r+0x1c>
 8026846:	6023      	str	r3, [r4, #0]
 8026848:	bd70      	pop	{r4, r5, r6, pc}
 802684a:	46c0      	nop			@ (mov r8, r8)
 802684c:	20003908 	.word	0x20003908

08026850 <_lseek_r>:
 8026850:	b570      	push	{r4, r5, r6, lr}
 8026852:	0004      	movs	r4, r0
 8026854:	0008      	movs	r0, r1
 8026856:	0011      	movs	r1, r2
 8026858:	001a      	movs	r2, r3
 802685a:	2300      	movs	r3, #0
 802685c:	4d05      	ldr	r5, [pc, #20]	@ (8026874 <_lseek_r+0x24>)
 802685e:	602b      	str	r3, [r5, #0]
 8026860:	f7ec fec9 	bl	80135f6 <_lseek>
 8026864:	1c43      	adds	r3, r0, #1
 8026866:	d103      	bne.n	8026870 <_lseek_r+0x20>
 8026868:	682b      	ldr	r3, [r5, #0]
 802686a:	2b00      	cmp	r3, #0
 802686c:	d000      	beq.n	8026870 <_lseek_r+0x20>
 802686e:	6023      	str	r3, [r4, #0]
 8026870:	bd70      	pop	{r4, r5, r6, pc}
 8026872:	46c0      	nop			@ (mov r8, r8)
 8026874:	20003908 	.word	0x20003908

08026878 <_read_r>:
 8026878:	b570      	push	{r4, r5, r6, lr}
 802687a:	0004      	movs	r4, r0
 802687c:	0008      	movs	r0, r1
 802687e:	0011      	movs	r1, r2
 8026880:	001a      	movs	r2, r3
 8026882:	2300      	movs	r3, #0
 8026884:	4d05      	ldr	r5, [pc, #20]	@ (802689c <_read_r+0x24>)
 8026886:	602b      	str	r3, [r5, #0]
 8026888:	f7ec fe77 	bl	801357a <_read>
 802688c:	1c43      	adds	r3, r0, #1
 802688e:	d103      	bne.n	8026898 <_read_r+0x20>
 8026890:	682b      	ldr	r3, [r5, #0]
 8026892:	2b00      	cmp	r3, #0
 8026894:	d000      	beq.n	8026898 <_read_r+0x20>
 8026896:	6023      	str	r3, [r4, #0]
 8026898:	bd70      	pop	{r4, r5, r6, pc}
 802689a:	46c0      	nop			@ (mov r8, r8)
 802689c:	20003908 	.word	0x20003908

080268a0 <_write_r>:
 80268a0:	b570      	push	{r4, r5, r6, lr}
 80268a2:	0004      	movs	r4, r0
 80268a4:	0008      	movs	r0, r1
 80268a6:	0011      	movs	r1, r2
 80268a8:	001a      	movs	r2, r3
 80268aa:	2300      	movs	r3, #0
 80268ac:	4d05      	ldr	r5, [pc, #20]	@ (80268c4 <_write_r+0x24>)
 80268ae:	602b      	str	r3, [r5, #0]
 80268b0:	f7ed fb68 	bl	8013f84 <_write>
 80268b4:	1c43      	adds	r3, r0, #1
 80268b6:	d103      	bne.n	80268c0 <_write_r+0x20>
 80268b8:	682b      	ldr	r3, [r5, #0]
 80268ba:	2b00      	cmp	r3, #0
 80268bc:	d000      	beq.n	80268c0 <_write_r+0x20>
 80268be:	6023      	str	r3, [r4, #0]
 80268c0:	bd70      	pop	{r4, r5, r6, pc}
 80268c2:	46c0      	nop			@ (mov r8, r8)
 80268c4:	20003908 	.word	0x20003908

080268c8 <__errno>:
 80268c8:	4b01      	ldr	r3, [pc, #4]	@ (80268d0 <__errno+0x8>)
 80268ca:	6818      	ldr	r0, [r3, #0]
 80268cc:	4770      	bx	lr
 80268ce:	46c0      	nop			@ (mov r8, r8)
 80268d0:	200003ec 	.word	0x200003ec

080268d4 <__libc_init_array>:
 80268d4:	b570      	push	{r4, r5, r6, lr}
 80268d6:	2600      	movs	r6, #0
 80268d8:	4c0c      	ldr	r4, [pc, #48]	@ (802690c <__libc_init_array+0x38>)
 80268da:	4d0d      	ldr	r5, [pc, #52]	@ (8026910 <__libc_init_array+0x3c>)
 80268dc:	1b64      	subs	r4, r4, r5
 80268de:	10a4      	asrs	r4, r4, #2
 80268e0:	42a6      	cmp	r6, r4
 80268e2:	d109      	bne.n	80268f8 <__libc_init_array+0x24>
 80268e4:	2600      	movs	r6, #0
 80268e6:	f003 ffcb 	bl	802a880 <_init>
 80268ea:	4c0a      	ldr	r4, [pc, #40]	@ (8026914 <__libc_init_array+0x40>)
 80268ec:	4d0a      	ldr	r5, [pc, #40]	@ (8026918 <__libc_init_array+0x44>)
 80268ee:	1b64      	subs	r4, r4, r5
 80268f0:	10a4      	asrs	r4, r4, #2
 80268f2:	42a6      	cmp	r6, r4
 80268f4:	d105      	bne.n	8026902 <__libc_init_array+0x2e>
 80268f6:	bd70      	pop	{r4, r5, r6, pc}
 80268f8:	00b3      	lsls	r3, r6, #2
 80268fa:	58eb      	ldr	r3, [r5, r3]
 80268fc:	4798      	blx	r3
 80268fe:	3601      	adds	r6, #1
 8026900:	e7ee      	b.n	80268e0 <__libc_init_array+0xc>
 8026902:	00b3      	lsls	r3, r6, #2
 8026904:	58eb      	ldr	r3, [r5, r3]
 8026906:	4798      	blx	r3
 8026908:	3601      	adds	r6, #1
 802690a:	e7f2      	b.n	80268f2 <__libc_init_array+0x1e>
 802690c:	0802f298 	.word	0x0802f298
 8026910:	0802f298 	.word	0x0802f298
 8026914:	0802f29c 	.word	0x0802f29c
 8026918:	0802f298 	.word	0x0802f298

0802691c <__retarget_lock_init_recursive>:
 802691c:	4770      	bx	lr

0802691e <__retarget_lock_acquire_recursive>:
 802691e:	4770      	bx	lr

08026920 <__retarget_lock_release_recursive>:
 8026920:	4770      	bx	lr

08026922 <memchr>:
 8026922:	b2c9      	uxtb	r1, r1
 8026924:	1882      	adds	r2, r0, r2
 8026926:	4290      	cmp	r0, r2
 8026928:	d101      	bne.n	802692e <memchr+0xc>
 802692a:	2000      	movs	r0, #0
 802692c:	4770      	bx	lr
 802692e:	7803      	ldrb	r3, [r0, #0]
 8026930:	428b      	cmp	r3, r1
 8026932:	d0fb      	beq.n	802692c <memchr+0xa>
 8026934:	3001      	adds	r0, #1
 8026936:	e7f6      	b.n	8026926 <memchr+0x4>

08026938 <memcpy>:
 8026938:	2300      	movs	r3, #0
 802693a:	b510      	push	{r4, lr}
 802693c:	429a      	cmp	r2, r3
 802693e:	d100      	bne.n	8026942 <memcpy+0xa>
 8026940:	bd10      	pop	{r4, pc}
 8026942:	5ccc      	ldrb	r4, [r1, r3]
 8026944:	54c4      	strb	r4, [r0, r3]
 8026946:	3301      	adds	r3, #1
 8026948:	e7f8      	b.n	802693c <memcpy+0x4>
	...

0802694c <nan>:
 802694c:	2000      	movs	r0, #0
 802694e:	4901      	ldr	r1, [pc, #4]	@ (8026954 <nan+0x8>)
 8026950:	4770      	bx	lr
 8026952:	46c0      	nop			@ (mov r8, r8)
 8026954:	7ff80000 	.word	0x7ff80000

08026958 <quorem>:
 8026958:	b5f0      	push	{r4, r5, r6, r7, lr}
 802695a:	6903      	ldr	r3, [r0, #16]
 802695c:	690c      	ldr	r4, [r1, #16]
 802695e:	b089      	sub	sp, #36	@ 0x24
 8026960:	9003      	str	r0, [sp, #12]
 8026962:	9106      	str	r1, [sp, #24]
 8026964:	2000      	movs	r0, #0
 8026966:	42a3      	cmp	r3, r4
 8026968:	db63      	blt.n	8026a32 <quorem+0xda>
 802696a:	000b      	movs	r3, r1
 802696c:	3c01      	subs	r4, #1
 802696e:	3314      	adds	r3, #20
 8026970:	00a5      	lsls	r5, r4, #2
 8026972:	9304      	str	r3, [sp, #16]
 8026974:	195b      	adds	r3, r3, r5
 8026976:	9305      	str	r3, [sp, #20]
 8026978:	9b03      	ldr	r3, [sp, #12]
 802697a:	3314      	adds	r3, #20
 802697c:	9301      	str	r3, [sp, #4]
 802697e:	195d      	adds	r5, r3, r5
 8026980:	9b05      	ldr	r3, [sp, #20]
 8026982:	682f      	ldr	r7, [r5, #0]
 8026984:	681e      	ldr	r6, [r3, #0]
 8026986:	0038      	movs	r0, r7
 8026988:	3601      	adds	r6, #1
 802698a:	0031      	movs	r1, r6
 802698c:	f7d9 fc0a 	bl	80001a4 <__udivsi3>
 8026990:	9002      	str	r0, [sp, #8]
 8026992:	42b7      	cmp	r7, r6
 8026994:	d327      	bcc.n	80269e6 <quorem+0x8e>
 8026996:	9b04      	ldr	r3, [sp, #16]
 8026998:	2700      	movs	r7, #0
 802699a:	469c      	mov	ip, r3
 802699c:	9e01      	ldr	r6, [sp, #4]
 802699e:	9707      	str	r7, [sp, #28]
 80269a0:	4662      	mov	r2, ip
 80269a2:	ca08      	ldmia	r2!, {r3}
 80269a4:	6830      	ldr	r0, [r6, #0]
 80269a6:	4694      	mov	ip, r2
 80269a8:	9a02      	ldr	r2, [sp, #8]
 80269aa:	b299      	uxth	r1, r3
 80269ac:	4351      	muls	r1, r2
 80269ae:	0c1b      	lsrs	r3, r3, #16
 80269b0:	4353      	muls	r3, r2
 80269b2:	19c9      	adds	r1, r1, r7
 80269b4:	0c0a      	lsrs	r2, r1, #16
 80269b6:	189b      	adds	r3, r3, r2
 80269b8:	b289      	uxth	r1, r1
 80269ba:	b282      	uxth	r2, r0
 80269bc:	1a52      	subs	r2, r2, r1
 80269be:	9907      	ldr	r1, [sp, #28]
 80269c0:	0c1f      	lsrs	r7, r3, #16
 80269c2:	1852      	adds	r2, r2, r1
 80269c4:	0c00      	lsrs	r0, r0, #16
 80269c6:	b29b      	uxth	r3, r3
 80269c8:	1411      	asrs	r1, r2, #16
 80269ca:	1ac3      	subs	r3, r0, r3
 80269cc:	185b      	adds	r3, r3, r1
 80269ce:	1419      	asrs	r1, r3, #16
 80269d0:	b292      	uxth	r2, r2
 80269d2:	041b      	lsls	r3, r3, #16
 80269d4:	431a      	orrs	r2, r3
 80269d6:	9b05      	ldr	r3, [sp, #20]
 80269d8:	9107      	str	r1, [sp, #28]
 80269da:	c604      	stmia	r6!, {r2}
 80269dc:	4563      	cmp	r3, ip
 80269de:	d2df      	bcs.n	80269a0 <quorem+0x48>
 80269e0:	682b      	ldr	r3, [r5, #0]
 80269e2:	2b00      	cmp	r3, #0
 80269e4:	d02b      	beq.n	8026a3e <quorem+0xe6>
 80269e6:	9906      	ldr	r1, [sp, #24]
 80269e8:	9803      	ldr	r0, [sp, #12]
 80269ea:	f001 fd6f 	bl	80284cc <__mcmp>
 80269ee:	2800      	cmp	r0, #0
 80269f0:	db1e      	blt.n	8026a30 <quorem+0xd8>
 80269f2:	2600      	movs	r6, #0
 80269f4:	9d01      	ldr	r5, [sp, #4]
 80269f6:	9904      	ldr	r1, [sp, #16]
 80269f8:	c901      	ldmia	r1!, {r0}
 80269fa:	682b      	ldr	r3, [r5, #0]
 80269fc:	b287      	uxth	r7, r0
 80269fe:	b29a      	uxth	r2, r3
 8026a00:	1bd2      	subs	r2, r2, r7
 8026a02:	1992      	adds	r2, r2, r6
 8026a04:	0c00      	lsrs	r0, r0, #16
 8026a06:	0c1b      	lsrs	r3, r3, #16
 8026a08:	1a1b      	subs	r3, r3, r0
 8026a0a:	1410      	asrs	r0, r2, #16
 8026a0c:	181b      	adds	r3, r3, r0
 8026a0e:	141e      	asrs	r6, r3, #16
 8026a10:	b292      	uxth	r2, r2
 8026a12:	041b      	lsls	r3, r3, #16
 8026a14:	431a      	orrs	r2, r3
 8026a16:	9b05      	ldr	r3, [sp, #20]
 8026a18:	c504      	stmia	r5!, {r2}
 8026a1a:	428b      	cmp	r3, r1
 8026a1c:	d2ec      	bcs.n	80269f8 <quorem+0xa0>
 8026a1e:	9a01      	ldr	r2, [sp, #4]
 8026a20:	00a3      	lsls	r3, r4, #2
 8026a22:	18d3      	adds	r3, r2, r3
 8026a24:	681a      	ldr	r2, [r3, #0]
 8026a26:	2a00      	cmp	r2, #0
 8026a28:	d014      	beq.n	8026a54 <quorem+0xfc>
 8026a2a:	9b02      	ldr	r3, [sp, #8]
 8026a2c:	3301      	adds	r3, #1
 8026a2e:	9302      	str	r3, [sp, #8]
 8026a30:	9802      	ldr	r0, [sp, #8]
 8026a32:	b009      	add	sp, #36	@ 0x24
 8026a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026a36:	682b      	ldr	r3, [r5, #0]
 8026a38:	2b00      	cmp	r3, #0
 8026a3a:	d104      	bne.n	8026a46 <quorem+0xee>
 8026a3c:	3c01      	subs	r4, #1
 8026a3e:	9b01      	ldr	r3, [sp, #4]
 8026a40:	3d04      	subs	r5, #4
 8026a42:	42ab      	cmp	r3, r5
 8026a44:	d3f7      	bcc.n	8026a36 <quorem+0xde>
 8026a46:	9b03      	ldr	r3, [sp, #12]
 8026a48:	611c      	str	r4, [r3, #16]
 8026a4a:	e7cc      	b.n	80269e6 <quorem+0x8e>
 8026a4c:	681a      	ldr	r2, [r3, #0]
 8026a4e:	2a00      	cmp	r2, #0
 8026a50:	d104      	bne.n	8026a5c <quorem+0x104>
 8026a52:	3c01      	subs	r4, #1
 8026a54:	9a01      	ldr	r2, [sp, #4]
 8026a56:	3b04      	subs	r3, #4
 8026a58:	429a      	cmp	r2, r3
 8026a5a:	d3f7      	bcc.n	8026a4c <quorem+0xf4>
 8026a5c:	9b03      	ldr	r3, [sp, #12]
 8026a5e:	611c      	str	r4, [r3, #16]
 8026a60:	e7e3      	b.n	8026a2a <quorem+0xd2>
	...

08026a64 <_dtoa_r>:
 8026a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026a66:	0014      	movs	r4, r2
 8026a68:	001d      	movs	r5, r3
 8026a6a:	69c6      	ldr	r6, [r0, #28]
 8026a6c:	b09d      	sub	sp, #116	@ 0x74
 8026a6e:	940a      	str	r4, [sp, #40]	@ 0x28
 8026a70:	950b      	str	r5, [sp, #44]	@ 0x2c
 8026a72:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8026a74:	9003      	str	r0, [sp, #12]
 8026a76:	2e00      	cmp	r6, #0
 8026a78:	d10f      	bne.n	8026a9a <_dtoa_r+0x36>
 8026a7a:	2010      	movs	r0, #16
 8026a7c:	f001 f986 	bl	8027d8c <malloc>
 8026a80:	9b03      	ldr	r3, [sp, #12]
 8026a82:	1e02      	subs	r2, r0, #0
 8026a84:	61d8      	str	r0, [r3, #28]
 8026a86:	d104      	bne.n	8026a92 <_dtoa_r+0x2e>
 8026a88:	21ef      	movs	r1, #239	@ 0xef
 8026a8a:	4bc7      	ldr	r3, [pc, #796]	@ (8026da8 <_dtoa_r+0x344>)
 8026a8c:	48c7      	ldr	r0, [pc, #796]	@ (8026dac <_dtoa_r+0x348>)
 8026a8e:	f002 fb23 	bl	80290d8 <__assert_func>
 8026a92:	6046      	str	r6, [r0, #4]
 8026a94:	6086      	str	r6, [r0, #8]
 8026a96:	6006      	str	r6, [r0, #0]
 8026a98:	60c6      	str	r6, [r0, #12]
 8026a9a:	9b03      	ldr	r3, [sp, #12]
 8026a9c:	69db      	ldr	r3, [r3, #28]
 8026a9e:	6819      	ldr	r1, [r3, #0]
 8026aa0:	2900      	cmp	r1, #0
 8026aa2:	d00b      	beq.n	8026abc <_dtoa_r+0x58>
 8026aa4:	685a      	ldr	r2, [r3, #4]
 8026aa6:	2301      	movs	r3, #1
 8026aa8:	4093      	lsls	r3, r2
 8026aaa:	604a      	str	r2, [r1, #4]
 8026aac:	608b      	str	r3, [r1, #8]
 8026aae:	9803      	ldr	r0, [sp, #12]
 8026ab0:	f001 fa7e 	bl	8027fb0 <_Bfree>
 8026ab4:	2200      	movs	r2, #0
 8026ab6:	9b03      	ldr	r3, [sp, #12]
 8026ab8:	69db      	ldr	r3, [r3, #28]
 8026aba:	601a      	str	r2, [r3, #0]
 8026abc:	2d00      	cmp	r5, #0
 8026abe:	da1e      	bge.n	8026afe <_dtoa_r+0x9a>
 8026ac0:	2301      	movs	r3, #1
 8026ac2:	603b      	str	r3, [r7, #0]
 8026ac4:	006b      	lsls	r3, r5, #1
 8026ac6:	085b      	lsrs	r3, r3, #1
 8026ac8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026aca:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026acc:	4bb8      	ldr	r3, [pc, #736]	@ (8026db0 <_dtoa_r+0x34c>)
 8026ace:	4ab8      	ldr	r2, [pc, #736]	@ (8026db0 <_dtoa_r+0x34c>)
 8026ad0:	403b      	ands	r3, r7
 8026ad2:	4293      	cmp	r3, r2
 8026ad4:	d116      	bne.n	8026b04 <_dtoa_r+0xa0>
 8026ad6:	4bb7      	ldr	r3, [pc, #732]	@ (8026db4 <_dtoa_r+0x350>)
 8026ad8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026ada:	6013      	str	r3, [r2, #0]
 8026adc:	033b      	lsls	r3, r7, #12
 8026ade:	0b1b      	lsrs	r3, r3, #12
 8026ae0:	4323      	orrs	r3, r4
 8026ae2:	d101      	bne.n	8026ae8 <_dtoa_r+0x84>
 8026ae4:	f000 fd80 	bl	80275e8 <_dtoa_r+0xb84>
 8026ae8:	4bb3      	ldr	r3, [pc, #716]	@ (8026db8 <_dtoa_r+0x354>)
 8026aea:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026aec:	9308      	str	r3, [sp, #32]
 8026aee:	2a00      	cmp	r2, #0
 8026af0:	d002      	beq.n	8026af8 <_dtoa_r+0x94>
 8026af2:	4bb2      	ldr	r3, [pc, #712]	@ (8026dbc <_dtoa_r+0x358>)
 8026af4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026af6:	6013      	str	r3, [r2, #0]
 8026af8:	9808      	ldr	r0, [sp, #32]
 8026afa:	b01d      	add	sp, #116	@ 0x74
 8026afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026afe:	2300      	movs	r3, #0
 8026b00:	603b      	str	r3, [r7, #0]
 8026b02:	e7e2      	b.n	8026aca <_dtoa_r+0x66>
 8026b04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026b06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026b08:	9212      	str	r2, [sp, #72]	@ 0x48
 8026b0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026b0c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026b0e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026b10:	2200      	movs	r2, #0
 8026b12:	2300      	movs	r3, #0
 8026b14:	f7d9 fccc 	bl	80004b0 <__aeabi_dcmpeq>
 8026b18:	1e06      	subs	r6, r0, #0
 8026b1a:	d00b      	beq.n	8026b34 <_dtoa_r+0xd0>
 8026b1c:	2301      	movs	r3, #1
 8026b1e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026b20:	6013      	str	r3, [r2, #0]
 8026b22:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026b24:	2b00      	cmp	r3, #0
 8026b26:	d002      	beq.n	8026b2e <_dtoa_r+0xca>
 8026b28:	4ba5      	ldr	r3, [pc, #660]	@ (8026dc0 <_dtoa_r+0x35c>)
 8026b2a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026b2c:	6013      	str	r3, [r2, #0]
 8026b2e:	4ba5      	ldr	r3, [pc, #660]	@ (8026dc4 <_dtoa_r+0x360>)
 8026b30:	9308      	str	r3, [sp, #32]
 8026b32:	e7e1      	b.n	8026af8 <_dtoa_r+0x94>
 8026b34:	ab1a      	add	r3, sp, #104	@ 0x68
 8026b36:	9301      	str	r3, [sp, #4]
 8026b38:	ab1b      	add	r3, sp, #108	@ 0x6c
 8026b3a:	9300      	str	r3, [sp, #0]
 8026b3c:	9803      	ldr	r0, [sp, #12]
 8026b3e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026b40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026b42:	f001 fde5 	bl	8028710 <__d2b>
 8026b46:	007a      	lsls	r2, r7, #1
 8026b48:	9005      	str	r0, [sp, #20]
 8026b4a:	0d52      	lsrs	r2, r2, #21
 8026b4c:	d100      	bne.n	8026b50 <_dtoa_r+0xec>
 8026b4e:	e07b      	b.n	8026c48 <_dtoa_r+0x1e4>
 8026b50:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026b52:	9618      	str	r6, [sp, #96]	@ 0x60
 8026b54:	0319      	lsls	r1, r3, #12
 8026b56:	4b9c      	ldr	r3, [pc, #624]	@ (8026dc8 <_dtoa_r+0x364>)
 8026b58:	0b09      	lsrs	r1, r1, #12
 8026b5a:	430b      	orrs	r3, r1
 8026b5c:	499b      	ldr	r1, [pc, #620]	@ (8026dcc <_dtoa_r+0x368>)
 8026b5e:	1857      	adds	r7, r2, r1
 8026b60:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026b62:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026b64:	0019      	movs	r1, r3
 8026b66:	2200      	movs	r2, #0
 8026b68:	4b99      	ldr	r3, [pc, #612]	@ (8026dd0 <_dtoa_r+0x36c>)
 8026b6a:	f7dc f9d9 	bl	8002f20 <__aeabi_dsub>
 8026b6e:	4a99      	ldr	r2, [pc, #612]	@ (8026dd4 <_dtoa_r+0x370>)
 8026b70:	4b99      	ldr	r3, [pc, #612]	@ (8026dd8 <_dtoa_r+0x374>)
 8026b72:	f7db feef 	bl	8002954 <__aeabi_dmul>
 8026b76:	4a99      	ldr	r2, [pc, #612]	@ (8026ddc <_dtoa_r+0x378>)
 8026b78:	4b99      	ldr	r3, [pc, #612]	@ (8026de0 <_dtoa_r+0x37c>)
 8026b7a:	f7da feeb 	bl	8001954 <__aeabi_dadd>
 8026b7e:	0004      	movs	r4, r0
 8026b80:	0038      	movs	r0, r7
 8026b82:	000d      	movs	r5, r1
 8026b84:	f7dc fe34 	bl	80037f0 <__aeabi_i2d>
 8026b88:	4a96      	ldr	r2, [pc, #600]	@ (8026de4 <_dtoa_r+0x380>)
 8026b8a:	4b97      	ldr	r3, [pc, #604]	@ (8026de8 <_dtoa_r+0x384>)
 8026b8c:	f7db fee2 	bl	8002954 <__aeabi_dmul>
 8026b90:	0002      	movs	r2, r0
 8026b92:	000b      	movs	r3, r1
 8026b94:	0020      	movs	r0, r4
 8026b96:	0029      	movs	r1, r5
 8026b98:	f7da fedc 	bl	8001954 <__aeabi_dadd>
 8026b9c:	0004      	movs	r4, r0
 8026b9e:	000d      	movs	r5, r1
 8026ba0:	f7dc fdea 	bl	8003778 <__aeabi_d2iz>
 8026ba4:	2200      	movs	r2, #0
 8026ba6:	9004      	str	r0, [sp, #16]
 8026ba8:	2300      	movs	r3, #0
 8026baa:	0020      	movs	r0, r4
 8026bac:	0029      	movs	r1, r5
 8026bae:	f7d9 fc85 	bl	80004bc <__aeabi_dcmplt>
 8026bb2:	2800      	cmp	r0, #0
 8026bb4:	d00b      	beq.n	8026bce <_dtoa_r+0x16a>
 8026bb6:	9804      	ldr	r0, [sp, #16]
 8026bb8:	f7dc fe1a 	bl	80037f0 <__aeabi_i2d>
 8026bbc:	002b      	movs	r3, r5
 8026bbe:	0022      	movs	r2, r4
 8026bc0:	f7d9 fc76 	bl	80004b0 <__aeabi_dcmpeq>
 8026bc4:	4243      	negs	r3, r0
 8026bc6:	4158      	adcs	r0, r3
 8026bc8:	9b04      	ldr	r3, [sp, #16]
 8026bca:	1a1b      	subs	r3, r3, r0
 8026bcc:	9304      	str	r3, [sp, #16]
 8026bce:	2301      	movs	r3, #1
 8026bd0:	9315      	str	r3, [sp, #84]	@ 0x54
 8026bd2:	9b04      	ldr	r3, [sp, #16]
 8026bd4:	2b16      	cmp	r3, #22
 8026bd6:	d810      	bhi.n	8026bfa <_dtoa_r+0x196>
 8026bd8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026bda:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026bdc:	9a04      	ldr	r2, [sp, #16]
 8026bde:	4b83      	ldr	r3, [pc, #524]	@ (8026dec <_dtoa_r+0x388>)
 8026be0:	00d2      	lsls	r2, r2, #3
 8026be2:	189b      	adds	r3, r3, r2
 8026be4:	681a      	ldr	r2, [r3, #0]
 8026be6:	685b      	ldr	r3, [r3, #4]
 8026be8:	f7d9 fc68 	bl	80004bc <__aeabi_dcmplt>
 8026bec:	2800      	cmp	r0, #0
 8026bee:	d047      	beq.n	8026c80 <_dtoa_r+0x21c>
 8026bf0:	9b04      	ldr	r3, [sp, #16]
 8026bf2:	3b01      	subs	r3, #1
 8026bf4:	9304      	str	r3, [sp, #16]
 8026bf6:	2300      	movs	r3, #0
 8026bf8:	9315      	str	r3, [sp, #84]	@ 0x54
 8026bfa:	2200      	movs	r2, #0
 8026bfc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8026bfe:	9206      	str	r2, [sp, #24]
 8026c00:	1bdb      	subs	r3, r3, r7
 8026c02:	1e5a      	subs	r2, r3, #1
 8026c04:	d53e      	bpl.n	8026c84 <_dtoa_r+0x220>
 8026c06:	2201      	movs	r2, #1
 8026c08:	1ad3      	subs	r3, r2, r3
 8026c0a:	9306      	str	r3, [sp, #24]
 8026c0c:	2300      	movs	r3, #0
 8026c0e:	930d      	str	r3, [sp, #52]	@ 0x34
 8026c10:	9b04      	ldr	r3, [sp, #16]
 8026c12:	2b00      	cmp	r3, #0
 8026c14:	db38      	blt.n	8026c88 <_dtoa_r+0x224>
 8026c16:	9a04      	ldr	r2, [sp, #16]
 8026c18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026c1a:	4694      	mov	ip, r2
 8026c1c:	4463      	add	r3, ip
 8026c1e:	930d      	str	r3, [sp, #52]	@ 0x34
 8026c20:	2300      	movs	r3, #0
 8026c22:	9214      	str	r2, [sp, #80]	@ 0x50
 8026c24:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026c26:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026c28:	2401      	movs	r4, #1
 8026c2a:	2b09      	cmp	r3, #9
 8026c2c:	d862      	bhi.n	8026cf4 <_dtoa_r+0x290>
 8026c2e:	2b05      	cmp	r3, #5
 8026c30:	dd02      	ble.n	8026c38 <_dtoa_r+0x1d4>
 8026c32:	2400      	movs	r4, #0
 8026c34:	3b04      	subs	r3, #4
 8026c36:	9322      	str	r3, [sp, #136]	@ 0x88
 8026c38:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026c3a:	1e98      	subs	r0, r3, #2
 8026c3c:	2803      	cmp	r0, #3
 8026c3e:	d863      	bhi.n	8026d08 <_dtoa_r+0x2a4>
 8026c40:	f7d9 fa9c 	bl	800017c <__gnu_thumb1_case_uqi>
 8026c44:	2b385654 	.word	0x2b385654
 8026c48:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026c4a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8026c4c:	18f6      	adds	r6, r6, r3
 8026c4e:	4b68      	ldr	r3, [pc, #416]	@ (8026df0 <_dtoa_r+0x38c>)
 8026c50:	18f2      	adds	r2, r6, r3
 8026c52:	2a20      	cmp	r2, #32
 8026c54:	dd0f      	ble.n	8026c76 <_dtoa_r+0x212>
 8026c56:	2340      	movs	r3, #64	@ 0x40
 8026c58:	1a9b      	subs	r3, r3, r2
 8026c5a:	409f      	lsls	r7, r3
 8026c5c:	4b65      	ldr	r3, [pc, #404]	@ (8026df4 <_dtoa_r+0x390>)
 8026c5e:	0038      	movs	r0, r7
 8026c60:	18f3      	adds	r3, r6, r3
 8026c62:	40dc      	lsrs	r4, r3
 8026c64:	4320      	orrs	r0, r4
 8026c66:	f7dc fdf1 	bl	800384c <__aeabi_ui2d>
 8026c6a:	2201      	movs	r2, #1
 8026c6c:	4b62      	ldr	r3, [pc, #392]	@ (8026df8 <_dtoa_r+0x394>)
 8026c6e:	1e77      	subs	r7, r6, #1
 8026c70:	18cb      	adds	r3, r1, r3
 8026c72:	9218      	str	r2, [sp, #96]	@ 0x60
 8026c74:	e776      	b.n	8026b64 <_dtoa_r+0x100>
 8026c76:	2320      	movs	r3, #32
 8026c78:	0020      	movs	r0, r4
 8026c7a:	1a9b      	subs	r3, r3, r2
 8026c7c:	4098      	lsls	r0, r3
 8026c7e:	e7f2      	b.n	8026c66 <_dtoa_r+0x202>
 8026c80:	9015      	str	r0, [sp, #84]	@ 0x54
 8026c82:	e7ba      	b.n	8026bfa <_dtoa_r+0x196>
 8026c84:	920d      	str	r2, [sp, #52]	@ 0x34
 8026c86:	e7c3      	b.n	8026c10 <_dtoa_r+0x1ac>
 8026c88:	9b06      	ldr	r3, [sp, #24]
 8026c8a:	9a04      	ldr	r2, [sp, #16]
 8026c8c:	1a9b      	subs	r3, r3, r2
 8026c8e:	9306      	str	r3, [sp, #24]
 8026c90:	4253      	negs	r3, r2
 8026c92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026c94:	2300      	movs	r3, #0
 8026c96:	9314      	str	r3, [sp, #80]	@ 0x50
 8026c98:	e7c5      	b.n	8026c26 <_dtoa_r+0x1c2>
 8026c9a:	2301      	movs	r3, #1
 8026c9c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8026c9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8026ca0:	4694      	mov	ip, r2
 8026ca2:	9b04      	ldr	r3, [sp, #16]
 8026ca4:	4463      	add	r3, ip
 8026ca6:	930e      	str	r3, [sp, #56]	@ 0x38
 8026ca8:	3301      	adds	r3, #1
 8026caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8026cac:	2b00      	cmp	r3, #0
 8026cae:	dc08      	bgt.n	8026cc2 <_dtoa_r+0x25e>
 8026cb0:	2301      	movs	r3, #1
 8026cb2:	e006      	b.n	8026cc2 <_dtoa_r+0x25e>
 8026cb4:	2301      	movs	r3, #1
 8026cb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8026cb8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026cba:	2b00      	cmp	r3, #0
 8026cbc:	dd28      	ble.n	8026d10 <_dtoa_r+0x2ac>
 8026cbe:	930e      	str	r3, [sp, #56]	@ 0x38
 8026cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8026cc2:	9a03      	ldr	r2, [sp, #12]
 8026cc4:	2100      	movs	r1, #0
 8026cc6:	69d0      	ldr	r0, [r2, #28]
 8026cc8:	2204      	movs	r2, #4
 8026cca:	0015      	movs	r5, r2
 8026ccc:	3514      	adds	r5, #20
 8026cce:	429d      	cmp	r5, r3
 8026cd0:	d923      	bls.n	8026d1a <_dtoa_r+0x2b6>
 8026cd2:	6041      	str	r1, [r0, #4]
 8026cd4:	9803      	ldr	r0, [sp, #12]
 8026cd6:	f001 f927 	bl	8027f28 <_Balloc>
 8026cda:	9008      	str	r0, [sp, #32]
 8026cdc:	2800      	cmp	r0, #0
 8026cde:	d11f      	bne.n	8026d20 <_dtoa_r+0x2bc>
 8026ce0:	21b0      	movs	r1, #176	@ 0xb0
 8026ce2:	4b46      	ldr	r3, [pc, #280]	@ (8026dfc <_dtoa_r+0x398>)
 8026ce4:	4831      	ldr	r0, [pc, #196]	@ (8026dac <_dtoa_r+0x348>)
 8026ce6:	9a08      	ldr	r2, [sp, #32]
 8026ce8:	31ff      	adds	r1, #255	@ 0xff
 8026cea:	e6d0      	b.n	8026a8e <_dtoa_r+0x2a>
 8026cec:	2300      	movs	r3, #0
 8026cee:	e7e2      	b.n	8026cb6 <_dtoa_r+0x252>
 8026cf0:	2300      	movs	r3, #0
 8026cf2:	e7d3      	b.n	8026c9c <_dtoa_r+0x238>
 8026cf4:	2300      	movs	r3, #0
 8026cf6:	9410      	str	r4, [sp, #64]	@ 0x40
 8026cf8:	9322      	str	r3, [sp, #136]	@ 0x88
 8026cfa:	3b01      	subs	r3, #1
 8026cfc:	2200      	movs	r2, #0
 8026cfe:	930e      	str	r3, [sp, #56]	@ 0x38
 8026d00:	9309      	str	r3, [sp, #36]	@ 0x24
 8026d02:	3313      	adds	r3, #19
 8026d04:	9223      	str	r2, [sp, #140]	@ 0x8c
 8026d06:	e7dc      	b.n	8026cc2 <_dtoa_r+0x25e>
 8026d08:	2301      	movs	r3, #1
 8026d0a:	9310      	str	r3, [sp, #64]	@ 0x40
 8026d0c:	3b02      	subs	r3, #2
 8026d0e:	e7f5      	b.n	8026cfc <_dtoa_r+0x298>
 8026d10:	2301      	movs	r3, #1
 8026d12:	001a      	movs	r2, r3
 8026d14:	930e      	str	r3, [sp, #56]	@ 0x38
 8026d16:	9309      	str	r3, [sp, #36]	@ 0x24
 8026d18:	e7f4      	b.n	8026d04 <_dtoa_r+0x2a0>
 8026d1a:	3101      	adds	r1, #1
 8026d1c:	0052      	lsls	r2, r2, #1
 8026d1e:	e7d4      	b.n	8026cca <_dtoa_r+0x266>
 8026d20:	9b03      	ldr	r3, [sp, #12]
 8026d22:	9a08      	ldr	r2, [sp, #32]
 8026d24:	69db      	ldr	r3, [r3, #28]
 8026d26:	601a      	str	r2, [r3, #0]
 8026d28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026d2a:	2b0e      	cmp	r3, #14
 8026d2c:	d900      	bls.n	8026d30 <_dtoa_r+0x2cc>
 8026d2e:	e0d6      	b.n	8026ede <_dtoa_r+0x47a>
 8026d30:	2c00      	cmp	r4, #0
 8026d32:	d100      	bne.n	8026d36 <_dtoa_r+0x2d2>
 8026d34:	e0d3      	b.n	8026ede <_dtoa_r+0x47a>
 8026d36:	9b04      	ldr	r3, [sp, #16]
 8026d38:	2b00      	cmp	r3, #0
 8026d3a:	dd63      	ble.n	8026e04 <_dtoa_r+0x3a0>
 8026d3c:	210f      	movs	r1, #15
 8026d3e:	9a04      	ldr	r2, [sp, #16]
 8026d40:	4b2a      	ldr	r3, [pc, #168]	@ (8026dec <_dtoa_r+0x388>)
 8026d42:	400a      	ands	r2, r1
 8026d44:	00d2      	lsls	r2, r2, #3
 8026d46:	189b      	adds	r3, r3, r2
 8026d48:	681e      	ldr	r6, [r3, #0]
 8026d4a:	685f      	ldr	r7, [r3, #4]
 8026d4c:	9b04      	ldr	r3, [sp, #16]
 8026d4e:	2402      	movs	r4, #2
 8026d50:	111d      	asrs	r5, r3, #4
 8026d52:	05db      	lsls	r3, r3, #23
 8026d54:	d50a      	bpl.n	8026d6c <_dtoa_r+0x308>
 8026d56:	4b2a      	ldr	r3, [pc, #168]	@ (8026e00 <_dtoa_r+0x39c>)
 8026d58:	400d      	ands	r5, r1
 8026d5a:	6a1a      	ldr	r2, [r3, #32]
 8026d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8026d5e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026d60:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026d62:	f7db f9bd 	bl	80020e0 <__aeabi_ddiv>
 8026d66:	900a      	str	r0, [sp, #40]	@ 0x28
 8026d68:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026d6a:	3401      	adds	r4, #1
 8026d6c:	4b24      	ldr	r3, [pc, #144]	@ (8026e00 <_dtoa_r+0x39c>)
 8026d6e:	930c      	str	r3, [sp, #48]	@ 0x30
 8026d70:	2d00      	cmp	r5, #0
 8026d72:	d108      	bne.n	8026d86 <_dtoa_r+0x322>
 8026d74:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026d76:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026d78:	0032      	movs	r2, r6
 8026d7a:	003b      	movs	r3, r7
 8026d7c:	f7db f9b0 	bl	80020e0 <__aeabi_ddiv>
 8026d80:	900a      	str	r0, [sp, #40]	@ 0x28
 8026d82:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026d84:	e059      	b.n	8026e3a <_dtoa_r+0x3d6>
 8026d86:	2301      	movs	r3, #1
 8026d88:	421d      	tst	r5, r3
 8026d8a:	d009      	beq.n	8026da0 <_dtoa_r+0x33c>
 8026d8c:	18e4      	adds	r4, r4, r3
 8026d8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026d90:	0030      	movs	r0, r6
 8026d92:	681a      	ldr	r2, [r3, #0]
 8026d94:	685b      	ldr	r3, [r3, #4]
 8026d96:	0039      	movs	r1, r7
 8026d98:	f7db fddc 	bl	8002954 <__aeabi_dmul>
 8026d9c:	0006      	movs	r6, r0
 8026d9e:	000f      	movs	r7, r1
 8026da0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026da2:	106d      	asrs	r5, r5, #1
 8026da4:	3308      	adds	r3, #8
 8026da6:	e7e2      	b.n	8026d6e <_dtoa_r+0x30a>
 8026da8:	0802ee53 	.word	0x0802ee53
 8026dac:	0802ee6a 	.word	0x0802ee6a
 8026db0:	7ff00000 	.word	0x7ff00000
 8026db4:	0000270f 	.word	0x0000270f
 8026db8:	0802ee4f 	.word	0x0802ee4f
 8026dbc:	0802ee52 	.word	0x0802ee52
 8026dc0:	0802ee1b 	.word	0x0802ee1b
 8026dc4:	0802ee1a 	.word	0x0802ee1a
 8026dc8:	3ff00000 	.word	0x3ff00000
 8026dcc:	fffffc01 	.word	0xfffffc01
 8026dd0:	3ff80000 	.word	0x3ff80000
 8026dd4:	636f4361 	.word	0x636f4361
 8026dd8:	3fd287a7 	.word	0x3fd287a7
 8026ddc:	8b60c8b3 	.word	0x8b60c8b3
 8026de0:	3fc68a28 	.word	0x3fc68a28
 8026de4:	509f79fb 	.word	0x509f79fb
 8026de8:	3fd34413 	.word	0x3fd34413
 8026dec:	0802f168 	.word	0x0802f168
 8026df0:	00000432 	.word	0x00000432
 8026df4:	00000412 	.word	0x00000412
 8026df8:	fe100000 	.word	0xfe100000
 8026dfc:	0802eec2 	.word	0x0802eec2
 8026e00:	0802f140 	.word	0x0802f140
 8026e04:	9b04      	ldr	r3, [sp, #16]
 8026e06:	2402      	movs	r4, #2
 8026e08:	2b00      	cmp	r3, #0
 8026e0a:	d016      	beq.n	8026e3a <_dtoa_r+0x3d6>
 8026e0c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026e0e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026e10:	220f      	movs	r2, #15
 8026e12:	425d      	negs	r5, r3
 8026e14:	402a      	ands	r2, r5
 8026e16:	4bd5      	ldr	r3, [pc, #852]	@ (802716c <_dtoa_r+0x708>)
 8026e18:	00d2      	lsls	r2, r2, #3
 8026e1a:	189b      	adds	r3, r3, r2
 8026e1c:	681a      	ldr	r2, [r3, #0]
 8026e1e:	685b      	ldr	r3, [r3, #4]
 8026e20:	f7db fd98 	bl	8002954 <__aeabi_dmul>
 8026e24:	2701      	movs	r7, #1
 8026e26:	2300      	movs	r3, #0
 8026e28:	900a      	str	r0, [sp, #40]	@ 0x28
 8026e2a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026e2c:	4ed0      	ldr	r6, [pc, #832]	@ (8027170 <_dtoa_r+0x70c>)
 8026e2e:	112d      	asrs	r5, r5, #4
 8026e30:	2d00      	cmp	r5, #0
 8026e32:	d000      	beq.n	8026e36 <_dtoa_r+0x3d2>
 8026e34:	e095      	b.n	8026f62 <_dtoa_r+0x4fe>
 8026e36:	2b00      	cmp	r3, #0
 8026e38:	d1a2      	bne.n	8026d80 <_dtoa_r+0x31c>
 8026e3a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8026e3c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026e3e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026e40:	2b00      	cmp	r3, #0
 8026e42:	d100      	bne.n	8026e46 <_dtoa_r+0x3e2>
 8026e44:	e098      	b.n	8026f78 <_dtoa_r+0x514>
 8026e46:	2200      	movs	r2, #0
 8026e48:	0030      	movs	r0, r6
 8026e4a:	0039      	movs	r1, r7
 8026e4c:	4bc9      	ldr	r3, [pc, #804]	@ (8027174 <_dtoa_r+0x710>)
 8026e4e:	f7d9 fb35 	bl	80004bc <__aeabi_dcmplt>
 8026e52:	2800      	cmp	r0, #0
 8026e54:	d100      	bne.n	8026e58 <_dtoa_r+0x3f4>
 8026e56:	e08f      	b.n	8026f78 <_dtoa_r+0x514>
 8026e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026e5a:	2b00      	cmp	r3, #0
 8026e5c:	d100      	bne.n	8026e60 <_dtoa_r+0x3fc>
 8026e5e:	e08b      	b.n	8026f78 <_dtoa_r+0x514>
 8026e60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026e62:	2b00      	cmp	r3, #0
 8026e64:	dd37      	ble.n	8026ed6 <_dtoa_r+0x472>
 8026e66:	9b04      	ldr	r3, [sp, #16]
 8026e68:	2200      	movs	r2, #0
 8026e6a:	3b01      	subs	r3, #1
 8026e6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8026e6e:	0030      	movs	r0, r6
 8026e70:	4bc1      	ldr	r3, [pc, #772]	@ (8027178 <_dtoa_r+0x714>)
 8026e72:	0039      	movs	r1, r7
 8026e74:	f7db fd6e 	bl	8002954 <__aeabi_dmul>
 8026e78:	900a      	str	r0, [sp, #40]	@ 0x28
 8026e7a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026e7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026e7e:	3401      	adds	r4, #1
 8026e80:	0020      	movs	r0, r4
 8026e82:	9311      	str	r3, [sp, #68]	@ 0x44
 8026e84:	f7dc fcb4 	bl	80037f0 <__aeabi_i2d>
 8026e88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026e8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026e8c:	f7db fd62 	bl	8002954 <__aeabi_dmul>
 8026e90:	4bba      	ldr	r3, [pc, #744]	@ (802717c <_dtoa_r+0x718>)
 8026e92:	2200      	movs	r2, #0
 8026e94:	f7da fd5e 	bl	8001954 <__aeabi_dadd>
 8026e98:	4bb9      	ldr	r3, [pc, #740]	@ (8027180 <_dtoa_r+0x71c>)
 8026e9a:	0006      	movs	r6, r0
 8026e9c:	18cf      	adds	r7, r1, r3
 8026e9e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026ea0:	2b00      	cmp	r3, #0
 8026ea2:	d16d      	bne.n	8026f80 <_dtoa_r+0x51c>
 8026ea4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026ea6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026ea8:	2200      	movs	r2, #0
 8026eaa:	4bb6      	ldr	r3, [pc, #728]	@ (8027184 <_dtoa_r+0x720>)
 8026eac:	f7dc f838 	bl	8002f20 <__aeabi_dsub>
 8026eb0:	0032      	movs	r2, r6
 8026eb2:	003b      	movs	r3, r7
 8026eb4:	0004      	movs	r4, r0
 8026eb6:	000d      	movs	r5, r1
 8026eb8:	f7d9 fb14 	bl	80004e4 <__aeabi_dcmpgt>
 8026ebc:	2800      	cmp	r0, #0
 8026ebe:	d000      	beq.n	8026ec2 <_dtoa_r+0x45e>
 8026ec0:	e2b6      	b.n	8027430 <_dtoa_r+0x9cc>
 8026ec2:	2180      	movs	r1, #128	@ 0x80
 8026ec4:	0609      	lsls	r1, r1, #24
 8026ec6:	187b      	adds	r3, r7, r1
 8026ec8:	0032      	movs	r2, r6
 8026eca:	0020      	movs	r0, r4
 8026ecc:	0029      	movs	r1, r5
 8026ece:	f7d9 faf5 	bl	80004bc <__aeabi_dcmplt>
 8026ed2:	2800      	cmp	r0, #0
 8026ed4:	d128      	bne.n	8026f28 <_dtoa_r+0x4c4>
 8026ed6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8026ed8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026eda:	930a      	str	r3, [sp, #40]	@ 0x28
 8026edc:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026ede:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026ee0:	2b00      	cmp	r3, #0
 8026ee2:	da00      	bge.n	8026ee6 <_dtoa_r+0x482>
 8026ee4:	e174      	b.n	80271d0 <_dtoa_r+0x76c>
 8026ee6:	9a04      	ldr	r2, [sp, #16]
 8026ee8:	2a0e      	cmp	r2, #14
 8026eea:	dd00      	ble.n	8026eee <_dtoa_r+0x48a>
 8026eec:	e170      	b.n	80271d0 <_dtoa_r+0x76c>
 8026eee:	4b9f      	ldr	r3, [pc, #636]	@ (802716c <_dtoa_r+0x708>)
 8026ef0:	00d2      	lsls	r2, r2, #3
 8026ef2:	189b      	adds	r3, r3, r2
 8026ef4:	685c      	ldr	r4, [r3, #4]
 8026ef6:	681b      	ldr	r3, [r3, #0]
 8026ef8:	9306      	str	r3, [sp, #24]
 8026efa:	9407      	str	r4, [sp, #28]
 8026efc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026efe:	2b00      	cmp	r3, #0
 8026f00:	db00      	blt.n	8026f04 <_dtoa_r+0x4a0>
 8026f02:	e0e7      	b.n	80270d4 <_dtoa_r+0x670>
 8026f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026f06:	2b00      	cmp	r3, #0
 8026f08:	dd00      	ble.n	8026f0c <_dtoa_r+0x4a8>
 8026f0a:	e0e3      	b.n	80270d4 <_dtoa_r+0x670>
 8026f0c:	d10c      	bne.n	8026f28 <_dtoa_r+0x4c4>
 8026f0e:	9806      	ldr	r0, [sp, #24]
 8026f10:	9907      	ldr	r1, [sp, #28]
 8026f12:	2200      	movs	r2, #0
 8026f14:	4b9b      	ldr	r3, [pc, #620]	@ (8027184 <_dtoa_r+0x720>)
 8026f16:	f7db fd1d 	bl	8002954 <__aeabi_dmul>
 8026f1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026f1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026f1e:	f7d9 faeb 	bl	80004f8 <__aeabi_dcmpge>
 8026f22:	2800      	cmp	r0, #0
 8026f24:	d100      	bne.n	8026f28 <_dtoa_r+0x4c4>
 8026f26:	e286      	b.n	8027436 <_dtoa_r+0x9d2>
 8026f28:	2600      	movs	r6, #0
 8026f2a:	0037      	movs	r7, r6
 8026f2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026f2e:	9c08      	ldr	r4, [sp, #32]
 8026f30:	43db      	mvns	r3, r3
 8026f32:	930c      	str	r3, [sp, #48]	@ 0x30
 8026f34:	9704      	str	r7, [sp, #16]
 8026f36:	2700      	movs	r7, #0
 8026f38:	0031      	movs	r1, r6
 8026f3a:	9803      	ldr	r0, [sp, #12]
 8026f3c:	f001 f838 	bl	8027fb0 <_Bfree>
 8026f40:	9b04      	ldr	r3, [sp, #16]
 8026f42:	2b00      	cmp	r3, #0
 8026f44:	d100      	bne.n	8026f48 <_dtoa_r+0x4e4>
 8026f46:	e0bb      	b.n	80270c0 <_dtoa_r+0x65c>
 8026f48:	2f00      	cmp	r7, #0
 8026f4a:	d005      	beq.n	8026f58 <_dtoa_r+0x4f4>
 8026f4c:	429f      	cmp	r7, r3
 8026f4e:	d003      	beq.n	8026f58 <_dtoa_r+0x4f4>
 8026f50:	0039      	movs	r1, r7
 8026f52:	9803      	ldr	r0, [sp, #12]
 8026f54:	f001 f82c 	bl	8027fb0 <_Bfree>
 8026f58:	9904      	ldr	r1, [sp, #16]
 8026f5a:	9803      	ldr	r0, [sp, #12]
 8026f5c:	f001 f828 	bl	8027fb0 <_Bfree>
 8026f60:	e0ae      	b.n	80270c0 <_dtoa_r+0x65c>
 8026f62:	423d      	tst	r5, r7
 8026f64:	d005      	beq.n	8026f72 <_dtoa_r+0x50e>
 8026f66:	6832      	ldr	r2, [r6, #0]
 8026f68:	6873      	ldr	r3, [r6, #4]
 8026f6a:	f7db fcf3 	bl	8002954 <__aeabi_dmul>
 8026f6e:	003b      	movs	r3, r7
 8026f70:	3401      	adds	r4, #1
 8026f72:	106d      	asrs	r5, r5, #1
 8026f74:	3608      	adds	r6, #8
 8026f76:	e75b      	b.n	8026e30 <_dtoa_r+0x3cc>
 8026f78:	9b04      	ldr	r3, [sp, #16]
 8026f7a:	930c      	str	r3, [sp, #48]	@ 0x30
 8026f7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026f7e:	e77f      	b.n	8026e80 <_dtoa_r+0x41c>
 8026f80:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026f82:	4b7a      	ldr	r3, [pc, #488]	@ (802716c <_dtoa_r+0x708>)
 8026f84:	3a01      	subs	r2, #1
 8026f86:	00d2      	lsls	r2, r2, #3
 8026f88:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8026f8a:	189b      	adds	r3, r3, r2
 8026f8c:	681a      	ldr	r2, [r3, #0]
 8026f8e:	685b      	ldr	r3, [r3, #4]
 8026f90:	2900      	cmp	r1, #0
 8026f92:	d04c      	beq.n	802702e <_dtoa_r+0x5ca>
 8026f94:	2000      	movs	r0, #0
 8026f96:	497c      	ldr	r1, [pc, #496]	@ (8027188 <_dtoa_r+0x724>)
 8026f98:	f7db f8a2 	bl	80020e0 <__aeabi_ddiv>
 8026f9c:	0032      	movs	r2, r6
 8026f9e:	003b      	movs	r3, r7
 8026fa0:	f7db ffbe 	bl	8002f20 <__aeabi_dsub>
 8026fa4:	9a08      	ldr	r2, [sp, #32]
 8026fa6:	0006      	movs	r6, r0
 8026fa8:	4694      	mov	ip, r2
 8026faa:	000f      	movs	r7, r1
 8026fac:	9b08      	ldr	r3, [sp, #32]
 8026fae:	9316      	str	r3, [sp, #88]	@ 0x58
 8026fb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026fb2:	4463      	add	r3, ip
 8026fb4:	9311      	str	r3, [sp, #68]	@ 0x44
 8026fb6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026fb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026fba:	f7dc fbdd 	bl	8003778 <__aeabi_d2iz>
 8026fbe:	0005      	movs	r5, r0
 8026fc0:	f7dc fc16 	bl	80037f0 <__aeabi_i2d>
 8026fc4:	0002      	movs	r2, r0
 8026fc6:	000b      	movs	r3, r1
 8026fc8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026fca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026fcc:	f7db ffa8 	bl	8002f20 <__aeabi_dsub>
 8026fd0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026fd2:	3530      	adds	r5, #48	@ 0x30
 8026fd4:	1c5c      	adds	r4, r3, #1
 8026fd6:	701d      	strb	r5, [r3, #0]
 8026fd8:	0032      	movs	r2, r6
 8026fda:	003b      	movs	r3, r7
 8026fdc:	900a      	str	r0, [sp, #40]	@ 0x28
 8026fde:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026fe0:	f7d9 fa6c 	bl	80004bc <__aeabi_dcmplt>
 8026fe4:	2800      	cmp	r0, #0
 8026fe6:	d16b      	bne.n	80270c0 <_dtoa_r+0x65c>
 8026fe8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026fea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026fec:	2000      	movs	r0, #0
 8026fee:	4961      	ldr	r1, [pc, #388]	@ (8027174 <_dtoa_r+0x710>)
 8026ff0:	f7db ff96 	bl	8002f20 <__aeabi_dsub>
 8026ff4:	0032      	movs	r2, r6
 8026ff6:	003b      	movs	r3, r7
 8026ff8:	f7d9 fa60 	bl	80004bc <__aeabi_dcmplt>
 8026ffc:	2800      	cmp	r0, #0
 8026ffe:	d000      	beq.n	8027002 <_dtoa_r+0x59e>
 8027000:	e0c6      	b.n	8027190 <_dtoa_r+0x72c>
 8027002:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027004:	42a3      	cmp	r3, r4
 8027006:	d100      	bne.n	802700a <_dtoa_r+0x5a6>
 8027008:	e765      	b.n	8026ed6 <_dtoa_r+0x472>
 802700a:	2200      	movs	r2, #0
 802700c:	0030      	movs	r0, r6
 802700e:	0039      	movs	r1, r7
 8027010:	4b59      	ldr	r3, [pc, #356]	@ (8027178 <_dtoa_r+0x714>)
 8027012:	f7db fc9f 	bl	8002954 <__aeabi_dmul>
 8027016:	2200      	movs	r2, #0
 8027018:	0006      	movs	r6, r0
 802701a:	000f      	movs	r7, r1
 802701c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802701e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8027020:	4b55      	ldr	r3, [pc, #340]	@ (8027178 <_dtoa_r+0x714>)
 8027022:	f7db fc97 	bl	8002954 <__aeabi_dmul>
 8027026:	9416      	str	r4, [sp, #88]	@ 0x58
 8027028:	900a      	str	r0, [sp, #40]	@ 0x28
 802702a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802702c:	e7c3      	b.n	8026fb6 <_dtoa_r+0x552>
 802702e:	0030      	movs	r0, r6
 8027030:	0039      	movs	r1, r7
 8027032:	f7db fc8f 	bl	8002954 <__aeabi_dmul>
 8027036:	9d08      	ldr	r5, [sp, #32]
 8027038:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802703a:	002b      	movs	r3, r5
 802703c:	4694      	mov	ip, r2
 802703e:	9016      	str	r0, [sp, #88]	@ 0x58
 8027040:	9117      	str	r1, [sp, #92]	@ 0x5c
 8027042:	4463      	add	r3, ip
 8027044:	9319      	str	r3, [sp, #100]	@ 0x64
 8027046:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8027048:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802704a:	f7dc fb95 	bl	8003778 <__aeabi_d2iz>
 802704e:	0004      	movs	r4, r0
 8027050:	f7dc fbce 	bl	80037f0 <__aeabi_i2d>
 8027054:	000b      	movs	r3, r1
 8027056:	0002      	movs	r2, r0
 8027058:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802705a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802705c:	f7db ff60 	bl	8002f20 <__aeabi_dsub>
 8027060:	3430      	adds	r4, #48	@ 0x30
 8027062:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8027064:	702c      	strb	r4, [r5, #0]
 8027066:	3501      	adds	r5, #1
 8027068:	0006      	movs	r6, r0
 802706a:	000f      	movs	r7, r1
 802706c:	42ab      	cmp	r3, r5
 802706e:	d12a      	bne.n	80270c6 <_dtoa_r+0x662>
 8027070:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8027072:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8027074:	9b08      	ldr	r3, [sp, #32]
 8027076:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8027078:	469c      	mov	ip, r3
 802707a:	2200      	movs	r2, #0
 802707c:	4b42      	ldr	r3, [pc, #264]	@ (8027188 <_dtoa_r+0x724>)
 802707e:	4464      	add	r4, ip
 8027080:	f7da fc68 	bl	8001954 <__aeabi_dadd>
 8027084:	0002      	movs	r2, r0
 8027086:	000b      	movs	r3, r1
 8027088:	0030      	movs	r0, r6
 802708a:	0039      	movs	r1, r7
 802708c:	f7d9 fa2a 	bl	80004e4 <__aeabi_dcmpgt>
 8027090:	2800      	cmp	r0, #0
 8027092:	d000      	beq.n	8027096 <_dtoa_r+0x632>
 8027094:	e07c      	b.n	8027190 <_dtoa_r+0x72c>
 8027096:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8027098:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802709a:	2000      	movs	r0, #0
 802709c:	493a      	ldr	r1, [pc, #232]	@ (8027188 <_dtoa_r+0x724>)
 802709e:	f7db ff3f 	bl	8002f20 <__aeabi_dsub>
 80270a2:	0002      	movs	r2, r0
 80270a4:	000b      	movs	r3, r1
 80270a6:	0030      	movs	r0, r6
 80270a8:	0039      	movs	r1, r7
 80270aa:	f7d9 fa07 	bl	80004bc <__aeabi_dcmplt>
 80270ae:	2800      	cmp	r0, #0
 80270b0:	d100      	bne.n	80270b4 <_dtoa_r+0x650>
 80270b2:	e710      	b.n	8026ed6 <_dtoa_r+0x472>
 80270b4:	0023      	movs	r3, r4
 80270b6:	3c01      	subs	r4, #1
 80270b8:	7822      	ldrb	r2, [r4, #0]
 80270ba:	2a30      	cmp	r2, #48	@ 0x30
 80270bc:	d0fa      	beq.n	80270b4 <_dtoa_r+0x650>
 80270be:	001c      	movs	r4, r3
 80270c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80270c2:	9304      	str	r3, [sp, #16]
 80270c4:	e042      	b.n	802714c <_dtoa_r+0x6e8>
 80270c6:	2200      	movs	r2, #0
 80270c8:	4b2b      	ldr	r3, [pc, #172]	@ (8027178 <_dtoa_r+0x714>)
 80270ca:	f7db fc43 	bl	8002954 <__aeabi_dmul>
 80270ce:	900a      	str	r0, [sp, #40]	@ 0x28
 80270d0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80270d2:	e7b8      	b.n	8027046 <_dtoa_r+0x5e2>
 80270d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80270d6:	9d08      	ldr	r5, [sp, #32]
 80270d8:	3b01      	subs	r3, #1
 80270da:	195b      	adds	r3, r3, r5
 80270dc:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80270de:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80270e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80270e2:	9a06      	ldr	r2, [sp, #24]
 80270e4:	9b07      	ldr	r3, [sp, #28]
 80270e6:	0030      	movs	r0, r6
 80270e8:	0039      	movs	r1, r7
 80270ea:	f7da fff9 	bl	80020e0 <__aeabi_ddiv>
 80270ee:	f7dc fb43 	bl	8003778 <__aeabi_d2iz>
 80270f2:	9009      	str	r0, [sp, #36]	@ 0x24
 80270f4:	f7dc fb7c 	bl	80037f0 <__aeabi_i2d>
 80270f8:	9a06      	ldr	r2, [sp, #24]
 80270fa:	9b07      	ldr	r3, [sp, #28]
 80270fc:	f7db fc2a 	bl	8002954 <__aeabi_dmul>
 8027100:	0002      	movs	r2, r0
 8027102:	000b      	movs	r3, r1
 8027104:	0030      	movs	r0, r6
 8027106:	0039      	movs	r1, r7
 8027108:	f7db ff0a 	bl	8002f20 <__aeabi_dsub>
 802710c:	002b      	movs	r3, r5
 802710e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027110:	3501      	adds	r5, #1
 8027112:	3230      	adds	r2, #48	@ 0x30
 8027114:	701a      	strb	r2, [r3, #0]
 8027116:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027118:	002c      	movs	r4, r5
 802711a:	429a      	cmp	r2, r3
 802711c:	d14b      	bne.n	80271b6 <_dtoa_r+0x752>
 802711e:	0002      	movs	r2, r0
 8027120:	000b      	movs	r3, r1
 8027122:	f7da fc17 	bl	8001954 <__aeabi_dadd>
 8027126:	9a06      	ldr	r2, [sp, #24]
 8027128:	9b07      	ldr	r3, [sp, #28]
 802712a:	0006      	movs	r6, r0
 802712c:	000f      	movs	r7, r1
 802712e:	f7d9 f9d9 	bl	80004e4 <__aeabi_dcmpgt>
 8027132:	2800      	cmp	r0, #0
 8027134:	d12a      	bne.n	802718c <_dtoa_r+0x728>
 8027136:	9a06      	ldr	r2, [sp, #24]
 8027138:	9b07      	ldr	r3, [sp, #28]
 802713a:	0030      	movs	r0, r6
 802713c:	0039      	movs	r1, r7
 802713e:	f7d9 f9b7 	bl	80004b0 <__aeabi_dcmpeq>
 8027142:	2800      	cmp	r0, #0
 8027144:	d002      	beq.n	802714c <_dtoa_r+0x6e8>
 8027146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027148:	07dd      	lsls	r5, r3, #31
 802714a:	d41f      	bmi.n	802718c <_dtoa_r+0x728>
 802714c:	9905      	ldr	r1, [sp, #20]
 802714e:	9803      	ldr	r0, [sp, #12]
 8027150:	f000 ff2e 	bl	8027fb0 <_Bfree>
 8027154:	2300      	movs	r3, #0
 8027156:	7023      	strb	r3, [r4, #0]
 8027158:	9b04      	ldr	r3, [sp, #16]
 802715a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802715c:	3301      	adds	r3, #1
 802715e:	6013      	str	r3, [r2, #0]
 8027160:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027162:	2b00      	cmp	r3, #0
 8027164:	d100      	bne.n	8027168 <_dtoa_r+0x704>
 8027166:	e4c7      	b.n	8026af8 <_dtoa_r+0x94>
 8027168:	601c      	str	r4, [r3, #0]
 802716a:	e4c5      	b.n	8026af8 <_dtoa_r+0x94>
 802716c:	0802f168 	.word	0x0802f168
 8027170:	0802f140 	.word	0x0802f140
 8027174:	3ff00000 	.word	0x3ff00000
 8027178:	40240000 	.word	0x40240000
 802717c:	401c0000 	.word	0x401c0000
 8027180:	fcc00000 	.word	0xfcc00000
 8027184:	40140000 	.word	0x40140000
 8027188:	3fe00000 	.word	0x3fe00000
 802718c:	9b04      	ldr	r3, [sp, #16]
 802718e:	930c      	str	r3, [sp, #48]	@ 0x30
 8027190:	0023      	movs	r3, r4
 8027192:	001c      	movs	r4, r3
 8027194:	3b01      	subs	r3, #1
 8027196:	781a      	ldrb	r2, [r3, #0]
 8027198:	2a39      	cmp	r2, #57	@ 0x39
 802719a:	d108      	bne.n	80271ae <_dtoa_r+0x74a>
 802719c:	9a08      	ldr	r2, [sp, #32]
 802719e:	429a      	cmp	r2, r3
 80271a0:	d1f7      	bne.n	8027192 <_dtoa_r+0x72e>
 80271a2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80271a4:	9908      	ldr	r1, [sp, #32]
 80271a6:	3201      	adds	r2, #1
 80271a8:	920c      	str	r2, [sp, #48]	@ 0x30
 80271aa:	2230      	movs	r2, #48	@ 0x30
 80271ac:	700a      	strb	r2, [r1, #0]
 80271ae:	781a      	ldrb	r2, [r3, #0]
 80271b0:	3201      	adds	r2, #1
 80271b2:	701a      	strb	r2, [r3, #0]
 80271b4:	e784      	b.n	80270c0 <_dtoa_r+0x65c>
 80271b6:	2200      	movs	r2, #0
 80271b8:	4bc6      	ldr	r3, [pc, #792]	@ (80274d4 <_dtoa_r+0xa70>)
 80271ba:	f7db fbcb 	bl	8002954 <__aeabi_dmul>
 80271be:	2200      	movs	r2, #0
 80271c0:	2300      	movs	r3, #0
 80271c2:	0006      	movs	r6, r0
 80271c4:	000f      	movs	r7, r1
 80271c6:	f7d9 f973 	bl	80004b0 <__aeabi_dcmpeq>
 80271ca:	2800      	cmp	r0, #0
 80271cc:	d089      	beq.n	80270e2 <_dtoa_r+0x67e>
 80271ce:	e7bd      	b.n	802714c <_dtoa_r+0x6e8>
 80271d0:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80271d2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80271d4:	9c06      	ldr	r4, [sp, #24]
 80271d6:	2f00      	cmp	r7, #0
 80271d8:	d014      	beq.n	8027204 <_dtoa_r+0x7a0>
 80271da:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80271dc:	2a01      	cmp	r2, #1
 80271de:	dd00      	ble.n	80271e2 <_dtoa_r+0x77e>
 80271e0:	e0e4      	b.n	80273ac <_dtoa_r+0x948>
 80271e2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80271e4:	2a00      	cmp	r2, #0
 80271e6:	d100      	bne.n	80271ea <_dtoa_r+0x786>
 80271e8:	e0da      	b.n	80273a0 <_dtoa_r+0x93c>
 80271ea:	4abb      	ldr	r2, [pc, #748]	@ (80274d8 <_dtoa_r+0xa74>)
 80271ec:	189b      	adds	r3, r3, r2
 80271ee:	9a06      	ldr	r2, [sp, #24]
 80271f0:	2101      	movs	r1, #1
 80271f2:	18d2      	adds	r2, r2, r3
 80271f4:	9206      	str	r2, [sp, #24]
 80271f6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80271f8:	9803      	ldr	r0, [sp, #12]
 80271fa:	18d3      	adds	r3, r2, r3
 80271fc:	930d      	str	r3, [sp, #52]	@ 0x34
 80271fe:	f000 ffdb 	bl	80281b8 <__i2b>
 8027202:	0007      	movs	r7, r0
 8027204:	2c00      	cmp	r4, #0
 8027206:	d00e      	beq.n	8027226 <_dtoa_r+0x7c2>
 8027208:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802720a:	2b00      	cmp	r3, #0
 802720c:	dd0b      	ble.n	8027226 <_dtoa_r+0x7c2>
 802720e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027210:	0023      	movs	r3, r4
 8027212:	4294      	cmp	r4, r2
 8027214:	dd00      	ble.n	8027218 <_dtoa_r+0x7b4>
 8027216:	0013      	movs	r3, r2
 8027218:	9a06      	ldr	r2, [sp, #24]
 802721a:	1ae4      	subs	r4, r4, r3
 802721c:	1ad2      	subs	r2, r2, r3
 802721e:	9206      	str	r2, [sp, #24]
 8027220:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027222:	1ad3      	subs	r3, r2, r3
 8027224:	930d      	str	r3, [sp, #52]	@ 0x34
 8027226:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027228:	2b00      	cmp	r3, #0
 802722a:	d021      	beq.n	8027270 <_dtoa_r+0x80c>
 802722c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802722e:	2b00      	cmp	r3, #0
 8027230:	d100      	bne.n	8027234 <_dtoa_r+0x7d0>
 8027232:	e0d3      	b.n	80273dc <_dtoa_r+0x978>
 8027234:	9e05      	ldr	r6, [sp, #20]
 8027236:	2d00      	cmp	r5, #0
 8027238:	d014      	beq.n	8027264 <_dtoa_r+0x800>
 802723a:	0039      	movs	r1, r7
 802723c:	002a      	movs	r2, r5
 802723e:	9803      	ldr	r0, [sp, #12]
 8027240:	f001 f87c 	bl	802833c <__pow5mult>
 8027244:	9a05      	ldr	r2, [sp, #20]
 8027246:	0001      	movs	r1, r0
 8027248:	0007      	movs	r7, r0
 802724a:	9803      	ldr	r0, [sp, #12]
 802724c:	f000 ffcc 	bl	80281e8 <__multiply>
 8027250:	0006      	movs	r6, r0
 8027252:	9905      	ldr	r1, [sp, #20]
 8027254:	9803      	ldr	r0, [sp, #12]
 8027256:	f000 feab 	bl	8027fb0 <_Bfree>
 802725a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802725c:	9605      	str	r6, [sp, #20]
 802725e:	1b5b      	subs	r3, r3, r5
 8027260:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027262:	d005      	beq.n	8027270 <_dtoa_r+0x80c>
 8027264:	0031      	movs	r1, r6
 8027266:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027268:	9803      	ldr	r0, [sp, #12]
 802726a:	f001 f867 	bl	802833c <__pow5mult>
 802726e:	9005      	str	r0, [sp, #20]
 8027270:	2101      	movs	r1, #1
 8027272:	9803      	ldr	r0, [sp, #12]
 8027274:	f000 ffa0 	bl	80281b8 <__i2b>
 8027278:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802727a:	0006      	movs	r6, r0
 802727c:	2b00      	cmp	r3, #0
 802727e:	d100      	bne.n	8027282 <_dtoa_r+0x81e>
 8027280:	e1bc      	b.n	80275fc <_dtoa_r+0xb98>
 8027282:	001a      	movs	r2, r3
 8027284:	0001      	movs	r1, r0
 8027286:	9803      	ldr	r0, [sp, #12]
 8027288:	f001 f858 	bl	802833c <__pow5mult>
 802728c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802728e:	0006      	movs	r6, r0
 8027290:	2500      	movs	r5, #0
 8027292:	2b01      	cmp	r3, #1
 8027294:	dc16      	bgt.n	80272c4 <_dtoa_r+0x860>
 8027296:	2500      	movs	r5, #0
 8027298:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802729a:	42ab      	cmp	r3, r5
 802729c:	d10e      	bne.n	80272bc <_dtoa_r+0x858>
 802729e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80272a0:	031b      	lsls	r3, r3, #12
 80272a2:	42ab      	cmp	r3, r5
 80272a4:	d10a      	bne.n	80272bc <_dtoa_r+0x858>
 80272a6:	4b8d      	ldr	r3, [pc, #564]	@ (80274dc <_dtoa_r+0xa78>)
 80272a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80272aa:	4213      	tst	r3, r2
 80272ac:	d006      	beq.n	80272bc <_dtoa_r+0x858>
 80272ae:	9b06      	ldr	r3, [sp, #24]
 80272b0:	3501      	adds	r5, #1
 80272b2:	3301      	adds	r3, #1
 80272b4:	9306      	str	r3, [sp, #24]
 80272b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80272b8:	3301      	adds	r3, #1
 80272ba:	930d      	str	r3, [sp, #52]	@ 0x34
 80272bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80272be:	2001      	movs	r0, #1
 80272c0:	2b00      	cmp	r3, #0
 80272c2:	d008      	beq.n	80272d6 <_dtoa_r+0x872>
 80272c4:	6933      	ldr	r3, [r6, #16]
 80272c6:	3303      	adds	r3, #3
 80272c8:	009b      	lsls	r3, r3, #2
 80272ca:	18f3      	adds	r3, r6, r3
 80272cc:	6858      	ldr	r0, [r3, #4]
 80272ce:	f000 ff23 	bl	8028118 <__hi0bits>
 80272d2:	2320      	movs	r3, #32
 80272d4:	1a18      	subs	r0, r3, r0
 80272d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80272d8:	1818      	adds	r0, r3, r0
 80272da:	0002      	movs	r2, r0
 80272dc:	231f      	movs	r3, #31
 80272de:	401a      	ands	r2, r3
 80272e0:	4218      	tst	r0, r3
 80272e2:	d100      	bne.n	80272e6 <_dtoa_r+0x882>
 80272e4:	e081      	b.n	80273ea <_dtoa_r+0x986>
 80272e6:	3301      	adds	r3, #1
 80272e8:	1a9b      	subs	r3, r3, r2
 80272ea:	2b04      	cmp	r3, #4
 80272ec:	dd79      	ble.n	80273e2 <_dtoa_r+0x97e>
 80272ee:	231c      	movs	r3, #28
 80272f0:	1a9b      	subs	r3, r3, r2
 80272f2:	9a06      	ldr	r2, [sp, #24]
 80272f4:	18e4      	adds	r4, r4, r3
 80272f6:	18d2      	adds	r2, r2, r3
 80272f8:	9206      	str	r2, [sp, #24]
 80272fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80272fc:	18d3      	adds	r3, r2, r3
 80272fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8027300:	9b06      	ldr	r3, [sp, #24]
 8027302:	2b00      	cmp	r3, #0
 8027304:	dd05      	ble.n	8027312 <_dtoa_r+0x8ae>
 8027306:	001a      	movs	r2, r3
 8027308:	9905      	ldr	r1, [sp, #20]
 802730a:	9803      	ldr	r0, [sp, #12]
 802730c:	f001 f872 	bl	80283f4 <__lshift>
 8027310:	9005      	str	r0, [sp, #20]
 8027312:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027314:	2b00      	cmp	r3, #0
 8027316:	dd05      	ble.n	8027324 <_dtoa_r+0x8c0>
 8027318:	0031      	movs	r1, r6
 802731a:	001a      	movs	r2, r3
 802731c:	9803      	ldr	r0, [sp, #12]
 802731e:	f001 f869 	bl	80283f4 <__lshift>
 8027322:	0006      	movs	r6, r0
 8027324:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8027326:	2b00      	cmp	r3, #0
 8027328:	d061      	beq.n	80273ee <_dtoa_r+0x98a>
 802732a:	0031      	movs	r1, r6
 802732c:	9805      	ldr	r0, [sp, #20]
 802732e:	f001 f8cd 	bl	80284cc <__mcmp>
 8027332:	2800      	cmp	r0, #0
 8027334:	da5b      	bge.n	80273ee <_dtoa_r+0x98a>
 8027336:	9b04      	ldr	r3, [sp, #16]
 8027338:	220a      	movs	r2, #10
 802733a:	3b01      	subs	r3, #1
 802733c:	930c      	str	r3, [sp, #48]	@ 0x30
 802733e:	9905      	ldr	r1, [sp, #20]
 8027340:	2300      	movs	r3, #0
 8027342:	9803      	ldr	r0, [sp, #12]
 8027344:	f000 fe58 	bl	8027ff8 <__multadd>
 8027348:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802734a:	9005      	str	r0, [sp, #20]
 802734c:	2b00      	cmp	r3, #0
 802734e:	d100      	bne.n	8027352 <_dtoa_r+0x8ee>
 8027350:	e15b      	b.n	802760a <_dtoa_r+0xba6>
 8027352:	2300      	movs	r3, #0
 8027354:	0039      	movs	r1, r7
 8027356:	220a      	movs	r2, #10
 8027358:	9803      	ldr	r0, [sp, #12]
 802735a:	f000 fe4d 	bl	8027ff8 <__multadd>
 802735e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027360:	0007      	movs	r7, r0
 8027362:	2b00      	cmp	r3, #0
 8027364:	dc4d      	bgt.n	8027402 <_dtoa_r+0x99e>
 8027366:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027368:	2b02      	cmp	r3, #2
 802736a:	dd46      	ble.n	80273fa <_dtoa_r+0x996>
 802736c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802736e:	2b00      	cmp	r3, #0
 8027370:	d000      	beq.n	8027374 <_dtoa_r+0x910>
 8027372:	e5db      	b.n	8026f2c <_dtoa_r+0x4c8>
 8027374:	0031      	movs	r1, r6
 8027376:	2205      	movs	r2, #5
 8027378:	9803      	ldr	r0, [sp, #12]
 802737a:	f000 fe3d 	bl	8027ff8 <__multadd>
 802737e:	0006      	movs	r6, r0
 8027380:	0001      	movs	r1, r0
 8027382:	9805      	ldr	r0, [sp, #20]
 8027384:	f001 f8a2 	bl	80284cc <__mcmp>
 8027388:	2800      	cmp	r0, #0
 802738a:	dc00      	bgt.n	802738e <_dtoa_r+0x92a>
 802738c:	e5ce      	b.n	8026f2c <_dtoa_r+0x4c8>
 802738e:	9b08      	ldr	r3, [sp, #32]
 8027390:	9a08      	ldr	r2, [sp, #32]
 8027392:	1c5c      	adds	r4, r3, #1
 8027394:	2331      	movs	r3, #49	@ 0x31
 8027396:	7013      	strb	r3, [r2, #0]
 8027398:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802739a:	3301      	adds	r3, #1
 802739c:	930c      	str	r3, [sp, #48]	@ 0x30
 802739e:	e5c9      	b.n	8026f34 <_dtoa_r+0x4d0>
 80273a0:	2336      	movs	r3, #54	@ 0x36
 80273a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80273a4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80273a6:	1a9b      	subs	r3, r3, r2
 80273a8:	9c06      	ldr	r4, [sp, #24]
 80273aa:	e720      	b.n	80271ee <_dtoa_r+0x78a>
 80273ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80273ae:	1e5d      	subs	r5, r3, #1
 80273b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80273b2:	42ab      	cmp	r3, r5
 80273b4:	db08      	blt.n	80273c8 <_dtoa_r+0x964>
 80273b6:	1b5d      	subs	r5, r3, r5
 80273b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80273ba:	2b00      	cmp	r3, #0
 80273bc:	daf4      	bge.n	80273a8 <_dtoa_r+0x944>
 80273be:	9b06      	ldr	r3, [sp, #24]
 80273c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80273c2:	1a9c      	subs	r4, r3, r2
 80273c4:	2300      	movs	r3, #0
 80273c6:	e712      	b.n	80271ee <_dtoa_r+0x78a>
 80273c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80273ca:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80273cc:	1aeb      	subs	r3, r5, r3
 80273ce:	18d3      	adds	r3, r2, r3
 80273d0:	9314      	str	r3, [sp, #80]	@ 0x50
 80273d2:	950f      	str	r5, [sp, #60]	@ 0x3c
 80273d4:	9c06      	ldr	r4, [sp, #24]
 80273d6:	2500      	movs	r5, #0
 80273d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80273da:	e708      	b.n	80271ee <_dtoa_r+0x78a>
 80273dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80273de:	9905      	ldr	r1, [sp, #20]
 80273e0:	e742      	b.n	8027268 <_dtoa_r+0x804>
 80273e2:	2b04      	cmp	r3, #4
 80273e4:	d08c      	beq.n	8027300 <_dtoa_r+0x89c>
 80273e6:	331c      	adds	r3, #28
 80273e8:	e783      	b.n	80272f2 <_dtoa_r+0x88e>
 80273ea:	0013      	movs	r3, r2
 80273ec:	e7fb      	b.n	80273e6 <_dtoa_r+0x982>
 80273ee:	9b04      	ldr	r3, [sp, #16]
 80273f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80273f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80273f4:	930e      	str	r3, [sp, #56]	@ 0x38
 80273f6:	2b00      	cmp	r3, #0
 80273f8:	ddb5      	ble.n	8027366 <_dtoa_r+0x902>
 80273fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80273fc:	2b00      	cmp	r3, #0
 80273fe:	d100      	bne.n	8027402 <_dtoa_r+0x99e>
 8027400:	e107      	b.n	8027612 <_dtoa_r+0xbae>
 8027402:	2c00      	cmp	r4, #0
 8027404:	dd05      	ble.n	8027412 <_dtoa_r+0x9ae>
 8027406:	0039      	movs	r1, r7
 8027408:	0022      	movs	r2, r4
 802740a:	9803      	ldr	r0, [sp, #12]
 802740c:	f000 fff2 	bl	80283f4 <__lshift>
 8027410:	0007      	movs	r7, r0
 8027412:	9704      	str	r7, [sp, #16]
 8027414:	2d00      	cmp	r5, #0
 8027416:	d020      	beq.n	802745a <_dtoa_r+0x9f6>
 8027418:	6879      	ldr	r1, [r7, #4]
 802741a:	9803      	ldr	r0, [sp, #12]
 802741c:	f000 fd84 	bl	8027f28 <_Balloc>
 8027420:	1e04      	subs	r4, r0, #0
 8027422:	d10c      	bne.n	802743e <_dtoa_r+0x9da>
 8027424:	0022      	movs	r2, r4
 8027426:	4b2e      	ldr	r3, [pc, #184]	@ (80274e0 <_dtoa_r+0xa7c>)
 8027428:	482e      	ldr	r0, [pc, #184]	@ (80274e4 <_dtoa_r+0xa80>)
 802742a:	492f      	ldr	r1, [pc, #188]	@ (80274e8 <_dtoa_r+0xa84>)
 802742c:	f7ff fb2f 	bl	8026a8e <_dtoa_r+0x2a>
 8027430:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8027432:	0037      	movs	r7, r6
 8027434:	e7ab      	b.n	802738e <_dtoa_r+0x92a>
 8027436:	9b04      	ldr	r3, [sp, #16]
 8027438:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 802743a:	930c      	str	r3, [sp, #48]	@ 0x30
 802743c:	e7f9      	b.n	8027432 <_dtoa_r+0x9ce>
 802743e:	0039      	movs	r1, r7
 8027440:	693a      	ldr	r2, [r7, #16]
 8027442:	310c      	adds	r1, #12
 8027444:	3202      	adds	r2, #2
 8027446:	0092      	lsls	r2, r2, #2
 8027448:	300c      	adds	r0, #12
 802744a:	f7ff fa75 	bl	8026938 <memcpy>
 802744e:	2201      	movs	r2, #1
 8027450:	0021      	movs	r1, r4
 8027452:	9803      	ldr	r0, [sp, #12]
 8027454:	f000 ffce 	bl	80283f4 <__lshift>
 8027458:	9004      	str	r0, [sp, #16]
 802745a:	9b08      	ldr	r3, [sp, #32]
 802745c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802745e:	9306      	str	r3, [sp, #24]
 8027460:	3b01      	subs	r3, #1
 8027462:	189b      	adds	r3, r3, r2
 8027464:	2201      	movs	r2, #1
 8027466:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027468:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802746a:	4013      	ands	r3, r2
 802746c:	930e      	str	r3, [sp, #56]	@ 0x38
 802746e:	0031      	movs	r1, r6
 8027470:	9805      	ldr	r0, [sp, #20]
 8027472:	f7ff fa71 	bl	8026958 <quorem>
 8027476:	0039      	movs	r1, r7
 8027478:	0005      	movs	r5, r0
 802747a:	900a      	str	r0, [sp, #40]	@ 0x28
 802747c:	9805      	ldr	r0, [sp, #20]
 802747e:	f001 f825 	bl	80284cc <__mcmp>
 8027482:	9a04      	ldr	r2, [sp, #16]
 8027484:	900d      	str	r0, [sp, #52]	@ 0x34
 8027486:	0031      	movs	r1, r6
 8027488:	9803      	ldr	r0, [sp, #12]
 802748a:	f001 f83b 	bl	8028504 <__mdiff>
 802748e:	2201      	movs	r2, #1
 8027490:	68c3      	ldr	r3, [r0, #12]
 8027492:	0004      	movs	r4, r0
 8027494:	3530      	adds	r5, #48	@ 0x30
 8027496:	9209      	str	r2, [sp, #36]	@ 0x24
 8027498:	2b00      	cmp	r3, #0
 802749a:	d104      	bne.n	80274a6 <_dtoa_r+0xa42>
 802749c:	0001      	movs	r1, r0
 802749e:	9805      	ldr	r0, [sp, #20]
 80274a0:	f001 f814 	bl	80284cc <__mcmp>
 80274a4:	9009      	str	r0, [sp, #36]	@ 0x24
 80274a6:	0021      	movs	r1, r4
 80274a8:	9803      	ldr	r0, [sp, #12]
 80274aa:	f000 fd81 	bl	8027fb0 <_Bfree>
 80274ae:	9b06      	ldr	r3, [sp, #24]
 80274b0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80274b2:	1c5c      	adds	r4, r3, #1
 80274b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80274b6:	4313      	orrs	r3, r2
 80274b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80274ba:	4313      	orrs	r3, r2
 80274bc:	d116      	bne.n	80274ec <_dtoa_r+0xa88>
 80274be:	2d39      	cmp	r5, #57	@ 0x39
 80274c0:	d02f      	beq.n	8027522 <_dtoa_r+0xabe>
 80274c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80274c4:	2b00      	cmp	r3, #0
 80274c6:	dd01      	ble.n	80274cc <_dtoa_r+0xa68>
 80274c8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80274ca:	3531      	adds	r5, #49	@ 0x31
 80274cc:	9b06      	ldr	r3, [sp, #24]
 80274ce:	701d      	strb	r5, [r3, #0]
 80274d0:	e532      	b.n	8026f38 <_dtoa_r+0x4d4>
 80274d2:	46c0      	nop			@ (mov r8, r8)
 80274d4:	40240000 	.word	0x40240000
 80274d8:	00000433 	.word	0x00000433
 80274dc:	7ff00000 	.word	0x7ff00000
 80274e0:	0802eec2 	.word	0x0802eec2
 80274e4:	0802ee6a 	.word	0x0802ee6a
 80274e8:	000002ef 	.word	0x000002ef
 80274ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80274ee:	2b00      	cmp	r3, #0
 80274f0:	db04      	blt.n	80274fc <_dtoa_r+0xa98>
 80274f2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80274f4:	4313      	orrs	r3, r2
 80274f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80274f8:	4313      	orrs	r3, r2
 80274fa:	d11e      	bne.n	802753a <_dtoa_r+0xad6>
 80274fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80274fe:	2b00      	cmp	r3, #0
 8027500:	dde4      	ble.n	80274cc <_dtoa_r+0xa68>
 8027502:	9905      	ldr	r1, [sp, #20]
 8027504:	2201      	movs	r2, #1
 8027506:	9803      	ldr	r0, [sp, #12]
 8027508:	f000 ff74 	bl	80283f4 <__lshift>
 802750c:	0031      	movs	r1, r6
 802750e:	9005      	str	r0, [sp, #20]
 8027510:	f000 ffdc 	bl	80284cc <__mcmp>
 8027514:	2800      	cmp	r0, #0
 8027516:	dc02      	bgt.n	802751e <_dtoa_r+0xaba>
 8027518:	d1d8      	bne.n	80274cc <_dtoa_r+0xa68>
 802751a:	07eb      	lsls	r3, r5, #31
 802751c:	d5d6      	bpl.n	80274cc <_dtoa_r+0xa68>
 802751e:	2d39      	cmp	r5, #57	@ 0x39
 8027520:	d1d2      	bne.n	80274c8 <_dtoa_r+0xa64>
 8027522:	2339      	movs	r3, #57	@ 0x39
 8027524:	9a06      	ldr	r2, [sp, #24]
 8027526:	7013      	strb	r3, [r2, #0]
 8027528:	0023      	movs	r3, r4
 802752a:	001c      	movs	r4, r3
 802752c:	3b01      	subs	r3, #1
 802752e:	781a      	ldrb	r2, [r3, #0]
 8027530:	2a39      	cmp	r2, #57	@ 0x39
 8027532:	d050      	beq.n	80275d6 <_dtoa_r+0xb72>
 8027534:	3201      	adds	r2, #1
 8027536:	701a      	strb	r2, [r3, #0]
 8027538:	e4fe      	b.n	8026f38 <_dtoa_r+0x4d4>
 802753a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802753c:	2b00      	cmp	r3, #0
 802753e:	dd03      	ble.n	8027548 <_dtoa_r+0xae4>
 8027540:	2d39      	cmp	r5, #57	@ 0x39
 8027542:	d0ee      	beq.n	8027522 <_dtoa_r+0xabe>
 8027544:	3501      	adds	r5, #1
 8027546:	e7c1      	b.n	80274cc <_dtoa_r+0xa68>
 8027548:	9b06      	ldr	r3, [sp, #24]
 802754a:	9a06      	ldr	r2, [sp, #24]
 802754c:	701d      	strb	r5, [r3, #0]
 802754e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027550:	4293      	cmp	r3, r2
 8027552:	d02b      	beq.n	80275ac <_dtoa_r+0xb48>
 8027554:	2300      	movs	r3, #0
 8027556:	220a      	movs	r2, #10
 8027558:	9905      	ldr	r1, [sp, #20]
 802755a:	9803      	ldr	r0, [sp, #12]
 802755c:	f000 fd4c 	bl	8027ff8 <__multadd>
 8027560:	9b04      	ldr	r3, [sp, #16]
 8027562:	9005      	str	r0, [sp, #20]
 8027564:	429f      	cmp	r7, r3
 8027566:	d109      	bne.n	802757c <_dtoa_r+0xb18>
 8027568:	0039      	movs	r1, r7
 802756a:	2300      	movs	r3, #0
 802756c:	220a      	movs	r2, #10
 802756e:	9803      	ldr	r0, [sp, #12]
 8027570:	f000 fd42 	bl	8027ff8 <__multadd>
 8027574:	0007      	movs	r7, r0
 8027576:	9004      	str	r0, [sp, #16]
 8027578:	9406      	str	r4, [sp, #24]
 802757a:	e778      	b.n	802746e <_dtoa_r+0xa0a>
 802757c:	0039      	movs	r1, r7
 802757e:	2300      	movs	r3, #0
 8027580:	220a      	movs	r2, #10
 8027582:	9803      	ldr	r0, [sp, #12]
 8027584:	f000 fd38 	bl	8027ff8 <__multadd>
 8027588:	2300      	movs	r3, #0
 802758a:	0007      	movs	r7, r0
 802758c:	220a      	movs	r2, #10
 802758e:	9904      	ldr	r1, [sp, #16]
 8027590:	9803      	ldr	r0, [sp, #12]
 8027592:	f000 fd31 	bl	8027ff8 <__multadd>
 8027596:	9004      	str	r0, [sp, #16]
 8027598:	e7ee      	b.n	8027578 <_dtoa_r+0xb14>
 802759a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802759c:	2401      	movs	r4, #1
 802759e:	2b00      	cmp	r3, #0
 80275a0:	dd00      	ble.n	80275a4 <_dtoa_r+0xb40>
 80275a2:	001c      	movs	r4, r3
 80275a4:	9704      	str	r7, [sp, #16]
 80275a6:	2700      	movs	r7, #0
 80275a8:	9b08      	ldr	r3, [sp, #32]
 80275aa:	191c      	adds	r4, r3, r4
 80275ac:	9905      	ldr	r1, [sp, #20]
 80275ae:	2201      	movs	r2, #1
 80275b0:	9803      	ldr	r0, [sp, #12]
 80275b2:	f000 ff1f 	bl	80283f4 <__lshift>
 80275b6:	0031      	movs	r1, r6
 80275b8:	9005      	str	r0, [sp, #20]
 80275ba:	f000 ff87 	bl	80284cc <__mcmp>
 80275be:	2800      	cmp	r0, #0
 80275c0:	dcb2      	bgt.n	8027528 <_dtoa_r+0xac4>
 80275c2:	d101      	bne.n	80275c8 <_dtoa_r+0xb64>
 80275c4:	07ed      	lsls	r5, r5, #31
 80275c6:	d4af      	bmi.n	8027528 <_dtoa_r+0xac4>
 80275c8:	0023      	movs	r3, r4
 80275ca:	001c      	movs	r4, r3
 80275cc:	3b01      	subs	r3, #1
 80275ce:	781a      	ldrb	r2, [r3, #0]
 80275d0:	2a30      	cmp	r2, #48	@ 0x30
 80275d2:	d0fa      	beq.n	80275ca <_dtoa_r+0xb66>
 80275d4:	e4b0      	b.n	8026f38 <_dtoa_r+0x4d4>
 80275d6:	9a08      	ldr	r2, [sp, #32]
 80275d8:	429a      	cmp	r2, r3
 80275da:	d1a6      	bne.n	802752a <_dtoa_r+0xac6>
 80275dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80275de:	3301      	adds	r3, #1
 80275e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80275e2:	2331      	movs	r3, #49	@ 0x31
 80275e4:	7013      	strb	r3, [r2, #0]
 80275e6:	e4a7      	b.n	8026f38 <_dtoa_r+0x4d4>
 80275e8:	4b14      	ldr	r3, [pc, #80]	@ (802763c <_dtoa_r+0xbd8>)
 80275ea:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80275ec:	9308      	str	r3, [sp, #32]
 80275ee:	4b14      	ldr	r3, [pc, #80]	@ (8027640 <_dtoa_r+0xbdc>)
 80275f0:	2a00      	cmp	r2, #0
 80275f2:	d001      	beq.n	80275f8 <_dtoa_r+0xb94>
 80275f4:	f7ff fa7e 	bl	8026af4 <_dtoa_r+0x90>
 80275f8:	f7ff fa7e 	bl	8026af8 <_dtoa_r+0x94>
 80275fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80275fe:	2b01      	cmp	r3, #1
 8027600:	dc00      	bgt.n	8027604 <_dtoa_r+0xba0>
 8027602:	e648      	b.n	8027296 <_dtoa_r+0x832>
 8027604:	2001      	movs	r0, #1
 8027606:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8027608:	e665      	b.n	80272d6 <_dtoa_r+0x872>
 802760a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802760c:	2b00      	cmp	r3, #0
 802760e:	dc00      	bgt.n	8027612 <_dtoa_r+0xbae>
 8027610:	e6a9      	b.n	8027366 <_dtoa_r+0x902>
 8027612:	2400      	movs	r4, #0
 8027614:	0031      	movs	r1, r6
 8027616:	9805      	ldr	r0, [sp, #20]
 8027618:	f7ff f99e 	bl	8026958 <quorem>
 802761c:	9b08      	ldr	r3, [sp, #32]
 802761e:	3030      	adds	r0, #48	@ 0x30
 8027620:	5518      	strb	r0, [r3, r4]
 8027622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027624:	3401      	adds	r4, #1
 8027626:	0005      	movs	r5, r0
 8027628:	42a3      	cmp	r3, r4
 802762a:	ddb6      	ble.n	802759a <_dtoa_r+0xb36>
 802762c:	2300      	movs	r3, #0
 802762e:	220a      	movs	r2, #10
 8027630:	9905      	ldr	r1, [sp, #20]
 8027632:	9803      	ldr	r0, [sp, #12]
 8027634:	f000 fce0 	bl	8027ff8 <__multadd>
 8027638:	9005      	str	r0, [sp, #20]
 802763a:	e7eb      	b.n	8027614 <_dtoa_r+0xbb0>
 802763c:	0802ee46 	.word	0x0802ee46
 8027640:	0802ee4e 	.word	0x0802ee4e

08027644 <_free_r>:
 8027644:	b570      	push	{r4, r5, r6, lr}
 8027646:	0005      	movs	r5, r0
 8027648:	1e0c      	subs	r4, r1, #0
 802764a:	d010      	beq.n	802766e <_free_r+0x2a>
 802764c:	3c04      	subs	r4, #4
 802764e:	6823      	ldr	r3, [r4, #0]
 8027650:	2b00      	cmp	r3, #0
 8027652:	da00      	bge.n	8027656 <_free_r+0x12>
 8027654:	18e4      	adds	r4, r4, r3
 8027656:	0028      	movs	r0, r5
 8027658:	f000 fc56 	bl	8027f08 <__malloc_lock>
 802765c:	4a1d      	ldr	r2, [pc, #116]	@ (80276d4 <_free_r+0x90>)
 802765e:	6813      	ldr	r3, [r2, #0]
 8027660:	2b00      	cmp	r3, #0
 8027662:	d105      	bne.n	8027670 <_free_r+0x2c>
 8027664:	6063      	str	r3, [r4, #4]
 8027666:	6014      	str	r4, [r2, #0]
 8027668:	0028      	movs	r0, r5
 802766a:	f000 fc55 	bl	8027f18 <__malloc_unlock>
 802766e:	bd70      	pop	{r4, r5, r6, pc}
 8027670:	42a3      	cmp	r3, r4
 8027672:	d908      	bls.n	8027686 <_free_r+0x42>
 8027674:	6820      	ldr	r0, [r4, #0]
 8027676:	1821      	adds	r1, r4, r0
 8027678:	428b      	cmp	r3, r1
 802767a:	d1f3      	bne.n	8027664 <_free_r+0x20>
 802767c:	6819      	ldr	r1, [r3, #0]
 802767e:	685b      	ldr	r3, [r3, #4]
 8027680:	1809      	adds	r1, r1, r0
 8027682:	6021      	str	r1, [r4, #0]
 8027684:	e7ee      	b.n	8027664 <_free_r+0x20>
 8027686:	001a      	movs	r2, r3
 8027688:	685b      	ldr	r3, [r3, #4]
 802768a:	2b00      	cmp	r3, #0
 802768c:	d001      	beq.n	8027692 <_free_r+0x4e>
 802768e:	42a3      	cmp	r3, r4
 8027690:	d9f9      	bls.n	8027686 <_free_r+0x42>
 8027692:	6811      	ldr	r1, [r2, #0]
 8027694:	1850      	adds	r0, r2, r1
 8027696:	42a0      	cmp	r0, r4
 8027698:	d10b      	bne.n	80276b2 <_free_r+0x6e>
 802769a:	6820      	ldr	r0, [r4, #0]
 802769c:	1809      	adds	r1, r1, r0
 802769e:	1850      	adds	r0, r2, r1
 80276a0:	6011      	str	r1, [r2, #0]
 80276a2:	4283      	cmp	r3, r0
 80276a4:	d1e0      	bne.n	8027668 <_free_r+0x24>
 80276a6:	6818      	ldr	r0, [r3, #0]
 80276a8:	685b      	ldr	r3, [r3, #4]
 80276aa:	1841      	adds	r1, r0, r1
 80276ac:	6011      	str	r1, [r2, #0]
 80276ae:	6053      	str	r3, [r2, #4]
 80276b0:	e7da      	b.n	8027668 <_free_r+0x24>
 80276b2:	42a0      	cmp	r0, r4
 80276b4:	d902      	bls.n	80276bc <_free_r+0x78>
 80276b6:	230c      	movs	r3, #12
 80276b8:	602b      	str	r3, [r5, #0]
 80276ba:	e7d5      	b.n	8027668 <_free_r+0x24>
 80276bc:	6820      	ldr	r0, [r4, #0]
 80276be:	1821      	adds	r1, r4, r0
 80276c0:	428b      	cmp	r3, r1
 80276c2:	d103      	bne.n	80276cc <_free_r+0x88>
 80276c4:	6819      	ldr	r1, [r3, #0]
 80276c6:	685b      	ldr	r3, [r3, #4]
 80276c8:	1809      	adds	r1, r1, r0
 80276ca:	6021      	str	r1, [r4, #0]
 80276cc:	6063      	str	r3, [r4, #4]
 80276ce:	6054      	str	r4, [r2, #4]
 80276d0:	e7ca      	b.n	8027668 <_free_r+0x24>
 80276d2:	46c0      	nop			@ (mov r8, r8)
 80276d4:	20003914 	.word	0x20003914

080276d8 <rshift>:
 80276d8:	0002      	movs	r2, r0
 80276da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80276dc:	6904      	ldr	r4, [r0, #16]
 80276de:	b085      	sub	sp, #20
 80276e0:	3214      	adds	r2, #20
 80276e2:	114b      	asrs	r3, r1, #5
 80276e4:	0016      	movs	r6, r2
 80276e6:	9302      	str	r3, [sp, #8]
 80276e8:	429c      	cmp	r4, r3
 80276ea:	dd31      	ble.n	8027750 <rshift+0x78>
 80276ec:	261f      	movs	r6, #31
 80276ee:	000f      	movs	r7, r1
 80276f0:	009b      	lsls	r3, r3, #2
 80276f2:	00a5      	lsls	r5, r4, #2
 80276f4:	18d3      	adds	r3, r2, r3
 80276f6:	4037      	ands	r7, r6
 80276f8:	1955      	adds	r5, r2, r5
 80276fa:	9300      	str	r3, [sp, #0]
 80276fc:	9701      	str	r7, [sp, #4]
 80276fe:	4231      	tst	r1, r6
 8027700:	d10d      	bne.n	802771e <rshift+0x46>
 8027702:	0016      	movs	r6, r2
 8027704:	0019      	movs	r1, r3
 8027706:	428d      	cmp	r5, r1
 8027708:	d836      	bhi.n	8027778 <rshift+0xa0>
 802770a:	9b00      	ldr	r3, [sp, #0]
 802770c:	2600      	movs	r6, #0
 802770e:	3b03      	subs	r3, #3
 8027710:	429d      	cmp	r5, r3
 8027712:	d302      	bcc.n	802771a <rshift+0x42>
 8027714:	9b02      	ldr	r3, [sp, #8]
 8027716:	1ae4      	subs	r4, r4, r3
 8027718:	00a6      	lsls	r6, r4, #2
 802771a:	1996      	adds	r6, r2, r6
 802771c:	e018      	b.n	8027750 <rshift+0x78>
 802771e:	2120      	movs	r1, #32
 8027720:	9e01      	ldr	r6, [sp, #4]
 8027722:	9f01      	ldr	r7, [sp, #4]
 8027724:	1b89      	subs	r1, r1, r6
 8027726:	9e00      	ldr	r6, [sp, #0]
 8027728:	9103      	str	r1, [sp, #12]
 802772a:	ce02      	ldmia	r6!, {r1}
 802772c:	4694      	mov	ip, r2
 802772e:	40f9      	lsrs	r1, r7
 8027730:	42b5      	cmp	r5, r6
 8027732:	d816      	bhi.n	8027762 <rshift+0x8a>
 8027734:	9b00      	ldr	r3, [sp, #0]
 8027736:	2600      	movs	r6, #0
 8027738:	3301      	adds	r3, #1
 802773a:	429d      	cmp	r5, r3
 802773c:	d303      	bcc.n	8027746 <rshift+0x6e>
 802773e:	9b02      	ldr	r3, [sp, #8]
 8027740:	1ae4      	subs	r4, r4, r3
 8027742:	00a6      	lsls	r6, r4, #2
 8027744:	3e04      	subs	r6, #4
 8027746:	1996      	adds	r6, r2, r6
 8027748:	6031      	str	r1, [r6, #0]
 802774a:	2900      	cmp	r1, #0
 802774c:	d000      	beq.n	8027750 <rshift+0x78>
 802774e:	3604      	adds	r6, #4
 8027750:	1ab1      	subs	r1, r6, r2
 8027752:	1089      	asrs	r1, r1, #2
 8027754:	6101      	str	r1, [r0, #16]
 8027756:	4296      	cmp	r6, r2
 8027758:	d101      	bne.n	802775e <rshift+0x86>
 802775a:	2300      	movs	r3, #0
 802775c:	6143      	str	r3, [r0, #20]
 802775e:	b005      	add	sp, #20
 8027760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027762:	6837      	ldr	r7, [r6, #0]
 8027764:	9b03      	ldr	r3, [sp, #12]
 8027766:	409f      	lsls	r7, r3
 8027768:	430f      	orrs	r7, r1
 802776a:	4661      	mov	r1, ip
 802776c:	c180      	stmia	r1!, {r7}
 802776e:	468c      	mov	ip, r1
 8027770:	9b01      	ldr	r3, [sp, #4]
 8027772:	ce02      	ldmia	r6!, {r1}
 8027774:	40d9      	lsrs	r1, r3
 8027776:	e7db      	b.n	8027730 <rshift+0x58>
 8027778:	c980      	ldmia	r1!, {r7}
 802777a:	c680      	stmia	r6!, {r7}
 802777c:	e7c3      	b.n	8027706 <rshift+0x2e>

0802777e <__hexdig_fun>:
 802777e:	0002      	movs	r2, r0
 8027780:	3a30      	subs	r2, #48	@ 0x30
 8027782:	0003      	movs	r3, r0
 8027784:	2a09      	cmp	r2, #9
 8027786:	d802      	bhi.n	802778e <__hexdig_fun+0x10>
 8027788:	3b20      	subs	r3, #32
 802778a:	b2d8      	uxtb	r0, r3
 802778c:	4770      	bx	lr
 802778e:	0002      	movs	r2, r0
 8027790:	3a61      	subs	r2, #97	@ 0x61
 8027792:	2a05      	cmp	r2, #5
 8027794:	d801      	bhi.n	802779a <__hexdig_fun+0x1c>
 8027796:	3b47      	subs	r3, #71	@ 0x47
 8027798:	e7f7      	b.n	802778a <__hexdig_fun+0xc>
 802779a:	001a      	movs	r2, r3
 802779c:	3a41      	subs	r2, #65	@ 0x41
 802779e:	2000      	movs	r0, #0
 80277a0:	2a05      	cmp	r2, #5
 80277a2:	d8f3      	bhi.n	802778c <__hexdig_fun+0xe>
 80277a4:	3b27      	subs	r3, #39	@ 0x27
 80277a6:	e7f0      	b.n	802778a <__hexdig_fun+0xc>

080277a8 <__gethex>:
 80277a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80277aa:	b089      	sub	sp, #36	@ 0x24
 80277ac:	9307      	str	r3, [sp, #28]
 80277ae:	680b      	ldr	r3, [r1, #0]
 80277b0:	9201      	str	r2, [sp, #4]
 80277b2:	9003      	str	r0, [sp, #12]
 80277b4:	9106      	str	r1, [sp, #24]
 80277b6:	1c9a      	adds	r2, r3, #2
 80277b8:	0011      	movs	r1, r2
 80277ba:	3201      	adds	r2, #1
 80277bc:	1e50      	subs	r0, r2, #1
 80277be:	7800      	ldrb	r0, [r0, #0]
 80277c0:	2830      	cmp	r0, #48	@ 0x30
 80277c2:	d0f9      	beq.n	80277b8 <__gethex+0x10>
 80277c4:	1acb      	subs	r3, r1, r3
 80277c6:	3b02      	subs	r3, #2
 80277c8:	9305      	str	r3, [sp, #20]
 80277ca:	9100      	str	r1, [sp, #0]
 80277cc:	f7ff ffd7 	bl	802777e <__hexdig_fun>
 80277d0:	2300      	movs	r3, #0
 80277d2:	001d      	movs	r5, r3
 80277d4:	9302      	str	r3, [sp, #8]
 80277d6:	4298      	cmp	r0, r3
 80277d8:	d11e      	bne.n	8027818 <__gethex+0x70>
 80277da:	2201      	movs	r2, #1
 80277dc:	49a6      	ldr	r1, [pc, #664]	@ (8027a78 <__gethex+0x2d0>)
 80277de:	9800      	ldr	r0, [sp, #0]
 80277e0:	f7fe ffe4 	bl	80267ac <strncmp>
 80277e4:	0007      	movs	r7, r0
 80277e6:	42a8      	cmp	r0, r5
 80277e8:	d000      	beq.n	80277ec <__gethex+0x44>
 80277ea:	e06a      	b.n	80278c2 <__gethex+0x11a>
 80277ec:	9b00      	ldr	r3, [sp, #0]
 80277ee:	7858      	ldrb	r0, [r3, #1]
 80277f0:	1c5c      	adds	r4, r3, #1
 80277f2:	f7ff ffc4 	bl	802777e <__hexdig_fun>
 80277f6:	2301      	movs	r3, #1
 80277f8:	9302      	str	r3, [sp, #8]
 80277fa:	42a8      	cmp	r0, r5
 80277fc:	d02f      	beq.n	802785e <__gethex+0xb6>
 80277fe:	9400      	str	r4, [sp, #0]
 8027800:	9b00      	ldr	r3, [sp, #0]
 8027802:	7818      	ldrb	r0, [r3, #0]
 8027804:	2830      	cmp	r0, #48	@ 0x30
 8027806:	d009      	beq.n	802781c <__gethex+0x74>
 8027808:	f7ff ffb9 	bl	802777e <__hexdig_fun>
 802780c:	4242      	negs	r2, r0
 802780e:	4142      	adcs	r2, r0
 8027810:	2301      	movs	r3, #1
 8027812:	0025      	movs	r5, r4
 8027814:	9202      	str	r2, [sp, #8]
 8027816:	9305      	str	r3, [sp, #20]
 8027818:	9c00      	ldr	r4, [sp, #0]
 802781a:	e004      	b.n	8027826 <__gethex+0x7e>
 802781c:	9b00      	ldr	r3, [sp, #0]
 802781e:	3301      	adds	r3, #1
 8027820:	9300      	str	r3, [sp, #0]
 8027822:	e7ed      	b.n	8027800 <__gethex+0x58>
 8027824:	3401      	adds	r4, #1
 8027826:	7820      	ldrb	r0, [r4, #0]
 8027828:	f7ff ffa9 	bl	802777e <__hexdig_fun>
 802782c:	1e07      	subs	r7, r0, #0
 802782e:	d1f9      	bne.n	8027824 <__gethex+0x7c>
 8027830:	2201      	movs	r2, #1
 8027832:	0020      	movs	r0, r4
 8027834:	4990      	ldr	r1, [pc, #576]	@ (8027a78 <__gethex+0x2d0>)
 8027836:	f7fe ffb9 	bl	80267ac <strncmp>
 802783a:	2800      	cmp	r0, #0
 802783c:	d10d      	bne.n	802785a <__gethex+0xb2>
 802783e:	2d00      	cmp	r5, #0
 8027840:	d106      	bne.n	8027850 <__gethex+0xa8>
 8027842:	3401      	adds	r4, #1
 8027844:	0025      	movs	r5, r4
 8027846:	7820      	ldrb	r0, [r4, #0]
 8027848:	f7ff ff99 	bl	802777e <__hexdig_fun>
 802784c:	2800      	cmp	r0, #0
 802784e:	d102      	bne.n	8027856 <__gethex+0xae>
 8027850:	1b2d      	subs	r5, r5, r4
 8027852:	00af      	lsls	r7, r5, #2
 8027854:	e003      	b.n	802785e <__gethex+0xb6>
 8027856:	3401      	adds	r4, #1
 8027858:	e7f5      	b.n	8027846 <__gethex+0x9e>
 802785a:	2d00      	cmp	r5, #0
 802785c:	d1f8      	bne.n	8027850 <__gethex+0xa8>
 802785e:	2220      	movs	r2, #32
 8027860:	7823      	ldrb	r3, [r4, #0]
 8027862:	0026      	movs	r6, r4
 8027864:	4393      	bics	r3, r2
 8027866:	2b50      	cmp	r3, #80	@ 0x50
 8027868:	d11d      	bne.n	80278a6 <__gethex+0xfe>
 802786a:	7863      	ldrb	r3, [r4, #1]
 802786c:	2b2b      	cmp	r3, #43	@ 0x2b
 802786e:	d02d      	beq.n	80278cc <__gethex+0x124>
 8027870:	2b2d      	cmp	r3, #45	@ 0x2d
 8027872:	d02f      	beq.n	80278d4 <__gethex+0x12c>
 8027874:	2300      	movs	r3, #0
 8027876:	1c66      	adds	r6, r4, #1
 8027878:	9304      	str	r3, [sp, #16]
 802787a:	7830      	ldrb	r0, [r6, #0]
 802787c:	f7ff ff7f 	bl	802777e <__hexdig_fun>
 8027880:	1e43      	subs	r3, r0, #1
 8027882:	b2db      	uxtb	r3, r3
 8027884:	0005      	movs	r5, r0
 8027886:	2b18      	cmp	r3, #24
 8027888:	d82a      	bhi.n	80278e0 <__gethex+0x138>
 802788a:	7870      	ldrb	r0, [r6, #1]
 802788c:	f7ff ff77 	bl	802777e <__hexdig_fun>
 8027890:	1e43      	subs	r3, r0, #1
 8027892:	b2db      	uxtb	r3, r3
 8027894:	3601      	adds	r6, #1
 8027896:	3d10      	subs	r5, #16
 8027898:	2b18      	cmp	r3, #24
 802789a:	d91d      	bls.n	80278d8 <__gethex+0x130>
 802789c:	9b04      	ldr	r3, [sp, #16]
 802789e:	2b00      	cmp	r3, #0
 80278a0:	d000      	beq.n	80278a4 <__gethex+0xfc>
 80278a2:	426d      	negs	r5, r5
 80278a4:	197f      	adds	r7, r7, r5
 80278a6:	9b06      	ldr	r3, [sp, #24]
 80278a8:	601e      	str	r6, [r3, #0]
 80278aa:	9b02      	ldr	r3, [sp, #8]
 80278ac:	2b00      	cmp	r3, #0
 80278ae:	d019      	beq.n	80278e4 <__gethex+0x13c>
 80278b0:	9b05      	ldr	r3, [sp, #20]
 80278b2:	2606      	movs	r6, #6
 80278b4:	425a      	negs	r2, r3
 80278b6:	4153      	adcs	r3, r2
 80278b8:	425b      	negs	r3, r3
 80278ba:	401e      	ands	r6, r3
 80278bc:	0030      	movs	r0, r6
 80278be:	b009      	add	sp, #36	@ 0x24
 80278c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80278c2:	2301      	movs	r3, #1
 80278c4:	2700      	movs	r7, #0
 80278c6:	9c00      	ldr	r4, [sp, #0]
 80278c8:	9302      	str	r3, [sp, #8]
 80278ca:	e7c8      	b.n	802785e <__gethex+0xb6>
 80278cc:	2300      	movs	r3, #0
 80278ce:	9304      	str	r3, [sp, #16]
 80278d0:	1ca6      	adds	r6, r4, #2
 80278d2:	e7d2      	b.n	802787a <__gethex+0xd2>
 80278d4:	2301      	movs	r3, #1
 80278d6:	e7fa      	b.n	80278ce <__gethex+0x126>
 80278d8:	230a      	movs	r3, #10
 80278da:	435d      	muls	r5, r3
 80278dc:	182d      	adds	r5, r5, r0
 80278de:	e7d4      	b.n	802788a <__gethex+0xe2>
 80278e0:	0026      	movs	r6, r4
 80278e2:	e7e0      	b.n	80278a6 <__gethex+0xfe>
 80278e4:	9b00      	ldr	r3, [sp, #0]
 80278e6:	9902      	ldr	r1, [sp, #8]
 80278e8:	1ae3      	subs	r3, r4, r3
 80278ea:	3b01      	subs	r3, #1
 80278ec:	2b07      	cmp	r3, #7
 80278ee:	dc0a      	bgt.n	8027906 <__gethex+0x15e>
 80278f0:	9803      	ldr	r0, [sp, #12]
 80278f2:	f000 fb19 	bl	8027f28 <_Balloc>
 80278f6:	1e05      	subs	r5, r0, #0
 80278f8:	d108      	bne.n	802790c <__gethex+0x164>
 80278fa:	002a      	movs	r2, r5
 80278fc:	21e4      	movs	r1, #228	@ 0xe4
 80278fe:	4b5f      	ldr	r3, [pc, #380]	@ (8027a7c <__gethex+0x2d4>)
 8027900:	485f      	ldr	r0, [pc, #380]	@ (8027a80 <__gethex+0x2d8>)
 8027902:	f001 fbe9 	bl	80290d8 <__assert_func>
 8027906:	3101      	adds	r1, #1
 8027908:	105b      	asrs	r3, r3, #1
 802790a:	e7ef      	b.n	80278ec <__gethex+0x144>
 802790c:	0003      	movs	r3, r0
 802790e:	3314      	adds	r3, #20
 8027910:	9302      	str	r3, [sp, #8]
 8027912:	9305      	str	r3, [sp, #20]
 8027914:	2300      	movs	r3, #0
 8027916:	001e      	movs	r6, r3
 8027918:	9304      	str	r3, [sp, #16]
 802791a:	9b00      	ldr	r3, [sp, #0]
 802791c:	42a3      	cmp	r3, r4
 802791e:	d338      	bcc.n	8027992 <__gethex+0x1ea>
 8027920:	9c05      	ldr	r4, [sp, #20]
 8027922:	9b02      	ldr	r3, [sp, #8]
 8027924:	c440      	stmia	r4!, {r6}
 8027926:	1ae4      	subs	r4, r4, r3
 8027928:	10a4      	asrs	r4, r4, #2
 802792a:	0030      	movs	r0, r6
 802792c:	612c      	str	r4, [r5, #16]
 802792e:	f000 fbf3 	bl	8028118 <__hi0bits>
 8027932:	9b01      	ldr	r3, [sp, #4]
 8027934:	0164      	lsls	r4, r4, #5
 8027936:	681b      	ldr	r3, [r3, #0]
 8027938:	1a26      	subs	r6, r4, r0
 802793a:	9300      	str	r3, [sp, #0]
 802793c:	429e      	cmp	r6, r3
 802793e:	dd52      	ble.n	80279e6 <__gethex+0x23e>
 8027940:	1af6      	subs	r6, r6, r3
 8027942:	0031      	movs	r1, r6
 8027944:	0028      	movs	r0, r5
 8027946:	f000 ff8e 	bl	8028866 <__any_on>
 802794a:	1e04      	subs	r4, r0, #0
 802794c:	d00f      	beq.n	802796e <__gethex+0x1c6>
 802794e:	2401      	movs	r4, #1
 8027950:	211f      	movs	r1, #31
 8027952:	0020      	movs	r0, r4
 8027954:	1e73      	subs	r3, r6, #1
 8027956:	4019      	ands	r1, r3
 8027958:	4088      	lsls	r0, r1
 802795a:	0001      	movs	r1, r0
 802795c:	115a      	asrs	r2, r3, #5
 802795e:	9802      	ldr	r0, [sp, #8]
 8027960:	0092      	lsls	r2, r2, #2
 8027962:	5812      	ldr	r2, [r2, r0]
 8027964:	420a      	tst	r2, r1
 8027966:	d002      	beq.n	802796e <__gethex+0x1c6>
 8027968:	42a3      	cmp	r3, r4
 802796a:	dc34      	bgt.n	80279d6 <__gethex+0x22e>
 802796c:	2402      	movs	r4, #2
 802796e:	0031      	movs	r1, r6
 8027970:	0028      	movs	r0, r5
 8027972:	f7ff feb1 	bl	80276d8 <rshift>
 8027976:	19bf      	adds	r7, r7, r6
 8027978:	9b01      	ldr	r3, [sp, #4]
 802797a:	689b      	ldr	r3, [r3, #8]
 802797c:	42bb      	cmp	r3, r7
 802797e:	da42      	bge.n	8027a06 <__gethex+0x25e>
 8027980:	0029      	movs	r1, r5
 8027982:	9803      	ldr	r0, [sp, #12]
 8027984:	f000 fb14 	bl	8027fb0 <_Bfree>
 8027988:	2300      	movs	r3, #0
 802798a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802798c:	26a3      	movs	r6, #163	@ 0xa3
 802798e:	6013      	str	r3, [r2, #0]
 8027990:	e794      	b.n	80278bc <__gethex+0x114>
 8027992:	3c01      	subs	r4, #1
 8027994:	7823      	ldrb	r3, [r4, #0]
 8027996:	2b2e      	cmp	r3, #46	@ 0x2e
 8027998:	d012      	beq.n	80279c0 <__gethex+0x218>
 802799a:	9b04      	ldr	r3, [sp, #16]
 802799c:	2b20      	cmp	r3, #32
 802799e:	d104      	bne.n	80279aa <__gethex+0x202>
 80279a0:	9b05      	ldr	r3, [sp, #20]
 80279a2:	c340      	stmia	r3!, {r6}
 80279a4:	2600      	movs	r6, #0
 80279a6:	9305      	str	r3, [sp, #20]
 80279a8:	9604      	str	r6, [sp, #16]
 80279aa:	7820      	ldrb	r0, [r4, #0]
 80279ac:	f7ff fee7 	bl	802777e <__hexdig_fun>
 80279b0:	230f      	movs	r3, #15
 80279b2:	4018      	ands	r0, r3
 80279b4:	9b04      	ldr	r3, [sp, #16]
 80279b6:	4098      	lsls	r0, r3
 80279b8:	3304      	adds	r3, #4
 80279ba:	4306      	orrs	r6, r0
 80279bc:	9304      	str	r3, [sp, #16]
 80279be:	e7ac      	b.n	802791a <__gethex+0x172>
 80279c0:	9b00      	ldr	r3, [sp, #0]
 80279c2:	42a3      	cmp	r3, r4
 80279c4:	d8e9      	bhi.n	802799a <__gethex+0x1f2>
 80279c6:	2201      	movs	r2, #1
 80279c8:	0020      	movs	r0, r4
 80279ca:	492b      	ldr	r1, [pc, #172]	@ (8027a78 <__gethex+0x2d0>)
 80279cc:	f7fe feee 	bl	80267ac <strncmp>
 80279d0:	2800      	cmp	r0, #0
 80279d2:	d1e2      	bne.n	802799a <__gethex+0x1f2>
 80279d4:	e7a1      	b.n	802791a <__gethex+0x172>
 80279d6:	0028      	movs	r0, r5
 80279d8:	1eb1      	subs	r1, r6, #2
 80279da:	f000 ff44 	bl	8028866 <__any_on>
 80279de:	2800      	cmp	r0, #0
 80279e0:	d0c4      	beq.n	802796c <__gethex+0x1c4>
 80279e2:	2403      	movs	r4, #3
 80279e4:	e7c3      	b.n	802796e <__gethex+0x1c6>
 80279e6:	9b00      	ldr	r3, [sp, #0]
 80279e8:	2400      	movs	r4, #0
 80279ea:	429e      	cmp	r6, r3
 80279ec:	dac4      	bge.n	8027978 <__gethex+0x1d0>
 80279ee:	1b9e      	subs	r6, r3, r6
 80279f0:	0029      	movs	r1, r5
 80279f2:	0032      	movs	r2, r6
 80279f4:	9803      	ldr	r0, [sp, #12]
 80279f6:	f000 fcfd 	bl	80283f4 <__lshift>
 80279fa:	0003      	movs	r3, r0
 80279fc:	3314      	adds	r3, #20
 80279fe:	0005      	movs	r5, r0
 8027a00:	1bbf      	subs	r7, r7, r6
 8027a02:	9302      	str	r3, [sp, #8]
 8027a04:	e7b8      	b.n	8027978 <__gethex+0x1d0>
 8027a06:	9b01      	ldr	r3, [sp, #4]
 8027a08:	685e      	ldr	r6, [r3, #4]
 8027a0a:	42be      	cmp	r6, r7
 8027a0c:	dd6f      	ble.n	8027aee <__gethex+0x346>
 8027a0e:	9b00      	ldr	r3, [sp, #0]
 8027a10:	1bf6      	subs	r6, r6, r7
 8027a12:	42b3      	cmp	r3, r6
 8027a14:	dc36      	bgt.n	8027a84 <__gethex+0x2dc>
 8027a16:	9b01      	ldr	r3, [sp, #4]
 8027a18:	68db      	ldr	r3, [r3, #12]
 8027a1a:	2b02      	cmp	r3, #2
 8027a1c:	d024      	beq.n	8027a68 <__gethex+0x2c0>
 8027a1e:	2b03      	cmp	r3, #3
 8027a20:	d026      	beq.n	8027a70 <__gethex+0x2c8>
 8027a22:	2b01      	cmp	r3, #1
 8027a24:	d117      	bne.n	8027a56 <__gethex+0x2ae>
 8027a26:	9b00      	ldr	r3, [sp, #0]
 8027a28:	42b3      	cmp	r3, r6
 8027a2a:	d114      	bne.n	8027a56 <__gethex+0x2ae>
 8027a2c:	2b01      	cmp	r3, #1
 8027a2e:	d10b      	bne.n	8027a48 <__gethex+0x2a0>
 8027a30:	9b01      	ldr	r3, [sp, #4]
 8027a32:	9a07      	ldr	r2, [sp, #28]
 8027a34:	685b      	ldr	r3, [r3, #4]
 8027a36:	2662      	movs	r6, #98	@ 0x62
 8027a38:	6013      	str	r3, [r2, #0]
 8027a3a:	2301      	movs	r3, #1
 8027a3c:	9a02      	ldr	r2, [sp, #8]
 8027a3e:	612b      	str	r3, [r5, #16]
 8027a40:	6013      	str	r3, [r2, #0]
 8027a42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027a44:	601d      	str	r5, [r3, #0]
 8027a46:	e739      	b.n	80278bc <__gethex+0x114>
 8027a48:	9900      	ldr	r1, [sp, #0]
 8027a4a:	0028      	movs	r0, r5
 8027a4c:	3901      	subs	r1, #1
 8027a4e:	f000 ff0a 	bl	8028866 <__any_on>
 8027a52:	2800      	cmp	r0, #0
 8027a54:	d1ec      	bne.n	8027a30 <__gethex+0x288>
 8027a56:	0029      	movs	r1, r5
 8027a58:	9803      	ldr	r0, [sp, #12]
 8027a5a:	f000 faa9 	bl	8027fb0 <_Bfree>
 8027a5e:	2300      	movs	r3, #0
 8027a60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027a62:	2650      	movs	r6, #80	@ 0x50
 8027a64:	6013      	str	r3, [r2, #0]
 8027a66:	e729      	b.n	80278bc <__gethex+0x114>
 8027a68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027a6a:	2b00      	cmp	r3, #0
 8027a6c:	d1f3      	bne.n	8027a56 <__gethex+0x2ae>
 8027a6e:	e7df      	b.n	8027a30 <__gethex+0x288>
 8027a70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027a72:	2b00      	cmp	r3, #0
 8027a74:	d1dc      	bne.n	8027a30 <__gethex+0x288>
 8027a76:	e7ee      	b.n	8027a56 <__gethex+0x2ae>
 8027a78:	0802ee08 	.word	0x0802ee08
 8027a7c:	0802eec2 	.word	0x0802eec2
 8027a80:	0802eed3 	.word	0x0802eed3
 8027a84:	1e77      	subs	r7, r6, #1
 8027a86:	2c00      	cmp	r4, #0
 8027a88:	d12f      	bne.n	8027aea <__gethex+0x342>
 8027a8a:	2f00      	cmp	r7, #0
 8027a8c:	d004      	beq.n	8027a98 <__gethex+0x2f0>
 8027a8e:	0039      	movs	r1, r7
 8027a90:	0028      	movs	r0, r5
 8027a92:	f000 fee8 	bl	8028866 <__any_on>
 8027a96:	0004      	movs	r4, r0
 8027a98:	231f      	movs	r3, #31
 8027a9a:	117a      	asrs	r2, r7, #5
 8027a9c:	401f      	ands	r7, r3
 8027a9e:	3b1e      	subs	r3, #30
 8027aa0:	40bb      	lsls	r3, r7
 8027aa2:	9902      	ldr	r1, [sp, #8]
 8027aa4:	0092      	lsls	r2, r2, #2
 8027aa6:	5852      	ldr	r2, [r2, r1]
 8027aa8:	421a      	tst	r2, r3
 8027aaa:	d001      	beq.n	8027ab0 <__gethex+0x308>
 8027aac:	2302      	movs	r3, #2
 8027aae:	431c      	orrs	r4, r3
 8027ab0:	9b00      	ldr	r3, [sp, #0]
 8027ab2:	0031      	movs	r1, r6
 8027ab4:	1b9b      	subs	r3, r3, r6
 8027ab6:	2602      	movs	r6, #2
 8027ab8:	0028      	movs	r0, r5
 8027aba:	9300      	str	r3, [sp, #0]
 8027abc:	f7ff fe0c 	bl	80276d8 <rshift>
 8027ac0:	9b01      	ldr	r3, [sp, #4]
 8027ac2:	685f      	ldr	r7, [r3, #4]
 8027ac4:	2c00      	cmp	r4, #0
 8027ac6:	d03f      	beq.n	8027b48 <__gethex+0x3a0>
 8027ac8:	9b01      	ldr	r3, [sp, #4]
 8027aca:	68db      	ldr	r3, [r3, #12]
 8027acc:	2b02      	cmp	r3, #2
 8027ace:	d010      	beq.n	8027af2 <__gethex+0x34a>
 8027ad0:	2b03      	cmp	r3, #3
 8027ad2:	d012      	beq.n	8027afa <__gethex+0x352>
 8027ad4:	2b01      	cmp	r3, #1
 8027ad6:	d106      	bne.n	8027ae6 <__gethex+0x33e>
 8027ad8:	07a2      	lsls	r2, r4, #30
 8027ada:	d504      	bpl.n	8027ae6 <__gethex+0x33e>
 8027adc:	9a02      	ldr	r2, [sp, #8]
 8027ade:	6812      	ldr	r2, [r2, #0]
 8027ae0:	4314      	orrs	r4, r2
 8027ae2:	421c      	tst	r4, r3
 8027ae4:	d10c      	bne.n	8027b00 <__gethex+0x358>
 8027ae6:	2310      	movs	r3, #16
 8027ae8:	e02d      	b.n	8027b46 <__gethex+0x39e>
 8027aea:	2401      	movs	r4, #1
 8027aec:	e7d4      	b.n	8027a98 <__gethex+0x2f0>
 8027aee:	2601      	movs	r6, #1
 8027af0:	e7e8      	b.n	8027ac4 <__gethex+0x31c>
 8027af2:	2301      	movs	r3, #1
 8027af4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027af6:	1a9b      	subs	r3, r3, r2
 8027af8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027afa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027afc:	2b00      	cmp	r3, #0
 8027afe:	d0f2      	beq.n	8027ae6 <__gethex+0x33e>
 8027b00:	692b      	ldr	r3, [r5, #16]
 8027b02:	2000      	movs	r0, #0
 8027b04:	9302      	str	r3, [sp, #8]
 8027b06:	009b      	lsls	r3, r3, #2
 8027b08:	9304      	str	r3, [sp, #16]
 8027b0a:	002b      	movs	r3, r5
 8027b0c:	9a04      	ldr	r2, [sp, #16]
 8027b0e:	3314      	adds	r3, #20
 8027b10:	1899      	adds	r1, r3, r2
 8027b12:	681a      	ldr	r2, [r3, #0]
 8027b14:	1c54      	adds	r4, r2, #1
 8027b16:	d01c      	beq.n	8027b52 <__gethex+0x3aa>
 8027b18:	3201      	adds	r2, #1
 8027b1a:	601a      	str	r2, [r3, #0]
 8027b1c:	002b      	movs	r3, r5
 8027b1e:	3314      	adds	r3, #20
 8027b20:	2e02      	cmp	r6, #2
 8027b22:	d13f      	bne.n	8027ba4 <__gethex+0x3fc>
 8027b24:	9a01      	ldr	r2, [sp, #4]
 8027b26:	9900      	ldr	r1, [sp, #0]
 8027b28:	6812      	ldr	r2, [r2, #0]
 8027b2a:	3a01      	subs	r2, #1
 8027b2c:	428a      	cmp	r2, r1
 8027b2e:	d109      	bne.n	8027b44 <__gethex+0x39c>
 8027b30:	000a      	movs	r2, r1
 8027b32:	201f      	movs	r0, #31
 8027b34:	4010      	ands	r0, r2
 8027b36:	2201      	movs	r2, #1
 8027b38:	4082      	lsls	r2, r0
 8027b3a:	1149      	asrs	r1, r1, #5
 8027b3c:	0089      	lsls	r1, r1, #2
 8027b3e:	58cb      	ldr	r3, [r1, r3]
 8027b40:	4213      	tst	r3, r2
 8027b42:	d13d      	bne.n	8027bc0 <__gethex+0x418>
 8027b44:	2320      	movs	r3, #32
 8027b46:	431e      	orrs	r6, r3
 8027b48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027b4a:	601d      	str	r5, [r3, #0]
 8027b4c:	9b07      	ldr	r3, [sp, #28]
 8027b4e:	601f      	str	r7, [r3, #0]
 8027b50:	e6b4      	b.n	80278bc <__gethex+0x114>
 8027b52:	c301      	stmia	r3!, {r0}
 8027b54:	4299      	cmp	r1, r3
 8027b56:	d8dc      	bhi.n	8027b12 <__gethex+0x36a>
 8027b58:	68ab      	ldr	r3, [r5, #8]
 8027b5a:	9a02      	ldr	r2, [sp, #8]
 8027b5c:	429a      	cmp	r2, r3
 8027b5e:	db18      	blt.n	8027b92 <__gethex+0x3ea>
 8027b60:	6869      	ldr	r1, [r5, #4]
 8027b62:	9803      	ldr	r0, [sp, #12]
 8027b64:	3101      	adds	r1, #1
 8027b66:	f000 f9df 	bl	8027f28 <_Balloc>
 8027b6a:	1e04      	subs	r4, r0, #0
 8027b6c:	d104      	bne.n	8027b78 <__gethex+0x3d0>
 8027b6e:	0022      	movs	r2, r4
 8027b70:	2184      	movs	r1, #132	@ 0x84
 8027b72:	4b1d      	ldr	r3, [pc, #116]	@ (8027be8 <__gethex+0x440>)
 8027b74:	481d      	ldr	r0, [pc, #116]	@ (8027bec <__gethex+0x444>)
 8027b76:	e6c4      	b.n	8027902 <__gethex+0x15a>
 8027b78:	0029      	movs	r1, r5
 8027b7a:	692a      	ldr	r2, [r5, #16]
 8027b7c:	310c      	adds	r1, #12
 8027b7e:	3202      	adds	r2, #2
 8027b80:	0092      	lsls	r2, r2, #2
 8027b82:	300c      	adds	r0, #12
 8027b84:	f7fe fed8 	bl	8026938 <memcpy>
 8027b88:	0029      	movs	r1, r5
 8027b8a:	9803      	ldr	r0, [sp, #12]
 8027b8c:	f000 fa10 	bl	8027fb0 <_Bfree>
 8027b90:	0025      	movs	r5, r4
 8027b92:	692b      	ldr	r3, [r5, #16]
 8027b94:	1c5a      	adds	r2, r3, #1
 8027b96:	612a      	str	r2, [r5, #16]
 8027b98:	2201      	movs	r2, #1
 8027b9a:	3304      	adds	r3, #4
 8027b9c:	009b      	lsls	r3, r3, #2
 8027b9e:	18eb      	adds	r3, r5, r3
 8027ba0:	605a      	str	r2, [r3, #4]
 8027ba2:	e7bb      	b.n	8027b1c <__gethex+0x374>
 8027ba4:	692a      	ldr	r2, [r5, #16]
 8027ba6:	9902      	ldr	r1, [sp, #8]
 8027ba8:	428a      	cmp	r2, r1
 8027baa:	dd0b      	ble.n	8027bc4 <__gethex+0x41c>
 8027bac:	2101      	movs	r1, #1
 8027bae:	0028      	movs	r0, r5
 8027bb0:	f7ff fd92 	bl	80276d8 <rshift>
 8027bb4:	9b01      	ldr	r3, [sp, #4]
 8027bb6:	3701      	adds	r7, #1
 8027bb8:	689b      	ldr	r3, [r3, #8]
 8027bba:	42bb      	cmp	r3, r7
 8027bbc:	da00      	bge.n	8027bc0 <__gethex+0x418>
 8027bbe:	e6df      	b.n	8027980 <__gethex+0x1d8>
 8027bc0:	2601      	movs	r6, #1
 8027bc2:	e7bf      	b.n	8027b44 <__gethex+0x39c>
 8027bc4:	221f      	movs	r2, #31
 8027bc6:	9c00      	ldr	r4, [sp, #0]
 8027bc8:	9900      	ldr	r1, [sp, #0]
 8027bca:	4014      	ands	r4, r2
 8027bcc:	4211      	tst	r1, r2
 8027bce:	d0f7      	beq.n	8027bc0 <__gethex+0x418>
 8027bd0:	9a04      	ldr	r2, [sp, #16]
 8027bd2:	189b      	adds	r3, r3, r2
 8027bd4:	3b04      	subs	r3, #4
 8027bd6:	6818      	ldr	r0, [r3, #0]
 8027bd8:	f000 fa9e 	bl	8028118 <__hi0bits>
 8027bdc:	2320      	movs	r3, #32
 8027bde:	1b1b      	subs	r3, r3, r4
 8027be0:	4298      	cmp	r0, r3
 8027be2:	dbe3      	blt.n	8027bac <__gethex+0x404>
 8027be4:	e7ec      	b.n	8027bc0 <__gethex+0x418>
 8027be6:	46c0      	nop			@ (mov r8, r8)
 8027be8:	0802eec2 	.word	0x0802eec2
 8027bec:	0802eed3 	.word	0x0802eed3

08027bf0 <L_shift>:
 8027bf0:	2308      	movs	r3, #8
 8027bf2:	b570      	push	{r4, r5, r6, lr}
 8027bf4:	2520      	movs	r5, #32
 8027bf6:	1a9a      	subs	r2, r3, r2
 8027bf8:	0092      	lsls	r2, r2, #2
 8027bfa:	1aad      	subs	r5, r5, r2
 8027bfc:	6843      	ldr	r3, [r0, #4]
 8027bfe:	6804      	ldr	r4, [r0, #0]
 8027c00:	001e      	movs	r6, r3
 8027c02:	40ae      	lsls	r6, r5
 8027c04:	40d3      	lsrs	r3, r2
 8027c06:	4334      	orrs	r4, r6
 8027c08:	6004      	str	r4, [r0, #0]
 8027c0a:	6043      	str	r3, [r0, #4]
 8027c0c:	3004      	adds	r0, #4
 8027c0e:	4288      	cmp	r0, r1
 8027c10:	d3f4      	bcc.n	8027bfc <L_shift+0xc>
 8027c12:	bd70      	pop	{r4, r5, r6, pc}

08027c14 <__match>:
 8027c14:	b530      	push	{r4, r5, lr}
 8027c16:	6803      	ldr	r3, [r0, #0]
 8027c18:	780c      	ldrb	r4, [r1, #0]
 8027c1a:	3301      	adds	r3, #1
 8027c1c:	2c00      	cmp	r4, #0
 8027c1e:	d102      	bne.n	8027c26 <__match+0x12>
 8027c20:	6003      	str	r3, [r0, #0]
 8027c22:	2001      	movs	r0, #1
 8027c24:	bd30      	pop	{r4, r5, pc}
 8027c26:	781a      	ldrb	r2, [r3, #0]
 8027c28:	0015      	movs	r5, r2
 8027c2a:	3d41      	subs	r5, #65	@ 0x41
 8027c2c:	2d19      	cmp	r5, #25
 8027c2e:	d800      	bhi.n	8027c32 <__match+0x1e>
 8027c30:	3220      	adds	r2, #32
 8027c32:	3101      	adds	r1, #1
 8027c34:	42a2      	cmp	r2, r4
 8027c36:	d0ef      	beq.n	8027c18 <__match+0x4>
 8027c38:	2000      	movs	r0, #0
 8027c3a:	e7f3      	b.n	8027c24 <__match+0x10>

08027c3c <__hexnan>:
 8027c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027c3e:	680b      	ldr	r3, [r1, #0]
 8027c40:	b08b      	sub	sp, #44	@ 0x2c
 8027c42:	9201      	str	r2, [sp, #4]
 8027c44:	9901      	ldr	r1, [sp, #4]
 8027c46:	115a      	asrs	r2, r3, #5
 8027c48:	0092      	lsls	r2, r2, #2
 8027c4a:	188a      	adds	r2, r1, r2
 8027c4c:	9202      	str	r2, [sp, #8]
 8027c4e:	0019      	movs	r1, r3
 8027c50:	221f      	movs	r2, #31
 8027c52:	4011      	ands	r1, r2
 8027c54:	9008      	str	r0, [sp, #32]
 8027c56:	9106      	str	r1, [sp, #24]
 8027c58:	4213      	tst	r3, r2
 8027c5a:	d002      	beq.n	8027c62 <__hexnan+0x26>
 8027c5c:	9b02      	ldr	r3, [sp, #8]
 8027c5e:	3304      	adds	r3, #4
 8027c60:	9302      	str	r3, [sp, #8]
 8027c62:	9b02      	ldr	r3, [sp, #8]
 8027c64:	2500      	movs	r5, #0
 8027c66:	1f1f      	subs	r7, r3, #4
 8027c68:	003e      	movs	r6, r7
 8027c6a:	003c      	movs	r4, r7
 8027c6c:	9b08      	ldr	r3, [sp, #32]
 8027c6e:	603d      	str	r5, [r7, #0]
 8027c70:	681b      	ldr	r3, [r3, #0]
 8027c72:	9507      	str	r5, [sp, #28]
 8027c74:	9305      	str	r3, [sp, #20]
 8027c76:	9503      	str	r5, [sp, #12]
 8027c78:	9b05      	ldr	r3, [sp, #20]
 8027c7a:	3301      	adds	r3, #1
 8027c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8027c7e:	9b05      	ldr	r3, [sp, #20]
 8027c80:	785b      	ldrb	r3, [r3, #1]
 8027c82:	9304      	str	r3, [sp, #16]
 8027c84:	2b00      	cmp	r3, #0
 8027c86:	d028      	beq.n	8027cda <__hexnan+0x9e>
 8027c88:	9804      	ldr	r0, [sp, #16]
 8027c8a:	f7ff fd78 	bl	802777e <__hexdig_fun>
 8027c8e:	2800      	cmp	r0, #0
 8027c90:	d155      	bne.n	8027d3e <__hexnan+0x102>
 8027c92:	9b04      	ldr	r3, [sp, #16]
 8027c94:	2b20      	cmp	r3, #32
 8027c96:	d819      	bhi.n	8027ccc <__hexnan+0x90>
 8027c98:	9b03      	ldr	r3, [sp, #12]
 8027c9a:	9a07      	ldr	r2, [sp, #28]
 8027c9c:	4293      	cmp	r3, r2
 8027c9e:	dd12      	ble.n	8027cc6 <__hexnan+0x8a>
 8027ca0:	42b4      	cmp	r4, r6
 8027ca2:	d206      	bcs.n	8027cb2 <__hexnan+0x76>
 8027ca4:	2d07      	cmp	r5, #7
 8027ca6:	dc04      	bgt.n	8027cb2 <__hexnan+0x76>
 8027ca8:	002a      	movs	r2, r5
 8027caa:	0031      	movs	r1, r6
 8027cac:	0020      	movs	r0, r4
 8027cae:	f7ff ff9f 	bl	8027bf0 <L_shift>
 8027cb2:	9b01      	ldr	r3, [sp, #4]
 8027cb4:	2508      	movs	r5, #8
 8027cb6:	429c      	cmp	r4, r3
 8027cb8:	d905      	bls.n	8027cc6 <__hexnan+0x8a>
 8027cba:	1f26      	subs	r6, r4, #4
 8027cbc:	2500      	movs	r5, #0
 8027cbe:	0034      	movs	r4, r6
 8027cc0:	9b03      	ldr	r3, [sp, #12]
 8027cc2:	6035      	str	r5, [r6, #0]
 8027cc4:	9307      	str	r3, [sp, #28]
 8027cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027cc8:	9305      	str	r3, [sp, #20]
 8027cca:	e7d5      	b.n	8027c78 <__hexnan+0x3c>
 8027ccc:	9b04      	ldr	r3, [sp, #16]
 8027cce:	2b29      	cmp	r3, #41	@ 0x29
 8027cd0:	d15a      	bne.n	8027d88 <__hexnan+0x14c>
 8027cd2:	9b05      	ldr	r3, [sp, #20]
 8027cd4:	9a08      	ldr	r2, [sp, #32]
 8027cd6:	3302      	adds	r3, #2
 8027cd8:	6013      	str	r3, [r2, #0]
 8027cda:	9b03      	ldr	r3, [sp, #12]
 8027cdc:	2b00      	cmp	r3, #0
 8027cde:	d053      	beq.n	8027d88 <__hexnan+0x14c>
 8027ce0:	42b4      	cmp	r4, r6
 8027ce2:	d206      	bcs.n	8027cf2 <__hexnan+0xb6>
 8027ce4:	2d07      	cmp	r5, #7
 8027ce6:	dc04      	bgt.n	8027cf2 <__hexnan+0xb6>
 8027ce8:	002a      	movs	r2, r5
 8027cea:	0031      	movs	r1, r6
 8027cec:	0020      	movs	r0, r4
 8027cee:	f7ff ff7f 	bl	8027bf0 <L_shift>
 8027cf2:	9b01      	ldr	r3, [sp, #4]
 8027cf4:	429c      	cmp	r4, r3
 8027cf6:	d936      	bls.n	8027d66 <__hexnan+0x12a>
 8027cf8:	001a      	movs	r2, r3
 8027cfa:	0023      	movs	r3, r4
 8027cfc:	cb02      	ldmia	r3!, {r1}
 8027cfe:	c202      	stmia	r2!, {r1}
 8027d00:	429f      	cmp	r7, r3
 8027d02:	d2fb      	bcs.n	8027cfc <__hexnan+0xc0>
 8027d04:	9b02      	ldr	r3, [sp, #8]
 8027d06:	1c62      	adds	r2, r4, #1
 8027d08:	1ed9      	subs	r1, r3, #3
 8027d0a:	2304      	movs	r3, #4
 8027d0c:	4291      	cmp	r1, r2
 8027d0e:	d305      	bcc.n	8027d1c <__hexnan+0xe0>
 8027d10:	9b02      	ldr	r3, [sp, #8]
 8027d12:	3b04      	subs	r3, #4
 8027d14:	1b1b      	subs	r3, r3, r4
 8027d16:	089b      	lsrs	r3, r3, #2
 8027d18:	3301      	adds	r3, #1
 8027d1a:	009b      	lsls	r3, r3, #2
 8027d1c:	9a01      	ldr	r2, [sp, #4]
 8027d1e:	18d3      	adds	r3, r2, r3
 8027d20:	2200      	movs	r2, #0
 8027d22:	c304      	stmia	r3!, {r2}
 8027d24:	429f      	cmp	r7, r3
 8027d26:	d2fc      	bcs.n	8027d22 <__hexnan+0xe6>
 8027d28:	683b      	ldr	r3, [r7, #0]
 8027d2a:	2b00      	cmp	r3, #0
 8027d2c:	d104      	bne.n	8027d38 <__hexnan+0xfc>
 8027d2e:	9b01      	ldr	r3, [sp, #4]
 8027d30:	429f      	cmp	r7, r3
 8027d32:	d127      	bne.n	8027d84 <__hexnan+0x148>
 8027d34:	2301      	movs	r3, #1
 8027d36:	603b      	str	r3, [r7, #0]
 8027d38:	2005      	movs	r0, #5
 8027d3a:	b00b      	add	sp, #44	@ 0x2c
 8027d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027d3e:	9b03      	ldr	r3, [sp, #12]
 8027d40:	3501      	adds	r5, #1
 8027d42:	3301      	adds	r3, #1
 8027d44:	9303      	str	r3, [sp, #12]
 8027d46:	2d08      	cmp	r5, #8
 8027d48:	dd06      	ble.n	8027d58 <__hexnan+0x11c>
 8027d4a:	9b01      	ldr	r3, [sp, #4]
 8027d4c:	429c      	cmp	r4, r3
 8027d4e:	d9ba      	bls.n	8027cc6 <__hexnan+0x8a>
 8027d50:	2300      	movs	r3, #0
 8027d52:	2501      	movs	r5, #1
 8027d54:	3c04      	subs	r4, #4
 8027d56:	6023      	str	r3, [r4, #0]
 8027d58:	220f      	movs	r2, #15
 8027d5a:	6823      	ldr	r3, [r4, #0]
 8027d5c:	4010      	ands	r0, r2
 8027d5e:	011b      	lsls	r3, r3, #4
 8027d60:	4303      	orrs	r3, r0
 8027d62:	6023      	str	r3, [r4, #0]
 8027d64:	e7af      	b.n	8027cc6 <__hexnan+0x8a>
 8027d66:	9b06      	ldr	r3, [sp, #24]
 8027d68:	2b00      	cmp	r3, #0
 8027d6a:	d0dd      	beq.n	8027d28 <__hexnan+0xec>
 8027d6c:	2320      	movs	r3, #32
 8027d6e:	9a06      	ldr	r2, [sp, #24]
 8027d70:	9902      	ldr	r1, [sp, #8]
 8027d72:	1a9b      	subs	r3, r3, r2
 8027d74:	2201      	movs	r2, #1
 8027d76:	4252      	negs	r2, r2
 8027d78:	40da      	lsrs	r2, r3
 8027d7a:	3904      	subs	r1, #4
 8027d7c:	680b      	ldr	r3, [r1, #0]
 8027d7e:	4013      	ands	r3, r2
 8027d80:	600b      	str	r3, [r1, #0]
 8027d82:	e7d1      	b.n	8027d28 <__hexnan+0xec>
 8027d84:	3f04      	subs	r7, #4
 8027d86:	e7cf      	b.n	8027d28 <__hexnan+0xec>
 8027d88:	2004      	movs	r0, #4
 8027d8a:	e7d6      	b.n	8027d3a <__hexnan+0xfe>

08027d8c <malloc>:
 8027d8c:	b510      	push	{r4, lr}
 8027d8e:	4b03      	ldr	r3, [pc, #12]	@ (8027d9c <malloc+0x10>)
 8027d90:	0001      	movs	r1, r0
 8027d92:	6818      	ldr	r0, [r3, #0]
 8027d94:	f000 f826 	bl	8027de4 <_malloc_r>
 8027d98:	bd10      	pop	{r4, pc}
 8027d9a:	46c0      	nop			@ (mov r8, r8)
 8027d9c:	200003ec 	.word	0x200003ec

08027da0 <sbrk_aligned>:
 8027da0:	b570      	push	{r4, r5, r6, lr}
 8027da2:	4e0f      	ldr	r6, [pc, #60]	@ (8027de0 <sbrk_aligned+0x40>)
 8027da4:	000d      	movs	r5, r1
 8027da6:	6831      	ldr	r1, [r6, #0]
 8027da8:	0004      	movs	r4, r0
 8027daa:	2900      	cmp	r1, #0
 8027dac:	d102      	bne.n	8027db4 <sbrk_aligned+0x14>
 8027dae:	f001 f981 	bl	80290b4 <_sbrk_r>
 8027db2:	6030      	str	r0, [r6, #0]
 8027db4:	0029      	movs	r1, r5
 8027db6:	0020      	movs	r0, r4
 8027db8:	f001 f97c 	bl	80290b4 <_sbrk_r>
 8027dbc:	1c43      	adds	r3, r0, #1
 8027dbe:	d103      	bne.n	8027dc8 <sbrk_aligned+0x28>
 8027dc0:	2501      	movs	r5, #1
 8027dc2:	426d      	negs	r5, r5
 8027dc4:	0028      	movs	r0, r5
 8027dc6:	bd70      	pop	{r4, r5, r6, pc}
 8027dc8:	2303      	movs	r3, #3
 8027dca:	1cc5      	adds	r5, r0, #3
 8027dcc:	439d      	bics	r5, r3
 8027dce:	42a8      	cmp	r0, r5
 8027dd0:	d0f8      	beq.n	8027dc4 <sbrk_aligned+0x24>
 8027dd2:	1a29      	subs	r1, r5, r0
 8027dd4:	0020      	movs	r0, r4
 8027dd6:	f001 f96d 	bl	80290b4 <_sbrk_r>
 8027dda:	3001      	adds	r0, #1
 8027ddc:	d1f2      	bne.n	8027dc4 <sbrk_aligned+0x24>
 8027dde:	e7ef      	b.n	8027dc0 <sbrk_aligned+0x20>
 8027de0:	20003910 	.word	0x20003910

08027de4 <_malloc_r>:
 8027de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027de6:	2203      	movs	r2, #3
 8027de8:	1ccb      	adds	r3, r1, #3
 8027dea:	4393      	bics	r3, r2
 8027dec:	3308      	adds	r3, #8
 8027dee:	0005      	movs	r5, r0
 8027df0:	001f      	movs	r7, r3
 8027df2:	2b0c      	cmp	r3, #12
 8027df4:	d234      	bcs.n	8027e60 <_malloc_r+0x7c>
 8027df6:	270c      	movs	r7, #12
 8027df8:	42b9      	cmp	r1, r7
 8027dfa:	d833      	bhi.n	8027e64 <_malloc_r+0x80>
 8027dfc:	0028      	movs	r0, r5
 8027dfe:	f000 f883 	bl	8027f08 <__malloc_lock>
 8027e02:	4e37      	ldr	r6, [pc, #220]	@ (8027ee0 <_malloc_r+0xfc>)
 8027e04:	6833      	ldr	r3, [r6, #0]
 8027e06:	001c      	movs	r4, r3
 8027e08:	2c00      	cmp	r4, #0
 8027e0a:	d12f      	bne.n	8027e6c <_malloc_r+0x88>
 8027e0c:	0039      	movs	r1, r7
 8027e0e:	0028      	movs	r0, r5
 8027e10:	f7ff ffc6 	bl	8027da0 <sbrk_aligned>
 8027e14:	0004      	movs	r4, r0
 8027e16:	1c43      	adds	r3, r0, #1
 8027e18:	d15f      	bne.n	8027eda <_malloc_r+0xf6>
 8027e1a:	6834      	ldr	r4, [r6, #0]
 8027e1c:	9400      	str	r4, [sp, #0]
 8027e1e:	9b00      	ldr	r3, [sp, #0]
 8027e20:	2b00      	cmp	r3, #0
 8027e22:	d14a      	bne.n	8027eba <_malloc_r+0xd6>
 8027e24:	2c00      	cmp	r4, #0
 8027e26:	d052      	beq.n	8027ece <_malloc_r+0xea>
 8027e28:	6823      	ldr	r3, [r4, #0]
 8027e2a:	0028      	movs	r0, r5
 8027e2c:	18e3      	adds	r3, r4, r3
 8027e2e:	9900      	ldr	r1, [sp, #0]
 8027e30:	9301      	str	r3, [sp, #4]
 8027e32:	f001 f93f 	bl	80290b4 <_sbrk_r>
 8027e36:	9b01      	ldr	r3, [sp, #4]
 8027e38:	4283      	cmp	r3, r0
 8027e3a:	d148      	bne.n	8027ece <_malloc_r+0xea>
 8027e3c:	6823      	ldr	r3, [r4, #0]
 8027e3e:	0028      	movs	r0, r5
 8027e40:	1aff      	subs	r7, r7, r3
 8027e42:	0039      	movs	r1, r7
 8027e44:	f7ff ffac 	bl	8027da0 <sbrk_aligned>
 8027e48:	3001      	adds	r0, #1
 8027e4a:	d040      	beq.n	8027ece <_malloc_r+0xea>
 8027e4c:	6823      	ldr	r3, [r4, #0]
 8027e4e:	19db      	adds	r3, r3, r7
 8027e50:	6023      	str	r3, [r4, #0]
 8027e52:	6833      	ldr	r3, [r6, #0]
 8027e54:	685a      	ldr	r2, [r3, #4]
 8027e56:	2a00      	cmp	r2, #0
 8027e58:	d133      	bne.n	8027ec2 <_malloc_r+0xde>
 8027e5a:	9b00      	ldr	r3, [sp, #0]
 8027e5c:	6033      	str	r3, [r6, #0]
 8027e5e:	e019      	b.n	8027e94 <_malloc_r+0xb0>
 8027e60:	2b00      	cmp	r3, #0
 8027e62:	dac9      	bge.n	8027df8 <_malloc_r+0x14>
 8027e64:	230c      	movs	r3, #12
 8027e66:	602b      	str	r3, [r5, #0]
 8027e68:	2000      	movs	r0, #0
 8027e6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027e6c:	6821      	ldr	r1, [r4, #0]
 8027e6e:	1bc9      	subs	r1, r1, r7
 8027e70:	d420      	bmi.n	8027eb4 <_malloc_r+0xd0>
 8027e72:	290b      	cmp	r1, #11
 8027e74:	d90a      	bls.n	8027e8c <_malloc_r+0xa8>
 8027e76:	19e2      	adds	r2, r4, r7
 8027e78:	6027      	str	r7, [r4, #0]
 8027e7a:	42a3      	cmp	r3, r4
 8027e7c:	d104      	bne.n	8027e88 <_malloc_r+0xa4>
 8027e7e:	6032      	str	r2, [r6, #0]
 8027e80:	6863      	ldr	r3, [r4, #4]
 8027e82:	6011      	str	r1, [r2, #0]
 8027e84:	6053      	str	r3, [r2, #4]
 8027e86:	e005      	b.n	8027e94 <_malloc_r+0xb0>
 8027e88:	605a      	str	r2, [r3, #4]
 8027e8a:	e7f9      	b.n	8027e80 <_malloc_r+0x9c>
 8027e8c:	6862      	ldr	r2, [r4, #4]
 8027e8e:	42a3      	cmp	r3, r4
 8027e90:	d10e      	bne.n	8027eb0 <_malloc_r+0xcc>
 8027e92:	6032      	str	r2, [r6, #0]
 8027e94:	0028      	movs	r0, r5
 8027e96:	f000 f83f 	bl	8027f18 <__malloc_unlock>
 8027e9a:	0020      	movs	r0, r4
 8027e9c:	2207      	movs	r2, #7
 8027e9e:	300b      	adds	r0, #11
 8027ea0:	1d23      	adds	r3, r4, #4
 8027ea2:	4390      	bics	r0, r2
 8027ea4:	1ac2      	subs	r2, r0, r3
 8027ea6:	4298      	cmp	r0, r3
 8027ea8:	d0df      	beq.n	8027e6a <_malloc_r+0x86>
 8027eaa:	1a1b      	subs	r3, r3, r0
 8027eac:	50a3      	str	r3, [r4, r2]
 8027eae:	e7dc      	b.n	8027e6a <_malloc_r+0x86>
 8027eb0:	605a      	str	r2, [r3, #4]
 8027eb2:	e7ef      	b.n	8027e94 <_malloc_r+0xb0>
 8027eb4:	0023      	movs	r3, r4
 8027eb6:	6864      	ldr	r4, [r4, #4]
 8027eb8:	e7a6      	b.n	8027e08 <_malloc_r+0x24>
 8027eba:	9c00      	ldr	r4, [sp, #0]
 8027ebc:	6863      	ldr	r3, [r4, #4]
 8027ebe:	9300      	str	r3, [sp, #0]
 8027ec0:	e7ad      	b.n	8027e1e <_malloc_r+0x3a>
 8027ec2:	001a      	movs	r2, r3
 8027ec4:	685b      	ldr	r3, [r3, #4]
 8027ec6:	42a3      	cmp	r3, r4
 8027ec8:	d1fb      	bne.n	8027ec2 <_malloc_r+0xde>
 8027eca:	2300      	movs	r3, #0
 8027ecc:	e7da      	b.n	8027e84 <_malloc_r+0xa0>
 8027ece:	230c      	movs	r3, #12
 8027ed0:	0028      	movs	r0, r5
 8027ed2:	602b      	str	r3, [r5, #0]
 8027ed4:	f000 f820 	bl	8027f18 <__malloc_unlock>
 8027ed8:	e7c6      	b.n	8027e68 <_malloc_r+0x84>
 8027eda:	6007      	str	r7, [r0, #0]
 8027edc:	e7da      	b.n	8027e94 <_malloc_r+0xb0>
 8027ede:	46c0      	nop			@ (mov r8, r8)
 8027ee0:	20003914 	.word	0x20003914

08027ee4 <__ascii_mbtowc>:
 8027ee4:	b082      	sub	sp, #8
 8027ee6:	2900      	cmp	r1, #0
 8027ee8:	d100      	bne.n	8027eec <__ascii_mbtowc+0x8>
 8027eea:	a901      	add	r1, sp, #4
 8027eec:	1e10      	subs	r0, r2, #0
 8027eee:	d006      	beq.n	8027efe <__ascii_mbtowc+0x1a>
 8027ef0:	2b00      	cmp	r3, #0
 8027ef2:	d006      	beq.n	8027f02 <__ascii_mbtowc+0x1e>
 8027ef4:	7813      	ldrb	r3, [r2, #0]
 8027ef6:	600b      	str	r3, [r1, #0]
 8027ef8:	7810      	ldrb	r0, [r2, #0]
 8027efa:	1e43      	subs	r3, r0, #1
 8027efc:	4198      	sbcs	r0, r3
 8027efe:	b002      	add	sp, #8
 8027f00:	4770      	bx	lr
 8027f02:	2002      	movs	r0, #2
 8027f04:	4240      	negs	r0, r0
 8027f06:	e7fa      	b.n	8027efe <__ascii_mbtowc+0x1a>

08027f08 <__malloc_lock>:
 8027f08:	b510      	push	{r4, lr}
 8027f0a:	4802      	ldr	r0, [pc, #8]	@ (8027f14 <__malloc_lock+0xc>)
 8027f0c:	f7fe fd07 	bl	802691e <__retarget_lock_acquire_recursive>
 8027f10:	bd10      	pop	{r4, pc}
 8027f12:	46c0      	nop			@ (mov r8, r8)
 8027f14:	2000390c 	.word	0x2000390c

08027f18 <__malloc_unlock>:
 8027f18:	b510      	push	{r4, lr}
 8027f1a:	4802      	ldr	r0, [pc, #8]	@ (8027f24 <__malloc_unlock+0xc>)
 8027f1c:	f7fe fd00 	bl	8026920 <__retarget_lock_release_recursive>
 8027f20:	bd10      	pop	{r4, pc}
 8027f22:	46c0      	nop			@ (mov r8, r8)
 8027f24:	2000390c 	.word	0x2000390c

08027f28 <_Balloc>:
 8027f28:	b570      	push	{r4, r5, r6, lr}
 8027f2a:	69c5      	ldr	r5, [r0, #28]
 8027f2c:	0006      	movs	r6, r0
 8027f2e:	000c      	movs	r4, r1
 8027f30:	2d00      	cmp	r5, #0
 8027f32:	d10e      	bne.n	8027f52 <_Balloc+0x2a>
 8027f34:	2010      	movs	r0, #16
 8027f36:	f7ff ff29 	bl	8027d8c <malloc>
 8027f3a:	1e02      	subs	r2, r0, #0
 8027f3c:	61f0      	str	r0, [r6, #28]
 8027f3e:	d104      	bne.n	8027f4a <_Balloc+0x22>
 8027f40:	216b      	movs	r1, #107	@ 0x6b
 8027f42:	4b19      	ldr	r3, [pc, #100]	@ (8027fa8 <_Balloc+0x80>)
 8027f44:	4819      	ldr	r0, [pc, #100]	@ (8027fac <_Balloc+0x84>)
 8027f46:	f001 f8c7 	bl	80290d8 <__assert_func>
 8027f4a:	6045      	str	r5, [r0, #4]
 8027f4c:	6085      	str	r5, [r0, #8]
 8027f4e:	6005      	str	r5, [r0, #0]
 8027f50:	60c5      	str	r5, [r0, #12]
 8027f52:	69f5      	ldr	r5, [r6, #28]
 8027f54:	68eb      	ldr	r3, [r5, #12]
 8027f56:	2b00      	cmp	r3, #0
 8027f58:	d013      	beq.n	8027f82 <_Balloc+0x5a>
 8027f5a:	69f3      	ldr	r3, [r6, #28]
 8027f5c:	00a2      	lsls	r2, r4, #2
 8027f5e:	68db      	ldr	r3, [r3, #12]
 8027f60:	189b      	adds	r3, r3, r2
 8027f62:	6818      	ldr	r0, [r3, #0]
 8027f64:	2800      	cmp	r0, #0
 8027f66:	d118      	bne.n	8027f9a <_Balloc+0x72>
 8027f68:	2101      	movs	r1, #1
 8027f6a:	000d      	movs	r5, r1
 8027f6c:	40a5      	lsls	r5, r4
 8027f6e:	1d6a      	adds	r2, r5, #5
 8027f70:	0030      	movs	r0, r6
 8027f72:	0092      	lsls	r2, r2, #2
 8027f74:	f001 f8ce 	bl	8029114 <_calloc_r>
 8027f78:	2800      	cmp	r0, #0
 8027f7a:	d00c      	beq.n	8027f96 <_Balloc+0x6e>
 8027f7c:	6044      	str	r4, [r0, #4]
 8027f7e:	6085      	str	r5, [r0, #8]
 8027f80:	e00d      	b.n	8027f9e <_Balloc+0x76>
 8027f82:	2221      	movs	r2, #33	@ 0x21
 8027f84:	2104      	movs	r1, #4
 8027f86:	0030      	movs	r0, r6
 8027f88:	f001 f8c4 	bl	8029114 <_calloc_r>
 8027f8c:	69f3      	ldr	r3, [r6, #28]
 8027f8e:	60e8      	str	r0, [r5, #12]
 8027f90:	68db      	ldr	r3, [r3, #12]
 8027f92:	2b00      	cmp	r3, #0
 8027f94:	d1e1      	bne.n	8027f5a <_Balloc+0x32>
 8027f96:	2000      	movs	r0, #0
 8027f98:	bd70      	pop	{r4, r5, r6, pc}
 8027f9a:	6802      	ldr	r2, [r0, #0]
 8027f9c:	601a      	str	r2, [r3, #0]
 8027f9e:	2300      	movs	r3, #0
 8027fa0:	6103      	str	r3, [r0, #16]
 8027fa2:	60c3      	str	r3, [r0, #12]
 8027fa4:	e7f8      	b.n	8027f98 <_Balloc+0x70>
 8027fa6:	46c0      	nop			@ (mov r8, r8)
 8027fa8:	0802ee53 	.word	0x0802ee53
 8027fac:	0802ef33 	.word	0x0802ef33

08027fb0 <_Bfree>:
 8027fb0:	b570      	push	{r4, r5, r6, lr}
 8027fb2:	69c6      	ldr	r6, [r0, #28]
 8027fb4:	0005      	movs	r5, r0
 8027fb6:	000c      	movs	r4, r1
 8027fb8:	2e00      	cmp	r6, #0
 8027fba:	d10e      	bne.n	8027fda <_Bfree+0x2a>
 8027fbc:	2010      	movs	r0, #16
 8027fbe:	f7ff fee5 	bl	8027d8c <malloc>
 8027fc2:	1e02      	subs	r2, r0, #0
 8027fc4:	61e8      	str	r0, [r5, #28]
 8027fc6:	d104      	bne.n	8027fd2 <_Bfree+0x22>
 8027fc8:	218f      	movs	r1, #143	@ 0x8f
 8027fca:	4b09      	ldr	r3, [pc, #36]	@ (8027ff0 <_Bfree+0x40>)
 8027fcc:	4809      	ldr	r0, [pc, #36]	@ (8027ff4 <_Bfree+0x44>)
 8027fce:	f001 f883 	bl	80290d8 <__assert_func>
 8027fd2:	6046      	str	r6, [r0, #4]
 8027fd4:	6086      	str	r6, [r0, #8]
 8027fd6:	6006      	str	r6, [r0, #0]
 8027fd8:	60c6      	str	r6, [r0, #12]
 8027fda:	2c00      	cmp	r4, #0
 8027fdc:	d007      	beq.n	8027fee <_Bfree+0x3e>
 8027fde:	69eb      	ldr	r3, [r5, #28]
 8027fe0:	6862      	ldr	r2, [r4, #4]
 8027fe2:	68db      	ldr	r3, [r3, #12]
 8027fe4:	0092      	lsls	r2, r2, #2
 8027fe6:	189b      	adds	r3, r3, r2
 8027fe8:	681a      	ldr	r2, [r3, #0]
 8027fea:	6022      	str	r2, [r4, #0]
 8027fec:	601c      	str	r4, [r3, #0]
 8027fee:	bd70      	pop	{r4, r5, r6, pc}
 8027ff0:	0802ee53 	.word	0x0802ee53
 8027ff4:	0802ef33 	.word	0x0802ef33

08027ff8 <__multadd>:
 8027ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027ffa:	000f      	movs	r7, r1
 8027ffc:	9001      	str	r0, [sp, #4]
 8027ffe:	000c      	movs	r4, r1
 8028000:	001e      	movs	r6, r3
 8028002:	2000      	movs	r0, #0
 8028004:	690d      	ldr	r5, [r1, #16]
 8028006:	3714      	adds	r7, #20
 8028008:	683b      	ldr	r3, [r7, #0]
 802800a:	3001      	adds	r0, #1
 802800c:	b299      	uxth	r1, r3
 802800e:	4351      	muls	r1, r2
 8028010:	0c1b      	lsrs	r3, r3, #16
 8028012:	4353      	muls	r3, r2
 8028014:	1989      	adds	r1, r1, r6
 8028016:	0c0e      	lsrs	r6, r1, #16
 8028018:	199b      	adds	r3, r3, r6
 802801a:	0c1e      	lsrs	r6, r3, #16
 802801c:	b289      	uxth	r1, r1
 802801e:	041b      	lsls	r3, r3, #16
 8028020:	185b      	adds	r3, r3, r1
 8028022:	c708      	stmia	r7!, {r3}
 8028024:	4285      	cmp	r5, r0
 8028026:	dcef      	bgt.n	8028008 <__multadd+0x10>
 8028028:	2e00      	cmp	r6, #0
 802802a:	d022      	beq.n	8028072 <__multadd+0x7a>
 802802c:	68a3      	ldr	r3, [r4, #8]
 802802e:	42ab      	cmp	r3, r5
 8028030:	dc19      	bgt.n	8028066 <__multadd+0x6e>
 8028032:	6861      	ldr	r1, [r4, #4]
 8028034:	9801      	ldr	r0, [sp, #4]
 8028036:	3101      	adds	r1, #1
 8028038:	f7ff ff76 	bl	8027f28 <_Balloc>
 802803c:	1e07      	subs	r7, r0, #0
 802803e:	d105      	bne.n	802804c <__multadd+0x54>
 8028040:	003a      	movs	r2, r7
 8028042:	21ba      	movs	r1, #186	@ 0xba
 8028044:	4b0c      	ldr	r3, [pc, #48]	@ (8028078 <__multadd+0x80>)
 8028046:	480d      	ldr	r0, [pc, #52]	@ (802807c <__multadd+0x84>)
 8028048:	f001 f846 	bl	80290d8 <__assert_func>
 802804c:	0021      	movs	r1, r4
 802804e:	6922      	ldr	r2, [r4, #16]
 8028050:	310c      	adds	r1, #12
 8028052:	3202      	adds	r2, #2
 8028054:	0092      	lsls	r2, r2, #2
 8028056:	300c      	adds	r0, #12
 8028058:	f7fe fc6e 	bl	8026938 <memcpy>
 802805c:	0021      	movs	r1, r4
 802805e:	9801      	ldr	r0, [sp, #4]
 8028060:	f7ff ffa6 	bl	8027fb0 <_Bfree>
 8028064:	003c      	movs	r4, r7
 8028066:	1d2b      	adds	r3, r5, #4
 8028068:	009b      	lsls	r3, r3, #2
 802806a:	18e3      	adds	r3, r4, r3
 802806c:	3501      	adds	r5, #1
 802806e:	605e      	str	r6, [r3, #4]
 8028070:	6125      	str	r5, [r4, #16]
 8028072:	0020      	movs	r0, r4
 8028074:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028076:	46c0      	nop			@ (mov r8, r8)
 8028078:	0802eec2 	.word	0x0802eec2
 802807c:	0802ef33 	.word	0x0802ef33

08028080 <__s2b>:
 8028080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028082:	0007      	movs	r7, r0
 8028084:	0018      	movs	r0, r3
 8028086:	000c      	movs	r4, r1
 8028088:	3008      	adds	r0, #8
 802808a:	2109      	movs	r1, #9
 802808c:	9301      	str	r3, [sp, #4]
 802808e:	0015      	movs	r5, r2
 8028090:	f7d8 f912 	bl	80002b8 <__divsi3>
 8028094:	2301      	movs	r3, #1
 8028096:	2100      	movs	r1, #0
 8028098:	4283      	cmp	r3, r0
 802809a:	db0a      	blt.n	80280b2 <__s2b+0x32>
 802809c:	0038      	movs	r0, r7
 802809e:	f7ff ff43 	bl	8027f28 <_Balloc>
 80280a2:	1e01      	subs	r1, r0, #0
 80280a4:	d108      	bne.n	80280b8 <__s2b+0x38>
 80280a6:	000a      	movs	r2, r1
 80280a8:	4b19      	ldr	r3, [pc, #100]	@ (8028110 <__s2b+0x90>)
 80280aa:	481a      	ldr	r0, [pc, #104]	@ (8028114 <__s2b+0x94>)
 80280ac:	31d3      	adds	r1, #211	@ 0xd3
 80280ae:	f001 f813 	bl	80290d8 <__assert_func>
 80280b2:	005b      	lsls	r3, r3, #1
 80280b4:	3101      	adds	r1, #1
 80280b6:	e7ef      	b.n	8028098 <__s2b+0x18>
 80280b8:	9b08      	ldr	r3, [sp, #32]
 80280ba:	6143      	str	r3, [r0, #20]
 80280bc:	2301      	movs	r3, #1
 80280be:	6103      	str	r3, [r0, #16]
 80280c0:	2d09      	cmp	r5, #9
 80280c2:	dd18      	ble.n	80280f6 <__s2b+0x76>
 80280c4:	0023      	movs	r3, r4
 80280c6:	3309      	adds	r3, #9
 80280c8:	001e      	movs	r6, r3
 80280ca:	9300      	str	r3, [sp, #0]
 80280cc:	1964      	adds	r4, r4, r5
 80280ce:	7833      	ldrb	r3, [r6, #0]
 80280d0:	220a      	movs	r2, #10
 80280d2:	0038      	movs	r0, r7
 80280d4:	3b30      	subs	r3, #48	@ 0x30
 80280d6:	f7ff ff8f 	bl	8027ff8 <__multadd>
 80280da:	3601      	adds	r6, #1
 80280dc:	0001      	movs	r1, r0
 80280de:	42a6      	cmp	r6, r4
 80280e0:	d1f5      	bne.n	80280ce <__s2b+0x4e>
 80280e2:	002c      	movs	r4, r5
 80280e4:	9b00      	ldr	r3, [sp, #0]
 80280e6:	3c08      	subs	r4, #8
 80280e8:	191c      	adds	r4, r3, r4
 80280ea:	002e      	movs	r6, r5
 80280ec:	9b01      	ldr	r3, [sp, #4]
 80280ee:	429e      	cmp	r6, r3
 80280f0:	db04      	blt.n	80280fc <__s2b+0x7c>
 80280f2:	0008      	movs	r0, r1
 80280f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80280f6:	2509      	movs	r5, #9
 80280f8:	340a      	adds	r4, #10
 80280fa:	e7f6      	b.n	80280ea <__s2b+0x6a>
 80280fc:	1b63      	subs	r3, r4, r5
 80280fe:	5d9b      	ldrb	r3, [r3, r6]
 8028100:	220a      	movs	r2, #10
 8028102:	0038      	movs	r0, r7
 8028104:	3b30      	subs	r3, #48	@ 0x30
 8028106:	f7ff ff77 	bl	8027ff8 <__multadd>
 802810a:	3601      	adds	r6, #1
 802810c:	0001      	movs	r1, r0
 802810e:	e7ed      	b.n	80280ec <__s2b+0x6c>
 8028110:	0802eec2 	.word	0x0802eec2
 8028114:	0802ef33 	.word	0x0802ef33

08028118 <__hi0bits>:
 8028118:	2280      	movs	r2, #128	@ 0x80
 802811a:	0003      	movs	r3, r0
 802811c:	0252      	lsls	r2, r2, #9
 802811e:	2000      	movs	r0, #0
 8028120:	4293      	cmp	r3, r2
 8028122:	d201      	bcs.n	8028128 <__hi0bits+0x10>
 8028124:	041b      	lsls	r3, r3, #16
 8028126:	3010      	adds	r0, #16
 8028128:	2280      	movs	r2, #128	@ 0x80
 802812a:	0452      	lsls	r2, r2, #17
 802812c:	4293      	cmp	r3, r2
 802812e:	d201      	bcs.n	8028134 <__hi0bits+0x1c>
 8028130:	3008      	adds	r0, #8
 8028132:	021b      	lsls	r3, r3, #8
 8028134:	2280      	movs	r2, #128	@ 0x80
 8028136:	0552      	lsls	r2, r2, #21
 8028138:	4293      	cmp	r3, r2
 802813a:	d201      	bcs.n	8028140 <__hi0bits+0x28>
 802813c:	3004      	adds	r0, #4
 802813e:	011b      	lsls	r3, r3, #4
 8028140:	2280      	movs	r2, #128	@ 0x80
 8028142:	05d2      	lsls	r2, r2, #23
 8028144:	4293      	cmp	r3, r2
 8028146:	d201      	bcs.n	802814c <__hi0bits+0x34>
 8028148:	3002      	adds	r0, #2
 802814a:	009b      	lsls	r3, r3, #2
 802814c:	2b00      	cmp	r3, #0
 802814e:	db03      	blt.n	8028158 <__hi0bits+0x40>
 8028150:	3001      	adds	r0, #1
 8028152:	4213      	tst	r3, r2
 8028154:	d100      	bne.n	8028158 <__hi0bits+0x40>
 8028156:	2020      	movs	r0, #32
 8028158:	4770      	bx	lr

0802815a <__lo0bits>:
 802815a:	6803      	ldr	r3, [r0, #0]
 802815c:	0001      	movs	r1, r0
 802815e:	2207      	movs	r2, #7
 8028160:	0018      	movs	r0, r3
 8028162:	4010      	ands	r0, r2
 8028164:	4213      	tst	r3, r2
 8028166:	d00d      	beq.n	8028184 <__lo0bits+0x2a>
 8028168:	3a06      	subs	r2, #6
 802816a:	2000      	movs	r0, #0
 802816c:	4213      	tst	r3, r2
 802816e:	d105      	bne.n	802817c <__lo0bits+0x22>
 8028170:	3002      	adds	r0, #2
 8028172:	4203      	tst	r3, r0
 8028174:	d003      	beq.n	802817e <__lo0bits+0x24>
 8028176:	40d3      	lsrs	r3, r2
 8028178:	0010      	movs	r0, r2
 802817a:	600b      	str	r3, [r1, #0]
 802817c:	4770      	bx	lr
 802817e:	089b      	lsrs	r3, r3, #2
 8028180:	600b      	str	r3, [r1, #0]
 8028182:	e7fb      	b.n	802817c <__lo0bits+0x22>
 8028184:	b29a      	uxth	r2, r3
 8028186:	2a00      	cmp	r2, #0
 8028188:	d101      	bne.n	802818e <__lo0bits+0x34>
 802818a:	2010      	movs	r0, #16
 802818c:	0c1b      	lsrs	r3, r3, #16
 802818e:	b2da      	uxtb	r2, r3
 8028190:	2a00      	cmp	r2, #0
 8028192:	d101      	bne.n	8028198 <__lo0bits+0x3e>
 8028194:	3008      	adds	r0, #8
 8028196:	0a1b      	lsrs	r3, r3, #8
 8028198:	071a      	lsls	r2, r3, #28
 802819a:	d101      	bne.n	80281a0 <__lo0bits+0x46>
 802819c:	3004      	adds	r0, #4
 802819e:	091b      	lsrs	r3, r3, #4
 80281a0:	079a      	lsls	r2, r3, #30
 80281a2:	d101      	bne.n	80281a8 <__lo0bits+0x4e>
 80281a4:	3002      	adds	r0, #2
 80281a6:	089b      	lsrs	r3, r3, #2
 80281a8:	07da      	lsls	r2, r3, #31
 80281aa:	d4e9      	bmi.n	8028180 <__lo0bits+0x26>
 80281ac:	3001      	adds	r0, #1
 80281ae:	085b      	lsrs	r3, r3, #1
 80281b0:	d1e6      	bne.n	8028180 <__lo0bits+0x26>
 80281b2:	2020      	movs	r0, #32
 80281b4:	e7e2      	b.n	802817c <__lo0bits+0x22>
	...

080281b8 <__i2b>:
 80281b8:	b510      	push	{r4, lr}
 80281ba:	000c      	movs	r4, r1
 80281bc:	2101      	movs	r1, #1
 80281be:	f7ff feb3 	bl	8027f28 <_Balloc>
 80281c2:	2800      	cmp	r0, #0
 80281c4:	d107      	bne.n	80281d6 <__i2b+0x1e>
 80281c6:	2146      	movs	r1, #70	@ 0x46
 80281c8:	4c05      	ldr	r4, [pc, #20]	@ (80281e0 <__i2b+0x28>)
 80281ca:	0002      	movs	r2, r0
 80281cc:	4b05      	ldr	r3, [pc, #20]	@ (80281e4 <__i2b+0x2c>)
 80281ce:	0020      	movs	r0, r4
 80281d0:	31ff      	adds	r1, #255	@ 0xff
 80281d2:	f000 ff81 	bl	80290d8 <__assert_func>
 80281d6:	2301      	movs	r3, #1
 80281d8:	6144      	str	r4, [r0, #20]
 80281da:	6103      	str	r3, [r0, #16]
 80281dc:	bd10      	pop	{r4, pc}
 80281de:	46c0      	nop			@ (mov r8, r8)
 80281e0:	0802ef33 	.word	0x0802ef33
 80281e4:	0802eec2 	.word	0x0802eec2

080281e8 <__multiply>:
 80281e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80281ea:	0014      	movs	r4, r2
 80281ec:	690a      	ldr	r2, [r1, #16]
 80281ee:	6923      	ldr	r3, [r4, #16]
 80281f0:	000d      	movs	r5, r1
 80281f2:	b089      	sub	sp, #36	@ 0x24
 80281f4:	429a      	cmp	r2, r3
 80281f6:	db02      	blt.n	80281fe <__multiply+0x16>
 80281f8:	0023      	movs	r3, r4
 80281fa:	000c      	movs	r4, r1
 80281fc:	001d      	movs	r5, r3
 80281fe:	6927      	ldr	r7, [r4, #16]
 8028200:	692e      	ldr	r6, [r5, #16]
 8028202:	6861      	ldr	r1, [r4, #4]
 8028204:	19bb      	adds	r3, r7, r6
 8028206:	9300      	str	r3, [sp, #0]
 8028208:	68a3      	ldr	r3, [r4, #8]
 802820a:	19ba      	adds	r2, r7, r6
 802820c:	4293      	cmp	r3, r2
 802820e:	da00      	bge.n	8028212 <__multiply+0x2a>
 8028210:	3101      	adds	r1, #1
 8028212:	f7ff fe89 	bl	8027f28 <_Balloc>
 8028216:	4684      	mov	ip, r0
 8028218:	2800      	cmp	r0, #0
 802821a:	d106      	bne.n	802822a <__multiply+0x42>
 802821c:	21b1      	movs	r1, #177	@ 0xb1
 802821e:	4662      	mov	r2, ip
 8028220:	4b44      	ldr	r3, [pc, #272]	@ (8028334 <__multiply+0x14c>)
 8028222:	4845      	ldr	r0, [pc, #276]	@ (8028338 <__multiply+0x150>)
 8028224:	0049      	lsls	r1, r1, #1
 8028226:	f000 ff57 	bl	80290d8 <__assert_func>
 802822a:	0002      	movs	r2, r0
 802822c:	19bb      	adds	r3, r7, r6
 802822e:	3214      	adds	r2, #20
 8028230:	009b      	lsls	r3, r3, #2
 8028232:	18d3      	adds	r3, r2, r3
 8028234:	9301      	str	r3, [sp, #4]
 8028236:	2100      	movs	r1, #0
 8028238:	0013      	movs	r3, r2
 802823a:	9801      	ldr	r0, [sp, #4]
 802823c:	4283      	cmp	r3, r0
 802823e:	d328      	bcc.n	8028292 <__multiply+0xaa>
 8028240:	0023      	movs	r3, r4
 8028242:	00bf      	lsls	r7, r7, #2
 8028244:	3314      	adds	r3, #20
 8028246:	9304      	str	r3, [sp, #16]
 8028248:	3514      	adds	r5, #20
 802824a:	19db      	adds	r3, r3, r7
 802824c:	00b6      	lsls	r6, r6, #2
 802824e:	9302      	str	r3, [sp, #8]
 8028250:	19ab      	adds	r3, r5, r6
 8028252:	9307      	str	r3, [sp, #28]
 8028254:	2304      	movs	r3, #4
 8028256:	9305      	str	r3, [sp, #20]
 8028258:	0023      	movs	r3, r4
 802825a:	9902      	ldr	r1, [sp, #8]
 802825c:	3315      	adds	r3, #21
 802825e:	4299      	cmp	r1, r3
 8028260:	d305      	bcc.n	802826e <__multiply+0x86>
 8028262:	1b0c      	subs	r4, r1, r4
 8028264:	3c15      	subs	r4, #21
 8028266:	08a4      	lsrs	r4, r4, #2
 8028268:	3401      	adds	r4, #1
 802826a:	00a3      	lsls	r3, r4, #2
 802826c:	9305      	str	r3, [sp, #20]
 802826e:	9b07      	ldr	r3, [sp, #28]
 8028270:	429d      	cmp	r5, r3
 8028272:	d310      	bcc.n	8028296 <__multiply+0xae>
 8028274:	9b00      	ldr	r3, [sp, #0]
 8028276:	2b00      	cmp	r3, #0
 8028278:	dd05      	ble.n	8028286 <__multiply+0x9e>
 802827a:	9b01      	ldr	r3, [sp, #4]
 802827c:	3b04      	subs	r3, #4
 802827e:	9301      	str	r3, [sp, #4]
 8028280:	681b      	ldr	r3, [r3, #0]
 8028282:	2b00      	cmp	r3, #0
 8028284:	d052      	beq.n	802832c <__multiply+0x144>
 8028286:	4663      	mov	r3, ip
 8028288:	4660      	mov	r0, ip
 802828a:	9a00      	ldr	r2, [sp, #0]
 802828c:	611a      	str	r2, [r3, #16]
 802828e:	b009      	add	sp, #36	@ 0x24
 8028290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028292:	c302      	stmia	r3!, {r1}
 8028294:	e7d1      	b.n	802823a <__multiply+0x52>
 8028296:	682c      	ldr	r4, [r5, #0]
 8028298:	b2a4      	uxth	r4, r4
 802829a:	2c00      	cmp	r4, #0
 802829c:	d01f      	beq.n	80282de <__multiply+0xf6>
 802829e:	2300      	movs	r3, #0
 80282a0:	0017      	movs	r7, r2
 80282a2:	9e04      	ldr	r6, [sp, #16]
 80282a4:	9303      	str	r3, [sp, #12]
 80282a6:	ce08      	ldmia	r6!, {r3}
 80282a8:	6839      	ldr	r1, [r7, #0]
 80282aa:	9306      	str	r3, [sp, #24]
 80282ac:	466b      	mov	r3, sp
 80282ae:	8b1b      	ldrh	r3, [r3, #24]
 80282b0:	b288      	uxth	r0, r1
 80282b2:	4363      	muls	r3, r4
 80282b4:	181b      	adds	r3, r3, r0
 80282b6:	9803      	ldr	r0, [sp, #12]
 80282b8:	0c09      	lsrs	r1, r1, #16
 80282ba:	181b      	adds	r3, r3, r0
 80282bc:	9806      	ldr	r0, [sp, #24]
 80282be:	0c00      	lsrs	r0, r0, #16
 80282c0:	4360      	muls	r0, r4
 80282c2:	1840      	adds	r0, r0, r1
 80282c4:	0c19      	lsrs	r1, r3, #16
 80282c6:	1841      	adds	r1, r0, r1
 80282c8:	0c08      	lsrs	r0, r1, #16
 80282ca:	b29b      	uxth	r3, r3
 80282cc:	0409      	lsls	r1, r1, #16
 80282ce:	4319      	orrs	r1, r3
 80282d0:	9b02      	ldr	r3, [sp, #8]
 80282d2:	9003      	str	r0, [sp, #12]
 80282d4:	c702      	stmia	r7!, {r1}
 80282d6:	42b3      	cmp	r3, r6
 80282d8:	d8e5      	bhi.n	80282a6 <__multiply+0xbe>
 80282da:	9b05      	ldr	r3, [sp, #20]
 80282dc:	50d0      	str	r0, [r2, r3]
 80282de:	682c      	ldr	r4, [r5, #0]
 80282e0:	0c24      	lsrs	r4, r4, #16
 80282e2:	d020      	beq.n	8028326 <__multiply+0x13e>
 80282e4:	2100      	movs	r1, #0
 80282e6:	0010      	movs	r0, r2
 80282e8:	6813      	ldr	r3, [r2, #0]
 80282ea:	9e04      	ldr	r6, [sp, #16]
 80282ec:	9103      	str	r1, [sp, #12]
 80282ee:	6831      	ldr	r1, [r6, #0]
 80282f0:	6807      	ldr	r7, [r0, #0]
 80282f2:	b289      	uxth	r1, r1
 80282f4:	4361      	muls	r1, r4
 80282f6:	0c3f      	lsrs	r7, r7, #16
 80282f8:	19c9      	adds	r1, r1, r7
 80282fa:	9f03      	ldr	r7, [sp, #12]
 80282fc:	b29b      	uxth	r3, r3
 80282fe:	19c9      	adds	r1, r1, r7
 8028300:	040f      	lsls	r7, r1, #16
 8028302:	431f      	orrs	r7, r3
 8028304:	6007      	str	r7, [r0, #0]
 8028306:	ce80      	ldmia	r6!, {r7}
 8028308:	6843      	ldr	r3, [r0, #4]
 802830a:	0c3f      	lsrs	r7, r7, #16
 802830c:	4367      	muls	r7, r4
 802830e:	b29b      	uxth	r3, r3
 8028310:	0c09      	lsrs	r1, r1, #16
 8028312:	18fb      	adds	r3, r7, r3
 8028314:	185b      	adds	r3, r3, r1
 8028316:	0c19      	lsrs	r1, r3, #16
 8028318:	9103      	str	r1, [sp, #12]
 802831a:	9902      	ldr	r1, [sp, #8]
 802831c:	3004      	adds	r0, #4
 802831e:	42b1      	cmp	r1, r6
 8028320:	d8e5      	bhi.n	80282ee <__multiply+0x106>
 8028322:	9905      	ldr	r1, [sp, #20]
 8028324:	5053      	str	r3, [r2, r1]
 8028326:	3504      	adds	r5, #4
 8028328:	3204      	adds	r2, #4
 802832a:	e7a0      	b.n	802826e <__multiply+0x86>
 802832c:	9b00      	ldr	r3, [sp, #0]
 802832e:	3b01      	subs	r3, #1
 8028330:	9300      	str	r3, [sp, #0]
 8028332:	e79f      	b.n	8028274 <__multiply+0x8c>
 8028334:	0802eec2 	.word	0x0802eec2
 8028338:	0802ef33 	.word	0x0802ef33

0802833c <__pow5mult>:
 802833c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802833e:	2303      	movs	r3, #3
 8028340:	0015      	movs	r5, r2
 8028342:	0007      	movs	r7, r0
 8028344:	000e      	movs	r6, r1
 8028346:	401a      	ands	r2, r3
 8028348:	421d      	tst	r5, r3
 802834a:	d008      	beq.n	802835e <__pow5mult+0x22>
 802834c:	4925      	ldr	r1, [pc, #148]	@ (80283e4 <__pow5mult+0xa8>)
 802834e:	3a01      	subs	r2, #1
 8028350:	0092      	lsls	r2, r2, #2
 8028352:	5852      	ldr	r2, [r2, r1]
 8028354:	2300      	movs	r3, #0
 8028356:	0031      	movs	r1, r6
 8028358:	f7ff fe4e 	bl	8027ff8 <__multadd>
 802835c:	0006      	movs	r6, r0
 802835e:	10ad      	asrs	r5, r5, #2
 8028360:	d03d      	beq.n	80283de <__pow5mult+0xa2>
 8028362:	69fc      	ldr	r4, [r7, #28]
 8028364:	2c00      	cmp	r4, #0
 8028366:	d10f      	bne.n	8028388 <__pow5mult+0x4c>
 8028368:	2010      	movs	r0, #16
 802836a:	f7ff fd0f 	bl	8027d8c <malloc>
 802836e:	1e02      	subs	r2, r0, #0
 8028370:	61f8      	str	r0, [r7, #28]
 8028372:	d105      	bne.n	8028380 <__pow5mult+0x44>
 8028374:	21b4      	movs	r1, #180	@ 0xb4
 8028376:	4b1c      	ldr	r3, [pc, #112]	@ (80283e8 <__pow5mult+0xac>)
 8028378:	481c      	ldr	r0, [pc, #112]	@ (80283ec <__pow5mult+0xb0>)
 802837a:	31ff      	adds	r1, #255	@ 0xff
 802837c:	f000 feac 	bl	80290d8 <__assert_func>
 8028380:	6044      	str	r4, [r0, #4]
 8028382:	6084      	str	r4, [r0, #8]
 8028384:	6004      	str	r4, [r0, #0]
 8028386:	60c4      	str	r4, [r0, #12]
 8028388:	69fb      	ldr	r3, [r7, #28]
 802838a:	689c      	ldr	r4, [r3, #8]
 802838c:	9301      	str	r3, [sp, #4]
 802838e:	2c00      	cmp	r4, #0
 8028390:	d108      	bne.n	80283a4 <__pow5mult+0x68>
 8028392:	0038      	movs	r0, r7
 8028394:	4916      	ldr	r1, [pc, #88]	@ (80283f0 <__pow5mult+0xb4>)
 8028396:	f7ff ff0f 	bl	80281b8 <__i2b>
 802839a:	9b01      	ldr	r3, [sp, #4]
 802839c:	0004      	movs	r4, r0
 802839e:	6098      	str	r0, [r3, #8]
 80283a0:	2300      	movs	r3, #0
 80283a2:	6003      	str	r3, [r0, #0]
 80283a4:	2301      	movs	r3, #1
 80283a6:	421d      	tst	r5, r3
 80283a8:	d00a      	beq.n	80283c0 <__pow5mult+0x84>
 80283aa:	0031      	movs	r1, r6
 80283ac:	0022      	movs	r2, r4
 80283ae:	0038      	movs	r0, r7
 80283b0:	f7ff ff1a 	bl	80281e8 <__multiply>
 80283b4:	0031      	movs	r1, r6
 80283b6:	9001      	str	r0, [sp, #4]
 80283b8:	0038      	movs	r0, r7
 80283ba:	f7ff fdf9 	bl	8027fb0 <_Bfree>
 80283be:	9e01      	ldr	r6, [sp, #4]
 80283c0:	106d      	asrs	r5, r5, #1
 80283c2:	d00c      	beq.n	80283de <__pow5mult+0xa2>
 80283c4:	6820      	ldr	r0, [r4, #0]
 80283c6:	2800      	cmp	r0, #0
 80283c8:	d107      	bne.n	80283da <__pow5mult+0x9e>
 80283ca:	0022      	movs	r2, r4
 80283cc:	0021      	movs	r1, r4
 80283ce:	0038      	movs	r0, r7
 80283d0:	f7ff ff0a 	bl	80281e8 <__multiply>
 80283d4:	2300      	movs	r3, #0
 80283d6:	6020      	str	r0, [r4, #0]
 80283d8:	6003      	str	r3, [r0, #0]
 80283da:	0004      	movs	r4, r0
 80283dc:	e7e2      	b.n	80283a4 <__pow5mult+0x68>
 80283de:	0030      	movs	r0, r6
 80283e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80283e2:	46c0      	nop			@ (mov r8, r8)
 80283e4:	0802f134 	.word	0x0802f134
 80283e8:	0802ee53 	.word	0x0802ee53
 80283ec:	0802ef33 	.word	0x0802ef33
 80283f0:	00000271 	.word	0x00000271

080283f4 <__lshift>:
 80283f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80283f6:	000c      	movs	r4, r1
 80283f8:	0016      	movs	r6, r2
 80283fa:	6923      	ldr	r3, [r4, #16]
 80283fc:	1157      	asrs	r7, r2, #5
 80283fe:	b085      	sub	sp, #20
 8028400:	18fb      	adds	r3, r7, r3
 8028402:	9301      	str	r3, [sp, #4]
 8028404:	3301      	adds	r3, #1
 8028406:	9300      	str	r3, [sp, #0]
 8028408:	6849      	ldr	r1, [r1, #4]
 802840a:	68a3      	ldr	r3, [r4, #8]
 802840c:	9002      	str	r0, [sp, #8]
 802840e:	9a00      	ldr	r2, [sp, #0]
 8028410:	4293      	cmp	r3, r2
 8028412:	db10      	blt.n	8028436 <__lshift+0x42>
 8028414:	9802      	ldr	r0, [sp, #8]
 8028416:	f7ff fd87 	bl	8027f28 <_Balloc>
 802841a:	2300      	movs	r3, #0
 802841c:	0001      	movs	r1, r0
 802841e:	0005      	movs	r5, r0
 8028420:	001a      	movs	r2, r3
 8028422:	3114      	adds	r1, #20
 8028424:	4298      	cmp	r0, r3
 8028426:	d10c      	bne.n	8028442 <__lshift+0x4e>
 8028428:	21ef      	movs	r1, #239	@ 0xef
 802842a:	002a      	movs	r2, r5
 802842c:	4b25      	ldr	r3, [pc, #148]	@ (80284c4 <__lshift+0xd0>)
 802842e:	4826      	ldr	r0, [pc, #152]	@ (80284c8 <__lshift+0xd4>)
 8028430:	0049      	lsls	r1, r1, #1
 8028432:	f000 fe51 	bl	80290d8 <__assert_func>
 8028436:	3101      	adds	r1, #1
 8028438:	005b      	lsls	r3, r3, #1
 802843a:	e7e8      	b.n	802840e <__lshift+0x1a>
 802843c:	0098      	lsls	r0, r3, #2
 802843e:	500a      	str	r2, [r1, r0]
 8028440:	3301      	adds	r3, #1
 8028442:	42bb      	cmp	r3, r7
 8028444:	dbfa      	blt.n	802843c <__lshift+0x48>
 8028446:	43fb      	mvns	r3, r7
 8028448:	17db      	asrs	r3, r3, #31
 802844a:	401f      	ands	r7, r3
 802844c:	00bf      	lsls	r7, r7, #2
 802844e:	0023      	movs	r3, r4
 8028450:	201f      	movs	r0, #31
 8028452:	19c9      	adds	r1, r1, r7
 8028454:	0037      	movs	r7, r6
 8028456:	6922      	ldr	r2, [r4, #16]
 8028458:	3314      	adds	r3, #20
 802845a:	0092      	lsls	r2, r2, #2
 802845c:	189a      	adds	r2, r3, r2
 802845e:	4007      	ands	r7, r0
 8028460:	4206      	tst	r6, r0
 8028462:	d029      	beq.n	80284b8 <__lshift+0xc4>
 8028464:	3001      	adds	r0, #1
 8028466:	1bc0      	subs	r0, r0, r7
 8028468:	9003      	str	r0, [sp, #12]
 802846a:	468c      	mov	ip, r1
 802846c:	2000      	movs	r0, #0
 802846e:	681e      	ldr	r6, [r3, #0]
 8028470:	40be      	lsls	r6, r7
 8028472:	4306      	orrs	r6, r0
 8028474:	4660      	mov	r0, ip
 8028476:	c040      	stmia	r0!, {r6}
 8028478:	4684      	mov	ip, r0
 802847a:	9e03      	ldr	r6, [sp, #12]
 802847c:	cb01      	ldmia	r3!, {r0}
 802847e:	40f0      	lsrs	r0, r6
 8028480:	429a      	cmp	r2, r3
 8028482:	d8f4      	bhi.n	802846e <__lshift+0x7a>
 8028484:	0026      	movs	r6, r4
 8028486:	3615      	adds	r6, #21
 8028488:	2304      	movs	r3, #4
 802848a:	42b2      	cmp	r2, r6
 802848c:	d304      	bcc.n	8028498 <__lshift+0xa4>
 802848e:	1b13      	subs	r3, r2, r4
 8028490:	3b15      	subs	r3, #21
 8028492:	089b      	lsrs	r3, r3, #2
 8028494:	3301      	adds	r3, #1
 8028496:	009b      	lsls	r3, r3, #2
 8028498:	50c8      	str	r0, [r1, r3]
 802849a:	2800      	cmp	r0, #0
 802849c:	d002      	beq.n	80284a4 <__lshift+0xb0>
 802849e:	9b01      	ldr	r3, [sp, #4]
 80284a0:	3302      	adds	r3, #2
 80284a2:	9300      	str	r3, [sp, #0]
 80284a4:	9b00      	ldr	r3, [sp, #0]
 80284a6:	9802      	ldr	r0, [sp, #8]
 80284a8:	3b01      	subs	r3, #1
 80284aa:	0021      	movs	r1, r4
 80284ac:	612b      	str	r3, [r5, #16]
 80284ae:	f7ff fd7f 	bl	8027fb0 <_Bfree>
 80284b2:	0028      	movs	r0, r5
 80284b4:	b005      	add	sp, #20
 80284b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80284b8:	cb01      	ldmia	r3!, {r0}
 80284ba:	c101      	stmia	r1!, {r0}
 80284bc:	429a      	cmp	r2, r3
 80284be:	d8fb      	bhi.n	80284b8 <__lshift+0xc4>
 80284c0:	e7f0      	b.n	80284a4 <__lshift+0xb0>
 80284c2:	46c0      	nop			@ (mov r8, r8)
 80284c4:	0802eec2 	.word	0x0802eec2
 80284c8:	0802ef33 	.word	0x0802ef33

080284cc <__mcmp>:
 80284cc:	b530      	push	{r4, r5, lr}
 80284ce:	690b      	ldr	r3, [r1, #16]
 80284d0:	6904      	ldr	r4, [r0, #16]
 80284d2:	0002      	movs	r2, r0
 80284d4:	1ae0      	subs	r0, r4, r3
 80284d6:	429c      	cmp	r4, r3
 80284d8:	d10f      	bne.n	80284fa <__mcmp+0x2e>
 80284da:	3214      	adds	r2, #20
 80284dc:	009b      	lsls	r3, r3, #2
 80284de:	3114      	adds	r1, #20
 80284e0:	0014      	movs	r4, r2
 80284e2:	18c9      	adds	r1, r1, r3
 80284e4:	18d2      	adds	r2, r2, r3
 80284e6:	3a04      	subs	r2, #4
 80284e8:	3904      	subs	r1, #4
 80284ea:	6815      	ldr	r5, [r2, #0]
 80284ec:	680b      	ldr	r3, [r1, #0]
 80284ee:	429d      	cmp	r5, r3
 80284f0:	d004      	beq.n	80284fc <__mcmp+0x30>
 80284f2:	2001      	movs	r0, #1
 80284f4:	429d      	cmp	r5, r3
 80284f6:	d200      	bcs.n	80284fa <__mcmp+0x2e>
 80284f8:	3802      	subs	r0, #2
 80284fa:	bd30      	pop	{r4, r5, pc}
 80284fc:	4294      	cmp	r4, r2
 80284fe:	d3f2      	bcc.n	80284e6 <__mcmp+0x1a>
 8028500:	e7fb      	b.n	80284fa <__mcmp+0x2e>
	...

08028504 <__mdiff>:
 8028504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028506:	000c      	movs	r4, r1
 8028508:	b087      	sub	sp, #28
 802850a:	9000      	str	r0, [sp, #0]
 802850c:	0011      	movs	r1, r2
 802850e:	0020      	movs	r0, r4
 8028510:	0017      	movs	r7, r2
 8028512:	f7ff ffdb 	bl	80284cc <__mcmp>
 8028516:	1e05      	subs	r5, r0, #0
 8028518:	d110      	bne.n	802853c <__mdiff+0x38>
 802851a:	0001      	movs	r1, r0
 802851c:	9800      	ldr	r0, [sp, #0]
 802851e:	f7ff fd03 	bl	8027f28 <_Balloc>
 8028522:	1e02      	subs	r2, r0, #0
 8028524:	d104      	bne.n	8028530 <__mdiff+0x2c>
 8028526:	4b40      	ldr	r3, [pc, #256]	@ (8028628 <__mdiff+0x124>)
 8028528:	4840      	ldr	r0, [pc, #256]	@ (802862c <__mdiff+0x128>)
 802852a:	4941      	ldr	r1, [pc, #260]	@ (8028630 <__mdiff+0x12c>)
 802852c:	f000 fdd4 	bl	80290d8 <__assert_func>
 8028530:	2301      	movs	r3, #1
 8028532:	6145      	str	r5, [r0, #20]
 8028534:	6103      	str	r3, [r0, #16]
 8028536:	0010      	movs	r0, r2
 8028538:	b007      	add	sp, #28
 802853a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802853c:	2600      	movs	r6, #0
 802853e:	42b0      	cmp	r0, r6
 8028540:	da03      	bge.n	802854a <__mdiff+0x46>
 8028542:	0023      	movs	r3, r4
 8028544:	003c      	movs	r4, r7
 8028546:	001f      	movs	r7, r3
 8028548:	3601      	adds	r6, #1
 802854a:	6861      	ldr	r1, [r4, #4]
 802854c:	9800      	ldr	r0, [sp, #0]
 802854e:	f7ff fceb 	bl	8027f28 <_Balloc>
 8028552:	1e02      	subs	r2, r0, #0
 8028554:	d103      	bne.n	802855e <__mdiff+0x5a>
 8028556:	4b34      	ldr	r3, [pc, #208]	@ (8028628 <__mdiff+0x124>)
 8028558:	4834      	ldr	r0, [pc, #208]	@ (802862c <__mdiff+0x128>)
 802855a:	4936      	ldr	r1, [pc, #216]	@ (8028634 <__mdiff+0x130>)
 802855c:	e7e6      	b.n	802852c <__mdiff+0x28>
 802855e:	6923      	ldr	r3, [r4, #16]
 8028560:	3414      	adds	r4, #20
 8028562:	9300      	str	r3, [sp, #0]
 8028564:	009b      	lsls	r3, r3, #2
 8028566:	18e3      	adds	r3, r4, r3
 8028568:	0021      	movs	r1, r4
 802856a:	9401      	str	r4, [sp, #4]
 802856c:	003c      	movs	r4, r7
 802856e:	9302      	str	r3, [sp, #8]
 8028570:	693b      	ldr	r3, [r7, #16]
 8028572:	3414      	adds	r4, #20
 8028574:	009b      	lsls	r3, r3, #2
 8028576:	18e3      	adds	r3, r4, r3
 8028578:	9303      	str	r3, [sp, #12]
 802857a:	0003      	movs	r3, r0
 802857c:	60c6      	str	r6, [r0, #12]
 802857e:	468c      	mov	ip, r1
 8028580:	2000      	movs	r0, #0
 8028582:	3314      	adds	r3, #20
 8028584:	9304      	str	r3, [sp, #16]
 8028586:	9305      	str	r3, [sp, #20]
 8028588:	4663      	mov	r3, ip
 802858a:	cb20      	ldmia	r3!, {r5}
 802858c:	b2a9      	uxth	r1, r5
 802858e:	000e      	movs	r6, r1
 8028590:	469c      	mov	ip, r3
 8028592:	cc08      	ldmia	r4!, {r3}
 8028594:	0c2d      	lsrs	r5, r5, #16
 8028596:	b299      	uxth	r1, r3
 8028598:	1a71      	subs	r1, r6, r1
 802859a:	1809      	adds	r1, r1, r0
 802859c:	0c1b      	lsrs	r3, r3, #16
 802859e:	1408      	asrs	r0, r1, #16
 80285a0:	1aeb      	subs	r3, r5, r3
 80285a2:	181b      	adds	r3, r3, r0
 80285a4:	1418      	asrs	r0, r3, #16
 80285a6:	b289      	uxth	r1, r1
 80285a8:	041b      	lsls	r3, r3, #16
 80285aa:	4319      	orrs	r1, r3
 80285ac:	9b05      	ldr	r3, [sp, #20]
 80285ae:	c302      	stmia	r3!, {r1}
 80285b0:	9305      	str	r3, [sp, #20]
 80285b2:	9b03      	ldr	r3, [sp, #12]
 80285b4:	42a3      	cmp	r3, r4
 80285b6:	d8e7      	bhi.n	8028588 <__mdiff+0x84>
 80285b8:	0039      	movs	r1, r7
 80285ba:	9c03      	ldr	r4, [sp, #12]
 80285bc:	3115      	adds	r1, #21
 80285be:	2304      	movs	r3, #4
 80285c0:	428c      	cmp	r4, r1
 80285c2:	d304      	bcc.n	80285ce <__mdiff+0xca>
 80285c4:	1be3      	subs	r3, r4, r7
 80285c6:	3b15      	subs	r3, #21
 80285c8:	089b      	lsrs	r3, r3, #2
 80285ca:	3301      	adds	r3, #1
 80285cc:	009b      	lsls	r3, r3, #2
 80285ce:	9901      	ldr	r1, [sp, #4]
 80285d0:	18cd      	adds	r5, r1, r3
 80285d2:	9904      	ldr	r1, [sp, #16]
 80285d4:	002e      	movs	r6, r5
 80285d6:	18cb      	adds	r3, r1, r3
 80285d8:	001f      	movs	r7, r3
 80285da:	9902      	ldr	r1, [sp, #8]
 80285dc:	428e      	cmp	r6, r1
 80285de:	d311      	bcc.n	8028604 <__mdiff+0x100>
 80285e0:	9c02      	ldr	r4, [sp, #8]
 80285e2:	1ee9      	subs	r1, r5, #3
 80285e4:	2000      	movs	r0, #0
 80285e6:	428c      	cmp	r4, r1
 80285e8:	d304      	bcc.n	80285f4 <__mdiff+0xf0>
 80285ea:	0021      	movs	r1, r4
 80285ec:	3103      	adds	r1, #3
 80285ee:	1b49      	subs	r1, r1, r5
 80285f0:	0889      	lsrs	r1, r1, #2
 80285f2:	0088      	lsls	r0, r1, #2
 80285f4:	181b      	adds	r3, r3, r0
 80285f6:	3b04      	subs	r3, #4
 80285f8:	6819      	ldr	r1, [r3, #0]
 80285fa:	2900      	cmp	r1, #0
 80285fc:	d010      	beq.n	8028620 <__mdiff+0x11c>
 80285fe:	9b00      	ldr	r3, [sp, #0]
 8028600:	6113      	str	r3, [r2, #16]
 8028602:	e798      	b.n	8028536 <__mdiff+0x32>
 8028604:	4684      	mov	ip, r0
 8028606:	ce02      	ldmia	r6!, {r1}
 8028608:	b288      	uxth	r0, r1
 802860a:	4460      	add	r0, ip
 802860c:	1400      	asrs	r0, r0, #16
 802860e:	0c0c      	lsrs	r4, r1, #16
 8028610:	1904      	adds	r4, r0, r4
 8028612:	4461      	add	r1, ip
 8028614:	1420      	asrs	r0, r4, #16
 8028616:	b289      	uxth	r1, r1
 8028618:	0424      	lsls	r4, r4, #16
 802861a:	4321      	orrs	r1, r4
 802861c:	c702      	stmia	r7!, {r1}
 802861e:	e7dc      	b.n	80285da <__mdiff+0xd6>
 8028620:	9900      	ldr	r1, [sp, #0]
 8028622:	3901      	subs	r1, #1
 8028624:	9100      	str	r1, [sp, #0]
 8028626:	e7e6      	b.n	80285f6 <__mdiff+0xf2>
 8028628:	0802eec2 	.word	0x0802eec2
 802862c:	0802ef33 	.word	0x0802ef33
 8028630:	00000237 	.word	0x00000237
 8028634:	00000245 	.word	0x00000245

08028638 <__ulp>:
 8028638:	b510      	push	{r4, lr}
 802863a:	2400      	movs	r4, #0
 802863c:	4b0c      	ldr	r3, [pc, #48]	@ (8028670 <__ulp+0x38>)
 802863e:	4a0d      	ldr	r2, [pc, #52]	@ (8028674 <__ulp+0x3c>)
 8028640:	400b      	ands	r3, r1
 8028642:	189b      	adds	r3, r3, r2
 8028644:	42a3      	cmp	r3, r4
 8028646:	dc06      	bgt.n	8028656 <__ulp+0x1e>
 8028648:	425b      	negs	r3, r3
 802864a:	151a      	asrs	r2, r3, #20
 802864c:	2a13      	cmp	r2, #19
 802864e:	dc05      	bgt.n	802865c <__ulp+0x24>
 8028650:	2380      	movs	r3, #128	@ 0x80
 8028652:	031b      	lsls	r3, r3, #12
 8028654:	4113      	asrs	r3, r2
 8028656:	0019      	movs	r1, r3
 8028658:	0020      	movs	r0, r4
 802865a:	bd10      	pop	{r4, pc}
 802865c:	3a14      	subs	r2, #20
 802865e:	2401      	movs	r4, #1
 8028660:	2a1e      	cmp	r2, #30
 8028662:	dc02      	bgt.n	802866a <__ulp+0x32>
 8028664:	2480      	movs	r4, #128	@ 0x80
 8028666:	0624      	lsls	r4, r4, #24
 8028668:	40d4      	lsrs	r4, r2
 802866a:	2300      	movs	r3, #0
 802866c:	e7f3      	b.n	8028656 <__ulp+0x1e>
 802866e:	46c0      	nop			@ (mov r8, r8)
 8028670:	7ff00000 	.word	0x7ff00000
 8028674:	fcc00000 	.word	0xfcc00000

08028678 <__b2d>:
 8028678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802867a:	0006      	movs	r6, r0
 802867c:	6903      	ldr	r3, [r0, #16]
 802867e:	3614      	adds	r6, #20
 8028680:	009b      	lsls	r3, r3, #2
 8028682:	18f3      	adds	r3, r6, r3
 8028684:	1f1d      	subs	r5, r3, #4
 8028686:	682c      	ldr	r4, [r5, #0]
 8028688:	000f      	movs	r7, r1
 802868a:	0020      	movs	r0, r4
 802868c:	9301      	str	r3, [sp, #4]
 802868e:	f7ff fd43 	bl	8028118 <__hi0bits>
 8028692:	2220      	movs	r2, #32
 8028694:	1a12      	subs	r2, r2, r0
 8028696:	603a      	str	r2, [r7, #0]
 8028698:	0003      	movs	r3, r0
 802869a:	4a1c      	ldr	r2, [pc, #112]	@ (802870c <__b2d+0x94>)
 802869c:	280a      	cmp	r0, #10
 802869e:	dc15      	bgt.n	80286cc <__b2d+0x54>
 80286a0:	210b      	movs	r1, #11
 80286a2:	0027      	movs	r7, r4
 80286a4:	1a09      	subs	r1, r1, r0
 80286a6:	40cf      	lsrs	r7, r1
 80286a8:	433a      	orrs	r2, r7
 80286aa:	468c      	mov	ip, r1
 80286ac:	0011      	movs	r1, r2
 80286ae:	2200      	movs	r2, #0
 80286b0:	42ae      	cmp	r6, r5
 80286b2:	d202      	bcs.n	80286ba <__b2d+0x42>
 80286b4:	9a01      	ldr	r2, [sp, #4]
 80286b6:	3a08      	subs	r2, #8
 80286b8:	6812      	ldr	r2, [r2, #0]
 80286ba:	3315      	adds	r3, #21
 80286bc:	409c      	lsls	r4, r3
 80286be:	4663      	mov	r3, ip
 80286c0:	0027      	movs	r7, r4
 80286c2:	40da      	lsrs	r2, r3
 80286c4:	4317      	orrs	r7, r2
 80286c6:	0038      	movs	r0, r7
 80286c8:	b003      	add	sp, #12
 80286ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80286cc:	2700      	movs	r7, #0
 80286ce:	42ae      	cmp	r6, r5
 80286d0:	d202      	bcs.n	80286d8 <__b2d+0x60>
 80286d2:	9d01      	ldr	r5, [sp, #4]
 80286d4:	3d08      	subs	r5, #8
 80286d6:	682f      	ldr	r7, [r5, #0]
 80286d8:	210b      	movs	r1, #11
 80286da:	4249      	negs	r1, r1
 80286dc:	468c      	mov	ip, r1
 80286de:	449c      	add	ip, r3
 80286e0:	2b0b      	cmp	r3, #11
 80286e2:	d010      	beq.n	8028706 <__b2d+0x8e>
 80286e4:	4661      	mov	r1, ip
 80286e6:	2320      	movs	r3, #32
 80286e8:	408c      	lsls	r4, r1
 80286ea:	1a5b      	subs	r3, r3, r1
 80286ec:	0039      	movs	r1, r7
 80286ee:	40d9      	lsrs	r1, r3
 80286f0:	430c      	orrs	r4, r1
 80286f2:	4322      	orrs	r2, r4
 80286f4:	0011      	movs	r1, r2
 80286f6:	2200      	movs	r2, #0
 80286f8:	42b5      	cmp	r5, r6
 80286fa:	d901      	bls.n	8028700 <__b2d+0x88>
 80286fc:	3d04      	subs	r5, #4
 80286fe:	682a      	ldr	r2, [r5, #0]
 8028700:	4664      	mov	r4, ip
 8028702:	40a7      	lsls	r7, r4
 8028704:	e7dd      	b.n	80286c2 <__b2d+0x4a>
 8028706:	4322      	orrs	r2, r4
 8028708:	0011      	movs	r1, r2
 802870a:	e7dc      	b.n	80286c6 <__b2d+0x4e>
 802870c:	3ff00000 	.word	0x3ff00000

08028710 <__d2b>:
 8028710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028712:	2101      	movs	r1, #1
 8028714:	0016      	movs	r6, r2
 8028716:	001f      	movs	r7, r3
 8028718:	f7ff fc06 	bl	8027f28 <_Balloc>
 802871c:	1e04      	subs	r4, r0, #0
 802871e:	d105      	bne.n	802872c <__d2b+0x1c>
 8028720:	0022      	movs	r2, r4
 8028722:	4b25      	ldr	r3, [pc, #148]	@ (80287b8 <__d2b+0xa8>)
 8028724:	4825      	ldr	r0, [pc, #148]	@ (80287bc <__d2b+0xac>)
 8028726:	4926      	ldr	r1, [pc, #152]	@ (80287c0 <__d2b+0xb0>)
 8028728:	f000 fcd6 	bl	80290d8 <__assert_func>
 802872c:	033b      	lsls	r3, r7, #12
 802872e:	007d      	lsls	r5, r7, #1
 8028730:	0b1b      	lsrs	r3, r3, #12
 8028732:	0d6d      	lsrs	r5, r5, #21
 8028734:	d002      	beq.n	802873c <__d2b+0x2c>
 8028736:	2280      	movs	r2, #128	@ 0x80
 8028738:	0352      	lsls	r2, r2, #13
 802873a:	4313      	orrs	r3, r2
 802873c:	9301      	str	r3, [sp, #4]
 802873e:	2e00      	cmp	r6, #0
 8028740:	d025      	beq.n	802878e <__d2b+0x7e>
 8028742:	4668      	mov	r0, sp
 8028744:	9600      	str	r6, [sp, #0]
 8028746:	f7ff fd08 	bl	802815a <__lo0bits>
 802874a:	9b01      	ldr	r3, [sp, #4]
 802874c:	9900      	ldr	r1, [sp, #0]
 802874e:	2800      	cmp	r0, #0
 8028750:	d01b      	beq.n	802878a <__d2b+0x7a>
 8028752:	2220      	movs	r2, #32
 8028754:	001e      	movs	r6, r3
 8028756:	1a12      	subs	r2, r2, r0
 8028758:	4096      	lsls	r6, r2
 802875a:	0032      	movs	r2, r6
 802875c:	40c3      	lsrs	r3, r0
 802875e:	430a      	orrs	r2, r1
 8028760:	6162      	str	r2, [r4, #20]
 8028762:	9301      	str	r3, [sp, #4]
 8028764:	9e01      	ldr	r6, [sp, #4]
 8028766:	61a6      	str	r6, [r4, #24]
 8028768:	1e73      	subs	r3, r6, #1
 802876a:	419e      	sbcs	r6, r3
 802876c:	3601      	adds	r6, #1
 802876e:	6126      	str	r6, [r4, #16]
 8028770:	2d00      	cmp	r5, #0
 8028772:	d014      	beq.n	802879e <__d2b+0x8e>
 8028774:	2635      	movs	r6, #53	@ 0x35
 8028776:	4b13      	ldr	r3, [pc, #76]	@ (80287c4 <__d2b+0xb4>)
 8028778:	18ed      	adds	r5, r5, r3
 802877a:	9b08      	ldr	r3, [sp, #32]
 802877c:	182d      	adds	r5, r5, r0
 802877e:	601d      	str	r5, [r3, #0]
 8028780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028782:	1a36      	subs	r6, r6, r0
 8028784:	601e      	str	r6, [r3, #0]
 8028786:	0020      	movs	r0, r4
 8028788:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802878a:	6161      	str	r1, [r4, #20]
 802878c:	e7ea      	b.n	8028764 <__d2b+0x54>
 802878e:	a801      	add	r0, sp, #4
 8028790:	f7ff fce3 	bl	802815a <__lo0bits>
 8028794:	9b01      	ldr	r3, [sp, #4]
 8028796:	2601      	movs	r6, #1
 8028798:	6163      	str	r3, [r4, #20]
 802879a:	3020      	adds	r0, #32
 802879c:	e7e7      	b.n	802876e <__d2b+0x5e>
 802879e:	4b0a      	ldr	r3, [pc, #40]	@ (80287c8 <__d2b+0xb8>)
 80287a0:	18c0      	adds	r0, r0, r3
 80287a2:	9b08      	ldr	r3, [sp, #32]
 80287a4:	6018      	str	r0, [r3, #0]
 80287a6:	4b09      	ldr	r3, [pc, #36]	@ (80287cc <__d2b+0xbc>)
 80287a8:	18f3      	adds	r3, r6, r3
 80287aa:	009b      	lsls	r3, r3, #2
 80287ac:	18e3      	adds	r3, r4, r3
 80287ae:	6958      	ldr	r0, [r3, #20]
 80287b0:	f7ff fcb2 	bl	8028118 <__hi0bits>
 80287b4:	0176      	lsls	r6, r6, #5
 80287b6:	e7e3      	b.n	8028780 <__d2b+0x70>
 80287b8:	0802eec2 	.word	0x0802eec2
 80287bc:	0802ef33 	.word	0x0802ef33
 80287c0:	0000030f 	.word	0x0000030f
 80287c4:	fffffbcd 	.word	0xfffffbcd
 80287c8:	fffffbce 	.word	0xfffffbce
 80287cc:	3fffffff 	.word	0x3fffffff

080287d0 <__ratio>:
 80287d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80287d2:	b087      	sub	sp, #28
 80287d4:	000f      	movs	r7, r1
 80287d6:	a904      	add	r1, sp, #16
 80287d8:	0006      	movs	r6, r0
 80287da:	f7ff ff4d 	bl	8028678 <__b2d>
 80287de:	9000      	str	r0, [sp, #0]
 80287e0:	9101      	str	r1, [sp, #4]
 80287e2:	9b00      	ldr	r3, [sp, #0]
 80287e4:	9c01      	ldr	r4, [sp, #4]
 80287e6:	0038      	movs	r0, r7
 80287e8:	a905      	add	r1, sp, #20
 80287ea:	9302      	str	r3, [sp, #8]
 80287ec:	9403      	str	r4, [sp, #12]
 80287ee:	f7ff ff43 	bl	8028678 <__b2d>
 80287f2:	000d      	movs	r5, r1
 80287f4:	0002      	movs	r2, r0
 80287f6:	000b      	movs	r3, r1
 80287f8:	6930      	ldr	r0, [r6, #16]
 80287fa:	6939      	ldr	r1, [r7, #16]
 80287fc:	9e04      	ldr	r6, [sp, #16]
 80287fe:	1a40      	subs	r0, r0, r1
 8028800:	9905      	ldr	r1, [sp, #20]
 8028802:	0140      	lsls	r0, r0, #5
 8028804:	1a71      	subs	r1, r6, r1
 8028806:	1841      	adds	r1, r0, r1
 8028808:	0508      	lsls	r0, r1, #20
 802880a:	2900      	cmp	r1, #0
 802880c:	dd08      	ble.n	8028820 <__ratio+0x50>
 802880e:	9901      	ldr	r1, [sp, #4]
 8028810:	1841      	adds	r1, r0, r1
 8028812:	9103      	str	r1, [sp, #12]
 8028814:	9802      	ldr	r0, [sp, #8]
 8028816:	9903      	ldr	r1, [sp, #12]
 8028818:	f7d9 fc62 	bl	80020e0 <__aeabi_ddiv>
 802881c:	b007      	add	sp, #28
 802881e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028820:	1a2b      	subs	r3, r5, r0
 8028822:	e7f7      	b.n	8028814 <__ratio+0x44>

08028824 <__copybits>:
 8028824:	b570      	push	{r4, r5, r6, lr}
 8028826:	0014      	movs	r4, r2
 8028828:	0005      	movs	r5, r0
 802882a:	3901      	subs	r1, #1
 802882c:	6913      	ldr	r3, [r2, #16]
 802882e:	1149      	asrs	r1, r1, #5
 8028830:	3101      	adds	r1, #1
 8028832:	0089      	lsls	r1, r1, #2
 8028834:	3414      	adds	r4, #20
 8028836:	009b      	lsls	r3, r3, #2
 8028838:	1841      	adds	r1, r0, r1
 802883a:	18e3      	adds	r3, r4, r3
 802883c:	42a3      	cmp	r3, r4
 802883e:	d80d      	bhi.n	802885c <__copybits+0x38>
 8028840:	0014      	movs	r4, r2
 8028842:	3411      	adds	r4, #17
 8028844:	2500      	movs	r5, #0
 8028846:	42a3      	cmp	r3, r4
 8028848:	d303      	bcc.n	8028852 <__copybits+0x2e>
 802884a:	1a9b      	subs	r3, r3, r2
 802884c:	3b11      	subs	r3, #17
 802884e:	089b      	lsrs	r3, r3, #2
 8028850:	009d      	lsls	r5, r3, #2
 8028852:	2300      	movs	r3, #0
 8028854:	1940      	adds	r0, r0, r5
 8028856:	4281      	cmp	r1, r0
 8028858:	d803      	bhi.n	8028862 <__copybits+0x3e>
 802885a:	bd70      	pop	{r4, r5, r6, pc}
 802885c:	cc40      	ldmia	r4!, {r6}
 802885e:	c540      	stmia	r5!, {r6}
 8028860:	e7ec      	b.n	802883c <__copybits+0x18>
 8028862:	c008      	stmia	r0!, {r3}
 8028864:	e7f7      	b.n	8028856 <__copybits+0x32>

08028866 <__any_on>:
 8028866:	0002      	movs	r2, r0
 8028868:	6900      	ldr	r0, [r0, #16]
 802886a:	b510      	push	{r4, lr}
 802886c:	3214      	adds	r2, #20
 802886e:	114b      	asrs	r3, r1, #5
 8028870:	4298      	cmp	r0, r3
 8028872:	db13      	blt.n	802889c <__any_on+0x36>
 8028874:	dd0c      	ble.n	8028890 <__any_on+0x2a>
 8028876:	241f      	movs	r4, #31
 8028878:	0008      	movs	r0, r1
 802887a:	4020      	ands	r0, r4
 802887c:	4221      	tst	r1, r4
 802887e:	d007      	beq.n	8028890 <__any_on+0x2a>
 8028880:	0099      	lsls	r1, r3, #2
 8028882:	588c      	ldr	r4, [r1, r2]
 8028884:	0021      	movs	r1, r4
 8028886:	40c1      	lsrs	r1, r0
 8028888:	4081      	lsls	r1, r0
 802888a:	2001      	movs	r0, #1
 802888c:	428c      	cmp	r4, r1
 802888e:	d104      	bne.n	802889a <__any_on+0x34>
 8028890:	009b      	lsls	r3, r3, #2
 8028892:	18d3      	adds	r3, r2, r3
 8028894:	4293      	cmp	r3, r2
 8028896:	d803      	bhi.n	80288a0 <__any_on+0x3a>
 8028898:	2000      	movs	r0, #0
 802889a:	bd10      	pop	{r4, pc}
 802889c:	0003      	movs	r3, r0
 802889e:	e7f7      	b.n	8028890 <__any_on+0x2a>
 80288a0:	3b04      	subs	r3, #4
 80288a2:	6819      	ldr	r1, [r3, #0]
 80288a4:	2900      	cmp	r1, #0
 80288a6:	d0f5      	beq.n	8028894 <__any_on+0x2e>
 80288a8:	2001      	movs	r0, #1
 80288aa:	e7f6      	b.n	802889a <__any_on+0x34>

080288ac <__ascii_wctomb>:
 80288ac:	0003      	movs	r3, r0
 80288ae:	1e08      	subs	r0, r1, #0
 80288b0:	d005      	beq.n	80288be <__ascii_wctomb+0x12>
 80288b2:	2aff      	cmp	r2, #255	@ 0xff
 80288b4:	d904      	bls.n	80288c0 <__ascii_wctomb+0x14>
 80288b6:	228a      	movs	r2, #138	@ 0x8a
 80288b8:	2001      	movs	r0, #1
 80288ba:	601a      	str	r2, [r3, #0]
 80288bc:	4240      	negs	r0, r0
 80288be:	4770      	bx	lr
 80288c0:	2001      	movs	r0, #1
 80288c2:	700a      	strb	r2, [r1, #0]
 80288c4:	e7fb      	b.n	80288be <__ascii_wctomb+0x12>
	...

080288c8 <__ssputs_r>:
 80288c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80288ca:	688e      	ldr	r6, [r1, #8]
 80288cc:	b085      	sub	sp, #20
 80288ce:	001f      	movs	r7, r3
 80288d0:	000c      	movs	r4, r1
 80288d2:	680b      	ldr	r3, [r1, #0]
 80288d4:	9002      	str	r0, [sp, #8]
 80288d6:	9203      	str	r2, [sp, #12]
 80288d8:	42be      	cmp	r6, r7
 80288da:	d830      	bhi.n	802893e <__ssputs_r+0x76>
 80288dc:	210c      	movs	r1, #12
 80288de:	5e62      	ldrsh	r2, [r4, r1]
 80288e0:	2190      	movs	r1, #144	@ 0x90
 80288e2:	00c9      	lsls	r1, r1, #3
 80288e4:	420a      	tst	r2, r1
 80288e6:	d028      	beq.n	802893a <__ssputs_r+0x72>
 80288e8:	2003      	movs	r0, #3
 80288ea:	6921      	ldr	r1, [r4, #16]
 80288ec:	1a5b      	subs	r3, r3, r1
 80288ee:	9301      	str	r3, [sp, #4]
 80288f0:	6963      	ldr	r3, [r4, #20]
 80288f2:	4343      	muls	r3, r0
 80288f4:	9801      	ldr	r0, [sp, #4]
 80288f6:	0fdd      	lsrs	r5, r3, #31
 80288f8:	18ed      	adds	r5, r5, r3
 80288fa:	1c7b      	adds	r3, r7, #1
 80288fc:	181b      	adds	r3, r3, r0
 80288fe:	106d      	asrs	r5, r5, #1
 8028900:	42ab      	cmp	r3, r5
 8028902:	d900      	bls.n	8028906 <__ssputs_r+0x3e>
 8028904:	001d      	movs	r5, r3
 8028906:	0552      	lsls	r2, r2, #21
 8028908:	d528      	bpl.n	802895c <__ssputs_r+0x94>
 802890a:	0029      	movs	r1, r5
 802890c:	9802      	ldr	r0, [sp, #8]
 802890e:	f7ff fa69 	bl	8027de4 <_malloc_r>
 8028912:	1e06      	subs	r6, r0, #0
 8028914:	d02c      	beq.n	8028970 <__ssputs_r+0xa8>
 8028916:	9a01      	ldr	r2, [sp, #4]
 8028918:	6921      	ldr	r1, [r4, #16]
 802891a:	f7fe f80d 	bl	8026938 <memcpy>
 802891e:	89a2      	ldrh	r2, [r4, #12]
 8028920:	4b18      	ldr	r3, [pc, #96]	@ (8028984 <__ssputs_r+0xbc>)
 8028922:	401a      	ands	r2, r3
 8028924:	2380      	movs	r3, #128	@ 0x80
 8028926:	4313      	orrs	r3, r2
 8028928:	81a3      	strh	r3, [r4, #12]
 802892a:	9b01      	ldr	r3, [sp, #4]
 802892c:	6126      	str	r6, [r4, #16]
 802892e:	18f6      	adds	r6, r6, r3
 8028930:	6026      	str	r6, [r4, #0]
 8028932:	003e      	movs	r6, r7
 8028934:	6165      	str	r5, [r4, #20]
 8028936:	1aed      	subs	r5, r5, r3
 8028938:	60a5      	str	r5, [r4, #8]
 802893a:	42be      	cmp	r6, r7
 802893c:	d900      	bls.n	8028940 <__ssputs_r+0x78>
 802893e:	003e      	movs	r6, r7
 8028940:	0032      	movs	r2, r6
 8028942:	9903      	ldr	r1, [sp, #12]
 8028944:	6820      	ldr	r0, [r4, #0]
 8028946:	f000 fb7e 	bl	8029046 <memmove>
 802894a:	2000      	movs	r0, #0
 802894c:	68a3      	ldr	r3, [r4, #8]
 802894e:	1b9b      	subs	r3, r3, r6
 8028950:	60a3      	str	r3, [r4, #8]
 8028952:	6823      	ldr	r3, [r4, #0]
 8028954:	199b      	adds	r3, r3, r6
 8028956:	6023      	str	r3, [r4, #0]
 8028958:	b005      	add	sp, #20
 802895a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802895c:	002a      	movs	r2, r5
 802895e:	9802      	ldr	r0, [sp, #8]
 8028960:	f000 fc05 	bl	802916e <_realloc_r>
 8028964:	1e06      	subs	r6, r0, #0
 8028966:	d1e0      	bne.n	802892a <__ssputs_r+0x62>
 8028968:	6921      	ldr	r1, [r4, #16]
 802896a:	9802      	ldr	r0, [sp, #8]
 802896c:	f7fe fe6a 	bl	8027644 <_free_r>
 8028970:	230c      	movs	r3, #12
 8028972:	2001      	movs	r0, #1
 8028974:	9a02      	ldr	r2, [sp, #8]
 8028976:	4240      	negs	r0, r0
 8028978:	6013      	str	r3, [r2, #0]
 802897a:	89a2      	ldrh	r2, [r4, #12]
 802897c:	3334      	adds	r3, #52	@ 0x34
 802897e:	4313      	orrs	r3, r2
 8028980:	81a3      	strh	r3, [r4, #12]
 8028982:	e7e9      	b.n	8028958 <__ssputs_r+0x90>
 8028984:	fffffb7f 	.word	0xfffffb7f

08028988 <_svfiprintf_r>:
 8028988:	b5f0      	push	{r4, r5, r6, r7, lr}
 802898a:	b0a1      	sub	sp, #132	@ 0x84
 802898c:	9003      	str	r0, [sp, #12]
 802898e:	001d      	movs	r5, r3
 8028990:	898b      	ldrh	r3, [r1, #12]
 8028992:	000f      	movs	r7, r1
 8028994:	0016      	movs	r6, r2
 8028996:	061b      	lsls	r3, r3, #24
 8028998:	d511      	bpl.n	80289be <_svfiprintf_r+0x36>
 802899a:	690b      	ldr	r3, [r1, #16]
 802899c:	2b00      	cmp	r3, #0
 802899e:	d10e      	bne.n	80289be <_svfiprintf_r+0x36>
 80289a0:	2140      	movs	r1, #64	@ 0x40
 80289a2:	f7ff fa1f 	bl	8027de4 <_malloc_r>
 80289a6:	6038      	str	r0, [r7, #0]
 80289a8:	6138      	str	r0, [r7, #16]
 80289aa:	2800      	cmp	r0, #0
 80289ac:	d105      	bne.n	80289ba <_svfiprintf_r+0x32>
 80289ae:	230c      	movs	r3, #12
 80289b0:	9a03      	ldr	r2, [sp, #12]
 80289b2:	6013      	str	r3, [r2, #0]
 80289b4:	2001      	movs	r0, #1
 80289b6:	4240      	negs	r0, r0
 80289b8:	e0cf      	b.n	8028b5a <_svfiprintf_r+0x1d2>
 80289ba:	2340      	movs	r3, #64	@ 0x40
 80289bc:	617b      	str	r3, [r7, #20]
 80289be:	2300      	movs	r3, #0
 80289c0:	ac08      	add	r4, sp, #32
 80289c2:	6163      	str	r3, [r4, #20]
 80289c4:	3320      	adds	r3, #32
 80289c6:	7663      	strb	r3, [r4, #25]
 80289c8:	3310      	adds	r3, #16
 80289ca:	76a3      	strb	r3, [r4, #26]
 80289cc:	9507      	str	r5, [sp, #28]
 80289ce:	0035      	movs	r5, r6
 80289d0:	782b      	ldrb	r3, [r5, #0]
 80289d2:	2b00      	cmp	r3, #0
 80289d4:	d001      	beq.n	80289da <_svfiprintf_r+0x52>
 80289d6:	2b25      	cmp	r3, #37	@ 0x25
 80289d8:	d148      	bne.n	8028a6c <_svfiprintf_r+0xe4>
 80289da:	1bab      	subs	r3, r5, r6
 80289dc:	9305      	str	r3, [sp, #20]
 80289de:	42b5      	cmp	r5, r6
 80289e0:	d00b      	beq.n	80289fa <_svfiprintf_r+0x72>
 80289e2:	0032      	movs	r2, r6
 80289e4:	0039      	movs	r1, r7
 80289e6:	9803      	ldr	r0, [sp, #12]
 80289e8:	f7ff ff6e 	bl	80288c8 <__ssputs_r>
 80289ec:	3001      	adds	r0, #1
 80289ee:	d100      	bne.n	80289f2 <_svfiprintf_r+0x6a>
 80289f0:	e0ae      	b.n	8028b50 <_svfiprintf_r+0x1c8>
 80289f2:	6963      	ldr	r3, [r4, #20]
 80289f4:	9a05      	ldr	r2, [sp, #20]
 80289f6:	189b      	adds	r3, r3, r2
 80289f8:	6163      	str	r3, [r4, #20]
 80289fa:	782b      	ldrb	r3, [r5, #0]
 80289fc:	2b00      	cmp	r3, #0
 80289fe:	d100      	bne.n	8028a02 <_svfiprintf_r+0x7a>
 8028a00:	e0a6      	b.n	8028b50 <_svfiprintf_r+0x1c8>
 8028a02:	2201      	movs	r2, #1
 8028a04:	2300      	movs	r3, #0
 8028a06:	4252      	negs	r2, r2
 8028a08:	6062      	str	r2, [r4, #4]
 8028a0a:	a904      	add	r1, sp, #16
 8028a0c:	3254      	adds	r2, #84	@ 0x54
 8028a0e:	1852      	adds	r2, r2, r1
 8028a10:	1c6e      	adds	r6, r5, #1
 8028a12:	6023      	str	r3, [r4, #0]
 8028a14:	60e3      	str	r3, [r4, #12]
 8028a16:	60a3      	str	r3, [r4, #8]
 8028a18:	7013      	strb	r3, [r2, #0]
 8028a1a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8028a1c:	4b54      	ldr	r3, [pc, #336]	@ (8028b70 <_svfiprintf_r+0x1e8>)
 8028a1e:	2205      	movs	r2, #5
 8028a20:	0018      	movs	r0, r3
 8028a22:	7831      	ldrb	r1, [r6, #0]
 8028a24:	9305      	str	r3, [sp, #20]
 8028a26:	f7fd ff7c 	bl	8026922 <memchr>
 8028a2a:	1c75      	adds	r5, r6, #1
 8028a2c:	2800      	cmp	r0, #0
 8028a2e:	d11f      	bne.n	8028a70 <_svfiprintf_r+0xe8>
 8028a30:	6822      	ldr	r2, [r4, #0]
 8028a32:	06d3      	lsls	r3, r2, #27
 8028a34:	d504      	bpl.n	8028a40 <_svfiprintf_r+0xb8>
 8028a36:	2353      	movs	r3, #83	@ 0x53
 8028a38:	a904      	add	r1, sp, #16
 8028a3a:	185b      	adds	r3, r3, r1
 8028a3c:	2120      	movs	r1, #32
 8028a3e:	7019      	strb	r1, [r3, #0]
 8028a40:	0713      	lsls	r3, r2, #28
 8028a42:	d504      	bpl.n	8028a4e <_svfiprintf_r+0xc6>
 8028a44:	2353      	movs	r3, #83	@ 0x53
 8028a46:	a904      	add	r1, sp, #16
 8028a48:	185b      	adds	r3, r3, r1
 8028a4a:	212b      	movs	r1, #43	@ 0x2b
 8028a4c:	7019      	strb	r1, [r3, #0]
 8028a4e:	7833      	ldrb	r3, [r6, #0]
 8028a50:	2b2a      	cmp	r3, #42	@ 0x2a
 8028a52:	d016      	beq.n	8028a82 <_svfiprintf_r+0xfa>
 8028a54:	0035      	movs	r5, r6
 8028a56:	2100      	movs	r1, #0
 8028a58:	200a      	movs	r0, #10
 8028a5a:	68e3      	ldr	r3, [r4, #12]
 8028a5c:	782a      	ldrb	r2, [r5, #0]
 8028a5e:	1c6e      	adds	r6, r5, #1
 8028a60:	3a30      	subs	r2, #48	@ 0x30
 8028a62:	2a09      	cmp	r2, #9
 8028a64:	d950      	bls.n	8028b08 <_svfiprintf_r+0x180>
 8028a66:	2900      	cmp	r1, #0
 8028a68:	d111      	bne.n	8028a8e <_svfiprintf_r+0x106>
 8028a6a:	e017      	b.n	8028a9c <_svfiprintf_r+0x114>
 8028a6c:	3501      	adds	r5, #1
 8028a6e:	e7af      	b.n	80289d0 <_svfiprintf_r+0x48>
 8028a70:	9b05      	ldr	r3, [sp, #20]
 8028a72:	6822      	ldr	r2, [r4, #0]
 8028a74:	1ac0      	subs	r0, r0, r3
 8028a76:	2301      	movs	r3, #1
 8028a78:	4083      	lsls	r3, r0
 8028a7a:	4313      	orrs	r3, r2
 8028a7c:	002e      	movs	r6, r5
 8028a7e:	6023      	str	r3, [r4, #0]
 8028a80:	e7cc      	b.n	8028a1c <_svfiprintf_r+0x94>
 8028a82:	9b07      	ldr	r3, [sp, #28]
 8028a84:	1d19      	adds	r1, r3, #4
 8028a86:	681b      	ldr	r3, [r3, #0]
 8028a88:	9107      	str	r1, [sp, #28]
 8028a8a:	2b00      	cmp	r3, #0
 8028a8c:	db01      	blt.n	8028a92 <_svfiprintf_r+0x10a>
 8028a8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028a90:	e004      	b.n	8028a9c <_svfiprintf_r+0x114>
 8028a92:	425b      	negs	r3, r3
 8028a94:	60e3      	str	r3, [r4, #12]
 8028a96:	2302      	movs	r3, #2
 8028a98:	4313      	orrs	r3, r2
 8028a9a:	6023      	str	r3, [r4, #0]
 8028a9c:	782b      	ldrb	r3, [r5, #0]
 8028a9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8028aa0:	d10c      	bne.n	8028abc <_svfiprintf_r+0x134>
 8028aa2:	786b      	ldrb	r3, [r5, #1]
 8028aa4:	2b2a      	cmp	r3, #42	@ 0x2a
 8028aa6:	d134      	bne.n	8028b12 <_svfiprintf_r+0x18a>
 8028aa8:	9b07      	ldr	r3, [sp, #28]
 8028aaa:	3502      	adds	r5, #2
 8028aac:	1d1a      	adds	r2, r3, #4
 8028aae:	681b      	ldr	r3, [r3, #0]
 8028ab0:	9207      	str	r2, [sp, #28]
 8028ab2:	2b00      	cmp	r3, #0
 8028ab4:	da01      	bge.n	8028aba <_svfiprintf_r+0x132>
 8028ab6:	2301      	movs	r3, #1
 8028ab8:	425b      	negs	r3, r3
 8028aba:	9309      	str	r3, [sp, #36]	@ 0x24
 8028abc:	4e2d      	ldr	r6, [pc, #180]	@ (8028b74 <_svfiprintf_r+0x1ec>)
 8028abe:	2203      	movs	r2, #3
 8028ac0:	0030      	movs	r0, r6
 8028ac2:	7829      	ldrb	r1, [r5, #0]
 8028ac4:	f7fd ff2d 	bl	8026922 <memchr>
 8028ac8:	2800      	cmp	r0, #0
 8028aca:	d006      	beq.n	8028ada <_svfiprintf_r+0x152>
 8028acc:	2340      	movs	r3, #64	@ 0x40
 8028ace:	1b80      	subs	r0, r0, r6
 8028ad0:	4083      	lsls	r3, r0
 8028ad2:	6822      	ldr	r2, [r4, #0]
 8028ad4:	3501      	adds	r5, #1
 8028ad6:	4313      	orrs	r3, r2
 8028ad8:	6023      	str	r3, [r4, #0]
 8028ada:	7829      	ldrb	r1, [r5, #0]
 8028adc:	2206      	movs	r2, #6
 8028ade:	4826      	ldr	r0, [pc, #152]	@ (8028b78 <_svfiprintf_r+0x1f0>)
 8028ae0:	1c6e      	adds	r6, r5, #1
 8028ae2:	7621      	strb	r1, [r4, #24]
 8028ae4:	f7fd ff1d 	bl	8026922 <memchr>
 8028ae8:	2800      	cmp	r0, #0
 8028aea:	d038      	beq.n	8028b5e <_svfiprintf_r+0x1d6>
 8028aec:	4b23      	ldr	r3, [pc, #140]	@ (8028b7c <_svfiprintf_r+0x1f4>)
 8028aee:	2b00      	cmp	r3, #0
 8028af0:	d122      	bne.n	8028b38 <_svfiprintf_r+0x1b0>
 8028af2:	2207      	movs	r2, #7
 8028af4:	9b07      	ldr	r3, [sp, #28]
 8028af6:	3307      	adds	r3, #7
 8028af8:	4393      	bics	r3, r2
 8028afa:	3308      	adds	r3, #8
 8028afc:	9307      	str	r3, [sp, #28]
 8028afe:	6963      	ldr	r3, [r4, #20]
 8028b00:	9a04      	ldr	r2, [sp, #16]
 8028b02:	189b      	adds	r3, r3, r2
 8028b04:	6163      	str	r3, [r4, #20]
 8028b06:	e762      	b.n	80289ce <_svfiprintf_r+0x46>
 8028b08:	4343      	muls	r3, r0
 8028b0a:	0035      	movs	r5, r6
 8028b0c:	2101      	movs	r1, #1
 8028b0e:	189b      	adds	r3, r3, r2
 8028b10:	e7a4      	b.n	8028a5c <_svfiprintf_r+0xd4>
 8028b12:	2300      	movs	r3, #0
 8028b14:	200a      	movs	r0, #10
 8028b16:	0019      	movs	r1, r3
 8028b18:	3501      	adds	r5, #1
 8028b1a:	6063      	str	r3, [r4, #4]
 8028b1c:	782a      	ldrb	r2, [r5, #0]
 8028b1e:	1c6e      	adds	r6, r5, #1
 8028b20:	3a30      	subs	r2, #48	@ 0x30
 8028b22:	2a09      	cmp	r2, #9
 8028b24:	d903      	bls.n	8028b2e <_svfiprintf_r+0x1a6>
 8028b26:	2b00      	cmp	r3, #0
 8028b28:	d0c8      	beq.n	8028abc <_svfiprintf_r+0x134>
 8028b2a:	9109      	str	r1, [sp, #36]	@ 0x24
 8028b2c:	e7c6      	b.n	8028abc <_svfiprintf_r+0x134>
 8028b2e:	4341      	muls	r1, r0
 8028b30:	0035      	movs	r5, r6
 8028b32:	2301      	movs	r3, #1
 8028b34:	1889      	adds	r1, r1, r2
 8028b36:	e7f1      	b.n	8028b1c <_svfiprintf_r+0x194>
 8028b38:	aa07      	add	r2, sp, #28
 8028b3a:	9200      	str	r2, [sp, #0]
 8028b3c:	0021      	movs	r1, r4
 8028b3e:	003a      	movs	r2, r7
 8028b40:	4b0f      	ldr	r3, [pc, #60]	@ (8028b80 <_svfiprintf_r+0x1f8>)
 8028b42:	9803      	ldr	r0, [sp, #12]
 8028b44:	f7fc ffe6 	bl	8025b14 <_printf_float>
 8028b48:	9004      	str	r0, [sp, #16]
 8028b4a:	9b04      	ldr	r3, [sp, #16]
 8028b4c:	3301      	adds	r3, #1
 8028b4e:	d1d6      	bne.n	8028afe <_svfiprintf_r+0x176>
 8028b50:	89bb      	ldrh	r3, [r7, #12]
 8028b52:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028b54:	065b      	lsls	r3, r3, #25
 8028b56:	d500      	bpl.n	8028b5a <_svfiprintf_r+0x1d2>
 8028b58:	e72c      	b.n	80289b4 <_svfiprintf_r+0x2c>
 8028b5a:	b021      	add	sp, #132	@ 0x84
 8028b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028b5e:	aa07      	add	r2, sp, #28
 8028b60:	9200      	str	r2, [sp, #0]
 8028b62:	0021      	movs	r1, r4
 8028b64:	003a      	movs	r2, r7
 8028b66:	4b06      	ldr	r3, [pc, #24]	@ (8028b80 <_svfiprintf_r+0x1f8>)
 8028b68:	9803      	ldr	r0, [sp, #12]
 8028b6a:	f7fd fa81 	bl	8026070 <_printf_i>
 8028b6e:	e7eb      	b.n	8028b48 <_svfiprintf_r+0x1c0>
 8028b70:	0802ef8c 	.word	0x0802ef8c
 8028b74:	0802ef92 	.word	0x0802ef92
 8028b78:	0802ef96 	.word	0x0802ef96
 8028b7c:	08025b15 	.word	0x08025b15
 8028b80:	080288c9 	.word	0x080288c9

08028b84 <__sfputc_r>:
 8028b84:	6893      	ldr	r3, [r2, #8]
 8028b86:	b510      	push	{r4, lr}
 8028b88:	3b01      	subs	r3, #1
 8028b8a:	6093      	str	r3, [r2, #8]
 8028b8c:	2b00      	cmp	r3, #0
 8028b8e:	da04      	bge.n	8028b9a <__sfputc_r+0x16>
 8028b90:	6994      	ldr	r4, [r2, #24]
 8028b92:	42a3      	cmp	r3, r4
 8028b94:	db07      	blt.n	8028ba6 <__sfputc_r+0x22>
 8028b96:	290a      	cmp	r1, #10
 8028b98:	d005      	beq.n	8028ba6 <__sfputc_r+0x22>
 8028b9a:	6813      	ldr	r3, [r2, #0]
 8028b9c:	1c58      	adds	r0, r3, #1
 8028b9e:	6010      	str	r0, [r2, #0]
 8028ba0:	7019      	strb	r1, [r3, #0]
 8028ba2:	0008      	movs	r0, r1
 8028ba4:	bd10      	pop	{r4, pc}
 8028ba6:	f7fd fd4b 	bl	8026640 <__swbuf_r>
 8028baa:	0001      	movs	r1, r0
 8028bac:	e7f9      	b.n	8028ba2 <__sfputc_r+0x1e>

08028bae <__sfputs_r>:
 8028bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028bb0:	0006      	movs	r6, r0
 8028bb2:	000f      	movs	r7, r1
 8028bb4:	0014      	movs	r4, r2
 8028bb6:	18d5      	adds	r5, r2, r3
 8028bb8:	42ac      	cmp	r4, r5
 8028bba:	d101      	bne.n	8028bc0 <__sfputs_r+0x12>
 8028bbc:	2000      	movs	r0, #0
 8028bbe:	e007      	b.n	8028bd0 <__sfputs_r+0x22>
 8028bc0:	7821      	ldrb	r1, [r4, #0]
 8028bc2:	003a      	movs	r2, r7
 8028bc4:	0030      	movs	r0, r6
 8028bc6:	f7ff ffdd 	bl	8028b84 <__sfputc_r>
 8028bca:	3401      	adds	r4, #1
 8028bcc:	1c43      	adds	r3, r0, #1
 8028bce:	d1f3      	bne.n	8028bb8 <__sfputs_r+0xa>
 8028bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028bd4 <_vfiprintf_r>:
 8028bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028bd6:	b0a1      	sub	sp, #132	@ 0x84
 8028bd8:	000f      	movs	r7, r1
 8028bda:	0015      	movs	r5, r2
 8028bdc:	001e      	movs	r6, r3
 8028bde:	9003      	str	r0, [sp, #12]
 8028be0:	2800      	cmp	r0, #0
 8028be2:	d004      	beq.n	8028bee <_vfiprintf_r+0x1a>
 8028be4:	6a03      	ldr	r3, [r0, #32]
 8028be6:	2b00      	cmp	r3, #0
 8028be8:	d101      	bne.n	8028bee <_vfiprintf_r+0x1a>
 8028bea:	f7fd fbdd 	bl	80263a8 <__sinit>
 8028bee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028bf0:	07db      	lsls	r3, r3, #31
 8028bf2:	d405      	bmi.n	8028c00 <_vfiprintf_r+0x2c>
 8028bf4:	89bb      	ldrh	r3, [r7, #12]
 8028bf6:	059b      	lsls	r3, r3, #22
 8028bf8:	d402      	bmi.n	8028c00 <_vfiprintf_r+0x2c>
 8028bfa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028bfc:	f7fd fe8f 	bl	802691e <__retarget_lock_acquire_recursive>
 8028c00:	89bb      	ldrh	r3, [r7, #12]
 8028c02:	071b      	lsls	r3, r3, #28
 8028c04:	d502      	bpl.n	8028c0c <_vfiprintf_r+0x38>
 8028c06:	693b      	ldr	r3, [r7, #16]
 8028c08:	2b00      	cmp	r3, #0
 8028c0a:	d113      	bne.n	8028c34 <_vfiprintf_r+0x60>
 8028c0c:	0039      	movs	r1, r7
 8028c0e:	9803      	ldr	r0, [sp, #12]
 8028c10:	f7fd fd58 	bl	80266c4 <__swsetup_r>
 8028c14:	2800      	cmp	r0, #0
 8028c16:	d00d      	beq.n	8028c34 <_vfiprintf_r+0x60>
 8028c18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028c1a:	07db      	lsls	r3, r3, #31
 8028c1c:	d503      	bpl.n	8028c26 <_vfiprintf_r+0x52>
 8028c1e:	2001      	movs	r0, #1
 8028c20:	4240      	negs	r0, r0
 8028c22:	b021      	add	sp, #132	@ 0x84
 8028c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028c26:	89bb      	ldrh	r3, [r7, #12]
 8028c28:	059b      	lsls	r3, r3, #22
 8028c2a:	d4f8      	bmi.n	8028c1e <_vfiprintf_r+0x4a>
 8028c2c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028c2e:	f7fd fe77 	bl	8026920 <__retarget_lock_release_recursive>
 8028c32:	e7f4      	b.n	8028c1e <_vfiprintf_r+0x4a>
 8028c34:	2300      	movs	r3, #0
 8028c36:	ac08      	add	r4, sp, #32
 8028c38:	6163      	str	r3, [r4, #20]
 8028c3a:	3320      	adds	r3, #32
 8028c3c:	7663      	strb	r3, [r4, #25]
 8028c3e:	3310      	adds	r3, #16
 8028c40:	76a3      	strb	r3, [r4, #26]
 8028c42:	9607      	str	r6, [sp, #28]
 8028c44:	002e      	movs	r6, r5
 8028c46:	7833      	ldrb	r3, [r6, #0]
 8028c48:	2b00      	cmp	r3, #0
 8028c4a:	d001      	beq.n	8028c50 <_vfiprintf_r+0x7c>
 8028c4c:	2b25      	cmp	r3, #37	@ 0x25
 8028c4e:	d148      	bne.n	8028ce2 <_vfiprintf_r+0x10e>
 8028c50:	1b73      	subs	r3, r6, r5
 8028c52:	9305      	str	r3, [sp, #20]
 8028c54:	42ae      	cmp	r6, r5
 8028c56:	d00b      	beq.n	8028c70 <_vfiprintf_r+0x9c>
 8028c58:	002a      	movs	r2, r5
 8028c5a:	0039      	movs	r1, r7
 8028c5c:	9803      	ldr	r0, [sp, #12]
 8028c5e:	f7ff ffa6 	bl	8028bae <__sfputs_r>
 8028c62:	3001      	adds	r0, #1
 8028c64:	d100      	bne.n	8028c68 <_vfiprintf_r+0x94>
 8028c66:	e0ae      	b.n	8028dc6 <_vfiprintf_r+0x1f2>
 8028c68:	6963      	ldr	r3, [r4, #20]
 8028c6a:	9a05      	ldr	r2, [sp, #20]
 8028c6c:	189b      	adds	r3, r3, r2
 8028c6e:	6163      	str	r3, [r4, #20]
 8028c70:	7833      	ldrb	r3, [r6, #0]
 8028c72:	2b00      	cmp	r3, #0
 8028c74:	d100      	bne.n	8028c78 <_vfiprintf_r+0xa4>
 8028c76:	e0a6      	b.n	8028dc6 <_vfiprintf_r+0x1f2>
 8028c78:	2201      	movs	r2, #1
 8028c7a:	2300      	movs	r3, #0
 8028c7c:	4252      	negs	r2, r2
 8028c7e:	6062      	str	r2, [r4, #4]
 8028c80:	a904      	add	r1, sp, #16
 8028c82:	3254      	adds	r2, #84	@ 0x54
 8028c84:	1852      	adds	r2, r2, r1
 8028c86:	1c75      	adds	r5, r6, #1
 8028c88:	6023      	str	r3, [r4, #0]
 8028c8a:	60e3      	str	r3, [r4, #12]
 8028c8c:	60a3      	str	r3, [r4, #8]
 8028c8e:	7013      	strb	r3, [r2, #0]
 8028c90:	65a3      	str	r3, [r4, #88]	@ 0x58
 8028c92:	4b59      	ldr	r3, [pc, #356]	@ (8028df8 <_vfiprintf_r+0x224>)
 8028c94:	2205      	movs	r2, #5
 8028c96:	0018      	movs	r0, r3
 8028c98:	7829      	ldrb	r1, [r5, #0]
 8028c9a:	9305      	str	r3, [sp, #20]
 8028c9c:	f7fd fe41 	bl	8026922 <memchr>
 8028ca0:	1c6e      	adds	r6, r5, #1
 8028ca2:	2800      	cmp	r0, #0
 8028ca4:	d11f      	bne.n	8028ce6 <_vfiprintf_r+0x112>
 8028ca6:	6822      	ldr	r2, [r4, #0]
 8028ca8:	06d3      	lsls	r3, r2, #27
 8028caa:	d504      	bpl.n	8028cb6 <_vfiprintf_r+0xe2>
 8028cac:	2353      	movs	r3, #83	@ 0x53
 8028cae:	a904      	add	r1, sp, #16
 8028cb0:	185b      	adds	r3, r3, r1
 8028cb2:	2120      	movs	r1, #32
 8028cb4:	7019      	strb	r1, [r3, #0]
 8028cb6:	0713      	lsls	r3, r2, #28
 8028cb8:	d504      	bpl.n	8028cc4 <_vfiprintf_r+0xf0>
 8028cba:	2353      	movs	r3, #83	@ 0x53
 8028cbc:	a904      	add	r1, sp, #16
 8028cbe:	185b      	adds	r3, r3, r1
 8028cc0:	212b      	movs	r1, #43	@ 0x2b
 8028cc2:	7019      	strb	r1, [r3, #0]
 8028cc4:	782b      	ldrb	r3, [r5, #0]
 8028cc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8028cc8:	d016      	beq.n	8028cf8 <_vfiprintf_r+0x124>
 8028cca:	002e      	movs	r6, r5
 8028ccc:	2100      	movs	r1, #0
 8028cce:	200a      	movs	r0, #10
 8028cd0:	68e3      	ldr	r3, [r4, #12]
 8028cd2:	7832      	ldrb	r2, [r6, #0]
 8028cd4:	1c75      	adds	r5, r6, #1
 8028cd6:	3a30      	subs	r2, #48	@ 0x30
 8028cd8:	2a09      	cmp	r2, #9
 8028cda:	d950      	bls.n	8028d7e <_vfiprintf_r+0x1aa>
 8028cdc:	2900      	cmp	r1, #0
 8028cde:	d111      	bne.n	8028d04 <_vfiprintf_r+0x130>
 8028ce0:	e017      	b.n	8028d12 <_vfiprintf_r+0x13e>
 8028ce2:	3601      	adds	r6, #1
 8028ce4:	e7af      	b.n	8028c46 <_vfiprintf_r+0x72>
 8028ce6:	9b05      	ldr	r3, [sp, #20]
 8028ce8:	6822      	ldr	r2, [r4, #0]
 8028cea:	1ac0      	subs	r0, r0, r3
 8028cec:	2301      	movs	r3, #1
 8028cee:	4083      	lsls	r3, r0
 8028cf0:	4313      	orrs	r3, r2
 8028cf2:	0035      	movs	r5, r6
 8028cf4:	6023      	str	r3, [r4, #0]
 8028cf6:	e7cc      	b.n	8028c92 <_vfiprintf_r+0xbe>
 8028cf8:	9b07      	ldr	r3, [sp, #28]
 8028cfa:	1d19      	adds	r1, r3, #4
 8028cfc:	681b      	ldr	r3, [r3, #0]
 8028cfe:	9107      	str	r1, [sp, #28]
 8028d00:	2b00      	cmp	r3, #0
 8028d02:	db01      	blt.n	8028d08 <_vfiprintf_r+0x134>
 8028d04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028d06:	e004      	b.n	8028d12 <_vfiprintf_r+0x13e>
 8028d08:	425b      	negs	r3, r3
 8028d0a:	60e3      	str	r3, [r4, #12]
 8028d0c:	2302      	movs	r3, #2
 8028d0e:	4313      	orrs	r3, r2
 8028d10:	6023      	str	r3, [r4, #0]
 8028d12:	7833      	ldrb	r3, [r6, #0]
 8028d14:	2b2e      	cmp	r3, #46	@ 0x2e
 8028d16:	d10c      	bne.n	8028d32 <_vfiprintf_r+0x15e>
 8028d18:	7873      	ldrb	r3, [r6, #1]
 8028d1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8028d1c:	d134      	bne.n	8028d88 <_vfiprintf_r+0x1b4>
 8028d1e:	9b07      	ldr	r3, [sp, #28]
 8028d20:	3602      	adds	r6, #2
 8028d22:	1d1a      	adds	r2, r3, #4
 8028d24:	681b      	ldr	r3, [r3, #0]
 8028d26:	9207      	str	r2, [sp, #28]
 8028d28:	2b00      	cmp	r3, #0
 8028d2a:	da01      	bge.n	8028d30 <_vfiprintf_r+0x15c>
 8028d2c:	2301      	movs	r3, #1
 8028d2e:	425b      	negs	r3, r3
 8028d30:	9309      	str	r3, [sp, #36]	@ 0x24
 8028d32:	4d32      	ldr	r5, [pc, #200]	@ (8028dfc <_vfiprintf_r+0x228>)
 8028d34:	2203      	movs	r2, #3
 8028d36:	0028      	movs	r0, r5
 8028d38:	7831      	ldrb	r1, [r6, #0]
 8028d3a:	f7fd fdf2 	bl	8026922 <memchr>
 8028d3e:	2800      	cmp	r0, #0
 8028d40:	d006      	beq.n	8028d50 <_vfiprintf_r+0x17c>
 8028d42:	2340      	movs	r3, #64	@ 0x40
 8028d44:	1b40      	subs	r0, r0, r5
 8028d46:	4083      	lsls	r3, r0
 8028d48:	6822      	ldr	r2, [r4, #0]
 8028d4a:	3601      	adds	r6, #1
 8028d4c:	4313      	orrs	r3, r2
 8028d4e:	6023      	str	r3, [r4, #0]
 8028d50:	7831      	ldrb	r1, [r6, #0]
 8028d52:	2206      	movs	r2, #6
 8028d54:	482a      	ldr	r0, [pc, #168]	@ (8028e00 <_vfiprintf_r+0x22c>)
 8028d56:	1c75      	adds	r5, r6, #1
 8028d58:	7621      	strb	r1, [r4, #24]
 8028d5a:	f7fd fde2 	bl	8026922 <memchr>
 8028d5e:	2800      	cmp	r0, #0
 8028d60:	d040      	beq.n	8028de4 <_vfiprintf_r+0x210>
 8028d62:	4b28      	ldr	r3, [pc, #160]	@ (8028e04 <_vfiprintf_r+0x230>)
 8028d64:	2b00      	cmp	r3, #0
 8028d66:	d122      	bne.n	8028dae <_vfiprintf_r+0x1da>
 8028d68:	2207      	movs	r2, #7
 8028d6a:	9b07      	ldr	r3, [sp, #28]
 8028d6c:	3307      	adds	r3, #7
 8028d6e:	4393      	bics	r3, r2
 8028d70:	3308      	adds	r3, #8
 8028d72:	9307      	str	r3, [sp, #28]
 8028d74:	6963      	ldr	r3, [r4, #20]
 8028d76:	9a04      	ldr	r2, [sp, #16]
 8028d78:	189b      	adds	r3, r3, r2
 8028d7a:	6163      	str	r3, [r4, #20]
 8028d7c:	e762      	b.n	8028c44 <_vfiprintf_r+0x70>
 8028d7e:	4343      	muls	r3, r0
 8028d80:	002e      	movs	r6, r5
 8028d82:	2101      	movs	r1, #1
 8028d84:	189b      	adds	r3, r3, r2
 8028d86:	e7a4      	b.n	8028cd2 <_vfiprintf_r+0xfe>
 8028d88:	2300      	movs	r3, #0
 8028d8a:	200a      	movs	r0, #10
 8028d8c:	0019      	movs	r1, r3
 8028d8e:	3601      	adds	r6, #1
 8028d90:	6063      	str	r3, [r4, #4]
 8028d92:	7832      	ldrb	r2, [r6, #0]
 8028d94:	1c75      	adds	r5, r6, #1
 8028d96:	3a30      	subs	r2, #48	@ 0x30
 8028d98:	2a09      	cmp	r2, #9
 8028d9a:	d903      	bls.n	8028da4 <_vfiprintf_r+0x1d0>
 8028d9c:	2b00      	cmp	r3, #0
 8028d9e:	d0c8      	beq.n	8028d32 <_vfiprintf_r+0x15e>
 8028da0:	9109      	str	r1, [sp, #36]	@ 0x24
 8028da2:	e7c6      	b.n	8028d32 <_vfiprintf_r+0x15e>
 8028da4:	4341      	muls	r1, r0
 8028da6:	002e      	movs	r6, r5
 8028da8:	2301      	movs	r3, #1
 8028daa:	1889      	adds	r1, r1, r2
 8028dac:	e7f1      	b.n	8028d92 <_vfiprintf_r+0x1be>
 8028dae:	aa07      	add	r2, sp, #28
 8028db0:	9200      	str	r2, [sp, #0]
 8028db2:	0021      	movs	r1, r4
 8028db4:	003a      	movs	r2, r7
 8028db6:	4b14      	ldr	r3, [pc, #80]	@ (8028e08 <_vfiprintf_r+0x234>)
 8028db8:	9803      	ldr	r0, [sp, #12]
 8028dba:	f7fc feab 	bl	8025b14 <_printf_float>
 8028dbe:	9004      	str	r0, [sp, #16]
 8028dc0:	9b04      	ldr	r3, [sp, #16]
 8028dc2:	3301      	adds	r3, #1
 8028dc4:	d1d6      	bne.n	8028d74 <_vfiprintf_r+0x1a0>
 8028dc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028dc8:	07db      	lsls	r3, r3, #31
 8028dca:	d405      	bmi.n	8028dd8 <_vfiprintf_r+0x204>
 8028dcc:	89bb      	ldrh	r3, [r7, #12]
 8028dce:	059b      	lsls	r3, r3, #22
 8028dd0:	d402      	bmi.n	8028dd8 <_vfiprintf_r+0x204>
 8028dd2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028dd4:	f7fd fda4 	bl	8026920 <__retarget_lock_release_recursive>
 8028dd8:	89bb      	ldrh	r3, [r7, #12]
 8028dda:	065b      	lsls	r3, r3, #25
 8028ddc:	d500      	bpl.n	8028de0 <_vfiprintf_r+0x20c>
 8028dde:	e71e      	b.n	8028c1e <_vfiprintf_r+0x4a>
 8028de0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028de2:	e71e      	b.n	8028c22 <_vfiprintf_r+0x4e>
 8028de4:	aa07      	add	r2, sp, #28
 8028de6:	9200      	str	r2, [sp, #0]
 8028de8:	0021      	movs	r1, r4
 8028dea:	003a      	movs	r2, r7
 8028dec:	4b06      	ldr	r3, [pc, #24]	@ (8028e08 <_vfiprintf_r+0x234>)
 8028dee:	9803      	ldr	r0, [sp, #12]
 8028df0:	f7fd f93e 	bl	8026070 <_printf_i>
 8028df4:	e7e3      	b.n	8028dbe <_vfiprintf_r+0x1ea>
 8028df6:	46c0      	nop			@ (mov r8, r8)
 8028df8:	0802ef8c 	.word	0x0802ef8c
 8028dfc:	0802ef92 	.word	0x0802ef92
 8028e00:	0802ef96 	.word	0x0802ef96
 8028e04:	08025b15 	.word	0x08025b15
 8028e08:	08028baf 	.word	0x08028baf

08028e0c <__sflush_r>:
 8028e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028e0e:	220c      	movs	r2, #12
 8028e10:	5e8b      	ldrsh	r3, [r1, r2]
 8028e12:	0005      	movs	r5, r0
 8028e14:	000c      	movs	r4, r1
 8028e16:	071a      	lsls	r2, r3, #28
 8028e18:	d456      	bmi.n	8028ec8 <__sflush_r+0xbc>
 8028e1a:	684a      	ldr	r2, [r1, #4]
 8028e1c:	2a00      	cmp	r2, #0
 8028e1e:	dc02      	bgt.n	8028e26 <__sflush_r+0x1a>
 8028e20:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8028e22:	2a00      	cmp	r2, #0
 8028e24:	dd4e      	ble.n	8028ec4 <__sflush_r+0xb8>
 8028e26:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028e28:	2f00      	cmp	r7, #0
 8028e2a:	d04b      	beq.n	8028ec4 <__sflush_r+0xb8>
 8028e2c:	2200      	movs	r2, #0
 8028e2e:	2080      	movs	r0, #128	@ 0x80
 8028e30:	682e      	ldr	r6, [r5, #0]
 8028e32:	602a      	str	r2, [r5, #0]
 8028e34:	001a      	movs	r2, r3
 8028e36:	0140      	lsls	r0, r0, #5
 8028e38:	6a21      	ldr	r1, [r4, #32]
 8028e3a:	4002      	ands	r2, r0
 8028e3c:	4203      	tst	r3, r0
 8028e3e:	d033      	beq.n	8028ea8 <__sflush_r+0x9c>
 8028e40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8028e42:	89a3      	ldrh	r3, [r4, #12]
 8028e44:	075b      	lsls	r3, r3, #29
 8028e46:	d506      	bpl.n	8028e56 <__sflush_r+0x4a>
 8028e48:	6863      	ldr	r3, [r4, #4]
 8028e4a:	1ad2      	subs	r2, r2, r3
 8028e4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8028e4e:	2b00      	cmp	r3, #0
 8028e50:	d001      	beq.n	8028e56 <__sflush_r+0x4a>
 8028e52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8028e54:	1ad2      	subs	r2, r2, r3
 8028e56:	2300      	movs	r3, #0
 8028e58:	0028      	movs	r0, r5
 8028e5a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028e5c:	6a21      	ldr	r1, [r4, #32]
 8028e5e:	47b8      	blx	r7
 8028e60:	89a2      	ldrh	r2, [r4, #12]
 8028e62:	1c43      	adds	r3, r0, #1
 8028e64:	d106      	bne.n	8028e74 <__sflush_r+0x68>
 8028e66:	6829      	ldr	r1, [r5, #0]
 8028e68:	291d      	cmp	r1, #29
 8028e6a:	d846      	bhi.n	8028efa <__sflush_r+0xee>
 8028e6c:	4b29      	ldr	r3, [pc, #164]	@ (8028f14 <__sflush_r+0x108>)
 8028e6e:	40cb      	lsrs	r3, r1
 8028e70:	07db      	lsls	r3, r3, #31
 8028e72:	d542      	bpl.n	8028efa <__sflush_r+0xee>
 8028e74:	2300      	movs	r3, #0
 8028e76:	6063      	str	r3, [r4, #4]
 8028e78:	6923      	ldr	r3, [r4, #16]
 8028e7a:	6023      	str	r3, [r4, #0]
 8028e7c:	04d2      	lsls	r2, r2, #19
 8028e7e:	d505      	bpl.n	8028e8c <__sflush_r+0x80>
 8028e80:	1c43      	adds	r3, r0, #1
 8028e82:	d102      	bne.n	8028e8a <__sflush_r+0x7e>
 8028e84:	682b      	ldr	r3, [r5, #0]
 8028e86:	2b00      	cmp	r3, #0
 8028e88:	d100      	bne.n	8028e8c <__sflush_r+0x80>
 8028e8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8028e8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028e8e:	602e      	str	r6, [r5, #0]
 8028e90:	2900      	cmp	r1, #0
 8028e92:	d017      	beq.n	8028ec4 <__sflush_r+0xb8>
 8028e94:	0023      	movs	r3, r4
 8028e96:	3344      	adds	r3, #68	@ 0x44
 8028e98:	4299      	cmp	r1, r3
 8028e9a:	d002      	beq.n	8028ea2 <__sflush_r+0x96>
 8028e9c:	0028      	movs	r0, r5
 8028e9e:	f7fe fbd1 	bl	8027644 <_free_r>
 8028ea2:	2300      	movs	r3, #0
 8028ea4:	6363      	str	r3, [r4, #52]	@ 0x34
 8028ea6:	e00d      	b.n	8028ec4 <__sflush_r+0xb8>
 8028ea8:	2301      	movs	r3, #1
 8028eaa:	0028      	movs	r0, r5
 8028eac:	47b8      	blx	r7
 8028eae:	0002      	movs	r2, r0
 8028eb0:	1c43      	adds	r3, r0, #1
 8028eb2:	d1c6      	bne.n	8028e42 <__sflush_r+0x36>
 8028eb4:	682b      	ldr	r3, [r5, #0]
 8028eb6:	2b00      	cmp	r3, #0
 8028eb8:	d0c3      	beq.n	8028e42 <__sflush_r+0x36>
 8028eba:	2b1d      	cmp	r3, #29
 8028ebc:	d001      	beq.n	8028ec2 <__sflush_r+0xb6>
 8028ebe:	2b16      	cmp	r3, #22
 8028ec0:	d11a      	bne.n	8028ef8 <__sflush_r+0xec>
 8028ec2:	602e      	str	r6, [r5, #0]
 8028ec4:	2000      	movs	r0, #0
 8028ec6:	e01e      	b.n	8028f06 <__sflush_r+0xfa>
 8028ec8:	690e      	ldr	r6, [r1, #16]
 8028eca:	2e00      	cmp	r6, #0
 8028ecc:	d0fa      	beq.n	8028ec4 <__sflush_r+0xb8>
 8028ece:	680f      	ldr	r7, [r1, #0]
 8028ed0:	600e      	str	r6, [r1, #0]
 8028ed2:	1bba      	subs	r2, r7, r6
 8028ed4:	9201      	str	r2, [sp, #4]
 8028ed6:	2200      	movs	r2, #0
 8028ed8:	079b      	lsls	r3, r3, #30
 8028eda:	d100      	bne.n	8028ede <__sflush_r+0xd2>
 8028edc:	694a      	ldr	r2, [r1, #20]
 8028ede:	60a2      	str	r2, [r4, #8]
 8028ee0:	9b01      	ldr	r3, [sp, #4]
 8028ee2:	2b00      	cmp	r3, #0
 8028ee4:	ddee      	ble.n	8028ec4 <__sflush_r+0xb8>
 8028ee6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028ee8:	0032      	movs	r2, r6
 8028eea:	001f      	movs	r7, r3
 8028eec:	0028      	movs	r0, r5
 8028eee:	9b01      	ldr	r3, [sp, #4]
 8028ef0:	6a21      	ldr	r1, [r4, #32]
 8028ef2:	47b8      	blx	r7
 8028ef4:	2800      	cmp	r0, #0
 8028ef6:	dc07      	bgt.n	8028f08 <__sflush_r+0xfc>
 8028ef8:	89a2      	ldrh	r2, [r4, #12]
 8028efa:	2340      	movs	r3, #64	@ 0x40
 8028efc:	2001      	movs	r0, #1
 8028efe:	4313      	orrs	r3, r2
 8028f00:	b21b      	sxth	r3, r3
 8028f02:	81a3      	strh	r3, [r4, #12]
 8028f04:	4240      	negs	r0, r0
 8028f06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028f08:	9b01      	ldr	r3, [sp, #4]
 8028f0a:	1836      	adds	r6, r6, r0
 8028f0c:	1a1b      	subs	r3, r3, r0
 8028f0e:	9301      	str	r3, [sp, #4]
 8028f10:	e7e6      	b.n	8028ee0 <__sflush_r+0xd4>
 8028f12:	46c0      	nop			@ (mov r8, r8)
 8028f14:	20400001 	.word	0x20400001

08028f18 <_fflush_r>:
 8028f18:	690b      	ldr	r3, [r1, #16]
 8028f1a:	b570      	push	{r4, r5, r6, lr}
 8028f1c:	0005      	movs	r5, r0
 8028f1e:	000c      	movs	r4, r1
 8028f20:	2b00      	cmp	r3, #0
 8028f22:	d102      	bne.n	8028f2a <_fflush_r+0x12>
 8028f24:	2500      	movs	r5, #0
 8028f26:	0028      	movs	r0, r5
 8028f28:	bd70      	pop	{r4, r5, r6, pc}
 8028f2a:	2800      	cmp	r0, #0
 8028f2c:	d004      	beq.n	8028f38 <_fflush_r+0x20>
 8028f2e:	6a03      	ldr	r3, [r0, #32]
 8028f30:	2b00      	cmp	r3, #0
 8028f32:	d101      	bne.n	8028f38 <_fflush_r+0x20>
 8028f34:	f7fd fa38 	bl	80263a8 <__sinit>
 8028f38:	220c      	movs	r2, #12
 8028f3a:	5ea3      	ldrsh	r3, [r4, r2]
 8028f3c:	2b00      	cmp	r3, #0
 8028f3e:	d0f1      	beq.n	8028f24 <_fflush_r+0xc>
 8028f40:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8028f42:	07d2      	lsls	r2, r2, #31
 8028f44:	d404      	bmi.n	8028f50 <_fflush_r+0x38>
 8028f46:	059b      	lsls	r3, r3, #22
 8028f48:	d402      	bmi.n	8028f50 <_fflush_r+0x38>
 8028f4a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028f4c:	f7fd fce7 	bl	802691e <__retarget_lock_acquire_recursive>
 8028f50:	0028      	movs	r0, r5
 8028f52:	0021      	movs	r1, r4
 8028f54:	f7ff ff5a 	bl	8028e0c <__sflush_r>
 8028f58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028f5a:	0005      	movs	r5, r0
 8028f5c:	07db      	lsls	r3, r3, #31
 8028f5e:	d4e2      	bmi.n	8028f26 <_fflush_r+0xe>
 8028f60:	89a3      	ldrh	r3, [r4, #12]
 8028f62:	059b      	lsls	r3, r3, #22
 8028f64:	d4df      	bmi.n	8028f26 <_fflush_r+0xe>
 8028f66:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028f68:	f7fd fcda 	bl	8026920 <__retarget_lock_release_recursive>
 8028f6c:	e7db      	b.n	8028f26 <_fflush_r+0xe>
	...

08028f70 <__swhatbuf_r>:
 8028f70:	b570      	push	{r4, r5, r6, lr}
 8028f72:	000e      	movs	r6, r1
 8028f74:	001d      	movs	r5, r3
 8028f76:	230e      	movs	r3, #14
 8028f78:	5ec9      	ldrsh	r1, [r1, r3]
 8028f7a:	0014      	movs	r4, r2
 8028f7c:	b096      	sub	sp, #88	@ 0x58
 8028f7e:	2900      	cmp	r1, #0
 8028f80:	da0c      	bge.n	8028f9c <__swhatbuf_r+0x2c>
 8028f82:	89b2      	ldrh	r2, [r6, #12]
 8028f84:	2380      	movs	r3, #128	@ 0x80
 8028f86:	0011      	movs	r1, r2
 8028f88:	4019      	ands	r1, r3
 8028f8a:	421a      	tst	r2, r3
 8028f8c:	d114      	bne.n	8028fb8 <__swhatbuf_r+0x48>
 8028f8e:	2380      	movs	r3, #128	@ 0x80
 8028f90:	00db      	lsls	r3, r3, #3
 8028f92:	2000      	movs	r0, #0
 8028f94:	6029      	str	r1, [r5, #0]
 8028f96:	6023      	str	r3, [r4, #0]
 8028f98:	b016      	add	sp, #88	@ 0x58
 8028f9a:	bd70      	pop	{r4, r5, r6, pc}
 8028f9c:	466a      	mov	r2, sp
 8028f9e:	f000 f865 	bl	802906c <_fstat_r>
 8028fa2:	2800      	cmp	r0, #0
 8028fa4:	dbed      	blt.n	8028f82 <__swhatbuf_r+0x12>
 8028fa6:	23f0      	movs	r3, #240	@ 0xf0
 8028fa8:	9901      	ldr	r1, [sp, #4]
 8028faa:	021b      	lsls	r3, r3, #8
 8028fac:	4019      	ands	r1, r3
 8028fae:	4b04      	ldr	r3, [pc, #16]	@ (8028fc0 <__swhatbuf_r+0x50>)
 8028fb0:	18c9      	adds	r1, r1, r3
 8028fb2:	424b      	negs	r3, r1
 8028fb4:	4159      	adcs	r1, r3
 8028fb6:	e7ea      	b.n	8028f8e <__swhatbuf_r+0x1e>
 8028fb8:	2100      	movs	r1, #0
 8028fba:	2340      	movs	r3, #64	@ 0x40
 8028fbc:	e7e9      	b.n	8028f92 <__swhatbuf_r+0x22>
 8028fbe:	46c0      	nop			@ (mov r8, r8)
 8028fc0:	ffffe000 	.word	0xffffe000

08028fc4 <__smakebuf_r>:
 8028fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028fc6:	2602      	movs	r6, #2
 8028fc8:	898b      	ldrh	r3, [r1, #12]
 8028fca:	0005      	movs	r5, r0
 8028fcc:	000c      	movs	r4, r1
 8028fce:	b085      	sub	sp, #20
 8028fd0:	4233      	tst	r3, r6
 8028fd2:	d007      	beq.n	8028fe4 <__smakebuf_r+0x20>
 8028fd4:	0023      	movs	r3, r4
 8028fd6:	3347      	adds	r3, #71	@ 0x47
 8028fd8:	6023      	str	r3, [r4, #0]
 8028fda:	6123      	str	r3, [r4, #16]
 8028fdc:	2301      	movs	r3, #1
 8028fde:	6163      	str	r3, [r4, #20]
 8028fe0:	b005      	add	sp, #20
 8028fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028fe4:	ab03      	add	r3, sp, #12
 8028fe6:	aa02      	add	r2, sp, #8
 8028fe8:	f7ff ffc2 	bl	8028f70 <__swhatbuf_r>
 8028fec:	9f02      	ldr	r7, [sp, #8]
 8028fee:	9001      	str	r0, [sp, #4]
 8028ff0:	0039      	movs	r1, r7
 8028ff2:	0028      	movs	r0, r5
 8028ff4:	f7fe fef6 	bl	8027de4 <_malloc_r>
 8028ff8:	2800      	cmp	r0, #0
 8028ffa:	d108      	bne.n	802900e <__smakebuf_r+0x4a>
 8028ffc:	220c      	movs	r2, #12
 8028ffe:	5ea3      	ldrsh	r3, [r4, r2]
 8029000:	059a      	lsls	r2, r3, #22
 8029002:	d4ed      	bmi.n	8028fe0 <__smakebuf_r+0x1c>
 8029004:	2203      	movs	r2, #3
 8029006:	4393      	bics	r3, r2
 8029008:	431e      	orrs	r6, r3
 802900a:	81a6      	strh	r6, [r4, #12]
 802900c:	e7e2      	b.n	8028fd4 <__smakebuf_r+0x10>
 802900e:	2380      	movs	r3, #128	@ 0x80
 8029010:	89a2      	ldrh	r2, [r4, #12]
 8029012:	6020      	str	r0, [r4, #0]
 8029014:	4313      	orrs	r3, r2
 8029016:	81a3      	strh	r3, [r4, #12]
 8029018:	9b03      	ldr	r3, [sp, #12]
 802901a:	6120      	str	r0, [r4, #16]
 802901c:	6167      	str	r7, [r4, #20]
 802901e:	2b00      	cmp	r3, #0
 8029020:	d00c      	beq.n	802903c <__smakebuf_r+0x78>
 8029022:	0028      	movs	r0, r5
 8029024:	230e      	movs	r3, #14
 8029026:	5ee1      	ldrsh	r1, [r4, r3]
 8029028:	f000 f832 	bl	8029090 <_isatty_r>
 802902c:	2800      	cmp	r0, #0
 802902e:	d005      	beq.n	802903c <__smakebuf_r+0x78>
 8029030:	2303      	movs	r3, #3
 8029032:	89a2      	ldrh	r2, [r4, #12]
 8029034:	439a      	bics	r2, r3
 8029036:	3b02      	subs	r3, #2
 8029038:	4313      	orrs	r3, r2
 802903a:	81a3      	strh	r3, [r4, #12]
 802903c:	89a3      	ldrh	r3, [r4, #12]
 802903e:	9a01      	ldr	r2, [sp, #4]
 8029040:	4313      	orrs	r3, r2
 8029042:	81a3      	strh	r3, [r4, #12]
 8029044:	e7cc      	b.n	8028fe0 <__smakebuf_r+0x1c>

08029046 <memmove>:
 8029046:	b510      	push	{r4, lr}
 8029048:	4288      	cmp	r0, r1
 802904a:	d902      	bls.n	8029052 <memmove+0xc>
 802904c:	188b      	adds	r3, r1, r2
 802904e:	4298      	cmp	r0, r3
 8029050:	d308      	bcc.n	8029064 <memmove+0x1e>
 8029052:	2300      	movs	r3, #0
 8029054:	429a      	cmp	r2, r3
 8029056:	d007      	beq.n	8029068 <memmove+0x22>
 8029058:	5ccc      	ldrb	r4, [r1, r3]
 802905a:	54c4      	strb	r4, [r0, r3]
 802905c:	3301      	adds	r3, #1
 802905e:	e7f9      	b.n	8029054 <memmove+0xe>
 8029060:	5c8b      	ldrb	r3, [r1, r2]
 8029062:	5483      	strb	r3, [r0, r2]
 8029064:	3a01      	subs	r2, #1
 8029066:	d2fb      	bcs.n	8029060 <memmove+0x1a>
 8029068:	bd10      	pop	{r4, pc}
	...

0802906c <_fstat_r>:
 802906c:	2300      	movs	r3, #0
 802906e:	b570      	push	{r4, r5, r6, lr}
 8029070:	4d06      	ldr	r5, [pc, #24]	@ (802908c <_fstat_r+0x20>)
 8029072:	0004      	movs	r4, r0
 8029074:	0008      	movs	r0, r1
 8029076:	0011      	movs	r1, r2
 8029078:	602b      	str	r3, [r5, #0]
 802907a:	f7ea faa5 	bl	80135c8 <_fstat>
 802907e:	1c43      	adds	r3, r0, #1
 8029080:	d103      	bne.n	802908a <_fstat_r+0x1e>
 8029082:	682b      	ldr	r3, [r5, #0]
 8029084:	2b00      	cmp	r3, #0
 8029086:	d000      	beq.n	802908a <_fstat_r+0x1e>
 8029088:	6023      	str	r3, [r4, #0]
 802908a:	bd70      	pop	{r4, r5, r6, pc}
 802908c:	20003908 	.word	0x20003908

08029090 <_isatty_r>:
 8029090:	2300      	movs	r3, #0
 8029092:	b570      	push	{r4, r5, r6, lr}
 8029094:	4d06      	ldr	r5, [pc, #24]	@ (80290b0 <_isatty_r+0x20>)
 8029096:	0004      	movs	r4, r0
 8029098:	0008      	movs	r0, r1
 802909a:	602b      	str	r3, [r5, #0]
 802909c:	f7ea faa2 	bl	80135e4 <_isatty>
 80290a0:	1c43      	adds	r3, r0, #1
 80290a2:	d103      	bne.n	80290ac <_isatty_r+0x1c>
 80290a4:	682b      	ldr	r3, [r5, #0]
 80290a6:	2b00      	cmp	r3, #0
 80290a8:	d000      	beq.n	80290ac <_isatty_r+0x1c>
 80290aa:	6023      	str	r3, [r4, #0]
 80290ac:	bd70      	pop	{r4, r5, r6, pc}
 80290ae:	46c0      	nop			@ (mov r8, r8)
 80290b0:	20003908 	.word	0x20003908

080290b4 <_sbrk_r>:
 80290b4:	2300      	movs	r3, #0
 80290b6:	b570      	push	{r4, r5, r6, lr}
 80290b8:	4d06      	ldr	r5, [pc, #24]	@ (80290d4 <_sbrk_r+0x20>)
 80290ba:	0004      	movs	r4, r0
 80290bc:	0008      	movs	r0, r1
 80290be:	602b      	str	r3, [r5, #0]
 80290c0:	f7ea faa4 	bl	801360c <_sbrk>
 80290c4:	1c43      	adds	r3, r0, #1
 80290c6:	d103      	bne.n	80290d0 <_sbrk_r+0x1c>
 80290c8:	682b      	ldr	r3, [r5, #0]
 80290ca:	2b00      	cmp	r3, #0
 80290cc:	d000      	beq.n	80290d0 <_sbrk_r+0x1c>
 80290ce:	6023      	str	r3, [r4, #0]
 80290d0:	bd70      	pop	{r4, r5, r6, pc}
 80290d2:	46c0      	nop			@ (mov r8, r8)
 80290d4:	20003908 	.word	0x20003908

080290d8 <__assert_func>:
 80290d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80290da:	0014      	movs	r4, r2
 80290dc:	001a      	movs	r2, r3
 80290de:	4b09      	ldr	r3, [pc, #36]	@ (8029104 <__assert_func+0x2c>)
 80290e0:	0005      	movs	r5, r0
 80290e2:	681b      	ldr	r3, [r3, #0]
 80290e4:	000e      	movs	r6, r1
 80290e6:	68d8      	ldr	r0, [r3, #12]
 80290e8:	4b07      	ldr	r3, [pc, #28]	@ (8029108 <__assert_func+0x30>)
 80290ea:	2c00      	cmp	r4, #0
 80290ec:	d101      	bne.n	80290f2 <__assert_func+0x1a>
 80290ee:	4b07      	ldr	r3, [pc, #28]	@ (802910c <__assert_func+0x34>)
 80290f0:	001c      	movs	r4, r3
 80290f2:	4907      	ldr	r1, [pc, #28]	@ (8029110 <__assert_func+0x38>)
 80290f4:	9301      	str	r3, [sp, #4]
 80290f6:	9402      	str	r4, [sp, #8]
 80290f8:	002b      	movs	r3, r5
 80290fa:	9600      	str	r6, [sp, #0]
 80290fc:	f000 f868 	bl	80291d0 <fiprintf>
 8029100:	f000 f876 	bl	80291f0 <abort>
 8029104:	200003ec 	.word	0x200003ec
 8029108:	0802ef9d 	.word	0x0802ef9d
 802910c:	0802efd8 	.word	0x0802efd8
 8029110:	0802efaa 	.word	0x0802efaa

08029114 <_calloc_r>:
 8029114:	b570      	push	{r4, r5, r6, lr}
 8029116:	0c0b      	lsrs	r3, r1, #16
 8029118:	0c15      	lsrs	r5, r2, #16
 802911a:	2b00      	cmp	r3, #0
 802911c:	d11e      	bne.n	802915c <_calloc_r+0x48>
 802911e:	2d00      	cmp	r5, #0
 8029120:	d10c      	bne.n	802913c <_calloc_r+0x28>
 8029122:	b289      	uxth	r1, r1
 8029124:	b294      	uxth	r4, r2
 8029126:	434c      	muls	r4, r1
 8029128:	0021      	movs	r1, r4
 802912a:	f7fe fe5b 	bl	8027de4 <_malloc_r>
 802912e:	1e05      	subs	r5, r0, #0
 8029130:	d01b      	beq.n	802916a <_calloc_r+0x56>
 8029132:	0022      	movs	r2, r4
 8029134:	2100      	movs	r1, #0
 8029136:	f7fd fb23 	bl	8026780 <memset>
 802913a:	e016      	b.n	802916a <_calloc_r+0x56>
 802913c:	1c2b      	adds	r3, r5, #0
 802913e:	1c0c      	adds	r4, r1, #0
 8029140:	b289      	uxth	r1, r1
 8029142:	b292      	uxth	r2, r2
 8029144:	434a      	muls	r2, r1
 8029146:	b29b      	uxth	r3, r3
 8029148:	b2a1      	uxth	r1, r4
 802914a:	4359      	muls	r1, r3
 802914c:	0c14      	lsrs	r4, r2, #16
 802914e:	190c      	adds	r4, r1, r4
 8029150:	0c23      	lsrs	r3, r4, #16
 8029152:	d107      	bne.n	8029164 <_calloc_r+0x50>
 8029154:	0424      	lsls	r4, r4, #16
 8029156:	b292      	uxth	r2, r2
 8029158:	4314      	orrs	r4, r2
 802915a:	e7e5      	b.n	8029128 <_calloc_r+0x14>
 802915c:	2d00      	cmp	r5, #0
 802915e:	d101      	bne.n	8029164 <_calloc_r+0x50>
 8029160:	1c14      	adds	r4, r2, #0
 8029162:	e7ed      	b.n	8029140 <_calloc_r+0x2c>
 8029164:	230c      	movs	r3, #12
 8029166:	2500      	movs	r5, #0
 8029168:	6003      	str	r3, [r0, #0]
 802916a:	0028      	movs	r0, r5
 802916c:	bd70      	pop	{r4, r5, r6, pc}

0802916e <_realloc_r>:
 802916e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029170:	0006      	movs	r6, r0
 8029172:	000c      	movs	r4, r1
 8029174:	0015      	movs	r5, r2
 8029176:	2900      	cmp	r1, #0
 8029178:	d105      	bne.n	8029186 <_realloc_r+0x18>
 802917a:	0011      	movs	r1, r2
 802917c:	f7fe fe32 	bl	8027de4 <_malloc_r>
 8029180:	0004      	movs	r4, r0
 8029182:	0020      	movs	r0, r4
 8029184:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8029186:	2a00      	cmp	r2, #0
 8029188:	d103      	bne.n	8029192 <_realloc_r+0x24>
 802918a:	f7fe fa5b 	bl	8027644 <_free_r>
 802918e:	002c      	movs	r4, r5
 8029190:	e7f7      	b.n	8029182 <_realloc_r+0x14>
 8029192:	f000 f834 	bl	80291fe <_malloc_usable_size_r>
 8029196:	0007      	movs	r7, r0
 8029198:	4285      	cmp	r5, r0
 802919a:	d802      	bhi.n	80291a2 <_realloc_r+0x34>
 802919c:	0843      	lsrs	r3, r0, #1
 802919e:	42ab      	cmp	r3, r5
 80291a0:	d3ef      	bcc.n	8029182 <_realloc_r+0x14>
 80291a2:	0029      	movs	r1, r5
 80291a4:	0030      	movs	r0, r6
 80291a6:	f7fe fe1d 	bl	8027de4 <_malloc_r>
 80291aa:	9001      	str	r0, [sp, #4]
 80291ac:	2800      	cmp	r0, #0
 80291ae:	d101      	bne.n	80291b4 <_realloc_r+0x46>
 80291b0:	9c01      	ldr	r4, [sp, #4]
 80291b2:	e7e6      	b.n	8029182 <_realloc_r+0x14>
 80291b4:	002a      	movs	r2, r5
 80291b6:	42bd      	cmp	r5, r7
 80291b8:	d900      	bls.n	80291bc <_realloc_r+0x4e>
 80291ba:	003a      	movs	r2, r7
 80291bc:	0021      	movs	r1, r4
 80291be:	9801      	ldr	r0, [sp, #4]
 80291c0:	f7fd fbba 	bl	8026938 <memcpy>
 80291c4:	0021      	movs	r1, r4
 80291c6:	0030      	movs	r0, r6
 80291c8:	f7fe fa3c 	bl	8027644 <_free_r>
 80291cc:	e7f0      	b.n	80291b0 <_realloc_r+0x42>
	...

080291d0 <fiprintf>:
 80291d0:	b40e      	push	{r1, r2, r3}
 80291d2:	b517      	push	{r0, r1, r2, r4, lr}
 80291d4:	4c05      	ldr	r4, [pc, #20]	@ (80291ec <fiprintf+0x1c>)
 80291d6:	ab05      	add	r3, sp, #20
 80291d8:	cb04      	ldmia	r3!, {r2}
 80291da:	0001      	movs	r1, r0
 80291dc:	6820      	ldr	r0, [r4, #0]
 80291de:	9301      	str	r3, [sp, #4]
 80291e0:	f7ff fcf8 	bl	8028bd4 <_vfiprintf_r>
 80291e4:	bc1e      	pop	{r1, r2, r3, r4}
 80291e6:	bc08      	pop	{r3}
 80291e8:	b003      	add	sp, #12
 80291ea:	4718      	bx	r3
 80291ec:	200003ec 	.word	0x200003ec

080291f0 <abort>:
 80291f0:	2006      	movs	r0, #6
 80291f2:	b510      	push	{r4, lr}
 80291f4:	f000 f834 	bl	8029260 <raise>
 80291f8:	2001      	movs	r0, #1
 80291fa:	f7ea f9b1 	bl	8013560 <_exit>

080291fe <_malloc_usable_size_r>:
 80291fe:	1f0b      	subs	r3, r1, #4
 8029200:	681b      	ldr	r3, [r3, #0]
 8029202:	1f18      	subs	r0, r3, #4
 8029204:	2b00      	cmp	r3, #0
 8029206:	da01      	bge.n	802920c <_malloc_usable_size_r+0xe>
 8029208:	580b      	ldr	r3, [r1, r0]
 802920a:	18c0      	adds	r0, r0, r3
 802920c:	4770      	bx	lr

0802920e <_raise_r>:
 802920e:	b570      	push	{r4, r5, r6, lr}
 8029210:	0004      	movs	r4, r0
 8029212:	000d      	movs	r5, r1
 8029214:	291f      	cmp	r1, #31
 8029216:	d904      	bls.n	8029222 <_raise_r+0x14>
 8029218:	2316      	movs	r3, #22
 802921a:	6003      	str	r3, [r0, #0]
 802921c:	2001      	movs	r0, #1
 802921e:	4240      	negs	r0, r0
 8029220:	bd70      	pop	{r4, r5, r6, pc}
 8029222:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8029224:	2b00      	cmp	r3, #0
 8029226:	d004      	beq.n	8029232 <_raise_r+0x24>
 8029228:	008a      	lsls	r2, r1, #2
 802922a:	189b      	adds	r3, r3, r2
 802922c:	681a      	ldr	r2, [r3, #0]
 802922e:	2a00      	cmp	r2, #0
 8029230:	d108      	bne.n	8029244 <_raise_r+0x36>
 8029232:	0020      	movs	r0, r4
 8029234:	f000 f830 	bl	8029298 <_getpid_r>
 8029238:	002a      	movs	r2, r5
 802923a:	0001      	movs	r1, r0
 802923c:	0020      	movs	r0, r4
 802923e:	f000 f819 	bl	8029274 <_kill_r>
 8029242:	e7ed      	b.n	8029220 <_raise_r+0x12>
 8029244:	2a01      	cmp	r2, #1
 8029246:	d009      	beq.n	802925c <_raise_r+0x4e>
 8029248:	1c51      	adds	r1, r2, #1
 802924a:	d103      	bne.n	8029254 <_raise_r+0x46>
 802924c:	2316      	movs	r3, #22
 802924e:	6003      	str	r3, [r0, #0]
 8029250:	2001      	movs	r0, #1
 8029252:	e7e5      	b.n	8029220 <_raise_r+0x12>
 8029254:	2100      	movs	r1, #0
 8029256:	0028      	movs	r0, r5
 8029258:	6019      	str	r1, [r3, #0]
 802925a:	4790      	blx	r2
 802925c:	2000      	movs	r0, #0
 802925e:	e7df      	b.n	8029220 <_raise_r+0x12>

08029260 <raise>:
 8029260:	b510      	push	{r4, lr}
 8029262:	4b03      	ldr	r3, [pc, #12]	@ (8029270 <raise+0x10>)
 8029264:	0001      	movs	r1, r0
 8029266:	6818      	ldr	r0, [r3, #0]
 8029268:	f7ff ffd1 	bl	802920e <_raise_r>
 802926c:	bd10      	pop	{r4, pc}
 802926e:	46c0      	nop			@ (mov r8, r8)
 8029270:	200003ec 	.word	0x200003ec

08029274 <_kill_r>:
 8029274:	2300      	movs	r3, #0
 8029276:	b570      	push	{r4, r5, r6, lr}
 8029278:	4d06      	ldr	r5, [pc, #24]	@ (8029294 <_kill_r+0x20>)
 802927a:	0004      	movs	r4, r0
 802927c:	0008      	movs	r0, r1
 802927e:	0011      	movs	r1, r2
 8029280:	602b      	str	r3, [r5, #0]
 8029282:	f7ea f95d 	bl	8013540 <_kill>
 8029286:	1c43      	adds	r3, r0, #1
 8029288:	d103      	bne.n	8029292 <_kill_r+0x1e>
 802928a:	682b      	ldr	r3, [r5, #0]
 802928c:	2b00      	cmp	r3, #0
 802928e:	d000      	beq.n	8029292 <_kill_r+0x1e>
 8029290:	6023      	str	r3, [r4, #0]
 8029292:	bd70      	pop	{r4, r5, r6, pc}
 8029294:	20003908 	.word	0x20003908

08029298 <_getpid_r>:
 8029298:	b510      	push	{r4, lr}
 802929a:	f7ea f94b 	bl	8013534 <_getpid>
 802929e:	bd10      	pop	{r4, pc}

080292a0 <log>:
 80292a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80292a2:	0004      	movs	r4, r0
 80292a4:	000d      	movs	r5, r1
 80292a6:	f000 f98d 	bl	80295c4 <__ieee754_log>
 80292aa:	0022      	movs	r2, r4
 80292ac:	0006      	movs	r6, r0
 80292ae:	000f      	movs	r7, r1
 80292b0:	002b      	movs	r3, r5
 80292b2:	0020      	movs	r0, r4
 80292b4:	0029      	movs	r1, r5
 80292b6:	f7da fa3d 	bl	8003734 <__aeabi_dcmpun>
 80292ba:	2800      	cmp	r0, #0
 80292bc:	d115      	bne.n	80292ea <log+0x4a>
 80292be:	2200      	movs	r2, #0
 80292c0:	2300      	movs	r3, #0
 80292c2:	0020      	movs	r0, r4
 80292c4:	0029      	movs	r1, r5
 80292c6:	f7d7 f90d 	bl	80004e4 <__aeabi_dcmpgt>
 80292ca:	2800      	cmp	r0, #0
 80292cc:	d10d      	bne.n	80292ea <log+0x4a>
 80292ce:	2200      	movs	r2, #0
 80292d0:	2300      	movs	r3, #0
 80292d2:	0020      	movs	r0, r4
 80292d4:	0029      	movs	r1, r5
 80292d6:	f7d7 f8eb 	bl	80004b0 <__aeabi_dcmpeq>
 80292da:	2800      	cmp	r0, #0
 80292dc:	d008      	beq.n	80292f0 <log+0x50>
 80292de:	f7fd faf3 	bl	80268c8 <__errno>
 80292e2:	2322      	movs	r3, #34	@ 0x22
 80292e4:	2600      	movs	r6, #0
 80292e6:	4f07      	ldr	r7, [pc, #28]	@ (8029304 <log+0x64>)
 80292e8:	6003      	str	r3, [r0, #0]
 80292ea:	0030      	movs	r0, r6
 80292ec:	0039      	movs	r1, r7
 80292ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80292f0:	f7fd faea 	bl	80268c8 <__errno>
 80292f4:	2321      	movs	r3, #33	@ 0x21
 80292f6:	6003      	str	r3, [r0, #0]
 80292f8:	4803      	ldr	r0, [pc, #12]	@ (8029308 <log+0x68>)
 80292fa:	f7fd fb27 	bl	802694c <nan>
 80292fe:	0006      	movs	r6, r0
 8029300:	000f      	movs	r7, r1
 8029302:	e7f2      	b.n	80292ea <log+0x4a>
 8029304:	fff00000 	.word	0xfff00000
 8029308:	0802efd8 	.word	0x0802efd8

0802930c <pow>:
 802930c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802930e:	0014      	movs	r4, r2
 8029310:	001d      	movs	r5, r3
 8029312:	9000      	str	r0, [sp, #0]
 8029314:	9101      	str	r1, [sp, #4]
 8029316:	f000 fb07 	bl	8029928 <__ieee754_pow>
 802931a:	0022      	movs	r2, r4
 802931c:	0006      	movs	r6, r0
 802931e:	000f      	movs	r7, r1
 8029320:	002b      	movs	r3, r5
 8029322:	0020      	movs	r0, r4
 8029324:	0029      	movs	r1, r5
 8029326:	f7da fa05 	bl	8003734 <__aeabi_dcmpun>
 802932a:	2800      	cmp	r0, #0
 802932c:	d13f      	bne.n	80293ae <pow+0xa2>
 802932e:	9800      	ldr	r0, [sp, #0]
 8029330:	9901      	ldr	r1, [sp, #4]
 8029332:	2200      	movs	r2, #0
 8029334:	2300      	movs	r3, #0
 8029336:	f7d7 f8bb 	bl	80004b0 <__aeabi_dcmpeq>
 802933a:	2800      	cmp	r0, #0
 802933c:	d019      	beq.n	8029372 <pow+0x66>
 802933e:	2200      	movs	r2, #0
 8029340:	2300      	movs	r3, #0
 8029342:	0020      	movs	r0, r4
 8029344:	0029      	movs	r1, r5
 8029346:	f7d7 f8b3 	bl	80004b0 <__aeabi_dcmpeq>
 802934a:	2800      	cmp	r0, #0
 802934c:	d146      	bne.n	80293dc <pow+0xd0>
 802934e:	0020      	movs	r0, r4
 8029350:	0029      	movs	r1, r5
 8029352:	f000 f88d 	bl	8029470 <finite>
 8029356:	2800      	cmp	r0, #0
 8029358:	d029      	beq.n	80293ae <pow+0xa2>
 802935a:	2200      	movs	r2, #0
 802935c:	2300      	movs	r3, #0
 802935e:	0020      	movs	r0, r4
 8029360:	0029      	movs	r1, r5
 8029362:	f7d7 f8ab 	bl	80004bc <__aeabi_dcmplt>
 8029366:	2800      	cmp	r0, #0
 8029368:	d021      	beq.n	80293ae <pow+0xa2>
 802936a:	f7fd faad 	bl	80268c8 <__errno>
 802936e:	2322      	movs	r3, #34	@ 0x22
 8029370:	e01c      	b.n	80293ac <pow+0xa0>
 8029372:	0030      	movs	r0, r6
 8029374:	0039      	movs	r1, r7
 8029376:	f000 f87b 	bl	8029470 <finite>
 802937a:	2800      	cmp	r0, #0
 802937c:	d11b      	bne.n	80293b6 <pow+0xaa>
 802937e:	9800      	ldr	r0, [sp, #0]
 8029380:	9901      	ldr	r1, [sp, #4]
 8029382:	f000 f875 	bl	8029470 <finite>
 8029386:	2800      	cmp	r0, #0
 8029388:	d015      	beq.n	80293b6 <pow+0xaa>
 802938a:	0020      	movs	r0, r4
 802938c:	0029      	movs	r1, r5
 802938e:	f000 f86f 	bl	8029470 <finite>
 8029392:	2800      	cmp	r0, #0
 8029394:	d00f      	beq.n	80293b6 <pow+0xaa>
 8029396:	0032      	movs	r2, r6
 8029398:	003b      	movs	r3, r7
 802939a:	0030      	movs	r0, r6
 802939c:	0039      	movs	r1, r7
 802939e:	f7da f9c9 	bl	8003734 <__aeabi_dcmpun>
 80293a2:	2800      	cmp	r0, #0
 80293a4:	d0e1      	beq.n	802936a <pow+0x5e>
 80293a6:	f7fd fa8f 	bl	80268c8 <__errno>
 80293aa:	2321      	movs	r3, #33	@ 0x21
 80293ac:	6003      	str	r3, [r0, #0]
 80293ae:	0030      	movs	r0, r6
 80293b0:	0039      	movs	r1, r7
 80293b2:	b003      	add	sp, #12
 80293b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80293b6:	2200      	movs	r2, #0
 80293b8:	2300      	movs	r3, #0
 80293ba:	0030      	movs	r0, r6
 80293bc:	0039      	movs	r1, r7
 80293be:	f7d7 f877 	bl	80004b0 <__aeabi_dcmpeq>
 80293c2:	2800      	cmp	r0, #0
 80293c4:	d0f3      	beq.n	80293ae <pow+0xa2>
 80293c6:	9800      	ldr	r0, [sp, #0]
 80293c8:	9901      	ldr	r1, [sp, #4]
 80293ca:	f000 f851 	bl	8029470 <finite>
 80293ce:	2800      	cmp	r0, #0
 80293d0:	d0ed      	beq.n	80293ae <pow+0xa2>
 80293d2:	0020      	movs	r0, r4
 80293d4:	0029      	movs	r1, r5
 80293d6:	f000 f84b 	bl	8029470 <finite>
 80293da:	e7c4      	b.n	8029366 <pow+0x5a>
 80293dc:	2600      	movs	r6, #0
 80293de:	4f01      	ldr	r7, [pc, #4]	@ (80293e4 <pow+0xd8>)
 80293e0:	e7e5      	b.n	80293ae <pow+0xa2>
 80293e2:	46c0      	nop			@ (mov r8, r8)
 80293e4:	3ff00000 	.word	0x3ff00000

080293e8 <expf>:
 80293e8:	b570      	push	{r4, r5, r6, lr}
 80293ea:	1c04      	adds	r4, r0, #0
 80293ec:	f000 ffb8 	bl	802a360 <__ieee754_expf>
 80293f0:	1c05      	adds	r5, r0, #0
 80293f2:	1c20      	adds	r0, r4, #0
 80293f4:	f000 f844 	bl	8029480 <finitef>
 80293f8:	2800      	cmp	r0, #0
 80293fa:	d00b      	beq.n	8029414 <expf+0x2c>
 80293fc:	490c      	ldr	r1, [pc, #48]	@ (8029430 <expf+0x48>)
 80293fe:	1c20      	adds	r0, r4, #0
 8029400:	f7d7 f8aa 	bl	8000558 <__aeabi_fcmpgt>
 8029404:	2800      	cmp	r0, #0
 8029406:	d007      	beq.n	8029418 <expf+0x30>
 8029408:	f7fd fa5e 	bl	80268c8 <__errno>
 802940c:	25ff      	movs	r5, #255	@ 0xff
 802940e:	2322      	movs	r3, #34	@ 0x22
 8029410:	05ed      	lsls	r5, r5, #23
 8029412:	6003      	str	r3, [r0, #0]
 8029414:	1c28      	adds	r0, r5, #0
 8029416:	bd70      	pop	{r4, r5, r6, pc}
 8029418:	4906      	ldr	r1, [pc, #24]	@ (8029434 <expf+0x4c>)
 802941a:	1c20      	adds	r0, r4, #0
 802941c:	f7d7 f888 	bl	8000530 <__aeabi_fcmplt>
 8029420:	2800      	cmp	r0, #0
 8029422:	d0f7      	beq.n	8029414 <expf+0x2c>
 8029424:	f7fd fa50 	bl	80268c8 <__errno>
 8029428:	2322      	movs	r3, #34	@ 0x22
 802942a:	2500      	movs	r5, #0
 802942c:	6003      	str	r3, [r0, #0]
 802942e:	e7f1      	b.n	8029414 <expf+0x2c>
 8029430:	42b17217 	.word	0x42b17217
 8029434:	c2cff1b5 	.word	0xc2cff1b5

08029438 <sqrtf>:
 8029438:	b570      	push	{r4, r5, r6, lr}
 802943a:	1c05      	adds	r5, r0, #0
 802943c:	f000 f82a 	bl	8029494 <__ieee754_sqrtf>
 8029440:	1c29      	adds	r1, r5, #0
 8029442:	1c04      	adds	r4, r0, #0
 8029444:	1c28      	adds	r0, r5, #0
 8029446:	f7d8 f9b9 	bl	80017bc <__aeabi_fcmpun>
 802944a:	2800      	cmp	r0, #0
 802944c:	d10e      	bne.n	802946c <sqrtf+0x34>
 802944e:	2100      	movs	r1, #0
 8029450:	1c28      	adds	r0, r5, #0
 8029452:	f7d7 f86d 	bl	8000530 <__aeabi_fcmplt>
 8029456:	2800      	cmp	r0, #0
 8029458:	d008      	beq.n	802946c <sqrtf+0x34>
 802945a:	f7fd fa35 	bl	80268c8 <__errno>
 802945e:	2321      	movs	r3, #33	@ 0x21
 8029460:	2100      	movs	r1, #0
 8029462:	6003      	str	r3, [r0, #0]
 8029464:	1c08      	adds	r0, r1, #0
 8029466:	f7d7 fc1d 	bl	8000ca4 <__aeabi_fdiv>
 802946a:	1c04      	adds	r4, r0, #0
 802946c:	1c20      	adds	r0, r4, #0
 802946e:	bd70      	pop	{r4, r5, r6, pc}

08029470 <finite>:
 8029470:	4b02      	ldr	r3, [pc, #8]	@ (802947c <finite+0xc>)
 8029472:	0048      	lsls	r0, r1, #1
 8029474:	0840      	lsrs	r0, r0, #1
 8029476:	18c0      	adds	r0, r0, r3
 8029478:	0fc0      	lsrs	r0, r0, #31
 802947a:	4770      	bx	lr
 802947c:	80100000 	.word	0x80100000

08029480 <finitef>:
 8029480:	22ff      	movs	r2, #255	@ 0xff
 8029482:	0043      	lsls	r3, r0, #1
 8029484:	085b      	lsrs	r3, r3, #1
 8029486:	2001      	movs	r0, #1
 8029488:	05d2      	lsls	r2, r2, #23
 802948a:	4293      	cmp	r3, r2
 802948c:	db00      	blt.n	8029490 <finitef+0x10>
 802948e:	2000      	movs	r0, #0
 8029490:	4770      	bx	lr
	...

08029494 <__ieee754_sqrtf>:
 8029494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029496:	21ff      	movs	r1, #255	@ 0xff
 8029498:	0042      	lsls	r2, r0, #1
 802949a:	0003      	movs	r3, r0
 802949c:	1c04      	adds	r4, r0, #0
 802949e:	0852      	lsrs	r2, r2, #1
 80294a0:	05c9      	lsls	r1, r1, #23
 80294a2:	428a      	cmp	r2, r1
 80294a4:	d309      	bcc.n	80294ba <__ieee754_sqrtf+0x26>
 80294a6:	1c01      	adds	r1, r0, #0
 80294a8:	f7d7 fdca 	bl	8001040 <__aeabi_fmul>
 80294ac:	1c01      	adds	r1, r0, #0
 80294ae:	1c20      	adds	r0, r4, #0
 80294b0:	f7d7 fa06 	bl	80008c0 <__aeabi_fadd>
 80294b4:	1c04      	adds	r4, r0, #0
 80294b6:	1c20      	adds	r0, r4, #0
 80294b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80294ba:	2a00      	cmp	r2, #0
 80294bc:	d0fb      	beq.n	80294b6 <__ieee754_sqrtf+0x22>
 80294be:	2800      	cmp	r0, #0
 80294c0:	da06      	bge.n	80294d0 <__ieee754_sqrtf+0x3c>
 80294c2:	1c01      	adds	r1, r0, #0
 80294c4:	f7d7 ff16 	bl	80012f4 <__aeabi_fsub>
 80294c8:	1c01      	adds	r1, r0, #0
 80294ca:	f7d7 fbeb 	bl	8000ca4 <__aeabi_fdiv>
 80294ce:	e7f1      	b.n	80294b4 <__ieee754_sqrtf+0x20>
 80294d0:	0002      	movs	r2, r0
 80294d2:	400a      	ands	r2, r1
 80294d4:	4208      	tst	r0, r1
 80294d6:	d040      	beq.n	802955a <__ieee754_sqrtf+0xc6>
 80294d8:	15c1      	asrs	r1, r0, #23
 80294da:	2280      	movs	r2, #128	@ 0x80
 80294dc:	000f      	movs	r7, r1
 80294de:	025b      	lsls	r3, r3, #9
 80294e0:	0a5b      	lsrs	r3, r3, #9
 80294e2:	0412      	lsls	r2, r2, #16
 80294e4:	3f7f      	subs	r7, #127	@ 0x7f
 80294e6:	4313      	orrs	r3, r2
 80294e8:	07c9      	lsls	r1, r1, #31
 80294ea:	d400      	bmi.n	80294ee <__ieee754_sqrtf+0x5a>
 80294ec:	005b      	lsls	r3, r3, #1
 80294ee:	2400      	movs	r4, #0
 80294f0:	2180      	movs	r1, #128	@ 0x80
 80294f2:	2019      	movs	r0, #25
 80294f4:	0026      	movs	r6, r4
 80294f6:	107f      	asrs	r7, r7, #1
 80294f8:	005b      	lsls	r3, r3, #1
 80294fa:	0449      	lsls	r1, r1, #17
 80294fc:	1875      	adds	r5, r6, r1
 80294fe:	001a      	movs	r2, r3
 8029500:	429d      	cmp	r5, r3
 8029502:	dc02      	bgt.n	802950a <__ieee754_sqrtf+0x76>
 8029504:	186e      	adds	r6, r5, r1
 8029506:	1b5a      	subs	r2, r3, r5
 8029508:	1864      	adds	r4, r4, r1
 802950a:	3801      	subs	r0, #1
 802950c:	0053      	lsls	r3, r2, #1
 802950e:	0849      	lsrs	r1, r1, #1
 8029510:	2800      	cmp	r0, #0
 8029512:	d1f3      	bne.n	80294fc <__ieee754_sqrtf+0x68>
 8029514:	2a00      	cmp	r2, #0
 8029516:	d019      	beq.n	802954c <__ieee754_sqrtf+0xb8>
 8029518:	4d16      	ldr	r5, [pc, #88]	@ (8029574 <__ieee754_sqrtf+0xe0>)
 802951a:	4e17      	ldr	r6, [pc, #92]	@ (8029578 <__ieee754_sqrtf+0xe4>)
 802951c:	6828      	ldr	r0, [r5, #0]
 802951e:	6831      	ldr	r1, [r6, #0]
 8029520:	682b      	ldr	r3, [r5, #0]
 8029522:	9301      	str	r3, [sp, #4]
 8029524:	f7d7 fee6 	bl	80012f4 <__aeabi_fsub>
 8029528:	1c01      	adds	r1, r0, #0
 802952a:	9801      	ldr	r0, [sp, #4]
 802952c:	f7d7 f80a 	bl	8000544 <__aeabi_fcmple>
 8029530:	2800      	cmp	r0, #0
 8029532:	d00b      	beq.n	802954c <__ieee754_sqrtf+0xb8>
 8029534:	6828      	ldr	r0, [r5, #0]
 8029536:	6831      	ldr	r1, [r6, #0]
 8029538:	f7d7 f9c2 	bl	80008c0 <__aeabi_fadd>
 802953c:	682d      	ldr	r5, [r5, #0]
 802953e:	1c01      	adds	r1, r0, #0
 8029540:	1c28      	adds	r0, r5, #0
 8029542:	f7d6 fff5 	bl	8000530 <__aeabi_fcmplt>
 8029546:	2800      	cmp	r0, #0
 8029548:	d010      	beq.n	802956c <__ieee754_sqrtf+0xd8>
 802954a:	3402      	adds	r4, #2
 802954c:	23fc      	movs	r3, #252	@ 0xfc
 802954e:	1064      	asrs	r4, r4, #1
 8029550:	059b      	lsls	r3, r3, #22
 8029552:	18e3      	adds	r3, r4, r3
 8029554:	05fc      	lsls	r4, r7, #23
 8029556:	18e4      	adds	r4, r4, r3
 8029558:	e7ad      	b.n	80294b6 <__ieee754_sqrtf+0x22>
 802955a:	2080      	movs	r0, #128	@ 0x80
 802955c:	0400      	lsls	r0, r0, #16
 802955e:	005b      	lsls	r3, r3, #1
 8029560:	0011      	movs	r1, r2
 8029562:	3201      	adds	r2, #1
 8029564:	4203      	tst	r3, r0
 8029566:	d0fa      	beq.n	802955e <__ieee754_sqrtf+0xca>
 8029568:	4249      	negs	r1, r1
 802956a:	e7b6      	b.n	80294da <__ieee754_sqrtf+0x46>
 802956c:	2301      	movs	r3, #1
 802956e:	3401      	adds	r4, #1
 8029570:	439c      	bics	r4, r3
 8029572:	e7eb      	b.n	802954c <__ieee754_sqrtf+0xb8>
 8029574:	0802f234 	.word	0x0802f234
 8029578:	0802f230 	.word	0x0802f230

0802957c <roundf>:
 802957c:	0dc3      	lsrs	r3, r0, #23
 802957e:	b2db      	uxtb	r3, r3
 8029580:	3b7f      	subs	r3, #127	@ 0x7f
 8029582:	0002      	movs	r2, r0
 8029584:	b510      	push	{r4, lr}
 8029586:	2b16      	cmp	r3, #22
 8029588:	dc13      	bgt.n	80295b2 <roundf+0x36>
 802958a:	2b00      	cmp	r3, #0
 802958c:	da07      	bge.n	802959e <roundf+0x22>
 802958e:	0fc2      	lsrs	r2, r0, #31
 8029590:	07d0      	lsls	r0, r2, #31
 8029592:	3301      	adds	r3, #1
 8029594:	d102      	bne.n	802959c <roundf+0x20>
 8029596:	23fe      	movs	r3, #254	@ 0xfe
 8029598:	059b      	lsls	r3, r3, #22
 802959a:	4318      	orrs	r0, r3
 802959c:	bd10      	pop	{r4, pc}
 802959e:	4908      	ldr	r1, [pc, #32]	@ (80295c0 <roundf+0x44>)
 80295a0:	4119      	asrs	r1, r3
 80295a2:	4208      	tst	r0, r1
 80295a4:	d0fa      	beq.n	802959c <roundf+0x20>
 80295a6:	2080      	movs	r0, #128	@ 0x80
 80295a8:	03c0      	lsls	r0, r0, #15
 80295aa:	4118      	asrs	r0, r3
 80295ac:	1880      	adds	r0, r0, r2
 80295ae:	4388      	bics	r0, r1
 80295b0:	e7f4      	b.n	802959c <roundf+0x20>
 80295b2:	2b80      	cmp	r3, #128	@ 0x80
 80295b4:	d1f2      	bne.n	802959c <roundf+0x20>
 80295b6:	1c01      	adds	r1, r0, #0
 80295b8:	f7d7 f982 	bl	80008c0 <__aeabi_fadd>
 80295bc:	e7ee      	b.n	802959c <roundf+0x20>
 80295be:	46c0      	nop			@ (mov r8, r8)
 80295c0:	007fffff 	.word	0x007fffff

080295c4 <__ieee754_log>:
 80295c4:	2380      	movs	r3, #128	@ 0x80
 80295c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80295c8:	035b      	lsls	r3, r3, #13
 80295ca:	000e      	movs	r6, r1
 80295cc:	b08d      	sub	sp, #52	@ 0x34
 80295ce:	4299      	cmp	r1, r3
 80295d0:	da23      	bge.n	802961a <__ieee754_log+0x56>
 80295d2:	004b      	lsls	r3, r1, #1
 80295d4:	085b      	lsrs	r3, r3, #1
 80295d6:	4303      	orrs	r3, r0
 80295d8:	d107      	bne.n	80295ea <__ieee754_log+0x26>
 80295da:	2200      	movs	r2, #0
 80295dc:	2300      	movs	r3, #0
 80295de:	2000      	movs	r0, #0
 80295e0:	49b4      	ldr	r1, [pc, #720]	@ (80298b4 <__ieee754_log+0x2f0>)
 80295e2:	f7d8 fd7d 	bl	80020e0 <__aeabi_ddiv>
 80295e6:	b00d      	add	sp, #52	@ 0x34
 80295e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80295ea:	2900      	cmp	r1, #0
 80295ec:	da06      	bge.n	80295fc <__ieee754_log+0x38>
 80295ee:	0002      	movs	r2, r0
 80295f0:	000b      	movs	r3, r1
 80295f2:	f7d9 fc95 	bl	8002f20 <__aeabi_dsub>
 80295f6:	2200      	movs	r2, #0
 80295f8:	2300      	movs	r3, #0
 80295fa:	e7f2      	b.n	80295e2 <__ieee754_log+0x1e>
 80295fc:	4bae      	ldr	r3, [pc, #696]	@ (80298b8 <__ieee754_log+0x2f4>)
 80295fe:	2200      	movs	r2, #0
 8029600:	f7d9 f9a8 	bl	8002954 <__aeabi_dmul>
 8029604:	2336      	movs	r3, #54	@ 0x36
 8029606:	000e      	movs	r6, r1
 8029608:	425b      	negs	r3, r3
 802960a:	4aac      	ldr	r2, [pc, #688]	@ (80298bc <__ieee754_log+0x2f8>)
 802960c:	4296      	cmp	r6, r2
 802960e:	dd06      	ble.n	802961e <__ieee754_log+0x5a>
 8029610:	0002      	movs	r2, r0
 8029612:	000b      	movs	r3, r1
 8029614:	f7d8 f99e 	bl	8001954 <__aeabi_dadd>
 8029618:	e7e5      	b.n	80295e6 <__ieee754_log+0x22>
 802961a:	2300      	movs	r3, #0
 802961c:	e7f5      	b.n	802960a <__ieee754_log+0x46>
 802961e:	4ca8      	ldr	r4, [pc, #672]	@ (80298c0 <__ieee754_log+0x2fc>)
 8029620:	1532      	asrs	r2, r6, #20
 8029622:	1912      	adds	r2, r2, r4
 8029624:	0336      	lsls	r6, r6, #12
 8029626:	4ca7      	ldr	r4, [pc, #668]	@ (80298c4 <__ieee754_log+0x300>)
 8029628:	18d2      	adds	r2, r2, r3
 802962a:	0b33      	lsrs	r3, r6, #12
 802962c:	9302      	str	r3, [sp, #8]
 802962e:	191b      	adds	r3, r3, r4
 8029630:	2480      	movs	r4, #128	@ 0x80
 8029632:	0364      	lsls	r4, r4, #13
 8029634:	4023      	ands	r3, r4
 8029636:	4ca4      	ldr	r4, [pc, #656]	@ (80298c8 <__ieee754_log+0x304>)
 8029638:	9d02      	ldr	r5, [sp, #8]
 802963a:	405c      	eors	r4, r3
 802963c:	151b      	asrs	r3, r3, #20
 802963e:	189b      	adds	r3, r3, r2
 8029640:	4325      	orrs	r5, r4
 8029642:	2200      	movs	r2, #0
 8029644:	9300      	str	r3, [sp, #0]
 8029646:	0029      	movs	r1, r5
 8029648:	4b9f      	ldr	r3, [pc, #636]	@ (80298c8 <__ieee754_log+0x304>)
 802964a:	f7d9 fc69 	bl	8002f20 <__aeabi_dsub>
 802964e:	9b02      	ldr	r3, [sp, #8]
 8029650:	0006      	movs	r6, r0
 8029652:	3302      	adds	r3, #2
 8029654:	031b      	lsls	r3, r3, #12
 8029656:	000f      	movs	r7, r1
 8029658:	2200      	movs	r2, #0
 802965a:	0b1b      	lsrs	r3, r3, #12
 802965c:	2b02      	cmp	r3, #2
 802965e:	dc64      	bgt.n	802972a <__ieee754_log+0x166>
 8029660:	2300      	movs	r3, #0
 8029662:	f7d6 ff25 	bl	80004b0 <__aeabi_dcmpeq>
 8029666:	2800      	cmp	r0, #0
 8029668:	d019      	beq.n	802969e <__ieee754_log+0xda>
 802966a:	9b00      	ldr	r3, [sp, #0]
 802966c:	2b00      	cmp	r3, #0
 802966e:	d100      	bne.n	8029672 <__ieee754_log+0xae>
 8029670:	e11c      	b.n	80298ac <__ieee754_log+0x2e8>
 8029672:	0018      	movs	r0, r3
 8029674:	f7da f8bc 	bl	80037f0 <__aeabi_i2d>
 8029678:	4a94      	ldr	r2, [pc, #592]	@ (80298cc <__ieee754_log+0x308>)
 802967a:	4b95      	ldr	r3, [pc, #596]	@ (80298d0 <__ieee754_log+0x30c>)
 802967c:	0004      	movs	r4, r0
 802967e:	000d      	movs	r5, r1
 8029680:	f7d9 f968 	bl	8002954 <__aeabi_dmul>
 8029684:	4a93      	ldr	r2, [pc, #588]	@ (80298d4 <__ieee754_log+0x310>)
 8029686:	0006      	movs	r6, r0
 8029688:	000f      	movs	r7, r1
 802968a:	4b93      	ldr	r3, [pc, #588]	@ (80298d8 <__ieee754_log+0x314>)
 802968c:	0020      	movs	r0, r4
 802968e:	0029      	movs	r1, r5
 8029690:	f7d9 f960 	bl	8002954 <__aeabi_dmul>
 8029694:	0002      	movs	r2, r0
 8029696:	000b      	movs	r3, r1
 8029698:	0030      	movs	r0, r6
 802969a:	0039      	movs	r1, r7
 802969c:	e7ba      	b.n	8029614 <__ieee754_log+0x50>
 802969e:	4a8f      	ldr	r2, [pc, #572]	@ (80298dc <__ieee754_log+0x318>)
 80296a0:	4b8f      	ldr	r3, [pc, #572]	@ (80298e0 <__ieee754_log+0x31c>)
 80296a2:	0030      	movs	r0, r6
 80296a4:	0039      	movs	r1, r7
 80296a6:	f7d9 f955 	bl	8002954 <__aeabi_dmul>
 80296aa:	0002      	movs	r2, r0
 80296ac:	000b      	movs	r3, r1
 80296ae:	2000      	movs	r0, #0
 80296b0:	498c      	ldr	r1, [pc, #560]	@ (80298e4 <__ieee754_log+0x320>)
 80296b2:	f7d9 fc35 	bl	8002f20 <__aeabi_dsub>
 80296b6:	0032      	movs	r2, r6
 80296b8:	0004      	movs	r4, r0
 80296ba:	000d      	movs	r5, r1
 80296bc:	003b      	movs	r3, r7
 80296be:	0030      	movs	r0, r6
 80296c0:	0039      	movs	r1, r7
 80296c2:	f7d9 f947 	bl	8002954 <__aeabi_dmul>
 80296c6:	000b      	movs	r3, r1
 80296c8:	0002      	movs	r2, r0
 80296ca:	0029      	movs	r1, r5
 80296cc:	0020      	movs	r0, r4
 80296ce:	f7d9 f941 	bl	8002954 <__aeabi_dmul>
 80296d2:	9b00      	ldr	r3, [sp, #0]
 80296d4:	9002      	str	r0, [sp, #8]
 80296d6:	9103      	str	r1, [sp, #12]
 80296d8:	2b00      	cmp	r3, #0
 80296da:	d106      	bne.n	80296ea <__ieee754_log+0x126>
 80296dc:	0002      	movs	r2, r0
 80296de:	000b      	movs	r3, r1
 80296e0:	0030      	movs	r0, r6
 80296e2:	0039      	movs	r1, r7
 80296e4:	f7d9 fc1c 	bl	8002f20 <__aeabi_dsub>
 80296e8:	e77d      	b.n	80295e6 <__ieee754_log+0x22>
 80296ea:	9800      	ldr	r0, [sp, #0]
 80296ec:	f7da f880 	bl	80037f0 <__aeabi_i2d>
 80296f0:	4a76      	ldr	r2, [pc, #472]	@ (80298cc <__ieee754_log+0x308>)
 80296f2:	4b77      	ldr	r3, [pc, #476]	@ (80298d0 <__ieee754_log+0x30c>)
 80296f4:	0004      	movs	r4, r0
 80296f6:	000d      	movs	r5, r1
 80296f8:	f7d9 f92c 	bl	8002954 <__aeabi_dmul>
 80296fc:	4a75      	ldr	r2, [pc, #468]	@ (80298d4 <__ieee754_log+0x310>)
 80296fe:	9000      	str	r0, [sp, #0]
 8029700:	9101      	str	r1, [sp, #4]
 8029702:	4b75      	ldr	r3, [pc, #468]	@ (80298d8 <__ieee754_log+0x314>)
 8029704:	0020      	movs	r0, r4
 8029706:	0029      	movs	r1, r5
 8029708:	f7d9 f924 	bl	8002954 <__aeabi_dmul>
 802970c:	0002      	movs	r2, r0
 802970e:	000b      	movs	r3, r1
 8029710:	9802      	ldr	r0, [sp, #8]
 8029712:	9903      	ldr	r1, [sp, #12]
 8029714:	f7d9 fc04 	bl	8002f20 <__aeabi_dsub>
 8029718:	0032      	movs	r2, r6
 802971a:	003b      	movs	r3, r7
 802971c:	f7d9 fc00 	bl	8002f20 <__aeabi_dsub>
 8029720:	0002      	movs	r2, r0
 8029722:	000b      	movs	r3, r1
 8029724:	9800      	ldr	r0, [sp, #0]
 8029726:	9901      	ldr	r1, [sp, #4]
 8029728:	e7dc      	b.n	80296e4 <__ieee754_log+0x120>
 802972a:	2380      	movs	r3, #128	@ 0x80
 802972c:	05db      	lsls	r3, r3, #23
 802972e:	f7d8 f911 	bl	8001954 <__aeabi_dadd>
 8029732:	0002      	movs	r2, r0
 8029734:	000b      	movs	r3, r1
 8029736:	0030      	movs	r0, r6
 8029738:	0039      	movs	r1, r7
 802973a:	f7d8 fcd1 	bl	80020e0 <__aeabi_ddiv>
 802973e:	9004      	str	r0, [sp, #16]
 8029740:	9105      	str	r1, [sp, #20]
 8029742:	9800      	ldr	r0, [sp, #0]
 8029744:	f7da f854 	bl	80037f0 <__aeabi_i2d>
 8029748:	9a04      	ldr	r2, [sp, #16]
 802974a:	9b05      	ldr	r3, [sp, #20]
 802974c:	9006      	str	r0, [sp, #24]
 802974e:	9107      	str	r1, [sp, #28]
 8029750:	0010      	movs	r0, r2
 8029752:	0019      	movs	r1, r3
 8029754:	f7d9 f8fe 	bl	8002954 <__aeabi_dmul>
 8029758:	4a63      	ldr	r2, [pc, #396]	@ (80298e8 <__ieee754_log+0x324>)
 802975a:	9b02      	ldr	r3, [sp, #8]
 802975c:	4694      	mov	ip, r2
 802975e:	4463      	add	r3, ip
 8029760:	0002      	movs	r2, r0
 8029762:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029764:	000b      	movs	r3, r1
 8029766:	9008      	str	r0, [sp, #32]
 8029768:	9109      	str	r1, [sp, #36]	@ 0x24
 802976a:	f7d9 f8f3 	bl	8002954 <__aeabi_dmul>
 802976e:	0004      	movs	r4, r0
 8029770:	000d      	movs	r5, r1
 8029772:	4a5e      	ldr	r2, [pc, #376]	@ (80298ec <__ieee754_log+0x328>)
 8029774:	4b5e      	ldr	r3, [pc, #376]	@ (80298f0 <__ieee754_log+0x32c>)
 8029776:	f7d9 f8ed 	bl	8002954 <__aeabi_dmul>
 802977a:	4a5e      	ldr	r2, [pc, #376]	@ (80298f4 <__ieee754_log+0x330>)
 802977c:	4b5e      	ldr	r3, [pc, #376]	@ (80298f8 <__ieee754_log+0x334>)
 802977e:	f7d8 f8e9 	bl	8001954 <__aeabi_dadd>
 8029782:	0022      	movs	r2, r4
 8029784:	002b      	movs	r3, r5
 8029786:	f7d9 f8e5 	bl	8002954 <__aeabi_dmul>
 802978a:	4a5c      	ldr	r2, [pc, #368]	@ (80298fc <__ieee754_log+0x338>)
 802978c:	4b5c      	ldr	r3, [pc, #368]	@ (8029900 <__ieee754_log+0x33c>)
 802978e:	f7d8 f8e1 	bl	8001954 <__aeabi_dadd>
 8029792:	0022      	movs	r2, r4
 8029794:	002b      	movs	r3, r5
 8029796:	f7d9 f8dd 	bl	8002954 <__aeabi_dmul>
 802979a:	4a5a      	ldr	r2, [pc, #360]	@ (8029904 <__ieee754_log+0x340>)
 802979c:	4b5a      	ldr	r3, [pc, #360]	@ (8029908 <__ieee754_log+0x344>)
 802979e:	f7d8 f8d9 	bl	8001954 <__aeabi_dadd>
 80297a2:	9a08      	ldr	r2, [sp, #32]
 80297a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80297a6:	f7d9 f8d5 	bl	8002954 <__aeabi_dmul>
 80297aa:	4a58      	ldr	r2, [pc, #352]	@ (802990c <__ieee754_log+0x348>)
 80297ac:	9008      	str	r0, [sp, #32]
 80297ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80297b0:	4b57      	ldr	r3, [pc, #348]	@ (8029910 <__ieee754_log+0x34c>)
 80297b2:	0020      	movs	r0, r4
 80297b4:	0029      	movs	r1, r5
 80297b6:	f7d9 f8cd 	bl	8002954 <__aeabi_dmul>
 80297ba:	4a56      	ldr	r2, [pc, #344]	@ (8029914 <__ieee754_log+0x350>)
 80297bc:	4b56      	ldr	r3, [pc, #344]	@ (8029918 <__ieee754_log+0x354>)
 80297be:	f7d8 f8c9 	bl	8001954 <__aeabi_dadd>
 80297c2:	0022      	movs	r2, r4
 80297c4:	002b      	movs	r3, r5
 80297c6:	f7d9 f8c5 	bl	8002954 <__aeabi_dmul>
 80297ca:	4a54      	ldr	r2, [pc, #336]	@ (802991c <__ieee754_log+0x358>)
 80297cc:	4b54      	ldr	r3, [pc, #336]	@ (8029920 <__ieee754_log+0x35c>)
 80297ce:	f7d8 f8c1 	bl	8001954 <__aeabi_dadd>
 80297d2:	0022      	movs	r2, r4
 80297d4:	002b      	movs	r3, r5
 80297d6:	f7d9 f8bd 	bl	8002954 <__aeabi_dmul>
 80297da:	0002      	movs	r2, r0
 80297dc:	000b      	movs	r3, r1
 80297de:	9808      	ldr	r0, [sp, #32]
 80297e0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80297e2:	f7d8 f8b7 	bl	8001954 <__aeabi_dadd>
 80297e6:	9a02      	ldr	r2, [sp, #8]
 80297e8:	4b4e      	ldr	r3, [pc, #312]	@ (8029924 <__ieee754_log+0x360>)
 80297ea:	0004      	movs	r4, r0
 80297ec:	1a9b      	subs	r3, r3, r2
 80297ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80297f0:	000d      	movs	r5, r1
 80297f2:	4313      	orrs	r3, r2
 80297f4:	2b00      	cmp	r3, #0
 80297f6:	dd34      	ble.n	8029862 <__ieee754_log+0x29e>
 80297f8:	2200      	movs	r2, #0
 80297fa:	4b3a      	ldr	r3, [pc, #232]	@ (80298e4 <__ieee754_log+0x320>)
 80297fc:	0030      	movs	r0, r6
 80297fe:	0039      	movs	r1, r7
 8029800:	f7d9 f8a8 	bl	8002954 <__aeabi_dmul>
 8029804:	0032      	movs	r2, r6
 8029806:	003b      	movs	r3, r7
 8029808:	f7d9 f8a4 	bl	8002954 <__aeabi_dmul>
 802980c:	0002      	movs	r2, r0
 802980e:	000b      	movs	r3, r1
 8029810:	9002      	str	r0, [sp, #8]
 8029812:	9103      	str	r1, [sp, #12]
 8029814:	0020      	movs	r0, r4
 8029816:	0029      	movs	r1, r5
 8029818:	f7d8 f89c 	bl	8001954 <__aeabi_dadd>
 802981c:	9a04      	ldr	r2, [sp, #16]
 802981e:	9b05      	ldr	r3, [sp, #20]
 8029820:	f7d9 f898 	bl	8002954 <__aeabi_dmul>
 8029824:	9b00      	ldr	r3, [sp, #0]
 8029826:	0004      	movs	r4, r0
 8029828:	000d      	movs	r5, r1
 802982a:	2b00      	cmp	r3, #0
 802982c:	d106      	bne.n	802983c <__ieee754_log+0x278>
 802982e:	0002      	movs	r2, r0
 8029830:	000b      	movs	r3, r1
 8029832:	9802      	ldr	r0, [sp, #8]
 8029834:	9903      	ldr	r1, [sp, #12]
 8029836:	f7d9 fb73 	bl	8002f20 <__aeabi_dsub>
 802983a:	e74f      	b.n	80296dc <__ieee754_log+0x118>
 802983c:	4a23      	ldr	r2, [pc, #140]	@ (80298cc <__ieee754_log+0x308>)
 802983e:	4b24      	ldr	r3, [pc, #144]	@ (80298d0 <__ieee754_log+0x30c>)
 8029840:	9806      	ldr	r0, [sp, #24]
 8029842:	9907      	ldr	r1, [sp, #28]
 8029844:	f7d9 f886 	bl	8002954 <__aeabi_dmul>
 8029848:	4a22      	ldr	r2, [pc, #136]	@ (80298d4 <__ieee754_log+0x310>)
 802984a:	9000      	str	r0, [sp, #0]
 802984c:	9101      	str	r1, [sp, #4]
 802984e:	9806      	ldr	r0, [sp, #24]
 8029850:	9907      	ldr	r1, [sp, #28]
 8029852:	4b21      	ldr	r3, [pc, #132]	@ (80298d8 <__ieee754_log+0x314>)
 8029854:	f7d9 f87e 	bl	8002954 <__aeabi_dmul>
 8029858:	0022      	movs	r2, r4
 802985a:	002b      	movs	r3, r5
 802985c:	f7d8 f87a 	bl	8001954 <__aeabi_dadd>
 8029860:	e754      	b.n	802970c <__ieee754_log+0x148>
 8029862:	0002      	movs	r2, r0
 8029864:	000b      	movs	r3, r1
 8029866:	0030      	movs	r0, r6
 8029868:	0039      	movs	r1, r7
 802986a:	f7d9 fb59 	bl	8002f20 <__aeabi_dsub>
 802986e:	9a04      	ldr	r2, [sp, #16]
 8029870:	9b05      	ldr	r3, [sp, #20]
 8029872:	f7d9 f86f 	bl	8002954 <__aeabi_dmul>
 8029876:	9b00      	ldr	r3, [sp, #0]
 8029878:	0004      	movs	r4, r0
 802987a:	000d      	movs	r5, r1
 802987c:	2b00      	cmp	r3, #0
 802987e:	d102      	bne.n	8029886 <__ieee754_log+0x2c2>
 8029880:	0002      	movs	r2, r0
 8029882:	000b      	movs	r3, r1
 8029884:	e72c      	b.n	80296e0 <__ieee754_log+0x11c>
 8029886:	4a11      	ldr	r2, [pc, #68]	@ (80298cc <__ieee754_log+0x308>)
 8029888:	4b11      	ldr	r3, [pc, #68]	@ (80298d0 <__ieee754_log+0x30c>)
 802988a:	9806      	ldr	r0, [sp, #24]
 802988c:	9907      	ldr	r1, [sp, #28]
 802988e:	f7d9 f861 	bl	8002954 <__aeabi_dmul>
 8029892:	4a10      	ldr	r2, [pc, #64]	@ (80298d4 <__ieee754_log+0x310>)
 8029894:	9000      	str	r0, [sp, #0]
 8029896:	9101      	str	r1, [sp, #4]
 8029898:	9806      	ldr	r0, [sp, #24]
 802989a:	9907      	ldr	r1, [sp, #28]
 802989c:	4b0e      	ldr	r3, [pc, #56]	@ (80298d8 <__ieee754_log+0x314>)
 802989e:	f7d9 f859 	bl	8002954 <__aeabi_dmul>
 80298a2:	0002      	movs	r2, r0
 80298a4:	000b      	movs	r3, r1
 80298a6:	0020      	movs	r0, r4
 80298a8:	0029      	movs	r1, r5
 80298aa:	e733      	b.n	8029714 <__ieee754_log+0x150>
 80298ac:	2000      	movs	r0, #0
 80298ae:	2100      	movs	r1, #0
 80298b0:	e699      	b.n	80295e6 <__ieee754_log+0x22>
 80298b2:	46c0      	nop			@ (mov r8, r8)
 80298b4:	c3500000 	.word	0xc3500000
 80298b8:	43500000 	.word	0x43500000
 80298bc:	7fefffff 	.word	0x7fefffff
 80298c0:	fffffc01 	.word	0xfffffc01
 80298c4:	00095f64 	.word	0x00095f64
 80298c8:	3ff00000 	.word	0x3ff00000
 80298cc:	fee00000 	.word	0xfee00000
 80298d0:	3fe62e42 	.word	0x3fe62e42
 80298d4:	35793c76 	.word	0x35793c76
 80298d8:	3dea39ef 	.word	0x3dea39ef
 80298dc:	55555555 	.word	0x55555555
 80298e0:	3fd55555 	.word	0x3fd55555
 80298e4:	3fe00000 	.word	0x3fe00000
 80298e8:	fff9eb86 	.word	0xfff9eb86
 80298ec:	df3e5244 	.word	0xdf3e5244
 80298f0:	3fc2f112 	.word	0x3fc2f112
 80298f4:	96cb03de 	.word	0x96cb03de
 80298f8:	3fc74664 	.word	0x3fc74664
 80298fc:	94229359 	.word	0x94229359
 8029900:	3fd24924 	.word	0x3fd24924
 8029904:	55555593 	.word	0x55555593
 8029908:	3fe55555 	.word	0x3fe55555
 802990c:	d078c69f 	.word	0xd078c69f
 8029910:	3fc39a09 	.word	0x3fc39a09
 8029914:	1d8e78af 	.word	0x1d8e78af
 8029918:	3fcc71c5 	.word	0x3fcc71c5
 802991c:	9997fa04 	.word	0x9997fa04
 8029920:	3fd99999 	.word	0x3fd99999
 8029924:	0006b851 	.word	0x0006b851

08029928 <__ieee754_pow>:
 8029928:	b5f0      	push	{r4, r5, r6, r7, lr}
 802992a:	b095      	sub	sp, #84	@ 0x54
 802992c:	9204      	str	r2, [sp, #16]
 802992e:	9305      	str	r3, [sp, #20]
 8029930:	9b04      	ldr	r3, [sp, #16]
 8029932:	9f05      	ldr	r7, [sp, #20]
 8029934:	001a      	movs	r2, r3
 8029936:	007d      	lsls	r5, r7, #1
 8029938:	086d      	lsrs	r5, r5, #1
 802993a:	9002      	str	r0, [sp, #8]
 802993c:	9103      	str	r1, [sp, #12]
 802993e:	432a      	orrs	r2, r5
 8029940:	d11a      	bne.n	8029978 <__ieee754_pow+0x50>
 8029942:	2180      	movs	r1, #128	@ 0x80
 8029944:	9a02      	ldr	r2, [sp, #8]
 8029946:	9803      	ldr	r0, [sp, #12]
 8029948:	0309      	lsls	r1, r1, #12
 802994a:	4048      	eors	r0, r1
 802994c:	0003      	movs	r3, r0
 802994e:	1892      	adds	r2, r2, r2
 8029950:	415b      	adcs	r3, r3
 8029952:	4996      	ldr	r1, [pc, #600]	@ (8029bac <__ieee754_pow+0x284>)
 8029954:	428b      	cmp	r3, r1
 8029956:	d806      	bhi.n	8029966 <__ieee754_pow+0x3e>
 8029958:	d001      	beq.n	802995e <__ieee754_pow+0x36>
 802995a:	f000 fcce 	bl	802a2fa <__ieee754_pow+0x9d2>
 802995e:	2a00      	cmp	r2, #0
 8029960:	d101      	bne.n	8029966 <__ieee754_pow+0x3e>
 8029962:	f000 fcca 	bl	802a2fa <__ieee754_pow+0x9d2>
 8029966:	9a04      	ldr	r2, [sp, #16]
 8029968:	9b05      	ldr	r3, [sp, #20]
 802996a:	9802      	ldr	r0, [sp, #8]
 802996c:	9903      	ldr	r1, [sp, #12]
 802996e:	f7d7 fff1 	bl	8001954 <__aeabi_dadd>
 8029972:	9000      	str	r0, [sp, #0]
 8029974:	9101      	str	r1, [sp, #4]
 8029976:	e08e      	b.n	8029a96 <__ieee754_pow+0x16e>
 8029978:	9a03      	ldr	r2, [sp, #12]
 802997a:	9206      	str	r2, [sp, #24]
 802997c:	9a02      	ldr	r2, [sp, #8]
 802997e:	920a      	str	r2, [sp, #40]	@ 0x28
 8029980:	9a03      	ldr	r2, [sp, #12]
 8029982:	0054      	lsls	r4, r2, #1
 8029984:	4a8a      	ldr	r2, [pc, #552]	@ (8029bb0 <__ieee754_pow+0x288>)
 8029986:	0864      	lsrs	r4, r4, #1
 8029988:	4294      	cmp	r4, r2
 802998a:	d80e      	bhi.n	80299aa <__ieee754_pow+0x82>
 802998c:	d105      	bne.n	802999a <__ieee754_pow+0x72>
 802998e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029990:	2a00      	cmp	r2, #0
 8029992:	d1e8      	bne.n	8029966 <__ieee754_pow+0x3e>
 8029994:	42a5      	cmp	r5, r4
 8029996:	d8e6      	bhi.n	8029966 <__ieee754_pow+0x3e>
 8029998:	e002      	b.n	80299a0 <__ieee754_pow+0x78>
 802999a:	4a85      	ldr	r2, [pc, #532]	@ (8029bb0 <__ieee754_pow+0x288>)
 802999c:	4295      	cmp	r5, r2
 802999e:	d804      	bhi.n	80299aa <__ieee754_pow+0x82>
 80299a0:	4a83      	ldr	r2, [pc, #524]	@ (8029bb0 <__ieee754_pow+0x288>)
 80299a2:	4295      	cmp	r5, r2
 80299a4:	d10c      	bne.n	80299c0 <__ieee754_pow+0x98>
 80299a6:	2b00      	cmp	r3, #0
 80299a8:	d00a      	beq.n	80299c0 <__ieee754_pow+0x98>
 80299aa:	4a82      	ldr	r2, [pc, #520]	@ (8029bb4 <__ieee754_pow+0x28c>)
 80299ac:	9b03      	ldr	r3, [sp, #12]
 80299ae:	189b      	adds	r3, r3, r2
 80299b0:	9a02      	ldr	r2, [sp, #8]
 80299b2:	4313      	orrs	r3, r2
 80299b4:	d1d7      	bne.n	8029966 <__ieee754_pow+0x3e>
 80299b6:	2180      	movs	r1, #128	@ 0x80
 80299b8:	9a04      	ldr	r2, [sp, #16]
 80299ba:	9805      	ldr	r0, [sp, #20]
 80299bc:	0309      	lsls	r1, r1, #12
 80299be:	e7c4      	b.n	802994a <__ieee754_pow+0x22>
 80299c0:	2600      	movs	r6, #0
 80299c2:	9a06      	ldr	r2, [sp, #24]
 80299c4:	9408      	str	r4, [sp, #32]
 80299c6:	42b2      	cmp	r2, r6
 80299c8:	da42      	bge.n	8029a50 <__ieee754_pow+0x128>
 80299ca:	4a7b      	ldr	r2, [pc, #492]	@ (8029bb8 <__ieee754_pow+0x290>)
 80299cc:	4295      	cmp	r5, r2
 80299ce:	d83e      	bhi.n	8029a4e <__ieee754_pow+0x126>
 80299d0:	4a7a      	ldr	r2, [pc, #488]	@ (8029bbc <__ieee754_pow+0x294>)
 80299d2:	4295      	cmp	r5, r2
 80299d4:	d910      	bls.n	80299f8 <__ieee754_pow+0xd0>
 80299d6:	497a      	ldr	r1, [pc, #488]	@ (8029bc0 <__ieee754_pow+0x298>)
 80299d8:	152a      	asrs	r2, r5, #20
 80299da:	1852      	adds	r2, r2, r1
 80299dc:	2a14      	cmp	r2, #20
 80299de:	dd18      	ble.n	8029a12 <__ieee754_pow+0xea>
 80299e0:	2134      	movs	r1, #52	@ 0x34
 80299e2:	1a89      	subs	r1, r1, r2
 80299e4:	9a04      	ldr	r2, [sp, #16]
 80299e6:	40ca      	lsrs	r2, r1
 80299e8:	0010      	movs	r0, r2
 80299ea:	4088      	lsls	r0, r1
 80299ec:	4298      	cmp	r0, r3
 80299ee:	d103      	bne.n	80299f8 <__ieee754_pow+0xd0>
 80299f0:	2101      	movs	r1, #1
 80299f2:	3602      	adds	r6, #2
 80299f4:	400a      	ands	r2, r1
 80299f6:	1ab6      	subs	r6, r6, r2
 80299f8:	2b00      	cmp	r3, #0
 80299fa:	d15b      	bne.n	8029ab4 <__ieee754_pow+0x18c>
 80299fc:	2380      	movs	r3, #128	@ 0x80
 80299fe:	05db      	lsls	r3, r3, #23
 8029a00:	429f      	cmp	r7, r3
 8029a02:	d14c      	bne.n	8029a9e <__ieee754_pow+0x176>
 8029a04:	9a02      	ldr	r2, [sp, #8]
 8029a06:	9b03      	ldr	r3, [sp, #12]
 8029a08:	0010      	movs	r0, r2
 8029a0a:	0019      	movs	r1, r3
 8029a0c:	f7d8 ffa2 	bl	8002954 <__aeabi_dmul>
 8029a10:	e7af      	b.n	8029972 <__ieee754_pow+0x4a>
 8029a12:	2b00      	cmp	r3, #0
 8029a14:	d14e      	bne.n	8029ab4 <__ieee754_pow+0x18c>
 8029a16:	3314      	adds	r3, #20
 8029a18:	1a9a      	subs	r2, r3, r2
 8029a1a:	002b      	movs	r3, r5
 8029a1c:	4113      	asrs	r3, r2
 8029a1e:	0019      	movs	r1, r3
 8029a20:	4091      	lsls	r1, r2
 8029a22:	42a9      	cmp	r1, r5
 8029a24:	d103      	bne.n	8029a2e <__ieee754_pow+0x106>
 8029a26:	2201      	movs	r2, #1
 8029a28:	2602      	movs	r6, #2
 8029a2a:	4013      	ands	r3, r2
 8029a2c:	1af6      	subs	r6, r6, r3
 8029a2e:	4b65      	ldr	r3, [pc, #404]	@ (8029bc4 <__ieee754_pow+0x29c>)
 8029a30:	429d      	cmp	r5, r3
 8029a32:	d1e3      	bne.n	80299fc <__ieee754_pow+0xd4>
 8029a34:	9b02      	ldr	r3, [sp, #8]
 8029a36:	9c03      	ldr	r4, [sp, #12]
 8029a38:	9300      	str	r3, [sp, #0]
 8029a3a:	9401      	str	r4, [sp, #4]
 8029a3c:	2f00      	cmp	r7, #0
 8029a3e:	da2a      	bge.n	8029a96 <__ieee754_pow+0x16e>
 8029a40:	001a      	movs	r2, r3
 8029a42:	2000      	movs	r0, #0
 8029a44:	0023      	movs	r3, r4
 8029a46:	495f      	ldr	r1, [pc, #380]	@ (8029bc4 <__ieee754_pow+0x29c>)
 8029a48:	f7d8 fb4a 	bl	80020e0 <__aeabi_ddiv>
 8029a4c:	e791      	b.n	8029972 <__ieee754_pow+0x4a>
 8029a4e:	2602      	movs	r6, #2
 8029a50:	2b00      	cmp	r3, #0
 8029a52:	d12f      	bne.n	8029ab4 <__ieee754_pow+0x18c>
 8029a54:	4b56      	ldr	r3, [pc, #344]	@ (8029bb0 <__ieee754_pow+0x288>)
 8029a56:	429d      	cmp	r5, r3
 8029a58:	d1e9      	bne.n	8029a2e <__ieee754_pow+0x106>
 8029a5a:	4b56      	ldr	r3, [pc, #344]	@ (8029bb4 <__ieee754_pow+0x28c>)
 8029a5c:	9a02      	ldr	r2, [sp, #8]
 8029a5e:	18e3      	adds	r3, r4, r3
 8029a60:	4313      	orrs	r3, r2
 8029a62:	d101      	bne.n	8029a68 <__ieee754_pow+0x140>
 8029a64:	f000 fc49 	bl	802a2fa <__ieee754_pow+0x9d2>
 8029a68:	4b54      	ldr	r3, [pc, #336]	@ (8029bbc <__ieee754_pow+0x294>)
 8029a6a:	429c      	cmp	r4, r3
 8029a6c:	d909      	bls.n	8029a82 <__ieee754_pow+0x15a>
 8029a6e:	9b04      	ldr	r3, [sp, #16]
 8029a70:	9c05      	ldr	r4, [sp, #20]
 8029a72:	9300      	str	r3, [sp, #0]
 8029a74:	9401      	str	r4, [sp, #4]
 8029a76:	2f00      	cmp	r7, #0
 8029a78:	da0d      	bge.n	8029a96 <__ieee754_pow+0x16e>
 8029a7a:	2300      	movs	r3, #0
 8029a7c:	2400      	movs	r4, #0
 8029a7e:	f000 fc3e 	bl	802a2fe <__ieee754_pow+0x9d6>
 8029a82:	2f00      	cmp	r7, #0
 8029a84:	daf9      	bge.n	8029a7a <__ieee754_pow+0x152>
 8029a86:	2280      	movs	r2, #128	@ 0x80
 8029a88:	0612      	lsls	r2, r2, #24
 8029a8a:	4694      	mov	ip, r2
 8029a8c:	9b04      	ldr	r3, [sp, #16]
 8029a8e:	9300      	str	r3, [sp, #0]
 8029a90:	9b05      	ldr	r3, [sp, #20]
 8029a92:	4463      	add	r3, ip
 8029a94:	9301      	str	r3, [sp, #4]
 8029a96:	9800      	ldr	r0, [sp, #0]
 8029a98:	9901      	ldr	r1, [sp, #4]
 8029a9a:	b015      	add	sp, #84	@ 0x54
 8029a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8029bc8 <__ieee754_pow+0x2a0>)
 8029aa0:	429f      	cmp	r7, r3
 8029aa2:	d107      	bne.n	8029ab4 <__ieee754_pow+0x18c>
 8029aa4:	9b06      	ldr	r3, [sp, #24]
 8029aa6:	2b00      	cmp	r3, #0
 8029aa8:	db04      	blt.n	8029ab4 <__ieee754_pow+0x18c>
 8029aaa:	9802      	ldr	r0, [sp, #8]
 8029aac:	9903      	ldr	r1, [sp, #12]
 8029aae:	f000 fe03 	bl	802a6b8 <__ieee754_sqrt>
 8029ab2:	e75e      	b.n	8029972 <__ieee754_pow+0x4a>
 8029ab4:	9802      	ldr	r0, [sp, #8]
 8029ab6:	9903      	ldr	r1, [sp, #12]
 8029ab8:	f000 fc4e 	bl	802a358 <fabs>
 8029abc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029abe:	9000      	str	r0, [sp, #0]
 8029ac0:	9101      	str	r1, [sp, #4]
 8029ac2:	2b00      	cmp	r3, #0
 8029ac4:	d12c      	bne.n	8029b20 <__ieee754_pow+0x1f8>
 8029ac6:	9b03      	ldr	r3, [sp, #12]
 8029ac8:	4a3e      	ldr	r2, [pc, #248]	@ (8029bc4 <__ieee754_pow+0x29c>)
 8029aca:	009b      	lsls	r3, r3, #2
 8029acc:	089b      	lsrs	r3, r3, #2
 8029ace:	4293      	cmp	r3, r2
 8029ad0:	d001      	beq.n	8029ad6 <__ieee754_pow+0x1ae>
 8029ad2:	2c00      	cmp	r4, #0
 8029ad4:	d124      	bne.n	8029b20 <__ieee754_pow+0x1f8>
 8029ad6:	2f00      	cmp	r7, #0
 8029ad8:	da07      	bge.n	8029aea <__ieee754_pow+0x1c2>
 8029ada:	9a00      	ldr	r2, [sp, #0]
 8029adc:	9b01      	ldr	r3, [sp, #4]
 8029ade:	2000      	movs	r0, #0
 8029ae0:	4938      	ldr	r1, [pc, #224]	@ (8029bc4 <__ieee754_pow+0x29c>)
 8029ae2:	f7d8 fafd 	bl	80020e0 <__aeabi_ddiv>
 8029ae6:	9000      	str	r0, [sp, #0]
 8029ae8:	9101      	str	r1, [sp, #4]
 8029aea:	9b06      	ldr	r3, [sp, #24]
 8029aec:	2b00      	cmp	r3, #0
 8029aee:	dad2      	bge.n	8029a96 <__ieee754_pow+0x16e>
 8029af0:	4b30      	ldr	r3, [pc, #192]	@ (8029bb4 <__ieee754_pow+0x28c>)
 8029af2:	18e4      	adds	r4, r4, r3
 8029af4:	4334      	orrs	r4, r6
 8029af6:	d108      	bne.n	8029b0a <__ieee754_pow+0x1e2>
 8029af8:	9a00      	ldr	r2, [sp, #0]
 8029afa:	9b01      	ldr	r3, [sp, #4]
 8029afc:	0010      	movs	r0, r2
 8029afe:	0019      	movs	r1, r3
 8029b00:	f7d9 fa0e 	bl	8002f20 <__aeabi_dsub>
 8029b04:	0002      	movs	r2, r0
 8029b06:	000b      	movs	r3, r1
 8029b08:	e79e      	b.n	8029a48 <__ieee754_pow+0x120>
 8029b0a:	2e01      	cmp	r6, #1
 8029b0c:	d1c3      	bne.n	8029a96 <__ieee754_pow+0x16e>
 8029b0e:	9800      	ldr	r0, [sp, #0]
 8029b10:	2180      	movs	r1, #128	@ 0x80
 8029b12:	0002      	movs	r2, r0
 8029b14:	9801      	ldr	r0, [sp, #4]
 8029b16:	0609      	lsls	r1, r1, #24
 8029b18:	1843      	adds	r3, r0, r1
 8029b1a:	9200      	str	r2, [sp, #0]
 8029b1c:	9301      	str	r3, [sp, #4]
 8029b1e:	e7ba      	b.n	8029a96 <__ieee754_pow+0x16e>
 8029b20:	9b03      	ldr	r3, [sp, #12]
 8029b22:	0fdb      	lsrs	r3, r3, #31
 8029b24:	3b01      	subs	r3, #1
 8029b26:	001a      	movs	r2, r3
 8029b28:	4332      	orrs	r2, r6
 8029b2a:	d102      	bne.n	8029b32 <__ieee754_pow+0x20a>
 8029b2c:	9a02      	ldr	r2, [sp, #8]
 8029b2e:	9b03      	ldr	r3, [sp, #12]
 8029b30:	e7e4      	b.n	8029afc <__ieee754_pow+0x1d4>
 8029b32:	3e01      	subs	r6, #1
 8029b34:	2200      	movs	r2, #0
 8029b36:	431e      	orrs	r6, r3
 8029b38:	d013      	beq.n	8029b62 <__ieee754_pow+0x23a>
 8029b3a:	4b22      	ldr	r3, [pc, #136]	@ (8029bc4 <__ieee754_pow+0x29c>)
 8029b3c:	9206      	str	r2, [sp, #24]
 8029b3e:	9307      	str	r3, [sp, #28]
 8029b40:	2384      	movs	r3, #132	@ 0x84
 8029b42:	05db      	lsls	r3, r3, #23
 8029b44:	429d      	cmp	r5, r3
 8029b46:	d800      	bhi.n	8029b4a <__ieee754_pow+0x222>
 8029b48:	e0fa      	b.n	8029d40 <__ieee754_pow+0x418>
 8029b4a:	4b20      	ldr	r3, [pc, #128]	@ (8029bcc <__ieee754_pow+0x2a4>)
 8029b4c:	429d      	cmp	r5, r3
 8029b4e:	d910      	bls.n	8029b72 <__ieee754_pow+0x24a>
 8029b50:	4b1a      	ldr	r3, [pc, #104]	@ (8029bbc <__ieee754_pow+0x294>)
 8029b52:	429c      	cmp	r4, r3
 8029b54:	d807      	bhi.n	8029b66 <__ieee754_pow+0x23e>
 8029b56:	2f00      	cmp	r7, #0
 8029b58:	da07      	bge.n	8029b6a <__ieee754_pow+0x242>
 8029b5a:	2000      	movs	r0, #0
 8029b5c:	f000 fd82 	bl	802a664 <__math_oflow>
 8029b60:	e707      	b.n	8029972 <__ieee754_pow+0x4a>
 8029b62:	4b1b      	ldr	r3, [pc, #108]	@ (8029bd0 <__ieee754_pow+0x2a8>)
 8029b64:	e7ea      	b.n	8029b3c <__ieee754_pow+0x214>
 8029b66:	2f00      	cmp	r7, #0
 8029b68:	dcf7      	bgt.n	8029b5a <__ieee754_pow+0x232>
 8029b6a:	2000      	movs	r0, #0
 8029b6c:	f000 fd73 	bl	802a656 <__math_uflow>
 8029b70:	e6ff      	b.n	8029972 <__ieee754_pow+0x4a>
 8029b72:	4b18      	ldr	r3, [pc, #96]	@ (8029bd4 <__ieee754_pow+0x2ac>)
 8029b74:	429c      	cmp	r4, r3
 8029b76:	d80a      	bhi.n	8029b8e <__ieee754_pow+0x266>
 8029b78:	9806      	ldr	r0, [sp, #24]
 8029b7a:	9907      	ldr	r1, [sp, #28]
 8029b7c:	2300      	movs	r3, #0
 8029b7e:	2200      	movs	r2, #0
 8029b80:	f7d6 fc9c 	bl	80004bc <__aeabi_dcmplt>
 8029b84:	1e43      	subs	r3, r0, #1
 8029b86:	4198      	sbcs	r0, r3
 8029b88:	2f00      	cmp	r7, #0
 8029b8a:	daef      	bge.n	8029b6c <__ieee754_pow+0x244>
 8029b8c:	e7e6      	b.n	8029b5c <__ieee754_pow+0x234>
 8029b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8029bc4 <__ieee754_pow+0x29c>)
 8029b90:	2200      	movs	r2, #0
 8029b92:	429c      	cmp	r4, r3
 8029b94:	d920      	bls.n	8029bd8 <__ieee754_pow+0x2b0>
 8029b96:	9806      	ldr	r0, [sp, #24]
 8029b98:	9907      	ldr	r1, [sp, #28]
 8029b9a:	2300      	movs	r3, #0
 8029b9c:	f7d6 fc8e 	bl	80004bc <__aeabi_dcmplt>
 8029ba0:	1e43      	subs	r3, r0, #1
 8029ba2:	4198      	sbcs	r0, r3
 8029ba4:	2f00      	cmp	r7, #0
 8029ba6:	dcd9      	bgt.n	8029b5c <__ieee754_pow+0x234>
 8029ba8:	e7e0      	b.n	8029b6c <__ieee754_pow+0x244>
 8029baa:	46c0      	nop			@ (mov r8, r8)
 8029bac:	fff00000 	.word	0xfff00000
 8029bb0:	7ff00000 	.word	0x7ff00000
 8029bb4:	c0100000 	.word	0xc0100000
 8029bb8:	433fffff 	.word	0x433fffff
 8029bbc:	3fefffff 	.word	0x3fefffff
 8029bc0:	fffffc01 	.word	0xfffffc01
 8029bc4:	3ff00000 	.word	0x3ff00000
 8029bc8:	3fe00000 	.word	0x3fe00000
 8029bcc:	43f00000 	.word	0x43f00000
 8029bd0:	bff00000 	.word	0xbff00000
 8029bd4:	3feffffe 	.word	0x3feffffe
 8029bd8:	9800      	ldr	r0, [sp, #0]
 8029bda:	9901      	ldr	r1, [sp, #4]
 8029bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8029d14 <__ieee754_pow+0x3ec>)
 8029bde:	f7d9 f99f 	bl	8002f20 <__aeabi_dsub>
 8029be2:	22c0      	movs	r2, #192	@ 0xc0
 8029be4:	4b4c      	ldr	r3, [pc, #304]	@ (8029d18 <__ieee754_pow+0x3f0>)
 8029be6:	05d2      	lsls	r2, r2, #23
 8029be8:	0006      	movs	r6, r0
 8029bea:	000f      	movs	r7, r1
 8029bec:	f7d8 feb2 	bl	8002954 <__aeabi_dmul>
 8029bf0:	4a4a      	ldr	r2, [pc, #296]	@ (8029d1c <__ieee754_pow+0x3f4>)
 8029bf2:	9002      	str	r0, [sp, #8]
 8029bf4:	9103      	str	r1, [sp, #12]
 8029bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8029d20 <__ieee754_pow+0x3f8>)
 8029bf8:	0030      	movs	r0, r6
 8029bfa:	0039      	movs	r1, r7
 8029bfc:	f7d8 feaa 	bl	8002954 <__aeabi_dmul>
 8029c00:	2200      	movs	r2, #0
 8029c02:	9000      	str	r0, [sp, #0]
 8029c04:	9101      	str	r1, [sp, #4]
 8029c06:	4b47      	ldr	r3, [pc, #284]	@ (8029d24 <__ieee754_pow+0x3fc>)
 8029c08:	0030      	movs	r0, r6
 8029c0a:	0039      	movs	r1, r7
 8029c0c:	f7d8 fea2 	bl	8002954 <__aeabi_dmul>
 8029c10:	0002      	movs	r2, r0
 8029c12:	000b      	movs	r3, r1
 8029c14:	4844      	ldr	r0, [pc, #272]	@ (8029d28 <__ieee754_pow+0x400>)
 8029c16:	4945      	ldr	r1, [pc, #276]	@ (8029d2c <__ieee754_pow+0x404>)
 8029c18:	f7d9 f982 	bl	8002f20 <__aeabi_dsub>
 8029c1c:	0032      	movs	r2, r6
 8029c1e:	003b      	movs	r3, r7
 8029c20:	f7d8 fe98 	bl	8002954 <__aeabi_dmul>
 8029c24:	0002      	movs	r2, r0
 8029c26:	000b      	movs	r3, r1
 8029c28:	2000      	movs	r0, #0
 8029c2a:	4941      	ldr	r1, [pc, #260]	@ (8029d30 <__ieee754_pow+0x408>)
 8029c2c:	f7d9 f978 	bl	8002f20 <__aeabi_dsub>
 8029c30:	0032      	movs	r2, r6
 8029c32:	0004      	movs	r4, r0
 8029c34:	000d      	movs	r5, r1
 8029c36:	003b      	movs	r3, r7
 8029c38:	0030      	movs	r0, r6
 8029c3a:	0039      	movs	r1, r7
 8029c3c:	f7d8 fe8a 	bl	8002954 <__aeabi_dmul>
 8029c40:	0002      	movs	r2, r0
 8029c42:	000b      	movs	r3, r1
 8029c44:	0020      	movs	r0, r4
 8029c46:	0029      	movs	r1, r5
 8029c48:	f7d8 fe84 	bl	8002954 <__aeabi_dmul>
 8029c4c:	4a39      	ldr	r2, [pc, #228]	@ (8029d34 <__ieee754_pow+0x40c>)
 8029c4e:	4b32      	ldr	r3, [pc, #200]	@ (8029d18 <__ieee754_pow+0x3f0>)
 8029c50:	f7d8 fe80 	bl	8002954 <__aeabi_dmul>
 8029c54:	0002      	movs	r2, r0
 8029c56:	000b      	movs	r3, r1
 8029c58:	9800      	ldr	r0, [sp, #0]
 8029c5a:	9901      	ldr	r1, [sp, #4]
 8029c5c:	f7d9 f960 	bl	8002f20 <__aeabi_dsub>
 8029c60:	0002      	movs	r2, r0
 8029c62:	000b      	movs	r3, r1
 8029c64:	0004      	movs	r4, r0
 8029c66:	000d      	movs	r5, r1
 8029c68:	9802      	ldr	r0, [sp, #8]
 8029c6a:	9903      	ldr	r1, [sp, #12]
 8029c6c:	f7d7 fe72 	bl	8001954 <__aeabi_dadd>
 8029c70:	9a02      	ldr	r2, [sp, #8]
 8029c72:	9b03      	ldr	r3, [sp, #12]
 8029c74:	2000      	movs	r0, #0
 8029c76:	9000      	str	r0, [sp, #0]
 8029c78:	9101      	str	r1, [sp, #4]
 8029c7a:	f7d9 f951 	bl	8002f20 <__aeabi_dsub>
 8029c7e:	0002      	movs	r2, r0
 8029c80:	000b      	movs	r3, r1
 8029c82:	0020      	movs	r0, r4
 8029c84:	0029      	movs	r1, r5
 8029c86:	f7d9 f94b 	bl	8002f20 <__aeabi_dsub>
 8029c8a:	9c04      	ldr	r4, [sp, #16]
 8029c8c:	9d05      	ldr	r5, [sp, #20]
 8029c8e:	2400      	movs	r4, #0
 8029c90:	0006      	movs	r6, r0
 8029c92:	000f      	movs	r7, r1
 8029c94:	9804      	ldr	r0, [sp, #16]
 8029c96:	9905      	ldr	r1, [sp, #20]
 8029c98:	0022      	movs	r2, r4
 8029c9a:	002b      	movs	r3, r5
 8029c9c:	9402      	str	r4, [sp, #8]
 8029c9e:	9503      	str	r5, [sp, #12]
 8029ca0:	f7d9 f93e 	bl	8002f20 <__aeabi_dsub>
 8029ca4:	9a00      	ldr	r2, [sp, #0]
 8029ca6:	9b01      	ldr	r3, [sp, #4]
 8029ca8:	f7d8 fe54 	bl	8002954 <__aeabi_dmul>
 8029cac:	9a04      	ldr	r2, [sp, #16]
 8029cae:	9b05      	ldr	r3, [sp, #20]
 8029cb0:	9008      	str	r0, [sp, #32]
 8029cb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8029cb4:	0030      	movs	r0, r6
 8029cb6:	0039      	movs	r1, r7
 8029cb8:	f7d8 fe4c 	bl	8002954 <__aeabi_dmul>
 8029cbc:	0002      	movs	r2, r0
 8029cbe:	000b      	movs	r3, r1
 8029cc0:	9808      	ldr	r0, [sp, #32]
 8029cc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029cc4:	f7d7 fe46 	bl	8001954 <__aeabi_dadd>
 8029cc8:	0022      	movs	r2, r4
 8029cca:	002b      	movs	r3, r5
 8029ccc:	9004      	str	r0, [sp, #16]
 8029cce:	9105      	str	r1, [sp, #20]
 8029cd0:	9800      	ldr	r0, [sp, #0]
 8029cd2:	9901      	ldr	r1, [sp, #4]
 8029cd4:	f7d8 fe3e 	bl	8002954 <__aeabi_dmul>
 8029cd8:	000b      	movs	r3, r1
 8029cda:	0002      	movs	r2, r0
 8029cdc:	9000      	str	r0, [sp, #0]
 8029cde:	9101      	str	r1, [sp, #4]
 8029ce0:	9804      	ldr	r0, [sp, #16]
 8029ce2:	9905      	ldr	r1, [sp, #20]
 8029ce4:	f7d7 fe36 	bl	8001954 <__aeabi_dadd>
 8029ce8:	4b13      	ldr	r3, [pc, #76]	@ (8029d38 <__ieee754_pow+0x410>)
 8029cea:	0006      	movs	r6, r0
 8029cec:	000f      	movs	r7, r1
 8029cee:	9108      	str	r1, [sp, #32]
 8029cf0:	4299      	cmp	r1, r3
 8029cf2:	dc00      	bgt.n	8029cf6 <__ieee754_pow+0x3ce>
 8029cf4:	e1c0      	b.n	802a078 <__ieee754_pow+0x750>
 8029cf6:	4b11      	ldr	r3, [pc, #68]	@ (8029d3c <__ieee754_pow+0x414>)
 8029cf8:	18cb      	adds	r3, r1, r3
 8029cfa:	4303      	orrs	r3, r0
 8029cfc:	42a3      	cmp	r3, r4
 8029cfe:	d100      	bne.n	8029d02 <__ieee754_pow+0x3da>
 8029d00:	e1a1      	b.n	802a046 <__ieee754_pow+0x71e>
 8029d02:	9806      	ldr	r0, [sp, #24]
 8029d04:	9907      	ldr	r1, [sp, #28]
 8029d06:	2300      	movs	r3, #0
 8029d08:	2200      	movs	r2, #0
 8029d0a:	f7d6 fbd7 	bl	80004bc <__aeabi_dcmplt>
 8029d0e:	1e43      	subs	r3, r0, #1
 8029d10:	4198      	sbcs	r0, r3
 8029d12:	e723      	b.n	8029b5c <__ieee754_pow+0x234>
 8029d14:	3ff00000 	.word	0x3ff00000
 8029d18:	3ff71547 	.word	0x3ff71547
 8029d1c:	f85ddf44 	.word	0xf85ddf44
 8029d20:	3e54ae0b 	.word	0x3e54ae0b
 8029d24:	3fd00000 	.word	0x3fd00000
 8029d28:	55555555 	.word	0x55555555
 8029d2c:	3fd55555 	.word	0x3fd55555
 8029d30:	3fe00000 	.word	0x3fe00000
 8029d34:	652b82fe 	.word	0x652b82fe
 8029d38:	408fffff 	.word	0x408fffff
 8029d3c:	bf700000 	.word	0xbf700000
 8029d40:	4bdc      	ldr	r3, [pc, #880]	@ (802a0b4 <__ieee754_pow+0x78c>)
 8029d42:	9903      	ldr	r1, [sp, #12]
 8029d44:	2200      	movs	r2, #0
 8029d46:	420b      	tst	r3, r1
 8029d48:	d10b      	bne.n	8029d62 <__ieee754_pow+0x43a>
 8029d4a:	9800      	ldr	r0, [sp, #0]
 8029d4c:	9901      	ldr	r1, [sp, #4]
 8029d4e:	2200      	movs	r2, #0
 8029d50:	4bd9      	ldr	r3, [pc, #868]	@ (802a0b8 <__ieee754_pow+0x790>)
 8029d52:	f7d8 fdff 	bl	8002954 <__aeabi_dmul>
 8029d56:	2235      	movs	r2, #53	@ 0x35
 8029d58:	9000      	str	r0, [sp, #0]
 8029d5a:	9101      	str	r1, [sp, #4]
 8029d5c:	9b01      	ldr	r3, [sp, #4]
 8029d5e:	4252      	negs	r2, r2
 8029d60:	9308      	str	r3, [sp, #32]
 8029d62:	9b08      	ldr	r3, [sp, #32]
 8029d64:	49d5      	ldr	r1, [pc, #852]	@ (802a0bc <__ieee754_pow+0x794>)
 8029d66:	151b      	asrs	r3, r3, #20
 8029d68:	185b      	adds	r3, r3, r1
 8029d6a:	189b      	adds	r3, r3, r2
 8029d6c:	930e      	str	r3, [sp, #56]	@ 0x38
 8029d6e:	9b08      	ldr	r3, [sp, #32]
 8029d70:	4dd3      	ldr	r5, [pc, #844]	@ (802a0c0 <__ieee754_pow+0x798>)
 8029d72:	031b      	lsls	r3, r3, #12
 8029d74:	4ad3      	ldr	r2, [pc, #844]	@ (802a0c4 <__ieee754_pow+0x79c>)
 8029d76:	0b1b      	lsrs	r3, r3, #12
 8029d78:	2600      	movs	r6, #0
 8029d7a:	431d      	orrs	r5, r3
 8029d7c:	4293      	cmp	r3, r2
 8029d7e:	dd09      	ble.n	8029d94 <__ieee754_pow+0x46c>
 8029d80:	4ad1      	ldr	r2, [pc, #836]	@ (802a0c8 <__ieee754_pow+0x7a0>)
 8029d82:	3601      	adds	r6, #1
 8029d84:	4293      	cmp	r3, r2
 8029d86:	dd05      	ble.n	8029d94 <__ieee754_pow+0x46c>
 8029d88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029d8a:	199b      	adds	r3, r3, r6
 8029d8c:	2600      	movs	r6, #0
 8029d8e:	930e      	str	r3, [sp, #56]	@ 0x38
 8029d90:	4bce      	ldr	r3, [pc, #824]	@ (802a0cc <__ieee754_pow+0x7a4>)
 8029d92:	18ed      	adds	r5, r5, r3
 8029d94:	9800      	ldr	r0, [sp, #0]
 8029d96:	9901      	ldr	r1, [sp, #4]
 8029d98:	0029      	movs	r1, r5
 8029d9a:	4bcd      	ldr	r3, [pc, #820]	@ (802a0d0 <__ieee754_pow+0x7a8>)
 8029d9c:	00f2      	lsls	r2, r6, #3
 8029d9e:	189b      	adds	r3, r3, r2
 8029da0:	685c      	ldr	r4, [r3, #4]
 8029da2:	681b      	ldr	r3, [r3, #0]
 8029da4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8029da6:	930a      	str	r3, [sp, #40]	@ 0x28
 8029da8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8029daa:	001a      	movs	r2, r3
 8029dac:	0023      	movs	r3, r4
 8029dae:	900c      	str	r0, [sp, #48]	@ 0x30
 8029db0:	910d      	str	r1, [sp, #52]	@ 0x34
 8029db2:	f7d9 f8b5 	bl	8002f20 <__aeabi_dsub>
 8029db6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029db8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029dba:	9010      	str	r0, [sp, #64]	@ 0x40
 8029dbc:	9111      	str	r1, [sp, #68]	@ 0x44
 8029dbe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029dc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029dc2:	f7d7 fdc7 	bl	8001954 <__aeabi_dadd>
 8029dc6:	0002      	movs	r2, r0
 8029dc8:	000b      	movs	r3, r1
 8029dca:	2000      	movs	r0, #0
 8029dcc:	49bc      	ldr	r1, [pc, #752]	@ (802a0c0 <__ieee754_pow+0x798>)
 8029dce:	f7d8 f987 	bl	80020e0 <__aeabi_ddiv>
 8029dd2:	0002      	movs	r2, r0
 8029dd4:	000b      	movs	r3, r1
 8029dd6:	9012      	str	r0, [sp, #72]	@ 0x48
 8029dd8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8029dda:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029ddc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029dde:	f7d8 fdb9 	bl	8002954 <__aeabi_dmul>
 8029de2:	9008      	str	r0, [sp, #32]
 8029de4:	9109      	str	r1, [sp, #36]	@ 0x24
 8029de6:	9b08      	ldr	r3, [sp, #32]
 8029de8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8029dea:	2180      	movs	r1, #128	@ 0x80
 8029dec:	9302      	str	r3, [sp, #8]
 8029dee:	9403      	str	r4, [sp, #12]
 8029df0:	2080      	movs	r0, #128	@ 0x80
 8029df2:	2300      	movs	r3, #0
 8029df4:	2200      	movs	r2, #0
 8029df6:	106d      	asrs	r5, r5, #1
 8029df8:	0589      	lsls	r1, r1, #22
 8029dfa:	9302      	str	r3, [sp, #8]
 8029dfc:	4329      	orrs	r1, r5
 8029dfe:	0300      	lsls	r0, r0, #12
 8029e00:	9b02      	ldr	r3, [sp, #8]
 8029e02:	9c03      	ldr	r4, [sp, #12]
 8029e04:	1809      	adds	r1, r1, r0
 8029e06:	9300      	str	r3, [sp, #0]
 8029e08:	9401      	str	r4, [sp, #4]
 8029e0a:	04b6      	lsls	r6, r6, #18
 8029e0c:	198b      	adds	r3, r1, r6
 8029e0e:	9800      	ldr	r0, [sp, #0]
 8029e10:	9901      	ldr	r1, [sp, #4]
 8029e12:	0014      	movs	r4, r2
 8029e14:	001d      	movs	r5, r3
 8029e16:	f7d8 fd9d 	bl	8002954 <__aeabi_dmul>
 8029e1a:	0002      	movs	r2, r0
 8029e1c:	000b      	movs	r3, r1
 8029e1e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029e20:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029e22:	f7d9 f87d 	bl	8002f20 <__aeabi_dsub>
 8029e26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029e28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029e2a:	0006      	movs	r6, r0
 8029e2c:	000f      	movs	r7, r1
 8029e2e:	0020      	movs	r0, r4
 8029e30:	0029      	movs	r1, r5
 8029e32:	f7d9 f875 	bl	8002f20 <__aeabi_dsub>
 8029e36:	0002      	movs	r2, r0
 8029e38:	000b      	movs	r3, r1
 8029e3a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029e3c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029e3e:	f7d9 f86f 	bl	8002f20 <__aeabi_dsub>
 8029e42:	9a00      	ldr	r2, [sp, #0]
 8029e44:	9b01      	ldr	r3, [sp, #4]
 8029e46:	f7d8 fd85 	bl	8002954 <__aeabi_dmul>
 8029e4a:	0002      	movs	r2, r0
 8029e4c:	000b      	movs	r3, r1
 8029e4e:	0030      	movs	r0, r6
 8029e50:	0039      	movs	r1, r7
 8029e52:	f7d9 f865 	bl	8002f20 <__aeabi_dsub>
 8029e56:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8029e58:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029e5a:	f7d8 fd7b 	bl	8002954 <__aeabi_dmul>
 8029e5e:	9a08      	ldr	r2, [sp, #32]
 8029e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029e62:	900a      	str	r0, [sp, #40]	@ 0x28
 8029e64:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029e66:	0010      	movs	r0, r2
 8029e68:	0019      	movs	r1, r3
 8029e6a:	f7d8 fd73 	bl	8002954 <__aeabi_dmul>
 8029e6e:	0006      	movs	r6, r0
 8029e70:	000f      	movs	r7, r1
 8029e72:	4a98      	ldr	r2, [pc, #608]	@ (802a0d4 <__ieee754_pow+0x7ac>)
 8029e74:	4b98      	ldr	r3, [pc, #608]	@ (802a0d8 <__ieee754_pow+0x7b0>)
 8029e76:	f7d8 fd6d 	bl	8002954 <__aeabi_dmul>
 8029e7a:	4a98      	ldr	r2, [pc, #608]	@ (802a0dc <__ieee754_pow+0x7b4>)
 8029e7c:	4b98      	ldr	r3, [pc, #608]	@ (802a0e0 <__ieee754_pow+0x7b8>)
 8029e7e:	f7d7 fd69 	bl	8001954 <__aeabi_dadd>
 8029e82:	0032      	movs	r2, r6
 8029e84:	003b      	movs	r3, r7
 8029e86:	f7d8 fd65 	bl	8002954 <__aeabi_dmul>
 8029e8a:	4a96      	ldr	r2, [pc, #600]	@ (802a0e4 <__ieee754_pow+0x7bc>)
 8029e8c:	4b96      	ldr	r3, [pc, #600]	@ (802a0e8 <__ieee754_pow+0x7c0>)
 8029e8e:	f7d7 fd61 	bl	8001954 <__aeabi_dadd>
 8029e92:	0032      	movs	r2, r6
 8029e94:	003b      	movs	r3, r7
 8029e96:	f7d8 fd5d 	bl	8002954 <__aeabi_dmul>
 8029e9a:	4a94      	ldr	r2, [pc, #592]	@ (802a0ec <__ieee754_pow+0x7c4>)
 8029e9c:	4b94      	ldr	r3, [pc, #592]	@ (802a0f0 <__ieee754_pow+0x7c8>)
 8029e9e:	f7d7 fd59 	bl	8001954 <__aeabi_dadd>
 8029ea2:	0032      	movs	r2, r6
 8029ea4:	003b      	movs	r3, r7
 8029ea6:	f7d8 fd55 	bl	8002954 <__aeabi_dmul>
 8029eaa:	4a92      	ldr	r2, [pc, #584]	@ (802a0f4 <__ieee754_pow+0x7cc>)
 8029eac:	4b92      	ldr	r3, [pc, #584]	@ (802a0f8 <__ieee754_pow+0x7d0>)
 8029eae:	f7d7 fd51 	bl	8001954 <__aeabi_dadd>
 8029eb2:	0032      	movs	r2, r6
 8029eb4:	003b      	movs	r3, r7
 8029eb6:	f7d8 fd4d 	bl	8002954 <__aeabi_dmul>
 8029eba:	4a90      	ldr	r2, [pc, #576]	@ (802a0fc <__ieee754_pow+0x7d4>)
 8029ebc:	4b90      	ldr	r3, [pc, #576]	@ (802a100 <__ieee754_pow+0x7d8>)
 8029ebe:	f7d7 fd49 	bl	8001954 <__aeabi_dadd>
 8029ec2:	0032      	movs	r2, r6
 8029ec4:	0004      	movs	r4, r0
 8029ec6:	000d      	movs	r5, r1
 8029ec8:	003b      	movs	r3, r7
 8029eca:	0030      	movs	r0, r6
 8029ecc:	0039      	movs	r1, r7
 8029ece:	f7d8 fd41 	bl	8002954 <__aeabi_dmul>
 8029ed2:	0002      	movs	r2, r0
 8029ed4:	000b      	movs	r3, r1
 8029ed6:	0020      	movs	r0, r4
 8029ed8:	0029      	movs	r1, r5
 8029eda:	f7d8 fd3b 	bl	8002954 <__aeabi_dmul>
 8029ede:	9a00      	ldr	r2, [sp, #0]
 8029ee0:	9b01      	ldr	r3, [sp, #4]
 8029ee2:	0004      	movs	r4, r0
 8029ee4:	000d      	movs	r5, r1
 8029ee6:	9808      	ldr	r0, [sp, #32]
 8029ee8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029eea:	f7d7 fd33 	bl	8001954 <__aeabi_dadd>
 8029eee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029ef0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029ef2:	f7d8 fd2f 	bl	8002954 <__aeabi_dmul>
 8029ef6:	0022      	movs	r2, r4
 8029ef8:	002b      	movs	r3, r5
 8029efa:	f7d7 fd2b 	bl	8001954 <__aeabi_dadd>
 8029efe:	9a00      	ldr	r2, [sp, #0]
 8029f00:	9b01      	ldr	r3, [sp, #4]
 8029f02:	900c      	str	r0, [sp, #48]	@ 0x30
 8029f04:	910d      	str	r1, [sp, #52]	@ 0x34
 8029f06:	0010      	movs	r0, r2
 8029f08:	0019      	movs	r1, r3
 8029f0a:	f7d8 fd23 	bl	8002954 <__aeabi_dmul>
 8029f0e:	2200      	movs	r2, #0
 8029f10:	4b7c      	ldr	r3, [pc, #496]	@ (802a104 <__ieee754_pow+0x7dc>)
 8029f12:	0004      	movs	r4, r0
 8029f14:	000d      	movs	r5, r1
 8029f16:	f7d7 fd1d 	bl	8001954 <__aeabi_dadd>
 8029f1a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029f1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029f1e:	f7d7 fd19 	bl	8001954 <__aeabi_dadd>
 8029f22:	2000      	movs	r0, #0
 8029f24:	000f      	movs	r7, r1
 8029f26:	0006      	movs	r6, r0
 8029f28:	0002      	movs	r2, r0
 8029f2a:	000b      	movs	r3, r1
 8029f2c:	9800      	ldr	r0, [sp, #0]
 8029f2e:	9901      	ldr	r1, [sp, #4]
 8029f30:	f7d8 fd10 	bl	8002954 <__aeabi_dmul>
 8029f34:	2200      	movs	r2, #0
 8029f36:	9000      	str	r0, [sp, #0]
 8029f38:	9101      	str	r1, [sp, #4]
 8029f3a:	4b72      	ldr	r3, [pc, #456]	@ (802a104 <__ieee754_pow+0x7dc>)
 8029f3c:	0030      	movs	r0, r6
 8029f3e:	0039      	movs	r1, r7
 8029f40:	f7d8 ffee 	bl	8002f20 <__aeabi_dsub>
 8029f44:	0022      	movs	r2, r4
 8029f46:	002b      	movs	r3, r5
 8029f48:	f7d8 ffea 	bl	8002f20 <__aeabi_dsub>
 8029f4c:	0002      	movs	r2, r0
 8029f4e:	000b      	movs	r3, r1
 8029f50:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029f52:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029f54:	f7d8 ffe4 	bl	8002f20 <__aeabi_dsub>
 8029f58:	9a08      	ldr	r2, [sp, #32]
 8029f5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029f5c:	f7d8 fcfa 	bl	8002954 <__aeabi_dmul>
 8029f60:	0032      	movs	r2, r6
 8029f62:	0004      	movs	r4, r0
 8029f64:	000d      	movs	r5, r1
 8029f66:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029f68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029f6a:	003b      	movs	r3, r7
 8029f6c:	f7d8 fcf2 	bl	8002954 <__aeabi_dmul>
 8029f70:	0002      	movs	r2, r0
 8029f72:	000b      	movs	r3, r1
 8029f74:	0020      	movs	r0, r4
 8029f76:	0029      	movs	r1, r5
 8029f78:	f7d7 fcec 	bl	8001954 <__aeabi_dadd>
 8029f7c:	0004      	movs	r4, r0
 8029f7e:	000d      	movs	r5, r1
 8029f80:	0002      	movs	r2, r0
 8029f82:	000b      	movs	r3, r1
 8029f84:	9800      	ldr	r0, [sp, #0]
 8029f86:	9901      	ldr	r1, [sp, #4]
 8029f88:	f7d7 fce4 	bl	8001954 <__aeabi_dadd>
 8029f8c:	22e0      	movs	r2, #224	@ 0xe0
 8029f8e:	2000      	movs	r0, #0
 8029f90:	4b5d      	ldr	r3, [pc, #372]	@ (802a108 <__ieee754_pow+0x7e0>)
 8029f92:	0612      	lsls	r2, r2, #24
 8029f94:	0006      	movs	r6, r0
 8029f96:	000f      	movs	r7, r1
 8029f98:	f7d8 fcdc 	bl	8002954 <__aeabi_dmul>
 8029f9c:	9008      	str	r0, [sp, #32]
 8029f9e:	9109      	str	r1, [sp, #36]	@ 0x24
 8029fa0:	9a00      	ldr	r2, [sp, #0]
 8029fa2:	9b01      	ldr	r3, [sp, #4]
 8029fa4:	0030      	movs	r0, r6
 8029fa6:	0039      	movs	r1, r7
 8029fa8:	f7d8 ffba 	bl	8002f20 <__aeabi_dsub>
 8029fac:	0002      	movs	r2, r0
 8029fae:	000b      	movs	r3, r1
 8029fb0:	0020      	movs	r0, r4
 8029fb2:	0029      	movs	r1, r5
 8029fb4:	f7d8 ffb4 	bl	8002f20 <__aeabi_dsub>
 8029fb8:	4a54      	ldr	r2, [pc, #336]	@ (802a10c <__ieee754_pow+0x7e4>)
 8029fba:	4b53      	ldr	r3, [pc, #332]	@ (802a108 <__ieee754_pow+0x7e0>)
 8029fbc:	f7d8 fcca 	bl	8002954 <__aeabi_dmul>
 8029fc0:	4a53      	ldr	r2, [pc, #332]	@ (802a110 <__ieee754_pow+0x7e8>)
 8029fc2:	0004      	movs	r4, r0
 8029fc4:	000d      	movs	r5, r1
 8029fc6:	0030      	movs	r0, r6
 8029fc8:	0039      	movs	r1, r7
 8029fca:	4b52      	ldr	r3, [pc, #328]	@ (802a114 <__ieee754_pow+0x7ec>)
 8029fcc:	f7d8 fcc2 	bl	8002954 <__aeabi_dmul>
 8029fd0:	0002      	movs	r2, r0
 8029fd2:	000b      	movs	r3, r1
 8029fd4:	0020      	movs	r0, r4
 8029fd6:	0029      	movs	r1, r5
 8029fd8:	f7d7 fcbc 	bl	8001954 <__aeabi_dadd>
 8029fdc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029fde:	4b4e      	ldr	r3, [pc, #312]	@ (802a118 <__ieee754_pow+0x7f0>)
 8029fe0:	189b      	adds	r3, r3, r2
 8029fe2:	681a      	ldr	r2, [r3, #0]
 8029fe4:	685b      	ldr	r3, [r3, #4]
 8029fe6:	f7d7 fcb5 	bl	8001954 <__aeabi_dadd>
 8029fea:	900a      	str	r0, [sp, #40]	@ 0x28
 8029fec:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029fee:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8029ff0:	f7d9 fbfe 	bl	80037f0 <__aeabi_i2d>
 8029ff4:	0004      	movs	r4, r0
 8029ff6:	000d      	movs	r5, r1
 8029ff8:	9808      	ldr	r0, [sp, #32]
 8029ffa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029ffc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029ffe:	4b47      	ldr	r3, [pc, #284]	@ (802a11c <__ieee754_pow+0x7f4>)
 802a000:	189b      	adds	r3, r3, r2
 802a002:	681e      	ldr	r6, [r3, #0]
 802a004:	685f      	ldr	r7, [r3, #4]
 802a006:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a008:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a00a:	f7d7 fca3 	bl	8001954 <__aeabi_dadd>
 802a00e:	0032      	movs	r2, r6
 802a010:	003b      	movs	r3, r7
 802a012:	f7d7 fc9f 	bl	8001954 <__aeabi_dadd>
 802a016:	0022      	movs	r2, r4
 802a018:	002b      	movs	r3, r5
 802a01a:	f7d7 fc9b 	bl	8001954 <__aeabi_dadd>
 802a01e:	2000      	movs	r0, #0
 802a020:	0022      	movs	r2, r4
 802a022:	002b      	movs	r3, r5
 802a024:	9000      	str	r0, [sp, #0]
 802a026:	9101      	str	r1, [sp, #4]
 802a028:	f7d8 ff7a 	bl	8002f20 <__aeabi_dsub>
 802a02c:	0032      	movs	r2, r6
 802a02e:	003b      	movs	r3, r7
 802a030:	f7d8 ff76 	bl	8002f20 <__aeabi_dsub>
 802a034:	9a08      	ldr	r2, [sp, #32]
 802a036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a038:	f7d8 ff72 	bl	8002f20 <__aeabi_dsub>
 802a03c:	0002      	movs	r2, r0
 802a03e:	000b      	movs	r3, r1
 802a040:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802a042:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802a044:	e61f      	b.n	8029c86 <__ieee754_pow+0x35e>
 802a046:	4a36      	ldr	r2, [pc, #216]	@ (802a120 <__ieee754_pow+0x7f8>)
 802a048:	4b36      	ldr	r3, [pc, #216]	@ (802a124 <__ieee754_pow+0x7fc>)
 802a04a:	9804      	ldr	r0, [sp, #16]
 802a04c:	9905      	ldr	r1, [sp, #20]
 802a04e:	f7d7 fc81 	bl	8001954 <__aeabi_dadd>
 802a052:	9a00      	ldr	r2, [sp, #0]
 802a054:	9b01      	ldr	r3, [sp, #4]
 802a056:	0004      	movs	r4, r0
 802a058:	000d      	movs	r5, r1
 802a05a:	0030      	movs	r0, r6
 802a05c:	0039      	movs	r1, r7
 802a05e:	f7d8 ff5f 	bl	8002f20 <__aeabi_dsub>
 802a062:	0002      	movs	r2, r0
 802a064:	000b      	movs	r3, r1
 802a066:	0020      	movs	r0, r4
 802a068:	0029      	movs	r1, r5
 802a06a:	f7d6 fa3b 	bl	80004e4 <__aeabi_dcmpgt>
 802a06e:	2800      	cmp	r0, #0
 802a070:	d000      	beq.n	802a074 <__ieee754_pow+0x74c>
 802a072:	e646      	b.n	8029d02 <__ieee754_pow+0x3da>
 802a074:	4b2c      	ldr	r3, [pc, #176]	@ (802a128 <__ieee754_pow+0x800>)
 802a076:	e063      	b.n	802a140 <__ieee754_pow+0x818>
 802a078:	4a2c      	ldr	r2, [pc, #176]	@ (802a12c <__ieee754_pow+0x804>)
 802a07a:	004b      	lsls	r3, r1, #1
 802a07c:	085b      	lsrs	r3, r3, #1
 802a07e:	4293      	cmp	r3, r2
 802a080:	d95a      	bls.n	802a138 <__ieee754_pow+0x810>
 802a082:	4b2b      	ldr	r3, [pc, #172]	@ (802a130 <__ieee754_pow+0x808>)
 802a084:	18cb      	adds	r3, r1, r3
 802a086:	4303      	orrs	r3, r0
 802a088:	d008      	beq.n	802a09c <__ieee754_pow+0x774>
 802a08a:	9806      	ldr	r0, [sp, #24]
 802a08c:	9907      	ldr	r1, [sp, #28]
 802a08e:	2300      	movs	r3, #0
 802a090:	2200      	movs	r2, #0
 802a092:	f7d6 fa13 	bl	80004bc <__aeabi_dcmplt>
 802a096:	1e43      	subs	r3, r0, #1
 802a098:	4198      	sbcs	r0, r3
 802a09a:	e567      	b.n	8029b6c <__ieee754_pow+0x244>
 802a09c:	9a00      	ldr	r2, [sp, #0]
 802a09e:	9b01      	ldr	r3, [sp, #4]
 802a0a0:	f7d8 ff3e 	bl	8002f20 <__aeabi_dsub>
 802a0a4:	9a04      	ldr	r2, [sp, #16]
 802a0a6:	9b05      	ldr	r3, [sp, #20]
 802a0a8:	f7d6 fa26 	bl	80004f8 <__aeabi_dcmpge>
 802a0ac:	2800      	cmp	r0, #0
 802a0ae:	d1ec      	bne.n	802a08a <__ieee754_pow+0x762>
 802a0b0:	4b20      	ldr	r3, [pc, #128]	@ (802a134 <__ieee754_pow+0x80c>)
 802a0b2:	e045      	b.n	802a140 <__ieee754_pow+0x818>
 802a0b4:	7ff00000 	.word	0x7ff00000
 802a0b8:	43400000 	.word	0x43400000
 802a0bc:	fffffc01 	.word	0xfffffc01
 802a0c0:	3ff00000 	.word	0x3ff00000
 802a0c4:	0003988e 	.word	0x0003988e
 802a0c8:	000bb679 	.word	0x000bb679
 802a0cc:	fff00000 	.word	0xfff00000
 802a0d0:	0802f258 	.word	0x0802f258
 802a0d4:	4a454eef 	.word	0x4a454eef
 802a0d8:	3fca7e28 	.word	0x3fca7e28
 802a0dc:	93c9db65 	.word	0x93c9db65
 802a0e0:	3fcd864a 	.word	0x3fcd864a
 802a0e4:	a91d4101 	.word	0xa91d4101
 802a0e8:	3fd17460 	.word	0x3fd17460
 802a0ec:	518f264d 	.word	0x518f264d
 802a0f0:	3fd55555 	.word	0x3fd55555
 802a0f4:	db6fabff 	.word	0xdb6fabff
 802a0f8:	3fdb6db6 	.word	0x3fdb6db6
 802a0fc:	33333303 	.word	0x33333303
 802a100:	3fe33333 	.word	0x3fe33333
 802a104:	40080000 	.word	0x40080000
 802a108:	3feec709 	.word	0x3feec709
 802a10c:	dc3a03fd 	.word	0xdc3a03fd
 802a110:	145b01f5 	.word	0x145b01f5
 802a114:	be3e2fe0 	.word	0xbe3e2fe0
 802a118:	0802f238 	.word	0x0802f238
 802a11c:	0802f248 	.word	0x0802f248
 802a120:	652b82fe 	.word	0x652b82fe
 802a124:	3c971547 	.word	0x3c971547
 802a128:	40900000 	.word	0x40900000
 802a12c:	4090cbff 	.word	0x4090cbff
 802a130:	3f6f3400 	.word	0x3f6f3400
 802a134:	4090cc00 	.word	0x4090cc00
 802a138:	4a73      	ldr	r2, [pc, #460]	@ (802a308 <__ieee754_pow+0x9e0>)
 802a13a:	9402      	str	r4, [sp, #8]
 802a13c:	4293      	cmp	r3, r2
 802a13e:	d925      	bls.n	802a18c <__ieee754_pow+0x864>
 802a140:	4a72      	ldr	r2, [pc, #456]	@ (802a30c <__ieee754_pow+0x9e4>)
 802a142:	151b      	asrs	r3, r3, #20
 802a144:	189b      	adds	r3, r3, r2
 802a146:	2280      	movs	r2, #128	@ 0x80
 802a148:	0352      	lsls	r2, r2, #13
 802a14a:	0011      	movs	r1, r2
 802a14c:	4119      	asrs	r1, r3
 802a14e:	19cb      	adds	r3, r1, r7
 802a150:	005c      	lsls	r4, r3, #1
 802a152:	496f      	ldr	r1, [pc, #444]	@ (802a310 <__ieee754_pow+0x9e8>)
 802a154:	4d6f      	ldr	r5, [pc, #444]	@ (802a314 <__ieee754_pow+0x9ec>)
 802a156:	0d64      	lsrs	r4, r4, #21
 802a158:	1864      	adds	r4, r4, r1
 802a15a:	4125      	asrs	r5, r4
 802a15c:	401d      	ands	r5, r3
 802a15e:	031b      	lsls	r3, r3, #12
 802a160:	0b1b      	lsrs	r3, r3, #12
 802a162:	4313      	orrs	r3, r2
 802a164:	2214      	movs	r2, #20
 802a166:	1b12      	subs	r2, r2, r4
 802a168:	4113      	asrs	r3, r2
 802a16a:	9302      	str	r3, [sp, #8]
 802a16c:	9b08      	ldr	r3, [sp, #32]
 802a16e:	2000      	movs	r0, #0
 802a170:	0029      	movs	r1, r5
 802a172:	2b00      	cmp	r3, #0
 802a174:	da02      	bge.n	802a17c <__ieee754_pow+0x854>
 802a176:	9b02      	ldr	r3, [sp, #8]
 802a178:	425b      	negs	r3, r3
 802a17a:	9302      	str	r3, [sp, #8]
 802a17c:	0002      	movs	r2, r0
 802a17e:	000b      	movs	r3, r1
 802a180:	9800      	ldr	r0, [sp, #0]
 802a182:	9901      	ldr	r1, [sp, #4]
 802a184:	f7d8 fecc 	bl	8002f20 <__aeabi_dsub>
 802a188:	9000      	str	r0, [sp, #0]
 802a18a:	9101      	str	r1, [sp, #4]
 802a18c:	9a04      	ldr	r2, [sp, #16]
 802a18e:	9b05      	ldr	r3, [sp, #20]
 802a190:	9800      	ldr	r0, [sp, #0]
 802a192:	9901      	ldr	r1, [sp, #4]
 802a194:	f7d7 fbde 	bl	8001954 <__aeabi_dadd>
 802a198:	2000      	movs	r0, #0
 802a19a:	2200      	movs	r2, #0
 802a19c:	4b5e      	ldr	r3, [pc, #376]	@ (802a318 <__ieee754_pow+0x9f0>)
 802a19e:	0006      	movs	r6, r0
 802a1a0:	000f      	movs	r7, r1
 802a1a2:	f7d8 fbd7 	bl	8002954 <__aeabi_dmul>
 802a1a6:	9a00      	ldr	r2, [sp, #0]
 802a1a8:	9b01      	ldr	r3, [sp, #4]
 802a1aa:	9008      	str	r0, [sp, #32]
 802a1ac:	9109      	str	r1, [sp, #36]	@ 0x24
 802a1ae:	0030      	movs	r0, r6
 802a1b0:	0039      	movs	r1, r7
 802a1b2:	f7d8 feb5 	bl	8002f20 <__aeabi_dsub>
 802a1b6:	0002      	movs	r2, r0
 802a1b8:	000b      	movs	r3, r1
 802a1ba:	9804      	ldr	r0, [sp, #16]
 802a1bc:	9905      	ldr	r1, [sp, #20]
 802a1be:	f7d8 feaf 	bl	8002f20 <__aeabi_dsub>
 802a1c2:	4a56      	ldr	r2, [pc, #344]	@ (802a31c <__ieee754_pow+0x9f4>)
 802a1c4:	4b56      	ldr	r3, [pc, #344]	@ (802a320 <__ieee754_pow+0x9f8>)
 802a1c6:	f7d8 fbc5 	bl	8002954 <__aeabi_dmul>
 802a1ca:	4a56      	ldr	r2, [pc, #344]	@ (802a324 <__ieee754_pow+0x9fc>)
 802a1cc:	0004      	movs	r4, r0
 802a1ce:	000d      	movs	r5, r1
 802a1d0:	0030      	movs	r0, r6
 802a1d2:	0039      	movs	r1, r7
 802a1d4:	4b54      	ldr	r3, [pc, #336]	@ (802a328 <__ieee754_pow+0xa00>)
 802a1d6:	f7d8 fbbd 	bl	8002954 <__aeabi_dmul>
 802a1da:	0002      	movs	r2, r0
 802a1dc:	000b      	movs	r3, r1
 802a1de:	0020      	movs	r0, r4
 802a1e0:	0029      	movs	r1, r5
 802a1e2:	f7d7 fbb7 	bl	8001954 <__aeabi_dadd>
 802a1e6:	0004      	movs	r4, r0
 802a1e8:	000d      	movs	r5, r1
 802a1ea:	0002      	movs	r2, r0
 802a1ec:	000b      	movs	r3, r1
 802a1ee:	9808      	ldr	r0, [sp, #32]
 802a1f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802a1f2:	f7d7 fbaf 	bl	8001954 <__aeabi_dadd>
 802a1f6:	9a08      	ldr	r2, [sp, #32]
 802a1f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a1fa:	0006      	movs	r6, r0
 802a1fc:	000f      	movs	r7, r1
 802a1fe:	f7d8 fe8f 	bl	8002f20 <__aeabi_dsub>
 802a202:	0002      	movs	r2, r0
 802a204:	000b      	movs	r3, r1
 802a206:	0020      	movs	r0, r4
 802a208:	0029      	movs	r1, r5
 802a20a:	f7d8 fe89 	bl	8002f20 <__aeabi_dsub>
 802a20e:	0032      	movs	r2, r6
 802a210:	9000      	str	r0, [sp, #0]
 802a212:	9101      	str	r1, [sp, #4]
 802a214:	003b      	movs	r3, r7
 802a216:	0030      	movs	r0, r6
 802a218:	0039      	movs	r1, r7
 802a21a:	f7d8 fb9b 	bl	8002954 <__aeabi_dmul>
 802a21e:	0004      	movs	r4, r0
 802a220:	000d      	movs	r5, r1
 802a222:	4a42      	ldr	r2, [pc, #264]	@ (802a32c <__ieee754_pow+0xa04>)
 802a224:	4b42      	ldr	r3, [pc, #264]	@ (802a330 <__ieee754_pow+0xa08>)
 802a226:	f7d8 fb95 	bl	8002954 <__aeabi_dmul>
 802a22a:	4a42      	ldr	r2, [pc, #264]	@ (802a334 <__ieee754_pow+0xa0c>)
 802a22c:	4b42      	ldr	r3, [pc, #264]	@ (802a338 <__ieee754_pow+0xa10>)
 802a22e:	f7d8 fe77 	bl	8002f20 <__aeabi_dsub>
 802a232:	0022      	movs	r2, r4
 802a234:	002b      	movs	r3, r5
 802a236:	f7d8 fb8d 	bl	8002954 <__aeabi_dmul>
 802a23a:	4a40      	ldr	r2, [pc, #256]	@ (802a33c <__ieee754_pow+0xa14>)
 802a23c:	4b40      	ldr	r3, [pc, #256]	@ (802a340 <__ieee754_pow+0xa18>)
 802a23e:	f7d7 fb89 	bl	8001954 <__aeabi_dadd>
 802a242:	0022      	movs	r2, r4
 802a244:	002b      	movs	r3, r5
 802a246:	f7d8 fb85 	bl	8002954 <__aeabi_dmul>
 802a24a:	4a3e      	ldr	r2, [pc, #248]	@ (802a344 <__ieee754_pow+0xa1c>)
 802a24c:	4b3e      	ldr	r3, [pc, #248]	@ (802a348 <__ieee754_pow+0xa20>)
 802a24e:	f7d8 fe67 	bl	8002f20 <__aeabi_dsub>
 802a252:	0022      	movs	r2, r4
 802a254:	002b      	movs	r3, r5
 802a256:	f7d8 fb7d 	bl	8002954 <__aeabi_dmul>
 802a25a:	4a3c      	ldr	r2, [pc, #240]	@ (802a34c <__ieee754_pow+0xa24>)
 802a25c:	4b3c      	ldr	r3, [pc, #240]	@ (802a350 <__ieee754_pow+0xa28>)
 802a25e:	f7d7 fb79 	bl	8001954 <__aeabi_dadd>
 802a262:	0022      	movs	r2, r4
 802a264:	002b      	movs	r3, r5
 802a266:	f7d8 fb75 	bl	8002954 <__aeabi_dmul>
 802a26a:	0002      	movs	r2, r0
 802a26c:	000b      	movs	r3, r1
 802a26e:	0030      	movs	r0, r6
 802a270:	0039      	movs	r1, r7
 802a272:	f7d8 fe55 	bl	8002f20 <__aeabi_dsub>
 802a276:	0004      	movs	r4, r0
 802a278:	000d      	movs	r5, r1
 802a27a:	0002      	movs	r2, r0
 802a27c:	000b      	movs	r3, r1
 802a27e:	0030      	movs	r0, r6
 802a280:	0039      	movs	r1, r7
 802a282:	f7d8 fb67 	bl	8002954 <__aeabi_dmul>
 802a286:	2380      	movs	r3, #128	@ 0x80
 802a288:	9004      	str	r0, [sp, #16]
 802a28a:	9105      	str	r1, [sp, #20]
 802a28c:	2200      	movs	r2, #0
 802a28e:	0020      	movs	r0, r4
 802a290:	0029      	movs	r1, r5
 802a292:	05db      	lsls	r3, r3, #23
 802a294:	f7d8 fe44 	bl	8002f20 <__aeabi_dsub>
 802a298:	0002      	movs	r2, r0
 802a29a:	000b      	movs	r3, r1
 802a29c:	9804      	ldr	r0, [sp, #16]
 802a29e:	9905      	ldr	r1, [sp, #20]
 802a2a0:	f7d7 ff1e 	bl	80020e0 <__aeabi_ddiv>
 802a2a4:	9a00      	ldr	r2, [sp, #0]
 802a2a6:	9b01      	ldr	r3, [sp, #4]
 802a2a8:	0004      	movs	r4, r0
 802a2aa:	000d      	movs	r5, r1
 802a2ac:	0030      	movs	r0, r6
 802a2ae:	0039      	movs	r1, r7
 802a2b0:	f7d8 fb50 	bl	8002954 <__aeabi_dmul>
 802a2b4:	9a00      	ldr	r2, [sp, #0]
 802a2b6:	9b01      	ldr	r3, [sp, #4]
 802a2b8:	f7d7 fb4c 	bl	8001954 <__aeabi_dadd>
 802a2bc:	0002      	movs	r2, r0
 802a2be:	000b      	movs	r3, r1
 802a2c0:	0020      	movs	r0, r4
 802a2c2:	0029      	movs	r1, r5
 802a2c4:	f7d8 fe2c 	bl	8002f20 <__aeabi_dsub>
 802a2c8:	0032      	movs	r2, r6
 802a2ca:	003b      	movs	r3, r7
 802a2cc:	f7d8 fe28 	bl	8002f20 <__aeabi_dsub>
 802a2d0:	0002      	movs	r2, r0
 802a2d2:	000b      	movs	r3, r1
 802a2d4:	2000      	movs	r0, #0
 802a2d6:	491f      	ldr	r1, [pc, #124]	@ (802a354 <__ieee754_pow+0xa2c>)
 802a2d8:	f7d8 fe22 	bl	8002f20 <__aeabi_dsub>
 802a2dc:	9b02      	ldr	r3, [sp, #8]
 802a2de:	051b      	lsls	r3, r3, #20
 802a2e0:	185b      	adds	r3, r3, r1
 802a2e2:	151a      	asrs	r2, r3, #20
 802a2e4:	2a00      	cmp	r2, #0
 802a2e6:	dc06      	bgt.n	802a2f6 <__ieee754_pow+0x9ce>
 802a2e8:	9a02      	ldr	r2, [sp, #8]
 802a2ea:	f000 f929 	bl	802a540 <scalbn>
 802a2ee:	9a06      	ldr	r2, [sp, #24]
 802a2f0:	9b07      	ldr	r3, [sp, #28]
 802a2f2:	f7ff fb8b 	bl	8029a0c <__ieee754_pow+0xe4>
 802a2f6:	0019      	movs	r1, r3
 802a2f8:	e7f9      	b.n	802a2ee <__ieee754_pow+0x9c6>
 802a2fa:	2300      	movs	r3, #0
 802a2fc:	4c15      	ldr	r4, [pc, #84]	@ (802a354 <__ieee754_pow+0xa2c>)
 802a2fe:	9300      	str	r3, [sp, #0]
 802a300:	9401      	str	r4, [sp, #4]
 802a302:	f7ff fbc8 	bl	8029a96 <__ieee754_pow+0x16e>
 802a306:	46c0      	nop			@ (mov r8, r8)
 802a308:	3fe00000 	.word	0x3fe00000
 802a30c:	fffffc02 	.word	0xfffffc02
 802a310:	fffffc01 	.word	0xfffffc01
 802a314:	fff00000 	.word	0xfff00000
 802a318:	3fe62e43 	.word	0x3fe62e43
 802a31c:	fefa39ef 	.word	0xfefa39ef
 802a320:	3fe62e42 	.word	0x3fe62e42
 802a324:	0ca86c39 	.word	0x0ca86c39
 802a328:	be205c61 	.word	0xbe205c61
 802a32c:	72bea4d0 	.word	0x72bea4d0
 802a330:	3e663769 	.word	0x3e663769
 802a334:	c5d26bf1 	.word	0xc5d26bf1
 802a338:	3ebbbd41 	.word	0x3ebbbd41
 802a33c:	af25de2c 	.word	0xaf25de2c
 802a340:	3f11566a 	.word	0x3f11566a
 802a344:	16bebd93 	.word	0x16bebd93
 802a348:	3f66c16c 	.word	0x3f66c16c
 802a34c:	5555553e 	.word	0x5555553e
 802a350:	3fc55555 	.word	0x3fc55555
 802a354:	3ff00000 	.word	0x3ff00000

0802a358 <fabs>:
 802a358:	0049      	lsls	r1, r1, #1
 802a35a:	084b      	lsrs	r3, r1, #1
 802a35c:	0019      	movs	r1, r3
 802a35e:	4770      	bx	lr

0802a360 <__ieee754_expf>:
 802a360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a362:	21ff      	movs	r1, #255	@ 0xff
 802a364:	0043      	lsls	r3, r0, #1
 802a366:	1c04      	adds	r4, r0, #0
 802a368:	085b      	lsrs	r3, r3, #1
 802a36a:	05c9      	lsls	r1, r1, #23
 802a36c:	428b      	cmp	r3, r1
 802a36e:	d904      	bls.n	802a37a <__ieee754_expf+0x1a>
 802a370:	1c01      	adds	r1, r0, #0
 802a372:	1c20      	adds	r0, r4, #0
 802a374:	f7d6 faa4 	bl	80008c0 <__aeabi_fadd>
 802a378:	e00d      	b.n	802a396 <__ieee754_expf+0x36>
 802a37a:	0fc6      	lsrs	r6, r0, #31
 802a37c:	428b      	cmp	r3, r1
 802a37e:	d104      	bne.n	802a38a <__ieee754_expf+0x2a>
 802a380:	2e00      	cmp	r6, #0
 802a382:	d000      	beq.n	802a386 <__ieee754_expf+0x26>
 802a384:	e0ba      	b.n	802a4fc <__ieee754_expf+0x19c>
 802a386:	1c20      	adds	r0, r4, #0
 802a388:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802a38a:	495d      	ldr	r1, [pc, #372]	@ (802a500 <__ieee754_expf+0x1a0>)
 802a38c:	4288      	cmp	r0, r1
 802a38e:	dd04      	ble.n	802a39a <__ieee754_expf+0x3a>
 802a390:	2000      	movs	r0, #0
 802a392:	f000 f98a 	bl	802a6aa <__math_oflowf>
 802a396:	1c04      	adds	r4, r0, #0
 802a398:	e7f5      	b.n	802a386 <__ieee754_expf+0x26>
 802a39a:	2800      	cmp	r0, #0
 802a39c:	da06      	bge.n	802a3ac <__ieee754_expf+0x4c>
 802a39e:	4a59      	ldr	r2, [pc, #356]	@ (802a504 <__ieee754_expf+0x1a4>)
 802a3a0:	4293      	cmp	r3, r2
 802a3a2:	d903      	bls.n	802a3ac <__ieee754_expf+0x4c>
 802a3a4:	2000      	movs	r0, #0
 802a3a6:	f000 f97a 	bl	802a69e <__math_uflowf>
 802a3aa:	e7f4      	b.n	802a396 <__ieee754_expf+0x36>
 802a3ac:	4a56      	ldr	r2, [pc, #344]	@ (802a508 <__ieee754_expf+0x1a8>)
 802a3ae:	4293      	cmp	r3, r2
 802a3b0:	d96e      	bls.n	802a490 <__ieee754_expf+0x130>
 802a3b2:	4a56      	ldr	r2, [pc, #344]	@ (802a50c <__ieee754_expf+0x1ac>)
 802a3b4:	00b5      	lsls	r5, r6, #2
 802a3b6:	4293      	cmp	r3, r2
 802a3b8:	d84e      	bhi.n	802a458 <__ieee754_expf+0xf8>
 802a3ba:	4b55      	ldr	r3, [pc, #340]	@ (802a510 <__ieee754_expf+0x1b0>)
 802a3bc:	1c20      	adds	r0, r4, #0
 802a3be:	5959      	ldr	r1, [r3, r5]
 802a3c0:	f7d6 ff98 	bl	80012f4 <__aeabi_fsub>
 802a3c4:	4b53      	ldr	r3, [pc, #332]	@ (802a514 <__ieee754_expf+0x1b4>)
 802a3c6:	1c07      	adds	r7, r0, #0
 802a3c8:	595b      	ldr	r3, [r3, r5]
 802a3ca:	2501      	movs	r5, #1
 802a3cc:	4075      	eors	r5, r6
 802a3ce:	9300      	str	r3, [sp, #0]
 802a3d0:	1bad      	subs	r5, r5, r6
 802a3d2:	9900      	ldr	r1, [sp, #0]
 802a3d4:	1c38      	adds	r0, r7, #0
 802a3d6:	f7d6 ff8d 	bl	80012f4 <__aeabi_fsub>
 802a3da:	1c04      	adds	r4, r0, #0
 802a3dc:	1c21      	adds	r1, r4, #0
 802a3de:	1c20      	adds	r0, r4, #0
 802a3e0:	f7d6 fe2e 	bl	8001040 <__aeabi_fmul>
 802a3e4:	494c      	ldr	r1, [pc, #304]	@ (802a518 <__ieee754_expf+0x1b8>)
 802a3e6:	1c06      	adds	r6, r0, #0
 802a3e8:	f7d6 fe2a 	bl	8001040 <__aeabi_fmul>
 802a3ec:	494b      	ldr	r1, [pc, #300]	@ (802a51c <__ieee754_expf+0x1bc>)
 802a3ee:	f7d6 ff81 	bl	80012f4 <__aeabi_fsub>
 802a3f2:	1c31      	adds	r1, r6, #0
 802a3f4:	f7d6 fe24 	bl	8001040 <__aeabi_fmul>
 802a3f8:	4949      	ldr	r1, [pc, #292]	@ (802a520 <__ieee754_expf+0x1c0>)
 802a3fa:	f7d6 fa61 	bl	80008c0 <__aeabi_fadd>
 802a3fe:	1c31      	adds	r1, r6, #0
 802a400:	f7d6 fe1e 	bl	8001040 <__aeabi_fmul>
 802a404:	4947      	ldr	r1, [pc, #284]	@ (802a524 <__ieee754_expf+0x1c4>)
 802a406:	f7d6 ff75 	bl	80012f4 <__aeabi_fsub>
 802a40a:	1c31      	adds	r1, r6, #0
 802a40c:	f7d6 fe18 	bl	8001040 <__aeabi_fmul>
 802a410:	4945      	ldr	r1, [pc, #276]	@ (802a528 <__ieee754_expf+0x1c8>)
 802a412:	f7d6 fa55 	bl	80008c0 <__aeabi_fadd>
 802a416:	1c31      	adds	r1, r6, #0
 802a418:	f7d6 fe12 	bl	8001040 <__aeabi_fmul>
 802a41c:	1c01      	adds	r1, r0, #0
 802a41e:	1c20      	adds	r0, r4, #0
 802a420:	f7d6 ff68 	bl	80012f4 <__aeabi_fsub>
 802a424:	1c01      	adds	r1, r0, #0
 802a426:	1c06      	adds	r6, r0, #0
 802a428:	1c20      	adds	r0, r4, #0
 802a42a:	f7d6 fe09 	bl	8001040 <__aeabi_fmul>
 802a42e:	9001      	str	r0, [sp, #4]
 802a430:	2d00      	cmp	r5, #0
 802a432:	d140      	bne.n	802a4b6 <__ieee754_expf+0x156>
 802a434:	2180      	movs	r1, #128	@ 0x80
 802a436:	1c30      	adds	r0, r6, #0
 802a438:	05c9      	lsls	r1, r1, #23
 802a43a:	f7d6 ff5b 	bl	80012f4 <__aeabi_fsub>
 802a43e:	1c01      	adds	r1, r0, #0
 802a440:	9801      	ldr	r0, [sp, #4]
 802a442:	f7d6 fc2f 	bl	8000ca4 <__aeabi_fdiv>
 802a446:	1c21      	adds	r1, r4, #0
 802a448:	f7d6 ff54 	bl	80012f4 <__aeabi_fsub>
 802a44c:	1c01      	adds	r1, r0, #0
 802a44e:	20fe      	movs	r0, #254	@ 0xfe
 802a450:	0580      	lsls	r0, r0, #22
 802a452:	f7d6 ff4f 	bl	80012f4 <__aeabi_fsub>
 802a456:	e79e      	b.n	802a396 <__ieee754_expf+0x36>
 802a458:	4934      	ldr	r1, [pc, #208]	@ (802a52c <__ieee754_expf+0x1cc>)
 802a45a:	1c20      	adds	r0, r4, #0
 802a45c:	f7d6 fdf0 	bl	8001040 <__aeabi_fmul>
 802a460:	4b33      	ldr	r3, [pc, #204]	@ (802a530 <__ieee754_expf+0x1d0>)
 802a462:	5959      	ldr	r1, [r3, r5]
 802a464:	f7d6 fa2c 	bl	80008c0 <__aeabi_fadd>
 802a468:	f7d7 f9be 	bl	80017e8 <__aeabi_f2iz>
 802a46c:	0005      	movs	r5, r0
 802a46e:	f7d7 f9db 	bl	8001828 <__aeabi_i2f>
 802a472:	4930      	ldr	r1, [pc, #192]	@ (802a534 <__ieee754_expf+0x1d4>)
 802a474:	1c06      	adds	r6, r0, #0
 802a476:	f7d6 fde3 	bl	8001040 <__aeabi_fmul>
 802a47a:	1c01      	adds	r1, r0, #0
 802a47c:	1c20      	adds	r0, r4, #0
 802a47e:	f7d6 ff39 	bl	80012f4 <__aeabi_fsub>
 802a482:	492d      	ldr	r1, [pc, #180]	@ (802a538 <__ieee754_expf+0x1d8>)
 802a484:	1c07      	adds	r7, r0, #0
 802a486:	1c30      	adds	r0, r6, #0
 802a488:	f7d6 fdda 	bl	8001040 <__aeabi_fmul>
 802a48c:	9000      	str	r0, [sp, #0]
 802a48e:	e7a0      	b.n	802a3d2 <__ieee754_expf+0x72>
 802a490:	22d0      	movs	r2, #208	@ 0xd0
 802a492:	0592      	lsls	r2, r2, #22
 802a494:	4293      	cmp	r3, r2
 802a496:	d20c      	bcs.n	802a4b2 <__ieee754_expf+0x152>
 802a498:	4928      	ldr	r1, [pc, #160]	@ (802a53c <__ieee754_expf+0x1dc>)
 802a49a:	1c20      	adds	r0, r4, #0
 802a49c:	f7d6 fa10 	bl	80008c0 <__aeabi_fadd>
 802a4a0:	21fe      	movs	r1, #254	@ 0xfe
 802a4a2:	0589      	lsls	r1, r1, #22
 802a4a4:	f7d6 f858 	bl	8000558 <__aeabi_fcmpgt>
 802a4a8:	1e05      	subs	r5, r0, #0
 802a4aa:	d097      	beq.n	802a3dc <__ieee754_expf+0x7c>
 802a4ac:	21fe      	movs	r1, #254	@ 0xfe
 802a4ae:	0589      	lsls	r1, r1, #22
 802a4b0:	e75f      	b.n	802a372 <__ieee754_expf+0x12>
 802a4b2:	2500      	movs	r5, #0
 802a4b4:	e792      	b.n	802a3dc <__ieee754_expf+0x7c>
 802a4b6:	2080      	movs	r0, #128	@ 0x80
 802a4b8:	1c31      	adds	r1, r6, #0
 802a4ba:	05c0      	lsls	r0, r0, #23
 802a4bc:	f7d6 ff1a 	bl	80012f4 <__aeabi_fsub>
 802a4c0:	1c01      	adds	r1, r0, #0
 802a4c2:	9801      	ldr	r0, [sp, #4]
 802a4c4:	f7d6 fbee 	bl	8000ca4 <__aeabi_fdiv>
 802a4c8:	1c01      	adds	r1, r0, #0
 802a4ca:	9800      	ldr	r0, [sp, #0]
 802a4cc:	f7d6 ff12 	bl	80012f4 <__aeabi_fsub>
 802a4d0:	1c39      	adds	r1, r7, #0
 802a4d2:	f7d6 ff0f 	bl	80012f4 <__aeabi_fsub>
 802a4d6:	1c01      	adds	r1, r0, #0
 802a4d8:	20fe      	movs	r0, #254	@ 0xfe
 802a4da:	0580      	lsls	r0, r0, #22
 802a4dc:	f7d6 ff0a 	bl	80012f4 <__aeabi_fsub>
 802a4e0:	002b      	movs	r3, r5
 802a4e2:	337d      	adds	r3, #125	@ 0x7d
 802a4e4:	db02      	blt.n	802a4ec <__ieee754_expf+0x18c>
 802a4e6:	05ec      	lsls	r4, r5, #23
 802a4e8:	1824      	adds	r4, r4, r0
 802a4ea:	e74c      	b.n	802a386 <__ieee754_expf+0x26>
 802a4ec:	21d8      	movs	r1, #216	@ 0xd8
 802a4ee:	3564      	adds	r5, #100	@ 0x64
 802a4f0:	05ed      	lsls	r5, r5, #23
 802a4f2:	1828      	adds	r0, r5, r0
 802a4f4:	0509      	lsls	r1, r1, #20
 802a4f6:	f7d6 fda3 	bl	8001040 <__aeabi_fmul>
 802a4fa:	e74c      	b.n	802a396 <__ieee754_expf+0x36>
 802a4fc:	2400      	movs	r4, #0
 802a4fe:	e742      	b.n	802a386 <__ieee754_expf+0x26>
 802a500:	42b17217 	.word	0x42b17217
 802a504:	42cff1b5 	.word	0x42cff1b5
 802a508:	3eb17218 	.word	0x3eb17218
 802a50c:	3f851591 	.word	0x3f851591
 802a510:	0802f270 	.word	0x0802f270
 802a514:	0802f268 	.word	0x0802f268
 802a518:	3331bb4c 	.word	0x3331bb4c
 802a51c:	35ddea0e 	.word	0x35ddea0e
 802a520:	388ab355 	.word	0x388ab355
 802a524:	3b360b61 	.word	0x3b360b61
 802a528:	3e2aaaab 	.word	0x3e2aaaab
 802a52c:	3fb8aa3b 	.word	0x3fb8aa3b
 802a530:	0802f278 	.word	0x0802f278
 802a534:	3f317180 	.word	0x3f317180
 802a538:	3717f7d1 	.word	0x3717f7d1
 802a53c:	7149f2ca 	.word	0x7149f2ca

0802a540 <scalbn>:
 802a540:	004b      	lsls	r3, r1, #1
 802a542:	b570      	push	{r4, r5, r6, lr}
 802a544:	0d5b      	lsrs	r3, r3, #21
 802a546:	0014      	movs	r4, r2
 802a548:	000d      	movs	r5, r1
 802a54a:	2b00      	cmp	r3, #0
 802a54c:	d10f      	bne.n	802a56e <scalbn+0x2e>
 802a54e:	004b      	lsls	r3, r1, #1
 802a550:	085b      	lsrs	r3, r3, #1
 802a552:	4303      	orrs	r3, r0
 802a554:	d012      	beq.n	802a57c <scalbn+0x3c>
 802a556:	4b23      	ldr	r3, [pc, #140]	@ (802a5e4 <scalbn+0xa4>)
 802a558:	2200      	movs	r2, #0
 802a55a:	f7d8 f9fb 	bl	8002954 <__aeabi_dmul>
 802a55e:	4b22      	ldr	r3, [pc, #136]	@ (802a5e8 <scalbn+0xa8>)
 802a560:	429c      	cmp	r4, r3
 802a562:	da0c      	bge.n	802a57e <scalbn+0x3e>
 802a564:	4a21      	ldr	r2, [pc, #132]	@ (802a5ec <scalbn+0xac>)
 802a566:	4b22      	ldr	r3, [pc, #136]	@ (802a5f0 <scalbn+0xb0>)
 802a568:	f7d8 f9f4 	bl	8002954 <__aeabi_dmul>
 802a56c:	e006      	b.n	802a57c <scalbn+0x3c>
 802a56e:	4a21      	ldr	r2, [pc, #132]	@ (802a5f4 <scalbn+0xb4>)
 802a570:	4293      	cmp	r3, r2
 802a572:	d108      	bne.n	802a586 <scalbn+0x46>
 802a574:	0002      	movs	r2, r0
 802a576:	000b      	movs	r3, r1
 802a578:	f7d7 f9ec 	bl	8001954 <__aeabi_dadd>
 802a57c:	bd70      	pop	{r4, r5, r6, pc}
 802a57e:	000d      	movs	r5, r1
 802a580:	004b      	lsls	r3, r1, #1
 802a582:	0d5b      	lsrs	r3, r3, #21
 802a584:	3b36      	subs	r3, #54	@ 0x36
 802a586:	4a1c      	ldr	r2, [pc, #112]	@ (802a5f8 <scalbn+0xb8>)
 802a588:	4294      	cmp	r4, r2
 802a58a:	dd0a      	ble.n	802a5a2 <scalbn+0x62>
 802a58c:	4c1b      	ldr	r4, [pc, #108]	@ (802a5fc <scalbn+0xbc>)
 802a58e:	4d1c      	ldr	r5, [pc, #112]	@ (802a600 <scalbn+0xc0>)
 802a590:	2900      	cmp	r1, #0
 802a592:	da01      	bge.n	802a598 <scalbn+0x58>
 802a594:	4c19      	ldr	r4, [pc, #100]	@ (802a5fc <scalbn+0xbc>)
 802a596:	4d1b      	ldr	r5, [pc, #108]	@ (802a604 <scalbn+0xc4>)
 802a598:	4a18      	ldr	r2, [pc, #96]	@ (802a5fc <scalbn+0xbc>)
 802a59a:	4b19      	ldr	r3, [pc, #100]	@ (802a600 <scalbn+0xc0>)
 802a59c:	0020      	movs	r0, r4
 802a59e:	0029      	movs	r1, r5
 802a5a0:	e7e2      	b.n	802a568 <scalbn+0x28>
 802a5a2:	18e2      	adds	r2, r4, r3
 802a5a4:	4b18      	ldr	r3, [pc, #96]	@ (802a608 <scalbn+0xc8>)
 802a5a6:	429a      	cmp	r2, r3
 802a5a8:	dcf0      	bgt.n	802a58c <scalbn+0x4c>
 802a5aa:	2a00      	cmp	r2, #0
 802a5ac:	dd05      	ble.n	802a5ba <scalbn+0x7a>
 802a5ae:	4b17      	ldr	r3, [pc, #92]	@ (802a60c <scalbn+0xcc>)
 802a5b0:	0512      	lsls	r2, r2, #20
 802a5b2:	402b      	ands	r3, r5
 802a5b4:	4313      	orrs	r3, r2
 802a5b6:	0019      	movs	r1, r3
 802a5b8:	e7e0      	b.n	802a57c <scalbn+0x3c>
 802a5ba:	0013      	movs	r3, r2
 802a5bc:	3335      	adds	r3, #53	@ 0x35
 802a5be:	da08      	bge.n	802a5d2 <scalbn+0x92>
 802a5c0:	4c0a      	ldr	r4, [pc, #40]	@ (802a5ec <scalbn+0xac>)
 802a5c2:	4d0b      	ldr	r5, [pc, #44]	@ (802a5f0 <scalbn+0xb0>)
 802a5c4:	2900      	cmp	r1, #0
 802a5c6:	da01      	bge.n	802a5cc <scalbn+0x8c>
 802a5c8:	4c08      	ldr	r4, [pc, #32]	@ (802a5ec <scalbn+0xac>)
 802a5ca:	4d11      	ldr	r5, [pc, #68]	@ (802a610 <scalbn+0xd0>)
 802a5cc:	4a07      	ldr	r2, [pc, #28]	@ (802a5ec <scalbn+0xac>)
 802a5ce:	4b08      	ldr	r3, [pc, #32]	@ (802a5f0 <scalbn+0xb0>)
 802a5d0:	e7e4      	b.n	802a59c <scalbn+0x5c>
 802a5d2:	4b0e      	ldr	r3, [pc, #56]	@ (802a60c <scalbn+0xcc>)
 802a5d4:	3236      	adds	r2, #54	@ 0x36
 802a5d6:	401d      	ands	r5, r3
 802a5d8:	0512      	lsls	r2, r2, #20
 802a5da:	432a      	orrs	r2, r5
 802a5dc:	0011      	movs	r1, r2
 802a5de:	4b0d      	ldr	r3, [pc, #52]	@ (802a614 <scalbn+0xd4>)
 802a5e0:	2200      	movs	r2, #0
 802a5e2:	e7c1      	b.n	802a568 <scalbn+0x28>
 802a5e4:	43500000 	.word	0x43500000
 802a5e8:	ffff3cb0 	.word	0xffff3cb0
 802a5ec:	c2f8f359 	.word	0xc2f8f359
 802a5f0:	01a56e1f 	.word	0x01a56e1f
 802a5f4:	000007ff 	.word	0x000007ff
 802a5f8:	0000c350 	.word	0x0000c350
 802a5fc:	8800759c 	.word	0x8800759c
 802a600:	7e37e43c 	.word	0x7e37e43c
 802a604:	fe37e43c 	.word	0xfe37e43c
 802a608:	000007fe 	.word	0x000007fe
 802a60c:	800fffff 	.word	0x800fffff
 802a610:	81a56e1f 	.word	0x81a56e1f
 802a614:	3c900000 	.word	0x3c900000

0802a618 <with_errno>:
 802a618:	b570      	push	{r4, r5, r6, lr}
 802a61a:	000d      	movs	r5, r1
 802a61c:	0016      	movs	r6, r2
 802a61e:	0004      	movs	r4, r0
 802a620:	f7fc f952 	bl	80268c8 <__errno>
 802a624:	0029      	movs	r1, r5
 802a626:	6006      	str	r6, [r0, #0]
 802a628:	0020      	movs	r0, r4
 802a62a:	bd70      	pop	{r4, r5, r6, pc}

0802a62c <xflow>:
 802a62c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a62e:	0014      	movs	r4, r2
 802a630:	001d      	movs	r5, r3
 802a632:	2800      	cmp	r0, #0
 802a634:	d002      	beq.n	802a63c <xflow+0x10>
 802a636:	2180      	movs	r1, #128	@ 0x80
 802a638:	0609      	lsls	r1, r1, #24
 802a63a:	185b      	adds	r3, r3, r1
 802a63c:	9200      	str	r2, [sp, #0]
 802a63e:	9301      	str	r3, [sp, #4]
 802a640:	9a00      	ldr	r2, [sp, #0]
 802a642:	9b01      	ldr	r3, [sp, #4]
 802a644:	0020      	movs	r0, r4
 802a646:	0029      	movs	r1, r5
 802a648:	f7d8 f984 	bl	8002954 <__aeabi_dmul>
 802a64c:	2222      	movs	r2, #34	@ 0x22
 802a64e:	f7ff ffe3 	bl	802a618 <with_errno>
 802a652:	b003      	add	sp, #12
 802a654:	bd30      	pop	{r4, r5, pc}

0802a656 <__math_uflow>:
 802a656:	2380      	movs	r3, #128	@ 0x80
 802a658:	b510      	push	{r4, lr}
 802a65a:	2200      	movs	r2, #0
 802a65c:	055b      	lsls	r3, r3, #21
 802a65e:	f7ff ffe5 	bl	802a62c <xflow>
 802a662:	bd10      	pop	{r4, pc}

0802a664 <__math_oflow>:
 802a664:	23e0      	movs	r3, #224	@ 0xe0
 802a666:	b510      	push	{r4, lr}
 802a668:	2200      	movs	r2, #0
 802a66a:	05db      	lsls	r3, r3, #23
 802a66c:	f7ff ffde 	bl	802a62c <xflow>
 802a670:	bd10      	pop	{r4, pc}

0802a672 <with_errnof>:
 802a672:	b570      	push	{r4, r5, r6, lr}
 802a674:	000d      	movs	r5, r1
 802a676:	1c04      	adds	r4, r0, #0
 802a678:	f7fc f926 	bl	80268c8 <__errno>
 802a67c:	6005      	str	r5, [r0, #0]
 802a67e:	1c20      	adds	r0, r4, #0
 802a680:	bd70      	pop	{r4, r5, r6, pc}

0802a682 <xflowf>:
 802a682:	b510      	push	{r4, lr}
 802a684:	1c0b      	adds	r3, r1, #0
 802a686:	2800      	cmp	r0, #0
 802a688:	d002      	beq.n	802a690 <xflowf+0xe>
 802a68a:	2380      	movs	r3, #128	@ 0x80
 802a68c:	061b      	lsls	r3, r3, #24
 802a68e:	18cb      	adds	r3, r1, r3
 802a690:	1c18      	adds	r0, r3, #0
 802a692:	f7d6 fcd5 	bl	8001040 <__aeabi_fmul>
 802a696:	2122      	movs	r1, #34	@ 0x22
 802a698:	f7ff ffeb 	bl	802a672 <with_errnof>
 802a69c:	bd10      	pop	{r4, pc}

0802a69e <__math_uflowf>:
 802a69e:	2180      	movs	r1, #128	@ 0x80
 802a6a0:	b510      	push	{r4, lr}
 802a6a2:	0549      	lsls	r1, r1, #21
 802a6a4:	f7ff ffed 	bl	802a682 <xflowf>
 802a6a8:	bd10      	pop	{r4, pc}

0802a6aa <__math_oflowf>:
 802a6aa:	21e0      	movs	r1, #224	@ 0xe0
 802a6ac:	b510      	push	{r4, lr}
 802a6ae:	05c9      	lsls	r1, r1, #23
 802a6b0:	f7ff ffe7 	bl	802a682 <xflowf>
 802a6b4:	bd10      	pop	{r4, pc}
	...

0802a6b8 <__ieee754_sqrt>:
 802a6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a6ba:	000a      	movs	r2, r1
 802a6bc:	000d      	movs	r5, r1
 802a6be:	496b      	ldr	r1, [pc, #428]	@ (802a86c <__ieee754_sqrt+0x1b4>)
 802a6c0:	0004      	movs	r4, r0
 802a6c2:	0003      	movs	r3, r0
 802a6c4:	0008      	movs	r0, r1
 802a6c6:	b087      	sub	sp, #28
 802a6c8:	4028      	ands	r0, r5
 802a6ca:	4288      	cmp	r0, r1
 802a6cc:	d111      	bne.n	802a6f2 <__ieee754_sqrt+0x3a>
 802a6ce:	0022      	movs	r2, r4
 802a6d0:	002b      	movs	r3, r5
 802a6d2:	0020      	movs	r0, r4
 802a6d4:	0029      	movs	r1, r5
 802a6d6:	f7d8 f93d 	bl	8002954 <__aeabi_dmul>
 802a6da:	0002      	movs	r2, r0
 802a6dc:	000b      	movs	r3, r1
 802a6de:	0020      	movs	r0, r4
 802a6e0:	0029      	movs	r1, r5
 802a6e2:	f7d7 f937 	bl	8001954 <__aeabi_dadd>
 802a6e6:	0004      	movs	r4, r0
 802a6e8:	000d      	movs	r5, r1
 802a6ea:	0020      	movs	r0, r4
 802a6ec:	0029      	movs	r1, r5
 802a6ee:	b007      	add	sp, #28
 802a6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a6f2:	2d00      	cmp	r5, #0
 802a6f4:	dc11      	bgt.n	802a71a <__ieee754_sqrt+0x62>
 802a6f6:	0069      	lsls	r1, r5, #1
 802a6f8:	0849      	lsrs	r1, r1, #1
 802a6fa:	4321      	orrs	r1, r4
 802a6fc:	d0f5      	beq.n	802a6ea <__ieee754_sqrt+0x32>
 802a6fe:	2000      	movs	r0, #0
 802a700:	4285      	cmp	r5, r0
 802a702:	d010      	beq.n	802a726 <__ieee754_sqrt+0x6e>
 802a704:	0022      	movs	r2, r4
 802a706:	002b      	movs	r3, r5
 802a708:	0020      	movs	r0, r4
 802a70a:	0029      	movs	r1, r5
 802a70c:	f7d8 fc08 	bl	8002f20 <__aeabi_dsub>
 802a710:	0002      	movs	r2, r0
 802a712:	000b      	movs	r3, r1
 802a714:	f7d7 fce4 	bl	80020e0 <__aeabi_ddiv>
 802a718:	e7e5      	b.n	802a6e6 <__ieee754_sqrt+0x2e>
 802a71a:	1528      	asrs	r0, r5, #20
 802a71c:	d115      	bne.n	802a74a <__ieee754_sqrt+0x92>
 802a71e:	2480      	movs	r4, #128	@ 0x80
 802a720:	2100      	movs	r1, #0
 802a722:	0364      	lsls	r4, r4, #13
 802a724:	e007      	b.n	802a736 <__ieee754_sqrt+0x7e>
 802a726:	0ada      	lsrs	r2, r3, #11
 802a728:	3815      	subs	r0, #21
 802a72a:	055b      	lsls	r3, r3, #21
 802a72c:	2a00      	cmp	r2, #0
 802a72e:	d0fa      	beq.n	802a726 <__ieee754_sqrt+0x6e>
 802a730:	e7f5      	b.n	802a71e <__ieee754_sqrt+0x66>
 802a732:	0052      	lsls	r2, r2, #1
 802a734:	3101      	adds	r1, #1
 802a736:	4222      	tst	r2, r4
 802a738:	d0fb      	beq.n	802a732 <__ieee754_sqrt+0x7a>
 802a73a:	1e4c      	subs	r4, r1, #1
 802a73c:	1b00      	subs	r0, r0, r4
 802a73e:	2420      	movs	r4, #32
 802a740:	001d      	movs	r5, r3
 802a742:	1a64      	subs	r4, r4, r1
 802a744:	40e5      	lsrs	r5, r4
 802a746:	408b      	lsls	r3, r1
 802a748:	432a      	orrs	r2, r5
 802a74a:	4949      	ldr	r1, [pc, #292]	@ (802a870 <__ieee754_sqrt+0x1b8>)
 802a74c:	0312      	lsls	r2, r2, #12
 802a74e:	1844      	adds	r4, r0, r1
 802a750:	2180      	movs	r1, #128	@ 0x80
 802a752:	0b12      	lsrs	r2, r2, #12
 802a754:	0349      	lsls	r1, r1, #13
 802a756:	4311      	orrs	r1, r2
 802a758:	07c0      	lsls	r0, r0, #31
 802a75a:	d403      	bmi.n	802a764 <__ieee754_sqrt+0xac>
 802a75c:	0fda      	lsrs	r2, r3, #31
 802a75e:	0049      	lsls	r1, r1, #1
 802a760:	1851      	adds	r1, r2, r1
 802a762:	005b      	lsls	r3, r3, #1
 802a764:	2500      	movs	r5, #0
 802a766:	1062      	asrs	r2, r4, #1
 802a768:	0049      	lsls	r1, r1, #1
 802a76a:	2480      	movs	r4, #128	@ 0x80
 802a76c:	9205      	str	r2, [sp, #20]
 802a76e:	0fda      	lsrs	r2, r3, #31
 802a770:	1852      	adds	r2, r2, r1
 802a772:	2016      	movs	r0, #22
 802a774:	0029      	movs	r1, r5
 802a776:	005b      	lsls	r3, r3, #1
 802a778:	03a4      	lsls	r4, r4, #14
 802a77a:	190e      	adds	r6, r1, r4
 802a77c:	4296      	cmp	r6, r2
 802a77e:	dc02      	bgt.n	802a786 <__ieee754_sqrt+0xce>
 802a780:	1931      	adds	r1, r6, r4
 802a782:	1b92      	subs	r2, r2, r6
 802a784:	192d      	adds	r5, r5, r4
 802a786:	0fde      	lsrs	r6, r3, #31
 802a788:	0052      	lsls	r2, r2, #1
 802a78a:	3801      	subs	r0, #1
 802a78c:	1992      	adds	r2, r2, r6
 802a78e:	005b      	lsls	r3, r3, #1
 802a790:	0864      	lsrs	r4, r4, #1
 802a792:	2800      	cmp	r0, #0
 802a794:	d1f1      	bne.n	802a77a <__ieee754_sqrt+0xc2>
 802a796:	2620      	movs	r6, #32
 802a798:	2780      	movs	r7, #128	@ 0x80
 802a79a:	0004      	movs	r4, r0
 802a79c:	9604      	str	r6, [sp, #16]
 802a79e:	063f      	lsls	r7, r7, #24
 802a7a0:	183e      	adds	r6, r7, r0
 802a7a2:	46b4      	mov	ip, r6
 802a7a4:	428a      	cmp	r2, r1
 802a7a6:	dc02      	bgt.n	802a7ae <__ieee754_sqrt+0xf6>
 802a7a8:	d114      	bne.n	802a7d4 <__ieee754_sqrt+0x11c>
 802a7aa:	429e      	cmp	r6, r3
 802a7ac:	d812      	bhi.n	802a7d4 <__ieee754_sqrt+0x11c>
 802a7ae:	4660      	mov	r0, ip
 802a7b0:	4666      	mov	r6, ip
 802a7b2:	19c0      	adds	r0, r0, r7
 802a7b4:	9100      	str	r1, [sp, #0]
 802a7b6:	2e00      	cmp	r6, #0
 802a7b8:	da03      	bge.n	802a7c2 <__ieee754_sqrt+0x10a>
 802a7ba:	43c6      	mvns	r6, r0
 802a7bc:	0ff6      	lsrs	r6, r6, #31
 802a7be:	198e      	adds	r6, r1, r6
 802a7c0:	9600      	str	r6, [sp, #0]
 802a7c2:	1a52      	subs	r2, r2, r1
 802a7c4:	4563      	cmp	r3, ip
 802a7c6:	4189      	sbcs	r1, r1
 802a7c8:	4249      	negs	r1, r1
 802a7ca:	1a52      	subs	r2, r2, r1
 802a7cc:	4661      	mov	r1, ip
 802a7ce:	1a5b      	subs	r3, r3, r1
 802a7d0:	9900      	ldr	r1, [sp, #0]
 802a7d2:	19e4      	adds	r4, r4, r7
 802a7d4:	0fde      	lsrs	r6, r3, #31
 802a7d6:	0052      	lsls	r2, r2, #1
 802a7d8:	1992      	adds	r2, r2, r6
 802a7da:	9e04      	ldr	r6, [sp, #16]
 802a7dc:	005b      	lsls	r3, r3, #1
 802a7de:	3e01      	subs	r6, #1
 802a7e0:	087f      	lsrs	r7, r7, #1
 802a7e2:	9604      	str	r6, [sp, #16]
 802a7e4:	2e00      	cmp	r6, #0
 802a7e6:	d1db      	bne.n	802a7a0 <__ieee754_sqrt+0xe8>
 802a7e8:	431a      	orrs	r2, r3
 802a7ea:	d01f      	beq.n	802a82c <__ieee754_sqrt+0x174>
 802a7ec:	4e21      	ldr	r6, [pc, #132]	@ (802a874 <__ieee754_sqrt+0x1bc>)
 802a7ee:	4f22      	ldr	r7, [pc, #136]	@ (802a878 <__ieee754_sqrt+0x1c0>)
 802a7f0:	6830      	ldr	r0, [r6, #0]
 802a7f2:	6871      	ldr	r1, [r6, #4]
 802a7f4:	683a      	ldr	r2, [r7, #0]
 802a7f6:	687b      	ldr	r3, [r7, #4]
 802a7f8:	9200      	str	r2, [sp, #0]
 802a7fa:	9301      	str	r3, [sp, #4]
 802a7fc:	6832      	ldr	r2, [r6, #0]
 802a7fe:	6873      	ldr	r3, [r6, #4]
 802a800:	9202      	str	r2, [sp, #8]
 802a802:	9303      	str	r3, [sp, #12]
 802a804:	9a00      	ldr	r2, [sp, #0]
 802a806:	9b01      	ldr	r3, [sp, #4]
 802a808:	f7d8 fb8a 	bl	8002f20 <__aeabi_dsub>
 802a80c:	0002      	movs	r2, r0
 802a80e:	000b      	movs	r3, r1
 802a810:	9802      	ldr	r0, [sp, #8]
 802a812:	9903      	ldr	r1, [sp, #12]
 802a814:	f7d5 fe5c 	bl	80004d0 <__aeabi_dcmple>
 802a818:	2800      	cmp	r0, #0
 802a81a:	d007      	beq.n	802a82c <__ieee754_sqrt+0x174>
 802a81c:	6830      	ldr	r0, [r6, #0]
 802a81e:	6871      	ldr	r1, [r6, #4]
 802a820:	683a      	ldr	r2, [r7, #0]
 802a822:	687b      	ldr	r3, [r7, #4]
 802a824:	1c67      	adds	r7, r4, #1
 802a826:	d10c      	bne.n	802a842 <__ieee754_sqrt+0x18a>
 802a828:	9c04      	ldr	r4, [sp, #16]
 802a82a:	3501      	adds	r5, #1
 802a82c:	4a13      	ldr	r2, [pc, #76]	@ (802a87c <__ieee754_sqrt+0x1c4>)
 802a82e:	106b      	asrs	r3, r5, #1
 802a830:	189b      	adds	r3, r3, r2
 802a832:	9a05      	ldr	r2, [sp, #20]
 802a834:	07ed      	lsls	r5, r5, #31
 802a836:	0864      	lsrs	r4, r4, #1
 802a838:	0512      	lsls	r2, r2, #20
 802a83a:	4325      	orrs	r5, r4
 802a83c:	0028      	movs	r0, r5
 802a83e:	18d1      	adds	r1, r2, r3
 802a840:	e751      	b.n	802a6e6 <__ieee754_sqrt+0x2e>
 802a842:	f7d7 f887 	bl	8001954 <__aeabi_dadd>
 802a846:	6877      	ldr	r7, [r6, #4]
 802a848:	6836      	ldr	r6, [r6, #0]
 802a84a:	0002      	movs	r2, r0
 802a84c:	000b      	movs	r3, r1
 802a84e:	0030      	movs	r0, r6
 802a850:	0039      	movs	r1, r7
 802a852:	f7d5 fe33 	bl	80004bc <__aeabi_dcmplt>
 802a856:	2800      	cmp	r0, #0
 802a858:	d004      	beq.n	802a864 <__ieee754_sqrt+0x1ac>
 802a85a:	3402      	adds	r4, #2
 802a85c:	4263      	negs	r3, r4
 802a85e:	4163      	adcs	r3, r4
 802a860:	18ed      	adds	r5, r5, r3
 802a862:	e7e3      	b.n	802a82c <__ieee754_sqrt+0x174>
 802a864:	2301      	movs	r3, #1
 802a866:	3401      	adds	r4, #1
 802a868:	439c      	bics	r4, r3
 802a86a:	e7df      	b.n	802a82c <__ieee754_sqrt+0x174>
 802a86c:	7ff00000 	.word	0x7ff00000
 802a870:	fffffc01 	.word	0xfffffc01
 802a874:	0802f288 	.word	0x0802f288
 802a878:	0802f280 	.word	0x0802f280
 802a87c:	3fe00000 	.word	0x3fe00000

0802a880 <_init>:
 802a880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a882:	46c0      	nop			@ (mov r8, r8)
 802a884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a886:	bc08      	pop	{r3}
 802a888:	469e      	mov	lr, r3
 802a88a:	4770      	bx	lr

0802a88c <_fini>:
 802a88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a88e:	46c0      	nop			@ (mov r8, r8)
 802a890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a892:	bc08      	pop	{r3}
 802a894:	469e      	mov	lr, r3
 802a896:	4770      	bx	lr
