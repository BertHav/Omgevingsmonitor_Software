
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000229d4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c00  08022a98  08022a98  00023a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025698  08025698  00027424  2**0
                  CONTENTS
  4 .ARM          00000008  08025698  08025698  00026698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080256a0  080256a0  00027424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080256a0  080256a0  000266a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080256a4  080256a4  000266a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000424  20000000  080256a8  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003580  20000424  08025acc  00027424  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200039a4  08025acc  000279a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00027424  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033f33  00000000  00000000  0002744c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000093f0  00000000  00000000  0005b37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a88  00000000  00000000  00064770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f85  00000000  00000000  000671f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002289b  00000000  00000000  0006917d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041639  00000000  00000000  0008ba18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a03e2  00000000  00000000  000cd051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016d433  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad34  00000000  00000000  0016d4e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00178218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00178285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017a801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000424 	.word	0x20000424
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08022a7c 	.word	0x08022a7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000428 	.word	0x20000428
 8000104:	08022a7c 	.word	0x08022a7c

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	080248b0 	.word	0x080248b0
 8000e0c:	080248f0 	.word	0x080248f0
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	0802492c 	.word	0x0802492c
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00c f84a 	bl	800f6fc <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00c f8a1 	bl	800f7cc <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00c f854 	bl	800f758 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	20000440 	.word	0x20000440

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00b ffd0 	bl	800f6fc <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00b ffff 	bl	800f774 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00b ffe3 	bl	800f758 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
static ESP_States EspState = ESP_STATE_INIT;
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000a20 	.word	0x20000a20

080037b0 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80037b8:	f00a ff6a 	bl	800e690 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <setESPTimeStamp+0x20>)
 80037c4:	601a      	str	r2, [r3, #0]
//  ATExpectation = RECEIVE_EXPECTATION_OK;
//  ATCommand = AT_WAKEUP;
//  EspState = ESP_STATE_INIT;
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000a1c 	.word	0x20000a1c

080037d4 <setCharges>:
void setCharges(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037d8:	f002 fd12 	bl	8006200 <ReadBatteryVoltage>
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <setCharges+0x20>)
 80037e0:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80037e2:	f002 fd6f 	bl	80062c4 <ReadSolarVoltage>
 80037e6:	1c02      	adds	r2, r0, #0
 80037e8:	4b03      	ldr	r3, [pc, #12]	@ (80037f8 <setCharges+0x24>)
 80037ea:	601a      	str	r2, [r3, #0]
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	20000570 	.word	0x20000570
 80037f8:	20000574 	.word	0x20000574

080037fc <checkEEprom>:
bool checkEEprom(){
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003802:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <checkEEprom+0x5c>)
 8003804:	4815      	ldr	r0, [pc, #84]	@ (800385c <checkEEprom+0x60>)
 8003806:	220c      	movs	r2, #12
 8003808:	0019      	movs	r1, r3
 800380a:	f7ff ff75 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e00e      	b.n	8003834 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	4a0f      	ldr	r2, [pc, #60]	@ (8003858 <checkEEprom+0x5c>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	001a      	movs	r2, r3
 8003820:	4b0f      	ldr	r3, [pc, #60]	@ (8003860 <checkEEprom+0x64>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	18d2      	adds	r2, r2, r3
 8003826:	4b0e      	ldr	r3, [pc, #56]	@ (8003860 <checkEEprom+0x64>)
 8003828:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800382a:	1dfb      	adds	r3, r7, #7
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	3201      	adds	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	1dfb      	adds	r3, r7, #7
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b0b      	cmp	r3, #11
 800383a:	d9ec      	bls.n	8003816 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 800383c:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <checkEEprom+0x64>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	425a      	negs	r2, r3
 8003842:	4153      	adcs	r3, r2
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b07      	ldr	r3, [pc, #28]	@ (8003864 <checkEEprom+0x68>)
 8003848:	701a      	strb	r2, [r3, #0]
  return test;
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <checkEEprom+0x68>)
 800384c:	781b      	ldrb	r3, [r3, #0]
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b002      	add	sp, #8
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	20000a30 	.word	0x20000a30
 800385c:	0808000c 	.word	0x0808000c
 8003860:	20000a3c 	.word	0x20000a3c
 8003864:	20000a40 	.word	0x20000a40

08003868 <checkName>:
bool checkName(){
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800386e:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <checkName+0x5c>)
 8003870:	4815      	ldr	r0, [pc, #84]	@ (80038c8 <checkName+0x60>)
 8003872:	221e      	movs	r2, #30
 8003874:	0019      	movs	r1, r3
 8003876:	f7ff ff3f 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800387a:	1dfb      	adds	r3, r7, #7
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e00e      	b.n	80038a0 <checkName+0x38>
    configSum += nameConfig[i];
 8003882:	1dfb      	adds	r3, r7, #7
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	4a0f      	ldr	r2, [pc, #60]	@ (80038c4 <checkName+0x5c>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	001a      	movs	r2, r3
 800388c:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <checkName+0x64>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	18d2      	adds	r2, r2, r3
 8003892:	4b0e      	ldr	r3, [pc, #56]	@ (80038cc <checkName+0x64>)
 8003894:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	3201      	adds	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b0b      	cmp	r3, #11
 80038a6:	d9ec      	bls.n	8003882 <checkName+0x1a>
  }
  test = (configSum != 0);
 80038a8:	4b08      	ldr	r3, [pc, #32]	@ (80038cc <checkName+0x64>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	1e5a      	subs	r2, r3, #1
 80038ae:	4193      	sbcs	r3, r2
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <checkName+0x68>)
 80038b4:	701a      	strb	r2, [r3, #0]
  return test;
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <checkName+0x68>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	20000a44 	.word	0x20000a44
 80038c8:	08080090 	.word	0x08080090
 80038cc:	20000a64 	.word	0x20000a64
 80038d0:	20000a68 	.word	0x20000a68

080038d4 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038de:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <ESP_GetHT+0x20>)
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038e4:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <ESP_GetHT+0x24>)
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b002      	add	sp, #8
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	20000568 	.word	0x20000568
 80038f8:	2000056c 	.word	0x2000056c

080038fc <setHIDS>:
void setHIDS(float temp, float humid){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 8003906:	4b05      	ldr	r3, [pc, #20]	@ (800391c <setHIDS+0x20>)
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 800390c:	4b04      	ldr	r3, [pc, #16]	@ (8003920 <setHIDS+0x24>)
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	601a      	str	r2, [r3, #0]
}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	46bd      	mov	sp, r7
 8003916:	b002      	add	sp, #8
 8003918:	bd80      	pop	{r7, pc}
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	20000568 	.word	0x20000568
 8003920:	2000056c 	.word	0x2000056c

08003924 <setVOC>:
void setVOC(uint16_t voc){
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	0002      	movs	r2, r0
 800392c:	1dbb      	adds	r3, r7, #6
 800392e:	801a      	strh	r2, [r3, #0]
  VOCIndex = voc;
 8003930:	4b03      	ldr	r3, [pc, #12]	@ (8003940 <setVOC+0x1c>)
 8003932:	1dba      	adds	r2, r7, #6
 8003934:	8812      	ldrh	r2, [r2, #0]
 8003936:	801a      	strh	r2, [r3, #0]
}
 8003938:	46c0      	nop			@ (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000578 	.word	0x20000578

08003944 <setMic>:
void setMic(float dB){
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  dBA = dB;
 800394c:	4b03      	ldr	r3, [pc, #12]	@ (800395c <setMic+0x18>)
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	601a      	str	r2, [r3, #0]
}
 8003952:	46c0      	nop			@ (mov r8, r8)
 8003954:	46bd      	mov	sp, r7
 8003956:	b002      	add	sp, #8
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			@ (mov r8, r8)
 800395c:	2000057c 	.word	0x2000057c

08003960 <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10, uint16_t nox) {
 8003960:	b590      	push	{r4, r7, lr}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	0004      	movs	r4, r0
 8003968:	0008      	movs	r0, r1
 800396a:	0011      	movs	r1, r2
 800396c:	1dbb      	adds	r3, r7, #6
 800396e:	1c22      	adds	r2, r4, #0
 8003970:	801a      	strh	r2, [r3, #0]
 8003972:	1d3b      	adds	r3, r7, #4
 8003974:	1c02      	adds	r2, r0, #0
 8003976:	801a      	strh	r2, [r3, #0]
 8003978:	1cbb      	adds	r3, r7, #2
 800397a:	1c0a      	adds	r2, r1, #0
 800397c:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 800397e:	1dbb      	adds	r3, r7, #6
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	0018      	movs	r0, r3
 8003984:	f7fd fe24 	bl	80015d0 <__aeabi_i2f>
 8003988:	1c03      	adds	r3, r0, #0
 800398a:	4914      	ldr	r1, [pc, #80]	@ (80039dc <setPMs+0x7c>)
 800398c:	1c18      	adds	r0, r3, #0
 800398e:	f7fd f921 	bl	8000bd4 <__aeabi_fdiv>
 8003992:	1c03      	adds	r3, r0, #0
 8003994:	1c1a      	adds	r2, r3, #0
 8003996:	4b12      	ldr	r3, [pc, #72]	@ (80039e0 <setPMs+0x80>)
 8003998:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 800399a:	1d3b      	adds	r3, r7, #4
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	0018      	movs	r0, r3
 80039a0:	f7fd fe16 	bl	80015d0 <__aeabi_i2f>
 80039a4:	1c03      	adds	r3, r0, #0
 80039a6:	490d      	ldr	r1, [pc, #52]	@ (80039dc <setPMs+0x7c>)
 80039a8:	1c18      	adds	r0, r3, #0
 80039aa:	f7fd f913 	bl	8000bd4 <__aeabi_fdiv>
 80039ae:	1c03      	adds	r3, r0, #0
 80039b0:	1c1a      	adds	r2, r3, #0
 80039b2:	4b0c      	ldr	r3, [pc, #48]	@ (80039e4 <setPMs+0x84>)
 80039b4:	601a      	str	r2, [r3, #0]
  airNOx = nox / 10.0f;
 80039b6:	1cbb      	adds	r3, r7, #2
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	0018      	movs	r0, r3
 80039bc:	f7fd fe08 	bl	80015d0 <__aeabi_i2f>
 80039c0:	1c03      	adds	r3, r0, #0
 80039c2:	4906      	ldr	r1, [pc, #24]	@ (80039dc <setPMs+0x7c>)
 80039c4:	1c18      	adds	r0, r3, #0
 80039c6:	f7fd f905 	bl	8000bd4 <__aeabi_fdiv>
 80039ca:	1c03      	adds	r3, r0, #0
 80039cc:	1c1a      	adds	r2, r3, #0
 80039ce:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <setPMs+0x88>)
 80039d0:	601a      	str	r2, [r3, #0]
}
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b003      	add	sp, #12
 80039d8:	bd90      	pop	{r4, r7, pc}
 80039da:	46c0      	nop			@ (mov r8, r8)
 80039dc:	41200000 	.word	0x41200000
 80039e0:	20000580 	.word	0x20000580
 80039e4:	20000584 	.word	0x20000584
 80039e8:	20000588 	.word	0x20000588

080039ec <SetConfigMode>:

void SetConfigMode(){
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 80039f0:	4b02      	ldr	r3, [pc, #8]	@ (80039fc <SetConfigMode+0x10>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	701a      	strb	r2, [r3, #0]
}
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	2000054f 	.word	0x2000054f

08003a00 <ESP_GetUID>:
//};


//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003a04:	f00a fe8e 	bl	800e724 <HAL_GetUIDw0>
 8003a08:	0002      	movs	r2, r0
 8003a0a:	4b07      	ldr	r3, [pc, #28]	@ (8003a28 <ESP_GetUID+0x28>)
 8003a0c:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8003a0e:	f00a fe93 	bl	800e738 <HAL_GetUIDw1>
 8003a12:	0002      	movs	r2, r0
 8003a14:	4b04      	ldr	r3, [pc, #16]	@ (8003a28 <ESP_GetUID+0x28>)
 8003a16:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003a18:	f00a fe98 	bl	800e74c <HAL_GetUIDw2>
 8003a1c:	0002      	movs	r2, r0
 8003a1e:	4b02      	ldr	r3, [pc, #8]	@ (8003a28 <ESP_GetUID+0x28>)
 8003a20:	609a      	str	r2, [r3, #8]
}
 8003a22:	46c0      	nop			@ (mov r8, r8)
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	20000554 	.word	0x20000554

08003a2c <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003a34:	4b08      	ldr	r3, [pc, #32]	@ (8003a58 <ESP_Init+0x2c>)
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003a3a:	4b08      	ldr	r3, [pc, #32]	@ (8003a5c <ESP_Init+0x30>)
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003a40:	f7ff ffde 	bl	8003a00 <ESP_GetUID>
  beurs = checkEEprom();
 8003a44:	f7ff feda 	bl	80037fc <checkEEprom>
 8003a48:	0003      	movs	r3, r0
 8003a4a:	001a      	movs	r2, r3
 8003a4c:	4b04      	ldr	r3, [pc, #16]	@ (8003a60 <ESP_Init+0x34>)
 8003a4e:	701a      	strb	r2, [r3, #0]
}
 8003a50:	46c0      	nop			@ (mov r8, r8)
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b002      	add	sp, #8
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000444 	.word	0x20000444
 8003a5c:	20000028 	.word	0x20000028
 8003a60:	20000552 	.word	0x20000552

08003a64 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003a64:	b5b0      	push	{r4, r5, r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	000a      	movs	r2, r1
 8003a6e:	1cbb      	adds	r3, r7, #2
 8003a70:	801a      	strh	r2, [r3, #0]
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a10      	ldr	r2, [pc, #64]	@ (8003ab8 <ESP_Send+0x54>)
 8003a76:	4911      	ldr	r1, [pc, #68]	@ (8003abc <ESP_Send+0x58>)
 8003a78:	2003      	movs	r0, #3
 8003a7a:	f00a f9b3 	bl	800dde4 <CreateLine>
#endif
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a7e:	4b10      	ldr	r3, [pc, #64]	@ (8003ac0 <ESP_Send+0x5c>)
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	250f      	movs	r5, #15
 8003a84:	197c      	adds	r4, r7, r5
 8003a86:	1cbb      	adds	r3, r7, #2
 8003a88:	881a      	ldrh	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	f013 f929 	bl	8016ce4 <HAL_UART_Transmit_DMA>
 8003a92:	0003      	movs	r3, r0
 8003a94:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a96:	197b      	adds	r3, r7, r5
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <ESP_Send+0x4a>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a9e:	4a09      	ldr	r2, [pc, #36]	@ (8003ac4 <ESP_Send+0x60>)
 8003aa0:	4b09      	ldr	r3, [pc, #36]	@ (8003ac8 <ESP_Send+0x64>)
 8003aa2:	0019      	movs	r1, r3
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	f00a f99d 	bl	800dde4 <CreateLine>
    return false;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e000      	b.n	8003ab0 <ESP_Send+0x4c>
  }
  return true;
 8003aae:	2301      	movs	r3, #1
}
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b004      	add	sp, #16
 8003ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ab8:	08022a98 	.word	0x08022a98
 8003abc:	08022aa8 	.word	0x08022aa8
 8003ac0:	20000444 	.word	0x20000444
 8003ac4:	08022aac 	.word	0x08022aac
 8003ac8:	08022acc 	.word	0x08022acc

08003acc <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	000a      	movs	r2, r1
 8003ad6:	1cbb      	adds	r3, r7, #2
 8003ad8:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003ada:	4b56      	ldr	r3, [pc, #344]	@ (8003c34 <ESP_Receive+0x168>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003ae0:	260f      	movs	r6, #15
 8003ae2:	19bb      	adds	r3, r7, r6
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003ae8:	4b53      	ldr	r3, [pc, #332]	@ (8003c38 <ESP_Receive+0x16c>)
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	250e      	movs	r5, #14
 8003aee:	197c      	adds	r4, r7, r5
 8003af0:	1cbb      	adds	r3, r7, #2
 8003af2:	881a      	ldrh	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	0019      	movs	r1, r3
 8003af8:	f013 f984 	bl	8016e04 <HAL_UART_Receive_DMA>
 8003afc:	0003      	movs	r3, r0
 8003afe:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003b00:	002c      	movs	r4, r5
 8003b02:	193b      	adds	r3, r7, r4
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d100      	bne.n	8003b0c <ESP_Receive+0x40>
 8003b0a:	e08e      	b.n	8003c2a <ESP_Receive+0x15e>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003b0c:	4b4a      	ldr	r3, [pc, #296]	@ (8003c38 <ESP_Receive+0x16c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2284      	movs	r2, #132	@ 0x84
 8003b12:	589b      	ldr	r3, [r3, r2]
 8003b14:	4a49      	ldr	r2, [pc, #292]	@ (8003c3c <ESP_Receive+0x170>)
 8003b16:	494a      	ldr	r1, [pc, #296]	@ (8003c40 <ESP_Receive+0x174>)
 8003b18:	2001      	movs	r0, #1
 8003b1a:	f00a f963 	bl	800dde4 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003b1e:	193b      	adds	r3, r7, r4
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2201      	movs	r2, #1
 8003b24:	4013      	ands	r3, r2
 8003b26:	d008      	beq.n	8003b3a <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003b28:	4a46      	ldr	r2, [pc, #280]	@ (8003c44 <ESP_Receive+0x178>)
 8003b2a:	4b45      	ldr	r3, [pc, #276]	@ (8003c40 <ESP_Receive+0x174>)
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	2001      	movs	r0, #1
 8003b30:	f00a f958 	bl	800dde4 <CreateLine>
      reset = true;
 8003b34:	19bb      	adds	r3, r7, r6
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003b3a:	230e      	movs	r3, #14
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2202      	movs	r2, #2
 8003b42:	4013      	ands	r3, r2
 8003b44:	d005      	beq.n	8003b52 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003b46:	4a40      	ldr	r2, [pc, #256]	@ (8003c48 <ESP_Receive+0x17c>)
 8003b48:	4b3d      	ldr	r3, [pc, #244]	@ (8003c40 <ESP_Receive+0x174>)
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	f00a f949 	bl	800dde4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003b52:	230e      	movs	r3, #14
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2204      	movs	r2, #4
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d005      	beq.n	8003b6a <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003b5e:	4a3b      	ldr	r2, [pc, #236]	@ (8003c4c <ESP_Receive+0x180>)
 8003b60:	4b37      	ldr	r3, [pc, #220]	@ (8003c40 <ESP_Receive+0x174>)
 8003b62:	0019      	movs	r1, r3
 8003b64:	2001      	movs	r0, #1
 8003b66:	f00a f93d 	bl	800dde4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003b6a:	230e      	movs	r3, #14
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2208      	movs	r2, #8
 8003b72:	4013      	ands	r3, r2
 8003b74:	d005      	beq.n	8003b82 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003b76:	4a36      	ldr	r2, [pc, #216]	@ (8003c50 <ESP_Receive+0x184>)
 8003b78:	4b31      	ldr	r3, [pc, #196]	@ (8003c40 <ESP_Receive+0x174>)
 8003b7a:	0019      	movs	r1, r3
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	f00a f931 	bl	800dde4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003b82:	230e      	movs	r3, #14
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2210      	movs	r2, #16
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d005      	beq.n	8003b9a <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003b8e:	4a31      	ldr	r2, [pc, #196]	@ (8003c54 <ESP_Receive+0x188>)
 8003b90:	4b2b      	ldr	r3, [pc, #172]	@ (8003c40 <ESP_Receive+0x174>)
 8003b92:	0019      	movs	r1, r3
 8003b94:	2001      	movs	r0, #1
 8003b96:	f00a f925 	bl	800dde4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003b9a:	230e      	movs	r3, #14
 8003b9c:	18fb      	adds	r3, r7, r3
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	d005      	beq.n	8003bb2 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003ba6:	4a2c      	ldr	r2, [pc, #176]	@ (8003c58 <ESP_Receive+0x18c>)
 8003ba8:	4b25      	ldr	r3, [pc, #148]	@ (8003c40 <ESP_Receive+0x174>)
 8003baa:	0019      	movs	r1, r3
 8003bac:	2001      	movs	r0, #1
 8003bae:	f00a f919 	bl	800dde4 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003bb2:	230e      	movs	r3, #14
 8003bb4:	18fb      	adds	r3, r7, r3
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2240      	movs	r2, #64	@ 0x40
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d005      	beq.n	8003bca <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003bbe:	4a27      	ldr	r2, [pc, #156]	@ (8003c5c <ESP_Receive+0x190>)
 8003bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003c40 <ESP_Receive+0x174>)
 8003bc2:	0019      	movs	r1, r3
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	f00a f90d 	bl	800dde4 <CreateLine>
    }
#endif
    if (reset) {
 8003bca:	230f      	movs	r3, #15
 8003bcc:	18fb      	adds	r3, r7, r3
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d025      	beq.n	8003c20 <ESP_Receive+0x154>
    // Fire all LEDs to red independent of usertoggle or power status and reboot
      TIM2 -> CCR1 = 0;
 8003bd4:	2380      	movs	r3, #128	@ 0x80
 8003bd6:	05db      	lsls	r3, r3, #23
 8003bd8:	2200      	movs	r2, #0
 8003bda:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 4000;
 8003bdc:	2380      	movs	r3, #128	@ 0x80
 8003bde:	05db      	lsls	r3, r3, #23
 8003be0:	22fa      	movs	r2, #250	@ 0xfa
 8003be2:	0112      	lsls	r2, r2, #4
 8003be4:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 8003be6:	2380      	movs	r3, #128	@ 0x80
 8003be8:	05db      	lsls	r3, r3, #23
 8003bea:	22fa      	movs	r2, #250	@ 0xfa
 8003bec:	0112      	lsls	r2, r2, #4
 8003bee:	641a      	str	r2, [r3, #64]	@ 0x40
      TIM3 -> CCR1 = 0;
 8003bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c60 <ESP_Receive+0x194>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8003bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8003c60 <ESP_Receive+0x194>)
 8003bf8:	22fa      	movs	r2, #250	@ 0xfa
 8003bfa:	0112      	lsls	r2, r2, #4
 8003bfc:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8003bfe:	4b18      	ldr	r3, [pc, #96]	@ (8003c60 <ESP_Receive+0x194>)
 8003c00:	22fa      	movs	r2, #250	@ 0xfa
 8003c02:	0112      	lsls	r2, r2, #4
 8003c04:	63da      	str	r2, [r3, #60]	@ 0x3c

      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false);
 8003c06:	4b17      	ldr	r3, [pc, #92]	@ (8003c64 <ESP_Receive+0x198>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f00b ffd0 	bl	800fbb2 <HAL_GPIO_WritePin>
      HAL_Delay(2000);
 8003c12:	23fa      	movs	r3, #250	@ 0xfa
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	0018      	movs	r0, r3
 8003c18:	f00a fd44 	bl	800e6a4 <HAL_Delay>
      HAL_NVIC_SystemReset();
 8003c1c:	f00b fa01 	bl	800f022 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003c20:	4b04      	ldr	r3, [pc, #16]	@ (8003c34 <ESP_Receive+0x168>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	701a      	strb	r2, [r3, #0]
    return false;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e000      	b.n	8003c2c <ESP_Receive+0x160>
  }
  return true;
 8003c2a:	2301      	movs	r3, #1
}
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b005      	add	sp, #20
 8003c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c34:	20000448 	.word	0x20000448
 8003c38:	20000444 	.word	0x20000444
 8003c3c:	08022ad0 	.word	0x08022ad0
 8003c40:	08022acc 	.word	0x08022acc
 8003c44:	08022b00 	.word	0x08022b00
 8003c48:	08022b24 	.word	0x08022b24
 8003c4c:	08022b48 	.word	0x08022b48
 8003c50:	08022b6c 	.word	0x08022b6c
 8003c54:	08022b90 	.word	0x08022b90
 8003c58:	08022bbc 	.word	0x08022bbc
 8003c5c:	08022bec 	.word	0x08022bec
 8003c60:	40000400 	.word	0x40000400
 8003c64:	50000400 	.word	0x50000400

08003c68 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003c70:	4b0a      	ldr	r3, [pc, #40]	@ (8003c9c <HAL_UART_ErrorCallback+0x34>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d10c      	bne.n	8003c94 <HAL_UART_ErrorCallback+0x2c>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    if (huart->ErrorCode != 4) {
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2284      	movs	r2, #132	@ 0x84
 8003c7e:	589b      	ldr	r3, [r3, r2]
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d007      	beq.n	8003c94 <HAL_UART_ErrorCallback+0x2c>
      Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2284      	movs	r2, #132	@ 0x84
 8003c88:	589b      	ldr	r3, [r3, r2]
 8003c8a:	4a05      	ldr	r2, [pc, #20]	@ (8003ca0 <HAL_UART_ErrorCallback+0x38>)
 8003c8c:	4905      	ldr	r1, [pc, #20]	@ (8003ca4 <HAL_UART_ErrorCallback+0x3c>)
 8003c8e:	2003      	movs	r0, #3
 8003c90:	f00a f8a8 	bl	800dde4 <CreateLine>
    }
  }
}
 8003c94:	46c0      	nop			@ (mov r8, r8)
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b002      	add	sp, #8
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20000444 	.word	0x20000444
 8003ca0:	08022c1c 	.word	0x08022c1c
 8003ca4:	08022aa8 	.word	0x08022aa8

08003ca8 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e010      	b.n	8003cda <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	001a      	movs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	1898      	adds	r0, r3, r2
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	18d3      	adds	r3, r2, r3
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	001a      	movs	r2, r3
 8003ccc:	4b07      	ldr	r3, [pc, #28]	@ (8003cec <uint8ArrayToString+0x44>)
 8003cce:	0019      	movs	r1, r3
 8003cd0:	f01b fdf2 	bl	801f8b8 <siprintf>
  for (int i = 0; i < 12; i++)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b0b      	cmp	r3, #11
 8003cde:	ddeb      	ble.n	8003cb8 <uint8ArrayToString+0x10>
  }
}
 8003ce0:	46c0      	nop			@ (mov r8, r8)
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b004      	add	sp, #16
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	46c0      	nop			@ (mov r8, r8)
 8003cec:	08022c48 	.word	0x08022c48

08003cf0 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf2:	b089      	sub	sp, #36	@ 0x24
 8003cf4:	af04      	add	r7, sp, #16
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	1dfb      	adds	r3, r7, #7
 8003cfa:	701a      	strb	r2, [r3, #0]
  static uint8_t solarConfig[IdSize];
  static uint8_t noxConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003cfc:	4bdb      	ldr	r3, [pc, #876]	@ (800406c <CreateMessage+0x37c>)
 8003cfe:	48dc      	ldr	r0, [pc, #880]	@ (8004070 <CreateMessage+0x380>)
 8003d00:	220c      	movs	r2, #12
 8003d02:	0019      	movs	r1, r3
 8003d04:	f7ff fcf8 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003d08:	4bda      	ldr	r3, [pc, #872]	@ (8004074 <CreateMessage+0x384>)
 8003d0a:	48db      	ldr	r0, [pc, #876]	@ (8004078 <CreateMessage+0x388>)
 8003d0c:	220c      	movs	r2, #12
 8003d0e:	0019      	movs	r1, r3
 8003d10:	f7ff fcf2 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003d14:	4bd9      	ldr	r3, [pc, #868]	@ (800407c <CreateMessage+0x38c>)
 8003d16:	48da      	ldr	r0, [pc, #872]	@ (8004080 <CreateMessage+0x390>)
 8003d18:	220c      	movs	r2, #12
 8003d1a:	0019      	movs	r1, r3
 8003d1c:	f7ff fcec 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003d20:	4bd8      	ldr	r3, [pc, #864]	@ (8004084 <CreateMessage+0x394>)
 8003d22:	48d9      	ldr	r0, [pc, #868]	@ (8004088 <CreateMessage+0x398>)
 8003d24:	220c      	movs	r2, #12
 8003d26:	0019      	movs	r1, r3
 8003d28:	f7ff fce6 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003d2c:	4bd7      	ldr	r3, [pc, #860]	@ (800408c <CreateMessage+0x39c>)
 8003d2e:	48d8      	ldr	r0, [pc, #864]	@ (8004090 <CreateMessage+0x3a0>)
 8003d30:	220c      	movs	r2, #12
 8003d32:	0019      	movs	r1, r3
 8003d34:	f7ff fce0 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003d38:	4bd6      	ldr	r3, [pc, #856]	@ (8004094 <CreateMessage+0x3a4>)
 8003d3a:	48d7      	ldr	r0, [pc, #860]	@ (8004098 <CreateMessage+0x3a8>)
 8003d3c:	220c      	movs	r2, #12
 8003d3e:	0019      	movs	r1, r3
 8003d40:	f7ff fcda 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003d44:	4bd5      	ldr	r3, [pc, #852]	@ (800409c <CreateMessage+0x3ac>)
 8003d46:	48d6      	ldr	r0, [pc, #856]	@ (80040a0 <CreateMessage+0x3b0>)
 8003d48:	220c      	movs	r2, #12
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	f7ff fcd4 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003d50:	4bd4      	ldr	r3, [pc, #848]	@ (80040a4 <CreateMessage+0x3b4>)
 8003d52:	48d5      	ldr	r0, [pc, #852]	@ (80040a8 <CreateMessage+0x3b8>)
 8003d54:	220c      	movs	r2, #12
 8003d56:	0019      	movs	r1, r3
 8003d58:	f7ff fcce 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003d5c:	4bd3      	ldr	r3, [pc, #844]	@ (80040ac <CreateMessage+0x3bc>)
 8003d5e:	48d4      	ldr	r0, [pc, #848]	@ (80040b0 <CreateMessage+0x3c0>)
 8003d60:	220c      	movs	r2, #12
 8003d62:	0019      	movs	r1, r3
 8003d64:	f7ff fcc8 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003d68:	f7ff fd7e 	bl	8003868 <checkName>
 8003d6c:	1e03      	subs	r3, r0, #0
 8003d6e:	d006      	beq.n	8003d7e <CreateMessage+0x8e>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003d70:	4bd0      	ldr	r3, [pc, #832]	@ (80040b4 <CreateMessage+0x3c4>)
 8003d72:	48d1      	ldr	r0, [pc, #836]	@ (80040b8 <CreateMessage+0x3c8>)
 8003d74:	221e      	movs	r2, #30
 8003d76:	0019      	movs	r1, r3
 8003d78:	f7ff fcbe 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003d7c:	e005      	b.n	8003d8a <CreateMessage+0x9a>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003d7e:	4bcd      	ldr	r3, [pc, #820]	@ (80040b4 <CreateMessage+0x3c4>)
 8003d80:	4ace      	ldr	r2, [pc, #824]	@ (80040bc <CreateMessage+0x3cc>)
 8003d82:	6811      	ldr	r1, [r2, #0]
 8003d84:	6019      	str	r1, [r3, #0]
 8003d86:	7912      	ldrb	r2, [r2, #4]
 8003d88:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  Debug("sensorid voor opensensmaps nox: %d", noxConfig);
 8003d8a:	4bc4      	ldr	r3, [pc, #784]	@ (800409c <CreateMessage+0x3ac>)
 8003d8c:	4acc      	ldr	r2, [pc, #816]	@ (80040c0 <CreateMessage+0x3d0>)
 8003d8e:	49cd      	ldr	r1, [pc, #820]	@ (80040c4 <CreateMessage+0x3d4>)
 8003d90:	2003      	movs	r0, #3
 8003d92:	f00a f827 	bl	800dde4 <CreateLine>
  setCharges();
 8003d96:	f7ff fd1d 	bl	80037d4 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1152);
 8003d9a:	2390      	movs	r3, #144	@ 0x90
 8003d9c:	00da      	lsls	r2, r3, #3
 8003d9e:	4bca      	ldr	r3, [pc, #808]	@ (80040c8 <CreateMessage+0x3d8>)
 8003da0:	2100      	movs	r1, #0
 8003da2:	0018      	movs	r0, r3
 8003da4:	f01b fecc 	bl	801fb40 <memset>
  uint16_t index = 0;
 8003da8:	260e      	movs	r6, #14
 8003daa:	19bb      	adds	r3, r7, r6
 8003dac:	2200      	movs	r2, #0
 8003dae:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003db0:	19bb      	adds	r3, r7, r6
 8003db2:	881a      	ldrh	r2, [r3, #0]
 8003db4:	4bc4      	ldr	r3, [pc, #784]	@ (80040c8 <CreateMessage+0x3d8>)
 8003db6:	18d3      	adds	r3, r2, r3
 8003db8:	4ac4      	ldr	r2, [pc, #784]	@ (80040cc <CreateMessage+0x3dc>)
 8003dba:	0011      	movs	r1, r2
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f01b fd7b 	bl	801f8b8 <siprintf>
  index = strlen(message);
 8003dc2:	4bc1      	ldr	r3, [pc, #772]	@ (80040c8 <CreateMessage+0x3d8>)
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7fc f9d1 	bl	800016c <strlen>
 8003dca:	0002      	movs	r2, r0
 8003dcc:	19bb      	adds	r3, r7, r6
 8003dce:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003dd0:	4aa6      	ldr	r2, [pc, #664]	@ (800406c <CreateMessage+0x37c>)
 8003dd2:	4bbf      	ldr	r3, [pc, #764]	@ (80040d0 <CreateMessage+0x3e0>)
 8003dd4:	0011      	movs	r1, r2
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7ff ff66 	bl	8003ca8 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003ddc:	19bb      	adds	r3, r7, r6
 8003dde:	881a      	ldrh	r2, [r3, #0]
 8003de0:	4bb9      	ldr	r3, [pc, #740]	@ (80040c8 <CreateMessage+0x3d8>)
 8003de2:	18d4      	adds	r4, r2, r3
 8003de4:	4bbb      	ldr	r3, [pc, #748]	@ (80040d4 <CreateMessage+0x3e4>)
 8003de6:	689d      	ldr	r5, [r3, #8]
 8003de8:	4bbb      	ldr	r3, [pc, #748]	@ (80040d8 <CreateMessage+0x3e8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	1c18      	adds	r0, r3, #0
 8003dee:	f7ff fb39 	bl	8003464 <__aeabi_f2d>
 8003df2:	0002      	movs	r2, r0
 8003df4:	000b      	movs	r3, r1
 8003df6:	48af      	ldr	r0, [pc, #700]	@ (80040b4 <CreateMessage+0x3c4>)
 8003df8:	49b8      	ldr	r1, [pc, #736]	@ (80040dc <CreateMessage+0x3ec>)
 8003dfa:	9202      	str	r2, [sp, #8]
 8003dfc:	9303      	str	r3, [sp, #12]
 8003dfe:	4bb4      	ldr	r3, [pc, #720]	@ (80040d0 <CreateMessage+0x3e0>)
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	0003      	movs	r3, r0
 8003e04:	002a      	movs	r2, r5
 8003e06:	0020      	movs	r0, r4
 8003e08:	f01b fd56 	bl	801f8b8 <siprintf>
  index = strlen(message);
 8003e0c:	4bae      	ldr	r3, [pc, #696]	@ (80040c8 <CreateMessage+0x3d8>)
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f7fc f9ac 	bl	800016c <strlen>
 8003e14:	0002      	movs	r2, r0
 8003e16:	19bb      	adds	r3, r7, r6
 8003e18:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003e1a:	4a96      	ldr	r2, [pc, #600]	@ (8004074 <CreateMessage+0x384>)
 8003e1c:	4bac      	ldr	r3, [pc, #688]	@ (80040d0 <CreateMessage+0x3e0>)
 8003e1e:	0011      	movs	r1, r2
 8003e20:	0018      	movs	r0, r3
 8003e22:	f7ff ff41 	bl	8003ca8 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003e26:	19bb      	adds	r3, r7, r6
 8003e28:	881a      	ldrh	r2, [r3, #0]
 8003e2a:	4ba7      	ldr	r3, [pc, #668]	@ (80040c8 <CreateMessage+0x3d8>)
 8003e2c:	18d4      	adds	r4, r2, r3
 8003e2e:	4ba9      	ldr	r3, [pc, #676]	@ (80040d4 <CreateMessage+0x3e4>)
 8003e30:	689d      	ldr	r5, [r3, #8]
 8003e32:	4bab      	ldr	r3, [pc, #684]	@ (80040e0 <CreateMessage+0x3f0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	1c18      	adds	r0, r3, #0
 8003e38:	f7ff fb14 	bl	8003464 <__aeabi_f2d>
 8003e3c:	0002      	movs	r2, r0
 8003e3e:	000b      	movs	r3, r1
 8003e40:	489c      	ldr	r0, [pc, #624]	@ (80040b4 <CreateMessage+0x3c4>)
 8003e42:	49a8      	ldr	r1, [pc, #672]	@ (80040e4 <CreateMessage+0x3f4>)
 8003e44:	9202      	str	r2, [sp, #8]
 8003e46:	9303      	str	r3, [sp, #12]
 8003e48:	4ba1      	ldr	r3, [pc, #644]	@ (80040d0 <CreateMessage+0x3e0>)
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	002a      	movs	r2, r5
 8003e50:	0020      	movs	r0, r4
 8003e52:	f01b fd31 	bl	801f8b8 <siprintf>
  index = strlen(message);
 8003e56:	4b9c      	ldr	r3, [pc, #624]	@ (80040c8 <CreateMessage+0x3d8>)
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7fc f987 	bl	800016c <strlen>
 8003e5e:	0002      	movs	r2, r0
 8003e60:	19bb      	adds	r3, r7, r6
 8003e62:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003e64:	4a85      	ldr	r2, [pc, #532]	@ (800407c <CreateMessage+0x38c>)
 8003e66:	4b9a      	ldr	r3, [pc, #616]	@ (80040d0 <CreateMessage+0x3e0>)
 8003e68:	0011      	movs	r1, r2
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f7ff ff1c 	bl	8003ca8 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBA);
 8003e70:	19bb      	adds	r3, r7, r6
 8003e72:	881a      	ldrh	r2, [r3, #0]
 8003e74:	4b94      	ldr	r3, [pc, #592]	@ (80040c8 <CreateMessage+0x3d8>)
 8003e76:	18d4      	adds	r4, r2, r3
 8003e78:	4b96      	ldr	r3, [pc, #600]	@ (80040d4 <CreateMessage+0x3e4>)
 8003e7a:	689d      	ldr	r5, [r3, #8]
 8003e7c:	4b9a      	ldr	r3, [pc, #616]	@ (80040e8 <CreateMessage+0x3f8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	1c18      	adds	r0, r3, #0
 8003e82:	f7ff faef 	bl	8003464 <__aeabi_f2d>
 8003e86:	0002      	movs	r2, r0
 8003e88:	000b      	movs	r3, r1
 8003e8a:	488a      	ldr	r0, [pc, #552]	@ (80040b4 <CreateMessage+0x3c4>)
 8003e8c:	4997      	ldr	r1, [pc, #604]	@ (80040ec <CreateMessage+0x3fc>)
 8003e8e:	9202      	str	r2, [sp, #8]
 8003e90:	9303      	str	r3, [sp, #12]
 8003e92:	4b8f      	ldr	r3, [pc, #572]	@ (80040d0 <CreateMessage+0x3e0>)
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	0003      	movs	r3, r0
 8003e98:	002a      	movs	r2, r5
 8003e9a:	0020      	movs	r0, r4
 8003e9c:	f01b fd0c 	bl	801f8b8 <siprintf>
  index = strlen(message);
 8003ea0:	4b89      	ldr	r3, [pc, #548]	@ (80040c8 <CreateMessage+0x3d8>)
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f7fc f962 	bl	800016c <strlen>
 8003ea8:	0002      	movs	r2, r0
 8003eaa:	19bb      	adds	r3, r7, r6
 8003eac:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003eae:	4a75      	ldr	r2, [pc, #468]	@ (8004084 <CreateMessage+0x394>)
 8003eb0:	4b87      	ldr	r3, [pc, #540]	@ (80040d0 <CreateMessage+0x3e0>)
 8003eb2:	0011      	movs	r1, r2
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f7ff fef7 	bl	8003ca8 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003eba:	19bb      	adds	r3, r7, r6
 8003ebc:	881a      	ldrh	r2, [r3, #0]
 8003ebe:	4b82      	ldr	r3, [pc, #520]	@ (80040c8 <CreateMessage+0x3d8>)
 8003ec0:	18d0      	adds	r0, r2, r3
 8003ec2:	4b84      	ldr	r3, [pc, #528]	@ (80040d4 <CreateMessage+0x3e4>)
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	4b8a      	ldr	r3, [pc, #552]	@ (80040f0 <CreateMessage+0x400>)
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	4c7a      	ldr	r4, [pc, #488]	@ (80040b4 <CreateMessage+0x3c4>)
 8003ecc:	4989      	ldr	r1, [pc, #548]	@ (80040f4 <CreateMessage+0x404>)
 8003ece:	9301      	str	r3, [sp, #4]
 8003ed0:	4b7f      	ldr	r3, [pc, #508]	@ (80040d0 <CreateMessage+0x3e0>)
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	0023      	movs	r3, r4
 8003ed6:	f01b fcef 	bl	801f8b8 <siprintf>
  index = strlen(message);
 8003eda:	4b7b      	ldr	r3, [pc, #492]	@ (80040c8 <CreateMessage+0x3d8>)
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7fc f945 	bl	800016c <strlen>
 8003ee2:	0002      	movs	r2, r0
 8003ee4:	19bb      	adds	r3, r7, r6
 8003ee6:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003ee8:	1dfb      	adds	r3, r7, #7
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2201      	movs	r2, #1
 8003eee:	4053      	eors	r3, r2
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d100      	bne.n	8003ef8 <CreateMessage+0x208>
 8003ef6:	e113      	b.n	8004120 <CreateMessage+0x430>
    uint8ArrayToString(Buffer, batteryConfig);
 8003ef8:	4a64      	ldr	r2, [pc, #400]	@ (800408c <CreateMessage+0x39c>)
 8003efa:	4b75      	ldr	r3, [pc, #468]	@ (80040d0 <CreateMessage+0x3e0>)
 8003efc:	0011      	movs	r1, r2
 8003efe:	0018      	movs	r0, r3
 8003f00:	f7ff fed2 	bl	8003ca8 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003f04:	19bb      	adds	r3, r7, r6
 8003f06:	881a      	ldrh	r2, [r3, #0]
 8003f08:	4b6f      	ldr	r3, [pc, #444]	@ (80040c8 <CreateMessage+0x3d8>)
 8003f0a:	18d4      	adds	r4, r2, r3
 8003f0c:	4b71      	ldr	r3, [pc, #452]	@ (80040d4 <CreateMessage+0x3e4>)
 8003f0e:	689d      	ldr	r5, [r3, #8]
 8003f10:	4b79      	ldr	r3, [pc, #484]	@ (80040f8 <CreateMessage+0x408>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	1c18      	adds	r0, r3, #0
 8003f16:	f7ff faa5 	bl	8003464 <__aeabi_f2d>
 8003f1a:	0002      	movs	r2, r0
 8003f1c:	000b      	movs	r3, r1
 8003f1e:	4865      	ldr	r0, [pc, #404]	@ (80040b4 <CreateMessage+0x3c4>)
 8003f20:	4976      	ldr	r1, [pc, #472]	@ (80040fc <CreateMessage+0x40c>)
 8003f22:	9202      	str	r2, [sp, #8]
 8003f24:	9303      	str	r3, [sp, #12]
 8003f26:	4b6a      	ldr	r3, [pc, #424]	@ (80040d0 <CreateMessage+0x3e0>)
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	0003      	movs	r3, r0
 8003f2c:	002a      	movs	r2, r5
 8003f2e:	0020      	movs	r0, r4
 8003f30:	f01b fcc2 	bl	801f8b8 <siprintf>
    index = strlen(message);
 8003f34:	4b64      	ldr	r3, [pc, #400]	@ (80040c8 <CreateMessage+0x3d8>)
 8003f36:	0018      	movs	r0, r3
 8003f38:	f7fc f918 	bl	800016c <strlen>
 8003f3c:	0002      	movs	r2, r0
 8003f3e:	19bb      	adds	r3, r7, r6
 8003f40:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003f42:	4a54      	ldr	r2, [pc, #336]	@ (8004094 <CreateMessage+0x3a4>)
 8003f44:	4b62      	ldr	r3, [pc, #392]	@ (80040d0 <CreateMessage+0x3e0>)
 8003f46:	0011      	movs	r1, r2
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f7ff fead 	bl	8003ca8 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003f4e:	19bb      	adds	r3, r7, r6
 8003f50:	881a      	ldrh	r2, [r3, #0]
 8003f52:	4b5d      	ldr	r3, [pc, #372]	@ (80040c8 <CreateMessage+0x3d8>)
 8003f54:	18d4      	adds	r4, r2, r3
 8003f56:	4b5f      	ldr	r3, [pc, #380]	@ (80040d4 <CreateMessage+0x3e4>)
 8003f58:	689d      	ldr	r5, [r3, #8]
 8003f5a:	4b69      	ldr	r3, [pc, #420]	@ (8004100 <CreateMessage+0x410>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	1c18      	adds	r0, r3, #0
 8003f60:	f7ff fa80 	bl	8003464 <__aeabi_f2d>
 8003f64:	0002      	movs	r2, r0
 8003f66:	000b      	movs	r3, r1
 8003f68:	4852      	ldr	r0, [pc, #328]	@ (80040b4 <CreateMessage+0x3c4>)
 8003f6a:	4966      	ldr	r1, [pc, #408]	@ (8004104 <CreateMessage+0x414>)
 8003f6c:	9202      	str	r2, [sp, #8]
 8003f6e:	9303      	str	r3, [sp, #12]
 8003f70:	4b57      	ldr	r3, [pc, #348]	@ (80040d0 <CreateMessage+0x3e0>)
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	0003      	movs	r3, r0
 8003f76:	002a      	movs	r2, r5
 8003f78:	0020      	movs	r0, r4
 8003f7a:	f01b fc9d 	bl	801f8b8 <siprintf>
    index = strlen(message);
 8003f7e:	4b52      	ldr	r3, [pc, #328]	@ (80040c8 <CreateMessage+0x3d8>)
 8003f80:	0018      	movs	r0, r3
 8003f82:	f7fc f8f3 	bl	800016c <strlen>
 8003f86:	0002      	movs	r2, r0
 8003f88:	19bb      	adds	r3, r7, r6
 8003f8a:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, noxConfig);
 8003f8c:	4a43      	ldr	r2, [pc, #268]	@ (800409c <CreateMessage+0x3ac>)
 8003f8e:	4b50      	ldr	r3, [pc, #320]	@ (80040d0 <CreateMessage+0x3e0>)
 8003f90:	0011      	movs	r1, r2
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7ff fe88 	bl	8003ca8 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"NOxr\"},", uid[2], (char*)nameConfig, Buffer, airNOx);
 8003f98:	19bb      	adds	r3, r7, r6
 8003f9a:	881a      	ldrh	r2, [r3, #0]
 8003f9c:	4b4a      	ldr	r3, [pc, #296]	@ (80040c8 <CreateMessage+0x3d8>)
 8003f9e:	18d4      	adds	r4, r2, r3
 8003fa0:	4b4c      	ldr	r3, [pc, #304]	@ (80040d4 <CreateMessage+0x3e4>)
 8003fa2:	689d      	ldr	r5, [r3, #8]
 8003fa4:	4b58      	ldr	r3, [pc, #352]	@ (8004108 <CreateMessage+0x418>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	1c18      	adds	r0, r3, #0
 8003faa:	f7ff fa5b 	bl	8003464 <__aeabi_f2d>
 8003fae:	0002      	movs	r2, r0
 8003fb0:	000b      	movs	r3, r1
 8003fb2:	4840      	ldr	r0, [pc, #256]	@ (80040b4 <CreateMessage+0x3c4>)
 8003fb4:	4955      	ldr	r1, [pc, #340]	@ (800410c <CreateMessage+0x41c>)
 8003fb6:	9202      	str	r2, [sp, #8]
 8003fb8:	9303      	str	r3, [sp, #12]
 8003fba:	4b45      	ldr	r3, [pc, #276]	@ (80040d0 <CreateMessage+0x3e0>)
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	0003      	movs	r3, r0
 8003fc0:	002a      	movs	r2, r5
 8003fc2:	0020      	movs	r0, r4
 8003fc4:	f01b fc78 	bl	801f8b8 <siprintf>
    index = strlen(message);
 8003fc8:	4b3f      	ldr	r3, [pc, #252]	@ (80040c8 <CreateMessage+0x3d8>)
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f7fc f8ce 	bl	800016c <strlen>
 8003fd0:	0002      	movs	r2, r0
 8003fd2:	19bb      	adds	r3, r7, r6
 8003fd4:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 8003fd6:	4a33      	ldr	r2, [pc, #204]	@ (80040a4 <CreateMessage+0x3b4>)
 8003fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80040d0 <CreateMessage+0x3e0>)
 8003fda:	0011      	movs	r1, r2
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7ff fe63 	bl	8003ca8 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, airPM2);
 8003fe2:	19bb      	adds	r3, r7, r6
 8003fe4:	881a      	ldrh	r2, [r3, #0]
 8003fe6:	4b38      	ldr	r3, [pc, #224]	@ (80040c8 <CreateMessage+0x3d8>)
 8003fe8:	18d4      	adds	r4, r2, r3
 8003fea:	4b3a      	ldr	r3, [pc, #232]	@ (80040d4 <CreateMessage+0x3e4>)
 8003fec:	689d      	ldr	r5, [r3, #8]
 8003fee:	4b48      	ldr	r3, [pc, #288]	@ (8004110 <CreateMessage+0x420>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	1c18      	adds	r0, r3, #0
 8003ff4:	f7ff fa36 	bl	8003464 <__aeabi_f2d>
 8003ff8:	0002      	movs	r2, r0
 8003ffa:	000b      	movs	r3, r1
 8003ffc:	482d      	ldr	r0, [pc, #180]	@ (80040b4 <CreateMessage+0x3c4>)
 8003ffe:	4945      	ldr	r1, [pc, #276]	@ (8004114 <CreateMessage+0x424>)
 8004000:	9202      	str	r2, [sp, #8]
 8004002:	9303      	str	r3, [sp, #12]
 8004004:	4b32      	ldr	r3, [pc, #200]	@ (80040d0 <CreateMessage+0x3e0>)
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	0003      	movs	r3, r0
 800400a:	002a      	movs	r2, r5
 800400c:	0020      	movs	r0, r4
 800400e:	f01b fc53 	bl	801f8b8 <siprintf>
    index = strlen(message);
 8004012:	4b2d      	ldr	r3, [pc, #180]	@ (80040c8 <CreateMessage+0x3d8>)
 8004014:	0018      	movs	r0, r3
 8004016:	f7fc f8a9 	bl	800016c <strlen>
 800401a:	0002      	movs	r2, r0
 800401c:	19bb      	adds	r3, r7, r6
 800401e:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 8004020:	4a22      	ldr	r2, [pc, #136]	@ (80040ac <CreateMessage+0x3bc>)
 8004022:	4b2b      	ldr	r3, [pc, #172]	@ (80040d0 <CreateMessage+0x3e0>)
 8004024:	0011      	movs	r1, r2
 8004026:	0018      	movs	r0, r3
 8004028:	f7ff fe3e 	bl	8003ca8 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, airPM10);
 800402c:	19bb      	adds	r3, r7, r6
 800402e:	881a      	ldrh	r2, [r3, #0]
 8004030:	4b25      	ldr	r3, [pc, #148]	@ (80040c8 <CreateMessage+0x3d8>)
 8004032:	18d4      	adds	r4, r2, r3
 8004034:	4b27      	ldr	r3, [pc, #156]	@ (80040d4 <CreateMessage+0x3e4>)
 8004036:	689d      	ldr	r5, [r3, #8]
 8004038:	4b37      	ldr	r3, [pc, #220]	@ (8004118 <CreateMessage+0x428>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	1c18      	adds	r0, r3, #0
 800403e:	f7ff fa11 	bl	8003464 <__aeabi_f2d>
 8004042:	0002      	movs	r2, r0
 8004044:	000b      	movs	r3, r1
 8004046:	481b      	ldr	r0, [pc, #108]	@ (80040b4 <CreateMessage+0x3c4>)
 8004048:	4934      	ldr	r1, [pc, #208]	@ (800411c <CreateMessage+0x42c>)
 800404a:	9202      	str	r2, [sp, #8]
 800404c:	9303      	str	r3, [sp, #12]
 800404e:	4b20      	ldr	r3, [pc, #128]	@ (80040d0 <CreateMessage+0x3e0>)
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	0003      	movs	r3, r0
 8004054:	002a      	movs	r2, r5
 8004056:	0020      	movs	r0, r4
 8004058:	f01b fc2e 	bl	801f8b8 <siprintf>
    index = strlen(message);
 800405c:	4b1a      	ldr	r3, [pc, #104]	@ (80040c8 <CreateMessage+0x3d8>)
 800405e:	0018      	movs	r0, r3
 8004060:	f7fc f884 	bl	800016c <strlen>
 8004064:	0002      	movs	r2, r0
 8004066:	19bb      	adds	r3, r7, r6
 8004068:	801a      	strh	r2, [r3, #0]
 800406a:	e07f      	b.n	800416c <CreateMessage+0x47c>
 800406c:	20000a6c 	.word	0x20000a6c
 8004070:	0808000c 	.word	0x0808000c
 8004074:	20000a78 	.word	0x20000a78
 8004078:	08080018 	.word	0x08080018
 800407c:	20000a84 	.word	0x20000a84
 8004080:	08080048 	.word	0x08080048
 8004084:	20000a90 	.word	0x20000a90
 8004088:	08080030 	.word	0x08080030
 800408c:	20000a9c 	.word	0x20000a9c
 8004090:	0808006c 	.word	0x0808006c
 8004094:	20000aa8 	.word	0x20000aa8
 8004098:	08080078 	.word	0x08080078
 800409c:	20000ab4 	.word	0x20000ab4
 80040a0:	08080024 	.word	0x08080024
 80040a4:	20000ac0 	.word	0x20000ac0
 80040a8:	08080054 	.word	0x08080054
 80040ac:	20000acc 	.word	0x20000acc
 80040b0:	08080060 	.word	0x08080060
 80040b4:	20000ad8 	.word	0x20000ad8
 80040b8:	08080090 	.word	0x08080090
 80040bc:	0802498c 	.word	0x0802498c
 80040c0:	08022c50 	.word	0x08022c50
 80040c4:	08022aa8 	.word	0x08022aa8
 80040c8:	2000058c 	.word	0x2000058c
 80040cc:	08022c74 	.word	0x08022c74
 80040d0:	20000af8 	.word	0x20000af8
 80040d4:	20000554 	.word	0x20000554
 80040d8:	20000568 	.word	0x20000568
 80040dc:	08022c78 	.word	0x08022c78
 80040e0:	2000056c 	.word	0x2000056c
 80040e4:	08022ccc 	.word	0x08022ccc
 80040e8:	2000057c 	.word	0x2000057c
 80040ec:	08022d24 	.word	0x08022d24
 80040f0:	20000578 	.word	0x20000578
 80040f4:	08022d80 	.word	0x08022d80
 80040f8:	20000570 	.word	0x20000570
 80040fc:	08022dd4 	.word	0x08022dd4
 8004100:	20000574 	.word	0x20000574
 8004104:	08022e34 	.word	0x08022e34
 8004108:	20000588 	.word	0x20000588
 800410c:	08022e94 	.word	0x08022e94
 8004110:	20000580 	.word	0x20000580
 8004114:	08022eec 	.word	0x08022eec
 8004118:	20000584 	.word	0x20000584
 800411c:	08022f48 	.word	0x08022f48

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8004120:	4a21      	ldr	r2, [pc, #132]	@ (80041a8 <CreateMessage+0x4b8>)
 8004122:	4b22      	ldr	r3, [pc, #136]	@ (80041ac <CreateMessage+0x4bc>)
 8004124:	0011      	movs	r1, r2
 8004126:	0018      	movs	r0, r3
 8004128:	f7ff fdbe 	bl	8003ca8 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 800412c:	260e      	movs	r6, #14
 800412e:	19bb      	adds	r3, r7, r6
 8004130:	881a      	ldrh	r2, [r3, #0]
 8004132:	4b1f      	ldr	r3, [pc, #124]	@ (80041b0 <CreateMessage+0x4c0>)
 8004134:	18d4      	adds	r4, r2, r3
 8004136:	4b1f      	ldr	r3, [pc, #124]	@ (80041b4 <CreateMessage+0x4c4>)
 8004138:	689d      	ldr	r5, [r3, #8]
 800413a:	4b1f      	ldr	r3, [pc, #124]	@ (80041b8 <CreateMessage+0x4c8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	1c18      	adds	r0, r3, #0
 8004140:	f7ff f990 	bl	8003464 <__aeabi_f2d>
 8004144:	0002      	movs	r2, r0
 8004146:	000b      	movs	r3, r1
 8004148:	481c      	ldr	r0, [pc, #112]	@ (80041bc <CreateMessage+0x4cc>)
 800414a:	491d      	ldr	r1, [pc, #116]	@ (80041c0 <CreateMessage+0x4d0>)
 800414c:	9202      	str	r2, [sp, #8]
 800414e:	9303      	str	r3, [sp, #12]
 8004150:	4b16      	ldr	r3, [pc, #88]	@ (80041ac <CreateMessage+0x4bc>)
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	0003      	movs	r3, r0
 8004156:	002a      	movs	r2, r5
 8004158:	0020      	movs	r0, r4
 800415a:	f01b fbad 	bl	801f8b8 <siprintf>
    index = strlen(message);
 800415e:	4b14      	ldr	r3, [pc, #80]	@ (80041b0 <CreateMessage+0x4c0>)
 8004160:	0018      	movs	r0, r3
 8004162:	f7fc f803 	bl	800016c <strlen>
 8004166:	0002      	movs	r2, r0
 8004168:	19bb      	adds	r3, r7, r6
 800416a:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  Debug("Length of datagram: %d", index);
 800416c:	240e      	movs	r4, #14
 800416e:	193b      	adds	r3, r7, r4
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	4a14      	ldr	r2, [pc, #80]	@ (80041c4 <CreateMessage+0x4d4>)
 8004174:	4914      	ldr	r1, [pc, #80]	@ (80041c8 <CreateMessage+0x4d8>)
 8004176:	2003      	movs	r0, #3
 8004178:	f009 fe34 	bl	800dde4 <CreateLine>
  index = sprintf(&message[index], "]");
 800417c:	193b      	adds	r3, r7, r4
 800417e:	881a      	ldrh	r2, [r3, #0]
 8004180:	4b0b      	ldr	r3, [pc, #44]	@ (80041b0 <CreateMessage+0x4c0>)
 8004182:	18d3      	adds	r3, r2, r3
 8004184:	4a11      	ldr	r2, [pc, #68]	@ (80041cc <CreateMessage+0x4dc>)
 8004186:	0011      	movs	r1, r2
 8004188:	0018      	movs	r0, r3
 800418a:	f01b fb95 	bl	801f8b8 <siprintf>
 800418e:	0002      	movs	r2, r0
 8004190:	193b      	adds	r3, r7, r4
 8004192:	801a      	strh	r2, [r3, #0]
  return strlen(message);
 8004194:	4b06      	ldr	r3, [pc, #24]	@ (80041b0 <CreateMessage+0x4c0>)
 8004196:	0018      	movs	r0, r3
 8004198:	f7fb ffe8 	bl	800016c <strlen>
 800419c:	0003      	movs	r3, r0
 800419e:	b29b      	uxth	r3, r3
}
 80041a0:	0018      	movs	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	b005      	add	sp, #20
 80041a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041a8:	20000a9c 	.word	0x20000a9c
 80041ac:	20000af8 	.word	0x20000af8
 80041b0:	2000058c 	.word	0x2000058c
 80041b4:	20000554 	.word	0x20000554
 80041b8:	20000570 	.word	0x20000570
 80041bc:	20000ad8 	.word	0x20000ad8
 80041c0:	08022fa0 	.word	0x08022fa0
 80041c4:	08022ff8 	.word	0x08022ff8
 80041c8:	08022aa8 	.word	0x08022aa8
 80041cc:	08023010 	.word	0x08023010

080041d0 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 80041d4:	2064      	movs	r0, #100	@ 0x64
 80041d6:	f00a fa65 	bl	800e6a4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80041da:	4b15      	ldr	r3, [pc, #84]	@ (8004230 <StartProg+0x60>)
 80041dc:	2200      	movs	r2, #0
 80041de:	2101      	movs	r1, #1
 80041e0:	0018      	movs	r0, r3
 80041e2:	f00b fce6 	bl	800fbb2 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80041e6:	2064      	movs	r0, #100	@ 0x64
 80041e8:	f00a fa5c 	bl	800e6a4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80041ec:	4b10      	ldr	r3, [pc, #64]	@ (8004230 <StartProg+0x60>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	2102      	movs	r1, #2
 80041f2:	0018      	movs	r0, r3
 80041f4:	f00b fcdd 	bl	800fbb2 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80041f8:	23fa      	movs	r3, #250	@ 0xfa
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	0018      	movs	r0, r3
 80041fe:	f00a fa51 	bl	800e6a4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004202:	4b0b      	ldr	r3, [pc, #44]	@ (8004230 <StartProg+0x60>)
 8004204:	2201      	movs	r2, #1
 8004206:	2101      	movs	r1, #1
 8004208:	0018      	movs	r0, r3
 800420a:	f00b fcd2 	bl	800fbb2 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800420e:	23fa      	movs	r3, #250	@ 0xfa
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	0018      	movs	r0, r3
 8004214:	f00a fa46 	bl	800e6a4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8004218:	4b05      	ldr	r3, [pc, #20]	@ (8004230 <StartProg+0x60>)
 800421a:	2201      	movs	r2, #1
 800421c:	2102      	movs	r1, #2
 800421e:	0018      	movs	r0, r3
 8004220:	f00b fcc7 	bl	800fbb2 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8004224:	2028      	movs	r0, #40	@ 0x28
 8004226:	f00a fa3d 	bl	800e6a4 <HAL_Delay>
}
 800422a:	46c0      	nop			@ (mov r8, r8)
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	50001c00 	.word	0x50001c00

08004234 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8004234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004236:	b0d9      	sub	sp, #356	@ 0x164
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	0008      	movs	r0, r1
 800423e:	0011      	movs	r1, r2
 8004240:	4ba4      	ldr	r3, [pc, #656]	@ (80044d4 <ParseBuffer+0x2a0>)
 8004242:	24b0      	movs	r4, #176	@ 0xb0
 8004244:	0064      	lsls	r4, r4, #1
 8004246:	191b      	adds	r3, r3, r4
 8004248:	19db      	adds	r3, r3, r7
 800424a:	1c02      	adds	r2, r0, #0
 800424c:	801a      	strh	r2, [r3, #0]
 800424e:	4ba2      	ldr	r3, [pc, #648]	@ (80044d8 <ParseBuffer+0x2a4>)
 8004250:	191b      	adds	r3, r3, r4
 8004252:	19db      	adds	r3, r3, r7
 8004254:	1c0a      	adds	r2, r1, #0
 8004256:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8004258:	2380      	movs	r3, #128	@ 0x80
 800425a:	005a      	lsls	r2, r3, #1
 800425c:	2348      	movs	r3, #72	@ 0x48
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	2100      	movs	r1, #0
 8004262:	0018      	movs	r0, r3
 8004264:	f01b fc6c 	bl	801fb40 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8004268:	2360      	movs	r3, #96	@ 0x60
 800426a:	33ff      	adds	r3, #255	@ 0xff
 800426c:	18fb      	adds	r3, r7, r3
 800426e:	2203      	movs	r2, #3
 8004270:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8004272:	23ae      	movs	r3, #174	@ 0xae
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	2200      	movs	r2, #0
 800427a:	801a      	strh	r2, [r3, #0]
 800427c:	e013      	b.n	80042a6 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 800427e:	20ae      	movs	r0, #174	@ 0xae
 8004280:	0040      	lsls	r0, r0, #1
 8004282:	183b      	adds	r3, r7, r0
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	18d2      	adds	r2, r2, r3
 800428a:	183b      	adds	r3, r7, r0
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	7811      	ldrb	r1, [r2, #0]
 8004290:	4a92      	ldr	r2, [pc, #584]	@ (80044dc <ParseBuffer+0x2a8>)
 8004292:	24b0      	movs	r4, #176	@ 0xb0
 8004294:	0064      	lsls	r4, r4, #1
 8004296:	1912      	adds	r2, r2, r4
 8004298:	19d2      	adds	r2, r2, r7
 800429a:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 800429c:	183b      	adds	r3, r7, r0
 800429e:	881a      	ldrh	r2, [r3, #0]
 80042a0:	183b      	adds	r3, r7, r0
 80042a2:	3201      	adds	r2, #1
 80042a4:	801a      	strh	r2, [r3, #0]
 80042a6:	23ae      	movs	r3, #174	@ 0xae
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	18fa      	adds	r2, r7, r3
 80042ac:	4b89      	ldr	r3, [pc, #548]	@ (80044d4 <ParseBuffer+0x2a0>)
 80042ae:	21b0      	movs	r1, #176	@ 0xb0
 80042b0:	0049      	lsls	r1, r1, #1
 80042b2:	185b      	adds	r3, r3, r1
 80042b4:	19db      	adds	r3, r3, r7
 80042b6:	8812      	ldrh	r2, [r2, #0]
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d3df      	bcc.n	800427e <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80042be:	4b85      	ldr	r3, [pc, #532]	@ (80044d4 <ParseBuffer+0x2a0>)
 80042c0:	185b      	adds	r3, r3, r1
 80042c2:	19db      	adds	r3, r3, r7
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	4a85      	ldr	r2, [pc, #532]	@ (80044dc <ParseBuffer+0x2a8>)
 80042c8:	1852      	adds	r2, r2, r1
 80042ca:	19d2      	adds	r2, r2, r7
 80042cc:	2100      	movs	r1, #0
 80042ce:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 80042d0:	f009 fe02 	bl	800ded8 <GetVerboseLevel>
 80042d4:	0003      	movs	r3, r0
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d106      	bne.n	80042e8 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 80042da:	2348      	movs	r3, #72	@ 0x48
 80042dc:	18fb      	adds	r3, r7, r3
 80042de:	4a80      	ldr	r2, [pc, #512]	@ (80044e0 <ParseBuffer+0x2ac>)
 80042e0:	4980      	ldr	r1, [pc, #512]	@ (80044e4 <ParseBuffer+0x2b0>)
 80042e2:	2003      	movs	r0, #3
 80042e4:	f009 fd7e 	bl	800dde4 <CreateLine>
#endif
  }
  char * ParsePoint = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	26ac      	movs	r6, #172	@ 0xac
 80042ec:	0076      	lsls	r6, r6, #1
 80042ee:	19ba      	adds	r2, r7, r6
 80042f0:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 80042f2:	4b7d      	ldr	r3, [pc, #500]	@ (80044e8 <ParseBuffer+0x2b4>)
 80042f4:	25b0      	movs	r5, #176	@ 0xb0
 80042f6:	006d      	lsls	r5, r5, #1
 80042f8:	195b      	adds	r3, r3, r5
 80042fa:	19db      	adds	r3, r3, r7
 80042fc:	4a7b      	ldr	r2, [pc, #492]	@ (80044ec <ParseBuffer+0x2b8>)
 80042fe:	8811      	ldrh	r1, [r2, #0]
 8004300:	8019      	strh	r1, [r3, #0]
 8004302:	7892      	ldrb	r2, [r2, #2]
 8004304:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8004306:	4b7a      	ldr	r3, [pc, #488]	@ (80044f0 <ParseBuffer+0x2bc>)
 8004308:	195b      	adds	r3, r3, r5
 800430a:	19db      	adds	r3, r3, r7
 800430c:	4a79      	ldr	r2, [pc, #484]	@ (80044f4 <ParseBuffer+0x2c0>)
 800430e:	6811      	ldr	r1, [r2, #0]
 8004310:	6019      	str	r1, [r3, #0]
 8004312:	8892      	ldrh	r2, [r2, #4]
 8004314:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8004316:	4b78      	ldr	r3, [pc, #480]	@ (80044f8 <ParseBuffer+0x2c4>)
 8004318:	195b      	adds	r3, r3, r5
 800431a:	19db      	adds	r3, r3, r7
 800431c:	4a77      	ldr	r2, [pc, #476]	@ (80044fc <ParseBuffer+0x2c8>)
 800431e:	6811      	ldr	r1, [r2, #0]
 8004320:	6019      	str	r1, [r3, #0]
 8004322:	7912      	ldrb	r2, [r2, #4]
 8004324:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8004326:	4b76      	ldr	r3, [pc, #472]	@ (8004500 <ParseBuffer+0x2cc>)
 8004328:	195b      	adds	r3, r3, r5
 800432a:	19db      	adds	r3, r3, r7
 800432c:	4a75      	ldr	r2, [pc, #468]	@ (8004504 <ParseBuffer+0x2d0>)
 800432e:	6811      	ldr	r1, [r2, #0]
 8004330:	6019      	str	r1, [r3, #0]
 8004332:	8892      	ldrh	r2, [r2, #4]
 8004334:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8004336:	4b74      	ldr	r3, [pc, #464]	@ (8004508 <ParseBuffer+0x2d4>)
 8004338:	195b      	adds	r3, r3, r5
 800433a:	19db      	adds	r3, r3, r7
 800433c:	223e      	movs	r2, #62	@ 0x3e
 800433e:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8004340:	4b72      	ldr	r3, [pc, #456]	@ (800450c <ParseBuffer+0x2d8>)
 8004342:	195b      	adds	r3, r3, r5
 8004344:	19db      	adds	r3, r3, r7
 8004346:	4a72      	ldr	r2, [pc, #456]	@ (8004510 <ParseBuffer+0x2dc>)
 8004348:	ca13      	ldmia	r2!, {r0, r1, r4}
 800434a:	c313      	stmia	r3!, {r0, r1, r4}
 800434c:	8811      	ldrh	r1, [r2, #0]
 800434e:	8019      	strh	r1, [r3, #0]
 8004350:	7892      	ldrb	r2, [r2, #2]
 8004352:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8004354:	4b6f      	ldr	r3, [pc, #444]	@ (8004514 <ParseBuffer+0x2e0>)
 8004356:	195b      	adds	r3, r3, r5
 8004358:	19db      	adds	r3, r3, r7
 800435a:	4a6f      	ldr	r2, [pc, #444]	@ (8004518 <ParseBuffer+0x2e4>)
 800435c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800435e:	c313      	stmia	r3!, {r0, r1, r4}
 8004360:	8812      	ldrh	r2, [r2, #0]
 8004362:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8004364:	4b5c      	ldr	r3, [pc, #368]	@ (80044d8 <ParseBuffer+0x2a4>)
 8004366:	195b      	adds	r3, r3, r5
 8004368:	19db      	adds	r3, r3, r7
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10a      	bne.n	8004386 <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 8004370:	2344      	movs	r3, #68	@ 0x44
 8004372:	18fa      	adds	r2, r7, r3
 8004374:	2348      	movs	r3, #72	@ 0x48
 8004376:	18fb      	adds	r3, r7, r3
 8004378:	0011      	movs	r1, r2
 800437a:	0018      	movs	r0, r3
 800437c:	f01b fc1b 	bl	801fbb6 <strstr>
 8004380:	0003      	movs	r3, r0
 8004382:	19ba      	adds	r2, r7, r6
 8004384:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8004386:	4b54      	ldr	r3, [pc, #336]	@ (80044d8 <ParseBuffer+0x2a4>)
 8004388:	22b0      	movs	r2, #176	@ 0xb0
 800438a:	0052      	lsls	r2, r2, #1
 800438c:	189b      	adds	r3, r3, r2
 800438e:	19db      	adds	r3, r3, r7
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d10c      	bne.n	80043b0 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 8004396:	232c      	movs	r3, #44	@ 0x2c
 8004398:	18fa      	adds	r2, r7, r3
 800439a:	2348      	movs	r3, #72	@ 0x48
 800439c:	18fb      	adds	r3, r7, r3
 800439e:	0011      	movs	r1, r2
 80043a0:	0018      	movs	r0, r3
 80043a2:	f01b fc08 	bl	801fbb6 <strstr>
 80043a6:	0003      	movs	r3, r0
 80043a8:	22ac      	movs	r2, #172	@ 0xac
 80043aa:	0052      	lsls	r2, r2, #1
 80043ac:	18ba      	adds	r2, r7, r2
 80043ae:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80043b0:	4b49      	ldr	r3, [pc, #292]	@ (80044d8 <ParseBuffer+0x2a4>)
 80043b2:	22b0      	movs	r2, #176	@ 0xb0
 80043b4:	0052      	lsls	r2, r2, #1
 80043b6:	189b      	adds	r3, r3, r2
 80043b8:	19db      	adds	r3, r3, r7
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d10c      	bne.n	80043da <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 80043c0:	2328      	movs	r3, #40	@ 0x28
 80043c2:	18fa      	adds	r2, r7, r3
 80043c4:	2348      	movs	r3, #72	@ 0x48
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	0011      	movs	r1, r2
 80043ca:	0018      	movs	r0, r3
 80043cc:	f01b fbf3 	bl	801fbb6 <strstr>
 80043d0:	0003      	movs	r3, r0
 80043d2:	22ac      	movs	r2, #172	@ 0xac
 80043d4:	0052      	lsls	r2, r2, #1
 80043d6:	18ba      	adds	r2, r7, r2
 80043d8:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80043da:	4b3f      	ldr	r3, [pc, #252]	@ (80044d8 <ParseBuffer+0x2a4>)
 80043dc:	22b0      	movs	r2, #176	@ 0xb0
 80043de:	0052      	lsls	r2, r2, #1
 80043e0:	189b      	adds	r3, r3, r2
 80043e2:	19db      	adds	r3, r3, r7
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b05      	cmp	r3, #5
 80043e8:	d10c      	bne.n	8004404 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 80043ea:	2308      	movs	r3, #8
 80043ec:	18fa      	adds	r2, r7, r3
 80043ee:	2348      	movs	r3, #72	@ 0x48
 80043f0:	18fb      	adds	r3, r7, r3
 80043f2:	0011      	movs	r1, r2
 80043f4:	0018      	movs	r0, r3
 80043f6:	f01b fbde 	bl	801fbb6 <strstr>
 80043fa:	0003      	movs	r3, r0
 80043fc:	22ac      	movs	r2, #172	@ 0xac
 80043fe:	0052      	lsls	r2, r2, #1
 8004400:	18ba      	adds	r2, r7, r2
 8004402:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8004404:	233c      	movs	r3, #60	@ 0x3c
 8004406:	18fa      	adds	r2, r7, r3
 8004408:	2448      	movs	r4, #72	@ 0x48
 800440a:	193b      	adds	r3, r7, r4
 800440c:	0011      	movs	r1, r2
 800440e:	0018      	movs	r0, r3
 8004410:	f01b fbd1 	bl	801fbb6 <strstr>
 8004414:	0003      	movs	r3, r0
 8004416:	22aa      	movs	r2, #170	@ 0xaa
 8004418:	0052      	lsls	r2, r2, #1
 800441a:	18ba      	adds	r2, r7, r2
 800441c:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800441e:	2318      	movs	r3, #24
 8004420:	18fa      	adds	r2, r7, r3
 8004422:	193b      	adds	r3, r7, r4
 8004424:	0011      	movs	r1, r2
 8004426:	0018      	movs	r0, r3
 8004428:	f01b fbc5 	bl	801fbb6 <strstr>
 800442c:	0003      	movs	r3, r0
 800442e:	22a8      	movs	r2, #168	@ 0xa8
 8004430:	0052      	lsls	r2, r2, #1
 8004432:	18ba      	adds	r2, r7, r2
 8004434:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004436:	4a39      	ldr	r2, [pc, #228]	@ (800451c <ParseBuffer+0x2e8>)
 8004438:	193b      	adds	r3, r7, r4
 800443a:	0011      	movs	r1, r2
 800443c:	0018      	movs	r0, r3
 800443e:	f01b fbba 	bl	801fbb6 <strstr>
 8004442:	0003      	movs	r3, r0
 8004444:	22a6      	movs	r2, #166	@ 0xa6
 8004446:	0052      	lsls	r2, r2, #1
 8004448:	18ba      	adds	r2, r7, r2
 800444a:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800444c:	2334      	movs	r3, #52	@ 0x34
 800444e:	18fa      	adds	r2, r7, r3
 8004450:	193b      	adds	r3, r7, r4
 8004452:	0011      	movs	r1, r2
 8004454:	0018      	movs	r0, r3
 8004456:	f01b fbae 	bl	801fbb6 <strstr>
 800445a:	0003      	movs	r3, r0
 800445c:	22a4      	movs	r2, #164	@ 0xa4
 800445e:	0052      	lsls	r2, r2, #1
 8004460:	18ba      	adds	r2, r7, r2
 8004462:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8004464:	4b1b      	ldr	r3, [pc, #108]	@ (80044d4 <ParseBuffer+0x2a0>)
 8004466:	21b0      	movs	r1, #176	@ 0xb0
 8004468:	0049      	lsls	r1, r1, #1
 800446a:	185b      	adds	r3, r3, r1
 800446c:	19db      	adds	r3, r3, r7
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d800      	bhi.n	8004476 <ParseBuffer+0x242>
 8004474:	e0c1      	b.n	80045fa <ParseBuffer+0x3c6>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004476:	22ac      	movs	r2, #172	@ 0xac
 8004478:	0052      	lsls	r2, r2, #1
 800447a:	18bb      	adds	r3, r7, r2
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d054      	beq.n	800452c <ParseBuffer+0x2f8>
 8004482:	18bb      	adds	r3, r7, r2
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b4f      	cmp	r3, #79	@ 0x4f
 800448a:	d14f      	bne.n	800452c <ParseBuffer+0x2f8>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 800448c:	2360      	movs	r3, #96	@ 0x60
 800448e:	33ff      	adds	r3, #255	@ 0xff
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	2200      	movs	r2, #0
 8004494:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8004496:	4b22      	ldr	r3, [pc, #136]	@ (8004520 <ParseBuffer+0x2ec>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b12      	cmp	r3, #18
 800449c:	d146      	bne.n	800452c <ParseBuffer+0x2f8>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800449e:	4b0d      	ldr	r3, [pc, #52]	@ (80044d4 <ParseBuffer+0x2a0>)
 80044a0:	185b      	adds	r3, r3, r1
 80044a2:	19db      	adds	r3, r3, r7
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80044a8:	d10b      	bne.n	80044c2 <ParseBuffer+0x28e>
 80044aa:	4b0c      	ldr	r3, [pc, #48]	@ (80044dc <ParseBuffer+0x2a8>)
 80044ac:	185b      	adds	r3, r3, r1
 80044ae:	19db      	adds	r3, r3, r7
 80044b0:	2221      	movs	r2, #33	@ 0x21
 80044b2:	5c9b      	ldrb	r3, [r3, r2]
 80044b4:	2b32      	cmp	r3, #50	@ 0x32
 80044b6:	d104      	bne.n	80044c2 <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 80044b8:	193b      	adds	r3, r7, r4
 80044ba:	0018      	movs	r0, r3
 80044bc:	f002 f8d2 	bl	8006664 <ParseTime>
 80044c0:	e034      	b.n	800452c <ParseBuffer+0x2f8>
        }
        else {
          Error("Error getting time");
 80044c2:	4a18      	ldr	r2, [pc, #96]	@ (8004524 <ParseBuffer+0x2f0>)
 80044c4:	4b18      	ldr	r3, [pc, #96]	@ (8004528 <ParseBuffer+0x2f4>)
 80044c6:	0019      	movs	r1, r3
 80044c8:	2001      	movs	r0, #1
 80044ca:	f009 fc8b 	bl	800dde4 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80044ce:	2306      	movs	r3, #6
 80044d0:	e097      	b.n	8004602 <ParseBuffer+0x3ce>
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	fffffea2 	.word	0xfffffea2
 80044d8:	fffffea1 	.word	0xfffffea1
 80044dc:	fffffee8 	.word	0xfffffee8
 80044e0:	08023014 	.word	0x08023014
 80044e4:	08022aa8 	.word	0x08022aa8
 80044e8:	fffffee4 	.word	0xfffffee4
 80044ec:	08023040 	.word	0x08023040
 80044f0:	fffffedc 	.word	0xfffffedc
 80044f4:	08023044 	.word	0x08023044
 80044f8:	fffffed4 	.word	0xfffffed4
 80044fc:	0802304c 	.word	0x0802304c
 8004500:	fffffecc 	.word	0xfffffecc
 8004504:	08023054 	.word	0x08023054
 8004508:	fffffec8 	.word	0xfffffec8
 800450c:	fffffeb8 	.word	0xfffffeb8
 8004510:	0802305c 	.word	0x0802305c
 8004514:	fffffea8 	.word	0xfffffea8
 8004518:	0802306c 	.word	0x0802306c
 800451c:	0802496c 	.word	0x0802496c
 8004520:	20000a2a 	.word	0x20000a2a
 8004524:	0802302c 	.word	0x0802302c
 8004528:	08022acc 	.word	0x08022acc
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 800452c:	22ac      	movs	r2, #172	@ 0xac
 800452e:	0052      	lsls	r2, r2, #1
 8004530:	18bb      	adds	r3, r7, r2
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d009      	beq.n	800454c <ParseBuffer+0x318>
 8004538:	18bb      	adds	r3, r7, r2
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b72      	cmp	r3, #114	@ 0x72
 8004540:	d104      	bne.n	800454c <ParseBuffer+0x318>
      status = RECEIVE_STATUS_READY;
 8004542:	2360      	movs	r3, #96	@ 0x60
 8004544:	33ff      	adds	r3, #255	@ 0xff
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	2202      	movs	r2, #2
 800454a:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 800454c:	22ac      	movs	r2, #172	@ 0xac
 800454e:	0052      	lsls	r2, r2, #1
 8004550:	18bb      	adds	r3, r7, r2
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d009      	beq.n	800456c <ParseBuffer+0x338>
 8004558:	18bb      	adds	r3, r7, r2
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004560:	d104      	bne.n	800456c <ParseBuffer+0x338>
      status = RECEIVE_STATUS_START;
 8004562:	2360      	movs	r3, #96	@ 0x60
 8004564:	33ff      	adds	r3, #255	@ 0xff
 8004566:	18fb      	adds	r3, r7, r3
 8004568:	2205      	movs	r2, #5
 800456a:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 800456c:	22ac      	movs	r2, #172	@ 0xac
 800456e:	0052      	lsls	r2, r2, #1
 8004570:	18bb      	adds	r3, r7, r2
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d009      	beq.n	800458c <ParseBuffer+0x358>
 8004578:	18bb      	adds	r3, r7, r2
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b2b      	cmp	r3, #43	@ 0x2b
 8004580:	d104      	bne.n	800458c <ParseBuffer+0x358>
      status = RECEIVE_STATUS_TIME;
 8004582:	2360      	movs	r3, #96	@ 0x60
 8004584:	33ff      	adds	r3, #255	@ 0xff
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	220b      	movs	r2, #11
 800458a:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 800458c:	22aa      	movs	r2, #170	@ 0xaa
 800458e:	0052      	lsls	r2, r2, #1
 8004590:	18bb      	adds	r3, r7, r2
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d004      	beq.n	80045a2 <ParseBuffer+0x36e>
 8004598:	18bb      	adds	r3, r7, r2
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b45      	cmp	r3, #69	@ 0x45
 80045a0:	d00a      	beq.n	80045b8 <ParseBuffer+0x384>
 80045a2:	22a4      	movs	r2, #164	@ 0xa4
 80045a4:	0052      	lsls	r2, r2, #1
 80045a6:	18bb      	adds	r3, r7, r2
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <ParseBuffer+0x38e>
 80045ae:	18bb      	adds	r3, r7, r2
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b46      	cmp	r3, #70	@ 0x46
 80045b6:	d104      	bne.n	80045c2 <ParseBuffer+0x38e>
      status = RECEIVE_STATUS_ERROR;
 80045b8:	2360      	movs	r3, #96	@ 0x60
 80045ba:	33ff      	adds	r3, #255	@ 0xff
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	2201      	movs	r2, #1
 80045c0:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80045c2:	22a8      	movs	r2, #168	@ 0xa8
 80045c4:	0052      	lsls	r2, r2, #1
 80045c6:	18bb      	adds	r3, r7, r2
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <ParseBuffer+0x3aa>
 80045ce:	18bb      	adds	r3, r7, r2
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b57      	cmp	r3, #87	@ 0x57
 80045d6:	d102      	bne.n	80045de <ParseBuffer+0x3aa>
      ConnectionMade = true;
 80045d8:	4b0c      	ldr	r3, [pc, #48]	@ (800460c <ParseBuffer+0x3d8>)
 80045da:	2201      	movs	r2, #1
 80045dc:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80045de:	22a6      	movs	r2, #166	@ 0xa6
 80045e0:	0052      	lsls	r2, r2, #1
 80045e2:	18bb      	adds	r3, r7, r2
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <ParseBuffer+0x3c6>
 80045ea:	18bb      	adds	r3, r7, r2
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b32      	cmp	r3, #50	@ 0x32
 80045f2:	d102      	bne.n	80045fa <ParseBuffer+0x3c6>
      beurs = true;
 80045f4:	4b06      	ldr	r3, [pc, #24]	@ (8004610 <ParseBuffer+0x3dc>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80045fa:	2360      	movs	r3, #96	@ 0x60
 80045fc:	33ff      	adds	r3, #255	@ 0xff
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	781b      	ldrb	r3, [r3, #0]

}
 8004602:	0018      	movs	r0, r3
 8004604:	46bd      	mov	sp, r7
 8004606:	b059      	add	sp, #356	@ 0x164
 8004608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800460a:	46c0      	nop			@ (mov r8, r8)
 800460c:	20000550 	.word	0x20000550
 8004610:	20000552 	.word	0x20000552

08004614 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800461a:	4b0b      	ldr	r3, [pc, #44]	@ (8004648 <PollAwake+0x34>)
 800461c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	0018      	movs	r0, r3
 8004622:	f7fb fda3 	bl	800016c <strlen>
 8004626:	0003      	movs	r3, r0
 8004628:	b29a      	uxth	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	0011      	movs	r1, r2
 800462e:	0018      	movs	r0, r3
 8004630:	f7ff fa18 	bl	8003a64 <ESP_Send>
 8004634:	1e03      	subs	r3, r0, #0
 8004636:	d001      	beq.n	800463c <PollAwake+0x28>
    return true;
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <PollAwake+0x2a>
  }
  else{
    return false;
 800463c:	2300      	movs	r3, #0
  }
}
 800463e:	0018      	movs	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	b002      	add	sp, #8
 8004644:	bd80      	pop	{r7, pc}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	0802307c 	.word	0x0802307c

0800464c <RFPower>:
bool RFPower(){
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8004652:	4b0b      	ldr	r3, [pc, #44]	@ (8004680 <RFPower+0x34>)
 8004654:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	0018      	movs	r0, r3
 800465a:	f7fb fd87 	bl	800016c <strlen>
 800465e:	0003      	movs	r3, r0
 8004660:	b29a      	uxth	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	0011      	movs	r1, r2
 8004666:	0018      	movs	r0, r3
 8004668:	f7ff f9fc 	bl	8003a64 <ESP_Send>
 800466c:	1e03      	subs	r3, r0, #0
 800466e:	d001      	beq.n	8004674 <RFPower+0x28>
    return true;
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <RFPower+0x2a>
  }
  else{
    return false;
 8004674:	2300      	movs	r3, #0
  }
}
 8004676:	0018      	movs	r0, r3
 8004678:	46bd      	mov	sp, r7
 800467a:	b002      	add	sp, #8
 800467c:	bd80      	pop	{r7, pc}
 800467e:	46c0      	nop			@ (mov r8, r8)
 8004680:	08023084 	.word	0x08023084

08004684 <CheckRFPower>:
bool CheckRFPower(){
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800468a:	4b0b      	ldr	r3, [pc, #44]	@ (80046b8 <CheckRFPower+0x34>)
 800468c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	0018      	movs	r0, r3
 8004692:	f7fb fd6b 	bl	800016c <strlen>
 8004696:	0003      	movs	r3, r0
 8004698:	b29a      	uxth	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	0011      	movs	r1, r2
 800469e:	0018      	movs	r0, r3
 80046a0:	f7ff f9e0 	bl	8003a64 <ESP_Send>
 80046a4:	1e03      	subs	r3, r0, #0
 80046a6:	d001      	beq.n	80046ac <CheckRFPower+0x28>
    return true;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <CheckRFPower+0x2a>
  }
  else{
    return false;
 80046ac:	2300      	movs	r3, #0
  }
}
 80046ae:	0018      	movs	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b002      	add	sp, #8
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	46c0      	nop			@ (mov r8, r8)
 80046b8:	08023094 	.word	0x08023094

080046bc <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80046c2:	4b0b      	ldr	r3, [pc, #44]	@ (80046f0 <ATRestore+0x34>)
 80046c4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7fb fd4f 	bl	800016c <strlen>
 80046ce:	0003      	movs	r3, r0
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	0011      	movs	r1, r2
 80046d6:	0018      	movs	r0, r3
 80046d8:	f7ff f9c4 	bl	8003a64 <ESP_Send>
 80046dc:	1e03      	subs	r3, r0, #0
 80046de:	d001      	beq.n	80046e4 <ATRestore+0x28>
    return true;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <ATRestore+0x2a>
  }
  else{
    return false;
 80046e4:	2300      	movs	r3, #0
  }
}
 80046e6:	0018      	movs	r0, r3
 80046e8:	46bd      	mov	sp, r7
 80046ea:	b002      	add	sp, #8
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	46c0      	nop			@ (mov r8, r8)
 80046f0:	080230a4 	.word	0x080230a4

080046f4 <CWINIT>:
bool CWINIT(){
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80046fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <CWINIT+0x34>)
 80046fc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	0018      	movs	r0, r3
 8004702:	f7fb fd33 	bl	800016c <strlen>
 8004706:	0003      	movs	r3, r0
 8004708:	b29a      	uxth	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	0011      	movs	r1, r2
 800470e:	0018      	movs	r0, r3
 8004710:	f7ff f9a8 	bl	8003a64 <ESP_Send>
 8004714:	1e03      	subs	r3, r0, #0
 8004716:	d001      	beq.n	800471c <CWINIT+0x28>
    return true;
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <CWINIT+0x2a>
  }
  else{
    return false;
 800471c:	2300      	movs	r3, #0
  }
}
 800471e:	0018      	movs	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	b002      	add	sp, #8
 8004724:	bd80      	pop	{r7, pc}
 8004726:	46c0      	nop			@ (mov r8, r8)
 8004728:	080230b4 	.word	0x080230b4

0800472c <CWMODE1>:
bool CWMODE1(){
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8004732:	4b0b      	ldr	r3, [pc, #44]	@ (8004760 <CWMODE1+0x34>)
 8004734:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	0018      	movs	r0, r3
 800473a:	f7fb fd17 	bl	800016c <strlen>
 800473e:	0003      	movs	r3, r0
 8004740:	b29a      	uxth	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	0011      	movs	r1, r2
 8004746:	0018      	movs	r0, r3
 8004748:	f7ff f98c 	bl	8003a64 <ESP_Send>
 800474c:	1e03      	subs	r3, r0, #0
 800474e:	d001      	beq.n	8004754 <CWMODE1+0x28>
    return true;
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004754:	2300      	movs	r3, #0
  }
}
 8004756:	0018      	movs	r0, r3
 8004758:	46bd      	mov	sp, r7
 800475a:	b002      	add	sp, #8
 800475c:	bd80      	pop	{r7, pc}
 800475e:	46c0      	nop			@ (mov r8, r8)
 8004760:	080230c4 	.word	0x080230c4

08004764 <CWMODE2>:
bool CWMODE2(){
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 800476a:	4b0b      	ldr	r3, [pc, #44]	@ (8004798 <CWMODE2+0x34>)
 800476c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	0018      	movs	r0, r3
 8004772:	f7fb fcfb 	bl	800016c <strlen>
 8004776:	0003      	movs	r3, r0
 8004778:	b29a      	uxth	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	0011      	movs	r1, r2
 800477e:	0018      	movs	r0, r3
 8004780:	f7ff f970 	bl	8003a64 <ESP_Send>
 8004784:	1e03      	subs	r3, r0, #0
 8004786:	d001      	beq.n	800478c <CWMODE2+0x28>
    return true;
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <CWMODE2+0x2a>
  }
  else{
    return false;
 800478c:	2300      	movs	r3, #0
  }
}
 800478e:	0018      	movs	r0, r3
 8004790:	46bd      	mov	sp, r7
 8004792:	b002      	add	sp, #8
 8004794:	bd80      	pop	{r7, pc}
 8004796:	46c0      	nop			@ (mov r8, r8)
 8004798:	080230d4 	.word	0x080230d4

0800479c <CWAUTOCONN>:
bool CWAUTOCONN(){
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80047a2:	4b0b      	ldr	r3, [pc, #44]	@ (80047d0 <CWAUTOCONN+0x34>)
 80047a4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	0018      	movs	r0, r3
 80047aa:	f7fb fcdf 	bl	800016c <strlen>
 80047ae:	0003      	movs	r3, r0
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	0011      	movs	r1, r2
 80047b6:	0018      	movs	r0, r3
 80047b8:	f7ff f954 	bl	8003a64 <ESP_Send>
 80047bc:	1e03      	subs	r3, r0, #0
 80047be:	d001      	beq.n	80047c4 <CWAUTOCONN+0x28>
    return true;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80047c4:	2300      	movs	r3, #0
  }
}
 80047c6:	0018      	movs	r0, r3
 80047c8:	46bd      	mov	sp, r7
 80047ca:	b002      	add	sp, #8
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	46c0      	nop			@ (mov r8, r8)
 80047d0:	080230e4 	.word	0x080230e4

080047d4 <CWJAP>:
bool CWJAP(){
 80047d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047d6:	46c6      	mov	lr, r8
 80047d8:	b500      	push	{lr}
 80047da:	b0a2      	sub	sp, #136	@ 0x88
 80047dc:	af00      	add	r7, sp, #0
 80047de:	466b      	mov	r3, sp
 80047e0:	4698      	mov	r8, r3
  beursTest = true;
 80047e2:	4b39      	ldr	r3, [pc, #228]	@ (80048c8 <CWJAP+0xf4>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80047e8:	2618      	movs	r6, #24
 80047ea:	19bb      	adds	r3, r7, r6
 80047ec:	2264      	movs	r2, #100	@ 0x64
 80047ee:	2100      	movs	r1, #0
 80047f0:	0018      	movs	r0, r3
 80047f2:	f01b f9a5 	bl	801fb40 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80047f6:	4b35      	ldr	r3, [pc, #212]	@ (80048cc <CWJAP+0xf8>)
 80047f8:	4a35      	ldr	r2, [pc, #212]	@ (80048d0 <CWJAP+0xfc>)
 80047fa:	4936      	ldr	r1, [pc, #216]	@ (80048d4 <CWJAP+0x100>)
 80047fc:	19b8      	adds	r0, r7, r6
 80047fe:	f01b f85b 	bl	801f8b8 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004802:	19bb      	adds	r3, r7, r6
 8004804:	0018      	movs	r0, r3
 8004806:	f7fb fcb1 	bl	800016c <strlen>
 800480a:	0002      	movs	r2, r0
 800480c:	216f      	movs	r1, #111	@ 0x6f
 800480e:	0030      	movs	r0, r6
 8004810:	180b      	adds	r3, r1, r0
 8004812:	19db      	adds	r3, r3, r7
 8004814:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004816:	180b      	adds	r3, r1, r0
 8004818:	19db      	adds	r3, r3, r7
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	3301      	adds	r3, #1
 800481e:	1e5a      	subs	r2, r3, #1
 8004820:	2180      	movs	r1, #128	@ 0x80
 8004822:	1879      	adds	r1, r7, r1
 8004824:	600a      	str	r2, [r1, #0]
 8004826:	001a      	movs	r2, r3
 8004828:	60ba      	str	r2, [r7, #8]
 800482a:	2200      	movs	r2, #0
 800482c:	60fa      	str	r2, [r7, #12]
 800482e:	68b8      	ldr	r0, [r7, #8]
 8004830:	68f9      	ldr	r1, [r7, #12]
 8004832:	0002      	movs	r2, r0
 8004834:	0f52      	lsrs	r2, r2, #29
 8004836:	000e      	movs	r6, r1
 8004838:	00f6      	lsls	r6, r6, #3
 800483a:	617e      	str	r6, [r7, #20]
 800483c:	697e      	ldr	r6, [r7, #20]
 800483e:	4316      	orrs	r6, r2
 8004840:	617e      	str	r6, [r7, #20]
 8004842:	0002      	movs	r2, r0
 8004844:	00d2      	lsls	r2, r2, #3
 8004846:	613a      	str	r2, [r7, #16]
 8004848:	001a      	movs	r2, r3
 800484a:	603a      	str	r2, [r7, #0]
 800484c:	2200      	movs	r2, #0
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	6838      	ldr	r0, [r7, #0]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	0002      	movs	r2, r0
 8004856:	0f52      	lsrs	r2, r2, #29
 8004858:	000e      	movs	r6, r1
 800485a:	00f5      	lsls	r5, r6, #3
 800485c:	4315      	orrs	r5, r2
 800485e:	0002      	movs	r2, r0
 8004860:	00d4      	lsls	r4, r2, #3
 8004862:	3307      	adds	r3, #7
 8004864:	08db      	lsrs	r3, r3, #3
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	466a      	mov	r2, sp
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	469d      	mov	sp, r3
 800486e:	466b      	mov	r3, sp
 8004870:	3300      	adds	r3, #0
 8004872:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004874:	246f      	movs	r4, #111	@ 0x6f
 8004876:	2518      	movs	r5, #24
 8004878:	1963      	adds	r3, r4, r5
 800487a:	19db      	adds	r3, r3, r7
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	3301      	adds	r3, #1
 8004880:	001a      	movs	r2, r3
 8004882:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004884:	2100      	movs	r1, #0
 8004886:	0018      	movs	r0, r3
 8004888:	f01b f95a 	bl	801fb40 <memset>
  strncpy(atCommand, atCommandBuff, len);
 800488c:	1963      	adds	r3, r4, r5
 800488e:	19db      	adds	r3, r3, r7
 8004890:	781a      	ldrb	r2, [r3, #0]
 8004892:	1979      	adds	r1, r7, r5
 8004894:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004896:	0018      	movs	r0, r3
 8004898:	f01b f979 	bl	801fb8e <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 800489c:	1963      	adds	r3, r4, r5
 800489e:	19db      	adds	r3, r3, r7
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048a6:	0011      	movs	r1, r2
 80048a8:	0018      	movs	r0, r3
 80048aa:	f7ff f8db 	bl	8003a64 <ESP_Send>
 80048ae:	1e03      	subs	r3, r0, #0
 80048b0:	d001      	beq.n	80048b6 <CWJAP+0xe2>
    return true;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e000      	b.n	80048b8 <CWJAP+0xe4>
  }
  else{
    return false;
 80048b6:	2300      	movs	r3, #0
 80048b8:	46c5      	mov	sp, r8
  }
}
 80048ba:	0018      	movs	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	b022      	add	sp, #136	@ 0x88
 80048c0:	bc80      	pop	{r7}
 80048c2:	46b8      	mov	r8, r7
 80048c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048c6:	46c0      	nop			@ (mov r8, r8)
 80048c8:	20000551 	.word	0x20000551
 80048cc:	08024978 	.word	0x08024978
 80048d0:	0802496c 	.word	0x0802496c
 80048d4:	080230f8 	.word	0x080230f8

080048d8 <CWMODE3>:
bool CWMODE3(){
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 80048de:	4b0b      	ldr	r3, [pc, #44]	@ (800490c <CWMODE3+0x34>)
 80048e0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	0018      	movs	r0, r3
 80048e6:	f7fb fc41 	bl	800016c <strlen>
 80048ea:	0003      	movs	r3, r0
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	0011      	movs	r1, r2
 80048f2:	0018      	movs	r0, r3
 80048f4:	f7ff f8b6 	bl	8003a64 <ESP_Send>
 80048f8:	1e03      	subs	r3, r0, #0
 80048fa:	d001      	beq.n	8004900 <CWMODE3+0x28>
    return true;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <CWMODE3+0x2a>
  }
  else{
    return false;
 8004900:	2300      	movs	r3, #0
  }
}
 8004902:	0018      	movs	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	b002      	add	sp, #8
 8004908:	bd80      	pop	{r7, pc}
 800490a:	46c0      	nop			@ (mov r8, r8)
 800490c:	08023110 	.word	0x08023110

08004910 <CWSTATE>:
bool CWSTATE(){
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004916:	4b0b      	ldr	r3, [pc, #44]	@ (8004944 <CWSTATE+0x34>)
 8004918:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	0018      	movs	r0, r3
 800491e:	f7fb fc25 	bl	800016c <strlen>
 8004922:	0003      	movs	r3, r0
 8004924:	b29a      	uxth	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	0011      	movs	r1, r2
 800492a:	0018      	movs	r0, r3
 800492c:	f7ff f89a 	bl	8003a64 <ESP_Send>
 8004930:	1e03      	subs	r3, r0, #0
 8004932:	d001      	beq.n	8004938 <CWSTATE+0x28>
    return true;
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <CWSTATE+0x2a>
  }
  else{
    return false;
 8004938:	2300      	movs	r3, #0
  }
}
 800493a:	0018      	movs	r0, r3
 800493c:	46bd      	mov	sp, r7
 800493e:	b002      	add	sp, #8
 8004940:	bd80      	pop	{r7, pc}
 8004942:	46c0      	nop			@ (mov r8, r8)
 8004944:	08023120 	.word	0x08023120

08004948 <CWSAP>:
bool CWSAP(){
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800494e:	4b0b      	ldr	r3, [pc, #44]	@ (800497c <CWSAP+0x34>)
 8004950:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	0018      	movs	r0, r3
 8004956:	f7fb fc09 	bl	800016c <strlen>
 800495a:	0003      	movs	r3, r0
 800495c:	b29a      	uxth	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	0011      	movs	r1, r2
 8004962:	0018      	movs	r0, r3
 8004964:	f7ff f87e 	bl	8003a64 <ESP_Send>
 8004968:	1e03      	subs	r3, r0, #0
 800496a:	d001      	beq.n	8004970 <CWSAP+0x28>
    return true;
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <CWSAP+0x2a>
  }
  else{
    return false;
 8004970:	2300      	movs	r3, #0
  }
}
 8004972:	0018      	movs	r0, r3
 8004974:	46bd      	mov	sp, r7
 8004976:	b002      	add	sp, #8
 8004978:	bd80      	pop	{r7, pc}
 800497a:	46c0      	nop			@ (mov r8, r8)
 800497c:	08023130 	.word	0x08023130

08004980 <CIPMUX>:
bool CIPMUX(){
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004986:	4b0b      	ldr	r3, [pc, #44]	@ (80049b4 <CIPMUX+0x34>)
 8004988:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	0018      	movs	r0, r3
 800498e:	f7fb fbed 	bl	800016c <strlen>
 8004992:	0003      	movs	r3, r0
 8004994:	b29a      	uxth	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	0011      	movs	r1, r2
 800499a:	0018      	movs	r0, r3
 800499c:	f7ff f862 	bl	8003a64 <ESP_Send>
 80049a0:	1e03      	subs	r3, r0, #0
 80049a2:	d001      	beq.n	80049a8 <CIPMUX+0x28>
    return true;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e000      	b.n	80049aa <CIPMUX+0x2a>
  }
  else{
    return false;
 80049a8:	2300      	movs	r3, #0
  }
}
 80049aa:	0018      	movs	r0, r3
 80049ac:	46bd      	mov	sp, r7
 80049ae:	b002      	add	sp, #8
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	46c0      	nop			@ (mov r8, r8)
 80049b4:	08023154 	.word	0x08023154

080049b8 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 80049be:	4b0b      	ldr	r3, [pc, #44]	@ (80049ec <WEBSERVER+0x34>)
 80049c0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	0018      	movs	r0, r3
 80049c6:	f7fb fbd1 	bl	800016c <strlen>
 80049ca:	0003      	movs	r3, r0
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	0011      	movs	r1, r2
 80049d2:	0018      	movs	r0, r3
 80049d4:	f7ff f846 	bl	8003a64 <ESP_Send>
 80049d8:	1e03      	subs	r3, r0, #0
 80049da:	d001      	beq.n	80049e0 <WEBSERVER+0x28>
    return true;
 80049dc:	2301      	movs	r3, #1
 80049de:	e000      	b.n	80049e2 <WEBSERVER+0x2a>
  }
  else{
    return false;
 80049e0:	2300      	movs	r3, #0
  }
}
 80049e2:	0018      	movs	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	b002      	add	sp, #8
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	46c0      	nop			@ (mov r8, r8)
 80049ec:	08023164 	.word	0x08023164

080049f0 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 80049f0:	b590      	push	{r4, r7, lr}
 80049f2:	b0c5      	sub	sp, #276	@ 0x114
 80049f4:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 80049f6:	2380      	movs	r3, #128	@ 0x80
 80049f8:	005a      	lsls	r2, r3, #1
 80049fa:	1d3b      	adds	r3, r7, #4
 80049fc:	2100      	movs	r1, #0
 80049fe:	0018      	movs	r0, r3
 8004a00:	f01b f89e 	bl	801fb40 <memset>
  uint16_t length = CreateMessage(beurs);
 8004a04:	4b22      	ldr	r3, [pc, #136]	@ (8004a90 <HTTPCPOST+0xa0>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	1dfc      	adds	r4, r7, #7
 8004a0a:	34ff      	adds	r4, #255	@ 0xff
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f7ff f96f 	bl	8003cf0 <CreateMessage>
 8004a12:	0003      	movs	r3, r0
 8004a14:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004a16:	4b1e      	ldr	r3, [pc, #120]	@ (8004a90 <HTTPCPOST+0xa0>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d008      	beq.n	8004a30 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004a1e:	1dfb      	adds	r3, r7, #7
 8004a20:	33ff      	adds	r3, #255	@ 0xff
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	4a1b      	ldr	r2, [pc, #108]	@ (8004a94 <HTTPCPOST+0xa4>)
 8004a26:	491c      	ldr	r1, [pc, #112]	@ (8004a98 <HTTPCPOST+0xa8>)
 8004a28:	1d38      	adds	r0, r7, #4
 8004a2a:	f01a ff45 	bl	801f8b8 <siprintf>
 8004a2e:	e016      	b.n	8004a5e <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004a30:	4b1a      	ldr	r3, [pc, #104]	@ (8004a9c <HTTPCPOST+0xac>)
 8004a32:	481b      	ldr	r0, [pc, #108]	@ (8004aa0 <HTTPCPOST+0xb0>)
 8004a34:	220c      	movs	r2, #12
 8004a36:	0019      	movs	r1, r3
 8004a38:	f7fe fe5e 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004a3c:	4a17      	ldr	r2, [pc, #92]	@ (8004a9c <HTTPCPOST+0xac>)
 8004a3e:	4b19      	ldr	r3, [pc, #100]	@ (8004aa4 <HTTPCPOST+0xb4>)
 8004a40:	0011      	movs	r1, r2
 8004a42:	0018      	movs	r0, r3
 8004a44:	f7ff f930 	bl	8003ca8 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004a48:	1dfb      	adds	r3, r7, #7
 8004a4a:	33ff      	adds	r3, #255	@ 0xff
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	4c15      	ldr	r4, [pc, #84]	@ (8004aa4 <HTTPCPOST+0xb4>)
 8004a50:	4a15      	ldr	r2, [pc, #84]	@ (8004aa8 <HTTPCPOST+0xb8>)
 8004a52:	4916      	ldr	r1, [pc, #88]	@ (8004aac <HTTPCPOST+0xbc>)
 8004a54:	1d38      	adds	r0, r7, #4
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	0023      	movs	r3, r4
 8004a5a:	f01a ff2d 	bl	801f8b8 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 8004a5e:	1d3b      	adds	r3, r7, #4
 8004a60:	0018      	movs	r0, r3
 8004a62:	f7fb fb83 	bl	800016c <strlen>
 8004a66:	0002      	movs	r2, r0
 8004a68:	1d7b      	adds	r3, r7, #5
 8004a6a:	33ff      	adds	r3, #255	@ 0xff
 8004a6c:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 8004a6e:	1d7b      	adds	r3, r7, #5
 8004a70:	33ff      	adds	r3, #255	@ 0xff
 8004a72:	881a      	ldrh	r2, [r3, #0]
 8004a74:	1d3b      	adds	r3, r7, #4
 8004a76:	0011      	movs	r1, r2
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f7fe fff3 	bl	8003a64 <ESP_Send>
 8004a7e:	1e03      	subs	r3, r0, #0
 8004a80:	d001      	beq.n	8004a86 <HTTPCPOST+0x96>
    return true;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <HTTPCPOST+0x98>
  }
  else{
    return false;
 8004a86:	2300      	movs	r3, #0
  }
}
 8004a88:	0018      	movs	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b043      	add	sp, #268	@ 0x10c
 8004a8e:	bd90      	pop	{r4, r7, pc}
 8004a90:	20000552 	.word	0x20000552
 8004a94:	08024994 	.word	0x08024994
 8004a98:	0802317c 	.word	0x0802317c
 8004a9c:	20000b14 	.word	0x20000b14
 8004aa0:	08080000 	.word	0x08080000
 8004aa4:	20000b20 	.word	0x20000b20
 8004aa8:	080249d0 	.word	0x080249d0
 8004aac:	080231b4 	.word	0x080231b4

08004ab0 <SENDDATA>:
bool SENDDATA(){
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 8004ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae4 <SENDDATA+0x34>)
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f7fb fb57 	bl	800016c <strlen>
 8004abe:	0002      	movs	r2, r0
 8004ac0:	1dbb      	adds	r3, r7, #6
 8004ac2:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004ac4:	1dbb      	adds	r3, r7, #6
 8004ac6:	881a      	ldrh	r2, [r3, #0]
 8004ac8:	4b06      	ldr	r3, [pc, #24]	@ (8004ae4 <SENDDATA+0x34>)
 8004aca:	0011      	movs	r1, r2
 8004acc:	0018      	movs	r0, r3
 8004ace:	f7fe ffc9 	bl	8003a64 <ESP_Send>
 8004ad2:	1e03      	subs	r3, r0, #0
 8004ad4:	d001      	beq.n	8004ada <SENDDATA+0x2a>
    return true;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <SENDDATA+0x2c>
  }
  else{
    return false;
 8004ada:	2300      	movs	r3, #0
  }
}
 8004adc:	0018      	movs	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b002      	add	sp, #8
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	2000058c 	.word	0x2000058c

08004ae8 <SLEEP>:
bool SLEEP(){
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004aee:	4b0b      	ldr	r3, [pc, #44]	@ (8004b1c <SLEEP+0x34>)
 8004af0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	0018      	movs	r0, r3
 8004af6:	f7fb fb39 	bl	800016c <strlen>
 8004afa:	0003      	movs	r3, r0
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	0011      	movs	r1, r2
 8004b02:	0018      	movs	r0, r3
 8004b04:	f7fe ffae 	bl	8003a64 <ESP_Send>
 8004b08:	1e03      	subs	r3, r0, #0
 8004b0a:	d001      	beq.n	8004b10 <SLEEP+0x28>
    return true;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <SLEEP+0x2a>
  }
  else{
    return false;
 8004b10:	2300      	movs	r3, #0
  }
}
 8004b12:	0018      	movs	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b002      	add	sp, #8
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	080231f4 	.word	0x080231f4

08004b20 <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004b26:	4b0d      	ldr	r3, [pc, #52]	@ (8004b5c <CIPSNTPCFG+0x3c>)
 8004b28:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f7fb fb1d 	bl	800016c <strlen>
 8004b32:	0003      	movs	r3, r0
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	0011      	movs	r1, r2
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f7fe ff92 	bl	8003a64 <ESP_Send>
 8004b40:	1e03      	subs	r3, r0, #0
 8004b42:	d006      	beq.n	8004b52 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004b44:	23fa      	movs	r3, #250	@ 0xfa
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f009 fdab 	bl	800e6a4 <HAL_Delay>
    return true;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004b52:	2300      	movs	r3, #0
  }
}
 8004b54:	0018      	movs	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	b002      	add	sp, #8
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	08023204 	.word	0x08023204

08004b60 <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004b66:	4b0b      	ldr	r3, [pc, #44]	@ (8004b94 <CIPSNTPTIME+0x34>)
 8004b68:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f7fb fafd 	bl	800016c <strlen>
 8004b72:	0003      	movs	r3, r0
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	0011      	movs	r1, r2
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f7fe ff72 	bl	8003a64 <ESP_Send>
 8004b80:	1e03      	subs	r3, r0, #0
 8004b82:	d001      	beq.n	8004b88 <CIPSNTPTIME+0x28>
    return true;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004b88:	2300      	movs	r3, #0
  }
}
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	b002      	add	sp, #8
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	46c0      	nop			@ (mov r8, r8)
 8004b94:	08023254 	.word	0x08023254

08004b98 <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bcc <CIPSNTPINTV+0x34>)
 8004ba0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f7fb fae1 	bl	800016c <strlen>
 8004baa:	0003      	movs	r3, r0
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	0011      	movs	r1, r2
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f7fe ff56 	bl	8003a64 <ESP_Send>
 8004bb8:	1e03      	subs	r3, r0, #0
 8004bba:	d001      	beq.n	8004bc0 <CIPSNTPINTV+0x28>
    return true;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004bc0:	2300      	movs	r3, #0
  }
}
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b002      	add	sp, #8
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	46c0      	nop			@ (mov r8, r8)
 8004bcc:	08023268 	.word	0x08023268

08004bd0 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004bd0:	b5b0      	push	{r4, r5, r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	0002      	movs	r2, r0
 8004bd8:	1dfb      	adds	r3, r7, #7
 8004bda:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004bdc:	4b6c      	ldr	r3, [pc, #432]	@ (8004d90 <DMA_ProcessBuffer+0x1c0>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	200e      	movs	r0, #14
 8004be6:	183b      	adds	r3, r7, r0
 8004be8:	2180      	movs	r1, #128	@ 0x80
 8004bea:	0049      	lsls	r1, r1, #1
 8004bec:	1a8a      	subs	r2, r1, r2
 8004bee:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004bf0:	230d      	movs	r3, #13
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	2203      	movs	r2, #3
 8004bf6:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004bf8:	183b      	adds	r3, r7, r0
 8004bfa:	881a      	ldrh	r2, [r3, #0]
 8004bfc:	2380      	movs	r3, #128	@ 0x80
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d903      	bls.n	8004c0c <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004c04:	183b      	adds	r3, r7, r0
 8004c06:	2280      	movs	r2, #128	@ 0x80
 8004c08:	0052      	lsls	r2, r2, #1
 8004c0a:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004c0c:	4b61      	ldr	r3, [pc, #388]	@ (8004d94 <DMA_ProcessBuffer+0x1c4>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	001a      	movs	r2, r3
 8004c14:	230e      	movs	r3, #14
 8004c16:	18fb      	adds	r3, r7, r3
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d131      	bne.n	8004c82 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004c1e:	4b5e      	ldr	r3, [pc, #376]	@ (8004d98 <DMA_ProcessBuffer+0x1c8>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b14      	cmp	r3, #20
 8004c24:	d91b      	bls.n	8004c5e <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004c26:	4b5c      	ldr	r3, [pc, #368]	@ (8004d98 <DMA_ProcessBuffer+0x1c8>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004c2c:	4b5b      	ldr	r3, [pc, #364]	@ (8004d9c <DMA_ProcessBuffer+0x1cc>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d107      	bne.n	8004c44 <DMA_ProcessBuffer+0x74>
 8004c34:	4b5a      	ldr	r3, [pc, #360]	@ (8004da0 <DMA_ProcessBuffer+0x1d0>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004c3c:	230d      	movs	r3, #13
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	2207      	movs	r2, #7
 8004c42:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004c44:	4b55      	ldr	r3, [pc, #340]	@ (8004d9c <DMA_ProcessBuffer+0x1cc>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d103      	bne.n	8004c54 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004c4c:	4b55      	ldr	r3, [pc, #340]	@ (8004da4 <DMA_ProcessBuffer+0x1d4>)
 8004c4e:	220b      	movs	r2, #11
 8004c50:	701a      	strb	r2, [r3, #0]
 8004c52:	e016      	b.n	8004c82 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004c54:	230d      	movs	r3, #13
 8004c56:	18fb      	adds	r3, r7, r3
 8004c58:	2206      	movs	r2, #6
 8004c5a:	701a      	strb	r2, [r3, #0]
 8004c5c:	e011      	b.n	8004c82 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004c5e:	4b4e      	ldr	r3, [pc, #312]	@ (8004d98 <DMA_ProcessBuffer+0x1c8>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	3301      	adds	r3, #1
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	4b4c      	ldr	r3, [pc, #304]	@ (8004d98 <DMA_ProcessBuffer+0x1c8>)
 8004c68:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004c6a:	f009 fd11 	bl	800e690 <HAL_GetTick>
 8004c6e:	0003      	movs	r3, r0
 8004c70:	33f5      	adds	r3, #245	@ 0xf5
 8004c72:	33ff      	adds	r3, #255	@ 0xff
 8004c74:	001a      	movs	r2, r3
 8004c76:	4b4c      	ldr	r3, [pc, #304]	@ (8004da8 <DMA_ProcessBuffer+0x1d8>)
 8004c78:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004c7a:	230d      	movs	r3, #13
 8004c7c:	18fb      	adds	r3, r7, r3
 8004c7e:	2204      	movs	r2, #4
 8004c80:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004c82:	4b44      	ldr	r3, [pc, #272]	@ (8004d94 <DMA_ProcessBuffer+0x1c4>)
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	001a      	movs	r2, r3
 8004c8a:	210e      	movs	r1, #14
 8004c8c:	187b      	adds	r3, r7, r1
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d100      	bne.n	8004c96 <DMA_ProcessBuffer+0xc6>
 8004c94:	e075      	b.n	8004d82 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004c96:	4b40      	ldr	r3, [pc, #256]	@ (8004d98 <DMA_ProcessBuffer+0x1c8>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004c9c:	4b43      	ldr	r3, [pc, #268]	@ (8004dac <DMA_ProcessBuffer+0x1dc>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	4b3c      	ldr	r3, [pc, #240]	@ (8004d94 <DMA_ProcessBuffer+0x1c4>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d109      	bne.n	8004cc0 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004cac:	187b      	adds	r3, r7, r1
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8004dac <DMA_ProcessBuffer+0x1dc>)
 8004cb4:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004cb6:	230d      	movs	r3, #13
 8004cb8:	18fb      	adds	r3, r7, r3
 8004cba:	220a      	movs	r2, #10
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	e060      	b.n	8004d82 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8004cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8004dac <DMA_ProcessBuffer+0x1dc>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	001a      	movs	r2, r3
 8004cc8:	210e      	movs	r1, #14
 8004cca:	187b      	adds	r3, r7, r1
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d009      	beq.n	8004ce6 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004cd2:	187b      	adds	r3, r7, r1
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	4b34      	ldr	r3, [pc, #208]	@ (8004dac <DMA_ProcessBuffer+0x1dc>)
 8004cda:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004cdc:	230d      	movs	r3, #13
 8004cde:	18fb      	adds	r3, r7, r3
 8004ce0:	220a      	movs	r2, #10
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	e04d      	b.n	8004d82 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8004ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8004d94 <DMA_ProcessBuffer+0x1c4>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	001a      	movs	r2, r3
 8004cee:	210e      	movs	r1, #14
 8004cf0:	187b      	adds	r3, r7, r1
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d917      	bls.n	8004d28 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004cf8:	4b26      	ldr	r3, [pc, #152]	@ (8004d94 <DMA_ProcessBuffer+0x1c4>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	001a      	movs	r2, r3
 8004d00:	4b2b      	ldr	r3, [pc, #172]	@ (8004db0 <DMA_ProcessBuffer+0x1e0>)
 8004d02:	18d0      	adds	r0, r2, r3
 8004d04:	4b23      	ldr	r3, [pc, #140]	@ (8004d94 <DMA_ProcessBuffer+0x1c4>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	001a      	movs	r2, r3
 8004d0c:	187b      	adds	r3, r7, r1
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	b299      	uxth	r1, r3
 8004d14:	230d      	movs	r3, #13
 8004d16:	18fc      	adds	r4, r7, r3
 8004d18:	1dfb      	adds	r3, r7, #7
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	001a      	movs	r2, r3
 8004d1e:	f7ff fa89 	bl	8004234 <ParseBuffer>
 8004d22:	0003      	movs	r3, r0
 8004d24:	7023      	strb	r3, [r4, #0]
 8004d26:	e026      	b.n	8004d76 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004d28:	4b1a      	ldr	r3, [pc, #104]	@ (8004d94 <DMA_ProcessBuffer+0x1c4>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	001a      	movs	r2, r3
 8004d30:	4b1f      	ldr	r3, [pc, #124]	@ (8004db0 <DMA_ProcessBuffer+0x1e0>)
 8004d32:	18d0      	adds	r0, r2, r3
 8004d34:	4b17      	ldr	r3, [pc, #92]	@ (8004d94 <DMA_ProcessBuffer+0x1c4>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	001a      	movs	r2, r3
 8004d3c:	2380      	movs	r3, #128	@ 0x80
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	b299      	uxth	r1, r3
 8004d44:	250d      	movs	r5, #13
 8004d46:	197c      	adds	r4, r7, r5
 8004d48:	1dfb      	adds	r3, r7, #7
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	001a      	movs	r2, r3
 8004d4e:	f7ff fa71 	bl	8004234 <ParseBuffer>
 8004d52:	0003      	movs	r3, r0
 8004d54:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004d56:	210e      	movs	r1, #14
 8004d58:	187b      	adds	r3, r7, r1
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004d60:	197c      	adds	r4, r7, r5
 8004d62:	1dfb      	adds	r3, r7, #7
 8004d64:	781a      	ldrb	r2, [r3, #0]
 8004d66:	187b      	adds	r3, r7, r1
 8004d68:	8819      	ldrh	r1, [r3, #0]
 8004d6a:	4b11      	ldr	r3, [pc, #68]	@ (8004db0 <DMA_ProcessBuffer+0x1e0>)
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7ff fa61 	bl	8004234 <ParseBuffer>
 8004d72:	0003      	movs	r3, r0
 8004d74:	7023      	strb	r3, [r4, #0]
              }
          }
//          Debug("DMA ESP RxBuffer OldPos: %d, pos: %d", OldPos, pos);
          OldPos = pos;
 8004d76:	230e      	movs	r3, #14
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	4b05      	ldr	r3, [pc, #20]	@ (8004d94 <DMA_ProcessBuffer+0x1c4>)
 8004d80:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004d82:	230d      	movs	r3, #13
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	781b      	ldrb	r3, [r3, #0]
}
 8004d88:	0018      	movs	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b004      	add	sp, #16
 8004d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8004d90:	200024e8 	.word	0x200024e8
 8004d94:	20000b39 	.word	0x20000b39
 8004d98:	20000a28 	.word	0x20000a28
 8004d9c:	20000a2a 	.word	0x20000a2a
 8004da0:	20000000 	.word	0x20000000
 8004da4:	20000028 	.word	0x20000028
 8004da8:	20000a1c 	.word	0x20000a1c
 8004dac:	20000b3a 	.word	0x20000b3a
 8004db0:	2000044c 	.word	0x2000044c

08004db4 <clearDMABuffer>:

void clearDMABuffer(){
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004db8:	2380      	movs	r3, #128	@ 0x80
 8004dba:	005a      	lsls	r2, r3, #1
 8004dbc:	4b03      	ldr	r3, [pc, #12]	@ (8004dcc <clearDMABuffer+0x18>)
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f01a febd 	bl	801fb40 <memset>
}
 8004dc6:	46c0      	nop			@ (mov r8, r8)
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	2000044c 	.word	0x2000044c

08004dd0 <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	0002      	movs	r2, r0
 8004dd8:	1dfb      	adds	r3, r7, #7
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	1dbb      	adds	r3, r7, #6
 8004dde:	1c0a      	adds	r2, r1, #0
 8004de0:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004de2:	210f      	movs	r1, #15
 8004de4:	187b      	adds	r3, r7, r1
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004dea:	1dbb      	adds	r3, r7, #6
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d105      	bne.n	8004dfe <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004df2:	187b      	adds	r3, r7, r1
 8004df4:	1dfa      	adds	r2, r7, #7
 8004df6:	7812      	ldrb	r2, [r2, #0]
 8004df8:	4251      	negs	r1, r2
 8004dfa:	414a      	adcs	r2, r1
 8004dfc:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004dfe:	1dbb      	adds	r3, r7, #6
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d107      	bne.n	8004e16 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004e06:	230f      	movs	r3, #15
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	1dfa      	adds	r2, r7, #7
 8004e0c:	7812      	ldrb	r2, [r2, #0]
 8004e0e:	3a02      	subs	r2, #2
 8004e10:	4251      	negs	r1, r2
 8004e12:	414a      	adcs	r2, r1
 8004e14:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004e16:	1dbb      	adds	r3, r7, #6
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d107      	bne.n	8004e2e <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004e1e:	230f      	movs	r3, #15
 8004e20:	18fb      	adds	r3, r7, r3
 8004e22:	1dfa      	adds	r2, r7, #7
 8004e24:	7812      	ldrb	r2, [r2, #0]
 8004e26:	3a05      	subs	r2, #5
 8004e28:	4251      	negs	r1, r2
 8004e2a:	414a      	adcs	r2, r1
 8004e2c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004e2e:	1dbb      	adds	r3, r7, #6
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b05      	cmp	r3, #5
 8004e34:	d107      	bne.n	8004e46 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004e36:	230f      	movs	r3, #15
 8004e38:	18fb      	adds	r3, r7, r3
 8004e3a:	1dfa      	adds	r2, r7, #7
 8004e3c:	7812      	ldrb	r2, [r2, #0]
 8004e3e:	3a0b      	subs	r2, #11
 8004e40:	4251      	negs	r1, r2
 8004e42:	414a      	adcs	r2, r1
 8004e44:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004e46:	230f      	movs	r3, #15
 8004e48:	18fb      	adds	r3, r7, r3
 8004e4a:	781b      	ldrb	r3, [r3, #0]
}
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	b004      	add	sp, #16
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004e54:	b590      	push	{r4, r7, lr}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	0002      	movs	r2, r0
 8004e5c:	1dfb      	adds	r3, r7, #7
 8004e5e:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004e60:	230f      	movs	r3, #15
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	2200      	movs	r2, #0
 8004e66:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004e68:	1dfb      	adds	r3, r7, #7
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b14      	cmp	r3, #20
 8004e6e:	d900      	bls.n	8004e72 <AT_Send+0x1e>
 8004e70:	e18c      	b.n	800518c <AT_Send+0x338>
 8004e72:	009a      	lsls	r2, r3, #2
 8004e74:	4bc9      	ldr	r3, [pc, #804]	@ (800519c <AT_Send+0x348>)
 8004e76:	18d3      	adds	r3, r2, r3
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004e7c:	4bc8      	ldr	r3, [pc, #800]	@ (80051a0 <AT_Send+0x34c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	0018      	movs	r0, r3
 8004e82:	f008 ff59 	bl	800dd38 <TimestampIsReached>
 8004e86:	1e03      	subs	r3, r0, #0
 8004e88:	d100      	bne.n	8004e8c <AT_Send+0x38>
 8004e8a:	e17e      	b.n	800518a <AT_Send+0x336>
    ATCommandSend = PollAwake();
 8004e8c:	230f      	movs	r3, #15
 8004e8e:	18fc      	adds	r4, r7, r3
 8004e90:	f7ff fbc0 	bl	8004614 <PollAwake>
 8004e94:	0003      	movs	r3, r0
 8004e96:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004e98:	f009 fbfa 	bl	800e690 <HAL_GetTick>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	3332      	adds	r3, #50	@ 0x32
 8004ea0:	001a      	movs	r2, r3
 8004ea2:	4bbf      	ldr	r3, [pc, #764]	@ (80051a0 <AT_Send+0x34c>)
 8004ea4:	601a      	str	r2, [r3, #0]
  }
  break;
 8004ea6:	e170      	b.n	800518a <AT_Send+0x336>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004ea8:	4abe      	ldr	r2, [pc, #760]	@ (80051a4 <AT_Send+0x350>)
 8004eaa:	4bbf      	ldr	r3, [pc, #764]	@ (80051a8 <AT_Send+0x354>)
 8004eac:	0019      	movs	r1, r3
 8004eae:	2003      	movs	r0, #3
 8004eb0:	f008 ff98 	bl	800dde4 <CreateLine>
    ATCommandSend = RFPower();
 8004eb4:	230f      	movs	r3, #15
 8004eb6:	18fc      	adds	r4, r7, r3
 8004eb8:	f7ff fbc8 	bl	800464c <RFPower>
 8004ebc:	0003      	movs	r3, r0
 8004ebe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ec0:	f009 fbe6 	bl	800e690 <HAL_GetTick>
 8004ec4:	0003      	movs	r3, r0
 8004ec6:	330a      	adds	r3, #10
 8004ec8:	001a      	movs	r2, r3
 8004eca:	4bb5      	ldr	r3, [pc, #724]	@ (80051a0 <AT_Send+0x34c>)
 8004ecc:	601a      	str	r2, [r3, #0]
    break;
 8004ece:	e15d      	b.n	800518c <AT_Send+0x338>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004ed0:	4ab6      	ldr	r2, [pc, #728]	@ (80051ac <AT_Send+0x358>)
 8004ed2:	4bb5      	ldr	r3, [pc, #724]	@ (80051a8 <AT_Send+0x354>)
 8004ed4:	0019      	movs	r1, r3
 8004ed6:	2003      	movs	r0, #3
 8004ed8:	f008 ff84 	bl	800dde4 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004edc:	230f      	movs	r3, #15
 8004ede:	18fc      	adds	r4, r7, r3
 8004ee0:	f7ff fbd0 	bl	8004684 <CheckRFPower>
 8004ee4:	0003      	movs	r3, r0
 8004ee6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ee8:	f009 fbd2 	bl	800e690 <HAL_GetTick>
 8004eec:	0003      	movs	r3, r0
 8004eee:	330a      	adds	r3, #10
 8004ef0:	001a      	movs	r2, r3
 8004ef2:	4bab      	ldr	r3, [pc, #684]	@ (80051a0 <AT_Send+0x34c>)
 8004ef4:	601a      	str	r2, [r3, #0]
    break;
 8004ef6:	e149      	b.n	800518c <AT_Send+0x338>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004ef8:	4aad      	ldr	r2, [pc, #692]	@ (80051b0 <AT_Send+0x35c>)
 8004efa:	4bab      	ldr	r3, [pc, #684]	@ (80051a8 <AT_Send+0x354>)
 8004efc:	0019      	movs	r1, r3
 8004efe:	2003      	movs	r0, #3
 8004f00:	f008 ff70 	bl	800dde4 <CreateLine>
    ATCommandSend = ATRestore();
 8004f04:	230f      	movs	r3, #15
 8004f06:	18fc      	adds	r4, r7, r3
 8004f08:	f7ff fbd8 	bl	80046bc <ATRestore>
 8004f0c:	0003      	movs	r3, r0
 8004f0e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004f10:	f009 fbbe 	bl	800e690 <HAL_GetTick>
 8004f14:	0003      	movs	r3, r0
 8004f16:	3332      	adds	r3, #50	@ 0x32
 8004f18:	001a      	movs	r2, r3
 8004f1a:	4ba1      	ldr	r3, [pc, #644]	@ (80051a0 <AT_Send+0x34c>)
 8004f1c:	601a      	str	r2, [r3, #0]
    break;
 8004f1e:	e135      	b.n	800518c <AT_Send+0x338>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004f20:	4aa4      	ldr	r2, [pc, #656]	@ (80051b4 <AT_Send+0x360>)
 8004f22:	4ba1      	ldr	r3, [pc, #644]	@ (80051a8 <AT_Send+0x354>)
 8004f24:	0019      	movs	r1, r3
 8004f26:	2003      	movs	r0, #3
 8004f28:	f008 ff5c 	bl	800dde4 <CreateLine>
    ATCommandSend = CWINIT();
 8004f2c:	230f      	movs	r3, #15
 8004f2e:	18fc      	adds	r4, r7, r3
 8004f30:	f7ff fbe0 	bl	80046f4 <CWINIT>
 8004f34:	0003      	movs	r3, r0
 8004f36:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004f38:	f009 fbaa 	bl	800e690 <HAL_GetTick>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	33f5      	adds	r3, #245	@ 0xf5
 8004f40:	33ff      	adds	r3, #255	@ 0xff
 8004f42:	001a      	movs	r2, r3
 8004f44:	4b96      	ldr	r3, [pc, #600]	@ (80051a0 <AT_Send+0x34c>)
 8004f46:	601a      	str	r2, [r3, #0]
    break;
 8004f48:	e120      	b.n	800518c <AT_Send+0x338>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004f4a:	4a9b      	ldr	r2, [pc, #620]	@ (80051b8 <AT_Send+0x364>)
 8004f4c:	4b96      	ldr	r3, [pc, #600]	@ (80051a8 <AT_Send+0x354>)
 8004f4e:	0019      	movs	r1, r3
 8004f50:	2003      	movs	r0, #3
 8004f52:	f008 ff47 	bl	800dde4 <CreateLine>
    ATCommandSend = CWSTATE();
 8004f56:	230f      	movs	r3, #15
 8004f58:	18fc      	adds	r4, r7, r3
 8004f5a:	f7ff fcd9 	bl	8004910 <CWSTATE>
 8004f5e:	0003      	movs	r3, r0
 8004f60:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004f62:	f009 fb95 	bl	800e690 <HAL_GetTick>
 8004f66:	0003      	movs	r3, r0
 8004f68:	33f5      	adds	r3, #245	@ 0xf5
 8004f6a:	33ff      	adds	r3, #255	@ 0xff
 8004f6c:	001a      	movs	r2, r3
 8004f6e:	4b8c      	ldr	r3, [pc, #560]	@ (80051a0 <AT_Send+0x34c>)
 8004f70:	601a      	str	r2, [r3, #0]
    break;
 8004f72:	e10b      	b.n	800518c <AT_Send+0x338>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004f74:	4a91      	ldr	r2, [pc, #580]	@ (80051bc <AT_Send+0x368>)
 8004f76:	4b8c      	ldr	r3, [pc, #560]	@ (80051a8 <AT_Send+0x354>)
 8004f78:	0019      	movs	r1, r3
 8004f7a:	2003      	movs	r0, #3
 8004f7c:	f008 ff32 	bl	800dde4 <CreateLine>
    ATCommandSend = CWMODE1();
 8004f80:	230f      	movs	r3, #15
 8004f82:	18fc      	adds	r4, r7, r3
 8004f84:	f7ff fbd2 	bl	800472c <CWMODE1>
 8004f88:	0003      	movs	r3, r0
 8004f8a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f8c:	f009 fb80 	bl	800e690 <HAL_GetTick>
 8004f90:	0003      	movs	r3, r0
 8004f92:	330a      	adds	r3, #10
 8004f94:	001a      	movs	r2, r3
 8004f96:	4b82      	ldr	r3, [pc, #520]	@ (80051a0 <AT_Send+0x34c>)
 8004f98:	601a      	str	r2, [r3, #0]
    break;
 8004f9a:	e0f7      	b.n	800518c <AT_Send+0x338>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004f9c:	4a87      	ldr	r2, [pc, #540]	@ (80051bc <AT_Send+0x368>)
 8004f9e:	4b82      	ldr	r3, [pc, #520]	@ (80051a8 <AT_Send+0x354>)
 8004fa0:	0019      	movs	r1, r3
 8004fa2:	2003      	movs	r0, #3
 8004fa4:	f008 ff1e 	bl	800dde4 <CreateLine>
    ATCommandSend = CWMODE2();
 8004fa8:	230f      	movs	r3, #15
 8004faa:	18fc      	adds	r4, r7, r3
 8004fac:	f7ff fbda 	bl	8004764 <CWMODE2>
 8004fb0:	0003      	movs	r3, r0
 8004fb2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004fb4:	f009 fb6c 	bl	800e690 <HAL_GetTick>
 8004fb8:	0003      	movs	r3, r0
 8004fba:	330a      	adds	r3, #10
 8004fbc:	001a      	movs	r2, r3
 8004fbe:	4b78      	ldr	r3, [pc, #480]	@ (80051a0 <AT_Send+0x34c>)
 8004fc0:	601a      	str	r2, [r3, #0]
    break;
 8004fc2:	e0e3      	b.n	800518c <AT_Send+0x338>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004fc4:	4a7e      	ldr	r2, [pc, #504]	@ (80051c0 <AT_Send+0x36c>)
 8004fc6:	4b78      	ldr	r3, [pc, #480]	@ (80051a8 <AT_Send+0x354>)
 8004fc8:	0019      	movs	r1, r3
 8004fca:	2003      	movs	r0, #3
 8004fcc:	f008 ff0a 	bl	800dde4 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004fd0:	230f      	movs	r3, #15
 8004fd2:	18fc      	adds	r4, r7, r3
 8004fd4:	f7ff fbe2 	bl	800479c <CWAUTOCONN>
 8004fd8:	0003      	movs	r3, r0
 8004fda:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004fdc:	f009 fb58 	bl	800e690 <HAL_GetTick>
 8004fe0:	0003      	movs	r3, r0
 8004fe2:	330a      	adds	r3, #10
 8004fe4:	001a      	movs	r2, r3
 8004fe6:	4b6e      	ldr	r3, [pc, #440]	@ (80051a0 <AT_Send+0x34c>)
 8004fe8:	601a      	str	r2, [r3, #0]
    break;
 8004fea:	e0cf      	b.n	800518c <AT_Send+0x338>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004fec:	4a75      	ldr	r2, [pc, #468]	@ (80051c4 <AT_Send+0x370>)
 8004fee:	4b6e      	ldr	r3, [pc, #440]	@ (80051a8 <AT_Send+0x354>)
 8004ff0:	0019      	movs	r1, r3
 8004ff2:	2003      	movs	r0, #3
 8004ff4:	f008 fef6 	bl	800dde4 <CreateLine>
    ATCommandSend = CWJAP();
 8004ff8:	230f      	movs	r3, #15
 8004ffa:	18fc      	adds	r4, r7, r3
 8004ffc:	f7ff fbea 	bl	80047d4 <CWJAP>
 8005000:	0003      	movs	r3, r0
 8005002:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005004:	f009 fb44 	bl	800e690 <HAL_GetTick>
 8005008:	0003      	movs	r3, r0
 800500a:	3332      	adds	r3, #50	@ 0x32
 800500c:	001a      	movs	r2, r3
 800500e:	4b64      	ldr	r3, [pc, #400]	@ (80051a0 <AT_Send+0x34c>)
 8005010:	601a      	str	r2, [r3, #0]
    break;
 8005012:	e0bb      	b.n	800518c <AT_Send+0x338>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8005014:	4a6c      	ldr	r2, [pc, #432]	@ (80051c8 <AT_Send+0x374>)
 8005016:	4b64      	ldr	r3, [pc, #400]	@ (80051a8 <AT_Send+0x354>)
 8005018:	0019      	movs	r1, r3
 800501a:	2003      	movs	r0, #3
 800501c:	f008 fee2 	bl	800dde4 <CreateLine>
    ATCommandSend = CWMODE3();
 8005020:	230f      	movs	r3, #15
 8005022:	18fc      	adds	r4, r7, r3
 8005024:	f7ff fc58 	bl	80048d8 <CWMODE3>
 8005028:	0003      	movs	r3, r0
 800502a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800502c:	f009 fb30 	bl	800e690 <HAL_GetTick>
 8005030:	0003      	movs	r3, r0
 8005032:	330a      	adds	r3, #10
 8005034:	001a      	movs	r2, r3
 8005036:	4b5a      	ldr	r3, [pc, #360]	@ (80051a0 <AT_Send+0x34c>)
 8005038:	601a      	str	r2, [r3, #0]
    break;
 800503a:	e0a7      	b.n	800518c <AT_Send+0x338>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 800503c:	4a63      	ldr	r2, [pc, #396]	@ (80051cc <AT_Send+0x378>)
 800503e:	4b5a      	ldr	r3, [pc, #360]	@ (80051a8 <AT_Send+0x354>)
 8005040:	0019      	movs	r1, r3
 8005042:	2003      	movs	r0, #3
 8005044:	f008 fece 	bl	800dde4 <CreateLine>
    ATCommandSend = CWSAP();
 8005048:	230f      	movs	r3, #15
 800504a:	18fc      	adds	r4, r7, r3
 800504c:	f7ff fc7c 	bl	8004948 <CWSAP>
 8005050:	0003      	movs	r3, r0
 8005052:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005054:	f009 fb1c 	bl	800e690 <HAL_GetTick>
 8005058:	0003      	movs	r3, r0
 800505a:	330a      	adds	r3, #10
 800505c:	001a      	movs	r2, r3
 800505e:	4b50      	ldr	r3, [pc, #320]	@ (80051a0 <AT_Send+0x34c>)
 8005060:	601a      	str	r2, [r3, #0]
    break;
 8005062:	e093      	b.n	800518c <AT_Send+0x338>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8005064:	230f      	movs	r3, #15
 8005066:	18fc      	adds	r4, r7, r3
 8005068:	f7ff fc8a 	bl	8004980 <CIPMUX>
 800506c:	0003      	movs	r3, r0
 800506e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005070:	f009 fb0e 	bl	800e690 <HAL_GetTick>
 8005074:	0003      	movs	r3, r0
 8005076:	330a      	adds	r3, #10
 8005078:	001a      	movs	r2, r3
 800507a:	4b49      	ldr	r3, [pc, #292]	@ (80051a0 <AT_Send+0x34c>)
 800507c:	601a      	str	r2, [r3, #0]
    break;
 800507e:	e085      	b.n	800518c <AT_Send+0x338>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8005080:	230f      	movs	r3, #15
 8005082:	18fc      	adds	r4, r7, r3
 8005084:	f7ff fc98 	bl	80049b8 <WEBSERVER>
 8005088:	0003      	movs	r3, r0
 800508a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800508c:	f009 fb00 	bl	800e690 <HAL_GetTick>
 8005090:	0003      	movs	r3, r0
 8005092:	330a      	adds	r3, #10
 8005094:	001a      	movs	r2, r3
 8005096:	4b42      	ldr	r3, [pc, #264]	@ (80051a0 <AT_Send+0x34c>)
 8005098:	601a      	str	r2, [r3, #0]
    break;
 800509a:	e077      	b.n	800518c <AT_Send+0x338>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 800509c:	230f      	movs	r3, #15
 800509e:	18fc      	adds	r4, r7, r3
 80050a0:	f7ff fca6 	bl	80049f0 <HTTPCPOST>
 80050a4:	0003      	movs	r3, r0
 80050a6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80050a8:	f009 faf2 	bl	800e690 <HAL_GetTick>
 80050ac:	0003      	movs	r3, r0
 80050ae:	33f5      	adds	r3, #245	@ 0xf5
 80050b0:	33ff      	adds	r3, #255	@ 0xff
 80050b2:	001a      	movs	r2, r3
 80050b4:	4b3a      	ldr	r3, [pc, #232]	@ (80051a0 <AT_Send+0x34c>)
 80050b6:	601a      	str	r2, [r3, #0]
    break;
 80050b8:	e068      	b.n	800518c <AT_Send+0x338>

  case AT_SENDDATA:
    Debug("Send the data");
 80050ba:	4a45      	ldr	r2, [pc, #276]	@ (80051d0 <AT_Send+0x37c>)
 80050bc:	4b3a      	ldr	r3, [pc, #232]	@ (80051a8 <AT_Send+0x354>)
 80050be:	0019      	movs	r1, r3
 80050c0:	2003      	movs	r0, #3
 80050c2:	f008 fe8f 	bl	800dde4 <CreateLine>
    ATCommandSend = SENDDATA();
 80050c6:	230f      	movs	r3, #15
 80050c8:	18fc      	adds	r4, r7, r3
 80050ca:	f7ff fcf1 	bl	8004ab0 <SENDDATA>
 80050ce:	0003      	movs	r3, r0
 80050d0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 80050d2:	f009 fadd 	bl	800e690 <HAL_GetTick>
 80050d6:	0003      	movs	r3, r0
 80050d8:	33f5      	adds	r3, #245	@ 0xf5
 80050da:	33ff      	adds	r3, #255	@ 0xff
 80050dc:	001a      	movs	r2, r3
 80050de:	4b30      	ldr	r3, [pc, #192]	@ (80051a0 <AT_Send+0x34c>)
 80050e0:	601a      	str	r2, [r3, #0]
    break;
 80050e2:	e053      	b.n	800518c <AT_Send+0x338>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 80050e4:	4a3b      	ldr	r2, [pc, #236]	@ (80051d4 <AT_Send+0x380>)
 80050e6:	4b30      	ldr	r3, [pc, #192]	@ (80051a8 <AT_Send+0x354>)
 80050e8:	0019      	movs	r1, r3
 80050ea:	2003      	movs	r0, #3
 80050ec:	f008 fe7a 	bl	800dde4 <CreateLine>
    ATCommandSend = SLEEP();
 80050f0:	230f      	movs	r3, #15
 80050f2:	18fc      	adds	r4, r7, r3
 80050f4:	f7ff fcf8 	bl	8004ae8 <SLEEP>
 80050f8:	0003      	movs	r3, r0
 80050fa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050fc:	f009 fac8 	bl	800e690 <HAL_GetTick>
 8005100:	0003      	movs	r3, r0
 8005102:	330a      	adds	r3, #10
 8005104:	001a      	movs	r2, r3
 8005106:	4b26      	ldr	r3, [pc, #152]	@ (80051a0 <AT_Send+0x34c>)
 8005108:	601a      	str	r2, [r3, #0]
    break;
 800510a:	e03f      	b.n	800518c <AT_Send+0x338>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 800510c:	4a32      	ldr	r2, [pc, #200]	@ (80051d8 <AT_Send+0x384>)
 800510e:	4b26      	ldr	r3, [pc, #152]	@ (80051a8 <AT_Send+0x354>)
 8005110:	0019      	movs	r1, r3
 8005112:	2003      	movs	r0, #3
 8005114:	f008 fe66 	bl	800dde4 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8005118:	230f      	movs	r3, #15
 800511a:	18fc      	adds	r4, r7, r3
 800511c:	f7ff fd00 	bl	8004b20 <CIPSNTPCFG>
 8005120:	0003      	movs	r3, r0
 8005122:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005124:	f009 fab4 	bl	800e690 <HAL_GetTick>
 8005128:	0003      	movs	r3, r0
 800512a:	330a      	adds	r3, #10
 800512c:	001a      	movs	r2, r3
 800512e:	4b1c      	ldr	r3, [pc, #112]	@ (80051a0 <AT_Send+0x34c>)
 8005130:	601a      	str	r2, [r3, #0]
    break;
 8005132:	e02b      	b.n	800518c <AT_Send+0x338>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8005134:	4a29      	ldr	r2, [pc, #164]	@ (80051dc <AT_Send+0x388>)
 8005136:	4b1c      	ldr	r3, [pc, #112]	@ (80051a8 <AT_Send+0x354>)
 8005138:	0019      	movs	r1, r3
 800513a:	2003      	movs	r0, #3
 800513c:	f008 fe52 	bl	800dde4 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8005140:	230f      	movs	r3, #15
 8005142:	18fc      	adds	r4, r7, r3
 8005144:	f7ff fd0c 	bl	8004b60 <CIPSNTPTIME>
 8005148:	0003      	movs	r3, r0
 800514a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800514c:	f009 faa0 	bl	800e690 <HAL_GetTick>
 8005150:	0003      	movs	r3, r0
 8005152:	33f5      	adds	r3, #245	@ 0xf5
 8005154:	33ff      	adds	r3, #255	@ 0xff
 8005156:	001a      	movs	r2, r3
 8005158:	4b11      	ldr	r3, [pc, #68]	@ (80051a0 <AT_Send+0x34c>)
 800515a:	601a      	str	r2, [r3, #0]
    break;
 800515c:	e016      	b.n	800518c <AT_Send+0x338>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 800515e:	4a20      	ldr	r2, [pc, #128]	@ (80051e0 <AT_Send+0x38c>)
 8005160:	4b11      	ldr	r3, [pc, #68]	@ (80051a8 <AT_Send+0x354>)
 8005162:	0019      	movs	r1, r3
 8005164:	2003      	movs	r0, #3
 8005166:	f008 fe3d 	bl	800dde4 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 800516a:	230f      	movs	r3, #15
 800516c:	18fc      	adds	r4, r7, r3
 800516e:	f7ff fd13 	bl	8004b98 <CIPSNTPINTV>
 8005172:	0003      	movs	r3, r0
 8005174:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005176:	f009 fa8b 	bl	800e690 <HAL_GetTick>
 800517a:	0003      	movs	r3, r0
 800517c:	330a      	adds	r3, #10
 800517e:	001a      	movs	r2, r3
 8005180:	4b07      	ldr	r3, [pc, #28]	@ (80051a0 <AT_Send+0x34c>)
 8005182:	601a      	str	r2, [r3, #0]
    break;
 8005184:	e002      	b.n	800518c <AT_Send+0x338>
  case AT_END:
    break;
 8005186:	46c0      	nop			@ (mov r8, r8)
 8005188:	e000      	b.n	800518c <AT_Send+0x338>
  break;
 800518a:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 800518c:	230f      	movs	r3, #15
 800518e:	18fb      	adds	r3, r7, r3
 8005190:	781b      	ldrb	r3, [r3, #0]
}
 8005192:	0018      	movs	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	b005      	add	sp, #20
 8005198:	bd90      	pop	{r4, r7, pc}
 800519a:	46c0      	nop			@ (mov r8, r8)
 800519c:	080249f8 	.word	0x080249f8
 80051a0:	20000a1c 	.word	0x20000a1c
 80051a4:	08023280 	.word	0x08023280
 80051a8:	08022aa8 	.word	0x08022aa8
 80051ac:	08023294 	.word	0x08023294
 80051b0:	080232a8 	.word	0x080232a8
 80051b4:	080232b8 	.word	0x080232b8
 80051b8:	080232cc 	.word	0x080232cc
 80051bc:	080232e4 	.word	0x080232e4
 80051c0:	080232fc 	.word	0x080232fc
 80051c4:	08023314 	.word	0x08023314
 80051c8:	08023328 	.word	0x08023328
 80051cc:	08023344 	.word	0x08023344
 80051d0:	08023360 	.word	0x08023360
 80051d4:	08023370 	.word	0x08023370
 80051d8:	08023394 	.word	0x08023394
 80051dc:	080233a8 	.word	0x080233a8
 80051e0:	080233c0 	.word	0x080233c0

080051e4 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80051ea:	1dfb      	adds	r3, r7, #7
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 80051f0:	4b7a      	ldr	r3, [pc, #488]	@ (80053dc <ESP_WakeTest+0x1f8>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b05      	cmp	r3, #5
 80051f6:	d900      	bls.n	80051fa <ESP_WakeTest+0x16>
 80051f8:	e0d6      	b.n	80053a8 <ESP_WakeTest+0x1c4>
 80051fa:	009a      	lsls	r2, r3, #2
 80051fc:	4b78      	ldr	r3, [pc, #480]	@ (80053e0 <ESP_WakeTest+0x1fc>)
 80051fe:	18d3      	adds	r3, r2, r3
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
//      Debug("TestState: ESP_TEST_INIT");
      if(!EspTurnedOn){
 8005204:	4b77      	ldr	r3, [pc, #476]	@ (80053e4 <ESP_WakeTest+0x200>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2201      	movs	r2, #1
 800520a:	4053      	eors	r3, r2
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d036      	beq.n	8005280 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005212:	2380      	movs	r3, #128	@ 0x80
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	4874      	ldr	r0, [pc, #464]	@ (80053e8 <ESP_WakeTest+0x204>)
 8005218:	2200      	movs	r2, #0
 800521a:	0019      	movs	r1, r3
 800521c:	f00a fcc9 	bl	800fbb2 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8005220:	2032      	movs	r0, #50	@ 0x32
 8005222:	f009 fa3f 	bl	800e6a4 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005226:	2380      	movs	r3, #128	@ 0x80
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	486f      	ldr	r0, [pc, #444]	@ (80053e8 <ESP_WakeTest+0x204>)
 800522c:	2201      	movs	r2, #1
 800522e:	0019      	movs	r1, r3
 8005230:	f00a fcbf 	bl	800fbb2 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005234:	200a      	movs	r0, #10
 8005236:	f009 fa35 	bl	800e6a4 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800523a:	4b6c      	ldr	r3, [pc, #432]	@ (80053ec <ESP_WakeTest+0x208>)
 800523c:	2200      	movs	r2, #0
 800523e:	2101      	movs	r1, #1
 8005240:	0018      	movs	r0, r3
 8005242:	f00a fcb6 	bl	800fbb2 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005246:	200a      	movs	r0, #10
 8005248:	f009 fa2c 	bl	800e6a4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800524c:	4b67      	ldr	r3, [pc, #412]	@ (80053ec <ESP_WakeTest+0x208>)
 800524e:	2201      	movs	r2, #1
 8005250:	2102      	movs	r1, #2
 8005252:	0018      	movs	r0, r3
 8005254:	f00a fcad 	bl	800fbb2 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005258:	200a      	movs	r0, #10
 800525a:	f009 fa23 	bl	800e6a4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800525e:	4b63      	ldr	r3, [pc, #396]	@ (80053ec <ESP_WakeTest+0x208>)
 8005260:	2201      	movs	r2, #1
 8005262:	2101      	movs	r1, #1
 8005264:	0018      	movs	r0, r3
 8005266:	f00a fca4 	bl	800fbb2 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800526a:	f009 fa11 	bl	800e690 <HAL_GetTick>
 800526e:	0003      	movs	r3, r0
 8005270:	22af      	movs	r2, #175	@ 0xaf
 8005272:	0092      	lsls	r2, r2, #2
 8005274:	189a      	adds	r2, r3, r2
 8005276:	4b5e      	ldr	r3, [pc, #376]	@ (80053f0 <ESP_WakeTest+0x20c>)
 8005278:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800527a:	4b5a      	ldr	r3, [pc, #360]	@ (80053e4 <ESP_WakeTest+0x200>)
 800527c:	2201      	movs	r2, #1
 800527e:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005280:	2380      	movs	r3, #128	@ 0x80
 8005282:	005a      	lsls	r2, r3, #1
 8005284:	4b5b      	ldr	r3, [pc, #364]	@ (80053f4 <ESP_WakeTest+0x210>)
 8005286:	0011      	movs	r1, r2
 8005288:	0018      	movs	r0, r3
 800528a:	f7fe fc1f 	bl	8003acc <ESP_Receive>
 800528e:	1e03      	subs	r3, r0, #0
 8005290:	d100      	bne.n	8005294 <ESP_WakeTest+0xb0>
 8005292:	e099      	b.n	80053c8 <ESP_WakeTest+0x1e4>
        TestState = ESP_TEST_SEND;
 8005294:	4b51      	ldr	r3, [pc, #324]	@ (80053dc <ESP_WakeTest+0x1f8>)
 8005296:	2201      	movs	r2, #1
 8005298:	701a      	strb	r2, [r3, #0]
      }
      break;
 800529a:	e095      	b.n	80053c8 <ESP_WakeTest+0x1e4>

    case ESP_TEST_SEND:
//      Debug("TestState: ESP_TEST_SEND");
      if(TimestampIsReached(ESPTimeStamp)){
 800529c:	4b54      	ldr	r3, [pc, #336]	@ (80053f0 <ESP_WakeTest+0x20c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	0018      	movs	r0, r3
 80052a2:	f008 fd49 	bl	800dd38 <TimestampIsReached>
 80052a6:	1e03      	subs	r3, r0, #0
 80052a8:	d100      	bne.n	80052ac <ESP_WakeTest+0xc8>
 80052aa:	e08f      	b.n	80053cc <ESP_WakeTest+0x1e8>
        ATSend = AT_Send(ATCommand);
 80052ac:	4b52      	ldr	r3, [pc, #328]	@ (80053f8 <ESP_WakeTest+0x214>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	1dfc      	adds	r4, r7, #7
 80052b2:	0018      	movs	r0, r3
 80052b4:	f7ff fdce 	bl	8004e54 <AT_Send>
 80052b8:	0003      	movs	r3, r0
 80052ba:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80052bc:	1dfb      	adds	r3, r7, #7
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d100      	bne.n	80052c6 <ESP_WakeTest+0xe2>
 80052c4:	e082      	b.n	80053cc <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_RECEIVE;
 80052c6:	4b45      	ldr	r3, [pc, #276]	@ (80053dc <ESP_WakeTest+0x1f8>)
 80052c8:	2202      	movs	r2, #2
 80052ca:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80052cc:	e07e      	b.n	80053cc <ESP_WakeTest+0x1e8>

    case ESP_TEST_RECEIVE:
//      Debug("TestState: ESP_TEST_RECEIVE");
      if(TimestampIsReached(ESPTimeStamp)){
 80052ce:	4b48      	ldr	r3, [pc, #288]	@ (80053f0 <ESP_WakeTest+0x20c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	0018      	movs	r0, r3
 80052d4:	f008 fd30 	bl	800dd38 <TimestampIsReached>
 80052d8:	1e03      	subs	r3, r0, #0
 80052da:	d100      	bne.n	80052de <ESP_WakeTest+0xfa>
 80052dc:	e078      	b.n	80053d0 <ESP_WakeTest+0x1ec>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80052de:	4b47      	ldr	r3, [pc, #284]	@ (80053fc <ESP_WakeTest+0x218>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	0018      	movs	r0, r3
 80052e4:	f7ff fc74 	bl	8004bd0 <DMA_ProcessBuffer>
 80052e8:	0003      	movs	r3, r0
 80052ea:	001a      	movs	r2, r3
 80052ec:	4b44      	ldr	r3, [pc, #272]	@ (8005400 <ESP_WakeTest+0x21c>)
 80052ee:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80052f0:	4b43      	ldr	r3, [pc, #268]	@ (8005400 <ESP_WakeTest+0x21c>)
 80052f2:	781a      	ldrb	r2, [r3, #0]
 80052f4:	4b41      	ldr	r3, [pc, #260]	@ (80053fc <ESP_WakeTest+0x218>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	1dbc      	adds	r4, r7, #6
 80052fa:	0019      	movs	r1, r3
 80052fc:	0010      	movs	r0, r2
 80052fe:	f7ff fd67 	bl	8004dd0 <ATCompare>
 8005302:	0003      	movs	r3, r0
 8005304:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005306:	4b3e      	ldr	r3, [pc, #248]	@ (8005400 <ESP_WakeTest+0x21c>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d102      	bne.n	8005314 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 800530e:	4b33      	ldr	r3, [pc, #204]	@ (80053dc <ESP_WakeTest+0x1f8>)
 8005310:	2201      	movs	r2, #1
 8005312:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8005314:	4b3a      	ldr	r3, [pc, #232]	@ (8005400 <ESP_WakeTest+0x21c>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b07      	cmp	r3, #7
 800531a:	d104      	bne.n	8005326 <ESP_WakeTest+0x142>
          StartProg();
 800531c:	f7fe ff58 	bl	80041d0 <StartProg>
          TestState = ESP_TEST_BOOT;
 8005320:	4b2e      	ldr	r3, [pc, #184]	@ (80053dc <ESP_WakeTest+0x1f8>)
 8005322:	2205      	movs	r2, #5
 8005324:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005326:	4b36      	ldr	r3, [pc, #216]	@ (8005400 <ESP_WakeTest+0x21c>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b03      	cmp	r3, #3
 800532c:	d109      	bne.n	8005342 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 800532e:	f009 f9af 	bl	800e690 <HAL_GetTick>
 8005332:	0003      	movs	r3, r0
 8005334:	3332      	adds	r3, #50	@ 0x32
 8005336:	001a      	movs	r2, r3
 8005338:	4b2d      	ldr	r3, [pc, #180]	@ (80053f0 <ESP_WakeTest+0x20c>)
 800533a:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 800533c:	4b27      	ldr	r3, [pc, #156]	@ (80053dc <ESP_WakeTest+0x1f8>)
 800533e:	2201      	movs	r2, #1
 8005340:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8005342:	1dbb      	adds	r3, r7, #6
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d042      	beq.n	80053d0 <ESP_WakeTest+0x1ec>
          TestState = ESP_TEST_VALIDATE;
 800534a:	4b24      	ldr	r3, [pc, #144]	@ (80053dc <ESP_WakeTest+0x1f8>)
 800534c:	2203      	movs	r2, #3
 800534e:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005350:	e03e      	b.n	80053d0 <ESP_WakeTest+0x1ec>

    case ESP_TEST_VALIDATE:
//      Debug("TestState: ESP_TEST_VALIDATE");
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8005352:	4b2c      	ldr	r3, [pc, #176]	@ (8005404 <ESP_WakeTest+0x220>)
 8005354:	22fa      	movs	r2, #250	@ 0xfa
 8005356:	0112      	lsls	r2, r2, #4
 8005358:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 800535a:	4b2a      	ldr	r3, [pc, #168]	@ (8005404 <ESP_WakeTest+0x220>)
 800535c:	4a2a      	ldr	r2, [pc, #168]	@ (8005408 <ESP_WakeTest+0x224>)
 800535e:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8005360:	4b28      	ldr	r3, [pc, #160]	@ (8005404 <ESP_WakeTest+0x220>)
 8005362:	22fa      	movs	r2, #250	@ 0xfa
 8005364:	0112      	lsls	r2, r2, #4
 8005366:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8005368:	4b1c      	ldr	r3, [pc, #112]	@ (80053dc <ESP_WakeTest+0x1f8>)
 800536a:	2204      	movs	r2, #4
 800536c:	701a      	strb	r2, [r3, #0]

      break;
 800536e:	e030      	b.n	80053d2 <ESP_WakeTest+0x1ee>

    case ESP_TEST_DEINIT:
//      Debug("TestState: ESP_TEST_DEINIT");
      testRound = false;
 8005370:	4b26      	ldr	r3, [pc, #152]	@ (800540c <ESP_WakeTest+0x228>)
 8005372:	2200      	movs	r2, #0
 8005374:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8005376:	4b1b      	ldr	r3, [pc, #108]	@ (80053e4 <ESP_WakeTest+0x200>)
 8005378:	2200      	movs	r2, #0
 800537a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800537c:	4b1b      	ldr	r3, [pc, #108]	@ (80053ec <ESP_WakeTest+0x208>)
 800537e:	2200      	movs	r2, #0
 8005380:	2101      	movs	r1, #1
 8005382:	0018      	movs	r0, r3
 8005384:	f00a fc15 	bl	800fbb2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005388:	2380      	movs	r3, #128	@ 0x80
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	4816      	ldr	r0, [pc, #88]	@ (80053e8 <ESP_WakeTest+0x204>)
 800538e:	2200      	movs	r2, #0
 8005390:	0019      	movs	r1, r3
 8005392:	f00a fc0e 	bl	800fbb2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005396:	4b15      	ldr	r3, [pc, #84]	@ (80053ec <ESP_WakeTest+0x208>)
 8005398:	2200      	movs	r2, #0
 800539a:	2102      	movs	r1, #2
 800539c:	0018      	movs	r0, r3
 800539e:	f00a fc08 	bl	800fbb2 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 80053a2:	f002 ff33 	bl	800820c <SetESPMeasurementDone>
      break;
 80053a6:	e014      	b.n	80053d2 <ESP_WakeTest+0x1ee>

    default:
//      Debug("TestState: ESP_TEST_INIT");
      TestState = ESP_TEST_INIT;
 80053a8:	4b0c      	ldr	r3, [pc, #48]	@ (80053dc <ESP_WakeTest+0x1f8>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	701a      	strb	r2, [r3, #0]
      break;
 80053ae:	e010      	b.n	80053d2 <ESP_WakeTest+0x1ee>

    case ESP_TEST_BOOT:
//      Debug("TestState: ESP_TEST_BOOT");
      TIM3 -> CCR1 = 4000;
 80053b0:	4b14      	ldr	r3, [pc, #80]	@ (8005404 <ESP_WakeTest+0x220>)
 80053b2:	22fa      	movs	r2, #250	@ 0xfa
 80053b4:	0112      	lsls	r2, r2, #4
 80053b6:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 80053b8:	4b12      	ldr	r3, [pc, #72]	@ (8005404 <ESP_WakeTest+0x220>)
 80053ba:	22fa      	movs	r2, #250	@ 0xfa
 80053bc:	0112      	lsls	r2, r2, #4
 80053be:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 80053c0:	4b10      	ldr	r3, [pc, #64]	@ (8005404 <ESP_WakeTest+0x220>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 80053c6:	e004      	b.n	80053d2 <ESP_WakeTest+0x1ee>
      break;
 80053c8:	46c0      	nop			@ (mov r8, r8)
 80053ca:	e002      	b.n	80053d2 <ESP_WakeTest+0x1ee>
      break;
 80053cc:	46c0      	nop			@ (mov r8, r8)
 80053ce:	e000      	b.n	80053d2 <ESP_WakeTest+0x1ee>
      break;
 80053d0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80053d2:	46c0      	nop			@ (mov r8, r8)
 80053d4:	46bd      	mov	sp, r7
 80053d6:	b003      	add	sp, #12
 80053d8:	bd90      	pop	{r4, r7, pc}
 80053da:	46c0      	nop			@ (mov r8, r8)
 80053dc:	20000a2c 	.word	0x20000a2c
 80053e0:	08024a4c 	.word	0x08024a4c
 80053e4:	2000054c 	.word	0x2000054c
 80053e8:	50000800 	.word	0x50000800
 80053ec:	50001c00 	.word	0x50001c00
 80053f0:	20000a1c 	.word	0x20000a1c
 80053f4:	2000044c 	.word	0x2000044c
 80053f8:	20000a2a 	.word	0x20000a2a
 80053fc:	20000a29 	.word	0x20000a29
 8005400:	20000029 	.word	0x20000029
 8005404:	40000400 	.word	0x40000400
 8005408:	00000bb8 	.word	0x00000bb8
 800540c:	20000000 	.word	0x20000000

08005410 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8005410:	b5b0      	push	{r4, r5, r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af04      	add	r7, sp, #16
  bool ATSend = false;
 8005416:	1dfb      	adds	r3, r7, #7
 8005418:	2200      	movs	r2, #0
 800541a:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 800541c:	4be3      	ldr	r3, [pc, #908]	@ (80057ac <ESP_Upkeep+0x39c>)
 800541e:	781a      	ldrb	r2, [r3, #0]
 8005420:	4be3      	ldr	r3, [pc, #908]	@ (80057b0 <ESP_Upkeep+0x3a0>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d024      	beq.n	8005472 <ESP_Upkeep+0x62>
 8005428:	f008 fd56 	bl	800ded8 <GetVerboseLevel>
 800542c:	0003      	movs	r3, r0
 800542e:	2b03      	cmp	r3, #3
 8005430:	d11f      	bne.n	8005472 <ESP_Upkeep+0x62>
    oldEspState = EspState;
 8005432:	4bde      	ldr	r3, [pc, #888]	@ (80057ac <ESP_Upkeep+0x39c>)
 8005434:	781a      	ldrb	r2, [r3, #0]
 8005436:	4bde      	ldr	r3, [pc, #888]	@ (80057b0 <ESP_Upkeep+0x3a0>)
 8005438:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 800543a:	4bdd      	ldr	r3, [pc, #884]	@ (80057b0 <ESP_Upkeep+0x3a0>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b03      	cmp	r3, #3
 8005440:	d103      	bne.n	800544a <ESP_Upkeep+0x3a>
 8005442:	4bdc      	ldr	r3, [pc, #880]	@ (80057b4 <ESP_Upkeep+0x3a4>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b0e      	cmp	r3, #14
 8005448:	d013      	beq.n	8005472 <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 800544a:	4bd9      	ldr	r3, [pc, #868]	@ (80057b0 <ESP_Upkeep+0x3a0>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	001d      	movs	r5, r3
 8005450:	4bd8      	ldr	r3, [pc, #864]	@ (80057b4 <ESP_Upkeep+0x3a4>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	0018      	movs	r0, r3
 8005456:	4bd8      	ldr	r3, [pc, #864]	@ (80057b8 <ESP_Upkeep+0x3a8>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	001c      	movs	r4, r3
 800545c:	4bd7      	ldr	r3, [pc, #860]	@ (80057bc <ESP_Upkeep+0x3ac>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	4ad7      	ldr	r2, [pc, #860]	@ (80057c0 <ESP_Upkeep+0x3b0>)
 8005462:	49d8      	ldr	r1, [pc, #864]	@ (80057c4 <ESP_Upkeep+0x3b4>)
 8005464:	9302      	str	r3, [sp, #8]
 8005466:	9401      	str	r4, [sp, #4]
 8005468:	9000      	str	r0, [sp, #0]
 800546a:	002b      	movs	r3, r5
 800546c:	2003      	movs	r0, #3
 800546e:	f008 fcb9 	bl	800dde4 <CreateLine>
    }
  }
  switch (EspState) {
 8005472:	4bce      	ldr	r3, [pc, #824]	@ (80057ac <ESP_Upkeep+0x39c>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b0f      	cmp	r3, #15
 8005478:	d901      	bls.n	800547e <ESP_Upkeep+0x6e>
 800547a:	f000 fc08 	bl	8005c8e <ESP_Upkeep+0x87e>
 800547e:	009a      	lsls	r2, r3, #2
 8005480:	4bd1      	ldr	r3, [pc, #836]	@ (80057c8 <ESP_Upkeep+0x3b8>)
 8005482:	18d3      	adds	r3, r2, r3
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005488:	4bc8      	ldr	r3, [pc, #800]	@ (80057ac <ESP_Upkeep+0x39c>)
 800548a:	2201      	movs	r2, #1
 800548c:	701a      	strb	r2, [r3, #0]
      break;
 800548e:	f000 fc17 	bl	8005cc0 <ESP_Upkeep+0x8b0>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8005492:	4bce      	ldr	r3, [pc, #824]	@ (80057cc <ESP_Upkeep+0x3bc>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2201      	movs	r2, #1
 8005498:	4053      	eors	r3, r2
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d036      	beq.n	800550e <ESP_Upkeep+0xfe>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80054a0:	2380      	movs	r3, #128	@ 0x80
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	48ca      	ldr	r0, [pc, #808]	@ (80057d0 <ESP_Upkeep+0x3c0>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	0019      	movs	r1, r3
 80054aa:	f00a fb82 	bl	800fbb2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80054ae:	2001      	movs	r0, #1
 80054b0:	f009 f8f8 	bl	800e6a4 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80054b4:	2380      	movs	r3, #128	@ 0x80
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	48c5      	ldr	r0, [pc, #788]	@ (80057d0 <ESP_Upkeep+0x3c0>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	0019      	movs	r1, r3
 80054be:	f00a fb78 	bl	800fbb2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80054c2:	2001      	movs	r0, #1
 80054c4:	f009 f8ee 	bl	800e6a4 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80054c8:	4bc2      	ldr	r3, [pc, #776]	@ (80057d4 <ESP_Upkeep+0x3c4>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	2101      	movs	r1, #1
 80054ce:	0018      	movs	r0, r3
 80054d0:	f00a fb6f 	bl	800fbb2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80054d4:	2001      	movs	r0, #1
 80054d6:	f009 f8e5 	bl	800e6a4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80054da:	4bbe      	ldr	r3, [pc, #760]	@ (80057d4 <ESP_Upkeep+0x3c4>)
 80054dc:	2201      	movs	r2, #1
 80054de:	2102      	movs	r1, #2
 80054e0:	0018      	movs	r0, r3
 80054e2:	f00a fb66 	bl	800fbb2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80054e6:	2001      	movs	r0, #1
 80054e8:	f009 f8dc 	bl	800e6a4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80054ec:	4bb9      	ldr	r3, [pc, #740]	@ (80057d4 <ESP_Upkeep+0x3c4>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	2101      	movs	r1, #1
 80054f2:	0018      	movs	r0, r3
 80054f4:	f00a fb5d 	bl	800fbb2 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80054f8:	f009 f8ca 	bl	800e690 <HAL_GetTick>
 80054fc:	0003      	movs	r3, r0
 80054fe:	22af      	movs	r2, #175	@ 0xaf
 8005500:	0092      	lsls	r2, r2, #2
 8005502:	189a      	adds	r2, r3, r2
 8005504:	4bb4      	ldr	r3, [pc, #720]	@ (80057d8 <ESP_Upkeep+0x3c8>)
 8005506:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005508:	4bb0      	ldr	r3, [pc, #704]	@ (80057cc <ESP_Upkeep+0x3bc>)
 800550a:	2201      	movs	r2, #1
 800550c:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800550e:	2380      	movs	r3, #128	@ 0x80
 8005510:	005a      	lsls	r2, r3, #1
 8005512:	4bb2      	ldr	r3, [pc, #712]	@ (80057dc <ESP_Upkeep+0x3cc>)
 8005514:	0011      	movs	r1, r2
 8005516:	0018      	movs	r0, r3
 8005518:	f7fe fad8 	bl	8003acc <ESP_Receive>
 800551c:	1e03      	subs	r3, r0, #0
 800551e:	d101      	bne.n	8005524 <ESP_Upkeep+0x114>
 8005520:	f000 fbc1 	bl	8005ca6 <ESP_Upkeep+0x896>
        EspState = ESP_STATE_WAIT_AWAKE;
 8005524:	4ba1      	ldr	r3, [pc, #644]	@ (80057ac <ESP_Upkeep+0x39c>)
 8005526:	220f      	movs	r2, #15
 8005528:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 800552a:	f009 f8b1 	bl	800e690 <HAL_GetTick>
 800552e:	0003      	movs	r3, r0
 8005530:	22fa      	movs	r2, #250	@ 0xfa
 8005532:	00d2      	lsls	r2, r2, #3
 8005534:	189a      	adds	r2, r3, r2
 8005536:	4baa      	ldr	r3, [pc, #680]	@ (80057e0 <ESP_Upkeep+0x3d0>)
 8005538:	601a      	str	r2, [r3, #0]
      }
      break;
 800553a:	f000 fbb4 	bl	8005ca6 <ESP_Upkeep+0x896>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 800553e:	2001      	movs	r0, #1
 8005540:	f7ff fb46 	bl	8004bd0 <DMA_ProcessBuffer>
 8005544:	0003      	movs	r3, r0
 8005546:	001a      	movs	r2, r3
 8005548:	4ba6      	ldr	r3, [pc, #664]	@ (80057e4 <ESP_Upkeep+0x3d4>)
 800554a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 800554c:	4ba5      	ldr	r3, [pc, #660]	@ (80057e4 <ESP_Upkeep+0x3d4>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	1dbc      	adds	r4, r7, #6
 8005552:	2101      	movs	r1, #1
 8005554:	0018      	movs	r0, r3
 8005556:	f7ff fc3b 	bl	8004dd0 <ATCompare>
 800555a:	0003      	movs	r3, r0
 800555c:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 800555e:	1dbb      	adds	r3, r7, #6
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d108      	bne.n	8005578 <ESP_Upkeep+0x168>
 8005566:	4b9e      	ldr	r3, [pc, #632]	@ (80057e0 <ESP_Upkeep+0x3d0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	0018      	movs	r0, r3
 800556c:	f008 fbe4 	bl	800dd38 <TimestampIsReached>
 8005570:	1e03      	subs	r3, r0, #0
 8005572:	d101      	bne.n	8005578 <ESP_Upkeep+0x168>
 8005574:	f000 fb99 	bl	8005caa <ESP_Upkeep+0x89a>
          EspState = ESP_STATE_MODE_SELECT;
 8005578:	4b8c      	ldr	r3, [pc, #560]	@ (80057ac <ESP_Upkeep+0x39c>)
 800557a:	220b      	movs	r2, #11
 800557c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800557e:	f000 fb94 	bl	8005caa <ESP_Upkeep+0x89a>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8005582:	4b99      	ldr	r3, [pc, #612]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 8005584:	2209      	movs	r2, #9
 8005586:	2114      	movs	r1, #20
 8005588:	0018      	movs	r0, r3
 800558a:	f01a fad9 	bl	801fb40 <memset>
      if(!InitIsDone || WifiReset){
 800558e:	4b97      	ldr	r3, [pc, #604]	@ (80057ec <ESP_Upkeep+0x3dc>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2201      	movs	r2, #1
 8005594:	4053      	eors	r3, r2
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d103      	bne.n	80055a4 <ESP_Upkeep+0x194>
 800559c:	4b94      	ldr	r3, [pc, #592]	@ (80057f0 <ESP_Upkeep+0x3e0>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01a      	beq.n	80055da <ESP_Upkeep+0x1ca>
        memcpy(ATCommandArray, AT_INIT, 7);
 80055a4:	4b90      	ldr	r3, [pc, #576]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 80055a6:	4a93      	ldr	r2, [pc, #588]	@ (80057f4 <ESP_Upkeep+0x3e4>)
 80055a8:	6811      	ldr	r1, [r2, #0]
 80055aa:	6019      	str	r1, [r3, #0]
 80055ac:	8891      	ldrh	r1, [r2, #4]
 80055ae:	8099      	strh	r1, [r3, #4]
 80055b0:	7992      	ldrb	r2, [r2, #6]
 80055b2:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 80055b4:	4b7d      	ldr	r3, [pc, #500]	@ (80057ac <ESP_Upkeep+0x39c>)
 80055b6:	2204      	movs	r2, #4
 80055b8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80055ba:	4b8f      	ldr	r3, [pc, #572]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 80055bc:	2200      	movs	r2, #0
 80055be:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80055c0:	4b7d      	ldr	r3, [pc, #500]	@ (80057b8 <ESP_Upkeep+0x3a8>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80055c6:	4b8c      	ldr	r3, [pc, #560]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	001a      	movs	r2, r3
 80055cc:	4b86      	ldr	r3, [pc, #536]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 80055ce:	5c9a      	ldrb	r2, [r3, r2]
 80055d0:	4b78      	ldr	r3, [pc, #480]	@ (80057b4 <ESP_Upkeep+0x3a4>)
 80055d2:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80055d4:	4b79      	ldr	r3, [pc, #484]	@ (80057bc <ESP_Upkeep+0x3ac>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 80055da:	4b84      	ldr	r3, [pc, #528]	@ (80057ec <ESP_Upkeep+0x3dc>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d01f      	beq.n	8005622 <ESP_Upkeep+0x212>
 80055e2:	4b86      	ldr	r3, [pc, #536]	@ (80057fc <ESP_Upkeep+0x3ec>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2201      	movs	r2, #1
 80055e8:	4053      	eors	r3, r2
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d018      	beq.n	8005622 <ESP_Upkeep+0x212>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80055f0:	4b7d      	ldr	r3, [pc, #500]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 80055f2:	4a83      	ldr	r2, [pc, #524]	@ (8005800 <ESP_Upkeep+0x3f0>)
 80055f4:	6811      	ldr	r1, [r2, #0]
 80055f6:	6019      	str	r1, [r3, #0]
 80055f8:	8892      	ldrh	r2, [r2, #4]
 80055fa:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80055fc:	4b6b      	ldr	r3, [pc, #428]	@ (80057ac <ESP_Upkeep+0x39c>)
 80055fe:	2204      	movs	r2, #4
 8005600:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005602:	4b7d      	ldr	r3, [pc, #500]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8005608:	4b6b      	ldr	r3, [pc, #428]	@ (80057b8 <ESP_Upkeep+0x3a8>)
 800560a:	2201      	movs	r2, #1
 800560c:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800560e:	4b7a      	ldr	r3, [pc, #488]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	001a      	movs	r2, r3
 8005614:	4b74      	ldr	r3, [pc, #464]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 8005616:	5c9a      	ldrb	r2, [r3, r2]
 8005618:	4b66      	ldr	r3, [pc, #408]	@ (80057b4 <ESP_Upkeep+0x3a4>)
 800561a:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800561c:	4b67      	ldr	r3, [pc, #412]	@ (80057bc <ESP_Upkeep+0x3ac>)
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8005622:	4b72      	ldr	r3, [pc, #456]	@ (80057ec <ESP_Upkeep+0x3dc>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d021      	beq.n	800566e <ESP_Upkeep+0x25e>
 800562a:	4b74      	ldr	r3, [pc, #464]	@ (80057fc <ESP_Upkeep+0x3ec>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d01d      	beq.n	800566e <ESP_Upkeep+0x25e>
 8005632:	4b74      	ldr	r3, [pc, #464]	@ (8005804 <ESP_Upkeep+0x3f4>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2201      	movs	r2, #1
 8005638:	4053      	eors	r3, r2
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d016      	beq.n	800566e <ESP_Upkeep+0x25e>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8005640:	4b71      	ldr	r3, [pc, #452]	@ (8005808 <ESP_Upkeep+0x3f8>)
 8005642:	881a      	ldrh	r2, [r3, #0]
 8005644:	4b68      	ldr	r3, [pc, #416]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 8005646:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005648:	4b58      	ldr	r3, [pc, #352]	@ (80057ac <ESP_Upkeep+0x39c>)
 800564a:	2204      	movs	r2, #4
 800564c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800564e:	4b6a      	ldr	r3, [pc, #424]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8005654:	4b58      	ldr	r3, [pc, #352]	@ (80057b8 <ESP_Upkeep+0x3a8>)
 8005656:	2204      	movs	r2, #4
 8005658:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800565a:	4b67      	ldr	r3, [pc, #412]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	001a      	movs	r2, r3
 8005660:	4b61      	ldr	r3, [pc, #388]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 8005662:	5c9a      	ldrb	r2, [r3, r2]
 8005664:	4b53      	ldr	r3, [pc, #332]	@ (80057b4 <ESP_Upkeep+0x3a4>)
 8005666:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005668:	4b54      	ldr	r3, [pc, #336]	@ (80057bc <ESP_Upkeep+0x3ac>)
 800566a:	2200      	movs	r2, #0
 800566c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 800566e:	4b5f      	ldr	r3, [pc, #380]	@ (80057ec <ESP_Upkeep+0x3dc>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d02e      	beq.n	80056d4 <ESP_Upkeep+0x2c4>
 8005676:	4b61      	ldr	r3, [pc, #388]	@ (80057fc <ESP_Upkeep+0x3ec>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d02a      	beq.n	80056d4 <ESP_Upkeep+0x2c4>
 800567e:	4b61      	ldr	r3, [pc, #388]	@ (8005804 <ESP_Upkeep+0x3f4>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d026      	beq.n	80056d4 <ESP_Upkeep+0x2c4>
 8005686:	4b61      	ldr	r3, [pc, #388]	@ (800580c <ESP_Upkeep+0x3fc>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2201      	movs	r2, #1
 800568c:	4053      	eors	r3, r2
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01f      	beq.n	80056d4 <ESP_Upkeep+0x2c4>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005694:	4b54      	ldr	r3, [pc, #336]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 8005696:	4a5e      	ldr	r2, [pc, #376]	@ (8005810 <ESP_Upkeep+0x400>)
 8005698:	8811      	ldrh	r1, [r2, #0]
 800569a:	8019      	strh	r1, [r3, #0]
 800569c:	7892      	ldrb	r2, [r2, #2]
 800569e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80056a0:	4b42      	ldr	r3, [pc, #264]	@ (80057ac <ESP_Upkeep+0x39c>)
 80056a2:	2204      	movs	r2, #4
 80056a4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80056a6:	4b54      	ldr	r3, [pc, #336]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 80056ac:	4b42      	ldr	r3, [pc, #264]	@ (80057b8 <ESP_Upkeep+0x3a8>)
 80056ae:	2202      	movs	r2, #2
 80056b0:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80056b2:	f008 ffed 	bl	800e690 <HAL_GetTick>
 80056b6:	0002      	movs	r2, r0
 80056b8:	4b56      	ldr	r3, [pc, #344]	@ (8005814 <ESP_Upkeep+0x404>)
 80056ba:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 80056bc:	f007 fc3c 	bl	800cf38 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 80056c0:	4b4d      	ldr	r3, [pc, #308]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	001a      	movs	r2, r3
 80056c6:	4b48      	ldr	r3, [pc, #288]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 80056c8:	5c9a      	ldrb	r2, [r3, r2]
 80056ca:	4b3a      	ldr	r3, [pc, #232]	@ (80057b4 <ESP_Upkeep+0x3a4>)
 80056cc:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80056ce:	4b3b      	ldr	r3, [pc, #236]	@ (80057bc <ESP_Upkeep+0x3ac>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80056d4:	4b50      	ldr	r3, [pc, #320]	@ (8005818 <ESP_Upkeep+0x408>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d022      	beq.n	8005722 <ESP_Upkeep+0x312>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80056dc:	4b42      	ldr	r3, [pc, #264]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 80056de:	4a4f      	ldr	r2, [pc, #316]	@ (800581c <ESP_Upkeep+0x40c>)
 80056e0:	6811      	ldr	r1, [r2, #0]
 80056e2:	6019      	str	r1, [r3, #0]
 80056e4:	7912      	ldrb	r2, [r2, #4]
 80056e6:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80056e8:	4a4d      	ldr	r2, [pc, #308]	@ (8005820 <ESP_Upkeep+0x410>)
 80056ea:	4b36      	ldr	r3, [pc, #216]	@ (80057c4 <ESP_Upkeep+0x3b4>)
 80056ec:	0019      	movs	r1, r3
 80056ee:	2003      	movs	r0, #3
 80056f0:	f008 fb78 	bl	800dde4 <CreateLine>
        DisableConnectedDevices();
 80056f4:	f002 ffbc 	bl	8008670 <DisableConnectedDevices>
        EspState = ESP_STATE_SEND;
 80056f8:	4b2c      	ldr	r3, [pc, #176]	@ (80057ac <ESP_Upkeep+0x39c>)
 80056fa:	2204      	movs	r2, #4
 80056fc:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80056fe:	4b3e      	ldr	r3, [pc, #248]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 8005700:	2200      	movs	r2, #0
 8005702:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8005704:	4b2c      	ldr	r3, [pc, #176]	@ (80057b8 <ESP_Upkeep+0x3a8>)
 8005706:	2203      	movs	r2, #3
 8005708:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 800570a:	f007 fc15 	bl	800cf38 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 800570e:	4b3a      	ldr	r3, [pc, #232]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	001a      	movs	r2, r3
 8005714:	4b34      	ldr	r3, [pc, #208]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 8005716:	5c9a      	ldrb	r2, [r3, r2]
 8005718:	4b26      	ldr	r3, [pc, #152]	@ (80057b4 <ESP_Upkeep+0x3a4>)
 800571a:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800571c:	4b27      	ldr	r3, [pc, #156]	@ (80057bc <ESP_Upkeep+0x3ac>)
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005722:	4b32      	ldr	r3, [pc, #200]	@ (80057ec <ESP_Upkeep+0x3dc>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d100      	bne.n	800572c <ESP_Upkeep+0x31c>
 800572a:	e2c0      	b.n	8005cae <ESP_Upkeep+0x89e>
 800572c:	4b33      	ldr	r3, [pc, #204]	@ (80057fc <ESP_Upkeep+0x3ec>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d100      	bne.n	8005736 <ESP_Upkeep+0x326>
 8005734:	e2bb      	b.n	8005cae <ESP_Upkeep+0x89e>
 8005736:	4b33      	ldr	r3, [pc, #204]	@ (8005804 <ESP_Upkeep+0x3f4>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d100      	bne.n	8005740 <ESP_Upkeep+0x330>
 800573e:	e2b6      	b.n	8005cae <ESP_Upkeep+0x89e>
 8005740:	4b32      	ldr	r3, [pc, #200]	@ (800580c <ESP_Upkeep+0x3fc>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d100      	bne.n	800574a <ESP_Upkeep+0x33a>
 8005748:	e2b1      	b.n	8005cae <ESP_Upkeep+0x89e>
        memcpy(ATCommandArray, AT_SNTP, 4);
 800574a:	4b36      	ldr	r3, [pc, #216]	@ (8005824 <ESP_Upkeep+0x414>)
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4b26      	ldr	r3, [pc, #152]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 8005750:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005752:	4b16      	ldr	r3, [pc, #88]	@ (80057ac <ESP_Upkeep+0x39c>)
 8005754:	2204      	movs	r2, #4
 8005756:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005758:	4b27      	ldr	r3, [pc, #156]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 800575a:	2200      	movs	r2, #0
 800575c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 800575e:	4b16      	ldr	r3, [pc, #88]	@ (80057b8 <ESP_Upkeep+0x3a8>)
 8005760:	2205      	movs	r2, #5
 8005762:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005764:	f008 ff94 	bl	800e690 <HAL_GetTick>
 8005768:	0002      	movs	r2, r0
 800576a:	4b2a      	ldr	r3, [pc, #168]	@ (8005814 <ESP_Upkeep+0x404>)
 800576c:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 800576e:	f007 fbe3 	bl	800cf38 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005772:	4b21      	ldr	r3, [pc, #132]	@ (80057f8 <ESP_Upkeep+0x3e8>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	001a      	movs	r2, r3
 8005778:	4b1b      	ldr	r3, [pc, #108]	@ (80057e8 <ESP_Upkeep+0x3d8>)
 800577a:	5c9a      	ldrb	r2, [r3, r2]
 800577c:	4b0d      	ldr	r3, [pc, #52]	@ (80057b4 <ESP_Upkeep+0x3a4>)
 800577e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005780:	4b0e      	ldr	r3, [pc, #56]	@ (80057bc <ESP_Upkeep+0x3ac>)
 8005782:	2200      	movs	r2, #0
 8005784:	701a      	strb	r2, [r3, #0]
      }
    break;
 8005786:	e292      	b.n	8005cae <ESP_Upkeep+0x89e>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8005788:	4b0a      	ldr	r3, [pc, #40]	@ (80057b4 <ESP_Upkeep+0x3a4>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	1dfc      	adds	r4, r7, #7
 800578e:	0018      	movs	r0, r3
 8005790:	f7ff fb60 	bl	8004e54 <AT_Send>
 8005794:	0003      	movs	r3, r0
 8005796:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005798:	1dfb      	adds	r3, r7, #7
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d100      	bne.n	80057a2 <ESP_Upkeep+0x392>
 80057a0:	e287      	b.n	8005cb2 <ESP_Upkeep+0x8a2>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 80057a2:	4b02      	ldr	r3, [pc, #8]	@ (80057ac <ESP_Upkeep+0x39c>)
 80057a4:	2203      	movs	r2, #3
 80057a6:	701a      	strb	r2, [r3, #0]
        }
    break;
 80057a8:	e283      	b.n	8005cb2 <ESP_Upkeep+0x8a2>
 80057aa:	46c0      	nop			@ (mov r8, r8)
 80057ac:	20000028 	.word	0x20000028
 80057b0:	20000002 	.word	0x20000002
 80057b4:	20000a2a 	.word	0x20000a2a
 80057b8:	20000a2b 	.word	0x20000a2b
 80057bc:	20000a29 	.word	0x20000a29
 80057c0:	080233e0 	.word	0x080233e0
 80057c4:	08022aa8 	.word	0x08022aa8
 80057c8:	08024a64 	.word	0x08024a64
 80057cc:	2000054c 	.word	0x2000054c
 80057d0:	50000800 	.word	0x50000800
 80057d4:	50001c00 	.word	0x50001c00
 80057d8:	20000a1c 	.word	0x20000a1c
 80057dc:	2000044c 	.word	0x2000044c
 80057e0:	20000b3c 	.word	0x20000b3c
 80057e4:	2000002a 	.word	0x2000002a
 80057e8:	20000a0c 	.word	0x20000a0c
 80057ec:	2000054d 	.word	0x2000054d
 80057f0:	2000054e 	.word	0x2000054e
 80057f4:	20000004 	.word	0x20000004
 80057f8:	20000a16 	.word	0x20000a16
 80057fc:	20000550 	.word	0x20000550
 8005800:	20000014 	.word	0x20000014
 8005804:	20000551 	.word	0x20000551
 8005808:	20000010 	.word	0x20000010
 800580c:	20000001 	.word	0x20000001
 8005810:	2000000c 	.word	0x2000000c
 8005814:	20000560 	.word	0x20000560
 8005818:	2000054f 	.word	0x2000054f
 800581c:	2000001c 	.word	0x2000001c
 8005820:	0802340c 	.word	0x0802340c
 8005824:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8005828:	4bde      	ldr	r3, [pc, #888]	@ (8005ba4 <ESP_Upkeep+0x794>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	0018      	movs	r0, r3
 800582e:	f008 fa83 	bl	800dd38 <TimestampIsReached>
 8005832:	1e03      	subs	r3, r0, #0
 8005834:	d100      	bne.n	8005838 <ESP_Upkeep+0x428>
 8005836:	e23e      	b.n	8005cb6 <ESP_Upkeep+0x8a6>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005838:	4bdb      	ldr	r3, [pc, #876]	@ (8005ba8 <ESP_Upkeep+0x798>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	0018      	movs	r0, r3
 800583e:	f7ff f9c7 	bl	8004bd0 <DMA_ProcessBuffer>
 8005842:	0003      	movs	r3, r0
 8005844:	001a      	movs	r2, r3
 8005846:	4bd9      	ldr	r3, [pc, #868]	@ (8005bac <ESP_Upkeep+0x79c>)
 8005848:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800584a:	4bd8      	ldr	r3, [pc, #864]	@ (8005bac <ESP_Upkeep+0x79c>)
 800584c:	781a      	ldrb	r2, [r3, #0]
 800584e:	4bd6      	ldr	r3, [pc, #856]	@ (8005ba8 <ESP_Upkeep+0x798>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	1d7c      	adds	r4, r7, #5
 8005854:	0019      	movs	r1, r3
 8005856:	0010      	movs	r0, r2
 8005858:	f7ff faba 	bl	8004dd0 <ATCompare>
 800585c:	0003      	movs	r3, r0
 800585e:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005860:	4bd2      	ldr	r3, [pc, #840]	@ (8005bac <ESP_Upkeep+0x79c>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d139      	bne.n	80058dc <ESP_Upkeep+0x4cc>
          if(ATCommand == AT_SENDDATA){
 8005868:	4bd1      	ldr	r3, [pc, #836]	@ (8005bb0 <ESP_Upkeep+0x7a0>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b0f      	cmp	r3, #15
 800586e:	d108      	bne.n	8005882 <ESP_Upkeep+0x472>
            ATCommand = AT_HTTPCPOST;
 8005870:	4bcf      	ldr	r3, [pc, #828]	@ (8005bb0 <ESP_Upkeep+0x7a0>)
 8005872:	220e      	movs	r2, #14
 8005874:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005876:	4bcc      	ldr	r3, [pc, #816]	@ (8005ba8 <ESP_Upkeep+0x798>)
 8005878:	2202      	movs	r2, #2
 800587a:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 800587c:	4bcd      	ldr	r3, [pc, #820]	@ (8005bb4 <ESP_Upkeep+0x7a4>)
 800587e:	2201      	movs	r2, #1
 8005880:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005882:	4bcd      	ldr	r3, [pc, #820]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 8005884:	2204      	movs	r2, #4
 8005886:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005888:	4bcc      	ldr	r3, [pc, #816]	@ (8005bbc <ESP_Upkeep+0x7ac>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	3301      	adds	r3, #1
 800588e:	b2da      	uxtb	r2, r3
 8005890:	4bca      	ldr	r3, [pc, #808]	@ (8005bbc <ESP_Upkeep+0x7ac>)
 8005892:	701a      	strb	r2, [r3, #0]
          if (errorcntr == ESP_MAX_RETRANSMITIONS) {
 8005894:	4bc9      	ldr	r3, [pc, #804]	@ (8005bbc <ESP_Upkeep+0x7ac>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b03      	cmp	r3, #3
 800589a:	d11f      	bne.n	80058dc <ESP_Upkeep+0x4cc>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 800589c:	f008 fef8 	bl	800e690 <HAL_GetTick>
 80058a0:	0003      	movs	r3, r0
 80058a2:	4ac7      	ldr	r2, [pc, #796]	@ (8005bc0 <ESP_Upkeep+0x7b0>)
 80058a4:	189a      	adds	r2, r3, r2
 80058a6:	4bbf      	ldr	r3, [pc, #764]	@ (8005ba4 <ESP_Upkeep+0x794>)
 80058a8:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80058aa:	4bc6      	ldr	r3, [pc, #792]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 80058ac:	2201      	movs	r2, #1
 80058ae:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 80058b0:	f007 fb5a 	bl	800cf68 <ResetESPIndicator>
            clearDMABuffer();
 80058b4:	f7ff fa7e 	bl	8004db4 <clearDMABuffer>
            stop = HAL_GetTick();
 80058b8:	f008 feea 	bl	800e690 <HAL_GetTick>
 80058bc:	0002      	movs	r2, r0
 80058be:	4bc2      	ldr	r3, [pc, #776]	@ (8005bc8 <ESP_Upkeep+0x7b8>)
 80058c0:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 80058c2:	4bc1      	ldr	r3, [pc, #772]	@ (8005bc8 <ESP_Upkeep+0x7b8>)
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	4bc1      	ldr	r3, [pc, #772]	@ (8005bcc <ESP_Upkeep+0x7bc>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	4ac0      	ldr	r2, [pc, #768]	@ (8005bd0 <ESP_Upkeep+0x7c0>)
 80058ce:	49c1      	ldr	r1, [pc, #772]	@ (8005bd4 <ESP_Upkeep+0x7c4>)
 80058d0:	2001      	movs	r0, #1
 80058d2:	f008 fa87 	bl	800dde4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80058d6:	4bb8      	ldr	r3, [pc, #736]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 80058d8:	220d      	movs	r2, #13
 80058da:	701a      	strb	r2, [r3, #0]
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80058dc:	4bb3      	ldr	r3, [pc, #716]	@ (8005bac <ESP_Upkeep+0x79c>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d106      	bne.n	80058f2 <ESP_Upkeep+0x4e2>
          ESPTimeStamp = HAL_GetTick() + 10;
 80058e4:	f008 fed4 	bl	800e690 <HAL_GetTick>
 80058e8:	0003      	movs	r3, r0
 80058ea:	330a      	adds	r3, #10
 80058ec:	001a      	movs	r2, r3
 80058ee:	4bad      	ldr	r3, [pc, #692]	@ (8005ba4 <ESP_Upkeep+0x794>)
 80058f0:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80058f2:	4bae      	ldr	r3, [pc, #696]	@ (8005bac <ESP_Upkeep+0x79c>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b0a      	cmp	r3, #10
 80058f8:	d106      	bne.n	8005908 <ESP_Upkeep+0x4f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 80058fa:	f008 fec9 	bl	800e690 <HAL_GetTick>
 80058fe:	0003      	movs	r3, r0
 8005900:	330a      	adds	r3, #10
 8005902:	001a      	movs	r2, r3
 8005904:	4ba7      	ldr	r3, [pc, #668]	@ (8005ba4 <ESP_Upkeep+0x794>)
 8005906:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8005908:	4ba8      	ldr	r3, [pc, #672]	@ (8005bac <ESP_Upkeep+0x79c>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b06      	cmp	r3, #6
 800590e:	d140      	bne.n	8005992 <ESP_Upkeep+0x582>
          timeoutcntr++;
 8005910:	4bb1      	ldr	r3, [pc, #708]	@ (8005bd8 <ESP_Upkeep+0x7c8>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	3301      	adds	r3, #1
 8005916:	b2da      	uxtb	r2, r3
 8005918:	4baf      	ldr	r3, [pc, #700]	@ (8005bd8 <ESP_Upkeep+0x7c8>)
 800591a:	701a      	strb	r2, [r3, #0]
          if (timeoutcntr == ESP_MAX_RETRANSMITIONS) {
 800591c:	4bae      	ldr	r3, [pc, #696]	@ (8005bd8 <ESP_Upkeep+0x7c8>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b03      	cmp	r3, #3
 8005922:	d11f      	bne.n	8005964 <ESP_Upkeep+0x554>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005924:	f008 feb4 	bl	800e690 <HAL_GetTick>
 8005928:	0003      	movs	r3, r0
 800592a:	4aa5      	ldr	r2, [pc, #660]	@ (8005bc0 <ESP_Upkeep+0x7b0>)
 800592c:	189a      	adds	r2, r3, r2
 800592e:	4b9d      	ldr	r3, [pc, #628]	@ (8005ba4 <ESP_Upkeep+0x794>)
 8005930:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005932:	4ba4      	ldr	r3, [pc, #656]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 8005934:	2201      	movs	r2, #1
 8005936:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 8005938:	f007 fb16 	bl	800cf68 <ResetESPIndicator>
            clearDMABuffer();
 800593c:	f7ff fa3a 	bl	8004db4 <clearDMABuffer>
            stop = HAL_GetTick();
 8005940:	f008 fea6 	bl	800e690 <HAL_GetTick>
 8005944:	0002      	movs	r2, r0
 8005946:	4ba0      	ldr	r3, [pc, #640]	@ (8005bc8 <ESP_Upkeep+0x7b8>)
 8005948:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 800594a:	4b9f      	ldr	r3, [pc, #636]	@ (8005bc8 <ESP_Upkeep+0x7b8>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4b9f      	ldr	r3, [pc, #636]	@ (8005bcc <ESP_Upkeep+0x7bc>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	4aa1      	ldr	r2, [pc, #644]	@ (8005bdc <ESP_Upkeep+0x7cc>)
 8005956:	499f      	ldr	r1, [pc, #636]	@ (8005bd4 <ESP_Upkeep+0x7c4>)
 8005958:	2001      	movs	r0, #1
 800595a:	f008 fa43 	bl	800dde4 <CreateLine>
            // TODO hier gaat iets fout, de verzending herstart niet meer
            // in log alleen nog D [01039053] EspState: 4 ATcmd: 20 Mode: 2 ATExp: 0
            EspState = ESP_STATE_DEINIT;
 800595e:	4b96      	ldr	r3, [pc, #600]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 8005960:	220d      	movs	r2, #13
 8005962:	701a      	strb	r2, [r3, #0]
            // mogelijke oplossing door deze twee regels te verwijderen
            // ATCommand = AT_END;
            // ATExpectation = RECEIVE_EXPECTATION_OK;
          }
          if(ATCommand != AT_SENDDATA){
 8005964:	4b92      	ldr	r3, [pc, #584]	@ (8005bb0 <ESP_Upkeep+0x7a0>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b0f      	cmp	r3, #15
 800596a:	d003      	beq.n	8005974 <ESP_Upkeep+0x564>
            EspState = ESP_STATE_SEND;
 800596c:	4b92      	ldr	r3, [pc, #584]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 800596e:	2204      	movs	r2, #4
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	e00e      	b.n	8005992 <ESP_Upkeep+0x582>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005974:	4b8e      	ldr	r3, [pc, #568]	@ (8005bb0 <ESP_Upkeep+0x7a0>)
 8005976:	220e      	movs	r2, #14
 8005978:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 800597a:	4b8e      	ldr	r3, [pc, #568]	@ (8005bb4 <ESP_Upkeep+0x7a4>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	3b01      	subs	r3, #1
 8005980:	b2da      	uxtb	r2, r3
 8005982:	4b8c      	ldr	r3, [pc, #560]	@ (8005bb4 <ESP_Upkeep+0x7a4>)
 8005984:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005986:	4b88      	ldr	r3, [pc, #544]	@ (8005ba8 <ESP_Upkeep+0x798>)
 8005988:	2202      	movs	r2, #2
 800598a:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 800598c:	4b8a      	ldr	r3, [pc, #552]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 800598e:	2204      	movs	r2, #4
 8005990:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005992:	1d7b      	adds	r3, r7, #5
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d100      	bne.n	800599c <ESP_Upkeep+0x58c>
 800599a:	e18c      	b.n	8005cb6 <ESP_Upkeep+0x8a6>
          EspState = ESP_STATE_NEXT_AT;
 800599c:	4b86      	ldr	r3, [pc, #536]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 800599e:	2205      	movs	r2, #5
 80059a0:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80059a2:	e188      	b.n	8005cb6 <ESP_Upkeep+0x8a6>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 80059a4:	4b83      	ldr	r3, [pc, #524]	@ (8005bb4 <ESP_Upkeep+0x7a4>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	3301      	adds	r3, #1
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	4b81      	ldr	r3, [pc, #516]	@ (8005bb4 <ESP_Upkeep+0x7a4>)
 80059ae:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 80059b0:	4b80      	ldr	r3, [pc, #512]	@ (8005bb4 <ESP_Upkeep+0x7a4>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	001a      	movs	r2, r3
 80059b6:	4b8a      	ldr	r3, [pc, #552]	@ (8005be0 <ESP_Upkeep+0x7d0>)
 80059b8:	5c9a      	ldrb	r2, [r3, r2]
 80059ba:	4b7d      	ldr	r3, [pc, #500]	@ (8005bb0 <ESP_Upkeep+0x7a0>)
 80059bc:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 80059be:	4b7c      	ldr	r3, [pc, #496]	@ (8005bb0 <ESP_Upkeep+0x7a0>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	d102      	bne.n	80059cc <ESP_Upkeep+0x5bc>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 80059c6:	4b78      	ldr	r3, [pc, #480]	@ (8005ba8 <ESP_Upkeep+0x798>)
 80059c8:	2201      	movs	r2, #1
 80059ca:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 80059cc:	4b78      	ldr	r3, [pc, #480]	@ (8005bb0 <ESP_Upkeep+0x7a0>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b0e      	cmp	r3, #14
 80059d2:	d102      	bne.n	80059da <ESP_Upkeep+0x5ca>
        ATExpectation = RECEIVE_EXPECTATION_START;
 80059d4:	4b74      	ldr	r3, [pc, #464]	@ (8005ba8 <ESP_Upkeep+0x798>)
 80059d6:	2202      	movs	r2, #2
 80059d8:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 80059da:	4b75      	ldr	r3, [pc, #468]	@ (8005bb0 <ESP_Upkeep+0x7a0>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b0e      	cmp	r3, #14
 80059e0:	d006      	beq.n	80059f0 <ESP_Upkeep+0x5e0>
 80059e2:	4b73      	ldr	r3, [pc, #460]	@ (8005bb0 <ESP_Upkeep+0x7a0>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d002      	beq.n	80059f0 <ESP_Upkeep+0x5e0>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80059ea:	4b6f      	ldr	r3, [pc, #444]	@ (8005ba8 <ESP_Upkeep+0x798>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 80059f0:	4b6f      	ldr	r3, [pc, #444]	@ (8005bb0 <ESP_Upkeep+0x7a0>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b11      	cmp	r3, #17
 80059f6:	d102      	bne.n	80059fe <ESP_Upkeep+0x5ee>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 80059f8:	4b6b      	ldr	r3, [pc, #428]	@ (8005ba8 <ESP_Upkeep+0x798>)
 80059fa:	2205      	movs	r2, #5
 80059fc:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 80059fe:	4b6e      	ldr	r3, [pc, #440]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 8005a00:	2204      	movs	r2, #4
 8005a02:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005a04:	4b6a      	ldr	r3, [pc, #424]	@ (8005bb0 <ESP_Upkeep+0x7a0>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b14      	cmp	r3, #20
 8005a0a:	d000      	beq.n	8005a0e <ESP_Upkeep+0x5fe>
 8005a0c:	e155      	b.n	8005cba <ESP_Upkeep+0x8aa>
        if(Mode == AT_MODE_SEND){
 8005a0e:	4b75      	ldr	r3, [pc, #468]	@ (8005be4 <ESP_Upkeep+0x7d4>)
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d124      	bne.n	8005a60 <ESP_Upkeep+0x650>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005a16:	f008 fe3b 	bl	800e690 <HAL_GetTick>
 8005a1a:	0003      	movs	r3, r0
 8005a1c:	4a68      	ldr	r2, [pc, #416]	@ (8005bc0 <ESP_Upkeep+0x7b0>)
 8005a1e:	189a      	adds	r2, r3, r2
 8005a20:	4b60      	ldr	r3, [pc, #384]	@ (8005ba4 <ESP_Upkeep+0x794>)
 8005a22:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 8005a24:	f007 faa0 	bl	800cf68 <ResetESPIndicator>
          clearDMABuffer();
 8005a28:	f7ff f9c4 	bl	8004db4 <clearDMABuffer>
          stop = HAL_GetTick();
 8005a2c:	f008 fe30 	bl	800e690 <HAL_GetTick>
 8005a30:	0002      	movs	r2, r0
 8005a32:	4b65      	ldr	r3, [pc, #404]	@ (8005bc8 <ESP_Upkeep+0x7b8>)
 8005a34:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005a36:	4b64      	ldr	r3, [pc, #400]	@ (8005bc8 <ESP_Upkeep+0x7b8>)
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	4b64      	ldr	r3, [pc, #400]	@ (8005bcc <ESP_Upkeep+0x7bc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	4a69      	ldr	r2, [pc, #420]	@ (8005be8 <ESP_Upkeep+0x7d8>)
 8005a42:	496a      	ldr	r1, [pc, #424]	@ (8005bec <ESP_Upkeep+0x7dc>)
 8005a44:	2002      	movs	r0, #2
 8005a46:	f008 f9cd 	bl	800dde4 <CreateLine>
          ResetdBAmax();
 8005a4a:	f002 fe25 	bl	8008698 <ResetdBAmax>
          showTime();
 8005a4e:	f000 fccd 	bl	80063ec <showTime>
          ESPTransmitDone = true;
 8005a52:	4b5c      	ldr	r3, [pc, #368]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 8005a54:	2201      	movs	r2, #1
 8005a56:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005a58:	4b57      	ldr	r3, [pc, #348]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 8005a5a:	220d      	movs	r2, #13
 8005a5c:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005a5e:	e12c      	b.n	8005cba <ESP_Upkeep+0x8aa>
        else if (Mode == AT_MODE_GETTIME) {
 8005a60:	4b60      	ldr	r3, [pc, #384]	@ (8005be4 <ESP_Upkeep+0x7d4>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2b05      	cmp	r3, #5
 8005a66:	d12e      	bne.n	8005ac6 <ESP_Upkeep+0x6b6>
            setTime = false;
 8005a68:	4b61      	ldr	r3, [pc, #388]	@ (8005bf0 <ESP_Upkeep+0x7e0>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005a6e:	f008 fe0f 	bl	800e690 <HAL_GetTick>
 8005a72:	0003      	movs	r3, r0
 8005a74:	4a5f      	ldr	r2, [pc, #380]	@ (8005bf4 <ESP_Upkeep+0x7e4>)
 8005a76:	189a      	adds	r2, r3, r2
 8005a78:	4b5f      	ldr	r3, [pc, #380]	@ (8005bf8 <ESP_Upkeep+0x7e8>)
 8005a7a:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005a7c:	4b5e      	ldr	r3, [pc, #376]	@ (8005bf8 <ESP_Upkeep+0x7e8>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a5e      	ldr	r2, [pc, #376]	@ (8005bfc <ESP_Upkeep+0x7ec>)
 8005a82:	495a      	ldr	r1, [pc, #360]	@ (8005bec <ESP_Upkeep+0x7dc>)
 8005a84:	2002      	movs	r0, #2
 8005a86:	f008 f9ad 	bl	800dde4 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005a8a:	4b5d      	ldr	r3, [pc, #372]	@ (8005c00 <ESP_Upkeep+0x7f0>)
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	4b45      	ldr	r3, [pc, #276]	@ (8005ba4 <ESP_Upkeep+0x794>)
 8005a90:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 8005a92:	f007 fa69 	bl	800cf68 <ResetESPIndicator>
            clearDMABuffer();
 8005a96:	f7ff f98d 	bl	8004db4 <clearDMABuffer>
            stop = HAL_GetTick();
 8005a9a:	f008 fdf9 	bl	800e690 <HAL_GetTick>
 8005a9e:	0002      	movs	r2, r0
 8005aa0:	4b49      	ldr	r3, [pc, #292]	@ (8005bc8 <ESP_Upkeep+0x7b8>)
 8005aa2:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005aa4:	4b48      	ldr	r3, [pc, #288]	@ (8005bc8 <ESP_Upkeep+0x7b8>)
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	4b48      	ldr	r3, [pc, #288]	@ (8005bcc <ESP_Upkeep+0x7bc>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	4a55      	ldr	r2, [pc, #340]	@ (8005c04 <ESP_Upkeep+0x7f4>)
 8005ab0:	494e      	ldr	r1, [pc, #312]	@ (8005bec <ESP_Upkeep+0x7dc>)
 8005ab2:	2002      	movs	r0, #2
 8005ab4:	f008 f996 	bl	800dde4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005ab8:	4b3f      	ldr	r3, [pc, #252]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 8005aba:	220d      	movs	r2, #13
 8005abc:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005abe:	4b49      	ldr	r3, [pc, #292]	@ (8005be4 <ESP_Upkeep+0x7d4>)
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	701a      	strb	r2, [r3, #0]
    break;
 8005ac4:	e0f9      	b.n	8005cba <ESP_Upkeep+0x8aa>
          EspState = ESP_STATE_RESET;
 8005ac6:	4b3c      	ldr	r3, [pc, #240]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 8005ac8:	2209      	movs	r2, #9
 8005aca:	701a      	strb	r2, [r3, #0]
    break;
 8005acc:	e0f5      	b.n	8005cba <ESP_Upkeep+0x8aa>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 8005ace:	4b4e      	ldr	r3, [pc, #312]	@ (8005c08 <ESP_Upkeep+0x7f8>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005ad4:	4b4d      	ldr	r3, [pc, #308]	@ (8005c0c <ESP_Upkeep+0x7fc>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2101      	movs	r1, #1
 8005ada:	0018      	movs	r0, r3
 8005adc:	f00a f869 	bl	800fbb2 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005ae0:	2001      	movs	r0, #1
 8005ae2:	f008 fddf 	bl	800e6a4 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005ae6:	2380      	movs	r3, #128	@ 0x80
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	4849      	ldr	r0, [pc, #292]	@ (8005c10 <ESP_Upkeep+0x800>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	0019      	movs	r1, r3
 8005af0:	f00a f85f 	bl	800fbb2 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005af4:	2001      	movs	r0, #1
 8005af6:	f008 fdd5 	bl	800e6a4 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005afa:	4b44      	ldr	r3, [pc, #272]	@ (8005c0c <ESP_Upkeep+0x7fc>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	2102      	movs	r1, #2
 8005b00:	0018      	movs	r0, r3
 8005b02:	f00a f856 	bl	800fbb2 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005b06:	4b2c      	ldr	r3, [pc, #176]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 8005b08:	2209      	movs	r2, #9
 8005b0a:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8005b0c:	2001      	movs	r0, #1
 8005b0e:	f008 fdc9 	bl	800e6a4 <HAL_Delay>
      errorcntr = 0;
 8005b12:	4b2a      	ldr	r3, [pc, #168]	@ (8005bbc <ESP_Upkeep+0x7ac>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	701a      	strb	r2, [r3, #0]
      break;
 8005b18:	e0d2      	b.n	8005cc0 <ESP_Upkeep+0x8b0>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005b1a:	4b22      	ldr	r3, [pc, #136]	@ (8005ba4 <ESP_Upkeep+0x794>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	0018      	movs	r0, r3
 8005b20:	f008 f90a 	bl	800dd38 <TimestampIsReached>
 8005b24:	1e03      	subs	r3, r0, #0
 8005b26:	d104      	bne.n	8005b32 <ESP_Upkeep+0x722>
 8005b28:	4b3a      	ldr	r3, [pc, #232]	@ (8005c14 <ESP_Upkeep+0x804>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d100      	bne.n	8005b32 <ESP_Upkeep+0x722>
 8005b30:	e07c      	b.n	8005c2c <ESP_Upkeep+0x81c>
        ESPTransmitDone = false;
 8005b32:	4b24      	ldr	r3, [pc, #144]	@ (8005bc4 <ESP_Upkeep+0x7b4>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005b38:	4b2a      	ldr	r3, [pc, #168]	@ (8005be4 <ESP_Upkeep+0x7d4>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d105      	bne.n	8005b4c <ESP_Upkeep+0x73c>
          InitIsDone = true;
 8005b40:	4b35      	ldr	r3, [pc, #212]	@ (8005c18 <ESP_Upkeep+0x808>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005b46:	4b1c      	ldr	r3, [pc, #112]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 8005b48:	220b      	movs	r2, #11
 8005b4a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005b4c:	4b25      	ldr	r3, [pc, #148]	@ (8005be4 <ESP_Upkeep+0x7d4>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d108      	bne.n	8005b66 <ESP_Upkeep+0x756>
          ConnectionMade = true;
 8005b54:	4b31      	ldr	r3, [pc, #196]	@ (8005c1c <ESP_Upkeep+0x80c>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005b5a:	4b31      	ldr	r3, [pc, #196]	@ (8005c20 <ESP_Upkeep+0x810>)
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005b60:	4b15      	ldr	r3, [pc, #84]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 8005b62:	220b      	movs	r2, #11
 8005b64:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005b66:	4b1f      	ldr	r3, [pc, #124]	@ (8005be4 <ESP_Upkeep+0x7d4>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d102      	bne.n	8005b74 <ESP_Upkeep+0x764>
          EspState = ESP_STATE_INIT;
 8005b6e:	4b12      	ldr	r3, [pc, #72]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 8005b70:	2202      	movs	r2, #2
 8005b72:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005b74:	4b1b      	ldr	r3, [pc, #108]	@ (8005be4 <ESP_Upkeep+0x7d4>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d108      	bne.n	8005b8e <ESP_Upkeep+0x77e>
          EspState = ESP_STATE_CONFIG;
 8005b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 8005b7e:	220e      	movs	r2, #14
 8005b80:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005b82:	4a28      	ldr	r2, [pc, #160]	@ (8005c24 <ESP_Upkeep+0x814>)
 8005b84:	4b19      	ldr	r3, [pc, #100]	@ (8005bec <ESP_Upkeep+0x7dc>)
 8005b86:	0019      	movs	r1, r3
 8005b88:	2002      	movs	r0, #2
 8005b8a:	f008 f92b 	bl	800dde4 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005b8e:	4b15      	ldr	r3, [pc, #84]	@ (8005be4 <ESP_Upkeep+0x7d4>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d163      	bne.n	8005c5e <ESP_Upkeep+0x84e>
          EspState = ESP_STATE_MODE_SELECT;
 8005b96:	4b08      	ldr	r3, [pc, #32]	@ (8005bb8 <ESP_Upkeep+0x7a8>)
 8005b98:	220b      	movs	r2, #11
 8005b9a:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005b9c:	4b22      	ldr	r3, [pc, #136]	@ (8005c28 <ESP_Upkeep+0x818>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 8005ba2:	e05c      	b.n	8005c5e <ESP_Upkeep+0x84e>
 8005ba4:	20000a1c 	.word	0x20000a1c
 8005ba8:	20000a29 	.word	0x20000a29
 8005bac:	2000002a 	.word	0x2000002a
 8005bb0:	20000a2a 	.word	0x20000a2a
 8005bb4:	20000a16 	.word	0x20000a16
 8005bb8:	20000028 	.word	0x20000028
 8005bbc:	20000a17 	.word	0x20000a17
 8005bc0:	0003a980 	.word	0x0003a980
 8005bc4:	20000553 	.word	0x20000553
 8005bc8:	20000564 	.word	0x20000564
 8005bcc:	20000560 	.word	0x20000560
 8005bd0:	0802343c 	.word	0x0802343c
 8005bd4:	08022acc 	.word	0x08022acc
 8005bd8:	20000a18 	.word	0x20000a18
 8005bdc:	08023470 	.word	0x08023470
 8005be0:	20000a0c 	.word	0x20000a0c
 8005be4:	20000a2b 	.word	0x20000a2b
 8005be8:	080234a0 	.word	0x080234a0
 8005bec:	080234b8 	.word	0x080234b8
 8005bf0:	20000001 	.word	0x20000001
 8005bf4:	001096de 	.word	0x001096de
 8005bf8:	20000a20 	.word	0x20000a20
 8005bfc:	080234bc 	.word	0x080234bc
 8005c00:	20000a24 	.word	0x20000a24
 8005c04:	08023500 	.word	0x08023500
 8005c08:	2000054c 	.word	0x2000054c
 8005c0c:	50001c00 	.word	0x50001c00
 8005c10:	50000800 	.word	0x50000800
 8005c14:	2000054f 	.word	0x2000054f
 8005c18:	2000054d 	.word	0x2000054d
 8005c1c:	20000550 	.word	0x20000550
 8005c20:	20000552 	.word	0x20000552
 8005c24:	08023520 	.word	0x08023520
 8005c28:	20000551 	.word	0x20000551
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005c2c:	4b27      	ldr	r3, [pc, #156]	@ (8005ccc <ESP_Upkeep+0x8bc>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	0018      	movs	r0, r3
 8005c32:	f008 f881 	bl	800dd38 <TimestampIsReached>
 8005c36:	1e03      	subs	r3, r0, #0
 8005c38:	d041      	beq.n	8005cbe <ESP_Upkeep+0x8ae>
        if(Mode == AT_MODE_SEND ) {
 8005c3a:	4b25      	ldr	r3, [pc, #148]	@ (8005cd0 <ESP_Upkeep+0x8c0>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d13d      	bne.n	8005cbe <ESP_Upkeep+0x8ae>
            Mode = AT_MODE_GETTIME;
 8005c42:	4b23      	ldr	r3, [pc, #140]	@ (8005cd0 <ESP_Upkeep+0x8c0>)
 8005c44:	2205      	movs	r2, #5
 8005c46:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005c48:	4b22      	ldr	r3, [pc, #136]	@ (8005cd4 <ESP_Upkeep+0x8c4>)
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 8005c4e:	4b22      	ldr	r3, [pc, #136]	@ (8005cd8 <ESP_Upkeep+0x8c8>)
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	4b22      	ldr	r3, [pc, #136]	@ (8005cdc <ESP_Upkeep+0x8cc>)
 8005c54:	601a      	str	r2, [r3, #0]
         setTime = true;
 8005c56:	4b22      	ldr	r3, [pc, #136]	@ (8005ce0 <ESP_Upkeep+0x8d0>)
 8005c58:	2201      	movs	r2, #1
 8005c5a:	701a      	strb	r2, [r3, #0]
 //        Debug("setTime to true");
        }
      }
      break;
 8005c5c:	e02f      	b.n	8005cbe <ESP_Upkeep+0x8ae>
 8005c5e:	e02e      	b.n	8005cbe <ESP_Upkeep+0x8ae>

    case ESP_STATE_CONFIG:
      Info("Do nothing until reset");
 8005c60:	4a20      	ldr	r2, [pc, #128]	@ (8005ce4 <ESP_Upkeep+0x8d4>)
 8005c62:	4b21      	ldr	r3, [pc, #132]	@ (8005ce8 <ESP_Upkeep+0x8d8>)
 8005c64:	0019      	movs	r1, r3
 8005c66:	2002      	movs	r0, #2
 8005c68:	f008 f8bc 	bl	800dde4 <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 8005c6c:	f016 fd50 	bl	801c710 <GetUsbRxPointer>
 8005c70:	0003      	movs	r3, r0
 8005c72:	0018      	movs	r0, r3
 8005c74:	f000 f8b2 	bl	8005ddc <Process_PC_Config>
      break;
 8005c78:	e022      	b.n	8005cc0 <ESP_Upkeep+0x8b0>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8005c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8005cec <ESP_Upkeep+0x8dc>)
 8005c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8005cf0 <ESP_Upkeep+0x8e0>)
 8005c7e:	0019      	movs	r1, r3
 8005c80:	2001      	movs	r0, #1
 8005c82:	f008 f8af 	bl	800dde4 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005c86:	4b13      	ldr	r3, [pc, #76]	@ (8005cd4 <ESP_Upkeep+0x8c4>)
 8005c88:	2202      	movs	r2, #2
 8005c8a:	701a      	strb	r2, [r3, #0]
      break;
 8005c8c:	e018      	b.n	8005cc0 <ESP_Upkeep+0x8b0>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8005c8e:	4a19      	ldr	r2, [pc, #100]	@ (8005cf4 <ESP_Upkeep+0x8e4>)
 8005c90:	4b17      	ldr	r3, [pc, #92]	@ (8005cf0 <ESP_Upkeep+0x8e0>)
 8005c92:	0019      	movs	r1, r3
 8005c94:	2001      	movs	r0, #1
 8005c96:	f008 f8a5 	bl	800dde4 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005cd4 <ESP_Upkeep+0x8c4>)
 8005c9c:	2207      	movs	r2, #7
 8005c9e:	701a      	strb	r2, [r3, #0]
      break;
 8005ca0:	e00e      	b.n	8005cc0 <ESP_Upkeep+0x8b0>
      break;
 8005ca2:	46c0      	nop			@ (mov r8, r8)
 8005ca4:	e00c      	b.n	8005cc0 <ESP_Upkeep+0x8b0>
      break;
 8005ca6:	46c0      	nop			@ (mov r8, r8)
 8005ca8:	e00a      	b.n	8005cc0 <ESP_Upkeep+0x8b0>
        break;
 8005caa:	46c0      	nop			@ (mov r8, r8)
 8005cac:	e008      	b.n	8005cc0 <ESP_Upkeep+0x8b0>
    break;
 8005cae:	46c0      	nop			@ (mov r8, r8)
 8005cb0:	e006      	b.n	8005cc0 <ESP_Upkeep+0x8b0>
    break;
 8005cb2:	46c0      	nop			@ (mov r8, r8)
 8005cb4:	e004      	b.n	8005cc0 <ESP_Upkeep+0x8b0>
      break;
 8005cb6:	46c0      	nop			@ (mov r8, r8)
 8005cb8:	e002      	b.n	8005cc0 <ESP_Upkeep+0x8b0>
    break;
 8005cba:	46c0      	nop			@ (mov r8, r8)
 8005cbc:	e000      	b.n	8005cc0 <ESP_Upkeep+0x8b0>
      break;
 8005cbe:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005cc0:	4b04      	ldr	r3, [pc, #16]	@ (8005cd4 <ESP_Upkeep+0x8c4>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
}
 8005cc4:	0018      	movs	r0, r3
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	b002      	add	sp, #8
 8005cca:	bdb0      	pop	{r4, r5, r7, pc}
 8005ccc:	20000a20 	.word	0x20000a20
 8005cd0:	20000a2b 	.word	0x20000a2b
 8005cd4:	20000028 	.word	0x20000028
 8005cd8:	20000a1c 	.word	0x20000a1c
 8005cdc:	20000a24 	.word	0x20000a24
 8005ce0:	20000001 	.word	0x20000001
 8005ce4:	08023520 	.word	0x08023520
 8005ce8:	080234b8 	.word	0x080234b8
 8005cec:	08023538 	.word	0x08023538
 8005cf0:	08022acc 	.word	0x08022acc
 8005cf4:	0802354c 	.word	0x0802354c

08005cf8 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005d00:	4b09      	ldr	r3, [pc, #36]	@ (8005d28 <I2CSensors_Init+0x30>)
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 8005d06:	4a09      	ldr	r2, [pc, #36]	@ (8005d2c <I2CSensors_Init+0x34>)
 8005d08:	4b09      	ldr	r3, [pc, #36]	@ (8005d30 <I2CSensors_Init+0x38>)
 8005d0a:	0011      	movs	r1, r2
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	f008 f9cd 	bl	800e0ac <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 8005d12:	4a06      	ldr	r2, [pc, #24]	@ (8005d2c <I2CSensors_Init+0x34>)
 8005d14:	4b06      	ldr	r3, [pc, #24]	@ (8005d30 <I2CSensors_Init+0x38>)
 8005d16:	0011      	movs	r1, r2
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f005 faa5 	bl	800b268 <SGP_Init>
}
 8005d1e:	46c0      	nop			@ (mov r8, r8)
 8005d20:	46bd      	mov	sp, r7
 8005d22:	b002      	add	sp, #8
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	46c0      	nop			@ (mov r8, r8)
 8005d28:	20000b40 	.word	0x20000b40
 8005d2c:	08005d89 	.word	0x08005d89
 8005d30:	08005d35 	.word	0x08005d35

08005d34 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005d34:	b5b0      	push	{r4, r5, r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6039      	str	r1, [r7, #0]
 8005d3c:	0011      	movs	r1, r2
 8005d3e:	1dfb      	adds	r3, r7, #7
 8005d40:	1c02      	adds	r2, r0, #0
 8005d42:	701a      	strb	r2, [r3, #0]
 8005d44:	1dbb      	adds	r3, r7, #6
 8005d46:	1c0a      	adds	r2, r1, #0
 8005d48:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8005d84 <ReadI2C+0x50>)
 8005d4c:	6818      	ldr	r0, [r3, #0]
 8005d4e:	1dfb      	adds	r3, r7, #7
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	18db      	adds	r3, r3, r3
 8005d56:	b299      	uxth	r1, r3
 8005d58:	1dbb      	adds	r3, r7, #6
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	250f      	movs	r5, #15
 8005d60:	197c      	adds	r4, r7, r5
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	f00a fb0a 	bl	801037c <HAL_I2C_Master_Receive_DMA>
 8005d68:	0003      	movs	r3, r0
 8005d6a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005d6c:	197b      	adds	r3, r7, r5
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <ReadI2C+0x44>
        return false;
 8005d74:	2300      	movs	r3, #0
 8005d76:	e000      	b.n	8005d7a <ReadI2C+0x46>
    }
    return true;
 8005d78:	2301      	movs	r3, #1
}
 8005d7a:	0018      	movs	r0, r3
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	b004      	add	sp, #16
 8005d80:	bdb0      	pop	{r4, r5, r7, pc}
 8005d82:	46c0      	nop			@ (mov r8, r8)
 8005d84:	20000b40 	.word	0x20000b40

08005d88 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005d88:	b5b0      	push	{r4, r5, r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6039      	str	r1, [r7, #0]
 8005d90:	0011      	movs	r1, r2
 8005d92:	1dfb      	adds	r3, r7, #7
 8005d94:	1c02      	adds	r2, r0, #0
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	1dbb      	adds	r3, r7, #6
 8005d9a:	1c0a      	adds	r2, r1, #0
 8005d9c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd8 <WriteI2C+0x50>)
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	1dfb      	adds	r3, r7, #7
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	18db      	adds	r3, r3, r3
 8005daa:	b299      	uxth	r1, r3
 8005dac:	1dbb      	adds	r3, r7, #6
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	250f      	movs	r5, #15
 8005db4:	197c      	adds	r4, r7, r5
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	f00a f9da 	bl	8010170 <HAL_I2C_Master_Transmit_DMA>
 8005dbc:	0003      	movs	r3, r0
 8005dbe:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005dc0:	197b      	adds	r3, r7, r5
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <WriteI2C+0x44>
        return false;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e000      	b.n	8005dce <WriteI2C+0x46>
    }
    return true;
 8005dcc:	2301      	movs	r3, #1
}
 8005dce:	0018      	movs	r0, r3
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	b004      	add	sp, #16
 8005dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8005dd6:	46c0      	nop			@ (mov r8, r8)
 8005dd8:	20000b40 	.word	0x20000b40

08005ddc <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005ddc:	b590      	push	{r4, r7, lr}
 8005dde:	b0c3      	sub	sp, #268	@ 0x10c
 8005de0:	af3e      	add	r7, sp, #248	@ 0xf8
 8005de2:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005de4:	f016 fcb4 	bl	801c750 <GetUsbRxDataSize>
 8005de8:	0003      	movs	r3, r0
 8005dea:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b05      	cmp	r3, #5
 8005df0:	d971      	bls.n	8005ed6 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2123      	movs	r1, #35	@ 0x23
 8005df6:	0018      	movs	r0, r3
 8005df8:	f019 feaa 	bl	801fb50 <strchr>
 8005dfc:	0003      	movs	r3, r0
 8005dfe:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d065      	beq.n	8005ed2 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	785a      	ldrb	r2, [r3, #1]
 8005e0a:	4b34      	ldr	r3, [pc, #208]	@ (8005edc <Process_PC_Config+0x100>)
 8005e0c:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	789a      	ldrb	r2, [r3, #2]
 8005e12:	4b32      	ldr	r3, [pc, #200]	@ (8005edc <Process_PC_Config+0x100>)
 8005e14:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005e16:	4b31      	ldr	r3, [pc, #196]	@ (8005edc <Process_PC_Config+0x100>)
 8005e18:	785b      	ldrb	r3, [r3, #1]
 8005e1a:	3305      	adds	r3, #5
 8005e1c:	001a      	movs	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d351      	bcc.n	8005ec8 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	1cd9      	adds	r1, r3, #3
 8005e28:	4b2c      	ldr	r3, [pc, #176]	@ (8005edc <Process_PC_Config+0x100>)
 8005e2a:	785b      	ldrb	r3, [r3, #1]
 8005e2c:	001a      	movs	r2, r3
 8005e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8005ee0 <Process_PC_Config+0x104>)
 8005e30:	0018      	movs	r0, r3
 8005e32:	f019 ff61 	bl	801fcf8 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005e36:	4b29      	ldr	r3, [pc, #164]	@ (8005edc <Process_PC_Config+0x100>)
 8005e38:	785b      	ldrb	r3, [r3, #1]
 8005e3a:	3303      	adds	r3, #3
 8005e3c:	001a      	movs	r2, r3
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	189b      	adds	r3, r3, r2
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	b21a      	sxth	r2, r3
 8005e48:	4b24      	ldr	r3, [pc, #144]	@ (8005edc <Process_PC_Config+0x100>)
 8005e4a:	785b      	ldrb	r3, [r3, #1]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	68b9      	ldr	r1, [r7, #8]
 8005e50:	18cb      	adds	r3, r1, r3
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	b21b      	sxth	r3, r3
 8005e56:	4313      	orrs	r3, r2
 8005e58:	b21b      	sxth	r3, r3
 8005e5a:	b299      	uxth	r1, r3
 8005e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8005edc <Process_PC_Config+0x100>)
 8005e5e:	2381      	movs	r3, #129	@ 0x81
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005e64:	4a1d      	ldr	r2, [pc, #116]	@ (8005edc <Process_PC_Config+0x100>)
 8005e66:	2381      	movs	r3, #129	@ 0x81
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	5ad4      	ldrh	r4, [r2, r3]
 8005e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005edc <Process_PC_Config+0x100>)
 8005e6e:	785b      	ldrb	r3, [r3, #1]
 8005e70:	3303      	adds	r3, #3
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	0011      	movs	r1, r2
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f000 f975 	bl	8006168 <CRC16_ARC>
 8005e7e:	0003      	movs	r3, r0
 8005e80:	429c      	cmp	r4, r3
 8005e82:	d007      	beq.n	8005e94 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005e84:	4b15      	ldr	r3, [pc, #84]	@ (8005edc <Process_PC_Config+0x100>)
 8005e86:	785a      	ldrb	r2, [r3, #1]
 8005e88:	4b15      	ldr	r3, [pc, #84]	@ (8005ee0 <Process_PC_Config+0x104>)
 8005e8a:	0019      	movs	r1, r3
 8005e8c:	2001      	movs	r0, #1
 8005e8e:	f000 f919 	bl	80060c4 <Create_Message>
 8005e92:	e016      	b.n	8005ec2 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005e94:	4c11      	ldr	r4, [pc, #68]	@ (8005edc <Process_PC_Config+0x100>)
 8005e96:	466b      	mov	r3, sp
 8005e98:	0018      	movs	r0, r3
 8005e9a:	0023      	movs	r3, r4
 8005e9c:	3310      	adds	r3, #16
 8005e9e:	22f4      	movs	r2, #244	@ 0xf4
 8005ea0:	0019      	movs	r1, r3
 8005ea2:	f019 ff29 	bl	801fcf8 <memcpy>
 8005ea6:	6820      	ldr	r0, [r4, #0]
 8005ea8:	6861      	ldr	r1, [r4, #4]
 8005eaa:	68a2      	ldr	r2, [r4, #8]
 8005eac:	68e3      	ldr	r3, [r4, #12]
 8005eae:	f000 f819 	bl	8005ee4 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005edc <Process_PC_Config+0x100>)
 8005eb4:	7818      	ldrb	r0, [r3, #0]
 8005eb6:	4b09      	ldr	r3, [pc, #36]	@ (8005edc <Process_PC_Config+0x100>)
 8005eb8:	785a      	ldrb	r2, [r3, #1]
 8005eba:	4b09      	ldr	r3, [pc, #36]	@ (8005ee0 <Process_PC_Config+0x104>)
 8005ebc:	0019      	movs	r1, r3
 8005ebe:	f000 f901 	bl	80060c4 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005ec2:	f016 fc2d 	bl	801c720 <ResetUsbRxDataSize>
                return;
 8005ec6:	e006      	b.n	8005ed6 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	0018      	movs	r0, r3
 8005ecc:	f016 fc4a 	bl	801c764 <GetUsbRxNextChunk>
 8005ed0:	e001      	b.n	8005ed6 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005ed2:	f016 fc25 	bl	801c720 <ResetUsbRxDataSize>
        }
    }
}
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	b005      	add	sp, #20
 8005eda:	bd90      	pop	{r4, r7, pc}
 8005edc:	20000b44 	.word	0x20000b44
 8005ee0:	20000b46 	.word	0x20000b46

08005ee4 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	b5b0      	push	{r4, r5, r7, lr}
 8005ee8:	b082      	sub	sp, #8
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	2518      	movs	r5, #24
 8005eee:	197c      	adds	r4, r7, r5
 8005ef0:	6020      	str	r0, [r4, #0]
 8005ef2:	6061      	str	r1, [r4, #4]
 8005ef4:	60a2      	str	r2, [r4, #8]
 8005ef6:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005ef8:	197b      	adds	r3, r7, r5
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2bfe      	cmp	r3, #254	@ 0xfe
 8005efe:	d100      	bne.n	8005f02 <ProcessCmd+0x1e>
 8005f00:	e09c      	b.n	800603c <ProcessCmd+0x158>
 8005f02:	dd00      	ble.n	8005f06 <ProcessCmd+0x22>
 8005f04:	e0bc      	b.n	8006080 <ProcessCmd+0x19c>
 8005f06:	2b0c      	cmp	r3, #12
 8005f08:	dc0a      	bgt.n	8005f20 <ProcessCmd+0x3c>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da00      	bge.n	8005f10 <ProcessCmd+0x2c>
 8005f0e:	e0b7      	b.n	8006080 <ProcessCmd+0x19c>
 8005f10:	2b0c      	cmp	r3, #12
 8005f12:	d900      	bls.n	8005f16 <ProcessCmd+0x32>
 8005f14:	e0b4      	b.n	8006080 <ProcessCmd+0x19c>
 8005f16:	009a      	lsls	r2, r3, #2
 8005f18:	4b5d      	ldr	r3, [pc, #372]	@ (8006090 <ProcessCmd+0x1ac>)
 8005f1a:	18d3      	adds	r3, r2, r3
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	469f      	mov	pc, r3
 8005f20:	2bfd      	cmp	r3, #253	@ 0xfd
 8005f22:	d100      	bne.n	8005f26 <ProcessCmd+0x42>
 8005f24:	e084      	b.n	8006030 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005f26:	e0ab      	b.n	8006080 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005f28:	2118      	movs	r1, #24
 8005f2a:	187b      	adds	r3, r7, r1
 8005f2c:	785b      	ldrb	r3, [r3, #1]
 8005f2e:	001a      	movs	r2, r3
 8005f30:	187b      	adds	r3, r7, r1
 8005f32:	1c99      	adds	r1, r3, #2
 8005f34:	4857      	ldr	r0, [pc, #348]	@ (8006094 <ProcessCmd+0x1b0>)
 8005f36:	230c      	movs	r3, #12
 8005f38:	f7fd fbc2 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005f3c:	e0a0      	b.n	8006080 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005f3e:	2118      	movs	r1, #24
 8005f40:	187b      	adds	r3, r7, r1
 8005f42:	785b      	ldrb	r3, [r3, #1]
 8005f44:	001a      	movs	r2, r3
 8005f46:	187b      	adds	r3, r7, r1
 8005f48:	1c99      	adds	r1, r3, #2
 8005f4a:	4853      	ldr	r0, [pc, #332]	@ (8006098 <ProcessCmd+0x1b4>)
 8005f4c:	230c      	movs	r3, #12
 8005f4e:	f7fd fbb7 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005f52:	e095      	b.n	8006080 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005f54:	2118      	movs	r1, #24
 8005f56:	187b      	adds	r3, r7, r1
 8005f58:	785b      	ldrb	r3, [r3, #1]
 8005f5a:	001a      	movs	r2, r3
 8005f5c:	187b      	adds	r3, r7, r1
 8005f5e:	1c99      	adds	r1, r3, #2
 8005f60:	484e      	ldr	r0, [pc, #312]	@ (800609c <ProcessCmd+0x1b8>)
 8005f62:	230c      	movs	r3, #12
 8005f64:	f7fd fbac 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005f68:	e08a      	b.n	8006080 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005f6a:	2118      	movs	r1, #24
 8005f6c:	187b      	adds	r3, r7, r1
 8005f6e:	785b      	ldrb	r3, [r3, #1]
 8005f70:	001a      	movs	r2, r3
 8005f72:	187b      	adds	r3, r7, r1
 8005f74:	1c99      	adds	r1, r3, #2
 8005f76:	484a      	ldr	r0, [pc, #296]	@ (80060a0 <ProcessCmd+0x1bc>)
 8005f78:	230c      	movs	r3, #12
 8005f7a:	f7fd fba1 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005f7e:	e07f      	b.n	8006080 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005f80:	2118      	movs	r1, #24
 8005f82:	187b      	adds	r3, r7, r1
 8005f84:	785b      	ldrb	r3, [r3, #1]
 8005f86:	001a      	movs	r2, r3
 8005f88:	187b      	adds	r3, r7, r1
 8005f8a:	1c99      	adds	r1, r3, #2
 8005f8c:	4845      	ldr	r0, [pc, #276]	@ (80060a4 <ProcessCmd+0x1c0>)
 8005f8e:	230c      	movs	r3, #12
 8005f90:	f7fd fb96 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005f94:	e074      	b.n	8006080 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005f96:	2118      	movs	r1, #24
 8005f98:	187b      	adds	r3, r7, r1
 8005f9a:	785b      	ldrb	r3, [r3, #1]
 8005f9c:	001a      	movs	r2, r3
 8005f9e:	187b      	adds	r3, r7, r1
 8005fa0:	1c99      	adds	r1, r3, #2
 8005fa2:	4841      	ldr	r0, [pc, #260]	@ (80060a8 <ProcessCmd+0x1c4>)
 8005fa4:	230c      	movs	r3, #12
 8005fa6:	f7fd fb8b 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005faa:	e069      	b.n	8006080 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005fac:	2118      	movs	r1, #24
 8005fae:	187b      	adds	r3, r7, r1
 8005fb0:	785b      	ldrb	r3, [r3, #1]
 8005fb2:	001a      	movs	r2, r3
 8005fb4:	187b      	adds	r3, r7, r1
 8005fb6:	1c99      	adds	r1, r3, #2
 8005fb8:	483c      	ldr	r0, [pc, #240]	@ (80060ac <ProcessCmd+0x1c8>)
 8005fba:	230c      	movs	r3, #12
 8005fbc:	f7fd fb80 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005fc0:	e05e      	b.n	8006080 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005fc2:	2118      	movs	r1, #24
 8005fc4:	187b      	adds	r3, r7, r1
 8005fc6:	785b      	ldrb	r3, [r3, #1]
 8005fc8:	001a      	movs	r2, r3
 8005fca:	187b      	adds	r3, r7, r1
 8005fcc:	1c99      	adds	r1, r3, #2
 8005fce:	4838      	ldr	r0, [pc, #224]	@ (80060b0 <ProcessCmd+0x1cc>)
 8005fd0:	231e      	movs	r3, #30
 8005fd2:	f7fd fb75 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005fd6:	e053      	b.n	8006080 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005fd8:	2118      	movs	r1, #24
 8005fda:	187b      	adds	r3, r7, r1
 8005fdc:	785b      	ldrb	r3, [r3, #1]
 8005fde:	001a      	movs	r2, r3
 8005fe0:	187b      	adds	r3, r7, r1
 8005fe2:	1c99      	adds	r1, r3, #2
 8005fe4:	4833      	ldr	r0, [pc, #204]	@ (80060b4 <ProcessCmd+0x1d0>)
 8005fe6:	230c      	movs	r3, #12
 8005fe8:	f7fd fb6a 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005fec:	e048      	b.n	8006080 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005fee:	2118      	movs	r1, #24
 8005ff0:	187b      	adds	r3, r7, r1
 8005ff2:	785b      	ldrb	r3, [r3, #1]
 8005ff4:	001a      	movs	r2, r3
 8005ff6:	187b      	adds	r3, r7, r1
 8005ff8:	1c99      	adds	r1, r3, #2
 8005ffa:	482f      	ldr	r0, [pc, #188]	@ (80060b8 <ProcessCmd+0x1d4>)
 8005ffc:	230c      	movs	r3, #12
 8005ffe:	f7fd fb5f 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006002:	e03d      	b.n	8006080 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006004:	2118      	movs	r1, #24
 8006006:	187b      	adds	r3, r7, r1
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	001a      	movs	r2, r3
 800600c:	187b      	adds	r3, r7, r1
 800600e:	1c99      	adds	r1, r3, #2
 8006010:	482a      	ldr	r0, [pc, #168]	@ (80060bc <ProcessCmd+0x1d8>)
 8006012:	230c      	movs	r3, #12
 8006014:	f7fd fb54 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006018:	e032      	b.n	8006080 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800601a:	2118      	movs	r1, #24
 800601c:	187b      	adds	r3, r7, r1
 800601e:	785b      	ldrb	r3, [r3, #1]
 8006020:	001a      	movs	r2, r3
 8006022:	187b      	adds	r3, r7, r1
 8006024:	1c99      	adds	r1, r3, #2
 8006026:	4826      	ldr	r0, [pc, #152]	@ (80060c0 <ProcessCmd+0x1dc>)
 8006028:	230c      	movs	r3, #12
 800602a:	f7fd fb49 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800602e:	e027      	b.n	8006080 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8006030:	4b18      	ldr	r3, [pc, #96]	@ (8006094 <ProcessCmd+0x1b0>)
 8006032:	21ba      	movs	r1, #186	@ 0xba
 8006034:	0018      	movs	r0, r3
 8006036:	f7fd fb88 	bl	800374a <ClearEEprom>
        break;
 800603a:	e021      	b.n	8006080 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 800603c:	2118      	movs	r1, #24
 800603e:	187b      	adds	r3, r7, r1
 8006040:	789b      	ldrb	r3, [r3, #2]
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	b21a      	sxth	r2, r3
 8006046:	187b      	adds	r3, r7, r1
 8006048:	78db      	ldrb	r3, [r3, #3]
 800604a:	b21b      	sxth	r3, r3
 800604c:	4313      	orrs	r3, r2
 800604e:	b21a      	sxth	r2, r3
 8006050:	1dbb      	adds	r3, r7, #6
 8006052:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8006054:	1dbb      	adds	r3, r7, #6
 8006056:	881a      	ldrh	r2, [r3, #0]
 8006058:	23c0      	movs	r3, #192	@ 0xc0
 800605a:	015b      	lsls	r3, r3, #5
 800605c:	429a      	cmp	r2, r3
 800605e:	d207      	bcs.n	8006070 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8006060:	1dbb      	adds	r3, r7, #6
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	4a0b      	ldr	r2, [pc, #44]	@ (8006094 <ProcessCmd+0x1b0>)
 8006066:	0019      	movs	r1, r3
 8006068:	0010      	movs	r0, r2
 800606a:	f7fd fb6e 	bl	800374a <ClearEEprom>
            break;
 800606e:	e006      	b.n	800607e <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8006070:	23c0      	movs	r3, #192	@ 0xc0
 8006072:	015b      	lsls	r3, r3, #5
 8006074:	4a07      	ldr	r2, [pc, #28]	@ (8006094 <ProcessCmd+0x1b0>)
 8006076:	0019      	movs	r1, r3
 8006078:	0010      	movs	r0, r2
 800607a:	f7fd fb66 	bl	800374a <ClearEEprom>
            break;
 800607e:	46c0      	nop			@ (mov r8, r8)
}
 8006080:	46c0      	nop			@ (mov r8, r8)
 8006082:	46bd      	mov	sp, r7
 8006084:	b002      	add	sp, #8
 8006086:	bcb0      	pop	{r4, r5, r7}
 8006088:	bc08      	pop	{r3}
 800608a:	b004      	add	sp, #16
 800608c:	4718      	bx	r3
 800608e:	46c0      	nop			@ (mov r8, r8)
 8006090:	08024aa4 	.word	0x08024aa4
 8006094:	08080000 	.word	0x08080000
 8006098:	0808000c 	.word	0x0808000c
 800609c:	08080018 	.word	0x08080018
 80060a0:	08080024 	.word	0x08080024
 80060a4:	08080030 	.word	0x08080030
 80060a8:	0808003c 	.word	0x0808003c
 80060ac:	08080048 	.word	0x08080048
 80060b0:	08080090 	.word	0x08080090
 80060b4:	08080078 	.word	0x08080078
 80060b8:	0808006c 	.word	0x0808006c
 80060bc:	08080060 	.word	0x08080060
 80060c0:	08080054 	.word	0x08080054

080060c4 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80060c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6039      	str	r1, [r7, #0]
 80060cc:	0011      	movs	r1, r2
 80060ce:	1dfb      	adds	r3, r7, #7
 80060d0:	1c02      	adds	r2, r0, #0
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	1dbb      	adds	r3, r7, #6
 80060d6:	1c0a      	adds	r2, r1, #0
 80060d8:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 80060da:	2223      	movs	r2, #35	@ 0x23
 80060dc:	4b20      	ldr	r3, [pc, #128]	@ (8006160 <Create_Message+0x9c>)
 80060de:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80060e0:	4b1f      	ldr	r3, [pc, #124]	@ (8006160 <Create_Message+0x9c>)
 80060e2:	1dfa      	adds	r2, r7, #7
 80060e4:	7812      	ldrb	r2, [r2, #0]
 80060e6:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80060e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006160 <Create_Message+0x9c>)
 80060ea:	1dba      	adds	r2, r7, #6
 80060ec:	7812      	ldrb	r2, [r2, #0]
 80060ee:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 80060f0:	1dbb      	adds	r3, r7, #6
 80060f2:	781a      	ldrb	r2, [r3, #0]
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006164 <Create_Message+0xa0>)
 80060f8:	0018      	movs	r0, r3
 80060fa:	f019 fdfd 	bl	801fcf8 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 80060fe:	1dbb      	adds	r3, r7, #6
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	b29a      	uxth	r2, r3
 8006104:	250e      	movs	r5, #14
 8006106:	197b      	adds	r3, r7, r5
 8006108:	3203      	adds	r2, #3
 800610a:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 800610c:	260c      	movs	r6, #12
 800610e:	19bc      	adds	r4, r7, r6
 8006110:	197b      	adds	r3, r7, r5
 8006112:	881a      	ldrh	r2, [r3, #0]
 8006114:	4b12      	ldr	r3, [pc, #72]	@ (8006160 <Create_Message+0x9c>)
 8006116:	0011      	movs	r1, r2
 8006118:	0018      	movs	r0, r3
 800611a:	f000 f825 	bl	8006168 <CRC16_ARC>
 800611e:	0003      	movs	r3, r0
 8006120:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8006122:	0030      	movs	r0, r6
 8006124:	183b      	adds	r3, r7, r0
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	0a1b      	lsrs	r3, r3, #8
 800612a:	b29a      	uxth	r2, r3
 800612c:	197b      	adds	r3, r7, r5
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	b2d1      	uxtb	r1, r2
 8006132:	4a0b      	ldr	r2, [pc, #44]	@ (8006160 <Create_Message+0x9c>)
 8006134:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8006136:	197b      	adds	r3, r7, r5
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	3301      	adds	r3, #1
 800613c:	183a      	adds	r2, r7, r0
 800613e:	8812      	ldrh	r2, [r2, #0]
 8006140:	b2d1      	uxtb	r1, r2
 8006142:	4a07      	ldr	r2, [pc, #28]	@ (8006160 <Create_Message+0x9c>)
 8006144:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8006146:	197b      	adds	r3, r7, r5
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	3302      	adds	r3, #2
 800614c:	b29a      	uxth	r2, r3
 800614e:	4b04      	ldr	r3, [pc, #16]	@ (8006160 <Create_Message+0x9c>)
 8006150:	0011      	movs	r1, r2
 8006152:	0018      	movs	r0, r3
 8006154:	f016 faa2 	bl	801c69c <CDC_Transmit_FS>
}
 8006158:	46c0      	nop			@ (mov r8, r8)
 800615a:	46bd      	mov	sp, r7
 800615c:	b005      	add	sp, #20
 800615e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006160:	20000c48 	.word	0x20000c48
 8006164:	20000c4b 	.word	0x20000c4b

08006168 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	000a      	movs	r2, r1
 8006172:	1cbb      	adds	r3, r7, #2
 8006174:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8006176:	2316      	movs	r3, #22
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	2200      	movs	r2, #0
 800617c:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 800617e:	2300      	movs	r3, #0
 8006180:	613b      	str	r3, [r7, #16]
 8006182:	e02e      	b.n	80061e2 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	18d3      	adds	r3, r2, r3
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	0019      	movs	r1, r3
 800618e:	2216      	movs	r2, #22
 8006190:	18bb      	adds	r3, r7, r2
 8006192:	18ba      	adds	r2, r7, r2
 8006194:	8812      	ldrh	r2, [r2, #0]
 8006196:	404a      	eors	r2, r1
 8006198:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]
 800619e:	e01a      	b.n	80061d6 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80061a0:	2116      	movs	r1, #22
 80061a2:	187b      	adds	r3, r7, r1
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	2201      	movs	r2, #1
 80061a8:	4013      	ands	r3, r2
 80061aa:	d00b      	beq.n	80061c4 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80061ac:	187b      	adds	r3, r7, r1
 80061ae:	187a      	adds	r2, r7, r1
 80061b0:	8812      	ldrh	r2, [r2, #0]
 80061b2:	0852      	lsrs	r2, r2, #1
 80061b4:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80061b6:	187b      	adds	r3, r7, r1
 80061b8:	187a      	adds	r2, r7, r1
 80061ba:	8812      	ldrh	r2, [r2, #0]
 80061bc:	490f      	ldr	r1, [pc, #60]	@ (80061fc <CRC16_ARC+0x94>)
 80061be:	404a      	eors	r2, r1
 80061c0:	801a      	strh	r2, [r3, #0]
 80061c2:	e005      	b.n	80061d0 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80061c4:	2216      	movs	r2, #22
 80061c6:	18bb      	adds	r3, r7, r2
 80061c8:	18ba      	adds	r2, r7, r2
 80061ca:	8812      	ldrh	r2, [r2, #0]
 80061cc:	0852      	lsrs	r2, r2, #1
 80061ce:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3301      	adds	r3, #1
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b07      	cmp	r3, #7
 80061da:	dde1      	ble.n	80061a0 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	3301      	adds	r3, #1
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	1cbb      	adds	r3, r7, #2
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	dbcb      	blt.n	8006184 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80061ec:	2316      	movs	r3, #22
 80061ee:	18fb      	adds	r3, r7, r3
 80061f0:	881b      	ldrh	r3, [r3, #0]
}
 80061f2:	0018      	movs	r0, r3
 80061f4:	46bd      	mov	sp, r7
 80061f6:	b006      	add	sp, #24
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	46c0      	nop			@ (mov r8, r8)
 80061fc:	ffffa001 	.word	0xffffa001

08006200 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_14;
 8006204:	4b26      	ldr	r3, [pc, #152]	@ (80062a0 <ReadBatteryVoltage+0xa0>)
 8006206:	4a27      	ldr	r2, [pc, #156]	@ (80062a4 <ReadBatteryVoltage+0xa4>)
 8006208:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800620a:	4b25      	ldr	r3, [pc, #148]	@ (80062a0 <ReadBatteryVoltage+0xa0>)
 800620c:	2280      	movs	r2, #128	@ 0x80
 800620e:	0152      	lsls	r2, r2, #5
 8006210:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006212:	4a23      	ldr	r2, [pc, #140]	@ (80062a0 <ReadBatteryVoltage+0xa0>)
 8006214:	4b24      	ldr	r3, [pc, #144]	@ (80062a8 <ReadBatteryVoltage+0xa8>)
 8006216:	0011      	movs	r1, r2
 8006218:	0018      	movs	r0, r3
 800621a:	f008 fd11 	bl	800ec40 <HAL_ADC_ConfigChannel>
 800621e:	1e03      	subs	r3, r0, #0
 8006220:	d001      	beq.n	8006226 <ReadBatteryVoltage+0x26>
    Error_Handler();
 8006222:	f001 ff93 	bl	800814c <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006226:	4b20      	ldr	r3, [pc, #128]	@ (80062a8 <ReadBatteryVoltage+0xa8>)
 8006228:	0018      	movs	r0, r3
 800622a:	f008 fc0d 	bl	800ea48 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 800622e:	4b1e      	ldr	r3, [pc, #120]	@ (80062a8 <ReadBatteryVoltage+0xa8>)
 8006230:	2101      	movs	r1, #1
 8006232:	0018      	movs	r0, r3
 8006234:	f008 fc5c 	bl	800eaf0 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006238:	4b1b      	ldr	r3, [pc, #108]	@ (80062a8 <ReadBatteryVoltage+0xa8>)
 800623a:	0018      	movs	r0, r3
 800623c:	f008 fcf4 	bl	800ec28 <HAL_ADC_GetValue>
 8006240:	0002      	movs	r2, r0
 8006242:	4b1a      	ldr	r3, [pc, #104]	@ (80062ac <ReadBatteryVoltage+0xac>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4353      	muls	r3, r2
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	4919      	ldr	r1, [pc, #100]	@ (80062b0 <ReadBatteryVoltage+0xb0>)
 800624c:	0018      	movs	r0, r3
 800624e:	f7f9 ffa9 	bl	80001a4 <__udivsi3>
 8006252:	0003      	movs	r3, r0
 8006254:	001a      	movs	r2, r3
 8006256:	4b17      	ldr	r3, [pc, #92]	@ (80062b4 <ReadBatteryVoltage+0xb4>)
 8006258:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 800625a:	4b16      	ldr	r3, [pc, #88]	@ (80062b4 <ReadBatteryVoltage+0xb4>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	0018      	movs	r0, r3
 8006260:	f7fb fa02 	bl	8001668 <__aeabi_ui2f>
 8006264:	1c03      	adds	r3, r0, #0
 8006266:	4914      	ldr	r1, [pc, #80]	@ (80062b8 <ReadBatteryVoltage+0xb8>)
 8006268:	1c18      	adds	r0, r3, #0
 800626a:	f7fa fcb3 	bl	8000bd4 <__aeabi_fdiv>
 800626e:	1c03      	adds	r3, r0, #0
 8006270:	1c1a      	adds	r2, r3, #0
 8006272:	4b12      	ldr	r3, [pc, #72]	@ (80062bc <ReadBatteryVoltage+0xbc>)
 8006274:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8006276:	4b0a      	ldr	r3, [pc, #40]	@ (80062a0 <ReadBatteryVoltage+0xa0>)
 8006278:	4a0a      	ldr	r2, [pc, #40]	@ (80062a4 <ReadBatteryVoltage+0xa4>)
 800627a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 800627c:	4b08      	ldr	r3, [pc, #32]	@ (80062a0 <ReadBatteryVoltage+0xa0>)
 800627e:	4a10      	ldr	r2, [pc, #64]	@ (80062c0 <ReadBatteryVoltage+0xc0>)
 8006280:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006282:	4a07      	ldr	r2, [pc, #28]	@ (80062a0 <ReadBatteryVoltage+0xa0>)
 8006284:	4b08      	ldr	r3, [pc, #32]	@ (80062a8 <ReadBatteryVoltage+0xa8>)
 8006286:	0011      	movs	r1, r2
 8006288:	0018      	movs	r0, r3
 800628a:	f008 fcd9 	bl	800ec40 <HAL_ADC_ConfigChannel>
 800628e:	1e03      	subs	r3, r0, #0
 8006290:	d001      	beq.n	8006296 <ReadBatteryVoltage+0x96>
    Error_Handler();
 8006292:	f001 ff5b 	bl	800814c <Error_Handler>
  }
  return trueValue;
 8006296:	4b09      	ldr	r3, [pc, #36]	@ (80062bc <ReadBatteryVoltage+0xbc>)
 8006298:	681b      	ldr	r3, [r3, #0]
 }
 800629a:	1c18      	adds	r0, r3, #0
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	20000d50 	.word	0x20000d50
 80062a4:	38004000 	.word	0x38004000
 80062a8:	20000d90 	.word	0x20000d90
 80062ac:	2000002c 	.word	0x2000002c
 80062b0:	00000fff 	.word	0x00000fff
 80062b4:	20000d58 	.word	0x20000d58
 80062b8:	447a0000 	.word	0x447a0000
 80062bc:	20000d5c 	.word	0x20000d5c
 80062c0:	00001001 	.word	0x00001001

080062c4 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 80062c8:	4b27      	ldr	r3, [pc, #156]	@ (8006368 <ReadSolarVoltage+0xa4>)
 80062ca:	4a28      	ldr	r2, [pc, #160]	@ (800636c <ReadSolarVoltage+0xa8>)
 80062cc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80062ce:	4b26      	ldr	r3, [pc, #152]	@ (8006368 <ReadSolarVoltage+0xa4>)
 80062d0:	2280      	movs	r2, #128	@ 0x80
 80062d2:	0152      	lsls	r2, r2, #5
 80062d4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80062d6:	4a24      	ldr	r2, [pc, #144]	@ (8006368 <ReadSolarVoltage+0xa4>)
 80062d8:	4b25      	ldr	r3, [pc, #148]	@ (8006370 <ReadSolarVoltage+0xac>)
 80062da:	0011      	movs	r1, r2
 80062dc:	0018      	movs	r0, r3
 80062de:	f008 fcaf 	bl	800ec40 <HAL_ADC_ConfigChannel>
 80062e2:	1e03      	subs	r3, r0, #0
 80062e4:	d001      	beq.n	80062ea <ReadSolarVoltage+0x26>
    Error_Handler();
 80062e6:	f001 ff31 	bl	800814c <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80062ea:	4b21      	ldr	r3, [pc, #132]	@ (8006370 <ReadSolarVoltage+0xac>)
 80062ec:	0018      	movs	r0, r3
 80062ee:	f008 fbab 	bl	800ea48 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80062f2:	4b1f      	ldr	r3, [pc, #124]	@ (8006370 <ReadSolarVoltage+0xac>)
 80062f4:	2101      	movs	r1, #1
 80062f6:	0018      	movs	r0, r3
 80062f8:	f008 fbfa 	bl	800eaf0 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 80062fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006370 <ReadSolarVoltage+0xac>)
 80062fe:	0018      	movs	r0, r3
 8006300:	f008 fc92 	bl	800ec28 <HAL_ADC_GetValue>
 8006304:	0002      	movs	r2, r0
 8006306:	4b1b      	ldr	r3, [pc, #108]	@ (8006374 <ReadSolarVoltage+0xb0>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	435a      	muls	r2, r3
 800630c:	0013      	movs	r3, r2
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	189b      	adds	r3, r3, r2
 8006312:	4919      	ldr	r1, [pc, #100]	@ (8006378 <ReadSolarVoltage+0xb4>)
 8006314:	0018      	movs	r0, r3
 8006316:	f7f9 ff45 	bl	80001a4 <__udivsi3>
 800631a:	0003      	movs	r3, r0
 800631c:	001a      	movs	r2, r3
 800631e:	4b17      	ldr	r3, [pc, #92]	@ (800637c <ReadSolarVoltage+0xb8>)
 8006320:	601a      	str	r2, [r3, #0]
  trueValue = (float)value / 1000.0;
 8006322:	4b16      	ldr	r3, [pc, #88]	@ (800637c <ReadSolarVoltage+0xb8>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	0018      	movs	r0, r3
 8006328:	f7fb f99e 	bl	8001668 <__aeabi_ui2f>
 800632c:	1c03      	adds	r3, r0, #0
 800632e:	4914      	ldr	r1, [pc, #80]	@ (8006380 <ReadSolarVoltage+0xbc>)
 8006330:	1c18      	adds	r0, r3, #0
 8006332:	f7fa fc4f 	bl	8000bd4 <__aeabi_fdiv>
 8006336:	1c03      	adds	r3, r0, #0
 8006338:	1c1a      	adds	r2, r3, #0
 800633a:	4b12      	ldr	r3, [pc, #72]	@ (8006384 <ReadSolarVoltage+0xc0>)
 800633c:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 800633e:	4b0a      	ldr	r3, [pc, #40]	@ (8006368 <ReadSolarVoltage+0xa4>)
 8006340:	4a0a      	ldr	r2, [pc, #40]	@ (800636c <ReadSolarVoltage+0xa8>)
 8006342:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006344:	4b08      	ldr	r3, [pc, #32]	@ (8006368 <ReadSolarVoltage+0xa4>)
 8006346:	4a10      	ldr	r2, [pc, #64]	@ (8006388 <ReadSolarVoltage+0xc4>)
 8006348:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800634a:	4a07      	ldr	r2, [pc, #28]	@ (8006368 <ReadSolarVoltage+0xa4>)
 800634c:	4b08      	ldr	r3, [pc, #32]	@ (8006370 <ReadSolarVoltage+0xac>)
 800634e:	0011      	movs	r1, r2
 8006350:	0018      	movs	r0, r3
 8006352:	f008 fc75 	bl	800ec40 <HAL_ADC_ConfigChannel>
 8006356:	1e03      	subs	r3, r0, #0
 8006358:	d001      	beq.n	800635e <ReadSolarVoltage+0x9a>
    Error_Handler();
 800635a:	f001 fef7 	bl	800814c <Error_Handler>
  }
  return trueValue;
 800635e:	4b09      	ldr	r3, [pc, #36]	@ (8006384 <ReadSolarVoltage+0xc0>)
 8006360:	681b      	ldr	r3, [r3, #0]
 }
 8006362:	1c18      	adds	r0, r3, #0
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	20000d50 	.word	0x20000d50
 800636c:	3c008000 	.word	0x3c008000
 8006370:	20000d90 	.word	0x20000d90
 8006374:	2000002c 	.word	0x2000002c
 8006378:	00000fff 	.word	0x00000fff
 800637c:	20000d60 	.word	0x20000d60
 8006380:	447a0000 	.word	0x447a0000
 8006384:	20000d64 	.word	0x20000d64
 8006388:	00001001 	.word	0x00001001

0800638c <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006390:	23a0      	movs	r3, #160	@ 0xa0
 8006392:	05db      	lsls	r3, r3, #23
 8006394:	2180      	movs	r1, #128	@ 0x80
 8006396:	0018      	movs	r0, r3
 8006398:	f009 fbee 	bl	800fb78 <HAL_GPIO_ReadPin>
 800639c:	0003      	movs	r3, r0
 800639e:	1e5a      	subs	r2, r3, #1
 80063a0:	4193      	sbcs	r3, r2
 80063a2:	b2db      	uxtb	r3, r3
}
 80063a4:	0018      	movs	r0, r3
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 80063aa:	b580      	push	{r7, lr}
 80063ac:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 80063ae:	2380      	movs	r3, #128	@ 0x80
 80063b0:	021a      	lsls	r2, r3, #8
 80063b2:	23a0      	movs	r3, #160	@ 0xa0
 80063b4:	05db      	lsls	r3, r3, #23
 80063b6:	0011      	movs	r1, r2
 80063b8:	0018      	movs	r0, r3
 80063ba:	f009 fbdd 	bl	800fb78 <HAL_GPIO_ReadPin>
 80063be:	0003      	movs	r3, r0
 80063c0:	1e5a      	subs	r2, r3, #1
 80063c2:	4193      	sbcs	r3, r2
 80063c4:	b2db      	uxtb	r3, r3
}
 80063c6:	0018      	movs	r0, r3
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 80063d0:	4b05      	ldr	r3, [pc, #20]	@ (80063e8 <UserButton_Pressed+0x1c>)
 80063d2:	2104      	movs	r1, #4
 80063d4:	0018      	movs	r0, r3
 80063d6:	f009 fbcf 	bl	800fb78 <HAL_GPIO_ReadPin>
 80063da:	0003      	movs	r3, r0
 80063dc:	425a      	negs	r2, r3
 80063de:	4153      	adcs	r3, r2
 80063e0:	b2db      	uxtb	r3, r3
}
 80063e2:	0018      	movs	r0, r3
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	50000c00 	.word	0x50000c00

080063ec <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 80063ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ee:	46d6      	mov	lr, sl
 80063f0:	464f      	mov	r7, r9
 80063f2:	4646      	mov	r6, r8
 80063f4:	b5c0      	push	{r6, r7, lr}
 80063f6:	b08e      	sub	sp, #56	@ 0x38
 80063f8:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 80063fa:	4b21      	ldr	r3, [pc, #132]	@ (8006480 <showTime+0x94>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d036      	beq.n	8006470 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006402:	003a      	movs	r2, r7
 8006404:	1d3b      	adds	r3, r7, #4
 8006406:	0011      	movs	r1, r2
 8006408:	0018      	movs	r0, r3
 800640a:	f000 fa2b 	bl	8006864 <RTC_GetTime>
  UpdateSystemUptime();
 800640e:	f000 f83f 	bl	8006490 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006412:	003b      	movs	r3, r7
 8006414:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006416:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006418:	003b      	movs	r3, r7
 800641a:	785b      	ldrb	r3, [r3, #1]
 800641c:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800641e:	4b19      	ldr	r3, [pc, #100]	@ (8006484 <showTime+0x98>)
 8006420:	0092      	lsls	r2, r2, #2
 8006422:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006424:	003b      	movs	r3, r7
 8006426:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006428:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800642a:	1d3b      	adds	r3, r7, #4
 800642c:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800642e:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006430:	1d3b      	adds	r3, r7, #4
 8006432:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006434:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006436:	1d3b      	adds	r3, r7, #4
 8006438:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800643a:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800643c:	4b12      	ldr	r3, [pc, #72]	@ (8006488 <showTime+0x9c>)
 800643e:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006440:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006442:	4b11      	ldr	r3, [pc, #68]	@ (8006488 <showTime+0x9c>)
 8006444:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006446:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006448:	4b0f      	ldr	r3, [pc, #60]	@ (8006488 <showTime+0x9c>)
 800644a:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800644c:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800644e:	4b0e      	ldr	r3, [pc, #56]	@ (8006488 <showTime+0x9c>)
 8006450:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006452:	480e      	ldr	r0, [pc, #56]	@ (800648c <showTime+0xa0>)
 8006454:	9306      	str	r3, [sp, #24]
 8006456:	4643      	mov	r3, r8
 8006458:	9305      	str	r3, [sp, #20]
 800645a:	4663      	mov	r3, ip
 800645c:	9304      	str	r3, [sp, #16]
 800645e:	9603      	str	r6, [sp, #12]
 8006460:	9502      	str	r5, [sp, #8]
 8006462:	9401      	str	r4, [sp, #4]
 8006464:	9100      	str	r1, [sp, #0]
 8006466:	4653      	mov	r3, sl
 8006468:	4649      	mov	r1, r9
 800646a:	f019 f9b5 	bl	801f7d8 <iprintf>
 800646e:	e000      	b.n	8006472 <showTime+0x86>
    return;
 8006470:	46c0      	nop			@ (mov r8, r8)
}
 8006472:	46bd      	mov	sp, r7
 8006474:	b006      	add	sp, #24
 8006476:	bce0      	pop	{r5, r6, r7}
 8006478:	46ba      	mov	sl, r7
 800647a:	46b1      	mov	r9, r6
 800647c:	46a8      	mov	r8, r5
 800647e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006480:	20000d74 	.word	0x20000d74
 8006484:	2000004c 	.word	0x2000004c
 8006488:	20000d68 	.word	0x20000d68
 800648c:	080235c8 	.word	0x080235c8

08006490 <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8006496:	003a      	movs	r2, r7
 8006498:	1d3b      	adds	r3, r7, #4
 800649a:	0011      	movs	r1, r2
 800649c:	0018      	movs	r0, r3
 800649e:	f000 f9e1 	bl	8006864 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 80064a2:	1d3a      	adds	r2, r7, #4
 80064a4:	003b      	movs	r3, r7
 80064a6:	0011      	movs	r1, r2
 80064a8:	0018      	movs	r0, r3
 80064aa:	f000 fba1 	bl	8006bf0 <makeTime>
 80064ae:	0002      	movs	r2, r0
 80064b0:	4b1e      	ldr	r3, [pc, #120]	@ (800652c <UpdateSystemUptime+0x9c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	213c      	movs	r1, #60	@ 0x3c
 80064c0:	0018      	movs	r0, r3
 80064c2:	f7f9 fef5 	bl	80002b0 <__aeabi_uidivmod>
 80064c6:	000b      	movs	r3, r1
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	4b19      	ldr	r3, [pc, #100]	@ (8006530 <UpdateSystemUptime+0xa0>)
 80064cc:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	213c      	movs	r1, #60	@ 0x3c
 80064d2:	0018      	movs	r0, r3
 80064d4:	f7f9 fe66 	bl	80001a4 <__udivsi3>
 80064d8:	0003      	movs	r3, r0
 80064da:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	213c      	movs	r1, #60	@ 0x3c
 80064e0:	0018      	movs	r0, r3
 80064e2:	f7f9 fee5 	bl	80002b0 <__aeabi_uidivmod>
 80064e6:	000b      	movs	r3, r1
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	4b11      	ldr	r3, [pc, #68]	@ (8006530 <UpdateSystemUptime+0xa0>)
 80064ec:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	213c      	movs	r1, #60	@ 0x3c
 80064f2:	0018      	movs	r0, r3
 80064f4:	f7f9 fe56 	bl	80001a4 <__udivsi3>
 80064f8:	0003      	movs	r3, r0
 80064fa:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	2118      	movs	r1, #24
 8006500:	0018      	movs	r0, r3
 8006502:	f7f9 fed5 	bl	80002b0 <__aeabi_uidivmod>
 8006506:	000b      	movs	r3, r1
 8006508:	b2da      	uxtb	r2, r3
 800650a:	4b09      	ldr	r3, [pc, #36]	@ (8006530 <UpdateSystemUptime+0xa0>)
 800650c:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	2118      	movs	r1, #24
 8006512:	0018      	movs	r0, r3
 8006514:	f7f9 fe46 	bl	80001a4 <__udivsi3>
 8006518:	0003      	movs	r3, r0
 800651a:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	b29a      	uxth	r2, r3
 8006520:	4b03      	ldr	r3, [pc, #12]	@ (8006530 <UpdateSystemUptime+0xa0>)
 8006522:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8006524:	46c0      	nop			@ (mov r8, r8)
 8006526:	46bd      	mov	sp, r7
 8006528:	b008      	add	sp, #32
 800652a:	bd80      	pop	{r7, pc}
 800652c:	20000d74 	.word	0x20000d74
 8006530:	20000d68 	.word	0x20000d68

08006534 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8006534:	b590      	push	{r4, r7, lr}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	0008      	movs	r0, r1
 800653e:	0011      	movs	r1, r2
 8006540:	1cfb      	adds	r3, r7, #3
 8006542:	1c02      	adds	r2, r0, #0
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	1cbb      	adds	r3, r7, #2
 8006548:	1c0a      	adds	r2, r1, #0
 800654a:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 800654c:	230e      	movs	r3, #14
 800654e:	18fb      	adds	r3, r7, r3
 8006550:	2200      	movs	r2, #0
 8006552:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006554:	230f      	movs	r3, #15
 8006556:	18fb      	adds	r3, r7, r3
 8006558:	1cfa      	adds	r2, r7, #3
 800655a:	7812      	ldrb	r2, [r2, #0]
 800655c:	701a      	strb	r2, [r3, #0]
 800655e:	e015      	b.n	800658c <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006560:	200f      	movs	r0, #15
 8006562:	183b      	adds	r3, r7, r0
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	18d2      	adds	r2, r2, r3
 800656a:	240e      	movs	r4, #14
 800656c:	193b      	adds	r3, r7, r4
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	7811      	ldrb	r1, [r2, #0]
 8006572:	2208      	movs	r2, #8
 8006574:	18ba      	adds	r2, r7, r2
 8006576:	54d1      	strb	r1, [r2, r3]
    pos++;
 8006578:	193b      	adds	r3, r7, r4
 800657a:	781a      	ldrb	r2, [r3, #0]
 800657c:	193b      	adds	r3, r7, r4
 800657e:	3201      	adds	r2, #1
 8006580:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006582:	183b      	adds	r3, r7, r0
 8006584:	781a      	ldrb	r2, [r3, #0]
 8006586:	183b      	adds	r3, r7, r0
 8006588:	3201      	adds	r2, #1
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	200f      	movs	r0, #15
 800658e:	183a      	adds	r2, r7, r0
 8006590:	1cbb      	adds	r3, r7, #2
 8006592:	7812      	ldrb	r2, [r2, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d9e2      	bls.n	8006560 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 800659a:	230e      	movs	r3, #14
 800659c:	18fb      	adds	r3, r7, r3
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2208      	movs	r2, #8
 80065a2:	18ba      	adds	r2, r7, r2
 80065a4:	2100      	movs	r1, #0
 80065a6:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 80065a8:	1cfb      	adds	r3, r7, #3
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b13      	cmp	r3, #19
 80065ae:	d849      	bhi.n	8006644 <aBuff2int+0x110>
    if (start == 17) { //month
 80065b0:	1cfb      	adds	r3, r7, #3
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	2b11      	cmp	r3, #17
 80065b6:	d122      	bne.n	80065fe <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 80065b8:	183b      	adds	r3, r7, r0
 80065ba:	2200      	movs	r2, #0
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	e018      	b.n	80065f2 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 80065c0:	240f      	movs	r4, #15
 80065c2:	193b      	adds	r3, r7, r4
 80065c4:	781a      	ldrb	r2, [r3, #0]
 80065c6:	4b25      	ldr	r3, [pc, #148]	@ (800665c <aBuff2int+0x128>)
 80065c8:	0092      	lsls	r2, r2, #2
 80065ca:	58d2      	ldr	r2, [r2, r3]
 80065cc:	2308      	movs	r3, #8
 80065ce:	18fb      	adds	r3, r7, r3
 80065d0:	0011      	movs	r1, r2
 80065d2:	0018      	movs	r0, r3
 80065d4:	f7f9 fdc0 	bl	8000158 <strcmp>
 80065d8:	1e03      	subs	r3, r0, #0
 80065da:	d104      	bne.n	80065e6 <aBuff2int+0xb2>
          return i+1;
 80065dc:	193b      	adds	r3, r7, r4
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	3301      	adds	r3, #1
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	e035      	b.n	8006652 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 80065e6:	210f      	movs	r1, #15
 80065e8:	187b      	adds	r3, r7, r1
 80065ea:	781a      	ldrb	r2, [r3, #0]
 80065ec:	187b      	adds	r3, r7, r1
 80065ee:	3201      	adds	r2, #1
 80065f0:	701a      	strb	r2, [r3, #0]
 80065f2:	230f      	movs	r3, #15
 80065f4:	18fb      	adds	r3, r7, r3
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2b0b      	cmp	r3, #11
 80065fa:	d9e1      	bls.n	80065c0 <aBuff2int+0x8c>
 80065fc:	e022      	b.n	8006644 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80065fe:	230f      	movs	r3, #15
 8006600:	18fb      	adds	r3, r7, r3
 8006602:	2200      	movs	r2, #0
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	e018      	b.n	800663a <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8006608:	240f      	movs	r4, #15
 800660a:	193b      	adds	r3, r7, r4
 800660c:	781a      	ldrb	r2, [r3, #0]
 800660e:	4b14      	ldr	r3, [pc, #80]	@ (8006660 <aBuff2int+0x12c>)
 8006610:	0092      	lsls	r2, r2, #2
 8006612:	58d2      	ldr	r2, [r2, r3]
 8006614:	2308      	movs	r3, #8
 8006616:	18fb      	adds	r3, r7, r3
 8006618:	0011      	movs	r1, r2
 800661a:	0018      	movs	r0, r3
 800661c:	f7f9 fd9c 	bl	8000158 <strcmp>
 8006620:	1e03      	subs	r3, r0, #0
 8006622:	d104      	bne.n	800662e <aBuff2int+0xfa>
          return i+1;
 8006624:	193b      	adds	r3, r7, r4
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	3301      	adds	r3, #1
 800662a:	b2db      	uxtb	r3, r3
 800662c:	e011      	b.n	8006652 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 800662e:	210f      	movs	r1, #15
 8006630:	187b      	adds	r3, r7, r1
 8006632:	781a      	ldrb	r2, [r3, #0]
 8006634:	187b      	adds	r3, r7, r1
 8006636:	3201      	adds	r2, #1
 8006638:	701a      	strb	r2, [r3, #0]
 800663a:	230f      	movs	r3, #15
 800663c:	18fb      	adds	r3, r7, r3
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b06      	cmp	r3, #6
 8006642:	d9e1      	bls.n	8006608 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8006644:	2308      	movs	r3, #8
 8006646:	18fb      	adds	r3, r7, r3
 8006648:	0018      	movs	r0, r3
 800664a:	f017 fcea 	bl	801e022 <atoi>
 800664e:	0003      	movs	r3, r0
 8006650:	b2db      	uxtb	r3, r3
}
 8006652:	0018      	movs	r0, r3
 8006654:	46bd      	mov	sp, r7
 8006656:	b005      	add	sp, #20
 8006658:	bd90      	pop	{r4, r7, pc}
 800665a:	46c0      	nop			@ (mov r8, r8)
 800665c:	2000004c 	.word	0x2000004c
 8006660:	20000030 	.word	0x20000030

08006664 <ParseTime>:

void ParseTime(char* buffer) {
 8006664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006666:	b08b      	sub	sp, #44	@ 0x2c
 8006668:	af02      	add	r7, sp, #8
 800666a:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800666c:	2408      	movs	r4, #8
 800666e:	193a      	adds	r2, r7, r4
 8006670:	260c      	movs	r6, #12
 8006672:	19bb      	adds	r3, r7, r6
 8006674:	0011      	movs	r1, r2
 8006676:	0018      	movs	r0, r3
 8006678:	f000 f8f4 	bl	8006864 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2219      	movs	r2, #25
 8006680:	2118      	movs	r1, #24
 8006682:	0018      	movs	r0, r3
 8006684:	f7ff ff56 	bl	8006534 <aBuff2int>
 8006688:	0003      	movs	r3, r0
 800668a:	001a      	movs	r2, r3
 800668c:	19bb      	adds	r3, r7, r6
 800668e:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	221c      	movs	r2, #28
 8006694:	211b      	movs	r1, #27
 8006696:	0018      	movs	r0, r3
 8006698:	f7ff ff4c 	bl	8006534 <aBuff2int>
 800669c:	0003      	movs	r3, r0
 800669e:	001a      	movs	r2, r3
 80066a0:	19bb      	adds	r3, r7, r6
 80066a2:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	221f      	movs	r2, #31
 80066a8:	211e      	movs	r1, #30
 80066aa:	0018      	movs	r0, r3
 80066ac:	f7ff ff42 	bl	8006534 <aBuff2int>
 80066b0:	0003      	movs	r3, r0
 80066b2:	001a      	movs	r2, r3
 80066b4:	19bb      	adds	r3, r7, r6
 80066b6:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2224      	movs	r2, #36	@ 0x24
 80066bc:	2123      	movs	r1, #35	@ 0x23
 80066be:	0018      	movs	r0, r3
 80066c0:	f7ff ff38 	bl	8006534 <aBuff2int>
 80066c4:	0003      	movs	r3, r0
 80066c6:	001a      	movs	r2, r3
 80066c8:	0025      	movs	r5, r4
 80066ca:	197b      	adds	r3, r7, r5
 80066cc:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2213      	movs	r2, #19
 80066d2:	2111      	movs	r1, #17
 80066d4:	0018      	movs	r0, r3
 80066d6:	f7ff ff2d 	bl	8006534 <aBuff2int>
 80066da:	0003      	movs	r3, r0
 80066dc:	001a      	movs	r2, r3
 80066de:	197b      	adds	r3, r7, r5
 80066e0:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2216      	movs	r2, #22
 80066e6:	2115      	movs	r1, #21
 80066e8:	0018      	movs	r0, r3
 80066ea:	f7ff ff23 	bl	8006534 <aBuff2int>
 80066ee:	0003      	movs	r3, r0
 80066f0:	001a      	movs	r2, r3
 80066f2:	197b      	adds	r3, r7, r5
 80066f4:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	220f      	movs	r2, #15
 80066fa:	210d      	movs	r1, #13
 80066fc:	0018      	movs	r0, r3
 80066fe:	f7ff ff19 	bl	8006534 <aBuff2int>
 8006702:	0003      	movs	r3, r0
 8006704:	001a      	movs	r2, r3
 8006706:	197b      	adds	r3, r7, r5
 8006708:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800670a:	19bb      	adds	r3, r7, r6
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	001c      	movs	r4, r3
 8006710:	19bb      	adds	r3, r7, r6
 8006712:	785b      	ldrb	r3, [r3, #1]
 8006714:	0018      	movs	r0, r3
 8006716:	19bb      	adds	r3, r7, r6
 8006718:	789b      	ldrb	r3, [r3, #2]
 800671a:	4a1c      	ldr	r2, [pc, #112]	@ (800678c <ParseTime+0x128>)
 800671c:	491c      	ldr	r1, [pc, #112]	@ (8006790 <ParseTime+0x12c>)
 800671e:	9301      	str	r3, [sp, #4]
 8006720:	9000      	str	r0, [sp, #0]
 8006722:	0023      	movs	r3, r4
 8006724:	2003      	movs	r0, #3
 8006726:	f007 fb5d 	bl	800dde4 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 800672a:	197b      	adds	r3, r7, r5
 800672c:	789b      	ldrb	r3, [r3, #2]
 800672e:	001c      	movs	r4, r3
 8006730:	197b      	adds	r3, r7, r5
 8006732:	785b      	ldrb	r3, [r3, #1]
 8006734:	0018      	movs	r0, r3
 8006736:	197b      	adds	r3, r7, r5
 8006738:	78db      	ldrb	r3, [r3, #3]
 800673a:	4a16      	ldr	r2, [pc, #88]	@ (8006794 <ParseTime+0x130>)
 800673c:	4914      	ldr	r1, [pc, #80]	@ (8006790 <ParseTime+0x12c>)
 800673e:	9301      	str	r3, [sp, #4]
 8006740:	9000      	str	r0, [sp, #0]
 8006742:	0023      	movs	r3, r4
 8006744:	2003      	movs	r0, #3
 8006746:	f007 fb4d 	bl	800dde4 <CreateLine>
  RTC_SetTime(&currentTime);
 800674a:	19bb      	adds	r3, r7, r6
 800674c:	0018      	movs	r0, r3
 800674e:	f000 f825 	bl	800679c <RTC_SetTime>
  RTC_SetDate(&currentDate);
 8006752:	197b      	adds	r3, r7, r5
 8006754:	0018      	movs	r0, r3
 8006756:	f000 f847 	bl	80067e8 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 800675a:	197b      	adds	r3, r7, r5
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	2b02      	cmp	r3, #2
 8006760:	d101      	bne.n	8006766 <ParseTime+0x102>
    reset_fanCleaningDone();
 8006762:	f002 fbd3 	bl	8008f0c <reset_fanCleaningDone>
  }
//  Debug("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d", weekday, year, month, day, hours, minutes, seconds);
  if (posixBootTime == 0) {
 8006766:	4b0c      	ldr	r3, [pc, #48]	@ (8006798 <ParseTime+0x134>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10a      	bne.n	8006784 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800676e:	230c      	movs	r3, #12
 8006770:	18fa      	adds	r2, r7, r3
 8006772:	2308      	movs	r3, #8
 8006774:	18fb      	adds	r3, r7, r3
 8006776:	0011      	movs	r1, r2
 8006778:	0018      	movs	r0, r3
 800677a:	f000 fa39 	bl	8006bf0 <makeTime>
 800677e:	0002      	movs	r2, r0
 8006780:	4b05      	ldr	r3, [pc, #20]	@ (8006798 <ParseTime+0x134>)
 8006782:	601a      	str	r2, [r3, #0]
//    Debug("posixBootTime: %lu", posixBootTime);
  }
}
 8006784:	46c0      	nop			@ (mov r8, r8)
 8006786:	46bd      	mov	sp, r7
 8006788:	b009      	add	sp, #36	@ 0x24
 800678a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800678c:	08023620 	.word	0x08023620
 8006790:	08023658 	.word	0x08023658
 8006794:	0802365c 	.word	0x0802365c
 8006798:	20000d74 	.word	0x20000d74

0800679c <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80067b6:	4b09      	ldr	r3, [pc, #36]	@ (80067dc <RTC_SetTime+0x40>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	0018      	movs	r0, r3
 80067c0:	f00f f886 	bl	80158d0 <HAL_RTC_SetTime>
 80067c4:	1e03      	subs	r3, r0, #0
 80067c6:	d005      	beq.n	80067d4 <RTC_SetTime+0x38>
        // Foutafhandeling
      Error("Error setting time to RTC");
 80067c8:	4a05      	ldr	r2, [pc, #20]	@ (80067e0 <RTC_SetTime+0x44>)
 80067ca:	4b06      	ldr	r3, [pc, #24]	@ (80067e4 <RTC_SetTime+0x48>)
 80067cc:	0019      	movs	r1, r3
 80067ce:	2001      	movs	r0, #1
 80067d0:	f007 fb08 	bl	800dde4 <CreateLine>
    }
}
 80067d4:	46c0      	nop			@ (mov r8, r8)
 80067d6:	46bd      	mov	sp, r7
 80067d8:	b002      	add	sp, #8
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	20000d70 	.word	0x20000d70
 80067e0:	08023690 	.word	0x08023690
 80067e4:	080236ac 	.word	0x080236ac

080067e8 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80067f0:	4b16      	ldr	r3, [pc, #88]	@ (800684c <RTC_SetDate+0x64>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6879      	ldr	r1, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	0018      	movs	r0, r3
 80067fa:	f00f f971 	bl	8015ae0 <HAL_RTC_SetDate>
 80067fe:	1e03      	subs	r3, r0, #0
 8006800:	d005      	beq.n	800680e <RTC_SetDate+0x26>
        // Foutafhandeling
      Error("Error setting date to RTC");
 8006802:	4a13      	ldr	r2, [pc, #76]	@ (8006850 <RTC_SetDate+0x68>)
 8006804:	4b13      	ldr	r3, [pc, #76]	@ (8006854 <RTC_SetDate+0x6c>)
 8006806:	0019      	movs	r1, r3
 8006808:	2001      	movs	r0, #1
 800680a:	f007 faeb 	bl	800dde4 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 800680e:	4b0f      	ldr	r3, [pc, #60]	@ (800684c <RTC_SetDate+0x64>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2101      	movs	r1, #1
 8006814:	0018      	movs	r0, r3
 8006816:	f00f fca9 	bl	801616c <HAL_RTCEx_BKUPRead>
 800681a:	0003      	movs	r3, r0
 800681c:	4a0e      	ldr	r2, [pc, #56]	@ (8006858 <RTC_SetDate+0x70>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d010      	beq.n	8006844 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 8006822:	4a0e      	ldr	r2, [pc, #56]	@ (800685c <RTC_SetDate+0x74>)
 8006824:	4b0e      	ldr	r3, [pc, #56]	@ (8006860 <RTC_SetDate+0x78>)
 8006826:	0019      	movs	r1, r3
 8006828:	2003      	movs	r0, #3
 800682a:	f007 fadb 	bl	800dde4 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 800682e:	f00d ffcf 	bl	80147d0 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 8006832:	4b06      	ldr	r3, [pc, #24]	@ (800684c <RTC_SetDate+0x64>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a08      	ldr	r2, [pc, #32]	@ (8006858 <RTC_SetDate+0x70>)
 8006838:	2101      	movs	r1, #1
 800683a:	0018      	movs	r0, r3
 800683c:	f00f fc7e 	bl	801613c <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8006840:	f00d ffd4 	bl	80147ec <HAL_PWR_DisableBkUpAccess>
    }
}
 8006844:	46c0      	nop			@ (mov r8, r8)
 8006846:	46bd      	mov	sp, r7
 8006848:	b002      	add	sp, #8
 800684a:	bd80      	pop	{r7, pc}
 800684c:	20000d70 	.word	0x20000d70
 8006850:	080236b0 	.word	0x080236b0
 8006854:	080236ac 	.word	0x080236ac
 8006858:	0000bebe 	.word	0x0000bebe
 800685c:	080236cc 	.word	0x080236cc
 8006860:	08023658 	.word	0x08023658

08006864 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8006864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800686e:	250f      	movs	r5, #15
 8006870:	197b      	adds	r3, r7, r5
 8006872:	2201      	movs	r2, #1
 8006874:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 8006876:	230e      	movs	r3, #14
 8006878:	18fb      	adds	r3, r7, r3
 800687a:	2200      	movs	r2, #0
 800687c:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 800687e:	260c      	movs	r6, #12
 8006880:	19bc      	adds	r4, r7, r6
 8006882:	f006 fba3 	bl	800cfcc <powerCheck>
 8006886:	0003      	movs	r3, r0
 8006888:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 800688a:	19bb      	adds	r3, r7, r6
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d104      	bne.n	800689c <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 8006892:	197b      	adds	r3, r7, r5
 8006894:	781a      	ldrb	r2, [r3, #0]
 8006896:	197b      	adds	r3, r7, r5
 8006898:	3201      	adds	r2, #1
 800689a:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 800689c:	230d      	movs	r3, #13
 800689e:	18fb      	adds	r3, r7, r3
 80068a0:	2200      	movs	r2, #0
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	e039      	b.n	800691a <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 80068a6:	4b23      	ldr	r3, [pc, #140]	@ (8006934 <RTC_GetTime+0xd0>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	0018      	movs	r0, r3
 80068b0:	f00f f8b8 	bl	8015a24 <HAL_RTC_GetTime>
 80068b4:	1e03      	subs	r3, r0, #0
 80068b6:	d005      	beq.n	80068c4 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 80068b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006938 <RTC_GetTime+0xd4>)
 80068ba:	4b20      	ldr	r3, [pc, #128]	@ (800693c <RTC_GetTime+0xd8>)
 80068bc:	0019      	movs	r1, r3
 80068be:	2001      	movs	r0, #1
 80068c0:	f007 fa90 	bl	800dde4 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 80068c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006934 <RTC_GetTime+0xd0>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	2200      	movs	r2, #0
 80068cc:	0018      	movs	r0, r3
 80068ce:	f00f f99b 	bl	8015c08 <HAL_RTC_GetDate>
 80068d2:	1e03      	subs	r3, r0, #0
 80068d4:	d005      	beq.n	80068e2 <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 80068d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006940 <RTC_GetTime+0xdc>)
 80068d8:	4b18      	ldr	r3, [pc, #96]	@ (800693c <RTC_GetTime+0xd8>)
 80068da:	0019      	movs	r1, r3
 80068dc:	2001      	movs	r0, #1
 80068de:	f007 fa81 	bl	800dde4 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 80068e2:	230c      	movs	r3, #12
 80068e4:	18fb      	adds	r3, r7, r3
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d110      	bne.n	800690e <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	210e      	movs	r1, #14
 80068f2:	187a      	adds	r2, r7, r1
 80068f4:	7812      	ldrb	r2, [r2, #0]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d018      	beq.n	800692c <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 80068fa:	187b      	adds	r3, r7, r1
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	7812      	ldrb	r2, [r2, #0]
 8006900:	701a      	strb	r2, [r3, #0]
        t++;
 8006902:	210f      	movs	r1, #15
 8006904:	187b      	adds	r3, r7, r1
 8006906:	781a      	ldrb	r2, [r3, #0]
 8006908:	187b      	adds	r3, r7, r1
 800690a:	3201      	adds	r2, #1
 800690c:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 800690e:	210d      	movs	r1, #13
 8006910:	187b      	adds	r3, r7, r1
 8006912:	781a      	ldrb	r2, [r3, #0]
 8006914:	187b      	adds	r3, r7, r1
 8006916:	3201      	adds	r2, #1
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	230d      	movs	r3, #13
 800691c:	18fa      	adds	r2, r7, r3
 800691e:	230f      	movs	r3, #15
 8006920:	18fb      	adds	r3, r7, r3
 8006922:	7812      	ldrb	r2, [r2, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d3bd      	bcc.n	80068a6 <RTC_GetTime+0x42>
 800692a:	e000      	b.n	800692e <RTC_GetTime+0xca>
      }
      else {
        return;
 800692c:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 800692e:	46bd      	mov	sp, r7
 8006930:	b005      	add	sp, #20
 8006932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006934:	20000d70 	.word	0x20000d70
 8006938:	080236e4 	.word	0x080236e4
 800693c:	080236ac 	.word	0x080236ac
 8006940:	08023700 	.word	0x08023700

08006944 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800694a:	003a      	movs	r2, r7
 800694c:	1d3b      	adds	r3, r7, #4
 800694e:	0011      	movs	r1, r2
 8006950:	0018      	movs	r0, r3
 8006952:	f7ff ff87 	bl	8006864 <RTC_GetTime>
  return currentDate.WeekDay;
 8006956:	003b      	movs	r3, r7
 8006958:	781b      	ldrb	r3, [r3, #0]
}
 800695a:	0018      	movs	r0, r3
 800695c:	46bd      	mov	sp, r7
 800695e:	b006      	add	sp, #24
 8006960:	bd80      	pop	{r7, pc}

08006962 <getPosixTime>:

uint32_t getPosixTime(void) {
 8006962:	b580      	push	{r7, lr}
 8006964:	b086      	sub	sp, #24
 8006966:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006968:	003a      	movs	r2, r7
 800696a:	1d3b      	adds	r3, r7, #4
 800696c:	0011      	movs	r1, r2
 800696e:	0018      	movs	r0, r3
 8006970:	f7ff ff78 	bl	8006864 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8006974:	1d3a      	adds	r2, r7, #4
 8006976:	003b      	movs	r3, r7
 8006978:	0011      	movs	r1, r2
 800697a:	0018      	movs	r0, r3
 800697c:	f000 f938 	bl	8006bf0 <makeTime>
 8006980:	0003      	movs	r3, r0
}
 8006982:	0018      	movs	r0, r3
 8006984:	46bd      	mov	sp, r7
 8006986:	b006      	add	sp, #24
 8006988:	bd80      	pop	{r7, pc}
	...

0800698c <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 800698c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800698e:	b08d      	sub	sp, #52	@ 0x34
 8006990:	af04      	add	r7, sp, #16
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
//  RTC_GetTime(&currentTime, &currentDate);
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8006996:	240c      	movs	r4, #12
 8006998:	193a      	adds	r2, r7, r4
 800699a:	2508      	movs	r5, #8
 800699c:	1979      	adds	r1, r7, r5
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	0018      	movs	r0, r3
 80069a2:	f000 f9ef 	bl	8006d84 <breakPosixTime>
//  printf("%s %d-%d-%d %dh:%dm:%ds\r\n", dayNames[currentDate.WeekDay - 1], currentDate.Date, currentDate.Month, currentDate.Year,
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80069a6:	002a      	movs	r2, r5
 80069a8:	18bb      	adds	r3, r7, r2
 80069aa:	789b      	ldrb	r3, [r3, #2]
 80069ac:	001e      	movs	r6, r3
 80069ae:	18bb      	adds	r3, r7, r2
 80069b0:	785b      	ldrb	r3, [r3, #1]
 80069b2:	469c      	mov	ip, r3
 80069b4:	18bb      	adds	r3, r7, r2
 80069b6:	78db      	ldrb	r3, [r3, #3]
 80069b8:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80069ba:	0021      	movs	r1, r4
 80069bc:	187b      	adds	r3, r7, r1
 80069be:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80069c0:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80069c2:	187b      	adds	r3, r7, r1
 80069c4:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80069c6:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80069c8:	187b      	adds	r3, r7, r1
 80069ca:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80069cc:	4906      	ldr	r1, [pc, #24]	@ (80069e8 <getUTCfromPosixTime+0x5c>)
 80069ce:	6838      	ldr	r0, [r7, #0]
 80069d0:	9303      	str	r3, [sp, #12]
 80069d2:	9502      	str	r5, [sp, #8]
 80069d4:	9401      	str	r4, [sp, #4]
 80069d6:	9200      	str	r2, [sp, #0]
 80069d8:	4663      	mov	r3, ip
 80069da:	0032      	movs	r2, r6
 80069dc:	f018 ff6c 	bl	801f8b8 <siprintf>
}
 80069e0:	46c0      	nop			@ (mov r8, r8)
 80069e2:	46bd      	mov	sp, r7
 80069e4:	b009      	add	sp, #36	@ 0x24
 80069e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069e8:	0802371c 	.word	0x0802371c

080069ec <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
//    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(RTC_IRQn);

    // ==== sleep insert
//    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80069f4:	4b10      	ldr	r3, [pc, #64]	@ (8006a38 <RTC_SetWakeUpTimer+0x4c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	0018      	movs	r0, r3
 80069fa:	f00f fb03 	bl	8016004 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 80069fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006a38 <RTC_SetWakeUpTimer+0x4c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	22ff      	movs	r2, #255	@ 0xff
 8006a08:	401a      	ands	r2, r3
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a38 <RTC_SetWakeUpTimer+0x4c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	490a      	ldr	r1, [pc, #40]	@ (8006a3c <RTC_SetWakeUpTimer+0x50>)
 8006a12:	430a      	orrs	r2, r1
 8006a14:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006a16:	4b0a      	ldr	r3, [pc, #40]	@ (8006a40 <RTC_SetWakeUpTimer+0x54>)
 8006a18:	2280      	movs	r2, #128	@ 0x80
 8006a1a:	0352      	lsls	r2, r2, #13
 8006a1c:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8006a1e:	4b06      	ldr	r3, [pc, #24]	@ (8006a38 <RTC_SetWakeUpTimer+0x4c>)
 8006a20:	6818      	ldr	r0, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	3b01      	subs	r3, #1
 8006a26:	2204      	movs	r2, #4
 8006a28:	0019      	movs	r1, r3
 8006a2a:	f00f fa13 	bl	8015e54 <HAL_RTCEx_SetWakeUpTimer_IT>
     // ==== end sleep insert
}
 8006a2e:	46c0      	nop			@ (mov r8, r8)
 8006a30:	46bd      	mov	sp, r7
 8006a32:	b002      	add	sp, #8
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	46c0      	nop			@ (mov r8, r8)
 8006a38:	20000d70 	.word	0x20000d70
 8006a3c:	fffffb7f 	.word	0xfffffb7f
 8006a40:	40010400 	.word	0x40010400

08006a44 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8006a48:	4a0c      	ldr	r2, [pc, #48]	@ (8006a7c <Enter_Standby_Mode+0x38>)
 8006a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a80 <Enter_Standby_Mode+0x3c>)
 8006a4c:	0019      	movs	r1, r3
 8006a4e:	2003      	movs	r0, #3
 8006a50:	f007 f9c8 	bl	800dde4 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8006a54:	2064      	movs	r0, #100	@ 0x64
 8006a56:	f007 fe25 	bl	800e6a4 <HAL_Delay>
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a84 <Enter_Standby_Mode+0x40>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	0018      	movs	r0, r3
 8006a60:	f00f fad0 	bl	8016004 <HAL_RTCEx_DeactivateWakeUpTimer>
    // Schakel Standby Mode in only is battery is drained
    HAL_SuspendTick();
 8006a64:	f007 fe42 	bl	800e6ec <HAL_SuspendTick>
    HAL_PWR_EnterSTANDBYMode();
 8006a68:	f00d ff2c 	bl	80148c4 <HAL_PWR_EnterSTANDBYMode>
    SystemClock_Config();
 8006a6c:	f001 fa18 	bl	8007ea0 <SystemClock_Config>
    HAL_ResumeTick(); // Enable SysTick after wake-up
 8006a70:	f007 fe4a 	bl	800e708 <HAL_ResumeTick>
}
 8006a74:	46c0      	nop			@ (mov r8, r8)
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	46c0      	nop			@ (mov r8, r8)
 8006a7c:	08023770 	.word	0x08023770
 8006a80:	08023658 	.word	0x08023658
 8006a84:	20000d70 	.word	0x20000d70

08006a88 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af02      	add	r7, sp, #8
 8006a8e:	0002      	movs	r2, r0
 8006a90:	1dbb      	adds	r3, r7, #6
 8006a92:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8006a94:	4b43      	ldr	r3, [pc, #268]	@ (8006ba4 <Enter_Stop_Mode+0x11c>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8006a9c:	f002 fa18 	bl	8008ed0 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8006aa0:	f7ff fbae 	bl	8006200 <ReadBatteryVoltage>
 8006aa4:	1c03      	adds	r3, r0, #0
 8006aa6:	1c18      	adds	r0, r3, #0
 8006aa8:	f7fc fcdc 	bl	8003464 <__aeabi_f2d>
 8006aac:	0002      	movs	r2, r0
 8006aae:	000b      	movs	r3, r1
 8006ab0:	483d      	ldr	r0, [pc, #244]	@ (8006ba8 <Enter_Stop_Mode+0x120>)
 8006ab2:	493e      	ldr	r1, [pc, #248]	@ (8006bac <Enter_Stop_Mode+0x124>)
 8006ab4:	9200      	str	r2, [sp, #0]
 8006ab6:	9301      	str	r3, [sp, #4]
 8006ab8:	0002      	movs	r2, r0
 8006aba:	2002      	movs	r0, #2
 8006abc:	f007 f992 	bl	800dde4 <CreateLine>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8006ac0:	1dbb      	adds	r3, r7, #6
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	4a3a      	ldr	r2, [pc, #232]	@ (8006bb0 <Enter_Stop_Mode+0x128>)
 8006ac6:	493b      	ldr	r1, [pc, #236]	@ (8006bb4 <Enter_Stop_Mode+0x12c>)
 8006ac8:	2003      	movs	r0, #3
 8006aca:	f007 f98b 	bl	800dde4 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8006ace:	f7ff ff48 	bl	8006962 <getPosixTime>
 8006ad2:	0002      	movs	r2, r0
 8006ad4:	1dbb      	adds	r3, r7, #6
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	18d3      	adds	r3, r2, r3
 8006ada:	4a37      	ldr	r2, [pc, #220]	@ (8006bb8 <Enter_Stop_Mode+0x130>)
 8006adc:	0011      	movs	r1, r2
 8006ade:	0018      	movs	r0, r3
 8006ae0:	f7ff ff54 	bl	800698c <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8006ae4:	4b34      	ldr	r3, [pc, #208]	@ (8006bb8 <Enter_Stop_Mode+0x130>)
 8006ae6:	4a35      	ldr	r2, [pc, #212]	@ (8006bbc <Enter_Stop_Mode+0x134>)
 8006ae8:	4930      	ldr	r1, [pc, #192]	@ (8006bac <Enter_Stop_Mode+0x124>)
 8006aea:	2002      	movs	r0, #2
 8006aec:	f007 f97a 	bl	800dde4 <CreateLine>
  HAL_Delay(100);
 8006af0:	2064      	movs	r0, #100	@ 0x64
 8006af2:	f007 fdd7 	bl	800e6a4 <HAL_Delay>
  HAL_SuspendTick();
 8006af6:	f007 fdf9 	bl	800e6ec <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8006afa:	1dbb      	adds	r3, r7, #6
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	0018      	movs	r0, r3
 8006b00:	f7ff ff74 	bl	80069ec <RTC_SetWakeUpTimer>
//  HAL_PWREx_EnableFlashPowerDown();  // is default stopped in l0xx cpu's
//  SET_BIT(PWR->CR, PWR_CR_ULP); seems of no influence
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006b04:	2101      	movs	r1, #1
 8006b06:	2001      	movs	r0, #1
 8006b08:	f00d fe80 	bl	801480c <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8006b0c:	f001 f9c8 	bl	8007ea0 <SystemClock_Config>
  if (sen5x_enable((uint32_t)sleepTime)) {
 8006b10:	1dbb      	adds	r3, r7, #6
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	0018      	movs	r0, r3
 8006b16:	f002 f967 	bl	8008de8 <sen5x_enable>
 8006b1a:	1e03      	subs	r3, r0, #0
 8006b1c:	d01c      	beq.n	8006b58 <Enter_Stop_Mode+0xd0>
    showTime();
 8006b1e:	f7ff fc65 	bl	80063ec <showTime>
    set_light_on_state();
 8006b22:	f002 fd9d 	bl	8009660 <set_light_on_state>
    if (!userToggle) {
 8006b26:	4b26      	ldr	r3, [pc, #152]	@ (8006bc0 <Enter_Stop_Mode+0x138>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	4053      	eors	r3, r2
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d011      	beq.n	8006b58 <Enter_Stop_Mode+0xd0>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 27 + 3s measurement time is approx 30 seconds
 8006b34:	201c      	movs	r0, #28
 8006b36:	f7ff ff59 	bl	80069ec <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8006b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8006bb0 <Enter_Stop_Mode+0x128>)
 8006b3c:	491d      	ldr	r1, [pc, #116]	@ (8006bb4 <Enter_Stop_Mode+0x12c>)
 8006b3e:	231c      	movs	r3, #28
 8006b40:	2003      	movs	r0, #3
 8006b42:	f007 f94f 	bl	800dde4 <CreateLine>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006b46:	2101      	movs	r1, #1
 8006b48:	2001      	movs	r0, #1
 8006b4a:	f00d fe5f 	bl	801480c <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8006b4e:	f001 f9a7 	bl	8007ea0 <SystemClock_Config>
//      setsen5xReadTimer(2000);
      setsen5xReadTimer(0);
 8006b52:	2000      	movs	r0, #0
 8006b54:	f002 f926 	bl	8008da4 <setsen5xReadTimer>
    }
  }
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8006b58:	f007 fdd6 	bl	800e708 <HAL_ResumeTick>
  showTime();
 8006b5c:	f7ff fc46 	bl	80063ec <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8006b60:	f001 fdb6 	bl	80086d0 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8006b64:	f004 fb76 	bl	800b254 <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 8006b68:	2000      	movs	r0, #0
 8006b6a:	f002 f92d 	bl	8008dc8 <setsen5xSamplecounter>
//  setESPTimeStamp(3000);
  setESPTimeStamp(2500);
 8006b6e:	4b15      	ldr	r3, [pc, #84]	@ (8006bc4 <Enter_Stop_Mode+0x13c>)
 8006b70:	0018      	movs	r0, r3
 8006b72:	f7fc fe1d 	bl	80037b0 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 8006b76:	2000      	movs	r0, #0
 8006b78:	f004 fb5a 	bl	800b230 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	f007 faf5 	bl	800e16c <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8006b82:	2000      	movs	r0, #0
 8006b84:	f001 fd92 	bl	80086ac <setMICTimeStamp>
  ESPTransmitDone = false;
 8006b88:	4b0f      	ldr	r3, [pc, #60]	@ (8006bc8 <Enter_Stop_Mode+0x140>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + 2300;
 8006b8e:	f007 fd7f 	bl	800e690 <HAL_GetTick>
 8006b92:	0003      	movs	r3, r0
 8006b94:	4a0d      	ldr	r2, [pc, #52]	@ (8006bcc <Enter_Stop_Mode+0x144>)
 8006b96:	189a      	adds	r2, r3, r2
 8006b98:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd0 <Enter_Stop_Mode+0x148>)
 8006b9a:	601a      	str	r2, [r3, #0]
}
 8006b9c:	46c0      	nop			@ (mov r8, r8)
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	b002      	add	sp, #8
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	2000125d 	.word	0x2000125d
 8006ba8:	08023794 	.word	0x08023794
 8006bac:	080237ac 	.word	0x080237ac
 8006bb0:	080237b0 	.word	0x080237b0
 8006bb4:	08023658 	.word	0x08023658
 8006bb8:	20000d78 	.word	0x20000d78
 8006bbc:	080237d4 	.word	0x080237d4
 8006bc0:	200021ee 	.word	0x200021ee
 8006bc4:	000009c4 	.word	0x000009c4
 8006bc8:	20000553 	.word	0x20000553
 8006bcc:	000008fc 	.word	0x000008fc
 8006bd0:	20000fc0 	.word	0x20000fc0

08006bd4 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006bdc:	4b03      	ldr	r3, [pc, #12]	@ (8006bec <InitClock+0x18>)
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	601a      	str	r2, [r3, #0]
}
 8006be2:	46c0      	nop			@ (mov r8, r8)
 8006be4:	46bd      	mov	sp, r7
 8006be6:	b002      	add	sp, #8
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	46c0      	nop			@ (mov r8, r8)
 8006bec:	20000d70 	.word	0x20000d70

08006bf0 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	78db      	ldrb	r3, [r3, #3]
 8006bfe:	001a      	movs	r2, r3
 8006c00:	0013      	movs	r3, r2
 8006c02:	025b      	lsls	r3, r3, #9
 8006c04:	189b      	adds	r3, r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	189b      	adds	r3, r3, r2
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	189b      	adds	r3, r3, r2
 8006c0e:	011a      	lsls	r2, r3, #4
 8006c10:	1ad2      	subs	r2, r2, r3
 8006c12:	01d3      	lsls	r3, r2, #7
 8006c14:	001a      	movs	r2, r3
 8006c16:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	e028      	b.n	8006c70 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4a53      	ldr	r2, [pc, #332]	@ (8006d70 <makeTime+0x180>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	db21      	blt.n	8006c6a <makeTime+0x7a>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4a52      	ldr	r2, [pc, #328]	@ (8006d74 <makeTime+0x184>)
 8006c2a:	4694      	mov	ip, r2
 8006c2c:	4463      	add	r3, ip
 8006c2e:	001a      	movs	r2, r3
 8006c30:	2303      	movs	r3, #3
 8006c32:	4013      	ands	r3, r2
 8006c34:	d119      	bne.n	8006c6a <makeTime+0x7a>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4a4e      	ldr	r2, [pc, #312]	@ (8006d74 <makeTime+0x184>)
 8006c3a:	4694      	mov	ip, r2
 8006c3c:	4463      	add	r3, ip
 8006c3e:	2164      	movs	r1, #100	@ 0x64
 8006c40:	0018      	movs	r0, r3
 8006c42:	f7f9 fc1f 	bl	8000484 <__aeabi_idivmod>
 8006c46:	1e0b      	subs	r3, r1, #0
 8006c48:	d10a      	bne.n	8006c60 <makeTime+0x70>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4a49      	ldr	r2, [pc, #292]	@ (8006d74 <makeTime+0x184>)
 8006c4e:	4694      	mov	ip, r2
 8006c50:	4463      	add	r3, ip
 8006c52:	22c8      	movs	r2, #200	@ 0xc8
 8006c54:	0051      	lsls	r1, r2, #1
 8006c56:	0018      	movs	r0, r3
 8006c58:	f7f9 fc14 	bl	8000484 <__aeabi_idivmod>
 8006c5c:	1e0b      	subs	r3, r1, #0
 8006c5e:	d104      	bne.n	8006c6a <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	4a45      	ldr	r2, [pc, #276]	@ (8006d78 <makeTime+0x188>)
 8006c64:	4694      	mov	ip, r2
 8006c66:	4463      	add	r3, ip
 8006c68:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	78db      	ldrb	r3, [r3, #3]
 8006c74:	001a      	movs	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	dbd0      	blt.n	8006c1e <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	e03c      	b.n	8006cfc <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d125      	bne.n	8006cd4 <makeTime+0xe4>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	78db      	ldrb	r3, [r3, #3]
 8006c8c:	4a39      	ldr	r2, [pc, #228]	@ (8006d74 <makeTime+0x184>)
 8006c8e:	4694      	mov	ip, r2
 8006c90:	4463      	add	r3, ip
 8006c92:	001a      	movs	r2, r3
 8006c94:	2303      	movs	r3, #3
 8006c96:	4013      	ands	r3, r2
 8006c98:	d11c      	bne.n	8006cd4 <makeTime+0xe4>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	78db      	ldrb	r3, [r3, #3]
 8006c9e:	4a35      	ldr	r2, [pc, #212]	@ (8006d74 <makeTime+0x184>)
 8006ca0:	4694      	mov	ip, r2
 8006ca2:	4463      	add	r3, ip
 8006ca4:	2164      	movs	r1, #100	@ 0x64
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	f7f9 fbec 	bl	8000484 <__aeabi_idivmod>
 8006cac:	1e0b      	subs	r3, r1, #0
 8006cae:	d10b      	bne.n	8006cc8 <makeTime+0xd8>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	78db      	ldrb	r3, [r3, #3]
 8006cb4:	4a2f      	ldr	r2, [pc, #188]	@ (8006d74 <makeTime+0x184>)
 8006cb6:	4694      	mov	ip, r2
 8006cb8:	4463      	add	r3, ip
 8006cba:	22c8      	movs	r2, #200	@ 0xc8
 8006cbc:	0051      	lsls	r1, r2, #1
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	f7f9 fbe0 	bl	8000484 <__aeabi_idivmod>
 8006cc4:	1e0b      	subs	r3, r1, #0
 8006cc6:	d105      	bne.n	8006cd4 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4a2c      	ldr	r2, [pc, #176]	@ (8006d7c <makeTime+0x18c>)
 8006ccc:	4694      	mov	ip, r2
 8006cce:	4463      	add	r3, ip
 8006cd0:	60bb      	str	r3, [r7, #8]
 8006cd2:	e010      	b.n	8006cf6 <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	4a29      	ldr	r2, [pc, #164]	@ (8006d80 <makeTime+0x190>)
 8006cda:	5cd3      	ldrb	r3, [r2, r3]
 8006cdc:	001a      	movs	r2, r3
 8006cde:	0013      	movs	r3, r2
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	189b      	adds	r3, r3, r2
 8006ce4:	011a      	lsls	r2, r3, #4
 8006ce6:	1ad2      	subs	r2, r2, r3
 8006ce8:	0113      	lsls	r3, r2, #4
 8006cea:	1a9b      	subs	r3, r3, r2
 8006cec:	01db      	lsls	r3, r3, #7
 8006cee:	001a      	movs	r2, r3
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	189b      	adds	r3, r3, r2
 8006cf4:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	60fb      	str	r3, [r7, #12]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	785b      	ldrb	r3, [r3, #1]
 8006d00:	001a      	movs	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4293      	cmp	r3, r2
 8006d06:	dbbc      	blt.n	8006c82 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	789b      	ldrb	r3, [r3, #2]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	001a      	movs	r2, r3
 8006d10:	0013      	movs	r3, r2
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	189b      	adds	r3, r3, r2
 8006d16:	011a      	lsls	r2, r3, #4
 8006d18:	1ad2      	subs	r2, r2, r3
 8006d1a:	0113      	lsls	r3, r2, #4
 8006d1c:	1a9b      	subs	r3, r3, r2
 8006d1e:	01db      	lsls	r3, r3, #7
 8006d20:	001a      	movs	r2, r3
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	189b      	adds	r3, r3, r2
 8006d26:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	001a      	movs	r2, r3
 8006d2e:	0013      	movs	r3, r2
 8006d30:	011b      	lsls	r3, r3, #4
 8006d32:	1a9b      	subs	r3, r3, r2
 8006d34:	011a      	lsls	r2, r3, #4
 8006d36:	1ad2      	subs	r2, r2, r3
 8006d38:	0113      	lsls	r3, r2, #4
 8006d3a:	001a      	movs	r2, r3
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	189b      	adds	r3, r3, r2
 8006d40:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	785b      	ldrb	r3, [r3, #1]
 8006d46:	001a      	movs	r2, r3
 8006d48:	0013      	movs	r3, r2
 8006d4a:	011b      	lsls	r3, r3, #4
 8006d4c:	1a9b      	subs	r3, r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	001a      	movs	r2, r3
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	189b      	adds	r3, r3, r2
 8006d56:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	789b      	ldrb	r3, [r3, #2]
 8006d5c:	001a      	movs	r2, r3
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	189b      	adds	r3, r3, r2
 8006d62:	60bb      	str	r3, [r7, #8]
  return seconds;
 8006d64:	68bb      	ldr	r3, [r7, #8]
}
 8006d66:	0018      	movs	r0, r3
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	b004      	add	sp, #16
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	46c0      	nop			@ (mov r8, r8)
 8006d70:	fffff84f 	.word	0xfffff84f
 8006d74:	000007b2 	.word	0x000007b2
 8006d78:	00015180 	.word	0x00015180
 8006d7c:	00263b80 	.word	0x00263b80
 8006d80:	08024ad8 	.word	0x08024ad8

08006d84 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006d84:	b590      	push	{r4, r7, lr}
 8006d86:	b089      	sub	sp, #36	@ 0x24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	213c      	movs	r1, #60	@ 0x3c
 8006d98:	0018      	movs	r0, r3
 8006d9a:	f7f9 fa89 	bl	80002b0 <__aeabi_uidivmod>
 8006d9e:	000b      	movs	r3, r1
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	213c      	movs	r1, #60	@ 0x3c
 8006daa:	0018      	movs	r0, r3
 8006dac:	f7f9 f9fa 	bl	80001a4 <__udivsi3>
 8006db0:	0003      	movs	r3, r0
 8006db2:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	213c      	movs	r1, #60	@ 0x3c
 8006db8:	0018      	movs	r0, r3
 8006dba:	f7f9 fa79 	bl	80002b0 <__aeabi_uidivmod>
 8006dbe:	000b      	movs	r3, r1
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	213c      	movs	r1, #60	@ 0x3c
 8006dca:	0018      	movs	r0, r3
 8006dcc:	f7f9 f9ea 	bl	80001a4 <__udivsi3>
 8006dd0:	0003      	movs	r3, r0
 8006dd2:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	2118      	movs	r1, #24
 8006dd8:	0018      	movs	r0, r3
 8006dda:	f7f9 fa69 	bl	80002b0 <__aeabi_uidivmod>
 8006dde:	000b      	movs	r3, r1
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	2118      	movs	r1, #24
 8006dea:	0018      	movs	r0, r3
 8006dec:	f7f9 f9da 	bl	80001a4 <__udivsi3>
 8006df0:	0003      	movs	r3, r0
 8006df2:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	2107      	movs	r1, #7
 8006dfa:	0018      	movs	r0, r3
 8006dfc:	f7f9 fa58 	bl	80002b0 <__aeabi_uidivmod>
 8006e00:	000b      	movs	r3, r1
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	3301      	adds	r3, #1
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	701a      	strb	r2, [r3, #0]
  year = 0;
 8006e0c:	231f      	movs	r3, #31
 8006e0e:	18fb      	adds	r3, r7, r3
 8006e10:	2200      	movs	r2, #0
 8006e12:	701a      	strb	r2, [r3, #0]
  days = 0;
 8006e14:	2300      	movs	r3, #0
 8006e16:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006e18:	e005      	b.n	8006e26 <breakPosixTime+0xa2>
    year++;
 8006e1a:	211f      	movs	r1, #31
 8006e1c:	187b      	adds	r3, r7, r1
 8006e1e:	781a      	ldrb	r2, [r3, #0]
 8006e20:	187b      	adds	r3, r7, r1
 8006e22:	3201      	adds	r2, #1
 8006e24:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006e26:	241f      	movs	r4, #31
 8006e28:	193b      	adds	r3, r7, r4
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	4a64      	ldr	r2, [pc, #400]	@ (8006fc0 <breakPosixTime+0x23c>)
 8006e2e:	4694      	mov	ip, r2
 8006e30:	4463      	add	r3, ip
 8006e32:	001a      	movs	r2, r3
 8006e34:	2303      	movs	r3, #3
 8006e36:	4013      	ands	r3, r2
 8006e38:	d119      	bne.n	8006e6e <breakPosixTime+0xea>
 8006e3a:	193b      	adds	r3, r7, r4
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	4a60      	ldr	r2, [pc, #384]	@ (8006fc0 <breakPosixTime+0x23c>)
 8006e40:	4694      	mov	ip, r2
 8006e42:	4463      	add	r3, ip
 8006e44:	2164      	movs	r1, #100	@ 0x64
 8006e46:	0018      	movs	r0, r3
 8006e48:	f7f9 fb1c 	bl	8000484 <__aeabi_idivmod>
 8006e4c:	1e0b      	subs	r3, r1, #0
 8006e4e:	d10b      	bne.n	8006e68 <breakPosixTime+0xe4>
 8006e50:	193b      	adds	r3, r7, r4
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	4a5a      	ldr	r2, [pc, #360]	@ (8006fc0 <breakPosixTime+0x23c>)
 8006e56:	4694      	mov	ip, r2
 8006e58:	4463      	add	r3, ip
 8006e5a:	22c8      	movs	r2, #200	@ 0xc8
 8006e5c:	0051      	lsls	r1, r2, #1
 8006e5e:	0018      	movs	r0, r3
 8006e60:	f7f9 fb10 	bl	8000484 <__aeabi_idivmod>
 8006e64:	1e0b      	subs	r3, r1, #0
 8006e66:	d102      	bne.n	8006e6e <breakPosixTime+0xea>
 8006e68:	23b7      	movs	r3, #183	@ 0xb7
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	e001      	b.n	8006e72 <breakPosixTime+0xee>
 8006e6e:	236e      	movs	r3, #110	@ 0x6e
 8006e70:	33ff      	adds	r3, #255	@ 0xff
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	18d3      	adds	r3, r2, r3
 8006e76:	617b      	str	r3, [r7, #20]
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d9cc      	bls.n	8006e1a <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	241f      	movs	r4, #31
 8006e84:	193a      	adds	r2, r7, r4
 8006e86:	7812      	ldrb	r2, [r2, #0]
 8006e88:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8006e8a:	193b      	adds	r3, r7, r4
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	4a4c      	ldr	r2, [pc, #304]	@ (8006fc0 <breakPosixTime+0x23c>)
 8006e90:	4694      	mov	ip, r2
 8006e92:	4463      	add	r3, ip
 8006e94:	001a      	movs	r2, r3
 8006e96:	2303      	movs	r3, #3
 8006e98:	4013      	ands	r3, r2
 8006e9a:	d119      	bne.n	8006ed0 <breakPosixTime+0x14c>
 8006e9c:	193b      	adds	r3, r7, r4
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	4a47      	ldr	r2, [pc, #284]	@ (8006fc0 <breakPosixTime+0x23c>)
 8006ea2:	4694      	mov	ip, r2
 8006ea4:	4463      	add	r3, ip
 8006ea6:	2164      	movs	r1, #100	@ 0x64
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	f7f9 faeb 	bl	8000484 <__aeabi_idivmod>
 8006eae:	1e0b      	subs	r3, r1, #0
 8006eb0:	d10b      	bne.n	8006eca <breakPosixTime+0x146>
 8006eb2:	193b      	adds	r3, r7, r4
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	4a42      	ldr	r2, [pc, #264]	@ (8006fc0 <breakPosixTime+0x23c>)
 8006eb8:	4694      	mov	ip, r2
 8006eba:	4463      	add	r3, ip
 8006ebc:	22c8      	movs	r2, #200	@ 0xc8
 8006ebe:	0051      	lsls	r1, r2, #1
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	f7f9 fadf 	bl	8000484 <__aeabi_idivmod>
 8006ec6:	1e0b      	subs	r3, r1, #0
 8006ec8:	d102      	bne.n	8006ed0 <breakPosixTime+0x14c>
 8006eca:	23b7      	movs	r3, #183	@ 0xb7
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	e001      	b.n	8006ed4 <breakPosixTime+0x150>
 8006ed0:	236e      	movs	r3, #110	@ 0x6e
 8006ed2:	33ff      	adds	r3, #255	@ 0xff
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	61bb      	str	r3, [r7, #24]

  days=0;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	617b      	str	r3, [r7, #20]
  month=0;
 8006ee6:	211e      	movs	r1, #30
 8006ee8:	187b      	adds	r3, r7, r1
 8006eea:	2200      	movs	r2, #0
 8006eec:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8006eee:	231d      	movs	r3, #29
 8006ef0:	18fb      	adds	r3, r7, r3
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8006ef6:	187b      	adds	r3, r7, r1
 8006ef8:	2200      	movs	r2, #0
 8006efa:	701a      	strb	r2, [r3, #0]
 8006efc:	e048      	b.n	8006f90 <breakPosixTime+0x20c>
    if (month==1) { // february
 8006efe:	231e      	movs	r3, #30
 8006f00:	18fb      	adds	r3, r7, r3
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d12a      	bne.n	8006f5e <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8006f08:	241f      	movs	r4, #31
 8006f0a:	193b      	adds	r3, r7, r4
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	4a2c      	ldr	r2, [pc, #176]	@ (8006fc0 <breakPosixTime+0x23c>)
 8006f10:	4694      	mov	ip, r2
 8006f12:	4463      	add	r3, ip
 8006f14:	001a      	movs	r2, r3
 8006f16:	2303      	movs	r3, #3
 8006f18:	4013      	ands	r3, r2
 8006f1a:	d11b      	bne.n	8006f54 <breakPosixTime+0x1d0>
 8006f1c:	193b      	adds	r3, r7, r4
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	4a27      	ldr	r2, [pc, #156]	@ (8006fc0 <breakPosixTime+0x23c>)
 8006f22:	4694      	mov	ip, r2
 8006f24:	4463      	add	r3, ip
 8006f26:	2164      	movs	r1, #100	@ 0x64
 8006f28:	0018      	movs	r0, r3
 8006f2a:	f7f9 faab 	bl	8000484 <__aeabi_idivmod>
 8006f2e:	1e0b      	subs	r3, r1, #0
 8006f30:	d10b      	bne.n	8006f4a <breakPosixTime+0x1c6>
 8006f32:	193b      	adds	r3, r7, r4
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	4a22      	ldr	r2, [pc, #136]	@ (8006fc0 <breakPosixTime+0x23c>)
 8006f38:	4694      	mov	ip, r2
 8006f3a:	4463      	add	r3, ip
 8006f3c:	22c8      	movs	r2, #200	@ 0xc8
 8006f3e:	0051      	lsls	r1, r2, #1
 8006f40:	0018      	movs	r0, r3
 8006f42:	f7f9 fa9f 	bl	8000484 <__aeabi_idivmod>
 8006f46:	1e0b      	subs	r3, r1, #0
 8006f48:	d104      	bne.n	8006f54 <breakPosixTime+0x1d0>
        monthLength=29;
 8006f4a:	231d      	movs	r3, #29
 8006f4c:	18fb      	adds	r3, r7, r3
 8006f4e:	221d      	movs	r2, #29
 8006f50:	701a      	strb	r2, [r3, #0]
 8006f52:	e00c      	b.n	8006f6e <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8006f54:	231d      	movs	r3, #29
 8006f56:	18fb      	adds	r3, r7, r3
 8006f58:	221c      	movs	r2, #28
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	e007      	b.n	8006f6e <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8006f5e:	231e      	movs	r3, #30
 8006f60:	18fb      	adds	r3, r7, r3
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	231d      	movs	r3, #29
 8006f66:	18fb      	adds	r3, r7, r3
 8006f68:	4916      	ldr	r1, [pc, #88]	@ (8006fc4 <breakPosixTime+0x240>)
 8006f6a:	5c8a      	ldrb	r2, [r1, r2]
 8006f6c:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8006f6e:	211d      	movs	r1, #29
 8006f70:	187b      	adds	r3, r7, r1
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	69ba      	ldr	r2, [r7, #24]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d310      	bcc.n	8006f9c <breakPosixTime+0x218>
      time -= monthLength;
 8006f7a:	187b      	adds	r3, r7, r1
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8006f84:	211e      	movs	r1, #30
 8006f86:	187b      	adds	r3, r7, r1
 8006f88:	781a      	ldrb	r2, [r3, #0]
 8006f8a:	187b      	adds	r3, r7, r1
 8006f8c:	3201      	adds	r2, #1
 8006f8e:	701a      	strb	r2, [r3, #0]
 8006f90:	231e      	movs	r3, #30
 8006f92:	18fb      	adds	r3, r7, r3
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b0b      	cmp	r3, #11
 8006f98:	d9b1      	bls.n	8006efe <breakPosixTime+0x17a>
 8006f9a:	e000      	b.n	8006f9e <breakPosixTime+0x21a>
    } else {
        break;
 8006f9c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8006f9e:	231e      	movs	r3, #30
 8006fa0:	18fb      	adds	r3, r7, r3
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	709a      	strb	r2, [r3, #2]
//  printf("breakPosixTime: daynr: %d, %s %02d-%02d-%d %02d:%02d:%02d\r\n", currentDate->WeekDay, dayNames[currentDate->WeekDay - 1],
//      currentDate->Date, currentDate->Month, currentDate->Year, currentTime->Hours, currentTime->Minutes, currentTime->Seconds);
}
 8006fb8:	46c0      	nop			@ (mov r8, r8)
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	b009      	add	sp, #36	@ 0x24
 8006fbe:	bd90      	pop	{r4, r7, pc}
 8006fc0:	000007b2 	.word	0x000007b2
 8006fc4:	08024ad8 	.word	0x08024ad8

08006fc8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006fce:	003b      	movs	r3, r7
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	2308      	movs	r3, #8
 8006fd4:	001a      	movs	r2, r3
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	f018 fdb2 	bl	801fb40 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8006fdc:	4b30      	ldr	r3, [pc, #192]	@ (80070a0 <MX_ADC_Init+0xd8>)
 8006fde:	4a31      	ldr	r2, [pc, #196]	@ (80070a4 <MX_ADC_Init+0xdc>)
 8006fe0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8006fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80070a0 <MX_ADC_Init+0xd8>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8006fe8:	4b2d      	ldr	r3, [pc, #180]	@ (80070a0 <MX_ADC_Init+0xd8>)
 8006fea:	22c0      	movs	r2, #192	@ 0xc0
 8006fec:	0612      	lsls	r2, r2, #24
 8006fee:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8006ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80070a0 <MX_ADC_Init+0xd8>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80070a0 <MX_ADC_Init+0xd8>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8006ffc:	4b28      	ldr	r3, [pc, #160]	@ (80070a0 <MX_ADC_Init+0xd8>)
 8006ffe:	2201      	movs	r2, #1
 8007000:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007002:	4b27      	ldr	r3, [pc, #156]	@ (80070a0 <MX_ADC_Init+0xd8>)
 8007004:	2200      	movs	r2, #0
 8007006:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8007008:	4b25      	ldr	r3, [pc, #148]	@ (80070a0 <MX_ADC_Init+0xd8>)
 800700a:	2220      	movs	r2, #32
 800700c:	2100      	movs	r1, #0
 800700e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8007010:	4b23      	ldr	r3, [pc, #140]	@ (80070a0 <MX_ADC_Init+0xd8>)
 8007012:	2221      	movs	r2, #33	@ 0x21
 8007014:	2101      	movs	r1, #1
 8007016:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007018:	4b21      	ldr	r3, [pc, #132]	@ (80070a0 <MX_ADC_Init+0xd8>)
 800701a:	2200      	movs	r2, #0
 800701c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800701e:	4b20      	ldr	r3, [pc, #128]	@ (80070a0 <MX_ADC_Init+0xd8>)
 8007020:	22c2      	movs	r2, #194	@ 0xc2
 8007022:	32ff      	adds	r2, #255	@ 0xff
 8007024:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8007026:	4b1e      	ldr	r3, [pc, #120]	@ (80070a0 <MX_ADC_Init+0xd8>)
 8007028:	222c      	movs	r2, #44	@ 0x2c
 800702a:	2100      	movs	r1, #0
 800702c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800702e:	4b1c      	ldr	r3, [pc, #112]	@ (80070a0 <MX_ADC_Init+0xd8>)
 8007030:	2204      	movs	r2, #4
 8007032:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007034:	4b1a      	ldr	r3, [pc, #104]	@ (80070a0 <MX_ADC_Init+0xd8>)
 8007036:	2200      	movs	r2, #0
 8007038:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800703a:	4b19      	ldr	r3, [pc, #100]	@ (80070a0 <MX_ADC_Init+0xd8>)
 800703c:	2200      	movs	r2, #0
 800703e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8007040:	4b17      	ldr	r3, [pc, #92]	@ (80070a0 <MX_ADC_Init+0xd8>)
 8007042:	2200      	movs	r2, #0
 8007044:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8007046:	4b16      	ldr	r3, [pc, #88]	@ (80070a0 <MX_ADC_Init+0xd8>)
 8007048:	2200      	movs	r2, #0
 800704a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800704c:	4b14      	ldr	r3, [pc, #80]	@ (80070a0 <MX_ADC_Init+0xd8>)
 800704e:	0018      	movs	r0, r3
 8007050:	f007 fb86 	bl	800e760 <HAL_ADC_Init>
 8007054:	1e03      	subs	r3, r0, #0
 8007056:	d001      	beq.n	800705c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8007058:	f001 f878 	bl	800814c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800705c:	003b      	movs	r3, r7
 800705e:	4a12      	ldr	r2, [pc, #72]	@ (80070a8 <MX_ADC_Init+0xe0>)
 8007060:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007062:	003b      	movs	r3, r7
 8007064:	2280      	movs	r2, #128	@ 0x80
 8007066:	0152      	lsls	r2, r2, #5
 8007068:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800706a:	003a      	movs	r2, r7
 800706c:	4b0c      	ldr	r3, [pc, #48]	@ (80070a0 <MX_ADC_Init+0xd8>)
 800706e:	0011      	movs	r1, r2
 8007070:	0018      	movs	r0, r3
 8007072:	f007 fde5 	bl	800ec40 <HAL_ADC_ConfigChannel>
 8007076:	1e03      	subs	r3, r0, #0
 8007078:	d001      	beq.n	800707e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800707a:	f001 f867 	bl	800814c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800707e:	003b      	movs	r3, r7
 8007080:	4a0a      	ldr	r2, [pc, #40]	@ (80070ac <MX_ADC_Init+0xe4>)
 8007082:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007084:	003a      	movs	r2, r7
 8007086:	4b06      	ldr	r3, [pc, #24]	@ (80070a0 <MX_ADC_Init+0xd8>)
 8007088:	0011      	movs	r1, r2
 800708a:	0018      	movs	r0, r3
 800708c:	f007 fdd8 	bl	800ec40 <HAL_ADC_ConfigChannel>
 8007090:	1e03      	subs	r3, r0, #0
 8007092:	d001      	beq.n	8007098 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8007094:	f001 f85a 	bl	800814c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8007098:	46c0      	nop			@ (mov r8, r8)
 800709a:	46bd      	mov	sp, r7
 800709c:	b002      	add	sp, #8
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	20000d90 	.word	0x20000d90
 80070a4:	40012400 	.word	0x40012400
 80070a8:	38004000 	.word	0x38004000
 80070ac:	3c008000 	.word	0x3c008000

080070b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80070b0:	b590      	push	{r4, r7, lr}
 80070b2:	b089      	sub	sp, #36	@ 0x24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070b8:	240c      	movs	r4, #12
 80070ba:	193b      	adds	r3, r7, r4
 80070bc:	0018      	movs	r0, r3
 80070be:	2314      	movs	r3, #20
 80070c0:	001a      	movs	r2, r3
 80070c2:	2100      	movs	r1, #0
 80070c4:	f018 fd3c 	bl	801fb40 <memset>
  if(adcHandle->Instance==ADC1)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a14      	ldr	r2, [pc, #80]	@ (8007120 <HAL_ADC_MspInit+0x70>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d121      	bne.n	8007116 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80070d2:	4b14      	ldr	r3, [pc, #80]	@ (8007124 <HAL_ADC_MspInit+0x74>)
 80070d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070d6:	4b13      	ldr	r3, [pc, #76]	@ (8007124 <HAL_ADC_MspInit+0x74>)
 80070d8:	2180      	movs	r1, #128	@ 0x80
 80070da:	0089      	lsls	r1, r1, #2
 80070dc:	430a      	orrs	r2, r1
 80070de:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070e0:	4b10      	ldr	r3, [pc, #64]	@ (8007124 <HAL_ADC_MspInit+0x74>)
 80070e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007124 <HAL_ADC_MspInit+0x74>)
 80070e6:	2104      	movs	r1, #4
 80070e8:	430a      	orrs	r2, r1
 80070ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80070ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007124 <HAL_ADC_MspInit+0x74>)
 80070ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f0:	2204      	movs	r2, #4
 80070f2:	4013      	ands	r3, r2
 80070f4:	60bb      	str	r3, [r7, #8]
 80070f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 80070f8:	193b      	adds	r3, r7, r4
 80070fa:	2230      	movs	r2, #48	@ 0x30
 80070fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80070fe:	193b      	adds	r3, r7, r4
 8007100:	2203      	movs	r2, #3
 8007102:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007104:	193b      	adds	r3, r7, r4
 8007106:	2200      	movs	r2, #0
 8007108:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800710a:	193b      	adds	r3, r7, r4
 800710c:	4a06      	ldr	r2, [pc, #24]	@ (8007128 <HAL_ADC_MspInit+0x78>)
 800710e:	0019      	movs	r1, r3
 8007110:	0010      	movs	r0, r2
 8007112:	f008 fbb3 	bl	800f87c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007116:	46c0      	nop			@ (mov r8, r8)
 8007118:	46bd      	mov	sp, r7
 800711a:	b009      	add	sp, #36	@ 0x24
 800711c:	bd90      	pop	{r4, r7, pc}
 800711e:	46c0      	nop			@ (mov r8, r8)
 8007120:	40012400 	.word	0x40012400
 8007124:	40021000 	.word	0x40021000
 8007128:	50000800 	.word	0x50000800

0800712c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007132:	4b10      	ldr	r3, [pc, #64]	@ (8007174 <MX_DMA_Init+0x48>)
 8007134:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007136:	4b0f      	ldr	r3, [pc, #60]	@ (8007174 <MX_DMA_Init+0x48>)
 8007138:	2101      	movs	r1, #1
 800713a:	430a      	orrs	r2, r1
 800713c:	631a      	str	r2, [r3, #48]	@ 0x30
 800713e:	4b0d      	ldr	r3, [pc, #52]	@ (8007174 <MX_DMA_Init+0x48>)
 8007140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007142:	2201      	movs	r2, #1
 8007144:	4013      	ands	r3, r2
 8007146:	607b      	str	r3, [r7, #4]
 8007148:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800714a:	2200      	movs	r2, #0
 800714c:	2100      	movs	r1, #0
 800714e:	200a      	movs	r0, #10
 8007150:	f007 ff42 	bl	800efd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007154:	200a      	movs	r0, #10
 8007156:	f007 ff54 	bl	800f002 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800715a:	2200      	movs	r2, #0
 800715c:	2103      	movs	r1, #3
 800715e:	200b      	movs	r0, #11
 8007160:	f007 ff3a 	bl	800efd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8007164:	200b      	movs	r0, #11
 8007166:	f007 ff4c 	bl	800f002 <HAL_NVIC_EnableIRQ>

}
 800716a:	46c0      	nop			@ (mov r8, r8)
 800716c:	46bd      	mov	sp, r7
 800716e:	b002      	add	sp, #8
 8007170:	bd80      	pop	{r7, pc}
 8007172:	46c0      	nop			@ (mov r8, r8)
 8007174:	40021000 	.word	0x40021000

08007178 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2b7f      	cmp	r3, #127	@ 0x7f
 8007188:	d901      	bls.n	800718e <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800718a:	237f      	movs	r3, #127	@ 0x7f
 800718c:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800718e:	2017      	movs	r0, #23
 8007190:	183b      	adds	r3, r7, r0
 8007192:	490d      	ldr	r1, [pc, #52]	@ (80071c8 <accessLUT10log10+0x50>)
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	188a      	adds	r2, r1, r2
 8007198:	7812      	ldrb	r2, [r2, #0]
 800719a:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800719c:	0001      	movs	r1, r0
 800719e:	187b      	adds	r3, r7, r1
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	2206      	movs	r2, #6
 80071a4:	4113      	asrs	r3, r2
 80071a6:	001a      	movs	r2, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 80071ac:	187b      	adds	r3, r7, r1
 80071ae:	781a      	ldrb	r2, [r3, #0]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2106      	movs	r1, #6
 80071b6:	408b      	lsls	r3, r1
 80071b8:	1ad2      	subs	r2, r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	601a      	str	r2, [r3, #0]
}
 80071be:	46c0      	nop			@ (mov r8, r8)
 80071c0:	46bd      	mov	sp, r7
 80071c2:	b006      	add	sp, #24
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	46c0      	nop			@ (mov r8, r8)
 80071c8:	08024ae4 	.word	0x08024ae4

080071cc <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 80071cc:	b5b0      	push	{r4, r5, r7, lr}
 80071ce:	b090      	sub	sp, #64	@ 0x40
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6138      	str	r0, [r7, #16]
 80071d4:	6179      	str	r1, [r7, #20]
 80071d6:	60fa      	str	r2, [r7, #12]
 80071d8:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 80071da:	2308      	movs	r3, #8
 80071dc:	001a      	movs	r2, r3
 80071de:	3a20      	subs	r2, #32
 80071e0:	2a00      	cmp	r2, #0
 80071e2:	db03      	blt.n	80071ec <efficient10log10+0x20>
 80071e4:	2101      	movs	r1, #1
 80071e6:	4091      	lsls	r1, r2
 80071e8:	000d      	movs	r5, r1
 80071ea:	e008      	b.n	80071fe <efficient10log10+0x32>
 80071ec:	2220      	movs	r2, #32
 80071ee:	1ad2      	subs	r2, r2, r3
 80071f0:	2101      	movs	r1, #1
 80071f2:	40d1      	lsrs	r1, r2
 80071f4:	000a      	movs	r2, r1
 80071f6:	2100      	movs	r1, #0
 80071f8:	4099      	lsls	r1, r3
 80071fa:	000d      	movs	r5, r1
 80071fc:	4315      	orrs	r5, r2
 80071fe:	2201      	movs	r2, #1
 8007200:	409a      	lsls	r2, r3
 8007202:	0014      	movs	r4, r2
 8007204:	2201      	movs	r2, #1
 8007206:	4252      	negs	r2, r2
 8007208:	17d3      	asrs	r3, r2, #31
 800720a:	1912      	adds	r2, r2, r4
 800720c:	416b      	adcs	r3, r5
 800720e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007210:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 8007212:	2336      	movs	r3, #54	@ 0x36
 8007214:	2208      	movs	r2, #8
 8007216:	189b      	adds	r3, r3, r2
 8007218:	19db      	adds	r3, r3, r7
 800721a:	2200      	movs	r2, #0
 800721c:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800721e:	e017      	b.n	8007250 <efficient10log10+0x84>
    {
        P = P >> 1;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	07db      	lsls	r3, r3, #31
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	0852      	lsrs	r2, r2, #1
 8007228:	603a      	str	r2, [r7, #0]
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	431a      	orrs	r2, r3
 800722e:	603a      	str	r2, [r7, #0]
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	085b      	lsrs	r3, r3, #1
 8007234:	607b      	str	r3, [r7, #4]
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	687c      	ldr	r4, [r7, #4]
 800723a:	613b      	str	r3, [r7, #16]
 800723c:	617c      	str	r4, [r7, #20]
        bShift++;
 800723e:	2136      	movs	r1, #54	@ 0x36
 8007240:	2008      	movs	r0, #8
 8007242:	180b      	adds	r3, r1, r0
 8007244:	19db      	adds	r3, r3, r7
 8007246:	881a      	ldrh	r2, [r3, #0]
 8007248:	180b      	adds	r3, r1, r0
 800724a:	19db      	adds	r3, r3, r7
 800724c:	3201      	adds	r2, #1
 800724e:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007254:	429a      	cmp	r2, r3
 8007256:	d8e3      	bhi.n	8007220 <efficient10log10+0x54>
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800725c:	429a      	cmp	r2, r3
 800725e:	d103      	bne.n	8007268 <efficient10log10+0x9c>
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007264:	429a      	cmp	r2, r3
 8007266:	d8db      	bhi.n	8007220 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	2308      	movs	r3, #8
 800726c:	3b01      	subs	r3, #1
 800726e:	2101      	movs	r1, #1
 8007270:	4099      	lsls	r1, r3
 8007272:	000b      	movs	r3, r1
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8007278:	2300      	movs	r3, #0
 800727a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800727c:	2300      	movs	r3, #0
 800727e:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8007280:	231c      	movs	r3, #28
 8007282:	2408      	movs	r4, #8
 8007284:	191b      	adds	r3, r3, r4
 8007286:	19da      	adds	r2, r3, r7
 8007288:	2320      	movs	r3, #32
 800728a:	191b      	adds	r3, r3, r4
 800728c:	19d9      	adds	r1, r3, r7
 800728e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007290:	0018      	movs	r0, r3
 8007292:	f7ff ff71 	bl	8007178 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8007296:	2215      	movs	r2, #21
 8007298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729a:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800729c:	2036      	movs	r0, #54	@ 0x36
 800729e:	1902      	adds	r2, r0, r4
 80072a0:	19d2      	adds	r2, r2, r7
 80072a2:	8812      	ldrh	r2, [r2, #0]
 80072a4:	2103      	movs	r1, #3
 80072a6:	434a      	muls	r2, r1
 80072a8:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80072aa:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 80072ac:	0021      	movs	r1, r4
 80072ae:	1843      	adds	r3, r0, r1
 80072b0:	19db      	adds	r3, r3, r7
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	2201      	movs	r2, #1
 80072b6:	4353      	muls	r3, r2
 80072b8:	2203      	movs	r2, #3
 80072ba:	4113      	asrs	r3, r2
 80072bc:	001a      	movs	r2, r3
 80072be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c0:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 80072c2:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 80072c4:	2314      	movs	r3, #20
 80072c6:	185b      	adds	r3, r3, r1
 80072c8:	19da      	adds	r2, r3, r7
 80072ca:	2318      	movs	r3, #24
 80072cc:	185b      	adds	r3, r3, r1
 80072ce:	19db      	adds	r3, r3, r7
 80072d0:	0011      	movs	r1, r2
 80072d2:	0018      	movs	r0, r3
 80072d4:	f000 f80a 	bl	80072ec <correctIntFracNumber>
    integerPart[0] = intPart;
 80072d8:	6a3a      	ldr	r2, [r7, #32]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 80072de:	69fa      	ldr	r2, [r7, #28]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	601a      	str	r2, [r3, #0]
}
 80072e4:	46c0      	nop			@ (mov r8, r8)
 80072e6:	46bd      	mov	sp, r7
 80072e8:	b010      	add	sp, #64	@ 0x40
 80072ea:	bdb0      	pop	{r4, r5, r7, pc}

080072ec <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 80072f6:	e00a      	b.n	800730e <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3b0a      	subs	r3, #10
 8007308:	001a      	movs	r2, r3
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b09      	cmp	r3, #9
 8007314:	dcf0      	bgt.n	80072f8 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 8007316:	e00a      	b.n	800732e <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	1e5a      	subs	r2, r3, #1
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	330a      	adds	r3, #10
 8007328:	001a      	movs	r2, r3
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3309      	adds	r3, #9
 8007334:	dbf0      	blt.n	8007318 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	da0f      	bge.n	800735e <correctIntFracNumber+0x72>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	dd0b      	ble.n	800735e <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	1c5a      	adds	r2, r3, #1
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3b0a      	subs	r3, #10
 8007356:	001a      	movs	r2, r3
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800735c:	e012      	b.n	8007384 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	dd0e      	ble.n	8007384 <correctIntFracNumber+0x98>
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	da0a      	bge.n	8007384 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	1e5a      	subs	r2, r3, #1
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	330a      	adds	r3, #10
 800737e:	001a      	movs	r2, r3
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	601a      	str	r2, [r3, #0]
}
 8007384:	46c0      	nop			@ (mov r8, r8)
 8007386:	46bd      	mov	sp, r7
 8007388:	b002      	add	sp, #8
 800738a:	bd80      	pop	{r7, pc}

0800738c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800738c:	b590      	push	{r4, r7, lr}
 800738e:	b08b      	sub	sp, #44	@ 0x2c
 8007390:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007392:	2414      	movs	r4, #20
 8007394:	193b      	adds	r3, r7, r4
 8007396:	0018      	movs	r0, r3
 8007398:	2314      	movs	r3, #20
 800739a:	001a      	movs	r2, r3
 800739c:	2100      	movs	r1, #0
 800739e:	f018 fbcf 	bl	801fb40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80073a2:	4b8a      	ldr	r3, [pc, #552]	@ (80075cc <MX_GPIO_Init+0x240>)
 80073a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073a6:	4b89      	ldr	r3, [pc, #548]	@ (80075cc <MX_GPIO_Init+0x240>)
 80073a8:	2104      	movs	r1, #4
 80073aa:	430a      	orrs	r2, r1
 80073ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80073ae:	4b87      	ldr	r3, [pc, #540]	@ (80075cc <MX_GPIO_Init+0x240>)
 80073b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b2:	2204      	movs	r2, #4
 80073b4:	4013      	ands	r3, r2
 80073b6:	613b      	str	r3, [r7, #16]
 80073b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80073ba:	4b84      	ldr	r3, [pc, #528]	@ (80075cc <MX_GPIO_Init+0x240>)
 80073bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073be:	4b83      	ldr	r3, [pc, #524]	@ (80075cc <MX_GPIO_Init+0x240>)
 80073c0:	2180      	movs	r1, #128	@ 0x80
 80073c2:	430a      	orrs	r2, r1
 80073c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80073c6:	4b81      	ldr	r3, [pc, #516]	@ (80075cc <MX_GPIO_Init+0x240>)
 80073c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ca:	2280      	movs	r2, #128	@ 0x80
 80073cc:	4013      	ands	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80073d2:	4b7e      	ldr	r3, [pc, #504]	@ (80075cc <MX_GPIO_Init+0x240>)
 80073d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073d6:	4b7d      	ldr	r3, [pc, #500]	@ (80075cc <MX_GPIO_Init+0x240>)
 80073d8:	2101      	movs	r1, #1
 80073da:	430a      	orrs	r2, r1
 80073dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80073de:	4b7b      	ldr	r3, [pc, #492]	@ (80075cc <MX_GPIO_Init+0x240>)
 80073e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e2:	2201      	movs	r2, #1
 80073e4:	4013      	ands	r3, r2
 80073e6:	60bb      	str	r3, [r7, #8]
 80073e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80073ea:	4b78      	ldr	r3, [pc, #480]	@ (80075cc <MX_GPIO_Init+0x240>)
 80073ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ee:	4b77      	ldr	r3, [pc, #476]	@ (80075cc <MX_GPIO_Init+0x240>)
 80073f0:	2102      	movs	r1, #2
 80073f2:	430a      	orrs	r2, r1
 80073f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80073f6:	4b75      	ldr	r3, [pc, #468]	@ (80075cc <MX_GPIO_Init+0x240>)
 80073f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fa:	2202      	movs	r2, #2
 80073fc:	4013      	ands	r3, r2
 80073fe:	607b      	str	r3, [r7, #4]
 8007400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007402:	4b72      	ldr	r3, [pc, #456]	@ (80075cc <MX_GPIO_Init+0x240>)
 8007404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007406:	4b71      	ldr	r3, [pc, #452]	@ (80075cc <MX_GPIO_Init+0x240>)
 8007408:	2108      	movs	r1, #8
 800740a:	430a      	orrs	r2, r1
 800740c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800740e:	4b6f      	ldr	r3, [pc, #444]	@ (80075cc <MX_GPIO_Init+0x240>)
 8007410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007412:	2208      	movs	r2, #8
 8007414:	4013      	ands	r3, r2
 8007416:	603b      	str	r3, [r7, #0]
 8007418:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800741a:	4b6d      	ldr	r3, [pc, #436]	@ (80075d0 <MX_GPIO_Init+0x244>)
 800741c:	2201      	movs	r2, #1
 800741e:	2101      	movs	r1, #1
 8007420:	0018      	movs	r0, r3
 8007422:	f008 fbc6 	bl	800fbb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8007426:	4b6a      	ldr	r3, [pc, #424]	@ (80075d0 <MX_GPIO_Init+0x244>)
 8007428:	2200      	movs	r2, #0
 800742a:	2102      	movs	r1, #2
 800742c:	0018      	movs	r0, r3
 800742e:	f008 fbc0 	bl	800fbb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8007432:	4968      	ldr	r1, [pc, #416]	@ (80075d4 <MX_GPIO_Init+0x248>)
 8007434:	4b68      	ldr	r3, [pc, #416]	@ (80075d8 <MX_GPIO_Init+0x24c>)
 8007436:	2201      	movs	r2, #1
 8007438:	0018      	movs	r0, r3
 800743a:	f008 fbba 	bl	800fbb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800743e:	2380      	movs	r3, #128	@ 0x80
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	4866      	ldr	r0, [pc, #408]	@ (80075dc <MX_GPIO_Init+0x250>)
 8007444:	2201      	movs	r2, #1
 8007446:	0019      	movs	r1, r3
 8007448:	f008 fbb3 	bl	800fbb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800744c:	2380      	movs	r3, #128	@ 0x80
 800744e:	015b      	lsls	r3, r3, #5
 8007450:	4862      	ldr	r0, [pc, #392]	@ (80075dc <MX_GPIO_Init+0x250>)
 8007452:	2200      	movs	r2, #0
 8007454:	0019      	movs	r1, r3
 8007456:	f008 fbac 	bl	800fbb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800745a:	193b      	adds	r3, r7, r4
 800745c:	4a60      	ldr	r2, [pc, #384]	@ (80075e0 <MX_GPIO_Init+0x254>)
 800745e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007460:	193b      	adds	r3, r7, r4
 8007462:	2203      	movs	r2, #3
 8007464:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007466:	193b      	adds	r3, r7, r4
 8007468:	2200      	movs	r2, #0
 800746a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800746c:	193b      	adds	r3, r7, r4
 800746e:	4a5b      	ldr	r2, [pc, #364]	@ (80075dc <MX_GPIO_Init+0x250>)
 8007470:	0019      	movs	r1, r3
 8007472:	0010      	movs	r0, r2
 8007474:	f008 fa02 	bl	800f87c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8007478:	193b      	adds	r3, r7, r4
 800747a:	2203      	movs	r2, #3
 800747c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800747e:	193b      	adds	r3, r7, r4
 8007480:	2201      	movs	r2, #1
 8007482:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007484:	193b      	adds	r3, r7, r4
 8007486:	2200      	movs	r2, #0
 8007488:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800748a:	193b      	adds	r3, r7, r4
 800748c:	2200      	movs	r2, #0
 800748e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007490:	193b      	adds	r3, r7, r4
 8007492:	4a4f      	ldr	r2, [pc, #316]	@ (80075d0 <MX_GPIO_Init+0x244>)
 8007494:	0019      	movs	r1, r3
 8007496:	0010      	movs	r0, r2
 8007498:	f008 f9f0 	bl	800f87c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800749c:	193b      	adds	r3, r7, r4
 800749e:	2270      	movs	r2, #112	@ 0x70
 80074a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074a2:	193b      	adds	r3, r7, r4
 80074a4:	2203      	movs	r2, #3
 80074a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074a8:	193b      	adds	r3, r7, r4
 80074aa:	2200      	movs	r2, #0
 80074ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ae:	193a      	adds	r2, r7, r4
 80074b0:	23a0      	movs	r3, #160	@ 0xa0
 80074b2:	05db      	lsls	r3, r3, #23
 80074b4:	0011      	movs	r1, r2
 80074b6:	0018      	movs	r0, r3
 80074b8:	f008 f9e0 	bl	800f87c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 80074bc:	193b      	adds	r3, r7, r4
 80074be:	22c0      	movs	r2, #192	@ 0xc0
 80074c0:	0052      	lsls	r2, r2, #1
 80074c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074c4:	193b      	adds	r3, r7, r4
 80074c6:	2200      	movs	r2, #0
 80074c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ca:	193b      	adds	r3, r7, r4
 80074cc:	2200      	movs	r2, #0
 80074ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074d0:	193a      	adds	r2, r7, r4
 80074d2:	23a0      	movs	r3, #160	@ 0xa0
 80074d4:	05db      	lsls	r3, r3, #23
 80074d6:	0011      	movs	r1, r2
 80074d8:	0018      	movs	r0, r3
 80074da:	f008 f9cf 	bl	800f87c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80074de:	193b      	adds	r3, r7, r4
 80074e0:	4a3c      	ldr	r2, [pc, #240]	@ (80075d4 <MX_GPIO_Init+0x248>)
 80074e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074e4:	193b      	adds	r3, r7, r4
 80074e6:	2201      	movs	r2, #1
 80074e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ea:	193b      	adds	r3, r7, r4
 80074ec:	2200      	movs	r2, #0
 80074ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074f0:	193b      	adds	r3, r7, r4
 80074f2:	2200      	movs	r2, #0
 80074f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074f6:	193b      	adds	r3, r7, r4
 80074f8:	4a37      	ldr	r2, [pc, #220]	@ (80075d8 <MX_GPIO_Init+0x24c>)
 80074fa:	0019      	movs	r1, r3
 80074fc:	0010      	movs	r0, r2
 80074fe:	f008 f9bd 	bl	800f87c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8007502:	193b      	adds	r3, r7, r4
 8007504:	4a37      	ldr	r2, [pc, #220]	@ (80075e4 <MX_GPIO_Init+0x258>)
 8007506:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007508:	193b      	adds	r3, r7, r4
 800750a:	2203      	movs	r2, #3
 800750c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800750e:	193b      	adds	r3, r7, r4
 8007510:	2200      	movs	r2, #0
 8007512:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007514:	193b      	adds	r3, r7, r4
 8007516:	4a30      	ldr	r2, [pc, #192]	@ (80075d8 <MX_GPIO_Init+0x24c>)
 8007518:	0019      	movs	r1, r3
 800751a:	0010      	movs	r0, r2
 800751c:	f008 f9ae 	bl	800f87c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8007520:	0021      	movs	r1, r4
 8007522:	187b      	adds	r3, r7, r1
 8007524:	2280      	movs	r2, #128	@ 0x80
 8007526:	0092      	lsls	r2, r2, #2
 8007528:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800752a:	000c      	movs	r4, r1
 800752c:	193b      	adds	r3, r7, r4
 800752e:	2200      	movs	r2, #0
 8007530:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007532:	193b      	adds	r3, r7, r4
 8007534:	2200      	movs	r2, #0
 8007536:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8007538:	193b      	adds	r3, r7, r4
 800753a:	4a28      	ldr	r2, [pc, #160]	@ (80075dc <MX_GPIO_Init+0x250>)
 800753c:	0019      	movs	r1, r3
 800753e:	0010      	movs	r0, r2
 8007540:	f008 f99c 	bl	800f87c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8007544:	193b      	adds	r3, r7, r4
 8007546:	2280      	movs	r2, #128	@ 0x80
 8007548:	0212      	lsls	r2, r2, #8
 800754a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800754c:	193b      	adds	r3, r7, r4
 800754e:	2288      	movs	r2, #136	@ 0x88
 8007550:	0352      	lsls	r2, r2, #13
 8007552:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007554:	193b      	adds	r3, r7, r4
 8007556:	2200      	movs	r2, #0
 8007558:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800755a:	193a      	adds	r2, r7, r4
 800755c:	23a0      	movs	r3, #160	@ 0xa0
 800755e:	05db      	lsls	r3, r3, #23
 8007560:	0011      	movs	r1, r2
 8007562:	0018      	movs	r0, r3
 8007564:	f008 f98a 	bl	800f87c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8007568:	0021      	movs	r1, r4
 800756a:	187b      	adds	r3, r7, r1
 800756c:	22c0      	movs	r2, #192	@ 0xc0
 800756e:	0152      	lsls	r2, r2, #5
 8007570:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007572:	000c      	movs	r4, r1
 8007574:	193b      	adds	r3, r7, r4
 8007576:	2201      	movs	r2, #1
 8007578:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800757a:	193b      	adds	r3, r7, r4
 800757c:	2200      	movs	r2, #0
 800757e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007580:	193b      	adds	r3, r7, r4
 8007582:	2200      	movs	r2, #0
 8007584:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007586:	193b      	adds	r3, r7, r4
 8007588:	4a14      	ldr	r2, [pc, #80]	@ (80075dc <MX_GPIO_Init+0x250>)
 800758a:	0019      	movs	r1, r3
 800758c:	0010      	movs	r0, r2
 800758e:	f008 f975 	bl	800f87c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8007592:	0021      	movs	r1, r4
 8007594:	187b      	adds	r3, r7, r1
 8007596:	2204      	movs	r2, #4
 8007598:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800759a:	187b      	adds	r3, r7, r1
 800759c:	2200      	movs	r2, #0
 800759e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80075a0:	187b      	adds	r3, r7, r1
 80075a2:	2201      	movs	r2, #1
 80075a4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80075a6:	187b      	adds	r3, r7, r1
 80075a8:	4a0f      	ldr	r2, [pc, #60]	@ (80075e8 <MX_GPIO_Init+0x25c>)
 80075aa:	0019      	movs	r1, r3
 80075ac:	0010      	movs	r0, r2
 80075ae:	f008 f965 	bl	800f87c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80075b2:	2200      	movs	r2, #0
 80075b4:	2100      	movs	r1, #0
 80075b6:	2007      	movs	r0, #7
 80075b8:	f007 fd0e 	bl	800efd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80075bc:	2007      	movs	r0, #7
 80075be:	f007 fd20 	bl	800f002 <HAL_NVIC_EnableIRQ>

}
 80075c2:	46c0      	nop			@ (mov r8, r8)
 80075c4:	46bd      	mov	sp, r7
 80075c6:	b00b      	add	sp, #44	@ 0x2c
 80075c8:	bd90      	pop	{r4, r7, pc}
 80075ca:	46c0      	nop			@ (mov r8, r8)
 80075cc:	40021000 	.word	0x40021000
 80075d0:	50001c00 	.word	0x50001c00
 80075d4:	00000301 	.word	0x00000301
 80075d8:	50000400 	.word	0x50000400
 80075dc:	50000800 	.word	0x50000800
 80075e0:	0000200c 	.word	0x0000200c
 80075e4:	0000403e 	.word	0x0000403e
 80075e8:	50000c00 	.word	0x50000c00

080075ec <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2100      	movs	r1, #0
 80075fa:	0018      	movs	r0, r3
 80075fc:	f00e feb4 	bl	8016368 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2108      	movs	r1, #8
 8007604:	0018      	movs	r0, r3
 8007606:	f00e feaf 	bl	8016368 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	210c      	movs	r1, #12
 800760e:	0018      	movs	r0, r3
 8007610:	f00e feaa 	bl	8016368 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8007614:	2380      	movs	r3, #128	@ 0x80
 8007616:	05db      	lsls	r3, r3, #23
 8007618:	22fa      	movs	r2, #250	@ 0xfa
 800761a:	0112      	lsls	r2, r2, #4
 800761c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800761e:	2380      	movs	r3, #128	@ 0x80
 8007620:	05db      	lsls	r3, r3, #23
 8007622:	22fa      	movs	r2, #250	@ 0xfa
 8007624:	0112      	lsls	r2, r2, #4
 8007626:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8007628:	2380      	movs	r3, #128	@ 0x80
 800762a:	05db      	lsls	r3, r3, #23
 800762c:	22fa      	movs	r2, #250	@ 0xfa
 800762e:	0112      	lsls	r2, r2, #4
 8007630:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8007632:	2380      	movs	r3, #128	@ 0x80
 8007634:	05db      	lsls	r3, r3, #23
 8007636:	22fa      	movs	r2, #250	@ 0xfa
 8007638:	0112      	lsls	r2, r2, #4
 800763a:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2100      	movs	r1, #0
 8007640:	0018      	movs	r0, r3
 8007642:	f00e fe91 	bl	8016368 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2104      	movs	r1, #4
 800764a:	0018      	movs	r0, r3
 800764c:	f00e fe8c 	bl	8016368 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	2108      	movs	r1, #8
 8007654:	0018      	movs	r0, r3
 8007656:	f00e fe87 	bl	8016368 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800765a:	4b0a      	ldr	r3, [pc, #40]	@ (8007684 <GPIO_InitPWMLEDs+0x98>)
 800765c:	22fa      	movs	r2, #250	@ 0xfa
 800765e:	0112      	lsls	r2, r2, #4
 8007660:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8007662:	4b08      	ldr	r3, [pc, #32]	@ (8007684 <GPIO_InitPWMLEDs+0x98>)
 8007664:	22fa      	movs	r2, #250	@ 0xfa
 8007666:	0112      	lsls	r2, r2, #4
 8007668:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800766a:	4b06      	ldr	r3, [pc, #24]	@ (8007684 <GPIO_InitPWMLEDs+0x98>)
 800766c:	22fa      	movs	r2, #250	@ 0xfa
 800766e:	0112      	lsls	r2, r2, #4
 8007670:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8007672:	4b04      	ldr	r3, [pc, #16]	@ (8007684 <GPIO_InitPWMLEDs+0x98>)
 8007674:	22fa      	movs	r2, #250	@ 0xfa
 8007676:	0112      	lsls	r2, r2, #4
 8007678:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800767a:	46c0      	nop			@ (mov r8, r8)
 800767c:	46bd      	mov	sp, r7
 800767e:	b002      	add	sp, #8
 8007680:	bd80      	pop	{r7, pc}
 8007682:	46c0      	nop			@ (mov r8, r8)
 8007684:	40000400 	.word	0x40000400

08007688 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800768c:	4b1b      	ldr	r3, [pc, #108]	@ (80076fc <MX_I2C1_Init+0x74>)
 800768e:	4a1c      	ldr	r2, [pc, #112]	@ (8007700 <MX_I2C1_Init+0x78>)
 8007690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8007692:	4b1a      	ldr	r3, [pc, #104]	@ (80076fc <MX_I2C1_Init+0x74>)
 8007694:	4a1b      	ldr	r2, [pc, #108]	@ (8007704 <MX_I2C1_Init+0x7c>)
 8007696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007698:	4b18      	ldr	r3, [pc, #96]	@ (80076fc <MX_I2C1_Init+0x74>)
 800769a:	2200      	movs	r2, #0
 800769c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800769e:	4b17      	ldr	r3, [pc, #92]	@ (80076fc <MX_I2C1_Init+0x74>)
 80076a0:	2201      	movs	r2, #1
 80076a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80076a4:	4b15      	ldr	r3, [pc, #84]	@ (80076fc <MX_I2C1_Init+0x74>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80076aa:	4b14      	ldr	r3, [pc, #80]	@ (80076fc <MX_I2C1_Init+0x74>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80076b0:	4b12      	ldr	r3, [pc, #72]	@ (80076fc <MX_I2C1_Init+0x74>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80076b6:	4b11      	ldr	r3, [pc, #68]	@ (80076fc <MX_I2C1_Init+0x74>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80076bc:	4b0f      	ldr	r3, [pc, #60]	@ (80076fc <MX_I2C1_Init+0x74>)
 80076be:	2200      	movs	r2, #0
 80076c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80076c2:	4b0e      	ldr	r3, [pc, #56]	@ (80076fc <MX_I2C1_Init+0x74>)
 80076c4:	0018      	movs	r0, r3
 80076c6:	f008 faad 	bl	800fc24 <HAL_I2C_Init>
 80076ca:	1e03      	subs	r3, r0, #0
 80076cc:	d001      	beq.n	80076d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80076ce:	f000 fd3d 	bl	800814c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80076d2:	4b0a      	ldr	r3, [pc, #40]	@ (80076fc <MX_I2C1_Init+0x74>)
 80076d4:	2100      	movs	r1, #0
 80076d6:	0018      	movs	r0, r3
 80076d8:	f00a fe7e 	bl	80123d8 <HAL_I2CEx_ConfigAnalogFilter>
 80076dc:	1e03      	subs	r3, r0, #0
 80076de:	d001      	beq.n	80076e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80076e0:	f000 fd34 	bl	800814c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80076e4:	4b05      	ldr	r3, [pc, #20]	@ (80076fc <MX_I2C1_Init+0x74>)
 80076e6:	2100      	movs	r1, #0
 80076e8:	0018      	movs	r0, r3
 80076ea:	f00a fec1 	bl	8012470 <HAL_I2CEx_ConfigDigitalFilter>
 80076ee:	1e03      	subs	r3, r0, #0
 80076f0:	d001      	beq.n	80076f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80076f2:	f000 fd2b 	bl	800814c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80076f6:	46c0      	nop			@ (mov r8, r8)
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20000dec 	.word	0x20000dec
 8007700:	40005400 	.word	0x40005400
 8007704:	00503d58 	.word	0x00503d58

08007708 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800770c:	4b1b      	ldr	r3, [pc, #108]	@ (800777c <MX_I2C2_Init+0x74>)
 800770e:	4a1c      	ldr	r2, [pc, #112]	@ (8007780 <MX_I2C2_Init+0x78>)
 8007710:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8007712:	4b1a      	ldr	r3, [pc, #104]	@ (800777c <MX_I2C2_Init+0x74>)
 8007714:	4a1b      	ldr	r2, [pc, #108]	@ (8007784 <MX_I2C2_Init+0x7c>)
 8007716:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8007718:	4b18      	ldr	r3, [pc, #96]	@ (800777c <MX_I2C2_Init+0x74>)
 800771a:	2200      	movs	r2, #0
 800771c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800771e:	4b17      	ldr	r3, [pc, #92]	@ (800777c <MX_I2C2_Init+0x74>)
 8007720:	2201      	movs	r2, #1
 8007722:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007724:	4b15      	ldr	r3, [pc, #84]	@ (800777c <MX_I2C2_Init+0x74>)
 8007726:	2200      	movs	r2, #0
 8007728:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800772a:	4b14      	ldr	r3, [pc, #80]	@ (800777c <MX_I2C2_Init+0x74>)
 800772c:	2200      	movs	r2, #0
 800772e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007730:	4b12      	ldr	r3, [pc, #72]	@ (800777c <MX_I2C2_Init+0x74>)
 8007732:	2200      	movs	r2, #0
 8007734:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007736:	4b11      	ldr	r3, [pc, #68]	@ (800777c <MX_I2C2_Init+0x74>)
 8007738:	2200      	movs	r2, #0
 800773a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800773c:	4b0f      	ldr	r3, [pc, #60]	@ (800777c <MX_I2C2_Init+0x74>)
 800773e:	2200      	movs	r2, #0
 8007740:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007742:	4b0e      	ldr	r3, [pc, #56]	@ (800777c <MX_I2C2_Init+0x74>)
 8007744:	0018      	movs	r0, r3
 8007746:	f008 fa6d 	bl	800fc24 <HAL_I2C_Init>
 800774a:	1e03      	subs	r3, r0, #0
 800774c:	d001      	beq.n	8007752 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800774e:	f000 fcfd 	bl	800814c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007752:	4b0a      	ldr	r3, [pc, #40]	@ (800777c <MX_I2C2_Init+0x74>)
 8007754:	2100      	movs	r1, #0
 8007756:	0018      	movs	r0, r3
 8007758:	f00a fe3e 	bl	80123d8 <HAL_I2CEx_ConfigAnalogFilter>
 800775c:	1e03      	subs	r3, r0, #0
 800775e:	d001      	beq.n	8007764 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007760:	f000 fcf4 	bl	800814c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007764:	4b05      	ldr	r3, [pc, #20]	@ (800777c <MX_I2C2_Init+0x74>)
 8007766:	2100      	movs	r1, #0
 8007768:	0018      	movs	r0, r3
 800776a:	f00a fe81 	bl	8012470 <HAL_I2CEx_ConfigDigitalFilter>
 800776e:	1e03      	subs	r3, r0, #0
 8007770:	d001      	beq.n	8007776 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007772:	f000 fceb 	bl	800814c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007776:	46c0      	nop			@ (mov r8, r8)
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20000e40 	.word	0x20000e40
 8007780:	40005800 	.word	0x40005800
 8007784:	00503d58 	.word	0x00503d58

08007788 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007788:	b590      	push	{r4, r7, lr}
 800778a:	b08b      	sub	sp, #44	@ 0x2c
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007790:	2414      	movs	r4, #20
 8007792:	193b      	adds	r3, r7, r4
 8007794:	0018      	movs	r0, r3
 8007796:	2314      	movs	r3, #20
 8007798:	001a      	movs	r2, r3
 800779a:	2100      	movs	r1, #0
 800779c:	f018 f9d0 	bl	801fb40 <memset>
  if(i2cHandle->Instance==I2C1)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a5d      	ldr	r2, [pc, #372]	@ (800791c <HAL_I2C_MspInit+0x194>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d000      	beq.n	80077ac <HAL_I2C_MspInit+0x24>
 80077aa:	e083      	b.n	80078b4 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077ac:	4b5c      	ldr	r3, [pc, #368]	@ (8007920 <HAL_I2C_MspInit+0x198>)
 80077ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077b0:	4b5b      	ldr	r3, [pc, #364]	@ (8007920 <HAL_I2C_MspInit+0x198>)
 80077b2:	2102      	movs	r1, #2
 80077b4:	430a      	orrs	r2, r1
 80077b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80077b8:	4b59      	ldr	r3, [pc, #356]	@ (8007920 <HAL_I2C_MspInit+0x198>)
 80077ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077bc:	2202      	movs	r2, #2
 80077be:	4013      	ands	r3, r2
 80077c0:	613b      	str	r3, [r7, #16]
 80077c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80077c4:	0021      	movs	r1, r4
 80077c6:	187b      	adds	r3, r7, r1
 80077c8:	22c0      	movs	r2, #192	@ 0xc0
 80077ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80077cc:	187b      	adds	r3, r7, r1
 80077ce:	2212      	movs	r2, #18
 80077d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077d2:	187b      	adds	r3, r7, r1
 80077d4:	2200      	movs	r2, #0
 80077d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077d8:	187b      	adds	r3, r7, r1
 80077da:	2203      	movs	r2, #3
 80077dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80077de:	187b      	adds	r3, r7, r1
 80077e0:	2201      	movs	r2, #1
 80077e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077e4:	187b      	adds	r3, r7, r1
 80077e6:	4a4f      	ldr	r2, [pc, #316]	@ (8007924 <HAL_I2C_MspInit+0x19c>)
 80077e8:	0019      	movs	r1, r3
 80077ea:	0010      	movs	r0, r2
 80077ec:	f008 f846 	bl	800f87c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80077f0:	4b4b      	ldr	r3, [pc, #300]	@ (8007920 <HAL_I2C_MspInit+0x198>)
 80077f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077f4:	4b4a      	ldr	r3, [pc, #296]	@ (8007920 <HAL_I2C_MspInit+0x198>)
 80077f6:	2180      	movs	r1, #128	@ 0x80
 80077f8:	0389      	lsls	r1, r1, #14
 80077fa:	430a      	orrs	r2, r1
 80077fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80077fe:	4b4a      	ldr	r3, [pc, #296]	@ (8007928 <HAL_I2C_MspInit+0x1a0>)
 8007800:	4a4a      	ldr	r2, [pc, #296]	@ (800792c <HAL_I2C_MspInit+0x1a4>)
 8007802:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8007804:	4b48      	ldr	r3, [pc, #288]	@ (8007928 <HAL_I2C_MspInit+0x1a0>)
 8007806:	2206      	movs	r2, #6
 8007808:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800780a:	4b47      	ldr	r3, [pc, #284]	@ (8007928 <HAL_I2C_MspInit+0x1a0>)
 800780c:	2200      	movs	r2, #0
 800780e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007810:	4b45      	ldr	r3, [pc, #276]	@ (8007928 <HAL_I2C_MspInit+0x1a0>)
 8007812:	2200      	movs	r2, #0
 8007814:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007816:	4b44      	ldr	r3, [pc, #272]	@ (8007928 <HAL_I2C_MspInit+0x1a0>)
 8007818:	2280      	movs	r2, #128	@ 0x80
 800781a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800781c:	4b42      	ldr	r3, [pc, #264]	@ (8007928 <HAL_I2C_MspInit+0x1a0>)
 800781e:	2200      	movs	r2, #0
 8007820:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007822:	4b41      	ldr	r3, [pc, #260]	@ (8007928 <HAL_I2C_MspInit+0x1a0>)
 8007824:	2200      	movs	r2, #0
 8007826:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007828:	4b3f      	ldr	r3, [pc, #252]	@ (8007928 <HAL_I2C_MspInit+0x1a0>)
 800782a:	2200      	movs	r2, #0
 800782c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800782e:	4b3e      	ldr	r3, [pc, #248]	@ (8007928 <HAL_I2C_MspInit+0x1a0>)
 8007830:	2200      	movs	r2, #0
 8007832:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007834:	4b3c      	ldr	r3, [pc, #240]	@ (8007928 <HAL_I2C_MspInit+0x1a0>)
 8007836:	0018      	movs	r0, r3
 8007838:	f007 fc04 	bl	800f044 <HAL_DMA_Init>
 800783c:	1e03      	subs	r3, r0, #0
 800783e:	d001      	beq.n	8007844 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8007840:	f000 fc84 	bl	800814c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a38      	ldr	r2, [pc, #224]	@ (8007928 <HAL_I2C_MspInit+0x1a0>)
 8007848:	63da      	str	r2, [r3, #60]	@ 0x3c
 800784a:	4b37      	ldr	r3, [pc, #220]	@ (8007928 <HAL_I2C_MspInit+0x1a0>)
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8007850:	4b37      	ldr	r3, [pc, #220]	@ (8007930 <HAL_I2C_MspInit+0x1a8>)
 8007852:	4a38      	ldr	r2, [pc, #224]	@ (8007934 <HAL_I2C_MspInit+0x1ac>)
 8007854:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8007856:	4b36      	ldr	r3, [pc, #216]	@ (8007930 <HAL_I2C_MspInit+0x1a8>)
 8007858:	2206      	movs	r2, #6
 800785a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800785c:	4b34      	ldr	r3, [pc, #208]	@ (8007930 <HAL_I2C_MspInit+0x1a8>)
 800785e:	2210      	movs	r2, #16
 8007860:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007862:	4b33      	ldr	r3, [pc, #204]	@ (8007930 <HAL_I2C_MspInit+0x1a8>)
 8007864:	2200      	movs	r2, #0
 8007866:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007868:	4b31      	ldr	r3, [pc, #196]	@ (8007930 <HAL_I2C_MspInit+0x1a8>)
 800786a:	2280      	movs	r2, #128	@ 0x80
 800786c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800786e:	4b30      	ldr	r3, [pc, #192]	@ (8007930 <HAL_I2C_MspInit+0x1a8>)
 8007870:	2200      	movs	r2, #0
 8007872:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007874:	4b2e      	ldr	r3, [pc, #184]	@ (8007930 <HAL_I2C_MspInit+0x1a8>)
 8007876:	2200      	movs	r2, #0
 8007878:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800787a:	4b2d      	ldr	r3, [pc, #180]	@ (8007930 <HAL_I2C_MspInit+0x1a8>)
 800787c:	2200      	movs	r2, #0
 800787e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007880:	4b2b      	ldr	r3, [pc, #172]	@ (8007930 <HAL_I2C_MspInit+0x1a8>)
 8007882:	2200      	movs	r2, #0
 8007884:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007886:	4b2a      	ldr	r3, [pc, #168]	@ (8007930 <HAL_I2C_MspInit+0x1a8>)
 8007888:	0018      	movs	r0, r3
 800788a:	f007 fbdb 	bl	800f044 <HAL_DMA_Init>
 800788e:	1e03      	subs	r3, r0, #0
 8007890:	d001      	beq.n	8007896 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8007892:	f000 fc5b 	bl	800814c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a25      	ldr	r2, [pc, #148]	@ (8007930 <HAL_I2C_MspInit+0x1a8>)
 800789a:	639a      	str	r2, [r3, #56]	@ 0x38
 800789c:	4b24      	ldr	r3, [pc, #144]	@ (8007930 <HAL_I2C_MspInit+0x1a8>)
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80078a2:	2200      	movs	r2, #0
 80078a4:	2100      	movs	r1, #0
 80078a6:	2017      	movs	r0, #23
 80078a8:	f007 fb96 	bl	800efd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80078ac:	2017      	movs	r0, #23
 80078ae:	f007 fba8 	bl	800f002 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80078b2:	e02e      	b.n	8007912 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a1f      	ldr	r2, [pc, #124]	@ (8007938 <HAL_I2C_MspInit+0x1b0>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d129      	bne.n	8007912 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078be:	4b18      	ldr	r3, [pc, #96]	@ (8007920 <HAL_I2C_MspInit+0x198>)
 80078c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078c2:	4b17      	ldr	r3, [pc, #92]	@ (8007920 <HAL_I2C_MspInit+0x198>)
 80078c4:	2102      	movs	r1, #2
 80078c6:	430a      	orrs	r2, r1
 80078c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80078ca:	4b15      	ldr	r3, [pc, #84]	@ (8007920 <HAL_I2C_MspInit+0x198>)
 80078cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ce:	2202      	movs	r2, #2
 80078d0:	4013      	ands	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80078d6:	2114      	movs	r1, #20
 80078d8:	187b      	adds	r3, r7, r1
 80078da:	22c0      	movs	r2, #192	@ 0xc0
 80078dc:	0112      	lsls	r2, r2, #4
 80078de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80078e0:	187b      	adds	r3, r7, r1
 80078e2:	2212      	movs	r2, #18
 80078e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078e6:	187b      	adds	r3, r7, r1
 80078e8:	2200      	movs	r2, #0
 80078ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078ec:	187b      	adds	r3, r7, r1
 80078ee:	2203      	movs	r2, #3
 80078f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80078f2:	187b      	adds	r3, r7, r1
 80078f4:	2206      	movs	r2, #6
 80078f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078f8:	187b      	adds	r3, r7, r1
 80078fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007924 <HAL_I2C_MspInit+0x19c>)
 80078fc:	0019      	movs	r1, r3
 80078fe:	0010      	movs	r0, r2
 8007900:	f007 ffbc 	bl	800f87c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007904:	4b06      	ldr	r3, [pc, #24]	@ (8007920 <HAL_I2C_MspInit+0x198>)
 8007906:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007908:	4b05      	ldr	r3, [pc, #20]	@ (8007920 <HAL_I2C_MspInit+0x198>)
 800790a:	2180      	movs	r1, #128	@ 0x80
 800790c:	03c9      	lsls	r1, r1, #15
 800790e:	430a      	orrs	r2, r1
 8007910:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007912:	46c0      	nop			@ (mov r8, r8)
 8007914:	46bd      	mov	sp, r7
 8007916:	b00b      	add	sp, #44	@ 0x2c
 8007918:	bd90      	pop	{r4, r7, pc}
 800791a:	46c0      	nop			@ (mov r8, r8)
 800791c:	40005400 	.word	0x40005400
 8007920:	40021000 	.word	0x40021000
 8007924:	50000400 	.word	0x50000400
 8007928:	20000e94 	.word	0x20000e94
 800792c:	40020030 	.word	0x40020030
 8007930:	20000edc 	.word	0x20000edc
 8007934:	4002001c 	.word	0x4002001c
 8007938:	40005800 	.word	0x40005800

0800793c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007940:	4b10      	ldr	r3, [pc, #64]	@ (8007984 <MX_I2S2_Init+0x48>)
 8007942:	4a11      	ldr	r2, [pc, #68]	@ (8007988 <MX_I2S2_Init+0x4c>)
 8007944:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8007946:	4b0f      	ldr	r3, [pc, #60]	@ (8007984 <MX_I2S2_Init+0x48>)
 8007948:	22c0      	movs	r2, #192	@ 0xc0
 800794a:	0092      	lsls	r2, r2, #2
 800794c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800794e:	4b0d      	ldr	r3, [pc, #52]	@ (8007984 <MX_I2S2_Init+0x48>)
 8007950:	2200      	movs	r2, #0
 8007952:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8007954:	4b0b      	ldr	r3, [pc, #44]	@ (8007984 <MX_I2S2_Init+0x48>)
 8007956:	2203      	movs	r2, #3
 8007958:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800795a:	4b0a      	ldr	r3, [pc, #40]	@ (8007984 <MX_I2S2_Init+0x48>)
 800795c:	2200      	movs	r2, #0
 800795e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007960:	4b08      	ldr	r3, [pc, #32]	@ (8007984 <MX_I2S2_Init+0x48>)
 8007962:	22fa      	movs	r2, #250	@ 0xfa
 8007964:	0192      	lsls	r2, r2, #6
 8007966:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007968:	4b06      	ldr	r3, [pc, #24]	@ (8007984 <MX_I2S2_Init+0x48>)
 800796a:	2200      	movs	r2, #0
 800796c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800796e:	4b05      	ldr	r3, [pc, #20]	@ (8007984 <MX_I2S2_Init+0x48>)
 8007970:	0018      	movs	r0, r3
 8007972:	f00a fdc9 	bl	8012508 <HAL_I2S_Init>
 8007976:	1e03      	subs	r3, r0, #0
 8007978:	d001      	beq.n	800797e <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800797a:	f000 fbe7 	bl	800814c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800797e:	46c0      	nop			@ (mov r8, r8)
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	20000f24 	.word	0x20000f24
 8007988:	40003800 	.word	0x40003800

0800798c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800798c:	b590      	push	{r4, r7, lr}
 800798e:	b089      	sub	sp, #36	@ 0x24
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007994:	240c      	movs	r4, #12
 8007996:	193b      	adds	r3, r7, r4
 8007998:	0018      	movs	r0, r3
 800799a:	2314      	movs	r3, #20
 800799c:	001a      	movs	r2, r3
 800799e:	2100      	movs	r1, #0
 80079a0:	f018 f8ce 	bl	801fb40 <memset>
  if(i2sHandle->Instance==SPI2)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a2d      	ldr	r2, [pc, #180]	@ (8007a60 <HAL_I2S_MspInit+0xd4>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d154      	bne.n	8007a58 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80079ae:	4b2d      	ldr	r3, [pc, #180]	@ (8007a64 <HAL_I2S_MspInit+0xd8>)
 80079b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079b2:	4b2c      	ldr	r3, [pc, #176]	@ (8007a64 <HAL_I2S_MspInit+0xd8>)
 80079b4:	2180      	movs	r1, #128	@ 0x80
 80079b6:	01c9      	lsls	r1, r1, #7
 80079b8:	430a      	orrs	r2, r1
 80079ba:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079bc:	4b29      	ldr	r3, [pc, #164]	@ (8007a64 <HAL_I2S_MspInit+0xd8>)
 80079be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c0:	4b28      	ldr	r3, [pc, #160]	@ (8007a64 <HAL_I2S_MspInit+0xd8>)
 80079c2:	2102      	movs	r1, #2
 80079c4:	430a      	orrs	r2, r1
 80079c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80079c8:	4b26      	ldr	r3, [pc, #152]	@ (8007a64 <HAL_I2S_MspInit+0xd8>)
 80079ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079cc:	2202      	movs	r2, #2
 80079ce:	4013      	ands	r3, r2
 80079d0:	60bb      	str	r3, [r7, #8]
 80079d2:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80079d4:	193b      	adds	r3, r7, r4
 80079d6:	22b0      	movs	r2, #176	@ 0xb0
 80079d8:	0212      	lsls	r2, r2, #8
 80079da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079dc:	0021      	movs	r1, r4
 80079de:	187b      	adds	r3, r7, r1
 80079e0:	2202      	movs	r2, #2
 80079e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079e4:	187b      	adds	r3, r7, r1
 80079e6:	2200      	movs	r2, #0
 80079e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ea:	187b      	adds	r3, r7, r1
 80079ec:	2200      	movs	r2, #0
 80079ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80079f0:	187b      	adds	r3, r7, r1
 80079f2:	2200      	movs	r2, #0
 80079f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079f6:	187b      	adds	r3, r7, r1
 80079f8:	4a1b      	ldr	r2, [pc, #108]	@ (8007a68 <HAL_I2S_MspInit+0xdc>)
 80079fa:	0019      	movs	r1, r3
 80079fc:	0010      	movs	r0, r2
 80079fe:	f007 ff3d 	bl	800f87c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8007a02:	4b1a      	ldr	r3, [pc, #104]	@ (8007a6c <HAL_I2S_MspInit+0xe0>)
 8007a04:	4a1a      	ldr	r2, [pc, #104]	@ (8007a70 <HAL_I2S_MspInit+0xe4>)
 8007a06:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8007a08:	4b18      	ldr	r3, [pc, #96]	@ (8007a6c <HAL_I2S_MspInit+0xe0>)
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007a0e:	4b17      	ldr	r3, [pc, #92]	@ (8007a6c <HAL_I2S_MspInit+0xe0>)
 8007a10:	2200      	movs	r2, #0
 8007a12:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a14:	4b15      	ldr	r3, [pc, #84]	@ (8007a6c <HAL_I2S_MspInit+0xe0>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007a1a:	4b14      	ldr	r3, [pc, #80]	@ (8007a6c <HAL_I2S_MspInit+0xe0>)
 8007a1c:	2280      	movs	r2, #128	@ 0x80
 8007a1e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007a20:	4b12      	ldr	r3, [pc, #72]	@ (8007a6c <HAL_I2S_MspInit+0xe0>)
 8007a22:	2280      	movs	r2, #128	@ 0x80
 8007a24:	0052      	lsls	r2, r2, #1
 8007a26:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007a28:	4b10      	ldr	r3, [pc, #64]	@ (8007a6c <HAL_I2S_MspInit+0xe0>)
 8007a2a:	2280      	movs	r2, #128	@ 0x80
 8007a2c:	00d2      	lsls	r2, r2, #3
 8007a2e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007a30:	4b0e      	ldr	r3, [pc, #56]	@ (8007a6c <HAL_I2S_MspInit+0xe0>)
 8007a32:	2220      	movs	r2, #32
 8007a34:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007a36:	4b0d      	ldr	r3, [pc, #52]	@ (8007a6c <HAL_I2S_MspInit+0xe0>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a6c <HAL_I2S_MspInit+0xe0>)
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f007 fb00 	bl	800f044 <HAL_DMA_Init>
 8007a44:	1e03      	subs	r3, r0, #0
 8007a46:	d001      	beq.n	8007a4c <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007a48:	f000 fb80 	bl	800814c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a07      	ldr	r2, [pc, #28]	@ (8007a6c <HAL_I2S_MspInit+0xe0>)
 8007a50:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a52:	4b06      	ldr	r3, [pc, #24]	@ (8007a6c <HAL_I2S_MspInit+0xe0>)
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007a58:	46c0      	nop			@ (mov r8, r8)
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	b009      	add	sp, #36	@ 0x24
 8007a5e:	bd90      	pop	{r4, r7, pc}
 8007a60:	40003800 	.word	0x40003800
 8007a64:	40021000 	.word	0x40021000
 8007a68:	50000400 	.word	0x50000400
 8007a6c:	20000f60 	.word	0x20000f60
 8007a70:	40020044 	.word	0x40020044

08007a74 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8007a74:	b580      	push	{r7, lr}
 8007a76:	af00      	add	r7, sp, #0
  testDone = true;
 8007a78:	4b1e      	ldr	r3, [pc, #120]	@ (8007af4 <SetTestDone+0x80>)
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 8007a7e:	23fa      	movs	r3, #250	@ 0xfa
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	0018      	movs	r0, r3
 8007a84:	f006 fe0e 	bl	800e6a4 <HAL_Delay>
  SetDBLED(false, false, true);
 8007a88:	2201      	movs	r2, #1
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	f005 f941 	bl	800cd14 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8007a92:	4a19      	ldr	r2, [pc, #100]	@ (8007af8 <SetTestDone+0x84>)
 8007a94:	23fa      	movs	r3, #250	@ 0xfa
 8007a96:	0119      	lsls	r1, r3, #4
 8007a98:	23fa      	movs	r3, #250	@ 0xfa
 8007a9a:	011b      	lsls	r3, r3, #4
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	f005 f905 	bl	800ccac <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8007aa2:	4a15      	ldr	r2, [pc, #84]	@ (8007af8 <SetTestDone+0x84>)
 8007aa4:	23fa      	movs	r3, #250	@ 0xfa
 8007aa6:	0119      	lsls	r1, r3, #4
 8007aa8:	23fa      	movs	r3, #250	@ 0xfa
 8007aaa:	011b      	lsls	r3, r3, #4
 8007aac:	0018      	movs	r0, r3
 8007aae:	f005 f97b 	bl	800cda8 <SetVocLED>
  HAL_Delay(1000);
 8007ab2:	23fa      	movs	r3, #250	@ 0xfa
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	f006 fdf4 	bl	800e6a4 <HAL_Delay>
  SetDBLED(false, false, false);
 8007abc:	2200      	movs	r2, #0
 8007abe:	2100      	movs	r1, #0
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	f005 f927 	bl	800cd14 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8007ac6:	23fa      	movs	r3, #250	@ 0xfa
 8007ac8:	011a      	lsls	r2, r3, #4
 8007aca:	23fa      	movs	r3, #250	@ 0xfa
 8007acc:	0119      	lsls	r1, r3, #4
 8007ace:	23fa      	movs	r3, #250	@ 0xfa
 8007ad0:	011b      	lsls	r3, r3, #4
 8007ad2:	0018      	movs	r0, r3
 8007ad4:	f005 f8ea 	bl	800ccac <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007ad8:	23fa      	movs	r3, #250	@ 0xfa
 8007ada:	011a      	lsls	r2, r3, #4
 8007adc:	23fa      	movs	r3, #250	@ 0xfa
 8007ade:	0119      	lsls	r1, r3, #4
 8007ae0:	23fa      	movs	r3, #250	@ 0xfa
 8007ae2:	011b      	lsls	r3, r3, #4
 8007ae4:	0018      	movs	r0, r3
 8007ae6:	f005 f95f 	bl	800cda8 <SetVocLED>
  InitDone();
 8007aea:	f005 f87b 	bl	800cbe4 <InitDone>
}
 8007aee:	46c0      	nop			@ (mov r8, r8)
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	20000fa8 	.word	0x20000fa8
 8007af8:	00000bb8 	.word	0x00000bb8

08007afc <FlashLEDs>:

void FlashLEDs(){
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8007b02:	1dfb      	adds	r3, r7, #7
 8007b04:	2200      	movs	r2, #0
 8007b06:	701a      	strb	r2, [r3, #0]
 8007b08:	e021      	b.n	8007b4e <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	2001      	movs	r0, #1
 8007b10:	f005 f900 	bl	800cd14 <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 8007b14:	4a12      	ldr	r2, [pc, #72]	@ (8007b60 <FlashLEDs+0x64>)
 8007b16:	23fa      	movs	r3, #250	@ 0xfa
 8007b18:	0119      	lsls	r1, r3, #4
 8007b1a:	23fa      	movs	r3, #250	@ 0xfa
 8007b1c:	011b      	lsls	r3, r3, #4
 8007b1e:	0018      	movs	r0, r3
 8007b20:	f005 f8c4 	bl	800ccac <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 8007b24:	4a0e      	ldr	r2, [pc, #56]	@ (8007b60 <FlashLEDs+0x64>)
 8007b26:	23fa      	movs	r3, #250	@ 0xfa
 8007b28:	0119      	lsls	r1, r3, #4
 8007b2a:	23fa      	movs	r3, #250	@ 0xfa
 8007b2c:	011b      	lsls	r3, r3, #4
 8007b2e:	0018      	movs	r0, r3
 8007b30:	f005 f93a 	bl	800cda8 <SetVocLED>
    HAL_Delay(250);
 8007b34:	20fa      	movs	r0, #250	@ 0xfa
 8007b36:	f006 fdb5 	bl	800e6a4 <HAL_Delay>
    SetLEDsOff();
 8007b3a:	f005 fa2b 	bl	800cf94 <SetLEDsOff>
    HAL_Delay(250);
 8007b3e:	20fa      	movs	r0, #250	@ 0xfa
 8007b40:	f006 fdb0 	bl	800e6a4 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8007b44:	1dfb      	adds	r3, r7, #7
 8007b46:	781a      	ldrb	r2, [r3, #0]
 8007b48:	1dfb      	adds	r3, r7, #7
 8007b4a:	3201      	adds	r2, #1
 8007b4c:	701a      	strb	r2, [r3, #0]
 8007b4e:	1dfb      	adds	r3, r7, #7
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b04      	cmp	r3, #4
 8007b54:	d9d9      	bls.n	8007b0a <FlashLEDs+0xe>
  }
}
 8007b56:	46c0      	nop			@ (mov r8, r8)
 8007b58:	46c0      	nop			@ (mov r8, r8)
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	b002      	add	sp, #8
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	00000bb8 	.word	0x00000bb8

08007b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007b68:	f006 fd2c 	bl	800e5c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007b6c:	f000 f998 	bl	8007ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007b70:	f7ff fc0c 	bl	800738c <MX_GPIO_Init>
  MX_DMA_Init();
 8007b74:	f7ff fada 	bl	800712c <MX_DMA_Init>
  MX_I2C1_Init();
 8007b78:	f7ff fd86 	bl	8007688 <MX_I2C1_Init>
  MX_I2S2_Init();
 8007b7c:	f7ff fede 	bl	800793c <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007b80:	f005 ff3e 	bl	800da00 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007b84:	f7ff fdc0 	bl	8007708 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007b88:	f005 fd32 	bl	800d5f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007b8c:	f005 fda4 	bl	800d6d8 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007b90:	f005 ff6a 	bl	800da68 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007b94:	f7ff fa18 	bl	8006fc8 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007b98:	f014 fce0 	bl	801c55c <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007b9c:	f001 f874 	bl	8008c88 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007ba0:	f005 fef8 	bl	800d994 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007ba4:	f005 fe16 	bl	800d7d4 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007ba8:	4a9a      	ldr	r2, [pc, #616]	@ (8007e14 <main+0x2b0>)
 8007baa:	4b9b      	ldr	r3, [pc, #620]	@ (8007e18 <main+0x2b4>)
 8007bac:	0011      	movs	r1, r2
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f7ff fd1c 	bl	80075ec <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 8007bb4:	f7fe fc0a 	bl	80063cc <UserButton_Pressed>
 8007bb8:	1e03      	subs	r3, r0, #0
 8007bba:	d004      	beq.n	8007bc6 <main+0x62>
    EnableESPProg();
 8007bbc:	f014 fd9e 	bl	801c6fc <EnableESPProg>
    ESP_Programming = true;
 8007bc0:	4b96      	ldr	r3, [pc, #600]	@ (8007e1c <main+0x2b8>)
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 8007bc6:	2003      	movs	r0, #3
 8007bc8:	f006 f976 	bl	800deb8 <SetVerboseLevel>
  BinaryReleaseInfo();
 8007bcc:	f006 f98e 	bl	800deec <BinaryReleaseInfo>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007bd0:	4993      	ldr	r1, [pc, #588]	@ (8007e20 <main+0x2bc>)
 8007bd2:	4b94      	ldr	r3, [pc, #592]	@ (8007e24 <main+0x2c0>)
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	f00f f826 	bl	8016c28 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007bdc:	4b92      	ldr	r3, [pc, #584]	@ (8007e28 <main+0x2c4>)
 8007bde:	0018      	movs	r0, r3
 8007be0:	f7fe fff8 	bl	8006bd4 <InitClock>
  Debug("Clock init done");
 8007be4:	4a91      	ldr	r2, [pc, #580]	@ (8007e2c <main+0x2c8>)
 8007be6:	4b92      	ldr	r3, [pc, #584]	@ (8007e30 <main+0x2cc>)
 8007be8:	0019      	movs	r1, r3
 8007bea:	2003      	movs	r0, #3
 8007bec:	f006 f8fa 	bl	800dde4 <CreateLine>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8007bf0:	4a90      	ldr	r2, [pc, #576]	@ (8007e34 <main+0x2d0>)
 8007bf2:	4991      	ldr	r1, [pc, #580]	@ (8007e38 <main+0x2d4>)
 8007bf4:	4891      	ldr	r0, [pc, #580]	@ (8007e3c <main+0x2d8>)
 8007bf6:	230b      	movs	r3, #11
 8007bf8:	f004 f96a 	bl	800bed0 <soundInit>
 8007bfc:	0003      	movs	r3, r0
 8007bfe:	001a      	movs	r2, r3
 8007c00:	2301      	movs	r3, #1
 8007c02:	4053      	eors	r3, r2
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d005      	beq.n	8007c16 <main+0xb2>
    errorHandler(__func__, __LINE__, __FILE__);
 8007c0a:	4a8d      	ldr	r2, [pc, #564]	@ (8007e40 <main+0x2dc>)
 8007c0c:	4b8d      	ldr	r3, [pc, #564]	@ (8007e44 <main+0x2e0>)
 8007c0e:	21ef      	movs	r1, #239	@ 0xef
 8007c10:	0018      	movs	r0, r3
 8007c12:	f006 f99f 	bl	800df54 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8007c16:	4b8c      	ldr	r3, [pc, #560]	@ (8007e48 <main+0x2e4>)
 8007c18:	4a8c      	ldr	r2, [pc, #560]	@ (8007e4c <main+0x2e8>)
 8007c1a:	4987      	ldr	r1, [pc, #540]	@ (8007e38 <main+0x2d4>)
 8007c1c:	488c      	ldr	r0, [pc, #560]	@ (8007e50 <main+0x2ec>)
 8007c1e:	f000 faff 	bl	8008220 <Device_Init>
  deviceTimeOut = HAL_GetTick() + 5000;
 8007c22:	f006 fd35 	bl	800e690 <HAL_GetTick>
 8007c26:	0003      	movs	r3, r0
 8007c28:	4a8a      	ldr	r2, [pc, #552]	@ (8007e54 <main+0x2f0>)
 8007c2a:	189a      	adds	r2, r3, r2
 8007c2c:	4b8a      	ldr	r3, [pc, #552]	@ (8007e58 <main+0x2f4>)
 8007c2e:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8007c30:	4b8a      	ldr	r3, [pc, #552]	@ (8007e5c <main+0x2f8>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	0018      	movs	r0, r3
 8007c36:	f006 f87f 	bl	800dd38 <TimestampIsReached>
 8007c3a:	1e03      	subs	r3, r0, #0
 8007c3c:	d00e      	beq.n	8007c5c <main+0xf8>
      charge = Battery_Upkeep();
 8007c3e:	f005 fb61 	bl	800d304 <Battery_Upkeep>
 8007c42:	0003      	movs	r3, r0
 8007c44:	001a      	movs	r2, r3
 8007c46:	4b86      	ldr	r3, [pc, #536]	@ (8007e60 <main+0x2fc>)
 8007c48:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 8007c4a:	f006 fd21 	bl	800e690 <HAL_GetTick>
 8007c4e:	0003      	movs	r3, r0
 8007c50:	4a84      	ldr	r2, [pc, #528]	@ (8007e64 <main+0x300>)
 8007c52:	189a      	adds	r2, r3, r2
 8007c54:	4b81      	ldr	r3, [pc, #516]	@ (8007e5c <main+0x2f8>)
 8007c56:	601a      	str	r2, [r3, #0]
        showTime();
 8007c58:	f7fe fbc8 	bl	80063ec <showTime>
    }
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 8007c5c:	4b82      	ldr	r3, [pc, #520]	@ (8007e68 <main+0x304>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8007c62:	4b7f      	ldr	r3, [pc, #508]	@ (8007e60 <main+0x2fc>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d003      	beq.n	8007c72 <main+0x10e>
 8007c6a:	4b7d      	ldr	r3, [pc, #500]	@ (8007e60 <main+0x2fc>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d104      	bne.n	8007c7c <main+0x118>
          FlashLEDs();
 8007c72:	f7ff ff43 	bl	8007afc <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 8007c76:	4b7d      	ldr	r3, [pc, #500]	@ (8007e6c <main+0x308>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 8007c7c:	4b78      	ldr	r3, [pc, #480]	@ (8007e60 <main+0x2fc>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d109      	bne.n	8007c98 <main+0x134>
 8007c84:	4b7a      	ldr	r3, [pc, #488]	@ (8007e70 <main+0x30c>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	2b09      	cmp	r3, #9
 8007c8a:	d105      	bne.n	8007c98 <main+0x134>
          batteryEmpty = true;
 8007c8c:	4b79      	ldr	r3, [pc, #484]	@ (8007e74 <main+0x310>)
 8007c8e:	2201      	movs	r2, #1
 8007c90:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8007c92:	f7fe fed7 	bl	8006a44 <Enter_Standby_Mode>
 8007c96:	e002      	b.n	8007c9e <main+0x13a>
        }
        else{
          batteryEmpty = false;
 8007c98:	4b76      	ldr	r3, [pc, #472]	@ (8007e74 <main+0x310>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 8007c9e:	4b76      	ldr	r3, [pc, #472]	@ (8007e78 <main+0x314>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d100      	bne.n	8007ca8 <main+0x144>
 8007ca6:	e073      	b.n	8007d90 <main+0x22c>
 8007ca8:	4b5c      	ldr	r3, [pc, #368]	@ (8007e1c <main+0x2b8>)
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	2201      	movs	r2, #1
 8007cae:	4053      	eors	r3, r2
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d100      	bne.n	8007cb8 <main+0x154>
 8007cb6:	e06b      	b.n	8007d90 <main+0x22c>
 8007cb8:	4b6e      	ldr	r3, [pc, #440]	@ (8007e74 <main+0x310>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	4053      	eors	r3, r2
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d100      	bne.n	8007cc8 <main+0x164>
 8007cc6:	e063      	b.n	8007d90 <main+0x22c>
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 8007cc8:	4b6c      	ldr	r3, [pc, #432]	@ (8007e7c <main+0x318>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d00d      	beq.n	8007cec <main+0x188>
 8007cd0:	4b6a      	ldr	r3, [pc, #424]	@ (8007e7c <main+0x318>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d009      	beq.n	8007cec <main+0x188>
 8007cd8:	4b64      	ldr	r3, [pc, #400]	@ (8007e6c <main+0x308>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d005      	beq.n	8007cec <main+0x188>
        HIDSstate = HIDS_Upkeep();
 8007ce0:	f006 fbba 	bl	800e458 <HIDS_Upkeep>
 8007ce4:	0003      	movs	r3, r0
 8007ce6:	001a      	movs	r2, r3
 8007ce8:	4b65      	ldr	r3, [pc, #404]	@ (8007e80 <main+0x31c>)
 8007cea:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 8007cec:	4b64      	ldr	r3, [pc, #400]	@ (8007e80 <main+0x31c>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d00d      	beq.n	8007d10 <main+0x1ac>
 8007cf4:	4b62      	ldr	r3, [pc, #392]	@ (8007e80 <main+0x31c>)
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d009      	beq.n	8007d10 <main+0x1ac>
 8007cfc:	4b5b      	ldr	r3, [pc, #364]	@ (8007e6c <main+0x308>)
 8007cfe:	785b      	ldrb	r3, [r3, #1]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d005      	beq.n	8007d10 <main+0x1ac>
        SGPstate = SGP_Upkeep();
 8007d04:	f003 ff54 	bl	800bbb0 <SGP_Upkeep>
 8007d08:	0003      	movs	r3, r0
 8007d0a:	001a      	movs	r2, r3
 8007d0c:	4b5b      	ldr	r3, [pc, #364]	@ (8007e7c <main+0x318>)
 8007d0e:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 8007d10:	4b56      	ldr	r3, [pc, #344]	@ (8007e6c <main+0x308>)
 8007d12:	78db      	ldrb	r3, [r3, #3]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <main+0x1c0>
        MICstate = Mic_Upkeep();
 8007d18:	f000 fe80 	bl	8008a1c <Mic_Upkeep>
 8007d1c:	0003      	movs	r3, r0
 8007d1e:	001a      	movs	r2, r3
 8007d20:	4b58      	ldr	r3, [pc, #352]	@ (8007e84 <main+0x320>)
 8007d22:	701a      	strb	r2, [r3, #0]
      }
      if ( (usbPluggedIn || (charge == BATTERY_FULL) || (charge == BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 8007d24:	4b58      	ldr	r3, [pc, #352]	@ (8007e88 <main+0x324>)
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10b      	bne.n	8007d44 <main+0x1e0>
 8007d2c:	4b4c      	ldr	r3, [pc, #304]	@ (8007e60 <main+0x2fc>)
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b04      	cmp	r3, #4
 8007d32:	d007      	beq.n	8007d44 <main+0x1e0>
 8007d34:	4b4a      	ldr	r3, [pc, #296]	@ (8007e60 <main+0x2fc>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d003      	beq.n	8007d44 <main+0x1e0>
 8007d3c:	4b4a      	ldr	r3, [pc, #296]	@ (8007e68 <main+0x304>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d006      	beq.n	8007d52 <main+0x1ee>
 8007d44:	4b49      	ldr	r3, [pc, #292]	@ (8007e6c <main+0x308>)
 8007d46:	789b      	ldrb	r3, [r3, #2]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <main+0x1ee>
        sen5x_statemachine();
 8007d4c:	f001 fcc6 	bl	80096dc <sen5x_statemachine>
 8007d50:	e018      	b.n	8007d84 <main+0x220>
      }
      else if (((charge == BATTERY_LOW) || (charge == BATTERY_CRITICAL)) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 8007d52:	4b43      	ldr	r3, [pc, #268]	@ (8007e60 <main+0x2fc>)
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d003      	beq.n	8007d62 <main+0x1fe>
 8007d5a:	4b41      	ldr	r3, [pc, #260]	@ (8007e60 <main+0x2fc>)
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d110      	bne.n	8007d84 <main+0x220>
 8007d62:	4b41      	ldr	r3, [pc, #260]	@ (8007e68 <main+0x304>)
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2201      	movs	r2, #1
 8007d68:	4053      	eors	r3, r2
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d009      	beq.n	8007d84 <main+0x220>
 8007d70:	4b3e      	ldr	r3, [pc, #248]	@ (8007e6c <main+0x308>)
 8007d72:	789b      	ldrb	r3, [r3, #2]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d005      	beq.n	8007d84 <main+0x220>
        Info("Battery level insufficient for sen5x operation");
 8007d78:	4a44      	ldr	r2, [pc, #272]	@ (8007e8c <main+0x328>)
 8007d7a:	4b45      	ldr	r3, [pc, #276]	@ (8007e90 <main+0x32c>)
 8007d7c:	0019      	movs	r1, r3
 8007d7e:	2002      	movs	r0, #2
 8007d80:	f006 f830 	bl	800dde4 <CreateLine>
      }
      ESPstate = ESP_Upkeep();
 8007d84:	f7fd fb44 	bl	8005410 <ESP_Upkeep>
 8007d88:	0003      	movs	r3, r0
 8007d8a:	001a      	movs	r2, r3
 8007d8c:	4b38      	ldr	r3, [pc, #224]	@ (8007e70 <main+0x30c>)
 8007d8e:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8007d90:	4b39      	ldr	r3, [pc, #228]	@ (8007e78 <main+0x314>)
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	2201      	movs	r2, #1
 8007d96:	4053      	eors	r3, r2
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00f      	beq.n	8007dbe <main+0x25a>
 8007d9e:	4b1f      	ldr	r3, [pc, #124]	@ (8007e1c <main+0x2b8>)
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	2201      	movs	r2, #1
 8007da4:	4053      	eors	r3, r2
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d008      	beq.n	8007dbe <main+0x25a>
 8007dac:	4b31      	ldr	r3, [pc, #196]	@ (8007e74 <main+0x310>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2201      	movs	r2, #1
 8007db2:	4053      	eors	r3, r2
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d001      	beq.n	8007dbe <main+0x25a>
      Device_Test();  // for device with startup time
 8007dba:	f000 fb59 	bl	8008470 <Device_Test>
    }
    configCheck();
 8007dbe:	f005 f969 	bl	800d094 <configCheck>
    if (!usbPluggedIn) {
 8007dc2:	4b31      	ldr	r3, [pc, #196]	@ (8007e88 <main+0x324>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	4053      	eors	r3, r2
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d100      	bne.n	8007dd2 <main+0x26e>
 8007dd0:	e72e      	b.n	8007c30 <main+0xcc>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 8007dd2:	4b30      	ldr	r3, [pc, #192]	@ (8007e94 <main+0x330>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	4053      	eors	r3, r2
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d100      	bne.n	8007de2 <main+0x27e>
 8007de0:	e726      	b.n	8007c30 <main+0xcc>
 8007de2:	f000 fbbf 	bl	8008564 <AllDevicesReady>
 8007de6:	1e03      	subs	r3, r0, #0
 8007de8:	d100      	bne.n	8007dec <main+0x288>
 8007dea:	e721      	b.n	8007c30 <main+0xcc>
 8007dec:	4b2a      	ldr	r3, [pc, #168]	@ (8007e98 <main+0x334>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d100      	bne.n	8007df6 <main+0x292>
 8007df4:	e71c      	b.n	8007c30 <main+0xcc>
        EnabledConnectedDevices();
 8007df6:	f000 fc15 	bl	8008624 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8007dfa:	4b28      	ldr	r3, [pc, #160]	@ (8007e9c <main+0x338>)
 8007dfc:	789b      	ldrb	r3, [r3, #2]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <main+0x2a4>
 8007e02:	23d7      	movs	r3, #215	@ 0xd7
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	e001      	b.n	8007e0c <main+0x2a8>
 8007e08:	23dc      	movs	r3, #220	@ 0xdc
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	f7fe fe3b 	bl	8006a88 <Enter_Stop_Mode>
    if(TimestampIsReached(batteryReadTimer)){
 8007e12:	e70d      	b.n	8007c30 <main+0xcc>
 8007e14:	20002240 	.word	0x20002240
 8007e18:	20002200 	.word	0x20002200
 8007e1c:	20000fa9 	.word	0x20000fa9
 8007e20:	20000fb0 	.word	0x20000fb0
 8007e24:	20002378 	.word	0x20002378
 8007e28:	20001238 	.word	0x20001238
 8007e2c:	080237f4 	.word	0x080237f4
 8007e30:	08023804 	.word	0x08023804
 8007e34:	20002280 	.word	0x20002280
 8007e38:	20000f24 	.word	0x20000f24
 8007e3c:	20000f60 	.word	0x20000f60
 8007e40:	08023808 	.word	0x08023808
 8007e44:	08024bb4 	.word	0x08024bb4
 8007e48:	20002430 	.word	0x20002430
 8007e4c:	20000d90 	.word	0x20000d90
 8007e50:	20000dec 	.word	0x20000dec
 8007e54:	00001388 	.word	0x00001388
 8007e58:	20000fc0 	.word	0x20000fc0
 8007e5c:	20000fc4 	.word	0x20000fc4
 8007e60:	20000fc8 	.word	0x20000fc8
 8007e64:	0000c350 	.word	0x0000c350
 8007e68:	2000007c 	.word	0x2000007c
 8007e6c:	20000080 	.word	0x20000080
 8007e70:	20000fae 	.word	0x20000fae
 8007e74:	20000faa 	.word	0x20000faa
 8007e78:	20000fa8 	.word	0x20000fa8
 8007e7c:	20000fab 	.word	0x20000fab
 8007e80:	20000fac 	.word	0x20000fac
 8007e84:	20000fad 	.word	0x20000fad
 8007e88:	200021ed 	.word	0x200021ed
 8007e8c:	0802381c 	.word	0x0802381c
 8007e90:	0802384c 	.word	0x0802384c
 8007e94:	200021ee 	.word	0x200021ee
 8007e98:	20000553 	.word	0x20000553
 8007e9c:	20000fcc 	.word	0x20000fcc

08007ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007ea0:	b590      	push	{r4, r7, lr}
 8007ea2:	b09d      	sub	sp, #116	@ 0x74
 8007ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007ea6:	2438      	movs	r4, #56	@ 0x38
 8007ea8:	193b      	adds	r3, r7, r4
 8007eaa:	0018      	movs	r0, r3
 8007eac:	2338      	movs	r3, #56	@ 0x38
 8007eae:	001a      	movs	r2, r3
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	f017 fe45 	bl	801fb40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007eb6:	2324      	movs	r3, #36	@ 0x24
 8007eb8:	18fb      	adds	r3, r7, r3
 8007eba:	0018      	movs	r0, r3
 8007ebc:	2314      	movs	r3, #20
 8007ebe:	001a      	movs	r2, r3
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	f017 fe3d 	bl	801fb40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007ec6:	003b      	movs	r3, r7
 8007ec8:	0018      	movs	r0, r3
 8007eca:	2324      	movs	r3, #36	@ 0x24
 8007ecc:	001a      	movs	r2, r3
 8007ece:	2100      	movs	r1, #0
 8007ed0:	f017 fe36 	bl	801fb40 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ed4:	4b34      	ldr	r3, [pc, #208]	@ (8007fa8 <SystemClock_Config+0x108>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a34      	ldr	r2, [pc, #208]	@ (8007fac <SystemClock_Config+0x10c>)
 8007eda:	401a      	ands	r2, r3
 8007edc:	4b32      	ldr	r3, [pc, #200]	@ (8007fa8 <SystemClock_Config+0x108>)
 8007ede:	2180      	movs	r1, #128	@ 0x80
 8007ee0:	0109      	lsls	r1, r1, #4
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007ee6:	f00c fc73 	bl	80147d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8007eea:	4b31      	ldr	r3, [pc, #196]	@ (8007fb0 <SystemClock_Config+0x110>)
 8007eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eee:	4a2f      	ldr	r2, [pc, #188]	@ (8007fac <SystemClock_Config+0x10c>)
 8007ef0:	401a      	ands	r2, r3
 8007ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8007fb0 <SystemClock_Config+0x110>)
 8007ef4:	2180      	movs	r1, #128	@ 0x80
 8007ef6:	0149      	lsls	r1, r1, #5
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8007efc:	193b      	adds	r3, r7, r4
 8007efe:	2226      	movs	r2, #38	@ 0x26
 8007f00:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007f02:	193b      	adds	r3, r7, r4
 8007f04:	2280      	movs	r2, #128	@ 0x80
 8007f06:	0052      	lsls	r2, r2, #1
 8007f08:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007f0a:	0021      	movs	r1, r4
 8007f0c:	187b      	adds	r3, r7, r1
 8007f0e:	2201      	movs	r2, #1
 8007f10:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007f12:	187b      	adds	r3, r7, r1
 8007f14:	2210      	movs	r2, #16
 8007f16:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007f18:	187b      	adds	r3, r7, r1
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007f1e:	187b      	adds	r3, r7, r1
 8007f20:	2200      	movs	r2, #0
 8007f22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f24:	187b      	adds	r3, r7, r1
 8007f26:	0018      	movs	r0, r3
 8007f28:	f00c fce2 	bl	80148f0 <HAL_RCC_OscConfig>
 8007f2c:	1e03      	subs	r3, r0, #0
 8007f2e:	d001      	beq.n	8007f34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007f30:	f000 f90c 	bl	800814c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f34:	2124      	movs	r1, #36	@ 0x24
 8007f36:	187b      	adds	r3, r7, r1
 8007f38:	220f      	movs	r2, #15
 8007f3a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007f3c:	187b      	adds	r3, r7, r1
 8007f3e:	2201      	movs	r2, #1
 8007f40:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f42:	187b      	adds	r3, r7, r1
 8007f44:	2200      	movs	r2, #0
 8007f46:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007f48:	187b      	adds	r3, r7, r1
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007f4e:	187b      	adds	r3, r7, r1
 8007f50:	2200      	movs	r2, #0
 8007f52:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007f54:	187b      	adds	r3, r7, r1
 8007f56:	2100      	movs	r1, #0
 8007f58:	0018      	movs	r0, r3
 8007f5a:	f00d f89d 	bl	8015098 <HAL_RCC_ClockConfig>
 8007f5e:	1e03      	subs	r3, r0, #0
 8007f60:	d001      	beq.n	8007f66 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8007f62:	f000 f8f3 	bl	800814c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8007f66:	003b      	movs	r3, r7
 8007f68:	226d      	movs	r2, #109	@ 0x6d
 8007f6a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007f6c:	003b      	movs	r3, r7
 8007f6e:	2200      	movs	r2, #0
 8007f70:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007f72:	003b      	movs	r3, r7
 8007f74:	2200      	movs	r2, #0
 8007f76:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007f78:	003b      	movs	r3, r7
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007f7e:	003b      	movs	r3, r7
 8007f80:	2280      	movs	r2, #128	@ 0x80
 8007f82:	0252      	lsls	r2, r2, #9
 8007f84:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8007f86:	003b      	movs	r3, r7
 8007f88:	2280      	movs	r2, #128	@ 0x80
 8007f8a:	04d2      	lsls	r2, r2, #19
 8007f8c:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007f8e:	003b      	movs	r3, r7
 8007f90:	0018      	movs	r0, r3
 8007f92:	f00d faa5 	bl	80154e0 <HAL_RCCEx_PeriphCLKConfig>
 8007f96:	1e03      	subs	r3, r0, #0
 8007f98:	d001      	beq.n	8007f9e <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8007f9a:	f000 f8d7 	bl	800814c <Error_Handler>
  }
}
 8007f9e:	46c0      	nop			@ (mov r8, r8)
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	b01d      	add	sp, #116	@ 0x74
 8007fa4:	bd90      	pop	{r4, r7, pc}
 8007fa6:	46c0      	nop			@ (mov r8, r8)
 8007fa8:	40007000 	.word	0x40007000
 8007fac:	ffffe7ff 	.word	0xffffe7ff
 8007fb0:	40021000 	.word	0x40021000

08007fb4 <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 8007fb4:	b590      	push	{r4, r7, lr}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	000a      	movs	r2, r1
 8007fbe:	1cbb      	adds	r3, r7, #2
 8007fc0:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 8007fc2:	4c06      	ldr	r4, [pc, #24]	@ (8007fdc <printString+0x28>)
 8007fc4:	1cbb      	adds	r3, r7, #2
 8007fc6:	881a      	ldrh	r2, [r3, #0]
 8007fc8:	6879      	ldr	r1, [r7, #4]
 8007fca:	4805      	ldr	r0, [pc, #20]	@ (8007fe0 <printString+0x2c>)
 8007fcc:	0023      	movs	r3, r4
 8007fce:	f00e fd8b 	bl	8016ae8 <HAL_UART_Transmit>
}
 8007fd2:	46c0      	nop			@ (mov r8, r8)
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	b003      	add	sp, #12
 8007fd8:	bd90      	pop	{r4, r7, pc}
 8007fda:	46c0      	nop			@ (mov r8, r8)
 8007fdc:	0000ffff 	.word	0x0000ffff
 8007fe0:	20002378 	.word	0x20002378

08007fe4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007fec:	4936      	ldr	r1, [pc, #216]	@ (80080c8 <HAL_UART_RxCpltCallback+0xe4>)
 8007fee:	4b37      	ldr	r3, [pc, #220]	@ (80080cc <HAL_UART_RxCpltCallback+0xe8>)
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	0018      	movs	r0, r3
 8007ff4:	f00e fe18 	bl	8016c28 <HAL_UART_Receive_IT>
  switch (u1_rx_buff[0]){
 8007ff8:	4b33      	ldr	r3, [pc, #204]	@ (80080c8 <HAL_UART_RxCpltCallback+0xe4>)
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	3b61      	subs	r3, #97	@ 0x61
 8007ffe:	2b13      	cmp	r3, #19
 8008000:	d830      	bhi.n	8008064 <HAL_UART_RxCpltCallback+0x80>
 8008002:	009a      	lsls	r2, r3, #2
 8008004:	4b32      	ldr	r3, [pc, #200]	@ (80080d0 <HAL_UART_RxCpltCallback+0xec>)
 8008006:	18d3      	adds	r3, r2, r3
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800800c:	4b31      	ldr	r3, [pc, #196]	@ (80080d4 <HAL_UART_RxCpltCallback+0xf0>)
 800800e:	0018      	movs	r0, r3
 8008010:	f017 fc48 	bl	801f8a4 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 8008014:	2003      	movs	r0, #3
 8008016:	f005 ff4f 	bl	800deb8 <SetVerboseLevel>
      break;
 800801a:	e04a      	b.n	80080b2 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800801c:	f7fb fbbe 	bl	800379c <forceNTPupdate>
    break;
 8008020:	e047      	b.n	80080b2 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 8008022:	4b2d      	ldr	r3, [pc, #180]	@ (80080d8 <HAL_UART_RxCpltCallback+0xf4>)
 8008024:	0018      	movs	r0, r3
 8008026:	f017 fc3d 	bl	801f8a4 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800802a:	2002      	movs	r0, #2
 800802c:	f005 ff44 	bl	800deb8 <SetVerboseLevel>
      break;
 8008030:	e03f      	b.n	80080b2 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 8008032:	4b2a      	ldr	r3, [pc, #168]	@ (80080dc <HAL_UART_RxCpltCallback+0xf8>)
 8008034:	0018      	movs	r0, r3
 8008036:	f017 fc35 	bl	801f8a4 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800803a:	2001      	movs	r0, #1
 800803c:	f005 ff3c 	bl	800deb8 <SetVerboseLevel>
      break;
 8008040:	e037      	b.n	80080b2 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 8008042:	4b27      	ldr	r3, [pc, #156]	@ (80080e0 <HAL_UART_RxCpltCallback+0xfc>)
 8008044:	0018      	movs	r0, r3
 8008046:	f017 fc2d 	bl	801f8a4 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800804a:	2000      	movs	r0, #0
 800804c:	f005 ff34 	bl	800deb8 <SetVerboseLevel>
      break;
 8008050:	e02f      	b.n	80080b2 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 8008052:	f006 fb1d 	bl	800e690 <HAL_GetTick>
 8008056:	0002      	movs	r2, r0
 8008058:	4b22      	ldr	r3, [pc, #136]	@ (80080e4 <HAL_UART_RxCpltCallback+0x100>)
 800805a:	601a      	str	r2, [r3, #0]
      break;
 800805c:	e029      	b.n	80080b2 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800805e:	f7fe f9c5 	bl	80063ec <showTime>
      break;
 8008062:	e026      	b.n	80080b2 <HAL_UART_RxCpltCallback+0xce>
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 8008064:	4a20      	ldr	r2, [pc, #128]	@ (80080e8 <HAL_UART_RxCpltCallback+0x104>)
 8008066:	4b21      	ldr	r3, [pc, #132]	@ (80080ec <HAL_UART_RxCpltCallback+0x108>)
 8008068:	0019      	movs	r1, r3
 800806a:	2001      	movs	r0, #1
 800806c:	f005 feba 	bl	800dde4 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 8008070:	4b1f      	ldr	r3, [pc, #124]	@ (80080f0 <HAL_UART_RxCpltCallback+0x10c>)
 8008072:	0018      	movs	r0, r3
 8008074:	f017 fc16 	bl	801f8a4 <puts>
      printf("a - VerboseLevel set to all\r\n");
 8008078:	4b1e      	ldr	r3, [pc, #120]	@ (80080f4 <HAL_UART_RxCpltCallback+0x110>)
 800807a:	0018      	movs	r0, r3
 800807c:	f017 fc12 	bl	801f8a4 <puts>
      printf("f - Force NTP time synchronization\r\n");
 8008080:	4b1d      	ldr	r3, [pc, #116]	@ (80080f8 <HAL_UART_RxCpltCallback+0x114>)
 8008082:	0018      	movs	r0, r3
 8008084:	f017 fc0e 	bl	801f8a4 <puts>
      printf("i - VerboseLevel set to info\r\n");
 8008088:	4b1c      	ldr	r3, [pc, #112]	@ (80080fc <HAL_UART_RxCpltCallback+0x118>)
 800808a:	0018      	movs	r0, r3
 800808c:	f017 fc0a 	bl	801f8a4 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 8008090:	4b1b      	ldr	r3, [pc, #108]	@ (8008100 <HAL_UART_RxCpltCallback+0x11c>)
 8008092:	0018      	movs	r0, r3
 8008094:	f017 fc06 	bl	801f8a4 <puts>
      printf("n - VerboseLevel set to none\r\n");
 8008098:	4b1a      	ldr	r3, [pc, #104]	@ (8008104 <HAL_UART_RxCpltCallback+0x120>)
 800809a:	0018      	movs	r0, r3
 800809c:	f017 fc02 	bl	801f8a4 <puts>
      printf("s - Start particle measurement\r\n");
 80080a0:	4b19      	ldr	r3, [pc, #100]	@ (8008108 <HAL_UART_RxCpltCallback+0x124>)
 80080a2:	0018      	movs	r0, r3
 80080a4:	f017 fbfe 	bl	801f8a4 <puts>
      printf("t - Show actual systemtime\r\n");
 80080a8:	4b18      	ldr	r3, [pc, #96]	@ (800810c <HAL_UART_RxCpltCallback+0x128>)
 80080aa:	0018      	movs	r0, r3
 80080ac:	f017 fbfa 	bl	801f8a4 <puts>
  break;
 80080b0:	46c0      	nop			@ (mov r8, r8)
  }
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 80080b2:	4905      	ldr	r1, [pc, #20]	@ (80080c8 <HAL_UART_RxCpltCallback+0xe4>)
 80080b4:	4b05      	ldr	r3, [pc, #20]	@ (80080cc <HAL_UART_RxCpltCallback+0xe8>)
 80080b6:	2201      	movs	r2, #1
 80080b8:	0018      	movs	r0, r3
 80080ba:	f00e fdb5 	bl	8016c28 <HAL_UART_Receive_IT>
}
 80080be:	46c0      	nop			@ (mov r8, r8)
 80080c0:	46bd      	mov	sp, r7
 80080c2:	b002      	add	sp, #8
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	46c0      	nop			@ (mov r8, r8)
 80080c8:	20000fb0 	.word	0x20000fb0
 80080cc:	20002378 	.word	0x20002378
 80080d0:	08024b64 	.word	0x08024b64
 80080d4:	08023850 	.word	0x08023850
 80080d8:	0802386c 	.word	0x0802386c
 80080dc:	08023888 	.word	0x08023888
 80080e0:	080238a8 	.word	0x080238a8
 80080e4:	20001268 	.word	0x20001268
 80080e8:	080238c4 	.word	0x080238c4
 80080ec:	080238f4 	.word	0x080238f4
 80080f0:	080238f8 	.word	0x080238f8
 80080f4:	08023910 	.word	0x08023910
 80080f8:	08023930 	.word	0x08023930
 80080fc:	08023954 	.word	0x08023954
 8008100:	08023974 	.word	0x08023974
 8008104:	08023998 	.word	0x08023998
 8008108:	080239b8 	.word	0x080239b8
 800810c:	080239d8 	.word	0x080239d8

08008110 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	0002      	movs	r2, r0
 8008118:	1dbb      	adds	r3, r7, #6
 800811a:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800811c:	1dbb      	adds	r3, r7, #6
 800811e:	881a      	ldrh	r2, [r3, #0]
 8008120:	2380      	movs	r3, #128	@ 0x80
 8008122:	021b      	lsls	r3, r3, #8
 8008124:	429a      	cmp	r2, r3
 8008126:	d10b      	bne.n	8008140 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 8008128:	f005 f900 	bl	800d32c <setuserToggle>
    if (GetPMSensorPresence()) {
 800812c:	f000 f83a 	bl	80081a4 <GetPMSensorPresence>
 8008130:	1e03      	subs	r3, r0, #0
 8008132:	d005      	beq.n	8008140 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 8008134:	4b04      	ldr	r3, [pc, #16]	@ (8008148 <HAL_GPIO_EXTI_Callback+0x38>)
 8008136:	2201      	movs	r2, #1
 8008138:	709a      	strb	r2, [r3, #2]
      setsen5xReadTimer(100);
 800813a:	2064      	movs	r0, #100	@ 0x64
 800813c:	f000 fe32 	bl	8008da4 <setsen5xReadTimer>
    }

  }
}
 8008140:	46c0      	nop			@ (mov r8, r8)
 8008142:	46bd      	mov	sp, r7
 8008144:	b002      	add	sp, #8
 8008146:	bd80      	pop	{r7, pc}
 8008148:	20000080 	.word	0x20000080

0800814c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008150:	b672      	cpsid	i
}
 8008152:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 8008154:	4a05      	ldr	r2, [pc, #20]	@ (800816c <Error_Handler+0x20>)
 8008156:	4b06      	ldr	r3, [pc, #24]	@ (8008170 <Error_Handler+0x24>)
 8008158:	0019      	movs	r1, r3
 800815a:	2001      	movs	r0, #1
 800815c:	f005 fe42 	bl	800dde4 <CreateLine>
    HAL_Delay(2500);
 8008160:	4b04      	ldr	r3, [pc, #16]	@ (8008174 <Error_Handler+0x28>)
 8008162:	0018      	movs	r0, r3
 8008164:	f006 fa9e 	bl	800e6a4 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 8008168:	46c0      	nop			@ (mov r8, r8)
 800816a:	e7f3      	b.n	8008154 <Error_Handler+0x8>
 800816c:	080239f4 	.word	0x080239f4
 8008170:	080238f4 	.word	0x080238f4
 8008174:	000009c4 	.word	0x000009c4

08008178 <testInit>:
};

EnabledMeasurements Sensor;
DevicePresent SensorProbe;

void testInit(){
 8008178:	b580      	push	{r7, lr}
 800817a:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800817c:	4b08      	ldr	r3, [pc, #32]	@ (80081a0 <testInit+0x28>)
 800817e:	2200      	movs	r2, #0
 8008180:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 8008182:	4b07      	ldr	r3, [pc, #28]	@ (80081a0 <testInit+0x28>)
 8008184:	2200      	movs	r2, #0
 8008186:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 8008188:	4b05      	ldr	r3, [pc, #20]	@ (80081a0 <testInit+0x28>)
 800818a:	2200      	movs	r2, #0
 800818c:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 800818e:	4b04      	ldr	r3, [pc, #16]	@ (80081a0 <testInit+0x28>)
 8008190:	2200      	movs	r2, #0
 8008192:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 8008194:	4b02      	ldr	r3, [pc, #8]	@ (80081a0 <testInit+0x28>)
 8008196:	2200      	movs	r2, #0
 8008198:	711a      	strb	r2, [r3, #4]
}
 800819a:	46c0      	nop			@ (mov r8, r8)
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20000fcc 	.word	0x20000fcc

080081a4 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 80081a4:	b580      	push	{r7, lr}
 80081a6:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 80081a8:	4b02      	ldr	r3, [pc, #8]	@ (80081b4 <GetPMSensorPresence+0x10>)
 80081aa:	789b      	ldrb	r3, [r3, #2]
}
 80081ac:	0018      	movs	r0, r3
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	46c0      	nop			@ (mov r8, r8)
 80081b4:	20000fcc 	.word	0x20000fcc

080081b8 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 80081b8:	b580      	push	{r7, lr}
 80081ba:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 80081bc:	4b02      	ldr	r3, [pc, #8]	@ (80081c8 <IsPMSensorEnabled+0x10>)
 80081be:	789b      	ldrb	r3, [r3, #2]
}
 80081c0:	0018      	movs	r0, r3
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	46c0      	nop			@ (mov r8, r8)
 80081c8:	20000080 	.word	0x20000080

080081cc <SetVOCSensorStatus>:

void SetHTSensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	0002      	movs	r2, r0
 80081d4:	1dfb      	adds	r3, r7, #7
 80081d6:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = setting;
 80081d8:	4b03      	ldr	r3, [pc, #12]	@ (80081e8 <SetVOCSensorStatus+0x1c>)
 80081da:	1dfa      	adds	r2, r7, #7
 80081dc:	7812      	ldrb	r2, [r2, #0]
 80081de:	705a      	strb	r2, [r3, #1]
}
 80081e0:	46c0      	nop			@ (mov r8, r8)
 80081e2:	46bd      	mov	sp, r7
 80081e4:	b002      	add	sp, #8
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	20000080 	.word	0x20000080

080081ec <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	0002      	movs	r2, r0
 80081f4:	1dfb      	adds	r3, r7, #7
 80081f6:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 80081f8:	4b03      	ldr	r3, [pc, #12]	@ (8008208 <SetPMSensorStatus+0x1c>)
 80081fa:	1dfa      	adds	r2, r7, #7
 80081fc:	7812      	ldrb	r2, [r2, #0]
 80081fe:	709a      	strb	r2, [r3, #2]
}
 8008200:	46c0      	nop			@ (mov r8, r8)
 8008202:	46bd      	mov	sp, r7
 8008204:	b002      	add	sp, #8
 8008206:	bd80      	pop	{r7, pc}
 8008208:	20000080 	.word	0x20000080

0800820c <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800820c:	b580      	push	{r7, lr}
 800820e:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 8008210:	4b02      	ldr	r3, [pc, #8]	@ (800821c <SetESPMeasurementDone+0x10>)
 8008212:	2201      	movs	r2, #1
 8008214:	711a      	strb	r2, [r3, #4]
}
 8008216:	46c0      	nop			@ (mov r8, r8)
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	20000fcc 	.word	0x20000fcc

08008220 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
 800822c:	603b      	str	r3, [r7, #0]
  testInit();
 800822e:	f7ff ffa3 	bl	8008178 <testInit>
  I2CSensors_Init(sensorI2C);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	0018      	movs	r0, r3
 8008236:	f7fd fd5f 	bl	8005cf8 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800823a:	f006 f805 	bl	800e248 <HIDS_DeviceConnected>
 800823e:	0003      	movs	r3, r0
 8008240:	001a      	movs	r2, r3
 8008242:	2301      	movs	r3, #1
 8008244:	4053      	eors	r3, r2
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00c      	beq.n	8008266 <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800824c:	4a72      	ldr	r2, [pc, #456]	@ (8008418 <Device_Init+0x1f8>)
 800824e:	4b73      	ldr	r3, [pc, #460]	@ (800841c <Device_Init+0x1fc>)
 8008250:	0019      	movs	r1, r3
 8008252:	2001      	movs	r0, #1
 8008254:	f005 fdc6 	bl	800dde4 <CreateLine>
     SensorProbe.HT_Present = false;
 8008258:	4b71      	ldr	r3, [pc, #452]	@ (8008420 <Device_Init+0x200>)
 800825a:	2200      	movs	r2, #0
 800825c:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800825e:	4b71      	ldr	r3, [pc, #452]	@ (8008424 <Device_Init+0x204>)
 8008260:	2200      	movs	r2, #0
 8008262:	701a      	strb	r2, [r3, #0]
 8008264:	e008      	b.n	8008278 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 8008266:	4b6e      	ldr	r3, [pc, #440]	@ (8008420 <Device_Init+0x200>)
 8008268:	2201      	movs	r2, #1
 800826a:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800826c:	4a6e      	ldr	r2, [pc, #440]	@ (8008428 <Device_Init+0x208>)
 800826e:	4b6f      	ldr	r3, [pc, #444]	@ (800842c <Device_Init+0x20c>)
 8008270:	0019      	movs	r1, r3
 8008272:	2003      	movs	r0, #3
 8008274:	f005 fdb6 	bl	800dde4 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 8008278:	f003 fa90 	bl	800b79c <SGP_DeviceConnected>
 800827c:	0003      	movs	r3, r0
 800827e:	001a      	movs	r2, r3
 8008280:	2301      	movs	r3, #1
 8008282:	4053      	eors	r3, r2
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00c      	beq.n	80082a4 <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 800828a:	4b65      	ldr	r3, [pc, #404]	@ (8008420 <Device_Init+0x200>)
 800828c:	2200      	movs	r2, #0
 800828e:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 8008290:	4a67      	ldr	r2, [pc, #412]	@ (8008430 <Device_Init+0x210>)
 8008292:	4b62      	ldr	r3, [pc, #392]	@ (800841c <Device_Init+0x1fc>)
 8008294:	0019      	movs	r1, r3
 8008296:	2001      	movs	r0, #1
 8008298:	f005 fda4 	bl	800dde4 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800829c:	4b61      	ldr	r3, [pc, #388]	@ (8008424 <Device_Init+0x204>)
 800829e:	2200      	movs	r2, #0
 80082a0:	705a      	strb	r2, [r3, #1]
 80082a2:	e008      	b.n	80082b6 <Device_Init+0x96>
  }
  else{
    SensorProbe.VOC_Present = true;
 80082a4:	4b5e      	ldr	r3, [pc, #376]	@ (8008420 <Device_Init+0x200>)
 80082a6:	2201      	movs	r2, #1
 80082a8:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 80082aa:	4a62      	ldr	r2, [pc, #392]	@ (8008434 <Device_Init+0x214>)
 80082ac:	4b5f      	ldr	r3, [pc, #380]	@ (800842c <Device_Init+0x20c>)
 80082ae:	0019      	movs	r1, r3
 80082b0:	2003      	movs	r0, #3
 80082b2:	f005 fd97 	bl	800dde4 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 80082b6:	4b5a      	ldr	r3, [pc, #360]	@ (8008420 <Device_Init+0x200>)
 80082b8:	785b      	ldrb	r3, [r3, #1]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d009      	beq.n	80082d2 <Device_Init+0xb2>
 80082be:	4b58      	ldr	r3, [pc, #352]	@ (8008420 <Device_Init+0x200>)
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d005      	beq.n	80082d2 <Device_Init+0xb2>
    SetDBLED(false, true, false);
 80082c6:	2200      	movs	r2, #0
 80082c8:	2101      	movs	r1, #1
 80082ca:	2000      	movs	r0, #0
 80082cc:	f004 fd22 	bl	800cd14 <SetDBLED>
 80082d0:	e018      	b.n	8008304 <Device_Init+0xe4>
  }
  else{
    SetDBLED(true, false, false);
 80082d2:	2200      	movs	r2, #0
 80082d4:	2100      	movs	r1, #0
 80082d6:	2001      	movs	r0, #1
 80082d8:	f004 fd1c 	bl	800cd14 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80082dc:	4b56      	ldr	r3, [pc, #344]	@ (8008438 <Device_Init+0x218>)
 80082de:	2200      	movs	r2, #0
 80082e0:	2101      	movs	r1, #1
 80082e2:	0018      	movs	r0, r3
 80082e4:	f007 fc65 	bl	800fbb2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80082e8:	2380      	movs	r3, #128	@ 0x80
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	4852      	ldr	r0, [pc, #328]	@ (8008438 <Device_Init+0x218>)
 80082ee:	2201      	movs	r2, #1
 80082f0:	0019      	movs	r1, r3
 80082f2:	f007 fc5e 	bl	800fbb2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80082f6:	2380      	movs	r3, #128	@ 0x80
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	484f      	ldr	r0, [pc, #316]	@ (8008438 <Device_Init+0x218>)
 80082fc:	2201      	movs	r2, #1
 80082fe:	0019      	movs	r1, r3
 8008300:	f007 fc57 	bl	800fbb2 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 8008304:	4b47      	ldr	r3, [pc, #284]	@ (8008424 <Device_Init+0x204>)
 8008306:	78db      	ldrb	r3, [r3, #3]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d028      	beq.n	800835e <Device_Init+0x13e>
    Info("Device_Init calls enableMicrophone");
 800830c:	4a4b      	ldr	r2, [pc, #300]	@ (800843c <Device_Init+0x21c>)
 800830e:	4b4c      	ldr	r3, [pc, #304]	@ (8008440 <Device_Init+0x220>)
 8008310:	0019      	movs	r1, r3
 8008312:	2002      	movs	r0, #2
 8008314:	f005 fd66 	bl	800dde4 <CreateLine>
    if (!enableMicrophone(true)) {
 8008318:	2001      	movs	r0, #1
 800831a:	f003 fe41 	bl	800bfa0 <enableMicrophone>
 800831e:	0003      	movs	r3, r0
 8008320:	001a      	movs	r2, r3
 8008322:	2301      	movs	r3, #1
 8008324:	4053      	eors	r3, r2
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00c      	beq.n	8008346 <Device_Init+0x126>
      Error("Microphone device not connected! DMA Error.");
 800832c:	4a45      	ldr	r2, [pc, #276]	@ (8008444 <Device_Init+0x224>)
 800832e:	4b3b      	ldr	r3, [pc, #236]	@ (800841c <Device_Init+0x1fc>)
 8008330:	0019      	movs	r1, r3
 8008332:	2001      	movs	r0, #1
 8008334:	f005 fd56 	bl	800dde4 <CreateLine>
      SensorProbe.MIC_Present = false;
 8008338:	4b39      	ldr	r3, [pc, #228]	@ (8008420 <Device_Init+0x200>)
 800833a:	2200      	movs	r2, #0
 800833c:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 800833e:	4b39      	ldr	r3, [pc, #228]	@ (8008424 <Device_Init+0x204>)
 8008340:	2200      	movs	r2, #0
 8008342:	70da      	strb	r2, [r3, #3]
 8008344:	e00b      	b.n	800835e <Device_Init+0x13e>
    }
    else{
      SensorProbe.MIC_Present = true;
 8008346:	4b36      	ldr	r3, [pc, #216]	@ (8008420 <Device_Init+0x200>)
 8008348:	2201      	movs	r2, #1
 800834a:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 800834c:	4b35      	ldr	r3, [pc, #212]	@ (8008424 <Device_Init+0x204>)
 800834e:	2201      	movs	r2, #1
 8008350:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 8008352:	4a3d      	ldr	r2, [pc, #244]	@ (8008448 <Device_Init+0x228>)
 8008354:	4b35      	ldr	r3, [pc, #212]	@ (800842c <Device_Init+0x20c>)
 8008356:	0019      	movs	r1, r3
 8008358:	2003      	movs	r0, #3
 800835a:	f005 fd43 	bl	800dde4 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800835e:	f000 fddf 	bl	8008f20 <probe_sen5x>
 8008362:	1e03      	subs	r3, r0, #0
 8008364:	d10c      	bne.n	8008380 <Device_Init+0x160>
    Debug("PM sensor initialised.");
 8008366:	4a39      	ldr	r2, [pc, #228]	@ (800844c <Device_Init+0x22c>)
 8008368:	4b30      	ldr	r3, [pc, #192]	@ (800842c <Device_Init+0x20c>)
 800836a:	0019      	movs	r1, r3
 800836c:	2003      	movs	r0, #3
 800836e:	f005 fd39 	bl	800dde4 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 8008372:	4b2b      	ldr	r3, [pc, #172]	@ (8008420 <Device_Init+0x200>)
 8008374:	2201      	movs	r2, #1
 8008376:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 8008378:	4b2a      	ldr	r3, [pc, #168]	@ (8008424 <Device_Init+0x204>)
 800837a:	2201      	movs	r2, #1
 800837c:	709a      	strb	r2, [r3, #2]
 800837e:	e00d      	b.n	800839c <Device_Init+0x17c>
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 8008380:	f000 fda6 	bl	8008ed0 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 8008384:	4a32      	ldr	r2, [pc, #200]	@ (8008450 <Device_Init+0x230>)
 8008386:	4b29      	ldr	r3, [pc, #164]	@ (800842c <Device_Init+0x20c>)
 8008388:	0019      	movs	r1, r3
 800838a:	2003      	movs	r0, #3
 800838c:	f005 fd2a 	bl	800dde4 <CreateLine>
    SensorProbe.PM_Present = false;
 8008390:	4b23      	ldr	r3, [pc, #140]	@ (8008420 <Device_Init+0x200>)
 8008392:	2200      	movs	r2, #0
 8008394:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = false;
 8008396:	4b23      	ldr	r3, [pc, #140]	@ (8008424 <Device_Init+0x204>)
 8008398:	2200      	movs	r2, #0
 800839a:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800839c:	4b20      	ldr	r3, [pc, #128]	@ (8008420 <Device_Init+0x200>)
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <Device_Init+0x188>
 80083a4:	4b2b      	ldr	r3, [pc, #172]	@ (8008454 <Device_Init+0x234>)
 80083a6:	e000      	b.n	80083aa <Device_Init+0x18a>
 80083a8:	4b2b      	ldr	r3, [pc, #172]	@ (8008458 <Device_Init+0x238>)
 80083aa:	4a2c      	ldr	r2, [pc, #176]	@ (800845c <Device_Init+0x23c>)
 80083ac:	4924      	ldr	r1, [pc, #144]	@ (8008440 <Device_Init+0x220>)
 80083ae:	2002      	movs	r0, #2
 80083b0:	f005 fd18 	bl	800dde4 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 80083b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008420 <Device_Init+0x200>)
 80083b6:	785b      	ldrb	r3, [r3, #1]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <Device_Init+0x1a0>
 80083bc:	4b25      	ldr	r3, [pc, #148]	@ (8008454 <Device_Init+0x234>)
 80083be:	e000      	b.n	80083c2 <Device_Init+0x1a2>
 80083c0:	4b25      	ldr	r3, [pc, #148]	@ (8008458 <Device_Init+0x238>)
 80083c2:	4a27      	ldr	r2, [pc, #156]	@ (8008460 <Device_Init+0x240>)
 80083c4:	491e      	ldr	r1, [pc, #120]	@ (8008440 <Device_Init+0x220>)
 80083c6:	2002      	movs	r0, #2
 80083c8:	f005 fd0c 	bl	800dde4 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 80083cc:	4b14      	ldr	r3, [pc, #80]	@ (8008420 <Device_Init+0x200>)
 80083ce:	789b      	ldrb	r3, [r3, #2]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <Device_Init+0x1b8>
 80083d4:	4b1f      	ldr	r3, [pc, #124]	@ (8008454 <Device_Init+0x234>)
 80083d6:	e000      	b.n	80083da <Device_Init+0x1ba>
 80083d8:	4b1f      	ldr	r3, [pc, #124]	@ (8008458 <Device_Init+0x238>)
 80083da:	4a22      	ldr	r2, [pc, #136]	@ (8008464 <Device_Init+0x244>)
 80083dc:	4918      	ldr	r1, [pc, #96]	@ (8008440 <Device_Init+0x220>)
 80083de:	2002      	movs	r0, #2
 80083e0:	f005 fd00 	bl	800dde4 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 80083e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008420 <Device_Init+0x200>)
 80083e6:	78db      	ldrb	r3, [r3, #3]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d001      	beq.n	80083f0 <Device_Init+0x1d0>
 80083ec:	4b19      	ldr	r3, [pc, #100]	@ (8008454 <Device_Init+0x234>)
 80083ee:	e000      	b.n	80083f2 <Device_Init+0x1d2>
 80083f0:	4b19      	ldr	r3, [pc, #100]	@ (8008458 <Device_Init+0x238>)
 80083f2:	4a1d      	ldr	r2, [pc, #116]	@ (8008468 <Device_Init+0x248>)
 80083f4:	4912      	ldr	r1, [pc, #72]	@ (8008440 <Device_Init+0x220>)
 80083f6:	2002      	movs	r0, #2
 80083f8:	f005 fcf4 	bl	800dde4 <CreateLine>
  ESP_Init(espUart);
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	0018      	movs	r0, r3
 8008400:	f7fb fb14 	bl	8003a2c <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 8008404:	4a19      	ldr	r2, [pc, #100]	@ (800846c <Device_Init+0x24c>)
 8008406:	4b09      	ldr	r3, [pc, #36]	@ (800842c <Device_Init+0x20c>)
 8008408:	0019      	movs	r1, r3
 800840a:	2003      	movs	r0, #3
 800840c:	f005 fcea 	bl	800dde4 <CreateLine>
}
 8008410:	46c0      	nop			@ (mov r8, r8)
 8008412:	46bd      	mov	sp, r7
 8008414:	b004      	add	sp, #16
 8008416:	bd80      	pop	{r7, pc}
 8008418:	08023a20 	.word	0x08023a20
 800841c:	08023a50 	.word	0x08023a50
 8008420:	20000fcc 	.word	0x20000fcc
 8008424:	20000080 	.word	0x20000080
 8008428:	08023a54 	.word	0x08023a54
 800842c:	08023a80 	.word	0x08023a80
 8008430:	08023a84 	.word	0x08023a84
 8008434:	08023aa0 	.word	0x08023aa0
 8008438:	50000400 	.word	0x50000400
 800843c:	08023ab8 	.word	0x08023ab8
 8008440:	08023adc 	.word	0x08023adc
 8008444:	08023ae0 	.word	0x08023ae0
 8008448:	08023b0c 	.word	0x08023b0c
 800844c:	08023b38 	.word	0x08023b38
 8008450:	08023b50 	.word	0x08023b50
 8008454:	08023b74 	.word	0x08023b74
 8008458:	08023b78 	.word	0x08023b78
 800845c:	08023b7c 	.word	0x08023b7c
 8008460:	08023b98 	.word	0x08023b98
 8008464:	08023bb4 	.word	0x08023bb4
 8008468:	08023bd0 	.word	0x08023bd0
 800846c:	08023bec 	.word	0x08023bec

08008470 <Device_Test>:

void Device_Test(){
 8008470:	b580      	push	{r7, lr}
 8008472:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 8008474:	4b31      	ldr	r3, [pc, #196]	@ (800853c <Device_Test+0xcc>)
 8008476:	78db      	ldrb	r3, [r3, #3]
 8008478:	2201      	movs	r2, #1
 800847a:	4053      	eors	r3, r2
 800847c:	b2db      	uxtb	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	d021      	beq.n	80084c6 <Device_Test+0x56>
    if(MIC_TestMeasurementDone()){
 8008482:	f000 fa9b 	bl	80089bc <MIC_TestMeasurementDone>
 8008486:	1e03      	subs	r3, r0, #0
 8008488:	d00e      	beq.n	80084a8 <Device_Test+0x38>
      //when this condition is met, the device is definite operational
//      Debug("MIC_TestMeasurementDone() is true");
      SensorProbe.MIC_Present = true;
 800848a:	4b2c      	ldr	r3, [pc, #176]	@ (800853c <Device_Test+0xcc>)
 800848c:	2201      	movs	r2, #1
 800848e:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8008490:	4b2b      	ldr	r3, [pc, #172]	@ (8008540 <Device_Test+0xd0>)
 8008492:	2201      	movs	r2, #1
 8008494:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 8008496:	23fa      	movs	r3, #250	@ 0xfa
 8008498:	011a      	lsls	r2, r3, #4
 800849a:	492a      	ldr	r1, [pc, #168]	@ (8008544 <Device_Test+0xd4>)
 800849c:	23fa      	movs	r3, #250	@ 0xfa
 800849e:	011b      	lsls	r3, r3, #4
 80084a0:	0018      	movs	r0, r3
 80084a2:	f004 fc03 	bl	800ccac <SetStatusLED>
 80084a6:	e00e      	b.n	80084c6 <Device_Test+0x56>
    }
    else{
      if (micSettlingComplete()) {
 80084a8:	f003 fd56 	bl	800bf58 <micSettlingComplete>
 80084ac:	1e03      	subs	r3, r0, #0
 80084ae:	d00a      	beq.n	80084c6 <Device_Test+0x56>
        // his has to be met first
//        Debug("micSettlingComplete() is true");
        Sensor.MIC_measurementEnabled = true;
 80084b0:	4b23      	ldr	r3, [pc, #140]	@ (8008540 <Device_Test+0xd0>)
 80084b2:	2201      	movs	r2, #1
 80084b4:	70da      	strb	r2, [r3, #3]
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 80084b6:	23fa      	movs	r3, #250	@ 0xfa
 80084b8:	011a      	lsls	r2, r3, #4
 80084ba:	23fa      	movs	r3, #250	@ 0xfa
 80084bc:	011b      	lsls	r3, r3, #4
 80084be:	4821      	ldr	r0, [pc, #132]	@ (8008544 <Device_Test+0xd4>)
 80084c0:	0019      	movs	r1, r3
 80084c2:	f004 fbf3 	bl	800ccac <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 80084c6:	4b1d      	ldr	r3, [pc, #116]	@ (800853c <Device_Test+0xcc>)
 80084c8:	791b      	ldrb	r3, [r3, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	4053      	eors	r3, r2
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <Device_Test+0x68>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 80084d4:	f7fc fe86 	bl	80051e4 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 80084d8:	4b18      	ldr	r3, [pc, #96]	@ (800853c <Device_Test+0xcc>)
 80084da:	791b      	ldrb	r3, [r3, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d003      	beq.n	80084e8 <Device_Test+0x78>
 80084e0:	4b16      	ldr	r3, [pc, #88]	@ (800853c <Device_Test+0xcc>)
 80084e2:	78db      	ldrb	r3, [r3, #3]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d106      	bne.n	80084f6 <Device_Test+0x86>
 80084e8:	4b17      	ldr	r3, [pc, #92]	@ (8008548 <Device_Test+0xd8>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	0018      	movs	r0, r3
 80084ee:	f005 fc23 	bl	800dd38 <TimestampIsReached>
 80084f2:	1e03      	subs	r3, r0, #0
 80084f4:	d01f      	beq.n	8008536 <Device_Test+0xc6>
    Info("Test completed");
 80084f6:	4a15      	ldr	r2, [pc, #84]	@ (800854c <Device_Test+0xdc>)
 80084f8:	4b15      	ldr	r3, [pc, #84]	@ (8008550 <Device_Test+0xe0>)
 80084fa:	0019      	movs	r1, r3
 80084fc:	2002      	movs	r0, #2
 80084fe:	f005 fc71 	bl	800dde4 <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 8008502:	4b0e      	ldr	r3, [pc, #56]	@ (800853c <Device_Test+0xcc>)
 8008504:	791b      	ldrb	r3, [r3, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <Device_Test+0x9e>
 800850a:	4b12      	ldr	r3, [pc, #72]	@ (8008554 <Device_Test+0xe4>)
 800850c:	e000      	b.n	8008510 <Device_Test+0xa0>
 800850e:	4b12      	ldr	r3, [pc, #72]	@ (8008558 <Device_Test+0xe8>)
 8008510:	4a12      	ldr	r2, [pc, #72]	@ (800855c <Device_Test+0xec>)
 8008512:	490f      	ldr	r1, [pc, #60]	@ (8008550 <Device_Test+0xe0>)
 8008514:	2002      	movs	r0, #2
 8008516:	f005 fc65 	bl	800dde4 <CreateLine>
    Info("MIC function:%s", SensorProbe.MIC_Present?"passed": "failed");
 800851a:	4b08      	ldr	r3, [pc, #32]	@ (800853c <Device_Test+0xcc>)
 800851c:	78db      	ldrb	r3, [r3, #3]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <Device_Test+0xb6>
 8008522:	4b0c      	ldr	r3, [pc, #48]	@ (8008554 <Device_Test+0xe4>)
 8008524:	e000      	b.n	8008528 <Device_Test+0xb8>
 8008526:	4b0c      	ldr	r3, [pc, #48]	@ (8008558 <Device_Test+0xe8>)
 8008528:	4a0d      	ldr	r2, [pc, #52]	@ (8008560 <Device_Test+0xf0>)
 800852a:	4909      	ldr	r1, [pc, #36]	@ (8008550 <Device_Test+0xe0>)
 800852c:	2002      	movs	r0, #2
 800852e:	f005 fc59 	bl	800dde4 <CreateLine>
    SetTestDone();
 8008532:	f7ff fa9f 	bl	8007a74 <SetTestDone>
  }
}
 8008536:	46c0      	nop			@ (mov r8, r8)
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	20000fcc 	.word	0x20000fcc
 8008540:	20000080 	.word	0x20000080
 8008544:	00000bb8 	.word	0x00000bb8
 8008548:	20000fc0 	.word	0x20000fc0
 800854c:	08023c10 	.word	0x08023c10
 8008550:	08023adc 	.word	0x08023adc
 8008554:	08023c20 	.word	0x08023c20
 8008558:	08023c28 	.word	0x08023c28
 800855c:	08023c30 	.word	0x08023c30
 8008560:	08023c44 	.word	0x08023c44

08008564 <AllDevicesReady>:

bool AllDevicesReady() {
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 8008568:	4b27      	ldr	r3, [pc, #156]	@ (8008608 <AllDevicesReady+0xa4>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	0018      	movs	r0, r3
 800856e:	f005 fbe3 	bl	800dd38 <TimestampIsReached>
 8008572:	1e03      	subs	r3, r0, #0
 8008574:	d043      	beq.n	80085fe <AllDevicesReady+0x9a>
    if (HIDSstate == HIDS_STATE_WAIT) {
 8008576:	4b25      	ldr	r3, [pc, #148]	@ (800860c <AllDevicesReady+0xa8>)
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	2b06      	cmp	r3, #6
 800857c:	d102      	bne.n	8008584 <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 800857e:	4b24      	ldr	r3, [pc, #144]	@ (8008610 <AllDevicesReady+0xac>)
 8008580:	2200      	movs	r2, #0
 8008582:	701a      	strb	r2, [r3, #0]
    }
    if (SGPstate == SGP_STATE_WAIT) {
 8008584:	4b23      	ldr	r3, [pc, #140]	@ (8008614 <AllDevicesReady+0xb0>)
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	2b07      	cmp	r3, #7
 800858a:	d102      	bne.n	8008592 <AllDevicesReady+0x2e>
      Sensor.VOC_measurementEnabled = false;
 800858c:	4b20      	ldr	r3, [pc, #128]	@ (8008610 <AllDevicesReady+0xac>)
 800858e:	2200      	movs	r2, #0
 8008590:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 8008592:	4b21      	ldr	r3, [pc, #132]	@ (8008618 <AllDevicesReady+0xb4>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d102      	bne.n	80085a0 <AllDevicesReady+0x3c>
      Sensor.PM_measurementEnabled = false;
 800859a:	4b1d      	ldr	r3, [pc, #116]	@ (8008610 <AllDevicesReady+0xac>)
 800859c:	2200      	movs	r2, #0
 800859e:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 80085a0:	4b1e      	ldr	r3, [pc, #120]	@ (800861c <AllDevicesReady+0xb8>)
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	2b03      	cmp	r3, #3
 80085a6:	d102      	bne.n	80085ae <AllDevicesReady+0x4a>
      Sensor.MIC_measurementEnabled = false;
 80085a8:	4b19      	ldr	r3, [pc, #100]	@ (8008610 <AllDevicesReady+0xac>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 80085ae:	4b1c      	ldr	r3, [pc, #112]	@ (8008620 <AllDevicesReady+0xbc>)
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	2b09      	cmp	r3, #9
 80085b4:	d123      	bne.n	80085fe <AllDevicesReady+0x9a>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80085b6:	4b16      	ldr	r3, [pc, #88]	@ (8008610 <AllDevicesReady+0xac>)
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	2201      	movs	r2, #1
 80085bc:	4053      	eors	r3, r2
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d016      	beq.n	80085f2 <AllDevicesReady+0x8e>
 80085c4:	4b12      	ldr	r3, [pc, #72]	@ (8008610 <AllDevicesReady+0xac>)
 80085c6:	785b      	ldrb	r3, [r3, #1]
 80085c8:	2201      	movs	r2, #1
 80085ca:	4053      	eors	r3, r2
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00f      	beq.n	80085f2 <AllDevicesReady+0x8e>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 80085d2:	4b0f      	ldr	r3, [pc, #60]	@ (8008610 <AllDevicesReady+0xac>)
 80085d4:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80085d6:	2201      	movs	r2, #1
 80085d8:	4053      	eors	r3, r2
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d008      	beq.n	80085f2 <AllDevicesReady+0x8e>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 80085e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008610 <AllDevicesReady+0xac>)
 80085e2:	78db      	ldrb	r3, [r3, #3]
 80085e4:	2201      	movs	r2, #1
 80085e6:	4053      	eors	r3, r2
 80085e8:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <AllDevicesReady+0x8e>
 80085ee:	2301      	movs	r3, #1
 80085f0:	e000      	b.n	80085f4 <AllDevicesReady+0x90>
 80085f2:	2300      	movs	r3, #0
 80085f4:	1c1a      	adds	r2, r3, #0
 80085f6:	2301      	movs	r3, #1
 80085f8:	4013      	ands	r3, r2
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	e000      	b.n	8008600 <AllDevicesReady+0x9c>
    }
  }
  return false;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	0018      	movs	r0, r3
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	46c0      	nop			@ (mov r8, r8)
 8008608:	20000fc0 	.word	0x20000fc0
 800860c:	20000fac 	.word	0x20000fac
 8008610:	20000080 	.word	0x20000080
 8008614:	20000fab 	.word	0x20000fab
 8008618:	20000085 	.word	0x20000085
 800861c:	20000fad 	.word	0x20000fad
 8008620:	20000fae 	.word	0x20000fae

08008624 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 8008628:	4b0f      	ldr	r3, [pc, #60]	@ (8008668 <EnabledConnectedDevices+0x44>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 8008630:	4b0e      	ldr	r3, [pc, #56]	@ (800866c <EnabledConnectedDevices+0x48>)
 8008632:	2201      	movs	r2, #1
 8008634:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.VOC_Present) {
 8008636:	4b0c      	ldr	r3, [pc, #48]	@ (8008668 <EnabledConnectedDevices+0x44>)
 8008638:	785b      	ldrb	r3, [r3, #1]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <EnabledConnectedDevices+0x20>
    Sensor.VOC_measurementEnabled = true;
 800863e:	4b0b      	ldr	r3, [pc, #44]	@ (800866c <EnabledConnectedDevices+0x48>)
 8008640:	2201      	movs	r2, #1
 8008642:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 8008644:	4b08      	ldr	r3, [pc, #32]	@ (8008668 <EnabledConnectedDevices+0x44>)
 8008646:	789b      	ldrb	r3, [r3, #2]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d002      	beq.n	8008652 <EnabledConnectedDevices+0x2e>
    Sensor.PM_measurementEnabled = true;
 800864c:	4b07      	ldr	r3, [pc, #28]	@ (800866c <EnabledConnectedDevices+0x48>)
 800864e:	2201      	movs	r2, #1
 8008650:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 8008652:	4b05      	ldr	r3, [pc, #20]	@ (8008668 <EnabledConnectedDevices+0x44>)
 8008654:	78db      	ldrb	r3, [r3, #3]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d002      	beq.n	8008660 <EnabledConnectedDevices+0x3c>
    Sensor.MIC_measurementEnabled = true;
 800865a:	4b04      	ldr	r3, [pc, #16]	@ (800866c <EnabledConnectedDevices+0x48>)
 800865c:	2201      	movs	r2, #1
 800865e:	70da      	strb	r2, [r3, #3]
  }
}
 8008660:	46c0      	nop			@ (mov r8, r8)
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	46c0      	nop			@ (mov r8, r8)
 8008668:	20000fcc 	.word	0x20000fcc
 800866c:	20000080 	.word	0x20000080

08008670 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 8008670:	b580      	push	{r7, lr}
 8008672:	af00      	add	r7, sp, #0
    Sensor.HT_measurementEnabled = false;
 8008674:	4b07      	ldr	r3, [pc, #28]	@ (8008694 <DisableConnectedDevices+0x24>)
 8008676:	2200      	movs	r2, #0
 8008678:	701a      	strb	r2, [r3, #0]
    Sensor.VOC_measurementEnabled = false;
 800867a:	4b06      	ldr	r3, [pc, #24]	@ (8008694 <DisableConnectedDevices+0x24>)
 800867c:	2200      	movs	r2, #0
 800867e:	705a      	strb	r2, [r3, #1]
    Sensor.PM_measurementEnabled = false;
 8008680:	4b04      	ldr	r3, [pc, #16]	@ (8008694 <DisableConnectedDevices+0x24>)
 8008682:	2200      	movs	r2, #0
 8008684:	709a      	strb	r2, [r3, #2]
    Sensor.MIC_measurementEnabled = false;
 8008686:	4b03      	ldr	r3, [pc, #12]	@ (8008694 <DisableConnectedDevices+0x24>)
 8008688:	2200      	movs	r2, #0
 800868a:	70da      	strb	r2, [r3, #3]
}
 800868c:	46c0      	nop			@ (mov r8, r8)
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	46c0      	nop			@ (mov r8, r8)
 8008694:	20000080 	.word	0x20000080

08008698 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 8008698:	b580      	push	{r7, lr}
 800869a:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800869c:	4b02      	ldr	r3, [pc, #8]	@ (80086a8 <ResetdBAmax+0x10>)
 800869e:	2200      	movs	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]
}
 80086a2:	46c0      	nop			@ (mov r8, r8)
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	20001018 	.word	0x20001018

080086ac <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 80086b4:	f005 ffec 	bl	800e690 <HAL_GetTick>
 80086b8:	0002      	movs	r2, r0
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	18d2      	adds	r2, r2, r3
 80086be:	4b03      	ldr	r3, [pc, #12]	@ (80086cc <setMICTimeStamp+0x20>)
 80086c0:	601a      	str	r2, [r3, #0]
}
 80086c2:	46c0      	nop			@ (mov r8, r8)
 80086c4:	46bd      	mov	sp, r7
 80086c6:	b002      	add	sp, #8
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	46c0      	nop			@ (mov r8, r8)
 80086cc:	20001020 	.word	0x20001020

080086d0 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
  counter = 0;
 80086d4:	4b05      	ldr	r3, [pc, #20]	@ (80086ec <ResetDBACalculator+0x1c>)
 80086d6:	2200      	movs	r2, #0
 80086d8:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 80086da:	4b05      	ldr	r3, [pc, #20]	@ (80086f0 <ResetDBACalculator+0x20>)
 80086dc:	2201      	movs	r2, #1
 80086de:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 80086e0:	4b04      	ldr	r3, [pc, #16]	@ (80086f4 <ResetDBACalculator+0x24>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	701a      	strb	r2, [r3, #0]
}
 80086e6:	46c0      	nop			@ (mov r8, r8)
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	2000101c 	.word	0x2000101c
 80086f0:	20000084 	.word	0x20000084
 80086f4:	2000101d 	.word	0x2000101d

080086f8 <MIC_Print>:

void MIC_Print(void) {
 80086f8:	b5b0      	push	{r4, r5, r7, lr}
 80086fa:	b08a      	sub	sp, #40	@ 0x28
 80086fc:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 80086fe:	4b9d      	ldr	r3, [pc, #628]	@ (8008974 <MIC_Print+0x27c>)
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	4b9d      	ldr	r3, [pc, #628]	@ (8008978 <MIC_Print+0x280>)
 8008704:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 8008706:	4b9d      	ldr	r3, [pc, #628]	@ (800897c <MIC_Print+0x284>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	001a      	movs	r2, r3
 800870c:	4b9a      	ldr	r3, [pc, #616]	@ (8008978 <MIC_Print+0x280>)
 800870e:	6819      	ldr	r1, [r3, #0]
 8008710:	4b9b      	ldr	r3, [pc, #620]	@ (8008980 <MIC_Print+0x288>)
 8008712:	0092      	lsls	r2, r2, #2
 8008714:	50d1      	str	r1, [r2, r3]
  counter++;
 8008716:	4b99      	ldr	r3, [pc, #612]	@ (800897c <MIC_Print+0x284>)
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	3301      	adds	r3, #1
 800871c:	b2da      	uxtb	r2, r3
 800871e:	4b97      	ldr	r3, [pc, #604]	@ (800897c <MIC_Print+0x284>)
 8008720:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 8008722:	4b96      	ldr	r3, [pc, #600]	@ (800897c <MIC_Print+0x284>)
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	2b09      	cmp	r3, #9
 8008728:	d80b      	bhi.n	8008742 <MIC_Print+0x4a>
 800872a:	4b96      	ldr	r3, [pc, #600]	@ (8008984 <MIC_Print+0x28c>)
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	2201      	movs	r2, #1
 8008730:	4053      	eors	r3, r2
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b00      	cmp	r3, #0
 8008736:	d004      	beq.n	8008742 <MIC_Print+0x4a>
    denominator = counter;
 8008738:	4b90      	ldr	r3, [pc, #576]	@ (800897c <MIC_Print+0x284>)
 800873a:	781a      	ldrb	r2, [r3, #0]
 800873c:	4b92      	ldr	r3, [pc, #584]	@ (8008988 <MIC_Print+0x290>)
 800873e:	701a      	strb	r2, [r3, #0]
 8008740:	e005      	b.n	800874e <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 8008742:	4b91      	ldr	r3, [pc, #580]	@ (8008988 <MIC_Print+0x290>)
 8008744:	220a      	movs	r2, #10
 8008746:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 8008748:	4b8e      	ldr	r3, [pc, #568]	@ (8008984 <MIC_Print+0x28c>)
 800874a:	2201      	movs	r2, #1
 800874c:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800874e:	4b8f      	ldr	r3, [pc, #572]	@ (800898c <MIC_Print+0x294>)
 8008750:	2200      	movs	r2, #0
 8008752:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 8008754:	230f      	movs	r3, #15
 8008756:	18fb      	adds	r3, r7, r3
 8008758:	2200      	movs	r2, #0
 800875a:	701a      	strb	r2, [r3, #0]
 800875c:	e03e      	b.n	80087dc <MIC_Print+0xe4>
    dBAsum += dBASamples[i];
 800875e:	240f      	movs	r4, #15
 8008760:	193b      	adds	r3, r7, r4
 8008762:	781a      	ldrb	r2, [r3, #0]
 8008764:	4b86      	ldr	r3, [pc, #536]	@ (8008980 <MIC_Print+0x288>)
 8008766:	0092      	lsls	r2, r2, #2
 8008768:	58d2      	ldr	r2, [r2, r3]
 800876a:	4b88      	ldr	r3, [pc, #544]	@ (800898c <MIC_Print+0x294>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	1c19      	adds	r1, r3, #0
 8008770:	1c10      	adds	r0, r2, #0
 8008772:	f7f8 f8a5 	bl	80008c0 <__aeabi_fadd>
 8008776:	1c03      	adds	r3, r0, #0
 8008778:	1c1a      	adds	r2, r3, #0
 800877a:	4b84      	ldr	r3, [pc, #528]	@ (800898c <MIC_Print+0x294>)
 800877c:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800877e:	193b      	adds	r3, r7, r4
 8008780:	781a      	ldrb	r2, [r3, #0]
 8008782:	4b7f      	ldr	r3, [pc, #508]	@ (8008980 <MIC_Print+0x288>)
 8008784:	0092      	lsls	r2, r2, #2
 8008786:	58d2      	ldr	r2, [r2, r3]
 8008788:	4b81      	ldr	r3, [pc, #516]	@ (8008990 <MIC_Print+0x298>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	1c19      	adds	r1, r3, #0
 800878e:	1c10      	adds	r0, r2, #0
 8008790:	f7f7 fee2 	bl	8000558 <__aeabi_fcmpgt>
 8008794:	1e03      	subs	r3, r0, #0
 8008796:	d006      	beq.n	80087a6 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 8008798:	193b      	adds	r3, r7, r4
 800879a:	781a      	ldrb	r2, [r3, #0]
 800879c:	4b78      	ldr	r3, [pc, #480]	@ (8008980 <MIC_Print+0x288>)
 800879e:	0092      	lsls	r2, r2, #2
 80087a0:	58d2      	ldr	r2, [r2, r3]
 80087a2:	4b7b      	ldr	r3, [pc, #492]	@ (8008990 <MIC_Print+0x298>)
 80087a4:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 80087a6:	4b79      	ldr	r3, [pc, #484]	@ (800898c <MIC_Print+0x294>)
 80087a8:	681c      	ldr	r4, [r3, #0]
 80087aa:	4b77      	ldr	r3, [pc, #476]	@ (8008988 <MIC_Print+0x290>)
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	0018      	movs	r0, r3
 80087b0:	f7f8 ff5a 	bl	8001668 <__aeabi_ui2f>
 80087b4:	1c03      	adds	r3, r0, #0
 80087b6:	1c19      	adds	r1, r3, #0
 80087b8:	1c20      	adds	r0, r4, #0
 80087ba:	f7f8 fa0b 	bl	8000bd4 <__aeabi_fdiv>
 80087be:	1c03      	adds	r3, r0, #0
 80087c0:	1c1a      	adds	r2, r3, #0
 80087c2:	4b74      	ldr	r3, [pc, #464]	@ (8008994 <MIC_Print+0x29c>)
 80087c4:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBAmax);
 80087c6:	4b72      	ldr	r3, [pc, #456]	@ (8008990 <MIC_Print+0x298>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	1c18      	adds	r0, r3, #0
 80087cc:	f7fb f8ba 	bl	8003944 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 80087d0:	210f      	movs	r1, #15
 80087d2:	187b      	adds	r3, r7, r1
 80087d4:	781a      	ldrb	r2, [r3, #0]
 80087d6:	187b      	adds	r3, r7, r1
 80087d8:	3201      	adds	r2, #1
 80087da:	701a      	strb	r2, [r3, #0]
 80087dc:	4b6a      	ldr	r3, [pc, #424]	@ (8008988 <MIC_Print+0x290>)
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	220f      	movs	r2, #15
 80087e2:	18ba      	adds	r2, r7, r2
 80087e4:	7812      	ldrb	r2, [r2, #0]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d3b9      	bcc.n	800875e <MIC_Print+0x66>
  }
  print("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 80087ea:	4b63      	ldr	r3, [pc, #396]	@ (8008978 <MIC_Print+0x280>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	1c18      	adds	r0, r3, #0
 80087f0:	f7fa fe38 	bl	8003464 <__aeabi_f2d>
 80087f4:	6038      	str	r0, [r7, #0]
 80087f6:	6079      	str	r1, [r7, #4]
 80087f8:	4b65      	ldr	r3, [pc, #404]	@ (8008990 <MIC_Print+0x298>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	1c18      	adds	r0, r3, #0
 80087fe:	f7fa fe31 	bl	8003464 <__aeabi_f2d>
 8008802:	0004      	movs	r4, r0
 8008804:	000d      	movs	r5, r1
 8008806:	4b63      	ldr	r3, [pc, #396]	@ (8008994 <MIC_Print+0x29c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	1c18      	adds	r0, r3, #0
 800880c:	f7fa fe2a 	bl	8003464 <__aeabi_f2d>
 8008810:	0002      	movs	r2, r0
 8008812:	000b      	movs	r3, r1
 8008814:	4960      	ldr	r1, [pc, #384]	@ (8008998 <MIC_Print+0x2a0>)
 8008816:	9204      	str	r2, [sp, #16]
 8008818:	9305      	str	r3, [sp, #20]
 800881a:	9402      	str	r4, [sp, #8]
 800881c:	9503      	str	r5, [sp, #12]
 800881e:	4b5f      	ldr	r3, [pc, #380]	@ (800899c <MIC_Print+0x2a4>)
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	0008      	movs	r0, r1
 8008828:	f000 fa0c 	bl	8008c44 <print>

  if(counter > NUMBER_OF_SAMPLES){
 800882c:	4b53      	ldr	r3, [pc, #332]	@ (800897c <MIC_Print+0x284>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	2b0a      	cmp	r3, #10
 8008832:	d902      	bls.n	800883a <MIC_Print+0x142>
    counter = 0;
 8008834:	4b51      	ldr	r3, [pc, #324]	@ (800897c <MIC_Print+0x284>)
 8008836:	2200      	movs	r2, #0
 8008838:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800883a:	4b4f      	ldr	r3, [pc, #316]	@ (8008978 <MIC_Print+0x280>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4958      	ldr	r1, [pc, #352]	@ (80089a0 <MIC_Print+0x2a8>)
 8008840:	1c18      	adds	r0, r3, #0
 8008842:	f7f7 fe93 	bl	800056c <__aeabi_fcmpge>
 8008846:	1e03      	subs	r3, r0, #0
 8008848:	d004      	beq.n	8008854 <MIC_Print+0x15c>
    SetDBLED(true, true, true);
 800884a:	2201      	movs	r2, #1
 800884c:	2101      	movs	r1, #1
 800884e:	2001      	movs	r0, #1
 8008850:	f004 fa60 	bl	800cd14 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 8008854:	4b48      	ldr	r3, [pc, #288]	@ (8008978 <MIC_Print+0x280>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4952      	ldr	r1, [pc, #328]	@ (80089a4 <MIC_Print+0x2ac>)
 800885a:	1c18      	adds	r0, r3, #0
 800885c:	f7f7 fe86 	bl	800056c <__aeabi_fcmpge>
 8008860:	1e03      	subs	r3, r0, #0
 8008862:	d00c      	beq.n	800887e <MIC_Print+0x186>
 8008864:	4b44      	ldr	r3, [pc, #272]	@ (8008978 <MIC_Print+0x280>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	494d      	ldr	r1, [pc, #308]	@ (80089a0 <MIC_Print+0x2a8>)
 800886a:	1c18      	adds	r0, r3, #0
 800886c:	f7f7 fe60 	bl	8000530 <__aeabi_fcmplt>
 8008870:	1e03      	subs	r3, r0, #0
 8008872:	d004      	beq.n	800887e <MIC_Print+0x186>
    SetDBLED(true, false, false);
 8008874:	2200      	movs	r2, #0
 8008876:	2100      	movs	r1, #0
 8008878:	2001      	movs	r0, #1
 800887a:	f004 fa4b 	bl	800cd14 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800887e:	4b3e      	ldr	r3, [pc, #248]	@ (8008978 <MIC_Print+0x280>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4949      	ldr	r1, [pc, #292]	@ (80089a8 <MIC_Print+0x2b0>)
 8008884:	1c18      	adds	r0, r3, #0
 8008886:	f7f7 fe71 	bl	800056c <__aeabi_fcmpge>
 800888a:	1e03      	subs	r3, r0, #0
 800888c:	d00c      	beq.n	80088a8 <MIC_Print+0x1b0>
 800888e:	4b3a      	ldr	r3, [pc, #232]	@ (8008978 <MIC_Print+0x280>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4944      	ldr	r1, [pc, #272]	@ (80089a4 <MIC_Print+0x2ac>)
 8008894:	1c18      	adds	r0, r3, #0
 8008896:	f7f7 fe4b 	bl	8000530 <__aeabi_fcmplt>
 800889a:	1e03      	subs	r3, r0, #0
 800889c:	d004      	beq.n	80088a8 <MIC_Print+0x1b0>
    SetDBLED(true, true, false);
 800889e:	2200      	movs	r2, #0
 80088a0:	2101      	movs	r1, #1
 80088a2:	2001      	movs	r0, #1
 80088a4:	f004 fa36 	bl	800cd14 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 80088a8:	4b33      	ldr	r3, [pc, #204]	@ (8008978 <MIC_Print+0x280>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	493f      	ldr	r1, [pc, #252]	@ (80089ac <MIC_Print+0x2b4>)
 80088ae:	1c18      	adds	r0, r3, #0
 80088b0:	f7f7 fe5c 	bl	800056c <__aeabi_fcmpge>
 80088b4:	1e03      	subs	r3, r0, #0
 80088b6:	d00c      	beq.n	80088d2 <MIC_Print+0x1da>
 80088b8:	4b2f      	ldr	r3, [pc, #188]	@ (8008978 <MIC_Print+0x280>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	493a      	ldr	r1, [pc, #232]	@ (80089a8 <MIC_Print+0x2b0>)
 80088be:	1c18      	adds	r0, r3, #0
 80088c0:	f7f7 fe36 	bl	8000530 <__aeabi_fcmplt>
 80088c4:	1e03      	subs	r3, r0, #0
 80088c6:	d004      	beq.n	80088d2 <MIC_Print+0x1da>
    SetDBLED(false, true, false);
 80088c8:	2200      	movs	r2, #0
 80088ca:	2101      	movs	r1, #1
 80088cc:	2000      	movs	r0, #0
 80088ce:	f004 fa21 	bl	800cd14 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 80088d2:	4b29      	ldr	r3, [pc, #164]	@ (8008978 <MIC_Print+0x280>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4936      	ldr	r1, [pc, #216]	@ (80089b0 <MIC_Print+0x2b8>)
 80088d8:	1c18      	adds	r0, r3, #0
 80088da:	f7f7 fe47 	bl	800056c <__aeabi_fcmpge>
 80088de:	1e03      	subs	r3, r0, #0
 80088e0:	d00c      	beq.n	80088fc <MIC_Print+0x204>
 80088e2:	4b25      	ldr	r3, [pc, #148]	@ (8008978 <MIC_Print+0x280>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4931      	ldr	r1, [pc, #196]	@ (80089ac <MIC_Print+0x2b4>)
 80088e8:	1c18      	adds	r0, r3, #0
 80088ea:	f7f7 fe21 	bl	8000530 <__aeabi_fcmplt>
 80088ee:	1e03      	subs	r3, r0, #0
 80088f0:	d004      	beq.n	80088fc <MIC_Print+0x204>
    SetDBLED(false, true, true);
 80088f2:	2201      	movs	r2, #1
 80088f4:	2101      	movs	r1, #1
 80088f6:	2000      	movs	r0, #0
 80088f8:	f004 fa0c 	bl	800cd14 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 80088fc:	4b1e      	ldr	r3, [pc, #120]	@ (8008978 <MIC_Print+0x280>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	492c      	ldr	r1, [pc, #176]	@ (80089b4 <MIC_Print+0x2bc>)
 8008902:	1c18      	adds	r0, r3, #0
 8008904:	f7f7 fe32 	bl	800056c <__aeabi_fcmpge>
 8008908:	1e03      	subs	r3, r0, #0
 800890a:	d00c      	beq.n	8008926 <MIC_Print+0x22e>
 800890c:	4b1a      	ldr	r3, [pc, #104]	@ (8008978 <MIC_Print+0x280>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4927      	ldr	r1, [pc, #156]	@ (80089b0 <MIC_Print+0x2b8>)
 8008912:	1c18      	adds	r0, r3, #0
 8008914:	f7f7 fe0c 	bl	8000530 <__aeabi_fcmplt>
 8008918:	1e03      	subs	r3, r0, #0
 800891a:	d004      	beq.n	8008926 <MIC_Print+0x22e>
    SetDBLED(false, false, true);
 800891c:	2201      	movs	r2, #1
 800891e:	2100      	movs	r1, #0
 8008920:	2000      	movs	r0, #0
 8008922:	f004 f9f7 	bl	800cd14 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 8008926:	4b14      	ldr	r3, [pc, #80]	@ (8008978 <MIC_Print+0x280>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4923      	ldr	r1, [pc, #140]	@ (80089b8 <MIC_Print+0x2c0>)
 800892c:	1c18      	adds	r0, r3, #0
 800892e:	f7f7 fe1d 	bl	800056c <__aeabi_fcmpge>
 8008932:	1e03      	subs	r3, r0, #0
 8008934:	d00c      	beq.n	8008950 <MIC_Print+0x258>
 8008936:	4b10      	ldr	r3, [pc, #64]	@ (8008978 <MIC_Print+0x280>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	491e      	ldr	r1, [pc, #120]	@ (80089b4 <MIC_Print+0x2bc>)
 800893c:	1c18      	adds	r0, r3, #0
 800893e:	f7f7 fdf7 	bl	8000530 <__aeabi_fcmplt>
 8008942:	1e03      	subs	r3, r0, #0
 8008944:	d004      	beq.n	8008950 <MIC_Print+0x258>
    SetDBLED(true, false, true);
 8008946:	2201      	movs	r2, #1
 8008948:	2100      	movs	r1, #0
 800894a:	2001      	movs	r0, #1
 800894c:	f004 f9e2 	bl	800cd14 <SetDBLED>
  }
  if(dBA < 35){//off
 8008950:	4b09      	ldr	r3, [pc, #36]	@ (8008978 <MIC_Print+0x280>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4918      	ldr	r1, [pc, #96]	@ (80089b8 <MIC_Print+0x2c0>)
 8008956:	1c18      	adds	r0, r3, #0
 8008958:	f7f7 fdea 	bl	8000530 <__aeabi_fcmplt>
 800895c:	1e03      	subs	r3, r0, #0
 800895e:	d100      	bne.n	8008962 <MIC_Print+0x26a>
    SetDBLED(false, false, false);
  }
}
 8008960:	e004      	b.n	800896c <MIC_Print+0x274>
    SetDBLED(false, false, false);
 8008962:	2200      	movs	r2, #0
 8008964:	2100      	movs	r1, #0
 8008966:	2000      	movs	r0, #0
 8008968:	f004 f9d4 	bl	800cd14 <SetDBLED>
}
 800896c:	46c0      	nop			@ (mov r8, r8)
 800896e:	46bd      	mov	sp, r7
 8008970:	b004      	add	sp, #16
 8008972:	bdb0      	pop	{r4, r5, r7, pc}
 8008974:	20001014 	.word	0x20001014
 8008978:	20000fe0 	.word	0x20000fe0
 800897c:	2000101c 	.word	0x2000101c
 8008980:	20000fe4 	.word	0x20000fe4
 8008984:	2000101d 	.word	0x2000101d
 8008988:	20000084 	.word	0x20000084
 800898c:	20001010 	.word	0x20001010
 8008990:	20001018 	.word	0x20001018
 8008994:	2000100c 	.word	0x2000100c
 8008998:	08023c54 	.word	0x08023c54
 800899c:	20000fd4 	.word	0x20000fd4
 80089a0:	42b40000 	.word	0x42b40000
 80089a4:	42a00000 	.word	0x42a00000
 80089a8:	428c0000 	.word	0x428c0000
 80089ac:	42700000 	.word	0x42700000
 80089b0:	42480000 	.word	0x42480000
 80089b4:	42200000 	.word	0x42200000
 80089b8:	420c0000 	.word	0x420c0000

080089bc <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 80089c2:	4b11      	ldr	r3, [pc, #68]	@ (8008a08 <MIC_TestMeasurementDone+0x4c>)
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	4a10      	ldr	r2, [pc, #64]	@ (8008a0c <MIC_TestMeasurementDone+0x50>)
 80089ca:	4911      	ldr	r1, [pc, #68]	@ (8008a10 <MIC_TestMeasurementDone+0x54>)
 80089cc:	2002      	movs	r0, #2
 80089ce:	f005 fa09 	bl	800dde4 <CreateLine>
  if(DataReady) {
 80089d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008a08 <MIC_TestMeasurementDone+0x4c>)
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d010      	beq.n	80089fe <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 80089dc:	1dfb      	adds	r3, r7, #7
 80089de:	4a0d      	ldr	r2, [pc, #52]	@ (8008a14 <MIC_TestMeasurementDone+0x58>)
 80089e0:	7812      	ldrb	r2, [r2, #0]
 80089e2:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 80089e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008a14 <MIC_TestMeasurementDone+0x58>)
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	4a0b      	ldr	r2, [pc, #44]	@ (8008a18 <MIC_TestMeasurementDone+0x5c>)
 80089ec:	4908      	ldr	r1, [pc, #32]	@ (8008a10 <MIC_TestMeasurementDone+0x54>)
 80089ee:	2002      	movs	r0, #2
 80089f0:	f005 f9f8 	bl	800dde4 <CreateLine>
    ResetMICIndicator();
 80089f4:	f004 fa6c 	bl	800ced0 <ResetMICIndicator>
    return Check;
 80089f8:	1dfb      	adds	r3, r7, #7
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	e000      	b.n	8008a00 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	0018      	movs	r0, r3
 8008a02:	46bd      	mov	sp, r7
 8008a04:	b002      	add	sp, #8
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	20001353 	.word	0x20001353
 8008a0c:	08023c9c 	.word	0x08023c9c
 8008a10:	08023cc8 	.word	0x08023cc8
 8008a14:	20001354 	.word	0x20001354
 8008a18:	08023ccc 	.word	0x08023ccc

08008a1c <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8008a22:	4b78      	ldr	r3, [pc, #480]	@ (8008c04 <Mic_Upkeep+0x1e8>)
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	2b03      	cmp	r3, #3
 8008a28:	d100      	bne.n	8008a2c <Mic_Upkeep+0x10>
 8008a2a:	e0b8      	b.n	8008b9e <Mic_Upkeep+0x182>
 8008a2c:	dd00      	ble.n	8008a30 <Mic_Upkeep+0x14>
 8008a2e:	e0d3      	b.n	8008bd8 <Mic_Upkeep+0x1bc>
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d037      	beq.n	8008aa4 <Mic_Upkeep+0x88>
 8008a34:	dd00      	ble.n	8008a38 <Mic_Upkeep+0x1c>
 8008a36:	e0cf      	b.n	8008bd8 <Mic_Upkeep+0x1bc>
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <Mic_Upkeep+0x26>
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d014      	beq.n	8008a6a <Mic_Upkeep+0x4e>
 8008a40:	e0ca      	b.n	8008bd8 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 8008a42:	2001      	movs	r0, #1
 8008a44:	f003 faac 	bl	800bfa0 <enableMicrophone>
 8008a48:	0003      	movs	r3, r0
 8008a4a:	001a      	movs	r2, r3
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	4053      	eors	r3, r2
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d005      	beq.n	8008a62 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 8008a56:	4a6c      	ldr	r2, [pc, #432]	@ (8008c08 <Mic_Upkeep+0x1ec>)
 8008a58:	4b6c      	ldr	r3, [pc, #432]	@ (8008c0c <Mic_Upkeep+0x1f0>)
 8008a5a:	2180      	movs	r1, #128	@ 0x80
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	f005 fa79 	bl	800df54 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 8008a62:	4b68      	ldr	r3, [pc, #416]	@ (8008c04 <Mic_Upkeep+0x1e8>)
 8008a64:	2201      	movs	r2, #1
 8008a66:	701a      	strb	r2, [r3, #0]
    break;
 8008a68:	e0c5      	b.n	8008bf6 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8008a6a:	f003 fa75 	bl	800bf58 <micSettlingComplete>
 8008a6e:	1e03      	subs	r3, r0, #0
 8008a70:	d105      	bne.n	8008a7e <Mic_Upkeep+0x62>
 8008a72:	4b67      	ldr	r3, [pc, #412]	@ (8008c10 <Mic_Upkeep+0x1f4>)
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d100      	bne.n	8008a7e <Mic_Upkeep+0x62>
 8008a7c:	e0b6      	b.n	8008bec <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 8008a7e:	f003 faf9 	bl	800c074 <startSPLcalculation>
 8008a82:	0003      	movs	r3, r0
 8008a84:	001a      	movs	r2, r3
 8008a86:	2301      	movs	r3, #1
 8008a88:	4053      	eors	r3, r2
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d005      	beq.n	8008a9c <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8008a90:	4a5d      	ldr	r2, [pc, #372]	@ (8008c08 <Mic_Upkeep+0x1ec>)
 8008a92:	4b5e      	ldr	r3, [pc, #376]	@ (8008c0c <Mic_Upkeep+0x1f0>)
 8008a94:	2189      	movs	r1, #137	@ 0x89
 8008a96:	0018      	movs	r0, r3
 8008a98:	f005 fa5c 	bl	800df54 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8008a9c:	4b59      	ldr	r3, [pc, #356]	@ (8008c04 <Mic_Upkeep+0x1e8>)
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008aa2:	e0a3      	b.n	8008bec <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 8008aa4:	4b5b      	ldr	r3, [pc, #364]	@ (8008c14 <Mic_Upkeep+0x1f8>)
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	0018      	movs	r0, r3
 8008aac:	f003 f936 	bl	800bd1c <getSoundData>
 8008ab0:	1e03      	subs	r3, r0, #0
 8008ab2:	d100      	bne.n	8008ab6 <Mic_Upkeep+0x9a>
 8008ab4:	e09c      	b.n	8008bf0 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 8008ab6:	f003 fa2f 	bl	800bf18 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 8008aba:	4b56      	ldr	r3, [pc, #344]	@ (8008c14 <Mic_Upkeep+0x1f8>)
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	001a      	movs	r2, r3
 8008ac0:	4b54      	ldr	r3, [pc, #336]	@ (8008c14 <Mic_Upkeep+0x1f8>)
 8008ac2:	785b      	ldrb	r3, [r3, #1]
 8008ac4:	4954      	ldr	r1, [pc, #336]	@ (8008c18 <Mic_Upkeep+0x1fc>)
 8008ac6:	0038      	movs	r0, r7
 8008ac8:	f016 fef6 	bl	801f8b8 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 8008acc:	4b51      	ldr	r3, [pc, #324]	@ (8008c14 <Mic_Upkeep+0x1f8>)
 8008ace:	89db      	ldrh	r3, [r3, #14]
 8008ad0:	001a      	movs	r2, r3
 8008ad2:	4b50      	ldr	r3, [pc, #320]	@ (8008c14 <Mic_Upkeep+0x1f8>)
 8008ad4:	7c1b      	ldrb	r3, [r3, #16]
 8008ad6:	4951      	ldr	r1, [pc, #324]	@ (8008c1c <Mic_Upkeep+0x200>)
 8008ad8:	4851      	ldr	r0, [pc, #324]	@ (8008c20 <Mic_Upkeep+0x204>)
 8008ada:	f016 feed 	bl	801f8b8 <siprintf>
      dBValue = atof(dBbuffer);
 8008ade:	003b      	movs	r3, r7
 8008ae0:	0018      	movs	r0, r3
 8008ae2:	f015 fa99 	bl	801e018 <atof>
 8008ae6:	0002      	movs	r2, r0
 8008ae8:	000b      	movs	r3, r1
 8008aea:	0010      	movs	r0, r2
 8008aec:	0019      	movs	r1, r3
 8008aee:	f7fa fd01 	bl	80034f4 <__aeabi_d2f>
 8008af2:	1c02      	adds	r2, r0, #0
 8008af4:	4b4b      	ldr	r3, [pc, #300]	@ (8008c24 <Mic_Upkeep+0x208>)
 8008af6:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8008af8:	4b4a      	ldr	r3, [pc, #296]	@ (8008c24 <Mic_Upkeep+0x208>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	494a      	ldr	r1, [pc, #296]	@ (8008c28 <Mic_Upkeep+0x20c>)
 8008afe:	1c18      	adds	r0, r3, #0
 8008b00:	f7f8 fa4e 	bl	8000fa0 <__aeabi_fmul>
 8008b04:	1c03      	adds	r3, r0, #0
 8008b06:	1c18      	adds	r0, r3, #0
 8008b08:	f7fa fcac 	bl	8003464 <__aeabi_f2d>
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	4b47      	ldr	r3, [pc, #284]	@ (8008c2c <Mic_Upkeep+0x210>)
 8008b10:	f7f8 fdec 	bl	80016ec <__aeabi_dadd>
 8008b14:	0002      	movs	r2, r0
 8008b16:	000b      	movs	r3, r1
 8008b18:	0010      	movs	r0, r2
 8008b1a:	0019      	movs	r1, r3
 8008b1c:	f7fa fc14 	bl	8003348 <__aeabi_d2iz>
 8008b20:	0003      	movs	r3, r0
 8008b22:	0018      	movs	r0, r3
 8008b24:	f7fa fc4c 	bl	80033c0 <__aeabi_i2d>
 8008b28:	2200      	movs	r2, #0
 8008b2a:	4b41      	ldr	r3, [pc, #260]	@ (8008c30 <Mic_Upkeep+0x214>)
 8008b2c:	f7f9 f942 	bl	8001db4 <__aeabi_ddiv>
 8008b30:	0002      	movs	r2, r0
 8008b32:	000b      	movs	r3, r1
 8008b34:	0010      	movs	r0, r2
 8008b36:	0019      	movs	r1, r3
 8008b38:	f7fa fcdc 	bl	80034f4 <__aeabi_d2f>
 8008b3c:	1c02      	adds	r2, r0, #0
 8008b3e:	4b39      	ldr	r3, [pc, #228]	@ (8008c24 <Mic_Upkeep+0x208>)
 8008b40:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8008b42:	f7ff fdd9 	bl	80086f8 <MIC_Print>
      if (!startSPLcalculation()) {
 8008b46:	f003 fa95 	bl	800c074 <startSPLcalculation>
 8008b4a:	0003      	movs	r3, r0
 8008b4c:	001a      	movs	r2, r3
 8008b4e:	2301      	movs	r3, #1
 8008b50:	4053      	eors	r3, r2
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d005      	beq.n	8008b64 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 8008b58:	4a2b      	ldr	r2, [pc, #172]	@ (8008c08 <Mic_Upkeep+0x1ec>)
 8008b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8008c0c <Mic_Upkeep+0x1f0>)
 8008b5c:	2199      	movs	r1, #153	@ 0x99
 8008b5e:	0018      	movs	r0, r3
 8008b60:	f005 f9f8 	bl	800df54 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 8008b64:	2000      	movs	r0, #0
 8008b66:	f003 fa1b 	bl	800bfa0 <enableMicrophone>
 8008b6a:	0003      	movs	r3, r0
 8008b6c:	001a      	movs	r2, r3
 8008b6e:	2301      	movs	r3, #1
 8008b70:	4053      	eors	r3, r2
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d005      	beq.n	8008b84 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 8008b78:	4a23      	ldr	r2, [pc, #140]	@ (8008c08 <Mic_Upkeep+0x1ec>)
 8008b7a:	4b24      	ldr	r3, [pc, #144]	@ (8008c0c <Mic_Upkeep+0x1f0>)
 8008b7c:	219c      	movs	r1, #156	@ 0x9c
 8008b7e:	0018      	movs	r0, r3
 8008b80:	f005 f9e8 	bl	800df54 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 8008b84:	f005 fd84 	bl	800e690 <HAL_GetTick>
 8008b88:	0003      	movs	r3, r0
 8008b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8008c34 <Mic_Upkeep+0x218>)
 8008b8c:	189a      	adds	r2, r3, r2
 8008b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8008c38 <Mic_Upkeep+0x21c>)
 8008b90:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 8008b92:	4b1c      	ldr	r3, [pc, #112]	@ (8008c04 <Mic_Upkeep+0x1e8>)
 8008b94:	2203      	movs	r2, #3
 8008b96:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8008b98:	f004 f99a 	bl	800ced0 <ResetMICIndicator>
    }
    break;
 8008b9c:	e028      	b.n	8008bf0 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 8008b9e:	4b26      	ldr	r3, [pc, #152]	@ (8008c38 <Mic_Upkeep+0x21c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	0018      	movs	r0, r3
 8008ba4:	f005 f8c8 	bl	800dd38 <TimestampIsReached>
 8008ba8:	1e03      	subs	r3, r0, #0
 8008baa:	d023      	beq.n	8008bf4 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 8008bac:	2001      	movs	r0, #1
 8008bae:	f003 f9f7 	bl	800bfa0 <enableMicrophone>
 8008bb2:	0003      	movs	r3, r0
 8008bb4:	001a      	movs	r2, r3
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	4053      	eors	r3, r2
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d005      	beq.n	8008bcc <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 8008bc0:	4a11      	ldr	r2, [pc, #68]	@ (8008c08 <Mic_Upkeep+0x1ec>)
 8008bc2:	4b12      	ldr	r3, [pc, #72]	@ (8008c0c <Mic_Upkeep+0x1f0>)
 8008bc4:	21a7      	movs	r1, #167	@ 0xa7
 8008bc6:	0018      	movs	r0, r3
 8008bc8:	f005 f9c4 	bl	800df54 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 8008bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8008c04 <Mic_Upkeep+0x1e8>)
 8008bce:	2201      	movs	r2, #1
 8008bd0:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8008bd2:	f004 f94b 	bl	800ce6c <SetMICIndicator>
    }
    break;
 8008bd6:	e00d      	b.n	8008bf4 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 8008bd8:	4a18      	ldr	r2, [pc, #96]	@ (8008c3c <Mic_Upkeep+0x220>)
 8008bda:	4b19      	ldr	r3, [pc, #100]	@ (8008c40 <Mic_Upkeep+0x224>)
 8008bdc:	0019      	movs	r1, r3
 8008bde:	2003      	movs	r0, #3
 8008be0:	f005 f900 	bl	800dde4 <CreateLine>
    MicState = MIC_STATE_INIT;
 8008be4:	4b07      	ldr	r3, [pc, #28]	@ (8008c04 <Mic_Upkeep+0x1e8>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	701a      	strb	r2, [r3, #0]
    break;
 8008bea:	e004      	b.n	8008bf6 <Mic_Upkeep+0x1da>
    break;
 8008bec:	46c0      	nop			@ (mov r8, r8)
 8008bee:	e002      	b.n	8008bf6 <Mic_Upkeep+0x1da>
    break;
 8008bf0:	46c0      	nop			@ (mov r8, r8)
 8008bf2:	e000      	b.n	8008bf6 <Mic_Upkeep+0x1da>
    break;
 8008bf4:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8008bf6:	4b03      	ldr	r3, [pc, #12]	@ (8008c04 <Mic_Upkeep+0x1e8>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
}
 8008bfa:	0018      	movs	r0, r3
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	b002      	add	sp, #8
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	46c0      	nop			@ (mov r8, r8)
 8008c04:	20001036 	.word	0x20001036
 8008c08:	08023ce4 	.word	0x08023ce4
 8008c0c:	08024bbc 	.word	0x08024bbc
 8008c10:	20001353 	.word	0x20001353
 8008c14:	20001024 	.word	0x20001024
 8008c18:	08023d00 	.word	0x08023d00
 8008c1c:	08023d08 	.word	0x08023d08
 8008c20:	20000fd4 	.word	0x20000fd4
 8008c24:	20001014 	.word	0x20001014
 8008c28:	42c80000 	.word	0x42c80000
 8008c2c:	3fe00000 	.word	0x3fe00000
 8008c30:	40590000 	.word	0x40590000
 8008c34:	000002f3 	.word	0x000002f3
 8008c38:	20001020 	.word	0x20001020
 8008c3c:	08023d10 	.word	0x08023d10
 8008c40:	08023d30 	.word	0x08023d30

08008c44 <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8008c44:	b40f      	push	{r0, r1, r2, r3}
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b082      	sub	sp, #8
 8008c4a:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 8008c4c:	2314      	movs	r3, #20
 8008c4e:	18fb      	adds	r3, r7, r3
 8008c50:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	2180      	movs	r1, #128	@ 0x80
 8008c58:	0089      	lsls	r1, r1, #2
 8008c5a:	480a      	ldr	r0, [pc, #40]	@ (8008c84 <print+0x40>)
 8008c5c:	f016 fec4 	bl	801f9e8 <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8008c60:	4b08      	ldr	r3, [pc, #32]	@ (8008c84 <print+0x40>)
 8008c62:	0018      	movs	r0, r3
 8008c64:	f7f7 fa82 	bl	800016c <strlen>
 8008c68:	0003      	movs	r3, r0
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	4b05      	ldr	r3, [pc, #20]	@ (8008c84 <print+0x40>)
 8008c6e:	0011      	movs	r1, r2
 8008c70:	0018      	movs	r0, r3
 8008c72:	f7ff f99f 	bl	8007fb4 <printString>
}
 8008c76:	46c0      	nop			@ (mov r8, r8)
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	b002      	add	sp, #8
 8008c7c:	bc80      	pop	{r7}
 8008c7e:	bc08      	pop	{r3}
 8008c80:	b004      	add	sp, #16
 8008c82:	4718      	bx	r3
 8008c84:	20001038 	.word	0x20001038

08008c88 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008c8e:	1d3b      	adds	r3, r7, #4
 8008c90:	0018      	movs	r0, r3
 8008c92:	2314      	movs	r3, #20
 8008c94:	001a      	movs	r2, r3
 8008c96:	2100      	movs	r1, #0
 8008c98:	f016 ff52 	bl	801fb40 <memset>
  RTC_DateTypeDef sDate = {0};
 8008c9c:	003b      	movs	r3, r7
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008ca2:	4b2e      	ldr	r3, [pc, #184]	@ (8008d5c <MX_RTC_Init+0xd4>)
 8008ca4:	4a2e      	ldr	r2, [pc, #184]	@ (8008d60 <MX_RTC_Init+0xd8>)
 8008ca6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008ca8:	4b2c      	ldr	r3, [pc, #176]	@ (8008d5c <MX_RTC_Init+0xd4>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008cae:	4b2b      	ldr	r3, [pc, #172]	@ (8008d5c <MX_RTC_Init+0xd4>)
 8008cb0:	227f      	movs	r2, #127	@ 0x7f
 8008cb2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008cb4:	4b29      	ldr	r3, [pc, #164]	@ (8008d5c <MX_RTC_Init+0xd4>)
 8008cb6:	22ff      	movs	r2, #255	@ 0xff
 8008cb8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008cba:	4b28      	ldr	r3, [pc, #160]	@ (8008d5c <MX_RTC_Init+0xd4>)
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008cc0:	4b26      	ldr	r3, [pc, #152]	@ (8008d5c <MX_RTC_Init+0xd4>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008cc6:	4b25      	ldr	r3, [pc, #148]	@ (8008d5c <MX_RTC_Init+0xd4>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008ccc:	4b23      	ldr	r3, [pc, #140]	@ (8008d5c <MX_RTC_Init+0xd4>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008cd2:	4b22      	ldr	r3, [pc, #136]	@ (8008d5c <MX_RTC_Init+0xd4>)
 8008cd4:	0018      	movs	r0, r3
 8008cd6:	f00c fd5f 	bl	8015798 <HAL_RTC_Init>
 8008cda:	1e03      	subs	r3, r0, #0
 8008cdc:	d001      	beq.n	8008ce2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8008cde:	f7ff fa35 	bl	800814c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8008ce2:	1d3b      	adds	r3, r7, #4
 8008ce4:	220d      	movs	r2, #13
 8008ce6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8008ce8:	1d3b      	adds	r3, r7, #4
 8008cea:	2200      	movs	r2, #0
 8008cec:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8008cee:	1d3b      	adds	r3, r7, #4
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008cf4:	1d3b      	adds	r3, r7, #4
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008cfa:	1d3b      	adds	r3, r7, #4
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008d00:	1d39      	adds	r1, r7, #4
 8008d02:	4b16      	ldr	r3, [pc, #88]	@ (8008d5c <MX_RTC_Init+0xd4>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	0018      	movs	r0, r3
 8008d08:	f00c fde2 	bl	80158d0 <HAL_RTC_SetTime>
 8008d0c:	1e03      	subs	r3, r0, #0
 8008d0e:	d001      	beq.n	8008d14 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008d10:	f7ff fa1c 	bl	800814c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008d14:	003b      	movs	r3, r7
 8008d16:	2206      	movs	r2, #6
 8008d18:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8008d1a:	003b      	movs	r3, r7
 8008d1c:	2211      	movs	r2, #17
 8008d1e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008d20:	003b      	movs	r3, r7
 8008d22:	2217      	movs	r2, #23
 8008d24:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008d26:	003b      	movs	r3, r7
 8008d28:	2218      	movs	r2, #24
 8008d2a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008d2c:	0039      	movs	r1, r7
 8008d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8008d5c <MX_RTC_Init+0xd4>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	0018      	movs	r0, r3
 8008d34:	f00c fed4 	bl	8015ae0 <HAL_RTC_SetDate>
 8008d38:	1e03      	subs	r3, r0, #0
 8008d3a:	d001      	beq.n	8008d40 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8008d3c:	f7ff fa06 	bl	800814c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008d40:	4b06      	ldr	r3, [pc, #24]	@ (8008d5c <MX_RTC_Init+0xd4>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	2100      	movs	r1, #0
 8008d46:	0018      	movs	r0, r3
 8008d48:	f00d f884 	bl	8015e54 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008d4c:	1e03      	subs	r3, r0, #0
 8008d4e:	d001      	beq.n	8008d54 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008d50:	f7ff f9fc 	bl	800814c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008d54:	46c0      	nop			@ (mov r8, r8)
 8008d56:	46bd      	mov	sp, r7
 8008d58:	b006      	add	sp, #24
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20001238 	.word	0x20001238
 8008d60:	40002800 	.word	0x40002800

08008d64 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a0a      	ldr	r2, [pc, #40]	@ (8008d9c <HAL_RTC_MspInit+0x38>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d10e      	bne.n	8008d94 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008d76:	4b0a      	ldr	r3, [pc, #40]	@ (8008da0 <HAL_RTC_MspInit+0x3c>)
 8008d78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d7a:	4b09      	ldr	r3, [pc, #36]	@ (8008da0 <HAL_RTC_MspInit+0x3c>)
 8008d7c:	2180      	movs	r1, #128	@ 0x80
 8008d7e:	02c9      	lsls	r1, r1, #11
 8008d80:	430a      	orrs	r2, r1
 8008d82:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8008d84:	2200      	movs	r2, #0
 8008d86:	2100      	movs	r1, #0
 8008d88:	2002      	movs	r0, #2
 8008d8a:	f006 f925 	bl	800efd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8008d8e:	2002      	movs	r0, #2
 8008d90:	f006 f937 	bl	800f002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008d94:	46c0      	nop			@ (mov r8, r8)
 8008d96:	46bd      	mov	sp, r7
 8008d98:	b002      	add	sp, #8
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	40002800 	.word	0x40002800
 8008da0:	40021000 	.word	0x40021000

08008da4 <setsen5xReadTimer>:
uint8_t sen5xSamples = 0;
uint8_t sen5xErrors = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

void setsen5xReadTimer(uint32_t delayms) {
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 8008dac:	f005 fc70 	bl	800e690 <HAL_GetTick>
 8008db0:	0002      	movs	r2, r0
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	18d2      	adds	r2, r2, r3
 8008db6:	4b03      	ldr	r3, [pc, #12]	@ (8008dc4 <setsen5xReadTimer+0x20>)
 8008db8:	601a      	str	r2, [r3, #0]
}
 8008dba:	46c0      	nop			@ (mov r8, r8)
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	b002      	add	sp, #8
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	46c0      	nop			@ (mov r8, r8)
 8008dc4:	20001268 	.word	0x20001268

08008dc8 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	0002      	movs	r2, r0
 8008dd0:	1dfb      	adds	r3, r7, #7
 8008dd2:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 8008dd4:	4b03      	ldr	r3, [pc, #12]	@ (8008de4 <setsen5xSamplecounter+0x1c>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	701a      	strb	r2, [r3, #0]
}
 8008dda:	46c0      	nop			@ (mov r8, r8)
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	b002      	add	sp, #8
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	46c0      	nop			@ (mov r8, r8)
 8008de4:	2000126c 	.word	0x2000126c

08008de8 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 8008df0:	f7ff f9e2 	bl	80081b8 <IsPMSensorEnabled>
 8008df4:	1e03      	subs	r3, r0, #0
 8008df6:	d02c      	beq.n	8008e52 <sen5x_enable+0x6a>
    Debug("sen5x measurement is enabled");
 8008df8:	4a1d      	ldr	r2, [pc, #116]	@ (8008e70 <sen5x_enable+0x88>)
 8008dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8008e74 <sen5x_enable+0x8c>)
 8008dfc:	0019      	movs	r1, r3
 8008dfe:	2003      	movs	r0, #3
 8008e00:	f004 fff0 	bl	800dde4 <CreateLine>
    sen5x_Enable = !sen5x_Enable;
 8008e04:	4b1c      	ldr	r3, [pc, #112]	@ (8008e78 <sen5x_enable+0x90>)
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	1e5a      	subs	r2, r3, #1
 8008e0a:	4193      	sbcs	r3, r2
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2201      	movs	r2, #1
 8008e10:	4053      	eors	r3, r2
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	1c1a      	adds	r2, r3, #0
 8008e16:	2301      	movs	r3, #1
 8008e18:	4013      	ands	r3, r2
 8008e1a:	b2da      	uxtb	r2, r3
 8008e1c:	4b16      	ldr	r3, [pc, #88]	@ (8008e78 <sen5x_enable+0x90>)
 8008e1e:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 8008e20:	4b15      	ldr	r3, [pc, #84]	@ (8008e78 <sen5x_enable+0x90>)
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d003      	beq.n	8008e30 <sen5x_enable+0x48>
      setsen5xReadTimer(0);
 8008e28:	2000      	movs	r0, #0
 8008e2a:	f7ff ffbb 	bl	8008da4 <setsen5xReadTimer>
 8008e2e:	e016      	b.n	8008e5e <sen5x_enable+0x76>
    }
    else {
      Info("This cycle the sen5x is disabled");
 8008e30:	4a12      	ldr	r2, [pc, #72]	@ (8008e7c <sen5x_enable+0x94>)
 8008e32:	4b13      	ldr	r3, [pc, #76]	@ (8008e80 <sen5x_enable+0x98>)
 8008e34:	0019      	movs	r1, r3
 8008e36:	2002      	movs	r0, #2
 8008e38:	f004 ffd4 	bl	800dde4 <CreateLine>
      setsen5xReadTimer(HAL_GetTick() +( 3 * (sleepTime*1000))); //The ticker starts after 3*880, effective this turn the sen5x device will not start
 8008e3c:	f005 fc28 	bl	800e690 <HAL_GetTick>
 8008e40:	0002      	movs	r2, r0
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	490f      	ldr	r1, [pc, #60]	@ (8008e84 <sen5x_enable+0x9c>)
 8008e46:	434b      	muls	r3, r1
 8008e48:	18d3      	adds	r3, r2, r3
 8008e4a:	0018      	movs	r0, r3
 8008e4c:	f7ff ffaa 	bl	8008da4 <setsen5xReadTimer>
 8008e50:	e005      	b.n	8008e5e <sen5x_enable+0x76>
    }
  }
  else {
    Info("sen5x measurement is disabled");
 8008e52:	4a0d      	ldr	r2, [pc, #52]	@ (8008e88 <sen5x_enable+0xa0>)
 8008e54:	4b0a      	ldr	r3, [pc, #40]	@ (8008e80 <sen5x_enable+0x98>)
 8008e56:	0019      	movs	r1, r3
 8008e58:	2002      	movs	r0, #2
 8008e5a:	f004 ffc3 	bl	800dde4 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 8008e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e8c <sen5x_enable+0xa4>)
 8008e60:	2201      	movs	r2, #1
 8008e62:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 8008e64:	4b04      	ldr	r3, [pc, #16]	@ (8008e78 <sen5x_enable+0x90>)
 8008e66:	781b      	ldrb	r3, [r3, #0]
}
 8008e68:	0018      	movs	r0, r3
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	b002      	add	sp, #8
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	08023d34 	.word	0x08023d34
 8008e74:	08023d54 	.word	0x08023d54
 8008e78:	2000125f 	.word	0x2000125f
 8008e7c:	08023d58 	.word	0x08023d58
 8008e80:	08023d7c 	.word	0x08023d7c
 8008e84:	00000bb8 	.word	0x00000bb8
 8008e88:	08023d80 	.word	0x08023d80
 8008e8c:	20000085 	.word	0x20000085

08008e90 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 8008e90:	b580      	push	{r7, lr}
 8008e92:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_On");
 8008e94:	4a0a      	ldr	r2, [pc, #40]	@ (8008ec0 <sen5x_Power_On+0x30>)
 8008e96:	4b0b      	ldr	r3, [pc, #44]	@ (8008ec4 <sen5x_Power_On+0x34>)
 8008e98:	0019      	movs	r1, r3
 8008e9a:	2003      	movs	r0, #3
 8008e9c:	f004 ffa2 	bl	800dde4 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 8008ea0:	2380      	movs	r3, #128	@ 0x80
 8008ea2:	015b      	lsls	r3, r3, #5
 8008ea4:	4808      	ldr	r0, [pc, #32]	@ (8008ec8 <sen5x_Power_On+0x38>)
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	0019      	movs	r1, r3
 8008eaa:	f006 fe82 	bl	800fbb2 <HAL_GPIO_WritePin>
  sen5x_On = true;
 8008eae:	4b07      	ldr	r3, [pc, #28]	@ (8008ecc <sen5x_Power_On+0x3c>)
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	701a      	strb	r2, [r3, #0]
  HAL_Delay(55);
 8008eb4:	2037      	movs	r0, #55	@ 0x37
 8008eb6:	f005 fbf5 	bl	800e6a4 <HAL_Delay>
  return;
 8008eba:	46c0      	nop			@ (mov r8, r8)
}
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	08023da0 	.word	0x08023da0
 8008ec4:	08023d54 	.word	0x08023d54
 8008ec8:	50000800 	.word	0x50000800
 8008ecc:	2000125d 	.word	0x2000125d

08008ed0 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_Off");
 8008ed4:	4a09      	ldr	r2, [pc, #36]	@ (8008efc <sen5x_Power_Off+0x2c>)
 8008ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8008f00 <sen5x_Power_Off+0x30>)
 8008ed8:	0019      	movs	r1, r3
 8008eda:	2003      	movs	r0, #3
 8008edc:	f004 ff82 	bl	800dde4 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8008ee0:	2380      	movs	r3, #128	@ 0x80
 8008ee2:	015b      	lsls	r3, r3, #5
 8008ee4:	4807      	ldr	r0, [pc, #28]	@ (8008f04 <sen5x_Power_Off+0x34>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	0019      	movs	r1, r3
 8008eea:	f006 fe62 	bl	800fbb2 <HAL_GPIO_WritePin>
  sen5x_On = false;
 8008eee:	4b06      	ldr	r3, [pc, #24]	@ (8008f08 <sen5x_Power_Off+0x38>)
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	701a      	strb	r2, [r3, #0]
  return;
 8008ef4:	46c0      	nop			@ (mov r8, r8)
}
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	46c0      	nop			@ (mov r8, r8)
 8008efc:	08023dbc 	.word	0x08023dbc
 8008f00:	08023d54 	.word	0x08023d54
 8008f04:	50000800 	.word	0x50000800
 8008f08:	2000125d 	.word	0x2000125d

08008f0c <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 8008f10:	4b02      	ldr	r3, [pc, #8]	@ (8008f1c <reset_fanCleaningDone+0x10>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	701a      	strb	r2, [r3, #0]
}
 8008f16:	46c0      	nop			@ (mov r8, r8)
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	2000125c 	.word	0x2000125c

08008f20 <probe_sen5x>:

int16_t probe_sen5x(void) {
 8008f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f22:	b093      	sub	sp, #76	@ 0x4c
 8008f24:	af04      	add	r7, sp, #16
//  Debug("test for sen5x_device");
  int16_t error = 0;
 8008f26:	2436      	movs	r4, #54	@ 0x36
 8008f28:	193b      	adds	r3, r7, r4
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 8008f2e:	2335      	movs	r3, #53	@ 0x35
 8008f30:	18fb      	adds	r3, r7, r3
 8008f32:	2220      	movs	r2, #32
 8008f34:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 8008f36:	2334      	movs	r3, #52	@ 0x34
 8008f38:	18fb      	adds	r3, r7, r3
 8008f3a:	2220      	movs	r2, #32
 8008f3c:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 8008f3e:	f7ff ffa7 	bl	8008e90 <sen5x_Power_On>
  error = sen5x_device_reset();
 8008f42:	0025      	movs	r5, r4
 8008f44:	193c      	adds	r4, r7, r4
 8008f46:	f001 f817 	bl	8009f78 <sen5x_device_reset>
 8008f4a:	0003      	movs	r3, r0
 8008f4c:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008f4e:	002c      	movs	r4, r5
 8008f50:	193b      	adds	r3, r7, r4
 8008f52:	2200      	movs	r2, #0
 8008f54:	5e9b      	ldrsh	r3, [r3, r2]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00b      	beq.n	8008f72 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 8008f5a:	193b      	adds	r3, r7, r4
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	5e9b      	ldrsh	r3, [r3, r2]
 8008f60:	4a6c      	ldr	r2, [pc, #432]	@ (8009114 <probe_sen5x+0x1f4>)
 8008f62:	496d      	ldr	r1, [pc, #436]	@ (8009118 <probe_sen5x+0x1f8>)
 8008f64:	2001      	movs	r0, #1
 8008f66:	f004 ff3d 	bl	800dde4 <CreateLine>
      return error;
 8008f6a:	193b      	adds	r3, r7, r4
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	5e9b      	ldrsh	r3, [r3, r2]
 8008f70:	e0cc      	b.n	800910c <probe_sen5x+0x1ec>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 8008f72:	2536      	movs	r5, #54	@ 0x36
 8008f74:	197c      	adds	r4, r7, r5
 8008f76:	2335      	movs	r3, #53	@ 0x35
 8008f78:	18fb      	adds	r3, r7, r3
 8008f7a:	781a      	ldrb	r2, [r3, #0]
 8008f7c:	230c      	movs	r3, #12
 8008f7e:	18fb      	adds	r3, r7, r3
 8008f80:	0011      	movs	r1, r2
 8008f82:	0018      	movs	r0, r3
 8008f84:	f000 fee4 	bl	8009d50 <sen5x_get_serial_number>
 8008f88:	0003      	movs	r3, r0
 8008f8a:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008f8c:	197b      	adds	r3, r7, r5
 8008f8e:	2200      	movs	r2, #0
 8008f90:	5e9b      	ldrsh	r3, [r3, r2]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00b      	beq.n	8008fae <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 8008f96:	197b      	adds	r3, r7, r5
 8008f98:	2200      	movs	r2, #0
 8008f9a:	5e9a      	ldrsh	r2, [r3, r2]
 8008f9c:	4b5f      	ldr	r3, [pc, #380]	@ (800911c <probe_sen5x+0x1fc>)
 8008f9e:	0011      	movs	r1, r2
 8008fa0:	0018      	movs	r0, r3
 8008fa2:	f016 fc19 	bl	801f7d8 <iprintf>
      return error;
 8008fa6:	197b      	adds	r3, r7, r5
 8008fa8:	2200      	movs	r2, #0
 8008faa:	5e9b      	ldrsh	r3, [r3, r2]
 8008fac:	e0ae      	b.n	800910c <probe_sen5x+0x1ec>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 8008fae:	230c      	movs	r3, #12
 8008fb0:	18fa      	adds	r2, r7, r3
 8008fb2:	4b5b      	ldr	r3, [pc, #364]	@ (8009120 <probe_sen5x+0x200>)
 8008fb4:	0011      	movs	r1, r2
 8008fb6:	0018      	movs	r0, r3
 8008fb8:	f016 fc0e 	bl	801f7d8 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8008fbc:	2536      	movs	r5, #54	@ 0x36
 8008fbe:	197c      	adds	r4, r7, r5
 8008fc0:	2334      	movs	r3, #52	@ 0x34
 8008fc2:	18fb      	adds	r3, r7, r3
 8008fc4:	781a      	ldrb	r2, [r3, #0]
 8008fc6:	4b57      	ldr	r3, [pc, #348]	@ (8009124 <probe_sen5x+0x204>)
 8008fc8:	0011      	movs	r1, r2
 8008fca:	0018      	movs	r0, r3
 8008fcc:	f000 fe6a 	bl	8009ca4 <sen5x_get_product_name>
 8008fd0:	0003      	movs	r3, r0
 8008fd2:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008fd4:	197b      	adds	r3, r7, r5
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	5e9b      	ldrsh	r3, [r3, r2]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00b      	beq.n	8008ff6 <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 8008fde:	197b      	adds	r3, r7, r5
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	5e9a      	ldrsh	r2, [r3, r2]
 8008fe4:	4b50      	ldr	r3, [pc, #320]	@ (8009128 <probe_sen5x+0x208>)
 8008fe6:	0011      	movs	r1, r2
 8008fe8:	0018      	movs	r0, r3
 8008fea:	f016 fbf5 	bl	801f7d8 <iprintf>
      return error;
 8008fee:	197b      	adds	r3, r7, r5
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	5e9b      	ldrsh	r3, [r3, r2]
 8008ff4:	e08a      	b.n	800910c <probe_sen5x+0x1ec>
  } else {
      printf("Product name: %s\r\n", product_name);
 8008ff6:	4a4b      	ldr	r2, [pc, #300]	@ (8009124 <probe_sen5x+0x204>)
 8008ff8:	4b4c      	ldr	r3, [pc, #304]	@ (800912c <probe_sen5x+0x20c>)
 8008ffa:	0011      	movs	r1, r2
 8008ffc:	0018      	movs	r0, r3
 8008ffe:	f016 fbeb 	bl	801f7d8 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 8009002:	2636      	movs	r6, #54	@ 0x36
 8009004:	19bc      	adds	r4, r7, r6
 8009006:	2308      	movs	r3, #8
 8009008:	18fd      	adds	r5, r7, r3
 800900a:	2309      	movs	r3, #9
 800900c:	18fa      	adds	r2, r7, r3
 800900e:	230a      	movs	r3, #10
 8009010:	18f9      	adds	r1, r7, r3
 8009012:	230b      	movs	r3, #11
 8009014:	18f8      	adds	r0, r7, r3
 8009016:	1d7b      	adds	r3, r7, #5
 8009018:	9302      	str	r3, [sp, #8]
 800901a:	1dbb      	adds	r3, r7, #6
 800901c:	9301      	str	r3, [sp, #4]
 800901e:	1dfb      	adds	r3, r7, #7
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	002b      	movs	r3, r5
 8009024:	f000 feea 	bl	8009dfc <sen5x_get_version>
 8009028:	0003      	movs	r3, r0
 800902a:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800902c:	19bb      	adds	r3, r7, r6
 800902e:	2200      	movs	r2, #0
 8009030:	5e9b      	ldrsh	r3, [r3, r2]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00b      	beq.n	800904e <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 8009036:	19bb      	adds	r3, r7, r6
 8009038:	2200      	movs	r2, #0
 800903a:	5e9a      	ldrsh	r2, [r3, r2]
 800903c:	4b3c      	ldr	r3, [pc, #240]	@ (8009130 <probe_sen5x+0x210>)
 800903e:	0011      	movs	r1, r2
 8009040:	0018      	movs	r0, r3
 8009042:	f016 fbc9 	bl	801f7d8 <iprintf>
      return error;
 8009046:	19bb      	adds	r3, r7, r6
 8009048:	2200      	movs	r2, #0
 800904a:	5e9b      	ldrsh	r3, [r3, r2]
 800904c:	e05e      	b.n	800910c <probe_sen5x+0x1ec>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800904e:	230b      	movs	r3, #11
 8009050:	18fb      	adds	r3, r7, r3
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	0019      	movs	r1, r3
 8009056:	230a      	movs	r3, #10
 8009058:	18fb      	adds	r3, r7, r3
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	001a      	movs	r2, r3
 800905e:	2308      	movs	r3, #8
 8009060:	18fb      	adds	r3, r7, r3
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	001c      	movs	r4, r3
 8009066:	1dfb      	adds	r3, r7, #7
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	4832      	ldr	r0, [pc, #200]	@ (8009134 <probe_sen5x+0x214>)
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	0023      	movs	r3, r4
 8009070:	f016 fbb2 	bl	801f7d8 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 8009074:	2300      	movs	r3, #0
 8009076:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 8009078:	262e      	movs	r6, #46	@ 0x2e
 800907a:	19bb      	adds	r3, r7, r6
 800907c:	2200      	movs	r2, #0
 800907e:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 8009080:	232c      	movs	r3, #44	@ 0x2c
 8009082:	18fb      	adds	r3, r7, r3
 8009084:	2200      	movs	r2, #0
 8009086:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 8009088:	492b      	ldr	r1, [pc, #172]	@ (8009138 <probe_sen5x+0x218>)
 800908a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800908c:	f7f7 ff88 	bl	8000fa0 <__aeabi_fmul>
 8009090:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 8009092:	1c18      	adds	r0, r3, #0
 8009094:	f7f8 fa7c 	bl	8001590 <__aeabi_f2iz>
 8009098:	0003      	movs	r3, r0
 800909a:	b218      	sxth	r0, r3
 800909c:	2536      	movs	r5, #54	@ 0x36
 800909e:	197c      	adds	r4, r7, r5
 80090a0:	232c      	movs	r3, #44	@ 0x2c
 80090a2:	18fb      	adds	r3, r7, r3
 80090a4:	881a      	ldrh	r2, [r3, #0]
 80090a6:	19bb      	adds	r3, r7, r6
 80090a8:	2100      	movs	r1, #0
 80090aa:	5e5b      	ldrsh	r3, [r3, r1]
 80090ac:	0019      	movs	r1, r3
 80090ae:	f000 fd95 	bl	8009bdc <sen5x_set_temperature_offset_parameters>
 80090b2:	0003      	movs	r3, r0
 80090b4:	8023      	strh	r3, [r4, #0]
  if (error) {
 80090b6:	197b      	adds	r3, r7, r5
 80090b8:	2200      	movs	r2, #0
 80090ba:	5e9b      	ldrsh	r3, [r3, r2]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00b      	beq.n	80090d8 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 80090c0:	197b      	adds	r3, r7, r5
 80090c2:	2200      	movs	r2, #0
 80090c4:	5e9b      	ldrsh	r3, [r3, r2]
 80090c6:	4a1d      	ldr	r2, [pc, #116]	@ (800913c <probe_sen5x+0x21c>)
 80090c8:	4913      	ldr	r1, [pc, #76]	@ (8009118 <probe_sen5x+0x1f8>)
 80090ca:	2001      	movs	r0, #1
 80090cc:	f004 fe8a 	bl	800dde4 <CreateLine>
      return error;
 80090d0:	197b      	adds	r3, r7, r5
 80090d2:	2200      	movs	r2, #0
 80090d4:	5e9b      	ldrsh	r3, [r3, r2]
 80090d6:	e019      	b.n	800910c <probe_sen5x+0x1ec>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 80090d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090da:	f7fa f9c3 	bl	8003464 <__aeabi_f2d>
 80090de:	0002      	movs	r2, r0
 80090e0:	000b      	movs	r3, r1
 80090e2:	4817      	ldr	r0, [pc, #92]	@ (8009140 <probe_sen5x+0x220>)
 80090e4:	4917      	ldr	r1, [pc, #92]	@ (8009144 <probe_sen5x+0x224>)
 80090e6:	9200      	str	r2, [sp, #0]
 80090e8:	9301      	str	r3, [sp, #4]
 80090ea:	0002      	movs	r2, r0
 80090ec:	2002      	movs	r0, #2
 80090ee:	f004 fe79 	bl	800dde4 <CreateLine>
  }
  sen5x_Power_Off();
 80090f2:	f7ff feed 	bl	8008ed0 <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 25000; // after 25 second first measurement
 80090f6:	f005 facb 	bl	800e690 <HAL_GetTick>
 80090fa:	0003      	movs	r3, r0
 80090fc:	4a12      	ldr	r2, [pc, #72]	@ (8009148 <probe_sen5x+0x228>)
 80090fe:	189a      	adds	r2, r3, r2
 8009100:	4b12      	ldr	r3, [pc, #72]	@ (800914c <probe_sen5x+0x22c>)
 8009102:	601a      	str	r2, [r3, #0]
  return error;
 8009104:	2336      	movs	r3, #54	@ 0x36
 8009106:	18fb      	adds	r3, r7, r3
 8009108:	2200      	movs	r2, #0
 800910a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800910c:	0018      	movs	r0, r3
 800910e:	46bd      	mov	sp, r7
 8009110:	b00f      	add	sp, #60	@ 0x3c
 8009112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009114:	08023dd8 	.word	0x08023dd8
 8009118:	08023e04 	.word	0x08023e04
 800911c:	08023e08 	.word	0x08023e08
 8009120:	08023e38 	.word	0x08023e38
 8009124:	20001260 	.word	0x20001260
 8009128:	08023e4c 	.word	0x08023e4c
 800912c:	08023e7c 	.word	0x08023e7c
 8009130:	08023e90 	.word	0x08023e90
 8009134:	08023ebc 	.word	0x08023ebc
 8009138:	43480000 	.word	0x43480000
 800913c:	08023ee0 	.word	0x08023ee0
 8009140:	08023f20 	.word	0x08023f20
 8009144:	08023d7c 	.word	0x08023d7c
 8009148:	000061a8 	.word	0x000061a8
 800914c:	20001268 	.word	0x20001268

08009150 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 8009150:	b590      	push	{r4, r7, lr}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 8009156:	1dbb      	adds	r3, r7, #6
 8009158:	2200      	movs	r2, #0
 800915a:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  error = sen5x_start_measurement(); // start full measurement mode
 800915c:	1dbc      	adds	r4, r7, #6
 800915e:	f000 fbc9 	bl	80098f4 <sen5x_start_measurement>
 8009162:	0003      	movs	r3, r0
 8009164:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009166:	1dbb      	adds	r3, r7, #6
 8009168:	2200      	movs	r2, #0
 800916a:	5e9b      	ldrsh	r3, [r3, r2]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d008      	beq.n	8009182 <sen5x_lightup_measurement+0x32>
      Error("Error executing sen5x_lightup_measurement(): %i", error);
 8009170:	1dbb      	adds	r3, r7, #6
 8009172:	2200      	movs	r2, #0
 8009174:	5e9b      	ldrsh	r3, [r3, r2]
 8009176:	4a0a      	ldr	r2, [pc, #40]	@ (80091a0 <sen5x_lightup_measurement+0x50>)
 8009178:	490a      	ldr	r1, [pc, #40]	@ (80091a4 <sen5x_lightup_measurement+0x54>)
 800917a:	2001      	movs	r0, #1
 800917c:	f004 fe32 	bl	800dde4 <CreateLine>
 8009180:	e007      	b.n	8009192 <sen5x_lightup_measurement+0x42>
  }
  else {
    showTime();
 8009182:	f7fd f933 	bl	80063ec <showTime>
    Info("sen5x_start_measurement excuted");
 8009186:	4a08      	ldr	r2, [pc, #32]	@ (80091a8 <sen5x_lightup_measurement+0x58>)
 8009188:	4b08      	ldr	r3, [pc, #32]	@ (80091ac <sen5x_lightup_measurement+0x5c>)
 800918a:	0019      	movs	r1, r3
 800918c:	2002      	movs	r0, #2
 800918e:	f004 fe29 	bl	800dde4 <CreateLine>
  }
  return error;
 8009192:	1dbb      	adds	r3, r7, #6
 8009194:	2200      	movs	r2, #0
 8009196:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009198:	0018      	movs	r0, r3
 800919a:	46bd      	mov	sp, r7
 800919c:	b003      	add	sp, #12
 800919e:	bd90      	pop	{r4, r7, pc}
 80091a0:	08023f58 	.word	0x08023f58
 80091a4:	08023e04 	.word	0x08023e04
 80091a8:	08023f88 	.word	0x08023f88
 80091ac:	08023d7c 	.word	0x08023d7c

080091b0 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 80091b0:	b590      	push	{r4, r7, lr}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
// Stop Measurement
//  Debug("entering sen5x_extinguish_measurement");
  int16_t error = 0;
 80091b6:	1dbb      	adds	r3, r7, #6
 80091b8:	2200      	movs	r2, #0
 80091ba:	801a      	strh	r2, [r3, #0]
  error = sen5x_stop_measurement();
 80091bc:	1dbc      	adds	r4, r7, #6
 80091be:	f000 fbc7 	bl	8009950 <sen5x_stop_measurement>
 80091c2:	0003      	movs	r3, r0
 80091c4:	8023      	strh	r3, [r4, #0]
  if (error) {
 80091c6:	1dbb      	adds	r3, r7, #6
 80091c8:	2200      	movs	r2, #0
 80091ca:	5e9b      	ldrsh	r3, [r3, r2]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d008      	beq.n	80091e2 <sen5x_extinguish_measurement+0x32>
    Error("Error executing sen5x_stop_measurement(): %i", error);
 80091d0:	1dbb      	adds	r3, r7, #6
 80091d2:	2200      	movs	r2, #0
 80091d4:	5e9b      	ldrsh	r3, [r3, r2]
 80091d6:	4a0a      	ldr	r2, [pc, #40]	@ (8009200 <sen5x_extinguish_measurement+0x50>)
 80091d8:	490a      	ldr	r1, [pc, #40]	@ (8009204 <sen5x_extinguish_measurement+0x54>)
 80091da:	2001      	movs	r0, #1
 80091dc:	f004 fe02 	bl	800dde4 <CreateLine>
 80091e0:	e007      	b.n	80091f2 <sen5x_extinguish_measurement+0x42>
  }
  else {
    showTime();
 80091e2:	f7fd f903 	bl	80063ec <showTime>
    Info("sen5x_stop_measurement executed");
 80091e6:	4a08      	ldr	r2, [pc, #32]	@ (8009208 <sen5x_extinguish_measurement+0x58>)
 80091e8:	4b08      	ldr	r3, [pc, #32]	@ (800920c <sen5x_extinguish_measurement+0x5c>)
 80091ea:	0019      	movs	r1, r3
 80091ec:	2002      	movs	r0, #2
 80091ee:	f004 fdf9 	bl	800dde4 <CreateLine>
  }
  return error;
 80091f2:	1dbb      	adds	r3, r7, #6
 80091f4:	2200      	movs	r2, #0
 80091f6:	5e9b      	ldrsh	r3, [r3, r2]
}
 80091f8:	0018      	movs	r0, r3
 80091fa:	46bd      	mov	sp, r7
 80091fc:	b003      	add	sp, #12
 80091fe:	bd90      	pop	{r4, r7, pc}
 8009200:	08023fa8 	.word	0x08023fa8
 8009204:	08023e04 	.word	0x08023e04
 8009208:	08023fd8 	.word	0x08023fd8
 800920c:	08023d7c 	.word	0x08023d7c

08009210 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 8009210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009212:	b08d      	sub	sp, #52	@ 0x34
 8009214:	af04      	add	r7, sp, #16
 8009216:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 8009218:	261e      	movs	r6, #30
 800921a:	19bb      	adds	r3, r7, r6
 800921c:	2200      	movs	r2, #0
 800921e:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 8009220:	19bc      	adds	r4, r7, r6
 8009222:	2316      	movs	r3, #22
 8009224:	18fd      	adds	r5, r7, r3
 8009226:	2318      	movs	r3, #24
 8009228:	18fa      	adds	r2, r7, r3
 800922a:	231a      	movs	r3, #26
 800922c:	18f9      	adds	r1, r7, r3
 800922e:	231c      	movs	r3, #28
 8009230:	18f8      	adds	r0, r7, r3
 8009232:	230e      	movs	r3, #14
 8009234:	18fb      	adds	r3, r7, r3
 8009236:	9303      	str	r3, [sp, #12]
 8009238:	2310      	movs	r3, #16
 800923a:	18fb      	adds	r3, r7, r3
 800923c:	9302      	str	r3, [sp, #8]
 800923e:	2312      	movs	r3, #18
 8009240:	18fb      	adds	r3, r7, r3
 8009242:	9301      	str	r3, [sp, #4]
 8009244:	2314      	movs	r3, #20
 8009246:	18fb      	adds	r3, r7, r3
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	002b      	movs	r3, r5
 800924c:	f000 fc02 	bl	8009a54 <sen5x_read_measured_values>
 8009250:	0003      	movs	r3, r0
 8009252:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 8009254:	19bb      	adds	r3, r7, r6
 8009256:	2200      	movs	r2, #0
 8009258:	5e9b      	ldrsh	r3, [r3, r2]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <sen5x_read_measurement+0x56>
    return error;
 800925e:	19bb      	adds	r3, r7, r6
 8009260:	2200      	movs	r2, #0
 8009262:	5e9b      	ldrsh	r3, [r3, r2]
 8009264:	e037      	b.n	80092d6 <sen5x_read_measurement+0xc6>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 8009266:	231c      	movs	r3, #28
 8009268:	18fb      	adds	r3, r7, r3
 800926a:	881a      	ldrh	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 8009270:	211a      	movs	r1, #26
 8009272:	187b      	adds	r3, r7, r1
 8009274:	881a      	ldrh	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800927a:	2318      	movs	r3, #24
 800927c:	18fb      	adds	r3, r7, r3
 800927e:	881a      	ldrh	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 8009284:	2416      	movs	r4, #22
 8009286:	193b      	adds	r3, r7, r4
 8009288:	881a      	ldrh	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800928e:	2314      	movs	r3, #20
 8009290:	18fb      	adds	r3, r7, r3
 8009292:	2200      	movs	r2, #0
 8009294:	5e9a      	ldrsh	r2, [r3, r2]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800929a:	2312      	movs	r3, #18
 800929c:	18fb      	adds	r3, r7, r3
 800929e:	2200      	movs	r2, #0
 80092a0:	5e9a      	ldrsh	r2, [r3, r2]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 80092a6:	2310      	movs	r3, #16
 80092a8:	18fb      	adds	r3, r7, r3
 80092aa:	2200      	movs	r2, #0
 80092ac:	5e9a      	ldrsh	r2, [r3, r2]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 80092b2:	250e      	movs	r5, #14
 80092b4:	197b      	adds	r3, r7, r5
 80092b6:	2200      	movs	r2, #0
 80092b8:	5e9a      	ldrsh	r2, [r3, r2]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	81da      	strh	r2, [r3, #14]
  setPMs(mass_concentration_pm2p5, mass_concentration_pm10p0, nox_index);
 80092be:	187b      	adds	r3, r7, r1
 80092c0:	8818      	ldrh	r0, [r3, #0]
 80092c2:	193b      	adds	r3, r7, r4
 80092c4:	8819      	ldrh	r1, [r3, #0]
 80092c6:	197b      	adds	r3, r7, r5
 80092c8:	2200      	movs	r2, #0
 80092ca:	5e9b      	ldrsh	r3, [r3, r2]
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	001a      	movs	r2, r3
 80092d0:	f7fa fb46 	bl	8003960 <setPMs>
  return 0;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	0018      	movs	r0, r3
 80092d8:	46bd      	mov	sp, r7
 80092da:	b009      	add	sp, #36	@ 0x24
 80092dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080092e0 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 80092e0:	b580      	push	{r7, lr}
 80092e2:	af00      	add	r7, sp, #0
//  Debug("entering sen5x_printvalues");
//  Info("sen5x_printvalues entered for sample %d", sen5xSamples);
//  if (sen5xSamples != 3) {
//    return; // first two sample reads are not reliable
//  }
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 80092e4:	4b69      	ldr	r3, [pc, #420]	@ (800948c <sen5x_printvalues+0x1ac>)
 80092e6:	881b      	ldrh	r3, [r3, #0]
 80092e8:	4a69      	ldr	r2, [pc, #420]	@ (8009490 <sen5x_printvalues+0x1b0>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d013      	beq.n	8009316 <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 80092ee:	4b67      	ldr	r3, [pc, #412]	@ (800948c <sen5x_printvalues+0x1ac>)
 80092f0:	881b      	ldrh	r3, [r3, #0]
 80092f2:	0018      	movs	r0, r3
 80092f4:	f7f8 f96c 	bl	80015d0 <__aeabi_i2f>
 80092f8:	1c03      	adds	r3, r0, #0
 80092fa:	4966      	ldr	r1, [pc, #408]	@ (8009494 <sen5x_printvalues+0x1b4>)
 80092fc:	1c18      	adds	r0, r3, #0
 80092fe:	f7f7 fc69 	bl	8000bd4 <__aeabi_fdiv>
 8009302:	1c03      	adds	r3, r0, #0
 8009304:	1c18      	adds	r0, r3, #0
 8009306:	f7fa f8ad 	bl	8003464 <__aeabi_f2d>
 800930a:	0002      	movs	r2, r0
 800930c:	000b      	movs	r3, r1
 800930e:	4962      	ldr	r1, [pc, #392]	@ (8009498 <sen5x_printvalues+0x1b8>)
 8009310:	0008      	movs	r0, r1
 8009312:	f016 fa61 	bl	801f7d8 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 8009316:	4b5d      	ldr	r3, [pc, #372]	@ (800948c <sen5x_printvalues+0x1ac>)
 8009318:	885b      	ldrh	r3, [r3, #2]
 800931a:	4a5d      	ldr	r2, [pc, #372]	@ (8009490 <sen5x_printvalues+0x1b0>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d013      	beq.n	8009348 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 8009320:	4b5a      	ldr	r3, [pc, #360]	@ (800948c <sen5x_printvalues+0x1ac>)
 8009322:	885b      	ldrh	r3, [r3, #2]
 8009324:	0018      	movs	r0, r3
 8009326:	f7f8 f953 	bl	80015d0 <__aeabi_i2f>
 800932a:	1c03      	adds	r3, r0, #0
 800932c:	4959      	ldr	r1, [pc, #356]	@ (8009494 <sen5x_printvalues+0x1b4>)
 800932e:	1c18      	adds	r0, r3, #0
 8009330:	f7f7 fc50 	bl	8000bd4 <__aeabi_fdiv>
 8009334:	1c03      	adds	r3, r0, #0
 8009336:	1c18      	adds	r0, r3, #0
 8009338:	f7fa f894 	bl	8003464 <__aeabi_f2d>
 800933c:	0002      	movs	r2, r0
 800933e:	000b      	movs	r3, r1
 8009340:	4956      	ldr	r1, [pc, #344]	@ (800949c <sen5x_printvalues+0x1bc>)
 8009342:	0008      	movs	r0, r1
 8009344:	f016 fa48 	bl	801f7d8 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 8009348:	4b50      	ldr	r3, [pc, #320]	@ (800948c <sen5x_printvalues+0x1ac>)
 800934a:	889b      	ldrh	r3, [r3, #4]
 800934c:	4a50      	ldr	r2, [pc, #320]	@ (8009490 <sen5x_printvalues+0x1b0>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d013      	beq.n	800937a <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 8009352:	4b4e      	ldr	r3, [pc, #312]	@ (800948c <sen5x_printvalues+0x1ac>)
 8009354:	889b      	ldrh	r3, [r3, #4]
 8009356:	0018      	movs	r0, r3
 8009358:	f7f8 f93a 	bl	80015d0 <__aeabi_i2f>
 800935c:	1c03      	adds	r3, r0, #0
 800935e:	494d      	ldr	r1, [pc, #308]	@ (8009494 <sen5x_printvalues+0x1b4>)
 8009360:	1c18      	adds	r0, r3, #0
 8009362:	f7f7 fc37 	bl	8000bd4 <__aeabi_fdiv>
 8009366:	1c03      	adds	r3, r0, #0
 8009368:	1c18      	adds	r0, r3, #0
 800936a:	f7fa f87b 	bl	8003464 <__aeabi_f2d>
 800936e:	0002      	movs	r2, r0
 8009370:	000b      	movs	r3, r1
 8009372:	494b      	ldr	r1, [pc, #300]	@ (80094a0 <sen5x_printvalues+0x1c0>)
 8009374:	0008      	movs	r0, r1
 8009376:	f016 fa2f 	bl	801f7d8 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800937a:	4b44      	ldr	r3, [pc, #272]	@ (800948c <sen5x_printvalues+0x1ac>)
 800937c:	88db      	ldrh	r3, [r3, #6]
 800937e:	4a44      	ldr	r2, [pc, #272]	@ (8009490 <sen5x_printvalues+0x1b0>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d013      	beq.n	80093ac <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 8009384:	4b41      	ldr	r3, [pc, #260]	@ (800948c <sen5x_printvalues+0x1ac>)
 8009386:	88db      	ldrh	r3, [r3, #6]
 8009388:	0018      	movs	r0, r3
 800938a:	f7f8 f921 	bl	80015d0 <__aeabi_i2f>
 800938e:	1c03      	adds	r3, r0, #0
 8009390:	4940      	ldr	r1, [pc, #256]	@ (8009494 <sen5x_printvalues+0x1b4>)
 8009392:	1c18      	adds	r0, r3, #0
 8009394:	f7f7 fc1e 	bl	8000bd4 <__aeabi_fdiv>
 8009398:	1c03      	adds	r3, r0, #0
 800939a:	1c18      	adds	r0, r3, #0
 800939c:	f7fa f862 	bl	8003464 <__aeabi_f2d>
 80093a0:	0002      	movs	r2, r0
 80093a2:	000b      	movs	r3, r1
 80093a4:	493f      	ldr	r1, [pc, #252]	@ (80094a4 <sen5x_printvalues+0x1c4>)
 80093a6:	0008      	movs	r0, r1
 80093a8:	f016 fa16 	bl	801f7d8 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 80093ac:	4b37      	ldr	r3, [pc, #220]	@ (800948c <sen5x_printvalues+0x1ac>)
 80093ae:	2208      	movs	r2, #8
 80093b0:	5e9b      	ldrsh	r3, [r3, r2]
 80093b2:	4a3d      	ldr	r2, [pc, #244]	@ (80094a8 <sen5x_printvalues+0x1c8>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d014      	beq.n	80093e2 <sen5x_printvalues+0x102>
        printf("Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 80093b8:	4b34      	ldr	r3, [pc, #208]	@ (800948c <sen5x_printvalues+0x1ac>)
 80093ba:	2208      	movs	r2, #8
 80093bc:	5e9b      	ldrsh	r3, [r3, r2]
 80093be:	0018      	movs	r0, r3
 80093c0:	f7f8 f906 	bl	80015d0 <__aeabi_i2f>
 80093c4:	1c03      	adds	r3, r0, #0
 80093c6:	4939      	ldr	r1, [pc, #228]	@ (80094ac <sen5x_printvalues+0x1cc>)
 80093c8:	1c18      	adds	r0, r3, #0
 80093ca:	f7f7 fc03 	bl	8000bd4 <__aeabi_fdiv>
 80093ce:	1c03      	adds	r3, r0, #0
 80093d0:	1c18      	adds	r0, r3, #0
 80093d2:	f7fa f847 	bl	8003464 <__aeabi_f2d>
 80093d6:	0002      	movs	r2, r0
 80093d8:	000b      	movs	r3, r1
 80093da:	4935      	ldr	r1, [pc, #212]	@ (80094b0 <sen5x_printvalues+0x1d0>)
 80093dc:	0008      	movs	r0, r1
 80093de:	f016 f9fb 	bl	801f7d8 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 80093e2:	4b2a      	ldr	r3, [pc, #168]	@ (800948c <sen5x_printvalues+0x1ac>)
 80093e4:	220a      	movs	r2, #10
 80093e6:	5e9b      	ldrsh	r3, [r3, r2]
 80093e8:	4a2f      	ldr	r2, [pc, #188]	@ (80094a8 <sen5x_printvalues+0x1c8>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d014      	beq.n	8009418 <sen5x_printvalues+0x138>
        printf("Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 80093ee:	4b27      	ldr	r3, [pc, #156]	@ (800948c <sen5x_printvalues+0x1ac>)
 80093f0:	220a      	movs	r2, #10
 80093f2:	5e9b      	ldrsh	r3, [r3, r2]
 80093f4:	0018      	movs	r0, r3
 80093f6:	f7f8 f8eb 	bl	80015d0 <__aeabi_i2f>
 80093fa:	1c03      	adds	r3, r0, #0
 80093fc:	492d      	ldr	r1, [pc, #180]	@ (80094b4 <sen5x_printvalues+0x1d4>)
 80093fe:	1c18      	adds	r0, r3, #0
 8009400:	f7f7 fbe8 	bl	8000bd4 <__aeabi_fdiv>
 8009404:	1c03      	adds	r3, r0, #0
 8009406:	1c18      	adds	r0, r3, #0
 8009408:	f7fa f82c 	bl	8003464 <__aeabi_f2d>
 800940c:	0002      	movs	r2, r0
 800940e:	000b      	movs	r3, r1
 8009410:	4929      	ldr	r1, [pc, #164]	@ (80094b8 <sen5x_printvalues+0x1d8>)
 8009412:	0008      	movs	r0, r1
 8009414:	f016 f9e0 	bl	801f7d8 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 8009418:	4b1c      	ldr	r3, [pc, #112]	@ (800948c <sen5x_printvalues+0x1ac>)
 800941a:	220c      	movs	r2, #12
 800941c:	5e9b      	ldrsh	r3, [r3, r2]
 800941e:	4a22      	ldr	r2, [pc, #136]	@ (80094a8 <sen5x_printvalues+0x1c8>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d014      	beq.n	800944e <sen5x_printvalues+0x16e>
        printf("sen55 VOC index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 8009424:	4b19      	ldr	r3, [pc, #100]	@ (800948c <sen5x_printvalues+0x1ac>)
 8009426:	220c      	movs	r2, #12
 8009428:	5e9b      	ldrsh	r3, [r3, r2]
 800942a:	0018      	movs	r0, r3
 800942c:	f7f8 f8d0 	bl	80015d0 <__aeabi_i2f>
 8009430:	1c03      	adds	r3, r0, #0
 8009432:	4918      	ldr	r1, [pc, #96]	@ (8009494 <sen5x_printvalues+0x1b4>)
 8009434:	1c18      	adds	r0, r3, #0
 8009436:	f7f7 fbcd 	bl	8000bd4 <__aeabi_fdiv>
 800943a:	1c03      	adds	r3, r0, #0
 800943c:	1c18      	adds	r0, r3, #0
 800943e:	f7fa f811 	bl	8003464 <__aeabi_f2d>
 8009442:	0002      	movs	r2, r0
 8009444:	000b      	movs	r3, r1
 8009446:	491d      	ldr	r1, [pc, #116]	@ (80094bc <sen5x_printvalues+0x1dc>)
 8009448:	0008      	movs	r0, r1
 800944a:	f016 f9c5 	bl	801f7d8 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800944e:	4b0f      	ldr	r3, [pc, #60]	@ (800948c <sen5x_printvalues+0x1ac>)
 8009450:	220e      	movs	r2, #14
 8009452:	5e9b      	ldrsh	r3, [r3, r2]
 8009454:	4a14      	ldr	r2, [pc, #80]	@ (80094a8 <sen5x_printvalues+0x1c8>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d014      	beq.n	8009484 <sen5x_printvalues+0x1a4>
        printf("sen55 NOx index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 800945a:	4b0c      	ldr	r3, [pc, #48]	@ (800948c <sen5x_printvalues+0x1ac>)
 800945c:	220e      	movs	r2, #14
 800945e:	5e9b      	ldrsh	r3, [r3, r2]
 8009460:	0018      	movs	r0, r3
 8009462:	f7f8 f8b5 	bl	80015d0 <__aeabi_i2f>
 8009466:	1c03      	adds	r3, r0, #0
 8009468:	490a      	ldr	r1, [pc, #40]	@ (8009494 <sen5x_printvalues+0x1b4>)
 800946a:	1c18      	adds	r0, r3, #0
 800946c:	f7f7 fbb2 	bl	8000bd4 <__aeabi_fdiv>
 8009470:	1c03      	adds	r3, r0, #0
 8009472:	1c18      	adds	r0, r3, #0
 8009474:	f7f9 fff6 	bl	8003464 <__aeabi_f2d>
 8009478:	0002      	movs	r2, r0
 800947a:	000b      	movs	r3, r1
 800947c:	4910      	ldr	r1, [pc, #64]	@ (80094c0 <sen5x_printvalues+0x1e0>)
 800947e:	0008      	movs	r0, r1
 8009480:	f016 f9aa 	bl	801f7d8 <iprintf>
  }
}
 8009484:	46c0      	nop			@ (mov r8, r8)
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	46c0      	nop			@ (mov r8, r8)
 800948c:	20001270 	.word	0x20001270
 8009490:	0000ffff 	.word	0x0000ffff
 8009494:	41200000 	.word	0x41200000
 8009498:	08023ff8 	.word	0x08023ff8
 800949c:	08024024 	.word	0x08024024
 80094a0:	08024050 	.word	0x08024050
 80094a4:	0802407c 	.word	0x0802407c
 80094a8:	00007fff 	.word	0x00007fff
 80094ac:	42c80000 	.word	0x42c80000
 80094b0:	080240a8 	.word	0x080240a8
 80094b4:	43480000 	.word	0x43480000
 80094b8:	080240c8 	.word	0x080240c8
 80094bc:	080240e8 	.word	0x080240e8
 80094c0:	08024100 	.word	0x08024100

080094c4 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 80094c4:	b590      	push	{r4, r7, lr}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af02      	add	r7, sp, #8
 80094ca:	6039      	str	r1, [r7, #0]
 80094cc:	0011      	movs	r1, r2
 80094ce:	1dfb      	adds	r3, r7, #7
 80094d0:	1c02      	adds	r2, r0, #0
 80094d2:	701a      	strb	r2, [r3, #0]
 80094d4:	1d3b      	adds	r3, r7, #4
 80094d6:	1c0a      	adds	r2, r1, #0
 80094d8:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 80094da:	1dfb      	adds	r3, r7, #7
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	b29b      	uxth	r3, r3
 80094e0:	18db      	adds	r3, r3, r3
 80094e2:	b299      	uxth	r1, r3
 80094e4:	1d3b      	adds	r3, r7, #4
 80094e6:	881b      	ldrh	r3, [r3, #0]
 80094e8:	683a      	ldr	r2, [r7, #0]
 80094ea:	4805      	ldr	r0, [pc, #20]	@ (8009500 <sensirion_i2c_hal_read+0x3c>)
 80094ec:	2464      	movs	r4, #100	@ 0x64
 80094ee:	9400      	str	r4, [sp, #0]
 80094f0:	f006 fd36 	bl	800ff60 <HAL_I2C_Master_Receive>
 80094f4:	0003      	movs	r3, r0
 80094f6:	b25b      	sxtb	r3, r3
}
 80094f8:	0018      	movs	r0, r3
 80094fa:	46bd      	mov	sp, r7
 80094fc:	b003      	add	sp, #12
 80094fe:	bd90      	pop	{r4, r7, pc}
 8009500:	20000e40 	.word	0x20000e40

08009504 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 8009504:	b590      	push	{r4, r7, lr}
 8009506:	b085      	sub	sp, #20
 8009508:	af02      	add	r7, sp, #8
 800950a:	6039      	str	r1, [r7, #0]
 800950c:	0011      	movs	r1, r2
 800950e:	1dfb      	adds	r3, r7, #7
 8009510:	1c02      	adds	r2, r0, #0
 8009512:	701a      	strb	r2, [r3, #0]
 8009514:	1d3b      	adds	r3, r7, #4
 8009516:	1c0a      	adds	r2, r1, #0
 8009518:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800951a:	1dfb      	adds	r3, r7, #7
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	b29b      	uxth	r3, r3
 8009520:	18db      	adds	r3, r3, r3
 8009522:	b299      	uxth	r1, r3
 8009524:	1d3b      	adds	r3, r7, #4
 8009526:	881b      	ldrh	r3, [r3, #0]
 8009528:	683a      	ldr	r2, [r7, #0]
 800952a:	4805      	ldr	r0, [pc, #20]	@ (8009540 <sensirion_i2c_hal_write+0x3c>)
 800952c:	2464      	movs	r4, #100	@ 0x64
 800952e:	9400      	str	r4, [sp, #0]
 8009530:	f006 fc0e 	bl	800fd50 <HAL_I2C_Master_Transmit>
 8009534:	0003      	movs	r3, r0
 8009536:	b25b      	sxtb	r3, r3
}
 8009538:	0018      	movs	r0, r3
 800953a:	46bd      	mov	sp, r7
 800953c:	b003      	add	sp, #12
 800953e:	bd90      	pop	{r4, r7, pc}
 8009540:	20000e40 	.word	0x20000e40

08009544 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	22fa      	movs	r2, #250	@ 0xfa
 8009550:	0091      	lsls	r1, r2, #2
 8009552:	0018      	movs	r0, r3
 8009554:	f7f6 fe26 	bl	80001a4 <__udivsi3>
 8009558:	0003      	movs	r3, r0
 800955a:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	22fa      	movs	r2, #250	@ 0xfa
 8009560:	0091      	lsls	r1, r2, #2
 8009562:	0018      	movs	r0, r3
 8009564:	f7f6 fea4 	bl	80002b0 <__aeabi_uidivmod>
 8009568:	1e0b      	subs	r3, r1, #0
 800956a:	d002      	beq.n	8009572 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	3301      	adds	r3, #1
 8009570:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	0018      	movs	r0, r3
 8009576:	f005 f895 	bl	800e6a4 <HAL_Delay>
}
 800957a:	46c0      	nop			@ (mov r8, r8)
 800957c:	46bd      	mov	sp, r7
 800957e:	b004      	add	sp, #16
 8009580:	bd80      	pop	{r7, pc}
	...

08009584 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 800958a:	2300      	movs	r3, #0
 800958c:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 800958e:	1d3b      	adds	r3, r7, #4
 8009590:	0018      	movs	r0, r3
 8009592:	f000 fc9f 	bl	8009ed4 <sen5x_read_device_status>
 8009596:	1e03      	subs	r3, r0, #0
 8009598:	d007      	beq.n	80095aa <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 800959a:	4a28      	ldr	r2, [pc, #160]	@ (800963c <sen5x_check_for_errors+0xb8>)
 800959c:	4b28      	ldr	r3, [pc, #160]	@ (8009640 <sen5x_check_for_errors+0xbc>)
 800959e:	0019      	movs	r1, r3
 80095a0:	2001      	movs	r0, #1
 80095a2:	f004 fc1f 	bl	800dde4 <CreateLine>
//    device_status = SEN5X_NO_RESPONSE;
    return 0;
 80095a6:	2300      	movs	r3, #0
 80095a8:	e043      	b.n	8009632 <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d101      	bne.n	80095b4 <sen5x_check_for_errors+0x30>
//    Debug("sen5x operates normal");
    return 0;
 80095b0:	2300      	movs	r3, #0
 80095b2:	e03e      	b.n	8009632 <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	2380      	movs	r3, #128	@ 0x80
 80095b8:	039b      	lsls	r3, r3, #14
 80095ba:	4013      	ands	r3, r2
 80095bc:	d005      	beq.n	80095ca <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 80095be:	4a21      	ldr	r2, [pc, #132]	@ (8009644 <sen5x_check_for_errors+0xc0>)
 80095c0:	4b21      	ldr	r3, [pc, #132]	@ (8009648 <sen5x_check_for_errors+0xc4>)
 80095c2:	0019      	movs	r1, r3
 80095c4:	2003      	movs	r0, #3
 80095c6:	f004 fc0d 	bl	800dde4 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	2380      	movs	r3, #128	@ 0x80
 80095ce:	031b      	lsls	r3, r3, #12
 80095d0:	4013      	ands	r3, r2
 80095d2:	d005      	beq.n	80095e0 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 80095d4:	4a1d      	ldr	r2, [pc, #116]	@ (800964c <sen5x_check_for_errors+0xc8>)
 80095d6:	4b1c      	ldr	r3, [pc, #112]	@ (8009648 <sen5x_check_for_errors+0xc4>)
 80095d8:	0019      	movs	r1, r3
 80095da:	2003      	movs	r0, #3
 80095dc:	f004 fc02 	bl	800dde4 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2280      	movs	r2, #128	@ 0x80
 80095e4:	4013      	ands	r3, r2
 80095e6:	d005      	beq.n	80095f4 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 80095e8:	4a19      	ldr	r2, [pc, #100]	@ (8009650 <sen5x_check_for_errors+0xcc>)
 80095ea:	4b17      	ldr	r3, [pc, #92]	@ (8009648 <sen5x_check_for_errors+0xc4>)
 80095ec:	0019      	movs	r1, r3
 80095ee:	2003      	movs	r0, #3
 80095f0:	f004 fbf8 	bl	800dde4 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2240      	movs	r2, #64	@ 0x40
 80095f8:	4013      	ands	r3, r2
 80095fa:	d005      	beq.n	8009608 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 80095fc:	4a15      	ldr	r2, [pc, #84]	@ (8009654 <sen5x_check_for_errors+0xd0>)
 80095fe:	4b12      	ldr	r3, [pc, #72]	@ (8009648 <sen5x_check_for_errors+0xc4>)
 8009600:	0019      	movs	r1, r3
 8009602:	2003      	movs	r0, #3
 8009604:	f004 fbee 	bl	800dde4 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2220      	movs	r2, #32
 800960c:	4013      	ands	r3, r2
 800960e:	d005      	beq.n	800961c <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 8009610:	4a11      	ldr	r2, [pc, #68]	@ (8009658 <sen5x_check_for_errors+0xd4>)
 8009612:	4b0d      	ldr	r3, [pc, #52]	@ (8009648 <sen5x_check_for_errors+0xc4>)
 8009614:	0019      	movs	r1, r3
 8009616:	2003      	movs	r0, #3
 8009618:	f004 fbe4 	bl	800dde4 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2210      	movs	r2, #16
 8009620:	4013      	ands	r3, r2
 8009622:	d005      	beq.n	8009630 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 8009624:	4a0d      	ldr	r2, [pc, #52]	@ (800965c <sen5x_check_for_errors+0xd8>)
 8009626:	4b08      	ldr	r3, [pc, #32]	@ (8009648 <sen5x_check_for_errors+0xc4>)
 8009628:	0019      	movs	r1, r3
 800962a:	2003      	movs	r0, #3
 800962c:	f004 fbda 	bl	800dde4 <CreateLine>
  }
  return 1;
 8009630:	2301      	movs	r3, #1
}
 8009632:	0018      	movs	r0, r3
 8009634:	46bd      	mov	sp, r7
 8009636:	b002      	add	sp, #8
 8009638:	bd80      	pop	{r7, pc}
 800963a:	46c0      	nop			@ (mov r8, r8)
 800963c:	08024118 	.word	0x08024118
 8009640:	08023e04 	.word	0x08023e04
 8009644:	08024144 	.word	0x08024144
 8009648:	08023d54 	.word	0x08023d54
 800964c:	08024164 	.word	0x08024164
 8009650:	08024180 	.word	0x08024180
 8009654:	080241a4 	.word	0x080241a4
 8009658:	080241c4 	.word	0x080241c4
 800965c:	080241d8 	.word	0x080241d8

08009660 <set_light_on_state>:

void set_light_on_state(void) {
 8009660:	b580      	push	{r7, lr}
 8009662:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 8009664:	4b15      	ldr	r3, [pc, #84]	@ (80096bc <set_light_on_state+0x5c>)
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	2201      	movs	r2, #1
 800966a:	4053      	eors	r3, r2
 800966c:	b2db      	uxtb	r3, r3
 800966e:	2b00      	cmp	r3, #0
 8009670:	d008      	beq.n	8009684 <set_light_on_state+0x24>
    sen5x_Power_On();
 8009672:	f7ff fc0d 	bl	8008e90 <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 8009676:	4a12      	ldr	r2, [pc, #72]	@ (80096c0 <set_light_on_state+0x60>)
 8009678:	4b12      	ldr	r3, [pc, #72]	@ (80096c4 <set_light_on_state+0x64>)
 800967a:	0019      	movs	r1, r3
 800967c:	2003      	movs	r0, #3
 800967e:	f004 fbb1 	bl	800dde4 <CreateLine>
 8009682:	e00a      	b.n	800969a <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 8009684:	f005 f804 	bl	800e690 <HAL_GetTick>
 8009688:	0002      	movs	r2, r0
 800968a:	4b0f      	ldr	r3, [pc, #60]	@ (80096c8 <set_light_on_state+0x68>)
 800968c:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800968e:	4a0f      	ldr	r2, [pc, #60]	@ (80096cc <set_light_on_state+0x6c>)
 8009690:	4b0c      	ldr	r3, [pc, #48]	@ (80096c4 <set_light_on_state+0x64>)
 8009692:	0019      	movs	r1, r3
 8009694:	2003      	movs	r0, #3
 8009696:	f004 fba5 	bl	800dde4 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start full measurement mode
 800969a:	f7ff fd59 	bl	8009150 <sen5x_lightup_measurement>
 800969e:	1e03      	subs	r3, r0, #0
 80096a0:	d005      	beq.n	80096ae <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 80096a2:	4a0b      	ldr	r2, [pc, #44]	@ (80096d0 <set_light_on_state+0x70>)
 80096a4:	4b0b      	ldr	r3, [pc, #44]	@ (80096d4 <set_light_on_state+0x74>)
 80096a6:	0019      	movs	r1, r3
 80096a8:	2001      	movs	r0, #1
 80096aa:	f004 fb9b 	bl	800dde4 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 80096ae:	4b0a      	ldr	r3, [pc, #40]	@ (80096d8 <set_light_on_state+0x78>)
 80096b0:	2203      	movs	r2, #3
 80096b2:	701a      	strb	r2, [r3, #0]
}
 80096b4:	46c0      	nop			@ (mov r8, r8)
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	46c0      	nop			@ (mov r8, r8)
 80096bc:	2000125d 	.word	0x2000125d
 80096c0:	08024214 	.word	0x08024214
 80096c4:	08023d54 	.word	0x08023d54
 80096c8:	20001268 	.word	0x20001268
 80096cc:	08024240 	.word	0x08024240
 80096d0:	08024258 	.word	0x08024258
 80096d4:	08023e04 	.word	0x08023e04
 80096d8:	20000085 	.word	0x20000085

080096dc <sen5x_statemachine>:

void sen5x_statemachine() {
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
  bool data_ready = false;
 80096e2:	1dfb      	adds	r3, r7, #7
 80096e4:	2200      	movs	r2, #0
 80096e6:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 80096e8:	4b6f      	ldr	r3, [pc, #444]	@ (80098a8 <sen5x_statemachine+0x1cc>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	0018      	movs	r0, r3
 80096ee:	f004 fb23 	bl	800dd38 <TimestampIsReached>
 80096f2:	1e03      	subs	r3, r0, #0
 80096f4:	d100      	bne.n	80096f8 <sen5x_statemachine+0x1c>
 80096f6:	e0d3      	b.n	80098a0 <sen5x_statemachine+0x1c4>
    switch (PMsamplesState) {
 80096f8:	4b6c      	ldr	r3, [pc, #432]	@ (80098ac <sen5x_statemachine+0x1d0>)
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	2b05      	cmp	r3, #5
 80096fe:	d900      	bls.n	8009702 <sen5x_statemachine+0x26>
 8009700:	e0ce      	b.n	80098a0 <sen5x_statemachine+0x1c4>
 8009702:	009a      	lsls	r2, r3, #2
 8009704:	4b6a      	ldr	r3, [pc, #424]	@ (80098b0 <sen5x_statemachine+0x1d4>)
 8009706:	18d3      	adds	r3, r2, r3
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800970c:	4a69      	ldr	r2, [pc, #420]	@ (80098b4 <sen5x_statemachine+0x1d8>)
 800970e:	4b6a      	ldr	r3, [pc, #424]	@ (80098b8 <sen5x_statemachine+0x1dc>)
 8009710:	0019      	movs	r1, r3
 8009712:	2001      	movs	r0, #1
 8009714:	f004 fb66 	bl	800dde4 <CreateLine>
      sen5xReadTimer = HAL_GetTick() + 3141592; //some more less then an hour a message when continue operated.
 8009718:	f004 ffba 	bl	800e690 <HAL_GetTick>
 800971c:	0003      	movs	r3, r0
 800971e:	4a67      	ldr	r2, [pc, #412]	@ (80098bc <sen5x_statemachine+0x1e0>)
 8009720:	189a      	adds	r2, r3, r2
 8009722:	4b61      	ldr	r3, [pc, #388]	@ (80098a8 <sen5x_statemachine+0x1cc>)
 8009724:	601a      	str	r2, [r3, #0]
      break;
 8009726:	e0bb      	b.n	80098a0 <sen5x_statemachine+0x1c4>
    case LIGHT_OUT:
//      Debug("state is LIGHT_OUT");
      sen5xReadTimer = HAL_GetTick() + 22800; // about every 30s when started up
 8009728:	f004 ffb2 	bl	800e690 <HAL_GetTick>
 800972c:	0003      	movs	r3, r0
 800972e:	4a64      	ldr	r2, [pc, #400]	@ (80098c0 <sen5x_statemachine+0x1e4>)
 8009730:	189a      	adds	r2, r3, r2
 8009732:	4b5d      	ldr	r3, [pc, #372]	@ (80098a8 <sen5x_statemachine+0x1cc>)
 8009734:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 8009736:	f7ff ff93 	bl	8009660 <set_light_on_state>
      break;
 800973a:	e0b1      	b.n	80098a0 <sen5x_statemachine+0x1c4>
    case CHECK_SEN5X:
//      Debug("state is CHECK_SEN5X");
      PMsamplesState = LIGHT_ON;
 800973c:	4b5b      	ldr	r3, [pc, #364]	@ (80098ac <sen5x_statemachine+0x1d0>)
 800973e:	2202      	movs	r2, #2
 8009740:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 8009742:	4b60      	ldr	r3, [pc, #384]	@ (80098c4 <sen5x_statemachine+0x1e8>)
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	2b05      	cmp	r3, #5
 8009748:	d905      	bls.n	8009756 <sen5x_statemachine+0x7a>
        PMsamplesState = S5X_DISABLED;
 800974a:	4b58      	ldr	r3, [pc, #352]	@ (80098ac <sen5x_statemachine+0x1d0>)
 800974c:	2200      	movs	r2, #0
 800974e:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009750:	f7ff fbbe 	bl	8008ed0 <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 8009754:	e0a1      	b.n	800989a <sen5x_statemachine+0x1be>
        if (sen5x_check_for_errors()) {
 8009756:	f7ff ff15 	bl	8009584 <sen5x_check_for_errors>
 800975a:	1e03      	subs	r3, r0, #0
 800975c:	d100      	bne.n	8009760 <sen5x_statemachine+0x84>
 800975e:	e09c      	b.n	800989a <sen5x_statemachine+0x1be>
          if (sen5x_device_reset()) {
 8009760:	f000 fc0a 	bl	8009f78 <sen5x_device_reset>
 8009764:	1e03      	subs	r3, r0, #0
 8009766:	d006      	beq.n	8009776 <sen5x_statemachine+0x9a>
            Error("Error resetting sen5x");
 8009768:	4a57      	ldr	r2, [pc, #348]	@ (80098c8 <sen5x_statemachine+0x1ec>)
 800976a:	4b53      	ldr	r3, [pc, #332]	@ (80098b8 <sen5x_statemachine+0x1dc>)
 800976c:	0019      	movs	r1, r3
 800976e:	2001      	movs	r0, #1
 8009770:	f004 fb38 	bl	800dde4 <CreateLine>
 8009774:	e005      	b.n	8009782 <sen5x_statemachine+0xa6>
            Info("sen5x reset executed");
 8009776:	4a55      	ldr	r2, [pc, #340]	@ (80098cc <sen5x_statemachine+0x1f0>)
 8009778:	4b55      	ldr	r3, [pc, #340]	@ (80098d0 <sen5x_statemachine+0x1f4>)
 800977a:	0019      	movs	r1, r3
 800977c:	2002      	movs	r0, #2
 800977e:	f004 fb31 	bl	800dde4 <CreateLine>
          sen5xErrors++;
 8009782:	4b50      	ldr	r3, [pc, #320]	@ (80098c4 <sen5x_statemachine+0x1e8>)
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	3301      	adds	r3, #1
 8009788:	b2da      	uxtb	r2, r3
 800978a:	4b4e      	ldr	r3, [pc, #312]	@ (80098c4 <sen5x_statemachine+0x1e8>)
 800978c:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 800978e:	f004 ff7f 	bl	800e690 <HAL_GetTick>
 8009792:	0003      	movs	r3, r0
 8009794:	3396      	adds	r3, #150	@ 0x96
 8009796:	001a      	movs	r2, r3
 8009798:	4b43      	ldr	r3, [pc, #268]	@ (80098a8 <sen5x_statemachine+0x1cc>)
 800979a:	601a      	str	r2, [r3, #0]
      break;
 800979c:	e07d      	b.n	800989a <sen5x_statemachine+0x1be>
    case LIGHT_ON:
//      Debug("state is LIGHT_ON");
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800979e:	1dfb      	adds	r3, r7, #7
 80097a0:	0018      	movs	r0, r3
 80097a2:	f000 f905 	bl	80099b0 <sen5x_read_data_ready>
      if (data_ready) {
 80097a6:	1dfb      	adds	r3, r7, #7
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d01e      	beq.n	80097ec <sen5x_statemachine+0x110>
        if (sen5x_read_measurement(&sen5x_data)) {
 80097ae:	4b49      	ldr	r3, [pc, #292]	@ (80098d4 <sen5x_statemachine+0x1f8>)
 80097b0:	0018      	movs	r0, r3
 80097b2:	f7ff fd2d 	bl	8009210 <sen5x_read_measurement>
 80097b6:	1e03      	subs	r3, r0, #0
 80097b8:	d005      	beq.n	80097c6 <sen5x_statemachine+0xea>
          Error("Error executing sen5x_read_measured_values()");
 80097ba:	4a47      	ldr	r2, [pc, #284]	@ (80098d8 <sen5x_statemachine+0x1fc>)
 80097bc:	4b3e      	ldr	r3, [pc, #248]	@ (80098b8 <sen5x_statemachine+0x1dc>)
 80097be:	0019      	movs	r1, r3
 80097c0:	2001      	movs	r0, #1
 80097c2:	f004 fb0f 	bl	800dde4 <CreateLine>
        }
        sen5xSamples++;
 80097c6:	4b45      	ldr	r3, [pc, #276]	@ (80098dc <sen5x_statemachine+0x200>)
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	3301      	adds	r3, #1
 80097cc:	b2da      	uxtb	r2, r3
 80097ce:	4b43      	ldr	r3, [pc, #268]	@ (80098dc <sen5x_statemachine+0x200>)
 80097d0:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 80097d2:	4b42      	ldr	r3, [pc, #264]	@ (80098dc <sen5x_statemachine+0x200>)
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	2b1f      	cmp	r3, #31
 80097d8:	d102      	bne.n	80097e0 <sen5x_statemachine+0x104>
          sen5xSamples = 0;  // enable display on serial
 80097da:	4b40      	ldr	r3, [pc, #256]	@ (80098dc <sen5x_statemachine+0x200>)
 80097dc:	2200      	movs	r2, #0
 80097de:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 80097e0:	4b3e      	ldr	r3, [pc, #248]	@ (80098dc <sen5x_statemachine+0x200>)
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d101      	bne.n	80097ec <sen5x_statemachine+0x110>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 80097e8:	f7ff fd7a 	bl	80092e0 <sen5x_printvalues>
#else
          Info("!!==No values, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 80097ec:	4b3c      	ldr	r3, [pc, #240]	@ (80098e0 <sen5x_statemachine+0x204>)
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d103      	bne.n	80097fc <sen5x_statemachine+0x120>
 80097f4:	4b39      	ldr	r3, [pc, #228]	@ (80098dc <sen5x_statemachine+0x200>)
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d950      	bls.n	800989e <sen5x_statemachine+0x1c2>
        PMsamplesState = CLEAN_FAN;
 80097fc:	4b2b      	ldr	r3, [pc, #172]	@ (80098ac <sen5x_statemachine+0x1d0>)
 80097fe:	2204      	movs	r2, #4
 8009800:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009802:	e04c      	b.n	800989e <sen5x_statemachine+0x1c2>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
//      Debug(" state is CLEAN_FAN");
      if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 8009804:	f7fd f89e 	bl	8006944 <RTC_GetWeekday>
 8009808:	0003      	movs	r3, r0
 800980a:	2b01      	cmp	r3, #1
 800980c:	d118      	bne.n	8009840 <sen5x_statemachine+0x164>
 800980e:	4b35      	ldr	r3, [pc, #212]	@ (80098e4 <sen5x_statemachine+0x208>)
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	2201      	movs	r2, #1
 8009814:	4053      	eors	r3, r2
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b00      	cmp	r3, #0
 800981a:	d011      	beq.n	8009840 <sen5x_statemachine+0x164>
        sen5x_start_fan_cleaning();
 800981c:	f000 f9ae 	bl	8009b7c <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 8009820:	4a31      	ldr	r2, [pc, #196]	@ (80098e8 <sen5x_statemachine+0x20c>)
 8009822:	4b2b      	ldr	r3, [pc, #172]	@ (80098d0 <sen5x_statemachine+0x1f4>)
 8009824:	0019      	movs	r1, r3
 8009826:	2002      	movs	r0, #2
 8009828:	f004 fadc 	bl	800dde4 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + 10000;  // fan cleaning takes 10 seconds
 800982c:	f004 ff30 	bl	800e690 <HAL_GetTick>
 8009830:	0003      	movs	r3, r0
 8009832:	4a2e      	ldr	r2, [pc, #184]	@ (80098ec <sen5x_statemachine+0x210>)
 8009834:	189a      	adds	r2, r3, r2
 8009836:	4b1c      	ldr	r3, [pc, #112]	@ (80098a8 <sen5x_statemachine+0x1cc>)
 8009838:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800983a:	4b2a      	ldr	r3, [pc, #168]	@ (80098e4 <sen5x_statemachine+0x208>)
 800983c:	2201      	movs	r2, #1
 800983e:	701a      	strb	r2, [r3, #0]
      }
      PMsamplesState = SAMPLES_TAKEN;
 8009840:	4b1a      	ldr	r3, [pc, #104]	@ (80098ac <sen5x_statemachine+0x1d0>)
 8009842:	2205      	movs	r2, #5
 8009844:	701a      	strb	r2, [r3, #0]
      break;
 8009846:	e02b      	b.n	80098a0 <sen5x_statemachine+0x1c4>
    case SAMPLES_TAKEN:
//      Debug(" state is SAMPLES_TAKEN");
      if (!usbPluggedIn) {
 8009848:	4b25      	ldr	r3, [pc, #148]	@ (80098e0 <sen5x_statemachine+0x204>)
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	2201      	movs	r2, #1
 800984e:	4053      	eors	r3, r2
 8009850:	b2db      	uxtb	r3, r3
 8009852:	2b00      	cmp	r3, #0
 8009854:	d015      	beq.n	8009882 <sen5x_statemachine+0x1a6>
        if (sen5x_extinguish_measurement()) {
 8009856:	f7ff fcab 	bl	80091b0 <sen5x_extinguish_measurement>
 800985a:	1e03      	subs	r3, r0, #0
 800985c:	d005      	beq.n	800986a <sen5x_statemachine+0x18e>
          Error("Error executing sen5x_extinguish_measurement()");
 800985e:	4a24      	ldr	r2, [pc, #144]	@ (80098f0 <sen5x_statemachine+0x214>)
 8009860:	4b15      	ldr	r3, [pc, #84]	@ (80098b8 <sen5x_statemachine+0x1dc>)
 8009862:	0019      	movs	r1, r3
 8009864:	2001      	movs	r0, #1
 8009866:	f004 fabd 	bl	800dde4 <CreateLine>
        }
        sen5xSamples = 0;
 800986a:	4b1c      	ldr	r3, [pc, #112]	@ (80098dc <sen5x_statemachine+0x200>)
 800986c:	2200      	movs	r2, #0
 800986e:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009870:	f7ff fb2e 	bl	8008ed0 <sen5x_Power_Off>
        SetPMSensorStatus(false);
 8009874:	2000      	movs	r0, #0
 8009876:	f7fe fcb9 	bl	80081ec <SetPMSensorStatus>
        PMsamplesState = LIGHT_OUT;
 800987a:	4b0c      	ldr	r3, [pc, #48]	@ (80098ac <sen5x_statemachine+0x1d0>)
 800987c:	2201      	movs	r2, #1
 800987e:	701a      	strb	r2, [r3, #0]
 8009880:	e002      	b.n	8009888 <sen5x_statemachine+0x1ac>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 8009882:	4b0a      	ldr	r3, [pc, #40]	@ (80098ac <sen5x_statemachine+0x1d0>)
 8009884:	2203      	movs	r2, #3
 8009886:	701a      	strb	r2, [r3, #0]
      }
      sen5xReadTimer = HAL_GetTick() + 1000;
 8009888:	f004 ff02 	bl	800e690 <HAL_GetTick>
 800988c:	0003      	movs	r3, r0
 800988e:	22fa      	movs	r2, #250	@ 0xfa
 8009890:	0092      	lsls	r2, r2, #2
 8009892:	189a      	adds	r2, r3, r2
 8009894:	4b04      	ldr	r3, [pc, #16]	@ (80098a8 <sen5x_statemachine+0x1cc>)
 8009896:	601a      	str	r2, [r3, #0]
    }
  }
}
 8009898:	e002      	b.n	80098a0 <sen5x_statemachine+0x1c4>
      break;
 800989a:	46c0      	nop			@ (mov r8, r8)
 800989c:	e000      	b.n	80098a0 <sen5x_statemachine+0x1c4>
      break;
 800989e:	46c0      	nop			@ (mov r8, r8)
}
 80098a0:	46c0      	nop			@ (mov r8, r8)
 80098a2:	46bd      	mov	sp, r7
 80098a4:	b002      	add	sp, #8
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	20001268 	.word	0x20001268
 80098ac:	20000085 	.word	0x20000085
 80098b0:	08024bc8 	.word	0x08024bc8
 80098b4:	08024284 	.word	0x08024284
 80098b8:	08023e04 	.word	0x08023e04
 80098bc:	002fefd8 	.word	0x002fefd8
 80098c0:	00005910 	.word	0x00005910
 80098c4:	2000126d 	.word	0x2000126d
 80098c8:	080242b4 	.word	0x080242b4
 80098cc:	080242cc 	.word	0x080242cc
 80098d0:	08023d7c 	.word	0x08023d7c
 80098d4:	20001270 	.word	0x20001270
 80098d8:	080242e4 	.word	0x080242e4
 80098dc:	2000126c 	.word	0x2000126c
 80098e0:	200021ed 	.word	0x200021ed
 80098e4:	2000125c 	.word	0x2000125c
 80098e8:	08024314 	.word	0x08024314
 80098ec:	00002710 	.word	0x00002710
 80098f0:	0802432c 	.word	0x0802432c

080098f4 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 80098f4:	b590      	push	{r4, r7, lr}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80098fa:	1dbb      	adds	r3, r7, #6
 80098fc:	2200      	movs	r2, #0
 80098fe:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 8009900:	1dbc      	adds	r4, r7, #6
 8009902:	1dbb      	adds	r3, r7, #6
 8009904:	8819      	ldrh	r1, [r3, #0]
 8009906:	003b      	movs	r3, r7
 8009908:	2221      	movs	r2, #33	@ 0x21
 800990a:	0018      	movs	r0, r3
 800990c:	f001 fb28 	bl	800af60 <sensirion_i2c_add_command_to_buffer>
 8009910:	0003      	movs	r3, r0
 8009912:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009914:	1d3c      	adds	r4, r7, #4
 8009916:	1dbb      	adds	r3, r7, #6
 8009918:	881a      	ldrh	r2, [r3, #0]
 800991a:	003b      	movs	r3, r7
 800991c:	0019      	movs	r1, r3
 800991e:	2069      	movs	r0, #105	@ 0x69
 8009920:	f001 fba2 	bl	800b068 <sensirion_i2c_write_data>
 8009924:	0003      	movs	r3, r0
 8009926:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009928:	1d3b      	adds	r3, r7, #4
 800992a:	2200      	movs	r2, #0
 800992c:	5e9b      	ldrsh	r3, [r3, r2]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d003      	beq.n	800993a <sen5x_start_measurement+0x46>
        return error;
 8009932:	1d3b      	adds	r3, r7, #4
 8009934:	2200      	movs	r2, #0
 8009936:	5e9b      	ldrsh	r3, [r3, r2]
 8009938:	e004      	b.n	8009944 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800993a:	4b04      	ldr	r3, [pc, #16]	@ (800994c <sen5x_start_measurement+0x58>)
 800993c:	0018      	movs	r0, r3
 800993e:	f7ff fe01 	bl	8009544 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009942:	2300      	movs	r3, #0
}
 8009944:	0018      	movs	r0, r3
 8009946:	46bd      	mov	sp, r7
 8009948:	b003      	add	sp, #12
 800994a:	bd90      	pop	{r4, r7, pc}
 800994c:	0000c350 	.word	0x0000c350

08009950 <sen5x_stop_measurement>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t sen5x_stop_measurement(void) {
 8009950:	b590      	push	{r4, r7, lr}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009956:	1dbb      	adds	r3, r7, #6
 8009958:	2200      	movs	r2, #0
 800995a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800995c:	1dbc      	adds	r4, r7, #6
 800995e:	2382      	movs	r3, #130	@ 0x82
 8009960:	005a      	lsls	r2, r3, #1
 8009962:	1dbb      	adds	r3, r7, #6
 8009964:	8819      	ldrh	r1, [r3, #0]
 8009966:	003b      	movs	r3, r7
 8009968:	0018      	movs	r0, r3
 800996a:	f001 faf9 	bl	800af60 <sensirion_i2c_add_command_to_buffer>
 800996e:	0003      	movs	r3, r0
 8009970:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009972:	1d3c      	adds	r4, r7, #4
 8009974:	1dbb      	adds	r3, r7, #6
 8009976:	881a      	ldrh	r2, [r3, #0]
 8009978:	003b      	movs	r3, r7
 800997a:	0019      	movs	r1, r3
 800997c:	2069      	movs	r0, #105	@ 0x69
 800997e:	f001 fb73 	bl	800b068 <sensirion_i2c_write_data>
 8009982:	0003      	movs	r3, r0
 8009984:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009986:	1d3b      	adds	r3, r7, #4
 8009988:	2200      	movs	r2, #0
 800998a:	5e9b      	ldrsh	r3, [r3, r2]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d003      	beq.n	8009998 <sen5x_stop_measurement+0x48>
        return error;
 8009990:	1d3b      	adds	r3, r7, #4
 8009992:	2200      	movs	r2, #0
 8009994:	5e9b      	ldrsh	r3, [r3, r2]
 8009996:	e004      	b.n	80099a2 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009998:	4b04      	ldr	r3, [pc, #16]	@ (80099ac <sen5x_stop_measurement+0x5c>)
 800999a:	0018      	movs	r0, r3
 800999c:	f7ff fdd2 	bl	8009544 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	0018      	movs	r0, r3
 80099a4:	46bd      	mov	sp, r7
 80099a6:	b003      	add	sp, #12
 80099a8:	bd90      	pop	{r4, r7, pc}
 80099aa:	46c0      	nop			@ (mov r8, r8)
 80099ac:	00030d40 	.word	0x00030d40

080099b0 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 80099b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 80099b8:	250e      	movs	r5, #14
 80099ba:	197b      	adds	r3, r7, r5
 80099bc:	2200      	movs	r2, #0
 80099be:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 80099c0:	197c      	adds	r4, r7, r5
 80099c2:	4a22      	ldr	r2, [pc, #136]	@ (8009a4c <sen5x_read_data_ready+0x9c>)
 80099c4:	197b      	adds	r3, r7, r5
 80099c6:	8819      	ldrh	r1, [r3, #0]
 80099c8:	2308      	movs	r3, #8
 80099ca:	18fb      	adds	r3, r7, r3
 80099cc:	0018      	movs	r0, r3
 80099ce:	f001 fac7 	bl	800af60 <sensirion_i2c_add_command_to_buffer>
 80099d2:	0003      	movs	r3, r0
 80099d4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80099d6:	260c      	movs	r6, #12
 80099d8:	19bc      	adds	r4, r7, r6
 80099da:	197b      	adds	r3, r7, r5
 80099dc:	881a      	ldrh	r2, [r3, #0]
 80099de:	2308      	movs	r3, #8
 80099e0:	18fb      	adds	r3, r7, r3
 80099e2:	0019      	movs	r1, r3
 80099e4:	2069      	movs	r0, #105	@ 0x69
 80099e6:	f001 fb3f 	bl	800b068 <sensirion_i2c_write_data>
 80099ea:	0003      	movs	r3, r0
 80099ec:	8023      	strh	r3, [r4, #0]
    if (error) {
 80099ee:	19bb      	adds	r3, r7, r6
 80099f0:	2200      	movs	r2, #0
 80099f2:	5e9b      	ldrsh	r3, [r3, r2]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d003      	beq.n	8009a00 <sen5x_read_data_ready+0x50>
        return error;
 80099f8:	19bb      	adds	r3, r7, r6
 80099fa:	2200      	movs	r2, #0
 80099fc:	5e9b      	ldrsh	r3, [r3, r2]
 80099fe:	e020      	b.n	8009a42 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009a00:	4b13      	ldr	r3, [pc, #76]	@ (8009a50 <sen5x_read_data_ready+0xa0>)
 8009a02:	0018      	movs	r0, r3
 8009a04:	f7ff fd9e 	bl	8009544 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 8009a08:	250c      	movs	r5, #12
 8009a0a:	197c      	adds	r4, r7, r5
 8009a0c:	2308      	movs	r3, #8
 8009a0e:	18fb      	adds	r3, r7, r3
 8009a10:	2202      	movs	r2, #2
 8009a12:	0019      	movs	r1, r3
 8009a14:	2069      	movs	r0, #105	@ 0x69
 8009a16:	f001 fb3f 	bl	800b098 <sensirion_i2c_read_data_inplace>
 8009a1a:	0003      	movs	r3, r0
 8009a1c:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009a1e:	197b      	adds	r3, r7, r5
 8009a20:	2200      	movs	r2, #0
 8009a22:	5e9b      	ldrsh	r3, [r3, r2]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d003      	beq.n	8009a30 <sen5x_read_data_ready+0x80>
        return error;
 8009a28:	197b      	adds	r3, r7, r5
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	5e9b      	ldrsh	r3, [r3, r2]
 8009a2e:	e008      	b.n	8009a42 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 8009a30:	2308      	movs	r3, #8
 8009a32:	18fb      	adds	r3, r7, r3
 8009a34:	785b      	ldrb	r3, [r3, #1]
 8009a36:	1e5a      	subs	r2, r3, #1
 8009a38:	4193      	sbcs	r3, r2
 8009a3a:	b2da      	uxtb	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	0018      	movs	r0, r3
 8009a44:	46bd      	mov	sp, r7
 8009a46:	b005      	add	sp, #20
 8009a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a4a:	46c0      	nop			@ (mov r8, r8)
 8009a4c:	00000202 	.word	0x00000202
 8009a50:	00004e20 	.word	0x00004e20

08009a54 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 8009a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a56:	b08d      	sub	sp, #52	@ 0x34
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
 8009a60:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 8009a62:	252e      	movs	r5, #46	@ 0x2e
 8009a64:	197b      	adds	r3, r7, r5
 8009a66:	2200      	movs	r2, #0
 8009a68:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 8009a6a:	197c      	adds	r4, r7, r5
 8009a6c:	23f1      	movs	r3, #241	@ 0xf1
 8009a6e:	009a      	lsls	r2, r3, #2
 8009a70:	197b      	adds	r3, r7, r5
 8009a72:	8819      	ldrh	r1, [r3, #0]
 8009a74:	2314      	movs	r3, #20
 8009a76:	18fb      	adds	r3, r7, r3
 8009a78:	0018      	movs	r0, r3
 8009a7a:	f001 fa71 	bl	800af60 <sensirion_i2c_add_command_to_buffer>
 8009a7e:	0003      	movs	r3, r0
 8009a80:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009a82:	262c      	movs	r6, #44	@ 0x2c
 8009a84:	19bc      	adds	r4, r7, r6
 8009a86:	197b      	adds	r3, r7, r5
 8009a88:	881a      	ldrh	r2, [r3, #0]
 8009a8a:	2314      	movs	r3, #20
 8009a8c:	18fb      	adds	r3, r7, r3
 8009a8e:	0019      	movs	r1, r3
 8009a90:	2069      	movs	r0, #105	@ 0x69
 8009a92:	f001 fae9 	bl	800b068 <sensirion_i2c_write_data>
 8009a96:	0003      	movs	r3, r0
 8009a98:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009a9a:	19bb      	adds	r3, r7, r6
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	5e9b      	ldrsh	r3, [r3, r2]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d003      	beq.n	8009aac <sen5x_read_measured_values+0x58>
        return error;
 8009aa4:	19bb      	adds	r3, r7, r6
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	5e9b      	ldrsh	r3, [r3, r2]
 8009aaa:	e060      	b.n	8009b6e <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009aac:	4b32      	ldr	r3, [pc, #200]	@ (8009b78 <sen5x_read_measured_values+0x124>)
 8009aae:	0018      	movs	r0, r3
 8009ab0:	f7ff fd48 	bl	8009544 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 8009ab4:	252c      	movs	r5, #44	@ 0x2c
 8009ab6:	197c      	adds	r4, r7, r5
 8009ab8:	2314      	movs	r3, #20
 8009aba:	18fb      	adds	r3, r7, r3
 8009abc:	2210      	movs	r2, #16
 8009abe:	0019      	movs	r1, r3
 8009ac0:	2069      	movs	r0, #105	@ 0x69
 8009ac2:	f001 fae9 	bl	800b098 <sensirion_i2c_read_data_inplace>
 8009ac6:	0003      	movs	r3, r0
 8009ac8:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009aca:	197b      	adds	r3, r7, r5
 8009acc:	2200      	movs	r2, #0
 8009ace:	5e9b      	ldrsh	r3, [r3, r2]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d003      	beq.n	8009adc <sen5x_read_measured_values+0x88>
        return error;
 8009ad4:	197b      	adds	r3, r7, r5
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	5e9b      	ldrsh	r3, [r3, r2]
 8009ada:	e048      	b.n	8009b6e <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8009adc:	2414      	movs	r4, #20
 8009ade:	193b      	adds	r3, r7, r4
 8009ae0:	0018      	movs	r0, r3
 8009ae2:	f000 fa79 	bl	8009fd8 <sensirion_common_bytes_to_uint16_t>
 8009ae6:	0003      	movs	r3, r0
 8009ae8:	001a      	movs	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8009aee:	193b      	adds	r3, r7, r4
 8009af0:	3302      	adds	r3, #2
 8009af2:	0018      	movs	r0, r3
 8009af4:	f000 fa70 	bl	8009fd8 <sensirion_common_bytes_to_uint16_t>
 8009af8:	0003      	movs	r3, r0
 8009afa:	001a      	movs	r2, r3
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8009b00:	193b      	adds	r3, r7, r4
 8009b02:	3304      	adds	r3, #4
 8009b04:	0018      	movs	r0, r3
 8009b06:	f000 fa67 	bl	8009fd8 <sensirion_common_bytes_to_uint16_t>
 8009b0a:	0003      	movs	r3, r0
 8009b0c:	001a      	movs	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 8009b12:	193b      	adds	r3, r7, r4
 8009b14:	3306      	adds	r3, #6
 8009b16:	0018      	movs	r0, r3
 8009b18:	f000 fa5e 	bl	8009fd8 <sensirion_common_bytes_to_uint16_t>
 8009b1c:	0003      	movs	r3, r0
 8009b1e:	001a      	movs	r2, r3
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 8009b24:	193b      	adds	r3, r7, r4
 8009b26:	3308      	adds	r3, #8
 8009b28:	0018      	movs	r0, r3
 8009b2a:	f000 fa81 	bl	800a030 <sensirion_common_bytes_to_int16_t>
 8009b2e:	0003      	movs	r3, r0
 8009b30:	001a      	movs	r2, r3
 8009b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b34:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 8009b36:	193b      	adds	r3, r7, r4
 8009b38:	330a      	adds	r3, #10
 8009b3a:	0018      	movs	r0, r3
 8009b3c:	f000 fa78 	bl	800a030 <sensirion_common_bytes_to_int16_t>
 8009b40:	0003      	movs	r3, r0
 8009b42:	001a      	movs	r2, r3
 8009b44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b46:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 8009b48:	193b      	adds	r3, r7, r4
 8009b4a:	330c      	adds	r3, #12
 8009b4c:	0018      	movs	r0, r3
 8009b4e:	f000 fa6f 	bl	800a030 <sensirion_common_bytes_to_int16_t>
 8009b52:	0003      	movs	r3, r0
 8009b54:	001a      	movs	r2, r3
 8009b56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b58:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 8009b5a:	193b      	adds	r3, r7, r4
 8009b5c:	330e      	adds	r3, #14
 8009b5e:	0018      	movs	r0, r3
 8009b60:	f000 fa66 	bl	800a030 <sensirion_common_bytes_to_int16_t>
 8009b64:	0003      	movs	r3, r0
 8009b66:	001a      	movs	r2, r3
 8009b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b6a:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	0018      	movs	r0, r3
 8009b70:	46bd      	mov	sp, r7
 8009b72:	b00d      	add	sp, #52	@ 0x34
 8009b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b76:	46c0      	nop			@ (mov r8, r8)
 8009b78:	00004e20 	.word	0x00004e20

08009b7c <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 8009b7c:	b590      	push	{r4, r7, lr}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009b82:	1dbb      	adds	r3, r7, #6
 8009b84:	2200      	movs	r2, #0
 8009b86:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 8009b88:	1dbc      	adds	r4, r7, #6
 8009b8a:	4a12      	ldr	r2, [pc, #72]	@ (8009bd4 <sen5x_start_fan_cleaning+0x58>)
 8009b8c:	1dbb      	adds	r3, r7, #6
 8009b8e:	8819      	ldrh	r1, [r3, #0]
 8009b90:	003b      	movs	r3, r7
 8009b92:	0018      	movs	r0, r3
 8009b94:	f001 f9e4 	bl	800af60 <sensirion_i2c_add_command_to_buffer>
 8009b98:	0003      	movs	r3, r0
 8009b9a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009b9c:	1d3c      	adds	r4, r7, #4
 8009b9e:	1dbb      	adds	r3, r7, #6
 8009ba0:	881a      	ldrh	r2, [r3, #0]
 8009ba2:	003b      	movs	r3, r7
 8009ba4:	0019      	movs	r1, r3
 8009ba6:	2069      	movs	r0, #105	@ 0x69
 8009ba8:	f001 fa5e 	bl	800b068 <sensirion_i2c_write_data>
 8009bac:	0003      	movs	r3, r0
 8009bae:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009bb0:	1d3b      	adds	r3, r7, #4
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	5e9b      	ldrsh	r3, [r3, r2]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d003      	beq.n	8009bc2 <sen5x_start_fan_cleaning+0x46>
        return error;
 8009bba:	1d3b      	adds	r3, r7, #4
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	5e9b      	ldrsh	r3, [r3, r2]
 8009bc0:	e004      	b.n	8009bcc <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8009bc2:	4b05      	ldr	r3, [pc, #20]	@ (8009bd8 <sen5x_start_fan_cleaning+0x5c>)
 8009bc4:	0018      	movs	r0, r3
 8009bc6:	f7ff fcbd 	bl	8009544 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	0018      	movs	r0, r3
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	b003      	add	sp, #12
 8009bd2:	bd90      	pop	{r4, r7, pc}
 8009bd4:	00005607 	.word	0x00005607
 8009bd8:	00004e20 	.word	0x00004e20

08009bdc <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 8009bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bde:	b087      	sub	sp, #28
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	0004      	movs	r4, r0
 8009be4:	0008      	movs	r0, r1
 8009be6:	0011      	movs	r1, r2
 8009be8:	1dbb      	adds	r3, r7, #6
 8009bea:	1c22      	adds	r2, r4, #0
 8009bec:	801a      	strh	r2, [r3, #0]
 8009bee:	1d3b      	adds	r3, r7, #4
 8009bf0:	1c02      	adds	r2, r0, #0
 8009bf2:	801a      	strh	r2, [r3, #0]
 8009bf4:	1cbb      	adds	r3, r7, #2
 8009bf6:	1c0a      	adds	r2, r1, #0
 8009bf8:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 8009bfa:	2516      	movs	r5, #22
 8009bfc:	197b      	adds	r3, r7, r5
 8009bfe:	2200      	movs	r2, #0
 8009c00:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 8009c02:	197c      	adds	r4, r7, r5
 8009c04:	4a25      	ldr	r2, [pc, #148]	@ (8009c9c <sen5x_set_temperature_offset_parameters+0xc0>)
 8009c06:	197b      	adds	r3, r7, r5
 8009c08:	8819      	ldrh	r1, [r3, #0]
 8009c0a:	2608      	movs	r6, #8
 8009c0c:	19bb      	adds	r3, r7, r6
 8009c0e:	0018      	movs	r0, r3
 8009c10:	f001 f9a6 	bl	800af60 <sensirion_i2c_add_command_to_buffer>
 8009c14:	0003      	movs	r3, r0
 8009c16:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 8009c18:	197c      	adds	r4, r7, r5
 8009c1a:	1dbb      	adds	r3, r7, #6
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	5e9a      	ldrsh	r2, [r3, r2]
 8009c20:	197b      	adds	r3, r7, r5
 8009c22:	8819      	ldrh	r1, [r3, #0]
 8009c24:	19bb      	adds	r3, r7, r6
 8009c26:	0018      	movs	r0, r3
 8009c28:	f001 fa05 	bl	800b036 <sensirion_i2c_add_int16_t_to_buffer>
 8009c2c:	0003      	movs	r3, r0
 8009c2e:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 8009c30:	197c      	adds	r4, r7, r5
 8009c32:	1d3b      	adds	r3, r7, #4
 8009c34:	2200      	movs	r2, #0
 8009c36:	5e9a      	ldrsh	r2, [r3, r2]
 8009c38:	197b      	adds	r3, r7, r5
 8009c3a:	8819      	ldrh	r1, [r3, #0]
 8009c3c:	19bb      	adds	r3, r7, r6
 8009c3e:	0018      	movs	r0, r3
 8009c40:	f001 f9f9 	bl	800b036 <sensirion_i2c_add_int16_t_to_buffer>
 8009c44:	0003      	movs	r3, r0
 8009c46:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 8009c48:	197c      	adds	r4, r7, r5
 8009c4a:	1cbb      	adds	r3, r7, #2
 8009c4c:	881a      	ldrh	r2, [r3, #0]
 8009c4e:	197b      	adds	r3, r7, r5
 8009c50:	8819      	ldrh	r1, [r3, #0]
 8009c52:	19bb      	adds	r3, r7, r6
 8009c54:	0018      	movs	r0, r3
 8009c56:	f001 f9af 	bl	800afb8 <sensirion_i2c_add_uint16_t_to_buffer>
 8009c5a:	0003      	movs	r3, r0
 8009c5c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009c5e:	2214      	movs	r2, #20
 8009c60:	18bc      	adds	r4, r7, r2
 8009c62:	197b      	adds	r3, r7, r5
 8009c64:	881a      	ldrh	r2, [r3, #0]
 8009c66:	19bb      	adds	r3, r7, r6
 8009c68:	0019      	movs	r1, r3
 8009c6a:	2069      	movs	r0, #105	@ 0x69
 8009c6c:	f001 f9fc 	bl	800b068 <sensirion_i2c_write_data>
 8009c70:	0003      	movs	r3, r0
 8009c72:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009c74:	2214      	movs	r2, #20
 8009c76:	18bb      	adds	r3, r7, r2
 8009c78:	2100      	movs	r1, #0
 8009c7a:	5e5b      	ldrsh	r3, [r3, r1]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d003      	beq.n	8009c88 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 8009c80:	18bb      	adds	r3, r7, r2
 8009c82:	2200      	movs	r2, #0
 8009c84:	5e9b      	ldrsh	r3, [r3, r2]
 8009c86:	e004      	b.n	8009c92 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8009c88:	4b05      	ldr	r3, [pc, #20]	@ (8009ca0 <sen5x_set_temperature_offset_parameters+0xc4>)
 8009c8a:	0018      	movs	r0, r3
 8009c8c:	f7ff fc5a 	bl	8009544 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	0018      	movs	r0, r3
 8009c94:	46bd      	mov	sp, r7
 8009c96:	b007      	add	sp, #28
 8009c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c9a:	46c0      	nop			@ (mov r8, r8)
 8009c9c:	000060b2 	.word	0x000060b2
 8009ca0:	00004e20 	.word	0x00004e20

08009ca4 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 8009ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ca6:	b091      	sub	sp, #68	@ 0x44
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	000a      	movs	r2, r1
 8009cae:	1cfb      	adds	r3, r7, #3
 8009cb0:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8009cb2:	253e      	movs	r5, #62	@ 0x3e
 8009cb4:	197b      	adds	r3, r7, r5
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 8009cba:	197c      	adds	r4, r7, r5
 8009cbc:	4a22      	ldr	r2, [pc, #136]	@ (8009d48 <sen5x_get_product_name+0xa4>)
 8009cbe:	197b      	adds	r3, r7, r5
 8009cc0:	8819      	ldrh	r1, [r3, #0]
 8009cc2:	230c      	movs	r3, #12
 8009cc4:	18fb      	adds	r3, r7, r3
 8009cc6:	0018      	movs	r0, r3
 8009cc8:	f001 f94a 	bl	800af60 <sensirion_i2c_add_command_to_buffer>
 8009ccc:	0003      	movs	r3, r0
 8009cce:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009cd0:	263c      	movs	r6, #60	@ 0x3c
 8009cd2:	19bc      	adds	r4, r7, r6
 8009cd4:	197b      	adds	r3, r7, r5
 8009cd6:	881a      	ldrh	r2, [r3, #0]
 8009cd8:	230c      	movs	r3, #12
 8009cda:	18fb      	adds	r3, r7, r3
 8009cdc:	0019      	movs	r1, r3
 8009cde:	2069      	movs	r0, #105	@ 0x69
 8009ce0:	f001 f9c2 	bl	800b068 <sensirion_i2c_write_data>
 8009ce4:	0003      	movs	r3, r0
 8009ce6:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009ce8:	19bb      	adds	r3, r7, r6
 8009cea:	2200      	movs	r2, #0
 8009cec:	5e9b      	ldrsh	r3, [r3, r2]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <sen5x_get_product_name+0x56>
        return error;
 8009cf2:	19bb      	adds	r3, r7, r6
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	5e9b      	ldrsh	r3, [r3, r2]
 8009cf8:	e021      	b.n	8009d3e <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8009cfa:	4b14      	ldr	r3, [pc, #80]	@ (8009d4c <sen5x_get_product_name+0xa8>)
 8009cfc:	0018      	movs	r0, r3
 8009cfe:	f7ff fc21 	bl	8009544 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8009d02:	253c      	movs	r5, #60	@ 0x3c
 8009d04:	197c      	adds	r4, r7, r5
 8009d06:	230c      	movs	r3, #12
 8009d08:	18fb      	adds	r3, r7, r3
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	0019      	movs	r1, r3
 8009d0e:	2069      	movs	r0, #105	@ 0x69
 8009d10:	f001 f9c2 	bl	800b098 <sensirion_i2c_read_data_inplace>
 8009d14:	0003      	movs	r3, r0
 8009d16:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009d18:	197b      	adds	r3, r7, r5
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	5e9b      	ldrsh	r3, [r3, r2]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d003      	beq.n	8009d2a <sen5x_get_product_name+0x86>
        return error;
 8009d22:	197b      	adds	r3, r7, r5
 8009d24:	2200      	movs	r2, #0
 8009d26:	5e9b      	ldrsh	r3, [r3, r2]
 8009d28:	e009      	b.n	8009d3e <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 8009d2a:	1cfb      	adds	r3, r7, #3
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	6879      	ldr	r1, [r7, #4]
 8009d32:	230c      	movs	r3, #12
 8009d34:	18fb      	adds	r3, r7, r3
 8009d36:	0018      	movs	r0, r3
 8009d38:	f000 f988 	bl	800a04c <sensirion_common_copy_bytes>
    return NO_ERROR;
 8009d3c:	2300      	movs	r3, #0
}
 8009d3e:	0018      	movs	r0, r3
 8009d40:	46bd      	mov	sp, r7
 8009d42:	b011      	add	sp, #68	@ 0x44
 8009d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d46:	46c0      	nop			@ (mov r8, r8)
 8009d48:	0000d014 	.word	0x0000d014
 8009d4c:	0000c350 	.word	0x0000c350

08009d50 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 8009d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d52:	b091      	sub	sp, #68	@ 0x44
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	000a      	movs	r2, r1
 8009d5a:	1cfb      	adds	r3, r7, #3
 8009d5c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8009d5e:	253e      	movs	r5, #62	@ 0x3e
 8009d60:	197b      	adds	r3, r7, r5
 8009d62:	2200      	movs	r2, #0
 8009d64:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 8009d66:	197c      	adds	r4, r7, r5
 8009d68:	4a22      	ldr	r2, [pc, #136]	@ (8009df4 <sen5x_get_serial_number+0xa4>)
 8009d6a:	197b      	adds	r3, r7, r5
 8009d6c:	8819      	ldrh	r1, [r3, #0]
 8009d6e:	230c      	movs	r3, #12
 8009d70:	18fb      	adds	r3, r7, r3
 8009d72:	0018      	movs	r0, r3
 8009d74:	f001 f8f4 	bl	800af60 <sensirion_i2c_add_command_to_buffer>
 8009d78:	0003      	movs	r3, r0
 8009d7a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009d7c:	263c      	movs	r6, #60	@ 0x3c
 8009d7e:	19bc      	adds	r4, r7, r6
 8009d80:	197b      	adds	r3, r7, r5
 8009d82:	881a      	ldrh	r2, [r3, #0]
 8009d84:	230c      	movs	r3, #12
 8009d86:	18fb      	adds	r3, r7, r3
 8009d88:	0019      	movs	r1, r3
 8009d8a:	2069      	movs	r0, #105	@ 0x69
 8009d8c:	f001 f96c 	bl	800b068 <sensirion_i2c_write_data>
 8009d90:	0003      	movs	r3, r0
 8009d92:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009d94:	19bb      	adds	r3, r7, r6
 8009d96:	2200      	movs	r2, #0
 8009d98:	5e9b      	ldrsh	r3, [r3, r2]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <sen5x_get_serial_number+0x56>
        return error;
 8009d9e:	19bb      	adds	r3, r7, r6
 8009da0:	2200      	movs	r2, #0
 8009da2:	5e9b      	ldrsh	r3, [r3, r2]
 8009da4:	e021      	b.n	8009dea <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8009da6:	4b14      	ldr	r3, [pc, #80]	@ (8009df8 <sen5x_get_serial_number+0xa8>)
 8009da8:	0018      	movs	r0, r3
 8009daa:	f7ff fbcb 	bl	8009544 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8009dae:	253c      	movs	r5, #60	@ 0x3c
 8009db0:	197c      	adds	r4, r7, r5
 8009db2:	230c      	movs	r3, #12
 8009db4:	18fb      	adds	r3, r7, r3
 8009db6:	2220      	movs	r2, #32
 8009db8:	0019      	movs	r1, r3
 8009dba:	2069      	movs	r0, #105	@ 0x69
 8009dbc:	f001 f96c 	bl	800b098 <sensirion_i2c_read_data_inplace>
 8009dc0:	0003      	movs	r3, r0
 8009dc2:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009dc4:	197b      	adds	r3, r7, r5
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	5e9b      	ldrsh	r3, [r3, r2]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d003      	beq.n	8009dd6 <sen5x_get_serial_number+0x86>
        return error;
 8009dce:	197b      	adds	r3, r7, r5
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	5e9b      	ldrsh	r3, [r3, r2]
 8009dd4:	e009      	b.n	8009dea <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 8009dd6:	1cfb      	adds	r3, r7, #3
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	b29a      	uxth	r2, r3
 8009ddc:	6879      	ldr	r1, [r7, #4]
 8009dde:	230c      	movs	r3, #12
 8009de0:	18fb      	adds	r3, r7, r3
 8009de2:	0018      	movs	r0, r3
 8009de4:	f000 f932 	bl	800a04c <sensirion_common_copy_bytes>
    return NO_ERROR;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	0018      	movs	r0, r3
 8009dec:	46bd      	mov	sp, r7
 8009dee:	b011      	add	sp, #68	@ 0x44
 8009df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009df2:	46c0      	nop			@ (mov r8, r8)
 8009df4:	0000d033 	.word	0x0000d033
 8009df8:	0000c350 	.word	0x0000c350

08009dfc <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 8009dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dfe:	b089      	sub	sp, #36	@ 0x24
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
 8009e08:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 8009e0a:	251e      	movs	r5, #30
 8009e0c:	197b      	adds	r3, r7, r5
 8009e0e:	2200      	movs	r2, #0
 8009e10:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 8009e12:	197c      	adds	r4, r7, r5
 8009e14:	23d1      	movs	r3, #209	@ 0xd1
 8009e16:	021a      	lsls	r2, r3, #8
 8009e18:	197b      	adds	r3, r7, r5
 8009e1a:	8819      	ldrh	r1, [r3, #0]
 8009e1c:	2310      	movs	r3, #16
 8009e1e:	18fb      	adds	r3, r7, r3
 8009e20:	0018      	movs	r0, r3
 8009e22:	f001 f89d 	bl	800af60 <sensirion_i2c_add_command_to_buffer>
 8009e26:	0003      	movs	r3, r0
 8009e28:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009e2a:	261c      	movs	r6, #28
 8009e2c:	19bc      	adds	r4, r7, r6
 8009e2e:	197b      	adds	r3, r7, r5
 8009e30:	881a      	ldrh	r2, [r3, #0]
 8009e32:	2310      	movs	r3, #16
 8009e34:	18fb      	adds	r3, r7, r3
 8009e36:	0019      	movs	r1, r3
 8009e38:	2069      	movs	r0, #105	@ 0x69
 8009e3a:	f001 f915 	bl	800b068 <sensirion_i2c_write_data>
 8009e3e:	0003      	movs	r3, r0
 8009e40:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e42:	19bb      	adds	r3, r7, r6
 8009e44:	2200      	movs	r2, #0
 8009e46:	5e9b      	ldrsh	r3, [r3, r2]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d003      	beq.n	8009e54 <sen5x_get_version+0x58>
        return error;
 8009e4c:	19bb      	adds	r3, r7, r6
 8009e4e:	2200      	movs	r2, #0
 8009e50:	5e9b      	ldrsh	r3, [r3, r2]
 8009e52:	e038      	b.n	8009ec6 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009e54:	4b1e      	ldr	r3, [pc, #120]	@ (8009ed0 <sen5x_get_version+0xd4>)
 8009e56:	0018      	movs	r0, r3
 8009e58:	f7ff fb74 	bl	8009544 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 8009e5c:	251c      	movs	r5, #28
 8009e5e:	197c      	adds	r4, r7, r5
 8009e60:	2310      	movs	r3, #16
 8009e62:	18fb      	adds	r3, r7, r3
 8009e64:	2208      	movs	r2, #8
 8009e66:	0019      	movs	r1, r3
 8009e68:	2069      	movs	r0, #105	@ 0x69
 8009e6a:	f001 f915 	bl	800b098 <sensirion_i2c_read_data_inplace>
 8009e6e:	0003      	movs	r3, r0
 8009e70:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e72:	197b      	adds	r3, r7, r5
 8009e74:	2200      	movs	r2, #0
 8009e76:	5e9b      	ldrsh	r3, [r3, r2]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d003      	beq.n	8009e84 <sen5x_get_version+0x88>
        return error;
 8009e7c:	197b      	adds	r3, r7, r5
 8009e7e:	2200      	movs	r2, #0
 8009e80:	5e9b      	ldrsh	r3, [r3, r2]
 8009e82:	e020      	b.n	8009ec6 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 8009e84:	2110      	movs	r1, #16
 8009e86:	187b      	adds	r3, r7, r1
 8009e88:	781a      	ldrb	r2, [r3, #0]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 8009e8e:	187b      	adds	r3, r7, r1
 8009e90:	785a      	ldrb	r2, [r3, #1]
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 8009e96:	187b      	adds	r3, r7, r1
 8009e98:	789b      	ldrb	r3, [r3, #2]
 8009e9a:	1e5a      	subs	r2, r3, #1
 8009e9c:	4193      	sbcs	r3, r2
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 8009ea4:	187b      	adds	r3, r7, r1
 8009ea6:	78da      	ldrb	r2, [r3, #3]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 8009eac:	187b      	adds	r3, r7, r1
 8009eae:	791a      	ldrb	r2, [r3, #4]
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb2:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 8009eb4:	187b      	adds	r3, r7, r1
 8009eb6:	795a      	ldrb	r2, [r3, #5]
 8009eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eba:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 8009ebc:	187b      	adds	r3, r7, r1
 8009ebe:	799a      	ldrb	r2, [r3, #6]
 8009ec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ec2:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	0018      	movs	r0, r3
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	b009      	add	sp, #36	@ 0x24
 8009ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ece:	46c0      	nop			@ (mov r8, r8)
 8009ed0:	00004e20 	.word	0x00004e20

08009ed4 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 8009ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ed6:	b087      	sub	sp, #28
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 8009edc:	2516      	movs	r5, #22
 8009ede:	197b      	adds	r3, r7, r5
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 8009ee4:	197c      	adds	r4, r7, r5
 8009ee6:	4a22      	ldr	r2, [pc, #136]	@ (8009f70 <sen5x_read_device_status+0x9c>)
 8009ee8:	197b      	adds	r3, r7, r5
 8009eea:	8819      	ldrh	r1, [r3, #0]
 8009eec:	230c      	movs	r3, #12
 8009eee:	18fb      	adds	r3, r7, r3
 8009ef0:	0018      	movs	r0, r3
 8009ef2:	f001 f835 	bl	800af60 <sensirion_i2c_add_command_to_buffer>
 8009ef6:	0003      	movs	r3, r0
 8009ef8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009efa:	2614      	movs	r6, #20
 8009efc:	19bc      	adds	r4, r7, r6
 8009efe:	197b      	adds	r3, r7, r5
 8009f00:	881a      	ldrh	r2, [r3, #0]
 8009f02:	230c      	movs	r3, #12
 8009f04:	18fb      	adds	r3, r7, r3
 8009f06:	0019      	movs	r1, r3
 8009f08:	2069      	movs	r0, #105	@ 0x69
 8009f0a:	f001 f8ad 	bl	800b068 <sensirion_i2c_write_data>
 8009f0e:	0003      	movs	r3, r0
 8009f10:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009f12:	19bb      	adds	r3, r7, r6
 8009f14:	2200      	movs	r2, #0
 8009f16:	5e9b      	ldrsh	r3, [r3, r2]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d003      	beq.n	8009f24 <sen5x_read_device_status+0x50>
        return error;
 8009f1c:	19bb      	adds	r3, r7, r6
 8009f1e:	2200      	movs	r2, #0
 8009f20:	5e9b      	ldrsh	r3, [r3, r2]
 8009f22:	e020      	b.n	8009f66 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009f24:	4b13      	ldr	r3, [pc, #76]	@ (8009f74 <sen5x_read_device_status+0xa0>)
 8009f26:	0018      	movs	r0, r3
 8009f28:	f7ff fb0c 	bl	8009544 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 8009f2c:	2514      	movs	r5, #20
 8009f2e:	197c      	adds	r4, r7, r5
 8009f30:	230c      	movs	r3, #12
 8009f32:	18fb      	adds	r3, r7, r3
 8009f34:	2204      	movs	r2, #4
 8009f36:	0019      	movs	r1, r3
 8009f38:	2069      	movs	r0, #105	@ 0x69
 8009f3a:	f001 f8ad 	bl	800b098 <sensirion_i2c_read_data_inplace>
 8009f3e:	0003      	movs	r3, r0
 8009f40:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009f42:	197b      	adds	r3, r7, r5
 8009f44:	2200      	movs	r2, #0
 8009f46:	5e9b      	ldrsh	r3, [r3, r2]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d003      	beq.n	8009f54 <sen5x_read_device_status+0x80>
        return error;
 8009f4c:	197b      	adds	r3, r7, r5
 8009f4e:	2200      	movs	r2, #0
 8009f50:	5e9b      	ldrsh	r3, [r3, r2]
 8009f52:	e008      	b.n	8009f66 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 8009f54:	230c      	movs	r3, #12
 8009f56:	18fb      	adds	r3, r7, r3
 8009f58:	0018      	movs	r0, r3
 8009f5a:	f000 f850 	bl	8009ffe <sensirion_common_bytes_to_uint32_t>
 8009f5e:	0002      	movs	r2, r0
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	0018      	movs	r0, r3
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	b007      	add	sp, #28
 8009f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f6e:	46c0      	nop			@ (mov r8, r8)
 8009f70:	0000d206 	.word	0x0000d206
 8009f74:	00004e20 	.word	0x00004e20

08009f78 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 8009f78:	b590      	push	{r4, r7, lr}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009f7e:	1dbb      	adds	r3, r7, #6
 8009f80:	2200      	movs	r2, #0
 8009f82:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 8009f84:	1dbc      	adds	r4, r7, #6
 8009f86:	4a12      	ldr	r2, [pc, #72]	@ (8009fd0 <sen5x_device_reset+0x58>)
 8009f88:	1dbb      	adds	r3, r7, #6
 8009f8a:	8819      	ldrh	r1, [r3, #0]
 8009f8c:	003b      	movs	r3, r7
 8009f8e:	0018      	movs	r0, r3
 8009f90:	f000 ffe6 	bl	800af60 <sensirion_i2c_add_command_to_buffer>
 8009f94:	0003      	movs	r3, r0
 8009f96:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009f98:	1d3c      	adds	r4, r7, #4
 8009f9a:	1dbb      	adds	r3, r7, #6
 8009f9c:	881a      	ldrh	r2, [r3, #0]
 8009f9e:	003b      	movs	r3, r7
 8009fa0:	0019      	movs	r1, r3
 8009fa2:	2069      	movs	r0, #105	@ 0x69
 8009fa4:	f001 f860 	bl	800b068 <sensirion_i2c_write_data>
 8009fa8:	0003      	movs	r3, r0
 8009faa:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009fac:	1d3b      	adds	r3, r7, #4
 8009fae:	2200      	movs	r2, #0
 8009fb0:	5e9b      	ldrsh	r3, [r3, r2]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d003      	beq.n	8009fbe <sen5x_device_reset+0x46>
        return error;
 8009fb6:	1d3b      	adds	r3, r7, #4
 8009fb8:	2200      	movs	r2, #0
 8009fba:	5e9b      	ldrsh	r3, [r3, r2]
 8009fbc:	e004      	b.n	8009fc8 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009fbe:	4b05      	ldr	r3, [pc, #20]	@ (8009fd4 <sen5x_device_reset+0x5c>)
 8009fc0:	0018      	movs	r0, r3
 8009fc2:	f7ff fabf 	bl	8009544 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	0018      	movs	r0, r3
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	b003      	add	sp, #12
 8009fce:	bd90      	pop	{r4, r7, pc}
 8009fd0:	0000d304 	.word	0x0000d304
 8009fd4:	00030d40 	.word	0x00030d40

08009fd8 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	021b      	lsls	r3, r3, #8
 8009fe6:	b21a      	sxth	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	3301      	adds	r3, #1
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	b21b      	sxth	r3, r3
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	b21b      	sxth	r3, r3
 8009ff4:	b29b      	uxth	r3, r3
}
 8009ff6:	0018      	movs	r0, r3
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	b002      	add	sp, #8
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b082      	sub	sp, #8
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	061a      	lsls	r2, r3, #24
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3301      	adds	r3, #1
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	041b      	lsls	r3, r3, #16
 800a014:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	3302      	adds	r3, #2
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a01e:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	3203      	adds	r2, #3
 800a024:	7812      	ldrb	r2, [r2, #0]
 800a026:	4313      	orrs	r3, r2
}
 800a028:	0018      	movs	r0, r3
 800a02a:	46bd      	mov	sp, r7
 800a02c:	b002      	add	sp, #8
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	0018      	movs	r0, r3
 800a03c:	f7ff ffcc 	bl	8009fd8 <sensirion_common_bytes_to_uint16_t>
 800a040:	0003      	movs	r3, r0
 800a042:	b21b      	sxth	r3, r3
}
 800a044:	0018      	movs	r0, r3
 800a046:	46bd      	mov	sp, r7
 800a048:	b002      	add	sp, #8
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b086      	sub	sp, #24
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	1dbb      	adds	r3, r7, #6
 800a058:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800a05a:	2316      	movs	r3, #22
 800a05c:	18fb      	adds	r3, r7, r3
 800a05e:	2200      	movs	r2, #0
 800a060:	801a      	strh	r2, [r3, #0]
 800a062:	e00f      	b.n	800a084 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800a064:	2016      	movs	r0, #22
 800a066:	183b      	adds	r3, r7, r0
 800a068:	881b      	ldrh	r3, [r3, #0]
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	18d2      	adds	r2, r2, r3
 800a06e:	183b      	adds	r3, r7, r0
 800a070:	881b      	ldrh	r3, [r3, #0]
 800a072:	68b9      	ldr	r1, [r7, #8]
 800a074:	18cb      	adds	r3, r1, r3
 800a076:	7812      	ldrb	r2, [r2, #0]
 800a078:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800a07a:	183b      	adds	r3, r7, r0
 800a07c:	881a      	ldrh	r2, [r3, #0]
 800a07e:	183b      	adds	r3, r7, r0
 800a080:	3201      	adds	r2, #1
 800a082:	801a      	strh	r2, [r3, #0]
 800a084:	2316      	movs	r3, #22
 800a086:	18fa      	adds	r2, r7, r3
 800a088:	1dbb      	adds	r3, r7, #6
 800a08a:	8812      	ldrh	r2, [r2, #0]
 800a08c:	881b      	ldrh	r3, [r3, #0]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d3e8      	bcc.n	800a064 <sensirion_common_copy_bytes+0x18>
    }
}
 800a092:	46c0      	nop			@ (mov r8, r8)
 800a094:	46c0      	nop			@ (mov r8, r8)
 800a096:	46bd      	mov	sp, r7
 800a098:	b006      	add	sp, #24
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d113      	bne.n	800a0e2 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	22fe      	movs	r2, #254	@ 0xfe
 800a0be:	0592      	lsls	r2, r2, #22
 800a0c0:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	4a1a      	ldr	r2, [pc, #104]	@ (800a130 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800a0c6:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	4a1a      	ldr	r2, [pc, #104]	@ (800a134 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800a0cc:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	4a19      	ldr	r2, [pc, #100]	@ (800a138 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800a0d2:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	4a19      	ldr	r2, [pc, #100]	@ (800a13c <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800a0d8:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	4a18      	ldr	r2, [pc, #96]	@ (800a140 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800a0de:	61da      	str	r2, [r3, #28]
 800a0e0:	e011      	b.n	800a106 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	4a17      	ldr	r2, [pc, #92]	@ (800a144 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800a0e6:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	4a17      	ldr	r2, [pc, #92]	@ (800a148 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800a0ec:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	4a16      	ldr	r2, [pc, #88]	@ (800a14c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800a0f2:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	4a16      	ldr	r2, [pc, #88]	@ (800a150 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800a0f8:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	4a15      	ldr	r2, [pc, #84]	@ (800a154 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800a0fe:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	4a15      	ldr	r2, [pc, #84]	@ (800a158 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800a104:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	4a14      	ldr	r2, [pc, #80]	@ (800a15c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800a10a:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	4a14      	ldr	r2, [pc, #80]	@ (800a160 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a110:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	4a12      	ldr	r2, [pc, #72]	@ (800a160 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a116:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	4a12      	ldr	r2, [pc, #72]	@ (800a164 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800a11c:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	0018      	movs	r0, r3
 800a122:	f000 f833 	bl	800a18c <GasIndexAlgorithm_reset>
}
 800a126:	46c0      	nop			@ (mov r8, r8)
 800a128:	46bd      	mov	sp, r7
 800a12a:	b004      	add	sp, #16
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	46c0      	nop			@ (mov r8, r8)
 800a130:	00002710 	.word	0x00002710
 800a134:	44340000 	.word	0x44340000
 800a138:	46859800 	.word	0x46859800
 800a13c:	46a05000 	.word	0x46a05000
 800a140:	41f00000 	.word	0x41f00000
 800a144:	42c80000 	.word	0x42c80000
 800a148:	00004e20 	.word	0x00004e20
 800a14c:	43340000 	.word	0x43340000
 800a150:	4528c000 	.word	0x4528c000
 800a154:	45a32000 	.word	0x45a32000
 800a158:	43aa0000 	.word	0x43aa0000
 800a15c:	43660000 	.word	0x43660000
 800a160:	41400000 	.word	0x41400000
 800a164:	42480000 	.word	0x42480000

0800a168 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800a172:	4a05      	ldr	r2, [pc, #20]	@ (800a188 <GasIndexAlgorithm_init+0x20>)
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	0018      	movs	r0, r3
 800a17a:	f7ff ff8f 	bl	800a09c <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800a17e:	46c0      	nop			@ (mov r8, r8)
 800a180:	46bd      	mov	sp, r7
 800a182:	b002      	add	sp, #8
 800a184:	bd80      	pop	{r7, pc}
 800a186:	46c0      	nop			@ (mov r8, r8)
 800a188:	44610000 	.word	0x44610000

0800a18c <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	0018      	movs	r0, r3
 800a1aa:	f000 f805 	bl	800a1b8 <GasIndexAlgorithm__init_instances>
}
 800a1ae:	46c0      	nop			@ (mov r8, r8)
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	b002      	add	sp, #8
 800a1b4:	bd80      	pop	{r7, pc}
	...

0800a1b8 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800a1b8:	b590      	push	{r4, r7, lr}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	0018      	movs	r0, r3
 800a1c4:	f000 f8e8 	bl	800a398 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	0018      	movs	r0, r3
 800a1cc:	f000 f9a6 	bl	800a51c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a1d0:	1c04      	adds	r4, r0, #0
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	f000 f9ab 	bl	800a530 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a1da:	1c02      	adds	r2, r0, #0
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	1c21      	adds	r1, r4, #0
 800a1e0:	0018      	movs	r0, r3
 800a1e2:	f000 fc3b 	bl	800aa5c <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d107      	bne.n	800a1fe <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a1ee:	23fe      	movs	r3, #254	@ 0xfe
 800a1f0:	059b      	lsls	r3, r3, #22
 800a1f2:	4a0a      	ldr	r2, [pc, #40]	@ (800a21c <GasIndexAlgorithm__init_instances+0x64>)
 800a1f4:	490a      	ldr	r1, [pc, #40]	@ (800a220 <GasIndexAlgorithm__init_instances+0x68>)
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 fc86 	bl	800ab08 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800a1fc:	e005      	b.n	800a20a <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a1fe:	4b09      	ldr	r3, [pc, #36]	@ (800a224 <GasIndexAlgorithm__init_instances+0x6c>)
 800a200:	4a09      	ldr	r2, [pc, #36]	@ (800a228 <GasIndexAlgorithm__init_instances+0x70>)
 800a202:	490a      	ldr	r1, [pc, #40]	@ (800a22c <GasIndexAlgorithm__init_instances+0x74>)
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 fc7f 	bl	800ab08 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	0018      	movs	r0, r3
 800a20e:	f000 fd35 	bl	800ac7c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800a212:	46c0      	nop			@ (mov r8, r8)
 800a214:	46bd      	mov	sp, r7
 800a216:	b003      	add	sp, #12
 800a218:	bd90      	pop	{r4, r7, pc}
 800a21a:	46c0      	nop			@ (mov r8, r8)
 800a21c:	bc257a78 	.word	0xbc257a78
 800a220:	44198000 	.word	0x44198000
 800a224:	42c80000 	.word	0x42c80000
 800a228:	bbd4fdf4 	.word	0xbbd4fdf4
 800a22c:	43550000 	.word	0x43550000

0800a230 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800a230:	b590      	push	{r4, r7, lr}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a240:	4952      	ldr	r1, [pc, #328]	@ (800a38c <GasIndexAlgorithm_process+0x15c>)
 800a242:	1c18      	adds	r0, r3, #0
 800a244:	f7f6 f97e 	bl	8000544 <__aeabi_fcmple>
 800a248:	1e03      	subs	r3, r0, #0
 800a24a:	d00c      	beq.n	800a266 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	1c19      	adds	r1, r3, #0
 800a256:	1c10      	adds	r0, r2, #0
 800a258:	f7f6 fb32 	bl	80008c0 <__aeabi_fadd>
 800a25c:	1c03      	adds	r3, r0, #0
 800a25e:	1c1a      	adds	r2, r3, #0
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	631a      	str	r2, [r3, #48]	@ 0x30
 800a264:	e080      	b.n	800a368 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	dd25      	ble.n	800a2b8 <GasIndexAlgorithm_process+0x88>
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	4a48      	ldr	r2, [pc, #288]	@ (800a390 <GasIndexAlgorithm_process+0x160>)
 800a270:	4293      	cmp	r3, r2
 800a272:	dc21      	bgt.n	800a2b8 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	dc04      	bgt.n	800a288 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	3301      	adds	r3, #1
 800a284:	60bb      	str	r3, [r7, #8]
 800a286:	e00d      	b.n	800a2a4 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	4a41      	ldr	r2, [pc, #260]	@ (800a394 <GasIndexAlgorithm_process+0x164>)
 800a28e:	4694      	mov	ip, r2
 800a290:	4463      	add	r3, ip
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	429a      	cmp	r2, r3
 800a296:	dd05      	ble.n	800a2a4 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	4a3d      	ldr	r2, [pc, #244]	@ (800a394 <GasIndexAlgorithm_process+0x164>)
 800a29e:	4694      	mov	ip, r2
 800a2a0:	4463      	add	r3, ip
 800a2a2:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	0018      	movs	r0, r3
 800a2ae:	f7f7 f98f 	bl	80015d0 <__aeabi_i2f>
 800a2b2:	1c02      	adds	r2, r0, #0
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d005      	beq.n	800a2cc <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	0018      	movs	r0, r3
 800a2c4:	f000 f945 	bl	800a552 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800a2c8:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800a2ca:	d014      	beq.n	800a2f6 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	1c11      	adds	r1, r2, #0
 800a2d4:	0018      	movs	r0, r3
 800a2d6:	f000 fbd1 	bl	800aa7c <GasIndexAlgorithm__mox_model__process>
 800a2da:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	1c11      	adds	r1, r2, #0
 800a2e8:	0018      	movs	r0, r3
 800a2ea:	f000 fc25 	bl	800ab38 <GasIndexAlgorithm__sigmoid_scaled__process>
 800a2ee:	1c02      	adds	r2, r0, #0
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	639a      	str	r2, [r3, #56]	@ 0x38
 800a2f4:	e003      	b.n	800a2fe <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	689a      	ldr	r2, [r3, #8]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	1c11      	adds	r1, r2, #0
 800a306:	0018      	movs	r0, r3
 800a308:	f000 fcec 	bl	800ace4 <GasIndexAlgorithm__adaptive_lowpass__process>
 800a30c:	1c02      	adds	r2, r0, #0
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a316:	21fc      	movs	r1, #252	@ 0xfc
 800a318:	0589      	lsls	r1, r1, #22
 800a31a:	1c18      	adds	r0, r3, #0
 800a31c:	f7f6 f908 	bl	8000530 <__aeabi_fcmplt>
 800a320:	1e03      	subs	r3, r0, #0
 800a322:	d003      	beq.n	800a32c <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	22fc      	movs	r2, #252	@ 0xfc
 800a328:	0592      	lsls	r2, r2, #22
 800a32a:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a330:	2100      	movs	r1, #0
 800a332:	1c18      	adds	r0, r3, #0
 800a334:	f7f6 f910 	bl	8000558 <__aeabi_fcmpgt>
 800a338:	1e03      	subs	r3, r0, #0
 800a33a:	d015      	beq.n	800a368 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	1c11      	adds	r1, r2, #0
 800a344:	0018      	movs	r0, r3
 800a346:	f000 fa4f 	bl	800a7e8 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	0018      	movs	r0, r3
 800a34e:	f000 f8e5 	bl	800a51c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a352:	1c04      	adds	r4, r0, #0
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	0018      	movs	r0, r3
 800a358:	f000 f8ea 	bl	800a530 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a35c:	1c02      	adds	r2, r0, #0
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	1c21      	adds	r1, r4, #0
 800a362:	0018      	movs	r0, r3
 800a364:	f000 fb7a 	bl	800aa5c <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a36c:	21fc      	movs	r1, #252	@ 0xfc
 800a36e:	0589      	lsls	r1, r1, #22
 800a370:	1c18      	adds	r0, r3, #0
 800a372:	f7f6 faa5 	bl	80008c0 <__aeabi_fadd>
 800a376:	1c03      	adds	r3, r0, #0
 800a378:	1c18      	adds	r0, r3, #0
 800a37a:	f7f7 f909 	bl	8001590 <__aeabi_f2iz>
 800a37e:	0002      	movs	r2, r0
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	601a      	str	r2, [r3, #0]
    return;
 800a384:	46c0      	nop			@ (mov r8, r8)
}
 800a386:	46bd      	mov	sp, r7
 800a388:	b005      	add	sp, #20
 800a38a:	bd90      	pop	{r4, r7, pc}
 800a38c:	42340000 	.word	0x42340000
 800a390:	0000fde7 	.word	0x0000fde7
 800a394:	00007fff 	.word	0x00007fff

0800a398 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a398:	b5b0      	push	{r4, r5, r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	223c      	movs	r2, #60	@ 0x3c
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	4952      	ldr	r1, [pc, #328]	@ (800a50c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a3c2:	1c18      	adds	r0, r3, #0
 800a3c4:	f7f6 fc06 	bl	8000bd4 <__aeabi_fdiv>
 800a3c8:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a3ca:	2188      	movs	r1, #136	@ 0x88
 800a3cc:	05c9      	lsls	r1, r1, #23
 800a3ce:	1c18      	adds	r0, r3, #0
 800a3d0:	f7f6 fde6 	bl	8000fa0 <__aeabi_fmul>
 800a3d4:	1c03      	adds	r3, r0, #0
 800a3d6:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	494a      	ldr	r1, [pc, #296]	@ (800a50c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a3e2:	1c18      	adds	r0, r3, #0
 800a3e4:	f7f6 fbf6 	bl	8000bd4 <__aeabi_fdiv>
 800a3e8:	1c03      	adds	r3, r0, #0
 800a3ea:	1c19      	adds	r1, r3, #0
 800a3ec:	1c20      	adds	r0, r4, #0
 800a3ee:	f7f6 fa67 	bl	80008c0 <__aeabi_fadd>
 800a3f2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a3f4:	1c19      	adds	r1, r3, #0
 800a3f6:	1c28      	adds	r0, r5, #0
 800a3f8:	f7f6 fbec 	bl	8000bd4 <__aeabi_fdiv>
 800a3fc:	1c03      	adds	r3, r0, #0
 800a3fe:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	4940      	ldr	r1, [pc, #256]	@ (800a50c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a40a:	1c18      	adds	r0, r3, #0
 800a40c:	f7f6 fbe2 	bl	8000bd4 <__aeabi_fdiv>
 800a410:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a412:	2185      	movs	r1, #133	@ 0x85
 800a414:	05c9      	lsls	r1, r1, #23
 800a416:	1c18      	adds	r0, r3, #0
 800a418:	f7f6 fdc2 	bl	8000fa0 <__aeabi_fmul>
 800a41c:	1c03      	adds	r3, r0, #0
 800a41e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	4938      	ldr	r1, [pc, #224]	@ (800a50c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a42a:	1c18      	adds	r0, r3, #0
 800a42c:	f7f6 fbd2 	bl	8000bd4 <__aeabi_fdiv>
 800a430:	1c03      	adds	r3, r0, #0
 800a432:	1c19      	adds	r1, r3, #0
 800a434:	1c20      	adds	r0, r4, #0
 800a436:	f7f6 fa43 	bl	80008c0 <__aeabi_fadd>
 800a43a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a43c:	1c19      	adds	r1, r3, #0
 800a43e:	1c28      	adds	r0, r5, #0
 800a440:	f7f6 fbc8 	bl	8000bd4 <__aeabi_fdiv>
 800a444:	1c03      	adds	r3, r0, #0
 800a446:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d118      	bne.n	800a486 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a458:	2188      	movs	r1, #136	@ 0x88
 800a45a:	05c9      	lsls	r1, r1, #23
 800a45c:	1c18      	adds	r0, r3, #0
 800a45e:	f7f6 fd9f 	bl	8000fa0 <__aeabi_fmul>
 800a462:	1c03      	adds	r3, r0, #0
 800a464:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800a46a:	4929      	ldr	r1, [pc, #164]	@ (800a510 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800a46c:	1c18      	adds	r0, r3, #0
 800a46e:	f7f6 fa27 	bl	80008c0 <__aeabi_fadd>
 800a472:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a474:	1c19      	adds	r1, r3, #0
 800a476:	1c20      	adds	r0, r4, #0
 800a478:	f7f6 fbac 	bl	8000bd4 <__aeabi_fdiv>
 800a47c:	1c03      	adds	r3, r0, #0
 800a47e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	655a      	str	r2, [r3, #84]	@ 0x54
 800a484:	e017      	b.n	800a4b6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a48a:	2188      	movs	r1, #136	@ 0x88
 800a48c:	05c9      	lsls	r1, r1, #23
 800a48e:	1c18      	adds	r0, r3, #0
 800a490:	f7f6 fd86 	bl	8000fa0 <__aeabi_fmul>
 800a494:	1c03      	adds	r3, r0, #0
 800a496:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800a49c:	491d      	ldr	r1, [pc, #116]	@ (800a514 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800a49e:	1c18      	adds	r0, r3, #0
 800a4a0:	f7f6 fa0e 	bl	80008c0 <__aeabi_fadd>
 800a4a4:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a4a6:	1c19      	adds	r1, r3, #0
 800a4a8:	1c20      	adds	r0, r4, #0
 800a4aa:	f7f6 fb93 	bl	8000bd4 <__aeabi_fdiv>
 800a4ae:	1c03      	adds	r3, r0, #0
 800a4b0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a4ba:	2185      	movs	r1, #133	@ 0x85
 800a4bc:	05c9      	lsls	r1, r1, #23
 800a4be:	1c18      	adds	r0, r3, #0
 800a4c0:	f7f6 fd6e 	bl	8000fa0 <__aeabi_fmul>
 800a4c4:	1c03      	adds	r3, r0, #0
 800a4c6:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	4912      	ldr	r1, [pc, #72]	@ (800a518 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800a4ce:	1c18      	adds	r0, r3, #0
 800a4d0:	f7f6 f9f6 	bl	80008c0 <__aeabi_fadd>
 800a4d4:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800a4d6:	1c19      	adds	r1, r3, #0
 800a4d8:	1c20      	adds	r0, r4, #0
 800a4da:	f7f6 fb7b 	bl	8000bd4 <__aeabi_fdiv>
 800a4de:	1c03      	adds	r3, r0, #0
 800a4e0:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800a504:	46c0      	nop			@ (mov r8, r8)
 800a506:	46bd      	mov	sp, r7
 800a508:	b002      	add	sp, #8
 800a50a:	bdb0      	pop	{r4, r5, r7, pc}
 800a50c:	45610000 	.word	0x45610000
 800a510:	44960000 	.word	0x44960000
 800a514:	41a00000 	.word	0x41a00000
 800a518:	451c4000 	.word	0x451c4000

0800a51c <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800a528:	1c18      	adds	r0, r3, #0
 800a52a:	46bd      	mov	sp, r7
 800a52c:	b002      	add	sp, #8
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800a540:	1c19      	adds	r1, r3, #0
 800a542:	1c10      	adds	r0, r2, #0
 800a544:	f7f6 f9bc 	bl	80008c0 <__aeabi_fadd>
 800a548:	1c03      	adds	r3, r0, #0
}
 800a54a:	1c18      	adds	r0, r3, #0
 800a54c:	46bd      	mov	sp, r7
 800a54e:	b002      	add	sp, #8
 800a550:	bd80      	pop	{r7, pc}

0800a552 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	223c      	movs	r2, #60	@ 0x3c
 800a55e:	5c9b      	ldrb	r3, [r3, r2]
}
 800a560:	0018      	movs	r0, r3
 800a562:	46bd      	mov	sp, r7
 800a564:	b002      	add	sp, #8
 800a566:	bd80      	pop	{r7, pc}

0800a568 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800a568:	b5b0      	push	{r4, r5, r7, lr}
 800a56a:	b08c      	sub	sp, #48	@ 0x30
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800a574:	1c19      	adds	r1, r3, #0
 800a576:	4895      	ldr	r0, [pc, #596]	@ (800a7cc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800a578:	f7f6 fe50 	bl	800121c <__aeabi_fsub>
 800a57c:	1c03      	adds	r3, r0, #0
 800a57e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a584:	1c19      	adds	r1, r3, #0
 800a586:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a588:	f7f5 ffe6 	bl	8000558 <__aeabi_fcmpgt>
 800a58c:	1e03      	subs	r3, r0, #0
 800a58e:	d00b      	beq.n	800a5a8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a598:	1c19      	adds	r1, r3, #0
 800a59a:	1c10      	adds	r0, r2, #0
 800a59c:	f7f6 f990 	bl	80008c0 <__aeabi_fadd>
 800a5a0:	1c03      	adds	r3, r0, #0
 800a5a2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5ac:	1c19      	adds	r1, r3, #0
 800a5ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a5b0:	f7f5 ffd2 	bl	8000558 <__aeabi_fcmpgt>
 800a5b4:	1e03      	subs	r3, r0, #0
 800a5b6:	d00b      	beq.n	800a5d0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a5c0:	1c19      	adds	r1, r3, #0
 800a5c2:	1c10      	adds	r0, r2, #0
 800a5c4:	f7f6 f97c 	bl	80008c0 <__aeabi_fadd>
 800a5c8:	1c03      	adds	r3, r0, #0
 800a5ca:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6959      	ldr	r1, [r3, #20]
 800a5d4:	4a7e      	ldr	r2, [pc, #504]	@ (800a7d0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	0018      	movs	r0, r3
 800a5da:	f000 f9f1 	bl	800a9c0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	1c11      	adds	r1, r2, #0
 800a5e6:	0018      	movs	r0, r3
 800a5e8:	f000 f9fa 	bl	800a9e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a5ec:	1c03      	adds	r3, r0, #0
 800a5ee:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800a5fc:	1c19      	adds	r1, r3, #0
 800a5fe:	1c10      	adds	r0, r2, #0
 800a600:	f7f6 fe0c 	bl	800121c <__aeabi_fsub>
 800a604:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800a606:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a608:	1c18      	adds	r0, r3, #0
 800a60a:	f7f6 fcc9 	bl	8000fa0 <__aeabi_fmul>
 800a60e:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800a610:	1c19      	adds	r1, r3, #0
 800a612:	1c20      	adds	r0, r4, #0
 800a614:	f7f6 f954 	bl	80008c0 <__aeabi_fadd>
 800a618:	1c03      	adds	r3, r0, #0
 800a61a:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800a624:	1c19      	adds	r1, r3, #0
 800a626:	486b      	ldr	r0, [pc, #428]	@ (800a7d4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800a628:	f7f6 fdf8 	bl	800121c <__aeabi_fsub>
 800a62c:	1c03      	adds	r3, r0, #0
 800a62e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	1c11      	adds	r1, r2, #0
 800a638:	0018      	movs	r0, r3
 800a63a:	f000 f9d1 	bl	800a9e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a63e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800a640:	1c19      	adds	r1, r3, #0
 800a642:	1c28      	adds	r0, r5, #0
 800a644:	f7f6 fcac 	bl	8000fa0 <__aeabi_fmul>
 800a648:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800a64a:	1c19      	adds	r1, r3, #0
 800a64c:	1c20      	adds	r0, r4, #0
 800a64e:	f7f6 f937 	bl	80008c0 <__aeabi_fadd>
 800a652:	1c03      	adds	r3, r0, #0
 800a654:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a656:	4a60      	ldr	r2, [pc, #384]	@ (800a7d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800a658:	6a39      	ldr	r1, [r7, #32]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	0018      	movs	r0, r3
 800a65e:	f000 f9af 	bl	800a9c0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	1c11      	adds	r1, r2, #0
 800a66a:	0018      	movs	r0, r3
 800a66c:	f000 f9b8 	bl	800a9e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a670:	1c03      	adds	r3, r0, #0
 800a672:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800a674:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a676:	69f8      	ldr	r0, [r7, #28]
 800a678:	f7f6 fc92 	bl	8000fa0 <__aeabi_fmul>
 800a67c:	1c03      	adds	r3, r0, #0
 800a67e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6999      	ldr	r1, [r3, #24]
 800a688:	4a51      	ldr	r2, [pc, #324]	@ (800a7d0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	0018      	movs	r0, r3
 800a68e:	f000 f997 	bl	800a9c0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	1c11      	adds	r1, r2, #0
 800a69a:	0018      	movs	r0, r3
 800a69c:	f000 f9a0 	bl	800a9e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a6a0:	1c03      	adds	r3, r0, #0
 800a6a2:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800a6b0:	1c19      	adds	r1, r3, #0
 800a6b2:	1c10      	adds	r0, r2, #0
 800a6b4:	f7f6 fdb2 	bl	800121c <__aeabi_fsub>
 800a6b8:	1c03      	adds	r3, r0, #0
 800a6ba:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800a6bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6be:	69b8      	ldr	r0, [r7, #24]
 800a6c0:	f7f6 fdac 	bl	800121c <__aeabi_fsub>
 800a6c4:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800a6c6:	1c19      	adds	r1, r3, #0
 800a6c8:	1c28      	adds	r0, r5, #0
 800a6ca:	f7f6 fc69 	bl	8000fa0 <__aeabi_fmul>
 800a6ce:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800a6d0:	1c19      	adds	r1, r3, #0
 800a6d2:	1c20      	adds	r0, r4, #0
 800a6d4:	f7f6 f8f4 	bl	80008c0 <__aeabi_fadd>
 800a6d8:	1c03      	adds	r3, r0, #0
 800a6da:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800a6e4:	1c19      	adds	r1, r3, #0
 800a6e6:	483b      	ldr	r0, [pc, #236]	@ (800a7d4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800a6e8:	f7f6 fd98 	bl	800121c <__aeabi_fsub>
 800a6ec:	1c03      	adds	r3, r0, #0
 800a6ee:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	1c11      	adds	r1, r2, #0
 800a6f8:	0018      	movs	r0, r3
 800a6fa:	f000 f971 	bl	800a9e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a6fe:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800a700:	1c19      	adds	r1, r3, #0
 800a702:	1c28      	adds	r0, r5, #0
 800a704:	f7f6 fc4c 	bl	8000fa0 <__aeabi_fmul>
 800a708:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800a70a:	1c19      	adds	r1, r3, #0
 800a70c:	1c20      	adds	r0, r4, #0
 800a70e:	f7f6 f8d7 	bl	80008c0 <__aeabi_fadd>
 800a712:	1c03      	adds	r3, r0, #0
 800a714:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a716:	4a30      	ldr	r2, [pc, #192]	@ (800a7d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800a718:	6939      	ldr	r1, [r7, #16]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	0018      	movs	r0, r3
 800a71e:	f000 f94f 	bl	800a9c0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	1c11      	adds	r1, r2, #0
 800a72a:	0018      	movs	r0, r3
 800a72c:	f000 f958 	bl	800a9e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a730:	1c03      	adds	r3, r0, #0
 800a732:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800a734:	6979      	ldr	r1, [r7, #20]
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f7f6 fc32 	bl	8000fa0 <__aeabi_fmul>
 800a73c:	1c03      	adds	r3, r0, #0
 800a73e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	4923      	ldr	r1, [pc, #140]	@ (800a7dc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800a74e:	1c18      	adds	r0, r3, #0
 800a750:	f7f6 fa40 	bl	8000bd4 <__aeabi_fdiv>
 800a754:	1c03      	adds	r3, r0, #0
 800a756:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800a758:	69f9      	ldr	r1, [r7, #28]
 800a75a:	20fe      	movs	r0, #254	@ 0xfe
 800a75c:	0580      	lsls	r0, r0, #22
 800a75e:	f7f6 fd5d 	bl	800121c <__aeabi_fsub>
 800a762:	1c03      	adds	r3, r0, #0
 800a764:	491e      	ldr	r1, [pc, #120]	@ (800a7e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800a766:	1c18      	adds	r0, r3, #0
 800a768:	f7f6 fc1a 	bl	8000fa0 <__aeabi_fmul>
 800a76c:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800a76e:	491d      	ldr	r1, [pc, #116]	@ (800a7e4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800a770:	1c18      	adds	r0, r3, #0
 800a772:	f7f6 fd53 	bl	800121c <__aeabi_fsub>
 800a776:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800a778:	1c19      	adds	r1, r3, #0
 800a77a:	1c28      	adds	r0, r5, #0
 800a77c:	f7f6 fc10 	bl	8000fa0 <__aeabi_fmul>
 800a780:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a782:	1c19      	adds	r1, r3, #0
 800a784:	1c20      	adds	r0, r4, #0
 800a786:	f7f6 f89b 	bl	80008c0 <__aeabi_fadd>
 800a78a:	1c03      	adds	r3, r0, #0
 800a78c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a796:	2100      	movs	r1, #0
 800a798:	1c18      	adds	r0, r3, #0
 800a79a:	f7f5 fec9 	bl	8000530 <__aeabi_fcmplt>
 800a79e:	1e03      	subs	r3, r0, #0
 800a7a0:	d002      	beq.n	800a7a8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a7b0:	1c19      	adds	r1, r3, #0
 800a7b2:	1c10      	adds	r0, r2, #0
 800a7b4:	f7f5 fed0 	bl	8000558 <__aeabi_fcmpgt>
 800a7b8:	1e03      	subs	r3, r0, #0
 800a7ba:	d100      	bne.n	800a7be <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800a7bc:	e002      	b.n	800a7c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a7c4:	46c0      	nop			@ (mov r8, r8)
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	b00c      	add	sp, #48	@ 0x30
 800a7ca:	bdb0      	pop	{r4, r5, r7, pc}
 800a7cc:	46fffe00 	.word	0x46fffe00
 800a7d0:	3c23d70a 	.word	0x3c23d70a
 800a7d4:	43ff0000 	.word	0x43ff0000
 800a7d8:	3db851ec 	.word	0x3db851ec
 800a7dc:	42700000 	.word	0x42700000
 800a7e0:	3fa66666 	.word	0x3fa66666
 800a7e4:	3e99999a 	.word	0x3e99999a

0800a7e8 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800a7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ea:	b087      	sub	sp, #28
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	223c      	movs	r2, #60	@ 0x3c
 800a7f6:	5c9b      	ldrb	r3, [r3, r2]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	4053      	eors	r3, r2
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00a      	beq.n	800a818 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	223c      	movs	r2, #60	@ 0x3c
 800a806:	2101      	movs	r1, #1
 800a808:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	683a      	ldr	r2, [r7, #0]
 800a80e:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800a816:	e0c8      	b.n	800a9aa <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a81c:	4965      	ldr	r1, [pc, #404]	@ (800a9b4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800a81e:	1c18      	adds	r0, r3, #0
 800a820:	f7f5 fea4 	bl	800056c <__aeabi_fcmpge>
 800a824:	1e03      	subs	r3, r0, #0
 800a826:	d107      	bne.n	800a838 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a82c:	4962      	ldr	r1, [pc, #392]	@ (800a9b8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800a82e:	1c18      	adds	r0, r3, #0
 800a830:	f7f5 fe88 	bl	8000544 <__aeabi_fcmple>
 800a834:	1e03      	subs	r3, r0, #0
 800a836:	d00e      	beq.n	800a856 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a840:	1c19      	adds	r1, r3, #0
 800a842:	1c10      	adds	r0, r2, #0
 800a844:	f7f6 f83c 	bl	80008c0 <__aeabi_fadd>
 800a848:	1c03      	adds	r3, r0, #0
 800a84a:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a85a:	1c19      	adds	r1, r3, #0
 800a85c:	6838      	ldr	r0, [r7, #0]
 800a85e:	f7f6 fcdd 	bl	800121c <__aeabi_fsub>
 800a862:	1c03      	adds	r3, r0, #0
 800a864:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	0018      	movs	r0, r3
 800a86a:	f7ff fe7d 	bl	800a568 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a872:	1c19      	adds	r1, r3, #0
 800a874:	6838      	ldr	r0, [r7, #0]
 800a876:	f7f6 fcd1 	bl	800121c <__aeabi_fsub>
 800a87a:	1c03      	adds	r3, r0, #0
 800a87c:	2185      	movs	r1, #133	@ 0x85
 800a87e:	05c9      	lsls	r1, r1, #23
 800a880:	1c18      	adds	r0, r3, #0
 800a882:	f7f6 f9a7 	bl	8000bd4 <__aeabi_fdiv>
 800a886:	1c03      	adds	r3, r0, #0
 800a888:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800a88a:	2100      	movs	r1, #0
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f7f5 fe4f 	bl	8000530 <__aeabi_fcmplt>
 800a892:	1e03      	subs	r3, r0, #0
 800a894:	d008      	beq.n	800a8a8 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a89a:	68f9      	ldr	r1, [r7, #12]
 800a89c:	1c18      	adds	r0, r3, #0
 800a89e:	f7f6 fcbd 	bl	800121c <__aeabi_fsub>
 800a8a2:	1c03      	adds	r3, r0, #0
 800a8a4:	617b      	str	r3, [r7, #20]
 800a8a6:	e007      	b.n	800a8b8 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a8ac:	1c19      	adds	r1, r3, #0
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f7f6 f806 	bl	80008c0 <__aeabi_fadd>
 800a8b4:	1c03      	adds	r3, r0, #0
 800a8b6:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800a8b8:	23fe      	movs	r3, #254	@ 0xfe
 800a8ba:	059b      	lsls	r3, r3, #22
 800a8bc:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800a8be:	493f      	ldr	r1, [pc, #252]	@ (800a9bc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a8c0:	6978      	ldr	r0, [r7, #20]
 800a8c2:	f7f5 fe49 	bl	8000558 <__aeabi_fcmpgt>
 800a8c6:	1e03      	subs	r3, r0, #0
 800a8c8:	d010      	beq.n	800a8ec <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800a8ca:	493c      	ldr	r1, [pc, #240]	@ (800a9bc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a8cc:	6978      	ldr	r0, [r7, #20]
 800a8ce:	f7f6 f981 	bl	8000bd4 <__aeabi_fdiv>
 800a8d2:	1c03      	adds	r3, r0, #0
 800a8d4:	1c1c      	adds	r4, r3, #0
 800a8d6:	4939      	ldr	r1, [pc, #228]	@ (800a9bc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a8d8:	6978      	ldr	r0, [r7, #20]
 800a8da:	f7f6 f97b 	bl	8000bd4 <__aeabi_fdiv>
 800a8de:	1c03      	adds	r3, r0, #0
 800a8e0:	1c19      	adds	r1, r3, #0
 800a8e2:	1c20      	adds	r0, r4, #0
 800a8e4:	f7f6 fb5c 	bl	8000fa0 <__aeabi_fmul>
 800a8e8:	1c03      	adds	r3, r0, #0
 800a8ea:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800a8f0:	1c19      	adds	r1, r3, #0
 800a8f2:	2085      	movs	r0, #133	@ 0x85
 800a8f4:	05c0      	lsls	r0, r0, #23
 800a8f6:	f7f6 fc91 	bl	800121c <__aeabi_fsub>
 800a8fa:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800a8fc:	6939      	ldr	r1, [r7, #16]
 800a8fe:	1c18      	adds	r0, r3, #0
 800a900:	f7f6 fb4e 	bl	8000fa0 <__aeabi_fmul>
 800a904:	1c03      	adds	r3, r0, #0
 800a906:	1c18      	adds	r0, r3, #0
 800a908:	f017 fee4 	bl	80226d4 <sqrtf>
 800a90c:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a916:	2185      	movs	r1, #133	@ 0x85
 800a918:	05c9      	lsls	r1, r1, #23
 800a91a:	6938      	ldr	r0, [r7, #16]
 800a91c:	f7f6 fb40 	bl	8000fa0 <__aeabi_fmul>
 800a920:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800a922:	1c19      	adds	r1, r3, #0
 800a924:	1c28      	adds	r0, r5, #0
 800a926:	f7f6 f955 	bl	8000bd4 <__aeabi_fdiv>
 800a92a:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a92c:	1c19      	adds	r1, r3, #0
 800a92e:	1c20      	adds	r0, r4, #0
 800a930:	f7f6 fb36 	bl	8000fa0 <__aeabi_fmul>
 800a934:	1c03      	adds	r3, r0, #0
 800a936:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a93c:	68f9      	ldr	r1, [r7, #12]
 800a93e:	1c18      	adds	r0, r3, #0
 800a940:	f7f6 fb2e 	bl	8000fa0 <__aeabi_fmul>
 800a944:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800a946:	6939      	ldr	r1, [r7, #16]
 800a948:	1c18      	adds	r0, r3, #0
 800a94a:	f7f6 f943 	bl	8000bd4 <__aeabi_fdiv>
 800a94e:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800a950:	68f9      	ldr	r1, [r7, #12]
 800a952:	1c18      	adds	r0, r3, #0
 800a954:	f7f6 fb24 	bl	8000fa0 <__aeabi_fmul>
 800a958:	1c03      	adds	r3, r0, #0
             sqrtf(
 800a95a:	1c19      	adds	r1, r3, #0
 800a95c:	1c20      	adds	r0, r4, #0
 800a95e:	f7f5 ffaf 	bl	80008c0 <__aeabi_fadd>
 800a962:	1c03      	adds	r3, r0, #0
 800a964:	1c18      	adds	r0, r3, #0
 800a966:	f017 feb5 	bl	80226d4 <sqrtf>
 800a96a:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a96c:	1c19      	adds	r1, r3, #0
 800a96e:	1c30      	adds	r0, r6, #0
 800a970:	f7f6 fb16 	bl	8000fa0 <__aeabi_fmul>
 800a974:	1c03      	adds	r3, r0, #0
 800a976:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a984:	68f9      	ldr	r1, [r7, #12]
 800a986:	1c18      	adds	r0, r3, #0
 800a988:	f7f6 fb0a 	bl	8000fa0 <__aeabi_fmul>
 800a98c:	1c03      	adds	r3, r0, #0
 800a98e:	2182      	movs	r1, #130	@ 0x82
 800a990:	05c9      	lsls	r1, r1, #23
 800a992:	1c18      	adds	r0, r3, #0
 800a994:	f7f6 f91e 	bl	8000bd4 <__aeabi_fdiv>
 800a998:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800a99a:	1c19      	adds	r1, r3, #0
 800a99c:	1c20      	adds	r0, r4, #0
 800a99e:	f7f5 ff8f 	bl	80008c0 <__aeabi_fadd>
 800a9a2:	1c03      	adds	r3, r0, #0
 800a9a4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800a9aa:	46c0      	nop			@ (mov r8, r8)
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	b007      	add	sp, #28
 800a9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9b2:	46c0      	nop			@ (mov r8, r8)
 800a9b4:	42c80000 	.word	0x42c80000
 800a9b8:	c2c80000 	.word	0xc2c80000
 800a9bc:	44b40000 	.word	0x44b40000

0800a9c0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	68ba      	ldr	r2, [r7, #8]
 800a9d6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a9d8:	46c0      	nop			@ (mov r8, r8)
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	b004      	add	sp, #16
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800a9e0:	b590      	push	{r4, r7, lr}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9f2:	1c19      	adds	r1, r3, #0
 800a9f4:	6838      	ldr	r0, [r7, #0]
 800a9f6:	f7f6 fc11 	bl	800121c <__aeabi_fsub>
 800a9fa:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a9fc:	1c19      	adds	r1, r3, #0
 800a9fe:	1c20      	adds	r0, r4, #0
 800aa00:	f7f6 face 	bl	8000fa0 <__aeabi_fmul>
 800aa04:	1c03      	adds	r3, r0, #0
 800aa06:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800aa08:	4912      	ldr	r1, [pc, #72]	@ (800aa54 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f7f5 fd90 	bl	8000530 <__aeabi_fcmplt>
 800aa10:	1e03      	subs	r3, r0, #0
 800aa12:	d002      	beq.n	800aa1a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800aa14:	23fe      	movs	r3, #254	@ 0xfe
 800aa16:	059b      	lsls	r3, r3, #22
 800aa18:	e018      	b.n	800aa4c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800aa1a:	490f      	ldr	r1, [pc, #60]	@ (800aa58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f7f5 fd9b 	bl	8000558 <__aeabi_fcmpgt>
 800aa22:	1e03      	subs	r3, r0, #0
 800aa24:	d001      	beq.n	800aa2a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800aa26:	2300      	movs	r3, #0
 800aa28:	e010      	b.n	800aa4c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	1c18      	adds	r0, r3, #0
 800aa2e:	f017 fe29 	bl	8022684 <expf>
 800aa32:	1c03      	adds	r3, r0, #0
 800aa34:	21fe      	movs	r1, #254	@ 0xfe
 800aa36:	0589      	lsls	r1, r1, #22
 800aa38:	1c18      	adds	r0, r3, #0
 800aa3a:	f7f5 ff41 	bl	80008c0 <__aeabi_fadd>
 800aa3e:	1c03      	adds	r3, r0, #0
 800aa40:	1c19      	adds	r1, r3, #0
 800aa42:	20fe      	movs	r0, #254	@ 0xfe
 800aa44:	0580      	lsls	r0, r0, #22
 800aa46:	f7f6 f8c5 	bl	8000bd4 <__aeabi_fdiv>
 800aa4a:	1c03      	adds	r3, r0, #0
    }
}
 800aa4c:	1c18      	adds	r0, r3, #0
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	b005      	add	sp, #20
 800aa52:	bd90      	pop	{r4, r7, pc}
 800aa54:	c2480000 	.word	0xc2480000
 800aa58:	42480000 	.word	0x42480000

0800aa5c <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	68ba      	ldr	r2, [r7, #8]
 800aa6c:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800aa74:	46c0      	nop			@ (mov r8, r8)
 800aa76:	46bd      	mov	sp, r7
 800aa78:	b004      	add	sp, #16
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800aa7c:	b590      	push	{r4, r7, lr}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d114      	bne.n	800aab8 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa92:	1c19      	adds	r1, r3, #0
 800aa94:	6838      	ldr	r0, [r7, #0]
 800aa96:	f7f6 fbc1 	bl	800121c <__aeabi_fsub>
 800aa9a:	1c03      	adds	r3, r0, #0
 800aa9c:	4918      	ldr	r1, [pc, #96]	@ (800ab00 <GasIndexAlgorithm__mox_model__process+0x84>)
 800aa9e:	1c18      	adds	r0, r3, #0
 800aaa0:	f7f6 f898 	bl	8000bd4 <__aeabi_fdiv>
 800aaa4:	1c03      	adds	r3, r0, #0
 800aaa6:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800aaac:	1c19      	adds	r1, r3, #0
 800aaae:	1c10      	adds	r0, r2, #0
 800aab0:	f7f6 fa76 	bl	8000fa0 <__aeabi_fmul>
 800aab4:	1c03      	adds	r3, r0, #0
 800aab6:	e01f      	b.n	800aaf8 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aabc:	1c19      	adds	r1, r3, #0
 800aabe:	6838      	ldr	r0, [r7, #0]
 800aac0:	f7f6 fbac 	bl	800121c <__aeabi_fsub>
 800aac4:	1c03      	adds	r3, r0, #0
 800aac6:	1c1a      	adds	r2, r3, #0
 800aac8:	2380      	movs	r3, #128	@ 0x80
 800aaca:	061b      	lsls	r3, r3, #24
 800aacc:	4053      	eors	r3, r2
 800aace:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aad4:	490b      	ldr	r1, [pc, #44]	@ (800ab04 <GasIndexAlgorithm__mox_model__process+0x88>)
 800aad6:	1c18      	adds	r0, r3, #0
 800aad8:	f7f5 fef2 	bl	80008c0 <__aeabi_fadd>
 800aadc:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800aade:	1c19      	adds	r1, r3, #0
 800aae0:	1c20      	adds	r0, r4, #0
 800aae2:	f7f6 f877 	bl	8000bd4 <__aeabi_fdiv>
 800aae6:	1c03      	adds	r3, r0, #0
 800aae8:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800aaee:	1c19      	adds	r1, r3, #0
 800aaf0:	1c10      	adds	r0, r2, #0
 800aaf2:	f7f6 fa55 	bl	8000fa0 <__aeabi_fmul>
 800aaf6:	1c03      	adds	r3, r0, #0
    }
}
 800aaf8:	1c18      	adds	r0, r3, #0
 800aafa:	46bd      	mov	sp, r7
 800aafc:	b003      	add	sp, #12
 800aafe:	bd90      	pop	{r4, r7, pc}
 800ab00:	44fa0000 	.word	0x44fa0000
 800ab04:	435c0000 	.word	0x435c0000

0800ab08 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
 800ab14:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2180      	movs	r1, #128	@ 0x80
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2184      	movs	r1, #132	@ 0x84
 800ab22:	68ba      	ldr	r2, [r7, #8]
 800ab24:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2188      	movs	r1, #136	@ 0x88
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	505a      	str	r2, [r3, r1]
}
 800ab2e:	46c0      	nop			@ (mov r8, r8)
 800ab30:	46bd      	mov	sp, r7
 800ab32:	b004      	add	sp, #16
 800ab34:	bd80      	pop	{r7, pc}
	...

0800ab38 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800ab38:	b590      	push	{r4, r7, lr}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2280      	movs	r2, #128	@ 0x80
 800ab46:	589c      	ldr	r4, [r3, r2]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2284      	movs	r2, #132	@ 0x84
 800ab4c:	589b      	ldr	r3, [r3, r2]
 800ab4e:	1c19      	adds	r1, r3, #0
 800ab50:	6838      	ldr	r0, [r7, #0]
 800ab52:	f7f6 fb63 	bl	800121c <__aeabi_fsub>
 800ab56:	1c03      	adds	r3, r0, #0
 800ab58:	1c19      	adds	r1, r3, #0
 800ab5a:	1c20      	adds	r0, r4, #0
 800ab5c:	f7f6 fa20 	bl	8000fa0 <__aeabi_fmul>
 800ab60:	1c03      	adds	r3, r0, #0
 800ab62:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800ab64:	4940      	ldr	r1, [pc, #256]	@ (800ac68 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800ab66:	68b8      	ldr	r0, [r7, #8]
 800ab68:	f7f5 fce2 	bl	8000530 <__aeabi_fcmplt>
 800ab6c:	1e03      	subs	r3, r0, #0
 800ab6e:	d001      	beq.n	800ab74 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800ab70:	4b3e      	ldr	r3, [pc, #248]	@ (800ac6c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800ab72:	e075      	b.n	800ac60 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800ab74:	493e      	ldr	r1, [pc, #248]	@ (800ac70 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800ab76:	68b8      	ldr	r0, [r7, #8]
 800ab78:	f7f5 fcee 	bl	8000558 <__aeabi_fcmpgt>
 800ab7c:	1e03      	subs	r3, r0, #0
 800ab7e:	d001      	beq.n	800ab84 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800ab80:	2300      	movs	r3, #0
 800ab82:	e06d      	b.n	800ac60 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800ab84:	2100      	movs	r1, #0
 800ab86:	6838      	ldr	r0, [r7, #0]
 800ab88:	f7f5 fcf0 	bl	800056c <__aeabi_fcmpge>
 800ab8c:	1e03      	subs	r3, r0, #0
 800ab8e:	d047      	beq.n	800ac20 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2288      	movs	r2, #136	@ 0x88
 800ab94:	589b      	ldr	r3, [r3, r2]
 800ab96:	21fe      	movs	r1, #254	@ 0xfe
 800ab98:	0589      	lsls	r1, r1, #22
 800ab9a:	1c18      	adds	r0, r3, #0
 800ab9c:	f7f5 fcc2 	bl	8000524 <__aeabi_fcmpeq>
 800aba0:	1e03      	subs	r3, r0, #0
 800aba2:	d00e      	beq.n	800abc2 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	1c19      	adds	r1, r3, #0
 800abaa:	20fe      	movs	r0, #254	@ 0xfe
 800abac:	0580      	lsls	r0, r0, #22
 800abae:	f7f6 fb35 	bl	800121c <__aeabi_fsub>
 800abb2:	1c03      	adds	r3, r0, #0
 800abb4:	492f      	ldr	r1, [pc, #188]	@ (800ac74 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800abb6:	1c18      	adds	r0, r3, #0
 800abb8:	f7f6 f9f2 	bl	8000fa0 <__aeabi_fmul>
 800abbc:	1c03      	adds	r3, r0, #0
 800abbe:	60fb      	str	r3, [r7, #12]
 800abc0:	e012      	b.n	800abe8 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	492c      	ldr	r1, [pc, #176]	@ (800ac78 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800abc8:	1c18      	adds	r0, r3, #0
 800abca:	f7f6 f9e9 	bl	8000fa0 <__aeabi_fmul>
 800abce:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800abd0:	1c19      	adds	r1, r3, #0
 800abd2:	4826      	ldr	r0, [pc, #152]	@ (800ac6c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800abd4:	f7f6 fb22 	bl	800121c <__aeabi_fsub>
 800abd8:	1c03      	adds	r3, r0, #0
 800abda:	2181      	movs	r1, #129	@ 0x81
 800abdc:	05c9      	lsls	r1, r1, #23
 800abde:	1c18      	adds	r0, r3, #0
 800abe0:	f7f5 fff8 	bl	8000bd4 <__aeabi_fdiv>
 800abe4:	1c03      	adds	r3, r0, #0
 800abe6:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800abe8:	4920      	ldr	r1, [pc, #128]	@ (800ac6c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800abea:	68f8      	ldr	r0, [r7, #12]
 800abec:	f7f5 fe68 	bl	80008c0 <__aeabi_fadd>
 800abf0:	1c03      	adds	r3, r0, #0
 800abf2:	1c1c      	adds	r4, r3, #0
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	1c18      	adds	r0, r3, #0
 800abf8:	f017 fd44 	bl	8022684 <expf>
 800abfc:	1c03      	adds	r3, r0, #0
 800abfe:	21fe      	movs	r1, #254	@ 0xfe
 800ac00:	0589      	lsls	r1, r1, #22
 800ac02:	1c18      	adds	r0, r3, #0
 800ac04:	f7f5 fe5c 	bl	80008c0 <__aeabi_fadd>
 800ac08:	1c03      	adds	r3, r0, #0
 800ac0a:	1c19      	adds	r1, r3, #0
 800ac0c:	1c20      	adds	r0, r4, #0
 800ac0e:	f7f5 ffe1 	bl	8000bd4 <__aeabi_fdiv>
 800ac12:	1c03      	adds	r3, r0, #0
 800ac14:	68f9      	ldr	r1, [r7, #12]
 800ac16:	1c18      	adds	r0, r3, #0
 800ac18:	f7f6 fb00 	bl	800121c <__aeabi_fsub>
 800ac1c:	1c03      	adds	r3, r0, #0
 800ac1e:	e01f      	b.n	800ac60 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2188      	movs	r1, #136	@ 0x88
 800ac28:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800ac2a:	1c19      	adds	r1, r3, #0
 800ac2c:	1c10      	adds	r0, r2, #0
 800ac2e:	f7f5 ffd1 	bl	8000bd4 <__aeabi_fdiv>
 800ac32:	1c03      	adds	r3, r0, #0
 800ac34:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	1c18      	adds	r0, r3, #0
 800ac3a:	f017 fd23 	bl	8022684 <expf>
 800ac3e:	1c03      	adds	r3, r0, #0
 800ac40:	21fe      	movs	r1, #254	@ 0xfe
 800ac42:	0589      	lsls	r1, r1, #22
 800ac44:	1c18      	adds	r0, r3, #0
 800ac46:	f7f5 fe3b 	bl	80008c0 <__aeabi_fadd>
 800ac4a:	1c03      	adds	r3, r0, #0
 800ac4c:	1c19      	adds	r1, r3, #0
 800ac4e:	4807      	ldr	r0, [pc, #28]	@ (800ac6c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800ac50:	f7f5 ffc0 	bl	8000bd4 <__aeabi_fdiv>
 800ac54:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800ac56:	1c19      	adds	r1, r3, #0
 800ac58:	1c20      	adds	r0, r4, #0
 800ac5a:	f7f6 f9a1 	bl	8000fa0 <__aeabi_fmul>
 800ac5e:	1c03      	adds	r3, r0, #0
        }
    }
}
 800ac60:	1c18      	adds	r0, r3, #0
 800ac62:	46bd      	mov	sp, r7
 800ac64:	b005      	add	sp, #20
 800ac66:	bd90      	pop	{r4, r7, pc}
 800ac68:	c2480000 	.word	0xc2480000
 800ac6c:	43fa0000 	.word	0x43fa0000
 800ac70:	42480000 	.word	0x42480000
 800ac74:	3f8041ab 	.word	0x3f8041ab
 800ac78:	40a00000 	.word	0x40a00000

0800ac7c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800ac7c:	b590      	push	{r4, r7, lr}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	4913      	ldr	r1, [pc, #76]	@ (800acdc <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800ac8e:	1c18      	adds	r0, r3, #0
 800ac90:	f7f5 fe16 	bl	80008c0 <__aeabi_fadd>
 800ac94:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800ac96:	1c19      	adds	r1, r3, #0
 800ac98:	1c20      	adds	r0, r4, #0
 800ac9a:	f7f5 ff9b 	bl	8000bd4 <__aeabi_fdiv>
 800ac9e:	1c03      	adds	r3, r0, #0
 800aca0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	228c      	movs	r2, #140	@ 0x8c
 800aca6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	490b      	ldr	r1, [pc, #44]	@ (800ace0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800acb2:	1c18      	adds	r0, r3, #0
 800acb4:	f7f5 fe04 	bl	80008c0 <__aeabi_fadd>
 800acb8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800acba:	1c19      	adds	r1, r3, #0
 800acbc:	1c20      	adds	r0, r4, #0
 800acbe:	f7f5 ff89 	bl	8000bd4 <__aeabi_fdiv>
 800acc2:	1c03      	adds	r3, r0, #0
 800acc4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2290      	movs	r2, #144	@ 0x90
 800acca:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2294      	movs	r2, #148	@ 0x94
 800acd0:	2100      	movs	r1, #0
 800acd2:	5499      	strb	r1, [r3, r2]
}
 800acd4:	46c0      	nop			@ (mov r8, r8)
 800acd6:	46bd      	mov	sp, r7
 800acd8:	b003      	add	sp, #12
 800acda:	bd90      	pop	{r4, r7, pc}
 800acdc:	41a00000 	.word	0x41a00000
 800ace0:	43fa0000 	.word	0x43fa0000

0800ace4 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800ace4:	b590      	push	{r4, r7, lr}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2294      	movs	r2, #148	@ 0x94
 800acf2:	5c9b      	ldrb	r3, [r3, r2]
 800acf4:	2201      	movs	r2, #1
 800acf6:	4053      	eors	r3, r2
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00f      	beq.n	800ad1e <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2198      	movs	r1, #152	@ 0x98
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	219c      	movs	r1, #156	@ 0x9c
 800ad0a:	683a      	ldr	r2, [r7, #0]
 800ad0c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	21a0      	movs	r1, #160	@ 0xa0
 800ad12:	683a      	ldr	r2, [r7, #0]
 800ad14:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2294      	movs	r2, #148	@ 0x94
 800ad1a:	2101      	movs	r1, #1
 800ad1c:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	228c      	movs	r2, #140	@ 0x8c
 800ad22:	589b      	ldr	r3, [r3, r2]
 800ad24:	1c19      	adds	r1, r3, #0
 800ad26:	20fe      	movs	r0, #254	@ 0xfe
 800ad28:	0580      	lsls	r0, r0, #22
 800ad2a:	f7f6 fa77 	bl	800121c <__aeabi_fsub>
 800ad2e:	1c03      	adds	r3, r0, #0
 800ad30:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2298      	movs	r2, #152	@ 0x98
 800ad36:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800ad38:	1c19      	adds	r1, r3, #0
 800ad3a:	f7f6 f931 	bl	8000fa0 <__aeabi_fmul>
 800ad3e:	1c03      	adds	r3, r0, #0
 800ad40:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	228c      	movs	r2, #140	@ 0x8c
 800ad46:	589b      	ldr	r3, [r3, r2]
 800ad48:	6839      	ldr	r1, [r7, #0]
 800ad4a:	1c18      	adds	r0, r3, #0
 800ad4c:	f7f6 f928 	bl	8000fa0 <__aeabi_fmul>
 800ad50:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800ad52:	1c19      	adds	r1, r3, #0
 800ad54:	1c20      	adds	r0, r4, #0
 800ad56:	f7f5 fdb3 	bl	80008c0 <__aeabi_fadd>
 800ad5a:	1c03      	adds	r3, r0, #0
 800ad5c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2298      	movs	r2, #152	@ 0x98
 800ad62:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2290      	movs	r2, #144	@ 0x90
 800ad68:	589b      	ldr	r3, [r3, r2]
 800ad6a:	1c19      	adds	r1, r3, #0
 800ad6c:	20fe      	movs	r0, #254	@ 0xfe
 800ad6e:	0580      	lsls	r0, r0, #22
 800ad70:	f7f6 fa54 	bl	800121c <__aeabi_fsub>
 800ad74:	1c03      	adds	r3, r0, #0
 800ad76:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	229c      	movs	r2, #156	@ 0x9c
 800ad7c:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800ad7e:	1c19      	adds	r1, r3, #0
 800ad80:	f7f6 f90e 	bl	8000fa0 <__aeabi_fmul>
 800ad84:	1c03      	adds	r3, r0, #0
 800ad86:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2290      	movs	r2, #144	@ 0x90
 800ad8c:	589b      	ldr	r3, [r3, r2]
 800ad8e:	6839      	ldr	r1, [r7, #0]
 800ad90:	1c18      	adds	r0, r3, #0
 800ad92:	f7f6 f905 	bl	8000fa0 <__aeabi_fmul>
 800ad96:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800ad98:	1c19      	adds	r1, r3, #0
 800ad9a:	1c20      	adds	r0, r4, #0
 800ad9c:	f7f5 fd90 	bl	80008c0 <__aeabi_fadd>
 800ada0:	1c03      	adds	r3, r0, #0
 800ada2:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	229c      	movs	r2, #156	@ 0x9c
 800ada8:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2298      	movs	r2, #152	@ 0x98
 800adae:	589a      	ldr	r2, [r3, r2]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	219c      	movs	r1, #156	@ 0x9c
 800adb4:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800adb6:	1c19      	adds	r1, r3, #0
 800adb8:	1c10      	adds	r0, r2, #0
 800adba:	f7f6 fa2f 	bl	800121c <__aeabi_fsub>
 800adbe:	1c03      	adds	r3, r0, #0
 800adc0:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800adc2:	2100      	movs	r1, #0
 800adc4:	6978      	ldr	r0, [r7, #20]
 800adc6:	f7f5 fbb3 	bl	8000530 <__aeabi_fcmplt>
 800adca:	1e03      	subs	r3, r0, #0
 800adcc:	d004      	beq.n	800add8 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	2280      	movs	r2, #128	@ 0x80
 800add2:	0612      	lsls	r2, r2, #24
 800add4:	4053      	eors	r3, r2
 800add6:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800add8:	4923      	ldr	r1, [pc, #140]	@ (800ae68 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800adda:	6978      	ldr	r0, [r7, #20]
 800addc:	f7f6 f8e0 	bl	8000fa0 <__aeabi_fmul>
 800ade0:	1c03      	adds	r3, r0, #0
 800ade2:	1c18      	adds	r0, r3, #0
 800ade4:	f017 fc4e 	bl	8022684 <expf>
 800ade8:	1c03      	adds	r3, r0, #0
 800adea:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800adec:	491f      	ldr	r1, [pc, #124]	@ (800ae6c <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800adee:	6938      	ldr	r0, [r7, #16]
 800adf0:	f7f6 f8d6 	bl	8000fa0 <__aeabi_fmul>
 800adf4:	1c03      	adds	r3, r0, #0
 800adf6:	491e      	ldr	r1, [pc, #120]	@ (800ae70 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800adf8:	1c18      	adds	r0, r3, #0
 800adfa:	f7f5 fd61 	bl	80008c0 <__aeabi_fadd>
 800adfe:	1c03      	adds	r3, r0, #0
 800ae00:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	685c      	ldr	r4, [r3, #4]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	68f9      	ldr	r1, [r7, #12]
 800ae0c:	1c18      	adds	r0, r3, #0
 800ae0e:	f7f5 fd57 	bl	80008c0 <__aeabi_fadd>
 800ae12:	1c03      	adds	r3, r0, #0
 800ae14:	1c19      	adds	r1, r3, #0
 800ae16:	1c20      	adds	r0, r4, #0
 800ae18:	f7f5 fedc 	bl	8000bd4 <__aeabi_fdiv>
 800ae1c:	1c03      	adds	r3, r0, #0
 800ae1e:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800ae20:	68b9      	ldr	r1, [r7, #8]
 800ae22:	20fe      	movs	r0, #254	@ 0xfe
 800ae24:	0580      	lsls	r0, r0, #22
 800ae26:	f7f6 f9f9 	bl	800121c <__aeabi_fsub>
 800ae2a:	1c03      	adds	r3, r0, #0
 800ae2c:	1c18      	adds	r0, r3, #0
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	22a0      	movs	r2, #160	@ 0xa0
 800ae32:	589b      	ldr	r3, [r3, r2]
 800ae34:	1c19      	adds	r1, r3, #0
 800ae36:	f7f6 f8b3 	bl	8000fa0 <__aeabi_fmul>
 800ae3a:	1c03      	adds	r3, r0, #0
 800ae3c:	1c1c      	adds	r4, r3, #0
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	68b8      	ldr	r0, [r7, #8]
 800ae42:	f7f6 f8ad 	bl	8000fa0 <__aeabi_fmul>
 800ae46:	1c03      	adds	r3, r0, #0
 800ae48:	1c19      	adds	r1, r3, #0
 800ae4a:	1c20      	adds	r0, r4, #0
 800ae4c:	f7f5 fd38 	bl	80008c0 <__aeabi_fadd>
 800ae50:	1c03      	adds	r3, r0, #0
 800ae52:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	22a0      	movs	r2, #160	@ 0xa0
 800ae58:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	22a0      	movs	r2, #160	@ 0xa0
 800ae5e:	589b      	ldr	r3, [r3, r2]
}
 800ae60:	1c18      	adds	r0, r3, #0
 800ae62:	46bd      	mov	sp, r7
 800ae64:	b007      	add	sp, #28
 800ae66:	bd90      	pop	{r4, r7, pc}
 800ae68:	be4ccccd 	.word	0xbe4ccccd
 800ae6c:	43f00000 	.word	0x43f00000
 800ae70:	41a00000 	.word	0x41a00000

0800ae74 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	000a      	movs	r2, r1
 800ae7e:	1cbb      	adds	r3, r7, #2
 800ae80:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800ae82:	230d      	movs	r3, #13
 800ae84:	18fb      	adds	r3, r7, r3
 800ae86:	22ff      	movs	r2, #255	@ 0xff
 800ae88:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800ae8a:	230e      	movs	r3, #14
 800ae8c:	18fb      	adds	r3, r7, r3
 800ae8e:	2200      	movs	r2, #0
 800ae90:	801a      	strh	r2, [r3, #0]
 800ae92:	e037      	b.n	800af04 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800ae94:	230e      	movs	r3, #14
 800ae96:	18fb      	adds	r3, r7, r3
 800ae98:	881b      	ldrh	r3, [r3, #0]
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	18d3      	adds	r3, r2, r3
 800ae9e:	7819      	ldrb	r1, [r3, #0]
 800aea0:	220d      	movs	r2, #13
 800aea2:	18bb      	adds	r3, r7, r2
 800aea4:	18ba      	adds	r2, r7, r2
 800aea6:	7812      	ldrb	r2, [r2, #0]
 800aea8:	404a      	eors	r2, r1
 800aeaa:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800aeac:	230c      	movs	r3, #12
 800aeae:	18fb      	adds	r3, r7, r3
 800aeb0:	2208      	movs	r2, #8
 800aeb2:	701a      	strb	r2, [r3, #0]
 800aeb4:	e01b      	b.n	800aeee <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800aeb6:	210d      	movs	r1, #13
 800aeb8:	187b      	adds	r3, r7, r1
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	b25b      	sxtb	r3, r3
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	da09      	bge.n	800aed6 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800aec2:	187b      	adds	r3, r7, r1
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	005b      	lsls	r3, r3, #1
 800aec8:	b25b      	sxtb	r3, r3
 800aeca:	2231      	movs	r2, #49	@ 0x31
 800aecc:	4053      	eors	r3, r2
 800aece:	b25a      	sxtb	r2, r3
 800aed0:	187b      	adds	r3, r7, r1
 800aed2:	701a      	strb	r2, [r3, #0]
 800aed4:	e005      	b.n	800aee2 <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800aed6:	230d      	movs	r3, #13
 800aed8:	18fa      	adds	r2, r7, r3
 800aeda:	18fb      	adds	r3, r7, r3
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	18db      	adds	r3, r3, r3
 800aee0:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800aee2:	220c      	movs	r2, #12
 800aee4:	18bb      	adds	r3, r7, r2
 800aee6:	18ba      	adds	r2, r7, r2
 800aee8:	7812      	ldrb	r2, [r2, #0]
 800aeea:	3a01      	subs	r2, #1
 800aeec:	701a      	strb	r2, [r3, #0]
 800aeee:	230c      	movs	r3, #12
 800aef0:	18fb      	adds	r3, r7, r3
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1de      	bne.n	800aeb6 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800aef8:	220e      	movs	r2, #14
 800aefa:	18bb      	adds	r3, r7, r2
 800aefc:	18ba      	adds	r2, r7, r2
 800aefe:	8812      	ldrh	r2, [r2, #0]
 800af00:	3201      	adds	r2, #1
 800af02:	801a      	strh	r2, [r3, #0]
 800af04:	230e      	movs	r3, #14
 800af06:	18fa      	adds	r2, r7, r3
 800af08:	1cbb      	adds	r3, r7, #2
 800af0a:	8812      	ldrh	r2, [r2, #0]
 800af0c:	881b      	ldrh	r3, [r3, #0]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d3c0      	bcc.n	800ae94 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800af12:	230d      	movs	r3, #13
 800af14:	18fb      	adds	r3, r7, r3
 800af16:	781b      	ldrb	r3, [r3, #0]
}
 800af18:	0018      	movs	r0, r3
 800af1a:	46bd      	mov	sp, r7
 800af1c:	b004      	add	sp, #16
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	0008      	movs	r0, r1
 800af2a:	0011      	movs	r1, r2
 800af2c:	1cbb      	adds	r3, r7, #2
 800af2e:	1c02      	adds	r2, r0, #0
 800af30:	801a      	strh	r2, [r3, #0]
 800af32:	1c7b      	adds	r3, r7, #1
 800af34:	1c0a      	adds	r2, r1, #0
 800af36:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800af38:	1cbb      	adds	r3, r7, #2
 800af3a:	881a      	ldrh	r2, [r3, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	0011      	movs	r1, r2
 800af40:	0018      	movs	r0, r3
 800af42:	f7ff ff97 	bl	800ae74 <sensirion_i2c_generate_crc>
 800af46:	0003      	movs	r3, r0
 800af48:	001a      	movs	r2, r3
 800af4a:	1c7b      	adds	r3, r7, #1
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	4293      	cmp	r3, r2
 800af50:	d001      	beq.n	800af56 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	e000      	b.n	800af58 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800af56:	2300      	movs	r3, #0
}
 800af58:	0018      	movs	r0, r3
 800af5a:	46bd      	mov	sp, r7
 800af5c:	b002      	add	sp, #8
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	0008      	movs	r0, r1
 800af6a:	0011      	movs	r1, r2
 800af6c:	1cbb      	adds	r3, r7, #2
 800af6e:	1c02      	adds	r2, r0, #0
 800af70:	801a      	strh	r2, [r3, #0]
 800af72:	003b      	movs	r3, r7
 800af74:	1c0a      	adds	r2, r1, #0
 800af76:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800af78:	003b      	movs	r3, r7
 800af7a:	881b      	ldrh	r3, [r3, #0]
 800af7c:	0a1b      	lsrs	r3, r3, #8
 800af7e:	b299      	uxth	r1, r3
 800af80:	1cbb      	adds	r3, r7, #2
 800af82:	881b      	ldrh	r3, [r3, #0]
 800af84:	1cba      	adds	r2, r7, #2
 800af86:	1c58      	adds	r0, r3, #1
 800af88:	8010      	strh	r0, [r2, #0]
 800af8a:	001a      	movs	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	189b      	adds	r3, r3, r2
 800af90:	b2ca      	uxtb	r2, r1
 800af92:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800af94:	1cbb      	adds	r3, r7, #2
 800af96:	881b      	ldrh	r3, [r3, #0]
 800af98:	1cba      	adds	r2, r7, #2
 800af9a:	1c59      	adds	r1, r3, #1
 800af9c:	8011      	strh	r1, [r2, #0]
 800af9e:	001a      	movs	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	189b      	adds	r3, r3, r2
 800afa4:	003a      	movs	r2, r7
 800afa6:	8812      	ldrh	r2, [r2, #0]
 800afa8:	b2d2      	uxtb	r2, r2
 800afaa:	701a      	strb	r2, [r3, #0]
    return offset;
 800afac:	1cbb      	adds	r3, r7, #2
 800afae:	881b      	ldrh	r3, [r3, #0]
}
 800afb0:	0018      	movs	r0, r3
 800afb2:	46bd      	mov	sp, r7
 800afb4:	b002      	add	sp, #8
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800afb8:	b590      	push	{r4, r7, lr}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	0008      	movs	r0, r1
 800afc2:	0011      	movs	r1, r2
 800afc4:	1cbb      	adds	r3, r7, #2
 800afc6:	1c02      	adds	r2, r0, #0
 800afc8:	801a      	strh	r2, [r3, #0]
 800afca:	003b      	movs	r3, r7
 800afcc:	1c0a      	adds	r2, r1, #0
 800afce:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800afd0:	003b      	movs	r3, r7
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	0a1b      	lsrs	r3, r3, #8
 800afd6:	b299      	uxth	r1, r3
 800afd8:	1cbb      	adds	r3, r7, #2
 800afda:	881b      	ldrh	r3, [r3, #0]
 800afdc:	1cba      	adds	r2, r7, #2
 800afde:	1c58      	adds	r0, r3, #1
 800afe0:	8010      	strh	r0, [r2, #0]
 800afe2:	001a      	movs	r2, r3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	189b      	adds	r3, r3, r2
 800afe8:	b2ca      	uxtb	r2, r1
 800afea:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800afec:	1cbb      	adds	r3, r7, #2
 800afee:	881b      	ldrh	r3, [r3, #0]
 800aff0:	1cba      	adds	r2, r7, #2
 800aff2:	1c59      	adds	r1, r3, #1
 800aff4:	8011      	strh	r1, [r2, #0]
 800aff6:	001a      	movs	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	189b      	adds	r3, r3, r2
 800affc:	003a      	movs	r2, r7
 800affe:	8812      	ldrh	r2, [r2, #0]
 800b000:	b2d2      	uxtb	r2, r2
 800b002:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800b004:	1cbb      	adds	r3, r7, #2
 800b006:	881b      	ldrh	r3, [r3, #0]
 800b008:	3b02      	subs	r3, #2
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800b00e:	1cbb      	adds	r3, r7, #2
 800b010:	881b      	ldrh	r3, [r3, #0]
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	18d4      	adds	r4, r2, r3
 800b016:	2102      	movs	r1, #2
 800b018:	f7ff ff2c 	bl	800ae74 <sensirion_i2c_generate_crc>
 800b01c:	0003      	movs	r3, r0
 800b01e:	7023      	strb	r3, [r4, #0]
    offset++;
 800b020:	1cbb      	adds	r3, r7, #2
 800b022:	881a      	ldrh	r2, [r3, #0]
 800b024:	1cbb      	adds	r3, r7, #2
 800b026:	3201      	adds	r2, #1
 800b028:	801a      	strh	r2, [r3, #0]

    return offset;
 800b02a:	1cbb      	adds	r3, r7, #2
 800b02c:	881b      	ldrh	r3, [r3, #0]
}
 800b02e:	0018      	movs	r0, r3
 800b030:	46bd      	mov	sp, r7
 800b032:	b003      	add	sp, #12
 800b034:	bd90      	pop	{r4, r7, pc}

0800b036 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800b036:	b580      	push	{r7, lr}
 800b038:	b082      	sub	sp, #8
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	0008      	movs	r0, r1
 800b040:	0011      	movs	r1, r2
 800b042:	1cbb      	adds	r3, r7, #2
 800b044:	1c02      	adds	r2, r0, #0
 800b046:	801a      	strh	r2, [r3, #0]
 800b048:	003b      	movs	r3, r7
 800b04a:	1c0a      	adds	r2, r1, #0
 800b04c:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800b04e:	003b      	movs	r3, r7
 800b050:	881a      	ldrh	r2, [r3, #0]
 800b052:	1cbb      	adds	r3, r7, #2
 800b054:	8819      	ldrh	r1, [r3, #0]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	0018      	movs	r0, r3
 800b05a:	f7ff ffad 	bl	800afb8 <sensirion_i2c_add_uint16_t_to_buffer>
 800b05e:	0003      	movs	r3, r0
}
 800b060:	0018      	movs	r0, r3
 800b062:	46bd      	mov	sp, r7
 800b064:	b002      	add	sp, #8
 800b066:	bd80      	pop	{r7, pc}

0800b068 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6039      	str	r1, [r7, #0]
 800b070:	0011      	movs	r1, r2
 800b072:	1dfb      	adds	r3, r7, #7
 800b074:	1c02      	adds	r2, r0, #0
 800b076:	701a      	strb	r2, [r3, #0]
 800b078:	1d3b      	adds	r3, r7, #4
 800b07a:	1c0a      	adds	r2, r1, #0
 800b07c:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800b07e:	1d3b      	adds	r3, r7, #4
 800b080:	881a      	ldrh	r2, [r3, #0]
 800b082:	6839      	ldr	r1, [r7, #0]
 800b084:	1dfb      	adds	r3, r7, #7
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	0018      	movs	r0, r3
 800b08a:	f7fe fa3b 	bl	8009504 <sensirion_i2c_hal_write>
 800b08e:	0003      	movs	r3, r0
}
 800b090:	0018      	movs	r0, r3
 800b092:	46bd      	mov	sp, r7
 800b094:	b002      	add	sp, #8
 800b096:	bd80      	pop	{r7, pc}

0800b098 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800b098:	b5b0      	push	{r4, r5, r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6039      	str	r1, [r7, #0]
 800b0a0:	0011      	movs	r1, r2
 800b0a2:	1dfb      	adds	r3, r7, #7
 800b0a4:	1c02      	adds	r2, r0, #0
 800b0a6:	701a      	strb	r2, [r3, #0]
 800b0a8:	1d3b      	adds	r3, r7, #4
 800b0aa:	1c0a      	adds	r2, r1, #0
 800b0ac:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800b0ae:	1d3b      	adds	r3, r7, #4
 800b0b0:	881b      	ldrh	r3, [r3, #0]
 800b0b2:	085b      	lsrs	r3, r3, #1
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	220a      	movs	r2, #10
 800b0b8:	18ba      	adds	r2, r7, r2
 800b0ba:	1c19      	adds	r1, r3, #0
 800b0bc:	1c0b      	adds	r3, r1, #0
 800b0be:	18db      	adds	r3, r3, r3
 800b0c0:	185b      	adds	r3, r3, r1
 800b0c2:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800b0c4:	1d3b      	adds	r3, r7, #4
 800b0c6:	881b      	ldrh	r3, [r3, #0]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d001      	beq.n	800b0d6 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800b0d2:	2304      	movs	r3, #4
 800b0d4:	e06b      	b.n	800b1ae <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800b0d6:	230a      	movs	r3, #10
 800b0d8:	18fb      	adds	r3, r7, r3
 800b0da:	881a      	ldrh	r2, [r3, #0]
 800b0dc:	6839      	ldr	r1, [r7, #0]
 800b0de:	1dfb      	adds	r3, r7, #7
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	0018      	movs	r0, r3
 800b0e4:	f7fe f9ee 	bl	80094c4 <sensirion_i2c_hal_read>
 800b0e8:	0003      	movs	r3, r0
 800b0ea:	001a      	movs	r2, r3
 800b0ec:	2108      	movs	r1, #8
 800b0ee:	187b      	adds	r3, r7, r1
 800b0f0:	801a      	strh	r2, [r3, #0]
    if (error) {
 800b0f2:	000a      	movs	r2, r1
 800b0f4:	18bb      	adds	r3, r7, r2
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	5e5b      	ldrsh	r3, [r3, r1]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d003      	beq.n	800b106 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800b0fe:	18bb      	adds	r3, r7, r2
 800b100:	2200      	movs	r2, #0
 800b102:	5e9b      	ldrsh	r3, [r3, r2]
 800b104:	e053      	b.n	800b1ae <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b106:	230e      	movs	r3, #14
 800b108:	18fb      	adds	r3, r7, r3
 800b10a:	2200      	movs	r2, #0
 800b10c:	801a      	strh	r2, [r3, #0]
 800b10e:	230c      	movs	r3, #12
 800b110:	18fb      	adds	r3, r7, r3
 800b112:	2200      	movs	r2, #0
 800b114:	801a      	strh	r2, [r3, #0]
 800b116:	e041      	b.n	800b19c <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b118:	210e      	movs	r1, #14
 800b11a:	187b      	adds	r3, r7, r1
 800b11c:	881b      	ldrh	r3, [r3, #0]
 800b11e:	683a      	ldr	r2, [r7, #0]
 800b120:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800b122:	187b      	adds	r3, r7, r1
 800b124:	881b      	ldrh	r3, [r3, #0]
 800b126:	3302      	adds	r3, #2
 800b128:	683a      	ldr	r2, [r7, #0]
 800b12a:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	001a      	movs	r2, r3
 800b130:	2102      	movs	r1, #2
 800b132:	f7ff fef5 	bl	800af20 <sensirion_i2c_check_crc>
 800b136:	0003      	movs	r3, r0
 800b138:	001a      	movs	r2, r3
 800b13a:	2108      	movs	r1, #8
 800b13c:	187b      	adds	r3, r7, r1
 800b13e:	801a      	strh	r2, [r3, #0]
        if (error) {
 800b140:	000a      	movs	r2, r1
 800b142:	18bb      	adds	r3, r7, r2
 800b144:	2100      	movs	r1, #0
 800b146:	5e5b      	ldrsh	r3, [r3, r1]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d003      	beq.n	800b154 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800b14c:	18bb      	adds	r3, r7, r2
 800b14e:	2200      	movs	r2, #0
 800b150:	5e9b      	ldrsh	r3, [r3, r2]
 800b152:	e02c      	b.n	800b1ae <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800b154:	240e      	movs	r4, #14
 800b156:	193b      	adds	r3, r7, r4
 800b158:	881b      	ldrh	r3, [r3, #0]
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	18d2      	adds	r2, r2, r3
 800b15e:	250c      	movs	r5, #12
 800b160:	197b      	adds	r3, r7, r5
 800b162:	881b      	ldrh	r3, [r3, #0]
 800b164:	1979      	adds	r1, r7, r5
 800b166:	1c58      	adds	r0, r3, #1
 800b168:	8008      	strh	r0, [r1, #0]
 800b16a:	0019      	movs	r1, r3
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	185b      	adds	r3, r3, r1
 800b170:	7812      	ldrb	r2, [r2, #0]
 800b172:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800b174:	193b      	adds	r3, r7, r4
 800b176:	881b      	ldrh	r3, [r3, #0]
 800b178:	3301      	adds	r3, #1
 800b17a:	683a      	ldr	r2, [r7, #0]
 800b17c:	18d2      	adds	r2, r2, r3
 800b17e:	197b      	adds	r3, r7, r5
 800b180:	881b      	ldrh	r3, [r3, #0]
 800b182:	1979      	adds	r1, r7, r5
 800b184:	1c58      	adds	r0, r3, #1
 800b186:	8008      	strh	r0, [r1, #0]
 800b188:	0019      	movs	r1, r3
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	185b      	adds	r3, r3, r1
 800b18e:	7812      	ldrb	r2, [r2, #0]
 800b190:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b192:	193b      	adds	r3, r7, r4
 800b194:	193a      	adds	r2, r7, r4
 800b196:	8812      	ldrh	r2, [r2, #0]
 800b198:	3203      	adds	r2, #3
 800b19a:	801a      	strh	r2, [r3, #0]
 800b19c:	230e      	movs	r3, #14
 800b19e:	18fa      	adds	r2, r7, r3
 800b1a0:	230a      	movs	r3, #10
 800b1a2:	18fb      	adds	r3, r7, r3
 800b1a4:	8812      	ldrh	r2, [r2, #0]
 800b1a6:	881b      	ldrh	r3, [r3, #0]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d3b5      	bcc.n	800b118 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	0018      	movs	r0, r3
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	b004      	add	sp, #16
 800b1b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b1b8 <ReadRegister>:
static uint16_t Blue;
static uint16_t Green;
static uint16_t TimeValue = 4000;


static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b1b8:	b590      	push	{r4, r7, lr}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6039      	str	r1, [r7, #0]
 800b1c0:	0011      	movs	r1, r2
 800b1c2:	1dfb      	adds	r3, r7, #7
 800b1c4:	1c02      	adds	r2, r0, #0
 800b1c6:	701a      	strb	r2, [r3, #0]
 800b1c8:	1dbb      	adds	r3, r7, #6
 800b1ca:	1c0a      	adds	r2, r1, #0
 800b1cc:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800b1ce:	4b08      	ldr	r3, [pc, #32]	@ (800b1f0 <ReadRegister+0x38>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d008      	beq.n	800b1e8 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800b1d6:	4b06      	ldr	r3, [pc, #24]	@ (800b1f0 <ReadRegister+0x38>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	1dba      	adds	r2, r7, #6
 800b1dc:	7814      	ldrb	r4, [r2, #0]
 800b1de:	6839      	ldr	r1, [r7, #0]
 800b1e0:	1dfa      	adds	r2, r7, #7
 800b1e2:	7810      	ldrb	r0, [r2, #0]
 800b1e4:	0022      	movs	r2, r4
 800b1e6:	4798      	blx	r3
  }
}
 800b1e8:	46c0      	nop			@ (mov r8, r8)
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	b003      	add	sp, #12
 800b1ee:	bd90      	pop	{r4, r7, pc}
 800b1f0:	20001280 	.word	0x20001280

0800b1f4 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b1f4:	b590      	push	{r4, r7, lr}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6039      	str	r1, [r7, #0]
 800b1fc:	0011      	movs	r1, r2
 800b1fe:	1dfb      	adds	r3, r7, #7
 800b200:	1c02      	adds	r2, r0, #0
 800b202:	701a      	strb	r2, [r3, #0]
 800b204:	1dbb      	adds	r3, r7, #6
 800b206:	1c0a      	adds	r2, r1, #0
 800b208:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800b20a:	4b08      	ldr	r3, [pc, #32]	@ (800b22c <WriteRegister+0x38>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d008      	beq.n	800b224 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800b212:	4b06      	ldr	r3, [pc, #24]	@ (800b22c <WriteRegister+0x38>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	1dba      	adds	r2, r7, #6
 800b218:	7814      	ldrb	r4, [r2, #0]
 800b21a:	6839      	ldr	r1, [r7, #0]
 800b21c:	1dfa      	adds	r2, r7, #7
 800b21e:	7810      	ldrb	r0, [r2, #0]
 800b220:	0022      	movs	r2, r4
 800b222:	4798      	blx	r3
  }
}
 800b224:	46c0      	nop			@ (mov r8, r8)
 800b226:	46bd      	mov	sp, r7
 800b228:	b003      	add	sp, #12
 800b22a:	bd90      	pop	{r4, r7, pc}
 800b22c:	20001284 	.word	0x20001284

0800b230 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800b238:	f003 fa2a 	bl	800e690 <HAL_GetTick>
 800b23c:	0002      	movs	r2, r0
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	18d2      	adds	r2, r2, r3
 800b242:	4b03      	ldr	r3, [pc, #12]	@ (800b250 <setSGP40TimeStamp+0x20>)
 800b244:	601a      	str	r2, [r3, #0]
}
 800b246:	46c0      	nop			@ (mov r8, r8)
 800b248:	46bd      	mov	sp, r7
 800b24a:	b002      	add	sp, #8
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	46c0      	nop			@ (mov r8, r8)
 800b250:	20001294 	.word	0x20001294

0800b254 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800b254:	b580      	push	{r7, lr}
 800b256:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800b258:	4b02      	ldr	r3, [pc, #8]	@ (800b264 <ResetSGP40samplecounter+0x10>)
 800b25a:	2200      	movs	r2, #0
 800b25c:	701a      	strb	r2, [r3, #0]
}
 800b25e:	46c0      	nop			@ (mov r8, r8)
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	20001292 	.word	0x20001292

0800b268 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800b272:	4b07      	ldr	r3, [pc, #28]	@ (800b290 <SGP_Init+0x28>)
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800b278:	4b06      	ldr	r3, [pc, #24]	@ (800b294 <SGP_Init+0x2c>)
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800b27e:	4b06      	ldr	r3, [pc, #24]	@ (800b298 <SGP_Init+0x30>)
 800b280:	2100      	movs	r1, #0
 800b282:	0018      	movs	r0, r3
 800b284:	f7fe ff70 	bl	800a168 <GasIndexAlgorithm_init>
}
 800b288:	46c0      	nop			@ (mov r8, r8)
 800b28a:	46bd      	mov	sp, r7
 800b28c:	b002      	add	sp, #8
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	20001280 	.word	0x20001280
 800b294:	20001284 	.word	0x20001284
 800b298:	2000129c 	.word	0x2000129c

0800b29c <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800b29c:	b580      	push	{r7, lr}
 800b29e:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800b2a0:	4b13      	ldr	r3, [pc, #76]	@ (800b2f0 <SGP_StartMeasurement+0x54>)
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00d      	beq.n	800b2c4 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b2a8:	4b12      	ldr	r3, [pc, #72]	@ (800b2f4 <SGP_StartMeasurement+0x58>)
 800b2aa:	2208      	movs	r2, #8
 800b2ac:	0019      	movs	r1, r3
 800b2ae:	2059      	movs	r0, #89	@ 0x59
 800b2b0:	f7ff ffa0 	bl	800b1f4 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b2b4:	f003 f9ec 	bl	800e690 <HAL_GetTick>
 800b2b8:	0003      	movs	r3, r0
 800b2ba:	331e      	adds	r3, #30
 800b2bc:	001a      	movs	r2, r3
 800b2be:	4b0e      	ldr	r3, [pc, #56]	@ (800b2f8 <SGP_StartMeasurement+0x5c>)
 800b2c0:	601a      	str	r2, [r3, #0]
 800b2c2:	e00c      	b.n	800b2de <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b2c4:	4b0d      	ldr	r3, [pc, #52]	@ (800b2fc <SGP_StartMeasurement+0x60>)
 800b2c6:	2208      	movs	r2, #8
 800b2c8:	0019      	movs	r1, r3
 800b2ca:	2059      	movs	r0, #89	@ 0x59
 800b2cc:	f7ff ff92 	bl	800b1f4 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800b2d0:	f003 f9de 	bl	800e690 <HAL_GetTick>
 800b2d4:	0003      	movs	r3, r0
 800b2d6:	33aa      	adds	r3, #170	@ 0xaa
 800b2d8:	001a      	movs	r2, r3
 800b2da:	4b09      	ldr	r3, [pc, #36]	@ (800b300 <SGP_StartMeasurement+0x64>)
 800b2dc:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800b2de:	4b09      	ldr	r3, [pc, #36]	@ (800b304 <SGP_StartMeasurement+0x68>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800b2e4:	4b08      	ldr	r3, [pc, #32]	@ (800b308 <SGP_StartMeasurement+0x6c>)
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	701a      	strb	r2, [r3, #0]
}
 800b2ea:	46c0      	nop			@ (mov r8, r8)
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	20001344 	.word	0x20001344
 800b2f4:	20000098 	.word	0x20000098
 800b2f8:	200000ac 	.word	0x200000ac
 800b2fc:	20000090 	.word	0x20000090
 800b300:	200000a4 	.word	0x200000a4
 800b304:	20001298 	.word	0x20001298
 800b308:	20001299 	.word	0x20001299

0800b30c <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800b30c:	b580      	push	{r7, lr}
 800b30e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800b310:	4b04      	ldr	r3, [pc, #16]	@ (800b324 <SGP_HeatedUp+0x18>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	0018      	movs	r0, r3
 800b316:	f002 fd0f 	bl	800dd38 <TimestampIsReached>
 800b31a:	0003      	movs	r3, r0
}
 800b31c:	0018      	movs	r0, r3
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	46c0      	nop			@ (mov r8, r8)
 800b324:	200000a4 	.word	0x200000a4

0800b328 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800b328:	b580      	push	{r7, lr}
 800b32a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800b32c:	4b04      	ldr	r3, [pc, #16]	@ (800b340 <SGP_MeasurementReady+0x18>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	0018      	movs	r0, r3
 800b332:	f002 fd01 	bl	800dd38 <TimestampIsReached>
 800b336:	0003      	movs	r3, r0
}
 800b338:	0018      	movs	r0, r3
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	46c0      	nop			@ (mov r8, r8)
 800b340:	200000ac 	.word	0x200000ac

0800b344 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800b344:	b580      	push	{r7, lr}
 800b346:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800b348:	4b04      	ldr	r3, [pc, #16]	@ (800b35c <SGP_MeasurementDone+0x18>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	0018      	movs	r0, r3
 800b34e:	f002 fcf3 	bl	800dd38 <TimestampIsReached>
 800b352:	0003      	movs	r3, r0
}
 800b354:	0018      	movs	r0, r3
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	46c0      	nop			@ (mov r8, r8)
 800b35c:	200000a8 	.word	0x200000a8

0800b360 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800b360:	b580      	push	{r7, lr}
 800b362:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b364:	4b04      	ldr	r3, [pc, #16]	@ (800b378 <SGP_TurnHeaterOff+0x18>)
 800b366:	2202      	movs	r2, #2
 800b368:	0019      	movs	r1, r3
 800b36a:	2059      	movs	r0, #89	@ 0x59
 800b36c:	f7ff ff42 	bl	800b1f4 <WriteRegister>
}
 800b370:	46c0      	nop			@ (mov r8, r8)
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	46c0      	nop			@ (mov r8, r8)
 800b378:	20000088 	.word	0x20000088

0800b37c <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800b37c:	b5b0      	push	{r4, r5, r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af02      	add	r7, sp, #8
 800b382:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800b384:	f7ff ffc2 	bl	800b30c <SGP_HeatedUp>
 800b388:	1e03      	subs	r3, r0, #0
 800b38a:	d032      	beq.n	800b3f2 <SGP_GetMeasurementValues+0x76>
 800b38c:	4bd4      	ldr	r3, [pc, #848]	@ (800b6e0 <SGP_GetMeasurementValues+0x364>)
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	2201      	movs	r2, #1
 800b392:	4053      	eors	r3, r2
 800b394:	b2db      	uxtb	r3, r3
 800b396:	2b00      	cmp	r3, #0
 800b398:	d02b      	beq.n	800b3f2 <SGP_GetMeasurementValues+0x76>
 800b39a:	4bd2      	ldr	r3, [pc, #840]	@ (800b6e4 <SGP_GetMeasurementValues+0x368>)
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	4053      	eors	r3, r2
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d024      	beq.n	800b3f2 <SGP_GetMeasurementValues+0x76>
//    Debug("SGP is heated up");
    HeatUpIsDone = true;
 800b3a8:	4bcd      	ldr	r3, [pc, #820]	@ (800b6e0 <SGP_GetMeasurementValues+0x364>)
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800b3ae:	4bce      	ldr	r3, [pc, #824]	@ (800b6e8 <SGP_GetMeasurementValues+0x36c>)
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00d      	beq.n	800b3d2 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b3b6:	4bcd      	ldr	r3, [pc, #820]	@ (800b6ec <SGP_GetMeasurementValues+0x370>)
 800b3b8:	2208      	movs	r2, #8
 800b3ba:	0019      	movs	r1, r3
 800b3bc:	2059      	movs	r0, #89	@ 0x59
 800b3be:	f7ff ff19 	bl	800b1f4 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b3c2:	f003 f965 	bl	800e690 <HAL_GetTick>
 800b3c6:	0003      	movs	r3, r0
 800b3c8:	331e      	adds	r3, #30
 800b3ca:	001a      	movs	r2, r3
 800b3cc:	4bc8      	ldr	r3, [pc, #800]	@ (800b6f0 <SGP_GetMeasurementValues+0x374>)
 800b3ce:	601a      	str	r2, [r3, #0]
 800b3d0:	e00c      	b.n	800b3ec <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b3d2:	4bc8      	ldr	r3, [pc, #800]	@ (800b6f4 <SGP_GetMeasurementValues+0x378>)
 800b3d4:	2208      	movs	r2, #8
 800b3d6:	0019      	movs	r1, r3
 800b3d8:	2059      	movs	r0, #89	@ 0x59
 800b3da:	f7ff ff0b 	bl	800b1f4 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b3de:	f003 f957 	bl	800e690 <HAL_GetTick>
 800b3e2:	0003      	movs	r3, r0
 800b3e4:	331e      	adds	r3, #30
 800b3e6:	001a      	movs	r2, r3
 800b3e8:	4bc1      	ldr	r3, [pc, #772]	@ (800b6f0 <SGP_GetMeasurementValues+0x374>)
 800b3ea:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800b3ec:	4bbd      	ldr	r3, [pc, #756]	@ (800b6e4 <SGP_GetMeasurementValues+0x368>)
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800b3f2:	4bbb      	ldr	r3, [pc, #748]	@ (800b6e0 <SGP_GetMeasurementValues+0x364>)
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d100      	bne.n	800b3fc <SGP_GetMeasurementValues+0x80>
 800b3fa:	e1a9      	b.n	800b750 <SGP_GetMeasurementValues+0x3d4>
 800b3fc:	f7ff ff94 	bl	800b328 <SGP_MeasurementReady>
 800b400:	1e03      	subs	r3, r0, #0
 800b402:	d100      	bne.n	800b406 <SGP_GetMeasurementValues+0x8a>
 800b404:	e1a4      	b.n	800b750 <SGP_GetMeasurementValues+0x3d4>
 800b406:	4bbc      	ldr	r3, [pc, #752]	@ (800b6f8 <SGP_GetMeasurementValues+0x37c>)
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	2201      	movs	r2, #1
 800b40c:	4053      	eors	r3, r2
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	2b00      	cmp	r3, #0
 800b412:	d100      	bne.n	800b416 <SGP_GetMeasurementValues+0x9a>
 800b414:	e19c      	b.n	800b750 <SGP_GetMeasurementValues+0x3d4>
//    Debug("SGP40 sample[%i] is ready", SGP_AmountOfSamplesDone + 1);
    MeasurementIsReady = true;
 800b416:	4bb8      	ldr	r3, [pc, #736]	@ (800b6f8 <SGP_GetMeasurementValues+0x37c>)
 800b418:	2201      	movs	r2, #1
 800b41a:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800b41c:	4bb7      	ldr	r3, [pc, #732]	@ (800b6fc <SGP_GetMeasurementValues+0x380>)
 800b41e:	2203      	movs	r2, #3
 800b420:	0019      	movs	r1, r3
 800b422:	2059      	movs	r0, #89	@ 0x59
 800b424:	f7ff fec8 	bl	800b1b8 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800b428:	4bb4      	ldr	r3, [pc, #720]	@ (800b6fc <SGP_GetMeasurementValues+0x380>)
 800b42a:	2203      	movs	r2, #3
 800b42c:	2103      	movs	r1, #3
 800b42e:	0018      	movs	r0, r3
 800b430:	f000 f9f4 	bl	800b81c <CheckCRC>
 800b434:	0003      	movs	r3, r0
 800b436:	001a      	movs	r2, r3
 800b438:	2301      	movs	r3, #1
 800b43a:	4053      	eors	r3, r2
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d02a      	beq.n	800b498 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800b442:	4aaf      	ldr	r2, [pc, #700]	@ (800b700 <SGP_GetMeasurementValues+0x384>)
 800b444:	4baf      	ldr	r3, [pc, #700]	@ (800b704 <SGP_GetMeasurementValues+0x388>)
 800b446:	0019      	movs	r1, r3
 800b448:	2001      	movs	r0, #1
 800b44a:	f002 fccb 	bl	800dde4 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800b44e:	4aae      	ldr	r2, [pc, #696]	@ (800b708 <SGP_GetMeasurementValues+0x38c>)
 800b450:	4bae      	ldr	r3, [pc, #696]	@ (800b70c <SGP_GetMeasurementValues+0x390>)
 800b452:	0019      	movs	r1, r3
 800b454:	2002      	movs	r0, #2
 800b456:	f002 fcc5 	bl	800dde4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b45a:	230f      	movs	r3, #15
 800b45c:	18fb      	adds	r3, r7, r3
 800b45e:	2200      	movs	r2, #0
 800b460:	701a      	strb	r2, [r3, #0]
 800b462:	e012      	b.n	800b48a <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800b464:	240f      	movs	r4, #15
 800b466:	193b      	adds	r3, r7, r4
 800b468:	7818      	ldrb	r0, [r3, #0]
 800b46a:	193b      	adds	r3, r7, r4
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	4aa3      	ldr	r2, [pc, #652]	@ (800b6fc <SGP_GetMeasurementValues+0x380>)
 800b470:	5cd3      	ldrb	r3, [r2, r3]
 800b472:	4aa7      	ldr	r2, [pc, #668]	@ (800b710 <SGP_GetMeasurementValues+0x394>)
 800b474:	49a7      	ldr	r1, [pc, #668]	@ (800b714 <SGP_GetMeasurementValues+0x398>)
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	0003      	movs	r3, r0
 800b47a:	2003      	movs	r0, #3
 800b47c:	f002 fcb2 	bl	800dde4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b480:	193b      	adds	r3, r7, r4
 800b482:	781a      	ldrb	r2, [r3, #0]
 800b484:	193b      	adds	r3, r7, r4
 800b486:	3201      	adds	r2, #1
 800b488:	701a      	strb	r2, [r3, #0]
 800b48a:	230f      	movs	r3, #15
 800b48c:	18fb      	adds	r3, r7, r3
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	2b02      	cmp	r3, #2
 800b492:	d9e7      	bls.n	800b464 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800b494:	2300      	movs	r3, #0
 800b496:	e173      	b.n	800b780 <SGP_GetMeasurementValues+0x404>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800b498:	f003 f8fa 	bl	800e690 <HAL_GetTick>
 800b49c:	0003      	movs	r3, r0
 800b49e:	22fa      	movs	r2, #250	@ 0xfa
 800b4a0:	0092      	lsls	r2, r2, #2
 800b4a2:	189a      	adds	r2, r3, r2
 800b4a4:	4b9c      	ldr	r3, [pc, #624]	@ (800b718 <SGP_GetMeasurementValues+0x39c>)
 800b4a6:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800b4a8:	f7ff ff5a 	bl	800b360 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800b4ac:	4b9b      	ldr	r3, [pc, #620]	@ (800b71c <SGP_GetMeasurementValues+0x3a0>)
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	b2da      	uxtb	r2, r3
 800b4b4:	4b99      	ldr	r3, [pc, #612]	@ (800b71c <SGP_GetMeasurementValues+0x3a0>)
 800b4b6:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800b4b8:	4b98      	ldr	r3, [pc, #608]	@ (800b71c <SGP_GetMeasurementValues+0x3a0>)
 800b4ba:	781a      	ldrb	r2, [r3, #0]
 800b4bc:	4b98      	ldr	r3, [pc, #608]	@ (800b720 <SGP_GetMeasurementValues+0x3a4>)
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d200      	bcs.n	800b4c6 <SGP_GetMeasurementValues+0x14a>
 800b4c4:	e144      	b.n	800b750 <SGP_GetMeasurementValues+0x3d4>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800b4c6:	4b8d      	ldr	r3, [pc, #564]	@ (800b6fc <SGP_GetMeasurementValues+0x380>)
 800b4c8:	785b      	ldrb	r3, [r3, #1]
 800b4ca:	021b      	lsls	r3, r3, #8
 800b4cc:	b21a      	sxth	r2, r3
 800b4ce:	4b8b      	ldr	r3, [pc, #556]	@ (800b6fc <SGP_GetMeasurementValues+0x380>)
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	b21b      	sxth	r3, r3
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	b21a      	sxth	r2, r3
 800b4d8:	240c      	movs	r4, #12
 800b4da:	193b      	adds	r3, r7, r4
 800b4dc:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800b4e2:	193b      	adds	r3, r7, r4
 800b4e4:	8819      	ldrh	r1, [r3, #0]
 800b4e6:	2308      	movs	r3, #8
 800b4e8:	18fa      	adds	r2, r7, r3
 800b4ea:	4b8e      	ldr	r3, [pc, #568]	@ (800b724 <SGP_GetMeasurementValues+0x3a8>)
 800b4ec:	0018      	movs	r0, r3
 800b4ee:	f7fe fe9f 	bl	800a230 <GasIndexAlgorithm_process>
      sgp40samplecounter++;
 800b4f2:	4b8d      	ldr	r3, [pc, #564]	@ (800b728 <SGP_GetMeasurementValues+0x3ac>)
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	b2da      	uxtb	r2, r3
 800b4fa:	4b8b      	ldr	r3, [pc, #556]	@ (800b728 <SGP_GetMeasurementValues+0x3ac>)
 800b4fc:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800b4fe:	4b8a      	ldr	r3, [pc, #552]	@ (800b728 <SGP_GetMeasurementValues+0x3ac>)
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	2b01      	cmp	r3, #1
 800b504:	d10d      	bne.n	800b522 <SGP_GetMeasurementValues+0x1a6>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800b506:	193b      	adds	r3, r7, r4
 800b508:	881b      	ldrh	r3, [r3, #0]
 800b50a:	4a88      	ldr	r2, [pc, #544]	@ (800b72c <SGP_GetMeasurementValues+0x3b0>)
 800b50c:	4981      	ldr	r1, [pc, #516]	@ (800b714 <SGP_GetMeasurementValues+0x398>)
 800b50e:	2003      	movs	r0, #3
 800b510:	f002 fc68 	bl	800dde4 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	4a86      	ldr	r2, [pc, #536]	@ (800b730 <SGP_GetMeasurementValues+0x3b4>)
 800b518:	497e      	ldr	r1, [pc, #504]	@ (800b714 <SGP_GetMeasurementValues+0x398>)
 800b51a:	2003      	movs	r0, #3
 800b51c:	f002 fc62 	bl	800dde4 <CreateLine>
 800b520:	e006      	b.n	800b530 <SGP_GetMeasurementValues+0x1b4>
      }
      else {
        if (sgp40samplecounter == 11) {
 800b522:	4b81      	ldr	r3, [pc, #516]	@ (800b728 <SGP_GetMeasurementValues+0x3ac>)
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	2b0b      	cmp	r3, #11
 800b528:	d102      	bne.n	800b530 <SGP_GetMeasurementValues+0x1b4>
          sgp40samplecounter = 0;
 800b52a:	4b7f      	ldr	r3, [pc, #508]	@ (800b728 <SGP_GetMeasurementValues+0x3ac>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	701a      	strb	r2, [r3, #0]
        }
      }
      *vocIndex = tempVocIndex;
 800b530:	68ba      	ldr	r2, [r7, #8]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0 && *vocIndex <= 100){
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	dd5a      	ble.n	800b5f4 <SGP_GetMeasurementValues+0x278>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2b64      	cmp	r3, #100	@ 0x64
 800b544:	dc56      	bgt.n	800b5f4 <SGP_GetMeasurementValues+0x278>
        Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	0018      	movs	r0, r3
 800b54c:	f7f7 ff38 	bl	80033c0 <__aeabi_i2d>
 800b550:	2200      	movs	r2, #0
 800b552:	4b78      	ldr	r3, [pc, #480]	@ (800b734 <SGP_GetMeasurementValues+0x3b8>)
 800b554:	f7f6 fc2e 	bl	8001db4 <__aeabi_ddiv>
 800b558:	0002      	movs	r2, r0
 800b55a:	000b      	movs	r3, r1
 800b55c:	2000      	movs	r0, #0
 800b55e:	4976      	ldr	r1, [pc, #472]	@ (800b738 <SGP_GetMeasurementValues+0x3bc>)
 800b560:	f7f7 fb34 	bl	8002bcc <__aeabi_dsub>
 800b564:	0002      	movs	r2, r0
 800b566:	000b      	movs	r3, r1
 800b568:	0014      	movs	r4, r2
 800b56a:	001d      	movs	r5, r3
 800b56c:	4b73      	ldr	r3, [pc, #460]	@ (800b73c <SGP_GetMeasurementValues+0x3c0>)
 800b56e:	881b      	ldrh	r3, [r3, #0]
 800b570:	0018      	movs	r0, r3
 800b572:	f7f7 ff25 	bl	80033c0 <__aeabi_i2d>
 800b576:	0002      	movs	r2, r0
 800b578:	000b      	movs	r3, r1
 800b57a:	0020      	movs	r0, r4
 800b57c:	0029      	movs	r1, r5
 800b57e:	f7f7 f85d 	bl	800263c <__aeabi_dmul>
 800b582:	0002      	movs	r2, r0
 800b584:	000b      	movs	r3, r1
 800b586:	0010      	movs	r0, r2
 800b588:	0019      	movs	r1, r3
 800b58a:	f7f5 f85f 	bl	800064c <__aeabi_d2uiz>
 800b58e:	0003      	movs	r3, r0
 800b590:	b29a      	uxth	r2, r3
 800b592:	4b6b      	ldr	r3, [pc, #428]	@ (800b740 <SGP_GetMeasurementValues+0x3c4>)
 800b594:	801a      	strh	r2, [r3, #0]
        Blue = (*vocIndex/100.0)*TimeValue;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	0018      	movs	r0, r3
 800b59c:	f7f7 ff10 	bl	80033c0 <__aeabi_i2d>
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	4b64      	ldr	r3, [pc, #400]	@ (800b734 <SGP_GetMeasurementValues+0x3b8>)
 800b5a4:	f7f6 fc06 	bl	8001db4 <__aeabi_ddiv>
 800b5a8:	0002      	movs	r2, r0
 800b5aa:	000b      	movs	r3, r1
 800b5ac:	0014      	movs	r4, r2
 800b5ae:	001d      	movs	r5, r3
 800b5b0:	4b62      	ldr	r3, [pc, #392]	@ (800b73c <SGP_GetMeasurementValues+0x3c0>)
 800b5b2:	881b      	ldrh	r3, [r3, #0]
 800b5b4:	0018      	movs	r0, r3
 800b5b6:	f7f7 ff03 	bl	80033c0 <__aeabi_i2d>
 800b5ba:	0002      	movs	r2, r0
 800b5bc:	000b      	movs	r3, r1
 800b5be:	0020      	movs	r0, r4
 800b5c0:	0029      	movs	r1, r5
 800b5c2:	f7f7 f83b 	bl	800263c <__aeabi_dmul>
 800b5c6:	0002      	movs	r2, r0
 800b5c8:	000b      	movs	r3, r1
 800b5ca:	0010      	movs	r0, r2
 800b5cc:	0019      	movs	r1, r3
 800b5ce:	f7f5 f83d 	bl	800064c <__aeabi_d2uiz>
 800b5d2:	0003      	movs	r3, r0
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	4b5b      	ldr	r3, [pc, #364]	@ (800b744 <SGP_GetMeasurementValues+0x3c8>)
 800b5d8:	801a      	strh	r2, [r3, #0]
        Red = TimeValue;
 800b5da:	4b58      	ldr	r3, [pc, #352]	@ (800b73c <SGP_GetMeasurementValues+0x3c0>)
 800b5dc:	881a      	ldrh	r2, [r3, #0]
 800b5de:	4b5a      	ldr	r3, [pc, #360]	@ (800b748 <SGP_GetMeasurementValues+0x3cc>)
 800b5e0:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800b5e2:	4b59      	ldr	r3, [pc, #356]	@ (800b748 <SGP_GetMeasurementValues+0x3cc>)
 800b5e4:	8818      	ldrh	r0, [r3, #0]
 800b5e6:	4b56      	ldr	r3, [pc, #344]	@ (800b740 <SGP_GetMeasurementValues+0x3c4>)
 800b5e8:	8819      	ldrh	r1, [r3, #0]
 800b5ea:	4b56      	ldr	r3, [pc, #344]	@ (800b744 <SGP_GetMeasurementValues+0x3c8>)
 800b5ec:	881b      	ldrh	r3, [r3, #0]
 800b5ee:	001a      	movs	r2, r3
 800b5f0:	f001 fbda 	bl	800cda8 <SetVocLED>
      }
      if(*vocIndex > 100){
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2b64      	cmp	r3, #100	@ 0x64
 800b5fa:	dd66      	ble.n	800b6ca <SGP_GetMeasurementValues+0x34e>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	0018      	movs	r0, r3
 800b602:	f7f7 fedd 	bl	80033c0 <__aeabi_i2d>
 800b606:	2200      	movs	r2, #0
 800b608:	4b4a      	ldr	r3, [pc, #296]	@ (800b734 <SGP_GetMeasurementValues+0x3b8>)
 800b60a:	f7f7 fadf 	bl	8002bcc <__aeabi_dsub>
 800b60e:	0002      	movs	r2, r0
 800b610:	000b      	movs	r3, r1
 800b612:	0010      	movs	r0, r2
 800b614:	0019      	movs	r1, r3
 800b616:	2200      	movs	r2, #0
 800b618:	4b4c      	ldr	r3, [pc, #304]	@ (800b74c <SGP_GetMeasurementValues+0x3d0>)
 800b61a:	f7f6 fbcb 	bl	8001db4 <__aeabi_ddiv>
 800b61e:	0002      	movs	r2, r0
 800b620:	000b      	movs	r3, r1
 800b622:	0014      	movs	r4, r2
 800b624:	001d      	movs	r5, r3
 800b626:	4b45      	ldr	r3, [pc, #276]	@ (800b73c <SGP_GetMeasurementValues+0x3c0>)
 800b628:	881b      	ldrh	r3, [r3, #0]
 800b62a:	0018      	movs	r0, r3
 800b62c:	f7f7 fec8 	bl	80033c0 <__aeabi_i2d>
 800b630:	0002      	movs	r2, r0
 800b632:	000b      	movs	r3, r1
 800b634:	0020      	movs	r0, r4
 800b636:	0029      	movs	r1, r5
 800b638:	f7f7 f800 	bl	800263c <__aeabi_dmul>
 800b63c:	0002      	movs	r2, r0
 800b63e:	000b      	movs	r3, r1
 800b640:	0010      	movs	r0, r2
 800b642:	0019      	movs	r1, r3
 800b644:	f7f5 f802 	bl	800064c <__aeabi_d2uiz>
 800b648:	0003      	movs	r3, r0
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	4b3c      	ldr	r3, [pc, #240]	@ (800b740 <SGP_GetMeasurementValues+0x3c4>)
 800b64e:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	0018      	movs	r0, r3
 800b656:	f7f7 feb3 	bl	80033c0 <__aeabi_i2d>
 800b65a:	2200      	movs	r2, #0
 800b65c:	4b35      	ldr	r3, [pc, #212]	@ (800b734 <SGP_GetMeasurementValues+0x3b8>)
 800b65e:	f7f7 fab5 	bl	8002bcc <__aeabi_dsub>
 800b662:	0002      	movs	r2, r0
 800b664:	000b      	movs	r3, r1
 800b666:	0010      	movs	r0, r2
 800b668:	0019      	movs	r1, r3
 800b66a:	2200      	movs	r2, #0
 800b66c:	4b37      	ldr	r3, [pc, #220]	@ (800b74c <SGP_GetMeasurementValues+0x3d0>)
 800b66e:	f7f6 fba1 	bl	8001db4 <__aeabi_ddiv>
 800b672:	0002      	movs	r2, r0
 800b674:	000b      	movs	r3, r1
 800b676:	2000      	movs	r0, #0
 800b678:	492f      	ldr	r1, [pc, #188]	@ (800b738 <SGP_GetMeasurementValues+0x3bc>)
 800b67a:	f7f7 faa7 	bl	8002bcc <__aeabi_dsub>
 800b67e:	0002      	movs	r2, r0
 800b680:	000b      	movs	r3, r1
 800b682:	0014      	movs	r4, r2
 800b684:	001d      	movs	r5, r3
 800b686:	4b2d      	ldr	r3, [pc, #180]	@ (800b73c <SGP_GetMeasurementValues+0x3c0>)
 800b688:	881b      	ldrh	r3, [r3, #0]
 800b68a:	0018      	movs	r0, r3
 800b68c:	f7f7 fe98 	bl	80033c0 <__aeabi_i2d>
 800b690:	0002      	movs	r2, r0
 800b692:	000b      	movs	r3, r1
 800b694:	0020      	movs	r0, r4
 800b696:	0029      	movs	r1, r5
 800b698:	f7f6 ffd0 	bl	800263c <__aeabi_dmul>
 800b69c:	0002      	movs	r2, r0
 800b69e:	000b      	movs	r3, r1
 800b6a0:	0010      	movs	r0, r2
 800b6a2:	0019      	movs	r1, r3
 800b6a4:	f7f4 ffd2 	bl	800064c <__aeabi_d2uiz>
 800b6a8:	0003      	movs	r3, r0
 800b6aa:	b29a      	uxth	r2, r3
 800b6ac:	4b26      	ldr	r3, [pc, #152]	@ (800b748 <SGP_GetMeasurementValues+0x3cc>)
 800b6ae:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800b6b0:	4b22      	ldr	r3, [pc, #136]	@ (800b73c <SGP_GetMeasurementValues+0x3c0>)
 800b6b2:	881a      	ldrh	r2, [r3, #0]
 800b6b4:	4b23      	ldr	r3, [pc, #140]	@ (800b744 <SGP_GetMeasurementValues+0x3c8>)
 800b6b6:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800b6b8:	4b23      	ldr	r3, [pc, #140]	@ (800b748 <SGP_GetMeasurementValues+0x3cc>)
 800b6ba:	8818      	ldrh	r0, [r3, #0]
 800b6bc:	4b20      	ldr	r3, [pc, #128]	@ (800b740 <SGP_GetMeasurementValues+0x3c4>)
 800b6be:	8819      	ldrh	r1, [r3, #0]
 800b6c0:	4b20      	ldr	r3, [pc, #128]	@ (800b744 <SGP_GetMeasurementValues+0x3c8>)
 800b6c2:	881b      	ldrh	r3, [r3, #0]
 800b6c4:	001a      	movs	r2, r3
 800b6c6:	f001 fb6f 	bl	800cda8 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800b6ca:	4b14      	ldr	r3, [pc, #80]	@ (800b71c <SGP_GetMeasurementValues+0x3a0>)
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	701a      	strb	r2, [r3, #0]
//      Debug("SGP_Measurement completely done.");
      HT_MeasurementReceived = false;
 800b6d0:	4b05      	ldr	r3, [pc, #20]	@ (800b6e8 <SGP_GetMeasurementValues+0x36c>)
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800b6d6:	4b03      	ldr	r3, [pc, #12]	@ (800b6e4 <SGP_GetMeasurementValues+0x368>)
 800b6d8:	2200      	movs	r2, #0
 800b6da:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e04f      	b.n	800b780 <SGP_GetMeasurementValues+0x404>
 800b6e0:	20001298 	.word	0x20001298
 800b6e4:	20001345 	.word	0x20001345
 800b6e8:	20001344 	.word	0x20001344
 800b6ec:	20000098 	.word	0x20000098
 800b6f0:	200000ac 	.word	0x200000ac
 800b6f4:	20000090 	.word	0x20000090
 800b6f8:	20001299 	.word	0x20001299
 800b6fc:	20001288 	.word	0x20001288
 800b700:	0802435c 	.word	0x0802435c
 800b704:	08024384 	.word	0x08024384
 800b708:	08024388 	.word	0x08024388
 800b70c:	080243a8 	.word	0x080243a8
 800b710:	080243ac 	.word	0x080243ac
 800b714:	080243cc 	.word	0x080243cc
 800b718:	200000a8 	.word	0x200000a8
 800b71c:	20001291 	.word	0x20001291
 800b720:	200000a2 	.word	0x200000a2
 800b724:	2000129c 	.word	0x2000129c
 800b728:	20001292 	.word	0x20001292
 800b72c:	080243d0 	.word	0x080243d0
 800b730:	080243ec 	.word	0x080243ec
 800b734:	40590000 	.word	0x40590000
 800b738:	3ff00000 	.word	0x3ff00000
 800b73c:	200000b0 	.word	0x200000b0
 800b740:	20001350 	.word	0x20001350
 800b744:	2000134e 	.word	0x2000134e
 800b748:	2000134c 	.word	0x2000134c
 800b74c:	40790000 	.word	0x40790000
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800b750:	f7ff fdf8 	bl	800b344 <SGP_MeasurementDone>
 800b754:	1e03      	subs	r3, r0, #0
 800b756:	d012      	beq.n	800b77e <SGP_GetMeasurementValues+0x402>
 800b758:	4b0b      	ldr	r3, [pc, #44]	@ (800b788 <SGP_GetMeasurementValues+0x40c>)
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00e      	beq.n	800b77e <SGP_GetMeasurementValues+0x402>
 800b760:	4b0a      	ldr	r3, [pc, #40]	@ (800b78c <SGP_GetMeasurementValues+0x410>)
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d00a      	beq.n	800b77e <SGP_GetMeasurementValues+0x402>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800b768:	4a09      	ldr	r2, [pc, #36]	@ (800b790 <SGP_GetMeasurementValues+0x414>)
 800b76a:	4b0a      	ldr	r3, [pc, #40]	@ (800b794 <SGP_GetMeasurementValues+0x418>)
 800b76c:	0019      	movs	r1, r3
 800b76e:	2003      	movs	r0, #3
 800b770:	f002 fb38 	bl	800dde4 <CreateLine>
    SGP_StartMeasurement();
 800b774:	f7ff fd92 	bl	800b29c <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800b778:	4b07      	ldr	r3, [pc, #28]	@ (800b798 <SGP_GetMeasurementValues+0x41c>)
 800b77a:	2200      	movs	r2, #0
 800b77c:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	0018      	movs	r0, r3
 800b782:	46bd      	mov	sp, r7
 800b784:	b004      	add	sp, #16
 800b786:	bdb0      	pop	{r4, r5, r7, pc}
 800b788:	20001298 	.word	0x20001298
 800b78c:	20001299 	.word	0x20001299
 800b790:	08024408 	.word	0x08024408
 800b794:	080243cc 	.word	0x080243cc
 800b798:	20001345 	.word	0x20001345

0800b79c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b7a2:	4b1a      	ldr	r3, [pc, #104]	@ (800b80c <SGP_DeviceConnected+0x70>)
 800b7a4:	2202      	movs	r2, #2
 800b7a6:	0019      	movs	r1, r3
 800b7a8:	2059      	movs	r0, #89	@ 0x59
 800b7aa:	f7ff fd23 	bl	800b1f4 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800b7ae:	2001      	movs	r0, #1
 800b7b0:	f002 ff78 	bl	800e6a4 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800b7b4:	4b16      	ldr	r3, [pc, #88]	@ (800b810 <SGP_DeviceConnected+0x74>)
 800b7b6:	2209      	movs	r2, #9
 800b7b8:	0019      	movs	r1, r3
 800b7ba:	2059      	movs	r0, #89	@ 0x59
 800b7bc:	f7ff fcfc 	bl	800b1b8 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b7c0:	1dfb      	adds	r3, r7, #7
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	701a      	strb	r2, [r3, #0]
 800b7c6:	e011      	b.n	800b7ec <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800b7c8:	1dfb      	adds	r3, r7, #7
 800b7ca:	7818      	ldrb	r0, [r3, #0]
 800b7cc:	1dfb      	adds	r3, r7, #7
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	4a0f      	ldr	r2, [pc, #60]	@ (800b810 <SGP_DeviceConnected+0x74>)
 800b7d2:	5cd3      	ldrb	r3, [r2, r3]
 800b7d4:	4a0f      	ldr	r2, [pc, #60]	@ (800b814 <SGP_DeviceConnected+0x78>)
 800b7d6:	4910      	ldr	r1, [pc, #64]	@ (800b818 <SGP_DeviceConnected+0x7c>)
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	0003      	movs	r3, r0
 800b7dc:	2002      	movs	r0, #2
 800b7de:	f002 fb01 	bl	800dde4 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b7e2:	1dfb      	adds	r3, r7, #7
 800b7e4:	781a      	ldrb	r2, [r3, #0]
 800b7e6:	1dfb      	adds	r3, r7, #7
 800b7e8:	3201      	adds	r2, #1
 800b7ea:	701a      	strb	r2, [r3, #0]
 800b7ec:	1dfb      	adds	r3, r7, #7
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	2b08      	cmp	r3, #8
 800b7f2:	d9e9      	bls.n	800b7c8 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800b7f4:	4b06      	ldr	r3, [pc, #24]	@ (800b810 <SGP_DeviceConnected+0x74>)
 800b7f6:	2203      	movs	r2, #3
 800b7f8:	2109      	movs	r1, #9
 800b7fa:	0018      	movs	r0, r3
 800b7fc:	f000 f80e 	bl	800b81c <CheckCRC>
 800b800:	0003      	movs	r3, r0
}
 800b802:	0018      	movs	r0, r3
 800b804:	46bd      	mov	sp, r7
 800b806:	b002      	add	sp, #8
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	46c0      	nop			@ (mov r8, r8)
 800b80c:	2000008c 	.word	0x2000008c
 800b810:	20001288 	.word	0x20001288
 800b814:	08024428 	.word	0x08024428
 800b818:	080243a8 	.word	0x080243a8

0800b81c <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800b81c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b81e:	b08f      	sub	sp, #60	@ 0x3c
 800b820:	af00      	add	r7, sp, #0
 800b822:	6278      	str	r0, [r7, #36]	@ 0x24
 800b824:	0008      	movs	r0, r1
 800b826:	0011      	movs	r1, r2
 800b828:	2323      	movs	r3, #35	@ 0x23
 800b82a:	18fb      	adds	r3, r7, r3
 800b82c:	1c02      	adds	r2, r0, #0
 800b82e:	701a      	strb	r2, [r3, #0]
 800b830:	2322      	movs	r3, #34	@ 0x22
 800b832:	18fb      	adds	r3, r7, r3
 800b834:	1c0a      	adds	r2, r1, #0
 800b836:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b838:	2317      	movs	r3, #23
 800b83a:	2220      	movs	r2, #32
 800b83c:	189b      	adds	r3, r3, r2
 800b83e:	19db      	adds	r3, r3, r7
 800b840:	2200      	movs	r2, #0
 800b842:	701a      	strb	r2, [r3, #0]
 800b844:	e09f      	b.n	800b986 <CheckCRC+0x16a>
 800b846:	466b      	mov	r3, sp
 800b848:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800b84a:	2322      	movs	r3, #34	@ 0x22
 800b84c:	18fb      	adds	r3, r7, r3
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	001a      	movs	r2, r3
 800b852:	3a01      	subs	r2, #1
 800b854:	633a      	str	r2, [r7, #48]	@ 0x30
 800b856:	60bb      	str	r3, [r7, #8]
 800b858:	2200      	movs	r2, #0
 800b85a:	60fa      	str	r2, [r7, #12]
 800b85c:	68b8      	ldr	r0, [r7, #8]
 800b85e:	68f9      	ldr	r1, [r7, #12]
 800b860:	0002      	movs	r2, r0
 800b862:	0f52      	lsrs	r2, r2, #29
 800b864:	000c      	movs	r4, r1
 800b866:	00e4      	lsls	r4, r4, #3
 800b868:	61fc      	str	r4, [r7, #28]
 800b86a:	69fc      	ldr	r4, [r7, #28]
 800b86c:	4314      	orrs	r4, r2
 800b86e:	61fc      	str	r4, [r7, #28]
 800b870:	0002      	movs	r2, r0
 800b872:	00d2      	lsls	r2, r2, #3
 800b874:	61ba      	str	r2, [r7, #24]
 800b876:	603b      	str	r3, [r7, #0]
 800b878:	2200      	movs	r2, #0
 800b87a:	607a      	str	r2, [r7, #4]
 800b87c:	6838      	ldr	r0, [r7, #0]
 800b87e:	6879      	ldr	r1, [r7, #4]
 800b880:	0002      	movs	r2, r0
 800b882:	0f52      	lsrs	r2, r2, #29
 800b884:	000c      	movs	r4, r1
 800b886:	00e4      	lsls	r4, r4, #3
 800b888:	617c      	str	r4, [r7, #20]
 800b88a:	697c      	ldr	r4, [r7, #20]
 800b88c:	4314      	orrs	r4, r2
 800b88e:	617c      	str	r4, [r7, #20]
 800b890:	0002      	movs	r2, r0
 800b892:	00d2      	lsls	r2, r2, #3
 800b894:	613a      	str	r2, [r7, #16]
 800b896:	3307      	adds	r3, #7
 800b898:	08db      	lsrs	r3, r3, #3
 800b89a:	00db      	lsls	r3, r3, #3
 800b89c:	466a      	mov	r2, sp
 800b89e:	1ad3      	subs	r3, r2, r3
 800b8a0:	469d      	mov	sp, r3
 800b8a2:	466b      	mov	r3, sp
 800b8a4:	3300      	adds	r3, #0
 800b8a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800b8a8:	2316      	movs	r3, #22
 800b8aa:	2220      	movs	r2, #32
 800b8ac:	189b      	adds	r3, r3, r2
 800b8ae:	19db      	adds	r3, r3, r7
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	701a      	strb	r2, [r3, #0]
 800b8b4:	e01e      	b.n	800b8f4 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800b8b6:	2317      	movs	r3, #23
 800b8b8:	2220      	movs	r2, #32
 800b8ba:	189b      	adds	r3, r3, r2
 800b8bc:	19db      	adds	r3, r3, r7
 800b8be:	781a      	ldrb	r2, [r3, #0]
 800b8c0:	2116      	movs	r1, #22
 800b8c2:	2320      	movs	r3, #32
 800b8c4:	18cb      	adds	r3, r1, r3
 800b8c6:	19db      	adds	r3, r3, r7
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	18d3      	adds	r3, r2, r3
 800b8cc:	001a      	movs	r2, r3
 800b8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d0:	189a      	adds	r2, r3, r2
 800b8d2:	0008      	movs	r0, r1
 800b8d4:	2320      	movs	r3, #32
 800b8d6:	18cb      	adds	r3, r1, r3
 800b8d8:	19db      	adds	r3, r3, r7
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	7811      	ldrb	r1, [r2, #0]
 800b8de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8e0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800b8e2:	2320      	movs	r3, #32
 800b8e4:	18c3      	adds	r3, r0, r3
 800b8e6:	19db      	adds	r3, r3, r7
 800b8e8:	781a      	ldrb	r2, [r3, #0]
 800b8ea:	2320      	movs	r3, #32
 800b8ec:	18c3      	adds	r3, r0, r3
 800b8ee:	19db      	adds	r3, r3, r7
 800b8f0:	3201      	adds	r2, #1
 800b8f2:	701a      	strb	r2, [r3, #0]
 800b8f4:	2316      	movs	r3, #22
 800b8f6:	2220      	movs	r2, #32
 800b8f8:	189b      	adds	r3, r3, r2
 800b8fa:	19da      	adds	r2, r3, r7
 800b8fc:	2322      	movs	r3, #34	@ 0x22
 800b8fe:	18fb      	adds	r3, r7, r3
 800b900:	7812      	ldrb	r2, [r2, #0]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	429a      	cmp	r2, r3
 800b906:	d3d6      	bcc.n	800b8b6 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800b908:	2417      	movs	r4, #23
 800b90a:	2320      	movs	r3, #32
 800b90c:	18e3      	adds	r3, r4, r3
 800b90e:	19db      	adds	r3, r3, r7
 800b910:	781a      	ldrb	r2, [r3, #0]
 800b912:	2322      	movs	r3, #34	@ 0x22
 800b914:	18fb      	adds	r3, r7, r3
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	18d3      	adds	r3, r2, r3
 800b91a:	3b01      	subs	r3, #1
 800b91c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b91e:	18d2      	adds	r2, r2, r3
 800b920:	250b      	movs	r5, #11
 800b922:	2320      	movs	r3, #32
 800b924:	18eb      	adds	r3, r5, r3
 800b926:	19db      	adds	r3, r3, r7
 800b928:	7812      	ldrb	r2, [r2, #0]
 800b92a:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800b92c:	2322      	movs	r3, #34	@ 0x22
 800b92e:	18fb      	adds	r3, r7, r3
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	3b01      	subs	r3, #1
 800b934:	b2da      	uxtb	r2, r3
 800b936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b938:	0011      	movs	r1, r2
 800b93a:	0018      	movs	r0, r3
 800b93c:	f000 f838 	bl	800b9b0 <CalculateCRC>
 800b940:	0003      	movs	r3, r0
 800b942:	001a      	movs	r2, r3
 800b944:	2320      	movs	r3, #32
 800b946:	18eb      	adds	r3, r5, r3
 800b948:	19db      	adds	r3, r3, r7
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d00c      	beq.n	800b96a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800b950:	2320      	movs	r3, #32
 800b952:	18e3      	adds	r3, r4, r3
 800b954:	19db      	adds	r3, r3, r7
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	3301      	adds	r3, #1
 800b95a:	4a13      	ldr	r2, [pc, #76]	@ (800b9a8 <CheckCRC+0x18c>)
 800b95c:	4913      	ldr	r1, [pc, #76]	@ (800b9ac <CheckCRC+0x190>)
 800b95e:	2001      	movs	r0, #1
 800b960:	f002 fa40 	bl	800dde4 <CreateLine>
      return false;
 800b964:	2300      	movs	r3, #0
 800b966:	46b5      	mov	sp, r6
 800b968:	e019      	b.n	800b99e <CheckCRC+0x182>
 800b96a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b96c:	2217      	movs	r2, #23
 800b96e:	2320      	movs	r3, #32
 800b970:	18d3      	adds	r3, r2, r3
 800b972:	19db      	adds	r3, r3, r7
 800b974:	2120      	movs	r1, #32
 800b976:	1852      	adds	r2, r2, r1
 800b978:	19d1      	adds	r1, r2, r7
 800b97a:	2222      	movs	r2, #34	@ 0x22
 800b97c:	18ba      	adds	r2, r7, r2
 800b97e:	7809      	ldrb	r1, [r1, #0]
 800b980:	7812      	ldrb	r2, [r2, #0]
 800b982:	188a      	adds	r2, r1, r2
 800b984:	701a      	strb	r2, [r3, #0]
 800b986:	2317      	movs	r3, #23
 800b988:	2220      	movs	r2, #32
 800b98a:	189b      	adds	r3, r3, r2
 800b98c:	19da      	adds	r2, r3, r7
 800b98e:	2323      	movs	r3, #35	@ 0x23
 800b990:	18fb      	adds	r3, r7, r3
 800b992:	7812      	ldrb	r2, [r2, #0]
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	429a      	cmp	r2, r3
 800b998:	d200      	bcs.n	800b99c <CheckCRC+0x180>
 800b99a:	e754      	b.n	800b846 <CheckCRC+0x2a>
    }
  }
  return true;
 800b99c:	2301      	movs	r3, #1
}
 800b99e:	0018      	movs	r0, r3
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	b00f      	add	sp, #60	@ 0x3c
 800b9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9a6:	46c0      	nop			@ (mov r8, r8)
 800b9a8:	08024448 	.word	0x08024448
 800b9ac:	08024384 	.word	0x08024384

0800b9b0 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	000a      	movs	r2, r1
 800b9ba:	1cfb      	adds	r3, r7, #3
 800b9bc:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800b9be:	230f      	movs	r3, #15
 800b9c0:	18fb      	adds	r3, r7, r3
 800b9c2:	22ff      	movs	r2, #255	@ 0xff
 800b9c4:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800b9c6:	230e      	movs	r3, #14
 800b9c8:	18fb      	adds	r3, r7, r3
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	701a      	strb	r2, [r3, #0]
 800b9ce:	e037      	b.n	800ba40 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800b9d0:	230e      	movs	r3, #14
 800b9d2:	18fb      	adds	r3, r7, r3
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	18d3      	adds	r3, r2, r3
 800b9da:	7819      	ldrb	r1, [r3, #0]
 800b9dc:	220f      	movs	r2, #15
 800b9de:	18bb      	adds	r3, r7, r2
 800b9e0:	18ba      	adds	r2, r7, r2
 800b9e2:	7812      	ldrb	r2, [r2, #0]
 800b9e4:	404a      	eors	r2, r1
 800b9e6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800b9e8:	230d      	movs	r3, #13
 800b9ea:	18fb      	adds	r3, r7, r3
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	701a      	strb	r2, [r3, #0]
 800b9f0:	e01b      	b.n	800ba2a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800b9f2:	210f      	movs	r1, #15
 800b9f4:	187b      	adds	r3, r7, r1
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	b25b      	sxtb	r3, r3
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	da09      	bge.n	800ba12 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800b9fe:	187b      	adds	r3, r7, r1
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	005b      	lsls	r3, r3, #1
 800ba04:	b25b      	sxtb	r3, r3
 800ba06:	2231      	movs	r2, #49	@ 0x31
 800ba08:	4053      	eors	r3, r2
 800ba0a:	b25a      	sxtb	r2, r3
 800ba0c:	187b      	adds	r3, r7, r1
 800ba0e:	701a      	strb	r2, [r3, #0]
 800ba10:	e005      	b.n	800ba1e <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800ba12:	230f      	movs	r3, #15
 800ba14:	18fa      	adds	r2, r7, r3
 800ba16:	18fb      	adds	r3, r7, r3
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	18db      	adds	r3, r3, r3
 800ba1c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800ba1e:	210d      	movs	r1, #13
 800ba20:	187b      	adds	r3, r7, r1
 800ba22:	781a      	ldrb	r2, [r3, #0]
 800ba24:	187b      	adds	r3, r7, r1
 800ba26:	3201      	adds	r2, #1
 800ba28:	701a      	strb	r2, [r3, #0]
 800ba2a:	230d      	movs	r3, #13
 800ba2c:	18fb      	adds	r3, r7, r3
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	2b07      	cmp	r3, #7
 800ba32:	d9de      	bls.n	800b9f2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800ba34:	210e      	movs	r1, #14
 800ba36:	187b      	adds	r3, r7, r1
 800ba38:	781a      	ldrb	r2, [r3, #0]
 800ba3a:	187b      	adds	r3, r7, r1
 800ba3c:	3201      	adds	r2, #1
 800ba3e:	701a      	strb	r2, [r3, #0]
 800ba40:	230e      	movs	r3, #14
 800ba42:	18fa      	adds	r2, r7, r3
 800ba44:	1cfb      	adds	r3, r7, #3
 800ba46:	7812      	ldrb	r2, [r2, #0]
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d3c0      	bcc.n	800b9d0 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800ba4e:	230f      	movs	r3, #15
 800ba50:	18fb      	adds	r3, r7, r3
 800ba52:	781b      	ldrb	r3, [r3, #0]
}
 800ba54:	0018      	movs	r0, r3
 800ba56:	46bd      	mov	sp, r7
 800ba58:	b004      	add	sp, #16
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4936      	ldr	r1, [pc, #216]	@ (800bb44 <SGP_GetHT+0xe8>)
 800ba6c:	1c18      	adds	r0, r3, #0
 800ba6e:	f7f4 ff27 	bl	80008c0 <__aeabi_fadd>
 800ba72:	1c03      	adds	r3, r0, #0
 800ba74:	4934      	ldr	r1, [pc, #208]	@ (800bb48 <SGP_GetHT+0xec>)
 800ba76:	1c18      	adds	r0, r3, #0
 800ba78:	f7f5 f8ac 	bl	8000bd4 <__aeabi_fdiv>
 800ba7c:	1c03      	adds	r3, r0, #0
 800ba7e:	4933      	ldr	r1, [pc, #204]	@ (800bb4c <SGP_GetHT+0xf0>)
 800ba80:	1c18      	adds	r0, r3, #0
 800ba82:	f7f5 fa8d 	bl	8000fa0 <__aeabi_fmul>
 800ba86:	1c03      	adds	r3, r0, #0
 800ba88:	1c18      	adds	r0, r3, #0
 800ba8a:	f7f4 fdc7 	bl	800061c <__aeabi_f2uiz>
 800ba8e:	0003      	movs	r3, r0
 800ba90:	b29a      	uxth	r2, r3
 800ba92:	4b2f      	ldr	r3, [pc, #188]	@ (800bb50 <SGP_GetHT+0xf4>)
 800ba94:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	492e      	ldr	r1, [pc, #184]	@ (800bb54 <SGP_GetHT+0xf8>)
 800ba9c:	1c18      	adds	r0, r3, #0
 800ba9e:	f7f5 f899 	bl	8000bd4 <__aeabi_fdiv>
 800baa2:	1c03      	adds	r3, r0, #0
 800baa4:	4929      	ldr	r1, [pc, #164]	@ (800bb4c <SGP_GetHT+0xf0>)
 800baa6:	1c18      	adds	r0, r3, #0
 800baa8:	f7f5 fa7a 	bl	8000fa0 <__aeabi_fmul>
 800baac:	1c03      	adds	r3, r0, #0
 800baae:	1c18      	adds	r0, r3, #0
 800bab0:	f7f4 fdb4 	bl	800061c <__aeabi_f2uiz>
 800bab4:	0003      	movs	r3, r0
 800bab6:	b29a      	uxth	r2, r3
 800bab8:	4b27      	ldr	r3, [pc, #156]	@ (800bb58 <SGP_GetHT+0xfc>)
 800baba:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800babc:	4b26      	ldr	r3, [pc, #152]	@ (800bb58 <SGP_GetHT+0xfc>)
 800babe:	881b      	ldrh	r3, [r3, #0]
 800bac0:	0a1b      	lsrs	r3, r3, #8
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	b2da      	uxtb	r2, r3
 800bac6:	4b25      	ldr	r3, [pc, #148]	@ (800bb5c <SGP_GetHT+0x100>)
 800bac8:	709a      	strb	r2, [r3, #2]
 800baca:	4b24      	ldr	r3, [pc, #144]	@ (800bb5c <SGP_GetHT+0x100>)
 800bacc:	789a      	ldrb	r2, [r3, #2]
 800bace:	210c      	movs	r1, #12
 800bad0:	187b      	adds	r3, r7, r1
 800bad2:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800bad4:	4b20      	ldr	r3, [pc, #128]	@ (800bb58 <SGP_GetHT+0xfc>)
 800bad6:	881b      	ldrh	r3, [r3, #0]
 800bad8:	b2da      	uxtb	r2, r3
 800bada:	4b20      	ldr	r3, [pc, #128]	@ (800bb5c <SGP_GetHT+0x100>)
 800badc:	70da      	strb	r2, [r3, #3]
 800bade:	4b1f      	ldr	r3, [pc, #124]	@ (800bb5c <SGP_GetHT+0x100>)
 800bae0:	78da      	ldrb	r2, [r3, #3]
 800bae2:	187b      	adds	r3, r7, r1
 800bae4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800bae6:	187b      	adds	r3, r7, r1
 800bae8:	2102      	movs	r1, #2
 800baea:	0018      	movs	r0, r3
 800baec:	f7ff ff60 	bl	800b9b0 <CalculateCRC>
 800baf0:	0003      	movs	r3, r0
 800baf2:	001a      	movs	r2, r3
 800baf4:	4b19      	ldr	r3, [pc, #100]	@ (800bb5c <SGP_GetHT+0x100>)
 800baf6:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800baf8:	4b15      	ldr	r3, [pc, #84]	@ (800bb50 <SGP_GetHT+0xf4>)
 800bafa:	881b      	ldrh	r3, [r3, #0]
 800bafc:	0a1b      	lsrs	r3, r3, #8
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	b2da      	uxtb	r2, r3
 800bb02:	4b16      	ldr	r3, [pc, #88]	@ (800bb5c <SGP_GetHT+0x100>)
 800bb04:	715a      	strb	r2, [r3, #5]
 800bb06:	4b15      	ldr	r3, [pc, #84]	@ (800bb5c <SGP_GetHT+0x100>)
 800bb08:	795a      	ldrb	r2, [r3, #5]
 800bb0a:	2108      	movs	r1, #8
 800bb0c:	187b      	adds	r3, r7, r1
 800bb0e:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800bb10:	4b0f      	ldr	r3, [pc, #60]	@ (800bb50 <SGP_GetHT+0xf4>)
 800bb12:	881b      	ldrh	r3, [r3, #0]
 800bb14:	b2da      	uxtb	r2, r3
 800bb16:	4b11      	ldr	r3, [pc, #68]	@ (800bb5c <SGP_GetHT+0x100>)
 800bb18:	719a      	strb	r2, [r3, #6]
 800bb1a:	4b10      	ldr	r3, [pc, #64]	@ (800bb5c <SGP_GetHT+0x100>)
 800bb1c:	799a      	ldrb	r2, [r3, #6]
 800bb1e:	187b      	adds	r3, r7, r1
 800bb20:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800bb22:	187b      	adds	r3, r7, r1
 800bb24:	2102      	movs	r1, #2
 800bb26:	0018      	movs	r0, r3
 800bb28:	f7ff ff42 	bl	800b9b0 <CalculateCRC>
 800bb2c:	0003      	movs	r3, r0
 800bb2e:	001a      	movs	r2, r3
 800bb30:	4b0a      	ldr	r3, [pc, #40]	@ (800bb5c <SGP_GetHT+0x100>)
 800bb32:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800bb34:	4b0a      	ldr	r3, [pc, #40]	@ (800bb60 <SGP_GetHT+0x104>)
 800bb36:	2201      	movs	r2, #1
 800bb38:	701a      	strb	r2, [r3, #0]
}
 800bb3a:	46c0      	nop			@ (mov r8, r8)
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	b004      	add	sp, #16
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	46c0      	nop			@ (mov r8, r8)
 800bb44:	42340000 	.word	0x42340000
 800bb48:	432f0000 	.word	0x432f0000
 800bb4c:	477fff00 	.word	0x477fff00
 800bb50:	20001342 	.word	0x20001342
 800bb54:	42c80000 	.word	0x42c80000
 800bb58:	20001340 	.word	0x20001340
 800bb5c:	20000098 	.word	0x20000098
 800bb60:	20001344 	.word	0x20001344

0800bb64 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800bb64:	b580      	push	{r7, lr}
 800bb66:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800bb68:	4a09      	ldr	r2, [pc, #36]	@ (800bb90 <SGP_SoftReset+0x2c>)
 800bb6a:	4b0a      	ldr	r3, [pc, #40]	@ (800bb94 <SGP_SoftReset+0x30>)
 800bb6c:	0019      	movs	r1, r3
 800bb6e:	2003      	movs	r0, #3
 800bb70:	f002 f938 	bl	800dde4 <CreateLine>
  SGP_TurnHeaterOff();
 800bb74:	f7ff fbf4 	bl	800b360 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800bb78:	200a      	movs	r0, #10
 800bb7a:	f002 fd93 	bl	800e6a4 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bb7e:	4b06      	ldr	r3, [pc, #24]	@ (800bb98 <SGP_SoftReset+0x34>)
 800bb80:	2202      	movs	r2, #2
 800bb82:	0019      	movs	r1, r3
 800bb84:	2059      	movs	r0, #89	@ 0x59
 800bb86:	f7ff fb35 	bl	800b1f4 <WriteRegister>
}
 800bb8a:	46c0      	nop			@ (mov r8, r8)
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	080244f0 	.word	0x080244f0
 800bb94:	080243cc 	.word	0x080243cc
 800bb98:	200000a0 	.word	0x200000a0

0800bb9c <ResetVOCresult>:

void ResetVOCresult(void) {
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800bba0:	4b02      	ldr	r3, [pc, #8]	@ (800bbac <ResetVOCresult+0x10>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	601a      	str	r2, [r3, #0]
}
 800bba6:	46c0      	nop			@ (mov r8, r8)
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	20001348 	.word	0x20001348

0800bbb0 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800bbb4:	4b33      	ldr	r3, [pc, #204]	@ (800bc84 <SGP_Upkeep+0xd4>)
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	2b07      	cmp	r3, #7
 800bbba:	d856      	bhi.n	800bc6a <SGP_Upkeep+0xba>
 800bbbc:	009a      	lsls	r2, r3, #2
 800bbbe:	4b32      	ldr	r3, [pc, #200]	@ (800bc88 <SGP_Upkeep+0xd8>)
 800bbc0:	18d3      	adds	r3, r2, r3
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800bbc6:	4a31      	ldr	r2, [pc, #196]	@ (800bc8c <SGP_Upkeep+0xdc>)
 800bbc8:	4b31      	ldr	r3, [pc, #196]	@ (800bc90 <SGP_Upkeep+0xe0>)
 800bbca:	0019      	movs	r1, r3
 800bbcc:	2003      	movs	r0, #3
 800bbce:	f002 f909 	bl	800dde4 <CreateLine>
    break;
 800bbd2:	e051      	b.n	800bc78 <SGP_Upkeep+0xc8>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800bbd4:	f7ff ffe2 	bl	800bb9c <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800bbd8:	4b2a      	ldr	r3, [pc, #168]	@ (800bc84 <SGP_Upkeep+0xd4>)
 800bbda:	2201      	movs	r2, #1
 800bbdc:	701a      	strb	r2, [r3, #0]
    break;
 800bbde:	e04b      	b.n	800bc78 <SGP_Upkeep+0xc8>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800bbe0:	f7ff fb5c 	bl	800b29c <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800bbe4:	f001 f914 	bl	800ce10 <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800bbe8:	4b26      	ldr	r3, [pc, #152]	@ (800bc84 <SGP_Upkeep+0xd4>)
 800bbea:	2202      	movs	r2, #2
 800bbec:	701a      	strb	r2, [r3, #0]
    break;
 800bbee:	e043      	b.n	800bc78 <SGP_Upkeep+0xc8>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800bbf0:	4b28      	ldr	r3, [pc, #160]	@ (800bc94 <SGP_Upkeep+0xe4>)
 800bbf2:	0018      	movs	r0, r3
 800bbf4:	f7ff fbc2 	bl	800b37c <SGP_GetMeasurementValues>
 800bbf8:	1e03      	subs	r3, r0, #0
 800bbfa:	d03a      	beq.n	800bc72 <SGP_Upkeep+0xc2>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800bbfc:	4b21      	ldr	r3, [pc, #132]	@ (800bc84 <SGP_Upkeep+0xd4>)
 800bbfe:	2203      	movs	r2, #3
 800bc00:	701a      	strb	r2, [r3, #0]
    }
    break;
 800bc02:	e036      	b.n	800bc72 <SGP_Upkeep+0xc2>

  case SGP_STATE_PROCESS_RESULTS:
//    Debug("Processing results in SGP_STATE_PROCESS_RESULTS.");
    setVOC(vocIndex);
 800bc04:	4b23      	ldr	r3, [pc, #140]	@ (800bc94 <SGP_Upkeep+0xe4>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	0018      	movs	r0, r3
 800bc0c:	f7f7 fe8a 	bl	8003924 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800bc10:	4b1c      	ldr	r3, [pc, #112]	@ (800bc84 <SGP_Upkeep+0xd4>)
 800bc12:	2206      	movs	r2, #6
 800bc14:	701a      	strb	r2, [r3, #0]
    break;
 800bc16:	e02f      	b.n	800bc78 <SGP_Upkeep+0xc8>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800bc18:	4b1a      	ldr	r3, [pc, #104]	@ (800bc84 <SGP_Upkeep+0xd4>)
 800bc1a:	2207      	movs	r2, #7
 800bc1c:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800bc1e:	4b1e      	ldr	r3, [pc, #120]	@ (800bc98 <SGP_Upkeep+0xe8>)
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d10b      	bne.n	800bc3e <SGP_Upkeep+0x8e>
 800bc26:	4b1d      	ldr	r3, [pc, #116]	@ (800bc9c <SGP_Upkeep+0xec>)
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	4053      	eors	r3, r2
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d004      	beq.n	800bc3e <SGP_Upkeep+0x8e>
      // restart the SGP40 with a soft reset to enter idle mode
      SGP_SoftReset();
 800bc34:	f7ff ff96 	bl	800bb64 <SGP_SoftReset>
      SetVOCSensorStatus(false);
 800bc38:	2000      	movs	r0, #0
 800bc3a:	f7fc fac7 	bl	80081cc <SetVOCSensorStatus>
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800bc3e:	f002 fd27 	bl	800e690 <HAL_GetTick>
 800bc42:	0003      	movs	r3, r0
 800bc44:	22c8      	movs	r2, #200	@ 0xc8
 800bc46:	0092      	lsls	r2, r2, #2
 800bc48:	189a      	adds	r2, r3, r2
 800bc4a:	4b15      	ldr	r3, [pc, #84]	@ (800bca0 <SGP_Upkeep+0xf0>)
 800bc4c:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800bc4e:	f001 f8f7 	bl	800ce40 <ResetMeasurementIndicator>
  break;
 800bc52:	e011      	b.n	800bc78 <SGP_Upkeep+0xc8>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800bc54:	4b12      	ldr	r3, [pc, #72]	@ (800bca0 <SGP_Upkeep+0xf0>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	0018      	movs	r0, r3
 800bc5a:	f002 f86d 	bl	800dd38 <TimestampIsReached>
 800bc5e:	1e03      	subs	r3, r0, #0
 800bc60:	d009      	beq.n	800bc76 <SGP_Upkeep+0xc6>
//      Debug("in SGP_STATE_WAIT");
      SGPState = SGP_STATE_INIT;
 800bc62:	4b08      	ldr	r3, [pc, #32]	@ (800bc84 <SGP_Upkeep+0xd4>)
 800bc64:	2200      	movs	r2, #0
 800bc66:	701a      	strb	r2, [r3, #0]
    }
    break;
 800bc68:	e005      	b.n	800bc76 <SGP_Upkeep+0xc6>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800bc6a:	4b06      	ldr	r3, [pc, #24]	@ (800bc84 <SGP_Upkeep+0xd4>)
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	701a      	strb	r2, [r3, #0]
    break;
 800bc70:	e002      	b.n	800bc78 <SGP_Upkeep+0xc8>
    break;
 800bc72:	46c0      	nop			@ (mov r8, r8)
 800bc74:	e000      	b.n	800bc78 <SGP_Upkeep+0xc8>
    break;
 800bc76:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800bc78:	4b02      	ldr	r3, [pc, #8]	@ (800bc84 <SGP_Upkeep+0xd4>)
 800bc7a:	781b      	ldrb	r3, [r3, #0]
}
 800bc7c:	0018      	movs	r0, r3
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	46c0      	nop			@ (mov r8, r8)
 800bc84:	20001352 	.word	0x20001352
 800bc88:	08024be0 	.word	0x08024be0
 800bc8c:	08024508 	.word	0x08024508
 800bc90:	080243cc 	.word	0x080243cc
 800bc94:	20001348 	.word	0x20001348
 800bc98:	20001292 	.word	0x20001292
 800bc9c:	200021ed 	.word	0x200021ed
 800bca0:	20001294 	.word	0x20001294

0800bca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	0002      	movs	r2, r0
 800bcac:	1dfb      	adds	r3, r7, #7
 800bcae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800bcb0:	1dfb      	adds	r3, r7, #7
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	2b7f      	cmp	r3, #127	@ 0x7f
 800bcb6:	d809      	bhi.n	800bccc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bcb8:	1dfb      	adds	r3, r7, #7
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	001a      	movs	r2, r3
 800bcbe:	231f      	movs	r3, #31
 800bcc0:	401a      	ands	r2, r3
 800bcc2:	4b04      	ldr	r3, [pc, #16]	@ (800bcd4 <__NVIC_EnableIRQ+0x30>)
 800bcc4:	2101      	movs	r1, #1
 800bcc6:	4091      	lsls	r1, r2
 800bcc8:	000a      	movs	r2, r1
 800bcca:	601a      	str	r2, [r3, #0]
  }
}
 800bccc:	46c0      	nop			@ (mov r8, r8)
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	b002      	add	sp, #8
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	e000e100 	.word	0xe000e100

0800bcd8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	0002      	movs	r2, r0
 800bce0:	1dfb      	adds	r3, r7, #7
 800bce2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800bce4:	1dfb      	adds	r3, r7, #7
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	2b7f      	cmp	r3, #127	@ 0x7f
 800bcea:	d810      	bhi.n	800bd0e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bcec:	1dfb      	adds	r3, r7, #7
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	001a      	movs	r2, r3
 800bcf2:	231f      	movs	r3, #31
 800bcf4:	4013      	ands	r3, r2
 800bcf6:	4908      	ldr	r1, [pc, #32]	@ (800bd18 <__NVIC_DisableIRQ+0x40>)
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	409a      	lsls	r2, r3
 800bcfc:	0013      	movs	r3, r2
 800bcfe:	2280      	movs	r2, #128	@ 0x80
 800bd00:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800bd02:	f3bf 8f4f 	dsb	sy
}
 800bd06:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800bd08:	f3bf 8f6f 	isb	sy
}
 800bd0c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800bd0e:	46c0      	nop			@ (mov r8, r8)
 800bd10:	46bd      	mov	sp, r7
 800bd12:	b002      	add	sp, #8
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	46c0      	nop			@ (mov r8, r8)
 800bd18:	e000e100 	.word	0xe000e100

0800bd1c <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800bd1c:	b5b0      	push	{r4, r5, r7, lr}
 800bd1e:	b088      	sub	sp, #32
 800bd20:	af02      	add	r7, sp, #8
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	0008      	movs	r0, r1
 800bd26:	0011      	movs	r1, r2
 800bd28:	1cfb      	adds	r3, r7, #3
 800bd2a:	1c02      	adds	r2, r0, #0
 800bd2c:	701a      	strb	r2, [r3, #0]
 800bd2e:	1cbb      	adds	r3, r7, #2
 800bd30:	1c0a      	adds	r2, r1, #0
 800bd32:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800bd34:	4b5b      	ldr	r3, [pc, #364]	@ (800bea4 <getSoundData+0x188>)
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	4053      	eors	r3, r2
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d107      	bne.n	800bd54 <getSoundData+0x38>
 800bd44:	4b58      	ldr	r3, [pc, #352]	@ (800bea8 <getSoundData+0x18c>)
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	4053      	eors	r3, r2
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d001      	beq.n	800bd58 <getSoundData+0x3c>
    {
        return false;
 800bd54:	2300      	movs	r3, #0
 800bd56:	e0a0      	b.n	800be9a <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800bd58:	4b54      	ldr	r3, [pc, #336]	@ (800beac <getSoundData+0x190>)
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d005      	beq.n	800bd6e <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800bd62:	4b53      	ldr	r3, [pc, #332]	@ (800beb0 <getSoundData+0x194>)
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	b25b      	sxtb	r3, r3
 800bd68:	0018      	movs	r0, r3
 800bd6a:	f7ff ffb5 	bl	800bcd8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800bd6e:	f3bf 8f4f 	dsb	sy
}
 800bd72:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800bd74:	f3bf 8f6f 	isb	sy
}
 800bd78:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800bd7a:	1cfb      	adds	r3, r7, #3
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d04c      	beq.n	800be1c <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800bd82:	4b4c      	ldr	r3, [pc, #304]	@ (800beb4 <getSoundData+0x198>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d11b      	bne.n	800bdc2 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bd96:	2300      	movs	r3, #0
 800bd98:	617b      	str	r3, [r7, #20]
 800bd9a:	e00e      	b.n	800bdba <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	18d3      	adds	r3, r2, r3
 800bda2:	3302      	adds	r3, #2
 800bda4:	2200      	movs	r2, #0
 800bda6:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	18d3      	adds	r3, r2, r3
 800bdae:	3308      	adds	r3, #8
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	617b      	str	r3, [r7, #20]
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	2b05      	cmp	r3, #5
 800bdbe:	d9ed      	bls.n	800bd9c <getSoundData+0x80>
 800bdc0:	e02c      	b.n	800be1c <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	1c59      	adds	r1, r3, #1
 800bdc8:	4b3b      	ldr	r3, [pc, #236]	@ (800beb8 <getSoundData+0x19c>)
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	4b3b      	ldr	r3, [pc, #236]	@ (800bebc <getSoundData+0x1a0>)
 800bdce:	681c      	ldr	r4, [r3, #0]
 800bdd0:	4b38      	ldr	r3, [pc, #224]	@ (800beb4 <getSoundData+0x198>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	0023      	movs	r3, r4
 800bdd8:	f000 fde8 	bl	800c9ac <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bddc:	2300      	movs	r3, #0
 800bdde:	613b      	str	r3, [r7, #16]
 800bde0:	e019      	b.n	800be16 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	18d3      	adds	r3, r2, r3
 800bde8:	1c98      	adds	r0, r3, #2
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	3308      	adds	r3, #8
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800bdf2:	4b33      	ldr	r3, [pc, #204]	@ (800bec0 <getSoundData+0x1a4>)
 800bdf4:	693a      	ldr	r2, [r7, #16]
 800bdf6:	0092      	lsls	r2, r2, #2
 800bdf8:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800bdfa:	4b32      	ldr	r3, [pc, #200]	@ (800bec4 <getSoundData+0x1a8>)
 800bdfc:	693a      	ldr	r2, [r7, #16]
 800bdfe:	0092      	lsls	r2, r2, #2
 800be00:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800be02:	4b2c      	ldr	r3, [pc, #176]	@ (800beb4 <getSoundData+0x198>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	0013      	movs	r3, r2
 800be0a:	0022      	movs	r2, r4
 800be0c:	f000 fdce 	bl	800c9ac <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	3301      	adds	r3, #1
 800be14:	613b      	str	r3, [r7, #16]
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	2b05      	cmp	r3, #5
 800be1a:	d9e2      	bls.n	800bde2 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800be1c:	1cbb      	adds	r3, r7, #2
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d028      	beq.n	800be76 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800be24:	240e      	movs	r4, #14
 800be26:	193b      	adds	r3, r7, r4
 800be28:	2200      	movs	r2, #0
 800be2a:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800be2c:	250d      	movs	r5, #13
 800be2e:	197b      	adds	r3, r7, r5
 800be30:	2200      	movs	r2, #0
 800be32:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800be34:	4b24      	ldr	r3, [pc, #144]	@ (800bec8 <getSoundData+0x1ac>)
 800be36:	6818      	ldr	r0, [r3, #0]
 800be38:	4924      	ldr	r1, [pc, #144]	@ (800becc <getSoundData+0x1b0>)
 800be3a:	197b      	adds	r3, r7, r5
 800be3c:	193a      	adds	r2, r7, r4
 800be3e:	f000 fe59 	bl	800caf4 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800be42:	193b      	adds	r3, r7, r4
 800be44:	881a      	ldrh	r2, [r3, #0]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	21ff      	movs	r1, #255	@ 0xff
 800be4a:	4011      	ands	r1, r2
 800be4c:	000c      	movs	r4, r1
 800be4e:	7b99      	ldrb	r1, [r3, #14]
 800be50:	2000      	movs	r0, #0
 800be52:	4001      	ands	r1, r0
 800be54:	1c08      	adds	r0, r1, #0
 800be56:	1c21      	adds	r1, r4, #0
 800be58:	4301      	orrs	r1, r0
 800be5a:	7399      	strb	r1, [r3, #14]
 800be5c:	0a12      	lsrs	r2, r2, #8
 800be5e:	b290      	uxth	r0, r2
 800be60:	7bda      	ldrb	r2, [r3, #15]
 800be62:	2100      	movs	r1, #0
 800be64:	400a      	ands	r2, r1
 800be66:	1c11      	adds	r1, r2, #0
 800be68:	1c02      	adds	r2, r0, #0
 800be6a:	430a      	orrs	r2, r1
 800be6c:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800be6e:	197b      	adds	r3, r7, r5
 800be70:	781a      	ldrb	r2, [r3, #0]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800be76:	f000 f86f 	bl	800bf58 <micSettlingComplete>
 800be7a:	0003      	movs	r3, r0
 800be7c:	001a      	movs	r2, r3
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800be82:	4b0a      	ldr	r3, [pc, #40]	@ (800beac <getSoundData+0x190>)
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	b2db      	uxtb	r3, r3
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d005      	beq.n	800be98 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800be8c:	4b08      	ldr	r3, [pc, #32]	@ (800beb0 <getSoundData+0x194>)
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	b25b      	sxtb	r3, r3
 800be92:	0018      	movs	r0, r3
 800be94:	f7ff ff06 	bl	800bca4 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800be98:	2301      	movs	r3, #1
}
 800be9a:	0018      	movs	r0, r3
 800be9c:	46bd      	mov	sp, r7
 800be9e:	b006      	add	sp, #24
 800bea0:	bdb0      	pop	{r4, r5, r7, pc}
 800bea2:	46c0      	nop			@ (mov r8, r8)
 800bea4:	20001354 	.word	0x20001354
 800bea8:	20001357 	.word	0x20001357
 800beac:	20001356 	.word	0x20001356
 800beb0:	20001da4 	.word	0x20001da4
 800beb4:	20001de0 	.word	0x20001de0
 800beb8:	20001da8 	.word	0x20001da8
 800bebc:	20001dac 	.word	0x20001dac
 800bec0:	20001db0 	.word	0x20001db0
 800bec4:	20001dc8 	.word	0x20001dc8
 800bec8:	2000135c 	.word	0x2000135c
 800becc:	3b5c7333 	.word	0x3b5c7333

0800bed0 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]
 800bedc:	001a      	movs	r2, r3
 800bede:	1cfb      	adds	r3, r7, #3
 800bee0:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800bee2:	4b09      	ldr	r3, [pc, #36]	@ (800bf08 <soundInit+0x38>)
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800bee8:	4b08      	ldr	r3, [pc, #32]	@ (800bf0c <soundInit+0x3c>)
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800beee:	4b08      	ldr	r3, [pc, #32]	@ (800bf10 <soundInit+0x40>)
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800bef4:	4b07      	ldr	r3, [pc, #28]	@ (800bf14 <soundInit+0x44>)
 800bef6:	2200      	movs	r2, #0
 800bef8:	569a      	ldrsb	r2, [r3, r2]
 800befa:	4b06      	ldr	r3, [pc, #24]	@ (800bf14 <soundInit+0x44>)
 800befc:	701a      	strb	r2, [r3, #0]

    return true;
 800befe:	2301      	movs	r3, #1
}
 800bf00:	0018      	movs	r0, r3
 800bf02:	46bd      	mov	sp, r7
 800bf04:	b004      	add	sp, #16
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	20001d9c 	.word	0x20001d9c
 800bf0c:	20001d98 	.word	0x20001d98
 800bf10:	20001da0 	.word	0x20001da0
 800bf14:	20001da4 	.word	0x20001da4

0800bf18 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800bf1c:	4b02      	ldr	r3, [pc, #8]	@ (800bf28 <clearMaximumAmplitude+0x10>)
 800bf1e:	2200      	movs	r2, #0
 800bf20:	601a      	str	r2, [r3, #0]
}
 800bf22:	46c0      	nop			@ (mov r8, r8)
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	2000135c 	.word	0x2000135c

0800bf2c <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800bf30:	4b08      	ldr	r3, [pc, #32]	@ (800bf54 <startMicSettlingPeriod+0x28>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2200      	movs	r2, #0
 800bf38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800bf3a:	4b06      	ldr	r3, [pc, #24]	@ (800bf54 <startMicSettlingPeriod+0x28>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	0018      	movs	r0, r3
 800bf40:	f00a f96a 	bl	8016218 <HAL_TIM_Base_Start>
 800bf44:	1e03      	subs	r3, r0, #0
 800bf46:	d001      	beq.n	800bf4c <startMicSettlingPeriod+0x20>
    {
        return false;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	e000      	b.n	800bf4e <startMicSettlingPeriod+0x22>
    }
    return true;
 800bf4c:	2301      	movs	r3, #1
}
 800bf4e:	0018      	movs	r0, r3
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	20001d98 	.word	0x20001d98

0800bf58 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800bf5e:	4b0e      	ldr	r3, [pc, #56]	@ (800bf98 <micSettlingComplete+0x40>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	2201      	movs	r2, #1
 800bf68:	401a      	ands	r2, r3
 800bf6a:	1dfb      	adds	r3, r7, #7
 800bf6c:	3a01      	subs	r2, #1
 800bf6e:	4251      	negs	r1, r2
 800bf70:	414a      	adcs	r2, r1
 800bf72:	701a      	strb	r2, [r3, #0]
    if (complete)
 800bf74:	1dfb      	adds	r3, r7, #7
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d007      	beq.n	800bf8c <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800bf7c:	4b06      	ldr	r3, [pc, #24]	@ (800bf98 <micSettlingComplete+0x40>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	0018      	movs	r0, r3
 800bf82:	f00a f993 	bl	80162ac <HAL_TIM_Base_Stop>
      DataReady = true;
 800bf86:	4b05      	ldr	r3, [pc, #20]	@ (800bf9c <micSettlingComplete+0x44>)
 800bf88:	2201      	movs	r2, #1
 800bf8a:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800bf8c:	1dfb      	adds	r3, r7, #7
 800bf8e:	781b      	ldrb	r3, [r3, #0]
}
 800bf90:	0018      	movs	r0, r3
 800bf92:	46bd      	mov	sp, r7
 800bf94:	b002      	add	sp, #8
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	20001d98 	.word	0x20001d98
 800bf9c:	20001353 	.word	0x20001353

0800bfa0 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	0002      	movs	r2, r0
 800bfa8:	1dfb      	adds	r3, r7, #7
 800bfaa:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800bfac:	4b29      	ldr	r3, [pc, #164]	@ (800c054 <enableMicrophone+0xb4>)
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	1dfa      	adds	r2, r7, #7
 800bfb4:	7812      	ldrb	r2, [r2, #0]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d101      	bne.n	800bfbe <enableMicrophone+0x1e>
    {
        return true;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e045      	b.n	800c04a <enableMicrophone+0xaa>
    }
    if (bEnable)
 800bfbe:	1dfb      	adds	r3, r7, #7
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d025      	beq.n	800c012 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800bfc6:	f7ff ffb1 	bl	800bf2c <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800bfca:	4b23      	ldr	r3, [pc, #140]	@ (800c058 <enableMicrophone+0xb8>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	2280      	movs	r2, #128	@ 0x80
 800bfd0:	0092      	lsls	r2, r2, #2
 800bfd2:	4922      	ldr	r1, [pc, #136]	@ (800c05c <enableMicrophone+0xbc>)
 800bfd4:	0018      	movs	r0, r3
 800bfd6:	f006 fb89 	bl	80126ec <HAL_I2S_Receive_DMA>
 800bfda:	1e03      	subs	r3, r0, #0
 800bfdc:	d001      	beq.n	800bfe2 <enableMicrophone+0x42>
        {
            return false;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	e033      	b.n	800c04a <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800bfe2:	f7ff ff99 	bl	800bf18 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800bfe6:	4b1e      	ldr	r3, [pc, #120]	@ (800c060 <enableMicrophone+0xc0>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800bfec:	4b1d      	ldr	r3, [pc, #116]	@ (800c064 <enableMicrophone+0xc4>)
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	b25b      	sxtb	r3, r3
 800bff2:	0018      	movs	r0, r3
 800bff4:	f7ff fe56 	bl	800bca4 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800bff8:	4b1b      	ldr	r3, [pc, #108]	@ (800c068 <enableMicrophone+0xc8>)
 800bffa:	2201      	movs	r2, #1
 800bffc:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800bffe:	4b15      	ldr	r3, [pc, #84]	@ (800c054 <enableMicrophone+0xb4>)
 800c000:	2201      	movs	r2, #1
 800c002:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c004:	4b19      	ldr	r3, [pc, #100]	@ (800c06c <enableMicrophone+0xcc>)
 800c006:	2200      	movs	r2, #0
 800c008:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c00a:	4b19      	ldr	r3, [pc, #100]	@ (800c070 <enableMicrophone+0xd0>)
 800c00c:	2200      	movs	r2, #0
 800c00e:	701a      	strb	r2, [r3, #0]
 800c010:	e01a      	b.n	800c048 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c012:	4b14      	ldr	r3, [pc, #80]	@ (800c064 <enableMicrophone+0xc4>)
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	b25b      	sxtb	r3, r3
 800c018:	0018      	movs	r0, r3
 800c01a:	f7ff fe5d 	bl	800bcd8 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800c01e:	4b12      	ldr	r3, [pc, #72]	@ (800c068 <enableMicrophone+0xc8>)
 800c020:	2200      	movs	r2, #0
 800c022:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c024:	4b11      	ldr	r3, [pc, #68]	@ (800c06c <enableMicrophone+0xcc>)
 800c026:	2200      	movs	r2, #0
 800c028:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c02a:	4b11      	ldr	r3, [pc, #68]	@ (800c070 <enableMicrophone+0xd0>)
 800c02c:	2200      	movs	r2, #0
 800c02e:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800c030:	4b09      	ldr	r3, [pc, #36]	@ (800c058 <enableMicrophone+0xb8>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	0018      	movs	r0, r3
 800c036:	f006 fc1b 	bl	8012870 <HAL_I2S_DMAStop>
 800c03a:	1e03      	subs	r3, r0, #0
 800c03c:	d001      	beq.n	800c042 <enableMicrophone+0xa2>
        {
            return false;
 800c03e:	2300      	movs	r3, #0
 800c040:	e003      	b.n	800c04a <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800c042:	4b04      	ldr	r3, [pc, #16]	@ (800c054 <enableMicrophone+0xb4>)
 800c044:	2200      	movs	r2, #0
 800c046:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800c048:	2301      	movs	r3, #1
}
 800c04a:	0018      	movs	r0, r3
 800c04c:	46bd      	mov	sp, r7
 800c04e:	b002      	add	sp, #8
 800c050:	bd80      	pop	{r7, pc}
 800c052:	46c0      	nop			@ (mov r8, r8)
 800c054:	20001354 	.word	0x20001354
 800c058:	20001d9c 	.word	0x20001d9c
 800c05c:	20001398 	.word	0x20001398
 800c060:	20001358 	.word	0x20001358
 800c064:	20001da4 	.word	0x20001da4
 800c068:	20001356 	.word	0x20001356
 800c06c:	20001355 	.word	0x20001355
 800c070:	20001357 	.word	0x20001357

0800c074 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800c078:	4b0c      	ldr	r3, [pc, #48]	@ (800c0ac <startSPLcalculation+0x38>)
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	2201      	movs	r2, #1
 800c080:	4053      	eors	r3, r2
 800c082:	b2db      	uxtb	r3, r3
 800c084:	2b00      	cmp	r3, #0
 800c086:	d001      	beq.n	800c08c <startSPLcalculation+0x18>
    {
        return false;
 800c088:	2300      	movs	r3, #0
 800c08a:	e00c      	b.n	800c0a6 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800c08c:	4b08      	ldr	r3, [pc, #32]	@ (800c0b0 <startSPLcalculation+0x3c>)
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	b2db      	uxtb	r3, r3
 800c092:	2b00      	cmp	r3, #0
 800c094:	d001      	beq.n	800c09a <startSPLcalculation+0x26>
    {
        return true;
 800c096:	2301      	movs	r3, #1
 800c098:	e005      	b.n	800c0a6 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800c09a:	f000 fb63 	bl	800c764 <resetSPLstate>
    SPLcalcEnabled = true;
 800c09e:	4b04      	ldr	r3, [pc, #16]	@ (800c0b0 <startSPLcalculation+0x3c>)
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	701a      	strb	r2, [r3, #0]
    return true;
 800c0a4:	2301      	movs	r3, #1
}
 800c0a6:	0018      	movs	r0, r3
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	20001354 	.word	0x20001354
 800c0b0:	20001355 	.word	0x20001355

0800c0b4 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c0bc:	4b05      	ldr	r3, [pc, #20]	@ (800c0d4 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d102      	bne.n	800c0cc <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	f000 f81a 	bl	800c100 <processHalfDMAbuffer>
  }
}
 800c0cc:	46c0      	nop			@ (mov r8, r8)
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	b002      	add	sp, #8
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	20001d9c 	.word	0x20001d9c

0800c0d8 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c0e0:	4b06      	ldr	r3, [pc, #24]	@ (800c0fc <HAL_I2S_RxCpltCallback+0x24>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d104      	bne.n	800c0f4 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800c0ea:	2380      	movs	r3, #128	@ 0x80
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	0018      	movs	r0, r3
 800c0f0:	f000 f806 	bl	800c100 <processHalfDMAbuffer>
  }
}
 800c0f4:	46c0      	nop			@ (mov r8, r8)
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	b002      	add	sp, #8
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	20001d9c 	.word	0x20001d9c

0800c100 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	005a      	lsls	r2, r3, #1
 800c10c:	4b15      	ldr	r3, [pc, #84]	@ (800c164 <processHalfDMAbuffer+0x64>)
 800c10e:	18d3      	adds	r3, r2, r3
 800c110:	4a15      	ldr	r2, [pc, #84]	@ (800c168 <processHalfDMAbuffer+0x68>)
 800c112:	2180      	movs	r1, #128	@ 0x80
 800c114:	0089      	lsls	r1, r1, #2
 800c116:	0018      	movs	r0, r3
 800c118:	f000 fd35 	bl	800cb86 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800c11c:	4b13      	ldr	r3, [pc, #76]	@ (800c16c <processHalfDMAbuffer+0x6c>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	425a      	negs	r2, r3
 800c122:	4153      	adcs	r3, r2
 800c124:	b2da      	uxtb	r2, r3
 800c126:	4b11      	ldr	r3, [pc, #68]	@ (800c16c <processHalfDMAbuffer+0x6c>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	2109      	movs	r1, #9
 800c12c:	4299      	cmp	r1, r3
 800c12e:	419b      	sbcs	r3, r3
 800c130:	425b      	negs	r3, r3
 800c132:	b2db      	uxtb	r3, r3
 800c134:	480c      	ldr	r0, [pc, #48]	@ (800c168 <processHalfDMAbuffer+0x68>)
 800c136:	2180      	movs	r1, #128	@ 0x80
 800c138:	f000 fb46 	bl	800c7c8 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800c13c:	4b0b      	ldr	r3, [pc, #44]	@ (800c16c <processHalfDMAbuffer+0x6c>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	2b09      	cmp	r3, #9
 800c142:	d804      	bhi.n	800c14e <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800c144:	4b09      	ldr	r3, [pc, #36]	@ (800c16c <processHalfDMAbuffer+0x6c>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	1c5a      	adds	r2, r3, #1
 800c14a:	4b08      	ldr	r3, [pc, #32]	@ (800c16c <processHalfDMAbuffer+0x6c>)
 800c14c:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800c14e:	4b08      	ldr	r3, [pc, #32]	@ (800c170 <processHalfDMAbuffer+0x70>)
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	b2db      	uxtb	r3, r3
 800c154:	2b00      	cmp	r3, #0
 800c156:	d001      	beq.n	800c15c <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800c158:	f000 f826 	bl	800c1a8 <calculateSPLQ31>
    }
}
 800c15c:	46c0      	nop			@ (mov r8, r8)
 800c15e:	46bd      	mov	sp, r7
 800c160:	b002      	add	sp, #8
 800c162:	bd80      	pop	{r7, pc}
 800c164:	20001398 	.word	0x20001398
 800c168:	20001b98 	.word	0x20001b98
 800c16c:	20001358 	.word	0x20001358
 800c170:	20001355 	.word	0x20001355

0800c174 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c17c:	4b07      	ldr	r3, [pc, #28]	@ (800c19c <HAL_I2S_ErrorCallback+0x28>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	429a      	cmp	r2, r3
 800c184:	d106      	bne.n	800c194 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800c186:	4a06      	ldr	r2, [pc, #24]	@ (800c1a0 <HAL_I2S_ErrorCallback+0x2c>)
 800c188:	239f      	movs	r3, #159	@ 0x9f
 800c18a:	0059      	lsls	r1, r3, #1
 800c18c:	4b05      	ldr	r3, [pc, #20]	@ (800c1a4 <HAL_I2S_ErrorCallback+0x30>)
 800c18e:	0018      	movs	r0, r3
 800c190:	f001 fee0 	bl	800df54 <errorHandler>
  }
}
 800c194:	46c0      	nop			@ (mov r8, r8)
 800c196:	46bd      	mov	sp, r7
 800c198:	b002      	add	sp, #8
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	20001d9c 	.word	0x20001d9c
 800c1a0:	08024530 	.word	0x08024530
 800c1a4:	08024cd0 	.word	0x08024cd0

0800c1a8 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800c1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1aa:	b0b3      	sub	sp, #204	@ 0xcc
 800c1ac:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800c1ae:	4ae2      	ldr	r2, [pc, #904]	@ (800c538 <calculateSPLQ31+0x390>)
 800c1b0:	2338      	movs	r3, #56	@ 0x38
 800c1b2:	2030      	movs	r0, #48	@ 0x30
 800c1b4:	181b      	adds	r3, r3, r0
 800c1b6:	19d9      	adds	r1, r3, r7
 800c1b8:	2334      	movs	r3, #52	@ 0x34
 800c1ba:	181b      	adds	r3, r3, r0
 800c1bc:	19d8      	adds	r0, r3, r7
 800c1be:	2380      	movs	r3, #128	@ 0x80
 800c1c0:	f000 fc36 	bl	800ca30 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800c1c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	da00      	bge.n	800c1cc <calculateSPLQ31+0x24>
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	105b      	asrs	r3, r3, #1
 800c1ce:	001a      	movs	r2, r3
 800c1d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	da00      	bge.n	800c1d8 <calculateSPLQ31+0x30>
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	105b      	asrs	r3, r3, #1
 800c1da:	18d3      	adds	r3, r2, r3
 800c1dc:	2188      	movs	r1, #136	@ 0x88
 800c1de:	187a      	adds	r2, r7, r1
 800c1e0:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800c1e2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c1e4:	187b      	adds	r3, r7, r1
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	1ad3      	subs	r3, r2, r3
 800c1ea:	3304      	adds	r3, #4
 800c1ec:	2284      	movs	r2, #132	@ 0x84
 800c1ee:	18b9      	adds	r1, r7, r2
 800c1f0:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800c1f2:	18bb      	adds	r3, r7, r2
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4ad1      	ldr	r2, [pc, #836]	@ (800c53c <calculateSPLQ31+0x394>)
 800c1f8:	0019      	movs	r1, r3
 800c1fa:	0010      	movs	r0, r2
 800c1fc:	f000 fc58 	bl	800cab0 <getPo2factor>
 800c200:	0003      	movs	r3, r0
 800c202:	2280      	movs	r2, #128	@ 0x80
 800c204:	18ba      	adds	r2, r7, r2
 800c206:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	2284      	movs	r2, #132	@ 0x84
 800c20c:	2130      	movs	r1, #48	@ 0x30
 800c20e:	1852      	adds	r2, r2, r1
 800c210:	19d2      	adds	r2, r2, r7
 800c212:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c214:	2300      	movs	r3, #0
 800c216:	2280      	movs	r2, #128	@ 0x80
 800c218:	1852      	adds	r2, r2, r1
 800c21a:	19d2      	adds	r2, r2, r7
 800c21c:	6013      	str	r3, [r2, #0]
 800c21e:	e032      	b.n	800c286 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800c220:	4ac5      	ldr	r2, [pc, #788]	@ (800c538 <calculateSPLQ31+0x390>)
 800c222:	2680      	movs	r6, #128	@ 0x80
 800c224:	2330      	movs	r3, #48	@ 0x30
 800c226:	18f1      	adds	r1, r6, r3
 800c228:	19cb      	adds	r3, r1, r7
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	589a      	ldr	r2, [r3, r2]
 800c230:	2188      	movs	r1, #136	@ 0x88
 800c232:	1879      	adds	r1, r7, r1
 800c234:	680b      	ldr	r3, [r1, #0]
 800c236:	1ad2      	subs	r2, r2, r3
 800c238:	2180      	movs	r1, #128	@ 0x80
 800c23a:	1879      	adds	r1, r7, r1
 800c23c:	680b      	ldr	r3, [r1, #0]
 800c23e:	409a      	lsls	r2, r3
 800c240:	0011      	movs	r1, r2
 800c242:	4abf      	ldr	r2, [pc, #764]	@ (800c540 <calculateSPLQ31+0x398>)
 800c244:	2084      	movs	r0, #132	@ 0x84
 800c246:	2330      	movs	r3, #48	@ 0x30
 800c248:	18c3      	adds	r3, r0, r3
 800c24a:	19db      	adds	r3, r3, r7
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800c252:	2230      	movs	r2, #48	@ 0x30
 800c254:	1883      	adds	r3, r0, r2
 800c256:	19db      	adds	r3, r3, r7
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	3301      	adds	r3, #1
 800c25c:	49b8      	ldr	r1, [pc, #736]	@ (800c540 <calculateSPLQ31+0x398>)
 800c25e:	009a      	lsls	r2, r3, #2
 800c260:	2300      	movs	r3, #0
 800c262:	5053      	str	r3, [r2, r1]
        count += 2;
 800c264:	2230      	movs	r2, #48	@ 0x30
 800c266:	1883      	adds	r3, r0, r2
 800c268:	19db      	adds	r3, r3, r7
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	3302      	adds	r3, #2
 800c26e:	0011      	movs	r1, r2
 800c270:	1882      	adds	r2, r0, r2
 800c272:	19d2      	adds	r2, r2, r7
 800c274:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c276:	000a      	movs	r2, r1
 800c278:	18b3      	adds	r3, r6, r2
 800c27a:	19db      	adds	r3, r3, r7
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	3301      	adds	r3, #1
 800c280:	18b2      	adds	r2, r6, r2
 800c282:	19d2      	adds	r2, r2, r7
 800c284:	6013      	str	r3, [r2, #0]
 800c286:	2380      	movs	r3, #128	@ 0x80
 800c288:	2630      	movs	r6, #48	@ 0x30
 800c28a:	199b      	adds	r3, r3, r6
 800c28c:	19db      	adds	r3, r3, r7
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2b7f      	cmp	r3, #127	@ 0x7f
 800c292:	d9c5      	bls.n	800c220 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800c294:	4bab      	ldr	r3, [pc, #684]	@ (800c544 <calculateSPLQ31+0x39c>)
 800c296:	6818      	ldr	r0, [r3, #0]
 800c298:	49a9      	ldr	r1, [pc, #676]	@ (800c540 <calculateSPLQ31+0x398>)
 800c29a:	2301      	movs	r3, #1
 800c29c:	2200      	movs	r2, #0
 800c29e:	f011 f881 	bl	801d3a4 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800c2a2:	4aa9      	ldr	r2, [pc, #676]	@ (800c548 <calculateSPLQ31+0x3a0>)
 800c2a4:	2338      	movs	r3, #56	@ 0x38
 800c2a6:	199b      	adds	r3, r3, r6
 800c2a8:	19d9      	adds	r1, r3, r7
 800c2aa:	2334      	movs	r3, #52	@ 0x34
 800c2ac:	199b      	adds	r3, r3, r6
 800c2ae:	19d8      	adds	r0, r3, r7
 800c2b0:	237e      	movs	r3, #126	@ 0x7e
 800c2b2:	f000 fbbd 	bl	800ca30 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800c2b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c2b8:	2380      	movs	r3, #128	@ 0x80
 800c2ba:	061b      	lsls	r3, r3, #24
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d101      	bne.n	800c2c4 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800c2c0:	4b9e      	ldr	r3, [pc, #632]	@ (800c53c <calculateSPLQ31+0x394>)
 800c2c2:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800c2c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c2c6:	2380      	movs	r3, #128	@ 0x80
 800c2c8:	061b      	lsls	r3, r3, #24
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d101      	bne.n	800c2d2 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800c2ce:	4b9b      	ldr	r3, [pc, #620]	@ (800c53c <calculateSPLQ31+0x394>)
 800c2d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800c2d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c2d4:	17da      	asrs	r2, r3, #31
 800c2d6:	189b      	adds	r3, r3, r2
 800c2d8:	4053      	eors	r3, r2
 800c2da:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800c2dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c2de:	17da      	asrs	r2, r3, #31
 800c2e0:	189b      	adds	r3, r3, r2
 800c2e2:	4053      	eors	r3, r2
 800c2e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800c2e6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c2e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	dd01      	ble.n	800c2f2 <calculateSPLQ31+0x14a>
    {
        max = min;
 800c2ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c2f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800c2f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c2f4:	3304      	adds	r3, #4
 800c2f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800c2f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c2fa:	4a90      	ldr	r2, [pc, #576]	@ (800c53c <calculateSPLQ31+0x394>)
 800c2fc:	0019      	movs	r1, r3
 800c2fe:	0010      	movs	r0, r2
 800c300:	f000 fbd6 	bl	800cab0 <getPo2factor>
 800c304:	0003      	movs	r3, r0
 800c306:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800c308:	2302      	movs	r3, #2
 800c30a:	22ac      	movs	r2, #172	@ 0xac
 800c30c:	18ba      	adds	r2, r7, r2
 800c30e:	6013      	str	r3, [r2, #0]
 800c310:	e012      	b.n	800c338 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800c312:	4a8b      	ldr	r2, [pc, #556]	@ (800c540 <calculateSPLQ31+0x398>)
 800c314:	20ac      	movs	r0, #172	@ 0xac
 800c316:	183b      	adds	r3, r7, r0
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	009b      	lsls	r3, r3, #2
 800c31c:	589a      	ldr	r2, [r3, r2]
 800c31e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c320:	409a      	lsls	r2, r3
 800c322:	0011      	movs	r1, r2
 800c324:	4a86      	ldr	r2, [pc, #536]	@ (800c540 <calculateSPLQ31+0x398>)
 800c326:	183b      	adds	r3, r7, r0
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800c32e:	183b      	adds	r3, r7, r0
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	3301      	adds	r3, #1
 800c334:	183a      	adds	r2, r7, r0
 800c336:	6013      	str	r3, [r2, #0]
 800c338:	23ac      	movs	r3, #172	@ 0xac
 800c33a:	18fb      	adds	r3, r7, r3
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c340:	d9e7      	bls.n	800c312 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800c342:	4b7d      	ldr	r3, [pc, #500]	@ (800c538 <calculateSPLQ31+0x390>)
 800c344:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800c346:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800c348:	4b7d      	ldr	r3, [pc, #500]	@ (800c540 <calculateSPLQ31+0x398>)
 800c34a:	2240      	movs	r2, #64	@ 0x40
 800c34c:	0018      	movs	r0, r3
 800c34e:	f011 fdd3 	bl	801def8 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800c352:	2330      	movs	r3, #48	@ 0x30
 800c354:	18fb      	adds	r3, r7, r3
 800c356:	0018      	movs	r0, r3
 800c358:	2330      	movs	r3, #48	@ 0x30
 800c35a:	001a      	movs	r2, r3
 800c35c:	2100      	movs	r1, #0
 800c35e:	f013 fbef 	bl	801fb40 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800c362:	2200      	movs	r2, #0
 800c364:	2300      	movs	r3, #0
 800c366:	21a0      	movs	r1, #160	@ 0xa0
 800c368:	1879      	adds	r1, r7, r1
 800c36a:	600a      	str	r2, [r1, #0]
 800c36c:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c36e:	2301      	movs	r3, #1
 800c370:	229c      	movs	r2, #156	@ 0x9c
 800c372:	18ba      	adds	r2, r7, r2
 800c374:	6013      	str	r3, [r2, #0]
 800c376:	e05b      	b.n	800c430 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800c378:	269c      	movs	r6, #156	@ 0x9c
 800c37a:	19bb      	adds	r3, r7, r6
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	009a      	lsls	r2, r3, #2
 800c380:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c382:	189b      	adds	r3, r3, r2
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	613b      	str	r3, [r7, #16]
 800c388:	17db      	asrs	r3, r3, #31
 800c38a:	617b      	str	r3, [r7, #20]
 800c38c:	4b6f      	ldr	r3, [pc, #444]	@ (800c54c <calculateSPLQ31+0x3a4>)
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	19bb      	adds	r3, r7, r6
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	005b      	lsls	r3, r3, #1
 800c396:	18d3      	adds	r3, r2, r3
 800c398:	881b      	ldrh	r3, [r3, #0]
 800c39a:	60bb      	str	r3, [r7, #8]
 800c39c:	2300      	movs	r3, #0
 800c39e:	60fb      	str	r3, [r7, #12]
 800c3a0:	68ba      	ldr	r2, [r7, #8]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	6938      	ldr	r0, [r7, #16]
 800c3a6:	6979      	ldr	r1, [r7, #20]
 800c3a8:	f7f4 f90a 	bl	80005c0 <__aeabi_lmul>
 800c3ac:	0002      	movs	r2, r0
 800c3ae:	000b      	movs	r3, r1
 800c3b0:	0010      	movs	r0, r2
 800c3b2:	0019      	movs	r1, r3
 800c3b4:	23a0      	movs	r3, #160	@ 0xa0
 800c3b6:	18fa      	adds	r2, r7, r3
 800c3b8:	6853      	ldr	r3, [r2, #4]
 800c3ba:	6812      	ldr	r2, [r2, #0]
 800c3bc:	1812      	adds	r2, r2, r0
 800c3be:	414b      	adcs	r3, r1
 800c3c0:	21a0      	movs	r1, #160	@ 0xa0
 800c3c2:	1879      	adds	r1, r7, r1
 800c3c4:	600a      	str	r2, [r1, #0]
 800c3c6:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800c3c8:	4b61      	ldr	r3, [pc, #388]	@ (800c550 <calculateSPLQ31+0x3a8>)
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	19bb      	adds	r3, r7, r6
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	18d3      	adds	r3, r2, r3
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	2b06      	cmp	r3, #6
 800c3d6:	d025      	beq.n	800c424 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800c3d8:	4b5d      	ldr	r3, [pc, #372]	@ (800c550 <calculateSPLQ31+0x3a8>)
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	19bb      	adds	r3, r7, r6
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	18d3      	adds	r3, r2, r3
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	2230      	movs	r2, #48	@ 0x30
 800c3e6:	18ba      	adds	r2, r7, r2
 800c3e8:	00db      	lsls	r3, r3, #3
 800c3ea:	18d3      	adds	r3, r2, r3
 800c3ec:	6818      	ldr	r0, [r3, #0]
 800c3ee:	6859      	ldr	r1, [r3, #4]
 800c3f0:	19bb      	adds	r3, r7, r6
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	009a      	lsls	r2, r3, #2
 800c3f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c3f8:	189b      	adds	r3, r3, r2
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	603b      	str	r3, [r7, #0]
 800c3fe:	17db      	asrs	r3, r3, #31
 800c400:	607b      	str	r3, [r7, #4]
 800c402:	4b53      	ldr	r3, [pc, #332]	@ (800c550 <calculateSPLQ31+0x3a8>)
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	19be      	adds	r6, r7, r6
 800c408:	6833      	ldr	r3, [r6, #0]
 800c40a:	18d3      	adds	r3, r2, r3
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	001e      	movs	r6, r3
 800c410:	683a      	ldr	r2, [r7, #0]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	1880      	adds	r0, r0, r2
 800c416:	4159      	adcs	r1, r3
 800c418:	2330      	movs	r3, #48	@ 0x30
 800c41a:	18fa      	adds	r2, r7, r3
 800c41c:	00f3      	lsls	r3, r6, #3
 800c41e:	18d3      	adds	r3, r2, r3
 800c420:	6018      	str	r0, [r3, #0]
 800c422:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c424:	229c      	movs	r2, #156	@ 0x9c
 800c426:	18bb      	adds	r3, r7, r2
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	3301      	adds	r3, #1
 800c42c:	18ba      	adds	r2, r7, r2
 800c42e:	6013      	str	r3, [r2, #0]
 800c430:	239c      	movs	r3, #156	@ 0x9c
 800c432:	18fb      	adds	r3, r7, r3
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2b3f      	cmp	r3, #63	@ 0x3f
 800c438:	d99e      	bls.n	800c378 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800c43a:	2380      	movs	r3, #128	@ 0x80
 800c43c:	18fb      	adds	r3, r7, r3
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	005b      	lsls	r3, r3, #1
 800c442:	001a      	movs	r2, r3
 800c444:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c446:	005b      	lsls	r3, r3, #1
 800c448:	18d3      	adds	r3, r2, r3
 800c44a:	3b22      	subs	r3, #34	@ 0x22
 800c44c:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800c44e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c450:	17da      	asrs	r2, r3, #31
 800c452:	189b      	adds	r3, r3, r2
 800c454:	4053      	eors	r3, r2
 800c456:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800c458:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	da62      	bge.n	800c524 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800c45e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c460:	3b20      	subs	r3, #32
 800c462:	2b00      	cmp	r3, #0
 800c464:	db05      	blt.n	800c472 <calculateSPLQ31+0x2ca>
 800c466:	22a0      	movs	r2, #160	@ 0xa0
 800c468:	18ba      	adds	r2, r7, r2
 800c46a:	6812      	ldr	r2, [r2, #0]
 800c46c:	409a      	lsls	r2, r3
 800c46e:	627a      	str	r2, [r7, #36]	@ 0x24
 800c470:	e010      	b.n	800c494 <calculateSPLQ31+0x2ec>
 800c472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c474:	2220      	movs	r2, #32
 800c476:	1ad3      	subs	r3, r2, r3
 800c478:	22a0      	movs	r2, #160	@ 0xa0
 800c47a:	18ba      	adds	r2, r7, r2
 800c47c:	6812      	ldr	r2, [r2, #0]
 800c47e:	40da      	lsrs	r2, r3
 800c480:	0013      	movs	r3, r2
 800c482:	22a4      	movs	r2, #164	@ 0xa4
 800c484:	18ba      	adds	r2, r7, r2
 800c486:	6811      	ldr	r1, [r2, #0]
 800c488:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c48a:	4091      	lsls	r1, r2
 800c48c:	6279      	str	r1, [r7, #36]	@ 0x24
 800c48e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c490:	431a      	orrs	r2, r3
 800c492:	627a      	str	r2, [r7, #36]	@ 0x24
 800c494:	21a0      	movs	r1, #160	@ 0xa0
 800c496:	187b      	adds	r3, r7, r1
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c49c:	409a      	lsls	r2, r3
 800c49e:	623a      	str	r2, [r7, #32]
 800c4a0:	6a3b      	ldr	r3, [r7, #32]
 800c4a2:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800c4a4:	187a      	adds	r2, r7, r1
 800c4a6:	6013      	str	r3, [r2, #0]
 800c4a8:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	2298      	movs	r2, #152	@ 0x98
 800c4ae:	18ba      	adds	r2, r7, r2
 800c4b0:	6013      	str	r3, [r2, #0]
 800c4b2:	e031      	b.n	800c518 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800c4b4:	2330      	movs	r3, #48	@ 0x30
 800c4b6:	18fa      	adds	r2, r7, r3
 800c4b8:	2398      	movs	r3, #152	@ 0x98
 800c4ba:	18fb      	adds	r3, r7, r3
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	00db      	lsls	r3, r3, #3
 800c4c0:	18d3      	adds	r3, r2, r3
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c4c8:	3920      	subs	r1, #32
 800c4ca:	2900      	cmp	r1, #0
 800c4cc:	db03      	blt.n	800c4d6 <calculateSPLQ31+0x32e>
 800c4ce:	0010      	movs	r0, r2
 800c4d0:	4088      	lsls	r0, r1
 800c4d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c4d4:	e00c      	b.n	800c4f0 <calculateSPLQ31+0x348>
 800c4d6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c4d8:	2020      	movs	r0, #32
 800c4da:	1a41      	subs	r1, r0, r1
 800c4dc:	0010      	movs	r0, r2
 800c4de:	40c8      	lsrs	r0, r1
 800c4e0:	0001      	movs	r1, r0
 800c4e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c4e4:	001c      	movs	r4, r3
 800c4e6:	4084      	lsls	r4, r0
 800c4e8:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800c4ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c4ec:	4308      	orrs	r0, r1
 800c4ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c4f0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c4f2:	0013      	movs	r3, r2
 800c4f4:	408b      	lsls	r3, r1
 800c4f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4f8:	2330      	movs	r3, #48	@ 0x30
 800c4fa:	18fa      	adds	r2, r7, r3
 800c4fc:	2098      	movs	r0, #152	@ 0x98
 800c4fe:	183b      	adds	r3, r7, r0
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	00db      	lsls	r3, r3, #3
 800c504:	18d3      	adds	r3, r2, r3
 800c506:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c50a:	6019      	str	r1, [r3, #0]
 800c50c:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c50e:	183b      	adds	r3, r7, r0
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	3301      	adds	r3, #1
 800c514:	183a      	adds	r2, r7, r0
 800c516:	6013      	str	r3, [r2, #0]
 800c518:	2398      	movs	r3, #152	@ 0x98
 800c51a:	18fb      	adds	r3, r7, r3
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b05      	cmp	r3, #5
 800c520:	d9c8      	bls.n	800c4b4 <calculateSPLQ31+0x30c>
 800c522:	e06b      	b.n	800c5fc <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800c524:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c526:	3b20      	subs	r3, #32
 800c528:	2b00      	cmp	r3, #0
 800c52a:	db13      	blt.n	800c554 <calculateSPLQ31+0x3ac>
 800c52c:	22a4      	movs	r2, #164	@ 0xa4
 800c52e:	18ba      	adds	r2, r7, r2
 800c530:	6812      	ldr	r2, [r2, #0]
 800c532:	40da      	lsrs	r2, r3
 800c534:	61ba      	str	r2, [r7, #24]
 800c536:	e01e      	b.n	800c576 <calculateSPLQ31+0x3ce>
 800c538:	20001b98 	.word	0x20001b98
 800c53c:	7fffffff 	.word	0x7fffffff
 800c540:	20001de4 	.word	0x20001de4
 800c544:	200000b4 	.word	0x200000b4
 800c548:	20001dec 	.word	0x20001dec
 800c54c:	200000b8 	.word	0x200000b8
 800c550:	200000c4 	.word	0x200000c4
 800c554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c556:	2220      	movs	r2, #32
 800c558:	1ad3      	subs	r3, r2, r3
 800c55a:	22a4      	movs	r2, #164	@ 0xa4
 800c55c:	18ba      	adds	r2, r7, r2
 800c55e:	6812      	ldr	r2, [r2, #0]
 800c560:	409a      	lsls	r2, r3
 800c562:	0013      	movs	r3, r2
 800c564:	22a0      	movs	r2, #160	@ 0xa0
 800c566:	18ba      	adds	r2, r7, r2
 800c568:	6811      	ldr	r1, [r2, #0]
 800c56a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c56c:	40d1      	lsrs	r1, r2
 800c56e:	61b9      	str	r1, [r7, #24]
 800c570:	69ba      	ldr	r2, [r7, #24]
 800c572:	431a      	orrs	r2, r3
 800c574:	61ba      	str	r2, [r7, #24]
 800c576:	23a4      	movs	r3, #164	@ 0xa4
 800c578:	18fb      	adds	r3, r7, r3
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c57e:	40da      	lsrs	r2, r3
 800c580:	61fa      	str	r2, [r7, #28]
 800c582:	69ba      	ldr	r2, [r7, #24]
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	21a0      	movs	r1, #160	@ 0xa0
 800c588:	1879      	adds	r1, r7, r1
 800c58a:	600a      	str	r2, [r1, #0]
 800c58c:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c58e:	2300      	movs	r3, #0
 800c590:	2294      	movs	r2, #148	@ 0x94
 800c592:	18ba      	adds	r2, r7, r2
 800c594:	6013      	str	r3, [r2, #0]
 800c596:	e02c      	b.n	800c5f2 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800c598:	2330      	movs	r3, #48	@ 0x30
 800c59a:	18fa      	adds	r2, r7, r3
 800c59c:	2394      	movs	r3, #148	@ 0x94
 800c59e:	18fb      	adds	r3, r7, r3
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	00db      	lsls	r3, r3, #3
 800c5a4:	18d3      	adds	r3, r2, r3
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c5ac:	3920      	subs	r1, #32
 800c5ae:	2900      	cmp	r1, #0
 800c5b0:	db03      	blt.n	800c5ba <calculateSPLQ31+0x412>
 800c5b2:	0018      	movs	r0, r3
 800c5b4:	40c8      	lsrs	r0, r1
 800c5b6:	0004      	movs	r4, r0
 800c5b8:	e00a      	b.n	800c5d0 <calculateSPLQ31+0x428>
 800c5ba:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c5bc:	2020      	movs	r0, #32
 800c5be:	1a41      	subs	r1, r0, r1
 800c5c0:	0018      	movs	r0, r3
 800c5c2:	4088      	lsls	r0, r1
 800c5c4:	0001      	movs	r1, r0
 800c5c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c5c8:	0016      	movs	r6, r2
 800c5ca:	40c6      	lsrs	r6, r0
 800c5cc:	0034      	movs	r4, r6
 800c5ce:	430c      	orrs	r4, r1
 800c5d0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c5d2:	40cb      	lsrs	r3, r1
 800c5d4:	001d      	movs	r5, r3
 800c5d6:	2330      	movs	r3, #48	@ 0x30
 800c5d8:	18fa      	adds	r2, r7, r3
 800c5da:	2194      	movs	r1, #148	@ 0x94
 800c5dc:	187b      	adds	r3, r7, r1
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	00db      	lsls	r3, r3, #3
 800c5e2:	18d3      	adds	r3, r2, r3
 800c5e4:	601c      	str	r4, [r3, #0]
 800c5e6:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c5e8:	187b      	adds	r3, r7, r1
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	187a      	adds	r2, r7, r1
 800c5f0:	6013      	str	r3, [r2, #0]
 800c5f2:	2394      	movs	r3, #148	@ 0x94
 800c5f4:	18fb      	adds	r3, r7, r3
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b05      	cmp	r3, #5
 800c5fa:	d9cd      	bls.n	800c598 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800c5fc:	230f      	movs	r3, #15
 800c5fe:	425d      	negs	r5, r3
 800c600:	2305      	movs	r3, #5
 800c602:	425e      	negs	r6, r3
 800c604:	4b4a      	ldr	r3, [pc, #296]	@ (800c730 <calculateSPLQ31+0x588>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	4b4a      	ldr	r3, [pc, #296]	@ (800c734 <calculateSPLQ31+0x58c>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	21a0      	movs	r1, #160	@ 0xa0
 800c612:	1879      	adds	r1, r7, r1
 800c614:	6808      	ldr	r0, [r1, #0]
 800c616:	6849      	ldr	r1, [r1, #4]
 800c618:	4c47      	ldr	r4, [pc, #284]	@ (800c738 <calculateSPLQ31+0x590>)
 800c61a:	9403      	str	r4, [sp, #12]
 800c61c:	4c47      	ldr	r4, [pc, #284]	@ (800c73c <calculateSPLQ31+0x594>)
 800c61e:	9402      	str	r4, [sp, #8]
 800c620:	9301      	str	r3, [sp, #4]
 800c622:	9200      	str	r2, [sp, #0]
 800c624:	0033      	movs	r3, r6
 800c626:	002a      	movs	r2, r5
 800c628:	f000 fa86 	bl	800cb38 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c62c:	2300      	movs	r3, #0
 800c62e:	2290      	movs	r2, #144	@ 0x90
 800c630:	18ba      	adds	r2, r7, r2
 800c632:	6013      	str	r3, [r2, #0]
 800c634:	e026      	b.n	800c684 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800c636:	2330      	movs	r3, #48	@ 0x30
 800c638:	18fa      	adds	r2, r7, r3
 800c63a:	2490      	movs	r4, #144	@ 0x90
 800c63c:	193b      	adds	r3, r7, r4
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	00db      	lsls	r3, r3, #3
 800c642:	18d3      	adds	r3, r2, r3
 800c644:	6818      	ldr	r0, [r3, #0]
 800c646:	6859      	ldr	r1, [r3, #4]
 800c648:	230f      	movs	r3, #15
 800c64a:	425d      	negs	r5, r3
 800c64c:	2305      	movs	r3, #5
 800c64e:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800c650:	193b      	adds	r3, r7, r4
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	009a      	lsls	r2, r3, #2
 800c656:	4b3a      	ldr	r3, [pc, #232]	@ (800c740 <calculateSPLQ31+0x598>)
 800c658:	18d3      	adds	r3, r2, r3
 800c65a:	193a      	adds	r2, r7, r4
 800c65c:	6812      	ldr	r2, [r2, #0]
 800c65e:	0094      	lsls	r4, r2, #2
 800c660:	4a38      	ldr	r2, [pc, #224]	@ (800c744 <calculateSPLQ31+0x59c>)
 800c662:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800c664:	9203      	str	r2, [sp, #12]
 800c666:	9302      	str	r3, [sp, #8]
 800c668:	2300      	movs	r3, #0
 800c66a:	9301      	str	r3, [sp, #4]
 800c66c:	2300      	movs	r3, #0
 800c66e:	9300      	str	r3, [sp, #0]
 800c670:	0033      	movs	r3, r6
 800c672:	002a      	movs	r2, r5
 800c674:	f000 fa60 	bl	800cb38 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c678:	2490      	movs	r4, #144	@ 0x90
 800c67a:	193b      	adds	r3, r7, r4
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	3301      	adds	r3, #1
 800c680:	193a      	adds	r2, r7, r4
 800c682:	6013      	str	r3, [r2, #0]
 800c684:	2390      	movs	r3, #144	@ 0x90
 800c686:	18fb      	adds	r3, r7, r3
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	2b05      	cmp	r3, #5
 800c68c:	d9d3      	bls.n	800c636 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800c68e:	4b2b      	ldr	r3, [pc, #172]	@ (800c73c <calculateSPLQ31+0x594>)
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	4b2d      	ldr	r3, [pc, #180]	@ (800c748 <calculateSPLQ31+0x5a0>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	18d2      	adds	r2, r2, r3
 800c698:	4b2b      	ldr	r3, [pc, #172]	@ (800c748 <calculateSPLQ31+0x5a0>)
 800c69a:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800c69c:	4b26      	ldr	r3, [pc, #152]	@ (800c738 <calculateSPLQ31+0x590>)
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	4b2a      	ldr	r3, [pc, #168]	@ (800c74c <calculateSPLQ31+0x5a4>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	18d2      	adds	r2, r2, r3
 800c6a6:	4b29      	ldr	r3, [pc, #164]	@ (800c74c <calculateSPLQ31+0x5a4>)
 800c6a8:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	228c      	movs	r2, #140	@ 0x8c
 800c6ae:	18ba      	adds	r2, r7, r2
 800c6b0:	6013      	str	r3, [r2, #0]
 800c6b2:	e025      	b.n	800c700 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800c6b4:	4b22      	ldr	r3, [pc, #136]	@ (800c740 <calculateSPLQ31+0x598>)
 800c6b6:	208c      	movs	r0, #140	@ 0x8c
 800c6b8:	183a      	adds	r2, r7, r0
 800c6ba:	6812      	ldr	r2, [r2, #0]
 800c6bc:	0092      	lsls	r2, r2, #2
 800c6be:	58d2      	ldr	r2, [r2, r3]
 800c6c0:	4b23      	ldr	r3, [pc, #140]	@ (800c750 <calculateSPLQ31+0x5a8>)
 800c6c2:	1839      	adds	r1, r7, r0
 800c6c4:	6809      	ldr	r1, [r1, #0]
 800c6c6:	0089      	lsls	r1, r1, #2
 800c6c8:	58cb      	ldr	r3, [r1, r3]
 800c6ca:	18d1      	adds	r1, r2, r3
 800c6cc:	4b20      	ldr	r3, [pc, #128]	@ (800c750 <calculateSPLQ31+0x5a8>)
 800c6ce:	183a      	adds	r2, r7, r0
 800c6d0:	6812      	ldr	r2, [r2, #0]
 800c6d2:	0092      	lsls	r2, r2, #2
 800c6d4:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800c6d6:	4b1b      	ldr	r3, [pc, #108]	@ (800c744 <calculateSPLQ31+0x59c>)
 800c6d8:	183a      	adds	r2, r7, r0
 800c6da:	6812      	ldr	r2, [r2, #0]
 800c6dc:	0092      	lsls	r2, r2, #2
 800c6de:	58d2      	ldr	r2, [r2, r3]
 800c6e0:	4b1c      	ldr	r3, [pc, #112]	@ (800c754 <calculateSPLQ31+0x5ac>)
 800c6e2:	1839      	adds	r1, r7, r0
 800c6e4:	6809      	ldr	r1, [r1, #0]
 800c6e6:	0089      	lsls	r1, r1, #2
 800c6e8:	58cb      	ldr	r3, [r1, r3]
 800c6ea:	18d1      	adds	r1, r2, r3
 800c6ec:	4b19      	ldr	r3, [pc, #100]	@ (800c754 <calculateSPLQ31+0x5ac>)
 800c6ee:	183a      	adds	r2, r7, r0
 800c6f0:	6812      	ldr	r2, [r2, #0]
 800c6f2:	0092      	lsls	r2, r2, #2
 800c6f4:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c6f6:	183b      	adds	r3, r7, r0
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	183a      	adds	r2, r7, r0
 800c6fe:	6013      	str	r3, [r2, #0]
 800c700:	238c      	movs	r3, #140	@ 0x8c
 800c702:	18fb      	adds	r3, r7, r3
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2b05      	cmp	r3, #5
 800c708:	d9d4      	bls.n	800c6b4 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800c70a:	4b13      	ldr	r3, [pc, #76]	@ (800c758 <calculateSPLQ31+0x5b0>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	1c5a      	adds	r2, r3, #1
 800c710:	4b11      	ldr	r3, [pc, #68]	@ (800c758 <calculateSPLQ31+0x5b0>)
 800c712:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800c714:	4b10      	ldr	r3, [pc, #64]	@ (800c758 <calculateSPLQ31+0x5b0>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	2b0f      	cmp	r3, #15
 800c71a:	d905      	bls.n	800c728 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800c71c:	4b0f      	ldr	r3, [pc, #60]	@ (800c75c <calculateSPLQ31+0x5b4>)
 800c71e:	2201      	movs	r2, #1
 800c720:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c722:	4b0f      	ldr	r3, [pc, #60]	@ (800c760 <calculateSPLQ31+0x5b8>)
 800c724:	2200      	movs	r2, #0
 800c726:	701a      	strb	r2, [r3, #0]
    }
}
 800c728:	46c0      	nop			@ (mov r8, r8)
 800c72a:	46bd      	mov	sp, r7
 800c72c:	b02f      	add	sp, #188	@ 0xbc
 800c72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c730:	200000bc 	.word	0x200000bc
 800c734:	200000c0 	.word	0x200000c0
 800c738:	20001364 	.word	0x20001364
 800c73c:	20001360 	.word	0x20001360
 800c740:	20001368 	.word	0x20001368
 800c744:	20001380 	.word	0x20001380
 800c748:	20001da8 	.word	0x20001da8
 800c74c:	20001dac 	.word	0x20001dac
 800c750:	20001db0 	.word	0x20001db0
 800c754:	20001dc8 	.word	0x20001dc8
 800c758:	20001de0 	.word	0x20001de0
 800c75c:	20001357 	.word	0x20001357
 800c760:	20001355 	.word	0x20001355

0800c764 <resetSPLstate>:

static void resetSPLstate(void)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800c76a:	4b11      	ldr	r3, [pc, #68]	@ (800c7b0 <resetSPLstate+0x4c>)
 800c76c:	2200      	movs	r2, #0
 800c76e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800c770:	4b10      	ldr	r3, [pc, #64]	@ (800c7b4 <resetSPLstate+0x50>)
 800c772:	2200      	movs	r2, #0
 800c774:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800c776:	4b10      	ldr	r3, [pc, #64]	@ (800c7b8 <resetSPLstate+0x54>)
 800c778:	2200      	movs	r2, #0
 800c77a:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c77c:	2300      	movs	r3, #0
 800c77e:	607b      	str	r3, [r7, #4]
 800c780:	e00c      	b.n	800c79c <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800c782:	4b0e      	ldr	r3, [pc, #56]	@ (800c7bc <resetSPLstate+0x58>)
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	0092      	lsls	r2, r2, #2
 800c788:	2100      	movs	r1, #0
 800c78a:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800c78c:	4b0c      	ldr	r3, [pc, #48]	@ (800c7c0 <resetSPLstate+0x5c>)
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	0092      	lsls	r2, r2, #2
 800c792:	2100      	movs	r1, #0
 800c794:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	3301      	adds	r3, #1
 800c79a:	607b      	str	r3, [r7, #4]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2b05      	cmp	r3, #5
 800c7a0:	d9ef      	bls.n	800c782 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800c7a2:	4b08      	ldr	r3, [pc, #32]	@ (800c7c4 <resetSPLstate+0x60>)
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	701a      	strb	r2, [r3, #0]
}
 800c7a8:	46c0      	nop			@ (mov r8, r8)
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	b002      	add	sp, #8
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	20001da8 	.word	0x20001da8
 800c7b4:	20001dac 	.word	0x20001dac
 800c7b8:	20001de0 	.word	0x20001de0
 800c7bc:	20001db0 	.word	0x20001db0
 800c7c0:	20001dc8 	.word	0x20001dc8
 800c7c4:	20001357 	.word	0x20001357

0800c7c8 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800c7c8:	b5b0      	push	{r4, r5, r7, lr}
 800c7ca:	b090      	sub	sp, #64	@ 0x40
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	0019      	movs	r1, r3
 800c7d4:	1dfb      	adds	r3, r7, #7
 800c7d6:	701a      	strb	r2, [r3, #0]
 800c7d8:	1dbb      	adds	r3, r7, #6
 800c7da:	1c0a      	adds	r2, r1, #0
 800c7dc:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800c7de:	1dfb      	adds	r3, r7, #7
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d005      	beq.n	800c7f2 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800c7e6:	4b3b      	ldr	r3, [pc, #236]	@ (800c8d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800c7ec:	4b3a      	ldr	r3, [pc, #232]	@ (800c8d8 <getFilteredMaxAmplitudeQ31+0x110>)
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800c7fa:	2305      	movs	r3, #5
 800c7fc:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800c7fe:	2300      	movs	r3, #0
 800c800:	637b      	str	r3, [r7, #52]	@ 0x34
 800c802:	e040      	b.n	800c886 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800c804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	68fa      	ldr	r2, [r7, #12]
 800c80a:	18d3      	adds	r3, r2, r3
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c810:	409a      	lsls	r2, r3
 800c812:	0013      	movs	r3, r2
 800c814:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800c816:	4b30      	ldr	r3, [pc, #192]	@ (800c8d8 <getFilteredMaxAmplitudeQ31+0x110>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	425a      	negs	r2, r3
 800c81c:	4b2e      	ldr	r3, [pc, #184]	@ (800c8d8 <getFilteredMaxAmplitudeQ31+0x110>)
 800c81e:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800c820:	2418      	movs	r4, #24
 800c822:	193a      	adds	r2, r7, r4
 800c824:	492c      	ldr	r1, [pc, #176]	@ (800c8d8 <getFilteredMaxAmplitudeQ31+0x110>)
 800c826:	231c      	movs	r3, #28
 800c828:	18f8      	adds	r0, r7, r3
 800c82a:	2301      	movs	r3, #1
 800c82c:	f011 fbbc 	bl	801dfa8 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800c830:	2514      	movs	r5, #20
 800c832:	197a      	adds	r2, r7, r5
 800c834:	1939      	adds	r1, r7, r4
 800c836:	4829      	ldr	r0, [pc, #164]	@ (800c8dc <getFilteredMaxAmplitudeQ31+0x114>)
 800c838:	2301      	movs	r3, #1
 800c83a:	f011 fb83 	bl	801df44 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800c83e:	2410      	movs	r4, #16
 800c840:	193a      	adds	r2, r7, r4
 800c842:	4924      	ldr	r1, [pc, #144]	@ (800c8d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c844:	4826      	ldr	r0, [pc, #152]	@ (800c8e0 <getFilteredMaxAmplitudeQ31+0x118>)
 800c846:	2301      	movs	r3, #1
 800c848:	f011 fb7c 	bl	801df44 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800c84c:	4a21      	ldr	r2, [pc, #132]	@ (800c8d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c84e:	1939      	adds	r1, r7, r4
 800c850:	1978      	adds	r0, r7, r5
 800c852:	2301      	movs	r3, #1
 800c854:	f011 fba8 	bl	801dfa8 <arm_add_q31>

        lastData = fx;
 800c858:	69fa      	ldr	r2, [r7, #28]
 800c85a:	4b1f      	ldr	r3, [pc, #124]	@ (800c8d8 <getFilteredMaxAmplitudeQ31+0x110>)
 800c85c:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800c85e:	4b1d      	ldr	r3, [pc, #116]	@ (800c8d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c864:	429a      	cmp	r2, r3
 800c866:	da03      	bge.n	800c870 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800c868:	4b1a      	ldr	r3, [pc, #104]	@ (800c8d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c86e:	e007      	b.n	800c880 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800c870:	4b18      	ldr	r3, [pc, #96]	@ (800c8d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c876:	429a      	cmp	r2, r3
 800c878:	dd02      	ble.n	800c880 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800c87a:	4b16      	ldr	r3, [pc, #88]	@ (800c8d4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800c880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c882:	3301      	adds	r3, #1
 800c884:	637b      	str	r3, [r7, #52]	@ 0x34
 800c886:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d3ba      	bcc.n	800c804 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800c88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c890:	17da      	asrs	r2, r3, #31
 800c892:	189b      	adds	r3, r3, r2
 800c894:	4053      	eors	r3, r2
 800c896:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800c898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c89a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800c89c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d200      	bcs.n	800c8a6 <getFilteredMaxAmplitudeQ31+0xde>
 800c8a4:	0013      	movs	r3, r2
 800c8a6:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800c8a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ac:	40da      	lsrs	r2, r3
 800c8ae:	0013      	movs	r3, r2
 800c8b0:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800c8b2:	1dbb      	adds	r3, r7, #6
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d007      	beq.n	800c8ca <getFilteredMaxAmplitudeQ31+0x102>
 800c8ba:	4b0a      	ldr	r3, [pc, #40]	@ (800c8e4 <getFilteredMaxAmplitudeQ31+0x11c>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	6a3a      	ldr	r2, [r7, #32]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d902      	bls.n	800c8ca <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800c8c4:	4b07      	ldr	r3, [pc, #28]	@ (800c8e4 <getFilteredMaxAmplitudeQ31+0x11c>)
 800c8c6:	6a3a      	ldr	r2, [r7, #32]
 800c8c8:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800c8ca:	6a3b      	ldr	r3, [r7, #32]
}
 800c8cc:	0018      	movs	r0, r3
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	b010      	add	sp, #64	@ 0x40
 800c8d2:	bdb0      	pop	{r4, r5, r7, pc}
 800c8d4:	200021e4 	.word	0x200021e4
 800c8d8:	200021e8 	.word	0x200021e8
 800c8dc:	08024cc8 	.word	0x08024cc8
 800c8e0:	08024ccc 	.word	0x08024ccc
 800c8e4:	2000135c 	.word	0x2000135c

0800c8e8 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b086      	sub	sp, #24
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800c8f4:	4913      	ldr	r1, [pc, #76]	@ (800c944 <floatToIntAndFrac2dp+0x5c>)
 800c8f6:	68f8      	ldr	r0, [r7, #12]
 800c8f8:	f7f4 fb52 	bl	8000fa0 <__aeabi_fmul>
 800c8fc:	1c03      	adds	r3, r0, #0
 800c8fe:	1c18      	adds	r0, r3, #0
 800c900:	f015 ff86 	bl	8022810 <roundf>
 800c904:	1c03      	adds	r3, r0, #0
 800c906:	1c18      	adds	r0, r3, #0
 800c908:	f7f3 fe88 	bl	800061c <__aeabi_f2uiz>
 800c90c:	0003      	movs	r3, r0
 800c90e:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	2164      	movs	r1, #100	@ 0x64
 800c914:	0018      	movs	r0, r3
 800c916:	f7f3 fc45 	bl	80001a4 <__udivsi3>
 800c91a:	0003      	movs	r3, r0
 800c91c:	001a      	movs	r2, r3
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	b2da      	uxtb	r2, r3
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	2164      	movs	r1, #100	@ 0x64
 800c92e:	434b      	muls	r3, r1
 800c930:	b2db      	uxtb	r3, r3
 800c932:	1ad3      	subs	r3, r2, r3
 800c934:	b2da      	uxtb	r2, r3
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	701a      	strb	r2, [r3, #0]
}
 800c93a:	46c0      	nop			@ (mov r8, r8)
 800c93c:	46bd      	mov	sp, r7
 800c93e:	b006      	add	sp, #24
 800c940:	bd80      	pop	{r7, pc}
 800c942:	46c0      	nop			@ (mov r8, r8)
 800c944:	42c80000 	.word	0x42c80000

0800c948 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b086      	sub	sp, #24
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800c954:	4914      	ldr	r1, [pc, #80]	@ (800c9a8 <floatToIntAndFrac1dp+0x60>)
 800c956:	68f8      	ldr	r0, [r7, #12]
 800c958:	f7f4 fb22 	bl	8000fa0 <__aeabi_fmul>
 800c95c:	1c03      	adds	r3, r0, #0
 800c95e:	1c18      	adds	r0, r3, #0
 800c960:	f015 ff56 	bl	8022810 <roundf>
 800c964:	1c03      	adds	r3, r0, #0
 800c966:	1c18      	adds	r0, r3, #0
 800c968:	f7f3 fe58 	bl	800061c <__aeabi_f2uiz>
 800c96c:	0003      	movs	r3, r0
 800c96e:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	210a      	movs	r1, #10
 800c974:	0018      	movs	r0, r3
 800c976:	f7f3 fc15 	bl	80001a4 <__udivsi3>
 800c97a:	0003      	movs	r3, r0
 800c97c:	001a      	movs	r2, r3
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	b2da      	uxtb	r2, r3
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	1c19      	adds	r1, r3, #0
 800c98e:	0089      	lsls	r1, r1, #2
 800c990:	18cb      	adds	r3, r1, r3
 800c992:	18db      	adds	r3, r3, r3
 800c994:	b2db      	uxtb	r3, r3
 800c996:	1ad3      	subs	r3, r2, r3
 800c998:	b2da      	uxtb	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	701a      	strb	r2, [r3, #0]
}
 800c99e:	46c0      	nop			@ (mov r8, r8)
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	b006      	add	sp, #24
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	46c0      	nop			@ (mov r8, r8)
 800c9a8:	41200000 	.word	0x41200000

0800c9ac <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800c9ac:	b590      	push	{r4, r7, lr}
 800c9ae:	b087      	sub	sp, #28
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	607a      	str	r2, [r7, #4]
 800c9b8:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f7f4 fe08 	bl	80015d0 <__aeabi_i2f>
 800c9c0:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c9c2:	6838      	ldr	r0, [r7, #0]
 800c9c4:	f7f4 fe04 	bl	80015d0 <__aeabi_i2f>
 800c9c8:	1c03      	adds	r3, r0, #0
 800c9ca:	4918      	ldr	r1, [pc, #96]	@ (800ca2c <sumToIntAverage+0x80>)
 800c9cc:	1c18      	adds	r0, r3, #0
 800c9ce:	f7f4 f901 	bl	8000bd4 <__aeabi_fdiv>
 800c9d2:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c9d4:	1c19      	adds	r1, r3, #0
 800c9d6:	1c20      	adds	r0, r4, #0
 800c9d8:	f7f3 ff72 	bl	80008c0 <__aeabi_fadd>
 800c9dc:	1c03      	adds	r3, r0, #0
 800c9de:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c9e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9e2:	f7f4 fe41 	bl	8001668 <__aeabi_ui2f>
 800c9e6:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c9e8:	1c19      	adds	r1, r3, #0
 800c9ea:	1c20      	adds	r0, r4, #0
 800c9ec:	f7f4 f8f2 	bl	8000bd4 <__aeabi_fdiv>
 800c9f0:	1c03      	adds	r3, r0, #0
 800c9f2:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	2310      	movs	r3, #16
 800c9fc:	18f9      	adds	r1, r7, r3
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	1c18      	adds	r0, r3, #0
 800ca02:	f7ff ffa1 	bl	800c948 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	2bff      	cmp	r3, #255	@ 0xff
 800ca0a:	d906      	bls.n	800ca1a <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	22ff      	movs	r2, #255	@ 0xff
 800ca10:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	2209      	movs	r2, #9
 800ca16:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800ca18:	e003      	b.n	800ca22 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	b2da      	uxtb	r2, r3
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	701a      	strb	r2, [r3, #0]
}
 800ca22:	46c0      	nop			@ (mov r8, r8)
 800ca24:	46bd      	mov	sp, r7
 800ca26:	b007      	add	sp, #28
 800ca28:	bd90      	pop	{r4, r7, pc}
 800ca2a:	46c0      	nop			@ (mov r8, r8)
 800ca2c:	41200000 	.word	0x41200000

0800ca30 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	607a      	str	r2, [r7, #4]
 800ca3c:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	2280      	movs	r2, #128	@ 0x80
 800ca42:	0612      	lsls	r2, r2, #24
 800ca44:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	4a18      	ldr	r2, [pc, #96]	@ (800caac <findMinMax+0x7c>)
 800ca4a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	617b      	str	r3, [r7, #20]
 800ca50:	e022      	b.n	800ca98 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	18d3      	adds	r3, r2, r3
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	da06      	bge.n	800ca72 <findMinMax+0x42>
        {
            min[0] = array[i];
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	009b      	lsls	r3, r3, #2
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	18d3      	adds	r3, r2, r3
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	18d3      	adds	r3, r2, r3
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	dd06      	ble.n	800ca92 <findMinMax+0x62>
        {
            max[0] = array[i];
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	009b      	lsls	r3, r3, #2
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	18d3      	adds	r3, r2, r3
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	3301      	adds	r3, #1
 800ca96:	617b      	str	r3, [r7, #20]
 800ca98:	697a      	ldr	r2, [r7, #20]
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d3d8      	bcc.n	800ca52 <findMinMax+0x22>
        }
    }
}
 800caa0:	46c0      	nop			@ (mov r8, r8)
 800caa2:	46c0      	nop			@ (mov r8, r8)
 800caa4:	46bd      	mov	sp, r7
 800caa6:	b006      	add	sp, #24
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	46c0      	nop			@ (mov r8, r8)
 800caac:	7fffffff 	.word	0x7fffffff

0800cab0 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800caba:	2300      	movs	r3, #0
 800cabc:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d302      	bcc.n	800cacc <getPo2factor+0x1c>
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d107      	bne.n	800cadc <getPo2factor+0x2c>
    {
        return 0;
 800cacc:	2300      	movs	r3, #0
 800cace:	e00d      	b.n	800caec <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	085b      	lsrs	r3, r3, #1
 800cad4:	607b      	str	r3, [r7, #4]
        bitShift++;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	3301      	adds	r3, #1
 800cada:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d2f5      	bcs.n	800cad0 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	3b01      	subs	r3, #1
 800cae8:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800caea:	68fb      	ldr	r3, [r7, #12]
}
 800caec:	0018      	movs	r0, r3
 800caee:	46bd      	mov	sp, r7
 800caf0:	b004      	add	sp, #16
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b086      	sub	sp, #24
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	607a      	str	r2, [r7, #4]
 800cb00:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800cb02:	68f8      	ldr	r0, [r7, #12]
 800cb04:	f7f4 fdb0 	bl	8001668 <__aeabi_ui2f>
 800cb08:	1c03      	adds	r3, r0, #0
 800cb0a:	1c19      	adds	r1, r3, #0
 800cb0c:	68b8      	ldr	r0, [r7, #8]
 800cb0e:	f7f4 fa47 	bl	8000fa0 <__aeabi_fmul>
 800cb12:	1c03      	adds	r3, r0, #0
 800cb14:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800cb1a:	683a      	ldr	r2, [r7, #0]
 800cb1c:	2310      	movs	r3, #16
 800cb1e:	18f9      	adds	r1, r7, r3
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	1c18      	adds	r0, r3, #0
 800cb24:	f7ff fee0 	bl	800c8e8 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	b29a      	uxth	r2, r3
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	801a      	strh	r2, [r3, #0]
}
 800cb30:	46c0      	nop			@ (mov r8, r8)
 800cb32:	46bd      	mov	sp, r7
 800cb34:	b006      	add	sp, #24
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60b8      	str	r0, [r7, #8]
 800cb40:	60f9      	str	r1, [r7, #12]
 800cb42:	607a      	str	r2, [r7, #4]
 800cb44:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800cb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb48:	6a3a      	ldr	r2, [r7, #32]
 800cb4a:	68b8      	ldr	r0, [r7, #8]
 800cb4c:	68f9      	ldr	r1, [r7, #12]
 800cb4e:	f7fa fb3d 	bl	80071cc <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800cb52:	6a3b      	ldr	r3, [r7, #32]
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	18d2      	adds	r2, r2, r3
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	18d2      	adds	r2, r2, r3
 800cb5e:	6a3b      	ldr	r3, [r7, #32]
 800cb60:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800cb62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	18d2      	adds	r2, r2, r3
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	18d2      	adds	r2, r2, r3
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb70:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800cb72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb74:	6a3b      	ldr	r3, [r7, #32]
 800cb76:	0011      	movs	r1, r2
 800cb78:	0018      	movs	r0, r3
 800cb7a:	f7fa fbb7 	bl	80072ec <correctIntFracNumber>
}
 800cb7e:	46c0      	nop			@ (mov r8, r8)
 800cb80:	46bd      	mov	sp, r7
 800cb82:	b004      	add	sp, #16
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800cb86:	b580      	push	{r7, lr}
 800cb88:	b086      	sub	sp, #24
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	60f8      	str	r0, [r7, #12]
 800cb8e:	60b9      	str	r1, [r7, #8]
 800cb90:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800cb92:	2300      	movs	r3, #0
 800cb94:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800cb96:	2300      	movs	r3, #0
 800cb98:	613b      	str	r3, [r7, #16]
 800cb9a:	e019      	b.n	800cbd0 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	005b      	lsls	r3, r3, #1
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	18d3      	adds	r3, r2, r3
 800cba4:	881b      	ldrh	r3, [r3, #0]
 800cba6:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800cba8:	693a      	ldr	r2, [r7, #16]
 800cbaa:	3201      	adds	r2, #1
 800cbac:	0052      	lsls	r2, r2, #1
 800cbae:	68f9      	ldr	r1, [r7, #12]
 800cbb0:	188a      	adds	r2, r1, r2
 800cbb2:	8812      	ldrh	r2, [r2, #0]
 800cbb4:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800cbb6:	0019      	movs	r1, r3
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800cbc0:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800cbc2:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	3304      	adds	r3, #4
 800cbce:	613b      	str	r3, [r7, #16]
 800cbd0:	693a      	ldr	r2, [r7, #16]
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d3e1      	bcc.n	800cb9c <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800cbd8:	46c0      	nop			@ (mov r8, r8)
 800cbda:	46c0      	nop			@ (mov r8, r8)
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	b006      	add	sp, #24
 800cbe0:	bd80      	pop	{r7, pc}
	...

0800cbe4 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	af00      	add	r7, sp, #0
  init = false;
 800cbe8:	4b02      	ldr	r3, [pc, #8]	@ (800cbf4 <InitDone+0x10>)
 800cbea:	2200      	movs	r2, #0
 800cbec:	701a      	strb	r2, [r3, #0]
}
 800cbee:	46c0      	nop			@ (mov r8, r8)
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	200000c8 	.word	0x200000c8

0800cbf8 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800cbfe:	f7f9 faff 	bl	8006200 <ReadBatteryVoltage>
 800cc02:	1c02      	adds	r2, r0, #0
 800cc04:	4b25      	ldr	r3, [pc, #148]	@ (800cc9c <batteryChargeCheck+0xa4>)
 800cc06:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.5){
 800cc08:	4b24      	ldr	r3, [pc, #144]	@ (800cc9c <batteryChargeCheck+0xa4>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4924      	ldr	r1, [pc, #144]	@ (800cca0 <batteryChargeCheck+0xa8>)
 800cc0e:	1c18      	adds	r0, r3, #0
 800cc10:	f7f3 fc8e 	bl	8000530 <__aeabi_fcmplt>
 800cc14:	1e03      	subs	r3, r0, #0
 800cc16:	d002      	beq.n	800cc1e <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800cc18:	1dfb      	adds	r3, r7, #7
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800cc1e:	4b1f      	ldr	r3, [pc, #124]	@ (800cc9c <batteryChargeCheck+0xa4>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	1c18      	adds	r0, r3, #0
 800cc24:	f7f6 fc1e 	bl	8003464 <__aeabi_f2d>
 800cc28:	4a1e      	ldr	r2, [pc, #120]	@ (800cca4 <batteryChargeCheck+0xac>)
 800cc2a:	4b1f      	ldr	r3, [pc, #124]	@ (800cca8 <batteryChargeCheck+0xb0>)
 800cc2c:	f7f3 fc46 	bl	80004bc <__aeabi_dcmplt>
 800cc30:	1e03      	subs	r3, r0, #0
 800cc32:	d00a      	beq.n	800cc4a <batteryChargeCheck+0x52>
 800cc34:	4b19      	ldr	r3, [pc, #100]	@ (800cc9c <batteryChargeCheck+0xa4>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4919      	ldr	r1, [pc, #100]	@ (800cca0 <batteryChargeCheck+0xa8>)
 800cc3a:	1c18      	adds	r0, r3, #0
 800cc3c:	f7f3 fc96 	bl	800056c <__aeabi_fcmpge>
 800cc40:	1e03      	subs	r3, r0, #0
 800cc42:	d002      	beq.n	800cc4a <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800cc44:	1dfb      	adds	r3, r7, #7
 800cc46:	2202      	movs	r2, #2
 800cc48:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800cc4a:	4b14      	ldr	r3, [pc, #80]	@ (800cc9c <batteryChargeCheck+0xa4>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2181      	movs	r1, #129	@ 0x81
 800cc50:	05c9      	lsls	r1, r1, #23
 800cc52:	1c18      	adds	r0, r3, #0
 800cc54:	f7f3 fc6c 	bl	8000530 <__aeabi_fcmplt>
 800cc58:	1e03      	subs	r3, r0, #0
 800cc5a:	d00d      	beq.n	800cc78 <batteryChargeCheck+0x80>
 800cc5c:	4b0f      	ldr	r3, [pc, #60]	@ (800cc9c <batteryChargeCheck+0xa4>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	1c18      	adds	r0, r3, #0
 800cc62:	f7f6 fbff 	bl	8003464 <__aeabi_f2d>
 800cc66:	4a0f      	ldr	r2, [pc, #60]	@ (800cca4 <batteryChargeCheck+0xac>)
 800cc68:	4b0f      	ldr	r3, [pc, #60]	@ (800cca8 <batteryChargeCheck+0xb0>)
 800cc6a:	f7f3 fc45 	bl	80004f8 <__aeabi_dcmpge>
 800cc6e:	1e03      	subs	r3, r0, #0
 800cc70:	d002      	beq.n	800cc78 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800cc72:	1dfb      	adds	r3, r7, #7
 800cc74:	2203      	movs	r2, #3
 800cc76:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800cc78:	4b08      	ldr	r3, [pc, #32]	@ (800cc9c <batteryChargeCheck+0xa4>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2181      	movs	r1, #129	@ 0x81
 800cc7e:	05c9      	lsls	r1, r1, #23
 800cc80:	1c18      	adds	r0, r3, #0
 800cc82:	f7f3 fc73 	bl	800056c <__aeabi_fcmpge>
 800cc86:	1e03      	subs	r3, r0, #0
 800cc88:	d002      	beq.n	800cc90 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800cc8a:	1dfb      	adds	r3, r7, #7
 800cc8c:	2204      	movs	r2, #4
 800cc8e:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800cc90:	1dfb      	adds	r3, r7, #7
 800cc92:	781b      	ldrb	r3, [r3, #0]
}
 800cc94:	0018      	movs	r0, r3
 800cc96:	46bd      	mov	sp, r7
 800cc98:	b002      	add	sp, #8
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	200021f8 	.word	0x200021f8
 800cca0:	40600000 	.word	0x40600000
 800cca4:	9999999a 	.word	0x9999999a
 800cca8:	400d9999 	.word	0x400d9999

0800ccac <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800ccac:	b590      	push	{r4, r7, lr}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	0004      	movs	r4, r0
 800ccb4:	0008      	movs	r0, r1
 800ccb6:	0011      	movs	r1, r2
 800ccb8:	1dbb      	adds	r3, r7, #6
 800ccba:	1c22      	adds	r2, r4, #0
 800ccbc:	801a      	strh	r2, [r3, #0]
 800ccbe:	1d3b      	adds	r3, r7, #4
 800ccc0:	1c02      	adds	r2, r0, #0
 800ccc2:	801a      	strh	r2, [r3, #0]
 800ccc4:	1cbb      	adds	r3, r7, #2
 800ccc6:	1c0a      	adds	r2, r1, #0
 800ccc8:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800ccca:	4b0f      	ldr	r3, [pc, #60]	@ (800cd08 <SetStatusLED+0x5c>)
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d107      	bne.n	800cce2 <SetStatusLED+0x36>
 800ccd2:	4b0e      	ldr	r3, [pc, #56]	@ (800cd0c <SetStatusLED+0x60>)
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d103      	bne.n	800cce2 <SetStatusLED+0x36>
 800ccda:	4b0d      	ldr	r3, [pc, #52]	@ (800cd10 <SetStatusLED+0x64>)
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d00e      	beq.n	800cd00 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800cce2:	2380      	movs	r3, #128	@ 0x80
 800cce4:	05db      	lsls	r3, r3, #23
 800cce6:	1dba      	adds	r2, r7, #6
 800cce8:	8812      	ldrh	r2, [r2, #0]
 800ccea:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800ccec:	2380      	movs	r3, #128	@ 0x80
 800ccee:	05db      	lsls	r3, r3, #23
 800ccf0:	1d3a      	adds	r2, r7, #4
 800ccf2:	8812      	ldrh	r2, [r2, #0]
 800ccf4:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800ccf6:	2380      	movs	r3, #128	@ 0x80
 800ccf8:	05db      	lsls	r3, r3, #23
 800ccfa:	1cba      	adds	r2, r7, #2
 800ccfc:	8812      	ldrh	r2, [r2, #0]
 800ccfe:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800cd00:	46c0      	nop			@ (mov r8, r8)
 800cd02:	46bd      	mov	sp, r7
 800cd04:	b003      	add	sp, #12
 800cd06:	bd90      	pop	{r4, r7, pc}
 800cd08:	200021ed 	.word	0x200021ed
 800cd0c:	200000c8 	.word	0x200000c8
 800cd10:	200021ee 	.word	0x200021ee

0800cd14 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800cd14:	b590      	push	{r4, r7, lr}
 800cd16:	b083      	sub	sp, #12
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	0004      	movs	r4, r0
 800cd1c:	0008      	movs	r0, r1
 800cd1e:	0011      	movs	r1, r2
 800cd20:	1dfb      	adds	r3, r7, #7
 800cd22:	1c22      	adds	r2, r4, #0
 800cd24:	701a      	strb	r2, [r3, #0]
 800cd26:	1dbb      	adds	r3, r7, #6
 800cd28:	1c02      	adds	r2, r0, #0
 800cd2a:	701a      	strb	r2, [r3, #0]
 800cd2c:	1d7b      	adds	r3, r7, #5
 800cd2e:	1c0a      	adds	r2, r1, #0
 800cd30:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800cd32:	4b19      	ldr	r3, [pc, #100]	@ (800cd98 <SetDBLED+0x84>)
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d107      	bne.n	800cd4a <SetDBLED+0x36>
 800cd3a:	4b18      	ldr	r3, [pc, #96]	@ (800cd9c <SetDBLED+0x88>)
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d103      	bne.n	800cd4a <SetDBLED+0x36>
 800cd42:	4b17      	ldr	r3, [pc, #92]	@ (800cda0 <SetDBLED+0x8c>)
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d022      	beq.n	800cd90 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800cd4a:	1dfb      	adds	r3, r7, #7
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	2201      	movs	r2, #1
 800cd50:	4053      	eors	r3, r2
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	001a      	movs	r2, r3
 800cd56:	4b13      	ldr	r3, [pc, #76]	@ (800cda4 <SetDBLED+0x90>)
 800cd58:	2101      	movs	r1, #1
 800cd5a:	0018      	movs	r0, r3
 800cd5c:	f002 ff29 	bl	800fbb2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800cd60:	1dbb      	adds	r3, r7, #6
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	2201      	movs	r2, #1
 800cd66:	4053      	eors	r3, r2
 800cd68:	b2db      	uxtb	r3, r3
 800cd6a:	001a      	movs	r2, r3
 800cd6c:	2380      	movs	r3, #128	@ 0x80
 800cd6e:	005b      	lsls	r3, r3, #1
 800cd70:	480c      	ldr	r0, [pc, #48]	@ (800cda4 <SetDBLED+0x90>)
 800cd72:	0019      	movs	r1, r3
 800cd74:	f002 ff1d 	bl	800fbb2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800cd78:	1d7b      	adds	r3, r7, #5
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	4053      	eors	r3, r2
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	001a      	movs	r2, r3
 800cd84:	2380      	movs	r3, #128	@ 0x80
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	4806      	ldr	r0, [pc, #24]	@ (800cda4 <SetDBLED+0x90>)
 800cd8a:	0019      	movs	r1, r3
 800cd8c:	f002 ff11 	bl	800fbb2 <HAL_GPIO_WritePin>
  }
}
 800cd90:	46c0      	nop			@ (mov r8, r8)
 800cd92:	46bd      	mov	sp, r7
 800cd94:	b003      	add	sp, #12
 800cd96:	bd90      	pop	{r4, r7, pc}
 800cd98:	200021ed 	.word	0x200021ed
 800cd9c:	200000c8 	.word	0x200000c8
 800cda0:	200021ee 	.word	0x200021ee
 800cda4:	50000400 	.word	0x50000400

0800cda8 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800cda8:	b590      	push	{r4, r7, lr}
 800cdaa:	b083      	sub	sp, #12
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	0004      	movs	r4, r0
 800cdb0:	0008      	movs	r0, r1
 800cdb2:	0011      	movs	r1, r2
 800cdb4:	1dbb      	adds	r3, r7, #6
 800cdb6:	1c22      	adds	r2, r4, #0
 800cdb8:	801a      	strh	r2, [r3, #0]
 800cdba:	1d3b      	adds	r3, r7, #4
 800cdbc:	1c02      	adds	r2, r0, #0
 800cdbe:	801a      	strh	r2, [r3, #0]
 800cdc0:	1cbb      	adds	r3, r7, #2
 800cdc2:	1c0a      	adds	r2, r1, #0
 800cdc4:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800cdc6:	4b0e      	ldr	r3, [pc, #56]	@ (800ce00 <SetVocLED+0x58>)
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d107      	bne.n	800cdde <SetVocLED+0x36>
 800cdce:	4b0d      	ldr	r3, [pc, #52]	@ (800ce04 <SetVocLED+0x5c>)
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d103      	bne.n	800cdde <SetVocLED+0x36>
 800cdd6:	4b0c      	ldr	r3, [pc, #48]	@ (800ce08 <SetVocLED+0x60>)
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d00b      	beq.n	800cdf6 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800cdde:	4b0b      	ldr	r3, [pc, #44]	@ (800ce0c <SetVocLED+0x64>)
 800cde0:	1dba      	adds	r2, r7, #6
 800cde2:	8812      	ldrh	r2, [r2, #0]
 800cde4:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800cde6:	4b09      	ldr	r3, [pc, #36]	@ (800ce0c <SetVocLED+0x64>)
 800cde8:	1d3a      	adds	r2, r7, #4
 800cdea:	8812      	ldrh	r2, [r2, #0]
 800cdec:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800cdee:	4b07      	ldr	r3, [pc, #28]	@ (800ce0c <SetVocLED+0x64>)
 800cdf0:	1cba      	adds	r2, r7, #2
 800cdf2:	8812      	ldrh	r2, [r2, #0]
 800cdf4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800cdf6:	46c0      	nop			@ (mov r8, r8)
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	b003      	add	sp, #12
 800cdfc:	bd90      	pop	{r4, r7, pc}
 800cdfe:	46c0      	nop			@ (mov r8, r8)
 800ce00:	200021ed 	.word	0x200021ed
 800ce04:	200000c8 	.word	0x200000c8
 800ce08:	200021ee 	.word	0x200021ee
 800ce0c:	40000400 	.word	0x40000400

0800ce10 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800ce10:	b580      	push	{r7, lr}
 800ce12:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ce14:	4b07      	ldr	r3, [pc, #28]	@ (800ce34 <SetMeasurementIndicator+0x24>)
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d103      	bne.n	800ce24 <SetMeasurementIndicator+0x14>
 800ce1c:	4b06      	ldr	r3, [pc, #24]	@ (800ce38 <SetMeasurementIndicator+0x28>)
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d003      	beq.n	800ce2c <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 800ce24:	2380      	movs	r3, #128	@ 0x80
 800ce26:	05db      	lsls	r3, r3, #23
 800ce28:	4a04      	ldr	r2, [pc, #16]	@ (800ce3c <SetMeasurementIndicator+0x2c>)
 800ce2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800ce2c:	46c0      	nop			@ (mov r8, r8)
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	46c0      	nop			@ (mov r8, r8)
 800ce34:	200021ed 	.word	0x200021ed
 800ce38:	200021ee 	.word	0x200021ee
 800ce3c:	00000bb8 	.word	0x00000bb8

0800ce40 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800ce40:	b580      	push	{r7, lr}
 800ce42:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ce44:	4b07      	ldr	r3, [pc, #28]	@ (800ce64 <ResetMeasurementIndicator+0x24>)
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d103      	bne.n	800ce54 <ResetMeasurementIndicator+0x14>
 800ce4c:	4b06      	ldr	r3, [pc, #24]	@ (800ce68 <ResetMeasurementIndicator+0x28>)
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d004      	beq.n	800ce5e <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800ce54:	2380      	movs	r3, #128	@ 0x80
 800ce56:	05db      	lsls	r3, r3, #23
 800ce58:	22fa      	movs	r2, #250	@ 0xfa
 800ce5a:	0112      	lsls	r2, r2, #4
 800ce5c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800ce5e:	46c0      	nop			@ (mov r8, r8)
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	200021ed 	.word	0x200021ed
 800ce68:	200021ee 	.word	0x200021ee

0800ce6c <SetMICIndicator>:
void SetMICIndicator(){
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ce70:	4b11      	ldr	r3, [pc, #68]	@ (800ceb8 <SetMICIndicator+0x4c>)
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d103      	bne.n	800ce80 <SetMICIndicator+0x14>
 800ce78:	4b10      	ldr	r3, [pc, #64]	@ (800cebc <SetMICIndicator+0x50>)
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d004      	beq.n	800ce8a <SetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_ON;
 800ce80:	2380      	movs	r3, #128	@ 0x80
 800ce82:	05db      	lsls	r3, r3, #23
 800ce84:	4a0e      	ldr	r2, [pc, #56]	@ (800cec0 <SetMICIndicator+0x54>)
 800ce86:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_ON;
    }
  }
}
 800ce88:	e013      	b.n	800ceb2 <SetMICIndicator+0x46>
    if (batteryCharge > 3.7) {
 800ce8a:	4b0e      	ldr	r3, [pc, #56]	@ (800cec4 <SetMICIndicator+0x58>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	1c18      	adds	r0, r3, #0
 800ce90:	f7f6 fae8 	bl	8003464 <__aeabi_f2d>
 800ce94:	4a0c      	ldr	r2, [pc, #48]	@ (800cec8 <SetMICIndicator+0x5c>)
 800ce96:	4b0d      	ldr	r3, [pc, #52]	@ (800cecc <SetMICIndicator+0x60>)
 800ce98:	f7f3 fb24 	bl	80004e4 <__aeabi_dcmpgt>
 800ce9c:	1e03      	subs	r3, r0, #0
 800ce9e:	d004      	beq.n	800ceaa <SetMICIndicator+0x3e>
      TIM2 -> CCR3 = LED_ON;
 800cea0:	2380      	movs	r3, #128	@ 0x80
 800cea2:	05db      	lsls	r3, r3, #23
 800cea4:	4a06      	ldr	r2, [pc, #24]	@ (800cec0 <SetMICIndicator+0x54>)
 800cea6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800cea8:	e003      	b.n	800ceb2 <SetMICIndicator+0x46>
      TIM2 -> CCR1 = LED_ON;
 800ceaa:	2380      	movs	r3, #128	@ 0x80
 800ceac:	05db      	lsls	r3, r3, #23
 800ceae:	4a04      	ldr	r2, [pc, #16]	@ (800cec0 <SetMICIndicator+0x54>)
 800ceb0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800ceb2:	46c0      	nop			@ (mov r8, r8)
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	200021ed 	.word	0x200021ed
 800cebc:	200021ee 	.word	0x200021ee
 800cec0:	00000bb8 	.word	0x00000bb8
 800cec4:	200021f8 	.word	0x200021f8
 800cec8:	9999999a 	.word	0x9999999a
 800cecc:	400d9999 	.word	0x400d9999

0800ced0 <ResetMICIndicator>:
void ResetMICIndicator(){
 800ced0:	b580      	push	{r7, lr}
 800ced2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ced4:	4b13      	ldr	r3, [pc, #76]	@ (800cf24 <ResetMICIndicator+0x54>)
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d103      	bne.n	800cee4 <ResetMICIndicator+0x14>
 800cedc:	4b12      	ldr	r3, [pc, #72]	@ (800cf28 <ResetMICIndicator+0x58>)
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d005      	beq.n	800cef0 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800cee4:	2380      	movs	r3, #128	@ 0x80
 800cee6:	05db      	lsls	r3, r3, #23
 800cee8:	22fa      	movs	r2, #250	@ 0xfa
 800ceea:	0112      	lsls	r2, r2, #4
 800ceec:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800ceee:	e015      	b.n	800cf1c <ResetMICIndicator+0x4c>
    if (batteryCharge > 3.74) {
 800cef0:	4b0e      	ldr	r3, [pc, #56]	@ (800cf2c <ResetMICIndicator+0x5c>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	1c18      	adds	r0, r3, #0
 800cef6:	f7f6 fab5 	bl	8003464 <__aeabi_f2d>
 800cefa:	4a0d      	ldr	r2, [pc, #52]	@ (800cf30 <ResetMICIndicator+0x60>)
 800cefc:	4b0d      	ldr	r3, [pc, #52]	@ (800cf34 <ResetMICIndicator+0x64>)
 800cefe:	f7f3 faf1 	bl	80004e4 <__aeabi_dcmpgt>
 800cf02:	1e03      	subs	r3, r0, #0
 800cf04:	d005      	beq.n	800cf12 <ResetMICIndicator+0x42>
      TIM2 -> CCR3 = LED_OFF;
 800cf06:	2380      	movs	r3, #128	@ 0x80
 800cf08:	05db      	lsls	r3, r3, #23
 800cf0a:	22fa      	movs	r2, #250	@ 0xfa
 800cf0c:	0112      	lsls	r2, r2, #4
 800cf0e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800cf10:	e004      	b.n	800cf1c <ResetMICIndicator+0x4c>
      TIM2 -> CCR1 = LED_OFF;
 800cf12:	2380      	movs	r3, #128	@ 0x80
 800cf14:	05db      	lsls	r3, r3, #23
 800cf16:	22fa      	movs	r2, #250	@ 0xfa
 800cf18:	0112      	lsls	r2, r2, #4
 800cf1a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800cf1c:	46c0      	nop			@ (mov r8, r8)
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	46c0      	nop			@ (mov r8, r8)
 800cf24:	200021ed 	.word	0x200021ed
 800cf28:	200021ee 	.word	0x200021ee
 800cf2c:	200021f8 	.word	0x200021f8
 800cf30:	1eb851ec 	.word	0x1eb851ec
 800cf34:	400deb85 	.word	0x400deb85

0800cf38 <SetESPIndicator>:
void SetESPIndicator(){
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cf3c:	4b07      	ldr	r3, [pc, #28]	@ (800cf5c <SetESPIndicator+0x24>)
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d103      	bne.n	800cf4c <SetESPIndicator+0x14>
 800cf44:	4b06      	ldr	r3, [pc, #24]	@ (800cf60 <SetESPIndicator+0x28>)
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d003      	beq.n	800cf54 <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800cf4c:	2380      	movs	r3, #128	@ 0x80
 800cf4e:	05db      	lsls	r3, r3, #23
 800cf50:	4a04      	ldr	r2, [pc, #16]	@ (800cf64 <SetESPIndicator+0x2c>)
 800cf52:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800cf54:	46c0      	nop			@ (mov r8, r8)
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	46c0      	nop			@ (mov r8, r8)
 800cf5c:	200021ed 	.word	0x200021ed
 800cf60:	200021ee 	.word	0x200021ee
 800cf64:	00000bb8 	.word	0x00000bb8

0800cf68 <ResetESPIndicator>:
void ResetESPIndicator(){
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cf6c:	4b07      	ldr	r3, [pc, #28]	@ (800cf8c <ResetESPIndicator+0x24>)
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d103      	bne.n	800cf7c <ResetESPIndicator+0x14>
 800cf74:	4b06      	ldr	r3, [pc, #24]	@ (800cf90 <ResetESPIndicator+0x28>)
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d004      	beq.n	800cf86 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800cf7c:	2380      	movs	r3, #128	@ 0x80
 800cf7e:	05db      	lsls	r3, r3, #23
 800cf80:	22fa      	movs	r2, #250	@ 0xfa
 800cf82:	0112      	lsls	r2, r2, #4
 800cf84:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800cf86:	46c0      	nop			@ (mov r8, r8)
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	200021ed 	.word	0x200021ed
 800cf90:	200021ee 	.word	0x200021ee

0800cf94 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800cf94:	b580      	push	{r7, lr}
 800cf96:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800cf98:	23fa      	movs	r3, #250	@ 0xfa
 800cf9a:	011a      	lsls	r2, r3, #4
 800cf9c:	23fa      	movs	r3, #250	@ 0xfa
 800cf9e:	0119      	lsls	r1, r3, #4
 800cfa0:	23fa      	movs	r3, #250	@ 0xfa
 800cfa2:	011b      	lsls	r3, r3, #4
 800cfa4:	0018      	movs	r0, r3
 800cfa6:	f7ff fe81 	bl	800ccac <SetStatusLED>
  SetDBLED(false,false,false);
 800cfaa:	2200      	movs	r2, #0
 800cfac:	2100      	movs	r1, #0
 800cfae:	2000      	movs	r0, #0
 800cfb0:	f7ff feb0 	bl	800cd14 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800cfb4:	23fa      	movs	r3, #250	@ 0xfa
 800cfb6:	011a      	lsls	r2, r3, #4
 800cfb8:	23fa      	movs	r3, #250	@ 0xfa
 800cfba:	0119      	lsls	r1, r3, #4
 800cfbc:	23fa      	movs	r3, #250	@ 0xfa
 800cfbe:	011b      	lsls	r3, r3, #4
 800cfc0:	0018      	movs	r0, r3
 800cfc2:	f7ff fef1 	bl	800cda8 <SetVocLED>
return;
 800cfc6:	46c0      	nop			@ (mov r8, r8)
}
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <powerCheck>:

Battery_Status powerCheck(){
 800cfcc:	b590      	push	{r4, r7, lr}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800cfd2:	f7f9 f9db 	bl	800638c <Check_USB_PowerOn>
 800cfd6:	0003      	movs	r3, r0
 800cfd8:	001a      	movs	r2, r3
 800cfda:	2301      	movs	r3, #1
 800cfdc:	4053      	eors	r3, r2
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d005      	beq.n	800cff0 <powerCheck+0x24>
    status = batteryChargeCheck();
 800cfe4:	1dfc      	adds	r4, r7, #7
 800cfe6:	f7ff fe07 	bl	800cbf8 <batteryChargeCheck>
 800cfea:	0003      	movs	r3, r0
 800cfec:	7023      	strb	r3, [r4, #0]
 800cfee:	e002      	b.n	800cff6 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800cff0:	1dfb      	adds	r3, r7, #7
 800cff2:	2201      	movs	r2, #1
 800cff4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800cff6:	1dfb      	adds	r3, r7, #7
 800cff8:	781b      	ldrb	r3, [r3, #0]
}
 800cffa:	0018      	movs	r0, r3
 800cffc:	46bd      	mov	sp, r7
 800cffe:	b003      	add	sp, #12
 800d000:	bd90      	pop	{r4, r7, pc}
	...

0800d004 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
 800d00a:	0002      	movs	r2, r0
 800d00c:	1dfb      	adds	r3, r7, #7
 800d00e:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800d010:	1dfb      	adds	r3, r7, #7
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	2b01      	cmp	r3, #1
 800d016:	d105      	bne.n	800d024 <powerDisplay+0x20>
    Debug("LEDS are okay");
 800d018:	4a18      	ldr	r2, [pc, #96]	@ (800d07c <powerDisplay+0x78>)
 800d01a:	4b19      	ldr	r3, [pc, #100]	@ (800d080 <powerDisplay+0x7c>)
 800d01c:	0019      	movs	r1, r3
 800d01e:	2003      	movs	r0, #3
 800d020:	f000 fee0 	bl	800dde4 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800d024:	1dfb      	adds	r3, r7, #7
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	2b04      	cmp	r3, #4
 800d02a:	d105      	bne.n	800d038 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800d02c:	4a15      	ldr	r2, [pc, #84]	@ (800d084 <powerDisplay+0x80>)
 800d02e:	4b14      	ldr	r3, [pc, #80]	@ (800d080 <powerDisplay+0x7c>)
 800d030:	0019      	movs	r1, r3
 800d032:	2003      	movs	r0, #3
 800d034:	f000 fed6 	bl	800dde4 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800d038:	1dfb      	adds	r3, r7, #7
 800d03a:	781b      	ldrb	r3, [r3, #0]
 800d03c:	2b03      	cmp	r3, #3
 800d03e:	d105      	bne.n	800d04c <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800d040:	4a11      	ldr	r2, [pc, #68]	@ (800d088 <powerDisplay+0x84>)
 800d042:	4b0f      	ldr	r3, [pc, #60]	@ (800d080 <powerDisplay+0x7c>)
 800d044:	0019      	movs	r1, r3
 800d046:	2003      	movs	r0, #3
 800d048:	f000 fecc 	bl	800dde4 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800d04c:	1dfb      	adds	r3, r7, #7
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	2b02      	cmp	r3, #2
 800d052:	d105      	bne.n	800d060 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800d054:	4a0d      	ldr	r2, [pc, #52]	@ (800d08c <powerDisplay+0x88>)
 800d056:	4b0a      	ldr	r3, [pc, #40]	@ (800d080 <powerDisplay+0x7c>)
 800d058:	0019      	movs	r1, r3
 800d05a:	2003      	movs	r0, #3
 800d05c:	f000 fec2 	bl	800dde4 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800d060:	1dfb      	adds	r3, r7, #7
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d105      	bne.n	800d074 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800d068:	4a09      	ldr	r2, [pc, #36]	@ (800d090 <powerDisplay+0x8c>)
 800d06a:	4b05      	ldr	r3, [pc, #20]	@ (800d080 <powerDisplay+0x7c>)
 800d06c:	0019      	movs	r1, r3
 800d06e:	2003      	movs	r0, #3
 800d070:	f000 feb8 	bl	800dde4 <CreateLine>
  }
}
 800d074:	46c0      	nop			@ (mov r8, r8)
 800d076:	46bd      	mov	sp, r7
 800d078:	b002      	add	sp, #8
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	08024550 	.word	0x08024550
 800d080:	08024560 	.word	0x08024560
 800d084:	08024564 	.word	0x08024564
 800d088:	0802457c 	.word	0x0802457c
 800d08c:	0802459c 	.word	0x0802459c
 800d090:	080245b4 	.word	0x080245b4

0800d094 <configCheck>:

void configCheck(){
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800d09a:	f7f9 f986 	bl	80063aa <BootButton_Pressed>
 800d09e:	1e03      	subs	r3, r0, #0
 800d0a0:	d007      	beq.n	800d0b2 <configCheck+0x1e>
 800d0a2:	f7f9 f993 	bl	80063cc <UserButton_Pressed>
 800d0a6:	1e03      	subs	r3, r0, #0
 800d0a8:	d003      	beq.n	800d0b2 <configCheck+0x1e>
    configSet = true;
 800d0aa:	4b86      	ldr	r3, [pc, #536]	@ (800d2c4 <configCheck+0x230>)
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	701a      	strb	r2, [r3, #0]
 800d0b0:	e00a      	b.n	800d0c8 <configCheck+0x34>
  }
  else{
    configSet = false;
 800d0b2:	4b84      	ldr	r3, [pc, #528]	@ (800d2c4 <configCheck+0x230>)
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800d0b8:	f001 faea 	bl	800e690 <HAL_GetTick>
 800d0bc:	0003      	movs	r3, r0
 800d0be:	22fa      	movs	r2, #250	@ 0xfa
 800d0c0:	00d2      	lsls	r2, r2, #3
 800d0c2:	189a      	adds	r2, r3, r2
 800d0c4:	4b80      	ldr	r3, [pc, #512]	@ (800d2c8 <configCheck+0x234>)
 800d0c6:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800d0c8:	4b7e      	ldr	r3, [pc, #504]	@ (800d2c4 <configCheck+0x230>)
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d00d      	beq.n	800d0ec <configCheck+0x58>
 800d0d0:	4b7d      	ldr	r3, [pc, #500]	@ (800d2c8 <configCheck+0x234>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	0018      	movs	r0, r3
 800d0d6:	f000 fe2f 	bl	800dd38 <TimestampIsReached>
 800d0da:	1e03      	subs	r3, r0, #0
 800d0dc:	d006      	beq.n	800d0ec <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 800d0de:	f7f6 fc85 	bl	80039ec <SetConfigMode>
    SetDBLED(true, true, true);
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	2101      	movs	r1, #1
 800d0e6:	2001      	movs	r0, #1
 800d0e8:	f7ff fe14 	bl	800cd14 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800d0ec:	f7f9 f95d 	bl	80063aa <BootButton_Pressed>
 800d0f0:	0003      	movs	r3, r0
 800d0f2:	001a      	movs	r2, r3
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	4053      	eors	r3, r2
 800d0f8:	b2db      	uxtb	r3, r3
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d031      	beq.n	800d162 <configCheck+0xce>
 800d0fe:	f7f9 f965 	bl	80063cc <UserButton_Pressed>
 800d102:	1e03      	subs	r3, r0, #0
 800d104:	d02d      	beq.n	800d162 <configCheck+0xce>
 800d106:	4b71      	ldr	r3, [pc, #452]	@ (800d2cc <configCheck+0x238>)
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	2201      	movs	r2, #1
 800d10c:	4053      	eors	r3, r2
 800d10e:	b2db      	uxtb	r3, r3
 800d110:	2b00      	cmp	r3, #0
 800d112:	d026      	beq.n	800d162 <configCheck+0xce>
    SetLEDsOff();
 800d114:	f7ff ff3e 	bl	800cf94 <SetLEDsOff>
    Debug("userToggle flipped");
 800d118:	4a6d      	ldr	r2, [pc, #436]	@ (800d2d0 <configCheck+0x23c>)
 800d11a:	4b6e      	ldr	r3, [pc, #440]	@ (800d2d4 <configCheck+0x240>)
 800d11c:	0019      	movs	r1, r3
 800d11e:	2003      	movs	r0, #3
 800d120:	f000 fe60 	bl	800dde4 <CreateLine>
    userToggle = !userToggle;
 800d124:	4b6c      	ldr	r3, [pc, #432]	@ (800d2d8 <configCheck+0x244>)
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	1e5a      	subs	r2, r3, #1
 800d12a:	4193      	sbcs	r3, r2
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	2201      	movs	r2, #1
 800d130:	4053      	eors	r3, r2
 800d132:	b2db      	uxtb	r3, r3
 800d134:	1c1a      	adds	r2, r3, #0
 800d136:	2301      	movs	r3, #1
 800d138:	4013      	ands	r3, r2
 800d13a:	b2da      	uxtb	r2, r3
 800d13c:	4b66      	ldr	r3, [pc, #408]	@ (800d2d8 <configCheck+0x244>)
 800d13e:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800d140:	4b65      	ldr	r3, [pc, #404]	@ (800d2d8 <configCheck+0x244>)
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d001      	beq.n	800d14c <configCheck+0xb8>
      EnabledConnectedDevices();
 800d148:	f7fb fa6c 	bl	8008624 <EnabledConnectedDevices>
    }
    buttonHeld = true;
 800d14c:	4b5f      	ldr	r3, [pc, #380]	@ (800d2cc <configCheck+0x238>)
 800d14e:	2201      	movs	r2, #1
 800d150:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 800d152:	f001 fa9d 	bl	800e690 <HAL_GetTick>
 800d156:	0003      	movs	r3, r0
 800d158:	22fa      	movs	r2, #250	@ 0xfa
 800d15a:	00d2      	lsls	r2, r2, #3
 800d15c:	189a      	adds	r2, r3, r2
 800d15e:	4b5f      	ldr	r3, [pc, #380]	@ (800d2dc <configCheck+0x248>)
 800d160:	601a      	str	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && buttonHeld&& TimestampIsReached(UserbuttonStamp)) {
 800d162:	f7f9 f922 	bl	80063aa <BootButton_Pressed>
 800d166:	0003      	movs	r3, r0
 800d168:	001a      	movs	r2, r3
 800d16a:	2301      	movs	r3, #1
 800d16c:	4053      	eors	r3, r2
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	2b00      	cmp	r3, #0
 800d172:	d100      	bne.n	800d176 <configCheck+0xe2>
 800d174:	e06f      	b.n	800d256 <configCheck+0x1c2>
 800d176:	4b55      	ldr	r3, [pc, #340]	@ (800d2cc <configCheck+0x238>)
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d100      	bne.n	800d180 <configCheck+0xec>
 800d17e:	e06a      	b.n	800d256 <configCheck+0x1c2>
 800d180:	4b56      	ldr	r3, [pc, #344]	@ (800d2dc <configCheck+0x248>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	0018      	movs	r0, r3
 800d186:	f000 fdd7 	bl	800dd38 <TimestampIsReached>
 800d18a:	1e03      	subs	r3, r0, #0
 800d18c:	d063      	beq.n	800d256 <configCheck+0x1c2>
    if (GetPMSensorPresence() && (product_name[4] == '5')) {
 800d18e:	f7fb f809 	bl	80081a4 <GetPMSensorPresence>
 800d192:	1e03      	subs	r3, r0, #0
 800d194:	d057      	beq.n	800d246 <configCheck+0x1b2>
 800d196:	4b52      	ldr	r3, [pc, #328]	@ (800d2e0 <configCheck+0x24c>)
 800d198:	791b      	ldrb	r3, [r3, #4]
 800d19a:	2b35      	cmp	r3, #53	@ 0x35
 800d19c:	d153      	bne.n	800d246 <configCheck+0x1b2>
      uint16_t color;
      VOCNOx = !VOCNOx;
 800d19e:	4b51      	ldr	r3, [pc, #324]	@ (800d2e4 <configCheck+0x250>)
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	1e5a      	subs	r2, r3, #1
 800d1a4:	4193      	sbcs	r3, r2
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	4053      	eors	r3, r2
 800d1ac:	b2db      	uxtb	r3, r3
 800d1ae:	1c1a      	adds	r2, r3, #0
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	4013      	ands	r3, r2
 800d1b4:	b2da      	uxtb	r2, r3
 800d1b6:	4b4b      	ldr	r3, [pc, #300]	@ (800d2e4 <configCheck+0x250>)
 800d1b8:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = 0;
 800d1ba:	4b4a      	ldr	r3, [pc, #296]	@ (800d2e4 <configCheck+0x250>)
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d003      	beq.n	800d1ca <configCheck+0x136>
 800d1c2:	1dbb      	adds	r3, r7, #6
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	801a      	strh	r2, [r3, #0]
 800d1c8:	e003      	b.n	800d1d2 <configCheck+0x13e>
        else color = 4000;
 800d1ca:	1dbb      	adds	r3, r7, #6
 800d1cc:	22fa      	movs	r2, #250	@ 0xfa
 800d1ce:	0112      	lsls	r2, r2, #4
 800d1d0:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx measurement %s", VOCNOx?"enabled":"disabled");
 800d1d2:	4b44      	ldr	r3, [pc, #272]	@ (800d2e4 <configCheck+0x250>)
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d001      	beq.n	800d1de <configCheck+0x14a>
 800d1da:	4b43      	ldr	r3, [pc, #268]	@ (800d2e8 <configCheck+0x254>)
 800d1dc:	e000      	b.n	800d1e0 <configCheck+0x14c>
 800d1de:	4b43      	ldr	r3, [pc, #268]	@ (800d2ec <configCheck+0x258>)
 800d1e0:	4a43      	ldr	r2, [pc, #268]	@ (800d2f0 <configCheck+0x25c>)
 800d1e2:	4944      	ldr	r1, [pc, #272]	@ (800d2f4 <configCheck+0x260>)
 800d1e4:	2002      	movs	r0, #2
 800d1e6:	f000 fdfd 	bl	800dde4 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 800d1ea:	1d7b      	adds	r3, r7, #5
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	701a      	strb	r2, [r3, #0]
 800d1f0:	e025      	b.n	800d23e <configCheck+0x1aa>
        TIM3 -> CCR1 = 0;
 800d1f2:	4b41      	ldr	r3, [pc, #260]	@ (800d2f8 <configCheck+0x264>)
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 800d1f8:	4b3f      	ldr	r3, [pc, #252]	@ (800d2f8 <configCheck+0x264>)
 800d1fa:	1dba      	adds	r2, r7, #6
 800d1fc:	8812      	ldrh	r2, [r2, #0]
 800d1fe:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 800d200:	4b3d      	ldr	r3, [pc, #244]	@ (800d2f8 <configCheck+0x264>)
 800d202:	1dba      	adds	r2, r7, #6
 800d204:	8812      	ldrh	r2, [r2, #0]
 800d206:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800d208:	23c8      	movs	r3, #200	@ 0xc8
 800d20a:	005b      	lsls	r3, r3, #1
 800d20c:	0018      	movs	r0, r3
 800d20e:	f001 fa49 	bl	800e6a4 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 800d212:	4b39      	ldr	r3, [pc, #228]	@ (800d2f8 <configCheck+0x264>)
 800d214:	22fa      	movs	r2, #250	@ 0xfa
 800d216:	0112      	lsls	r2, r2, #4
 800d218:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 800d21a:	4b37      	ldr	r3, [pc, #220]	@ (800d2f8 <configCheck+0x264>)
 800d21c:	22fa      	movs	r2, #250	@ 0xfa
 800d21e:	0112      	lsls	r2, r2, #4
 800d220:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 800d222:	4b35      	ldr	r3, [pc, #212]	@ (800d2f8 <configCheck+0x264>)
 800d224:	22fa      	movs	r2, #250	@ 0xfa
 800d226:	0112      	lsls	r2, r2, #4
 800d228:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800d22a:	23c8      	movs	r3, #200	@ 0xc8
 800d22c:	005b      	lsls	r3, r3, #1
 800d22e:	0018      	movs	r0, r3
 800d230:	f001 fa38 	bl	800e6a4 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 800d234:	1d7b      	adds	r3, r7, #5
 800d236:	781a      	ldrb	r2, [r3, #0]
 800d238:	1d7b      	adds	r3, r7, #5
 800d23a:	3201      	adds	r2, #1
 800d23c:	701a      	strb	r2, [r3, #0]
 800d23e:	1d7b      	adds	r3, r7, #5
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	2b01      	cmp	r3, #1
 800d244:	d9d5      	bls.n	800d1f2 <configCheck+0x15e>
      }
    }
      while (UserButton_Pressed()){
 800d246:	46c0      	nop			@ (mov r8, r8)
 800d248:	f7f9 f8c0 	bl	80063cc <UserButton_Pressed>
 800d24c:	1e03      	subs	r3, r0, #0
 800d24e:	d1fb      	bne.n	800d248 <configCheck+0x1b4>

      }
    buttonHeld = false;
 800d250:	4b1e      	ldr	r3, [pc, #120]	@ (800d2cc <configCheck+0x238>)
 800d252:	2200      	movs	r2, #0
 800d254:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800d256:	f7f9 f8a8 	bl	80063aa <BootButton_Pressed>
 800d25a:	0003      	movs	r3, r0
 800d25c:	001a      	movs	r2, r3
 800d25e:	2301      	movs	r3, #1
 800d260:	4053      	eors	r3, r2
 800d262:	b2db      	uxtb	r3, r3
 800d264:	2b00      	cmp	r3, #0
 800d266:	d00b      	beq.n	800d280 <configCheck+0x1ec>
 800d268:	f7f9 f8b0 	bl	80063cc <UserButton_Pressed>
 800d26c:	0003      	movs	r3, r0
 800d26e:	001a      	movs	r2, r3
 800d270:	2301      	movs	r3, #1
 800d272:	4053      	eors	r3, r2
 800d274:	b2db      	uxtb	r3, r3
 800d276:	2b00      	cmp	r3, #0
 800d278:	d002      	beq.n	800d280 <configCheck+0x1ec>
    buttonHeld = false;
 800d27a:	4b14      	ldr	r3, [pc, #80]	@ (800d2cc <configCheck+0x238>)
 800d27c:	2200      	movs	r2, #0
 800d27e:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800d280:	f7f9 f884 	bl	800638c <Check_USB_PowerOn>
 800d284:	1e03      	subs	r3, r0, #0
 800d286:	d005      	beq.n	800d294 <configCheck+0x200>
    usbPluggedIn = true;
 800d288:	4b1c      	ldr	r3, [pc, #112]	@ (800d2fc <configCheck+0x268>)
 800d28a:	2201      	movs	r2, #1
 800d28c:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 800d28e:	f7fb f9c9 	bl	8008624 <EnabledConnectedDevices>
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800d292:	e012      	b.n	800d2ba <configCheck+0x226>
    if(!userToggle && !init){
 800d294:	4b10      	ldr	r3, [pc, #64]	@ (800d2d8 <configCheck+0x244>)
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	2201      	movs	r2, #1
 800d29a:	4053      	eors	r3, r2
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d008      	beq.n	800d2b4 <configCheck+0x220>
 800d2a2:	4b17      	ldr	r3, [pc, #92]	@ (800d300 <configCheck+0x26c>)
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	4053      	eors	r3, r2
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d001      	beq.n	800d2b4 <configCheck+0x220>
      SetLEDsOff();
 800d2b0:	f7ff fe70 	bl	800cf94 <SetLEDsOff>
    usbPluggedIn = false;
 800d2b4:	4b11      	ldr	r3, [pc, #68]	@ (800d2fc <configCheck+0x268>)
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	701a      	strb	r2, [r3, #0]
}
 800d2ba:	46c0      	nop			@ (mov r8, r8)
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	b002      	add	sp, #8
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	46c0      	nop			@ (mov r8, r8)
 800d2c4:	200021ec 	.word	0x200021ec
 800d2c8:	200021f0 	.word	0x200021f0
 800d2cc:	200021ef 	.word	0x200021ef
 800d2d0:	080245d8 	.word	0x080245d8
 800d2d4:	08024560 	.word	0x08024560
 800d2d8:	200021ee 	.word	0x200021ee
 800d2dc:	200021f4 	.word	0x200021f4
 800d2e0:	20001260 	.word	0x20001260
 800d2e4:	2000125e 	.word	0x2000125e
 800d2e8:	080245ec 	.word	0x080245ec
 800d2ec:	080245f4 	.word	0x080245f4
 800d2f0:	08024600 	.word	0x08024600
 800d2f4:	0802461c 	.word	0x0802461c
 800d2f8:	40000400 	.word	0x40000400
 800d2fc:	200021ed 	.word	0x200021ed
 800d300:	200000c8 	.word	0x200000c8

0800d304 <Battery_Upkeep>:
/*
void Status_Upkeep(){
  configCheck();
}
*/
Battery_Status Battery_Upkeep(){
 800d304:	b590      	push	{r4, r7, lr}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800d30a:	1dfc      	adds	r4, r7, #7
 800d30c:	f7ff fe5e 	bl	800cfcc <powerCheck>
 800d310:	0003      	movs	r3, r0
 800d312:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800d314:	1dfb      	adds	r3, r7, #7
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	0018      	movs	r0, r3
 800d31a:	f7ff fe73 	bl	800d004 <powerDisplay>
  return status;
 800d31e:	1dfb      	adds	r3, r7, #7
 800d320:	781b      	ldrb	r3, [r3, #0]
}
 800d322:	0018      	movs	r0, r3
 800d324:	46bd      	mov	sp, r7
 800d326:	b003      	add	sp, #12
 800d328:	bd90      	pop	{r4, r7, pc}
	...

0800d32c <setuserToggle>:

void setuserToggle(void) {
 800d32c:	b580      	push	{r7, lr}
 800d32e:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800d330:	f7ff fe4c 	bl	800cfcc <powerCheck>
 800d334:	0003      	movs	r3, r0
 800d336:	2b01      	cmp	r3, #1
 800d338:	d002      	beq.n	800d340 <setuserToggle+0x14>
    userToggle = true;
 800d33a:	4b03      	ldr	r3, [pc, #12]	@ (800d348 <setuserToggle+0x1c>)
 800d33c:	2201      	movs	r2, #1
 800d33e:	701a      	strb	r2, [r3, #0]
  }
}
 800d340:	46c0      	nop			@ (mov r8, r8)
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	46c0      	nop			@ (mov r8, r8)
 800d348:	200021ee 	.word	0x200021ee

0800d34c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d350:	4b07      	ldr	r3, [pc, #28]	@ (800d370 <HAL_MspInit+0x24>)
 800d352:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d354:	4b06      	ldr	r3, [pc, #24]	@ (800d370 <HAL_MspInit+0x24>)
 800d356:	2101      	movs	r1, #1
 800d358:	430a      	orrs	r2, r1
 800d35a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800d35c:	4b04      	ldr	r3, [pc, #16]	@ (800d370 <HAL_MspInit+0x24>)
 800d35e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d360:	4b03      	ldr	r3, [pc, #12]	@ (800d370 <HAL_MspInit+0x24>)
 800d362:	2180      	movs	r1, #128	@ 0x80
 800d364:	0549      	lsls	r1, r1, #21
 800d366:	430a      	orrs	r2, r1
 800d368:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d36a:	46c0      	nop			@ (mov r8, r8)
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	40021000 	.word	0x40021000

0800d374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800d378:	46c0      	nop			@ (mov r8, r8)
 800d37a:	e7fd      	b.n	800d378 <NMI_Handler+0x4>

0800d37c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d380:	46c0      	nop			@ (mov r8, r8)
 800d382:	e7fd      	b.n	800d380 <HardFault_Handler+0x4>

0800d384 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800d388:	46c0      	nop			@ (mov r8, r8)
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}

0800d38e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d38e:	b580      	push	{r7, lr}
 800d390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d392:	46c0      	nop			@ (mov r8, r8)
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d39c:	f001 f966 	bl	800e66c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d3a0:	46c0      	nop			@ (mov r8, r8)
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
	...

0800d3a8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800d3ac:	4b03      	ldr	r3, [pc, #12]	@ (800d3bc <RTC_IRQHandler+0x14>)
 800d3ae:	0018      	movs	r0, r3
 800d3b0:	f008 fe8c 	bl	80160cc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800d3b4:	46c0      	nop			@ (mov r8, r8)
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	46c0      	nop			@ (mov r8, r8)
 800d3bc:	20001238 	.word	0x20001238

0800d3c0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800d3c4:	2380      	movs	r3, #128	@ 0x80
 800d3c6:	021b      	lsls	r3, r3, #8
 800d3c8:	0018      	movs	r0, r3
 800d3ca:	f002 fc0f 	bl	800fbec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800d3ce:	46c0      	nop			@ (mov r8, r8)
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800d3d8:	4b05      	ldr	r3, [pc, #20]	@ (800d3f0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800d3da:	0018      	movs	r0, r3
 800d3dc:	f001 ff97 	bl	800f30e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800d3e0:	4b04      	ldr	r3, [pc, #16]	@ (800d3f4 <DMA1_Channel2_3_IRQHandler+0x20>)
 800d3e2:	0018      	movs	r0, r3
 800d3e4:	f001 ff93 	bl	800f30e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800d3e8:	46c0      	nop			@ (mov r8, r8)
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	46c0      	nop			@ (mov r8, r8)
 800d3f0:	20000edc 	.word	0x20000edc
 800d3f4:	20000e94 	.word	0x20000e94

0800d3f8 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800d3fc:	4b07      	ldr	r3, [pc, #28]	@ (800d41c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800d3fe:	0018      	movs	r0, r3
 800d400:	f001 ff85 	bl	800f30e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800d404:	4b06      	ldr	r3, [pc, #24]	@ (800d420 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800d406:	0018      	movs	r0, r3
 800d408:	f001 ff81 	bl	800f30e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800d40c:	4b05      	ldr	r3, [pc, #20]	@ (800d424 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800d40e:	0018      	movs	r0, r3
 800d410:	f001 ff7d 	bl	800f30e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800d414:	46c0      	nop			@ (mov r8, r8)
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	46c0      	nop			@ (mov r8, r8)
 800d41c:	20000f60 	.word	0x20000f60
 800d420:	200024e8 	.word	0x200024e8
 800d424:	20002530 	.word	0x20002530

0800d428 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800d42c:	4b03      	ldr	r3, [pc, #12]	@ (800d43c <USART4_5_IRQHandler+0x14>)
 800d42e:	0018      	movs	r0, r3
 800d430:	f009 fd46 	bl	8016ec0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800d434:	46c0      	nop			@ (mov r8, r8)
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	46c0      	nop			@ (mov r8, r8)
 800d43c:	20002430 	.word	0x20002430

0800d440 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800d444:	4b09      	ldr	r3, [pc, #36]	@ (800d46c <I2C1_IRQHandler+0x2c>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	699a      	ldr	r2, [r3, #24]
 800d44a:	23e0      	movs	r3, #224	@ 0xe0
 800d44c:	00db      	lsls	r3, r3, #3
 800d44e:	4013      	ands	r3, r2
 800d450:	d004      	beq.n	800d45c <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800d452:	4b06      	ldr	r3, [pc, #24]	@ (800d46c <I2C1_IRQHandler+0x2c>)
 800d454:	0018      	movs	r0, r3
 800d456:	f003 f8b1 	bl	80105bc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800d45a:	e003      	b.n	800d464 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800d45c:	4b03      	ldr	r3, [pc, #12]	@ (800d46c <I2C1_IRQHandler+0x2c>)
 800d45e:	0018      	movs	r0, r3
 800d460:	f003 f892 	bl	8010588 <HAL_I2C_EV_IRQHandler>
}
 800d464:	46c0      	nop			@ (mov r8, r8)
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	46c0      	nop			@ (mov r8, r8)
 800d46c:	20000dec 	.word	0x20000dec

0800d470 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800d474:	4b03      	ldr	r3, [pc, #12]	@ (800d484 <USART1_IRQHandler+0x14>)
 800d476:	0018      	movs	r0, r3
 800d478:	f009 fd22 	bl	8016ec0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800d47c:	46c0      	nop			@ (mov r8, r8)
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	46c0      	nop			@ (mov r8, r8)
 800d484:	20002378 	.word	0x20002378

0800d488 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800d48c:	4b03      	ldr	r3, [pc, #12]	@ (800d49c <USB_IRQHandler+0x14>)
 800d48e:	0018      	movs	r0, r3
 800d490:	f005 fc72 	bl	8012d78 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800d494:	46c0      	nop			@ (mov r8, r8)
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	46c0      	nop			@ (mov r8, r8)
 800d49c:	20003344 	.word	0x20003344

0800d4a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	af00      	add	r7, sp, #0
  return 1;
 800d4a4:	2301      	movs	r3, #1
}
 800d4a6:	0018      	movs	r0, r3
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <_kill>:

int _kill(int pid, int sig)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800d4b6:	f012 fbe7 	bl	801fc88 <__errno>
 800d4ba:	0003      	movs	r3, r0
 800d4bc:	2216      	movs	r2, #22
 800d4be:	601a      	str	r2, [r3, #0]
  return -1;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	425b      	negs	r3, r3
}
 800d4c4:	0018      	movs	r0, r3
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	b002      	add	sp, #8
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <_exit>:

void _exit (int status)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	425a      	negs	r2, r3
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	0011      	movs	r1, r2
 800d4dc:	0018      	movs	r0, r3
 800d4de:	f7ff ffe5 	bl	800d4ac <_kill>
  while (1) {}    /* Make sure we hang here */
 800d4e2:	46c0      	nop			@ (mov r8, r8)
 800d4e4:	e7fd      	b.n	800d4e2 <_exit+0x16>

0800d4e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d4e6:	b580      	push	{r7, lr}
 800d4e8:	b086      	sub	sp, #24
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	60f8      	str	r0, [r7, #12]
 800d4ee:	60b9      	str	r1, [r7, #8]
 800d4f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	617b      	str	r3, [r7, #20]
 800d4f6:	e00a      	b.n	800d50e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800d4f8:	e000      	b.n	800d4fc <_read+0x16>
 800d4fa:	bf00      	nop
 800d4fc:	0001      	movs	r1, r0
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	1c5a      	adds	r2, r3, #1
 800d502:	60ba      	str	r2, [r7, #8]
 800d504:	b2ca      	uxtb	r2, r1
 800d506:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	3301      	adds	r3, #1
 800d50c:	617b      	str	r3, [r7, #20]
 800d50e:	697a      	ldr	r2, [r7, #20]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	429a      	cmp	r2, r3
 800d514:	dbf0      	blt.n	800d4f8 <_read+0x12>
  }

  return len;
 800d516:	687b      	ldr	r3, [r7, #4]
}
 800d518:	0018      	movs	r0, r3
 800d51a:	46bd      	mov	sp, r7
 800d51c:	b006      	add	sp, #24
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <_close>:
  }
  return len;
}

int _close(int file)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800d528:	2301      	movs	r3, #1
 800d52a:	425b      	negs	r3, r3
}
 800d52c:	0018      	movs	r0, r3
 800d52e:	46bd      	mov	sp, r7
 800d530:	b002      	add	sp, #8
 800d532:	bd80      	pop	{r7, pc}

0800d534 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	2280      	movs	r2, #128	@ 0x80
 800d542:	0192      	lsls	r2, r2, #6
 800d544:	605a      	str	r2, [r3, #4]
  return 0;
 800d546:	2300      	movs	r3, #0
}
 800d548:	0018      	movs	r0, r3
 800d54a:	46bd      	mov	sp, r7
 800d54c:	b002      	add	sp, #8
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <_isatty>:

int _isatty(int file)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800d558:	2301      	movs	r3, #1
}
 800d55a:	0018      	movs	r0, r3
 800d55c:	46bd      	mov	sp, r7
 800d55e:	b002      	add	sp, #8
 800d560:	bd80      	pop	{r7, pc}

0800d562 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b084      	sub	sp, #16
 800d566:	af00      	add	r7, sp, #0
 800d568:	60f8      	str	r0, [r7, #12]
 800d56a:	60b9      	str	r1, [r7, #8]
 800d56c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800d56e:	2300      	movs	r3, #0
}
 800d570:	0018      	movs	r0, r3
 800d572:	46bd      	mov	sp, r7
 800d574:	b004      	add	sp, #16
 800d576:	bd80      	pop	{r7, pc}

0800d578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b086      	sub	sp, #24
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d580:	4a14      	ldr	r2, [pc, #80]	@ (800d5d4 <_sbrk+0x5c>)
 800d582:	4b15      	ldr	r3, [pc, #84]	@ (800d5d8 <_sbrk+0x60>)
 800d584:	1ad3      	subs	r3, r2, r3
 800d586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d58c:	4b13      	ldr	r3, [pc, #76]	@ (800d5dc <_sbrk+0x64>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d102      	bne.n	800d59a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d594:	4b11      	ldr	r3, [pc, #68]	@ (800d5dc <_sbrk+0x64>)
 800d596:	4a12      	ldr	r2, [pc, #72]	@ (800d5e0 <_sbrk+0x68>)
 800d598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d59a:	4b10      	ldr	r3, [pc, #64]	@ (800d5dc <_sbrk+0x64>)
 800d59c:	681a      	ldr	r2, [r3, #0]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	18d3      	adds	r3, r2, r3
 800d5a2:	693a      	ldr	r2, [r7, #16]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d207      	bcs.n	800d5b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d5a8:	f012 fb6e 	bl	801fc88 <__errno>
 800d5ac:	0003      	movs	r3, r0
 800d5ae:	220c      	movs	r2, #12
 800d5b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	425b      	negs	r3, r3
 800d5b6:	e009      	b.n	800d5cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d5b8:	4b08      	ldr	r3, [pc, #32]	@ (800d5dc <_sbrk+0x64>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d5be:	4b07      	ldr	r3, [pc, #28]	@ (800d5dc <_sbrk+0x64>)
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	18d2      	adds	r2, r2, r3
 800d5c6:	4b05      	ldr	r3, [pc, #20]	@ (800d5dc <_sbrk+0x64>)
 800d5c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
}
 800d5cc:	0018      	movs	r0, r3
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	b006      	add	sp, #24
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	20005000 	.word	0x20005000
 800d5d8:	00000400 	.word	0x00000400
 800d5dc:	200021fc 	.word	0x200021fc
 800d5e0:	200039a8 	.word	0x200039a8

0800d5e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d5e8:	46c0      	nop			@ (mov r8, r8)
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
	...

0800d5f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b086      	sub	sp, #24
 800d5f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d5f6:	2310      	movs	r3, #16
 800d5f8:	18fb      	adds	r3, r7, r3
 800d5fa:	0018      	movs	r0, r3
 800d5fc:	2308      	movs	r3, #8
 800d5fe:	001a      	movs	r2, r3
 800d600:	2100      	movs	r1, #0
 800d602:	f012 fa9d 	bl	801fb40 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d606:	003b      	movs	r3, r7
 800d608:	0018      	movs	r0, r3
 800d60a:	2310      	movs	r3, #16
 800d60c:	001a      	movs	r2, r3
 800d60e:	2100      	movs	r1, #0
 800d610:	f012 fa96 	bl	801fb40 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d614:	4b2e      	ldr	r3, [pc, #184]	@ (800d6d0 <MX_TIM2_Init+0xe0>)
 800d616:	2280      	movs	r2, #128	@ 0x80
 800d618:	05d2      	lsls	r2, r2, #23
 800d61a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800d61c:	4b2c      	ldr	r3, [pc, #176]	@ (800d6d0 <MX_TIM2_Init+0xe0>)
 800d61e:	2200      	movs	r2, #0
 800d620:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d622:	4b2b      	ldr	r3, [pc, #172]	@ (800d6d0 <MX_TIM2_Init+0xe0>)
 800d624:	2200      	movs	r2, #0
 800d626:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800d628:	4b29      	ldr	r3, [pc, #164]	@ (800d6d0 <MX_TIM2_Init+0xe0>)
 800d62a:	4a2a      	ldr	r2, [pc, #168]	@ (800d6d4 <MX_TIM2_Init+0xe4>)
 800d62c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d62e:	4b28      	ldr	r3, [pc, #160]	@ (800d6d0 <MX_TIM2_Init+0xe0>)
 800d630:	2200      	movs	r2, #0
 800d632:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d634:	4b26      	ldr	r3, [pc, #152]	@ (800d6d0 <MX_TIM2_Init+0xe0>)
 800d636:	2200      	movs	r2, #0
 800d638:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800d63a:	4b25      	ldr	r3, [pc, #148]	@ (800d6d0 <MX_TIM2_Init+0xe0>)
 800d63c:	0018      	movs	r0, r3
 800d63e:	f008 fe53 	bl	80162e8 <HAL_TIM_PWM_Init>
 800d642:	1e03      	subs	r3, r0, #0
 800d644:	d001      	beq.n	800d64a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800d646:	f7fa fd81 	bl	800814c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d64a:	2110      	movs	r1, #16
 800d64c:	187b      	adds	r3, r7, r1
 800d64e:	2200      	movs	r2, #0
 800d650:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d652:	187b      	adds	r3, r7, r1
 800d654:	2200      	movs	r2, #0
 800d656:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d658:	187a      	adds	r2, r7, r1
 800d65a:	4b1d      	ldr	r3, [pc, #116]	@ (800d6d0 <MX_TIM2_Init+0xe0>)
 800d65c:	0011      	movs	r1, r2
 800d65e:	0018      	movs	r0, r3
 800d660:	f009 f960 	bl	8016924 <HAL_TIMEx_MasterConfigSynchronization>
 800d664:	1e03      	subs	r3, r0, #0
 800d666:	d001      	beq.n	800d66c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800d668:	f7fa fd70 	bl	800814c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d66c:	003b      	movs	r3, r7
 800d66e:	2260      	movs	r2, #96	@ 0x60
 800d670:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800d672:	003b      	movs	r3, r7
 800d674:	2200      	movs	r2, #0
 800d676:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d678:	003b      	movs	r3, r7
 800d67a:	2200      	movs	r2, #0
 800d67c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d67e:	003b      	movs	r3, r7
 800d680:	2200      	movs	r2, #0
 800d682:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d684:	0039      	movs	r1, r7
 800d686:	4b12      	ldr	r3, [pc, #72]	@ (800d6d0 <MX_TIM2_Init+0xe0>)
 800d688:	2200      	movs	r2, #0
 800d68a:	0018      	movs	r0, r3
 800d68c:	f008 fefe 	bl	801648c <HAL_TIM_PWM_ConfigChannel>
 800d690:	1e03      	subs	r3, r0, #0
 800d692:	d001      	beq.n	800d698 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800d694:	f7fa fd5a 	bl	800814c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d698:	0039      	movs	r1, r7
 800d69a:	4b0d      	ldr	r3, [pc, #52]	@ (800d6d0 <MX_TIM2_Init+0xe0>)
 800d69c:	2208      	movs	r2, #8
 800d69e:	0018      	movs	r0, r3
 800d6a0:	f008 fef4 	bl	801648c <HAL_TIM_PWM_ConfigChannel>
 800d6a4:	1e03      	subs	r3, r0, #0
 800d6a6:	d001      	beq.n	800d6ac <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800d6a8:	f7fa fd50 	bl	800814c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d6ac:	0039      	movs	r1, r7
 800d6ae:	4b08      	ldr	r3, [pc, #32]	@ (800d6d0 <MX_TIM2_Init+0xe0>)
 800d6b0:	220c      	movs	r2, #12
 800d6b2:	0018      	movs	r0, r3
 800d6b4:	f008 feea 	bl	801648c <HAL_TIM_PWM_ConfigChannel>
 800d6b8:	1e03      	subs	r3, r0, #0
 800d6ba:	d001      	beq.n	800d6c0 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800d6bc:	f7fa fd46 	bl	800814c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800d6c0:	4b03      	ldr	r3, [pc, #12]	@ (800d6d0 <MX_TIM2_Init+0xe0>)
 800d6c2:	0018      	movs	r0, r3
 800d6c4:	f000 f8fe 	bl	800d8c4 <HAL_TIM_MspPostInit>

}
 800d6c8:	46c0      	nop			@ (mov r8, r8)
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	b006      	add	sp, #24
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	20002200 	.word	0x20002200
 800d6d4:	0000ffff 	.word	0x0000ffff

0800d6d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b086      	sub	sp, #24
 800d6dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d6de:	2310      	movs	r3, #16
 800d6e0:	18fb      	adds	r3, r7, r3
 800d6e2:	0018      	movs	r0, r3
 800d6e4:	2308      	movs	r3, #8
 800d6e6:	001a      	movs	r2, r3
 800d6e8:	2100      	movs	r1, #0
 800d6ea:	f012 fa29 	bl	801fb40 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d6ee:	003b      	movs	r3, r7
 800d6f0:	0018      	movs	r0, r3
 800d6f2:	2310      	movs	r3, #16
 800d6f4:	001a      	movs	r2, r3
 800d6f6:	2100      	movs	r1, #0
 800d6f8:	f012 fa22 	bl	801fb40 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d6fc:	4b32      	ldr	r3, [pc, #200]	@ (800d7c8 <MX_TIM3_Init+0xf0>)
 800d6fe:	4a33      	ldr	r2, [pc, #204]	@ (800d7cc <MX_TIM3_Init+0xf4>)
 800d700:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800d702:	4b31      	ldr	r3, [pc, #196]	@ (800d7c8 <MX_TIM3_Init+0xf0>)
 800d704:	2200      	movs	r2, #0
 800d706:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d708:	4b2f      	ldr	r3, [pc, #188]	@ (800d7c8 <MX_TIM3_Init+0xf0>)
 800d70a:	2200      	movs	r2, #0
 800d70c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800d70e:	4b2e      	ldr	r3, [pc, #184]	@ (800d7c8 <MX_TIM3_Init+0xf0>)
 800d710:	4a2f      	ldr	r2, [pc, #188]	@ (800d7d0 <MX_TIM3_Init+0xf8>)
 800d712:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d714:	4b2c      	ldr	r3, [pc, #176]	@ (800d7c8 <MX_TIM3_Init+0xf0>)
 800d716:	2200      	movs	r2, #0
 800d718:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d71a:	4b2b      	ldr	r3, [pc, #172]	@ (800d7c8 <MX_TIM3_Init+0xf0>)
 800d71c:	2200      	movs	r2, #0
 800d71e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800d720:	4b29      	ldr	r3, [pc, #164]	@ (800d7c8 <MX_TIM3_Init+0xf0>)
 800d722:	0018      	movs	r0, r3
 800d724:	f008 fde0 	bl	80162e8 <HAL_TIM_PWM_Init>
 800d728:	1e03      	subs	r3, r0, #0
 800d72a:	d001      	beq.n	800d730 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800d72c:	f7fa fd0e 	bl	800814c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d730:	2110      	movs	r1, #16
 800d732:	187b      	adds	r3, r7, r1
 800d734:	2200      	movs	r2, #0
 800d736:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d738:	187b      	adds	r3, r7, r1
 800d73a:	2200      	movs	r2, #0
 800d73c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d73e:	187a      	adds	r2, r7, r1
 800d740:	4b21      	ldr	r3, [pc, #132]	@ (800d7c8 <MX_TIM3_Init+0xf0>)
 800d742:	0011      	movs	r1, r2
 800d744:	0018      	movs	r0, r3
 800d746:	f009 f8ed 	bl	8016924 <HAL_TIMEx_MasterConfigSynchronization>
 800d74a:	1e03      	subs	r3, r0, #0
 800d74c:	d001      	beq.n	800d752 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800d74e:	f7fa fcfd 	bl	800814c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d752:	003b      	movs	r3, r7
 800d754:	2260      	movs	r2, #96	@ 0x60
 800d756:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800d758:	003b      	movs	r3, r7
 800d75a:	2200      	movs	r2, #0
 800d75c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d75e:	003b      	movs	r3, r7
 800d760:	2200      	movs	r2, #0
 800d762:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d764:	003b      	movs	r3, r7
 800d766:	2200      	movs	r2, #0
 800d768:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d76a:	0039      	movs	r1, r7
 800d76c:	4b16      	ldr	r3, [pc, #88]	@ (800d7c8 <MX_TIM3_Init+0xf0>)
 800d76e:	2200      	movs	r2, #0
 800d770:	0018      	movs	r0, r3
 800d772:	f008 fe8b 	bl	801648c <HAL_TIM_PWM_ConfigChannel>
 800d776:	1e03      	subs	r3, r0, #0
 800d778:	d001      	beq.n	800d77e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800d77a:	f7fa fce7 	bl	800814c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800d77e:	4b12      	ldr	r3, [pc, #72]	@ (800d7c8 <MX_TIM3_Init+0xf0>)
 800d780:	2104      	movs	r1, #4
 800d782:	0018      	movs	r0, r3
 800d784:	f009 f92c 	bl	80169e0 <HAL_TIMEx_RemapConfig>
 800d788:	1e03      	subs	r3, r0, #0
 800d78a:	d001      	beq.n	800d790 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800d78c:	f7fa fcde 	bl	800814c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d790:	0039      	movs	r1, r7
 800d792:	4b0d      	ldr	r3, [pc, #52]	@ (800d7c8 <MX_TIM3_Init+0xf0>)
 800d794:	2204      	movs	r2, #4
 800d796:	0018      	movs	r0, r3
 800d798:	f008 fe78 	bl	801648c <HAL_TIM_PWM_ConfigChannel>
 800d79c:	1e03      	subs	r3, r0, #0
 800d79e:	d001      	beq.n	800d7a4 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800d7a0:	f7fa fcd4 	bl	800814c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d7a4:	0039      	movs	r1, r7
 800d7a6:	4b08      	ldr	r3, [pc, #32]	@ (800d7c8 <MX_TIM3_Init+0xf0>)
 800d7a8:	2208      	movs	r2, #8
 800d7aa:	0018      	movs	r0, r3
 800d7ac:	f008 fe6e 	bl	801648c <HAL_TIM_PWM_ConfigChannel>
 800d7b0:	1e03      	subs	r3, r0, #0
 800d7b2:	d001      	beq.n	800d7b8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800d7b4:	f7fa fcca 	bl	800814c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800d7b8:	4b03      	ldr	r3, [pc, #12]	@ (800d7c8 <MX_TIM3_Init+0xf0>)
 800d7ba:	0018      	movs	r0, r3
 800d7bc:	f000 f882 	bl	800d8c4 <HAL_TIM_MspPostInit>

}
 800d7c0:	46c0      	nop			@ (mov r8, r8)
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	b006      	add	sp, #24
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	20002240 	.word	0x20002240
 800d7cc:	40000400 	.word	0x40000400
 800d7d0:	0000ffff 	.word	0x0000ffff

0800d7d4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d7da:	003b      	movs	r3, r7
 800d7dc:	0018      	movs	r0, r3
 800d7de:	2308      	movs	r3, #8
 800d7e0:	001a      	movs	r2, r3
 800d7e2:	2100      	movs	r1, #0
 800d7e4:	f012 f9ac 	bl	801fb40 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800d7e8:	4b15      	ldr	r3, [pc, #84]	@ (800d840 <MX_TIM6_Init+0x6c>)
 800d7ea:	4a16      	ldr	r2, [pc, #88]	@ (800d844 <MX_TIM6_Init+0x70>)
 800d7ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800d7ee:	4b14      	ldr	r3, [pc, #80]	@ (800d840 <MX_TIM6_Init+0x6c>)
 800d7f0:	220a      	movs	r2, #10
 800d7f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d7f4:	4b12      	ldr	r3, [pc, #72]	@ (800d840 <MX_TIM6_Init+0x6c>)
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800d7fa:	4b11      	ldr	r3, [pc, #68]	@ (800d840 <MX_TIM6_Init+0x6c>)
 800d7fc:	4a12      	ldr	r2, [pc, #72]	@ (800d848 <MX_TIM6_Init+0x74>)
 800d7fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d800:	4b0f      	ldr	r3, [pc, #60]	@ (800d840 <MX_TIM6_Init+0x6c>)
 800d802:	2200      	movs	r2, #0
 800d804:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d806:	4b0e      	ldr	r3, [pc, #56]	@ (800d840 <MX_TIM6_Init+0x6c>)
 800d808:	0018      	movs	r0, r3
 800d80a:	f008 fcc5 	bl	8016198 <HAL_TIM_Base_Init>
 800d80e:	1e03      	subs	r3, r0, #0
 800d810:	d001      	beq.n	800d816 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800d812:	f7fa fc9b 	bl	800814c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d816:	003b      	movs	r3, r7
 800d818:	2200      	movs	r2, #0
 800d81a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d81c:	003b      	movs	r3, r7
 800d81e:	2200      	movs	r2, #0
 800d820:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d822:	003a      	movs	r2, r7
 800d824:	4b06      	ldr	r3, [pc, #24]	@ (800d840 <MX_TIM6_Init+0x6c>)
 800d826:	0011      	movs	r1, r2
 800d828:	0018      	movs	r0, r3
 800d82a:	f009 f87b 	bl	8016924 <HAL_TIMEx_MasterConfigSynchronization>
 800d82e:	1e03      	subs	r3, r0, #0
 800d830:	d001      	beq.n	800d836 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800d832:	f7fa fc8b 	bl	800814c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d836:	46c0      	nop			@ (mov r8, r8)
 800d838:	46bd      	mov	sp, r7
 800d83a:	b002      	add	sp, #8
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	46c0      	nop			@ (mov r8, r8)
 800d840:	20002280 	.word	0x20002280
 800d844:	40001000 	.word	0x40001000
 800d848:	0000ffff 	.word	0x0000ffff

0800d84c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	2380      	movs	r3, #128	@ 0x80
 800d85a:	05db      	lsls	r3, r3, #23
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d106      	bne.n	800d86e <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d860:	4b0a      	ldr	r3, [pc, #40]	@ (800d88c <HAL_TIM_PWM_MspInit+0x40>)
 800d862:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d864:	4b09      	ldr	r3, [pc, #36]	@ (800d88c <HAL_TIM_PWM_MspInit+0x40>)
 800d866:	2101      	movs	r1, #1
 800d868:	430a      	orrs	r2, r1
 800d86a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800d86c:	e00a      	b.n	800d884 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4a07      	ldr	r2, [pc, #28]	@ (800d890 <HAL_TIM_PWM_MspInit+0x44>)
 800d874:	4293      	cmp	r3, r2
 800d876:	d105      	bne.n	800d884 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d878:	4b04      	ldr	r3, [pc, #16]	@ (800d88c <HAL_TIM_PWM_MspInit+0x40>)
 800d87a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d87c:	4b03      	ldr	r3, [pc, #12]	@ (800d88c <HAL_TIM_PWM_MspInit+0x40>)
 800d87e:	2102      	movs	r1, #2
 800d880:	430a      	orrs	r2, r1
 800d882:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800d884:	46c0      	nop			@ (mov r8, r8)
 800d886:	46bd      	mov	sp, r7
 800d888:	b002      	add	sp, #8
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	40021000 	.word	0x40021000
 800d890:	40000400 	.word	0x40000400

0800d894 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b082      	sub	sp, #8
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a06      	ldr	r2, [pc, #24]	@ (800d8bc <HAL_TIM_Base_MspInit+0x28>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d105      	bne.n	800d8b2 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800d8a6:	4b06      	ldr	r3, [pc, #24]	@ (800d8c0 <HAL_TIM_Base_MspInit+0x2c>)
 800d8a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d8aa:	4b05      	ldr	r3, [pc, #20]	@ (800d8c0 <HAL_TIM_Base_MspInit+0x2c>)
 800d8ac:	2110      	movs	r1, #16
 800d8ae:	430a      	orrs	r2, r1
 800d8b0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800d8b2:	46c0      	nop			@ (mov r8, r8)
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	b002      	add	sp, #8
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	46c0      	nop			@ (mov r8, r8)
 800d8bc:	40001000 	.word	0x40001000
 800d8c0:	40021000 	.word	0x40021000

0800d8c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800d8c4:	b590      	push	{r4, r7, lr}
 800d8c6:	b08b      	sub	sp, #44	@ 0x2c
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d8cc:	2414      	movs	r4, #20
 800d8ce:	193b      	adds	r3, r7, r4
 800d8d0:	0018      	movs	r0, r3
 800d8d2:	2314      	movs	r3, #20
 800d8d4:	001a      	movs	r2, r3
 800d8d6:	2100      	movs	r1, #0
 800d8d8:	f012 f932 	bl	801fb40 <memset>
  if(timHandle->Instance==TIM2)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	2380      	movs	r3, #128	@ 0x80
 800d8e2:	05db      	lsls	r3, r3, #23
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d123      	bne.n	800d930 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d8e8:	4b27      	ldr	r3, [pc, #156]	@ (800d988 <HAL_TIM_MspPostInit+0xc4>)
 800d8ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8ec:	4b26      	ldr	r3, [pc, #152]	@ (800d988 <HAL_TIM_MspPostInit+0xc4>)
 800d8ee:	2101      	movs	r1, #1
 800d8f0:	430a      	orrs	r2, r1
 800d8f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d8f4:	4b24      	ldr	r3, [pc, #144]	@ (800d988 <HAL_TIM_MspPostInit+0xc4>)
 800d8f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	4013      	ands	r3, r2
 800d8fc:	613b      	str	r3, [r7, #16]
 800d8fe:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800d900:	0021      	movs	r1, r4
 800d902:	187b      	adds	r3, r7, r1
 800d904:	220d      	movs	r2, #13
 800d906:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d908:	187b      	adds	r3, r7, r1
 800d90a:	2202      	movs	r2, #2
 800d90c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d90e:	187b      	adds	r3, r7, r1
 800d910:	2200      	movs	r2, #0
 800d912:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d914:	187b      	adds	r3, r7, r1
 800d916:	2200      	movs	r2, #0
 800d918:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800d91a:	187b      	adds	r3, r7, r1
 800d91c:	2202      	movs	r2, #2
 800d91e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d920:	187a      	adds	r2, r7, r1
 800d922:	23a0      	movs	r3, #160	@ 0xa0
 800d924:	05db      	lsls	r3, r3, #23
 800d926:	0011      	movs	r1, r2
 800d928:	0018      	movs	r0, r3
 800d92a:	f001 ffa7 	bl	800f87c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800d92e:	e027      	b.n	800d980 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4a15      	ldr	r2, [pc, #84]	@ (800d98c <HAL_TIM_MspPostInit+0xc8>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d122      	bne.n	800d980 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d93a:	4b13      	ldr	r3, [pc, #76]	@ (800d988 <HAL_TIM_MspPostInit+0xc4>)
 800d93c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d93e:	4b12      	ldr	r3, [pc, #72]	@ (800d988 <HAL_TIM_MspPostInit+0xc4>)
 800d940:	2104      	movs	r1, #4
 800d942:	430a      	orrs	r2, r1
 800d944:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d946:	4b10      	ldr	r3, [pc, #64]	@ (800d988 <HAL_TIM_MspPostInit+0xc4>)
 800d948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d94a:	2204      	movs	r2, #4
 800d94c:	4013      	ands	r3, r2
 800d94e:	60fb      	str	r3, [r7, #12]
 800d950:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800d952:	2114      	movs	r1, #20
 800d954:	187b      	adds	r3, r7, r1
 800d956:	22e0      	movs	r2, #224	@ 0xe0
 800d958:	0052      	lsls	r2, r2, #1
 800d95a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d95c:	187b      	adds	r3, r7, r1
 800d95e:	2202      	movs	r2, #2
 800d960:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d962:	187b      	adds	r3, r7, r1
 800d964:	2200      	movs	r2, #0
 800d966:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d968:	187b      	adds	r3, r7, r1
 800d96a:	2200      	movs	r2, #0
 800d96c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d96e:	187b      	adds	r3, r7, r1
 800d970:	2202      	movs	r2, #2
 800d972:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d974:	187b      	adds	r3, r7, r1
 800d976:	4a06      	ldr	r2, [pc, #24]	@ (800d990 <HAL_TIM_MspPostInit+0xcc>)
 800d978:	0019      	movs	r1, r3
 800d97a:	0010      	movs	r0, r2
 800d97c:	f001 ff7e 	bl	800f87c <HAL_GPIO_Init>
}
 800d980:	46c0      	nop			@ (mov r8, r8)
 800d982:	46bd      	mov	sp, r7
 800d984:	b00b      	add	sp, #44	@ 0x2c
 800d986:	bd90      	pop	{r4, r7, pc}
 800d988:	40021000 	.word	0x40021000
 800d98c:	40000400 	.word	0x40000400
 800d990:	50000800 	.word	0x50000800

0800d994 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800d998:	4b17      	ldr	r3, [pc, #92]	@ (800d9f8 <MX_LPUART1_UART_Init+0x64>)
 800d99a:	4a18      	ldr	r2, [pc, #96]	@ (800d9fc <MX_LPUART1_UART_Init+0x68>)
 800d99c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800d99e:	4b16      	ldr	r3, [pc, #88]	@ (800d9f8 <MX_LPUART1_UART_Init+0x64>)
 800d9a0:	22e1      	movs	r2, #225	@ 0xe1
 800d9a2:	0252      	lsls	r2, r2, #9
 800d9a4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d9a6:	4b14      	ldr	r3, [pc, #80]	@ (800d9f8 <MX_LPUART1_UART_Init+0x64>)
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800d9ac:	4b12      	ldr	r3, [pc, #72]	@ (800d9f8 <MX_LPUART1_UART_Init+0x64>)
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800d9b2:	4b11      	ldr	r3, [pc, #68]	@ (800d9f8 <MX_LPUART1_UART_Init+0x64>)
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800d9b8:	4b0f      	ldr	r3, [pc, #60]	@ (800d9f8 <MX_LPUART1_UART_Init+0x64>)
 800d9ba:	220c      	movs	r2, #12
 800d9bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d9be:	4b0e      	ldr	r3, [pc, #56]	@ (800d9f8 <MX_LPUART1_UART_Init+0x64>)
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d9c4:	4b0c      	ldr	r3, [pc, #48]	@ (800d9f8 <MX_LPUART1_UART_Init+0x64>)
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800d9ca:	4b0b      	ldr	r3, [pc, #44]	@ (800d9f8 <MX_LPUART1_UART_Init+0x64>)
 800d9cc:	2218      	movs	r2, #24
 800d9ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d9d0:	4b09      	ldr	r3, [pc, #36]	@ (800d9f8 <MX_LPUART1_UART_Init+0x64>)
 800d9d2:	2280      	movs	r2, #128	@ 0x80
 800d9d4:	0212      	lsls	r2, r2, #8
 800d9d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800d9d8:	4b07      	ldr	r3, [pc, #28]	@ (800d9f8 <MX_LPUART1_UART_Init+0x64>)
 800d9da:	2280      	movs	r2, #128	@ 0x80
 800d9dc:	0152      	lsls	r2, r2, #5
 800d9de:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800d9e0:	4b05      	ldr	r3, [pc, #20]	@ (800d9f8 <MX_LPUART1_UART_Init+0x64>)
 800d9e2:	0018      	movs	r0, r3
 800d9e4:	f009 f81a 	bl	8016a1c <HAL_UART_Init>
 800d9e8:	1e03      	subs	r3, r0, #0
 800d9ea:	d001      	beq.n	800d9f0 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800d9ec:	f7fa fbae 	bl	800814c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800d9f0:	46c0      	nop			@ (mov r8, r8)
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	46c0      	nop			@ (mov r8, r8)
 800d9f8:	200022c0 	.word	0x200022c0
 800d9fc:	40004800 	.word	0x40004800

0800da00 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800da04:	4b16      	ldr	r3, [pc, #88]	@ (800da60 <MX_USART1_UART_Init+0x60>)
 800da06:	4a17      	ldr	r2, [pc, #92]	@ (800da64 <MX_USART1_UART_Init+0x64>)
 800da08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800da0a:	4b15      	ldr	r3, [pc, #84]	@ (800da60 <MX_USART1_UART_Init+0x60>)
 800da0c:	22e1      	movs	r2, #225	@ 0xe1
 800da0e:	0252      	lsls	r2, r2, #9
 800da10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800da12:	4b13      	ldr	r3, [pc, #76]	@ (800da60 <MX_USART1_UART_Init+0x60>)
 800da14:	2200      	movs	r2, #0
 800da16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800da18:	4b11      	ldr	r3, [pc, #68]	@ (800da60 <MX_USART1_UART_Init+0x60>)
 800da1a:	2200      	movs	r2, #0
 800da1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800da1e:	4b10      	ldr	r3, [pc, #64]	@ (800da60 <MX_USART1_UART_Init+0x60>)
 800da20:	2200      	movs	r2, #0
 800da22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800da24:	4b0e      	ldr	r3, [pc, #56]	@ (800da60 <MX_USART1_UART_Init+0x60>)
 800da26:	220c      	movs	r2, #12
 800da28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800da2a:	4b0d      	ldr	r3, [pc, #52]	@ (800da60 <MX_USART1_UART_Init+0x60>)
 800da2c:	2200      	movs	r2, #0
 800da2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800da30:	4b0b      	ldr	r3, [pc, #44]	@ (800da60 <MX_USART1_UART_Init+0x60>)
 800da32:	2200      	movs	r2, #0
 800da34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800da36:	4b0a      	ldr	r3, [pc, #40]	@ (800da60 <MX_USART1_UART_Init+0x60>)
 800da38:	2200      	movs	r2, #0
 800da3a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800da3c:	4b08      	ldr	r3, [pc, #32]	@ (800da60 <MX_USART1_UART_Init+0x60>)
 800da3e:	2208      	movs	r2, #8
 800da40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800da42:	4b07      	ldr	r3, [pc, #28]	@ (800da60 <MX_USART1_UART_Init+0x60>)
 800da44:	2280      	movs	r2, #128	@ 0x80
 800da46:	0212      	lsls	r2, r2, #8
 800da48:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800da4a:	4b05      	ldr	r3, [pc, #20]	@ (800da60 <MX_USART1_UART_Init+0x60>)
 800da4c:	0018      	movs	r0, r3
 800da4e:	f008 ffe5 	bl	8016a1c <HAL_UART_Init>
 800da52:	1e03      	subs	r3, r0, #0
 800da54:	d001      	beq.n	800da5a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800da56:	f7fa fb79 	bl	800814c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800da5a:	46c0      	nop			@ (mov r8, r8)
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	20002378 	.word	0x20002378
 800da64:	40013800 	.word	0x40013800

0800da68 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800da6c:	4b14      	ldr	r3, [pc, #80]	@ (800dac0 <MX_USART4_UART_Init+0x58>)
 800da6e:	4a15      	ldr	r2, [pc, #84]	@ (800dac4 <MX_USART4_UART_Init+0x5c>)
 800da70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800da72:	4b13      	ldr	r3, [pc, #76]	@ (800dac0 <MX_USART4_UART_Init+0x58>)
 800da74:	22e1      	movs	r2, #225	@ 0xe1
 800da76:	0252      	lsls	r2, r2, #9
 800da78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800da7a:	4b11      	ldr	r3, [pc, #68]	@ (800dac0 <MX_USART4_UART_Init+0x58>)
 800da7c:	2200      	movs	r2, #0
 800da7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800da80:	4b0f      	ldr	r3, [pc, #60]	@ (800dac0 <MX_USART4_UART_Init+0x58>)
 800da82:	2200      	movs	r2, #0
 800da84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800da86:	4b0e      	ldr	r3, [pc, #56]	@ (800dac0 <MX_USART4_UART_Init+0x58>)
 800da88:	2200      	movs	r2, #0
 800da8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800da8c:	4b0c      	ldr	r3, [pc, #48]	@ (800dac0 <MX_USART4_UART_Init+0x58>)
 800da8e:	220c      	movs	r2, #12
 800da90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800da92:	4b0b      	ldr	r3, [pc, #44]	@ (800dac0 <MX_USART4_UART_Init+0x58>)
 800da94:	2200      	movs	r2, #0
 800da96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800da98:	4b09      	ldr	r3, [pc, #36]	@ (800dac0 <MX_USART4_UART_Init+0x58>)
 800da9a:	2200      	movs	r2, #0
 800da9c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800da9e:	4b08      	ldr	r3, [pc, #32]	@ (800dac0 <MX_USART4_UART_Init+0x58>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800daa4:	4b06      	ldr	r3, [pc, #24]	@ (800dac0 <MX_USART4_UART_Init+0x58>)
 800daa6:	2200      	movs	r2, #0
 800daa8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800daaa:	4b05      	ldr	r3, [pc, #20]	@ (800dac0 <MX_USART4_UART_Init+0x58>)
 800daac:	0018      	movs	r0, r3
 800daae:	f008 ffb5 	bl	8016a1c <HAL_UART_Init>
 800dab2:	1e03      	subs	r3, r0, #0
 800dab4:	d001      	beq.n	800daba <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800dab6:	f7fa fb49 	bl	800814c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800daba:	46c0      	nop			@ (mov r8, r8)
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	20002430 	.word	0x20002430
 800dac4:	40004c00 	.word	0x40004c00

0800dac8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800dac8:	b590      	push	{r4, r7, lr}
 800daca:	b08d      	sub	sp, #52	@ 0x34
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dad0:	241c      	movs	r4, #28
 800dad2:	193b      	adds	r3, r7, r4
 800dad4:	0018      	movs	r0, r3
 800dad6:	2314      	movs	r3, #20
 800dad8:	001a      	movs	r2, r3
 800dada:	2100      	movs	r1, #0
 800dadc:	f012 f830 	bl	801fb40 <memset>
  if(uartHandle->Instance==LPUART1)
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a8b      	ldr	r2, [pc, #556]	@ (800dd14 <HAL_UART_MspInit+0x24c>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d129      	bne.n	800db3e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800daea:	4b8b      	ldr	r3, [pc, #556]	@ (800dd18 <HAL_UART_MspInit+0x250>)
 800daec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800daee:	4b8a      	ldr	r3, [pc, #552]	@ (800dd18 <HAL_UART_MspInit+0x250>)
 800daf0:	2180      	movs	r1, #128	@ 0x80
 800daf2:	02c9      	lsls	r1, r1, #11
 800daf4:	430a      	orrs	r2, r1
 800daf6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800daf8:	4b87      	ldr	r3, [pc, #540]	@ (800dd18 <HAL_UART_MspInit+0x250>)
 800dafa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dafc:	4b86      	ldr	r3, [pc, #536]	@ (800dd18 <HAL_UART_MspInit+0x250>)
 800dafe:	2104      	movs	r1, #4
 800db00:	430a      	orrs	r2, r1
 800db02:	62da      	str	r2, [r3, #44]	@ 0x2c
 800db04:	4b84      	ldr	r3, [pc, #528]	@ (800dd18 <HAL_UART_MspInit+0x250>)
 800db06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db08:	2204      	movs	r2, #4
 800db0a:	4013      	ands	r3, r2
 800db0c:	61bb      	str	r3, [r7, #24]
 800db0e:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800db10:	0021      	movs	r1, r4
 800db12:	187b      	adds	r3, r7, r1
 800db14:	2203      	movs	r2, #3
 800db16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db18:	187b      	adds	r3, r7, r1
 800db1a:	2202      	movs	r2, #2
 800db1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db1e:	187b      	adds	r3, r7, r1
 800db20:	2200      	movs	r2, #0
 800db22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db24:	187b      	adds	r3, r7, r1
 800db26:	2203      	movs	r2, #3
 800db28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800db2a:	187b      	adds	r3, r7, r1
 800db2c:	2206      	movs	r2, #6
 800db2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800db30:	187b      	adds	r3, r7, r1
 800db32:	4a7a      	ldr	r2, [pc, #488]	@ (800dd1c <HAL_UART_MspInit+0x254>)
 800db34:	0019      	movs	r1, r3
 800db36:	0010      	movs	r0, r2
 800db38:	f001 fea0 	bl	800f87c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800db3c:	e0e5      	b.n	800dd0a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	4a77      	ldr	r2, [pc, #476]	@ (800dd20 <HAL_UART_MspInit+0x258>)
 800db44:	4293      	cmp	r3, r2
 800db46:	d133      	bne.n	800dbb0 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800db48:	4b73      	ldr	r3, [pc, #460]	@ (800dd18 <HAL_UART_MspInit+0x250>)
 800db4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800db4c:	4b72      	ldr	r3, [pc, #456]	@ (800dd18 <HAL_UART_MspInit+0x250>)
 800db4e:	2180      	movs	r1, #128	@ 0x80
 800db50:	01c9      	lsls	r1, r1, #7
 800db52:	430a      	orrs	r2, r1
 800db54:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db56:	4b70      	ldr	r3, [pc, #448]	@ (800dd18 <HAL_UART_MspInit+0x250>)
 800db58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db5a:	4b6f      	ldr	r3, [pc, #444]	@ (800dd18 <HAL_UART_MspInit+0x250>)
 800db5c:	2101      	movs	r1, #1
 800db5e:	430a      	orrs	r2, r1
 800db60:	62da      	str	r2, [r3, #44]	@ 0x2c
 800db62:	4b6d      	ldr	r3, [pc, #436]	@ (800dd18 <HAL_UART_MspInit+0x250>)
 800db64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db66:	2201      	movs	r2, #1
 800db68:	4013      	ands	r3, r2
 800db6a:	617b      	str	r3, [r7, #20]
 800db6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800db6e:	211c      	movs	r1, #28
 800db70:	187b      	adds	r3, r7, r1
 800db72:	22c0      	movs	r2, #192	@ 0xc0
 800db74:	00d2      	lsls	r2, r2, #3
 800db76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db78:	187b      	adds	r3, r7, r1
 800db7a:	2202      	movs	r2, #2
 800db7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db7e:	187b      	adds	r3, r7, r1
 800db80:	2200      	movs	r2, #0
 800db82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db84:	187b      	adds	r3, r7, r1
 800db86:	2203      	movs	r2, #3
 800db88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800db8a:	187b      	adds	r3, r7, r1
 800db8c:	2204      	movs	r2, #4
 800db8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db90:	187a      	adds	r2, r7, r1
 800db92:	23a0      	movs	r3, #160	@ 0xa0
 800db94:	05db      	lsls	r3, r3, #23
 800db96:	0011      	movs	r1, r2
 800db98:	0018      	movs	r0, r3
 800db9a:	f001 fe6f 	bl	800f87c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800db9e:	2200      	movs	r2, #0
 800dba0:	2100      	movs	r1, #0
 800dba2:	201b      	movs	r0, #27
 800dba4:	f001 fa18 	bl	800efd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800dba8:	201b      	movs	r0, #27
 800dbaa:	f001 fa2a 	bl	800f002 <HAL_NVIC_EnableIRQ>
}
 800dbae:	e0ac      	b.n	800dd0a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4a5b      	ldr	r2, [pc, #364]	@ (800dd24 <HAL_UART_MspInit+0x25c>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d000      	beq.n	800dbbc <HAL_UART_MspInit+0xf4>
 800dbba:	e0a6      	b.n	800dd0a <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800dbbc:	4b56      	ldr	r3, [pc, #344]	@ (800dd18 <HAL_UART_MspInit+0x250>)
 800dbbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dbc0:	4b55      	ldr	r3, [pc, #340]	@ (800dd18 <HAL_UART_MspInit+0x250>)
 800dbc2:	2180      	movs	r1, #128	@ 0x80
 800dbc4:	0309      	lsls	r1, r1, #12
 800dbc6:	430a      	orrs	r2, r1
 800dbc8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dbca:	4b53      	ldr	r3, [pc, #332]	@ (800dd18 <HAL_UART_MspInit+0x250>)
 800dbcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbce:	4b52      	ldr	r3, [pc, #328]	@ (800dd18 <HAL_UART_MspInit+0x250>)
 800dbd0:	2101      	movs	r1, #1
 800dbd2:	430a      	orrs	r2, r1
 800dbd4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800dbd6:	4b50      	ldr	r3, [pc, #320]	@ (800dd18 <HAL_UART_MspInit+0x250>)
 800dbd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbda:	2201      	movs	r2, #1
 800dbdc:	4013      	ands	r3, r2
 800dbde:	613b      	str	r3, [r7, #16]
 800dbe0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dbe2:	4b4d      	ldr	r3, [pc, #308]	@ (800dd18 <HAL_UART_MspInit+0x250>)
 800dbe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbe6:	4b4c      	ldr	r3, [pc, #304]	@ (800dd18 <HAL_UART_MspInit+0x250>)
 800dbe8:	2104      	movs	r1, #4
 800dbea:	430a      	orrs	r2, r1
 800dbec:	62da      	str	r2, [r3, #44]	@ 0x2c
 800dbee:	4b4a      	ldr	r3, [pc, #296]	@ (800dd18 <HAL_UART_MspInit+0x250>)
 800dbf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbf2:	2204      	movs	r2, #4
 800dbf4:	4013      	ands	r3, r2
 800dbf6:	60fb      	str	r3, [r7, #12]
 800dbf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800dbfa:	241c      	movs	r4, #28
 800dbfc:	193b      	adds	r3, r7, r4
 800dbfe:	2202      	movs	r2, #2
 800dc00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc02:	193b      	adds	r3, r7, r4
 800dc04:	2202      	movs	r2, #2
 800dc06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc08:	193b      	adds	r3, r7, r4
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc0e:	193b      	adds	r3, r7, r4
 800dc10:	2203      	movs	r2, #3
 800dc12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800dc14:	193b      	adds	r3, r7, r4
 800dc16:	2206      	movs	r2, #6
 800dc18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc1a:	193a      	adds	r2, r7, r4
 800dc1c:	23a0      	movs	r3, #160	@ 0xa0
 800dc1e:	05db      	lsls	r3, r3, #23
 800dc20:	0011      	movs	r1, r2
 800dc22:	0018      	movs	r0, r3
 800dc24:	f001 fe2a 	bl	800f87c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800dc28:	0021      	movs	r1, r4
 800dc2a:	187b      	adds	r3, r7, r1
 800dc2c:	2280      	movs	r2, #128	@ 0x80
 800dc2e:	00d2      	lsls	r2, r2, #3
 800dc30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc32:	187b      	adds	r3, r7, r1
 800dc34:	2202      	movs	r2, #2
 800dc36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc38:	187b      	adds	r3, r7, r1
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc3e:	187b      	adds	r3, r7, r1
 800dc40:	2203      	movs	r2, #3
 800dc42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800dc44:	187b      	adds	r3, r7, r1
 800dc46:	2206      	movs	r2, #6
 800dc48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dc4a:	187b      	adds	r3, r7, r1
 800dc4c:	4a33      	ldr	r2, [pc, #204]	@ (800dd1c <HAL_UART_MspInit+0x254>)
 800dc4e:	0019      	movs	r1, r3
 800dc50:	0010      	movs	r0, r2
 800dc52:	f001 fe13 	bl	800f87c <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800dc56:	4b34      	ldr	r3, [pc, #208]	@ (800dd28 <HAL_UART_MspInit+0x260>)
 800dc58:	4a34      	ldr	r2, [pc, #208]	@ (800dd2c <HAL_UART_MspInit+0x264>)
 800dc5a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800dc5c:	4b32      	ldr	r3, [pc, #200]	@ (800dd28 <HAL_UART_MspInit+0x260>)
 800dc5e:	220c      	movs	r2, #12
 800dc60:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800dc62:	4b31      	ldr	r3, [pc, #196]	@ (800dd28 <HAL_UART_MspInit+0x260>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800dc68:	4b2f      	ldr	r3, [pc, #188]	@ (800dd28 <HAL_UART_MspInit+0x260>)
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800dc6e:	4b2e      	ldr	r3, [pc, #184]	@ (800dd28 <HAL_UART_MspInit+0x260>)
 800dc70:	2280      	movs	r2, #128	@ 0x80
 800dc72:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800dc74:	4b2c      	ldr	r3, [pc, #176]	@ (800dd28 <HAL_UART_MspInit+0x260>)
 800dc76:	2200      	movs	r2, #0
 800dc78:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800dc7a:	4b2b      	ldr	r3, [pc, #172]	@ (800dd28 <HAL_UART_MspInit+0x260>)
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800dc80:	4b29      	ldr	r3, [pc, #164]	@ (800dd28 <HAL_UART_MspInit+0x260>)
 800dc82:	2220      	movs	r2, #32
 800dc84:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800dc86:	4b28      	ldr	r3, [pc, #160]	@ (800dd28 <HAL_UART_MspInit+0x260>)
 800dc88:	2200      	movs	r2, #0
 800dc8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800dc8c:	4b26      	ldr	r3, [pc, #152]	@ (800dd28 <HAL_UART_MspInit+0x260>)
 800dc8e:	0018      	movs	r0, r3
 800dc90:	f001 f9d8 	bl	800f044 <HAL_DMA_Init>
 800dc94:	1e03      	subs	r3, r0, #0
 800dc96:	d001      	beq.n	800dc9c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800dc98:	f7fa fa58 	bl	800814c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	4a22      	ldr	r2, [pc, #136]	@ (800dd28 <HAL_UART_MspInit+0x260>)
 800dca0:	675a      	str	r2, [r3, #116]	@ 0x74
 800dca2:	4b21      	ldr	r3, [pc, #132]	@ (800dd28 <HAL_UART_MspInit+0x260>)
 800dca4:	687a      	ldr	r2, [r7, #4]
 800dca6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800dca8:	4b21      	ldr	r3, [pc, #132]	@ (800dd30 <HAL_UART_MspInit+0x268>)
 800dcaa:	4a22      	ldr	r2, [pc, #136]	@ (800dd34 <HAL_UART_MspInit+0x26c>)
 800dcac:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800dcae:	4b20      	ldr	r3, [pc, #128]	@ (800dd30 <HAL_UART_MspInit+0x268>)
 800dcb0:	220c      	movs	r2, #12
 800dcb2:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800dcb4:	4b1e      	ldr	r3, [pc, #120]	@ (800dd30 <HAL_UART_MspInit+0x268>)
 800dcb6:	2210      	movs	r2, #16
 800dcb8:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800dcba:	4b1d      	ldr	r3, [pc, #116]	@ (800dd30 <HAL_UART_MspInit+0x268>)
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800dcc0:	4b1b      	ldr	r3, [pc, #108]	@ (800dd30 <HAL_UART_MspInit+0x268>)
 800dcc2:	2280      	movs	r2, #128	@ 0x80
 800dcc4:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800dcc6:	4b1a      	ldr	r3, [pc, #104]	@ (800dd30 <HAL_UART_MspInit+0x268>)
 800dcc8:	2200      	movs	r2, #0
 800dcca:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800dccc:	4b18      	ldr	r3, [pc, #96]	@ (800dd30 <HAL_UART_MspInit+0x268>)
 800dcce:	2200      	movs	r2, #0
 800dcd0:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800dcd2:	4b17      	ldr	r3, [pc, #92]	@ (800dd30 <HAL_UART_MspInit+0x268>)
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800dcd8:	4b15      	ldr	r3, [pc, #84]	@ (800dd30 <HAL_UART_MspInit+0x268>)
 800dcda:	2200      	movs	r2, #0
 800dcdc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800dcde:	4b14      	ldr	r3, [pc, #80]	@ (800dd30 <HAL_UART_MspInit+0x268>)
 800dce0:	0018      	movs	r0, r3
 800dce2:	f001 f9af 	bl	800f044 <HAL_DMA_Init>
 800dce6:	1e03      	subs	r3, r0, #0
 800dce8:	d001      	beq.n	800dcee <HAL_UART_MspInit+0x226>
      Error_Handler();
 800dcea:	f7fa fa2f 	bl	800814c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	4a0f      	ldr	r2, [pc, #60]	@ (800dd30 <HAL_UART_MspInit+0x268>)
 800dcf2:	671a      	str	r2, [r3, #112]	@ 0x70
 800dcf4:	4b0e      	ldr	r3, [pc, #56]	@ (800dd30 <HAL_UART_MspInit+0x268>)
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	2100      	movs	r1, #0
 800dcfe:	200e      	movs	r0, #14
 800dd00:	f001 f96a 	bl	800efd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800dd04:	200e      	movs	r0, #14
 800dd06:	f001 f97c 	bl	800f002 <HAL_NVIC_EnableIRQ>
}
 800dd0a:	46c0      	nop			@ (mov r8, r8)
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	b00d      	add	sp, #52	@ 0x34
 800dd10:	bd90      	pop	{r4, r7, pc}
 800dd12:	46c0      	nop			@ (mov r8, r8)
 800dd14:	40004800 	.word	0x40004800
 800dd18:	40021000 	.word	0x40021000
 800dd1c:	50000800 	.word	0x50000800
 800dd20:	40013800 	.word	0x40013800
 800dd24:	40004c00 	.word	0x40004c00
 800dd28:	200024e8 	.word	0x200024e8
 800dd2c:	4002006c 	.word	0x4002006c
 800dd30:	20002530 	.word	0x20002530
 800dd34:	40020080 	.word	0x40020080

0800dd38 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b086      	sub	sp, #24
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800dd40:	f000 fca6 	bl	800e690 <HAL_GetTick>
 800dd44:	0003      	movs	r3, r0
 800dd46:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800dd48:	4b1c      	ldr	r3, [pc, #112]	@ (800ddbc <TimestampIsReached+0x84>)
 800dd4a:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800dd4c:	697a      	ldr	r2, [r7, #20]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d307      	bcc.n	800dd64 <TimestampIsReached+0x2c>
 800dd54:	697a      	ldr	r2, [r7, #20]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	1ad3      	subs	r3, r2, r3
 800dd5a:	693a      	ldr	r2, [r7, #16]
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d901      	bls.n	800dd64 <TimestampIsReached+0x2c>
 800dd60:	2201      	movs	r2, #1
 800dd62:	e000      	b.n	800dd66 <TimestampIsReached+0x2e>
 800dd64:	2200      	movs	r2, #0
 800dd66:	230f      	movs	r3, #15
 800dd68:	18fb      	adds	r3, r7, r3
 800dd6a:	701a      	strb	r2, [r3, #0]
 800dd6c:	781a      	ldrb	r2, [r3, #0]
 800dd6e:	2101      	movs	r1, #1
 800dd70:	400a      	ands	r2, r1
 800dd72:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800dd74:	697a      	ldr	r2, [r7, #20]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d207      	bcs.n	800dd8c <TimestampIsReached+0x54>
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	1ad3      	subs	r3, r2, r3
 800dd82:	693a      	ldr	r2, [r7, #16]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d201      	bcs.n	800dd8c <TimestampIsReached+0x54>
 800dd88:	2201      	movs	r2, #1
 800dd8a:	e000      	b.n	800dd8e <TimestampIsReached+0x56>
 800dd8c:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800dd8e:	200e      	movs	r0, #14
 800dd90:	183b      	adds	r3, r7, r0
 800dd92:	701a      	strb	r2, [r3, #0]
 800dd94:	781a      	ldrb	r2, [r3, #0]
 800dd96:	2101      	movs	r1, #1
 800dd98:	400a      	ands	r2, r1
 800dd9a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800dd9c:	230f      	movs	r3, #15
 800dd9e:	18fb      	adds	r3, r7, r3
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d103      	bne.n	800ddae <TimestampIsReached+0x76>
 800dda6:	183b      	adds	r3, r7, r0
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d001      	beq.n	800ddb2 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	e000      	b.n	800ddb4 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800ddb2:	2300      	movs	r3, #0
}
 800ddb4:	0018      	movs	r0, r3
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	b006      	add	sp, #24
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	7fffffff 	.word	0x7fffffff

0800ddc0 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800ddc8:	f000 fc62 	bl	800e690 <HAL_GetTick>
 800ddcc:	0002      	movs	r2, r0
 800ddce:	4904      	ldr	r1, [pc, #16]	@ (800dde0 <AddTimestamp+0x20>)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	0018      	movs	r0, r3
 800ddd4:	f011 fd70 	bl	801f8b8 <siprintf>
}
 800ddd8:	46c0      	nop			@ (mov r8, r8)
 800ddda:	46bd      	mov	sp, r7
 800dddc:	b002      	add	sp, #8
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	08024644 	.word	0x08024644

0800dde4 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800dde4:	b40c      	push	{r2, r3}
 800dde6:	b5b0      	push	{r4, r5, r7, lr}
 800dde8:	b0a4      	sub	sp, #144	@ 0x90
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	0002      	movs	r2, r0
 800ddee:	6039      	str	r1, [r7, #0]
 800ddf0:	1dfb      	adds	r3, r7, #7
 800ddf2:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800ddf4:	4b23      	ldr	r3, [pc, #140]	@ (800de84 <CreateLine+0xa0>)
 800ddf6:	781b      	ldrb	r3, [r3, #0]
 800ddf8:	1dfa      	adds	r2, r7, #7
 800ddfa:	7812      	ldrb	r2, [r2, #0]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d839      	bhi.n	800de74 <CreateLine+0x90>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800de00:	683a      	ldr	r2, [r7, #0]
 800de02:	4921      	ldr	r1, [pc, #132]	@ (800de88 <CreateLine+0xa4>)
 800de04:	240c      	movs	r4, #12
 800de06:	193b      	adds	r3, r7, r4
 800de08:	0018      	movs	r0, r3
 800de0a:	f011 fd55 	bl	801f8b8 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800de0e:	4b1d      	ldr	r3, [pc, #116]	@ (800de84 <CreateLine+0xa0>)
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	2b01      	cmp	r3, #1
 800de14:	d909      	bls.n	800de2a <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800de16:	193b      	adds	r3, r7, r4
 800de18:	0018      	movs	r0, r3
 800de1a:	f7f2 f9a7 	bl	800016c <strlen>
 800de1e:	0002      	movs	r2, r0
 800de20:	193b      	adds	r3, r7, r4
 800de22:	189b      	adds	r3, r3, r2
 800de24:	0018      	movs	r0, r3
 800de26:	f7ff ffcb 	bl	800ddc0 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800de2a:	240c      	movs	r4, #12
 800de2c:	193b      	adds	r3, r7, r4
 800de2e:	0018      	movs	r0, r3
 800de30:	f7f2 f99c 	bl	800016c <strlen>
 800de34:	0003      	movs	r3, r0
 800de36:	218c      	movs	r1, #140	@ 0x8c
 800de38:	187a      	adds	r2, r7, r1
 800de3a:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800de3c:	239c      	movs	r3, #156	@ 0x9c
 800de3e:	2508      	movs	r5, #8
 800de40:	195b      	adds	r3, r3, r5
 800de42:	19db      	adds	r3, r3, r7
 800de44:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800de46:	193a      	adds	r2, r7, r4
 800de48:	187b      	adds	r3, r7, r1
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	18d0      	adds	r0, r2, r3
 800de4e:	187b      	adds	r3, r7, r1
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2280      	movs	r2, #128	@ 0x80
 800de54:	1ad3      	subs	r3, r2, r3
 800de56:	0019      	movs	r1, r3
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	2298      	movs	r2, #152	@ 0x98
 800de5c:	1952      	adds	r2, r2, r5
 800de5e:	19d2      	adds	r2, r2, r7
 800de60:	6812      	ldr	r2, [r2, #0]
 800de62:	f011 fdc1 	bl	801f9e8 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800de66:	193a      	adds	r2, r7, r4
 800de68:	4b08      	ldr	r3, [pc, #32]	@ (800de8c <CreateLine+0xa8>)
 800de6a:	0011      	movs	r1, r2
 800de6c:	0018      	movs	r0, r3
 800de6e:	f011 fcb3 	bl	801f7d8 <iprintf>
 800de72:	e000      	b.n	800de76 <CreateLine+0x92>
    return;
 800de74:	46c0      	nop			@ (mov r8, r8)
}
 800de76:	46bd      	mov	sp, r7
 800de78:	b024      	add	sp, #144	@ 0x90
 800de7a:	bcb0      	pop	{r4, r5, r7}
 800de7c:	bc08      	pop	{r3}
 800de7e:	b002      	add	sp, #8
 800de80:	4718      	bx	r3
 800de82:	46c0      	nop			@ (mov r8, r8)
 800de84:	200000d0 	.word	0x200000d0
 800de88:	08024650 	.word	0x08024650
 800de8c:	08024654 	.word	0x08024654

0800de90 <_write>:

int _write(int fd, const void *buf, size_t count) {
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	b29a      	uxth	r2, r3
 800dea0:	68b9      	ldr	r1, [r7, #8]
 800dea2:	4804      	ldr	r0, [pc, #16]	@ (800deb4 <_write+0x24>)
 800dea4:	2364      	movs	r3, #100	@ 0x64
 800dea6:	f008 fe1f 	bl	8016ae8 <HAL_UART_Transmit>
  return count;
 800deaa:	687b      	ldr	r3, [r7, #4]
}
 800deac:	0018      	movs	r0, r3
 800deae:	46bd      	mov	sp, r7
 800deb0:	b004      	add	sp, #16
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	20002378 	.word	0x20002378

0800deb8 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	0002      	movs	r2, r0
 800dec0:	1dfb      	adds	r3, r7, #7
 800dec2:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 800dec4:	4b03      	ldr	r3, [pc, #12]	@ (800ded4 <SetVerboseLevel+0x1c>)
 800dec6:	1dfa      	adds	r2, r7, #7
 800dec8:	7812      	ldrb	r2, [r2, #0]
 800deca:	701a      	strb	r2, [r3, #0]
}
 800decc:	46c0      	nop			@ (mov r8, r8)
 800dece:	46bd      	mov	sp, r7
 800ded0:	b002      	add	sp, #8
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	200000d0 	.word	0x200000d0

0800ded8 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 800ded8:	b580      	push	{r7, lr}
 800deda:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 800dedc:	4b02      	ldr	r3, [pc, #8]	@ (800dee8 <GetVerboseLevel+0x10>)
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	0018      	movs	r0, r3
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	46c0      	nop			@ (mov r8, r8)
 800dee8:	200000d0 	.word	0x200000d0

0800deec <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800def2:	4a0f      	ldr	r2, [pc, #60]	@ (800df30 <BinaryReleaseInfo+0x44>)
 800def4:	4b0f      	ldr	r3, [pc, #60]	@ (800df34 <BinaryReleaseInfo+0x48>)
 800def6:	0019      	movs	r1, r3
 800def8:	2002      	movs	r0, #2
 800defa:	f7ff ff73 	bl	800dde4 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800defe:	480e      	ldr	r0, [pc, #56]	@ (800df38 <BinaryReleaseInfo+0x4c>)
 800df00:	4a0e      	ldr	r2, [pc, #56]	@ (800df3c <BinaryReleaseInfo+0x50>)
 800df02:	490c      	ldr	r1, [pc, #48]	@ (800df34 <BinaryReleaseInfo+0x48>)
 800df04:	4b0e      	ldr	r3, [pc, #56]	@ (800df40 <BinaryReleaseInfo+0x54>)
 800df06:	9300      	str	r3, [sp, #0]
 800df08:	0003      	movs	r3, r0
 800df0a:	2002      	movs	r0, #2
 800df0c:	f7ff ff6a 	bl	800dde4 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800df10:	4b0c      	ldr	r3, [pc, #48]	@ (800df44 <BinaryReleaseInfo+0x58>)
 800df12:	4a0d      	ldr	r2, [pc, #52]	@ (800df48 <BinaryReleaseInfo+0x5c>)
 800df14:	4907      	ldr	r1, [pc, #28]	@ (800df34 <BinaryReleaseInfo+0x48>)
 800df16:	2002      	movs	r0, #2
 800df18:	f7ff ff64 	bl	800dde4 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800df1c:	4b0b      	ldr	r3, [pc, #44]	@ (800df4c <BinaryReleaseInfo+0x60>)
 800df1e:	4a0c      	ldr	r2, [pc, #48]	@ (800df50 <BinaryReleaseInfo+0x64>)
 800df20:	4904      	ldr	r1, [pc, #16]	@ (800df34 <BinaryReleaseInfo+0x48>)
 800df22:	2002      	movs	r0, #2
 800df24:	f7ff ff5e 	bl	800dde4 <CreateLine>
}
 800df28:	46c0      	nop			@ (mov r8, r8)
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	46c0      	nop			@ (mov r8, r8)
 800df30:	0802465c 	.word	0x0802465c
 800df34:	08024688 	.word	0x08024688
 800df38:	0802468c 	.word	0x0802468c
 800df3c:	08024698 	.word	0x08024698
 800df40:	080246ac 	.word	0x080246ac
 800df44:	080246b8 	.word	0x080246b8
 800df48:	080246c4 	.word	0x080246c4
 800df4c:	080246cc 	.word	0x080246cc
 800df50:	080246d4 	.word	0x080246d4

0800df54 <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b084      	sub	sp, #16
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	68ba      	ldr	r2, [r7, #8]
 800df64:	68f9      	ldr	r1, [r7, #12]
 800df66:	4803      	ldr	r0, [pc, #12]	@ (800df74 <errorHandler+0x20>)
 800df68:	f011 fc36 	bl	801f7d8 <iprintf>
//    while (true)
//    {
//    }
}
 800df6c:	46c0      	nop			@ (mov r8, r8)
 800df6e:	46bd      	mov	sp, r7
 800df70:	b004      	add	sp, #16
 800df72:	bd80      	pop	{r7, pc}
 800df74:	080246ec 	.word	0x080246ec

0800df78 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800df78:	b590      	push	{r4, r7, lr}
 800df7a:	b083      	sub	sp, #12
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6039      	str	r1, [r7, #0]
 800df80:	0011      	movs	r1, r2
 800df82:	1dfb      	adds	r3, r7, #7
 800df84:	1c02      	adds	r2, r0, #0
 800df86:	701a      	strb	r2, [r3, #0]
 800df88:	1dbb      	adds	r3, r7, #6
 800df8a:	1c0a      	adds	r2, r1, #0
 800df8c:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800df8e:	4b0a      	ldr	r3, [pc, #40]	@ (800dfb8 <ReadRegister+0x40>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d00a      	beq.n	800dfac <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800df96:	4b08      	ldr	r3, [pc, #32]	@ (800dfb8 <ReadRegister+0x40>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	1dba      	adds	r2, r7, #6
 800df9c:	7814      	ldrb	r4, [r2, #0]
 800df9e:	6839      	ldr	r1, [r7, #0]
 800dfa0:	1dfa      	adds	r2, r7, #7
 800dfa2:	7810      	ldrb	r0, [r2, #0]
 800dfa4:	0022      	movs	r2, r4
 800dfa6:	4798      	blx	r3
 800dfa8:	0003      	movs	r3, r0
 800dfaa:	e000      	b.n	800dfae <ReadRegister+0x36>
	}
	return false;
 800dfac:	2300      	movs	r3, #0
}
 800dfae:	0018      	movs	r0, r3
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	b003      	add	sp, #12
 800dfb4:	bd90      	pop	{r4, r7, pc}
 800dfb6:	46c0      	nop			@ (mov r8, r8)
 800dfb8:	20002580 	.word	0x20002580

0800dfbc <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800dfbc:	b590      	push	{r4, r7, lr}
 800dfbe:	b083      	sub	sp, #12
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6039      	str	r1, [r7, #0]
 800dfc4:	0011      	movs	r1, r2
 800dfc6:	1dfb      	adds	r3, r7, #7
 800dfc8:	1c02      	adds	r2, r0, #0
 800dfca:	701a      	strb	r2, [r3, #0]
 800dfcc:	1dbb      	adds	r3, r7, #6
 800dfce:	1c0a      	adds	r2, r1, #0
 800dfd0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800dfd2:	4b0a      	ldr	r3, [pc, #40]	@ (800dffc <WriteRegister+0x40>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d00a      	beq.n	800dff0 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800dfda:	4b08      	ldr	r3, [pc, #32]	@ (800dffc <WriteRegister+0x40>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	1dba      	adds	r2, r7, #6
 800dfe0:	7814      	ldrb	r4, [r2, #0]
 800dfe2:	6839      	ldr	r1, [r7, #0]
 800dfe4:	1dfa      	adds	r2, r7, #7
 800dfe6:	7810      	ldrb	r0, [r2, #0]
 800dfe8:	0022      	movs	r2, r4
 800dfea:	4798      	blx	r3
 800dfec:	0003      	movs	r3, r0
 800dfee:	e000      	b.n	800dff2 <WriteRegister+0x36>
  }
  return false;
 800dff0:	2300      	movs	r3, #0
}
 800dff2:	0018      	movs	r0, r3
 800dff4:	46bd      	mov	sp, r7
 800dff6:	b003      	add	sp, #12
 800dff8:	bd90      	pop	{r4, r7, pc}
 800dffa:	46c0      	nop			@ (mov r8, r8)
 800dffc:	20002584 	.word	0x20002584

0800e000 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	000a      	movs	r2, r1
 800e00a:	1cfb      	adds	r3, r7, #3
 800e00c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800e00e:	230f      	movs	r3, #15
 800e010:	18fb      	adds	r3, r7, r3
 800e012:	22ff      	movs	r2, #255	@ 0xff
 800e014:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800e016:	230e      	movs	r3, #14
 800e018:	18fb      	adds	r3, r7, r3
 800e01a:	2200      	movs	r2, #0
 800e01c:	701a      	strb	r2, [r3, #0]
 800e01e:	e037      	b.n	800e090 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800e020:	230e      	movs	r3, #14
 800e022:	18fb      	adds	r3, r7, r3
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	18d3      	adds	r3, r2, r3
 800e02a:	7819      	ldrb	r1, [r3, #0]
 800e02c:	220f      	movs	r2, #15
 800e02e:	18bb      	adds	r3, r7, r2
 800e030:	18ba      	adds	r2, r7, r2
 800e032:	7812      	ldrb	r2, [r2, #0]
 800e034:	404a      	eors	r2, r1
 800e036:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800e038:	230d      	movs	r3, #13
 800e03a:	18fb      	adds	r3, r7, r3
 800e03c:	2200      	movs	r2, #0
 800e03e:	701a      	strb	r2, [r3, #0]
 800e040:	e01b      	b.n	800e07a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800e042:	210f      	movs	r1, #15
 800e044:	187b      	adds	r3, r7, r1
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	b25b      	sxtb	r3, r3
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	da09      	bge.n	800e062 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800e04e:	187b      	adds	r3, r7, r1
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	005b      	lsls	r3, r3, #1
 800e054:	b25b      	sxtb	r3, r3
 800e056:	2231      	movs	r2, #49	@ 0x31
 800e058:	4053      	eors	r3, r2
 800e05a:	b25a      	sxtb	r2, r3
 800e05c:	187b      	adds	r3, r7, r1
 800e05e:	701a      	strb	r2, [r3, #0]
 800e060:	e005      	b.n	800e06e <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800e062:	230f      	movs	r3, #15
 800e064:	18fa      	adds	r2, r7, r3
 800e066:	18fb      	adds	r3, r7, r3
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	18db      	adds	r3, r3, r3
 800e06c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800e06e:	210d      	movs	r1, #13
 800e070:	187b      	adds	r3, r7, r1
 800e072:	781a      	ldrb	r2, [r3, #0]
 800e074:	187b      	adds	r3, r7, r1
 800e076:	3201      	adds	r2, #1
 800e078:	701a      	strb	r2, [r3, #0]
 800e07a:	230d      	movs	r3, #13
 800e07c:	18fb      	adds	r3, r7, r3
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	2b07      	cmp	r3, #7
 800e082:	d9de      	bls.n	800e042 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800e084:	210e      	movs	r1, #14
 800e086:	187b      	adds	r3, r7, r1
 800e088:	781a      	ldrb	r2, [r3, #0]
 800e08a:	187b      	adds	r3, r7, r1
 800e08c:	3201      	adds	r2, #1
 800e08e:	701a      	strb	r2, [r3, #0]
 800e090:	230e      	movs	r3, #14
 800e092:	18fa      	adds	r2, r7, r3
 800e094:	1cfb      	adds	r3, r7, #3
 800e096:	7812      	ldrb	r2, [r2, #0]
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d3c0      	bcc.n	800e020 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800e09e:	230f      	movs	r3, #15
 800e0a0:	18fb      	adds	r3, r7, r3
 800e0a2:	781b      	ldrb	r3, [r3, #0]
}
 800e0a4:	0018      	movs	r0, r3
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	b004      	add	sp, #16
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800e0b6:	4b0a      	ldr	r3, [pc, #40]	@ (800e0e0 <HIDS_Init+0x34>)
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800e0bc:	4b09      	ldr	r3, [pc, #36]	@ (800e0e4 <HIDS_Init+0x38>)
 800e0be:	683a      	ldr	r2, [r7, #0]
 800e0c0:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800e0c2:	4b09      	ldr	r3, [pc, #36]	@ (800e0e8 <HIDS_Init+0x3c>)
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	0018      	movs	r0, r3
 800e0c8:	f000 f840 	bl	800e14c <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800e0cc:	4b07      	ldr	r3, [pc, #28]	@ (800e0ec <HIDS_Init+0x40>)
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	0018      	movs	r0, r3
 800e0d2:	f000 f82b 	bl	800e12c <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800e0d6:	46c0      	nop			@ (mov r8, r8)
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	b002      	add	sp, #8
 800e0dc:	bd80      	pop	{r7, pc}
 800e0de:	46c0      	nop			@ (mov r8, r8)
 800e0e0:	20002580 	.word	0x20002580
 800e0e4:	20002584 	.word	0x20002584
 800e0e8:	200000d2 	.word	0x200000d2
 800e0ec:	200000d1 	.word	0x200000d1

0800e0f0 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800e0f4:	f000 facc 	bl	800e690 <HAL_GetTick>
 800e0f8:	0002      	movs	r2, r0
 800e0fa:	4b08      	ldr	r3, [pc, #32]	@ (800e11c <HIDS_StartMeasurement+0x2c>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	18d2      	adds	r2, r2, r3
 800e100:	4b07      	ldr	r3, [pc, #28]	@ (800e120 <HIDS_StartMeasurement+0x30>)
 800e102:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800e104:	4b07      	ldr	r3, [pc, #28]	@ (800e124 <HIDS_StartMeasurement+0x34>)
 800e106:	2201      	movs	r2, #1
 800e108:	0019      	movs	r1, r3
 800e10a:	2044      	movs	r0, #68	@ 0x44
 800e10c:	f7ff ff56 	bl	800dfbc <WriteRegister>
  MeasurementDone = false;
 800e110:	4b05      	ldr	r3, [pc, #20]	@ (800e128 <HIDS_StartMeasurement+0x38>)
 800e112:	2200      	movs	r2, #0
 800e114:	701a      	strb	r2, [r3, #0]
}
 800e116:	46c0      	nop			@ (mov r8, r8)
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}
 800e11c:	200000d8 	.word	0x200000d8
 800e120:	200000d4 	.word	0x200000d4
 800e124:	200000d2 	.word	0x200000d2
 800e128:	20002596 	.word	0x20002596

0800e12c <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
 800e132:	0002      	movs	r2, r0
 800e134:	1dfb      	adds	r3, r7, #7
 800e136:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800e138:	4b03      	ldr	r3, [pc, #12]	@ (800e148 <HIDS_SetHeaterMode+0x1c>)
 800e13a:	1dfa      	adds	r2, r7, #7
 800e13c:	7812      	ldrb	r2, [r2, #0]
 800e13e:	701a      	strb	r2, [r3, #0]
}
 800e140:	46c0      	nop			@ (mov r8, r8)
 800e142:	46bd      	mov	sp, r7
 800e144:	b002      	add	sp, #8
 800e146:	bd80      	pop	{r7, pc}
 800e148:	200000d1 	.word	0x200000d1

0800e14c <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
 800e152:	0002      	movs	r2, r0
 800e154:	1dfb      	adds	r3, r7, #7
 800e156:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800e158:	4b03      	ldr	r3, [pc, #12]	@ (800e168 <HIDS_SetMeasurementMode+0x1c>)
 800e15a:	1dfa      	adds	r2, r7, #7
 800e15c:	7812      	ldrb	r2, [r2, #0]
 800e15e:	701a      	strb	r2, [r3, #0]
}
 800e160:	46c0      	nop			@ (mov r8, r8)
 800e162:	46bd      	mov	sp, r7
 800e164:	b002      	add	sp, #8
 800e166:	bd80      	pop	{r7, pc}
 800e168:	200000d2 	.word	0x200000d2

0800e16c <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800e174:	f000 fa8c 	bl	800e690 <HAL_GetTick>
 800e178:	0002      	movs	r2, r0
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	18d2      	adds	r2, r2, r3
 800e17e:	4b03      	ldr	r3, [pc, #12]	@ (800e18c <setHIDSTimeStamp+0x20>)
 800e180:	601a      	str	r2, [r3, #0]
}
 800e182:	46c0      	nop			@ (mov r8, r8)
 800e184:	46bd      	mov	sp, r7
 800e186:	b002      	add	sp, #8
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	46c0      	nop			@ (mov r8, r8)
 800e18c:	20002598 	.word	0x20002598

0800e190 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800e190:	b590      	push	{r4, r7, lr}
 800e192:	b085      	sub	sp, #20
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	781a      	ldrb	r2, [r3, #0]
 800e19c:	210c      	movs	r1, #12
 800e19e:	187b      	adds	r3, r7, r1
 800e1a0:	701a      	strb	r2, [r3, #0]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	785a      	ldrb	r2, [r3, #1]
 800e1a6:	187b      	adds	r3, r7, r1
 800e1a8:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800e1aa:	240f      	movs	r4, #15
 800e1ac:	193b      	adds	r3, r7, r4
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	7892      	ldrb	r2, [r2, #2]
 800e1b2:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800e1b4:	187b      	adds	r3, r7, r1
 800e1b6:	2102      	movs	r1, #2
 800e1b8:	0018      	movs	r0, r3
 800e1ba:	f7ff ff21 	bl	800e000 <CalculateCRC>
 800e1be:	0003      	movs	r3, r0
 800e1c0:	001a      	movs	r2, r3
 800e1c2:	193b      	adds	r3, r7, r4
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d007      	beq.n	800e1da <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800e1ca:	4a1a      	ldr	r2, [pc, #104]	@ (800e234 <CheckCRC+0xa4>)
 800e1cc:	4b1a      	ldr	r3, [pc, #104]	@ (800e238 <CheckCRC+0xa8>)
 800e1ce:	0019      	movs	r1, r3
 800e1d0:	2001      	movs	r0, #1
 800e1d2:	f7ff fe07 	bl	800dde4 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	e027      	b.n	800e22a <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	78da      	ldrb	r2, [r3, #3]
 800e1de:	2108      	movs	r1, #8
 800e1e0:	187b      	adds	r3, r7, r1
 800e1e2:	701a      	strb	r2, [r3, #0]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	791a      	ldrb	r2, [r3, #4]
 800e1e8:	187b      	adds	r3, r7, r1
 800e1ea:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800e1ec:	240e      	movs	r4, #14
 800e1ee:	193b      	adds	r3, r7, r4
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	7952      	ldrb	r2, [r2, #5]
 800e1f4:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800e1f6:	187b      	adds	r3, r7, r1
 800e1f8:	2102      	movs	r1, #2
 800e1fa:	0018      	movs	r0, r3
 800e1fc:	f7ff ff00 	bl	800e000 <CalculateCRC>
 800e200:	0003      	movs	r3, r0
 800e202:	001a      	movs	r2, r3
 800e204:	193b      	adds	r3, r7, r4
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	4293      	cmp	r3, r2
 800e20a:	d00d      	beq.n	800e228 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800e20c:	4a0b      	ldr	r2, [pc, #44]	@ (800e23c <CheckCRC+0xac>)
 800e20e:	4b0a      	ldr	r3, [pc, #40]	@ (800e238 <CheckCRC+0xa8>)
 800e210:	0019      	movs	r1, r3
 800e212:	2001      	movs	r0, #1
 800e214:	f7ff fde6 	bl	800dde4 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800e218:	4a09      	ldr	r2, [pc, #36]	@ (800e240 <CheckCRC+0xb0>)
 800e21a:	4b0a      	ldr	r3, [pc, #40]	@ (800e244 <CheckCRC+0xb4>)
 800e21c:	217c      	movs	r1, #124	@ 0x7c
 800e21e:	0018      	movs	r0, r3
 800e220:	f7ff fe98 	bl	800df54 <errorHandler>
		return false;
 800e224:	2300      	movs	r3, #0
 800e226:	e000      	b.n	800e22a <CheckCRC+0x9a>
	}
	return true;
 800e228:	2301      	movs	r3, #1
}
 800e22a:	0018      	movs	r0, r3
 800e22c:	46bd      	mov	sp, r7
 800e22e:	b005      	add	sp, #20
 800e230:	bd90      	pop	{r4, r7, pc}
 800e232:	46c0      	nop			@ (mov r8, r8)
 800e234:	08024738 	.word	0x08024738
 800e238:	08024760 	.word	0x08024760
 800e23c:	08024764 	.word	0x08024764
 800e240:	08024790 	.word	0x08024790
 800e244:	08024d28 	.word	0x08024d28

0800e248 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800e24e:	1dbb      	adds	r3, r7, #6
 800e250:	2289      	movs	r2, #137	@ 0x89
 800e252:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800e254:	1dbb      	adds	r3, r7, #6
 800e256:	2201      	movs	r2, #1
 800e258:	0019      	movs	r1, r3
 800e25a:	2044      	movs	r0, #68	@ 0x44
 800e25c:	f7ff feae 	bl	800dfbc <WriteRegister>
	HAL_Delay(30);
 800e260:	201e      	movs	r0, #30
 800e262:	f000 fa1f 	bl	800e6a4 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800e266:	4b14      	ldr	r3, [pc, #80]	@ (800e2b8 <HIDS_DeviceConnected+0x70>)
 800e268:	2206      	movs	r2, #6
 800e26a:	0019      	movs	r1, r3
 800e26c:	2044      	movs	r0, #68	@ 0x44
 800e26e:	f7ff fe83 	bl	800df78 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800e272:	1dfb      	adds	r3, r7, #7
 800e274:	2200      	movs	r2, #0
 800e276:	701a      	strb	r2, [r3, #0]
 800e278:	e011      	b.n	800e29e <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800e27a:	1dfb      	adds	r3, r7, #7
 800e27c:	7818      	ldrb	r0, [r3, #0]
 800e27e:	1dfb      	adds	r3, r7, #7
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	4a0d      	ldr	r2, [pc, #52]	@ (800e2b8 <HIDS_DeviceConnected+0x70>)
 800e284:	5cd3      	ldrb	r3, [r2, r3]
 800e286:	4a0d      	ldr	r2, [pc, #52]	@ (800e2bc <HIDS_DeviceConnected+0x74>)
 800e288:	490d      	ldr	r1, [pc, #52]	@ (800e2c0 <HIDS_DeviceConnected+0x78>)
 800e28a:	9300      	str	r3, [sp, #0]
 800e28c:	0003      	movs	r3, r0
 800e28e:	2002      	movs	r0, #2
 800e290:	f7ff fda8 	bl	800dde4 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800e294:	1dfb      	adds	r3, r7, #7
 800e296:	781a      	ldrb	r2, [r3, #0]
 800e298:	1dfb      	adds	r3, r7, #7
 800e29a:	3201      	adds	r2, #1
 800e29c:	701a      	strb	r2, [r3, #0]
 800e29e:	1dfb      	adds	r3, r7, #7
 800e2a0:	781b      	ldrb	r3, [r3, #0]
 800e2a2:	2b05      	cmp	r3, #5
 800e2a4:	d9e9      	bls.n	800e27a <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800e2a6:	4b04      	ldr	r3, [pc, #16]	@ (800e2b8 <HIDS_DeviceConnected+0x70>)
 800e2a8:	0018      	movs	r0, r3
 800e2aa:	f7ff ff71 	bl	800e190 <CheckCRC>
 800e2ae:	0003      	movs	r3, r0
}
 800e2b0:	0018      	movs	r0, r3
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	b002      	add	sp, #8
 800e2b6:	bd80      	pop	{r7, pc}
 800e2b8:	20002588 	.word	0x20002588
 800e2bc:	080247a8 	.word	0x080247a8
 800e2c0:	08024734 	.word	0x08024734

0800e2c4 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800e2c8:	4b04      	ldr	r3, [pc, #16]	@ (800e2dc <HIDS_MeasurementReady+0x18>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	0018      	movs	r0, r3
 800e2ce:	f7ff fd33 	bl	800dd38 <TimestampIsReached>
 800e2d2:	0003      	movs	r3, r0
}
 800e2d4:	0018      	movs	r0, r3
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
 800e2da:	46c0      	nop			@ (mov r8, r8)
 800e2dc:	200000d4 	.word	0x200000d4

0800e2e0 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b086      	sub	sp, #24
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800e2ea:	4b4c      	ldr	r3, [pc, #304]	@ (800e41c <HIDS_GetMeasurementValues+0x13c>)
 800e2ec:	781b      	ldrb	r3, [r3, #0]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d001      	beq.n	800e2f6 <HIDS_GetMeasurementValues+0x16>
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	e08d      	b.n	800e412 <HIDS_GetMeasurementValues+0x132>
  if(!HIDS_MeasurementReady()) return false;
 800e2f6:	f7ff ffe5 	bl	800e2c4 <HIDS_MeasurementReady>
 800e2fa:	0003      	movs	r3, r0
 800e2fc:	001a      	movs	r2, r3
 800e2fe:	2301      	movs	r3, #1
 800e300:	4053      	eors	r3, r2
 800e302:	b2db      	uxtb	r3, r3
 800e304:	2b00      	cmp	r3, #0
 800e306:	d001      	beq.n	800e30c <HIDS_GetMeasurementValues+0x2c>
 800e308:	2300      	movs	r3, #0
 800e30a:	e082      	b.n	800e412 <HIDS_GetMeasurementValues+0x132>
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800e30c:	4b44      	ldr	r3, [pc, #272]	@ (800e420 <HIDS_GetMeasurementValues+0x140>)
 800e30e:	2206      	movs	r2, #6
 800e310:	0019      	movs	r1, r3
 800e312:	2044      	movs	r0, #68	@ 0x44
 800e314:	f7ff fe30 	bl	800df78 <ReadRegister>
 800e318:	0003      	movs	r3, r0
 800e31a:	001a      	movs	r2, r3
 800e31c:	2301      	movs	r3, #1
 800e31e:	4053      	eors	r3, r2
 800e320:	b2db      	uxtb	r3, r3
 800e322:	2b00      	cmp	r3, #0
 800e324:	d005      	beq.n	800e332 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800e326:	4a3f      	ldr	r2, [pc, #252]	@ (800e424 <HIDS_GetMeasurementValues+0x144>)
 800e328:	4b3f      	ldr	r3, [pc, #252]	@ (800e428 <HIDS_GetMeasurementValues+0x148>)
 800e32a:	0019      	movs	r1, r3
 800e32c:	2001      	movs	r0, #1
 800e32e:	f7ff fd59 	bl	800dde4 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800e332:	4b3b      	ldr	r3, [pc, #236]	@ (800e420 <HIDS_GetMeasurementValues+0x140>)
 800e334:	0018      	movs	r0, r3
 800e336:	f7ff ff2b 	bl	800e190 <CheckCRC>
 800e33a:	0003      	movs	r3, r0
 800e33c:	001a      	movs	r2, r3
 800e33e:	2301      	movs	r3, #1
 800e340:	4053      	eors	r3, r2
 800e342:	b2db      	uxtb	r3, r3
 800e344:	2b00      	cmp	r3, #0
 800e346:	d011      	beq.n	800e36c <HIDS_GetMeasurementValues+0x8c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800e348:	2317      	movs	r3, #23
 800e34a:	18fb      	adds	r3, r7, r3
 800e34c:	2200      	movs	r2, #0
 800e34e:	701a      	strb	r2, [r3, #0]
 800e350:	e005      	b.n	800e35e <HIDS_GetMeasurementValues+0x7e>
 800e352:	2117      	movs	r1, #23
 800e354:	187b      	adds	r3, r7, r1
 800e356:	781a      	ldrb	r2, [r3, #0]
 800e358:	187b      	adds	r3, r7, r1
 800e35a:	3201      	adds	r2, #1
 800e35c:	701a      	strb	r2, [r3, #0]
 800e35e:	2317      	movs	r3, #23
 800e360:	18fb      	adds	r3, r7, r3
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	2b05      	cmp	r3, #5
 800e366:	d9f4      	bls.n	800e352 <HIDS_GetMeasurementValues+0x72>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800e368:	2300      	movs	r3, #0
 800e36a:	e052      	b.n	800e412 <HIDS_GetMeasurementValues+0x132>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800e36c:	4b2c      	ldr	r3, [pc, #176]	@ (800e420 <HIDS_GetMeasurementValues+0x140>)
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	021b      	lsls	r3, r3, #8
 800e372:	4a2b      	ldr	r2, [pc, #172]	@ (800e420 <HIDS_GetMeasurementValues+0x140>)
 800e374:	7852      	ldrb	r2, [r2, #1]
 800e376:	4313      	orrs	r3, r2
 800e378:	22af      	movs	r2, #175	@ 0xaf
 800e37a:	4353      	muls	r3, r2
 800e37c:	0018      	movs	r0, r3
 800e37e:	f7f5 f81f 	bl	80033c0 <__aeabi_i2d>
 800e382:	2200      	movs	r2, #0
 800e384:	4b29      	ldr	r3, [pc, #164]	@ (800e42c <HIDS_GetMeasurementValues+0x14c>)
 800e386:	f7f3 fd15 	bl	8001db4 <__aeabi_ddiv>
 800e38a:	0002      	movs	r2, r0
 800e38c:	000b      	movs	r3, r1
 800e38e:	0010      	movs	r0, r2
 800e390:	0019      	movs	r1, r3
 800e392:	f7f5 f8af 	bl	80034f4 <__aeabi_d2f>
 800e396:	1c03      	adds	r3, r0, #0
 800e398:	613b      	str	r3, [r7, #16]
	currentTemperature -= 45;
 800e39a:	4925      	ldr	r1, [pc, #148]	@ (800e430 <HIDS_GetMeasurementValues+0x150>)
 800e39c:	6938      	ldr	r0, [r7, #16]
 800e39e:	f7f2 ff3d 	bl	800121c <__aeabi_fsub>
 800e3a2:	1c03      	adds	r3, r0, #0
 800e3a4:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800e3a6:	4b1e      	ldr	r3, [pc, #120]	@ (800e420 <HIDS_GetMeasurementValues+0x140>)
 800e3a8:	78db      	ldrb	r3, [r3, #3]
 800e3aa:	021b      	lsls	r3, r3, #8
 800e3ac:	4a1c      	ldr	r2, [pc, #112]	@ (800e420 <HIDS_GetMeasurementValues+0x140>)
 800e3ae:	7912      	ldrb	r2, [r2, #4]
 800e3b0:	431a      	orrs	r2, r3
 800e3b2:	0013      	movs	r3, r2
 800e3b4:	015b      	lsls	r3, r3, #5
 800e3b6:	1a9b      	subs	r3, r3, r2
 800e3b8:	009b      	lsls	r3, r3, #2
 800e3ba:	189b      	adds	r3, r3, r2
 800e3bc:	0018      	movs	r0, r3
 800e3be:	f7f4 ffff 	bl	80033c0 <__aeabi_i2d>
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	4b19      	ldr	r3, [pc, #100]	@ (800e42c <HIDS_GetMeasurementValues+0x14c>)
 800e3c6:	f7f3 fcf5 	bl	8001db4 <__aeabi_ddiv>
 800e3ca:	0002      	movs	r2, r0
 800e3cc:	000b      	movs	r3, r1
 800e3ce:	0010      	movs	r0, r2
 800e3d0:	0019      	movs	r1, r3
 800e3d2:	f7f5 f88f 	bl	80034f4 <__aeabi_d2f>
 800e3d6:	1c03      	adds	r3, r0, #0
 800e3d8:	60fb      	str	r3, [r7, #12]
	currentHumidity -= 6;
 800e3da:	4916      	ldr	r1, [pc, #88]	@ (800e434 <HIDS_GetMeasurementValues+0x154>)
 800e3dc:	68f8      	ldr	r0, [r7, #12]
 800e3de:	f7f2 ff1d 	bl	800121c <__aeabi_fsub>
 800e3e2:	1c03      	adds	r3, r0, #0
 800e3e4:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	693a      	ldr	r2, [r7, #16]
 800e3ea:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	68fa      	ldr	r2, [r7, #12]
 800e3f0:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	0011      	movs	r1, r2
 800e3f8:	0018      	movs	r0, r3
 800e3fa:	f7fd fb2f 	bl	800ba5c <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800e3fe:	68fa      	ldr	r2, [r7, #12]
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	1c11      	adds	r1, r2, #0
 800e404:	1c18      	adds	r0, r3, #0
 800e406:	f7f5 fa65 	bl	80038d4 <ESP_GetHT>

//   measurements = 0;
   MeasurementDone = true;
 800e40a:	4b04      	ldr	r3, [pc, #16]	@ (800e41c <HIDS_GetMeasurementValues+0x13c>)
 800e40c:	2201      	movs	r2, #1
 800e40e:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800e410:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800e412:	0018      	movs	r0, r3
 800e414:	46bd      	mov	sp, r7
 800e416:	b006      	add	sp, #24
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	46c0      	nop			@ (mov r8, r8)
 800e41c:	20002596 	.word	0x20002596
 800e420:	20002590 	.word	0x20002590
 800e424:	080247c8 	.word	0x080247c8
 800e428:	08024760 	.word	0x08024760
 800e42c:	40efffe0 	.word	0x40efffe0
 800e430:	42340000 	.word	0x42340000
 800e434:	40c00000 	.word	0x40c00000

0800e438 <ResetHIDSresults>:
void ResetHIDSresults() {
 800e438:	b580      	push	{r7, lr}
 800e43a:	af00      	add	r7, sp, #0
  humid = 0.0;
 800e43c:	4b04      	ldr	r3, [pc, #16]	@ (800e450 <ResetHIDSresults+0x18>)
 800e43e:	2200      	movs	r2, #0
 800e440:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800e442:	4b04      	ldr	r3, [pc, #16]	@ (800e454 <ResetHIDSresults+0x1c>)
 800e444:	2200      	movs	r2, #0
 800e446:	601a      	str	r2, [r3, #0]
}
 800e448:	46c0      	nop			@ (mov r8, r8)
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	46c0      	nop			@ (mov r8, r8)
 800e450:	20002578 	.word	0x20002578
 800e454:	2000257c 	.word	0x2000257c

0800e458 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800e458:	b5b0      	push	{r4, r5, r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800e45e:	4b3b      	ldr	r3, [pc, #236]	@ (800e54c <HIDS_Upkeep+0xf4>)
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	2b06      	cmp	r3, #6
 800e464:	d865      	bhi.n	800e532 <HIDS_Upkeep+0xda>
 800e466:	009a      	lsls	r2, r3, #2
 800e468:	4b39      	ldr	r3, [pc, #228]	@ (800e550 <HIDS_Upkeep+0xf8>)
 800e46a:	18d3      	adds	r3, r2, r3
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800e470:	4a38      	ldr	r2, [pc, #224]	@ (800e554 <HIDS_Upkeep+0xfc>)
 800e472:	4b39      	ldr	r3, [pc, #228]	@ (800e558 <HIDS_Upkeep+0x100>)
 800e474:	0019      	movs	r1, r3
 800e476:	2003      	movs	r0, #3
 800e478:	f7ff fcb4 	bl	800dde4 <CreateLine>
      break;
 800e47c:	e060      	b.n	800e540 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_INIT:
//      Debug("entered HIDS_STATE_INIT");
      ResetHIDSresults();
 800e47e:	f7ff ffdb 	bl	800e438 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800e482:	4b32      	ldr	r3, [pc, #200]	@ (800e54c <HIDS_Upkeep+0xf4>)
 800e484:	2201      	movs	r2, #1
 800e486:	701a      	strb	r2, [r3, #0]
      break;
 800e488:	e05a      	b.n	800e540 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_START_MEASUREMENTS:
//      Debug("entered HIDS_STATE_START_MEASUREMENTS");
      SetMeasurementIndicator();
 800e48a:	f7fe fcc1 	bl	800ce10 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800e48e:	f7ff fe2f 	bl	800e0f0 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800e492:	4b2e      	ldr	r3, [pc, #184]	@ (800e54c <HIDS_Upkeep+0xf4>)
 800e494:	2202      	movs	r2, #2
 800e496:	701a      	strb	r2, [r3, #0]
      break;
 800e498:	e052      	b.n	800e540 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
//      Debug("entered HIDS_STATE_WAIT_FOR_COMPLETION");
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800e49a:	4a30      	ldr	r2, [pc, #192]	@ (800e55c <HIDS_Upkeep+0x104>)
 800e49c:	4b30      	ldr	r3, [pc, #192]	@ (800e560 <HIDS_Upkeep+0x108>)
 800e49e:	0011      	movs	r1, r2
 800e4a0:	0018      	movs	r0, r3
 800e4a2:	f7ff ff1d 	bl	800e2e0 <HIDS_GetMeasurementValues>
 800e4a6:	1e03      	subs	r3, r0, #0
 800e4a8:	d047      	beq.n	800e53a <HIDS_Upkeep+0xe2>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800e4aa:	4b28      	ldr	r3, [pc, #160]	@ (800e54c <HIDS_Upkeep+0xf4>)
 800e4ac:	2203      	movs	r2, #3
 800e4ae:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e4b0:	e043      	b.n	800e53a <HIDS_Upkeep+0xe2>

    case HIDS_STATE_PROCESS_RESULTS:
//      Debug("entered HIDS_STATE_PROCESS_RESULTS");
//      Debug("Processing results.");
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800e4b2:	4b2b      	ldr	r3, [pc, #172]	@ (800e560 <HIDS_Upkeep+0x108>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	1c18      	adds	r0, r3, #0
 800e4b8:	f7f4 ffd4 	bl	8003464 <__aeabi_f2d>
 800e4bc:	0004      	movs	r4, r0
 800e4be:	000d      	movs	r5, r1
 800e4c0:	4b26      	ldr	r3, [pc, #152]	@ (800e55c <HIDS_Upkeep+0x104>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	1c18      	adds	r0, r3, #0
 800e4c6:	f7f4 ffcd 	bl	8003464 <__aeabi_f2d>
 800e4ca:	0002      	movs	r2, r0
 800e4cc:	000b      	movs	r3, r1
 800e4ce:	4825      	ldr	r0, [pc, #148]	@ (800e564 <HIDS_Upkeep+0x10c>)
 800e4d0:	4921      	ldr	r1, [pc, #132]	@ (800e558 <HIDS_Upkeep+0x100>)
 800e4d2:	9202      	str	r2, [sp, #8]
 800e4d4:	9303      	str	r3, [sp, #12]
 800e4d6:	9400      	str	r4, [sp, #0]
 800e4d8:	9501      	str	r5, [sp, #4]
 800e4da:	0002      	movs	r2, r0
 800e4dc:	2003      	movs	r0, #3
 800e4de:	f7ff fc81 	bl	800dde4 <CreateLine>
      setHIDS(temp, humid);
 800e4e2:	4b1e      	ldr	r3, [pc, #120]	@ (800e55c <HIDS_Upkeep+0x104>)
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	4b1e      	ldr	r3, [pc, #120]	@ (800e560 <HIDS_Upkeep+0x108>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	1c19      	adds	r1, r3, #0
 800e4ec:	1c10      	adds	r0, r2, #0
 800e4ee:	f7f5 fa05 	bl	80038fc <setHIDS>
      ResetMeasurementIndicator();
 800e4f2:	f7fe fca5 	bl	800ce40 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + (powerCheck() == USB_PLUGGED_IN?10000:1000);  // about every ten seconds when power is plugged
 800e4f6:	f000 f8cb 	bl	800e690 <HAL_GetTick>
 800e4fa:	0004      	movs	r4, r0
 800e4fc:	f7fe fd66 	bl	800cfcc <powerCheck>
 800e500:	0003      	movs	r3, r0
 800e502:	2b01      	cmp	r3, #1
 800e504:	d101      	bne.n	800e50a <HIDS_Upkeep+0xb2>
 800e506:	4b18      	ldr	r3, [pc, #96]	@ (800e568 <HIDS_Upkeep+0x110>)
 800e508:	e001      	b.n	800e50e <HIDS_Upkeep+0xb6>
 800e50a:	23fa      	movs	r3, #250	@ 0xfa
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	191a      	adds	r2, r3, r4
 800e510:	4b16      	ldr	r3, [pc, #88]	@ (800e56c <HIDS_Upkeep+0x114>)
 800e512:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800e514:	4b0d      	ldr	r3, [pc, #52]	@ (800e54c <HIDS_Upkeep+0xf4>)
 800e516:	2206      	movs	r2, #6
 800e518:	701a      	strb	r2, [r3, #0]
      break;
 800e51a:	e011      	b.n	800e540 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT:
//      Debug("entered HIDS_STATE_WAIT");
      if(TimestampIsReached(HIDSTimeStamp)) {
 800e51c:	4b13      	ldr	r3, [pc, #76]	@ (800e56c <HIDS_Upkeep+0x114>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	0018      	movs	r0, r3
 800e522:	f7ff fc09 	bl	800dd38 <TimestampIsReached>
 800e526:	1e03      	subs	r3, r0, #0
 800e528:	d009      	beq.n	800e53e <HIDS_Upkeep+0xe6>
        HIDSState = HIDS_STATE_INIT;
 800e52a:	4b08      	ldr	r3, [pc, #32]	@ (800e54c <HIDS_Upkeep+0xf4>)
 800e52c:	2200      	movs	r2, #0
 800e52e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e530:	e005      	b.n	800e53e <HIDS_Upkeep+0xe6>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800e532:	4b06      	ldr	r3, [pc, #24]	@ (800e54c <HIDS_Upkeep+0xf4>)
 800e534:	2200      	movs	r2, #0
 800e536:	701a      	strb	r2, [r3, #0]
      break;
 800e538:	e002      	b.n	800e540 <HIDS_Upkeep+0xe8>
      break;
 800e53a:	46c0      	nop			@ (mov r8, r8)
 800e53c:	e000      	b.n	800e540 <HIDS_Upkeep+0xe8>
      break;
 800e53e:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800e540:	4b02      	ldr	r3, [pc, #8]	@ (800e54c <HIDS_Upkeep+0xf4>)
 800e542:	781b      	ldrb	r3, [r3, #0]
}
 800e544:	0018      	movs	r0, r3
 800e546:	46bd      	mov	sp, r7
 800e548:	bdb0      	pop	{r4, r5, r7, pc}
 800e54a:	46c0      	nop			@ (mov r8, r8)
 800e54c:	2000259c 	.word	0x2000259c
 800e550:	08024d0c 	.word	0x08024d0c
 800e554:	080247fc 	.word	0x080247fc
 800e558:	08024830 	.word	0x08024830
 800e55c:	2000257c 	.word	0x2000257c
 800e560:	20002578 	.word	0x20002578
 800e564:	08024834 	.word	0x08024834
 800e568:	00002710 	.word	0x00002710
 800e56c:	20002598 	.word	0x20002598

0800e570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800e570:	480d      	ldr	r0, [pc, #52]	@ (800e5a8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800e572:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800e574:	f7ff f836 	bl	800d5e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e578:	480c      	ldr	r0, [pc, #48]	@ (800e5ac <LoopForever+0x6>)
  ldr r1, =_edata
 800e57a:	490d      	ldr	r1, [pc, #52]	@ (800e5b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800e57c:	4a0d      	ldr	r2, [pc, #52]	@ (800e5b4 <LoopForever+0xe>)
  movs r3, #0
 800e57e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e580:	e002      	b.n	800e588 <LoopCopyDataInit>

0800e582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e586:	3304      	adds	r3, #4

0800e588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e58a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e58c:	d3f9      	bcc.n	800e582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e58e:	4a0a      	ldr	r2, [pc, #40]	@ (800e5b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800e590:	4c0a      	ldr	r4, [pc, #40]	@ (800e5bc <LoopForever+0x16>)
  movs r3, #0
 800e592:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e594:	e001      	b.n	800e59a <LoopFillZerobss>

0800e596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e598:	3204      	adds	r2, #4

0800e59a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e59a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e59c:	d3fb      	bcc.n	800e596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800e59e:	f011 fb79 	bl	801fc94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e5a2:	f7f9 fadf 	bl	8007b64 <main>

0800e5a6 <LoopForever>:

LoopForever:
    b LoopForever
 800e5a6:	e7fe      	b.n	800e5a6 <LoopForever>
   ldr   r0, =_estack
 800e5a8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800e5ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e5b0:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 800e5b4:	080256a8 	.word	0x080256a8
  ldr r2, =_sbss
 800e5b8:	20000424 	.word	0x20000424
  ldr r4, =_ebss
 800e5bc:	200039a4 	.word	0x200039a4

0800e5c0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e5c0:	e7fe      	b.n	800e5c0 <ADC1_COMP_IRQHandler>
	...

0800e5c4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800e5ca:	1dfb      	adds	r3, r7, #7
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800e5d0:	4b0b      	ldr	r3, [pc, #44]	@ (800e600 <HAL_Init+0x3c>)
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	4b0a      	ldr	r3, [pc, #40]	@ (800e600 <HAL_Init+0x3c>)
 800e5d6:	2140      	movs	r1, #64	@ 0x40
 800e5d8:	430a      	orrs	r2, r1
 800e5da:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800e5dc:	2003      	movs	r0, #3
 800e5de:	f000 f811 	bl	800e604 <HAL_InitTick>
 800e5e2:	1e03      	subs	r3, r0, #0
 800e5e4:	d003      	beq.n	800e5ee <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800e5e6:	1dfb      	adds	r3, r7, #7
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	701a      	strb	r2, [r3, #0]
 800e5ec:	e001      	b.n	800e5f2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800e5ee:	f7fe fead 	bl	800d34c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800e5f2:	1dfb      	adds	r3, r7, #7
 800e5f4:	781b      	ldrb	r3, [r3, #0]
}
 800e5f6:	0018      	movs	r0, r3
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	b002      	add	sp, #8
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	46c0      	nop			@ (mov r8, r8)
 800e600:	40022000 	.word	0x40022000

0800e604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e604:	b590      	push	{r4, r7, lr}
 800e606:	b083      	sub	sp, #12
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e60c:	4b14      	ldr	r3, [pc, #80]	@ (800e660 <HAL_InitTick+0x5c>)
 800e60e:	681c      	ldr	r4, [r3, #0]
 800e610:	4b14      	ldr	r3, [pc, #80]	@ (800e664 <HAL_InitTick+0x60>)
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	0019      	movs	r1, r3
 800e616:	23fa      	movs	r3, #250	@ 0xfa
 800e618:	0098      	lsls	r0, r3, #2
 800e61a:	f7f1 fdc3 	bl	80001a4 <__udivsi3>
 800e61e:	0003      	movs	r3, r0
 800e620:	0019      	movs	r1, r3
 800e622:	0020      	movs	r0, r4
 800e624:	f7f1 fdbe 	bl	80001a4 <__udivsi3>
 800e628:	0003      	movs	r3, r0
 800e62a:	0018      	movs	r0, r3
 800e62c:	f000 fcfd 	bl	800f02a <HAL_SYSTICK_Config>
 800e630:	1e03      	subs	r3, r0, #0
 800e632:	d001      	beq.n	800e638 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800e634:	2301      	movs	r3, #1
 800e636:	e00f      	b.n	800e658 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2b03      	cmp	r3, #3
 800e63c:	d80b      	bhi.n	800e656 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e63e:	6879      	ldr	r1, [r7, #4]
 800e640:	2301      	movs	r3, #1
 800e642:	425b      	negs	r3, r3
 800e644:	2200      	movs	r2, #0
 800e646:	0018      	movs	r0, r3
 800e648:	f000 fcc6 	bl	800efd8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e64c:	4b06      	ldr	r3, [pc, #24]	@ (800e668 <HAL_InitTick+0x64>)
 800e64e:	687a      	ldr	r2, [r7, #4]
 800e650:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e652:	2300      	movs	r3, #0
 800e654:	e000      	b.n	800e658 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800e656:	2301      	movs	r3, #1
}
 800e658:	0018      	movs	r0, r3
 800e65a:	46bd      	mov	sp, r7
 800e65c:	b003      	add	sp, #12
 800e65e:	bd90      	pop	{r4, r7, pc}
 800e660:	200000cc 	.word	0x200000cc
 800e664:	200000e0 	.word	0x200000e0
 800e668:	200000dc 	.word	0x200000dc

0800e66c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e670:	4b05      	ldr	r3, [pc, #20]	@ (800e688 <HAL_IncTick+0x1c>)
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	001a      	movs	r2, r3
 800e676:	4b05      	ldr	r3, [pc, #20]	@ (800e68c <HAL_IncTick+0x20>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	18d2      	adds	r2, r2, r3
 800e67c:	4b03      	ldr	r3, [pc, #12]	@ (800e68c <HAL_IncTick+0x20>)
 800e67e:	601a      	str	r2, [r3, #0]
}
 800e680:	46c0      	nop			@ (mov r8, r8)
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
 800e686:	46c0      	nop			@ (mov r8, r8)
 800e688:	200000e0 	.word	0x200000e0
 800e68c:	200025a0 	.word	0x200025a0

0800e690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	af00      	add	r7, sp, #0
  return uwTick;
 800e694:	4b02      	ldr	r3, [pc, #8]	@ (800e6a0 <HAL_GetTick+0x10>)
 800e696:	681b      	ldr	r3, [r3, #0]
}
 800e698:	0018      	movs	r0, r3
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	46c0      	nop			@ (mov r8, r8)
 800e6a0:	200025a0 	.word	0x200025a0

0800e6a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e6ac:	f7ff fff0 	bl	800e690 <HAL_GetTick>
 800e6b0:	0003      	movs	r3, r0
 800e6b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	d005      	beq.n	800e6ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e6be:	4b0a      	ldr	r3, [pc, #40]	@ (800e6e8 <HAL_Delay+0x44>)
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	001a      	movs	r2, r3
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	189b      	adds	r3, r3, r2
 800e6c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e6ca:	46c0      	nop			@ (mov r8, r8)
 800e6cc:	f7ff ffe0 	bl	800e690 <HAL_GetTick>
 800e6d0:	0002      	movs	r2, r0
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	1ad3      	subs	r3, r2, r3
 800e6d6:	68fa      	ldr	r2, [r7, #12]
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d8f7      	bhi.n	800e6cc <HAL_Delay+0x28>
  {
  }
}
 800e6dc:	46c0      	nop			@ (mov r8, r8)
 800e6de:	46c0      	nop			@ (mov r8, r8)
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	b004      	add	sp, #16
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	46c0      	nop			@ (mov r8, r8)
 800e6e8:	200000e0 	.word	0x200000e0

0800e6ec <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800e6f0:	4b04      	ldr	r3, [pc, #16]	@ (800e704 <HAL_SuspendTick+0x18>)
 800e6f2:	681a      	ldr	r2, [r3, #0]
 800e6f4:	4b03      	ldr	r3, [pc, #12]	@ (800e704 <HAL_SuspendTick+0x18>)
 800e6f6:	2102      	movs	r1, #2
 800e6f8:	438a      	bics	r2, r1
 800e6fa:	601a      	str	r2, [r3, #0]
}
 800e6fc:	46c0      	nop			@ (mov r8, r8)
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
 800e702:	46c0      	nop			@ (mov r8, r8)
 800e704:	e000e010 	.word	0xe000e010

0800e708 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800e70c:	4b04      	ldr	r3, [pc, #16]	@ (800e720 <HAL_ResumeTick+0x18>)
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	4b03      	ldr	r3, [pc, #12]	@ (800e720 <HAL_ResumeTick+0x18>)
 800e712:	2102      	movs	r1, #2
 800e714:	430a      	orrs	r2, r1
 800e716:	601a      	str	r2, [r3, #0]
}
 800e718:	46c0      	nop			@ (mov r8, r8)
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	46c0      	nop			@ (mov r8, r8)
 800e720:	e000e010 	.word	0xe000e010

0800e724 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800e728:	4b02      	ldr	r3, [pc, #8]	@ (800e734 <HAL_GetUIDw0+0x10>)
 800e72a:	681b      	ldr	r3, [r3, #0]
}
 800e72c:	0018      	movs	r0, r3
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
 800e732:	46c0      	nop			@ (mov r8, r8)
 800e734:	1ff80050 	.word	0x1ff80050

0800e738 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800e73c:	4b02      	ldr	r3, [pc, #8]	@ (800e748 <HAL_GetUIDw1+0x10>)
 800e73e:	681b      	ldr	r3, [r3, #0]
}
 800e740:	0018      	movs	r0, r3
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	46c0      	nop			@ (mov r8, r8)
 800e748:	1ff80054 	.word	0x1ff80054

0800e74c <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800e750:	4b02      	ldr	r3, [pc, #8]	@ (800e75c <HAL_GetUIDw2+0x10>)
 800e752:	681b      	ldr	r3, [r3, #0]
}
 800e754:	0018      	movs	r0, r3
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	46c0      	nop			@ (mov r8, r8)
 800e75c:	1ff80064 	.word	0x1ff80064

0800e760 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d101      	bne.n	800e772 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800e76e:	2301      	movs	r3, #1
 800e770:	e159      	b.n	800ea26 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e776:	2b00      	cmp	r3, #0
 800e778:	d10a      	bne.n	800e790 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2200      	movs	r2, #0
 800e77e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2250      	movs	r2, #80	@ 0x50
 800e784:	2100      	movs	r1, #0
 800e786:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	0018      	movs	r0, r3
 800e78c:	f7f8 fc90 	bl	80070b0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e794:	2210      	movs	r2, #16
 800e796:	4013      	ands	r3, r2
 800e798:	2b10      	cmp	r3, #16
 800e79a:	d005      	beq.n	800e7a8 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	689b      	ldr	r3, [r3, #8]
 800e7a2:	2204      	movs	r2, #4
 800e7a4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800e7a6:	d00b      	beq.n	800e7c0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7ac:	2210      	movs	r2, #16
 800e7ae:	431a      	orrs	r2, r3
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2250      	movs	r2, #80	@ 0x50
 800e7b8:	2100      	movs	r1, #0
 800e7ba:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800e7bc:	2301      	movs	r3, #1
 800e7be:	e132      	b.n	800ea26 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7c4:	4a9a      	ldr	r2, [pc, #616]	@ (800ea30 <HAL_ADC_Init+0x2d0>)
 800e7c6:	4013      	ands	r3, r2
 800e7c8:	2202      	movs	r2, #2
 800e7ca:	431a      	orrs	r2, r3
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	689b      	ldr	r3, [r3, #8]
 800e7d6:	2203      	movs	r2, #3
 800e7d8:	4013      	ands	r3, r2
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d108      	bne.n	800e7f0 <HAL_ADC_Init+0x90>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	2201      	movs	r2, #1
 800e7e6:	4013      	ands	r3, r2
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d101      	bne.n	800e7f0 <HAL_ADC_Init+0x90>
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	e000      	b.n	800e7f2 <HAL_ADC_Init+0x92>
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d149      	bne.n	800e88a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	685a      	ldr	r2, [r3, #4]
 800e7fa:	23c0      	movs	r3, #192	@ 0xc0
 800e7fc:	061b      	lsls	r3, r3, #24
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d00b      	beq.n	800e81a <HAL_ADC_Init+0xba>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	685a      	ldr	r2, [r3, #4]
 800e806:	2380      	movs	r3, #128	@ 0x80
 800e808:	05db      	lsls	r3, r3, #23
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d005      	beq.n	800e81a <HAL_ADC_Init+0xba>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	685a      	ldr	r2, [r3, #4]
 800e812:	2380      	movs	r3, #128	@ 0x80
 800e814:	061b      	lsls	r3, r3, #24
 800e816:	429a      	cmp	r2, r3
 800e818:	d111      	bne.n	800e83e <HAL_ADC_Init+0xde>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	691a      	ldr	r2, [r3, #16]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	0092      	lsls	r2, r2, #2
 800e826:	0892      	lsrs	r2, r2, #2
 800e828:	611a      	str	r2, [r3, #16]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	6919      	ldr	r1, [r3, #16]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	685a      	ldr	r2, [r3, #4]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	430a      	orrs	r2, r1
 800e83a:	611a      	str	r2, [r3, #16]
 800e83c:	e014      	b.n	800e868 <HAL_ADC_Init+0x108>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	691a      	ldr	r2, [r3, #16]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	0092      	lsls	r2, r2, #2
 800e84a:	0892      	lsrs	r2, r2, #2
 800e84c:	611a      	str	r2, [r3, #16]
 800e84e:	4b79      	ldr	r3, [pc, #484]	@ (800ea34 <HAL_ADC_Init+0x2d4>)
 800e850:	681a      	ldr	r2, [r3, #0]
 800e852:	4b78      	ldr	r3, [pc, #480]	@ (800ea34 <HAL_ADC_Init+0x2d4>)
 800e854:	4978      	ldr	r1, [pc, #480]	@ (800ea38 <HAL_ADC_Init+0x2d8>)
 800e856:	400a      	ands	r2, r1
 800e858:	601a      	str	r2, [r3, #0]
 800e85a:	4b76      	ldr	r3, [pc, #472]	@ (800ea34 <HAL_ADC_Init+0x2d4>)
 800e85c:	6819      	ldr	r1, [r3, #0]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	685a      	ldr	r2, [r3, #4]
 800e862:	4b74      	ldr	r3, [pc, #464]	@ (800ea34 <HAL_ADC_Init+0x2d4>)
 800e864:	430a      	orrs	r2, r1
 800e866:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	68da      	ldr	r2, [r3, #12]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	2118      	movs	r1, #24
 800e874:	438a      	bics	r2, r1
 800e876:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	68d9      	ldr	r1, [r3, #12]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	689a      	ldr	r2, [r3, #8]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	430a      	orrs	r2, r1
 800e888:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800e88a:	4b6a      	ldr	r3, [pc, #424]	@ (800ea34 <HAL_ADC_Init+0x2d4>)
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	4b69      	ldr	r3, [pc, #420]	@ (800ea34 <HAL_ADC_Init+0x2d4>)
 800e890:	496a      	ldr	r1, [pc, #424]	@ (800ea3c <HAL_ADC_Init+0x2dc>)
 800e892:	400a      	ands	r2, r1
 800e894:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800e896:	4b67      	ldr	r3, [pc, #412]	@ (800ea34 <HAL_ADC_Init+0x2d4>)
 800e898:	6819      	ldr	r1, [r3, #0]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e89e:	065a      	lsls	r2, r3, #25
 800e8a0:	4b64      	ldr	r3, [pc, #400]	@ (800ea34 <HAL_ADC_Init+0x2d4>)
 800e8a2:	430a      	orrs	r2, r1
 800e8a4:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	689a      	ldr	r2, [r3, #8]
 800e8ac:	2380      	movs	r3, #128	@ 0x80
 800e8ae:	055b      	lsls	r3, r3, #21
 800e8b0:	4013      	ands	r3, r2
 800e8b2:	d108      	bne.n	800e8c6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	689a      	ldr	r2, [r3, #8]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	2180      	movs	r1, #128	@ 0x80
 800e8c0:	0549      	lsls	r1, r1, #21
 800e8c2:	430a      	orrs	r2, r1
 800e8c4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	68da      	ldr	r2, [r3, #12]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	495b      	ldr	r1, [pc, #364]	@ (800ea40 <HAL_ADC_Init+0x2e0>)
 800e8d2:	400a      	ands	r2, r1
 800e8d4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	68d9      	ldr	r1, [r3, #12]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	691b      	ldr	r3, [r3, #16]
 800e8e4:	2b02      	cmp	r3, #2
 800e8e6:	d101      	bne.n	800e8ec <HAL_ADC_Init+0x18c>
 800e8e8:	2304      	movs	r3, #4
 800e8ea:	e000      	b.n	800e8ee <HAL_ADC_Init+0x18e>
 800e8ec:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e8ee:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2020      	movs	r0, #32
 800e8f4:	5c1b      	ldrb	r3, [r3, r0]
 800e8f6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800e8f8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	202c      	movs	r0, #44	@ 0x2c
 800e8fe:	5c1b      	ldrb	r3, [r3, r0]
 800e900:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800e902:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800e908:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	699b      	ldr	r3, [r3, #24]
 800e90e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800e910:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	69db      	ldr	r3, [r3, #28]
 800e916:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800e918:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	430a      	orrs	r2, r1
 800e920:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e926:	23c2      	movs	r3, #194	@ 0xc2
 800e928:	33ff      	adds	r3, #255	@ 0xff
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d00b      	beq.n	800e946 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	68d9      	ldr	r1, [r3, #12]
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800e93c:	431a      	orrs	r2, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	430a      	orrs	r2, r1
 800e944:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2221      	movs	r2, #33	@ 0x21
 800e94a:	5c9b      	ldrb	r3, [r3, r2]
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	d11a      	bne.n	800e986 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2220      	movs	r2, #32
 800e954:	5c9b      	ldrb	r3, [r3, r2]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d109      	bne.n	800e96e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	68da      	ldr	r2, [r3, #12]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	2180      	movs	r1, #128	@ 0x80
 800e966:	0249      	lsls	r1, r1, #9
 800e968:	430a      	orrs	r2, r1
 800e96a:	60da      	str	r2, [r3, #12]
 800e96c:	e00b      	b.n	800e986 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e972:	2220      	movs	r2, #32
 800e974:	431a      	orrs	r2, r3
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e97e:	2201      	movs	r2, #1
 800e980:	431a      	orrs	r2, r3
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d11f      	bne.n	800e9ce <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	691a      	ldr	r2, [r3, #16]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	492a      	ldr	r1, [pc, #168]	@ (800ea44 <HAL_ADC_Init+0x2e4>)
 800e99a:	400a      	ands	r2, r1
 800e99c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	6919      	ldr	r1, [r3, #16]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e9ac:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800e9b2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	430a      	orrs	r2, r1
 800e9ba:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	691a      	ldr	r2, [r3, #16]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	2101      	movs	r1, #1
 800e9c8:	430a      	orrs	r2, r1
 800e9ca:	611a      	str	r2, [r3, #16]
 800e9cc:	e00e      	b.n	800e9ec <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	691b      	ldr	r3, [r3, #16]
 800e9d4:	2201      	movs	r2, #1
 800e9d6:	4013      	ands	r3, r2
 800e9d8:	2b01      	cmp	r3, #1
 800e9da:	d107      	bne.n	800e9ec <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	691a      	ldr	r2, [r3, #16]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	2101      	movs	r1, #1
 800e9e8:	438a      	bics	r2, r1
 800e9ea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	695a      	ldr	r2, [r3, #20]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	2107      	movs	r1, #7
 800e9f8:	438a      	bics	r2, r1
 800e9fa:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	6959      	ldr	r1, [r3, #20]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	430a      	orrs	r2, r1
 800ea0c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2200      	movs	r2, #0
 800ea12:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea18:	2203      	movs	r2, #3
 800ea1a:	4393      	bics	r3, r2
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	431a      	orrs	r2, r3
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800ea24:	2300      	movs	r3, #0
}
 800ea26:	0018      	movs	r0, r3
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	b002      	add	sp, #8
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	46c0      	nop			@ (mov r8, r8)
 800ea30:	fffffefd 	.word	0xfffffefd
 800ea34:	40012708 	.word	0x40012708
 800ea38:	ffc3ffff 	.word	0xffc3ffff
 800ea3c:	fdffffff 	.word	0xfdffffff
 800ea40:	fffe0219 	.word	0xfffe0219
 800ea44:	fffffc03 	.word	0xfffffc03

0800ea48 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800ea48:	b590      	push	{r4, r7, lr}
 800ea4a:	b085      	sub	sp, #20
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ea50:	230f      	movs	r3, #15
 800ea52:	18fb      	adds	r3, r7, r3
 800ea54:	2200      	movs	r2, #0
 800ea56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	689b      	ldr	r3, [r3, #8]
 800ea5e:	2204      	movs	r2, #4
 800ea60:	4013      	ands	r3, r2
 800ea62:	d138      	bne.n	800ead6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2250      	movs	r2, #80	@ 0x50
 800ea68:	5c9b      	ldrb	r3, [r3, r2]
 800ea6a:	2b01      	cmp	r3, #1
 800ea6c:	d101      	bne.n	800ea72 <HAL_ADC_Start+0x2a>
 800ea6e:	2302      	movs	r3, #2
 800ea70:	e038      	b.n	800eae4 <HAL_ADC_Start+0x9c>
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2250      	movs	r2, #80	@ 0x50
 800ea76:	2101      	movs	r1, #1
 800ea78:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	69db      	ldr	r3, [r3, #28]
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d007      	beq.n	800ea92 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800ea82:	230f      	movs	r3, #15
 800ea84:	18fc      	adds	r4, r7, r3
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	0018      	movs	r0, r3
 800ea8a:	f000 f95f 	bl	800ed4c <ADC_Enable>
 800ea8e:	0003      	movs	r3, r0
 800ea90:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800ea92:	230f      	movs	r3, #15
 800ea94:	18fb      	adds	r3, r7, r3
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d120      	bne.n	800eade <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaa0:	4a12      	ldr	r2, [pc, #72]	@ (800eaec <HAL_ADC_Start+0xa4>)
 800eaa2:	4013      	ands	r3, r2
 800eaa4:	2280      	movs	r2, #128	@ 0x80
 800eaa6:	0052      	lsls	r2, r2, #1
 800eaa8:	431a      	orrs	r2, r3
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2200      	movs	r2, #0
 800eab2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2250      	movs	r2, #80	@ 0x50
 800eab8:	2100      	movs	r1, #0
 800eaba:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	221c      	movs	r2, #28
 800eac2:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	689a      	ldr	r2, [r3, #8]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	2104      	movs	r1, #4
 800ead0:	430a      	orrs	r2, r1
 800ead2:	609a      	str	r2, [r3, #8]
 800ead4:	e003      	b.n	800eade <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800ead6:	230f      	movs	r3, #15
 800ead8:	18fb      	adds	r3, r7, r3
 800eada:	2202      	movs	r2, #2
 800eadc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800eade:	230f      	movs	r3, #15
 800eae0:	18fb      	adds	r3, r7, r3
 800eae2:	781b      	ldrb	r3, [r3, #0]
}
 800eae4:	0018      	movs	r0, r3
 800eae6:	46bd      	mov	sp, r7
 800eae8:	b005      	add	sp, #20
 800eaea:	bd90      	pop	{r4, r7, pc}
 800eaec:	fffff0fe 	.word	0xfffff0fe

0800eaf0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800eafa:	2300      	movs	r3, #0
 800eafc:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800eafe:	2300      	movs	r3, #0
 800eb00:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	695b      	ldr	r3, [r3, #20]
 800eb06:	2b08      	cmp	r3, #8
 800eb08:	d102      	bne.n	800eb10 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800eb0a:	2308      	movs	r3, #8
 800eb0c:	60fb      	str	r3, [r7, #12]
 800eb0e:	e014      	b.n	800eb3a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	68db      	ldr	r3, [r3, #12]
 800eb16:	2201      	movs	r2, #1
 800eb18:	4013      	ands	r3, r2
 800eb1a:	2b01      	cmp	r3, #1
 800eb1c:	d10b      	bne.n	800eb36 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb22:	2220      	movs	r2, #32
 800eb24:	431a      	orrs	r2, r3
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2250      	movs	r2, #80	@ 0x50
 800eb2e:	2100      	movs	r1, #0
 800eb30:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800eb32:	2301      	movs	r3, #1
 800eb34:	e072      	b.n	800ec1c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800eb36:	230c      	movs	r3, #12
 800eb38:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800eb3a:	f7ff fda9 	bl	800e690 <HAL_GetTick>
 800eb3e:	0003      	movs	r3, r0
 800eb40:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800eb42:	e01f      	b.n	800eb84 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	3301      	adds	r3, #1
 800eb48:	d01c      	beq.n	800eb84 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d007      	beq.n	800eb60 <HAL_ADC_PollForConversion+0x70>
 800eb50:	f7ff fd9e 	bl	800e690 <HAL_GetTick>
 800eb54:	0002      	movs	r2, r0
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	1ad3      	subs	r3, r2, r3
 800eb5a:	683a      	ldr	r2, [r7, #0]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d211      	bcs.n	800eb84 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	68fa      	ldr	r2, [r7, #12]
 800eb68:	4013      	ands	r3, r2
 800eb6a:	d10b      	bne.n	800eb84 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb70:	2204      	movs	r2, #4
 800eb72:	431a      	orrs	r2, r3
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2250      	movs	r2, #80	@ 0x50
 800eb7c:	2100      	movs	r1, #0
 800eb7e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800eb80:	2303      	movs	r3, #3
 800eb82:	e04b      	b.n	800ec1c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	68fa      	ldr	r2, [r7, #12]
 800eb8c:	4013      	ands	r3, r2
 800eb8e:	d0d9      	beq.n	800eb44 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb94:	2280      	movs	r2, #128	@ 0x80
 800eb96:	0092      	lsls	r2, r2, #2
 800eb98:	431a      	orrs	r2, r3
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	68da      	ldr	r2, [r3, #12]
 800eba4:	23c0      	movs	r3, #192	@ 0xc0
 800eba6:	011b      	lsls	r3, r3, #4
 800eba8:	4013      	ands	r3, r2
 800ebaa:	d12e      	bne.n	800ec0a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2220      	movs	r2, #32
 800ebb0:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d129      	bne.n	800ec0a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2208      	movs	r2, #8
 800ebbe:	4013      	ands	r3, r2
 800ebc0:	2b08      	cmp	r3, #8
 800ebc2:	d122      	bne.n	800ec0a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	689b      	ldr	r3, [r3, #8]
 800ebca:	2204      	movs	r2, #4
 800ebcc:	4013      	ands	r3, r2
 800ebce:	d110      	bne.n	800ebf2 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	685a      	ldr	r2, [r3, #4]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	210c      	movs	r1, #12
 800ebdc:	438a      	bics	r2, r1
 800ebde:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebe4:	4a0f      	ldr	r2, [pc, #60]	@ (800ec24 <HAL_ADC_PollForConversion+0x134>)
 800ebe6:	4013      	ands	r3, r2
 800ebe8:	2201      	movs	r2, #1
 800ebea:	431a      	orrs	r2, r3
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	655a      	str	r2, [r3, #84]	@ 0x54
 800ebf0:	e00b      	b.n	800ec0a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebf6:	2220      	movs	r2, #32
 800ebf8:	431a      	orrs	r2, r3
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec02:	2201      	movs	r2, #1
 800ec04:	431a      	orrs	r2, r3
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	699b      	ldr	r3, [r3, #24]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d103      	bne.n	800ec1a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	220c      	movs	r2, #12
 800ec18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ec1a:	2300      	movs	r3, #0
}
 800ec1c:	0018      	movs	r0, r3
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	b004      	add	sp, #16
 800ec22:	bd80      	pop	{r7, pc}
 800ec24:	fffffefe 	.word	0xfffffefe

0800ec28 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800ec36:	0018      	movs	r0, r3
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	b002      	add	sp, #8
 800ec3c:	bd80      	pop	{r7, pc}
	...

0800ec40 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2250      	movs	r2, #80	@ 0x50
 800ec4e:	5c9b      	ldrb	r3, [r3, r2]
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	d101      	bne.n	800ec58 <HAL_ADC_ConfigChannel+0x18>
 800ec54:	2302      	movs	r3, #2
 800ec56:	e06c      	b.n	800ed32 <HAL_ADC_ConfigChannel+0xf2>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2250      	movs	r2, #80	@ 0x50
 800ec5c:	2101      	movs	r1, #1
 800ec5e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	689b      	ldr	r3, [r3, #8]
 800ec66:	2204      	movs	r2, #4
 800ec68:	4013      	ands	r3, r2
 800ec6a:	d00b      	beq.n	800ec84 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec70:	2220      	movs	r2, #32
 800ec72:	431a      	orrs	r2, r3
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2250      	movs	r2, #80	@ 0x50
 800ec7c:	2100      	movs	r1, #0
 800ec7e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800ec80:	2301      	movs	r3, #1
 800ec82:	e056      	b.n	800ed32 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	4a2c      	ldr	r2, [pc, #176]	@ (800ed3c <HAL_ADC_ConfigChannel+0xfc>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d028      	beq.n	800ece0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	035b      	lsls	r3, r3, #13
 800ec9a:	0b5a      	lsrs	r2, r3, #13
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	430a      	orrs	r2, r1
 800eca2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	681a      	ldr	r2, [r3, #0]
 800eca8:	2380      	movs	r3, #128	@ 0x80
 800ecaa:	02db      	lsls	r3, r3, #11
 800ecac:	4013      	ands	r3, r2
 800ecae:	d009      	beq.n	800ecc4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800ecb0:	4b23      	ldr	r3, [pc, #140]	@ (800ed40 <HAL_ADC_ConfigChannel+0x100>)
 800ecb2:	681a      	ldr	r2, [r3, #0]
 800ecb4:	4b22      	ldr	r3, [pc, #136]	@ (800ed40 <HAL_ADC_ConfigChannel+0x100>)
 800ecb6:	2180      	movs	r1, #128	@ 0x80
 800ecb8:	0409      	lsls	r1, r1, #16
 800ecba:	430a      	orrs	r2, r1
 800ecbc:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800ecbe:	200a      	movs	r0, #10
 800ecc0:	f000 f8ac 	bl	800ee1c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	681a      	ldr	r2, [r3, #0]
 800ecc8:	2380      	movs	r3, #128	@ 0x80
 800ecca:	029b      	lsls	r3, r3, #10
 800eccc:	4013      	ands	r3, r2
 800ecce:	d02b      	beq.n	800ed28 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800ecd0:	4b1b      	ldr	r3, [pc, #108]	@ (800ed40 <HAL_ADC_ConfigChannel+0x100>)
 800ecd2:	681a      	ldr	r2, [r3, #0]
 800ecd4:	4b1a      	ldr	r3, [pc, #104]	@ (800ed40 <HAL_ADC_ConfigChannel+0x100>)
 800ecd6:	2180      	movs	r1, #128	@ 0x80
 800ecd8:	03c9      	lsls	r1, r1, #15
 800ecda:	430a      	orrs	r2, r1
 800ecdc:	601a      	str	r2, [r3, #0]
 800ecde:	e023      	b.n	800ed28 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	035b      	lsls	r3, r3, #13
 800ecec:	0b5b      	lsrs	r3, r3, #13
 800ecee:	43d9      	mvns	r1, r3
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	400a      	ands	r2, r1
 800ecf6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	681a      	ldr	r2, [r3, #0]
 800ecfc:	2380      	movs	r3, #128	@ 0x80
 800ecfe:	02db      	lsls	r3, r3, #11
 800ed00:	4013      	ands	r3, r2
 800ed02:	d005      	beq.n	800ed10 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800ed04:	4b0e      	ldr	r3, [pc, #56]	@ (800ed40 <HAL_ADC_ConfigChannel+0x100>)
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	4b0d      	ldr	r3, [pc, #52]	@ (800ed40 <HAL_ADC_ConfigChannel+0x100>)
 800ed0a:	490e      	ldr	r1, [pc, #56]	@ (800ed44 <HAL_ADC_ConfigChannel+0x104>)
 800ed0c:	400a      	ands	r2, r1
 800ed0e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	681a      	ldr	r2, [r3, #0]
 800ed14:	2380      	movs	r3, #128	@ 0x80
 800ed16:	029b      	lsls	r3, r3, #10
 800ed18:	4013      	ands	r3, r2
 800ed1a:	d005      	beq.n	800ed28 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800ed1c:	4b08      	ldr	r3, [pc, #32]	@ (800ed40 <HAL_ADC_ConfigChannel+0x100>)
 800ed1e:	681a      	ldr	r2, [r3, #0]
 800ed20:	4b07      	ldr	r3, [pc, #28]	@ (800ed40 <HAL_ADC_ConfigChannel+0x100>)
 800ed22:	4909      	ldr	r1, [pc, #36]	@ (800ed48 <HAL_ADC_ConfigChannel+0x108>)
 800ed24:	400a      	ands	r2, r1
 800ed26:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2250      	movs	r2, #80	@ 0x50
 800ed2c:	2100      	movs	r1, #0
 800ed2e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800ed30:	2300      	movs	r3, #0
}
 800ed32:	0018      	movs	r0, r3
 800ed34:	46bd      	mov	sp, r7
 800ed36:	b002      	add	sp, #8
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	46c0      	nop			@ (mov r8, r8)
 800ed3c:	00001001 	.word	0x00001001
 800ed40:	40012708 	.word	0x40012708
 800ed44:	ff7fffff 	.word	0xff7fffff
 800ed48:	ffbfffff 	.word	0xffbfffff

0800ed4c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b084      	sub	sp, #16
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ed54:	2300      	movs	r3, #0
 800ed56:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	689b      	ldr	r3, [r3, #8]
 800ed5e:	2203      	movs	r2, #3
 800ed60:	4013      	ands	r3, r2
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d108      	bne.n	800ed78 <ADC_Enable+0x2c>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	2201      	movs	r2, #1
 800ed6e:	4013      	ands	r3, r2
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	d101      	bne.n	800ed78 <ADC_Enable+0x2c>
 800ed74:	2301      	movs	r3, #1
 800ed76:	e000      	b.n	800ed7a <ADC_Enable+0x2e>
 800ed78:	2300      	movs	r3, #0
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d146      	bne.n	800ee0c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	689b      	ldr	r3, [r3, #8]
 800ed84:	4a24      	ldr	r2, [pc, #144]	@ (800ee18 <ADC_Enable+0xcc>)
 800ed86:	4013      	ands	r3, r2
 800ed88:	d00d      	beq.n	800eda6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed8e:	2210      	movs	r2, #16
 800ed90:	431a      	orrs	r2, r3
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	431a      	orrs	r2, r3
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800eda2:	2301      	movs	r3, #1
 800eda4:	e033      	b.n	800ee0e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	689a      	ldr	r2, [r3, #8]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	2101      	movs	r1, #1
 800edb2:	430a      	orrs	r2, r1
 800edb4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800edb6:	2001      	movs	r0, #1
 800edb8:	f000 f830 	bl	800ee1c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800edbc:	f7ff fc68 	bl	800e690 <HAL_GetTick>
 800edc0:	0003      	movs	r3, r0
 800edc2:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800edc4:	e01b      	b.n	800edfe <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800edc6:	f7ff fc63 	bl	800e690 <HAL_GetTick>
 800edca:	0002      	movs	r2, r0
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	1ad3      	subs	r3, r2, r3
 800edd0:	2b0a      	cmp	r3, #10
 800edd2:	d914      	bls.n	800edfe <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	2201      	movs	r2, #1
 800eddc:	4013      	ands	r3, r2
 800edde:	2b01      	cmp	r3, #1
 800ede0:	d00d      	beq.n	800edfe <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ede6:	2210      	movs	r2, #16
 800ede8:	431a      	orrs	r2, r3
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800edf2:	2201      	movs	r2, #1
 800edf4:	431a      	orrs	r2, r3
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800edfa:	2301      	movs	r3, #1
 800edfc:	e007      	b.n	800ee0e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2201      	movs	r2, #1
 800ee06:	4013      	ands	r3, r2
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	d1dc      	bne.n	800edc6 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ee0c:	2300      	movs	r3, #0
}
 800ee0e:	0018      	movs	r0, r3
 800ee10:	46bd      	mov	sp, r7
 800ee12:	b004      	add	sp, #16
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	46c0      	nop			@ (mov r8, r8)
 800ee18:	80000017 	.word	0x80000017

0800ee1c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800ee24:	4b0b      	ldr	r3, [pc, #44]	@ (800ee54 <ADC_DelayMicroSecond+0x38>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	490b      	ldr	r1, [pc, #44]	@ (800ee58 <ADC_DelayMicroSecond+0x3c>)
 800ee2a:	0018      	movs	r0, r3
 800ee2c:	f7f1 f9ba 	bl	80001a4 <__udivsi3>
 800ee30:	0003      	movs	r3, r0
 800ee32:	001a      	movs	r2, r3
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	4353      	muls	r3, r2
 800ee38:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800ee3a:	e002      	b.n	800ee42 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	3b01      	subs	r3, #1
 800ee40:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d1f9      	bne.n	800ee3c <ADC_DelayMicroSecond+0x20>
  }
}
 800ee48:	46c0      	nop			@ (mov r8, r8)
 800ee4a:	46c0      	nop			@ (mov r8, r8)
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	b004      	add	sp, #16
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	46c0      	nop			@ (mov r8, r8)
 800ee54:	200000cc 	.word	0x200000cc
 800ee58:	000f4240 	.word	0x000f4240

0800ee5c <__NVIC_EnableIRQ>:
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	0002      	movs	r2, r0
 800ee64:	1dfb      	adds	r3, r7, #7
 800ee66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ee68:	1dfb      	adds	r3, r7, #7
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	2b7f      	cmp	r3, #127	@ 0x7f
 800ee6e:	d809      	bhi.n	800ee84 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ee70:	1dfb      	adds	r3, r7, #7
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	001a      	movs	r2, r3
 800ee76:	231f      	movs	r3, #31
 800ee78:	401a      	ands	r2, r3
 800ee7a:	4b04      	ldr	r3, [pc, #16]	@ (800ee8c <__NVIC_EnableIRQ+0x30>)
 800ee7c:	2101      	movs	r1, #1
 800ee7e:	4091      	lsls	r1, r2
 800ee80:	000a      	movs	r2, r1
 800ee82:	601a      	str	r2, [r3, #0]
}
 800ee84:	46c0      	nop			@ (mov r8, r8)
 800ee86:	46bd      	mov	sp, r7
 800ee88:	b002      	add	sp, #8
 800ee8a:	bd80      	pop	{r7, pc}
 800ee8c:	e000e100 	.word	0xe000e100

0800ee90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ee90:	b590      	push	{r4, r7, lr}
 800ee92:	b083      	sub	sp, #12
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	0002      	movs	r2, r0
 800ee98:	6039      	str	r1, [r7, #0]
 800ee9a:	1dfb      	adds	r3, r7, #7
 800ee9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ee9e:	1dfb      	adds	r3, r7, #7
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	2b7f      	cmp	r3, #127	@ 0x7f
 800eea4:	d828      	bhi.n	800eef8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eea6:	4a2f      	ldr	r2, [pc, #188]	@ (800ef64 <__NVIC_SetPriority+0xd4>)
 800eea8:	1dfb      	adds	r3, r7, #7
 800eeaa:	781b      	ldrb	r3, [r3, #0]
 800eeac:	b25b      	sxtb	r3, r3
 800eeae:	089b      	lsrs	r3, r3, #2
 800eeb0:	33c0      	adds	r3, #192	@ 0xc0
 800eeb2:	009b      	lsls	r3, r3, #2
 800eeb4:	589b      	ldr	r3, [r3, r2]
 800eeb6:	1dfa      	adds	r2, r7, #7
 800eeb8:	7812      	ldrb	r2, [r2, #0]
 800eeba:	0011      	movs	r1, r2
 800eebc:	2203      	movs	r2, #3
 800eebe:	400a      	ands	r2, r1
 800eec0:	00d2      	lsls	r2, r2, #3
 800eec2:	21ff      	movs	r1, #255	@ 0xff
 800eec4:	4091      	lsls	r1, r2
 800eec6:	000a      	movs	r2, r1
 800eec8:	43d2      	mvns	r2, r2
 800eeca:	401a      	ands	r2, r3
 800eecc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	019b      	lsls	r3, r3, #6
 800eed2:	22ff      	movs	r2, #255	@ 0xff
 800eed4:	401a      	ands	r2, r3
 800eed6:	1dfb      	adds	r3, r7, #7
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	0018      	movs	r0, r3
 800eedc:	2303      	movs	r3, #3
 800eede:	4003      	ands	r3, r0
 800eee0:	00db      	lsls	r3, r3, #3
 800eee2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eee4:	481f      	ldr	r0, [pc, #124]	@ (800ef64 <__NVIC_SetPriority+0xd4>)
 800eee6:	1dfb      	adds	r3, r7, #7
 800eee8:	781b      	ldrb	r3, [r3, #0]
 800eeea:	b25b      	sxtb	r3, r3
 800eeec:	089b      	lsrs	r3, r3, #2
 800eeee:	430a      	orrs	r2, r1
 800eef0:	33c0      	adds	r3, #192	@ 0xc0
 800eef2:	009b      	lsls	r3, r3, #2
 800eef4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800eef6:	e031      	b.n	800ef5c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eef8:	4a1b      	ldr	r2, [pc, #108]	@ (800ef68 <__NVIC_SetPriority+0xd8>)
 800eefa:	1dfb      	adds	r3, r7, #7
 800eefc:	781b      	ldrb	r3, [r3, #0]
 800eefe:	0019      	movs	r1, r3
 800ef00:	230f      	movs	r3, #15
 800ef02:	400b      	ands	r3, r1
 800ef04:	3b08      	subs	r3, #8
 800ef06:	089b      	lsrs	r3, r3, #2
 800ef08:	3306      	adds	r3, #6
 800ef0a:	009b      	lsls	r3, r3, #2
 800ef0c:	18d3      	adds	r3, r2, r3
 800ef0e:	3304      	adds	r3, #4
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	1dfa      	adds	r2, r7, #7
 800ef14:	7812      	ldrb	r2, [r2, #0]
 800ef16:	0011      	movs	r1, r2
 800ef18:	2203      	movs	r2, #3
 800ef1a:	400a      	ands	r2, r1
 800ef1c:	00d2      	lsls	r2, r2, #3
 800ef1e:	21ff      	movs	r1, #255	@ 0xff
 800ef20:	4091      	lsls	r1, r2
 800ef22:	000a      	movs	r2, r1
 800ef24:	43d2      	mvns	r2, r2
 800ef26:	401a      	ands	r2, r3
 800ef28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	019b      	lsls	r3, r3, #6
 800ef2e:	22ff      	movs	r2, #255	@ 0xff
 800ef30:	401a      	ands	r2, r3
 800ef32:	1dfb      	adds	r3, r7, #7
 800ef34:	781b      	ldrb	r3, [r3, #0]
 800ef36:	0018      	movs	r0, r3
 800ef38:	2303      	movs	r3, #3
 800ef3a:	4003      	ands	r3, r0
 800ef3c:	00db      	lsls	r3, r3, #3
 800ef3e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ef40:	4809      	ldr	r0, [pc, #36]	@ (800ef68 <__NVIC_SetPriority+0xd8>)
 800ef42:	1dfb      	adds	r3, r7, #7
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	001c      	movs	r4, r3
 800ef48:	230f      	movs	r3, #15
 800ef4a:	4023      	ands	r3, r4
 800ef4c:	3b08      	subs	r3, #8
 800ef4e:	089b      	lsrs	r3, r3, #2
 800ef50:	430a      	orrs	r2, r1
 800ef52:	3306      	adds	r3, #6
 800ef54:	009b      	lsls	r3, r3, #2
 800ef56:	18c3      	adds	r3, r0, r3
 800ef58:	3304      	adds	r3, #4
 800ef5a:	601a      	str	r2, [r3, #0]
}
 800ef5c:	46c0      	nop			@ (mov r8, r8)
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	b003      	add	sp, #12
 800ef62:	bd90      	pop	{r4, r7, pc}
 800ef64:	e000e100 	.word	0xe000e100
 800ef68:	e000ed00 	.word	0xe000ed00

0800ef6c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800ef70:	f3bf 8f4f 	dsb	sy
}
 800ef74:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ef76:	4b04      	ldr	r3, [pc, #16]	@ (800ef88 <__NVIC_SystemReset+0x1c>)
 800ef78:	4a04      	ldr	r2, [pc, #16]	@ (800ef8c <__NVIC_SystemReset+0x20>)
 800ef7a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800ef7c:	f3bf 8f4f 	dsb	sy
}
 800ef80:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800ef82:	46c0      	nop			@ (mov r8, r8)
 800ef84:	e7fd      	b.n	800ef82 <__NVIC_SystemReset+0x16>
 800ef86:	46c0      	nop			@ (mov r8, r8)
 800ef88:	e000ed00 	.word	0xe000ed00
 800ef8c:	05fa0004 	.word	0x05fa0004

0800ef90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	1e5a      	subs	r2, r3, #1
 800ef9c:	2380      	movs	r3, #128	@ 0x80
 800ef9e:	045b      	lsls	r3, r3, #17
 800efa0:	429a      	cmp	r2, r3
 800efa2:	d301      	bcc.n	800efa8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800efa4:	2301      	movs	r3, #1
 800efa6:	e010      	b.n	800efca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800efa8:	4b0a      	ldr	r3, [pc, #40]	@ (800efd4 <SysTick_Config+0x44>)
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	3a01      	subs	r2, #1
 800efae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800efb0:	2301      	movs	r3, #1
 800efb2:	425b      	negs	r3, r3
 800efb4:	2103      	movs	r1, #3
 800efb6:	0018      	movs	r0, r3
 800efb8:	f7ff ff6a 	bl	800ee90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800efbc:	4b05      	ldr	r3, [pc, #20]	@ (800efd4 <SysTick_Config+0x44>)
 800efbe:	2200      	movs	r2, #0
 800efc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800efc2:	4b04      	ldr	r3, [pc, #16]	@ (800efd4 <SysTick_Config+0x44>)
 800efc4:	2207      	movs	r2, #7
 800efc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800efc8:	2300      	movs	r3, #0
}
 800efca:	0018      	movs	r0, r3
 800efcc:	46bd      	mov	sp, r7
 800efce:	b002      	add	sp, #8
 800efd0:	bd80      	pop	{r7, pc}
 800efd2:	46c0      	nop			@ (mov r8, r8)
 800efd4:	e000e010 	.word	0xe000e010

0800efd8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800efd8:	b580      	push	{r7, lr}
 800efda:	b084      	sub	sp, #16
 800efdc:	af00      	add	r7, sp, #0
 800efde:	60b9      	str	r1, [r7, #8]
 800efe0:	607a      	str	r2, [r7, #4]
 800efe2:	210f      	movs	r1, #15
 800efe4:	187b      	adds	r3, r7, r1
 800efe6:	1c02      	adds	r2, r0, #0
 800efe8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800efea:	68ba      	ldr	r2, [r7, #8]
 800efec:	187b      	adds	r3, r7, r1
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	b25b      	sxtb	r3, r3
 800eff2:	0011      	movs	r1, r2
 800eff4:	0018      	movs	r0, r3
 800eff6:	f7ff ff4b 	bl	800ee90 <__NVIC_SetPriority>
}
 800effa:	46c0      	nop			@ (mov r8, r8)
 800effc:	46bd      	mov	sp, r7
 800effe:	b004      	add	sp, #16
 800f000:	bd80      	pop	{r7, pc}

0800f002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f002:	b580      	push	{r7, lr}
 800f004:	b082      	sub	sp, #8
 800f006:	af00      	add	r7, sp, #0
 800f008:	0002      	movs	r2, r0
 800f00a:	1dfb      	adds	r3, r7, #7
 800f00c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f00e:	1dfb      	adds	r3, r7, #7
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	b25b      	sxtb	r3, r3
 800f014:	0018      	movs	r0, r3
 800f016:	f7ff ff21 	bl	800ee5c <__NVIC_EnableIRQ>
}
 800f01a:	46c0      	nop			@ (mov r8, r8)
 800f01c:	46bd      	mov	sp, r7
 800f01e:	b002      	add	sp, #8
 800f020:	bd80      	pop	{r7, pc}

0800f022 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800f022:	b580      	push	{r7, lr}
 800f024:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800f026:	f7ff ffa1 	bl	800ef6c <__NVIC_SystemReset>

0800f02a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f02a:	b580      	push	{r7, lr}
 800f02c:	b082      	sub	sp, #8
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	0018      	movs	r0, r3
 800f036:	f7ff ffab 	bl	800ef90 <SysTick_Config>
 800f03a:	0003      	movs	r3, r0
}
 800f03c:	0018      	movs	r0, r3
 800f03e:	46bd      	mov	sp, r7
 800f040:	b002      	add	sp, #8
 800f042:	bd80      	pop	{r7, pc}

0800f044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d101      	bne.n	800f056 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800f052:	2301      	movs	r3, #1
 800f054:	e061      	b.n	800f11a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4a32      	ldr	r2, [pc, #200]	@ (800f124 <HAL_DMA_Init+0xe0>)
 800f05c:	4694      	mov	ip, r2
 800f05e:	4463      	add	r3, ip
 800f060:	2114      	movs	r1, #20
 800f062:	0018      	movs	r0, r3
 800f064:	f7f1 f89e 	bl	80001a4 <__udivsi3>
 800f068:	0003      	movs	r3, r0
 800f06a:	009a      	lsls	r2, r3, #2
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	4a2d      	ldr	r2, [pc, #180]	@ (800f128 <HAL_DMA_Init+0xe4>)
 800f074:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2225      	movs	r2, #37	@ 0x25
 800f07a:	2102      	movs	r1, #2
 800f07c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	4a28      	ldr	r2, [pc, #160]	@ (800f12c <HAL_DMA_Init+0xe8>)
 800f08a:	4013      	ands	r3, r2
 800f08c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800f096:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	691b      	ldr	r3, [r3, #16]
 800f09c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f0a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	699b      	ldr	r3, [r3, #24]
 800f0a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f0ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6a1b      	ldr	r3, [r3, #32]
 800f0b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800f0b6:	68fa      	ldr	r2, [r7, #12]
 800f0b8:	4313      	orrs	r3, r2
 800f0ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	68fa      	ldr	r2, [r7, #12]
 800f0c2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	689a      	ldr	r2, [r3, #8]
 800f0c8:	2380      	movs	r3, #128	@ 0x80
 800f0ca:	01db      	lsls	r3, r3, #7
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d018      	beq.n	800f102 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800f0d0:	4b17      	ldr	r3, [pc, #92]	@ (800f130 <HAL_DMA_Init+0xec>)
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0d8:	211c      	movs	r1, #28
 800f0da:	400b      	ands	r3, r1
 800f0dc:	210f      	movs	r1, #15
 800f0de:	4099      	lsls	r1, r3
 800f0e0:	000b      	movs	r3, r1
 800f0e2:	43d9      	mvns	r1, r3
 800f0e4:	4b12      	ldr	r3, [pc, #72]	@ (800f130 <HAL_DMA_Init+0xec>)
 800f0e6:	400a      	ands	r2, r1
 800f0e8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800f0ea:	4b11      	ldr	r3, [pc, #68]	@ (800f130 <HAL_DMA_Init+0xec>)
 800f0ec:	6819      	ldr	r1, [r3, #0]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	685a      	ldr	r2, [r3, #4]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0f6:	201c      	movs	r0, #28
 800f0f8:	4003      	ands	r3, r0
 800f0fa:	409a      	lsls	r2, r3
 800f0fc:	4b0c      	ldr	r3, [pc, #48]	@ (800f130 <HAL_DMA_Init+0xec>)
 800f0fe:	430a      	orrs	r2, r1
 800f100:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2200      	movs	r2, #0
 800f106:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2225      	movs	r2, #37	@ 0x25
 800f10c:	2101      	movs	r1, #1
 800f10e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2224      	movs	r2, #36	@ 0x24
 800f114:	2100      	movs	r1, #0
 800f116:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f118:	2300      	movs	r3, #0
}
 800f11a:	0018      	movs	r0, r3
 800f11c:	46bd      	mov	sp, r7
 800f11e:	b004      	add	sp, #16
 800f120:	bd80      	pop	{r7, pc}
 800f122:	46c0      	nop			@ (mov r8, r8)
 800f124:	bffdfff8 	.word	0xbffdfff8
 800f128:	40020000 	.word	0x40020000
 800f12c:	ffff800f 	.word	0xffff800f
 800f130:	400200a8 	.word	0x400200a8

0800f134 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b086      	sub	sp, #24
 800f138:	af00      	add	r7, sp, #0
 800f13a:	60f8      	str	r0, [r7, #12]
 800f13c:	60b9      	str	r1, [r7, #8]
 800f13e:	607a      	str	r2, [r7, #4]
 800f140:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f142:	2317      	movs	r3, #23
 800f144:	18fb      	adds	r3, r7, r3
 800f146:	2200      	movs	r2, #0
 800f148:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	2224      	movs	r2, #36	@ 0x24
 800f14e:	5c9b      	ldrb	r3, [r3, r2]
 800f150:	2b01      	cmp	r3, #1
 800f152:	d101      	bne.n	800f158 <HAL_DMA_Start_IT+0x24>
 800f154:	2302      	movs	r3, #2
 800f156:	e04f      	b.n	800f1f8 <HAL_DMA_Start_IT+0xc4>
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	2224      	movs	r2, #36	@ 0x24
 800f15c:	2101      	movs	r1, #1
 800f15e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2225      	movs	r2, #37	@ 0x25
 800f164:	5c9b      	ldrb	r3, [r3, r2]
 800f166:	b2db      	uxtb	r3, r3
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d13a      	bne.n	800f1e2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	2225      	movs	r2, #37	@ 0x25
 800f170:	2102      	movs	r1, #2
 800f172:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2200      	movs	r2, #0
 800f178:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	681a      	ldr	r2, [r3, #0]
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	2101      	movs	r1, #1
 800f186:	438a      	bics	r2, r1
 800f188:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	687a      	ldr	r2, [r7, #4]
 800f18e:	68b9      	ldr	r1, [r7, #8]
 800f190:	68f8      	ldr	r0, [r7, #12]
 800f192:	f000 f976 	bl	800f482 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d008      	beq.n	800f1b0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	210e      	movs	r1, #14
 800f1aa:	430a      	orrs	r2, r1
 800f1ac:	601a      	str	r2, [r3, #0]
 800f1ae:	e00f      	b.n	800f1d0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	681a      	ldr	r2, [r3, #0]
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	2104      	movs	r1, #4
 800f1bc:	438a      	bics	r2, r1
 800f1be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	681a      	ldr	r2, [r3, #0]
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	210a      	movs	r1, #10
 800f1cc:	430a      	orrs	r2, r1
 800f1ce:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	681a      	ldr	r2, [r3, #0]
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	2101      	movs	r1, #1
 800f1dc:	430a      	orrs	r2, r1
 800f1de:	601a      	str	r2, [r3, #0]
 800f1e0:	e007      	b.n	800f1f2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	2224      	movs	r2, #36	@ 0x24
 800f1e6:	2100      	movs	r1, #0
 800f1e8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800f1ea:	2317      	movs	r3, #23
 800f1ec:	18fb      	adds	r3, r7, r3
 800f1ee:	2202      	movs	r2, #2
 800f1f0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800f1f2:	2317      	movs	r3, #23
 800f1f4:	18fb      	adds	r3, r7, r3
 800f1f6:	781b      	ldrb	r3, [r3, #0]
}
 800f1f8:	0018      	movs	r0, r3
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	b006      	add	sp, #24
 800f1fe:	bd80      	pop	{r7, pc}

0800f200 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b084      	sub	sp, #16
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f208:	230f      	movs	r3, #15
 800f20a:	18fb      	adds	r3, r7, r3
 800f20c:	2200      	movs	r2, #0
 800f20e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2225      	movs	r2, #37	@ 0x25
 800f214:	5c9b      	ldrb	r3, [r3, r2]
 800f216:	b2db      	uxtb	r3, r3
 800f218:	2b02      	cmp	r3, #2
 800f21a:	d008      	beq.n	800f22e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2204      	movs	r2, #4
 800f220:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2224      	movs	r2, #36	@ 0x24
 800f226:	2100      	movs	r1, #0
 800f228:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800f22a:	2301      	movs	r3, #1
 800f22c:	e024      	b.n	800f278 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	681a      	ldr	r2, [r3, #0]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	210e      	movs	r1, #14
 800f23a:	438a      	bics	r2, r1
 800f23c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	681a      	ldr	r2, [r3, #0]
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	2101      	movs	r1, #1
 800f24a:	438a      	bics	r2, r1
 800f24c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f252:	221c      	movs	r2, #28
 800f254:	401a      	ands	r2, r3
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f25a:	2101      	movs	r1, #1
 800f25c:	4091      	lsls	r1, r2
 800f25e:	000a      	movs	r2, r1
 800f260:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2225      	movs	r2, #37	@ 0x25
 800f266:	2101      	movs	r1, #1
 800f268:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2224      	movs	r2, #36	@ 0x24
 800f26e:	2100      	movs	r1, #0
 800f270:	5499      	strb	r1, [r3, r2]

    return status;
 800f272:	230f      	movs	r3, #15
 800f274:	18fb      	adds	r3, r7, r3
 800f276:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f278:	0018      	movs	r0, r3
 800f27a:	46bd      	mov	sp, r7
 800f27c:	b004      	add	sp, #16
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b084      	sub	sp, #16
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f288:	210f      	movs	r1, #15
 800f28a:	187b      	adds	r3, r7, r1
 800f28c:	2200      	movs	r2, #0
 800f28e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2225      	movs	r2, #37	@ 0x25
 800f294:	5c9b      	ldrb	r3, [r3, r2]
 800f296:	b2db      	uxtb	r3, r3
 800f298:	2b02      	cmp	r3, #2
 800f29a:	d006      	beq.n	800f2aa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2204      	movs	r2, #4
 800f2a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800f2a2:	187b      	adds	r3, r7, r1
 800f2a4:	2201      	movs	r2, #1
 800f2a6:	701a      	strb	r2, [r3, #0]
 800f2a8:	e02a      	b.n	800f300 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	210e      	movs	r1, #14
 800f2b6:	438a      	bics	r2, r1
 800f2b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	681a      	ldr	r2, [r3, #0]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	2101      	movs	r1, #1
 800f2c6:	438a      	bics	r2, r1
 800f2c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2ce:	221c      	movs	r2, #28
 800f2d0:	401a      	ands	r2, r3
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2d6:	2101      	movs	r1, #1
 800f2d8:	4091      	lsls	r1, r2
 800f2da:	000a      	movs	r2, r1
 800f2dc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2225      	movs	r2, #37	@ 0x25
 800f2e2:	2101      	movs	r1, #1
 800f2e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2224      	movs	r2, #36	@ 0x24
 800f2ea:	2100      	movs	r1, #0
 800f2ec:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d004      	beq.n	800f300 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	0010      	movs	r0, r2
 800f2fe:	4798      	blx	r3
    }
  }
  return status;
 800f300:	230f      	movs	r3, #15
 800f302:	18fb      	adds	r3, r7, r3
 800f304:	781b      	ldrb	r3, [r3, #0]
}
 800f306:	0018      	movs	r0, r3
 800f308:	46bd      	mov	sp, r7
 800f30a:	b004      	add	sp, #16
 800f30c:	bd80      	pop	{r7, pc}

0800f30e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f30e:	b580      	push	{r7, lr}
 800f310:	b084      	sub	sp, #16
 800f312:	af00      	add	r7, sp, #0
 800f314:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f32a:	221c      	movs	r2, #28
 800f32c:	4013      	ands	r3, r2
 800f32e:	2204      	movs	r2, #4
 800f330:	409a      	lsls	r2, r3
 800f332:	0013      	movs	r3, r2
 800f334:	68fa      	ldr	r2, [r7, #12]
 800f336:	4013      	ands	r3, r2
 800f338:	d026      	beq.n	800f388 <HAL_DMA_IRQHandler+0x7a>
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	2204      	movs	r2, #4
 800f33e:	4013      	ands	r3, r2
 800f340:	d022      	beq.n	800f388 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	2220      	movs	r2, #32
 800f34a:	4013      	ands	r3, r2
 800f34c:	d107      	bne.n	800f35e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	681a      	ldr	r2, [r3, #0]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	2104      	movs	r1, #4
 800f35a:	438a      	bics	r2, r1
 800f35c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f362:	221c      	movs	r2, #28
 800f364:	401a      	ands	r2, r3
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f36a:	2104      	movs	r1, #4
 800f36c:	4091      	lsls	r1, r2
 800f36e:	000a      	movs	r2, r1
 800f370:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f376:	2b00      	cmp	r3, #0
 800f378:	d100      	bne.n	800f37c <HAL_DMA_IRQHandler+0x6e>
 800f37a:	e071      	b.n	800f460 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f380:	687a      	ldr	r2, [r7, #4]
 800f382:	0010      	movs	r0, r2
 800f384:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800f386:	e06b      	b.n	800f460 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f38c:	221c      	movs	r2, #28
 800f38e:	4013      	ands	r3, r2
 800f390:	2202      	movs	r2, #2
 800f392:	409a      	lsls	r2, r3
 800f394:	0013      	movs	r3, r2
 800f396:	68fa      	ldr	r2, [r7, #12]
 800f398:	4013      	ands	r3, r2
 800f39a:	d02d      	beq.n	800f3f8 <HAL_DMA_IRQHandler+0xea>
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	2202      	movs	r2, #2
 800f3a0:	4013      	ands	r3, r2
 800f3a2:	d029      	beq.n	800f3f8 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	2220      	movs	r2, #32
 800f3ac:	4013      	ands	r3, r2
 800f3ae:	d10b      	bne.n	800f3c8 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	210a      	movs	r1, #10
 800f3bc:	438a      	bics	r2, r1
 800f3be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2225      	movs	r2, #37	@ 0x25
 800f3c4:	2101      	movs	r1, #1
 800f3c6:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3cc:	221c      	movs	r2, #28
 800f3ce:	401a      	ands	r2, r3
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3d4:	2102      	movs	r1, #2
 800f3d6:	4091      	lsls	r1, r2
 800f3d8:	000a      	movs	r2, r1
 800f3da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2224      	movs	r2, #36	@ 0x24
 800f3e0:	2100      	movs	r1, #0
 800f3e2:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d039      	beq.n	800f460 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3f0:	687a      	ldr	r2, [r7, #4]
 800f3f2:	0010      	movs	r0, r2
 800f3f4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800f3f6:	e033      	b.n	800f460 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3fc:	221c      	movs	r2, #28
 800f3fe:	4013      	ands	r3, r2
 800f400:	2208      	movs	r2, #8
 800f402:	409a      	lsls	r2, r3
 800f404:	0013      	movs	r3, r2
 800f406:	68fa      	ldr	r2, [r7, #12]
 800f408:	4013      	ands	r3, r2
 800f40a:	d02a      	beq.n	800f462 <HAL_DMA_IRQHandler+0x154>
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	2208      	movs	r2, #8
 800f410:	4013      	ands	r3, r2
 800f412:	d026      	beq.n	800f462 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	681a      	ldr	r2, [r3, #0]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	210e      	movs	r1, #14
 800f420:	438a      	bics	r2, r1
 800f422:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f428:	221c      	movs	r2, #28
 800f42a:	401a      	ands	r2, r3
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f430:	2101      	movs	r1, #1
 800f432:	4091      	lsls	r1, r2
 800f434:	000a      	movs	r2, r1
 800f436:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2201      	movs	r2, #1
 800f43c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2225      	movs	r2, #37	@ 0x25
 800f442:	2101      	movs	r1, #1
 800f444:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2224      	movs	r2, #36	@ 0x24
 800f44a:	2100      	movs	r1, #0
 800f44c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f452:	2b00      	cmp	r3, #0
 800f454:	d005      	beq.n	800f462 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f45a:	687a      	ldr	r2, [r7, #4]
 800f45c:	0010      	movs	r0, r2
 800f45e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800f460:	46c0      	nop			@ (mov r8, r8)
 800f462:	46c0      	nop			@ (mov r8, r8)
}
 800f464:	46bd      	mov	sp, r7
 800f466:	b004      	add	sp, #16
 800f468:	bd80      	pop	{r7, pc}

0800f46a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800f46a:	b580      	push	{r7, lr}
 800f46c:	b082      	sub	sp, #8
 800f46e:	af00      	add	r7, sp, #0
 800f470:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2225      	movs	r2, #37	@ 0x25
 800f476:	5c9b      	ldrb	r3, [r3, r2]
 800f478:	b2db      	uxtb	r3, r3
}
 800f47a:	0018      	movs	r0, r3
 800f47c:	46bd      	mov	sp, r7
 800f47e:	b002      	add	sp, #8
 800f480:	bd80      	pop	{r7, pc}

0800f482 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f482:	b580      	push	{r7, lr}
 800f484:	b084      	sub	sp, #16
 800f486:	af00      	add	r7, sp, #0
 800f488:	60f8      	str	r0, [r7, #12]
 800f48a:	60b9      	str	r1, [r7, #8]
 800f48c:	607a      	str	r2, [r7, #4]
 800f48e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f494:	221c      	movs	r2, #28
 800f496:	401a      	ands	r2, r3
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f49c:	2101      	movs	r1, #1
 800f49e:	4091      	lsls	r1, r2
 800f4a0:	000a      	movs	r2, r1
 800f4a2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	683a      	ldr	r2, [r7, #0]
 800f4aa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	689b      	ldr	r3, [r3, #8]
 800f4b0:	2b10      	cmp	r3, #16
 800f4b2:	d108      	bne.n	800f4c6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	68ba      	ldr	r2, [r7, #8]
 800f4c2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800f4c4:	e007      	b.n	800f4d6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	68ba      	ldr	r2, [r7, #8]
 800f4cc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	687a      	ldr	r2, [r7, #4]
 800f4d4:	60da      	str	r2, [r3, #12]
}
 800f4d6:	46c0      	nop			@ (mov r8, r8)
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	b004      	add	sp, #16
 800f4dc:	bd80      	pop	{r7, pc}
	...

0800f4e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b084      	sub	sp, #16
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800f4e8:	f7ff f8d2 	bl	800e690 <HAL_GetTick>
 800f4ec:	0003      	movs	r3, r0
 800f4ee:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800f4f0:	e00f      	b.n	800f512 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	d00c      	beq.n	800f512 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d007      	beq.n	800f50e <FLASH_WaitForLastOperation+0x2e>
 800f4fe:	f7ff f8c7 	bl	800e690 <HAL_GetTick>
 800f502:	0002      	movs	r2, r0
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	1ad3      	subs	r3, r2, r3
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d201      	bcs.n	800f512 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800f50e:	2303      	movs	r3, #3
 800f510:	e052      	b.n	800f5b8 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800f512:	4b2b      	ldr	r3, [pc, #172]	@ (800f5c0 <FLASH_WaitForLastOperation+0xe0>)
 800f514:	699b      	ldr	r3, [r3, #24]
 800f516:	2201      	movs	r2, #1
 800f518:	4013      	ands	r3, r2
 800f51a:	2b01      	cmp	r3, #1
 800f51c:	d0e9      	beq.n	800f4f2 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800f51e:	4b28      	ldr	r3, [pc, #160]	@ (800f5c0 <FLASH_WaitForLastOperation+0xe0>)
 800f520:	699b      	ldr	r3, [r3, #24]
 800f522:	2202      	movs	r2, #2
 800f524:	4013      	ands	r3, r2
 800f526:	2b02      	cmp	r3, #2
 800f528:	d102      	bne.n	800f530 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800f52a:	4b25      	ldr	r3, [pc, #148]	@ (800f5c0 <FLASH_WaitForLastOperation+0xe0>)
 800f52c:	2202      	movs	r2, #2
 800f52e:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800f530:	4b23      	ldr	r3, [pc, #140]	@ (800f5c0 <FLASH_WaitForLastOperation+0xe0>)
 800f532:	699a      	ldr	r2, [r3, #24]
 800f534:	2380      	movs	r3, #128	@ 0x80
 800f536:	005b      	lsls	r3, r3, #1
 800f538:	401a      	ands	r2, r3
 800f53a:	2380      	movs	r3, #128	@ 0x80
 800f53c:	005b      	lsls	r3, r3, #1
 800f53e:	429a      	cmp	r2, r3
 800f540:	d035      	beq.n	800f5ae <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800f542:	4b1f      	ldr	r3, [pc, #124]	@ (800f5c0 <FLASH_WaitForLastOperation+0xe0>)
 800f544:	699a      	ldr	r2, [r3, #24]
 800f546:	2380      	movs	r3, #128	@ 0x80
 800f548:	009b      	lsls	r3, r3, #2
 800f54a:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800f54c:	2380      	movs	r3, #128	@ 0x80
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	429a      	cmp	r2, r3
 800f552:	d02c      	beq.n	800f5ae <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800f554:	4b1a      	ldr	r3, [pc, #104]	@ (800f5c0 <FLASH_WaitForLastOperation+0xe0>)
 800f556:	699a      	ldr	r2, [r3, #24]
 800f558:	2380      	movs	r3, #128	@ 0x80
 800f55a:	00db      	lsls	r3, r3, #3
 800f55c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800f55e:	2380      	movs	r3, #128	@ 0x80
 800f560:	00db      	lsls	r3, r3, #3
 800f562:	429a      	cmp	r2, r3
 800f564:	d023      	beq.n	800f5ae <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800f566:	4b16      	ldr	r3, [pc, #88]	@ (800f5c0 <FLASH_WaitForLastOperation+0xe0>)
 800f568:	699a      	ldr	r2, [r3, #24]
 800f56a:	2380      	movs	r3, #128	@ 0x80
 800f56c:	011b      	lsls	r3, r3, #4
 800f56e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800f570:	2380      	movs	r3, #128	@ 0x80
 800f572:	011b      	lsls	r3, r3, #4
 800f574:	429a      	cmp	r2, r3
 800f576:	d01a      	beq.n	800f5ae <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800f578:	4b11      	ldr	r3, [pc, #68]	@ (800f5c0 <FLASH_WaitForLastOperation+0xe0>)
 800f57a:	699a      	ldr	r2, [r3, #24]
 800f57c:	2380      	movs	r3, #128	@ 0x80
 800f57e:	019b      	lsls	r3, r3, #6
 800f580:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800f582:	2380      	movs	r3, #128	@ 0x80
 800f584:	019b      	lsls	r3, r3, #6
 800f586:	429a      	cmp	r2, r3
 800f588:	d011      	beq.n	800f5ae <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800f58a:	4b0d      	ldr	r3, [pc, #52]	@ (800f5c0 <FLASH_WaitForLastOperation+0xe0>)
 800f58c:	699a      	ldr	r2, [r3, #24]
 800f58e:	2380      	movs	r3, #128	@ 0x80
 800f590:	029b      	lsls	r3, r3, #10
 800f592:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800f594:	2380      	movs	r3, #128	@ 0x80
 800f596:	029b      	lsls	r3, r3, #10
 800f598:	429a      	cmp	r2, r3
 800f59a:	d008      	beq.n	800f5ae <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800f59c:	4b08      	ldr	r3, [pc, #32]	@ (800f5c0 <FLASH_WaitForLastOperation+0xe0>)
 800f59e:	699a      	ldr	r2, [r3, #24]
 800f5a0:	2380      	movs	r3, #128	@ 0x80
 800f5a2:	025b      	lsls	r3, r3, #9
 800f5a4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800f5a6:	2380      	movs	r3, #128	@ 0x80
 800f5a8:	025b      	lsls	r3, r3, #9
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d103      	bne.n	800f5b6 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800f5ae:	f000 f809 	bl	800f5c4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	e000      	b.n	800f5b8 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800f5b6:	2300      	movs	r3, #0
}
 800f5b8:	0018      	movs	r0, r3
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	b004      	add	sp, #16
 800f5be:	bd80      	pop	{r7, pc}
 800f5c0:	40022000 	.word	0x40022000

0800f5c4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b082      	sub	sp, #8
 800f5c8:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800f5ce:	4b49      	ldr	r3, [pc, #292]	@ (800f6f4 <FLASH_SetErrorCode+0x130>)
 800f5d0:	699a      	ldr	r2, [r3, #24]
 800f5d2:	2380      	movs	r3, #128	@ 0x80
 800f5d4:	005b      	lsls	r3, r3, #1
 800f5d6:	401a      	ands	r2, r3
 800f5d8:	2380      	movs	r3, #128	@ 0x80
 800f5da:	005b      	lsls	r3, r3, #1
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	d10a      	bne.n	800f5f6 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800f5e0:	4b45      	ldr	r3, [pc, #276]	@ (800f6f8 <FLASH_SetErrorCode+0x134>)
 800f5e2:	695b      	ldr	r3, [r3, #20]
 800f5e4:	2202      	movs	r2, #2
 800f5e6:	431a      	orrs	r2, r3
 800f5e8:	4b43      	ldr	r3, [pc, #268]	@ (800f6f8 <FLASH_SetErrorCode+0x134>)
 800f5ea:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2280      	movs	r2, #128	@ 0x80
 800f5f0:	0052      	lsls	r2, r2, #1
 800f5f2:	4313      	orrs	r3, r2
 800f5f4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800f5f6:	4b3f      	ldr	r3, [pc, #252]	@ (800f6f4 <FLASH_SetErrorCode+0x130>)
 800f5f8:	699a      	ldr	r2, [r3, #24]
 800f5fa:	2380      	movs	r3, #128	@ 0x80
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	401a      	ands	r2, r3
 800f600:	2380      	movs	r3, #128	@ 0x80
 800f602:	009b      	lsls	r3, r3, #2
 800f604:	429a      	cmp	r2, r3
 800f606:	d10a      	bne.n	800f61e <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800f608:	4b3b      	ldr	r3, [pc, #236]	@ (800f6f8 <FLASH_SetErrorCode+0x134>)
 800f60a:	695b      	ldr	r3, [r3, #20]
 800f60c:	2201      	movs	r2, #1
 800f60e:	431a      	orrs	r2, r3
 800f610:	4b39      	ldr	r3, [pc, #228]	@ (800f6f8 <FLASH_SetErrorCode+0x134>)
 800f612:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2280      	movs	r2, #128	@ 0x80
 800f618:	0092      	lsls	r2, r2, #2
 800f61a:	4313      	orrs	r3, r2
 800f61c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800f61e:	4b35      	ldr	r3, [pc, #212]	@ (800f6f4 <FLASH_SetErrorCode+0x130>)
 800f620:	699a      	ldr	r2, [r3, #24]
 800f622:	2380      	movs	r3, #128	@ 0x80
 800f624:	00db      	lsls	r3, r3, #3
 800f626:	401a      	ands	r2, r3
 800f628:	2380      	movs	r3, #128	@ 0x80
 800f62a:	00db      	lsls	r3, r3, #3
 800f62c:	429a      	cmp	r2, r3
 800f62e:	d10a      	bne.n	800f646 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800f630:	4b31      	ldr	r3, [pc, #196]	@ (800f6f8 <FLASH_SetErrorCode+0x134>)
 800f632:	695b      	ldr	r3, [r3, #20]
 800f634:	2208      	movs	r2, #8
 800f636:	431a      	orrs	r2, r3
 800f638:	4b2f      	ldr	r3, [pc, #188]	@ (800f6f8 <FLASH_SetErrorCode+0x134>)
 800f63a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2280      	movs	r2, #128	@ 0x80
 800f640:	00d2      	lsls	r2, r2, #3
 800f642:	4313      	orrs	r3, r2
 800f644:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800f646:	4b2b      	ldr	r3, [pc, #172]	@ (800f6f4 <FLASH_SetErrorCode+0x130>)
 800f648:	699a      	ldr	r2, [r3, #24]
 800f64a:	2380      	movs	r3, #128	@ 0x80
 800f64c:	011b      	lsls	r3, r3, #4
 800f64e:	401a      	ands	r2, r3
 800f650:	2380      	movs	r3, #128	@ 0x80
 800f652:	011b      	lsls	r3, r3, #4
 800f654:	429a      	cmp	r2, r3
 800f656:	d10a      	bne.n	800f66e <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800f658:	4b27      	ldr	r3, [pc, #156]	@ (800f6f8 <FLASH_SetErrorCode+0x134>)
 800f65a:	695b      	ldr	r3, [r3, #20]
 800f65c:	2204      	movs	r2, #4
 800f65e:	431a      	orrs	r2, r3
 800f660:	4b25      	ldr	r3, [pc, #148]	@ (800f6f8 <FLASH_SetErrorCode+0x134>)
 800f662:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2280      	movs	r2, #128	@ 0x80
 800f668:	0112      	lsls	r2, r2, #4
 800f66a:	4313      	orrs	r3, r2
 800f66c:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800f66e:	4b21      	ldr	r3, [pc, #132]	@ (800f6f4 <FLASH_SetErrorCode+0x130>)
 800f670:	699a      	ldr	r2, [r3, #24]
 800f672:	2380      	movs	r3, #128	@ 0x80
 800f674:	019b      	lsls	r3, r3, #6
 800f676:	401a      	ands	r2, r3
 800f678:	2380      	movs	r3, #128	@ 0x80
 800f67a:	019b      	lsls	r3, r3, #6
 800f67c:	429a      	cmp	r2, r3
 800f67e:	d10a      	bne.n	800f696 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800f680:	4b1d      	ldr	r3, [pc, #116]	@ (800f6f8 <FLASH_SetErrorCode+0x134>)
 800f682:	695b      	ldr	r3, [r3, #20]
 800f684:	2210      	movs	r2, #16
 800f686:	431a      	orrs	r2, r3
 800f688:	4b1b      	ldr	r3, [pc, #108]	@ (800f6f8 <FLASH_SetErrorCode+0x134>)
 800f68a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2280      	movs	r2, #128	@ 0x80
 800f690:	0192      	lsls	r2, r2, #6
 800f692:	4313      	orrs	r3, r2
 800f694:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800f696:	4b17      	ldr	r3, [pc, #92]	@ (800f6f4 <FLASH_SetErrorCode+0x130>)
 800f698:	699a      	ldr	r2, [r3, #24]
 800f69a:	2380      	movs	r3, #128	@ 0x80
 800f69c:	029b      	lsls	r3, r3, #10
 800f69e:	401a      	ands	r2, r3
 800f6a0:	2380      	movs	r3, #128	@ 0x80
 800f6a2:	029b      	lsls	r3, r3, #10
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d109      	bne.n	800f6bc <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800f6a8:	4b13      	ldr	r3, [pc, #76]	@ (800f6f8 <FLASH_SetErrorCode+0x134>)
 800f6aa:	695b      	ldr	r3, [r3, #20]
 800f6ac:	2220      	movs	r2, #32
 800f6ae:	431a      	orrs	r2, r3
 800f6b0:	4b11      	ldr	r3, [pc, #68]	@ (800f6f8 <FLASH_SetErrorCode+0x134>)
 800f6b2:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2220      	movs	r2, #32
 800f6b8:	4313      	orrs	r3, r2
 800f6ba:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800f6bc:	4b0d      	ldr	r3, [pc, #52]	@ (800f6f4 <FLASH_SetErrorCode+0x130>)
 800f6be:	699a      	ldr	r2, [r3, #24]
 800f6c0:	2380      	movs	r3, #128	@ 0x80
 800f6c2:	025b      	lsls	r3, r3, #9
 800f6c4:	401a      	ands	r2, r3
 800f6c6:	2380      	movs	r3, #128	@ 0x80
 800f6c8:	025b      	lsls	r3, r3, #9
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d10a      	bne.n	800f6e4 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800f6ce:	4b0a      	ldr	r3, [pc, #40]	@ (800f6f8 <FLASH_SetErrorCode+0x134>)
 800f6d0:	695b      	ldr	r3, [r3, #20]
 800f6d2:	2240      	movs	r2, #64	@ 0x40
 800f6d4:	431a      	orrs	r2, r3
 800f6d6:	4b08      	ldr	r3, [pc, #32]	@ (800f6f8 <FLASH_SetErrorCode+0x134>)
 800f6d8:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2280      	movs	r2, #128	@ 0x80
 800f6de:	0252      	lsls	r2, r2, #9
 800f6e0:	4313      	orrs	r3, r2
 800f6e2:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800f6e4:	4b03      	ldr	r3, [pc, #12]	@ (800f6f4 <FLASH_SetErrorCode+0x130>)
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	619a      	str	r2, [r3, #24]
}  
 800f6ea:	46c0      	nop			@ (mov r8, r8)
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	b002      	add	sp, #8
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	46c0      	nop			@ (mov r8, r8)
 800f6f4:	40022000 	.word	0x40022000
 800f6f8:	200025a4 	.word	0x200025a4

0800f6fc <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b084      	sub	sp, #16
 800f700:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800f702:	4b12      	ldr	r3, [pc, #72]	@ (800f74c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f704:	685b      	ldr	r3, [r3, #4]
 800f706:	2201      	movs	r2, #1
 800f708:	4013      	ands	r3, r2
 800f70a:	d019      	beq.n	800f740 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f70c:	f3ef 8310 	mrs	r3, PRIMASK
 800f710:	607b      	str	r3, [r7, #4]
  return(result);
 800f712:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800f714:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f716:	b672      	cpsid	i
}
 800f718:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800f71a:	4b0c      	ldr	r3, [pc, #48]	@ (800f74c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f71c:	4a0c      	ldr	r2, [pc, #48]	@ (800f750 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800f71e:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800f720:	4b0a      	ldr	r3, [pc, #40]	@ (800f74c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f722:	4a0c      	ldr	r2, [pc, #48]	@ (800f754 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800f724:	60da      	str	r2, [r3, #12]
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	f383 8810 	msr	PRIMASK, r3
}
 800f730:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800f732:	4b06      	ldr	r3, [pc, #24]	@ (800f74c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	2201      	movs	r2, #1
 800f738:	4013      	ands	r3, r2
 800f73a:	d001      	beq.n	800f740 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800f73c:	2301      	movs	r3, #1
 800f73e:	e000      	b.n	800f742 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800f740:	2300      	movs	r3, #0
}
 800f742:	0018      	movs	r0, r3
 800f744:	46bd      	mov	sp, r7
 800f746:	b004      	add	sp, #16
 800f748:	bd80      	pop	{r7, pc}
 800f74a:	46c0      	nop			@ (mov r8, r8)
 800f74c:	40022000 	.word	0x40022000
 800f750:	89abcdef 	.word	0x89abcdef
 800f754:	02030405 	.word	0x02030405

0800f758 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800f75c:	4b04      	ldr	r3, [pc, #16]	@ (800f770 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800f75e:	685a      	ldr	r2, [r3, #4]
 800f760:	4b03      	ldr	r3, [pc, #12]	@ (800f770 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800f762:	2101      	movs	r1, #1
 800f764:	430a      	orrs	r2, r1
 800f766:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800f768:	2300      	movs	r3, #0
}
 800f76a:	0018      	movs	r0, r3
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}
 800f770:	40022000 	.word	0x40022000

0800f774 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800f774:	b5b0      	push	{r4, r5, r7, lr}
 800f776:	b084      	sub	sp, #16
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f77c:	250f      	movs	r5, #15
 800f77e:	197b      	adds	r3, r7, r5
 800f780:	2200      	movs	r2, #0
 800f782:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f784:	197c      	adds	r4, r7, r5
 800f786:	4b0f      	ldr	r3, [pc, #60]	@ (800f7c4 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800f788:	0018      	movs	r0, r3
 800f78a:	f7ff fea9 	bl	800f4e0 <FLASH_WaitForLastOperation>
 800f78e:	0003      	movs	r3, r0
 800f790:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800f792:	0029      	movs	r1, r5
 800f794:	187b      	adds	r3, r7, r1
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d10c      	bne.n	800f7b6 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f79c:	4b0a      	ldr	r3, [pc, #40]	@ (800f7c8 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800f79e:	2200      	movs	r2, #0
 800f7a0:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f7a8:	187c      	adds	r4, r7, r1
 800f7aa:	4b06      	ldr	r3, [pc, #24]	@ (800f7c4 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800f7ac:	0018      	movs	r0, r3
 800f7ae:	f7ff fe97 	bl	800f4e0 <FLASH_WaitForLastOperation>
 800f7b2:	0003      	movs	r3, r0
 800f7b4:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800f7b6:	230f      	movs	r3, #15
 800f7b8:	18fb      	adds	r3, r7, r3
 800f7ba:	781b      	ldrb	r3, [r3, #0]
}  
 800f7bc:	0018      	movs	r0, r3
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	b004      	add	sp, #16
 800f7c2:	bdb0      	pop	{r4, r5, r7, pc}
 800f7c4:	0000c350 	.word	0x0000c350
 800f7c8:	200025a4 	.word	0x200025a4

0800f7cc <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800f7cc:	b5b0      	push	{r4, r5, r7, lr}
 800f7ce:	b086      	sub	sp, #24
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	60f8      	str	r0, [r7, #12]
 800f7d4:	60b9      	str	r1, [r7, #8]
 800f7d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f7d8:	2317      	movs	r3, #23
 800f7da:	18fb      	adds	r3, r7, r3
 800f7dc:	2201      	movs	r2, #1
 800f7de:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800f7e0:	4b24      	ldr	r3, [pc, #144]	@ (800f874 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f7e2:	7c1b      	ldrb	r3, [r3, #16]
 800f7e4:	2b01      	cmp	r3, #1
 800f7e6:	d101      	bne.n	800f7ec <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800f7e8:	2302      	movs	r3, #2
 800f7ea:	e03e      	b.n	800f86a <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800f7ec:	4b21      	ldr	r3, [pc, #132]	@ (800f874 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f7ee:	2201      	movs	r2, #1
 800f7f0:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f7f2:	2517      	movs	r5, #23
 800f7f4:	197c      	adds	r4, r7, r5
 800f7f6:	4b20      	ldr	r3, [pc, #128]	@ (800f878 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800f7f8:	0018      	movs	r0, r3
 800f7fa:	f7ff fe71 	bl	800f4e0 <FLASH_WaitForLastOperation>
 800f7fe:	0003      	movs	r3, r0
 800f800:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800f802:	197b      	adds	r3, r7, r5
 800f804:	781b      	ldrb	r3, [r3, #0]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d129      	bne.n	800f85e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f80a:	4b1a      	ldr	r3, [pc, #104]	@ (800f874 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f80c:	2200      	movs	r2, #0
 800f80e:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	2b02      	cmp	r3, #2
 800f814:	d103      	bne.n	800f81e <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	687a      	ldr	r2, [r7, #4]
 800f81a:	601a      	str	r2, [r3, #0]
 800f81c:	e013      	b.n	800f846 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	2b01      	cmp	r3, #1
 800f822:	d104      	bne.n	800f82e <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	687a      	ldr	r2, [r7, #4]
 800f828:	b292      	uxth	r2, r2
 800f82a:	801a      	strh	r2, [r3, #0]
 800f82c:	e00b      	b.n	800f846 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d104      	bne.n	800f83e <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	687a      	ldr	r2, [r7, #4]
 800f838:	b2d2      	uxtb	r2, r2
 800f83a:	701a      	strb	r2, [r3, #0]
 800f83c:	e003      	b.n	800f846 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800f83e:	2317      	movs	r3, #23
 800f840:	18fb      	adds	r3, r7, r3
 800f842:	2201      	movs	r2, #1
 800f844:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800f846:	2217      	movs	r2, #23
 800f848:	18bb      	adds	r3, r7, r2
 800f84a:	781b      	ldrb	r3, [r3, #0]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d106      	bne.n	800f85e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f850:	18bc      	adds	r4, r7, r2
 800f852:	4b09      	ldr	r3, [pc, #36]	@ (800f878 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800f854:	0018      	movs	r0, r3
 800f856:	f7ff fe43 	bl	800f4e0 <FLASH_WaitForLastOperation>
 800f85a:	0003      	movs	r3, r0
 800f85c:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800f85e:	4b05      	ldr	r3, [pc, #20]	@ (800f874 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f860:	2200      	movs	r2, #0
 800f862:	741a      	strb	r2, [r3, #16]

  return status;
 800f864:	2317      	movs	r3, #23
 800f866:	18fb      	adds	r3, r7, r3
 800f868:	781b      	ldrb	r3, [r3, #0]
}
 800f86a:	0018      	movs	r0, r3
 800f86c:	46bd      	mov	sp, r7
 800f86e:	b006      	add	sp, #24
 800f870:	bdb0      	pop	{r4, r5, r7, pc}
 800f872:	46c0      	nop			@ (mov r8, r8)
 800f874:	200025a4 	.word	0x200025a4
 800f878:	0000c350 	.word	0x0000c350

0800f87c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b086      	sub	sp, #24
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800f886:	2300      	movs	r3, #0
 800f888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800f88a:	2300      	movs	r3, #0
 800f88c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800f88e:	2300      	movs	r3, #0
 800f890:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800f892:	e155      	b.n	800fb40 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	2101      	movs	r1, #1
 800f89a:	697a      	ldr	r2, [r7, #20]
 800f89c:	4091      	lsls	r1, r2
 800f89e:	000a      	movs	r2, r1
 800f8a0:	4013      	ands	r3, r2
 800f8a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d100      	bne.n	800f8ac <HAL_GPIO_Init+0x30>
 800f8aa:	e146      	b.n	800fb3a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	2203      	movs	r2, #3
 800f8b2:	4013      	ands	r3, r2
 800f8b4:	2b01      	cmp	r3, #1
 800f8b6:	d005      	beq.n	800f8c4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	2203      	movs	r2, #3
 800f8be:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800f8c0:	2b02      	cmp	r3, #2
 800f8c2:	d130      	bne.n	800f926 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	689b      	ldr	r3, [r3, #8]
 800f8c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	005b      	lsls	r3, r3, #1
 800f8ce:	2203      	movs	r2, #3
 800f8d0:	409a      	lsls	r2, r3
 800f8d2:	0013      	movs	r3, r2
 800f8d4:	43da      	mvns	r2, r3
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	4013      	ands	r3, r2
 800f8da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	68da      	ldr	r2, [r3, #12]
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	005b      	lsls	r3, r3, #1
 800f8e4:	409a      	lsls	r2, r3
 800f8e6:	0013      	movs	r3, r2
 800f8e8:	693a      	ldr	r2, [r7, #16]
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	693a      	ldr	r2, [r7, #16]
 800f8f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	685b      	ldr	r3, [r3, #4]
 800f8f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f8fa:	2201      	movs	r2, #1
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	409a      	lsls	r2, r3
 800f900:	0013      	movs	r3, r2
 800f902:	43da      	mvns	r2, r3
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	4013      	ands	r3, r2
 800f908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	685b      	ldr	r3, [r3, #4]
 800f90e:	091b      	lsrs	r3, r3, #4
 800f910:	2201      	movs	r2, #1
 800f912:	401a      	ands	r2, r3
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	409a      	lsls	r2, r3
 800f918:	0013      	movs	r3, r2
 800f91a:	693a      	ldr	r2, [r7, #16]
 800f91c:	4313      	orrs	r3, r2
 800f91e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	693a      	ldr	r2, [r7, #16]
 800f924:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	685b      	ldr	r3, [r3, #4]
 800f92a:	2203      	movs	r2, #3
 800f92c:	4013      	ands	r3, r2
 800f92e:	2b03      	cmp	r3, #3
 800f930:	d017      	beq.n	800f962 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	68db      	ldr	r3, [r3, #12]
 800f936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f938:	697b      	ldr	r3, [r7, #20]
 800f93a:	005b      	lsls	r3, r3, #1
 800f93c:	2203      	movs	r2, #3
 800f93e:	409a      	lsls	r2, r3
 800f940:	0013      	movs	r3, r2
 800f942:	43da      	mvns	r2, r3
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	4013      	ands	r3, r2
 800f948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	689a      	ldr	r2, [r3, #8]
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	005b      	lsls	r3, r3, #1
 800f952:	409a      	lsls	r2, r3
 800f954:	0013      	movs	r3, r2
 800f956:	693a      	ldr	r2, [r7, #16]
 800f958:	4313      	orrs	r3, r2
 800f95a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	693a      	ldr	r2, [r7, #16]
 800f960:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	2203      	movs	r2, #3
 800f968:	4013      	ands	r3, r2
 800f96a:	2b02      	cmp	r3, #2
 800f96c:	d123      	bne.n	800f9b6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	08da      	lsrs	r2, r3, #3
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	3208      	adds	r2, #8
 800f976:	0092      	lsls	r2, r2, #2
 800f978:	58d3      	ldr	r3, [r2, r3]
 800f97a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	2207      	movs	r2, #7
 800f980:	4013      	ands	r3, r2
 800f982:	009b      	lsls	r3, r3, #2
 800f984:	220f      	movs	r2, #15
 800f986:	409a      	lsls	r2, r3
 800f988:	0013      	movs	r3, r2
 800f98a:	43da      	mvns	r2, r3
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	4013      	ands	r3, r2
 800f990:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	691a      	ldr	r2, [r3, #16]
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	2107      	movs	r1, #7
 800f99a:	400b      	ands	r3, r1
 800f99c:	009b      	lsls	r3, r3, #2
 800f99e:	409a      	lsls	r2, r3
 800f9a0:	0013      	movs	r3, r2
 800f9a2:	693a      	ldr	r2, [r7, #16]
 800f9a4:	4313      	orrs	r3, r2
 800f9a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	08da      	lsrs	r2, r3, #3
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	3208      	adds	r2, #8
 800f9b0:	0092      	lsls	r2, r2, #2
 800f9b2:	6939      	ldr	r1, [r7, #16]
 800f9b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	005b      	lsls	r3, r3, #1
 800f9c0:	2203      	movs	r2, #3
 800f9c2:	409a      	lsls	r2, r3
 800f9c4:	0013      	movs	r3, r2
 800f9c6:	43da      	mvns	r2, r3
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	4013      	ands	r3, r2
 800f9cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	685b      	ldr	r3, [r3, #4]
 800f9d2:	2203      	movs	r2, #3
 800f9d4:	401a      	ands	r2, r3
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	005b      	lsls	r3, r3, #1
 800f9da:	409a      	lsls	r2, r3
 800f9dc:	0013      	movs	r3, r2
 800f9de:	693a      	ldr	r2, [r7, #16]
 800f9e0:	4313      	orrs	r3, r2
 800f9e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	693a      	ldr	r2, [r7, #16]
 800f9e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	685a      	ldr	r2, [r3, #4]
 800f9ee:	23c0      	movs	r3, #192	@ 0xc0
 800f9f0:	029b      	lsls	r3, r3, #10
 800f9f2:	4013      	ands	r3, r2
 800f9f4:	d100      	bne.n	800f9f8 <HAL_GPIO_Init+0x17c>
 800f9f6:	e0a0      	b.n	800fb3a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f9f8:	4b57      	ldr	r3, [pc, #348]	@ (800fb58 <HAL_GPIO_Init+0x2dc>)
 800f9fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f9fc:	4b56      	ldr	r3, [pc, #344]	@ (800fb58 <HAL_GPIO_Init+0x2dc>)
 800f9fe:	2101      	movs	r1, #1
 800fa00:	430a      	orrs	r2, r1
 800fa02:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800fa04:	4a55      	ldr	r2, [pc, #340]	@ (800fb5c <HAL_GPIO_Init+0x2e0>)
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	089b      	lsrs	r3, r3, #2
 800fa0a:	3302      	adds	r3, #2
 800fa0c:	009b      	lsls	r3, r3, #2
 800fa0e:	589b      	ldr	r3, [r3, r2]
 800fa10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	2203      	movs	r2, #3
 800fa16:	4013      	ands	r3, r2
 800fa18:	009b      	lsls	r3, r3, #2
 800fa1a:	220f      	movs	r2, #15
 800fa1c:	409a      	lsls	r2, r3
 800fa1e:	0013      	movs	r3, r2
 800fa20:	43da      	mvns	r2, r3
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	4013      	ands	r3, r2
 800fa26:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800fa28:	687a      	ldr	r2, [r7, #4]
 800fa2a:	23a0      	movs	r3, #160	@ 0xa0
 800fa2c:	05db      	lsls	r3, r3, #23
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d01f      	beq.n	800fa72 <HAL_GPIO_Init+0x1f6>
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	4a4a      	ldr	r2, [pc, #296]	@ (800fb60 <HAL_GPIO_Init+0x2e4>)
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d019      	beq.n	800fa6e <HAL_GPIO_Init+0x1f2>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	4a49      	ldr	r2, [pc, #292]	@ (800fb64 <HAL_GPIO_Init+0x2e8>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d013      	beq.n	800fa6a <HAL_GPIO_Init+0x1ee>
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	4a48      	ldr	r2, [pc, #288]	@ (800fb68 <HAL_GPIO_Init+0x2ec>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d00d      	beq.n	800fa66 <HAL_GPIO_Init+0x1ea>
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	4a47      	ldr	r2, [pc, #284]	@ (800fb6c <HAL_GPIO_Init+0x2f0>)
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d007      	beq.n	800fa62 <HAL_GPIO_Init+0x1e6>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	4a46      	ldr	r2, [pc, #280]	@ (800fb70 <HAL_GPIO_Init+0x2f4>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d101      	bne.n	800fa5e <HAL_GPIO_Init+0x1e2>
 800fa5a:	2305      	movs	r3, #5
 800fa5c:	e00a      	b.n	800fa74 <HAL_GPIO_Init+0x1f8>
 800fa5e:	2306      	movs	r3, #6
 800fa60:	e008      	b.n	800fa74 <HAL_GPIO_Init+0x1f8>
 800fa62:	2304      	movs	r3, #4
 800fa64:	e006      	b.n	800fa74 <HAL_GPIO_Init+0x1f8>
 800fa66:	2303      	movs	r3, #3
 800fa68:	e004      	b.n	800fa74 <HAL_GPIO_Init+0x1f8>
 800fa6a:	2302      	movs	r3, #2
 800fa6c:	e002      	b.n	800fa74 <HAL_GPIO_Init+0x1f8>
 800fa6e:	2301      	movs	r3, #1
 800fa70:	e000      	b.n	800fa74 <HAL_GPIO_Init+0x1f8>
 800fa72:	2300      	movs	r3, #0
 800fa74:	697a      	ldr	r2, [r7, #20]
 800fa76:	2103      	movs	r1, #3
 800fa78:	400a      	ands	r2, r1
 800fa7a:	0092      	lsls	r2, r2, #2
 800fa7c:	4093      	lsls	r3, r2
 800fa7e:	693a      	ldr	r2, [r7, #16]
 800fa80:	4313      	orrs	r3, r2
 800fa82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800fa84:	4935      	ldr	r1, [pc, #212]	@ (800fb5c <HAL_GPIO_Init+0x2e0>)
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	089b      	lsrs	r3, r3, #2
 800fa8a:	3302      	adds	r3, #2
 800fa8c:	009b      	lsls	r3, r3, #2
 800fa8e:	693a      	ldr	r2, [r7, #16]
 800fa90:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800fa92:	4b38      	ldr	r3, [pc, #224]	@ (800fb74 <HAL_GPIO_Init+0x2f8>)
 800fa94:	689b      	ldr	r3, [r3, #8]
 800fa96:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	43da      	mvns	r2, r3
 800fa9c:	693b      	ldr	r3, [r7, #16]
 800fa9e:	4013      	ands	r3, r2
 800faa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	685a      	ldr	r2, [r3, #4]
 800faa6:	2380      	movs	r3, #128	@ 0x80
 800faa8:	035b      	lsls	r3, r3, #13
 800faaa:	4013      	ands	r3, r2
 800faac:	d003      	beq.n	800fab6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800faae:	693a      	ldr	r2, [r7, #16]
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	4313      	orrs	r3, r2
 800fab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800fab6:	4b2f      	ldr	r3, [pc, #188]	@ (800fb74 <HAL_GPIO_Init+0x2f8>)
 800fab8:	693a      	ldr	r2, [r7, #16]
 800faba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800fabc:	4b2d      	ldr	r3, [pc, #180]	@ (800fb74 <HAL_GPIO_Init+0x2f8>)
 800fabe:	68db      	ldr	r3, [r3, #12]
 800fac0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	43da      	mvns	r2, r3
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	4013      	ands	r3, r2
 800faca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	685a      	ldr	r2, [r3, #4]
 800fad0:	2380      	movs	r3, #128	@ 0x80
 800fad2:	039b      	lsls	r3, r3, #14
 800fad4:	4013      	ands	r3, r2
 800fad6:	d003      	beq.n	800fae0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800fad8:	693a      	ldr	r2, [r7, #16]
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	4313      	orrs	r3, r2
 800fade:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800fae0:	4b24      	ldr	r3, [pc, #144]	@ (800fb74 <HAL_GPIO_Init+0x2f8>)
 800fae2:	693a      	ldr	r2, [r7, #16]
 800fae4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800fae6:	4b23      	ldr	r3, [pc, #140]	@ (800fb74 <HAL_GPIO_Init+0x2f8>)
 800fae8:	685b      	ldr	r3, [r3, #4]
 800faea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	43da      	mvns	r2, r3
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	4013      	ands	r3, r2
 800faf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	685a      	ldr	r2, [r3, #4]
 800fafa:	2380      	movs	r3, #128	@ 0x80
 800fafc:	029b      	lsls	r3, r3, #10
 800fafe:	4013      	ands	r3, r2
 800fb00:	d003      	beq.n	800fb0a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800fb02:	693a      	ldr	r2, [r7, #16]
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	4313      	orrs	r3, r2
 800fb08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800fb0a:	4b1a      	ldr	r3, [pc, #104]	@ (800fb74 <HAL_GPIO_Init+0x2f8>)
 800fb0c:	693a      	ldr	r2, [r7, #16]
 800fb0e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800fb10:	4b18      	ldr	r3, [pc, #96]	@ (800fb74 <HAL_GPIO_Init+0x2f8>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	43da      	mvns	r2, r3
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	4013      	ands	r3, r2
 800fb1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	685a      	ldr	r2, [r3, #4]
 800fb24:	2380      	movs	r3, #128	@ 0x80
 800fb26:	025b      	lsls	r3, r3, #9
 800fb28:	4013      	ands	r3, r2
 800fb2a:	d003      	beq.n	800fb34 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800fb2c:	693a      	ldr	r2, [r7, #16]
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	4313      	orrs	r3, r2
 800fb32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800fb34:	4b0f      	ldr	r3, [pc, #60]	@ (800fb74 <HAL_GPIO_Init+0x2f8>)
 800fb36:	693a      	ldr	r2, [r7, #16]
 800fb38:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	3301      	adds	r3, #1
 800fb3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	681a      	ldr	r2, [r3, #0]
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	40da      	lsrs	r2, r3
 800fb48:	1e13      	subs	r3, r2, #0
 800fb4a:	d000      	beq.n	800fb4e <HAL_GPIO_Init+0x2d2>
 800fb4c:	e6a2      	b.n	800f894 <HAL_GPIO_Init+0x18>
  }
}
 800fb4e:	46c0      	nop			@ (mov r8, r8)
 800fb50:	46c0      	nop			@ (mov r8, r8)
 800fb52:	46bd      	mov	sp, r7
 800fb54:	b006      	add	sp, #24
 800fb56:	bd80      	pop	{r7, pc}
 800fb58:	40021000 	.word	0x40021000
 800fb5c:	40010000 	.word	0x40010000
 800fb60:	50000400 	.word	0x50000400
 800fb64:	50000800 	.word	0x50000800
 800fb68:	50000c00 	.word	0x50000c00
 800fb6c:	50001000 	.word	0x50001000
 800fb70:	50001c00 	.word	0x50001c00
 800fb74:	40010400 	.word	0x40010400

0800fb78 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b084      	sub	sp, #16
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	000a      	movs	r2, r1
 800fb82:	1cbb      	adds	r3, r7, #2
 800fb84:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	691b      	ldr	r3, [r3, #16]
 800fb8a:	1cba      	adds	r2, r7, #2
 800fb8c:	8812      	ldrh	r2, [r2, #0]
 800fb8e:	4013      	ands	r3, r2
 800fb90:	d004      	beq.n	800fb9c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800fb92:	230f      	movs	r3, #15
 800fb94:	18fb      	adds	r3, r7, r3
 800fb96:	2201      	movs	r2, #1
 800fb98:	701a      	strb	r2, [r3, #0]
 800fb9a:	e003      	b.n	800fba4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800fb9c:	230f      	movs	r3, #15
 800fb9e:	18fb      	adds	r3, r7, r3
 800fba0:	2200      	movs	r2, #0
 800fba2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800fba4:	230f      	movs	r3, #15
 800fba6:	18fb      	adds	r3, r7, r3
 800fba8:	781b      	ldrb	r3, [r3, #0]
}
 800fbaa:	0018      	movs	r0, r3
 800fbac:	46bd      	mov	sp, r7
 800fbae:	b004      	add	sp, #16
 800fbb0:	bd80      	pop	{r7, pc}

0800fbb2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800fbb2:	b580      	push	{r7, lr}
 800fbb4:	b082      	sub	sp, #8
 800fbb6:	af00      	add	r7, sp, #0
 800fbb8:	6078      	str	r0, [r7, #4]
 800fbba:	0008      	movs	r0, r1
 800fbbc:	0011      	movs	r1, r2
 800fbbe:	1cbb      	adds	r3, r7, #2
 800fbc0:	1c02      	adds	r2, r0, #0
 800fbc2:	801a      	strh	r2, [r3, #0]
 800fbc4:	1c7b      	adds	r3, r7, #1
 800fbc6:	1c0a      	adds	r2, r1, #0
 800fbc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800fbca:	1c7b      	adds	r3, r7, #1
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d004      	beq.n	800fbdc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800fbd2:	1cbb      	adds	r3, r7, #2
 800fbd4:	881a      	ldrh	r2, [r3, #0]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800fbda:	e003      	b.n	800fbe4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800fbdc:	1cbb      	adds	r3, r7, #2
 800fbde:	881a      	ldrh	r2, [r3, #0]
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800fbe4:	46c0      	nop			@ (mov r8, r8)
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	b002      	add	sp, #8
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	0002      	movs	r2, r0
 800fbf4:	1dbb      	adds	r3, r7, #6
 800fbf6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800fbf8:	4b09      	ldr	r3, [pc, #36]	@ (800fc20 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800fbfa:	695b      	ldr	r3, [r3, #20]
 800fbfc:	1dba      	adds	r2, r7, #6
 800fbfe:	8812      	ldrh	r2, [r2, #0]
 800fc00:	4013      	ands	r3, r2
 800fc02:	d008      	beq.n	800fc16 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800fc04:	4b06      	ldr	r3, [pc, #24]	@ (800fc20 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800fc06:	1dba      	adds	r2, r7, #6
 800fc08:	8812      	ldrh	r2, [r2, #0]
 800fc0a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800fc0c:	1dbb      	adds	r3, r7, #6
 800fc0e:	881b      	ldrh	r3, [r3, #0]
 800fc10:	0018      	movs	r0, r3
 800fc12:	f7f8 fa7d 	bl	8008110 <HAL_GPIO_EXTI_Callback>
  }
}
 800fc16:	46c0      	nop			@ (mov r8, r8)
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	b002      	add	sp, #8
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	46c0      	nop			@ (mov r8, r8)
 800fc20:	40010400 	.word	0x40010400

0800fc24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b082      	sub	sp, #8
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d101      	bne.n	800fc36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800fc32:	2301      	movs	r3, #1
 800fc34:	e082      	b.n	800fd3c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2241      	movs	r2, #65	@ 0x41
 800fc3a:	5c9b      	ldrb	r3, [r3, r2]
 800fc3c:	b2db      	uxtb	r3, r3
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d107      	bne.n	800fc52 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2240      	movs	r2, #64	@ 0x40
 800fc46:	2100      	movs	r1, #0
 800fc48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	0018      	movs	r0, r3
 800fc4e:	f7f7 fd9b 	bl	8007788 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2241      	movs	r2, #65	@ 0x41
 800fc56:	2124      	movs	r1, #36	@ 0x24
 800fc58:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	681a      	ldr	r2, [r3, #0]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	2101      	movs	r1, #1
 800fc66:	438a      	bics	r2, r1
 800fc68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	685a      	ldr	r2, [r3, #4]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	4934      	ldr	r1, [pc, #208]	@ (800fd44 <HAL_I2C_Init+0x120>)
 800fc74:	400a      	ands	r2, r1
 800fc76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	689a      	ldr	r2, [r3, #8]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	4931      	ldr	r1, [pc, #196]	@ (800fd48 <HAL_I2C_Init+0x124>)
 800fc84:	400a      	ands	r2, r1
 800fc86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	68db      	ldr	r3, [r3, #12]
 800fc8c:	2b01      	cmp	r3, #1
 800fc8e:	d108      	bne.n	800fca2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	689a      	ldr	r2, [r3, #8]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	2180      	movs	r1, #128	@ 0x80
 800fc9a:	0209      	lsls	r1, r1, #8
 800fc9c:	430a      	orrs	r2, r1
 800fc9e:	609a      	str	r2, [r3, #8]
 800fca0:	e007      	b.n	800fcb2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	689a      	ldr	r2, [r3, #8]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	2184      	movs	r1, #132	@ 0x84
 800fcac:	0209      	lsls	r1, r1, #8
 800fcae:	430a      	orrs	r2, r1
 800fcb0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	68db      	ldr	r3, [r3, #12]
 800fcb6:	2b02      	cmp	r3, #2
 800fcb8:	d104      	bne.n	800fcc4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	2280      	movs	r2, #128	@ 0x80
 800fcc0:	0112      	lsls	r2, r2, #4
 800fcc2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	685a      	ldr	r2, [r3, #4]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	491f      	ldr	r1, [pc, #124]	@ (800fd4c <HAL_I2C_Init+0x128>)
 800fcd0:	430a      	orrs	r2, r1
 800fcd2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	68da      	ldr	r2, [r3, #12]
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	491a      	ldr	r1, [pc, #104]	@ (800fd48 <HAL_I2C_Init+0x124>)
 800fce0:	400a      	ands	r2, r1
 800fce2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	691a      	ldr	r2, [r3, #16]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	695b      	ldr	r3, [r3, #20]
 800fcec:	431a      	orrs	r2, r3
 800fcee:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	699b      	ldr	r3, [r3, #24]
 800fcf4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	430a      	orrs	r2, r1
 800fcfc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	69d9      	ldr	r1, [r3, #28]
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6a1a      	ldr	r2, [r3, #32]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	430a      	orrs	r2, r1
 800fd0c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	681a      	ldr	r2, [r3, #0]
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	2101      	movs	r1, #1
 800fd1a:	430a      	orrs	r2, r1
 800fd1c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2200      	movs	r2, #0
 800fd22:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2241      	movs	r2, #65	@ 0x41
 800fd28:	2120      	movs	r1, #32
 800fd2a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2242      	movs	r2, #66	@ 0x42
 800fd36:	2100      	movs	r1, #0
 800fd38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fd3a:	2300      	movs	r3, #0
}
 800fd3c:	0018      	movs	r0, r3
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	b002      	add	sp, #8
 800fd42:	bd80      	pop	{r7, pc}
 800fd44:	f0ffffff 	.word	0xf0ffffff
 800fd48:	ffff7fff 	.word	0xffff7fff
 800fd4c:	02008000 	.word	0x02008000

0800fd50 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800fd50:	b590      	push	{r4, r7, lr}
 800fd52:	b089      	sub	sp, #36	@ 0x24
 800fd54:	af02      	add	r7, sp, #8
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	0008      	movs	r0, r1
 800fd5a:	607a      	str	r2, [r7, #4]
 800fd5c:	0019      	movs	r1, r3
 800fd5e:	230a      	movs	r3, #10
 800fd60:	18fb      	adds	r3, r7, r3
 800fd62:	1c02      	adds	r2, r0, #0
 800fd64:	801a      	strh	r2, [r3, #0]
 800fd66:	2308      	movs	r3, #8
 800fd68:	18fb      	adds	r3, r7, r3
 800fd6a:	1c0a      	adds	r2, r1, #0
 800fd6c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	2241      	movs	r2, #65	@ 0x41
 800fd72:	5c9b      	ldrb	r3, [r3, r2]
 800fd74:	b2db      	uxtb	r3, r3
 800fd76:	2b20      	cmp	r3, #32
 800fd78:	d000      	beq.n	800fd7c <HAL_I2C_Master_Transmit+0x2c>
 800fd7a:	e0e7      	b.n	800ff4c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	2240      	movs	r2, #64	@ 0x40
 800fd80:	5c9b      	ldrb	r3, [r3, r2]
 800fd82:	2b01      	cmp	r3, #1
 800fd84:	d101      	bne.n	800fd8a <HAL_I2C_Master_Transmit+0x3a>
 800fd86:	2302      	movs	r3, #2
 800fd88:	e0e1      	b.n	800ff4e <HAL_I2C_Master_Transmit+0x1fe>
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	2240      	movs	r2, #64	@ 0x40
 800fd8e:	2101      	movs	r1, #1
 800fd90:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800fd92:	f7fe fc7d 	bl	800e690 <HAL_GetTick>
 800fd96:	0003      	movs	r3, r0
 800fd98:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800fd9a:	2380      	movs	r3, #128	@ 0x80
 800fd9c:	0219      	lsls	r1, r3, #8
 800fd9e:	68f8      	ldr	r0, [r7, #12]
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	9300      	str	r3, [sp, #0]
 800fda4:	2319      	movs	r3, #25
 800fda6:	2201      	movs	r2, #1
 800fda8:	f001 ff98 	bl	8011cdc <I2C_WaitOnFlagUntilTimeout>
 800fdac:	1e03      	subs	r3, r0, #0
 800fdae:	d001      	beq.n	800fdb4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800fdb0:	2301      	movs	r3, #1
 800fdb2:	e0cc      	b.n	800ff4e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	2241      	movs	r2, #65	@ 0x41
 800fdb8:	2121      	movs	r1, #33	@ 0x21
 800fdba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	2242      	movs	r2, #66	@ 0x42
 800fdc0:	2110      	movs	r1, #16
 800fdc2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	687a      	ldr	r2, [r7, #4]
 800fdce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	2208      	movs	r2, #8
 800fdd4:	18ba      	adds	r2, r7, r2
 800fdd6:	8812      	ldrh	r2, [r2, #0]
 800fdd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	2200      	movs	r2, #0
 800fdde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fde4:	b29b      	uxth	r3, r3
 800fde6:	2bff      	cmp	r3, #255	@ 0xff
 800fde8:	d911      	bls.n	800fe0e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	22ff      	movs	r2, #255	@ 0xff
 800fdee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fdf4:	b2da      	uxtb	r2, r3
 800fdf6:	2380      	movs	r3, #128	@ 0x80
 800fdf8:	045c      	lsls	r4, r3, #17
 800fdfa:	230a      	movs	r3, #10
 800fdfc:	18fb      	adds	r3, r7, r3
 800fdfe:	8819      	ldrh	r1, [r3, #0]
 800fe00:	68f8      	ldr	r0, [r7, #12]
 800fe02:	4b55      	ldr	r3, [pc, #340]	@ (800ff58 <HAL_I2C_Master_Transmit+0x208>)
 800fe04:	9300      	str	r3, [sp, #0]
 800fe06:	0023      	movs	r3, r4
 800fe08:	f002 f9ba 	bl	8012180 <I2C_TransferConfig>
 800fe0c:	e075      	b.n	800fefa <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fe12:	b29a      	uxth	r2, r3
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe1c:	b2da      	uxtb	r2, r3
 800fe1e:	2380      	movs	r3, #128	@ 0x80
 800fe20:	049c      	lsls	r4, r3, #18
 800fe22:	230a      	movs	r3, #10
 800fe24:	18fb      	adds	r3, r7, r3
 800fe26:	8819      	ldrh	r1, [r3, #0]
 800fe28:	68f8      	ldr	r0, [r7, #12]
 800fe2a:	4b4b      	ldr	r3, [pc, #300]	@ (800ff58 <HAL_I2C_Master_Transmit+0x208>)
 800fe2c:	9300      	str	r3, [sp, #0]
 800fe2e:	0023      	movs	r3, r4
 800fe30:	f002 f9a6 	bl	8012180 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800fe34:	e061      	b.n	800fefa <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fe36:	697a      	ldr	r2, [r7, #20]
 800fe38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	0018      	movs	r0, r3
 800fe3e:	f001 ff9b 	bl	8011d78 <I2C_WaitOnTXISFlagUntilTimeout>
 800fe42:	1e03      	subs	r3, r0, #0
 800fe44:	d001      	beq.n	800fe4a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800fe46:	2301      	movs	r3, #1
 800fe48:	e081      	b.n	800ff4e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe4e:	781a      	ldrb	r2, [r3, #0]
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe5a:	1c5a      	adds	r2, r3, #1
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	3b01      	subs	r3, #1
 800fe68:	b29a      	uxth	r2, r3
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe72:	3b01      	subs	r3, #1
 800fe74:	b29a      	uxth	r2, r3
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fe7e:	b29b      	uxth	r3, r3
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d03a      	beq.n	800fefa <HAL_I2C_Master_Transmit+0x1aa>
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d136      	bne.n	800fefa <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fe8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe8e:	68f8      	ldr	r0, [r7, #12]
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	9300      	str	r3, [sp, #0]
 800fe94:	0013      	movs	r3, r2
 800fe96:	2200      	movs	r2, #0
 800fe98:	2180      	movs	r1, #128	@ 0x80
 800fe9a:	f001 ff1f 	bl	8011cdc <I2C_WaitOnFlagUntilTimeout>
 800fe9e:	1e03      	subs	r3, r0, #0
 800fea0:	d001      	beq.n	800fea6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800fea2:	2301      	movs	r3, #1
 800fea4:	e053      	b.n	800ff4e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800feaa:	b29b      	uxth	r3, r3
 800feac:	2bff      	cmp	r3, #255	@ 0xff
 800feae:	d911      	bls.n	800fed4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	22ff      	movs	r2, #255	@ 0xff
 800feb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800feba:	b2da      	uxtb	r2, r3
 800febc:	2380      	movs	r3, #128	@ 0x80
 800febe:	045c      	lsls	r4, r3, #17
 800fec0:	230a      	movs	r3, #10
 800fec2:	18fb      	adds	r3, r7, r3
 800fec4:	8819      	ldrh	r1, [r3, #0]
 800fec6:	68f8      	ldr	r0, [r7, #12]
 800fec8:	2300      	movs	r3, #0
 800feca:	9300      	str	r3, [sp, #0]
 800fecc:	0023      	movs	r3, r4
 800fece:	f002 f957 	bl	8012180 <I2C_TransferConfig>
 800fed2:	e012      	b.n	800fefa <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fed8:	b29a      	uxth	r2, r3
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fee2:	b2da      	uxtb	r2, r3
 800fee4:	2380      	movs	r3, #128	@ 0x80
 800fee6:	049c      	lsls	r4, r3, #18
 800fee8:	230a      	movs	r3, #10
 800feea:	18fb      	adds	r3, r7, r3
 800feec:	8819      	ldrh	r1, [r3, #0]
 800feee:	68f8      	ldr	r0, [r7, #12]
 800fef0:	2300      	movs	r3, #0
 800fef2:	9300      	str	r3, [sp, #0]
 800fef4:	0023      	movs	r3, r4
 800fef6:	f002 f943 	bl	8012180 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fefe:	b29b      	uxth	r3, r3
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d198      	bne.n	800fe36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ff04:	697a      	ldr	r2, [r7, #20]
 800ff06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	0018      	movs	r0, r3
 800ff0c:	f001 ff7a 	bl	8011e04 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ff10:	1e03      	subs	r3, r0, #0
 800ff12:	d001      	beq.n	800ff18 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800ff14:	2301      	movs	r3, #1
 800ff16:	e01a      	b.n	800ff4e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	2220      	movs	r2, #32
 800ff1e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	685a      	ldr	r2, [r3, #4]
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	490c      	ldr	r1, [pc, #48]	@ (800ff5c <HAL_I2C_Master_Transmit+0x20c>)
 800ff2c:	400a      	ands	r2, r1
 800ff2e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2241      	movs	r2, #65	@ 0x41
 800ff34:	2120      	movs	r1, #32
 800ff36:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	2242      	movs	r2, #66	@ 0x42
 800ff3c:	2100      	movs	r1, #0
 800ff3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	2240      	movs	r2, #64	@ 0x40
 800ff44:	2100      	movs	r1, #0
 800ff46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800ff48:	2300      	movs	r3, #0
 800ff4a:	e000      	b.n	800ff4e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800ff4c:	2302      	movs	r3, #2
  }
}
 800ff4e:	0018      	movs	r0, r3
 800ff50:	46bd      	mov	sp, r7
 800ff52:	b007      	add	sp, #28
 800ff54:	bd90      	pop	{r4, r7, pc}
 800ff56:	46c0      	nop			@ (mov r8, r8)
 800ff58:	80002000 	.word	0x80002000
 800ff5c:	fe00e800 	.word	0xfe00e800

0800ff60 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800ff60:	b590      	push	{r4, r7, lr}
 800ff62:	b089      	sub	sp, #36	@ 0x24
 800ff64:	af02      	add	r7, sp, #8
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	0008      	movs	r0, r1
 800ff6a:	607a      	str	r2, [r7, #4]
 800ff6c:	0019      	movs	r1, r3
 800ff6e:	230a      	movs	r3, #10
 800ff70:	18fb      	adds	r3, r7, r3
 800ff72:	1c02      	adds	r2, r0, #0
 800ff74:	801a      	strh	r2, [r3, #0]
 800ff76:	2308      	movs	r3, #8
 800ff78:	18fb      	adds	r3, r7, r3
 800ff7a:	1c0a      	adds	r2, r1, #0
 800ff7c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	2241      	movs	r2, #65	@ 0x41
 800ff82:	5c9b      	ldrb	r3, [r3, r2]
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	2b20      	cmp	r3, #32
 800ff88:	d000      	beq.n	800ff8c <HAL_I2C_Master_Receive+0x2c>
 800ff8a:	e0e8      	b.n	801015e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	2240      	movs	r2, #64	@ 0x40
 800ff90:	5c9b      	ldrb	r3, [r3, r2]
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	d101      	bne.n	800ff9a <HAL_I2C_Master_Receive+0x3a>
 800ff96:	2302      	movs	r3, #2
 800ff98:	e0e2      	b.n	8010160 <HAL_I2C_Master_Receive+0x200>
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2240      	movs	r2, #64	@ 0x40
 800ff9e:	2101      	movs	r1, #1
 800ffa0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ffa2:	f7fe fb75 	bl	800e690 <HAL_GetTick>
 800ffa6:	0003      	movs	r3, r0
 800ffa8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ffaa:	2380      	movs	r3, #128	@ 0x80
 800ffac:	0219      	lsls	r1, r3, #8
 800ffae:	68f8      	ldr	r0, [r7, #12]
 800ffb0:	697b      	ldr	r3, [r7, #20]
 800ffb2:	9300      	str	r3, [sp, #0]
 800ffb4:	2319      	movs	r3, #25
 800ffb6:	2201      	movs	r2, #1
 800ffb8:	f001 fe90 	bl	8011cdc <I2C_WaitOnFlagUntilTimeout>
 800ffbc:	1e03      	subs	r3, r0, #0
 800ffbe:	d001      	beq.n	800ffc4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	e0cd      	b.n	8010160 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	2241      	movs	r2, #65	@ 0x41
 800ffc8:	2122      	movs	r1, #34	@ 0x22
 800ffca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	2242      	movs	r2, #66	@ 0x42
 800ffd0:	2110      	movs	r1, #16
 800ffd2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	687a      	ldr	r2, [r7, #4]
 800ffde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	2208      	movs	r2, #8
 800ffe4:	18ba      	adds	r2, r7, r2
 800ffe6:	8812      	ldrh	r2, [r2, #0]
 800ffe8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	2200      	movs	r2, #0
 800ffee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fff4:	b29b      	uxth	r3, r3
 800fff6:	2bff      	cmp	r3, #255	@ 0xff
 800fff8:	d911      	bls.n	801001e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	22ff      	movs	r2, #255	@ 0xff
 800fffe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010004:	b2da      	uxtb	r2, r3
 8010006:	2380      	movs	r3, #128	@ 0x80
 8010008:	045c      	lsls	r4, r3, #17
 801000a:	230a      	movs	r3, #10
 801000c:	18fb      	adds	r3, r7, r3
 801000e:	8819      	ldrh	r1, [r3, #0]
 8010010:	68f8      	ldr	r0, [r7, #12]
 8010012:	4b55      	ldr	r3, [pc, #340]	@ (8010168 <HAL_I2C_Master_Receive+0x208>)
 8010014:	9300      	str	r3, [sp, #0]
 8010016:	0023      	movs	r3, r4
 8010018:	f002 f8b2 	bl	8012180 <I2C_TransferConfig>
 801001c:	e076      	b.n	801010c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010022:	b29a      	uxth	r2, r3
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801002c:	b2da      	uxtb	r2, r3
 801002e:	2380      	movs	r3, #128	@ 0x80
 8010030:	049c      	lsls	r4, r3, #18
 8010032:	230a      	movs	r3, #10
 8010034:	18fb      	adds	r3, r7, r3
 8010036:	8819      	ldrh	r1, [r3, #0]
 8010038:	68f8      	ldr	r0, [r7, #12]
 801003a:	4b4b      	ldr	r3, [pc, #300]	@ (8010168 <HAL_I2C_Master_Receive+0x208>)
 801003c:	9300      	str	r3, [sp, #0]
 801003e:	0023      	movs	r3, r4
 8010040:	f002 f89e 	bl	8012180 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8010044:	e062      	b.n	801010c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010046:	697a      	ldr	r2, [r7, #20]
 8010048:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	0018      	movs	r0, r3
 801004e:	f001 ff1d 	bl	8011e8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8010052:	1e03      	subs	r3, r0, #0
 8010054:	d001      	beq.n	801005a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8010056:	2301      	movs	r3, #1
 8010058:	e082      	b.n	8010160 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010064:	b2d2      	uxtb	r2, r2
 8010066:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801006c:	1c5a      	adds	r2, r3, #1
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010076:	3b01      	subs	r3, #1
 8010078:	b29a      	uxth	r2, r3
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010082:	b29b      	uxth	r3, r3
 8010084:	3b01      	subs	r3, #1
 8010086:	b29a      	uxth	r2, r3
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010090:	b29b      	uxth	r3, r3
 8010092:	2b00      	cmp	r3, #0
 8010094:	d03a      	beq.n	801010c <HAL_I2C_Master_Receive+0x1ac>
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801009a:	2b00      	cmp	r3, #0
 801009c:	d136      	bne.n	801010c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801009e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80100a0:	68f8      	ldr	r0, [r7, #12]
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	9300      	str	r3, [sp, #0]
 80100a6:	0013      	movs	r3, r2
 80100a8:	2200      	movs	r2, #0
 80100aa:	2180      	movs	r1, #128	@ 0x80
 80100ac:	f001 fe16 	bl	8011cdc <I2C_WaitOnFlagUntilTimeout>
 80100b0:	1e03      	subs	r3, r0, #0
 80100b2:	d001      	beq.n	80100b8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80100b4:	2301      	movs	r3, #1
 80100b6:	e053      	b.n	8010160 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80100bc:	b29b      	uxth	r3, r3
 80100be:	2bff      	cmp	r3, #255	@ 0xff
 80100c0:	d911      	bls.n	80100e6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	22ff      	movs	r2, #255	@ 0xff
 80100c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100cc:	b2da      	uxtb	r2, r3
 80100ce:	2380      	movs	r3, #128	@ 0x80
 80100d0:	045c      	lsls	r4, r3, #17
 80100d2:	230a      	movs	r3, #10
 80100d4:	18fb      	adds	r3, r7, r3
 80100d6:	8819      	ldrh	r1, [r3, #0]
 80100d8:	68f8      	ldr	r0, [r7, #12]
 80100da:	2300      	movs	r3, #0
 80100dc:	9300      	str	r3, [sp, #0]
 80100de:	0023      	movs	r3, r4
 80100e0:	f002 f84e 	bl	8012180 <I2C_TransferConfig>
 80100e4:	e012      	b.n	801010c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80100ea:	b29a      	uxth	r2, r3
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100f4:	b2da      	uxtb	r2, r3
 80100f6:	2380      	movs	r3, #128	@ 0x80
 80100f8:	049c      	lsls	r4, r3, #18
 80100fa:	230a      	movs	r3, #10
 80100fc:	18fb      	adds	r3, r7, r3
 80100fe:	8819      	ldrh	r1, [r3, #0]
 8010100:	68f8      	ldr	r0, [r7, #12]
 8010102:	2300      	movs	r3, #0
 8010104:	9300      	str	r3, [sp, #0]
 8010106:	0023      	movs	r3, r4
 8010108:	f002 f83a 	bl	8012180 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010110:	b29b      	uxth	r3, r3
 8010112:	2b00      	cmp	r3, #0
 8010114:	d197      	bne.n	8010046 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010116:	697a      	ldr	r2, [r7, #20]
 8010118:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	0018      	movs	r0, r3
 801011e:	f001 fe71 	bl	8011e04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010122:	1e03      	subs	r3, r0, #0
 8010124:	d001      	beq.n	801012a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8010126:	2301      	movs	r3, #1
 8010128:	e01a      	b.n	8010160 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	2220      	movs	r2, #32
 8010130:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	685a      	ldr	r2, [r3, #4]
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	490b      	ldr	r1, [pc, #44]	@ (801016c <HAL_I2C_Master_Receive+0x20c>)
 801013e:	400a      	ands	r2, r1
 8010140:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	2241      	movs	r2, #65	@ 0x41
 8010146:	2120      	movs	r1, #32
 8010148:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2242      	movs	r2, #66	@ 0x42
 801014e:	2100      	movs	r1, #0
 8010150:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	2240      	movs	r2, #64	@ 0x40
 8010156:	2100      	movs	r1, #0
 8010158:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801015a:	2300      	movs	r3, #0
 801015c:	e000      	b.n	8010160 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 801015e:	2302      	movs	r3, #2
  }
}
 8010160:	0018      	movs	r0, r3
 8010162:	46bd      	mov	sp, r7
 8010164:	b007      	add	sp, #28
 8010166:	bd90      	pop	{r4, r7, pc}
 8010168:	80002400 	.word	0x80002400
 801016c:	fe00e800 	.word	0xfe00e800

08010170 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8010170:	b5b0      	push	{r4, r5, r7, lr}
 8010172:	b088      	sub	sp, #32
 8010174:	af02      	add	r7, sp, #8
 8010176:	60f8      	str	r0, [r7, #12]
 8010178:	0008      	movs	r0, r1
 801017a:	607a      	str	r2, [r7, #4]
 801017c:	0019      	movs	r1, r3
 801017e:	230a      	movs	r3, #10
 8010180:	18fb      	adds	r3, r7, r3
 8010182:	1c02      	adds	r2, r0, #0
 8010184:	801a      	strh	r2, [r3, #0]
 8010186:	2308      	movs	r3, #8
 8010188:	18fb      	adds	r3, r7, r3
 801018a:	1c0a      	adds	r2, r1, #0
 801018c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	2241      	movs	r2, #65	@ 0x41
 8010192:	5c9b      	ldrb	r3, [r3, r2]
 8010194:	b2db      	uxtb	r3, r3
 8010196:	2b20      	cmp	r3, #32
 8010198:	d000      	beq.n	801019c <HAL_I2C_Master_Transmit_DMA+0x2c>
 801019a:	e0dd      	b.n	8010358 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	699a      	ldr	r2, [r3, #24]
 80101a2:	2380      	movs	r3, #128	@ 0x80
 80101a4:	021b      	lsls	r3, r3, #8
 80101a6:	401a      	ands	r2, r3
 80101a8:	2380      	movs	r3, #128	@ 0x80
 80101aa:	021b      	lsls	r3, r3, #8
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d101      	bne.n	80101b4 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 80101b0:	2302      	movs	r3, #2
 80101b2:	e0d2      	b.n	801035a <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2240      	movs	r2, #64	@ 0x40
 80101b8:	5c9b      	ldrb	r3, [r3, r2]
 80101ba:	2b01      	cmp	r3, #1
 80101bc:	d101      	bne.n	80101c2 <HAL_I2C_Master_Transmit_DMA+0x52>
 80101be:	2302      	movs	r3, #2
 80101c0:	e0cb      	b.n	801035a <HAL_I2C_Master_Transmit_DMA+0x1ea>
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	2240      	movs	r2, #64	@ 0x40
 80101c6:	2101      	movs	r1, #1
 80101c8:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	2241      	movs	r2, #65	@ 0x41
 80101ce:	2121      	movs	r1, #33	@ 0x21
 80101d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	2242      	movs	r2, #66	@ 0x42
 80101d6:	2110      	movs	r1, #16
 80101d8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	2200      	movs	r2, #0
 80101de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	687a      	ldr	r2, [r7, #4]
 80101e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	2208      	movs	r2, #8
 80101ea:	18ba      	adds	r2, r7, r2
 80101ec:	8812      	ldrh	r2, [r2, #0]
 80101ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	4a5c      	ldr	r2, [pc, #368]	@ (8010364 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80101f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	4a5b      	ldr	r2, [pc, #364]	@ (8010368 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80101fa:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010200:	b29b      	uxth	r3, r3
 8010202:	2bff      	cmp	r3, #255	@ 0xff
 8010204:	d906      	bls.n	8010214 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	22ff      	movs	r2, #255	@ 0xff
 801020a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 801020c:	2380      	movs	r3, #128	@ 0x80
 801020e:	045b      	lsls	r3, r3, #17
 8010210:	617b      	str	r3, [r7, #20]
 8010212:	e007      	b.n	8010224 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010218:	b29a      	uxth	r2, r3
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 801021e:	2380      	movs	r3, #128	@ 0x80
 8010220:	049b      	lsls	r3, r3, #18
 8010222:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010228:	2b00      	cmp	r3, #0
 801022a:	d100      	bne.n	801022e <HAL_I2C_Master_Transmit_DMA+0xbe>
 801022c:	e078      	b.n	8010320 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010232:	2b00      	cmp	r3, #0
 8010234:	d023      	beq.n	801027e <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801023a:	4a4c      	ldr	r2, [pc, #304]	@ (801036c <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 801023c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010242:	4a4b      	ldr	r2, [pc, #300]	@ (8010370 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8010244:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801024a:	2200      	movs	r2, #0
 801024c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010252:	2200      	movs	r2, #0
 8010254:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801025a:	6879      	ldr	r1, [r7, #4]
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	3328      	adds	r3, #40	@ 0x28
 8010262:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8010268:	2513      	movs	r5, #19
 801026a:	197c      	adds	r4, r7, r5
 801026c:	f7fe ff62 	bl	800f134 <HAL_DMA_Start_IT>
 8010270:	0003      	movs	r3, r0
 8010272:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010274:	197b      	adds	r3, r7, r5
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d13d      	bne.n	80102f8 <HAL_I2C_Master_Transmit_DMA+0x188>
 801027c:	e013      	b.n	80102a6 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	2241      	movs	r2, #65	@ 0x41
 8010282:	2120      	movs	r1, #32
 8010284:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	2242      	movs	r2, #66	@ 0x42
 801028a:	2100      	movs	r1, #0
 801028c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010292:	2280      	movs	r2, #128	@ 0x80
 8010294:	431a      	orrs	r2, r3
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	2240      	movs	r2, #64	@ 0x40
 801029e:	2100      	movs	r1, #0
 80102a0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80102a2:	2301      	movs	r3, #1
 80102a4:	e059      	b.n	801035a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80102aa:	b2da      	uxtb	r2, r3
 80102ac:	697c      	ldr	r4, [r7, #20]
 80102ae:	230a      	movs	r3, #10
 80102b0:	18fb      	adds	r3, r7, r3
 80102b2:	8819      	ldrh	r1, [r3, #0]
 80102b4:	68f8      	ldr	r0, [r7, #12]
 80102b6:	4b2f      	ldr	r3, [pc, #188]	@ (8010374 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80102b8:	9300      	str	r3, [sp, #0]
 80102ba:	0023      	movs	r3, r4
 80102bc:	f001 ff60 	bl	8012180 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80102c4:	b29a      	uxth	r2, r3
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80102ca:	1ad3      	subs	r3, r2, r3
 80102cc:	b29a      	uxth	r2, r3
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	2240      	movs	r2, #64	@ 0x40
 80102d6:	2100      	movs	r1, #0
 80102d8:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2110      	movs	r1, #16
 80102de:	0018      	movs	r0, r3
 80102e0:	f001 ff88 	bl	80121f4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	681a      	ldr	r2, [r3, #0]
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2180      	movs	r1, #128	@ 0x80
 80102f0:	01c9      	lsls	r1, r1, #7
 80102f2:	430a      	orrs	r2, r1
 80102f4:	601a      	str	r2, [r3, #0]
 80102f6:	e02d      	b.n	8010354 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	2241      	movs	r2, #65	@ 0x41
 80102fc:	2120      	movs	r1, #32
 80102fe:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	2242      	movs	r2, #66	@ 0x42
 8010304:	2100      	movs	r1, #0
 8010306:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801030c:	2210      	movs	r2, #16
 801030e:	431a      	orrs	r2, r3
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	2240      	movs	r2, #64	@ 0x40
 8010318:	2100      	movs	r1, #0
 801031a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801031c:	2301      	movs	r3, #1
 801031e:	e01c      	b.n	801035a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	4a15      	ldr	r2, [pc, #84]	@ (8010378 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8010324:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801032a:	b2da      	uxtb	r2, r3
 801032c:	2380      	movs	r3, #128	@ 0x80
 801032e:	049c      	lsls	r4, r3, #18
 8010330:	230a      	movs	r3, #10
 8010332:	18fb      	adds	r3, r7, r3
 8010334:	8819      	ldrh	r1, [r3, #0]
 8010336:	68f8      	ldr	r0, [r7, #12]
 8010338:	4b0e      	ldr	r3, [pc, #56]	@ (8010374 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801033a:	9300      	str	r3, [sp, #0]
 801033c:	0023      	movs	r3, r4
 801033e:	f001 ff1f 	bl	8012180 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	2240      	movs	r2, #64	@ 0x40
 8010346:	2100      	movs	r1, #0
 8010348:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2101      	movs	r1, #1
 801034e:	0018      	movs	r0, r3
 8010350:	f001 ff50 	bl	80121f4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010354:	2300      	movs	r3, #0
 8010356:	e000      	b.n	801035a <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010358:	2302      	movs	r3, #2
  }
}
 801035a:	0018      	movs	r0, r3
 801035c:	46bd      	mov	sp, r7
 801035e:	b006      	add	sp, #24
 8010360:	bdb0      	pop	{r4, r5, r7, pc}
 8010362:	46c0      	nop			@ (mov r8, r8)
 8010364:	ffff0000 	.word	0xffff0000
 8010368:	08010b75 	.word	0x08010b75
 801036c:	08011b2d 	.word	0x08011b2d
 8010370:	08011c6d 	.word	0x08011c6d
 8010374:	80002000 	.word	0x80002000
 8010378:	08010721 	.word	0x08010721

0801037c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 801037c:	b5b0      	push	{r4, r5, r7, lr}
 801037e:	b088      	sub	sp, #32
 8010380:	af02      	add	r7, sp, #8
 8010382:	60f8      	str	r0, [r7, #12]
 8010384:	0008      	movs	r0, r1
 8010386:	607a      	str	r2, [r7, #4]
 8010388:	0019      	movs	r1, r3
 801038a:	230a      	movs	r3, #10
 801038c:	18fb      	adds	r3, r7, r3
 801038e:	1c02      	adds	r2, r0, #0
 8010390:	801a      	strh	r2, [r3, #0]
 8010392:	2308      	movs	r3, #8
 8010394:	18fb      	adds	r3, r7, r3
 8010396:	1c0a      	adds	r2, r1, #0
 8010398:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	2241      	movs	r2, #65	@ 0x41
 801039e:	5c9b      	ldrb	r3, [r3, r2]
 80103a0:	b2db      	uxtb	r3, r3
 80103a2:	2b20      	cmp	r3, #32
 80103a4:	d000      	beq.n	80103a8 <HAL_I2C_Master_Receive_DMA+0x2c>
 80103a6:	e0dd      	b.n	8010564 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	699a      	ldr	r2, [r3, #24]
 80103ae:	2380      	movs	r3, #128	@ 0x80
 80103b0:	021b      	lsls	r3, r3, #8
 80103b2:	401a      	ands	r2, r3
 80103b4:	2380      	movs	r3, #128	@ 0x80
 80103b6:	021b      	lsls	r3, r3, #8
 80103b8:	429a      	cmp	r2, r3
 80103ba:	d101      	bne.n	80103c0 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 80103bc:	2302      	movs	r3, #2
 80103be:	e0d2      	b.n	8010566 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2240      	movs	r2, #64	@ 0x40
 80103c4:	5c9b      	ldrb	r3, [r3, r2]
 80103c6:	2b01      	cmp	r3, #1
 80103c8:	d101      	bne.n	80103ce <HAL_I2C_Master_Receive_DMA+0x52>
 80103ca:	2302      	movs	r3, #2
 80103cc:	e0cb      	b.n	8010566 <HAL_I2C_Master_Receive_DMA+0x1ea>
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	2240      	movs	r2, #64	@ 0x40
 80103d2:	2101      	movs	r1, #1
 80103d4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	2241      	movs	r2, #65	@ 0x41
 80103da:	2122      	movs	r1, #34	@ 0x22
 80103dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2242      	movs	r2, #66	@ 0x42
 80103e2:	2110      	movs	r1, #16
 80103e4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	2200      	movs	r2, #0
 80103ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	687a      	ldr	r2, [r7, #4]
 80103f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	2208      	movs	r2, #8
 80103f6:	18ba      	adds	r2, r7, r2
 80103f8:	8812      	ldrh	r2, [r2, #0]
 80103fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	4a5c      	ldr	r2, [pc, #368]	@ (8010570 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8010400:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	4a5b      	ldr	r2, [pc, #364]	@ (8010574 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8010406:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801040c:	b29b      	uxth	r3, r3
 801040e:	2bff      	cmp	r3, #255	@ 0xff
 8010410:	d906      	bls.n	8010420 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	22ff      	movs	r2, #255	@ 0xff
 8010416:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010418:	2380      	movs	r3, #128	@ 0x80
 801041a:	045b      	lsls	r3, r3, #17
 801041c:	617b      	str	r3, [r7, #20]
 801041e:	e007      	b.n	8010430 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010424:	b29a      	uxth	r2, r3
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 801042a:	2380      	movs	r3, #128	@ 0x80
 801042c:	049b      	lsls	r3, r3, #18
 801042e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010434:	2b00      	cmp	r3, #0
 8010436:	d100      	bne.n	801043a <HAL_I2C_Master_Receive_DMA+0xbe>
 8010438:	e078      	b.n	801052c <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801043e:	2b00      	cmp	r3, #0
 8010440:	d023      	beq.n	801048a <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010446:	4a4c      	ldr	r2, [pc, #304]	@ (8010578 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8010448:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801044e:	4a4b      	ldr	r2, [pc, #300]	@ (801057c <HAL_I2C_Master_Receive_DMA+0x200>)
 8010450:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010456:	2200      	movs	r2, #0
 8010458:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801045e:	2200      	movs	r2, #0
 8010460:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	3324      	adds	r3, #36	@ 0x24
 801046c:	0019      	movs	r1, r3
 801046e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010474:	2513      	movs	r5, #19
 8010476:	197c      	adds	r4, r7, r5
 8010478:	f7fe fe5c 	bl	800f134 <HAL_DMA_Start_IT>
 801047c:	0003      	movs	r3, r0
 801047e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010480:	197b      	adds	r3, r7, r5
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d13d      	bne.n	8010504 <HAL_I2C_Master_Receive_DMA+0x188>
 8010488:	e013      	b.n	80104b2 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	2241      	movs	r2, #65	@ 0x41
 801048e:	2120      	movs	r1, #32
 8010490:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	2242      	movs	r2, #66	@ 0x42
 8010496:	2100      	movs	r1, #0
 8010498:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801049e:	2280      	movs	r2, #128	@ 0x80
 80104a0:	431a      	orrs	r2, r3
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	2240      	movs	r2, #64	@ 0x40
 80104aa:	2100      	movs	r1, #0
 80104ac:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80104ae:	2301      	movs	r3, #1
 80104b0:	e059      	b.n	8010566 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104b6:	b2da      	uxtb	r2, r3
 80104b8:	697c      	ldr	r4, [r7, #20]
 80104ba:	230a      	movs	r3, #10
 80104bc:	18fb      	adds	r3, r7, r3
 80104be:	8819      	ldrh	r1, [r3, #0]
 80104c0:	68f8      	ldr	r0, [r7, #12]
 80104c2:	4b2f      	ldr	r3, [pc, #188]	@ (8010580 <HAL_I2C_Master_Receive_DMA+0x204>)
 80104c4:	9300      	str	r3, [sp, #0]
 80104c6:	0023      	movs	r3, r4
 80104c8:	f001 fe5a 	bl	8012180 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104d0:	b29a      	uxth	r2, r3
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104d6:	1ad3      	subs	r3, r2, r3
 80104d8:	b29a      	uxth	r2, r3
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	2240      	movs	r2, #64	@ 0x40
 80104e2:	2100      	movs	r1, #0
 80104e4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	2110      	movs	r1, #16
 80104ea:	0018      	movs	r0, r3
 80104ec:	f001 fe82 	bl	80121f4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	681a      	ldr	r2, [r3, #0]
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	2180      	movs	r1, #128	@ 0x80
 80104fc:	0209      	lsls	r1, r1, #8
 80104fe:	430a      	orrs	r2, r1
 8010500:	601a      	str	r2, [r3, #0]
 8010502:	e02d      	b.n	8010560 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	2241      	movs	r2, #65	@ 0x41
 8010508:	2120      	movs	r1, #32
 801050a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	2242      	movs	r2, #66	@ 0x42
 8010510:	2100      	movs	r1, #0
 8010512:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010518:	2210      	movs	r2, #16
 801051a:	431a      	orrs	r2, r3
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	2240      	movs	r2, #64	@ 0x40
 8010524:	2100      	movs	r1, #0
 8010526:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010528:	2301      	movs	r3, #1
 801052a:	e01c      	b.n	8010566 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	4a15      	ldr	r2, [pc, #84]	@ (8010584 <HAL_I2C_Master_Receive_DMA+0x208>)
 8010530:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010536:	b2da      	uxtb	r2, r3
 8010538:	2380      	movs	r3, #128	@ 0x80
 801053a:	049c      	lsls	r4, r3, #18
 801053c:	230a      	movs	r3, #10
 801053e:	18fb      	adds	r3, r7, r3
 8010540:	8819      	ldrh	r1, [r3, #0]
 8010542:	68f8      	ldr	r0, [r7, #12]
 8010544:	4b0e      	ldr	r3, [pc, #56]	@ (8010580 <HAL_I2C_Master_Receive_DMA+0x204>)
 8010546:	9300      	str	r3, [sp, #0]
 8010548:	0023      	movs	r3, r4
 801054a:	f001 fe19 	bl	8012180 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	2240      	movs	r2, #64	@ 0x40
 8010552:	2100      	movs	r1, #0
 8010554:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	2101      	movs	r1, #1
 801055a:	0018      	movs	r0, r3
 801055c:	f001 fe4a 	bl	80121f4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010560:	2300      	movs	r3, #0
 8010562:	e000      	b.n	8010566 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010564:	2302      	movs	r3, #2
  }
}
 8010566:	0018      	movs	r0, r3
 8010568:	46bd      	mov	sp, r7
 801056a:	b006      	add	sp, #24
 801056c:	bdb0      	pop	{r4, r5, r7, pc}
 801056e:	46c0      	nop			@ (mov r8, r8)
 8010570:	ffff0000 	.word	0xffff0000
 8010574:	08010b75 	.word	0x08010b75
 8010578:	08011bcd 	.word	0x08011bcd
 801057c:	08011c6d 	.word	0x08011c6d
 8010580:	80002400 	.word	0x80002400
 8010584:	08010721 	.word	0x08010721

08010588 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b084      	sub	sp, #16
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	699b      	ldr	r3, [r3, #24]
 8010596:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d005      	beq.n	80105b4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80105ac:	68ba      	ldr	r2, [r7, #8]
 80105ae:	68f9      	ldr	r1, [r7, #12]
 80105b0:	6878      	ldr	r0, [r7, #4]
 80105b2:	4798      	blx	r3
  }
}
 80105b4:	46c0      	nop			@ (mov r8, r8)
 80105b6:	46bd      	mov	sp, r7
 80105b8:	b004      	add	sp, #16
 80105ba:	bd80      	pop	{r7, pc}

080105bc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b086      	sub	sp, #24
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	699b      	ldr	r3, [r3, #24]
 80105ca:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80105d4:	697a      	ldr	r2, [r7, #20]
 80105d6:	2380      	movs	r3, #128	@ 0x80
 80105d8:	005b      	lsls	r3, r3, #1
 80105da:	4013      	ands	r3, r2
 80105dc:	d00e      	beq.n	80105fc <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	2280      	movs	r2, #128	@ 0x80
 80105e2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80105e4:	d00a      	beq.n	80105fc <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105ea:	2201      	movs	r2, #1
 80105ec:	431a      	orrs	r2, r3
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	2280      	movs	r2, #128	@ 0x80
 80105f8:	0052      	lsls	r2, r2, #1
 80105fa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80105fc:	697a      	ldr	r2, [r7, #20]
 80105fe:	2380      	movs	r3, #128	@ 0x80
 8010600:	00db      	lsls	r3, r3, #3
 8010602:	4013      	ands	r3, r2
 8010604:	d00e      	beq.n	8010624 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	2280      	movs	r2, #128	@ 0x80
 801060a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 801060c:	d00a      	beq.n	8010624 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010612:	2208      	movs	r2, #8
 8010614:	431a      	orrs	r2, r3
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	2280      	movs	r2, #128	@ 0x80
 8010620:	00d2      	lsls	r2, r2, #3
 8010622:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010624:	697a      	ldr	r2, [r7, #20]
 8010626:	2380      	movs	r3, #128	@ 0x80
 8010628:	009b      	lsls	r3, r3, #2
 801062a:	4013      	ands	r3, r2
 801062c:	d00e      	beq.n	801064c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801062e:	693b      	ldr	r3, [r7, #16]
 8010630:	2280      	movs	r2, #128	@ 0x80
 8010632:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010634:	d00a      	beq.n	801064c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801063a:	2202      	movs	r2, #2
 801063c:	431a      	orrs	r2, r3
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	2280      	movs	r2, #128	@ 0x80
 8010648:	0092      	lsls	r2, r2, #2
 801064a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010650:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	220b      	movs	r2, #11
 8010656:	4013      	ands	r3, r2
 8010658:	d005      	beq.n	8010666 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 801065a:	68fa      	ldr	r2, [r7, #12]
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	0011      	movs	r1, r2
 8010660:	0018      	movs	r0, r3
 8010662:	f001 f915 	bl	8011890 <I2C_ITError>
  }
}
 8010666:	46c0      	nop			@ (mov r8, r8)
 8010668:	46bd      	mov	sp, r7
 801066a:	b006      	add	sp, #24
 801066c:	bd80      	pop	{r7, pc}

0801066e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801066e:	b580      	push	{r7, lr}
 8010670:	b082      	sub	sp, #8
 8010672:	af00      	add	r7, sp, #0
 8010674:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8010676:	46c0      	nop			@ (mov r8, r8)
 8010678:	46bd      	mov	sp, r7
 801067a:	b002      	add	sp, #8
 801067c:	bd80      	pop	{r7, pc}

0801067e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801067e:	b580      	push	{r7, lr}
 8010680:	b082      	sub	sp, #8
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8010686:	46c0      	nop			@ (mov r8, r8)
 8010688:	46bd      	mov	sp, r7
 801068a:	b002      	add	sp, #8
 801068c:	bd80      	pop	{r7, pc}

0801068e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801068e:	b580      	push	{r7, lr}
 8010690:	b082      	sub	sp, #8
 8010692:	af00      	add	r7, sp, #0
 8010694:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8010696:	46c0      	nop			@ (mov r8, r8)
 8010698:	46bd      	mov	sp, r7
 801069a:	b002      	add	sp, #8
 801069c:	bd80      	pop	{r7, pc}

0801069e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801069e:	b580      	push	{r7, lr}
 80106a0:	b082      	sub	sp, #8
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80106a6:	46c0      	nop			@ (mov r8, r8)
 80106a8:	46bd      	mov	sp, r7
 80106aa:	b002      	add	sp, #8
 80106ac:	bd80      	pop	{r7, pc}

080106ae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80106ae:	b580      	push	{r7, lr}
 80106b0:	b082      	sub	sp, #8
 80106b2:	af00      	add	r7, sp, #0
 80106b4:	6078      	str	r0, [r7, #4]
 80106b6:	0008      	movs	r0, r1
 80106b8:	0011      	movs	r1, r2
 80106ba:	1cfb      	adds	r3, r7, #3
 80106bc:	1c02      	adds	r2, r0, #0
 80106be:	701a      	strb	r2, [r3, #0]
 80106c0:	003b      	movs	r3, r7
 80106c2:	1c0a      	adds	r2, r1, #0
 80106c4:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80106c6:	46c0      	nop			@ (mov r8, r8)
 80106c8:	46bd      	mov	sp, r7
 80106ca:	b002      	add	sp, #8
 80106cc:	bd80      	pop	{r7, pc}

080106ce <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80106ce:	b580      	push	{r7, lr}
 80106d0:	b082      	sub	sp, #8
 80106d2:	af00      	add	r7, sp, #0
 80106d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80106d6:	46c0      	nop			@ (mov r8, r8)
 80106d8:	46bd      	mov	sp, r7
 80106da:	b002      	add	sp, #8
 80106dc:	bd80      	pop	{r7, pc}

080106de <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80106de:	b580      	push	{r7, lr}
 80106e0:	b082      	sub	sp, #8
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80106e6:	46c0      	nop			@ (mov r8, r8)
 80106e8:	46bd      	mov	sp, r7
 80106ea:	b002      	add	sp, #8
 80106ec:	bd80      	pop	{r7, pc}

080106ee <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80106ee:	b580      	push	{r7, lr}
 80106f0:	b082      	sub	sp, #8
 80106f2:	af00      	add	r7, sp, #0
 80106f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80106f6:	46c0      	nop			@ (mov r8, r8)
 80106f8:	46bd      	mov	sp, r7
 80106fa:	b002      	add	sp, #8
 80106fc:	bd80      	pop	{r7, pc}

080106fe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80106fe:	b580      	push	{r7, lr}
 8010700:	b082      	sub	sp, #8
 8010702:	af00      	add	r7, sp, #0
 8010704:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8010706:	46c0      	nop			@ (mov r8, r8)
 8010708:	46bd      	mov	sp, r7
 801070a:	b002      	add	sp, #8
 801070c:	bd80      	pop	{r7, pc}

0801070e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801070e:	b580      	push	{r7, lr}
 8010710:	b082      	sub	sp, #8
 8010712:	af00      	add	r7, sp, #0
 8010714:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8010716:	46c0      	nop			@ (mov r8, r8)
 8010718:	46bd      	mov	sp, r7
 801071a:	b002      	add	sp, #8
 801071c:	bd80      	pop	{r7, pc}
	...

08010720 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010720:	b590      	push	{r4, r7, lr}
 8010722:	b089      	sub	sp, #36	@ 0x24
 8010724:	af02      	add	r7, sp, #8
 8010726:	60f8      	str	r0, [r7, #12]
 8010728:	60b9      	str	r1, [r7, #8]
 801072a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	2240      	movs	r2, #64	@ 0x40
 8010734:	5c9b      	ldrb	r3, [r3, r2]
 8010736:	2b01      	cmp	r3, #1
 8010738:	d101      	bne.n	801073e <I2C_Master_ISR_IT+0x1e>
 801073a:	2302      	movs	r3, #2
 801073c:	e113      	b.n	8010966 <I2C_Master_ISR_IT+0x246>
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	2240      	movs	r2, #64	@ 0x40
 8010742:	2101      	movs	r1, #1
 8010744:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	2210      	movs	r2, #16
 801074a:	4013      	ands	r3, r2
 801074c:	d012      	beq.n	8010774 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2210      	movs	r2, #16
 8010752:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010754:	d00e      	beq.n	8010774 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	2210      	movs	r2, #16
 801075c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010762:	2204      	movs	r2, #4
 8010764:	431a      	orrs	r2, r3
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	0018      	movs	r0, r3
 801076e:	f001 f9ba 	bl	8011ae6 <I2C_Flush_TXDR>
 8010772:	e0e5      	b.n	8010940 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	2204      	movs	r2, #4
 8010778:	4013      	ands	r3, r2
 801077a:	d021      	beq.n	80107c0 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2204      	movs	r2, #4
 8010780:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010782:	d01d      	beq.n	80107c0 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	2204      	movs	r2, #4
 8010788:	4393      	bics	r3, r2
 801078a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010796:	b2d2      	uxtb	r2, r2
 8010798:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801079e:	1c5a      	adds	r2, r3, #1
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80107a8:	3b01      	subs	r3, #1
 80107aa:	b29a      	uxth	r2, r3
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80107b4:	b29b      	uxth	r3, r3
 80107b6:	3b01      	subs	r3, #1
 80107b8:	b29a      	uxth	r2, r3
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80107be:	e0bf      	b.n	8010940 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80107c0:	697b      	ldr	r3, [r7, #20]
 80107c2:	2202      	movs	r2, #2
 80107c4:	4013      	ands	r3, r2
 80107c6:	d01c      	beq.n	8010802 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2202      	movs	r2, #2
 80107cc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80107ce:	d018      	beq.n	8010802 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107d4:	781a      	ldrb	r2, [r3, #0]
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107e0:	1c5a      	adds	r2, r3, #1
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80107ea:	3b01      	subs	r3, #1
 80107ec:	b29a      	uxth	r2, r3
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80107f6:	b29b      	uxth	r3, r3
 80107f8:	3b01      	subs	r3, #1
 80107fa:	b29a      	uxth	r2, r3
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010800:	e09e      	b.n	8010940 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	2280      	movs	r2, #128	@ 0x80
 8010806:	4013      	ands	r3, r2
 8010808:	d100      	bne.n	801080c <I2C_Master_ISR_IT+0xec>
 801080a:	e069      	b.n	80108e0 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2240      	movs	r2, #64	@ 0x40
 8010810:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010812:	d065      	beq.n	80108e0 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010818:	b29b      	uxth	r3, r3
 801081a:	2b00      	cmp	r3, #0
 801081c:	d04a      	beq.n	80108b4 <I2C_Master_ISR_IT+0x194>
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010822:	2b00      	cmp	r3, #0
 8010824:	d146      	bne.n	80108b4 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	685b      	ldr	r3, [r3, #4]
 801082c:	b29a      	uxth	r2, r3
 801082e:	2112      	movs	r1, #18
 8010830:	187b      	adds	r3, r7, r1
 8010832:	0592      	lsls	r2, r2, #22
 8010834:	0d92      	lsrs	r2, r2, #22
 8010836:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801083c:	b29b      	uxth	r3, r3
 801083e:	2bff      	cmp	r3, #255	@ 0xff
 8010840:	d910      	bls.n	8010864 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	22ff      	movs	r2, #255	@ 0xff
 8010846:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801084c:	b2da      	uxtb	r2, r3
 801084e:	2380      	movs	r3, #128	@ 0x80
 8010850:	045c      	lsls	r4, r3, #17
 8010852:	187b      	adds	r3, r7, r1
 8010854:	8819      	ldrh	r1, [r3, #0]
 8010856:	68f8      	ldr	r0, [r7, #12]
 8010858:	2300      	movs	r3, #0
 801085a:	9300      	str	r3, [sp, #0]
 801085c:	0023      	movs	r3, r4
 801085e:	f001 fc8f 	bl	8012180 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010862:	e03c      	b.n	80108de <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010868:	b29a      	uxth	r2, r3
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010872:	4a3f      	ldr	r2, [pc, #252]	@ (8010970 <I2C_Master_ISR_IT+0x250>)
 8010874:	4293      	cmp	r3, r2
 8010876:	d00e      	beq.n	8010896 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801087c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010882:	2312      	movs	r3, #18
 8010884:	18fb      	adds	r3, r7, r3
 8010886:	8819      	ldrh	r1, [r3, #0]
 8010888:	68f8      	ldr	r0, [r7, #12]
 801088a:	2300      	movs	r3, #0
 801088c:	9300      	str	r3, [sp, #0]
 801088e:	0023      	movs	r3, r4
 8010890:	f001 fc76 	bl	8012180 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010894:	e023      	b.n	80108de <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801089a:	b2da      	uxtb	r2, r3
 801089c:	2380      	movs	r3, #128	@ 0x80
 801089e:	049c      	lsls	r4, r3, #18
 80108a0:	2312      	movs	r3, #18
 80108a2:	18fb      	adds	r3, r7, r3
 80108a4:	8819      	ldrh	r1, [r3, #0]
 80108a6:	68f8      	ldr	r0, [r7, #12]
 80108a8:	2300      	movs	r3, #0
 80108aa:	9300      	str	r3, [sp, #0]
 80108ac:	0023      	movs	r3, r4
 80108ae:	f001 fc67 	bl	8012180 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80108b2:	e014      	b.n	80108de <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	685a      	ldr	r2, [r3, #4]
 80108ba:	2380      	movs	r3, #128	@ 0x80
 80108bc:	049b      	lsls	r3, r3, #18
 80108be:	401a      	ands	r2, r3
 80108c0:	2380      	movs	r3, #128	@ 0x80
 80108c2:	049b      	lsls	r3, r3, #18
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d004      	beq.n	80108d2 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	0018      	movs	r0, r3
 80108cc:	f000 fcf4 	bl	80112b8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80108d0:	e036      	b.n	8010940 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	2140      	movs	r1, #64	@ 0x40
 80108d6:	0018      	movs	r0, r3
 80108d8:	f000 ffda 	bl	8011890 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80108dc:	e030      	b.n	8010940 <I2C_Master_ISR_IT+0x220>
 80108de:	e02f      	b.n	8010940 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	2240      	movs	r2, #64	@ 0x40
 80108e4:	4013      	ands	r3, r2
 80108e6:	d02b      	beq.n	8010940 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2240      	movs	r2, #64	@ 0x40
 80108ec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80108ee:	d027      	beq.n	8010940 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108f4:	b29b      	uxth	r3, r3
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d11d      	bne.n	8010936 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	685a      	ldr	r2, [r3, #4]
 8010900:	2380      	movs	r3, #128	@ 0x80
 8010902:	049b      	lsls	r3, r3, #18
 8010904:	401a      	ands	r2, r3
 8010906:	2380      	movs	r3, #128	@ 0x80
 8010908:	049b      	lsls	r3, r3, #18
 801090a:	429a      	cmp	r2, r3
 801090c:	d018      	beq.n	8010940 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010912:	4a17      	ldr	r2, [pc, #92]	@ (8010970 <I2C_Master_ISR_IT+0x250>)
 8010914:	4293      	cmp	r3, r2
 8010916:	d109      	bne.n	801092c <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	685a      	ldr	r2, [r3, #4]
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	2180      	movs	r1, #128	@ 0x80
 8010924:	01c9      	lsls	r1, r1, #7
 8010926:	430a      	orrs	r2, r1
 8010928:	605a      	str	r2, [r3, #4]
 801092a:	e009      	b.n	8010940 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	0018      	movs	r0, r3
 8010930:	f000 fcc2 	bl	80112b8 <I2C_ITMasterSeqCplt>
 8010934:	e004      	b.n	8010940 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	2140      	movs	r1, #64	@ 0x40
 801093a:	0018      	movs	r0, r3
 801093c:	f000 ffa8 	bl	8011890 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	2220      	movs	r2, #32
 8010944:	4013      	ands	r3, r2
 8010946:	d009      	beq.n	801095c <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2220      	movs	r2, #32
 801094c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801094e:	d005      	beq.n	801095c <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8010950:	697a      	ldr	r2, [r7, #20]
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	0011      	movs	r1, r2
 8010956:	0018      	movs	r0, r3
 8010958:	f000 fd54 	bl	8011404 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	2240      	movs	r2, #64	@ 0x40
 8010960:	2100      	movs	r1, #0
 8010962:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010964:	2300      	movs	r3, #0
}
 8010966:	0018      	movs	r0, r3
 8010968:	46bd      	mov	sp, r7
 801096a:	b007      	add	sp, #28
 801096c:	bd90      	pop	{r4, r7, pc}
 801096e:	46c0      	nop			@ (mov r8, r8)
 8010970:	ffff0000 	.word	0xffff0000

08010974 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b086      	sub	sp, #24
 8010978:	af00      	add	r7, sp, #0
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010984:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	2240      	movs	r2, #64	@ 0x40
 801098e:	5c9b      	ldrb	r3, [r3, r2]
 8010990:	2b01      	cmp	r3, #1
 8010992:	d101      	bne.n	8010998 <I2C_Slave_ISR_IT+0x24>
 8010994:	2302      	movs	r3, #2
 8010996:	e0e6      	b.n	8010b66 <I2C_Slave_ISR_IT+0x1f2>
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2240      	movs	r2, #64	@ 0x40
 801099c:	2101      	movs	r1, #1
 801099e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	2220      	movs	r2, #32
 80109a4:	4013      	ands	r3, r2
 80109a6:	d009      	beq.n	80109bc <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2220      	movs	r2, #32
 80109ac:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80109ae:	d005      	beq.n	80109bc <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80109b0:	693a      	ldr	r2, [r7, #16]
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	0011      	movs	r1, r2
 80109b6:	0018      	movs	r0, r3
 80109b8:	f000 fdf2 	bl	80115a0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80109bc:	693b      	ldr	r3, [r7, #16]
 80109be:	2210      	movs	r2, #16
 80109c0:	4013      	ands	r3, r2
 80109c2:	d052      	beq.n	8010a6a <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2210      	movs	r2, #16
 80109c8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80109ca:	d04e      	beq.n	8010a6a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80109d0:	b29b      	uxth	r3, r3
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d12d      	bne.n	8010a32 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	2241      	movs	r2, #65	@ 0x41
 80109da:	5c9b      	ldrb	r3, [r3, r2]
 80109dc:	b2db      	uxtb	r3, r3
 80109de:	2b28      	cmp	r3, #40	@ 0x28
 80109e0:	d10b      	bne.n	80109fa <I2C_Slave_ISR_IT+0x86>
 80109e2:	697a      	ldr	r2, [r7, #20]
 80109e4:	2380      	movs	r3, #128	@ 0x80
 80109e6:	049b      	lsls	r3, r3, #18
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d106      	bne.n	80109fa <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80109ec:	693a      	ldr	r2, [r7, #16]
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	0011      	movs	r1, r2
 80109f2:	0018      	movs	r0, r3
 80109f4:	f000 fef4 	bl	80117e0 <I2C_ITListenCplt>
 80109f8:	e036      	b.n	8010a68 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	2241      	movs	r2, #65	@ 0x41
 80109fe:	5c9b      	ldrb	r3, [r3, r2]
 8010a00:	b2db      	uxtb	r3, r3
 8010a02:	2b29      	cmp	r3, #41	@ 0x29
 8010a04:	d110      	bne.n	8010a28 <I2C_Slave_ISR_IT+0xb4>
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	4a59      	ldr	r2, [pc, #356]	@ (8010b70 <I2C_Slave_ISR_IT+0x1fc>)
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	d00c      	beq.n	8010a28 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	2210      	movs	r2, #16
 8010a14:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	0018      	movs	r0, r3
 8010a1a:	f001 f864 	bl	8011ae6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	0018      	movs	r0, r3
 8010a22:	f000 fc8b 	bl	801133c <I2C_ITSlaveSeqCplt>
 8010a26:	e01f      	b.n	8010a68 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	2210      	movs	r2, #16
 8010a2e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8010a30:	e091      	b.n	8010b56 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	2210      	movs	r2, #16
 8010a38:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a3e:	2204      	movs	r2, #4
 8010a40:	431a      	orrs	r2, r3
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d005      	beq.n	8010a58 <I2C_Slave_ISR_IT+0xe4>
 8010a4c:	697a      	ldr	r2, [r7, #20]
 8010a4e:	2380      	movs	r3, #128	@ 0x80
 8010a50:	045b      	lsls	r3, r3, #17
 8010a52:	429a      	cmp	r2, r3
 8010a54:	d000      	beq.n	8010a58 <I2C_Slave_ISR_IT+0xe4>
 8010a56:	e07e      	b.n	8010b56 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	0011      	movs	r1, r2
 8010a60:	0018      	movs	r0, r3
 8010a62:	f000 ff15 	bl	8011890 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8010a66:	e076      	b.n	8010b56 <I2C_Slave_ISR_IT+0x1e2>
 8010a68:	e075      	b.n	8010b56 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	2204      	movs	r2, #4
 8010a6e:	4013      	ands	r3, r2
 8010a70:	d02f      	beq.n	8010ad2 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2204      	movs	r2, #4
 8010a76:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010a78:	d02b      	beq.n	8010ad2 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a7e:	b29b      	uxth	r3, r3
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d018      	beq.n	8010ab6 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a8e:	b2d2      	uxtb	r2, r2
 8010a90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a96:	1c5a      	adds	r2, r3, #1
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010aa0:	3b01      	subs	r3, #1
 8010aa2:	b29a      	uxth	r2, r3
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010aac:	b29b      	uxth	r3, r3
 8010aae:	3b01      	subs	r3, #1
 8010ab0:	b29a      	uxth	r2, r3
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010aba:	b29b      	uxth	r3, r3
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d14c      	bne.n	8010b5a <I2C_Slave_ISR_IT+0x1e6>
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	4a2b      	ldr	r2, [pc, #172]	@ (8010b70 <I2C_Slave_ISR_IT+0x1fc>)
 8010ac4:	4293      	cmp	r3, r2
 8010ac6:	d048      	beq.n	8010b5a <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	0018      	movs	r0, r3
 8010acc:	f000 fc36 	bl	801133c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8010ad0:	e043      	b.n	8010b5a <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010ad2:	693b      	ldr	r3, [r7, #16]
 8010ad4:	2208      	movs	r2, #8
 8010ad6:	4013      	ands	r3, r2
 8010ad8:	d00a      	beq.n	8010af0 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2208      	movs	r2, #8
 8010ade:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010ae0:	d006      	beq.n	8010af0 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8010ae2:	693a      	ldr	r2, [r7, #16]
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	0011      	movs	r1, r2
 8010ae8:	0018      	movs	r0, r3
 8010aea:	f000 fb41 	bl	8011170 <I2C_ITAddrCplt>
 8010aee:	e035      	b.n	8010b5c <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	2202      	movs	r2, #2
 8010af4:	4013      	ands	r3, r2
 8010af6:	d031      	beq.n	8010b5c <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2202      	movs	r2, #2
 8010afc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010afe:	d02d      	beq.n	8010b5c <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b04:	b29b      	uxth	r3, r3
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d018      	beq.n	8010b3c <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b0e:	781a      	ldrb	r2, [r3, #0]
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b1a:	1c5a      	adds	r2, r3, #1
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b24:	b29b      	uxth	r3, r3
 8010b26:	3b01      	subs	r3, #1
 8010b28:	b29a      	uxth	r2, r3
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b32:	3b01      	subs	r3, #1
 8010b34:	b29a      	uxth	r2, r3
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	851a      	strh	r2, [r3, #40]	@ 0x28
 8010b3a:	e00f      	b.n	8010b5c <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8010b3c:	697a      	ldr	r2, [r7, #20]
 8010b3e:	2380      	movs	r3, #128	@ 0x80
 8010b40:	045b      	lsls	r3, r3, #17
 8010b42:	429a      	cmp	r2, r3
 8010b44:	d002      	beq.n	8010b4c <I2C_Slave_ISR_IT+0x1d8>
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d107      	bne.n	8010b5c <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	0018      	movs	r0, r3
 8010b50:	f000 fbf4 	bl	801133c <I2C_ITSlaveSeqCplt>
 8010b54:	e002      	b.n	8010b5c <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8010b56:	46c0      	nop			@ (mov r8, r8)
 8010b58:	e000      	b.n	8010b5c <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8010b5a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	2240      	movs	r2, #64	@ 0x40
 8010b60:	2100      	movs	r1, #0
 8010b62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010b64:	2300      	movs	r3, #0
}
 8010b66:	0018      	movs	r0, r3
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	b006      	add	sp, #24
 8010b6c:	bd80      	pop	{r7, pc}
 8010b6e:	46c0      	nop			@ (mov r8, r8)
 8010b70:	ffff0000 	.word	0xffff0000

08010b74 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8010b74:	b590      	push	{r4, r7, lr}
 8010b76:	b089      	sub	sp, #36	@ 0x24
 8010b78:	af02      	add	r7, sp, #8
 8010b7a:	60f8      	str	r0, [r7, #12]
 8010b7c:	60b9      	str	r1, [r7, #8]
 8010b7e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	2240      	movs	r2, #64	@ 0x40
 8010b84:	5c9b      	ldrb	r3, [r3, r2]
 8010b86:	2b01      	cmp	r3, #1
 8010b88:	d101      	bne.n	8010b8e <I2C_Master_ISR_DMA+0x1a>
 8010b8a:	2302      	movs	r3, #2
 8010b8c:	e0e7      	b.n	8010d5e <I2C_Master_ISR_DMA+0x1ea>
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	2240      	movs	r2, #64	@ 0x40
 8010b92:	2101      	movs	r1, #1
 8010b94:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	2210      	movs	r2, #16
 8010b9a:	4013      	ands	r3, r2
 8010b9c:	d017      	beq.n	8010bce <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2210      	movs	r2, #16
 8010ba2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010ba4:	d013      	beq.n	8010bce <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	2210      	movs	r2, #16
 8010bac:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010bb2:	2204      	movs	r2, #4
 8010bb4:	431a      	orrs	r2, r3
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	2120      	movs	r1, #32
 8010bbe:	0018      	movs	r0, r3
 8010bc0:	f001 fb18 	bl	80121f4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	0018      	movs	r0, r3
 8010bc8:	f000 ff8d 	bl	8011ae6 <I2C_Flush_TXDR>
 8010bcc:	e0c2      	b.n	8010d54 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	2280      	movs	r2, #128	@ 0x80
 8010bd2:	4013      	ands	r3, r2
 8010bd4:	d100      	bne.n	8010bd8 <I2C_Master_ISR_DMA+0x64>
 8010bd6:	e07c      	b.n	8010cd2 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2240      	movs	r2, #64	@ 0x40
 8010bdc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010bde:	d100      	bne.n	8010be2 <I2C_Master_ISR_DMA+0x6e>
 8010be0:	e077      	b.n	8010cd2 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	681a      	ldr	r2, [r3, #0]
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	2140      	movs	r1, #64	@ 0x40
 8010bee:	438a      	bics	r2, r1
 8010bf0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d055      	beq.n	8010ca8 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	685b      	ldr	r3, [r3, #4]
 8010c02:	b29a      	uxth	r2, r3
 8010c04:	2312      	movs	r3, #18
 8010c06:	18fb      	adds	r3, r7, r3
 8010c08:	0592      	lsls	r2, r2, #22
 8010c0a:	0d92      	lsrs	r2, r2, #22
 8010c0c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c12:	b29b      	uxth	r3, r3
 8010c14:	2bff      	cmp	r3, #255	@ 0xff
 8010c16:	d906      	bls.n	8010c26 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	22ff      	movs	r2, #255	@ 0xff
 8010c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8010c1e:	2380      	movs	r3, #128	@ 0x80
 8010c20:	045b      	lsls	r3, r3, #17
 8010c22:	617b      	str	r3, [r7, #20]
 8010c24:	e010      	b.n	8010c48 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c2a:	b29a      	uxth	r2, r3
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c34:	4a4c      	ldr	r2, [pc, #304]	@ (8010d68 <I2C_Master_ISR_DMA+0x1f4>)
 8010c36:	4293      	cmp	r3, r2
 8010c38:	d003      	beq.n	8010c42 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c3e:	617b      	str	r3, [r7, #20]
 8010c40:	e002      	b.n	8010c48 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8010c42:	2380      	movs	r3, #128	@ 0x80
 8010c44:	049b      	lsls	r3, r3, #18
 8010c46:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c4c:	b2da      	uxtb	r2, r3
 8010c4e:	697c      	ldr	r4, [r7, #20]
 8010c50:	2312      	movs	r3, #18
 8010c52:	18fb      	adds	r3, r7, r3
 8010c54:	8819      	ldrh	r1, [r3, #0]
 8010c56:	68f8      	ldr	r0, [r7, #12]
 8010c58:	2300      	movs	r3, #0
 8010c5a:	9300      	str	r3, [sp, #0]
 8010c5c:	0023      	movs	r3, r4
 8010c5e:	f001 fa8f 	bl	8012180 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c66:	b29a      	uxth	r2, r3
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c6c:	1ad3      	subs	r3, r2, r3
 8010c6e:	b29a      	uxth	r2, r3
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2241      	movs	r2, #65	@ 0x41
 8010c78:	5c9b      	ldrb	r3, [r3, r2]
 8010c7a:	b2db      	uxtb	r3, r3
 8010c7c:	2b22      	cmp	r3, #34	@ 0x22
 8010c7e:	d109      	bne.n	8010c94 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	681a      	ldr	r2, [r3, #0]
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	2180      	movs	r1, #128	@ 0x80
 8010c8c:	0209      	lsls	r1, r1, #8
 8010c8e:	430a      	orrs	r2, r1
 8010c90:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010c92:	e05f      	b.n	8010d54 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	681a      	ldr	r2, [r3, #0]
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	2180      	movs	r1, #128	@ 0x80
 8010ca0:	01c9      	lsls	r1, r1, #7
 8010ca2:	430a      	orrs	r2, r1
 8010ca4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010ca6:	e055      	b.n	8010d54 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	685a      	ldr	r2, [r3, #4]
 8010cae:	2380      	movs	r3, #128	@ 0x80
 8010cb0:	049b      	lsls	r3, r3, #18
 8010cb2:	401a      	ands	r2, r3
 8010cb4:	2380      	movs	r3, #128	@ 0x80
 8010cb6:	049b      	lsls	r3, r3, #18
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d004      	beq.n	8010cc6 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	0018      	movs	r0, r3
 8010cc0:	f000 fafa 	bl	80112b8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8010cc4:	e046      	b.n	8010d54 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	2140      	movs	r1, #64	@ 0x40
 8010cca:	0018      	movs	r0, r3
 8010ccc:	f000 fde0 	bl	8011890 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8010cd0:	e040      	b.n	8010d54 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010cd2:	68bb      	ldr	r3, [r7, #8]
 8010cd4:	2240      	movs	r2, #64	@ 0x40
 8010cd6:	4013      	ands	r3, r2
 8010cd8:	d02c      	beq.n	8010d34 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2240      	movs	r2, #64	@ 0x40
 8010cde:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010ce0:	d028      	beq.n	8010d34 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ce6:	b29b      	uxth	r3, r3
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d11d      	bne.n	8010d28 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	685a      	ldr	r2, [r3, #4]
 8010cf2:	2380      	movs	r3, #128	@ 0x80
 8010cf4:	049b      	lsls	r3, r3, #18
 8010cf6:	401a      	ands	r2, r3
 8010cf8:	2380      	movs	r3, #128	@ 0x80
 8010cfa:	049b      	lsls	r3, r3, #18
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d028      	beq.n	8010d52 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d04:	4a18      	ldr	r2, [pc, #96]	@ (8010d68 <I2C_Master_ISR_DMA+0x1f4>)
 8010d06:	4293      	cmp	r3, r2
 8010d08:	d109      	bne.n	8010d1e <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	685a      	ldr	r2, [r3, #4]
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	2180      	movs	r1, #128	@ 0x80
 8010d16:	01c9      	lsls	r1, r1, #7
 8010d18:	430a      	orrs	r2, r1
 8010d1a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8010d1c:	e019      	b.n	8010d52 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	0018      	movs	r0, r3
 8010d22:	f000 fac9 	bl	80112b8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8010d26:	e014      	b.n	8010d52 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	2140      	movs	r1, #64	@ 0x40
 8010d2c:	0018      	movs	r0, r3
 8010d2e:	f000 fdaf 	bl	8011890 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8010d32:	e00e      	b.n	8010d52 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	2220      	movs	r2, #32
 8010d38:	4013      	ands	r3, r2
 8010d3a:	d00b      	beq.n	8010d54 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2220      	movs	r2, #32
 8010d40:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010d42:	d007      	beq.n	8010d54 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8010d44:	68ba      	ldr	r2, [r7, #8]
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	0011      	movs	r1, r2
 8010d4a:	0018      	movs	r0, r3
 8010d4c:	f000 fb5a 	bl	8011404 <I2C_ITMasterCplt>
 8010d50:	e000      	b.n	8010d54 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8010d52:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	2240      	movs	r2, #64	@ 0x40
 8010d58:	2100      	movs	r1, #0
 8010d5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010d5c:	2300      	movs	r3, #0
}
 8010d5e:	0018      	movs	r0, r3
 8010d60:	46bd      	mov	sp, r7
 8010d62:	b007      	add	sp, #28
 8010d64:	bd90      	pop	{r4, r7, pc}
 8010d66:	46c0      	nop			@ (mov r8, r8)
 8010d68:	ffff0000 	.word	0xffff0000

08010d6c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8010d6c:	b590      	push	{r4, r7, lr}
 8010d6e:	b089      	sub	sp, #36	@ 0x24
 8010d70:	af02      	add	r7, sp, #8
 8010d72:	60f8      	str	r0, [r7, #12]
 8010d74:	60b9      	str	r1, [r7, #8]
 8010d76:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8010d78:	4b88      	ldr	r3, [pc, #544]	@ (8010f9c <I2C_Mem_ISR_DMA+0x230>)
 8010d7a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	2240      	movs	r2, #64	@ 0x40
 8010d80:	5c9b      	ldrb	r3, [r3, r2]
 8010d82:	2b01      	cmp	r3, #1
 8010d84:	d101      	bne.n	8010d8a <I2C_Mem_ISR_DMA+0x1e>
 8010d86:	2302      	movs	r3, #2
 8010d88:	e104      	b.n	8010f94 <I2C_Mem_ISR_DMA+0x228>
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	2240      	movs	r2, #64	@ 0x40
 8010d8e:	2101      	movs	r1, #1
 8010d90:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	2210      	movs	r2, #16
 8010d96:	4013      	ands	r3, r2
 8010d98:	d017      	beq.n	8010dca <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2210      	movs	r2, #16
 8010d9e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010da0:	d013      	beq.n	8010dca <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	2210      	movs	r2, #16
 8010da8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010dae:	2204      	movs	r2, #4
 8010db0:	431a      	orrs	r2, r3
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	2120      	movs	r1, #32
 8010dba:	0018      	movs	r0, r3
 8010dbc:	f001 fa1a 	bl	80121f4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	0018      	movs	r0, r3
 8010dc4:	f000 fe8f 	bl	8011ae6 <I2C_Flush_TXDR>
 8010dc8:	e0df      	b.n	8010f8a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	2202      	movs	r2, #2
 8010dce:	4013      	ands	r3, r2
 8010dd0:	d00d      	beq.n	8010dee <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2202      	movs	r2, #2
 8010dd6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010dd8:	d009      	beq.n	8010dee <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	68fa      	ldr	r2, [r7, #12]
 8010de0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8010de2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	2201      	movs	r2, #1
 8010de8:	4252      	negs	r2, r2
 8010dea:	651a      	str	r2, [r3, #80]	@ 0x50
 8010dec:	e0cd      	b.n	8010f8a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	2280      	movs	r2, #128	@ 0x80
 8010df2:	4013      	ands	r3, r2
 8010df4:	d05e      	beq.n	8010eb4 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	2240      	movs	r2, #64	@ 0x40
 8010dfa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010dfc:	d05a      	beq.n	8010eb4 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	2110      	movs	r1, #16
 8010e02:	0018      	movs	r0, r3
 8010e04:	f001 f9f6 	bl	80121f4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d04a      	beq.n	8010ea8 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	2bff      	cmp	r3, #255	@ 0xff
 8010e1a:	d910      	bls.n	8010e3e <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	22ff      	movs	r2, #255	@ 0xff
 8010e20:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010e26:	b299      	uxth	r1, r3
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e2c:	b2da      	uxtb	r2, r3
 8010e2e:	2380      	movs	r3, #128	@ 0x80
 8010e30:	045b      	lsls	r3, r3, #17
 8010e32:	68f8      	ldr	r0, [r7, #12]
 8010e34:	2400      	movs	r4, #0
 8010e36:	9400      	str	r4, [sp, #0]
 8010e38:	f001 f9a2 	bl	8012180 <I2C_TransferConfig>
 8010e3c:	e011      	b.n	8010e62 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010e42:	b29a      	uxth	r2, r3
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010e4c:	b299      	uxth	r1, r3
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e52:	b2da      	uxtb	r2, r3
 8010e54:	2380      	movs	r3, #128	@ 0x80
 8010e56:	049b      	lsls	r3, r3, #18
 8010e58:	68f8      	ldr	r0, [r7, #12]
 8010e5a:	2400      	movs	r4, #0
 8010e5c:	9400      	str	r4, [sp, #0]
 8010e5e:	f001 f98f 	bl	8012180 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010e66:	b29a      	uxth	r2, r3
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e6c:	1ad3      	subs	r3, r2, r3
 8010e6e:	b29a      	uxth	r2, r3
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	2241      	movs	r2, #65	@ 0x41
 8010e78:	5c9b      	ldrb	r3, [r3, r2]
 8010e7a:	b2db      	uxtb	r3, r3
 8010e7c:	2b22      	cmp	r3, #34	@ 0x22
 8010e7e:	d109      	bne.n	8010e94 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	681a      	ldr	r2, [r3, #0]
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	2180      	movs	r1, #128	@ 0x80
 8010e8c:	0209      	lsls	r1, r1, #8
 8010e8e:	430a      	orrs	r2, r1
 8010e90:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010e92:	e07a      	b.n	8010f8a <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	681a      	ldr	r2, [r3, #0]
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	2180      	movs	r1, #128	@ 0x80
 8010ea0:	01c9      	lsls	r1, r1, #7
 8010ea2:	430a      	orrs	r2, r1
 8010ea4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010ea6:	e070      	b.n	8010f8a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	2140      	movs	r1, #64	@ 0x40
 8010eac:	0018      	movs	r0, r3
 8010eae:	f000 fcef 	bl	8011890 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8010eb2:	e06a      	b.n	8010f8a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	2240      	movs	r2, #64	@ 0x40
 8010eb8:	4013      	ands	r3, r2
 8010eba:	d058      	beq.n	8010f6e <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2240      	movs	r2, #64	@ 0x40
 8010ec0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010ec2:	d054      	beq.n	8010f6e <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	2241      	movs	r2, #65	@ 0x41
 8010ec8:	5c9b      	ldrb	r3, [r3, r2]
 8010eca:	b2db      	uxtb	r3, r3
 8010ecc:	2b22      	cmp	r3, #34	@ 0x22
 8010ece:	d101      	bne.n	8010ed4 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8010ed0:	4b33      	ldr	r3, [pc, #204]	@ (8010fa0 <I2C_Mem_ISR_DMA+0x234>)
 8010ed2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ed8:	b29b      	uxth	r3, r3
 8010eda:	2bff      	cmp	r3, #255	@ 0xff
 8010edc:	d911      	bls.n	8010f02 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	22ff      	movs	r2, #255	@ 0xff
 8010ee2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010ee8:	b299      	uxth	r1, r3
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010eee:	b2da      	uxtb	r2, r3
 8010ef0:	2380      	movs	r3, #128	@ 0x80
 8010ef2:	045c      	lsls	r4, r3, #17
 8010ef4:	68f8      	ldr	r0, [r7, #12]
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	9300      	str	r3, [sp, #0]
 8010efa:	0023      	movs	r3, r4
 8010efc:	f001 f940 	bl	8012180 <I2C_TransferConfig>
 8010f00:	e012      	b.n	8010f28 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f06:	b29a      	uxth	r2, r3
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010f10:	b299      	uxth	r1, r3
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f16:	b2da      	uxtb	r2, r3
 8010f18:	2380      	movs	r3, #128	@ 0x80
 8010f1a:	049c      	lsls	r4, r3, #18
 8010f1c:	68f8      	ldr	r0, [r7, #12]
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	9300      	str	r3, [sp, #0]
 8010f22:	0023      	movs	r3, r4
 8010f24:	f001 f92c 	bl	8012180 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f2c:	b29a      	uxth	r2, r3
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f32:	1ad3      	subs	r3, r2, r3
 8010f34:	b29a      	uxth	r2, r3
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	2241      	movs	r2, #65	@ 0x41
 8010f3e:	5c9b      	ldrb	r3, [r3, r2]
 8010f40:	b2db      	uxtb	r3, r3
 8010f42:	2b22      	cmp	r3, #34	@ 0x22
 8010f44:	d109      	bne.n	8010f5a <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	681a      	ldr	r2, [r3, #0]
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	2180      	movs	r1, #128	@ 0x80
 8010f52:	0209      	lsls	r1, r1, #8
 8010f54:	430a      	orrs	r2, r1
 8010f56:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010f58:	e017      	b.n	8010f8a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	681a      	ldr	r2, [r3, #0]
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	2180      	movs	r1, #128	@ 0x80
 8010f66:	01c9      	lsls	r1, r1, #7
 8010f68:	430a      	orrs	r2, r1
 8010f6a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010f6c:	e00d      	b.n	8010f8a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	2220      	movs	r2, #32
 8010f72:	4013      	ands	r3, r2
 8010f74:	d009      	beq.n	8010f8a <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2220      	movs	r2, #32
 8010f7a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010f7c:	d005      	beq.n	8010f8a <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8010f7e:	68ba      	ldr	r2, [r7, #8]
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	0011      	movs	r1, r2
 8010f84:	0018      	movs	r0, r3
 8010f86:	f000 fa3d 	bl	8011404 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	2240      	movs	r2, #64	@ 0x40
 8010f8e:	2100      	movs	r1, #0
 8010f90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010f92:	2300      	movs	r3, #0
}
 8010f94:	0018      	movs	r0, r3
 8010f96:	46bd      	mov	sp, r7
 8010f98:	b007      	add	sp, #28
 8010f9a:	bd90      	pop	{r4, r7, pc}
 8010f9c:	80002000 	.word	0x80002000
 8010fa0:	80002400 	.word	0x80002400

08010fa4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b088      	sub	sp, #32
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	60f8      	str	r0, [r7, #12]
 8010fac:	60b9      	str	r1, [r7, #8]
 8010fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fb4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	2240      	movs	r2, #64	@ 0x40
 8010fbe:	5c9b      	ldrb	r3, [r3, r2]
 8010fc0:	2b01      	cmp	r3, #1
 8010fc2:	d101      	bne.n	8010fc8 <I2C_Slave_ISR_DMA+0x24>
 8010fc4:	2302      	movs	r3, #2
 8010fc6:	e0cd      	b.n	8011164 <I2C_Slave_ISR_DMA+0x1c0>
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	2240      	movs	r2, #64	@ 0x40
 8010fcc:	2101      	movs	r1, #1
 8010fce:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	2220      	movs	r2, #32
 8010fd4:	4013      	ands	r3, r2
 8010fd6:	d009      	beq.n	8010fec <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2220      	movs	r2, #32
 8010fdc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010fde:	d005      	beq.n	8010fec <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8010fe0:	68ba      	ldr	r2, [r7, #8]
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	0011      	movs	r1, r2
 8010fe6:	0018      	movs	r0, r3
 8010fe8:	f000 fada 	bl	80115a0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	2210      	movs	r2, #16
 8010ff0:	4013      	ands	r3, r2
 8010ff2:	d100      	bne.n	8010ff6 <I2C_Slave_ISR_DMA+0x52>
 8010ff4:	e0a3      	b.n	801113e <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2210      	movs	r2, #16
 8010ffa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010ffc:	d100      	bne.n	8011000 <I2C_Slave_ISR_DMA+0x5c>
 8010ffe:	e09e      	b.n	801113e <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011000:	687a      	ldr	r2, [r7, #4]
 8011002:	2380      	movs	r3, #128	@ 0x80
 8011004:	01db      	lsls	r3, r3, #7
 8011006:	4013      	ands	r3, r2
 8011008:	d105      	bne.n	8011016 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 801100a:	687a      	ldr	r2, [r7, #4]
 801100c:	2380      	movs	r3, #128	@ 0x80
 801100e:	021b      	lsls	r3, r3, #8
 8011010:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011012:	d100      	bne.n	8011016 <I2C_Slave_ISR_DMA+0x72>
 8011014:	e08c      	b.n	8011130 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801101a:	2b00      	cmp	r3, #0
 801101c:	d00c      	beq.n	8011038 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 801101e:	687a      	ldr	r2, [r7, #4]
 8011020:	2380      	movs	r3, #128	@ 0x80
 8011022:	021b      	lsls	r3, r3, #8
 8011024:	4013      	ands	r3, r2
 8011026:	d007      	beq.n	8011038 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	685b      	ldr	r3, [r3, #4]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d101      	bne.n	8011038 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8011034:	2301      	movs	r3, #1
 8011036:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801103c:	2b00      	cmp	r3, #0
 801103e:	d00c      	beq.n	801105a <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8011040:	687a      	ldr	r2, [r7, #4]
 8011042:	2380      	movs	r3, #128	@ 0x80
 8011044:	01db      	lsls	r3, r3, #7
 8011046:	4013      	ands	r3, r2
 8011048:	d007      	beq.n	801105a <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d101      	bne.n	801105a <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8011056:	2301      	movs	r3, #1
 8011058:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 801105a:	69fb      	ldr	r3, [r7, #28]
 801105c:	2b01      	cmp	r3, #1
 801105e:	d12d      	bne.n	80110bc <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	2241      	movs	r2, #65	@ 0x41
 8011064:	5c9b      	ldrb	r3, [r3, r2]
 8011066:	b2db      	uxtb	r3, r3
 8011068:	2b28      	cmp	r3, #40	@ 0x28
 801106a:	d10b      	bne.n	8011084 <I2C_Slave_ISR_DMA+0xe0>
 801106c:	69ba      	ldr	r2, [r7, #24]
 801106e:	2380      	movs	r3, #128	@ 0x80
 8011070:	049b      	lsls	r3, r3, #18
 8011072:	429a      	cmp	r2, r3
 8011074:	d106      	bne.n	8011084 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8011076:	68ba      	ldr	r2, [r7, #8]
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	0011      	movs	r1, r2
 801107c:	0018      	movs	r0, r3
 801107e:	f000 fbaf 	bl	80117e0 <I2C_ITListenCplt>
 8011082:	e054      	b.n	801112e <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	2241      	movs	r2, #65	@ 0x41
 8011088:	5c9b      	ldrb	r3, [r3, r2]
 801108a:	b2db      	uxtb	r3, r3
 801108c:	2b29      	cmp	r3, #41	@ 0x29
 801108e:	d110      	bne.n	80110b2 <I2C_Slave_ISR_DMA+0x10e>
 8011090:	69bb      	ldr	r3, [r7, #24]
 8011092:	4a36      	ldr	r2, [pc, #216]	@ (801116c <I2C_Slave_ISR_DMA+0x1c8>)
 8011094:	4293      	cmp	r3, r2
 8011096:	d00c      	beq.n	80110b2 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	2210      	movs	r2, #16
 801109e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	0018      	movs	r0, r3
 80110a4:	f000 fd1f 	bl	8011ae6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	0018      	movs	r0, r3
 80110ac:	f000 f946 	bl	801133c <I2C_ITSlaveSeqCplt>
 80110b0:	e03d      	b.n	801112e <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	2210      	movs	r2, #16
 80110b8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80110ba:	e03e      	b.n	801113a <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	2210      	movs	r2, #16
 80110c2:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110c8:	2204      	movs	r2, #4
 80110ca:	431a      	orrs	r2, r3
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80110d0:	2317      	movs	r3, #23
 80110d2:	18fb      	adds	r3, r7, r3
 80110d4:	68fa      	ldr	r2, [r7, #12]
 80110d6:	2141      	movs	r1, #65	@ 0x41
 80110d8:	5c52      	ldrb	r2, [r2, r1]
 80110da:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80110dc:	69bb      	ldr	r3, [r7, #24]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d004      	beq.n	80110ec <I2C_Slave_ISR_DMA+0x148>
 80110e2:	69ba      	ldr	r2, [r7, #24]
 80110e4:	2380      	movs	r3, #128	@ 0x80
 80110e6:	045b      	lsls	r3, r3, #17
 80110e8:	429a      	cmp	r2, r3
 80110ea:	d126      	bne.n	801113a <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80110ec:	2217      	movs	r2, #23
 80110ee:	18bb      	adds	r3, r7, r2
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	2b21      	cmp	r3, #33	@ 0x21
 80110f4:	d003      	beq.n	80110fe <I2C_Slave_ISR_DMA+0x15a>
 80110f6:	18bb      	adds	r3, r7, r2
 80110f8:	781b      	ldrb	r3, [r3, #0]
 80110fa:	2b29      	cmp	r3, #41	@ 0x29
 80110fc:	d103      	bne.n	8011106 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	2221      	movs	r2, #33	@ 0x21
 8011102:	631a      	str	r2, [r3, #48]	@ 0x30
 8011104:	e00b      	b.n	801111e <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011106:	2217      	movs	r2, #23
 8011108:	18bb      	adds	r3, r7, r2
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	2b22      	cmp	r3, #34	@ 0x22
 801110e:	d003      	beq.n	8011118 <I2C_Slave_ISR_DMA+0x174>
 8011110:	18bb      	adds	r3, r7, r2
 8011112:	781b      	ldrb	r3, [r3, #0]
 8011114:	2b2a      	cmp	r3, #42	@ 0x2a
 8011116:	d102      	bne.n	801111e <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	2222      	movs	r2, #34	@ 0x22
 801111c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	0011      	movs	r1, r2
 8011126:	0018      	movs	r0, r3
 8011128:	f000 fbb2 	bl	8011890 <I2C_ITError>
      if (treatdmanack == 1U)
 801112c:	e005      	b.n	801113a <I2C_Slave_ISR_DMA+0x196>
 801112e:	e004      	b.n	801113a <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	2210      	movs	r2, #16
 8011136:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011138:	e00f      	b.n	801115a <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 801113a:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801113c:	e00d      	b.n	801115a <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	2208      	movs	r2, #8
 8011142:	4013      	ands	r3, r2
 8011144:	d009      	beq.n	801115a <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	2208      	movs	r2, #8
 801114a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801114c:	d005      	beq.n	801115a <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 801114e:	68ba      	ldr	r2, [r7, #8]
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	0011      	movs	r1, r2
 8011154:	0018      	movs	r0, r3
 8011156:	f000 f80b 	bl	8011170 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	2240      	movs	r2, #64	@ 0x40
 801115e:	2100      	movs	r1, #0
 8011160:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011162:	2300      	movs	r3, #0
}
 8011164:	0018      	movs	r0, r3
 8011166:	46bd      	mov	sp, r7
 8011168:	b008      	add	sp, #32
 801116a:	bd80      	pop	{r7, pc}
 801116c:	ffff0000 	.word	0xffff0000

08011170 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011170:	b5b0      	push	{r4, r5, r7, lr}
 8011172:	b084      	sub	sp, #16
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2241      	movs	r2, #65	@ 0x41
 801117e:	5c9b      	ldrb	r3, [r3, r2]
 8011180:	b2db      	uxtb	r3, r3
 8011182:	001a      	movs	r2, r3
 8011184:	2328      	movs	r3, #40	@ 0x28
 8011186:	4013      	ands	r3, r2
 8011188:	2b28      	cmp	r3, #40	@ 0x28
 801118a:	d000      	beq.n	801118e <I2C_ITAddrCplt+0x1e>
 801118c:	e088      	b.n	80112a0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	699b      	ldr	r3, [r3, #24]
 8011194:	0c1b      	lsrs	r3, r3, #16
 8011196:	b2da      	uxtb	r2, r3
 8011198:	250f      	movs	r5, #15
 801119a:	197b      	adds	r3, r7, r5
 801119c:	2101      	movs	r1, #1
 801119e:	400a      	ands	r2, r1
 80111a0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	699b      	ldr	r3, [r3, #24]
 80111a8:	0c1b      	lsrs	r3, r3, #16
 80111aa:	b29a      	uxth	r2, r3
 80111ac:	200c      	movs	r0, #12
 80111ae:	183b      	adds	r3, r7, r0
 80111b0:	21fe      	movs	r1, #254	@ 0xfe
 80111b2:	400a      	ands	r2, r1
 80111b4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	689b      	ldr	r3, [r3, #8]
 80111bc:	b29a      	uxth	r2, r3
 80111be:	240a      	movs	r4, #10
 80111c0:	193b      	adds	r3, r7, r4
 80111c2:	0592      	lsls	r2, r2, #22
 80111c4:	0d92      	lsrs	r2, r2, #22
 80111c6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	b29a      	uxth	r2, r3
 80111d0:	2308      	movs	r3, #8
 80111d2:	18fb      	adds	r3, r7, r3
 80111d4:	21fe      	movs	r1, #254	@ 0xfe
 80111d6:	400a      	ands	r2, r1
 80111d8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	68db      	ldr	r3, [r3, #12]
 80111de:	2b02      	cmp	r3, #2
 80111e0:	d148      	bne.n	8011274 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80111e2:	0021      	movs	r1, r4
 80111e4:	187b      	adds	r3, r7, r1
 80111e6:	881b      	ldrh	r3, [r3, #0]
 80111e8:	09db      	lsrs	r3, r3, #7
 80111ea:	b29a      	uxth	r2, r3
 80111ec:	183b      	adds	r3, r7, r0
 80111ee:	881b      	ldrh	r3, [r3, #0]
 80111f0:	4053      	eors	r3, r2
 80111f2:	b29b      	uxth	r3, r3
 80111f4:	001a      	movs	r2, r3
 80111f6:	2306      	movs	r3, #6
 80111f8:	4013      	ands	r3, r2
 80111fa:	d120      	bne.n	801123e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80111fc:	183b      	adds	r3, r7, r0
 80111fe:	187a      	adds	r2, r7, r1
 8011200:	8812      	ldrh	r2, [r2, #0]
 8011202:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011208:	1c5a      	adds	r2, r3, #1
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011212:	2b02      	cmp	r3, #2
 8011214:	d14c      	bne.n	80112b0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2200      	movs	r2, #0
 801121a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	2208      	movs	r2, #8
 8011222:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2240      	movs	r2, #64	@ 0x40
 8011228:	2100      	movs	r1, #0
 801122a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801122c:	183b      	adds	r3, r7, r0
 801122e:	881a      	ldrh	r2, [r3, #0]
 8011230:	197b      	adds	r3, r7, r5
 8011232:	7819      	ldrb	r1, [r3, #0]
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	0018      	movs	r0, r3
 8011238:	f7ff fa39 	bl	80106ae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801123c:	e038      	b.n	80112b0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 801123e:	240c      	movs	r4, #12
 8011240:	193b      	adds	r3, r7, r4
 8011242:	2208      	movs	r2, #8
 8011244:	18ba      	adds	r2, r7, r2
 8011246:	8812      	ldrh	r2, [r2, #0]
 8011248:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 801124a:	2380      	movs	r3, #128	@ 0x80
 801124c:	021a      	lsls	r2, r3, #8
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	0011      	movs	r1, r2
 8011252:	0018      	movs	r0, r3
 8011254:	f001 f85c 	bl	8012310 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2240      	movs	r2, #64	@ 0x40
 801125c:	2100      	movs	r1, #0
 801125e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011260:	193b      	adds	r3, r7, r4
 8011262:	881a      	ldrh	r2, [r3, #0]
 8011264:	230f      	movs	r3, #15
 8011266:	18fb      	adds	r3, r7, r3
 8011268:	7819      	ldrb	r1, [r3, #0]
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	0018      	movs	r0, r3
 801126e:	f7ff fa1e 	bl	80106ae <HAL_I2C_AddrCallback>
}
 8011272:	e01d      	b.n	80112b0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011274:	2380      	movs	r3, #128	@ 0x80
 8011276:	021a      	lsls	r2, r3, #8
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	0011      	movs	r1, r2
 801127c:	0018      	movs	r0, r3
 801127e:	f001 f847 	bl	8012310 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2240      	movs	r2, #64	@ 0x40
 8011286:	2100      	movs	r1, #0
 8011288:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801128a:	230c      	movs	r3, #12
 801128c:	18fb      	adds	r3, r7, r3
 801128e:	881a      	ldrh	r2, [r3, #0]
 8011290:	230f      	movs	r3, #15
 8011292:	18fb      	adds	r3, r7, r3
 8011294:	7819      	ldrb	r1, [r3, #0]
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	0018      	movs	r0, r3
 801129a:	f7ff fa08 	bl	80106ae <HAL_I2C_AddrCallback>
}
 801129e:	e007      	b.n	80112b0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	2208      	movs	r2, #8
 80112a6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	2240      	movs	r2, #64	@ 0x40
 80112ac:	2100      	movs	r1, #0
 80112ae:	5499      	strb	r1, [r3, r2]
}
 80112b0:	46c0      	nop			@ (mov r8, r8)
 80112b2:	46bd      	mov	sp, r7
 80112b4:	b004      	add	sp, #16
 80112b6:	bdb0      	pop	{r4, r5, r7, pc}

080112b8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b082      	sub	sp, #8
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2242      	movs	r2, #66	@ 0x42
 80112c4:	2100      	movs	r1, #0
 80112c6:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2241      	movs	r2, #65	@ 0x41
 80112cc:	5c9b      	ldrb	r3, [r3, r2]
 80112ce:	b2db      	uxtb	r3, r3
 80112d0:	2b21      	cmp	r3, #33	@ 0x21
 80112d2:	d117      	bne.n	8011304 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2241      	movs	r2, #65	@ 0x41
 80112d8:	2120      	movs	r1, #32
 80112da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2211      	movs	r2, #17
 80112e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2200      	movs	r2, #0
 80112e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2101      	movs	r1, #1
 80112ec:	0018      	movs	r0, r3
 80112ee:	f001 f80f 	bl	8012310 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2240      	movs	r2, #64	@ 0x40
 80112f6:	2100      	movs	r1, #0
 80112f8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	0018      	movs	r0, r3
 80112fe:	f7ff f9b6 	bl	801066e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011302:	e016      	b.n	8011332 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2241      	movs	r2, #65	@ 0x41
 8011308:	2120      	movs	r1, #32
 801130a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2212      	movs	r2, #18
 8011310:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2200      	movs	r2, #0
 8011316:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2102      	movs	r1, #2
 801131c:	0018      	movs	r0, r3
 801131e:	f000 fff7 	bl	8012310 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2240      	movs	r2, #64	@ 0x40
 8011326:	2100      	movs	r1, #0
 8011328:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	0018      	movs	r0, r3
 801132e:	f7ff f9a6 	bl	801067e <HAL_I2C_MasterRxCpltCallback>
}
 8011332:	46c0      	nop			@ (mov r8, r8)
 8011334:	46bd      	mov	sp, r7
 8011336:	b002      	add	sp, #8
 8011338:	bd80      	pop	{r7, pc}
	...

0801133c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b084      	sub	sp, #16
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2242      	movs	r2, #66	@ 0x42
 8011350:	2100      	movs	r1, #0
 8011352:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011354:	68fa      	ldr	r2, [r7, #12]
 8011356:	2380      	movs	r3, #128	@ 0x80
 8011358:	01db      	lsls	r3, r3, #7
 801135a:	4013      	ands	r3, r2
 801135c:	d008      	beq.n	8011370 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	681a      	ldr	r2, [r3, #0]
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	4924      	ldr	r1, [pc, #144]	@ (80113fc <I2C_ITSlaveSeqCplt+0xc0>)
 801136a:	400a      	ands	r2, r1
 801136c:	601a      	str	r2, [r3, #0]
 801136e:	e00c      	b.n	801138a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011370:	68fa      	ldr	r2, [r7, #12]
 8011372:	2380      	movs	r3, #128	@ 0x80
 8011374:	021b      	lsls	r3, r3, #8
 8011376:	4013      	ands	r3, r2
 8011378:	d007      	beq.n	801138a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	681a      	ldr	r2, [r3, #0]
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	491e      	ldr	r1, [pc, #120]	@ (8011400 <I2C_ITSlaveSeqCplt+0xc4>)
 8011386:	400a      	ands	r2, r1
 8011388:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	2241      	movs	r2, #65	@ 0x41
 801138e:	5c9b      	ldrb	r3, [r3, r2]
 8011390:	b2db      	uxtb	r3, r3
 8011392:	2b29      	cmp	r3, #41	@ 0x29
 8011394:	d114      	bne.n	80113c0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2241      	movs	r2, #65	@ 0x41
 801139a:	2128      	movs	r1, #40	@ 0x28
 801139c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	2221      	movs	r2, #33	@ 0x21
 80113a2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2101      	movs	r1, #1
 80113a8:	0018      	movs	r0, r3
 80113aa:	f000 ffb1 	bl	8012310 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2240      	movs	r2, #64	@ 0x40
 80113b2:	2100      	movs	r1, #0
 80113b4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	0018      	movs	r0, r3
 80113ba:	f7ff f968 	bl	801068e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80113be:	e019      	b.n	80113f4 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2241      	movs	r2, #65	@ 0x41
 80113c4:	5c9b      	ldrb	r3, [r3, r2]
 80113c6:	b2db      	uxtb	r3, r3
 80113c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80113ca:	d113      	bne.n	80113f4 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	2241      	movs	r2, #65	@ 0x41
 80113d0:	2128      	movs	r1, #40	@ 0x28
 80113d2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2222      	movs	r2, #34	@ 0x22
 80113d8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2102      	movs	r1, #2
 80113de:	0018      	movs	r0, r3
 80113e0:	f000 ff96 	bl	8012310 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2240      	movs	r2, #64	@ 0x40
 80113e8:	2100      	movs	r1, #0
 80113ea:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	0018      	movs	r0, r3
 80113f0:	f7ff f955 	bl	801069e <HAL_I2C_SlaveRxCpltCallback>
}
 80113f4:	46c0      	nop			@ (mov r8, r8)
 80113f6:	46bd      	mov	sp, r7
 80113f8:	b004      	add	sp, #16
 80113fa:	bd80      	pop	{r7, pc}
 80113fc:	ffffbfff 	.word	0xffffbfff
 8011400:	ffff7fff 	.word	0xffff7fff

08011404 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b086      	sub	sp, #24
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
 801140c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	2220      	movs	r2, #32
 8011418:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2241      	movs	r2, #65	@ 0x41
 801141e:	5c9b      	ldrb	r3, [r3, r2]
 8011420:	b2db      	uxtb	r3, r3
 8011422:	2b21      	cmp	r3, #33	@ 0x21
 8011424:	d108      	bne.n	8011438 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	2101      	movs	r1, #1
 801142a:	0018      	movs	r0, r3
 801142c:	f000 ff70 	bl	8012310 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2211      	movs	r2, #17
 8011434:	631a      	str	r2, [r3, #48]	@ 0x30
 8011436:	e00d      	b.n	8011454 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2241      	movs	r2, #65	@ 0x41
 801143c:	5c9b      	ldrb	r3, [r3, r2]
 801143e:	b2db      	uxtb	r3, r3
 8011440:	2b22      	cmp	r3, #34	@ 0x22
 8011442:	d107      	bne.n	8011454 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2102      	movs	r1, #2
 8011448:	0018      	movs	r0, r3
 801144a:	f000 ff61 	bl	8012310 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	2212      	movs	r2, #18
 8011452:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	685a      	ldr	r2, [r3, #4]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	494e      	ldr	r1, [pc, #312]	@ (8011598 <I2C_ITMasterCplt+0x194>)
 8011460:	400a      	ands	r2, r1
 8011462:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2200      	movs	r2, #0
 8011468:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	4a4b      	ldr	r2, [pc, #300]	@ (801159c <I2C_ITMasterCplt+0x198>)
 801146e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	2210      	movs	r2, #16
 8011474:	4013      	ands	r3, r2
 8011476:	d009      	beq.n	801148c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	2210      	movs	r2, #16
 801147e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011484:	2204      	movs	r2, #4
 8011486:	431a      	orrs	r2, r3
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2241      	movs	r2, #65	@ 0x41
 8011490:	5c9b      	ldrb	r3, [r3, r2]
 8011492:	b2db      	uxtb	r3, r3
 8011494:	2b60      	cmp	r3, #96	@ 0x60
 8011496:	d109      	bne.n	80114ac <I2C_ITMasterCplt+0xa8>
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	2204      	movs	r2, #4
 801149c:	4013      	ands	r3, r2
 801149e:	d005      	beq.n	80114ac <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114a6:	b2db      	uxtb	r3, r3
 80114a8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80114aa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	0018      	movs	r0, r3
 80114b0:	f000 fb19 	bl	8011ae6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114b8:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2241      	movs	r2, #65	@ 0x41
 80114be:	5c9b      	ldrb	r3, [r3, r2]
 80114c0:	b2db      	uxtb	r3, r3
 80114c2:	2b60      	cmp	r3, #96	@ 0x60
 80114c4:	d002      	beq.n	80114cc <I2C_ITMasterCplt+0xc8>
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d007      	beq.n	80114dc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	0011      	movs	r1, r2
 80114d4:	0018      	movs	r0, r3
 80114d6:	f000 f9db 	bl	8011890 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80114da:	e058      	b.n	801158e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2241      	movs	r2, #65	@ 0x41
 80114e0:	5c9b      	ldrb	r3, [r3, r2]
 80114e2:	b2db      	uxtb	r3, r3
 80114e4:	2b21      	cmp	r3, #33	@ 0x21
 80114e6:	d126      	bne.n	8011536 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2241      	movs	r2, #65	@ 0x41
 80114ec:	2120      	movs	r1, #32
 80114ee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2200      	movs	r2, #0
 80114f4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	2242      	movs	r2, #66	@ 0x42
 80114fa:	5c9b      	ldrb	r3, [r3, r2]
 80114fc:	b2db      	uxtb	r3, r3
 80114fe:	2b40      	cmp	r3, #64	@ 0x40
 8011500:	d10c      	bne.n	801151c <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2242      	movs	r2, #66	@ 0x42
 8011506:	2100      	movs	r1, #0
 8011508:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	2240      	movs	r2, #64	@ 0x40
 801150e:	2100      	movs	r1, #0
 8011510:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	0018      	movs	r0, r3
 8011516:	f7ff f8e2 	bl	80106de <HAL_I2C_MemTxCpltCallback>
}
 801151a:	e038      	b.n	801158e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2242      	movs	r2, #66	@ 0x42
 8011520:	2100      	movs	r1, #0
 8011522:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2240      	movs	r2, #64	@ 0x40
 8011528:	2100      	movs	r1, #0
 801152a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	0018      	movs	r0, r3
 8011530:	f7ff f89d 	bl	801066e <HAL_I2C_MasterTxCpltCallback>
}
 8011534:	e02b      	b.n	801158e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2241      	movs	r2, #65	@ 0x41
 801153a:	5c9b      	ldrb	r3, [r3, r2]
 801153c:	b2db      	uxtb	r3, r3
 801153e:	2b22      	cmp	r3, #34	@ 0x22
 8011540:	d125      	bne.n	801158e <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	2241      	movs	r2, #65	@ 0x41
 8011546:	2120      	movs	r1, #32
 8011548:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2200      	movs	r2, #0
 801154e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	2242      	movs	r2, #66	@ 0x42
 8011554:	5c9b      	ldrb	r3, [r3, r2]
 8011556:	b2db      	uxtb	r3, r3
 8011558:	2b40      	cmp	r3, #64	@ 0x40
 801155a:	d10c      	bne.n	8011576 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	2242      	movs	r2, #66	@ 0x42
 8011560:	2100      	movs	r1, #0
 8011562:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2240      	movs	r2, #64	@ 0x40
 8011568:	2100      	movs	r1, #0
 801156a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	0018      	movs	r0, r3
 8011570:	f7ff f8bd 	bl	80106ee <HAL_I2C_MemRxCpltCallback>
}
 8011574:	e00b      	b.n	801158e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2242      	movs	r2, #66	@ 0x42
 801157a:	2100      	movs	r1, #0
 801157c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2240      	movs	r2, #64	@ 0x40
 8011582:	2100      	movs	r1, #0
 8011584:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	0018      	movs	r0, r3
 801158a:	f7ff f878 	bl	801067e <HAL_I2C_MasterRxCpltCallback>
}
 801158e:	46c0      	nop			@ (mov r8, r8)
 8011590:	46bd      	mov	sp, r7
 8011592:	b006      	add	sp, #24
 8011594:	bd80      	pop	{r7, pc}
 8011596:	46c0      	nop			@ (mov r8, r8)
 8011598:	fe00e800 	.word	0xfe00e800
 801159c:	ffff0000 	.word	0xffff0000

080115a0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b086      	sub	sp, #24
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
 80115a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80115b6:	200f      	movs	r0, #15
 80115b8:	183b      	adds	r3, r7, r0
 80115ba:	687a      	ldr	r2, [r7, #4]
 80115bc:	2141      	movs	r1, #65	@ 0x41
 80115be:	5c52      	ldrb	r2, [r2, r1]
 80115c0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	2220      	movs	r2, #32
 80115c8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80115ca:	183b      	adds	r3, r7, r0
 80115cc:	781b      	ldrb	r3, [r3, #0]
 80115ce:	2b21      	cmp	r3, #33	@ 0x21
 80115d0:	d003      	beq.n	80115da <I2C_ITSlaveCplt+0x3a>
 80115d2:	183b      	adds	r3, r7, r0
 80115d4:	781b      	ldrb	r3, [r3, #0]
 80115d6:	2b29      	cmp	r3, #41	@ 0x29
 80115d8:	d109      	bne.n	80115ee <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80115da:	4a7b      	ldr	r2, [pc, #492]	@ (80117c8 <I2C_ITSlaveCplt+0x228>)
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	0011      	movs	r1, r2
 80115e0:	0018      	movs	r0, r3
 80115e2:	f000 fe95 	bl	8012310 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	2221      	movs	r2, #33	@ 0x21
 80115ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80115ec:	e011      	b.n	8011612 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80115ee:	220f      	movs	r2, #15
 80115f0:	18bb      	adds	r3, r7, r2
 80115f2:	781b      	ldrb	r3, [r3, #0]
 80115f4:	2b22      	cmp	r3, #34	@ 0x22
 80115f6:	d003      	beq.n	8011600 <I2C_ITSlaveCplt+0x60>
 80115f8:	18bb      	adds	r3, r7, r2
 80115fa:	781b      	ldrb	r3, [r3, #0]
 80115fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80115fe:	d108      	bne.n	8011612 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8011600:	4a72      	ldr	r2, [pc, #456]	@ (80117cc <I2C_ITSlaveCplt+0x22c>)
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	0011      	movs	r1, r2
 8011606:	0018      	movs	r0, r3
 8011608:	f000 fe82 	bl	8012310 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2222      	movs	r2, #34	@ 0x22
 8011610:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	685a      	ldr	r2, [r3, #4]
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	2180      	movs	r1, #128	@ 0x80
 801161e:	0209      	lsls	r1, r1, #8
 8011620:	430a      	orrs	r2, r1
 8011622:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	685a      	ldr	r2, [r3, #4]
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	4968      	ldr	r1, [pc, #416]	@ (80117d0 <I2C_ITSlaveCplt+0x230>)
 8011630:	400a      	ands	r2, r1
 8011632:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	0018      	movs	r0, r3
 8011638:	f000 fa55 	bl	8011ae6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801163c:	693a      	ldr	r2, [r7, #16]
 801163e:	2380      	movs	r3, #128	@ 0x80
 8011640:	01db      	lsls	r3, r3, #7
 8011642:	4013      	ands	r3, r2
 8011644:	d013      	beq.n	801166e <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	681a      	ldr	r2, [r3, #0]
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	4960      	ldr	r1, [pc, #384]	@ (80117d4 <I2C_ITSlaveCplt+0x234>)
 8011652:	400a      	ands	r2, r1
 8011654:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801165a:	2b00      	cmp	r3, #0
 801165c:	d01f      	beq.n	801169e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	685b      	ldr	r3, [r3, #4]
 8011666:	b29a      	uxth	r2, r3
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801166c:	e017      	b.n	801169e <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801166e:	693a      	ldr	r2, [r7, #16]
 8011670:	2380      	movs	r3, #128	@ 0x80
 8011672:	021b      	lsls	r3, r3, #8
 8011674:	4013      	ands	r3, r2
 8011676:	d012      	beq.n	801169e <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	681a      	ldr	r2, [r3, #0]
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	4955      	ldr	r1, [pc, #340]	@ (80117d8 <I2C_ITSlaveCplt+0x238>)
 8011684:	400a      	ands	r2, r1
 8011686:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801168c:	2b00      	cmp	r3, #0
 801168e:	d006      	beq.n	801169e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	b29a      	uxth	r2, r3
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801169e:	697b      	ldr	r3, [r7, #20]
 80116a0:	2204      	movs	r2, #4
 80116a2:	4013      	ands	r3, r2
 80116a4:	d020      	beq.n	80116e8 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80116a6:	697b      	ldr	r3, [r7, #20]
 80116a8:	2204      	movs	r2, #4
 80116aa:	4393      	bics	r3, r2
 80116ac:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116b8:	b2d2      	uxtb	r2, r2
 80116ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116c0:	1c5a      	adds	r2, r3, #1
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d00c      	beq.n	80116e8 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80116d2:	3b01      	subs	r3, #1
 80116d4:	b29a      	uxth	r2, r3
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80116de:	b29b      	uxth	r3, r3
 80116e0:	3b01      	subs	r3, #1
 80116e2:	b29a      	uxth	r2, r3
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80116ec:	b29b      	uxth	r3, r3
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d005      	beq.n	80116fe <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80116f6:	2204      	movs	r2, #4
 80116f8:	431a      	orrs	r2, r3
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2242      	movs	r2, #66	@ 0x42
 8011702:	2100      	movs	r1, #0
 8011704:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	2200      	movs	r2, #0
 801170a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011710:	2b00      	cmp	r3, #0
 8011712:	d013      	beq.n	801173c <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	0011      	movs	r1, r2
 801171c:	0018      	movs	r0, r3
 801171e:	f000 f8b7 	bl	8011890 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2241      	movs	r2, #65	@ 0x41
 8011726:	5c9b      	ldrb	r3, [r3, r2]
 8011728:	b2db      	uxtb	r3, r3
 801172a:	2b28      	cmp	r3, #40	@ 0x28
 801172c:	d147      	bne.n	80117be <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 801172e:	697a      	ldr	r2, [r7, #20]
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	0011      	movs	r1, r2
 8011734:	0018      	movs	r0, r3
 8011736:	f000 f853 	bl	80117e0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801173a:	e040      	b.n	80117be <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011740:	4a26      	ldr	r2, [pc, #152]	@ (80117dc <I2C_ITSlaveCplt+0x23c>)
 8011742:	4293      	cmp	r3, r2
 8011744:	d016      	beq.n	8011774 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	0018      	movs	r0, r3
 801174a:	f7ff fdf7 	bl	801133c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	4a22      	ldr	r2, [pc, #136]	@ (80117dc <I2C_ITSlaveCplt+0x23c>)
 8011752:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	2241      	movs	r2, #65	@ 0x41
 8011758:	2120      	movs	r1, #32
 801175a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2200      	movs	r2, #0
 8011760:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	2240      	movs	r2, #64	@ 0x40
 8011766:	2100      	movs	r1, #0
 8011768:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	0018      	movs	r0, r3
 801176e:	f7fe ffae 	bl	80106ce <HAL_I2C_ListenCpltCallback>
}
 8011772:	e024      	b.n	80117be <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2241      	movs	r2, #65	@ 0x41
 8011778:	5c9b      	ldrb	r3, [r3, r2]
 801177a:	b2db      	uxtb	r3, r3
 801177c:	2b22      	cmp	r3, #34	@ 0x22
 801177e:	d10f      	bne.n	80117a0 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2241      	movs	r2, #65	@ 0x41
 8011784:	2120      	movs	r1, #32
 8011786:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2200      	movs	r2, #0
 801178c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2240      	movs	r2, #64	@ 0x40
 8011792:	2100      	movs	r1, #0
 8011794:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	0018      	movs	r0, r3
 801179a:	f7fe ff80 	bl	801069e <HAL_I2C_SlaveRxCpltCallback>
}
 801179e:	e00e      	b.n	80117be <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2241      	movs	r2, #65	@ 0x41
 80117a4:	2120      	movs	r1, #32
 80117a6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2200      	movs	r2, #0
 80117ac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2240      	movs	r2, #64	@ 0x40
 80117b2:	2100      	movs	r1, #0
 80117b4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	0018      	movs	r0, r3
 80117ba:	f7fe ff68 	bl	801068e <HAL_I2C_SlaveTxCpltCallback>
}
 80117be:	46c0      	nop			@ (mov r8, r8)
 80117c0:	46bd      	mov	sp, r7
 80117c2:	b006      	add	sp, #24
 80117c4:	bd80      	pop	{r7, pc}
 80117c6:	46c0      	nop			@ (mov r8, r8)
 80117c8:	00008001 	.word	0x00008001
 80117cc:	00008002 	.word	0x00008002
 80117d0:	fe00e800 	.word	0xfe00e800
 80117d4:	ffffbfff 	.word	0xffffbfff
 80117d8:	ffff7fff 	.word	0xffff7fff
 80117dc:	ffff0000 	.word	0xffff0000

080117e0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
 80117e8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	4a26      	ldr	r2, [pc, #152]	@ (8011888 <I2C_ITListenCplt+0xa8>)
 80117ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2200      	movs	r2, #0
 80117f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2241      	movs	r2, #65	@ 0x41
 80117fa:	2120      	movs	r1, #32
 80117fc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2242      	movs	r2, #66	@ 0x42
 8011802:	2100      	movs	r1, #0
 8011804:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	2200      	movs	r2, #0
 801180a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	2204      	movs	r2, #4
 8011810:	4013      	ands	r3, r2
 8011812:	d022      	beq.n	801185a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801181e:	b2d2      	uxtb	r2, r2
 8011820:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011826:	1c5a      	adds	r2, r3, #1
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011830:	2b00      	cmp	r3, #0
 8011832:	d012      	beq.n	801185a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011838:	3b01      	subs	r3, #1
 801183a:	b29a      	uxth	r2, r3
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011844:	b29b      	uxth	r3, r3
 8011846:	3b01      	subs	r3, #1
 8011848:	b29a      	uxth	r2, r3
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011852:	2204      	movs	r2, #4
 8011854:	431a      	orrs	r2, r3
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801185a:	4a0c      	ldr	r2, [pc, #48]	@ (801188c <I2C_ITListenCplt+0xac>)
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	0011      	movs	r1, r2
 8011860:	0018      	movs	r0, r3
 8011862:	f000 fd55 	bl	8012310 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	2210      	movs	r2, #16
 801186c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	2240      	movs	r2, #64	@ 0x40
 8011872:	2100      	movs	r1, #0
 8011874:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	0018      	movs	r0, r3
 801187a:	f7fe ff28 	bl	80106ce <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801187e:	46c0      	nop			@ (mov r8, r8)
 8011880:	46bd      	mov	sp, r7
 8011882:	b002      	add	sp, #8
 8011884:	bd80      	pop	{r7, pc}
 8011886:	46c0      	nop			@ (mov r8, r8)
 8011888:	ffff0000 	.word	0xffff0000
 801188c:	00008003 	.word	0x00008003

08011890 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b084      	sub	sp, #16
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801189a:	200f      	movs	r0, #15
 801189c:	183b      	adds	r3, r7, r0
 801189e:	687a      	ldr	r2, [r7, #4]
 80118a0:	2141      	movs	r1, #65	@ 0x41
 80118a2:	5c52      	ldrb	r2, [r2, r1]
 80118a4:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	2242      	movs	r2, #66	@ 0x42
 80118aa:	2100      	movs	r1, #0
 80118ac:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	4a72      	ldr	r2, [pc, #456]	@ (8011a7c <I2C_ITError+0x1ec>)
 80118b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2200      	movs	r2, #0
 80118b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	431a      	orrs	r2, r3
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80118c6:	183b      	adds	r3, r7, r0
 80118c8:	781b      	ldrb	r3, [r3, #0]
 80118ca:	2b28      	cmp	r3, #40	@ 0x28
 80118cc:	d007      	beq.n	80118de <I2C_ITError+0x4e>
 80118ce:	183b      	adds	r3, r7, r0
 80118d0:	781b      	ldrb	r3, [r3, #0]
 80118d2:	2b29      	cmp	r3, #41	@ 0x29
 80118d4:	d003      	beq.n	80118de <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80118d6:	183b      	adds	r3, r7, r0
 80118d8:	781b      	ldrb	r3, [r3, #0]
 80118da:	2b2a      	cmp	r3, #42	@ 0x2a
 80118dc:	d10c      	bne.n	80118f8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	2103      	movs	r1, #3
 80118e2:	0018      	movs	r0, r3
 80118e4:	f000 fd14 	bl	8012310 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2241      	movs	r2, #65	@ 0x41
 80118ec:	2128      	movs	r1, #40	@ 0x28
 80118ee:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	4a63      	ldr	r2, [pc, #396]	@ (8011a80 <I2C_ITError+0x1f0>)
 80118f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80118f6:	e032      	b.n	801195e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80118f8:	4a62      	ldr	r2, [pc, #392]	@ (8011a84 <I2C_ITError+0x1f4>)
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	0011      	movs	r1, r2
 80118fe:	0018      	movs	r0, r3
 8011900:	f000 fd06 	bl	8012310 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	0018      	movs	r0, r3
 8011908:	f000 f8ed 	bl	8011ae6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2241      	movs	r2, #65	@ 0x41
 8011910:	5c9b      	ldrb	r3, [r3, r2]
 8011912:	b2db      	uxtb	r3, r3
 8011914:	2b60      	cmp	r3, #96	@ 0x60
 8011916:	d01f      	beq.n	8011958 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2241      	movs	r2, #65	@ 0x41
 801191c:	2120      	movs	r1, #32
 801191e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	699b      	ldr	r3, [r3, #24]
 8011926:	2220      	movs	r2, #32
 8011928:	4013      	ands	r3, r2
 801192a:	2b20      	cmp	r3, #32
 801192c:	d114      	bne.n	8011958 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	699b      	ldr	r3, [r3, #24]
 8011934:	2210      	movs	r2, #16
 8011936:	4013      	ands	r3, r2
 8011938:	2b10      	cmp	r3, #16
 801193a:	d109      	bne.n	8011950 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	2210      	movs	r2, #16
 8011942:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011948:	2204      	movs	r2, #4
 801194a:	431a      	orrs	r2, r3
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	2220      	movs	r2, #32
 8011956:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2200      	movs	r2, #0
 801195c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011962:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011968:	2b00      	cmp	r3, #0
 801196a:	d03b      	beq.n	80119e4 <I2C_ITError+0x154>
 801196c:	68bb      	ldr	r3, [r7, #8]
 801196e:	2b11      	cmp	r3, #17
 8011970:	d002      	beq.n	8011978 <I2C_ITError+0xe8>
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	2b21      	cmp	r3, #33	@ 0x21
 8011976:	d135      	bne.n	80119e4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	681a      	ldr	r2, [r3, #0]
 801197e:	2380      	movs	r3, #128	@ 0x80
 8011980:	01db      	lsls	r3, r3, #7
 8011982:	401a      	ands	r2, r3
 8011984:	2380      	movs	r3, #128	@ 0x80
 8011986:	01db      	lsls	r3, r3, #7
 8011988:	429a      	cmp	r2, r3
 801198a:	d107      	bne.n	801199c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	681a      	ldr	r2, [r3, #0]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	493c      	ldr	r1, [pc, #240]	@ (8011a88 <I2C_ITError+0x1f8>)
 8011998:	400a      	ands	r2, r1
 801199a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119a0:	0018      	movs	r0, r3
 80119a2:	f7fd fd62 	bl	800f46a <HAL_DMA_GetState>
 80119a6:	0003      	movs	r3, r0
 80119a8:	2b01      	cmp	r3, #1
 80119aa:	d016      	beq.n	80119da <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119b0:	4a36      	ldr	r2, [pc, #216]	@ (8011a8c <I2C_ITError+0x1fc>)
 80119b2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2240      	movs	r2, #64	@ 0x40
 80119b8:	2100      	movs	r1, #0
 80119ba:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119c0:	0018      	movs	r0, r3
 80119c2:	f7fd fc5d 	bl	800f280 <HAL_DMA_Abort_IT>
 80119c6:	1e03      	subs	r3, r0, #0
 80119c8:	d051      	beq.n	8011a6e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119d4:	0018      	movs	r0, r3
 80119d6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80119d8:	e049      	b.n	8011a6e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	0018      	movs	r0, r3
 80119de:	f000 f859 	bl	8011a94 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80119e2:	e044      	b.n	8011a6e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d03b      	beq.n	8011a64 <I2C_ITError+0x1d4>
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	2b12      	cmp	r3, #18
 80119f0:	d002      	beq.n	80119f8 <I2C_ITError+0x168>
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	2b22      	cmp	r3, #34	@ 0x22
 80119f6:	d135      	bne.n	8011a64 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	681a      	ldr	r2, [r3, #0]
 80119fe:	2380      	movs	r3, #128	@ 0x80
 8011a00:	021b      	lsls	r3, r3, #8
 8011a02:	401a      	ands	r2, r3
 8011a04:	2380      	movs	r3, #128	@ 0x80
 8011a06:	021b      	lsls	r3, r3, #8
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d107      	bne.n	8011a1c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	681a      	ldr	r2, [r3, #0]
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	491e      	ldr	r1, [pc, #120]	@ (8011a90 <I2C_ITError+0x200>)
 8011a18:	400a      	ands	r2, r1
 8011a1a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a20:	0018      	movs	r0, r3
 8011a22:	f7fd fd22 	bl	800f46a <HAL_DMA_GetState>
 8011a26:	0003      	movs	r3, r0
 8011a28:	2b01      	cmp	r3, #1
 8011a2a:	d016      	beq.n	8011a5a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a30:	4a16      	ldr	r2, [pc, #88]	@ (8011a8c <I2C_ITError+0x1fc>)
 8011a32:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2240      	movs	r2, #64	@ 0x40
 8011a38:	2100      	movs	r1, #0
 8011a3a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a40:	0018      	movs	r0, r3
 8011a42:	f7fd fc1d 	bl	800f280 <HAL_DMA_Abort_IT>
 8011a46:	1e03      	subs	r3, r0, #0
 8011a48:	d013      	beq.n	8011a72 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a54:	0018      	movs	r0, r3
 8011a56:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011a58:	e00b      	b.n	8011a72 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	0018      	movs	r0, r3
 8011a5e:	f000 f819 	bl	8011a94 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011a62:	e006      	b.n	8011a72 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	0018      	movs	r0, r3
 8011a68:	f000 f814 	bl	8011a94 <I2C_TreatErrorCallback>
  }
}
 8011a6c:	e002      	b.n	8011a74 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011a6e:	46c0      	nop			@ (mov r8, r8)
 8011a70:	e000      	b.n	8011a74 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011a72:	46c0      	nop			@ (mov r8, r8)
}
 8011a74:	46c0      	nop			@ (mov r8, r8)
 8011a76:	46bd      	mov	sp, r7
 8011a78:	b004      	add	sp, #16
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	ffff0000 	.word	0xffff0000
 8011a80:	08010975 	.word	0x08010975
 8011a84:	00008003 	.word	0x00008003
 8011a88:	ffffbfff 	.word	0xffffbfff
 8011a8c:	08011c9f 	.word	0x08011c9f
 8011a90:	ffff7fff 	.word	0xffff7fff

08011a94 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b082      	sub	sp, #8
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2241      	movs	r2, #65	@ 0x41
 8011aa0:	5c9b      	ldrb	r3, [r3, r2]
 8011aa2:	b2db      	uxtb	r3, r3
 8011aa4:	2b60      	cmp	r3, #96	@ 0x60
 8011aa6:	d10f      	bne.n	8011ac8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2241      	movs	r2, #65	@ 0x41
 8011aac:	2120      	movs	r1, #32
 8011aae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	2240      	movs	r2, #64	@ 0x40
 8011aba:	2100      	movs	r1, #0
 8011abc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	0018      	movs	r0, r3
 8011ac2:	f7fe fe24 	bl	801070e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011ac6:	e00a      	b.n	8011ade <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2200      	movs	r2, #0
 8011acc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2240      	movs	r2, #64	@ 0x40
 8011ad2:	2100      	movs	r1, #0
 8011ad4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	0018      	movs	r0, r3
 8011ada:	f7fe fe10 	bl	80106fe <HAL_I2C_ErrorCallback>
}
 8011ade:	46c0      	nop			@ (mov r8, r8)
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	b002      	add	sp, #8
 8011ae4:	bd80      	pop	{r7, pc}

08011ae6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8011ae6:	b580      	push	{r7, lr}
 8011ae8:	b082      	sub	sp, #8
 8011aea:	af00      	add	r7, sp, #0
 8011aec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	699b      	ldr	r3, [r3, #24]
 8011af4:	2202      	movs	r2, #2
 8011af6:	4013      	ands	r3, r2
 8011af8:	2b02      	cmp	r3, #2
 8011afa:	d103      	bne.n	8011b04 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	2200      	movs	r2, #0
 8011b02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	699b      	ldr	r3, [r3, #24]
 8011b0a:	2201      	movs	r2, #1
 8011b0c:	4013      	ands	r3, r2
 8011b0e:	2b01      	cmp	r3, #1
 8011b10:	d007      	beq.n	8011b22 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	699a      	ldr	r2, [r3, #24]
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	2101      	movs	r1, #1
 8011b1e:	430a      	orrs	r2, r1
 8011b20:	619a      	str	r2, [r3, #24]
  }
}
 8011b22:	46c0      	nop			@ (mov r8, r8)
 8011b24:	46bd      	mov	sp, r7
 8011b26:	b002      	add	sp, #8
 8011b28:	bd80      	pop	{r7, pc}
	...

08011b2c <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b084      	sub	sp, #16
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b38:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	681a      	ldr	r2, [r3, #0]
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	4920      	ldr	r1, [pc, #128]	@ (8011bc8 <I2C_DMAMasterTransmitCplt+0x9c>)
 8011b46:	400a      	ands	r2, r1
 8011b48:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011b4e:	b29b      	uxth	r3, r3
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d105      	bne.n	8011b60 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	2120      	movs	r1, #32
 8011b58:	0018      	movs	r0, r3
 8011b5a:	f000 fb4b 	bl	80121f4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8011b5e:	e02e      	b.n	8011bbe <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b64:	68fa      	ldr	r2, [r7, #12]
 8011b66:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8011b68:	189a      	adds	r2, r3, r2
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011b72:	b29b      	uxth	r3, r3
 8011b74:	2bff      	cmp	r3, #255	@ 0xff
 8011b76:	d903      	bls.n	8011b80 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	22ff      	movs	r2, #255	@ 0xff
 8011b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011b7e:	e004      	b.n	8011b8a <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011b84:	b29a      	uxth	r2, r3
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b92:	0019      	movs	r1, r3
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	3328      	adds	r3, #40	@ 0x28
 8011b9a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8011ba0:	f7fd fac8 	bl	800f134 <HAL_DMA_Start_IT>
 8011ba4:	1e03      	subs	r3, r0, #0
 8011ba6:	d005      	beq.n	8011bb4 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	2110      	movs	r1, #16
 8011bac:	0018      	movs	r0, r3
 8011bae:	f7ff fe6f 	bl	8011890 <I2C_ITError>
}
 8011bb2:	e004      	b.n	8011bbe <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	2140      	movs	r1, #64	@ 0x40
 8011bb8:	0018      	movs	r0, r3
 8011bba:	f000 fb1b 	bl	80121f4 <I2C_Enable_IRQ>
}
 8011bbe:	46c0      	nop			@ (mov r8, r8)
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	b004      	add	sp, #16
 8011bc4:	bd80      	pop	{r7, pc}
 8011bc6:	46c0      	nop			@ (mov r8, r8)
 8011bc8:	ffffbfff 	.word	0xffffbfff

08011bcc <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bd8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	681a      	ldr	r2, [r3, #0]
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	4920      	ldr	r1, [pc, #128]	@ (8011c68 <I2C_DMAMasterReceiveCplt+0x9c>)
 8011be6:	400a      	ands	r2, r1
 8011be8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011bee:	b29b      	uxth	r3, r3
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d105      	bne.n	8011c00 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	2120      	movs	r1, #32
 8011bf8:	0018      	movs	r0, r3
 8011bfa:	f000 fafb 	bl	80121f4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8011bfe:	e02e      	b.n	8011c5e <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c04:	68fa      	ldr	r2, [r7, #12]
 8011c06:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8011c08:	189a      	adds	r2, r3, r2
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011c12:	b29b      	uxth	r3, r3
 8011c14:	2bff      	cmp	r3, #255	@ 0xff
 8011c16:	d903      	bls.n	8011c20 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	22ff      	movs	r2, #255	@ 0xff
 8011c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011c1e:	e004      	b.n	8011c2a <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011c24:	b29a      	uxth	r2, r3
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	3324      	adds	r3, #36	@ 0x24
 8011c34:	0019      	movs	r1, r3
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c3a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8011c40:	f7fd fa78 	bl	800f134 <HAL_DMA_Start_IT>
 8011c44:	1e03      	subs	r3, r0, #0
 8011c46:	d005      	beq.n	8011c54 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	2110      	movs	r1, #16
 8011c4c:	0018      	movs	r0, r3
 8011c4e:	f7ff fe1f 	bl	8011890 <I2C_ITError>
}
 8011c52:	e004      	b.n	8011c5e <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	2140      	movs	r1, #64	@ 0x40
 8011c58:	0018      	movs	r0, r3
 8011c5a:	f000 facb 	bl	80121f4 <I2C_Enable_IRQ>
}
 8011c5e:	46c0      	nop			@ (mov r8, r8)
 8011c60:	46bd      	mov	sp, r7
 8011c62:	b004      	add	sp, #16
 8011c64:	bd80      	pop	{r7, pc}
 8011c66:	46c0      	nop			@ (mov r8, r8)
 8011c68:	ffff7fff 	.word	0xffff7fff

08011c6c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b084      	sub	sp, #16
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c78:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	685a      	ldr	r2, [r3, #4]
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	2180      	movs	r1, #128	@ 0x80
 8011c86:	0209      	lsls	r1, r1, #8
 8011c88:	430a      	orrs	r2, r1
 8011c8a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	2110      	movs	r1, #16
 8011c90:	0018      	movs	r0, r3
 8011c92:	f7ff fdfd 	bl	8011890 <I2C_ITError>
}
 8011c96:	46c0      	nop			@ (mov r8, r8)
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	b004      	add	sp, #16
 8011c9c:	bd80      	pop	{r7, pc}

08011c9e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8011c9e:	b580      	push	{r7, lr}
 8011ca0:	b084      	sub	sp, #16
 8011ca2:	af00      	add	r7, sp, #0
 8011ca4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011caa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d003      	beq.n	8011cbc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cb8:	2200      	movs	r2, #0
 8011cba:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d003      	beq.n	8011ccc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011cc8:	2200      	movs	r2, #0
 8011cca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	0018      	movs	r0, r3
 8011cd0:	f7ff fee0 	bl	8011a94 <I2C_TreatErrorCallback>
}
 8011cd4:	46c0      	nop			@ (mov r8, r8)
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	b004      	add	sp, #16
 8011cda:	bd80      	pop	{r7, pc}

08011cdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b084      	sub	sp, #16
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	60f8      	str	r0, [r7, #12]
 8011ce4:	60b9      	str	r1, [r7, #8]
 8011ce6:	603b      	str	r3, [r7, #0]
 8011ce8:	1dfb      	adds	r3, r7, #7
 8011cea:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011cec:	e030      	b.n	8011d50 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	3301      	adds	r3, #1
 8011cf2:	d02d      	beq.n	8011d50 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011cf4:	f7fc fccc 	bl	800e690 <HAL_GetTick>
 8011cf8:	0002      	movs	r2, r0
 8011cfa:	69bb      	ldr	r3, [r7, #24]
 8011cfc:	1ad3      	subs	r3, r2, r3
 8011cfe:	683a      	ldr	r2, [r7, #0]
 8011d00:	429a      	cmp	r2, r3
 8011d02:	d302      	bcc.n	8011d0a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d122      	bne.n	8011d50 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	699b      	ldr	r3, [r3, #24]
 8011d10:	68ba      	ldr	r2, [r7, #8]
 8011d12:	4013      	ands	r3, r2
 8011d14:	68ba      	ldr	r2, [r7, #8]
 8011d16:	1ad3      	subs	r3, r2, r3
 8011d18:	425a      	negs	r2, r3
 8011d1a:	4153      	adcs	r3, r2
 8011d1c:	b2db      	uxtb	r3, r3
 8011d1e:	001a      	movs	r2, r3
 8011d20:	1dfb      	adds	r3, r7, #7
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d113      	bne.n	8011d50 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d2c:	2220      	movs	r2, #32
 8011d2e:	431a      	orrs	r2, r3
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	2241      	movs	r2, #65	@ 0x41
 8011d38:	2120      	movs	r1, #32
 8011d3a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	2242      	movs	r2, #66	@ 0x42
 8011d40:	2100      	movs	r1, #0
 8011d42:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	2240      	movs	r2, #64	@ 0x40
 8011d48:	2100      	movs	r1, #0
 8011d4a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8011d4c:	2301      	movs	r3, #1
 8011d4e:	e00f      	b.n	8011d70 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	699b      	ldr	r3, [r3, #24]
 8011d56:	68ba      	ldr	r2, [r7, #8]
 8011d58:	4013      	ands	r3, r2
 8011d5a:	68ba      	ldr	r2, [r7, #8]
 8011d5c:	1ad3      	subs	r3, r2, r3
 8011d5e:	425a      	negs	r2, r3
 8011d60:	4153      	adcs	r3, r2
 8011d62:	b2db      	uxtb	r3, r3
 8011d64:	001a      	movs	r2, r3
 8011d66:	1dfb      	adds	r3, r7, #7
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	429a      	cmp	r2, r3
 8011d6c:	d0bf      	beq.n	8011cee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011d6e:	2300      	movs	r3, #0
}
 8011d70:	0018      	movs	r0, r3
 8011d72:	46bd      	mov	sp, r7
 8011d74:	b004      	add	sp, #16
 8011d76:	bd80      	pop	{r7, pc}

08011d78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b084      	sub	sp, #16
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	60f8      	str	r0, [r7, #12]
 8011d80:	60b9      	str	r1, [r7, #8]
 8011d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011d84:	e032      	b.n	8011dec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011d86:	687a      	ldr	r2, [r7, #4]
 8011d88:	68b9      	ldr	r1, [r7, #8]
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	0018      	movs	r0, r3
 8011d8e:	f000 f8ff 	bl	8011f90 <I2C_IsErrorOccurred>
 8011d92:	1e03      	subs	r3, r0, #0
 8011d94:	d001      	beq.n	8011d9a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011d96:	2301      	movs	r3, #1
 8011d98:	e030      	b.n	8011dfc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	3301      	adds	r3, #1
 8011d9e:	d025      	beq.n	8011dec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011da0:	f7fc fc76 	bl	800e690 <HAL_GetTick>
 8011da4:	0002      	movs	r2, r0
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	1ad3      	subs	r3, r2, r3
 8011daa:	68ba      	ldr	r2, [r7, #8]
 8011dac:	429a      	cmp	r2, r3
 8011dae:	d302      	bcc.n	8011db6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d11a      	bne.n	8011dec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	699b      	ldr	r3, [r3, #24]
 8011dbc:	2202      	movs	r2, #2
 8011dbe:	4013      	ands	r3, r2
 8011dc0:	2b02      	cmp	r3, #2
 8011dc2:	d013      	beq.n	8011dec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011dc8:	2220      	movs	r2, #32
 8011dca:	431a      	orrs	r2, r3
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	2241      	movs	r2, #65	@ 0x41
 8011dd4:	2120      	movs	r1, #32
 8011dd6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	2242      	movs	r2, #66	@ 0x42
 8011ddc:	2100      	movs	r1, #0
 8011dde:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	2240      	movs	r2, #64	@ 0x40
 8011de4:	2100      	movs	r1, #0
 8011de6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8011de8:	2301      	movs	r3, #1
 8011dea:	e007      	b.n	8011dfc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	699b      	ldr	r3, [r3, #24]
 8011df2:	2202      	movs	r2, #2
 8011df4:	4013      	ands	r3, r2
 8011df6:	2b02      	cmp	r3, #2
 8011df8:	d1c5      	bne.n	8011d86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8011dfa:	2300      	movs	r3, #0
}
 8011dfc:	0018      	movs	r0, r3
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	b004      	add	sp, #16
 8011e02:	bd80      	pop	{r7, pc}

08011e04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b084      	sub	sp, #16
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	60f8      	str	r0, [r7, #12]
 8011e0c:	60b9      	str	r1, [r7, #8]
 8011e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011e10:	e02f      	b.n	8011e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011e12:	687a      	ldr	r2, [r7, #4]
 8011e14:	68b9      	ldr	r1, [r7, #8]
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	0018      	movs	r0, r3
 8011e1a:	f000 f8b9 	bl	8011f90 <I2C_IsErrorOccurred>
 8011e1e:	1e03      	subs	r3, r0, #0
 8011e20:	d001      	beq.n	8011e26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011e22:	2301      	movs	r3, #1
 8011e24:	e02d      	b.n	8011e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011e26:	f7fc fc33 	bl	800e690 <HAL_GetTick>
 8011e2a:	0002      	movs	r2, r0
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	1ad3      	subs	r3, r2, r3
 8011e30:	68ba      	ldr	r2, [r7, #8]
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d302      	bcc.n	8011e3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8011e36:	68bb      	ldr	r3, [r7, #8]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d11a      	bne.n	8011e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	699b      	ldr	r3, [r3, #24]
 8011e42:	2220      	movs	r2, #32
 8011e44:	4013      	ands	r3, r2
 8011e46:	2b20      	cmp	r3, #32
 8011e48:	d013      	beq.n	8011e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011e4e:	2220      	movs	r2, #32
 8011e50:	431a      	orrs	r2, r3
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	2241      	movs	r2, #65	@ 0x41
 8011e5a:	2120      	movs	r1, #32
 8011e5c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	2242      	movs	r2, #66	@ 0x42
 8011e62:	2100      	movs	r1, #0
 8011e64:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	2240      	movs	r2, #64	@ 0x40
 8011e6a:	2100      	movs	r1, #0
 8011e6c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011e6e:	2301      	movs	r3, #1
 8011e70:	e007      	b.n	8011e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	699b      	ldr	r3, [r3, #24]
 8011e78:	2220      	movs	r2, #32
 8011e7a:	4013      	ands	r3, r2
 8011e7c:	2b20      	cmp	r3, #32
 8011e7e:	d1c8      	bne.n	8011e12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011e80:	2300      	movs	r3, #0
}
 8011e82:	0018      	movs	r0, r3
 8011e84:	46bd      	mov	sp, r7
 8011e86:	b004      	add	sp, #16
 8011e88:	bd80      	pop	{r7, pc}
	...

08011e8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b084      	sub	sp, #16
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	60f8      	str	r0, [r7, #12]
 8011e94:	60b9      	str	r1, [r7, #8]
 8011e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011e98:	e06b      	b.n	8011f72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011e9a:	687a      	ldr	r2, [r7, #4]
 8011e9c:	68b9      	ldr	r1, [r7, #8]
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	0018      	movs	r0, r3
 8011ea2:	f000 f875 	bl	8011f90 <I2C_IsErrorOccurred>
 8011ea6:	1e03      	subs	r3, r0, #0
 8011ea8:	d001      	beq.n	8011eae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011eaa:	2301      	movs	r3, #1
 8011eac:	e069      	b.n	8011f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	699b      	ldr	r3, [r3, #24]
 8011eb4:	2220      	movs	r2, #32
 8011eb6:	4013      	ands	r3, r2
 8011eb8:	2b20      	cmp	r3, #32
 8011eba:	d138      	bne.n	8011f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	699b      	ldr	r3, [r3, #24]
 8011ec2:	2204      	movs	r2, #4
 8011ec4:	4013      	ands	r3, r2
 8011ec6:	2b04      	cmp	r3, #4
 8011ec8:	d105      	bne.n	8011ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d001      	beq.n	8011ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	e055      	b.n	8011f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	699b      	ldr	r3, [r3, #24]
 8011edc:	2210      	movs	r2, #16
 8011ede:	4013      	ands	r3, r2
 8011ee0:	2b10      	cmp	r3, #16
 8011ee2:	d107      	bne.n	8011ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	2210      	movs	r2, #16
 8011eea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	2204      	movs	r2, #4
 8011ef0:	645a      	str	r2, [r3, #68]	@ 0x44
 8011ef2:	e002      	b.n	8011efa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	2220      	movs	r2, #32
 8011f00:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	685a      	ldr	r2, [r3, #4]
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	491f      	ldr	r1, [pc, #124]	@ (8011f8c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8011f0e:	400a      	ands	r2, r1
 8011f10:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	2241      	movs	r2, #65	@ 0x41
 8011f16:	2120      	movs	r1, #32
 8011f18:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	2242      	movs	r2, #66	@ 0x42
 8011f1e:	2100      	movs	r1, #0
 8011f20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	2240      	movs	r2, #64	@ 0x40
 8011f26:	2100      	movs	r1, #0
 8011f28:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	e029      	b.n	8011f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011f2e:	f7fc fbaf 	bl	800e690 <HAL_GetTick>
 8011f32:	0002      	movs	r2, r0
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	1ad3      	subs	r3, r2, r3
 8011f38:	68ba      	ldr	r2, [r7, #8]
 8011f3a:	429a      	cmp	r2, r3
 8011f3c:	d302      	bcc.n	8011f44 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8011f3e:	68bb      	ldr	r3, [r7, #8]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d116      	bne.n	8011f72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	699b      	ldr	r3, [r3, #24]
 8011f4a:	2204      	movs	r2, #4
 8011f4c:	4013      	ands	r3, r2
 8011f4e:	2b04      	cmp	r3, #4
 8011f50:	d00f      	beq.n	8011f72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f56:	2220      	movs	r2, #32
 8011f58:	431a      	orrs	r2, r3
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	2241      	movs	r2, #65	@ 0x41
 8011f62:	2120      	movs	r1, #32
 8011f64:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	2240      	movs	r2, #64	@ 0x40
 8011f6a:	2100      	movs	r1, #0
 8011f6c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011f6e:	2301      	movs	r3, #1
 8011f70:	e007      	b.n	8011f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	699b      	ldr	r3, [r3, #24]
 8011f78:	2204      	movs	r2, #4
 8011f7a:	4013      	ands	r3, r2
 8011f7c:	2b04      	cmp	r3, #4
 8011f7e:	d18c      	bne.n	8011e9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011f80:	2300      	movs	r3, #0
}
 8011f82:	0018      	movs	r0, r3
 8011f84:	46bd      	mov	sp, r7
 8011f86:	b004      	add	sp, #16
 8011f88:	bd80      	pop	{r7, pc}
 8011f8a:	46c0      	nop			@ (mov r8, r8)
 8011f8c:	fe00e800 	.word	0xfe00e800

08011f90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b08a      	sub	sp, #40	@ 0x28
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	60f8      	str	r0, [r7, #12]
 8011f98:	60b9      	str	r1, [r7, #8]
 8011f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011f9c:	2327      	movs	r3, #39	@ 0x27
 8011f9e:	18fb      	adds	r3, r7, r3
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	699b      	ldr	r3, [r3, #24]
 8011faa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8011fac:	2300      	movs	r3, #0
 8011fae:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8011fb4:	69bb      	ldr	r3, [r7, #24]
 8011fb6:	2210      	movs	r2, #16
 8011fb8:	4013      	ands	r3, r2
 8011fba:	d100      	bne.n	8011fbe <I2C_IsErrorOccurred+0x2e>
 8011fbc:	e079      	b.n	80120b2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	2210      	movs	r2, #16
 8011fc4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011fc6:	e057      	b.n	8012078 <I2C_IsErrorOccurred+0xe8>
 8011fc8:	2227      	movs	r2, #39	@ 0x27
 8011fca:	18bb      	adds	r3, r7, r2
 8011fcc:	18ba      	adds	r2, r7, r2
 8011fce:	7812      	ldrb	r2, [r2, #0]
 8011fd0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	3301      	adds	r3, #1
 8011fd6:	d04f      	beq.n	8012078 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8011fd8:	f7fc fb5a 	bl	800e690 <HAL_GetTick>
 8011fdc:	0002      	movs	r2, r0
 8011fde:	69fb      	ldr	r3, [r7, #28]
 8011fe0:	1ad3      	subs	r3, r2, r3
 8011fe2:	68ba      	ldr	r2, [r7, #8]
 8011fe4:	429a      	cmp	r2, r3
 8011fe6:	d302      	bcc.n	8011fee <I2C_IsErrorOccurred+0x5e>
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d144      	bne.n	8012078 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	685a      	ldr	r2, [r3, #4]
 8011ff4:	2380      	movs	r3, #128	@ 0x80
 8011ff6:	01db      	lsls	r3, r3, #7
 8011ff8:	4013      	ands	r3, r2
 8011ffa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8011ffc:	2013      	movs	r0, #19
 8011ffe:	183b      	adds	r3, r7, r0
 8012000:	68fa      	ldr	r2, [r7, #12]
 8012002:	2142      	movs	r1, #66	@ 0x42
 8012004:	5c52      	ldrb	r2, [r2, r1]
 8012006:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	699a      	ldr	r2, [r3, #24]
 801200e:	2380      	movs	r3, #128	@ 0x80
 8012010:	021b      	lsls	r3, r3, #8
 8012012:	401a      	ands	r2, r3
 8012014:	2380      	movs	r3, #128	@ 0x80
 8012016:	021b      	lsls	r3, r3, #8
 8012018:	429a      	cmp	r2, r3
 801201a:	d126      	bne.n	801206a <I2C_IsErrorOccurred+0xda>
 801201c:	697a      	ldr	r2, [r7, #20]
 801201e:	2380      	movs	r3, #128	@ 0x80
 8012020:	01db      	lsls	r3, r3, #7
 8012022:	429a      	cmp	r2, r3
 8012024:	d021      	beq.n	801206a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8012026:	183b      	adds	r3, r7, r0
 8012028:	781b      	ldrb	r3, [r3, #0]
 801202a:	2b20      	cmp	r3, #32
 801202c:	d01d      	beq.n	801206a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	685a      	ldr	r2, [r3, #4]
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	2180      	movs	r1, #128	@ 0x80
 801203a:	01c9      	lsls	r1, r1, #7
 801203c:	430a      	orrs	r2, r1
 801203e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8012040:	f7fc fb26 	bl	800e690 <HAL_GetTick>
 8012044:	0003      	movs	r3, r0
 8012046:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012048:	e00f      	b.n	801206a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801204a:	f7fc fb21 	bl	800e690 <HAL_GetTick>
 801204e:	0002      	movs	r2, r0
 8012050:	69fb      	ldr	r3, [r7, #28]
 8012052:	1ad3      	subs	r3, r2, r3
 8012054:	2b19      	cmp	r3, #25
 8012056:	d908      	bls.n	801206a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8012058:	6a3b      	ldr	r3, [r7, #32]
 801205a:	2220      	movs	r2, #32
 801205c:	4313      	orrs	r3, r2
 801205e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8012060:	2327      	movs	r3, #39	@ 0x27
 8012062:	18fb      	adds	r3, r7, r3
 8012064:	2201      	movs	r2, #1
 8012066:	701a      	strb	r2, [r3, #0]

              break;
 8012068:	e006      	b.n	8012078 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	699b      	ldr	r3, [r3, #24]
 8012070:	2220      	movs	r2, #32
 8012072:	4013      	ands	r3, r2
 8012074:	2b20      	cmp	r3, #32
 8012076:	d1e8      	bne.n	801204a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	699b      	ldr	r3, [r3, #24]
 801207e:	2220      	movs	r2, #32
 8012080:	4013      	ands	r3, r2
 8012082:	2b20      	cmp	r3, #32
 8012084:	d004      	beq.n	8012090 <I2C_IsErrorOccurred+0x100>
 8012086:	2327      	movs	r3, #39	@ 0x27
 8012088:	18fb      	adds	r3, r7, r3
 801208a:	781b      	ldrb	r3, [r3, #0]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d09b      	beq.n	8011fc8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8012090:	2327      	movs	r3, #39	@ 0x27
 8012092:	18fb      	adds	r3, r7, r3
 8012094:	781b      	ldrb	r3, [r3, #0]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d103      	bne.n	80120a2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	2220      	movs	r2, #32
 80120a0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80120a2:	6a3b      	ldr	r3, [r7, #32]
 80120a4:	2204      	movs	r2, #4
 80120a6:	4313      	orrs	r3, r2
 80120a8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80120aa:	2327      	movs	r3, #39	@ 0x27
 80120ac:	18fb      	adds	r3, r7, r3
 80120ae:	2201      	movs	r2, #1
 80120b0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	699b      	ldr	r3, [r3, #24]
 80120b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80120ba:	69ba      	ldr	r2, [r7, #24]
 80120bc:	2380      	movs	r3, #128	@ 0x80
 80120be:	005b      	lsls	r3, r3, #1
 80120c0:	4013      	ands	r3, r2
 80120c2:	d00c      	beq.n	80120de <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80120c4:	6a3b      	ldr	r3, [r7, #32]
 80120c6:	2201      	movs	r2, #1
 80120c8:	4313      	orrs	r3, r2
 80120ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	2280      	movs	r2, #128	@ 0x80
 80120d2:	0052      	lsls	r2, r2, #1
 80120d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80120d6:	2327      	movs	r3, #39	@ 0x27
 80120d8:	18fb      	adds	r3, r7, r3
 80120da:	2201      	movs	r2, #1
 80120dc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80120de:	69ba      	ldr	r2, [r7, #24]
 80120e0:	2380      	movs	r3, #128	@ 0x80
 80120e2:	00db      	lsls	r3, r3, #3
 80120e4:	4013      	ands	r3, r2
 80120e6:	d00c      	beq.n	8012102 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80120e8:	6a3b      	ldr	r3, [r7, #32]
 80120ea:	2208      	movs	r2, #8
 80120ec:	4313      	orrs	r3, r2
 80120ee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	2280      	movs	r2, #128	@ 0x80
 80120f6:	00d2      	lsls	r2, r2, #3
 80120f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80120fa:	2327      	movs	r3, #39	@ 0x27
 80120fc:	18fb      	adds	r3, r7, r3
 80120fe:	2201      	movs	r2, #1
 8012100:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8012102:	69ba      	ldr	r2, [r7, #24]
 8012104:	2380      	movs	r3, #128	@ 0x80
 8012106:	009b      	lsls	r3, r3, #2
 8012108:	4013      	ands	r3, r2
 801210a:	d00c      	beq.n	8012126 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801210c:	6a3b      	ldr	r3, [r7, #32]
 801210e:	2202      	movs	r2, #2
 8012110:	4313      	orrs	r3, r2
 8012112:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	2280      	movs	r2, #128	@ 0x80
 801211a:	0092      	lsls	r2, r2, #2
 801211c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801211e:	2327      	movs	r3, #39	@ 0x27
 8012120:	18fb      	adds	r3, r7, r3
 8012122:	2201      	movs	r2, #1
 8012124:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8012126:	2327      	movs	r3, #39	@ 0x27
 8012128:	18fb      	adds	r3, r7, r3
 801212a:	781b      	ldrb	r3, [r3, #0]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d01d      	beq.n	801216c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	0018      	movs	r0, r3
 8012134:	f7ff fcd7 	bl	8011ae6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	685a      	ldr	r2, [r3, #4]
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	490e      	ldr	r1, [pc, #56]	@ (801217c <I2C_IsErrorOccurred+0x1ec>)
 8012144:	400a      	ands	r2, r1
 8012146:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801214c:	6a3b      	ldr	r3, [r7, #32]
 801214e:	431a      	orrs	r2, r3
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	2241      	movs	r2, #65	@ 0x41
 8012158:	2120      	movs	r1, #32
 801215a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	2242      	movs	r2, #66	@ 0x42
 8012160:	2100      	movs	r1, #0
 8012162:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	2240      	movs	r2, #64	@ 0x40
 8012168:	2100      	movs	r1, #0
 801216a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801216c:	2327      	movs	r3, #39	@ 0x27
 801216e:	18fb      	adds	r3, r7, r3
 8012170:	781b      	ldrb	r3, [r3, #0]
}
 8012172:	0018      	movs	r0, r3
 8012174:	46bd      	mov	sp, r7
 8012176:	b00a      	add	sp, #40	@ 0x28
 8012178:	bd80      	pop	{r7, pc}
 801217a:	46c0      	nop			@ (mov r8, r8)
 801217c:	fe00e800 	.word	0xfe00e800

08012180 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8012180:	b590      	push	{r4, r7, lr}
 8012182:	b087      	sub	sp, #28
 8012184:	af00      	add	r7, sp, #0
 8012186:	60f8      	str	r0, [r7, #12]
 8012188:	0008      	movs	r0, r1
 801218a:	0011      	movs	r1, r2
 801218c:	607b      	str	r3, [r7, #4]
 801218e:	240a      	movs	r4, #10
 8012190:	193b      	adds	r3, r7, r4
 8012192:	1c02      	adds	r2, r0, #0
 8012194:	801a      	strh	r2, [r3, #0]
 8012196:	2009      	movs	r0, #9
 8012198:	183b      	adds	r3, r7, r0
 801219a:	1c0a      	adds	r2, r1, #0
 801219c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801219e:	193b      	adds	r3, r7, r4
 80121a0:	881b      	ldrh	r3, [r3, #0]
 80121a2:	059b      	lsls	r3, r3, #22
 80121a4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80121a6:	183b      	adds	r3, r7, r0
 80121a8:	781b      	ldrb	r3, [r3, #0]
 80121aa:	0419      	lsls	r1, r3, #16
 80121ac:	23ff      	movs	r3, #255	@ 0xff
 80121ae:	041b      	lsls	r3, r3, #16
 80121b0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80121b2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80121b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121ba:	4313      	orrs	r3, r2
 80121bc:	005b      	lsls	r3, r3, #1
 80121be:	085b      	lsrs	r3, r3, #1
 80121c0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	685b      	ldr	r3, [r3, #4]
 80121c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80121ca:	0d51      	lsrs	r1, r2, #21
 80121cc:	2280      	movs	r2, #128	@ 0x80
 80121ce:	00d2      	lsls	r2, r2, #3
 80121d0:	400a      	ands	r2, r1
 80121d2:	4907      	ldr	r1, [pc, #28]	@ (80121f0 <I2C_TransferConfig+0x70>)
 80121d4:	430a      	orrs	r2, r1
 80121d6:	43d2      	mvns	r2, r2
 80121d8:	401a      	ands	r2, r3
 80121da:	0011      	movs	r1, r2
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	697a      	ldr	r2, [r7, #20]
 80121e2:	430a      	orrs	r2, r1
 80121e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80121e6:	46c0      	nop			@ (mov r8, r8)
 80121e8:	46bd      	mov	sp, r7
 80121ea:	b007      	add	sp, #28
 80121ec:	bd90      	pop	{r4, r7, pc}
 80121ee:	46c0      	nop			@ (mov r8, r8)
 80121f0:	03ff63ff 	.word	0x03ff63ff

080121f4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b084      	sub	sp, #16
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
 80121fc:	000a      	movs	r2, r1
 80121fe:	1cbb      	adds	r3, r7, #2
 8012200:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8012202:	2300      	movs	r3, #0
 8012204:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801220a:	4b3e      	ldr	r3, [pc, #248]	@ (8012304 <I2C_Enable_IRQ+0x110>)
 801220c:	429a      	cmp	r2, r3
 801220e:	d035      	beq.n	801227c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012214:	4b3c      	ldr	r3, [pc, #240]	@ (8012308 <I2C_Enable_IRQ+0x114>)
 8012216:	429a      	cmp	r2, r3
 8012218:	d030      	beq.n	801227c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 801221e:	4b3b      	ldr	r3, [pc, #236]	@ (801230c <I2C_Enable_IRQ+0x118>)
 8012220:	429a      	cmp	r2, r3
 8012222:	d02b      	beq.n	801227c <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012224:	1cbb      	adds	r3, r7, #2
 8012226:	2200      	movs	r2, #0
 8012228:	5e9b      	ldrsh	r3, [r3, r2]
 801222a:	2b00      	cmp	r3, #0
 801222c:	da03      	bge.n	8012236 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	22b8      	movs	r2, #184	@ 0xb8
 8012232:	4313      	orrs	r3, r2
 8012234:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012236:	1cbb      	adds	r3, r7, #2
 8012238:	881b      	ldrh	r3, [r3, #0]
 801223a:	2201      	movs	r2, #1
 801223c:	4013      	ands	r3, r2
 801223e:	d003      	beq.n	8012248 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	22f2      	movs	r2, #242	@ 0xf2
 8012244:	4313      	orrs	r3, r2
 8012246:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012248:	1cbb      	adds	r3, r7, #2
 801224a:	881b      	ldrh	r3, [r3, #0]
 801224c:	2202      	movs	r2, #2
 801224e:	4013      	ands	r3, r2
 8012250:	d003      	beq.n	801225a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	22f4      	movs	r2, #244	@ 0xf4
 8012256:	4313      	orrs	r3, r2
 8012258:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801225a:	1cbb      	adds	r3, r7, #2
 801225c:	881b      	ldrh	r3, [r3, #0]
 801225e:	2b10      	cmp	r3, #16
 8012260:	d103      	bne.n	801226a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	2290      	movs	r2, #144	@ 0x90
 8012266:	4313      	orrs	r3, r2
 8012268:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801226a:	1cbb      	adds	r3, r7, #2
 801226c:	881b      	ldrh	r3, [r3, #0]
 801226e:	2b20      	cmp	r3, #32
 8012270:	d13c      	bne.n	80122ec <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	2220      	movs	r2, #32
 8012276:	4313      	orrs	r3, r2
 8012278:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801227a:	e037      	b.n	80122ec <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801227c:	1cbb      	adds	r3, r7, #2
 801227e:	2200      	movs	r2, #0
 8012280:	5e9b      	ldrsh	r3, [r3, r2]
 8012282:	2b00      	cmp	r3, #0
 8012284:	da03      	bge.n	801228e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	22b8      	movs	r2, #184	@ 0xb8
 801228a:	4313      	orrs	r3, r2
 801228c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801228e:	1cbb      	adds	r3, r7, #2
 8012290:	881b      	ldrh	r3, [r3, #0]
 8012292:	2201      	movs	r2, #1
 8012294:	4013      	ands	r3, r2
 8012296:	d003      	beq.n	80122a0 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	22f2      	movs	r2, #242	@ 0xf2
 801229c:	4313      	orrs	r3, r2
 801229e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80122a0:	1cbb      	adds	r3, r7, #2
 80122a2:	881b      	ldrh	r3, [r3, #0]
 80122a4:	2202      	movs	r2, #2
 80122a6:	4013      	ands	r3, r2
 80122a8:	d003      	beq.n	80122b2 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	22f4      	movs	r2, #244	@ 0xf4
 80122ae:	4313      	orrs	r3, r2
 80122b0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80122b2:	1cbb      	adds	r3, r7, #2
 80122b4:	881b      	ldrh	r3, [r3, #0]
 80122b6:	2b10      	cmp	r3, #16
 80122b8:	d103      	bne.n	80122c2 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	2290      	movs	r2, #144	@ 0x90
 80122be:	4313      	orrs	r3, r2
 80122c0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80122c2:	1cbb      	adds	r3, r7, #2
 80122c4:	881b      	ldrh	r3, [r3, #0]
 80122c6:	2b20      	cmp	r3, #32
 80122c8:	d103      	bne.n	80122d2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	2260      	movs	r2, #96	@ 0x60
 80122ce:	4313      	orrs	r3, r2
 80122d0:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80122d6:	4b0d      	ldr	r3, [pc, #52]	@ (801230c <I2C_Enable_IRQ+0x118>)
 80122d8:	429a      	cmp	r2, r3
 80122da:	d007      	beq.n	80122ec <I2C_Enable_IRQ+0xf8>
 80122dc:	1cbb      	adds	r3, r7, #2
 80122de:	881b      	ldrh	r3, [r3, #0]
 80122e0:	2b40      	cmp	r3, #64	@ 0x40
 80122e2:	d103      	bne.n	80122ec <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	2240      	movs	r2, #64	@ 0x40
 80122e8:	4313      	orrs	r3, r2
 80122ea:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	6819      	ldr	r1, [r3, #0]
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	68fa      	ldr	r2, [r7, #12]
 80122f8:	430a      	orrs	r2, r1
 80122fa:	601a      	str	r2, [r3, #0]
}
 80122fc:	46c0      	nop			@ (mov r8, r8)
 80122fe:	46bd      	mov	sp, r7
 8012300:	b004      	add	sp, #16
 8012302:	bd80      	pop	{r7, pc}
 8012304:	08010b75 	.word	0x08010b75
 8012308:	08010fa5 	.word	0x08010fa5
 801230c:	08010d6d 	.word	0x08010d6d

08012310 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b084      	sub	sp, #16
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
 8012318:	000a      	movs	r2, r1
 801231a:	1cbb      	adds	r3, r7, #2
 801231c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801231e:	2300      	movs	r3, #0
 8012320:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012322:	1cbb      	adds	r3, r7, #2
 8012324:	881b      	ldrh	r3, [r3, #0]
 8012326:	2201      	movs	r2, #1
 8012328:	4013      	ands	r3, r2
 801232a:	d010      	beq.n	801234e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	2242      	movs	r2, #66	@ 0x42
 8012330:	4313      	orrs	r3, r2
 8012332:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2241      	movs	r2, #65	@ 0x41
 8012338:	5c9b      	ldrb	r3, [r3, r2]
 801233a:	b2db      	uxtb	r3, r3
 801233c:	001a      	movs	r2, r3
 801233e:	2328      	movs	r3, #40	@ 0x28
 8012340:	4013      	ands	r3, r2
 8012342:	2b28      	cmp	r3, #40	@ 0x28
 8012344:	d003      	beq.n	801234e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	22b0      	movs	r2, #176	@ 0xb0
 801234a:	4313      	orrs	r3, r2
 801234c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801234e:	1cbb      	adds	r3, r7, #2
 8012350:	881b      	ldrh	r3, [r3, #0]
 8012352:	2202      	movs	r2, #2
 8012354:	4013      	ands	r3, r2
 8012356:	d010      	beq.n	801237a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	2244      	movs	r2, #68	@ 0x44
 801235c:	4313      	orrs	r3, r2
 801235e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2241      	movs	r2, #65	@ 0x41
 8012364:	5c9b      	ldrb	r3, [r3, r2]
 8012366:	b2db      	uxtb	r3, r3
 8012368:	001a      	movs	r2, r3
 801236a:	2328      	movs	r3, #40	@ 0x28
 801236c:	4013      	ands	r3, r2
 801236e:	2b28      	cmp	r3, #40	@ 0x28
 8012370:	d003      	beq.n	801237a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	22b0      	movs	r2, #176	@ 0xb0
 8012376:	4313      	orrs	r3, r2
 8012378:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801237a:	1cbb      	adds	r3, r7, #2
 801237c:	2200      	movs	r2, #0
 801237e:	5e9b      	ldrsh	r3, [r3, r2]
 8012380:	2b00      	cmp	r3, #0
 8012382:	da03      	bge.n	801238c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	22b8      	movs	r2, #184	@ 0xb8
 8012388:	4313      	orrs	r3, r2
 801238a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 801238c:	1cbb      	adds	r3, r7, #2
 801238e:	881b      	ldrh	r3, [r3, #0]
 8012390:	2b10      	cmp	r3, #16
 8012392:	d103      	bne.n	801239c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	2290      	movs	r2, #144	@ 0x90
 8012398:	4313      	orrs	r3, r2
 801239a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 801239c:	1cbb      	adds	r3, r7, #2
 801239e:	881b      	ldrh	r3, [r3, #0]
 80123a0:	2b20      	cmp	r3, #32
 80123a2:	d103      	bne.n	80123ac <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	2220      	movs	r2, #32
 80123a8:	4313      	orrs	r3, r2
 80123aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80123ac:	1cbb      	adds	r3, r7, #2
 80123ae:	881b      	ldrh	r3, [r3, #0]
 80123b0:	2b40      	cmp	r3, #64	@ 0x40
 80123b2:	d103      	bne.n	80123bc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	2240      	movs	r2, #64	@ 0x40
 80123b8:	4313      	orrs	r3, r2
 80123ba:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	681a      	ldr	r2, [r3, #0]
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	43d9      	mvns	r1, r3
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	400a      	ands	r2, r1
 80123cc:	601a      	str	r2, [r3, #0]
}
 80123ce:	46c0      	nop			@ (mov r8, r8)
 80123d0:	46bd      	mov	sp, r7
 80123d2:	b004      	add	sp, #16
 80123d4:	bd80      	pop	{r7, pc}
	...

080123d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
 80123e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	2241      	movs	r2, #65	@ 0x41
 80123e6:	5c9b      	ldrb	r3, [r3, r2]
 80123e8:	b2db      	uxtb	r3, r3
 80123ea:	2b20      	cmp	r3, #32
 80123ec:	d138      	bne.n	8012460 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	2240      	movs	r2, #64	@ 0x40
 80123f2:	5c9b      	ldrb	r3, [r3, r2]
 80123f4:	2b01      	cmp	r3, #1
 80123f6:	d101      	bne.n	80123fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80123f8:	2302      	movs	r3, #2
 80123fa:	e032      	b.n	8012462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2240      	movs	r2, #64	@ 0x40
 8012400:	2101      	movs	r1, #1
 8012402:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2241      	movs	r2, #65	@ 0x41
 8012408:	2124      	movs	r1, #36	@ 0x24
 801240a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	681a      	ldr	r2, [r3, #0]
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	2101      	movs	r1, #1
 8012418:	438a      	bics	r2, r1
 801241a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	681a      	ldr	r2, [r3, #0]
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	4911      	ldr	r1, [pc, #68]	@ (801246c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8012428:	400a      	ands	r2, r1
 801242a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	6819      	ldr	r1, [r3, #0]
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	683a      	ldr	r2, [r7, #0]
 8012438:	430a      	orrs	r2, r1
 801243a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	681a      	ldr	r2, [r3, #0]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	2101      	movs	r1, #1
 8012448:	430a      	orrs	r2, r1
 801244a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2241      	movs	r2, #65	@ 0x41
 8012450:	2120      	movs	r1, #32
 8012452:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2240      	movs	r2, #64	@ 0x40
 8012458:	2100      	movs	r1, #0
 801245a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801245c:	2300      	movs	r3, #0
 801245e:	e000      	b.n	8012462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012460:	2302      	movs	r3, #2
  }
}
 8012462:	0018      	movs	r0, r3
 8012464:	46bd      	mov	sp, r7
 8012466:	b002      	add	sp, #8
 8012468:	bd80      	pop	{r7, pc}
 801246a:	46c0      	nop			@ (mov r8, r8)
 801246c:	ffffefff 	.word	0xffffefff

08012470 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b084      	sub	sp, #16
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
 8012478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	2241      	movs	r2, #65	@ 0x41
 801247e:	5c9b      	ldrb	r3, [r3, r2]
 8012480:	b2db      	uxtb	r3, r3
 8012482:	2b20      	cmp	r3, #32
 8012484:	d139      	bne.n	80124fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	2240      	movs	r2, #64	@ 0x40
 801248a:	5c9b      	ldrb	r3, [r3, r2]
 801248c:	2b01      	cmp	r3, #1
 801248e:	d101      	bne.n	8012494 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8012490:	2302      	movs	r3, #2
 8012492:	e033      	b.n	80124fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2240      	movs	r2, #64	@ 0x40
 8012498:	2101      	movs	r1, #1
 801249a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2241      	movs	r2, #65	@ 0x41
 80124a0:	2124      	movs	r1, #36	@ 0x24
 80124a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	681a      	ldr	r2, [r3, #0]
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	2101      	movs	r1, #1
 80124b0:	438a      	bics	r2, r1
 80124b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	4a11      	ldr	r2, [pc, #68]	@ (8012504 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80124c0:	4013      	ands	r3, r2
 80124c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80124c4:	683b      	ldr	r3, [r7, #0]
 80124c6:	021b      	lsls	r3, r3, #8
 80124c8:	68fa      	ldr	r2, [r7, #12]
 80124ca:	4313      	orrs	r3, r2
 80124cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	68fa      	ldr	r2, [r7, #12]
 80124d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	681a      	ldr	r2, [r3, #0]
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	2101      	movs	r1, #1
 80124e2:	430a      	orrs	r2, r1
 80124e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2241      	movs	r2, #65	@ 0x41
 80124ea:	2120      	movs	r1, #32
 80124ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	2240      	movs	r2, #64	@ 0x40
 80124f2:	2100      	movs	r1, #0
 80124f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80124f6:	2300      	movs	r3, #0
 80124f8:	e000      	b.n	80124fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80124fa:	2302      	movs	r3, #2
  }
}
 80124fc:	0018      	movs	r0, r3
 80124fe:	46bd      	mov	sp, r7
 8012500:	b004      	add	sp, #16
 8012502:	bd80      	pop	{r7, pc}
 8012504:	fffff0ff 	.word	0xfffff0ff

08012508 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b088      	sub	sp, #32
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d101      	bne.n	801251a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8012516:	2301      	movs	r3, #1
 8012518:	e0e1      	b.n	80126de <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2235      	movs	r2, #53	@ 0x35
 801251e:	5c9b      	ldrb	r3, [r3, r2]
 8012520:	b2db      	uxtb	r3, r3
 8012522:	2b00      	cmp	r3, #0
 8012524:	d107      	bne.n	8012536 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	2234      	movs	r2, #52	@ 0x34
 801252a:	2100      	movs	r1, #0
 801252c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	0018      	movs	r0, r3
 8012532:	f7f5 fa2b 	bl	800798c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2235      	movs	r2, #53	@ 0x35
 801253a:	2102      	movs	r1, #2
 801253c:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	69da      	ldr	r2, [r3, #28]
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	4967      	ldr	r1, [pc, #412]	@ (80126e8 <HAL_I2S_Init+0x1e0>)
 801254a:	400a      	ands	r2, r1
 801254c:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	2202      	movs	r2, #2
 8012554:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	695b      	ldr	r3, [r3, #20]
 801255a:	2b02      	cmp	r3, #2
 801255c:	d073      	beq.n	8012646 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	68db      	ldr	r3, [r3, #12]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d102      	bne.n	801256c <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8012566:	2310      	movs	r3, #16
 8012568:	617b      	str	r3, [r7, #20]
 801256a:	e001      	b.n	8012570 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 801256c:	2320      	movs	r3, #32
 801256e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	689b      	ldr	r3, [r3, #8]
 8012574:	2b20      	cmp	r3, #32
 8012576:	d802      	bhi.n	801257e <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8012578:	697b      	ldr	r3, [r7, #20]
 801257a:	005b      	lsls	r3, r3, #1
 801257c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 801257e:	f002 fed3 	bl	8015328 <HAL_RCC_GetSysClockFreq>
 8012582:	0003      	movs	r3, r0
 8012584:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	691a      	ldr	r2, [r3, #16]
 801258a:	2380      	movs	r3, #128	@ 0x80
 801258c:	009b      	lsls	r3, r3, #2
 801258e:	429a      	cmp	r2, r3
 8012590:	d131      	bne.n	80125f6 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	68db      	ldr	r3, [r3, #12]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d016      	beq.n	80125c8 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801259a:	697b      	ldr	r3, [r7, #20]
 801259c:	009b      	lsls	r3, r3, #2
 801259e:	0019      	movs	r1, r3
 80125a0:	68f8      	ldr	r0, [r7, #12]
 80125a2:	f7ed fdff 	bl	80001a4 <__udivsi3>
 80125a6:	0003      	movs	r3, r0
 80125a8:	001a      	movs	r2, r3
 80125aa:	0013      	movs	r3, r2
 80125ac:	009b      	lsls	r3, r3, #2
 80125ae:	189b      	adds	r3, r3, r2
 80125b0:	005b      	lsls	r3, r3, #1
 80125b2:	001a      	movs	r2, r3
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	695b      	ldr	r3, [r3, #20]
 80125b8:	0019      	movs	r1, r3
 80125ba:	0010      	movs	r0, r2
 80125bc:	f7ed fdf2 	bl	80001a4 <__udivsi3>
 80125c0:	0003      	movs	r3, r0
 80125c2:	3305      	adds	r3, #5
 80125c4:	613b      	str	r3, [r7, #16]
 80125c6:	e02a      	b.n	801261e <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80125c8:	697b      	ldr	r3, [r7, #20]
 80125ca:	00db      	lsls	r3, r3, #3
 80125cc:	0019      	movs	r1, r3
 80125ce:	68f8      	ldr	r0, [r7, #12]
 80125d0:	f7ed fde8 	bl	80001a4 <__udivsi3>
 80125d4:	0003      	movs	r3, r0
 80125d6:	001a      	movs	r2, r3
 80125d8:	0013      	movs	r3, r2
 80125da:	009b      	lsls	r3, r3, #2
 80125dc:	189b      	adds	r3, r3, r2
 80125de:	005b      	lsls	r3, r3, #1
 80125e0:	001a      	movs	r2, r3
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	695b      	ldr	r3, [r3, #20]
 80125e6:	0019      	movs	r1, r3
 80125e8:	0010      	movs	r0, r2
 80125ea:	f7ed fddb 	bl	80001a4 <__udivsi3>
 80125ee:	0003      	movs	r3, r0
 80125f0:	3305      	adds	r3, #5
 80125f2:	613b      	str	r3, [r7, #16]
 80125f4:	e013      	b.n	801261e <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80125f6:	6979      	ldr	r1, [r7, #20]
 80125f8:	68f8      	ldr	r0, [r7, #12]
 80125fa:	f7ed fdd3 	bl	80001a4 <__udivsi3>
 80125fe:	0003      	movs	r3, r0
 8012600:	001a      	movs	r2, r3
 8012602:	0013      	movs	r3, r2
 8012604:	009b      	lsls	r3, r3, #2
 8012606:	189b      	adds	r3, r3, r2
 8012608:	005b      	lsls	r3, r3, #1
 801260a:	001a      	movs	r2, r3
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	695b      	ldr	r3, [r3, #20]
 8012610:	0019      	movs	r1, r3
 8012612:	0010      	movs	r0, r2
 8012614:	f7ed fdc6 	bl	80001a4 <__udivsi3>
 8012618:	0003      	movs	r3, r0
 801261a:	3305      	adds	r3, #5
 801261c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 801261e:	693b      	ldr	r3, [r7, #16]
 8012620:	210a      	movs	r1, #10
 8012622:	0018      	movs	r0, r3
 8012624:	f7ed fdbe 	bl	80001a4 <__udivsi3>
 8012628:	0003      	movs	r3, r0
 801262a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 801262c:	693b      	ldr	r3, [r7, #16]
 801262e:	2201      	movs	r2, #1
 8012630:	4013      	ands	r3, r2
 8012632:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8012634:	693a      	ldr	r2, [r7, #16]
 8012636:	69bb      	ldr	r3, [r7, #24]
 8012638:	1ad3      	subs	r3, r2, r3
 801263a:	085b      	lsrs	r3, r3, #1
 801263c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 801263e:	69bb      	ldr	r3, [r7, #24]
 8012640:	021b      	lsls	r3, r3, #8
 8012642:	61bb      	str	r3, [r7, #24]
 8012644:	e003      	b.n	801264e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8012646:	2302      	movs	r3, #2
 8012648:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 801264a:	2300      	movs	r3, #0
 801264c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 801264e:	69fb      	ldr	r3, [r7, #28]
 8012650:	2b01      	cmp	r3, #1
 8012652:	d902      	bls.n	801265a <HAL_I2S_Init+0x152>
 8012654:	69fb      	ldr	r3, [r7, #28]
 8012656:	2bff      	cmp	r3, #255	@ 0xff
 8012658:	d907      	bls.n	801266a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801265e:	2210      	movs	r2, #16
 8012660:	431a      	orrs	r2, r3
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8012666:	2301      	movs	r3, #1
 8012668:	e039      	b.n	80126de <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	691a      	ldr	r2, [r3, #16]
 801266e:	69bb      	ldr	r3, [r7, #24]
 8012670:	431a      	orrs	r2, r3
 8012672:	0011      	movs	r1, r2
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	69fa      	ldr	r2, [r7, #28]
 801267a:	430a      	orrs	r2, r1
 801267c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	69db      	ldr	r3, [r3, #28]
 8012684:	4a18      	ldr	r2, [pc, #96]	@ (80126e8 <HAL_I2S_Init+0x1e0>)
 8012686:	401a      	ands	r2, r3
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	6859      	ldr	r1, [r3, #4]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	689b      	ldr	r3, [r3, #8]
 8012690:	4319      	orrs	r1, r3
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	68db      	ldr	r3, [r3, #12]
 8012696:	4319      	orrs	r1, r3
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	699b      	ldr	r3, [r3, #24]
 801269c:	430b      	orrs	r3, r1
 801269e:	431a      	orrs	r2, r3
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	2180      	movs	r1, #128	@ 0x80
 80126a6:	0109      	lsls	r1, r1, #4
 80126a8:	430a      	orrs	r2, r1
 80126aa:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	689b      	ldr	r3, [r3, #8]
 80126b0:	2b30      	cmp	r3, #48	@ 0x30
 80126b2:	d003      	beq.n	80126bc <HAL_I2S_Init+0x1b4>
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	689b      	ldr	r3, [r3, #8]
 80126b8:	2bb0      	cmp	r3, #176	@ 0xb0
 80126ba:	d108      	bne.n	80126ce <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	69da      	ldr	r2, [r3, #28]
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	2180      	movs	r1, #128	@ 0x80
 80126c8:	0149      	lsls	r1, r1, #5
 80126ca:	430a      	orrs	r2, r1
 80126cc:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2200      	movs	r2, #0
 80126d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2235      	movs	r2, #53	@ 0x35
 80126d8:	2101      	movs	r1, #1
 80126da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80126dc:	2300      	movs	r3, #0
}
 80126de:	0018      	movs	r0, r3
 80126e0:	46bd      	mov	sp, r7
 80126e2:	b008      	add	sp, #32
 80126e4:	bd80      	pop	{r7, pc}
 80126e6:	46c0      	nop			@ (mov r8, r8)
 80126e8:	fffff040 	.word	0xfffff040

080126ec <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b086      	sub	sp, #24
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	60f8      	str	r0, [r7, #12]
 80126f4:	60b9      	str	r1, [r7, #8]
 80126f6:	1dbb      	adds	r3, r7, #6
 80126f8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80126fa:	68bb      	ldr	r3, [r7, #8]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d003      	beq.n	8012708 <HAL_I2S_Receive_DMA+0x1c>
 8012700:	1dbb      	adds	r3, r7, #6
 8012702:	881b      	ldrh	r3, [r3, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d101      	bne.n	801270c <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8012708:	2301      	movs	r3, #1
 801270a:	e0a6      	b.n	801285a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	2234      	movs	r2, #52	@ 0x34
 8012710:	5c9b      	ldrb	r3, [r3, r2]
 8012712:	b2db      	uxtb	r3, r3
 8012714:	2b01      	cmp	r3, #1
 8012716:	d101      	bne.n	801271c <HAL_I2S_Receive_DMA+0x30>
 8012718:	2302      	movs	r3, #2
 801271a:	e09e      	b.n	801285a <HAL_I2S_Receive_DMA+0x16e>
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	2234      	movs	r2, #52	@ 0x34
 8012720:	2101      	movs	r1, #1
 8012722:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	2235      	movs	r2, #53	@ 0x35
 8012728:	5c9b      	ldrb	r3, [r3, r2]
 801272a:	b2db      	uxtb	r3, r3
 801272c:	2b01      	cmp	r3, #1
 801272e:	d005      	beq.n	801273c <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	2234      	movs	r2, #52	@ 0x34
 8012734:	2100      	movs	r1, #0
 8012736:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8012738:	2302      	movs	r3, #2
 801273a:	e08e      	b.n	801285a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	2235      	movs	r2, #53	@ 0x35
 8012740:	2104      	movs	r1, #4
 8012742:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	2200      	movs	r2, #0
 8012748:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	68ba      	ldr	r2, [r7, #8]
 801274e:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	69db      	ldr	r3, [r3, #28]
 8012756:	2207      	movs	r2, #7
 8012758:	4013      	ands	r3, r2
 801275a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 801275c:	697b      	ldr	r3, [r7, #20]
 801275e:	2b03      	cmp	r3, #3
 8012760:	d002      	beq.n	8012768 <HAL_I2S_Receive_DMA+0x7c>
 8012762:	697b      	ldr	r3, [r7, #20]
 8012764:	2b05      	cmp	r3, #5
 8012766:	d10c      	bne.n	8012782 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8012768:	1dbb      	adds	r3, r7, #6
 801276a:	881b      	ldrh	r3, [r3, #0]
 801276c:	18db      	adds	r3, r3, r3
 801276e:	b29a      	uxth	r2, r3
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8012774:	1dbb      	adds	r3, r7, #6
 8012776:	881b      	ldrh	r3, [r3, #0]
 8012778:	18db      	adds	r3, r3, r3
 801277a:	b29a      	uxth	r2, r3
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012780:	e007      	b.n	8012792 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	1dba      	adds	r2, r7, #6
 8012786:	8812      	ldrh	r2, [r2, #0]
 8012788:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	1dba      	adds	r2, r7, #6
 801278e:	8812      	ldrh	r2, [r2, #0]
 8012790:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012796:	4a33      	ldr	r2, [pc, #204]	@ (8012864 <HAL_I2S_Receive_DMA+0x178>)
 8012798:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801279e:	4a32      	ldr	r2, [pc, #200]	@ (8012868 <HAL_I2S_Receive_DMA+0x17c>)
 80127a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80127a6:	4a31      	ldr	r2, [pc, #196]	@ (801286c <HAL_I2S_Receive_DMA+0x180>)
 80127a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	69da      	ldr	r2, [r3, #28]
 80127b0:	23c0      	movs	r3, #192	@ 0xc0
 80127b2:	009b      	lsls	r3, r3, #2
 80127b4:	401a      	ands	r2, r3
 80127b6:	23c0      	movs	r3, #192	@ 0xc0
 80127b8:	009b      	lsls	r3, r3, #2
 80127ba:	429a      	cmp	r2, r3
 80127bc:	d10a      	bne.n	80127d4 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80127be:	2300      	movs	r3, #0
 80127c0:	613b      	str	r3, [r7, #16]
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	68db      	ldr	r3, [r3, #12]
 80127c8:	613b      	str	r3, [r7, #16]
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	689b      	ldr	r3, [r3, #8]
 80127d0:	613b      	str	r3, [r7, #16]
 80127d2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	330c      	adds	r3, #12
 80127de:	0019      	movs	r1, r3
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127e4:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80127ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80127ec:	f7fc fca2 	bl	800f134 <HAL_DMA_Start_IT>
 80127f0:	1e03      	subs	r3, r0, #0
 80127f2:	d00f      	beq.n	8012814 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80127f8:	2208      	movs	r2, #8
 80127fa:	431a      	orrs	r2, r3
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	2235      	movs	r2, #53	@ 0x35
 8012804:	2101      	movs	r1, #1
 8012806:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	2234      	movs	r2, #52	@ 0x34
 801280c:	2100      	movs	r1, #0
 801280e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8012810:	2301      	movs	r3, #1
 8012812:	e022      	b.n	801285a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	69da      	ldr	r2, [r3, #28]
 801281a:	2380      	movs	r3, #128	@ 0x80
 801281c:	00db      	lsls	r3, r3, #3
 801281e:	4013      	ands	r3, r2
 8012820:	d108      	bne.n	8012834 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	69da      	ldr	r2, [r3, #28]
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	2180      	movs	r1, #128	@ 0x80
 801282e:	00c9      	lsls	r1, r1, #3
 8012830:	430a      	orrs	r2, r1
 8012832:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	685b      	ldr	r3, [r3, #4]
 801283a:	2201      	movs	r2, #1
 801283c:	4013      	ands	r3, r2
 801283e:	d107      	bne.n	8012850 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	685a      	ldr	r2, [r3, #4]
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	2101      	movs	r1, #1
 801284c:	430a      	orrs	r2, r1
 801284e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	2234      	movs	r2, #52	@ 0x34
 8012854:	2100      	movs	r1, #0
 8012856:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8012858:	2300      	movs	r3, #0
}
 801285a:	0018      	movs	r0, r3
 801285c:	46bd      	mov	sp, r7
 801285e:	b006      	add	sp, #24
 8012860:	bd80      	pop	{r7, pc}
 8012862:	46c0      	nop			@ (mov r8, r8)
 8012864:	08012a4d 	.word	0x08012a4d
 8012868:	08012a09 	.word	0x08012a09
 801286c:	08012a6b 	.word	0x08012a6b

08012870 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b086      	sub	sp, #24
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012878:	2317      	movs	r3, #23
 801287a:	18fb      	adds	r3, r7, r3
 801287c:	2200      	movs	r2, #0
 801287e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	685a      	ldr	r2, [r3, #4]
 8012884:	2380      	movs	r3, #128	@ 0x80
 8012886:	009b      	lsls	r3, r3, #2
 8012888:	429a      	cmp	r2, r3
 801288a:	d003      	beq.n	8012894 <HAL_I2S_DMAStop+0x24>
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	685b      	ldr	r3, [r3, #4]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d158      	bne.n	8012946 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012898:	2b00      	cmp	r3, #0
 801289a:	d010      	beq.n	80128be <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128a0:	0018      	movs	r0, r3
 80128a2:	f7fc fcad 	bl	800f200 <HAL_DMA_Abort>
 80128a6:	1e03      	subs	r3, r0, #0
 80128a8:	d009      	beq.n	80128be <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80128ae:	2208      	movs	r2, #8
 80128b0:	431a      	orrs	r2, r3
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80128b6:	2317      	movs	r3, #23
 80128b8:	18fb      	adds	r3, r7, r3
 80128ba:	2201      	movs	r2, #1
 80128bc:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80128be:	6878      	ldr	r0, [r7, #4]
 80128c0:	2364      	movs	r3, #100	@ 0x64
 80128c2:	2201      	movs	r2, #1
 80128c4:	2102      	movs	r1, #2
 80128c6:	f000 f8f7 	bl	8012ab8 <I2S_WaitFlagStateUntilTimeout>
 80128ca:	1e03      	subs	r3, r0, #0
 80128cc:	d00d      	beq.n	80128ea <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80128d2:	2201      	movs	r2, #1
 80128d4:	431a      	orrs	r2, r3
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2235      	movs	r2, #53	@ 0x35
 80128de:	2101      	movs	r1, #1
 80128e0:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80128e2:	2317      	movs	r3, #23
 80128e4:	18fb      	adds	r3, r7, r3
 80128e6:	2201      	movs	r2, #1
 80128e8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80128ea:	6878      	ldr	r0, [r7, #4]
 80128ec:	2364      	movs	r3, #100	@ 0x64
 80128ee:	2200      	movs	r2, #0
 80128f0:	2180      	movs	r1, #128	@ 0x80
 80128f2:	f000 f8e1 	bl	8012ab8 <I2S_WaitFlagStateUntilTimeout>
 80128f6:	1e03      	subs	r3, r0, #0
 80128f8:	d00d      	beq.n	8012916 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80128fe:	2201      	movs	r2, #1
 8012900:	431a      	orrs	r2, r3
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2235      	movs	r2, #53	@ 0x35
 801290a:	2101      	movs	r1, #1
 801290c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801290e:	2317      	movs	r3, #23
 8012910:	18fb      	adds	r3, r7, r3
 8012912:	2201      	movs	r2, #1
 8012914:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	69da      	ldr	r2, [r3, #28]
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	4938      	ldr	r1, [pc, #224]	@ (8012a04 <HAL_I2S_DMAStop+0x194>)
 8012922:	400a      	ands	r2, r1
 8012924:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8012926:	2300      	movs	r3, #0
 8012928:	613b      	str	r3, [r7, #16]
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	689b      	ldr	r3, [r3, #8]
 8012930:	613b      	str	r3, [r7, #16]
 8012932:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	685a      	ldr	r2, [r3, #4]
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	2102      	movs	r1, #2
 8012940:	438a      	bics	r2, r1
 8012942:	605a      	str	r2, [r3, #4]
 8012944:	e053      	b.n	80129ee <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	685a      	ldr	r2, [r3, #4]
 801294a:	23c0      	movs	r3, #192	@ 0xc0
 801294c:	009b      	lsls	r3, r3, #2
 801294e:	429a      	cmp	r2, r3
 8012950:	d005      	beq.n	801295e <HAL_I2S_DMAStop+0xee>
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	685a      	ldr	r2, [r3, #4]
 8012956:	2380      	movs	r3, #128	@ 0x80
 8012958:	005b      	lsls	r3, r3, #1
 801295a:	429a      	cmp	r2, r3
 801295c:	d147      	bne.n	80129ee <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012962:	2b00      	cmp	r3, #0
 8012964:	d010      	beq.n	8012988 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801296a:	0018      	movs	r0, r3
 801296c:	f7fc fc48 	bl	800f200 <HAL_DMA_Abort>
 8012970:	1e03      	subs	r3, r0, #0
 8012972:	d009      	beq.n	8012988 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012978:	2208      	movs	r2, #8
 801297a:	431a      	orrs	r2, r3
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8012980:	2317      	movs	r3, #23
 8012982:	18fb      	adds	r3, r7, r3
 8012984:	2201      	movs	r2, #1
 8012986:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	69da      	ldr	r2, [r3, #28]
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	491c      	ldr	r1, [pc, #112]	@ (8012a04 <HAL_I2S_DMAStop+0x194>)
 8012994:	400a      	ands	r2, r1
 8012996:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012998:	2300      	movs	r3, #0
 801299a:	60fb      	str	r3, [r7, #12]
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	68db      	ldr	r3, [r3, #12]
 80129a2:	60fb      	str	r3, [r7, #12]
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	689b      	ldr	r3, [r3, #8]
 80129aa:	60fb      	str	r3, [r7, #12]
 80129ac:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	685a      	ldr	r2, [r3, #4]
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	2101      	movs	r1, #1
 80129ba:	438a      	bics	r2, r1
 80129bc:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	685a      	ldr	r2, [r3, #4]
 80129c2:	2380      	movs	r3, #128	@ 0x80
 80129c4:	005b      	lsls	r3, r3, #1
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d10e      	bne.n	80129e8 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80129ce:	2240      	movs	r2, #64	@ 0x40
 80129d0:	431a      	orrs	r2, r3
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	2235      	movs	r2, #53	@ 0x35
 80129da:	2101      	movs	r1, #1
 80129dc:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80129de:	2317      	movs	r3, #23
 80129e0:	18fb      	adds	r3, r7, r3
 80129e2:	2201      	movs	r2, #1
 80129e4:	701a      	strb	r2, [r3, #0]
 80129e6:	e002      	b.n	80129ee <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2235      	movs	r2, #53	@ 0x35
 80129f2:	2101      	movs	r1, #1
 80129f4:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80129f6:	2317      	movs	r3, #23
 80129f8:	18fb      	adds	r3, r7, r3
 80129fa:	781b      	ldrb	r3, [r3, #0]
}
 80129fc:	0018      	movs	r0, r3
 80129fe:	46bd      	mov	sp, r7
 8012a00:	b006      	add	sp, #24
 8012a02:	bd80      	pop	{r7, pc}
 8012a04:	fffffbff 	.word	0xfffffbff

08012a08 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b084      	sub	sp, #16
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a14:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	69db      	ldr	r3, [r3, #28]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d10e      	bne.n	8012a3c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	685a      	ldr	r2, [r3, #4]
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	2101      	movs	r1, #1
 8012a2a:	438a      	bics	r2, r1
 8012a2c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	2200      	movs	r2, #0
 8012a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	2235      	movs	r2, #53	@ 0x35
 8012a38:	2101      	movs	r1, #1
 8012a3a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	0018      	movs	r0, r3
 8012a40:	f7f9 fb4a 	bl	800c0d8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8012a44:	46c0      	nop			@ (mov r8, r8)
 8012a46:	46bd      	mov	sp, r7
 8012a48:	b004      	add	sp, #16
 8012a4a:	bd80      	pop	{r7, pc}

08012a4c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b084      	sub	sp, #16
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a58:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	0018      	movs	r0, r3
 8012a5e:	f7f9 fb29 	bl	800c0b4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8012a62:	46c0      	nop			@ (mov r8, r8)
 8012a64:	46bd      	mov	sp, r7
 8012a66:	b004      	add	sp, #16
 8012a68:	bd80      	pop	{r7, pc}

08012a6a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8012a6a:	b580      	push	{r7, lr}
 8012a6c:	b084      	sub	sp, #16
 8012a6e:	af00      	add	r7, sp, #0
 8012a70:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a76:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	685a      	ldr	r2, [r3, #4]
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	2103      	movs	r1, #3
 8012a84:	438a      	bics	r2, r1
 8012a86:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	2200      	movs	r2, #0
 8012a92:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	2235      	movs	r2, #53	@ 0x35
 8012a98:	2101      	movs	r1, #1
 8012a9a:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012aa0:	2208      	movs	r2, #8
 8012aa2:	431a      	orrs	r2, r3
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	0018      	movs	r0, r3
 8012aac:	f7f9 fb62 	bl	800c174 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8012ab0:	46c0      	nop			@ (mov r8, r8)
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	b004      	add	sp, #16
 8012ab6:	bd80      	pop	{r7, pc}

08012ab8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b086      	sub	sp, #24
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	60f8      	str	r0, [r7, #12]
 8012ac0:	60b9      	str	r1, [r7, #8]
 8012ac2:	603b      	str	r3, [r7, #0]
 8012ac4:	1dfb      	adds	r3, r7, #7
 8012ac6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8012ac8:	f7fb fde2 	bl	800e690 <HAL_GetTick>
 8012acc:	0003      	movs	r3, r0
 8012ace:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8012ad0:	e017      	b.n	8012b02 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	3301      	adds	r3, #1
 8012ad6:	d014      	beq.n	8012b02 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8012ad8:	f7fb fdda 	bl	800e690 <HAL_GetTick>
 8012adc:	0002      	movs	r2, r0
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	1ad3      	subs	r3, r2, r3
 8012ae2:	683a      	ldr	r2, [r7, #0]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d902      	bls.n	8012aee <I2S_WaitFlagStateUntilTimeout+0x36>
 8012ae8:	683b      	ldr	r3, [r7, #0]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d109      	bne.n	8012b02 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	2235      	movs	r2, #53	@ 0x35
 8012af2:	2101      	movs	r1, #1
 8012af4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	2234      	movs	r2, #52	@ 0x34
 8012afa:	2100      	movs	r1, #0
 8012afc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8012afe:	2303      	movs	r3, #3
 8012b00:	e00f      	b.n	8012b22 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	689b      	ldr	r3, [r3, #8]
 8012b08:	68ba      	ldr	r2, [r7, #8]
 8012b0a:	4013      	ands	r3, r2
 8012b0c:	68ba      	ldr	r2, [r7, #8]
 8012b0e:	1ad3      	subs	r3, r2, r3
 8012b10:	425a      	negs	r2, r3
 8012b12:	4153      	adcs	r3, r2
 8012b14:	b2db      	uxtb	r3, r3
 8012b16:	001a      	movs	r2, r3
 8012b18:	1dfb      	adds	r3, r7, #7
 8012b1a:	781b      	ldrb	r3, [r3, #0]
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d1d8      	bne.n	8012ad2 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8012b20:	2300      	movs	r3, #0
}
 8012b22:	0018      	movs	r0, r3
 8012b24:	46bd      	mov	sp, r7
 8012b26:	b006      	add	sp, #24
 8012b28:	bd80      	pop	{r7, pc}
	...

08012b2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8012b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b2e:	b08b      	sub	sp, #44	@ 0x2c
 8012b30:	af06      	add	r7, sp, #24
 8012b32:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d101      	bne.n	8012b3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8012b3a:	2301      	movs	r3, #1
 8012b3c:	e0f0      	b.n	8012d20 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	4a79      	ldr	r2, [pc, #484]	@ (8012d28 <HAL_PCD_Init+0x1fc>)
 8012b42:	5c9b      	ldrb	r3, [r3, r2]
 8012b44:	b2db      	uxtb	r3, r3
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d108      	bne.n	8012b5c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8012b4a:	687a      	ldr	r2, [r7, #4]
 8012b4c:	23aa      	movs	r3, #170	@ 0xaa
 8012b4e:	009b      	lsls	r3, r3, #2
 8012b50:	2100      	movs	r1, #0
 8012b52:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	0018      	movs	r0, r3
 8012b58:	f009 ff4a 	bl	801c9f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	4a72      	ldr	r2, [pc, #456]	@ (8012d28 <HAL_PCD_Init+0x1fc>)
 8012b60:	2103      	movs	r1, #3
 8012b62:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	0018      	movs	r0, r3
 8012b6a:	f005 fefd 	bl	8018968 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012b6e:	230f      	movs	r3, #15
 8012b70:	18fb      	adds	r3, r7, r3
 8012b72:	2200      	movs	r2, #0
 8012b74:	701a      	strb	r2, [r3, #0]
 8012b76:	e049      	b.n	8012c0c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8012b78:	200f      	movs	r0, #15
 8012b7a:	183b      	adds	r3, r7, r0
 8012b7c:	781b      	ldrb	r3, [r3, #0]
 8012b7e:	6879      	ldr	r1, [r7, #4]
 8012b80:	1c5a      	adds	r2, r3, #1
 8012b82:	0013      	movs	r3, r2
 8012b84:	009b      	lsls	r3, r3, #2
 8012b86:	189b      	adds	r3, r3, r2
 8012b88:	00db      	lsls	r3, r3, #3
 8012b8a:	18cb      	adds	r3, r1, r3
 8012b8c:	3301      	adds	r3, #1
 8012b8e:	2201      	movs	r2, #1
 8012b90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8012b92:	183b      	adds	r3, r7, r0
 8012b94:	781b      	ldrb	r3, [r3, #0]
 8012b96:	6879      	ldr	r1, [r7, #4]
 8012b98:	1c5a      	adds	r2, r3, #1
 8012b9a:	0013      	movs	r3, r2
 8012b9c:	009b      	lsls	r3, r3, #2
 8012b9e:	189b      	adds	r3, r3, r2
 8012ba0:	00db      	lsls	r3, r3, #3
 8012ba2:	183a      	adds	r2, r7, r0
 8012ba4:	7812      	ldrb	r2, [r2, #0]
 8012ba6:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8012ba8:	183b      	adds	r3, r7, r0
 8012baa:	781b      	ldrb	r3, [r3, #0]
 8012bac:	6879      	ldr	r1, [r7, #4]
 8012bae:	1c5a      	adds	r2, r3, #1
 8012bb0:	0013      	movs	r3, r2
 8012bb2:	009b      	lsls	r3, r3, #2
 8012bb4:	189b      	adds	r3, r3, r2
 8012bb6:	00db      	lsls	r3, r3, #3
 8012bb8:	18cb      	adds	r3, r1, r3
 8012bba:	3303      	adds	r3, #3
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8012bc0:	183b      	adds	r3, r7, r0
 8012bc2:	781a      	ldrb	r2, [r3, #0]
 8012bc4:	6879      	ldr	r1, [r7, #4]
 8012bc6:	0013      	movs	r3, r2
 8012bc8:	009b      	lsls	r3, r3, #2
 8012bca:	189b      	adds	r3, r3, r2
 8012bcc:	00db      	lsls	r3, r3, #3
 8012bce:	18cb      	adds	r3, r1, r3
 8012bd0:	3338      	adds	r3, #56	@ 0x38
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8012bd6:	183b      	adds	r3, r7, r0
 8012bd8:	781a      	ldrb	r2, [r3, #0]
 8012bda:	6879      	ldr	r1, [r7, #4]
 8012bdc:	0013      	movs	r3, r2
 8012bde:	009b      	lsls	r3, r3, #2
 8012be0:	189b      	adds	r3, r3, r2
 8012be2:	00db      	lsls	r3, r3, #3
 8012be4:	18cb      	adds	r3, r1, r3
 8012be6:	333c      	adds	r3, #60	@ 0x3c
 8012be8:	2200      	movs	r2, #0
 8012bea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8012bec:	183b      	adds	r3, r7, r0
 8012bee:	781a      	ldrb	r2, [r3, #0]
 8012bf0:	6879      	ldr	r1, [r7, #4]
 8012bf2:	0013      	movs	r3, r2
 8012bf4:	009b      	lsls	r3, r3, #2
 8012bf6:	189b      	adds	r3, r3, r2
 8012bf8:	00db      	lsls	r3, r3, #3
 8012bfa:	18cb      	adds	r3, r1, r3
 8012bfc:	3340      	adds	r3, #64	@ 0x40
 8012bfe:	2200      	movs	r2, #0
 8012c00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012c02:	183b      	adds	r3, r7, r0
 8012c04:	781a      	ldrb	r2, [r3, #0]
 8012c06:	183b      	adds	r3, r7, r0
 8012c08:	3201      	adds	r2, #1
 8012c0a:	701a      	strb	r2, [r3, #0]
 8012c0c:	210f      	movs	r1, #15
 8012c0e:	187b      	adds	r3, r7, r1
 8012c10:	781a      	ldrb	r2, [r3, #0]
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	685b      	ldr	r3, [r3, #4]
 8012c16:	429a      	cmp	r2, r3
 8012c18:	d3ae      	bcc.n	8012b78 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012c1a:	187b      	adds	r3, r7, r1
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	701a      	strb	r2, [r3, #0]
 8012c20:	e056      	b.n	8012cd0 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8012c22:	240f      	movs	r4, #15
 8012c24:	193b      	adds	r3, r7, r4
 8012c26:	781a      	ldrb	r2, [r3, #0]
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	236a      	movs	r3, #106	@ 0x6a
 8012c2c:	33ff      	adds	r3, #255	@ 0xff
 8012c2e:	0019      	movs	r1, r3
 8012c30:	0013      	movs	r3, r2
 8012c32:	009b      	lsls	r3, r3, #2
 8012c34:	189b      	adds	r3, r3, r2
 8012c36:	00db      	lsls	r3, r3, #3
 8012c38:	18c3      	adds	r3, r0, r3
 8012c3a:	185b      	adds	r3, r3, r1
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8012c40:	193b      	adds	r3, r7, r4
 8012c42:	781a      	ldrb	r2, [r3, #0]
 8012c44:	6878      	ldr	r0, [r7, #4]
 8012c46:	23b4      	movs	r3, #180	@ 0xb4
 8012c48:	0059      	lsls	r1, r3, #1
 8012c4a:	0013      	movs	r3, r2
 8012c4c:	009b      	lsls	r3, r3, #2
 8012c4e:	189b      	adds	r3, r3, r2
 8012c50:	00db      	lsls	r3, r3, #3
 8012c52:	18c3      	adds	r3, r0, r3
 8012c54:	185b      	adds	r3, r3, r1
 8012c56:	193a      	adds	r2, r7, r4
 8012c58:	7812      	ldrb	r2, [r2, #0]
 8012c5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8012c5c:	193b      	adds	r3, r7, r4
 8012c5e:	781a      	ldrb	r2, [r3, #0]
 8012c60:	6878      	ldr	r0, [r7, #4]
 8012c62:	236c      	movs	r3, #108	@ 0x6c
 8012c64:	33ff      	adds	r3, #255	@ 0xff
 8012c66:	0019      	movs	r1, r3
 8012c68:	0013      	movs	r3, r2
 8012c6a:	009b      	lsls	r3, r3, #2
 8012c6c:	189b      	adds	r3, r3, r2
 8012c6e:	00db      	lsls	r3, r3, #3
 8012c70:	18c3      	adds	r3, r0, r3
 8012c72:	185b      	adds	r3, r3, r1
 8012c74:	2200      	movs	r2, #0
 8012c76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8012c78:	193b      	adds	r3, r7, r4
 8012c7a:	781a      	ldrb	r2, [r3, #0]
 8012c7c:	6878      	ldr	r0, [r7, #4]
 8012c7e:	23bc      	movs	r3, #188	@ 0xbc
 8012c80:	0059      	lsls	r1, r3, #1
 8012c82:	0013      	movs	r3, r2
 8012c84:	009b      	lsls	r3, r3, #2
 8012c86:	189b      	adds	r3, r3, r2
 8012c88:	00db      	lsls	r3, r3, #3
 8012c8a:	18c3      	adds	r3, r0, r3
 8012c8c:	185b      	adds	r3, r3, r1
 8012c8e:	2200      	movs	r2, #0
 8012c90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8012c92:	193b      	adds	r3, r7, r4
 8012c94:	781a      	ldrb	r2, [r3, #0]
 8012c96:	6878      	ldr	r0, [r7, #4]
 8012c98:	23be      	movs	r3, #190	@ 0xbe
 8012c9a:	0059      	lsls	r1, r3, #1
 8012c9c:	0013      	movs	r3, r2
 8012c9e:	009b      	lsls	r3, r3, #2
 8012ca0:	189b      	adds	r3, r3, r2
 8012ca2:	00db      	lsls	r3, r3, #3
 8012ca4:	18c3      	adds	r3, r0, r3
 8012ca6:	185b      	adds	r3, r3, r1
 8012ca8:	2200      	movs	r2, #0
 8012caa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8012cac:	193b      	adds	r3, r7, r4
 8012cae:	781a      	ldrb	r2, [r3, #0]
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	23c0      	movs	r3, #192	@ 0xc0
 8012cb4:	0059      	lsls	r1, r3, #1
 8012cb6:	0013      	movs	r3, r2
 8012cb8:	009b      	lsls	r3, r3, #2
 8012cba:	189b      	adds	r3, r3, r2
 8012cbc:	00db      	lsls	r3, r3, #3
 8012cbe:	18c3      	adds	r3, r0, r3
 8012cc0:	185b      	adds	r3, r3, r1
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012cc6:	193b      	adds	r3, r7, r4
 8012cc8:	781a      	ldrb	r2, [r3, #0]
 8012cca:	193b      	adds	r3, r7, r4
 8012ccc:	3201      	adds	r2, #1
 8012cce:	701a      	strb	r2, [r3, #0]
 8012cd0:	230f      	movs	r3, #15
 8012cd2:	18fb      	adds	r3, r7, r3
 8012cd4:	781a      	ldrb	r2, [r3, #0]
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	685b      	ldr	r3, [r3, #4]
 8012cda:	429a      	cmp	r2, r3
 8012cdc:	d3a1      	bcc.n	8012c22 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	6818      	ldr	r0, [r3, #0]
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	466a      	mov	r2, sp
 8012ce6:	0011      	movs	r1, r2
 8012ce8:	001a      	movs	r2, r3
 8012cea:	3210      	adds	r2, #16
 8012cec:	ca70      	ldmia	r2!, {r4, r5, r6}
 8012cee:	c170      	stmia	r1!, {r4, r5, r6}
 8012cf0:	ca30      	ldmia	r2!, {r4, r5}
 8012cf2:	c130      	stmia	r1!, {r4, r5}
 8012cf4:	6859      	ldr	r1, [r3, #4]
 8012cf6:	689a      	ldr	r2, [r3, #8]
 8012cf8:	68db      	ldr	r3, [r3, #12]
 8012cfa:	f005 fe4f 	bl	801899c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	2224      	movs	r2, #36	@ 0x24
 8012d02:	2100      	movs	r1, #0
 8012d04:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	4a07      	ldr	r2, [pc, #28]	@ (8012d28 <HAL_PCD_Init+0x1fc>)
 8012d0a:	2101      	movs	r1, #1
 8012d0c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	69db      	ldr	r3, [r3, #28]
 8012d12:	2b01      	cmp	r3, #1
 8012d14:	d103      	bne.n	8012d1e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	0018      	movs	r0, r3
 8012d1a:	f001 fd23 	bl	8014764 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8012d1e:	2300      	movs	r3, #0
}
 8012d20:	0018      	movs	r0, r3
 8012d22:	46bd      	mov	sp, r7
 8012d24:	b005      	add	sp, #20
 8012d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d28:	000002a9 	.word	0x000002a9

08012d2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b082      	sub	sp, #8
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8012d34:	687a      	ldr	r2, [r7, #4]
 8012d36:	23aa      	movs	r3, #170	@ 0xaa
 8012d38:	009b      	lsls	r3, r3, #2
 8012d3a:	5cd3      	ldrb	r3, [r2, r3]
 8012d3c:	2b01      	cmp	r3, #1
 8012d3e:	d101      	bne.n	8012d44 <HAL_PCD_Start+0x18>
 8012d40:	2302      	movs	r3, #2
 8012d42:	e014      	b.n	8012d6e <HAL_PCD_Start+0x42>
 8012d44:	687a      	ldr	r2, [r7, #4]
 8012d46:	23aa      	movs	r3, #170	@ 0xaa
 8012d48:	009b      	lsls	r3, r3, #2
 8012d4a:	2101      	movs	r1, #1
 8012d4c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	0018      	movs	r0, r3
 8012d54:	f005 fdf2 	bl	801893c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	0018      	movs	r0, r3
 8012d5e:	f007 fdf5 	bl	801a94c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8012d62:	687a      	ldr	r2, [r7, #4]
 8012d64:	23aa      	movs	r3, #170	@ 0xaa
 8012d66:	009b      	lsls	r3, r3, #2
 8012d68:	2100      	movs	r1, #0
 8012d6a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012d6c:	2300      	movs	r3, #0
}
 8012d6e:	0018      	movs	r0, r3
 8012d70:	46bd      	mov	sp, r7
 8012d72:	b002      	add	sp, #8
 8012d74:	bd80      	pop	{r7, pc}
	...

08012d78 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b084      	sub	sp, #16
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	0018      	movs	r0, r3
 8012d86:	f007 fdf7 	bl	801a978 <USB_ReadInterrupts>
 8012d8a:	0003      	movs	r3, r0
 8012d8c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8012d8e:	68fa      	ldr	r2, [r7, #12]
 8012d90:	2380      	movs	r3, #128	@ 0x80
 8012d92:	021b      	lsls	r3, r3, #8
 8012d94:	4013      	ands	r3, r2
 8012d96:	d004      	beq.n	8012da2 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	0018      	movs	r0, r3
 8012d9c:	f000 fb62 	bl	8013464 <PCD_EP_ISR_Handler>

    return;
 8012da0:	e11d      	b.n	8012fde <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8012da2:	68fa      	ldr	r2, [r7, #12]
 8012da4:	2380      	movs	r3, #128	@ 0x80
 8012da6:	00db      	lsls	r3, r3, #3
 8012da8:	4013      	ands	r3, r2
 8012daa:	d015      	beq.n	8012dd8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	2244      	movs	r2, #68	@ 0x44
 8012db2:	5a9b      	ldrh	r3, [r3, r2]
 8012db4:	b29a      	uxth	r2, r3
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	498a      	ldr	r1, [pc, #552]	@ (8012fe4 <HAL_PCD_IRQHandler+0x26c>)
 8012dbc:	400a      	ands	r2, r1
 8012dbe:	b291      	uxth	r1, r2
 8012dc0:	2244      	movs	r2, #68	@ 0x44
 8012dc2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	0018      	movs	r0, r3
 8012dc8:	f009 fe95 	bl	801caf6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	2100      	movs	r1, #0
 8012dd0:	0018      	movs	r0, r3
 8012dd2:	f000 f915 	bl	8013000 <HAL_PCD_SetAddress>

    return;
 8012dd6:	e102      	b.n	8012fde <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8012dd8:	68fa      	ldr	r2, [r7, #12]
 8012dda:	2380      	movs	r3, #128	@ 0x80
 8012ddc:	01db      	lsls	r3, r3, #7
 8012dde:	4013      	ands	r3, r2
 8012de0:	d00c      	beq.n	8012dfc <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	2244      	movs	r2, #68	@ 0x44
 8012de8:	5a9b      	ldrh	r3, [r3, r2]
 8012dea:	b29a      	uxth	r2, r3
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	497d      	ldr	r1, [pc, #500]	@ (8012fe8 <HAL_PCD_IRQHandler+0x270>)
 8012df2:	400a      	ands	r2, r1
 8012df4:	b291      	uxth	r1, r2
 8012df6:	2244      	movs	r2, #68	@ 0x44
 8012df8:	5299      	strh	r1, [r3, r2]

    return;
 8012dfa:	e0f0      	b.n	8012fde <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8012dfc:	68fa      	ldr	r2, [r7, #12]
 8012dfe:	2380      	movs	r3, #128	@ 0x80
 8012e00:	019b      	lsls	r3, r3, #6
 8012e02:	4013      	ands	r3, r2
 8012e04:	d00c      	beq.n	8012e20 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	2244      	movs	r2, #68	@ 0x44
 8012e0c:	5a9b      	ldrh	r3, [r3, r2]
 8012e0e:	b29a      	uxth	r2, r3
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	4975      	ldr	r1, [pc, #468]	@ (8012fec <HAL_PCD_IRQHandler+0x274>)
 8012e16:	400a      	ands	r2, r1
 8012e18:	b291      	uxth	r1, r2
 8012e1a:	2244      	movs	r2, #68	@ 0x44
 8012e1c:	5299      	strh	r1, [r3, r2]

    return;
 8012e1e:	e0de      	b.n	8012fde <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8012e20:	68fa      	ldr	r2, [r7, #12]
 8012e22:	2380      	movs	r3, #128	@ 0x80
 8012e24:	015b      	lsls	r3, r3, #5
 8012e26:	4013      	ands	r3, r2
 8012e28:	d038      	beq.n	8012e9c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	2240      	movs	r2, #64	@ 0x40
 8012e30:	5a9b      	ldrh	r3, [r3, r2]
 8012e32:	b29a      	uxth	r2, r3
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	2104      	movs	r1, #4
 8012e3a:	438a      	bics	r2, r1
 8012e3c:	b291      	uxth	r1, r2
 8012e3e:	2240      	movs	r2, #64	@ 0x40
 8012e40:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	2240      	movs	r2, #64	@ 0x40
 8012e48:	5a9b      	ldrh	r3, [r3, r2]
 8012e4a:	b29a      	uxth	r2, r3
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	2108      	movs	r1, #8
 8012e52:	438a      	bics	r2, r1
 8012e54:	b291      	uxth	r1, r2
 8012e56:	2240      	movs	r2, #64	@ 0x40
 8012e58:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8012e5a:	687a      	ldr	r2, [r7, #4]
 8012e5c:	23b8      	movs	r3, #184	@ 0xb8
 8012e5e:	009b      	lsls	r3, r3, #2
 8012e60:	5cd3      	ldrb	r3, [r2, r3]
 8012e62:	2b01      	cmp	r3, #1
 8012e64:	d109      	bne.n	8012e7a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8012e66:	687a      	ldr	r2, [r7, #4]
 8012e68:	23b8      	movs	r3, #184	@ 0xb8
 8012e6a:	009b      	lsls	r3, r3, #2
 8012e6c:	2100      	movs	r1, #0
 8012e6e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2100      	movs	r1, #0
 8012e74:	0018      	movs	r0, r3
 8012e76:	f001 fc9f 	bl	80147b8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	0018      	movs	r0, r3
 8012e7e:	f009 fe7b 	bl	801cb78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	2244      	movs	r2, #68	@ 0x44
 8012e88:	5a9b      	ldrh	r3, [r3, r2]
 8012e8a:	b29a      	uxth	r2, r3
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	4957      	ldr	r1, [pc, #348]	@ (8012ff0 <HAL_PCD_IRQHandler+0x278>)
 8012e92:	400a      	ands	r2, r1
 8012e94:	b291      	uxth	r1, r2
 8012e96:	2244      	movs	r2, #68	@ 0x44
 8012e98:	5299      	strh	r1, [r3, r2]

    return;
 8012e9a:	e0a0      	b.n	8012fde <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8012e9c:	68fa      	ldr	r2, [r7, #12]
 8012e9e:	2380      	movs	r3, #128	@ 0x80
 8012ea0:	011b      	lsls	r3, r3, #4
 8012ea2:	4013      	ands	r3, r2
 8012ea4:	d028      	beq.n	8012ef8 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	2240      	movs	r2, #64	@ 0x40
 8012eac:	5a9b      	ldrh	r3, [r3, r2]
 8012eae:	b29a      	uxth	r2, r3
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	2108      	movs	r1, #8
 8012eb6:	430a      	orrs	r2, r1
 8012eb8:	b291      	uxth	r1, r2
 8012eba:	2240      	movs	r2, #64	@ 0x40
 8012ebc:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	2244      	movs	r2, #68	@ 0x44
 8012ec4:	5a9b      	ldrh	r3, [r3, r2]
 8012ec6:	b29a      	uxth	r2, r3
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	4949      	ldr	r1, [pc, #292]	@ (8012ff4 <HAL_PCD_IRQHandler+0x27c>)
 8012ece:	400a      	ands	r2, r1
 8012ed0:	b291      	uxth	r1, r2
 8012ed2:	2244      	movs	r2, #68	@ 0x44
 8012ed4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	2240      	movs	r2, #64	@ 0x40
 8012edc:	5a9b      	ldrh	r3, [r3, r2]
 8012ede:	b29a      	uxth	r2, r3
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	2104      	movs	r1, #4
 8012ee6:	430a      	orrs	r2, r1
 8012ee8:	b291      	uxth	r1, r2
 8012eea:	2240      	movs	r2, #64	@ 0x40
 8012eec:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	0018      	movs	r0, r3
 8012ef2:	f009 fe25 	bl	801cb40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8012ef6:	e072      	b.n	8012fde <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	2280      	movs	r2, #128	@ 0x80
 8012efc:	4013      	ands	r3, r2
 8012efe:	d046      	beq.n	8012f8e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	2244      	movs	r2, #68	@ 0x44
 8012f06:	5a9b      	ldrh	r3, [r3, r2]
 8012f08:	b29a      	uxth	r2, r3
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	2180      	movs	r1, #128	@ 0x80
 8012f10:	438a      	bics	r2, r1
 8012f12:	b291      	uxth	r1, r2
 8012f14:	2244      	movs	r2, #68	@ 0x44
 8012f16:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8012f18:	687a      	ldr	r2, [r7, #4]
 8012f1a:	23b8      	movs	r3, #184	@ 0xb8
 8012f1c:	009b      	lsls	r3, r3, #2
 8012f1e:	5cd3      	ldrb	r3, [r2, r3]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d12f      	bne.n	8012f84 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	2240      	movs	r2, #64	@ 0x40
 8012f2a:	5a9b      	ldrh	r3, [r3, r2]
 8012f2c:	b29a      	uxth	r2, r3
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	2104      	movs	r1, #4
 8012f34:	430a      	orrs	r2, r1
 8012f36:	b291      	uxth	r1, r2
 8012f38:	2240      	movs	r2, #64	@ 0x40
 8012f3a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	2240      	movs	r2, #64	@ 0x40
 8012f42:	5a9b      	ldrh	r3, [r3, r2]
 8012f44:	b29a      	uxth	r2, r3
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	2108      	movs	r1, #8
 8012f4c:	430a      	orrs	r2, r1
 8012f4e:	b291      	uxth	r1, r2
 8012f50:	2240      	movs	r2, #64	@ 0x40
 8012f52:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8012f54:	687a      	ldr	r2, [r7, #4]
 8012f56:	23b8      	movs	r3, #184	@ 0xb8
 8012f58:	009b      	lsls	r3, r3, #2
 8012f5a:	2101      	movs	r1, #1
 8012f5c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	2254      	movs	r2, #84	@ 0x54
 8012f64:	5a9b      	ldrh	r3, [r3, r2]
 8012f66:	b29b      	uxth	r3, r3
 8012f68:	089b      	lsrs	r3, r3, #2
 8012f6a:	223c      	movs	r2, #60	@ 0x3c
 8012f6c:	4013      	ands	r3, r2
 8012f6e:	0019      	movs	r1, r3
 8012f70:	687a      	ldr	r2, [r7, #4]
 8012f72:	23b9      	movs	r3, #185	@ 0xb9
 8012f74:	009b      	lsls	r3, r3, #2
 8012f76:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	2101      	movs	r1, #1
 8012f7c:	0018      	movs	r0, r3
 8012f7e:	f001 fc1b 	bl	80147b8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8012f82:	e02c      	b.n	8012fde <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	0018      	movs	r0, r3
 8012f88:	f009 fdda 	bl	801cb40 <HAL_PCD_SuspendCallback>
    return;
 8012f8c:	e027      	b.n	8012fde <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8012f8e:	68fa      	ldr	r2, [r7, #12]
 8012f90:	2380      	movs	r3, #128	@ 0x80
 8012f92:	009b      	lsls	r3, r3, #2
 8012f94:	4013      	ands	r3, r2
 8012f96:	d010      	beq.n	8012fba <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	2244      	movs	r2, #68	@ 0x44
 8012f9e:	5a9b      	ldrh	r3, [r3, r2]
 8012fa0:	b29a      	uxth	r2, r3
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	4914      	ldr	r1, [pc, #80]	@ (8012ff8 <HAL_PCD_IRQHandler+0x280>)
 8012fa8:	400a      	ands	r2, r1
 8012faa:	b291      	uxth	r1, r2
 8012fac:	2244      	movs	r2, #68	@ 0x44
 8012fae:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	0018      	movs	r0, r3
 8012fb4:	f009 fd90 	bl	801cad8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8012fb8:	e011      	b.n	8012fde <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8012fba:	68fa      	ldr	r2, [r7, #12]
 8012fbc:	2380      	movs	r3, #128	@ 0x80
 8012fbe:	005b      	lsls	r3, r3, #1
 8012fc0:	4013      	ands	r3, r2
 8012fc2:	d00c      	beq.n	8012fde <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	2244      	movs	r2, #68	@ 0x44
 8012fca:	5a9b      	ldrh	r3, [r3, r2]
 8012fcc:	b29a      	uxth	r2, r3
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	490a      	ldr	r1, [pc, #40]	@ (8012ffc <HAL_PCD_IRQHandler+0x284>)
 8012fd4:	400a      	ands	r2, r1
 8012fd6:	b291      	uxth	r1, r2
 8012fd8:	2244      	movs	r2, #68	@ 0x44
 8012fda:	5299      	strh	r1, [r3, r2]

    return;
 8012fdc:	46c0      	nop			@ (mov r8, r8)
  }
}
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	b004      	add	sp, #16
 8012fe2:	bd80      	pop	{r7, pc}
 8012fe4:	fffffbff 	.word	0xfffffbff
 8012fe8:	ffffbfff 	.word	0xffffbfff
 8012fec:	ffffdfff 	.word	0xffffdfff
 8012ff0:	ffffefff 	.word	0xffffefff
 8012ff4:	fffff7ff 	.word	0xfffff7ff
 8012ff8:	fffffdff 	.word	0xfffffdff
 8012ffc:	fffffeff 	.word	0xfffffeff

08013000 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b082      	sub	sp, #8
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
 8013008:	000a      	movs	r2, r1
 801300a:	1cfb      	adds	r3, r7, #3
 801300c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 801300e:	687a      	ldr	r2, [r7, #4]
 8013010:	23aa      	movs	r3, #170	@ 0xaa
 8013012:	009b      	lsls	r3, r3, #2
 8013014:	5cd3      	ldrb	r3, [r2, r3]
 8013016:	2b01      	cmp	r3, #1
 8013018:	d101      	bne.n	801301e <HAL_PCD_SetAddress+0x1e>
 801301a:	2302      	movs	r3, #2
 801301c:	e017      	b.n	801304e <HAL_PCD_SetAddress+0x4e>
 801301e:	687a      	ldr	r2, [r7, #4]
 8013020:	23aa      	movs	r3, #170	@ 0xaa
 8013022:	009b      	lsls	r3, r3, #2
 8013024:	2101      	movs	r1, #1
 8013026:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	1cfa      	adds	r2, r7, #3
 801302c:	2124      	movs	r1, #36	@ 0x24
 801302e:	7812      	ldrb	r2, [r2, #0]
 8013030:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	681a      	ldr	r2, [r3, #0]
 8013036:	1cfb      	adds	r3, r7, #3
 8013038:	781b      	ldrb	r3, [r3, #0]
 801303a:	0019      	movs	r1, r3
 801303c:	0010      	movs	r0, r2
 801303e:	f007 fc71 	bl	801a924 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8013042:	687a      	ldr	r2, [r7, #4]
 8013044:	23aa      	movs	r3, #170	@ 0xaa
 8013046:	009b      	lsls	r3, r3, #2
 8013048:	2100      	movs	r1, #0
 801304a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 801304c:	2300      	movs	r3, #0
}
 801304e:	0018      	movs	r0, r3
 8013050:	46bd      	mov	sp, r7
 8013052:	b002      	add	sp, #8
 8013054:	bd80      	pop	{r7, pc}

08013056 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8013056:	b590      	push	{r4, r7, lr}
 8013058:	b085      	sub	sp, #20
 801305a:	af00      	add	r7, sp, #0
 801305c:	6078      	str	r0, [r7, #4]
 801305e:	000c      	movs	r4, r1
 8013060:	0010      	movs	r0, r2
 8013062:	0019      	movs	r1, r3
 8013064:	1cfb      	adds	r3, r7, #3
 8013066:	1c22      	adds	r2, r4, #0
 8013068:	701a      	strb	r2, [r3, #0]
 801306a:	003b      	movs	r3, r7
 801306c:	1c02      	adds	r2, r0, #0
 801306e:	801a      	strh	r2, [r3, #0]
 8013070:	1cbb      	adds	r3, r7, #2
 8013072:	1c0a      	adds	r2, r1, #0
 8013074:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8013076:	230b      	movs	r3, #11
 8013078:	18fb      	adds	r3, r7, r3
 801307a:	2200      	movs	r2, #0
 801307c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801307e:	1cfb      	adds	r3, r7, #3
 8013080:	781b      	ldrb	r3, [r3, #0]
 8013082:	b25b      	sxtb	r3, r3
 8013084:	2b00      	cmp	r3, #0
 8013086:	da0f      	bge.n	80130a8 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013088:	1cfb      	adds	r3, r7, #3
 801308a:	781b      	ldrb	r3, [r3, #0]
 801308c:	2207      	movs	r2, #7
 801308e:	4013      	ands	r3, r2
 8013090:	1c5a      	adds	r2, r3, #1
 8013092:	0013      	movs	r3, r2
 8013094:	009b      	lsls	r3, r3, #2
 8013096:	189b      	adds	r3, r3, r2
 8013098:	00db      	lsls	r3, r3, #3
 801309a:	687a      	ldr	r2, [r7, #4]
 801309c:	18d3      	adds	r3, r2, r3
 801309e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	2201      	movs	r2, #1
 80130a4:	705a      	strb	r2, [r3, #1]
 80130a6:	e00f      	b.n	80130c8 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80130a8:	1cfb      	adds	r3, r7, #3
 80130aa:	781b      	ldrb	r3, [r3, #0]
 80130ac:	2207      	movs	r2, #7
 80130ae:	401a      	ands	r2, r3
 80130b0:	0013      	movs	r3, r2
 80130b2:	009b      	lsls	r3, r3, #2
 80130b4:	189b      	adds	r3, r3, r2
 80130b6:	00db      	lsls	r3, r3, #3
 80130b8:	3369      	adds	r3, #105	@ 0x69
 80130ba:	33ff      	adds	r3, #255	@ 0xff
 80130bc:	687a      	ldr	r2, [r7, #4]
 80130be:	18d3      	adds	r3, r2, r3
 80130c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	2200      	movs	r2, #0
 80130c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80130c8:	1cfb      	adds	r3, r7, #3
 80130ca:	781b      	ldrb	r3, [r3, #0]
 80130cc:	2207      	movs	r2, #7
 80130ce:	4013      	ands	r3, r2
 80130d0:	b2da      	uxtb	r2, r3
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80130d6:	003b      	movs	r3, r7
 80130d8:	881a      	ldrh	r2, [r3, #0]
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	1cba      	adds	r2, r7, #2
 80130e2:	7812      	ldrb	r2, [r2, #0]
 80130e4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80130e6:	1cbb      	adds	r3, r7, #2
 80130e8:	781b      	ldrb	r3, [r3, #0]
 80130ea:	2b02      	cmp	r3, #2
 80130ec:	d102      	bne.n	80130f4 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	2200      	movs	r2, #0
 80130f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80130f4:	687a      	ldr	r2, [r7, #4]
 80130f6:	23aa      	movs	r3, #170	@ 0xaa
 80130f8:	009b      	lsls	r3, r3, #2
 80130fa:	5cd3      	ldrb	r3, [r2, r3]
 80130fc:	2b01      	cmp	r3, #1
 80130fe:	d101      	bne.n	8013104 <HAL_PCD_EP_Open+0xae>
 8013100:	2302      	movs	r3, #2
 8013102:	e013      	b.n	801312c <HAL_PCD_EP_Open+0xd6>
 8013104:	687a      	ldr	r2, [r7, #4]
 8013106:	23aa      	movs	r3, #170	@ 0xaa
 8013108:	009b      	lsls	r3, r3, #2
 801310a:	2101      	movs	r1, #1
 801310c:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	68fa      	ldr	r2, [r7, #12]
 8013114:	0011      	movs	r1, r2
 8013116:	0018      	movs	r0, r3
 8013118:	f005 fc68 	bl	80189ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801311c:	687a      	ldr	r2, [r7, #4]
 801311e:	23aa      	movs	r3, #170	@ 0xaa
 8013120:	009b      	lsls	r3, r3, #2
 8013122:	2100      	movs	r1, #0
 8013124:	54d1      	strb	r1, [r2, r3]

  return ret;
 8013126:	230b      	movs	r3, #11
 8013128:	18fb      	adds	r3, r7, r3
 801312a:	781b      	ldrb	r3, [r3, #0]
}
 801312c:	0018      	movs	r0, r3
 801312e:	46bd      	mov	sp, r7
 8013130:	b005      	add	sp, #20
 8013132:	bd90      	pop	{r4, r7, pc}

08013134 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b084      	sub	sp, #16
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
 801313c:	000a      	movs	r2, r1
 801313e:	1cfb      	adds	r3, r7, #3
 8013140:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013142:	1cfb      	adds	r3, r7, #3
 8013144:	781b      	ldrb	r3, [r3, #0]
 8013146:	b25b      	sxtb	r3, r3
 8013148:	2b00      	cmp	r3, #0
 801314a:	da0f      	bge.n	801316c <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801314c:	1cfb      	adds	r3, r7, #3
 801314e:	781b      	ldrb	r3, [r3, #0]
 8013150:	2207      	movs	r2, #7
 8013152:	4013      	ands	r3, r2
 8013154:	1c5a      	adds	r2, r3, #1
 8013156:	0013      	movs	r3, r2
 8013158:	009b      	lsls	r3, r3, #2
 801315a:	189b      	adds	r3, r3, r2
 801315c:	00db      	lsls	r3, r3, #3
 801315e:	687a      	ldr	r2, [r7, #4]
 8013160:	18d3      	adds	r3, r2, r3
 8013162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	2201      	movs	r2, #1
 8013168:	705a      	strb	r2, [r3, #1]
 801316a:	e00f      	b.n	801318c <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801316c:	1cfb      	adds	r3, r7, #3
 801316e:	781b      	ldrb	r3, [r3, #0]
 8013170:	2207      	movs	r2, #7
 8013172:	401a      	ands	r2, r3
 8013174:	0013      	movs	r3, r2
 8013176:	009b      	lsls	r3, r3, #2
 8013178:	189b      	adds	r3, r3, r2
 801317a:	00db      	lsls	r3, r3, #3
 801317c:	3369      	adds	r3, #105	@ 0x69
 801317e:	33ff      	adds	r3, #255	@ 0xff
 8013180:	687a      	ldr	r2, [r7, #4]
 8013182:	18d3      	adds	r3, r2, r3
 8013184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	2200      	movs	r2, #0
 801318a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 801318c:	1cfb      	adds	r3, r7, #3
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	2207      	movs	r2, #7
 8013192:	4013      	ands	r3, r2
 8013194:	b2da      	uxtb	r2, r3
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801319a:	687a      	ldr	r2, [r7, #4]
 801319c:	23aa      	movs	r3, #170	@ 0xaa
 801319e:	009b      	lsls	r3, r3, #2
 80131a0:	5cd3      	ldrb	r3, [r2, r3]
 80131a2:	2b01      	cmp	r3, #1
 80131a4:	d101      	bne.n	80131aa <HAL_PCD_EP_Close+0x76>
 80131a6:	2302      	movs	r3, #2
 80131a8:	e011      	b.n	80131ce <HAL_PCD_EP_Close+0x9a>
 80131aa:	687a      	ldr	r2, [r7, #4]
 80131ac:	23aa      	movs	r3, #170	@ 0xaa
 80131ae:	009b      	lsls	r3, r3, #2
 80131b0:	2101      	movs	r1, #1
 80131b2:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	68fa      	ldr	r2, [r7, #12]
 80131ba:	0011      	movs	r1, r2
 80131bc:	0018      	movs	r0, r3
 80131be:	f005 ffb7 	bl	8019130 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80131c2:	687a      	ldr	r2, [r7, #4]
 80131c4:	23aa      	movs	r3, #170	@ 0xaa
 80131c6:	009b      	lsls	r3, r3, #2
 80131c8:	2100      	movs	r1, #0
 80131ca:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80131cc:	2300      	movs	r3, #0
}
 80131ce:	0018      	movs	r0, r3
 80131d0:	46bd      	mov	sp, r7
 80131d2:	b004      	add	sp, #16
 80131d4:	bd80      	pop	{r7, pc}

080131d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80131d6:	b580      	push	{r7, lr}
 80131d8:	b086      	sub	sp, #24
 80131da:	af00      	add	r7, sp, #0
 80131dc:	60f8      	str	r0, [r7, #12]
 80131de:	607a      	str	r2, [r7, #4]
 80131e0:	603b      	str	r3, [r7, #0]
 80131e2:	200b      	movs	r0, #11
 80131e4:	183b      	adds	r3, r7, r0
 80131e6:	1c0a      	adds	r2, r1, #0
 80131e8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80131ea:	0001      	movs	r1, r0
 80131ec:	187b      	adds	r3, r7, r1
 80131ee:	781b      	ldrb	r3, [r3, #0]
 80131f0:	2207      	movs	r2, #7
 80131f2:	401a      	ands	r2, r3
 80131f4:	0013      	movs	r3, r2
 80131f6:	009b      	lsls	r3, r3, #2
 80131f8:	189b      	adds	r3, r3, r2
 80131fa:	00db      	lsls	r3, r3, #3
 80131fc:	3369      	adds	r3, #105	@ 0x69
 80131fe:	33ff      	adds	r3, #255	@ 0xff
 8013200:	68fa      	ldr	r2, [r7, #12]
 8013202:	18d3      	adds	r3, r2, r3
 8013204:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	687a      	ldr	r2, [r7, #4]
 801320a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 801320c:	697b      	ldr	r3, [r7, #20]
 801320e:	683a      	ldr	r2, [r7, #0]
 8013210:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8013212:	697b      	ldr	r3, [r7, #20]
 8013214:	2200      	movs	r2, #0
 8013216:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8013218:	697b      	ldr	r3, [r7, #20]
 801321a:	2200      	movs	r2, #0
 801321c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801321e:	187b      	adds	r3, r7, r1
 8013220:	781b      	ldrb	r3, [r3, #0]
 8013222:	2207      	movs	r2, #7
 8013224:	4013      	ands	r3, r2
 8013226:	b2da      	uxtb	r2, r3
 8013228:	697b      	ldr	r3, [r7, #20]
 801322a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	697a      	ldr	r2, [r7, #20]
 8013232:	0011      	movs	r1, r2
 8013234:	0018      	movs	r0, r3
 8013236:	f006 f93b 	bl	80194b0 <USB_EPStartXfer>

  return HAL_OK;
 801323a:	2300      	movs	r3, #0
}
 801323c:	0018      	movs	r0, r3
 801323e:	46bd      	mov	sp, r7
 8013240:	b006      	add	sp, #24
 8013242:	bd80      	pop	{r7, pc}

08013244 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b082      	sub	sp, #8
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
 801324c:	000a      	movs	r2, r1
 801324e:	1cfb      	adds	r3, r7, #3
 8013250:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8013252:	1cfb      	adds	r3, r7, #3
 8013254:	781b      	ldrb	r3, [r3, #0]
 8013256:	2207      	movs	r2, #7
 8013258:	401a      	ands	r2, r3
 801325a:	6878      	ldr	r0, [r7, #4]
 801325c:	23c2      	movs	r3, #194	@ 0xc2
 801325e:	0059      	lsls	r1, r3, #1
 8013260:	0013      	movs	r3, r2
 8013262:	009b      	lsls	r3, r3, #2
 8013264:	189b      	adds	r3, r3, r2
 8013266:	00db      	lsls	r3, r3, #3
 8013268:	18c3      	adds	r3, r0, r3
 801326a:	185b      	adds	r3, r3, r1
 801326c:	681b      	ldr	r3, [r3, #0]
}
 801326e:	0018      	movs	r0, r3
 8013270:	46bd      	mov	sp, r7
 8013272:	b002      	add	sp, #8
 8013274:	bd80      	pop	{r7, pc}

08013276 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8013276:	b580      	push	{r7, lr}
 8013278:	b086      	sub	sp, #24
 801327a:	af00      	add	r7, sp, #0
 801327c:	60f8      	str	r0, [r7, #12]
 801327e:	607a      	str	r2, [r7, #4]
 8013280:	603b      	str	r3, [r7, #0]
 8013282:	200b      	movs	r0, #11
 8013284:	183b      	adds	r3, r7, r0
 8013286:	1c0a      	adds	r2, r1, #0
 8013288:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801328a:	183b      	adds	r3, r7, r0
 801328c:	781b      	ldrb	r3, [r3, #0]
 801328e:	2207      	movs	r2, #7
 8013290:	4013      	ands	r3, r2
 8013292:	1c5a      	adds	r2, r3, #1
 8013294:	0013      	movs	r3, r2
 8013296:	009b      	lsls	r3, r3, #2
 8013298:	189b      	adds	r3, r3, r2
 801329a:	00db      	lsls	r3, r3, #3
 801329c:	68fa      	ldr	r2, [r7, #12]
 801329e:	18d3      	adds	r3, r2, r3
 80132a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80132a2:	697b      	ldr	r3, [r7, #20]
 80132a4:	687a      	ldr	r2, [r7, #4]
 80132a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80132a8:	697b      	ldr	r3, [r7, #20]
 80132aa:	683a      	ldr	r2, [r7, #0]
 80132ac:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	2224      	movs	r2, #36	@ 0x24
 80132b2:	2101      	movs	r1, #1
 80132b4:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80132b6:	697b      	ldr	r3, [r7, #20]
 80132b8:	683a      	ldr	r2, [r7, #0]
 80132ba:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80132bc:	697b      	ldr	r3, [r7, #20]
 80132be:	2200      	movs	r2, #0
 80132c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80132c2:	697b      	ldr	r3, [r7, #20]
 80132c4:	2201      	movs	r2, #1
 80132c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80132c8:	183b      	adds	r3, r7, r0
 80132ca:	781b      	ldrb	r3, [r3, #0]
 80132cc:	2207      	movs	r2, #7
 80132ce:	4013      	ands	r3, r2
 80132d0:	b2da      	uxtb	r2, r3
 80132d2:	697b      	ldr	r3, [r7, #20]
 80132d4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	697a      	ldr	r2, [r7, #20]
 80132dc:	0011      	movs	r1, r2
 80132de:	0018      	movs	r0, r3
 80132e0:	f006 f8e6 	bl	80194b0 <USB_EPStartXfer>

  return HAL_OK;
 80132e4:	2300      	movs	r3, #0
}
 80132e6:	0018      	movs	r0, r3
 80132e8:	46bd      	mov	sp, r7
 80132ea:	b006      	add	sp, #24
 80132ec:	bd80      	pop	{r7, pc}

080132ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80132ee:	b580      	push	{r7, lr}
 80132f0:	b084      	sub	sp, #16
 80132f2:	af00      	add	r7, sp, #0
 80132f4:	6078      	str	r0, [r7, #4]
 80132f6:	000a      	movs	r2, r1
 80132f8:	1cfb      	adds	r3, r7, #3
 80132fa:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80132fc:	1cfb      	adds	r3, r7, #3
 80132fe:	781b      	ldrb	r3, [r3, #0]
 8013300:	2207      	movs	r2, #7
 8013302:	401a      	ands	r2, r3
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	685b      	ldr	r3, [r3, #4]
 8013308:	429a      	cmp	r2, r3
 801330a:	d901      	bls.n	8013310 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 801330c:	2301      	movs	r3, #1
 801330e:	e046      	b.n	801339e <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013310:	1cfb      	adds	r3, r7, #3
 8013312:	781b      	ldrb	r3, [r3, #0]
 8013314:	b25b      	sxtb	r3, r3
 8013316:	2b00      	cmp	r3, #0
 8013318:	da0f      	bge.n	801333a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801331a:	1cfb      	adds	r3, r7, #3
 801331c:	781b      	ldrb	r3, [r3, #0]
 801331e:	2207      	movs	r2, #7
 8013320:	4013      	ands	r3, r2
 8013322:	1c5a      	adds	r2, r3, #1
 8013324:	0013      	movs	r3, r2
 8013326:	009b      	lsls	r3, r3, #2
 8013328:	189b      	adds	r3, r3, r2
 801332a:	00db      	lsls	r3, r3, #3
 801332c:	687a      	ldr	r2, [r7, #4]
 801332e:	18d3      	adds	r3, r2, r3
 8013330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	2201      	movs	r2, #1
 8013336:	705a      	strb	r2, [r3, #1]
 8013338:	e00d      	b.n	8013356 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801333a:	1cfb      	adds	r3, r7, #3
 801333c:	781a      	ldrb	r2, [r3, #0]
 801333e:	0013      	movs	r3, r2
 8013340:	009b      	lsls	r3, r3, #2
 8013342:	189b      	adds	r3, r3, r2
 8013344:	00db      	lsls	r3, r3, #3
 8013346:	3369      	adds	r3, #105	@ 0x69
 8013348:	33ff      	adds	r3, #255	@ 0xff
 801334a:	687a      	ldr	r2, [r7, #4]
 801334c:	18d3      	adds	r3, r2, r3
 801334e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	2200      	movs	r2, #0
 8013354:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	2201      	movs	r2, #1
 801335a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801335c:	1cfb      	adds	r3, r7, #3
 801335e:	781b      	ldrb	r3, [r3, #0]
 8013360:	2207      	movs	r2, #7
 8013362:	4013      	ands	r3, r2
 8013364:	b2da      	uxtb	r2, r3
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801336a:	687a      	ldr	r2, [r7, #4]
 801336c:	23aa      	movs	r3, #170	@ 0xaa
 801336e:	009b      	lsls	r3, r3, #2
 8013370:	5cd3      	ldrb	r3, [r2, r3]
 8013372:	2b01      	cmp	r3, #1
 8013374:	d101      	bne.n	801337a <HAL_PCD_EP_SetStall+0x8c>
 8013376:	2302      	movs	r3, #2
 8013378:	e011      	b.n	801339e <HAL_PCD_EP_SetStall+0xb0>
 801337a:	687a      	ldr	r2, [r7, #4]
 801337c:	23aa      	movs	r3, #170	@ 0xaa
 801337e:	009b      	lsls	r3, r3, #2
 8013380:	2101      	movs	r1, #1
 8013382:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	68fa      	ldr	r2, [r7, #12]
 801338a:	0011      	movs	r1, r2
 801338c:	0018      	movs	r0, r3
 801338e:	f007 f9c7 	bl	801a720 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8013392:	687a      	ldr	r2, [r7, #4]
 8013394:	23aa      	movs	r3, #170	@ 0xaa
 8013396:	009b      	lsls	r3, r3, #2
 8013398:	2100      	movs	r1, #0
 801339a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 801339c:	2300      	movs	r3, #0
}
 801339e:	0018      	movs	r0, r3
 80133a0:	46bd      	mov	sp, r7
 80133a2:	b004      	add	sp, #16
 80133a4:	bd80      	pop	{r7, pc}

080133a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80133a6:	b580      	push	{r7, lr}
 80133a8:	b084      	sub	sp, #16
 80133aa:	af00      	add	r7, sp, #0
 80133ac:	6078      	str	r0, [r7, #4]
 80133ae:	000a      	movs	r2, r1
 80133b0:	1cfb      	adds	r3, r7, #3
 80133b2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80133b4:	1cfb      	adds	r3, r7, #3
 80133b6:	781b      	ldrb	r3, [r3, #0]
 80133b8:	220f      	movs	r2, #15
 80133ba:	401a      	ands	r2, r3
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	685b      	ldr	r3, [r3, #4]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d901      	bls.n	80133c8 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80133c4:	2301      	movs	r3, #1
 80133c6:	e048      	b.n	801345a <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80133c8:	1cfb      	adds	r3, r7, #3
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	b25b      	sxtb	r3, r3
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	da0f      	bge.n	80133f2 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80133d2:	1cfb      	adds	r3, r7, #3
 80133d4:	781b      	ldrb	r3, [r3, #0]
 80133d6:	2207      	movs	r2, #7
 80133d8:	4013      	ands	r3, r2
 80133da:	1c5a      	adds	r2, r3, #1
 80133dc:	0013      	movs	r3, r2
 80133de:	009b      	lsls	r3, r3, #2
 80133e0:	189b      	adds	r3, r3, r2
 80133e2:	00db      	lsls	r3, r3, #3
 80133e4:	687a      	ldr	r2, [r7, #4]
 80133e6:	18d3      	adds	r3, r2, r3
 80133e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	2201      	movs	r2, #1
 80133ee:	705a      	strb	r2, [r3, #1]
 80133f0:	e00f      	b.n	8013412 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80133f2:	1cfb      	adds	r3, r7, #3
 80133f4:	781b      	ldrb	r3, [r3, #0]
 80133f6:	2207      	movs	r2, #7
 80133f8:	401a      	ands	r2, r3
 80133fa:	0013      	movs	r3, r2
 80133fc:	009b      	lsls	r3, r3, #2
 80133fe:	189b      	adds	r3, r3, r2
 8013400:	00db      	lsls	r3, r3, #3
 8013402:	3369      	adds	r3, #105	@ 0x69
 8013404:	33ff      	adds	r3, #255	@ 0xff
 8013406:	687a      	ldr	r2, [r7, #4]
 8013408:	18d3      	adds	r3, r2, r3
 801340a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	2200      	movs	r2, #0
 8013410:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	2200      	movs	r2, #0
 8013416:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013418:	1cfb      	adds	r3, r7, #3
 801341a:	781b      	ldrb	r3, [r3, #0]
 801341c:	2207      	movs	r2, #7
 801341e:	4013      	ands	r3, r2
 8013420:	b2da      	uxtb	r2, r3
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013426:	687a      	ldr	r2, [r7, #4]
 8013428:	23aa      	movs	r3, #170	@ 0xaa
 801342a:	009b      	lsls	r3, r3, #2
 801342c:	5cd3      	ldrb	r3, [r2, r3]
 801342e:	2b01      	cmp	r3, #1
 8013430:	d101      	bne.n	8013436 <HAL_PCD_EP_ClrStall+0x90>
 8013432:	2302      	movs	r3, #2
 8013434:	e011      	b.n	801345a <HAL_PCD_EP_ClrStall+0xb4>
 8013436:	687a      	ldr	r2, [r7, #4]
 8013438:	23aa      	movs	r3, #170	@ 0xaa
 801343a:	009b      	lsls	r3, r3, #2
 801343c:	2101      	movs	r1, #1
 801343e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	68fa      	ldr	r2, [r7, #12]
 8013446:	0011      	movs	r1, r2
 8013448:	0018      	movs	r0, r3
 801344a:	f007 f9b9 	bl	801a7c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801344e:	687a      	ldr	r2, [r7, #4]
 8013450:	23aa      	movs	r3, #170	@ 0xaa
 8013452:	009b      	lsls	r3, r3, #2
 8013454:	2100      	movs	r1, #0
 8013456:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013458:	2300      	movs	r3, #0
}
 801345a:	0018      	movs	r0, r3
 801345c:	46bd      	mov	sp, r7
 801345e:	b004      	add	sp, #16
 8013460:	bd80      	pop	{r7, pc}
	...

08013464 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8013464:	b5b0      	push	{r4, r5, r7, lr}
 8013466:	b096      	sub	sp, #88	@ 0x58
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801346c:	f000 fbec 	bl	8013c48 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	681a      	ldr	r2, [r3, #0]
 8013474:	204e      	movs	r0, #78	@ 0x4e
 8013476:	183b      	adds	r3, r7, r0
 8013478:	2144      	movs	r1, #68	@ 0x44
 801347a:	5a52      	ldrh	r2, [r2, r1]
 801347c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 801347e:	183b      	adds	r3, r7, r0
 8013480:	881b      	ldrh	r3, [r3, #0]
 8013482:	b2da      	uxtb	r2, r3
 8013484:	244d      	movs	r4, #77	@ 0x4d
 8013486:	193b      	adds	r3, r7, r4
 8013488:	210f      	movs	r1, #15
 801348a:	400a      	ands	r2, r1
 801348c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 801348e:	193b      	adds	r3, r7, r4
 8013490:	781b      	ldrb	r3, [r3, #0]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d000      	beq.n	8013498 <PCD_EP_ISR_Handler+0x34>
 8013496:	e18f      	b.n	80137b8 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8013498:	183b      	adds	r3, r7, r0
 801349a:	881b      	ldrh	r3, [r3, #0]
 801349c:	2210      	movs	r2, #16
 801349e:	4013      	ands	r3, r2
 80134a0:	d155      	bne.n	801354e <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	881b      	ldrh	r3, [r3, #0]
 80134a8:	b29a      	uxth	r2, r3
 80134aa:	200e      	movs	r0, #14
 80134ac:	183b      	adds	r3, r7, r0
 80134ae:	49bb      	ldr	r1, [pc, #748]	@ (801379c <PCD_EP_ISR_Handler+0x338>)
 80134b0:	400a      	ands	r2, r1
 80134b2:	801a      	strh	r2, [r3, #0]
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	183a      	adds	r2, r7, r0
 80134ba:	8812      	ldrh	r2, [r2, #0]
 80134bc:	49b8      	ldr	r1, [pc, #736]	@ (80137a0 <PCD_EP_ISR_Handler+0x33c>)
 80134be:	430a      	orrs	r2, r1
 80134c0:	b292      	uxth	r2, r2
 80134c2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	3328      	adds	r3, #40	@ 0x28
 80134c8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	2250      	movs	r2, #80	@ 0x50
 80134d0:	5a9b      	ldrh	r3, [r3, r2]
 80134d2:	b29b      	uxth	r3, r3
 80134d4:	001a      	movs	r2, r3
 80134d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134d8:	781b      	ldrb	r3, [r3, #0]
 80134da:	00db      	lsls	r3, r3, #3
 80134dc:	18d2      	adds	r2, r2, r3
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	18d3      	adds	r3, r2, r3
 80134e4:	4aaf      	ldr	r2, [pc, #700]	@ (80137a4 <PCD_EP_ISR_Handler+0x340>)
 80134e6:	4694      	mov	ip, r2
 80134e8:	4463      	add	r3, ip
 80134ea:	881b      	ldrh	r3, [r3, #0]
 80134ec:	059b      	lsls	r3, r3, #22
 80134ee:	0d9a      	lsrs	r2, r3, #22
 80134f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134f2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80134f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134f6:	695a      	ldr	r2, [r3, #20]
 80134f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134fa:	69db      	ldr	r3, [r3, #28]
 80134fc:	18d2      	adds	r2, r2, r3
 80134fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013500:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	2100      	movs	r1, #0
 8013506:	0018      	movs	r0, r3
 8013508:	f009 fac8 	bl	801ca9c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	2224      	movs	r2, #36	@ 0x24
 8013510:	5c9b      	ldrb	r3, [r3, r2]
 8013512:	b2db      	uxtb	r3, r3
 8013514:	2b00      	cmp	r3, #0
 8013516:	d101      	bne.n	801351c <PCD_EP_ISR_Handler+0xb8>
 8013518:	f000 fb96 	bl	8013c48 <PCD_EP_ISR_Handler+0x7e4>
 801351c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801351e:	699b      	ldr	r3, [r3, #24]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d001      	beq.n	8013528 <PCD_EP_ISR_Handler+0xc4>
 8013524:	f000 fb90 	bl	8013c48 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	2224      	movs	r2, #36	@ 0x24
 801352c:	5c9b      	ldrb	r3, [r3, r2]
 801352e:	b2db      	uxtb	r3, r3
 8013530:	2280      	movs	r2, #128	@ 0x80
 8013532:	4252      	negs	r2, r2
 8013534:	4313      	orrs	r3, r2
 8013536:	b2da      	uxtb	r2, r3
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	0011      	movs	r1, r2
 801353e:	224c      	movs	r2, #76	@ 0x4c
 8013540:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	2224      	movs	r2, #36	@ 0x24
 8013546:	2100      	movs	r1, #0
 8013548:	5499      	strb	r1, [r3, r2]
 801354a:	f000 fb7d 	bl	8013c48 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	3369      	adds	r3, #105	@ 0x69
 8013552:	33ff      	adds	r3, #255	@ 0xff
 8013554:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	681a      	ldr	r2, [r3, #0]
 801355a:	214a      	movs	r1, #74	@ 0x4a
 801355c:	187b      	adds	r3, r7, r1
 801355e:	8812      	ldrh	r2, [r2, #0]
 8013560:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8013562:	187b      	adds	r3, r7, r1
 8013564:	881a      	ldrh	r2, [r3, #0]
 8013566:	2380      	movs	r3, #128	@ 0x80
 8013568:	011b      	lsls	r3, r3, #4
 801356a:	4013      	ands	r3, r2
 801356c:	d037      	beq.n	80135de <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	2250      	movs	r2, #80	@ 0x50
 8013574:	5a9b      	ldrh	r3, [r3, r2]
 8013576:	b29b      	uxth	r3, r3
 8013578:	001a      	movs	r2, r3
 801357a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801357c:	781b      	ldrb	r3, [r3, #0]
 801357e:	00db      	lsls	r3, r3, #3
 8013580:	18d2      	adds	r2, r2, r3
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	18d3      	adds	r3, r2, r3
 8013588:	4a87      	ldr	r2, [pc, #540]	@ (80137a8 <PCD_EP_ISR_Handler+0x344>)
 801358a:	4694      	mov	ip, r2
 801358c:	4463      	add	r3, ip
 801358e:	881b      	ldrh	r3, [r3, #0]
 8013590:	059b      	lsls	r3, r3, #22
 8013592:	0d9a      	lsrs	r2, r3, #22
 8013594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013596:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	6818      	ldr	r0, [r3, #0]
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	22ac      	movs	r2, #172	@ 0xac
 80135a0:	0092      	lsls	r2, r2, #2
 80135a2:	1899      	adds	r1, r3, r2
 80135a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135a6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80135a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135aa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80135ac:	b29b      	uxth	r3, r3
 80135ae:	f007 fa3a 	bl	801aa26 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	881b      	ldrh	r3, [r3, #0]
 80135b8:	b29a      	uxth	r2, r3
 80135ba:	2010      	movs	r0, #16
 80135bc:	183b      	adds	r3, r7, r0
 80135be:	497b      	ldr	r1, [pc, #492]	@ (80137ac <PCD_EP_ISR_Handler+0x348>)
 80135c0:	400a      	ands	r2, r1
 80135c2:	801a      	strh	r2, [r3, #0]
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	183a      	adds	r2, r7, r0
 80135ca:	8812      	ldrh	r2, [r2, #0]
 80135cc:	2180      	movs	r1, #128	@ 0x80
 80135ce:	430a      	orrs	r2, r1
 80135d0:	b292      	uxth	r2, r2
 80135d2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	0018      	movs	r0, r3
 80135d8:	f009 fa2a 	bl	801ca30 <HAL_PCD_SetupStageCallback>
 80135dc:	e334      	b.n	8013c48 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80135de:	234a      	movs	r3, #74	@ 0x4a
 80135e0:	18fb      	adds	r3, r7, r3
 80135e2:	2200      	movs	r2, #0
 80135e4:	5e9b      	ldrsh	r3, [r3, r2]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	db00      	blt.n	80135ec <PCD_EP_ISR_Handler+0x188>
 80135ea:	e32d      	b.n	8013c48 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	881b      	ldrh	r3, [r3, #0]
 80135f2:	b29a      	uxth	r2, r3
 80135f4:	201e      	movs	r0, #30
 80135f6:	183b      	adds	r3, r7, r0
 80135f8:	496c      	ldr	r1, [pc, #432]	@ (80137ac <PCD_EP_ISR_Handler+0x348>)
 80135fa:	400a      	ands	r2, r1
 80135fc:	801a      	strh	r2, [r3, #0]
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	183a      	adds	r2, r7, r0
 8013604:	8812      	ldrh	r2, [r2, #0]
 8013606:	2180      	movs	r1, #128	@ 0x80
 8013608:	430a      	orrs	r2, r1
 801360a:	b292      	uxth	r2, r2
 801360c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	2250      	movs	r2, #80	@ 0x50
 8013614:	5a9b      	ldrh	r3, [r3, r2]
 8013616:	b29b      	uxth	r3, r3
 8013618:	001a      	movs	r2, r3
 801361a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801361c:	781b      	ldrb	r3, [r3, #0]
 801361e:	00db      	lsls	r3, r3, #3
 8013620:	18d2      	adds	r2, r2, r3
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	18d3      	adds	r3, r2, r3
 8013628:	4a5f      	ldr	r2, [pc, #380]	@ (80137a8 <PCD_EP_ISR_Handler+0x344>)
 801362a:	4694      	mov	ip, r2
 801362c:	4463      	add	r3, ip
 801362e:	881b      	ldrh	r3, [r3, #0]
 8013630:	059b      	lsls	r3, r3, #22
 8013632:	0d9a      	lsrs	r2, r3, #22
 8013634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013636:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8013638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801363a:	69db      	ldr	r3, [r3, #28]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d01a      	beq.n	8013676 <PCD_EP_ISR_Handler+0x212>
 8013640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013642:	695b      	ldr	r3, [r3, #20]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d016      	beq.n	8013676 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	6818      	ldr	r0, [r3, #0]
 801364c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801364e:	6959      	ldr	r1, [r3, #20]
 8013650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013652:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8013654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013656:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013658:	b29b      	uxth	r3, r3
 801365a:	f007 f9e4 	bl	801aa26 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 801365e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013660:	695a      	ldr	r2, [r3, #20]
 8013662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013664:	69db      	ldr	r3, [r3, #28]
 8013666:	18d2      	adds	r2, r2, r3
 8013668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801366a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2100      	movs	r1, #0
 8013670:	0018      	movs	r0, r3
 8013672:	f009 f9f2 	bl	801ca5a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	681a      	ldr	r2, [r3, #0]
 801367a:	214a      	movs	r1, #74	@ 0x4a
 801367c:	187b      	adds	r3, r7, r1
 801367e:	8812      	ldrh	r2, [r2, #0]
 8013680:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8013682:	187b      	adds	r3, r7, r1
 8013684:	881a      	ldrh	r2, [r3, #0]
 8013686:	2380      	movs	r3, #128	@ 0x80
 8013688:	011b      	lsls	r3, r3, #4
 801368a:	4013      	ands	r3, r2
 801368c:	d000      	beq.n	8013690 <PCD_EP_ISR_Handler+0x22c>
 801368e:	e2db      	b.n	8013c48 <PCD_EP_ISR_Handler+0x7e4>
 8013690:	187b      	adds	r3, r7, r1
 8013692:	881a      	ldrh	r2, [r3, #0]
 8013694:	23c0      	movs	r3, #192	@ 0xc0
 8013696:	019b      	lsls	r3, r3, #6
 8013698:	401a      	ands	r2, r3
 801369a:	23c0      	movs	r3, #192	@ 0xc0
 801369c:	019b      	lsls	r3, r3, #6
 801369e:	429a      	cmp	r2, r3
 80136a0:	d100      	bne.n	80136a4 <PCD_EP_ISR_Handler+0x240>
 80136a2:	e2d1      	b.n	8013c48 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	61bb      	str	r3, [r7, #24]
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	2250      	movs	r2, #80	@ 0x50
 80136b0:	5a9b      	ldrh	r3, [r3, r2]
 80136b2:	b29b      	uxth	r3, r3
 80136b4:	001a      	movs	r2, r3
 80136b6:	69bb      	ldr	r3, [r7, #24]
 80136b8:	189b      	adds	r3, r3, r2
 80136ba:	61bb      	str	r3, [r7, #24]
 80136bc:	69bb      	ldr	r3, [r7, #24]
 80136be:	4a3a      	ldr	r2, [pc, #232]	@ (80137a8 <PCD_EP_ISR_Handler+0x344>)
 80136c0:	4694      	mov	ip, r2
 80136c2:	4463      	add	r3, ip
 80136c4:	617b      	str	r3, [r7, #20]
 80136c6:	697b      	ldr	r3, [r7, #20]
 80136c8:	881b      	ldrh	r3, [r3, #0]
 80136ca:	b29b      	uxth	r3, r3
 80136cc:	059b      	lsls	r3, r3, #22
 80136ce:	0d9b      	lsrs	r3, r3, #22
 80136d0:	b29a      	uxth	r2, r3
 80136d2:	697b      	ldr	r3, [r7, #20]
 80136d4:	801a      	strh	r2, [r3, #0]
 80136d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136d8:	691b      	ldr	r3, [r3, #16]
 80136da:	2b3e      	cmp	r3, #62	@ 0x3e
 80136dc:	d91a      	bls.n	8013714 <PCD_EP_ISR_Handler+0x2b0>
 80136de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136e0:	691b      	ldr	r3, [r3, #16]
 80136e2:	095b      	lsrs	r3, r3, #5
 80136e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80136e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136e8:	691b      	ldr	r3, [r3, #16]
 80136ea:	221f      	movs	r2, #31
 80136ec:	4013      	ands	r3, r2
 80136ee:	d102      	bne.n	80136f6 <PCD_EP_ISR_Handler+0x292>
 80136f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136f2:	3b01      	subs	r3, #1
 80136f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80136f6:	697b      	ldr	r3, [r7, #20]
 80136f8:	881b      	ldrh	r3, [r3, #0]
 80136fa:	b29a      	uxth	r2, r3
 80136fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136fe:	b29b      	uxth	r3, r3
 8013700:	029b      	lsls	r3, r3, #10
 8013702:	b29b      	uxth	r3, r3
 8013704:	4313      	orrs	r3, r2
 8013706:	b29b      	uxth	r3, r3
 8013708:	4a25      	ldr	r2, [pc, #148]	@ (80137a0 <PCD_EP_ISR_Handler+0x33c>)
 801370a:	4313      	orrs	r3, r2
 801370c:	b29a      	uxth	r2, r3
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	801a      	strh	r2, [r3, #0]
 8013712:	e023      	b.n	801375c <PCD_EP_ISR_Handler+0x2f8>
 8013714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013716:	691b      	ldr	r3, [r3, #16]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d108      	bne.n	801372e <PCD_EP_ISR_Handler+0x2ca>
 801371c:	697b      	ldr	r3, [r7, #20]
 801371e:	881b      	ldrh	r3, [r3, #0]
 8013720:	b29b      	uxth	r3, r3
 8013722:	4a1f      	ldr	r2, [pc, #124]	@ (80137a0 <PCD_EP_ISR_Handler+0x33c>)
 8013724:	4313      	orrs	r3, r2
 8013726:	b29a      	uxth	r2, r3
 8013728:	697b      	ldr	r3, [r7, #20]
 801372a:	801a      	strh	r2, [r3, #0]
 801372c:	e016      	b.n	801375c <PCD_EP_ISR_Handler+0x2f8>
 801372e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013730:	691b      	ldr	r3, [r3, #16]
 8013732:	085b      	lsrs	r3, r3, #1
 8013734:	647b      	str	r3, [r7, #68]	@ 0x44
 8013736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013738:	691b      	ldr	r3, [r3, #16]
 801373a:	2201      	movs	r2, #1
 801373c:	4013      	ands	r3, r2
 801373e:	d002      	beq.n	8013746 <PCD_EP_ISR_Handler+0x2e2>
 8013740:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013742:	3301      	adds	r3, #1
 8013744:	647b      	str	r3, [r7, #68]	@ 0x44
 8013746:	697b      	ldr	r3, [r7, #20]
 8013748:	881b      	ldrh	r3, [r3, #0]
 801374a:	b29a      	uxth	r2, r3
 801374c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801374e:	b29b      	uxth	r3, r3
 8013750:	029b      	lsls	r3, r3, #10
 8013752:	b29b      	uxth	r3, r3
 8013754:	4313      	orrs	r3, r2
 8013756:	b29a      	uxth	r2, r3
 8013758:	697b      	ldr	r3, [r7, #20]
 801375a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	881b      	ldrh	r3, [r3, #0]
 8013762:	b29a      	uxth	r2, r3
 8013764:	2012      	movs	r0, #18
 8013766:	183b      	adds	r3, r7, r0
 8013768:	4911      	ldr	r1, [pc, #68]	@ (80137b0 <PCD_EP_ISR_Handler+0x34c>)
 801376a:	400a      	ands	r2, r1
 801376c:	801a      	strh	r2, [r3, #0]
 801376e:	183b      	adds	r3, r7, r0
 8013770:	183a      	adds	r2, r7, r0
 8013772:	8812      	ldrh	r2, [r2, #0]
 8013774:	2180      	movs	r1, #128	@ 0x80
 8013776:	0149      	lsls	r1, r1, #5
 8013778:	404a      	eors	r2, r1
 801377a:	801a      	strh	r2, [r3, #0]
 801377c:	183b      	adds	r3, r7, r0
 801377e:	183a      	adds	r2, r7, r0
 8013780:	8812      	ldrh	r2, [r2, #0]
 8013782:	2180      	movs	r1, #128	@ 0x80
 8013784:	0189      	lsls	r1, r1, #6
 8013786:	404a      	eors	r2, r1
 8013788:	801a      	strh	r2, [r3, #0]
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	183a      	adds	r2, r7, r0
 8013790:	8812      	ldrh	r2, [r2, #0]
 8013792:	4908      	ldr	r1, [pc, #32]	@ (80137b4 <PCD_EP_ISR_Handler+0x350>)
 8013794:	430a      	orrs	r2, r1
 8013796:	b292      	uxth	r2, r2
 8013798:	801a      	strh	r2, [r3, #0]
 801379a:	e255      	b.n	8013c48 <PCD_EP_ISR_Handler+0x7e4>
 801379c:	ffff8f0f 	.word	0xffff8f0f
 80137a0:	ffff8000 	.word	0xffff8000
 80137a4:	00000402 	.word	0x00000402
 80137a8:	00000406 	.word	0x00000406
 80137ac:	00000f8f 	.word	0x00000f8f
 80137b0:	ffffbf8f 	.word	0xffffbf8f
 80137b4:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	001a      	movs	r2, r3
 80137be:	204d      	movs	r0, #77	@ 0x4d
 80137c0:	183b      	adds	r3, r7, r0
 80137c2:	781b      	ldrb	r3, [r3, #0]
 80137c4:	009b      	lsls	r3, r3, #2
 80137c6:	18d2      	adds	r2, r2, r3
 80137c8:	214a      	movs	r1, #74	@ 0x4a
 80137ca:	187b      	adds	r3, r7, r1
 80137cc:	8812      	ldrh	r2, [r2, #0]
 80137ce:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80137d0:	187b      	adds	r3, r7, r1
 80137d2:	2200      	movs	r2, #0
 80137d4:	5e9b      	ldrsh	r3, [r3, r2]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	db00      	blt.n	80137dc <PCD_EP_ISR_Handler+0x378>
 80137da:	e0fa      	b.n	80139d2 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	001a      	movs	r2, r3
 80137e2:	183b      	adds	r3, r7, r0
 80137e4:	781b      	ldrb	r3, [r3, #0]
 80137e6:	009b      	lsls	r3, r3, #2
 80137e8:	18d3      	adds	r3, r2, r3
 80137ea:	881b      	ldrh	r3, [r3, #0]
 80137ec:	b29a      	uxth	r2, r3
 80137ee:	2448      	movs	r4, #72	@ 0x48
 80137f0:	193b      	adds	r3, r7, r4
 80137f2:	49d1      	ldr	r1, [pc, #836]	@ (8013b38 <PCD_EP_ISR_Handler+0x6d4>)
 80137f4:	400a      	ands	r2, r1
 80137f6:	801a      	strh	r2, [r3, #0]
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	001a      	movs	r2, r3
 80137fe:	183b      	adds	r3, r7, r0
 8013800:	781b      	ldrb	r3, [r3, #0]
 8013802:	009b      	lsls	r3, r3, #2
 8013804:	18d3      	adds	r3, r2, r3
 8013806:	193a      	adds	r2, r7, r4
 8013808:	8812      	ldrh	r2, [r2, #0]
 801380a:	2180      	movs	r1, #128	@ 0x80
 801380c:	430a      	orrs	r2, r1
 801380e:	b292      	uxth	r2, r2
 8013810:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8013812:	183b      	adds	r3, r7, r0
 8013814:	781a      	ldrb	r2, [r3, #0]
 8013816:	0013      	movs	r3, r2
 8013818:	009b      	lsls	r3, r3, #2
 801381a:	189b      	adds	r3, r3, r2
 801381c:	00db      	lsls	r3, r3, #3
 801381e:	3369      	adds	r3, #105	@ 0x69
 8013820:	33ff      	adds	r3, #255	@ 0xff
 8013822:	687a      	ldr	r2, [r7, #4]
 8013824:	18d3      	adds	r3, r2, r3
 8013826:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8013828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801382a:	7b1b      	ldrb	r3, [r3, #12]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d125      	bne.n	801387c <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	2250      	movs	r2, #80	@ 0x50
 8013836:	5a9b      	ldrh	r3, [r3, r2]
 8013838:	b29b      	uxth	r3, r3
 801383a:	001a      	movs	r2, r3
 801383c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801383e:	781b      	ldrb	r3, [r3, #0]
 8013840:	00db      	lsls	r3, r3, #3
 8013842:	18d2      	adds	r2, r2, r3
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	18d3      	adds	r3, r2, r3
 801384a:	4abc      	ldr	r2, [pc, #752]	@ (8013b3c <PCD_EP_ISR_Handler+0x6d8>)
 801384c:	4694      	mov	ip, r2
 801384e:	4463      	add	r3, ip
 8013850:	881a      	ldrh	r2, [r3, #0]
 8013852:	2450      	movs	r4, #80	@ 0x50
 8013854:	193b      	adds	r3, r7, r4
 8013856:	0592      	lsls	r2, r2, #22
 8013858:	0d92      	lsrs	r2, r2, #22
 801385a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 801385c:	193b      	adds	r3, r7, r4
 801385e:	881b      	ldrh	r3, [r3, #0]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d100      	bne.n	8013866 <PCD_EP_ISR_Handler+0x402>
 8013864:	e08d      	b.n	8013982 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	6818      	ldr	r0, [r3, #0]
 801386a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801386c:	6959      	ldr	r1, [r3, #20]
 801386e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013870:	88da      	ldrh	r2, [r3, #6]
 8013872:	193b      	adds	r3, r7, r4
 8013874:	881b      	ldrh	r3, [r3, #0]
 8013876:	f007 f8d6 	bl	801aa26 <USB_ReadPMA>
 801387a:	e082      	b.n	8013982 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 801387c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801387e:	78db      	ldrb	r3, [r3, #3]
 8013880:	2b02      	cmp	r3, #2
 8013882:	d10c      	bne.n	801389e <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8013884:	2350      	movs	r3, #80	@ 0x50
 8013886:	18fc      	adds	r4, r7, r3
 8013888:	234a      	movs	r3, #74	@ 0x4a
 801388a:	18fb      	adds	r3, r7, r3
 801388c:	881a      	ldrh	r2, [r3, #0]
 801388e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	0018      	movs	r0, r3
 8013894:	f000 f9ec 	bl	8013c70 <HAL_PCD_EP_DB_Receive>
 8013898:	0003      	movs	r3, r0
 801389a:	8023      	strh	r3, [r4, #0]
 801389c:	e071      	b.n	8013982 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	001a      	movs	r2, r3
 80138a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138a6:	781b      	ldrb	r3, [r3, #0]
 80138a8:	009b      	lsls	r3, r3, #2
 80138aa:	18d3      	adds	r3, r2, r3
 80138ac:	881b      	ldrh	r3, [r3, #0]
 80138ae:	b29a      	uxth	r2, r3
 80138b0:	2052      	movs	r0, #82	@ 0x52
 80138b2:	183b      	adds	r3, r7, r0
 80138b4:	49a2      	ldr	r1, [pc, #648]	@ (8013b40 <PCD_EP_ISR_Handler+0x6dc>)
 80138b6:	400a      	ands	r2, r1
 80138b8:	801a      	strh	r2, [r3, #0]
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	001a      	movs	r2, r3
 80138c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138c2:	781b      	ldrb	r3, [r3, #0]
 80138c4:	009b      	lsls	r3, r3, #2
 80138c6:	18d3      	adds	r3, r2, r3
 80138c8:	183a      	adds	r2, r7, r0
 80138ca:	8812      	ldrh	r2, [r2, #0]
 80138cc:	499d      	ldr	r1, [pc, #628]	@ (8013b44 <PCD_EP_ISR_Handler+0x6e0>)
 80138ce:	430a      	orrs	r2, r1
 80138d0:	b292      	uxth	r2, r2
 80138d2:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	001a      	movs	r2, r3
 80138da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138dc:	781b      	ldrb	r3, [r3, #0]
 80138de:	009b      	lsls	r3, r3, #2
 80138e0:	18d3      	adds	r3, r2, r3
 80138e2:	881b      	ldrh	r3, [r3, #0]
 80138e4:	b29b      	uxth	r3, r3
 80138e6:	001a      	movs	r2, r3
 80138e8:	2380      	movs	r3, #128	@ 0x80
 80138ea:	01db      	lsls	r3, r3, #7
 80138ec:	4013      	ands	r3, r2
 80138ee:	d024      	beq.n	801393a <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	2250      	movs	r2, #80	@ 0x50
 80138f6:	5a9b      	ldrh	r3, [r3, r2]
 80138f8:	b29b      	uxth	r3, r3
 80138fa:	001a      	movs	r2, r3
 80138fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138fe:	781b      	ldrb	r3, [r3, #0]
 8013900:	00db      	lsls	r3, r3, #3
 8013902:	18d2      	adds	r2, r2, r3
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	18d3      	adds	r3, r2, r3
 801390a:	4a8f      	ldr	r2, [pc, #572]	@ (8013b48 <PCD_EP_ISR_Handler+0x6e4>)
 801390c:	4694      	mov	ip, r2
 801390e:	4463      	add	r3, ip
 8013910:	881a      	ldrh	r2, [r3, #0]
 8013912:	2450      	movs	r4, #80	@ 0x50
 8013914:	193b      	adds	r3, r7, r4
 8013916:	0592      	lsls	r2, r2, #22
 8013918:	0d92      	lsrs	r2, r2, #22
 801391a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801391c:	193b      	adds	r3, r7, r4
 801391e:	881b      	ldrh	r3, [r3, #0]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d02e      	beq.n	8013982 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	6818      	ldr	r0, [r3, #0]
 8013928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801392a:	6959      	ldr	r1, [r3, #20]
 801392c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801392e:	891a      	ldrh	r2, [r3, #8]
 8013930:	193b      	adds	r3, r7, r4
 8013932:	881b      	ldrh	r3, [r3, #0]
 8013934:	f007 f877 	bl	801aa26 <USB_ReadPMA>
 8013938:	e023      	b.n	8013982 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	2250      	movs	r2, #80	@ 0x50
 8013940:	5a9b      	ldrh	r3, [r3, r2]
 8013942:	b29b      	uxth	r3, r3
 8013944:	001a      	movs	r2, r3
 8013946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013948:	781b      	ldrb	r3, [r3, #0]
 801394a:	00db      	lsls	r3, r3, #3
 801394c:	18d2      	adds	r2, r2, r3
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	18d3      	adds	r3, r2, r3
 8013954:	4a79      	ldr	r2, [pc, #484]	@ (8013b3c <PCD_EP_ISR_Handler+0x6d8>)
 8013956:	4694      	mov	ip, r2
 8013958:	4463      	add	r3, ip
 801395a:	881a      	ldrh	r2, [r3, #0]
 801395c:	2450      	movs	r4, #80	@ 0x50
 801395e:	193b      	adds	r3, r7, r4
 8013960:	0592      	lsls	r2, r2, #22
 8013962:	0d92      	lsrs	r2, r2, #22
 8013964:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8013966:	193b      	adds	r3, r7, r4
 8013968:	881b      	ldrh	r3, [r3, #0]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d009      	beq.n	8013982 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	6818      	ldr	r0, [r3, #0]
 8013972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013974:	6959      	ldr	r1, [r3, #20]
 8013976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013978:	895a      	ldrh	r2, [r3, #10]
 801397a:	193b      	adds	r3, r7, r4
 801397c:	881b      	ldrh	r3, [r3, #0]
 801397e:	f007 f852 	bl	801aa26 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8013982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013984:	69da      	ldr	r2, [r3, #28]
 8013986:	2150      	movs	r1, #80	@ 0x50
 8013988:	187b      	adds	r3, r7, r1
 801398a:	881b      	ldrh	r3, [r3, #0]
 801398c:	18d2      	adds	r2, r2, r3
 801398e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013990:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8013992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013994:	695a      	ldr	r2, [r3, #20]
 8013996:	187b      	adds	r3, r7, r1
 8013998:	881b      	ldrh	r3, [r3, #0]
 801399a:	18d2      	adds	r2, r2, r3
 801399c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801399e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80139a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139a2:	699b      	ldr	r3, [r3, #24]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d005      	beq.n	80139b4 <PCD_EP_ISR_Handler+0x550>
 80139a8:	187b      	adds	r3, r7, r1
 80139aa:	881a      	ldrh	r2, [r3, #0]
 80139ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139ae:	691b      	ldr	r3, [r3, #16]
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d207      	bcs.n	80139c4 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80139b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139b6:	781a      	ldrb	r2, [r3, #0]
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	0011      	movs	r1, r2
 80139bc:	0018      	movs	r0, r3
 80139be:	f009 f84c 	bl	801ca5a <HAL_PCD_DataOutStageCallback>
 80139c2:	e006      	b.n	80139d2 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80139ca:	0011      	movs	r1, r2
 80139cc:	0018      	movs	r0, r3
 80139ce:	f005 fd6f 	bl	80194b0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80139d2:	244a      	movs	r4, #74	@ 0x4a
 80139d4:	193b      	adds	r3, r7, r4
 80139d6:	881b      	ldrh	r3, [r3, #0]
 80139d8:	2280      	movs	r2, #128	@ 0x80
 80139da:	4013      	ands	r3, r2
 80139dc:	d100      	bne.n	80139e0 <PCD_EP_ISR_Handler+0x57c>
 80139de:	e133      	b.n	8013c48 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80139e0:	204d      	movs	r0, #77	@ 0x4d
 80139e2:	183b      	adds	r3, r7, r0
 80139e4:	781b      	ldrb	r3, [r3, #0]
 80139e6:	1c5a      	adds	r2, r3, #1
 80139e8:	0013      	movs	r3, r2
 80139ea:	009b      	lsls	r3, r3, #2
 80139ec:	189b      	adds	r3, r3, r2
 80139ee:	00db      	lsls	r3, r3, #3
 80139f0:	687a      	ldr	r2, [r7, #4]
 80139f2:	18d3      	adds	r3, r2, r3
 80139f4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	001a      	movs	r2, r3
 80139fc:	183b      	adds	r3, r7, r0
 80139fe:	781b      	ldrb	r3, [r3, #0]
 8013a00:	009b      	lsls	r3, r3, #2
 8013a02:	18d3      	adds	r3, r2, r3
 8013a04:	881b      	ldrh	r3, [r3, #0]
 8013a06:	b29a      	uxth	r2, r3
 8013a08:	2542      	movs	r5, #66	@ 0x42
 8013a0a:	197b      	adds	r3, r7, r5
 8013a0c:	494f      	ldr	r1, [pc, #316]	@ (8013b4c <PCD_EP_ISR_Handler+0x6e8>)
 8013a0e:	400a      	ands	r2, r1
 8013a10:	801a      	strh	r2, [r3, #0]
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	001a      	movs	r2, r3
 8013a18:	183b      	adds	r3, r7, r0
 8013a1a:	781b      	ldrb	r3, [r3, #0]
 8013a1c:	009b      	lsls	r3, r3, #2
 8013a1e:	18d3      	adds	r3, r2, r3
 8013a20:	197a      	adds	r2, r7, r5
 8013a22:	8812      	ldrh	r2, [r2, #0]
 8013a24:	494a      	ldr	r1, [pc, #296]	@ (8013b50 <PCD_EP_ISR_Handler+0x6ec>)
 8013a26:	430a      	orrs	r2, r1
 8013a28:	b292      	uxth	r2, r2
 8013a2a:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8013a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a2e:	78db      	ldrb	r3, [r3, #3]
 8013a30:	2b01      	cmp	r3, #1
 8013a32:	d000      	beq.n	8013a36 <PCD_EP_ISR_Handler+0x5d2>
 8013a34:	e0af      	b.n	8013b96 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8013a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a38:	2200      	movs	r2, #0
 8013a3a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8013a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a3e:	7b1b      	ldrb	r3, [r3, #12]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d100      	bne.n	8013a46 <PCD_EP_ISR_Handler+0x5e2>
 8013a44:	e09f      	b.n	8013b86 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8013a46:	193b      	adds	r3, r7, r4
 8013a48:	881b      	ldrh	r3, [r3, #0]
 8013a4a:	2240      	movs	r2, #64	@ 0x40
 8013a4c:	4013      	ands	r3, r2
 8013a4e:	d046      	beq.n	8013ade <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a52:	785b      	ldrb	r3, [r3, #1]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d125      	bne.n	8013aa4 <PCD_EP_ISR_Handler+0x640>
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	2250      	movs	r2, #80	@ 0x50
 8013a64:	5a9b      	ldrh	r3, [r3, r2]
 8013a66:	b29b      	uxth	r3, r3
 8013a68:	001a      	movs	r2, r3
 8013a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a6c:	189b      	adds	r3, r3, r2
 8013a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a72:	781b      	ldrb	r3, [r3, #0]
 8013a74:	00da      	lsls	r2, r3, #3
 8013a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a78:	18d3      	adds	r3, r2, r3
 8013a7a:	4a33      	ldr	r2, [pc, #204]	@ (8013b48 <PCD_EP_ISR_Handler+0x6e4>)
 8013a7c:	4694      	mov	ip, r2
 8013a7e:	4463      	add	r3, ip
 8013a80:	623b      	str	r3, [r7, #32]
 8013a82:	6a3b      	ldr	r3, [r7, #32]
 8013a84:	881b      	ldrh	r3, [r3, #0]
 8013a86:	b29b      	uxth	r3, r3
 8013a88:	059b      	lsls	r3, r3, #22
 8013a8a:	0d9b      	lsrs	r3, r3, #22
 8013a8c:	b29a      	uxth	r2, r3
 8013a8e:	6a3b      	ldr	r3, [r7, #32]
 8013a90:	801a      	strh	r2, [r3, #0]
 8013a92:	6a3b      	ldr	r3, [r7, #32]
 8013a94:	881b      	ldrh	r3, [r3, #0]
 8013a96:	b29b      	uxth	r3, r3
 8013a98:	4a2d      	ldr	r2, [pc, #180]	@ (8013b50 <PCD_EP_ISR_Handler+0x6ec>)
 8013a9a:	4313      	orrs	r3, r2
 8013a9c:	b29a      	uxth	r2, r3
 8013a9e:	6a3b      	ldr	r3, [r7, #32]
 8013aa0:	801a      	strh	r2, [r3, #0]
 8013aa2:	e070      	b.n	8013b86 <PCD_EP_ISR_Handler+0x722>
 8013aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013aa6:	785b      	ldrb	r3, [r3, #1]
 8013aa8:	2b01      	cmp	r3, #1
 8013aaa:	d16c      	bne.n	8013b86 <PCD_EP_ISR_Handler+0x722>
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	2250      	movs	r2, #80	@ 0x50
 8013ab8:	5a9b      	ldrh	r3, [r3, r2]
 8013aba:	b29b      	uxth	r3, r3
 8013abc:	001a      	movs	r2, r3
 8013abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ac0:	189b      	adds	r3, r3, r2
 8013ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ac6:	781b      	ldrb	r3, [r3, #0]
 8013ac8:	00da      	lsls	r2, r3, #3
 8013aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013acc:	18d3      	adds	r3, r2, r3
 8013ace:	4a1e      	ldr	r2, [pc, #120]	@ (8013b48 <PCD_EP_ISR_Handler+0x6e4>)
 8013ad0:	4694      	mov	ip, r2
 8013ad2:	4463      	add	r3, ip
 8013ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ad8:	2200      	movs	r2, #0
 8013ada:	801a      	strh	r2, [r3, #0]
 8013adc:	e053      	b.n	8013b86 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ae6:	785b      	ldrb	r3, [r3, #1]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d133      	bne.n	8013b54 <PCD_EP_ISR_Handler+0x6f0>
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	637b      	str	r3, [r7, #52]	@ 0x34
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	2250      	movs	r2, #80	@ 0x50
 8013af8:	5a9b      	ldrh	r3, [r3, r2]
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	001a      	movs	r2, r3
 8013afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b00:	189b      	adds	r3, r3, r2
 8013b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b06:	781b      	ldrb	r3, [r3, #0]
 8013b08:	00da      	lsls	r2, r3, #3
 8013b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b0c:	18d3      	adds	r3, r2, r3
 8013b0e:	4a0b      	ldr	r2, [pc, #44]	@ (8013b3c <PCD_EP_ISR_Handler+0x6d8>)
 8013b10:	4694      	mov	ip, r2
 8013b12:	4463      	add	r3, ip
 8013b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8013b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b18:	881b      	ldrh	r3, [r3, #0]
 8013b1a:	b29b      	uxth	r3, r3
 8013b1c:	059b      	lsls	r3, r3, #22
 8013b1e:	0d9b      	lsrs	r3, r3, #22
 8013b20:	b29a      	uxth	r2, r3
 8013b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b24:	801a      	strh	r2, [r3, #0]
 8013b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b28:	881b      	ldrh	r3, [r3, #0]
 8013b2a:	b29b      	uxth	r3, r3
 8013b2c:	4a08      	ldr	r2, [pc, #32]	@ (8013b50 <PCD_EP_ISR_Handler+0x6ec>)
 8013b2e:	4313      	orrs	r3, r2
 8013b30:	b29a      	uxth	r2, r3
 8013b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b34:	801a      	strh	r2, [r3, #0]
 8013b36:	e026      	b.n	8013b86 <PCD_EP_ISR_Handler+0x722>
 8013b38:	00000f8f 	.word	0x00000f8f
 8013b3c:	00000406 	.word	0x00000406
 8013b40:	ffff8f8f 	.word	0xffff8f8f
 8013b44:	ffff80c0 	.word	0xffff80c0
 8013b48:	00000402 	.word	0x00000402
 8013b4c:	ffff8f0f 	.word	0xffff8f0f
 8013b50:	ffff8000 	.word	0xffff8000
 8013b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b56:	785b      	ldrb	r3, [r3, #1]
 8013b58:	2b01      	cmp	r3, #1
 8013b5a:	d114      	bne.n	8013b86 <PCD_EP_ISR_Handler+0x722>
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	2250      	movs	r2, #80	@ 0x50
 8013b62:	5a9b      	ldrh	r3, [r3, r2]
 8013b64:	b29b      	uxth	r3, r3
 8013b66:	001a      	movs	r2, r3
 8013b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b6a:	189b      	adds	r3, r3, r2
 8013b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b70:	781b      	ldrb	r3, [r3, #0]
 8013b72:	00da      	lsls	r2, r3, #3
 8013b74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b76:	18d3      	adds	r3, r2, r3
 8013b78:	4a3b      	ldr	r2, [pc, #236]	@ (8013c68 <PCD_EP_ISR_Handler+0x804>)
 8013b7a:	4694      	mov	ip, r2
 8013b7c:	4463      	add	r3, ip
 8013b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b82:	2200      	movs	r2, #0
 8013b84:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8013b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b88:	781a      	ldrb	r2, [r3, #0]
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	0011      	movs	r1, r2
 8013b8e:	0018      	movs	r0, r3
 8013b90:	f008 ff84 	bl	801ca9c <HAL_PCD_DataInStageCallback>
 8013b94:	e058      	b.n	8013c48 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8013b96:	234a      	movs	r3, #74	@ 0x4a
 8013b98:	18fb      	adds	r3, r7, r3
 8013b9a:	881a      	ldrh	r2, [r3, #0]
 8013b9c:	2380      	movs	r3, #128	@ 0x80
 8013b9e:	005b      	lsls	r3, r3, #1
 8013ba0:	4013      	ands	r3, r2
 8013ba2:	d149      	bne.n	8013c38 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	2250      	movs	r2, #80	@ 0x50
 8013baa:	5a9b      	ldrh	r3, [r3, r2]
 8013bac:	b29b      	uxth	r3, r3
 8013bae:	001a      	movs	r2, r3
 8013bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bb2:	781b      	ldrb	r3, [r3, #0]
 8013bb4:	00db      	lsls	r3, r3, #3
 8013bb6:	18d2      	adds	r2, r2, r3
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	18d3      	adds	r3, r2, r3
 8013bbe:	4a2b      	ldr	r2, [pc, #172]	@ (8013c6c <PCD_EP_ISR_Handler+0x808>)
 8013bc0:	4694      	mov	ip, r2
 8013bc2:	4463      	add	r3, ip
 8013bc4:	881a      	ldrh	r2, [r3, #0]
 8013bc6:	2140      	movs	r1, #64	@ 0x40
 8013bc8:	187b      	adds	r3, r7, r1
 8013bca:	0592      	lsls	r2, r2, #22
 8013bcc:	0d92      	lsrs	r2, r2, #22
 8013bce:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8013bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bd2:	699a      	ldr	r2, [r3, #24]
 8013bd4:	187b      	adds	r3, r7, r1
 8013bd6:	881b      	ldrh	r3, [r3, #0]
 8013bd8:	429a      	cmp	r2, r3
 8013bda:	d907      	bls.n	8013bec <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8013bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bde:	699a      	ldr	r2, [r3, #24]
 8013be0:	187b      	adds	r3, r7, r1
 8013be2:	881b      	ldrh	r3, [r3, #0]
 8013be4:	1ad2      	subs	r2, r2, r3
 8013be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013be8:	619a      	str	r2, [r3, #24]
 8013bea:	e002      	b.n	8013bf2 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8013bec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bee:	2200      	movs	r2, #0
 8013bf0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8013bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bf4:	699b      	ldr	r3, [r3, #24]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d107      	bne.n	8013c0a <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8013bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bfc:	781a      	ldrb	r2, [r3, #0]
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	0011      	movs	r1, r2
 8013c02:	0018      	movs	r0, r3
 8013c04:	f008 ff4a 	bl	801ca9c <HAL_PCD_DataInStageCallback>
 8013c08:	e01e      	b.n	8013c48 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8013c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c0c:	695a      	ldr	r2, [r3, #20]
 8013c0e:	2140      	movs	r1, #64	@ 0x40
 8013c10:	187b      	adds	r3, r7, r1
 8013c12:	881b      	ldrh	r3, [r3, #0]
 8013c14:	18d2      	adds	r2, r2, r3
 8013c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c18:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8013c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c1c:	69da      	ldr	r2, [r3, #28]
 8013c1e:	187b      	adds	r3, r7, r1
 8013c20:	881b      	ldrh	r3, [r3, #0]
 8013c22:	18d2      	adds	r2, r2, r3
 8013c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c26:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013c2e:	0011      	movs	r1, r2
 8013c30:	0018      	movs	r0, r3
 8013c32:	f005 fc3d 	bl	80194b0 <USB_EPStartXfer>
 8013c36:	e007      	b.n	8013c48 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8013c38:	234a      	movs	r3, #74	@ 0x4a
 8013c3a:	18fb      	adds	r3, r7, r3
 8013c3c:	881a      	ldrh	r2, [r3, #0]
 8013c3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	0018      	movs	r0, r3
 8013c44:	f000 f930 	bl	8013ea8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	2244      	movs	r2, #68	@ 0x44
 8013c4e:	5a9b      	ldrh	r3, [r3, r2]
 8013c50:	b29b      	uxth	r3, r3
 8013c52:	b21b      	sxth	r3, r3
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	da01      	bge.n	8013c5c <PCD_EP_ISR_Handler+0x7f8>
 8013c58:	f7ff fc0a 	bl	8013470 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8013c5c:	2300      	movs	r3, #0
}
 8013c5e:	0018      	movs	r0, r3
 8013c60:	46bd      	mov	sp, r7
 8013c62:	b016      	add	sp, #88	@ 0x58
 8013c64:	bdb0      	pop	{r4, r5, r7, pc}
 8013c66:	46c0      	nop			@ (mov r8, r8)
 8013c68:	00000406 	.word	0x00000406
 8013c6c:	00000402 	.word	0x00000402

08013c70 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8013c70:	b590      	push	{r4, r7, lr}
 8013c72:	b089      	sub	sp, #36	@ 0x24
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	60f8      	str	r0, [r7, #12]
 8013c78:	60b9      	str	r1, [r7, #8]
 8013c7a:	1dbb      	adds	r3, r7, #6
 8013c7c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8013c7e:	1dbb      	adds	r3, r7, #6
 8013c80:	881a      	ldrh	r2, [r3, #0]
 8013c82:	2380      	movs	r3, #128	@ 0x80
 8013c84:	01db      	lsls	r3, r3, #7
 8013c86:	4013      	ands	r3, r2
 8013c88:	d100      	bne.n	8013c8c <HAL_PCD_EP_DB_Receive+0x1c>
 8013c8a:	e07d      	b.n	8013d88 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	2250      	movs	r2, #80	@ 0x50
 8013c92:	5a9b      	ldrh	r3, [r3, r2]
 8013c94:	b29b      	uxth	r3, r3
 8013c96:	001a      	movs	r2, r3
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	781b      	ldrb	r3, [r3, #0]
 8013c9c:	00db      	lsls	r3, r3, #3
 8013c9e:	18d2      	adds	r2, r2, r3
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	18d3      	adds	r3, r2, r3
 8013ca6:	4a7a      	ldr	r2, [pc, #488]	@ (8013e90 <HAL_PCD_EP_DB_Receive+0x220>)
 8013ca8:	4694      	mov	ip, r2
 8013caa:	4463      	add	r3, ip
 8013cac:	881a      	ldrh	r2, [r3, #0]
 8013cae:	211a      	movs	r1, #26
 8013cb0:	187b      	adds	r3, r7, r1
 8013cb2:	0592      	lsls	r2, r2, #22
 8013cb4:	0d92      	lsrs	r2, r2, #22
 8013cb6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8013cb8:	68bb      	ldr	r3, [r7, #8]
 8013cba:	699a      	ldr	r2, [r3, #24]
 8013cbc:	187b      	adds	r3, r7, r1
 8013cbe:	881b      	ldrh	r3, [r3, #0]
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d307      	bcc.n	8013cd4 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8013cc4:	68bb      	ldr	r3, [r7, #8]
 8013cc6:	699a      	ldr	r2, [r3, #24]
 8013cc8:	187b      	adds	r3, r7, r1
 8013cca:	881b      	ldrh	r3, [r3, #0]
 8013ccc:	1ad2      	subs	r2, r2, r3
 8013cce:	68bb      	ldr	r3, [r7, #8]
 8013cd0:	619a      	str	r2, [r3, #24]
 8013cd2:	e002      	b.n	8013cda <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	699b      	ldr	r3, [r3, #24]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d121      	bne.n	8013d26 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	001a      	movs	r2, r3
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	781b      	ldrb	r3, [r3, #0]
 8013cec:	009b      	lsls	r3, r3, #2
 8013cee:	18d3      	adds	r3, r2, r3
 8013cf0:	881b      	ldrh	r3, [r3, #0]
 8013cf2:	b29a      	uxth	r2, r3
 8013cf4:	2018      	movs	r0, #24
 8013cf6:	183b      	adds	r3, r7, r0
 8013cf8:	4966      	ldr	r1, [pc, #408]	@ (8013e94 <HAL_PCD_EP_DB_Receive+0x224>)
 8013cfa:	400a      	ands	r2, r1
 8013cfc:	801a      	strh	r2, [r3, #0]
 8013cfe:	183b      	adds	r3, r7, r0
 8013d00:	183a      	adds	r2, r7, r0
 8013d02:	8812      	ldrh	r2, [r2, #0]
 8013d04:	2180      	movs	r1, #128	@ 0x80
 8013d06:	0189      	lsls	r1, r1, #6
 8013d08:	404a      	eors	r2, r1
 8013d0a:	801a      	strh	r2, [r3, #0]
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	001a      	movs	r2, r3
 8013d12:	68bb      	ldr	r3, [r7, #8]
 8013d14:	781b      	ldrb	r3, [r3, #0]
 8013d16:	009b      	lsls	r3, r3, #2
 8013d18:	18d3      	adds	r3, r2, r3
 8013d1a:	183a      	adds	r2, r7, r0
 8013d1c:	8812      	ldrh	r2, [r2, #0]
 8013d1e:	495e      	ldr	r1, [pc, #376]	@ (8013e98 <HAL_PCD_EP_DB_Receive+0x228>)
 8013d20:	430a      	orrs	r2, r1
 8013d22:	b292      	uxth	r2, r2
 8013d24:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8013d26:	1dbb      	adds	r3, r7, #6
 8013d28:	881b      	ldrh	r3, [r3, #0]
 8013d2a:	2240      	movs	r2, #64	@ 0x40
 8013d2c:	4013      	ands	r3, r2
 8013d2e:	d01a      	beq.n	8013d66 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	001a      	movs	r2, r3
 8013d36:	68bb      	ldr	r3, [r7, #8]
 8013d38:	781b      	ldrb	r3, [r3, #0]
 8013d3a:	009b      	lsls	r3, r3, #2
 8013d3c:	18d3      	adds	r3, r2, r3
 8013d3e:	881b      	ldrh	r3, [r3, #0]
 8013d40:	b29a      	uxth	r2, r3
 8013d42:	2016      	movs	r0, #22
 8013d44:	183b      	adds	r3, r7, r0
 8013d46:	4955      	ldr	r1, [pc, #340]	@ (8013e9c <HAL_PCD_EP_DB_Receive+0x22c>)
 8013d48:	400a      	ands	r2, r1
 8013d4a:	801a      	strh	r2, [r3, #0]
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	001a      	movs	r2, r3
 8013d52:	68bb      	ldr	r3, [r7, #8]
 8013d54:	781b      	ldrb	r3, [r3, #0]
 8013d56:	009b      	lsls	r3, r3, #2
 8013d58:	18d3      	adds	r3, r2, r3
 8013d5a:	183a      	adds	r2, r7, r0
 8013d5c:	8812      	ldrh	r2, [r2, #0]
 8013d5e:	4950      	ldr	r1, [pc, #320]	@ (8013ea0 <HAL_PCD_EP_DB_Receive+0x230>)
 8013d60:	430a      	orrs	r2, r1
 8013d62:	b292      	uxth	r2, r2
 8013d64:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8013d66:	241a      	movs	r4, #26
 8013d68:	193b      	adds	r3, r7, r4
 8013d6a:	881b      	ldrh	r3, [r3, #0]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d100      	bne.n	8013d72 <HAL_PCD_EP_DB_Receive+0x102>
 8013d70:	e086      	b.n	8013e80 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	6818      	ldr	r0, [r3, #0]
 8013d76:	68bb      	ldr	r3, [r7, #8]
 8013d78:	6959      	ldr	r1, [r3, #20]
 8013d7a:	68bb      	ldr	r3, [r7, #8]
 8013d7c:	891a      	ldrh	r2, [r3, #8]
 8013d7e:	193b      	adds	r3, r7, r4
 8013d80:	881b      	ldrh	r3, [r3, #0]
 8013d82:	f006 fe50 	bl	801aa26 <USB_ReadPMA>
 8013d86:	e07b      	b.n	8013e80 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	2250      	movs	r2, #80	@ 0x50
 8013d8e:	5a9b      	ldrh	r3, [r3, r2]
 8013d90:	b29b      	uxth	r3, r3
 8013d92:	001a      	movs	r2, r3
 8013d94:	68bb      	ldr	r3, [r7, #8]
 8013d96:	781b      	ldrb	r3, [r3, #0]
 8013d98:	00db      	lsls	r3, r3, #3
 8013d9a:	18d2      	adds	r2, r2, r3
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	18d3      	adds	r3, r2, r3
 8013da2:	4a40      	ldr	r2, [pc, #256]	@ (8013ea4 <HAL_PCD_EP_DB_Receive+0x234>)
 8013da4:	4694      	mov	ip, r2
 8013da6:	4463      	add	r3, ip
 8013da8:	881a      	ldrh	r2, [r3, #0]
 8013daa:	211a      	movs	r1, #26
 8013dac:	187b      	adds	r3, r7, r1
 8013dae:	0592      	lsls	r2, r2, #22
 8013db0:	0d92      	lsrs	r2, r2, #22
 8013db2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	699a      	ldr	r2, [r3, #24]
 8013db8:	187b      	adds	r3, r7, r1
 8013dba:	881b      	ldrh	r3, [r3, #0]
 8013dbc:	429a      	cmp	r2, r3
 8013dbe:	d307      	bcc.n	8013dd0 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8013dc0:	68bb      	ldr	r3, [r7, #8]
 8013dc2:	699a      	ldr	r2, [r3, #24]
 8013dc4:	187b      	adds	r3, r7, r1
 8013dc6:	881b      	ldrh	r3, [r3, #0]
 8013dc8:	1ad2      	subs	r2, r2, r3
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	619a      	str	r2, [r3, #24]
 8013dce:	e002      	b.n	8013dd6 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8013dd0:	68bb      	ldr	r3, [r7, #8]
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8013dd6:	68bb      	ldr	r3, [r7, #8]
 8013dd8:	699b      	ldr	r3, [r3, #24]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d121      	bne.n	8013e22 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	001a      	movs	r2, r3
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	781b      	ldrb	r3, [r3, #0]
 8013de8:	009b      	lsls	r3, r3, #2
 8013dea:	18d3      	adds	r3, r2, r3
 8013dec:	881b      	ldrh	r3, [r3, #0]
 8013dee:	b29a      	uxth	r2, r3
 8013df0:	201e      	movs	r0, #30
 8013df2:	183b      	adds	r3, r7, r0
 8013df4:	4927      	ldr	r1, [pc, #156]	@ (8013e94 <HAL_PCD_EP_DB_Receive+0x224>)
 8013df6:	400a      	ands	r2, r1
 8013df8:	801a      	strh	r2, [r3, #0]
 8013dfa:	183b      	adds	r3, r7, r0
 8013dfc:	183a      	adds	r2, r7, r0
 8013dfe:	8812      	ldrh	r2, [r2, #0]
 8013e00:	2180      	movs	r1, #128	@ 0x80
 8013e02:	0189      	lsls	r1, r1, #6
 8013e04:	404a      	eors	r2, r1
 8013e06:	801a      	strh	r2, [r3, #0]
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	001a      	movs	r2, r3
 8013e0e:	68bb      	ldr	r3, [r7, #8]
 8013e10:	781b      	ldrb	r3, [r3, #0]
 8013e12:	009b      	lsls	r3, r3, #2
 8013e14:	18d3      	adds	r3, r2, r3
 8013e16:	183a      	adds	r2, r7, r0
 8013e18:	8812      	ldrh	r2, [r2, #0]
 8013e1a:	491f      	ldr	r1, [pc, #124]	@ (8013e98 <HAL_PCD_EP_DB_Receive+0x228>)
 8013e1c:	430a      	orrs	r2, r1
 8013e1e:	b292      	uxth	r2, r2
 8013e20:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8013e22:	1dbb      	adds	r3, r7, #6
 8013e24:	881b      	ldrh	r3, [r3, #0]
 8013e26:	2240      	movs	r2, #64	@ 0x40
 8013e28:	4013      	ands	r3, r2
 8013e2a:	d11a      	bne.n	8013e62 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	001a      	movs	r2, r3
 8013e32:	68bb      	ldr	r3, [r7, #8]
 8013e34:	781b      	ldrb	r3, [r3, #0]
 8013e36:	009b      	lsls	r3, r3, #2
 8013e38:	18d3      	adds	r3, r2, r3
 8013e3a:	881b      	ldrh	r3, [r3, #0]
 8013e3c:	b29a      	uxth	r2, r3
 8013e3e:	201c      	movs	r0, #28
 8013e40:	183b      	adds	r3, r7, r0
 8013e42:	4916      	ldr	r1, [pc, #88]	@ (8013e9c <HAL_PCD_EP_DB_Receive+0x22c>)
 8013e44:	400a      	ands	r2, r1
 8013e46:	801a      	strh	r2, [r3, #0]
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	001a      	movs	r2, r3
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	781b      	ldrb	r3, [r3, #0]
 8013e52:	009b      	lsls	r3, r3, #2
 8013e54:	18d3      	adds	r3, r2, r3
 8013e56:	183a      	adds	r2, r7, r0
 8013e58:	8812      	ldrh	r2, [r2, #0]
 8013e5a:	4911      	ldr	r1, [pc, #68]	@ (8013ea0 <HAL_PCD_EP_DB_Receive+0x230>)
 8013e5c:	430a      	orrs	r2, r1
 8013e5e:	b292      	uxth	r2, r2
 8013e60:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8013e62:	241a      	movs	r4, #26
 8013e64:	193b      	adds	r3, r7, r4
 8013e66:	881b      	ldrh	r3, [r3, #0]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d009      	beq.n	8013e80 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	6818      	ldr	r0, [r3, #0]
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	6959      	ldr	r1, [r3, #20]
 8013e74:	68bb      	ldr	r3, [r7, #8]
 8013e76:	895a      	ldrh	r2, [r3, #10]
 8013e78:	193b      	adds	r3, r7, r4
 8013e7a:	881b      	ldrh	r3, [r3, #0]
 8013e7c:	f006 fdd3 	bl	801aa26 <USB_ReadPMA>
    }
  }

  return count;
 8013e80:	231a      	movs	r3, #26
 8013e82:	18fb      	adds	r3, r7, r3
 8013e84:	881b      	ldrh	r3, [r3, #0]
}
 8013e86:	0018      	movs	r0, r3
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	b009      	add	sp, #36	@ 0x24
 8013e8c:	bd90      	pop	{r4, r7, pc}
 8013e8e:	46c0      	nop			@ (mov r8, r8)
 8013e90:	00000402 	.word	0x00000402
 8013e94:	ffffbf8f 	.word	0xffffbf8f
 8013e98:	ffff8080 	.word	0xffff8080
 8013e9c:	ffff8f8f 	.word	0xffff8f8f
 8013ea0:	ffff80c0 	.word	0xffff80c0
 8013ea4:	00000406 	.word	0x00000406

08013ea8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b0a4      	sub	sp, #144	@ 0x90
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	60f8      	str	r0, [r7, #12]
 8013eb0:	60b9      	str	r1, [r7, #8]
 8013eb2:	1dbb      	adds	r3, r7, #6
 8013eb4:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8013eb6:	1dbb      	adds	r3, r7, #6
 8013eb8:	881b      	ldrh	r3, [r3, #0]
 8013eba:	2240      	movs	r2, #64	@ 0x40
 8013ebc:	4013      	ands	r3, r2
 8013ebe:	d100      	bne.n	8013ec2 <HAL_PCD_EP_DB_Transmit+0x1a>
 8013ec0:	e1e4      	b.n	801428c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	2250      	movs	r2, #80	@ 0x50
 8013ec8:	5a9b      	ldrh	r3, [r3, r2]
 8013eca:	b29b      	uxth	r3, r3
 8013ecc:	001a      	movs	r2, r3
 8013ece:	68bb      	ldr	r3, [r7, #8]
 8013ed0:	781b      	ldrb	r3, [r3, #0]
 8013ed2:	00db      	lsls	r3, r3, #3
 8013ed4:	18d2      	adds	r2, r2, r3
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	18d3      	adds	r3, r2, r3
 8013edc:	4ad0      	ldr	r2, [pc, #832]	@ (8014220 <HAL_PCD_EP_DB_Transmit+0x378>)
 8013ede:	4694      	mov	ip, r2
 8013ee0:	4463      	add	r3, ip
 8013ee2:	881a      	ldrh	r2, [r3, #0]
 8013ee4:	2186      	movs	r1, #134	@ 0x86
 8013ee6:	187b      	adds	r3, r7, r1
 8013ee8:	0592      	lsls	r2, r2, #22
 8013eea:	0d92      	lsrs	r2, r2, #22
 8013eec:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	699a      	ldr	r2, [r3, #24]
 8013ef2:	187b      	adds	r3, r7, r1
 8013ef4:	881b      	ldrh	r3, [r3, #0]
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d907      	bls.n	8013f0a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8013efa:	68bb      	ldr	r3, [r7, #8]
 8013efc:	699a      	ldr	r2, [r3, #24]
 8013efe:	187b      	adds	r3, r7, r1
 8013f00:	881b      	ldrh	r3, [r3, #0]
 8013f02:	1ad2      	subs	r2, r2, r3
 8013f04:	68bb      	ldr	r3, [r7, #8]
 8013f06:	619a      	str	r2, [r3, #24]
 8013f08:	e002      	b.n	8013f10 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8013f0a:	68bb      	ldr	r3, [r7, #8]
 8013f0c:	2200      	movs	r2, #0
 8013f0e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8013f10:	68bb      	ldr	r3, [r7, #8]
 8013f12:	699b      	ldr	r3, [r3, #24]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d000      	beq.n	8013f1a <HAL_PCD_EP_DB_Transmit+0x72>
 8013f18:	e0b5      	b.n	8014086 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	785b      	ldrb	r3, [r3, #1]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d125      	bne.n	8013f6e <HAL_PCD_EP_DB_Transmit+0xc6>
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	2250      	movs	r2, #80	@ 0x50
 8013f2e:	5a9b      	ldrh	r3, [r3, r2]
 8013f30:	b29b      	uxth	r3, r3
 8013f32:	001a      	movs	r2, r3
 8013f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f36:	189b      	adds	r3, r3, r2
 8013f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013f3a:	68bb      	ldr	r3, [r7, #8]
 8013f3c:	781b      	ldrb	r3, [r3, #0]
 8013f3e:	00da      	lsls	r2, r3, #3
 8013f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f42:	18d3      	adds	r3, r2, r3
 8013f44:	4ab6      	ldr	r2, [pc, #728]	@ (8014220 <HAL_PCD_EP_DB_Transmit+0x378>)
 8013f46:	4694      	mov	ip, r2
 8013f48:	4463      	add	r3, ip
 8013f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f4e:	881b      	ldrh	r3, [r3, #0]
 8013f50:	b29b      	uxth	r3, r3
 8013f52:	059b      	lsls	r3, r3, #22
 8013f54:	0d9b      	lsrs	r3, r3, #22
 8013f56:	b29a      	uxth	r2, r3
 8013f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f5a:	801a      	strh	r2, [r3, #0]
 8013f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f5e:	881b      	ldrh	r3, [r3, #0]
 8013f60:	b29b      	uxth	r3, r3
 8013f62:	4ab0      	ldr	r2, [pc, #704]	@ (8014224 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013f64:	4313      	orrs	r3, r2
 8013f66:	b29a      	uxth	r2, r3
 8013f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f6a:	801a      	strh	r2, [r3, #0]
 8013f6c:	e01b      	b.n	8013fa6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	785b      	ldrb	r3, [r3, #1]
 8013f72:	2b01      	cmp	r3, #1
 8013f74:	d117      	bne.n	8013fa6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	2250      	movs	r2, #80	@ 0x50
 8013f82:	5a9b      	ldrh	r3, [r3, r2]
 8013f84:	b29b      	uxth	r3, r3
 8013f86:	001a      	movs	r2, r3
 8013f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f8a:	189b      	adds	r3, r3, r2
 8013f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8013f8e:	68bb      	ldr	r3, [r7, #8]
 8013f90:	781b      	ldrb	r3, [r3, #0]
 8013f92:	00da      	lsls	r2, r3, #3
 8013f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f96:	18d3      	adds	r3, r2, r3
 8013f98:	4aa1      	ldr	r2, [pc, #644]	@ (8014220 <HAL_PCD_EP_DB_Transmit+0x378>)
 8013f9a:	4694      	mov	ip, r2
 8013f9c:	4463      	add	r3, ip
 8013f9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8013fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8013fac:	68bb      	ldr	r3, [r7, #8]
 8013fae:	785b      	ldrb	r3, [r3, #1]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d125      	bne.n	8014000 <HAL_PCD_EP_DB_Transmit+0x158>
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	61fb      	str	r3, [r7, #28]
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	2250      	movs	r2, #80	@ 0x50
 8013fc0:	5a9b      	ldrh	r3, [r3, r2]
 8013fc2:	b29b      	uxth	r3, r3
 8013fc4:	001a      	movs	r2, r3
 8013fc6:	69fb      	ldr	r3, [r7, #28]
 8013fc8:	189b      	adds	r3, r3, r2
 8013fca:	61fb      	str	r3, [r7, #28]
 8013fcc:	68bb      	ldr	r3, [r7, #8]
 8013fce:	781b      	ldrb	r3, [r3, #0]
 8013fd0:	00da      	lsls	r2, r3, #3
 8013fd2:	69fb      	ldr	r3, [r7, #28]
 8013fd4:	18d3      	adds	r3, r2, r3
 8013fd6:	4a94      	ldr	r2, [pc, #592]	@ (8014228 <HAL_PCD_EP_DB_Transmit+0x380>)
 8013fd8:	4694      	mov	ip, r2
 8013fda:	4463      	add	r3, ip
 8013fdc:	61bb      	str	r3, [r7, #24]
 8013fde:	69bb      	ldr	r3, [r7, #24]
 8013fe0:	881b      	ldrh	r3, [r3, #0]
 8013fe2:	b29b      	uxth	r3, r3
 8013fe4:	059b      	lsls	r3, r3, #22
 8013fe6:	0d9b      	lsrs	r3, r3, #22
 8013fe8:	b29a      	uxth	r2, r3
 8013fea:	69bb      	ldr	r3, [r7, #24]
 8013fec:	801a      	strh	r2, [r3, #0]
 8013fee:	69bb      	ldr	r3, [r7, #24]
 8013ff0:	881b      	ldrh	r3, [r3, #0]
 8013ff2:	b29b      	uxth	r3, r3
 8013ff4:	4a8b      	ldr	r2, [pc, #556]	@ (8014224 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013ff6:	4313      	orrs	r3, r2
 8013ff8:	b29a      	uxth	r2, r3
 8013ffa:	69bb      	ldr	r3, [r7, #24]
 8013ffc:	801a      	strh	r2, [r3, #0]
 8013ffe:	e018      	b.n	8014032 <HAL_PCD_EP_DB_Transmit+0x18a>
 8014000:	68bb      	ldr	r3, [r7, #8]
 8014002:	785b      	ldrb	r3, [r3, #1]
 8014004:	2b01      	cmp	r3, #1
 8014006:	d114      	bne.n	8014032 <HAL_PCD_EP_DB_Transmit+0x18a>
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	2250      	movs	r2, #80	@ 0x50
 801400e:	5a9b      	ldrh	r3, [r3, r2]
 8014010:	b29b      	uxth	r3, r3
 8014012:	001a      	movs	r2, r3
 8014014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014016:	189b      	adds	r3, r3, r2
 8014018:	627b      	str	r3, [r7, #36]	@ 0x24
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	781b      	ldrb	r3, [r3, #0]
 801401e:	00da      	lsls	r2, r3, #3
 8014020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014022:	18d3      	adds	r3, r2, r3
 8014024:	4a80      	ldr	r2, [pc, #512]	@ (8014228 <HAL_PCD_EP_DB_Transmit+0x380>)
 8014026:	4694      	mov	ip, r2
 8014028:	4463      	add	r3, ip
 801402a:	623b      	str	r3, [r7, #32]
 801402c:	6a3b      	ldr	r3, [r7, #32]
 801402e:	2200      	movs	r2, #0
 8014030:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014032:	68bb      	ldr	r3, [r7, #8]
 8014034:	781a      	ldrb	r2, [r3, #0]
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	0011      	movs	r1, r2
 801403a:	0018      	movs	r0, r3
 801403c:	f008 fd2e 	bl	801ca9c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014040:	1dbb      	adds	r3, r7, #6
 8014042:	881a      	ldrh	r2, [r3, #0]
 8014044:	2380      	movs	r3, #128	@ 0x80
 8014046:	01db      	lsls	r3, r3, #7
 8014048:	4013      	ands	r3, r2
 801404a:	d100      	bne.n	801404e <HAL_PCD_EP_DB_Transmit+0x1a6>
 801404c:	e309      	b.n	8014662 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	001a      	movs	r2, r3
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	781b      	ldrb	r3, [r3, #0]
 8014058:	009b      	lsls	r3, r3, #2
 801405a:	18d3      	adds	r3, r2, r3
 801405c:	881b      	ldrh	r3, [r3, #0]
 801405e:	b29a      	uxth	r2, r3
 8014060:	2016      	movs	r0, #22
 8014062:	183b      	adds	r3, r7, r0
 8014064:	4971      	ldr	r1, [pc, #452]	@ (801422c <HAL_PCD_EP_DB_Transmit+0x384>)
 8014066:	400a      	ands	r2, r1
 8014068:	801a      	strh	r2, [r3, #0]
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	001a      	movs	r2, r3
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	781b      	ldrb	r3, [r3, #0]
 8014074:	009b      	lsls	r3, r3, #2
 8014076:	18d3      	adds	r3, r2, r3
 8014078:	183a      	adds	r2, r7, r0
 801407a:	8812      	ldrh	r2, [r2, #0]
 801407c:	496c      	ldr	r1, [pc, #432]	@ (8014230 <HAL_PCD_EP_DB_Transmit+0x388>)
 801407e:	430a      	orrs	r2, r1
 8014080:	b292      	uxth	r2, r2
 8014082:	801a      	strh	r2, [r3, #0]
 8014084:	e2ed      	b.n	8014662 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014086:	1dbb      	adds	r3, r7, #6
 8014088:	881a      	ldrh	r2, [r3, #0]
 801408a:	2380      	movs	r3, #128	@ 0x80
 801408c:	01db      	lsls	r3, r3, #7
 801408e:	4013      	ands	r3, r2
 8014090:	d01a      	beq.n	80140c8 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	001a      	movs	r2, r3
 8014098:	68bb      	ldr	r3, [r7, #8]
 801409a:	781b      	ldrb	r3, [r3, #0]
 801409c:	009b      	lsls	r3, r3, #2
 801409e:	18d3      	adds	r3, r2, r3
 80140a0:	881b      	ldrh	r3, [r3, #0]
 80140a2:	b29a      	uxth	r2, r3
 80140a4:	208a      	movs	r0, #138	@ 0x8a
 80140a6:	183b      	adds	r3, r7, r0
 80140a8:	4960      	ldr	r1, [pc, #384]	@ (801422c <HAL_PCD_EP_DB_Transmit+0x384>)
 80140aa:	400a      	ands	r2, r1
 80140ac:	801a      	strh	r2, [r3, #0]
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	001a      	movs	r2, r3
 80140b4:	68bb      	ldr	r3, [r7, #8]
 80140b6:	781b      	ldrb	r3, [r3, #0]
 80140b8:	009b      	lsls	r3, r3, #2
 80140ba:	18d3      	adds	r3, r2, r3
 80140bc:	183a      	adds	r2, r7, r0
 80140be:	8812      	ldrh	r2, [r2, #0]
 80140c0:	495b      	ldr	r1, [pc, #364]	@ (8014230 <HAL_PCD_EP_DB_Transmit+0x388>)
 80140c2:	430a      	orrs	r2, r1
 80140c4:	b292      	uxth	r2, r2
 80140c6:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80140c8:	68bb      	ldr	r3, [r7, #8]
 80140ca:	2224      	movs	r2, #36	@ 0x24
 80140cc:	5c9b      	ldrb	r3, [r3, r2]
 80140ce:	2b01      	cmp	r3, #1
 80140d0:	d000      	beq.n	80140d4 <HAL_PCD_EP_DB_Transmit+0x22c>
 80140d2:	e2c6      	b.n	8014662 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	695a      	ldr	r2, [r3, #20]
 80140d8:	2186      	movs	r1, #134	@ 0x86
 80140da:	187b      	adds	r3, r7, r1
 80140dc:	881b      	ldrh	r3, [r3, #0]
 80140de:	18d2      	adds	r2, r2, r3
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	69da      	ldr	r2, [r3, #28]
 80140e8:	187b      	adds	r3, r7, r1
 80140ea:	881b      	ldrh	r3, [r3, #0]
 80140ec:	18d2      	adds	r2, r2, r3
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80140f2:	68bb      	ldr	r3, [r7, #8]
 80140f4:	6a1a      	ldr	r2, [r3, #32]
 80140f6:	68bb      	ldr	r3, [r7, #8]
 80140f8:	691b      	ldr	r3, [r3, #16]
 80140fa:	429a      	cmp	r2, r3
 80140fc:	d30c      	bcc.n	8014118 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80140fe:	68bb      	ldr	r3, [r7, #8]
 8014100:	691b      	ldr	r3, [r3, #16]
 8014102:	218c      	movs	r1, #140	@ 0x8c
 8014104:	187a      	adds	r2, r7, r1
 8014106:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8014108:	68bb      	ldr	r3, [r7, #8]
 801410a:	6a1a      	ldr	r2, [r3, #32]
 801410c:	187b      	adds	r3, r7, r1
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	1ad2      	subs	r2, r2, r3
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	621a      	str	r2, [r3, #32]
 8014116:	e01a      	b.n	801414e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8014118:	68bb      	ldr	r3, [r7, #8]
 801411a:	6a1b      	ldr	r3, [r3, #32]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d10a      	bne.n	8014136 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8014120:	2386      	movs	r3, #134	@ 0x86
 8014122:	18fb      	adds	r3, r7, r3
 8014124:	881b      	ldrh	r3, [r3, #0]
 8014126:	228c      	movs	r2, #140	@ 0x8c
 8014128:	18ba      	adds	r2, r7, r2
 801412a:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	2224      	movs	r2, #36	@ 0x24
 8014130:	2100      	movs	r1, #0
 8014132:	5499      	strb	r1, [r3, r2]
 8014134:	e00b      	b.n	801414e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	2224      	movs	r2, #36	@ 0x24
 801413a:	2100      	movs	r1, #0
 801413c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	6a1b      	ldr	r3, [r3, #32]
 8014142:	228c      	movs	r2, #140	@ 0x8c
 8014144:	18ba      	adds	r2, r7, r2
 8014146:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014148:	68bb      	ldr	r3, [r7, #8]
 801414a:	2200      	movs	r2, #0
 801414c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	785b      	ldrb	r3, [r3, #1]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d000      	beq.n	8014158 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8014156:	e06d      	b.n	8014234 <HAL_PCD_EP_DB_Transmit+0x38c>
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	2250      	movs	r2, #80	@ 0x50
 8014164:	5a9b      	ldrh	r3, [r3, r2]
 8014166:	b29b      	uxth	r3, r3
 8014168:	001a      	movs	r2, r3
 801416a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801416c:	189b      	adds	r3, r3, r2
 801416e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014170:	68bb      	ldr	r3, [r7, #8]
 8014172:	781b      	ldrb	r3, [r3, #0]
 8014174:	00da      	lsls	r2, r3, #3
 8014176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014178:	18d3      	adds	r3, r2, r3
 801417a:	4a29      	ldr	r2, [pc, #164]	@ (8014220 <HAL_PCD_EP_DB_Transmit+0x378>)
 801417c:	4694      	mov	ip, r2
 801417e:	4463      	add	r3, ip
 8014180:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014184:	881b      	ldrh	r3, [r3, #0]
 8014186:	b29b      	uxth	r3, r3
 8014188:	059b      	lsls	r3, r3, #22
 801418a:	0d9b      	lsrs	r3, r3, #22
 801418c:	b29a      	uxth	r2, r3
 801418e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014190:	801a      	strh	r2, [r3, #0]
 8014192:	228c      	movs	r2, #140	@ 0x8c
 8014194:	18bb      	adds	r3, r7, r2
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	2b3e      	cmp	r3, #62	@ 0x3e
 801419a:	d91a      	bls.n	80141d2 <HAL_PCD_EP_DB_Transmit+0x32a>
 801419c:	18bb      	adds	r3, r7, r2
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	095b      	lsrs	r3, r3, #5
 80141a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80141a4:	18bb      	adds	r3, r7, r2
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	221f      	movs	r2, #31
 80141aa:	4013      	ands	r3, r2
 80141ac:	d102      	bne.n	80141b4 <HAL_PCD_EP_DB_Transmit+0x30c>
 80141ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80141b0:	3b01      	subs	r3, #1
 80141b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80141b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141b6:	881b      	ldrh	r3, [r3, #0]
 80141b8:	b29a      	uxth	r2, r3
 80141ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80141bc:	b29b      	uxth	r3, r3
 80141be:	029b      	lsls	r3, r3, #10
 80141c0:	b29b      	uxth	r3, r3
 80141c2:	4313      	orrs	r3, r2
 80141c4:	b29b      	uxth	r3, r3
 80141c6:	4a17      	ldr	r2, [pc, #92]	@ (8014224 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80141c8:	4313      	orrs	r3, r2
 80141ca:	b29a      	uxth	r2, r3
 80141cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141ce:	801a      	strh	r2, [r3, #0]
 80141d0:	e04f      	b.n	8014272 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80141d2:	238c      	movs	r3, #140	@ 0x8c
 80141d4:	18fb      	adds	r3, r7, r3
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d108      	bne.n	80141ee <HAL_PCD_EP_DB_Transmit+0x346>
 80141dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141de:	881b      	ldrh	r3, [r3, #0]
 80141e0:	b29b      	uxth	r3, r3
 80141e2:	4a10      	ldr	r2, [pc, #64]	@ (8014224 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80141e4:	4313      	orrs	r3, r2
 80141e6:	b29a      	uxth	r2, r3
 80141e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141ea:	801a      	strh	r2, [r3, #0]
 80141ec:	e041      	b.n	8014272 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80141ee:	228c      	movs	r2, #140	@ 0x8c
 80141f0:	18bb      	adds	r3, r7, r2
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	085b      	lsrs	r3, r3, #1
 80141f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80141f8:	18bb      	adds	r3, r7, r2
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	2201      	movs	r2, #1
 80141fe:	4013      	ands	r3, r2
 8014200:	d002      	beq.n	8014208 <HAL_PCD_EP_DB_Transmit+0x360>
 8014202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014204:	3301      	adds	r3, #1
 8014206:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801420a:	881b      	ldrh	r3, [r3, #0]
 801420c:	b29a      	uxth	r2, r3
 801420e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014210:	b29b      	uxth	r3, r3
 8014212:	029b      	lsls	r3, r3, #10
 8014214:	b29b      	uxth	r3, r3
 8014216:	4313      	orrs	r3, r2
 8014218:	b29a      	uxth	r2, r3
 801421a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801421c:	801a      	strh	r2, [r3, #0]
 801421e:	e028      	b.n	8014272 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014220:	00000402 	.word	0x00000402
 8014224:	ffff8000 	.word	0xffff8000
 8014228:	00000406 	.word	0x00000406
 801422c:	ffff8f8f 	.word	0xffff8f8f
 8014230:	ffffc080 	.word	0xffffc080
 8014234:	68bb      	ldr	r3, [r7, #8]
 8014236:	785b      	ldrb	r3, [r3, #1]
 8014238:	2b01      	cmp	r3, #1
 801423a:	d11a      	bne.n	8014272 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	647b      	str	r3, [r7, #68]	@ 0x44
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	2250      	movs	r2, #80	@ 0x50
 8014248:	5a9b      	ldrh	r3, [r3, r2]
 801424a:	b29b      	uxth	r3, r3
 801424c:	001a      	movs	r2, r3
 801424e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014250:	189b      	adds	r3, r3, r2
 8014252:	647b      	str	r3, [r7, #68]	@ 0x44
 8014254:	68bb      	ldr	r3, [r7, #8]
 8014256:	781b      	ldrb	r3, [r3, #0]
 8014258:	00da      	lsls	r2, r3, #3
 801425a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801425c:	18d3      	adds	r3, r2, r3
 801425e:	4adb      	ldr	r2, [pc, #876]	@ (80145cc <HAL_PCD_EP_DB_Transmit+0x724>)
 8014260:	4694      	mov	ip, r2
 8014262:	4463      	add	r3, ip
 8014264:	643b      	str	r3, [r7, #64]	@ 0x40
 8014266:	238c      	movs	r3, #140	@ 0x8c
 8014268:	18fb      	adds	r3, r7, r3
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	b29a      	uxth	r2, r3
 801426e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014270:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	6818      	ldr	r0, [r3, #0]
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	6959      	ldr	r1, [r3, #20]
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	891a      	ldrh	r2, [r3, #8]
 801427e:	238c      	movs	r3, #140	@ 0x8c
 8014280:	18fb      	adds	r3, r7, r3
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	b29b      	uxth	r3, r3
 8014286:	f006 fb85 	bl	801a994 <USB_WritePMA>
 801428a:	e1ea      	b.n	8014662 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	2250      	movs	r2, #80	@ 0x50
 8014292:	5a9b      	ldrh	r3, [r3, r2]
 8014294:	b29b      	uxth	r3, r3
 8014296:	001a      	movs	r2, r3
 8014298:	68bb      	ldr	r3, [r7, #8]
 801429a:	781b      	ldrb	r3, [r3, #0]
 801429c:	00db      	lsls	r3, r3, #3
 801429e:	18d2      	adds	r2, r2, r3
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	18d3      	adds	r3, r2, r3
 80142a6:	4aca      	ldr	r2, [pc, #808]	@ (80145d0 <HAL_PCD_EP_DB_Transmit+0x728>)
 80142a8:	4694      	mov	ip, r2
 80142aa:	4463      	add	r3, ip
 80142ac:	881a      	ldrh	r2, [r3, #0]
 80142ae:	2186      	movs	r1, #134	@ 0x86
 80142b0:	187b      	adds	r3, r7, r1
 80142b2:	0592      	lsls	r2, r2, #22
 80142b4:	0d92      	lsrs	r2, r2, #22
 80142b6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80142b8:	68bb      	ldr	r3, [r7, #8]
 80142ba:	699a      	ldr	r2, [r3, #24]
 80142bc:	187b      	adds	r3, r7, r1
 80142be:	881b      	ldrh	r3, [r3, #0]
 80142c0:	429a      	cmp	r2, r3
 80142c2:	d307      	bcc.n	80142d4 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	699a      	ldr	r2, [r3, #24]
 80142c8:	187b      	adds	r3, r7, r1
 80142ca:	881b      	ldrh	r3, [r3, #0]
 80142cc:	1ad2      	subs	r2, r2, r3
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	619a      	str	r2, [r3, #24]
 80142d2:	e002      	b.n	80142da <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80142d4:	68bb      	ldr	r3, [r7, #8]
 80142d6:	2200      	movs	r2, #0
 80142d8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80142da:	68bb      	ldr	r3, [r7, #8]
 80142dc:	699b      	ldr	r3, [r3, #24]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d000      	beq.n	80142e4 <HAL_PCD_EP_DB_Transmit+0x43c>
 80142e2:	e0bb      	b.n	801445c <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80142e4:	68bb      	ldr	r3, [r7, #8]
 80142e6:	785b      	ldrb	r3, [r3, #1]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d125      	bne.n	8014338 <HAL_PCD_EP_DB_Transmit+0x490>
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	2250      	movs	r2, #80	@ 0x50
 80142f8:	5a9b      	ldrh	r3, [r3, r2]
 80142fa:	b29b      	uxth	r3, r3
 80142fc:	001a      	movs	r2, r3
 80142fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014300:	189b      	adds	r3, r3, r2
 8014302:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	781b      	ldrb	r3, [r3, #0]
 8014308:	00da      	lsls	r2, r3, #3
 801430a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801430c:	18d3      	adds	r3, r2, r3
 801430e:	4aaf      	ldr	r2, [pc, #700]	@ (80145cc <HAL_PCD_EP_DB_Transmit+0x724>)
 8014310:	4694      	mov	ip, r2
 8014312:	4463      	add	r3, ip
 8014314:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014316:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014318:	881b      	ldrh	r3, [r3, #0]
 801431a:	b29b      	uxth	r3, r3
 801431c:	059b      	lsls	r3, r3, #22
 801431e:	0d9b      	lsrs	r3, r3, #22
 8014320:	b29a      	uxth	r2, r3
 8014322:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014324:	801a      	strh	r2, [r3, #0]
 8014326:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014328:	881b      	ldrh	r3, [r3, #0]
 801432a:	b29b      	uxth	r3, r3
 801432c:	4aa9      	ldr	r2, [pc, #676]	@ (80145d4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801432e:	4313      	orrs	r3, r2
 8014330:	b29a      	uxth	r2, r3
 8014332:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014334:	801a      	strh	r2, [r3, #0]
 8014336:	e01b      	b.n	8014370 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	785b      	ldrb	r3, [r3, #1]
 801433c:	2b01      	cmp	r3, #1
 801433e:	d117      	bne.n	8014370 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	667b      	str	r3, [r7, #100]	@ 0x64
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	2250      	movs	r2, #80	@ 0x50
 801434c:	5a9b      	ldrh	r3, [r3, r2]
 801434e:	b29b      	uxth	r3, r3
 8014350:	001a      	movs	r2, r3
 8014352:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014354:	189b      	adds	r3, r3, r2
 8014356:	667b      	str	r3, [r7, #100]	@ 0x64
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	781b      	ldrb	r3, [r3, #0]
 801435c:	00da      	lsls	r2, r3, #3
 801435e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014360:	18d3      	adds	r3, r2, r3
 8014362:	4a9a      	ldr	r2, [pc, #616]	@ (80145cc <HAL_PCD_EP_DB_Transmit+0x724>)
 8014364:	4694      	mov	ip, r2
 8014366:	4463      	add	r3, ip
 8014368:	663b      	str	r3, [r7, #96]	@ 0x60
 801436a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801436c:	2200      	movs	r2, #0
 801436e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	677b      	str	r3, [r7, #116]	@ 0x74
 8014376:	68bb      	ldr	r3, [r7, #8]
 8014378:	785b      	ldrb	r3, [r3, #1]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d12b      	bne.n	80143d6 <HAL_PCD_EP_DB_Transmit+0x52e>
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	2250      	movs	r2, #80	@ 0x50
 801438a:	5a9b      	ldrh	r3, [r3, r2]
 801438c:	b29b      	uxth	r3, r3
 801438e:	001a      	movs	r2, r3
 8014390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014392:	189b      	adds	r3, r3, r2
 8014394:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014396:	68bb      	ldr	r3, [r7, #8]
 8014398:	781b      	ldrb	r3, [r3, #0]
 801439a:	00da      	lsls	r2, r3, #3
 801439c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801439e:	18d3      	adds	r3, r2, r3
 80143a0:	4a8b      	ldr	r2, [pc, #556]	@ (80145d0 <HAL_PCD_EP_DB_Transmit+0x728>)
 80143a2:	4694      	mov	ip, r2
 80143a4:	4463      	add	r3, ip
 80143a6:	2180      	movs	r1, #128	@ 0x80
 80143a8:	187a      	adds	r2, r7, r1
 80143aa:	6013      	str	r3, [r2, #0]
 80143ac:	187b      	adds	r3, r7, r1
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	881b      	ldrh	r3, [r3, #0]
 80143b2:	b29b      	uxth	r3, r3
 80143b4:	059b      	lsls	r3, r3, #22
 80143b6:	0d9b      	lsrs	r3, r3, #22
 80143b8:	b29a      	uxth	r2, r3
 80143ba:	187b      	adds	r3, r7, r1
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	801a      	strh	r2, [r3, #0]
 80143c0:	187b      	adds	r3, r7, r1
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	881b      	ldrh	r3, [r3, #0]
 80143c6:	b29b      	uxth	r3, r3
 80143c8:	4a82      	ldr	r2, [pc, #520]	@ (80145d4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80143ca:	4313      	orrs	r3, r2
 80143cc:	b29a      	uxth	r2, r3
 80143ce:	187b      	adds	r3, r7, r1
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	801a      	strh	r2, [r3, #0]
 80143d4:	e018      	b.n	8014408 <HAL_PCD_EP_DB_Transmit+0x560>
 80143d6:	68bb      	ldr	r3, [r7, #8]
 80143d8:	785b      	ldrb	r3, [r3, #1]
 80143da:	2b01      	cmp	r3, #1
 80143dc:	d114      	bne.n	8014408 <HAL_PCD_EP_DB_Transmit+0x560>
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	2250      	movs	r2, #80	@ 0x50
 80143e4:	5a9b      	ldrh	r3, [r3, r2]
 80143e6:	b29b      	uxth	r3, r3
 80143e8:	001a      	movs	r2, r3
 80143ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80143ec:	189b      	adds	r3, r3, r2
 80143ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80143f0:	68bb      	ldr	r3, [r7, #8]
 80143f2:	781b      	ldrb	r3, [r3, #0]
 80143f4:	00da      	lsls	r2, r3, #3
 80143f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80143f8:	18d3      	adds	r3, r2, r3
 80143fa:	4a75      	ldr	r2, [pc, #468]	@ (80145d0 <HAL_PCD_EP_DB_Transmit+0x728>)
 80143fc:	4694      	mov	ip, r2
 80143fe:	4463      	add	r3, ip
 8014400:	673b      	str	r3, [r7, #112]	@ 0x70
 8014402:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014404:	2200      	movs	r2, #0
 8014406:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014408:	68bb      	ldr	r3, [r7, #8]
 801440a:	781a      	ldrb	r2, [r3, #0]
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	0011      	movs	r1, r2
 8014410:	0018      	movs	r0, r3
 8014412:	f008 fb43 	bl	801ca9c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014416:	1dbb      	adds	r3, r7, #6
 8014418:	881a      	ldrh	r2, [r3, #0]
 801441a:	2380      	movs	r3, #128	@ 0x80
 801441c:	01db      	lsls	r3, r3, #7
 801441e:	4013      	ands	r3, r2
 8014420:	d000      	beq.n	8014424 <HAL_PCD_EP_DB_Transmit+0x57c>
 8014422:	e11e      	b.n	8014662 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	001a      	movs	r2, r3
 801442a:	68bb      	ldr	r3, [r7, #8]
 801442c:	781b      	ldrb	r3, [r3, #0]
 801442e:	009b      	lsls	r3, r3, #2
 8014430:	18d3      	adds	r3, r2, r3
 8014432:	881b      	ldrh	r3, [r3, #0]
 8014434:	b29a      	uxth	r2, r3
 8014436:	2088      	movs	r0, #136	@ 0x88
 8014438:	183b      	adds	r3, r7, r0
 801443a:	4967      	ldr	r1, [pc, #412]	@ (80145d8 <HAL_PCD_EP_DB_Transmit+0x730>)
 801443c:	400a      	ands	r2, r1
 801443e:	801a      	strh	r2, [r3, #0]
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	001a      	movs	r2, r3
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	781b      	ldrb	r3, [r3, #0]
 801444a:	009b      	lsls	r3, r3, #2
 801444c:	18d3      	adds	r3, r2, r3
 801444e:	183a      	adds	r2, r7, r0
 8014450:	8812      	ldrh	r2, [r2, #0]
 8014452:	4962      	ldr	r1, [pc, #392]	@ (80145dc <HAL_PCD_EP_DB_Transmit+0x734>)
 8014454:	430a      	orrs	r2, r1
 8014456:	b292      	uxth	r2, r2
 8014458:	801a      	strh	r2, [r3, #0]
 801445a:	e102      	b.n	8014662 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801445c:	1dbb      	adds	r3, r7, #6
 801445e:	881a      	ldrh	r2, [r3, #0]
 8014460:	2380      	movs	r3, #128	@ 0x80
 8014462:	01db      	lsls	r3, r3, #7
 8014464:	4013      	ands	r3, r2
 8014466:	d11a      	bne.n	801449e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	001a      	movs	r2, r3
 801446e:	68bb      	ldr	r3, [r7, #8]
 8014470:	781b      	ldrb	r3, [r3, #0]
 8014472:	009b      	lsls	r3, r3, #2
 8014474:	18d3      	adds	r3, r2, r3
 8014476:	881b      	ldrh	r3, [r3, #0]
 8014478:	b29a      	uxth	r2, r3
 801447a:	204e      	movs	r0, #78	@ 0x4e
 801447c:	183b      	adds	r3, r7, r0
 801447e:	4956      	ldr	r1, [pc, #344]	@ (80145d8 <HAL_PCD_EP_DB_Transmit+0x730>)
 8014480:	400a      	ands	r2, r1
 8014482:	801a      	strh	r2, [r3, #0]
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	001a      	movs	r2, r3
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	781b      	ldrb	r3, [r3, #0]
 801448e:	009b      	lsls	r3, r3, #2
 8014490:	18d3      	adds	r3, r2, r3
 8014492:	183a      	adds	r2, r7, r0
 8014494:	8812      	ldrh	r2, [r2, #0]
 8014496:	4951      	ldr	r1, [pc, #324]	@ (80145dc <HAL_PCD_EP_DB_Transmit+0x734>)
 8014498:	430a      	orrs	r2, r1
 801449a:	b292      	uxth	r2, r2
 801449c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801449e:	68bb      	ldr	r3, [r7, #8]
 80144a0:	2224      	movs	r2, #36	@ 0x24
 80144a2:	5c9b      	ldrb	r3, [r3, r2]
 80144a4:	2b01      	cmp	r3, #1
 80144a6:	d000      	beq.n	80144aa <HAL_PCD_EP_DB_Transmit+0x602>
 80144a8:	e0db      	b.n	8014662 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80144aa:	68bb      	ldr	r3, [r7, #8]
 80144ac:	695a      	ldr	r2, [r3, #20]
 80144ae:	2186      	movs	r1, #134	@ 0x86
 80144b0:	187b      	adds	r3, r7, r1
 80144b2:	881b      	ldrh	r3, [r3, #0]
 80144b4:	18d2      	adds	r2, r2, r3
 80144b6:	68bb      	ldr	r3, [r7, #8]
 80144b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80144ba:	68bb      	ldr	r3, [r7, #8]
 80144bc:	69da      	ldr	r2, [r3, #28]
 80144be:	187b      	adds	r3, r7, r1
 80144c0:	881b      	ldrh	r3, [r3, #0]
 80144c2:	18d2      	adds	r2, r2, r3
 80144c4:	68bb      	ldr	r3, [r7, #8]
 80144c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80144c8:	68bb      	ldr	r3, [r7, #8]
 80144ca:	6a1a      	ldr	r2, [r3, #32]
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	691b      	ldr	r3, [r3, #16]
 80144d0:	429a      	cmp	r2, r3
 80144d2:	d30c      	bcc.n	80144ee <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80144d4:	68bb      	ldr	r3, [r7, #8]
 80144d6:	691b      	ldr	r3, [r3, #16]
 80144d8:	218c      	movs	r1, #140	@ 0x8c
 80144da:	187a      	adds	r2, r7, r1
 80144dc:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80144de:	68bb      	ldr	r3, [r7, #8]
 80144e0:	6a1a      	ldr	r2, [r3, #32]
 80144e2:	187b      	adds	r3, r7, r1
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	1ad2      	subs	r2, r2, r3
 80144e8:	68bb      	ldr	r3, [r7, #8]
 80144ea:	621a      	str	r2, [r3, #32]
 80144ec:	e01a      	b.n	8014524 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80144ee:	68bb      	ldr	r3, [r7, #8]
 80144f0:	6a1b      	ldr	r3, [r3, #32]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d10a      	bne.n	801450c <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80144f6:	2386      	movs	r3, #134	@ 0x86
 80144f8:	18fb      	adds	r3, r7, r3
 80144fa:	881b      	ldrh	r3, [r3, #0]
 80144fc:	228c      	movs	r2, #140	@ 0x8c
 80144fe:	18ba      	adds	r2, r7, r2
 8014500:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	2224      	movs	r2, #36	@ 0x24
 8014506:	2100      	movs	r1, #0
 8014508:	5499      	strb	r1, [r3, r2]
 801450a:	e00b      	b.n	8014524 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 801450c:	68bb      	ldr	r3, [r7, #8]
 801450e:	6a1b      	ldr	r3, [r3, #32]
 8014510:	228c      	movs	r2, #140	@ 0x8c
 8014512:	18ba      	adds	r2, r7, r2
 8014514:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014516:	68bb      	ldr	r3, [r7, #8]
 8014518:	2200      	movs	r2, #0
 801451a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 801451c:	68bb      	ldr	r3, [r7, #8]
 801451e:	2224      	movs	r2, #36	@ 0x24
 8014520:	2100      	movs	r1, #0
 8014522:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	657b      	str	r3, [r7, #84]	@ 0x54
 801452a:	68bb      	ldr	r3, [r7, #8]
 801452c:	785b      	ldrb	r3, [r3, #1]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d000      	beq.n	8014534 <HAL_PCD_EP_DB_Transmit+0x68c>
 8014532:	e06e      	b.n	8014612 <HAL_PCD_EP_DB_Transmit+0x76a>
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	2250      	movs	r2, #80	@ 0x50
 8014540:	5a9b      	ldrh	r3, [r3, r2]
 8014542:	b29b      	uxth	r3, r3
 8014544:	001a      	movs	r2, r3
 8014546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014548:	189b      	adds	r3, r3, r2
 801454a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	781b      	ldrb	r3, [r3, #0]
 8014550:	00da      	lsls	r2, r3, #3
 8014552:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014554:	18d3      	adds	r3, r2, r3
 8014556:	4a1e      	ldr	r2, [pc, #120]	@ (80145d0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014558:	4694      	mov	ip, r2
 801455a:	4463      	add	r3, ip
 801455c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801455e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014560:	881b      	ldrh	r3, [r3, #0]
 8014562:	b29b      	uxth	r3, r3
 8014564:	059b      	lsls	r3, r3, #22
 8014566:	0d9b      	lsrs	r3, r3, #22
 8014568:	b29a      	uxth	r2, r3
 801456a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801456c:	801a      	strh	r2, [r3, #0]
 801456e:	228c      	movs	r2, #140	@ 0x8c
 8014570:	18bb      	adds	r3, r7, r2
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	2b3e      	cmp	r3, #62	@ 0x3e
 8014576:	d91a      	bls.n	80145ae <HAL_PCD_EP_DB_Transmit+0x706>
 8014578:	18bb      	adds	r3, r7, r2
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	095b      	lsrs	r3, r3, #5
 801457e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014580:	18bb      	adds	r3, r7, r2
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	221f      	movs	r2, #31
 8014586:	4013      	ands	r3, r2
 8014588:	d102      	bne.n	8014590 <HAL_PCD_EP_DB_Transmit+0x6e8>
 801458a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801458c:	3b01      	subs	r3, #1
 801458e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014590:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014592:	881b      	ldrh	r3, [r3, #0]
 8014594:	b29a      	uxth	r2, r3
 8014596:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014598:	b29b      	uxth	r3, r3
 801459a:	029b      	lsls	r3, r3, #10
 801459c:	b29b      	uxth	r3, r3
 801459e:	4313      	orrs	r3, r2
 80145a0:	b29b      	uxth	r3, r3
 80145a2:	4a0c      	ldr	r2, [pc, #48]	@ (80145d4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80145a4:	4313      	orrs	r3, r2
 80145a6:	b29a      	uxth	r2, r3
 80145a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80145aa:	801a      	strh	r2, [r3, #0]
 80145ac:	e04d      	b.n	801464a <HAL_PCD_EP_DB_Transmit+0x7a2>
 80145ae:	238c      	movs	r3, #140	@ 0x8c
 80145b0:	18fb      	adds	r3, r7, r3
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d113      	bne.n	80145e0 <HAL_PCD_EP_DB_Transmit+0x738>
 80145b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80145ba:	881b      	ldrh	r3, [r3, #0]
 80145bc:	b29b      	uxth	r3, r3
 80145be:	4a05      	ldr	r2, [pc, #20]	@ (80145d4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80145c0:	4313      	orrs	r3, r2
 80145c2:	b29a      	uxth	r2, r3
 80145c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80145c6:	801a      	strh	r2, [r3, #0]
 80145c8:	e03f      	b.n	801464a <HAL_PCD_EP_DB_Transmit+0x7a2>
 80145ca:	46c0      	nop			@ (mov r8, r8)
 80145cc:	00000402 	.word	0x00000402
 80145d0:	00000406 	.word	0x00000406
 80145d4:	ffff8000 	.word	0xffff8000
 80145d8:	ffff8f8f 	.word	0xffff8f8f
 80145dc:	ffffc080 	.word	0xffffc080
 80145e0:	228c      	movs	r2, #140	@ 0x8c
 80145e2:	18bb      	adds	r3, r7, r2
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	085b      	lsrs	r3, r3, #1
 80145e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80145ea:	18bb      	adds	r3, r7, r2
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	2201      	movs	r2, #1
 80145f0:	4013      	ands	r3, r2
 80145f2:	d002      	beq.n	80145fa <HAL_PCD_EP_DB_Transmit+0x752>
 80145f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80145f6:	3301      	adds	r3, #1
 80145f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80145fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80145fc:	881b      	ldrh	r3, [r3, #0]
 80145fe:	b29a      	uxth	r2, r3
 8014600:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014602:	b29b      	uxth	r3, r3
 8014604:	029b      	lsls	r3, r3, #10
 8014606:	b29b      	uxth	r3, r3
 8014608:	4313      	orrs	r3, r2
 801460a:	b29a      	uxth	r2, r3
 801460c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801460e:	801a      	strh	r2, [r3, #0]
 8014610:	e01b      	b.n	801464a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014612:	68bb      	ldr	r3, [r7, #8]
 8014614:	785b      	ldrb	r3, [r3, #1]
 8014616:	2b01      	cmp	r3, #1
 8014618:	d117      	bne.n	801464a <HAL_PCD_EP_DB_Transmit+0x7a2>
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	2250      	movs	r2, #80	@ 0x50
 8014620:	5a9b      	ldrh	r3, [r3, r2]
 8014622:	b29b      	uxth	r3, r3
 8014624:	001a      	movs	r2, r3
 8014626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014628:	189b      	adds	r3, r3, r2
 801462a:	657b      	str	r3, [r7, #84]	@ 0x54
 801462c:	68bb      	ldr	r3, [r7, #8]
 801462e:	781b      	ldrb	r3, [r3, #0]
 8014630:	00da      	lsls	r2, r3, #3
 8014632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014634:	18d3      	adds	r3, r2, r3
 8014636:	4a21      	ldr	r2, [pc, #132]	@ (80146bc <HAL_PCD_EP_DB_Transmit+0x814>)
 8014638:	4694      	mov	ip, r2
 801463a:	4463      	add	r3, ip
 801463c:	653b      	str	r3, [r7, #80]	@ 0x50
 801463e:	238c      	movs	r3, #140	@ 0x8c
 8014640:	18fb      	adds	r3, r7, r3
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	b29a      	uxth	r2, r3
 8014646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014648:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	6818      	ldr	r0, [r3, #0]
 801464e:	68bb      	ldr	r3, [r7, #8]
 8014650:	6959      	ldr	r1, [r3, #20]
 8014652:	68bb      	ldr	r3, [r7, #8]
 8014654:	895a      	ldrh	r2, [r3, #10]
 8014656:	238c      	movs	r3, #140	@ 0x8c
 8014658:	18fb      	adds	r3, r7, r3
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	b29b      	uxth	r3, r3
 801465e:	f006 f999 	bl	801a994 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	001a      	movs	r2, r3
 8014668:	68bb      	ldr	r3, [r7, #8]
 801466a:	781b      	ldrb	r3, [r3, #0]
 801466c:	009b      	lsls	r3, r3, #2
 801466e:	18d3      	adds	r3, r2, r3
 8014670:	881b      	ldrh	r3, [r3, #0]
 8014672:	b29a      	uxth	r2, r3
 8014674:	2014      	movs	r0, #20
 8014676:	183b      	adds	r3, r7, r0
 8014678:	4911      	ldr	r1, [pc, #68]	@ (80146c0 <HAL_PCD_EP_DB_Transmit+0x818>)
 801467a:	400a      	ands	r2, r1
 801467c:	801a      	strh	r2, [r3, #0]
 801467e:	183b      	adds	r3, r7, r0
 8014680:	183a      	adds	r2, r7, r0
 8014682:	8812      	ldrh	r2, [r2, #0]
 8014684:	2110      	movs	r1, #16
 8014686:	404a      	eors	r2, r1
 8014688:	801a      	strh	r2, [r3, #0]
 801468a:	183b      	adds	r3, r7, r0
 801468c:	183a      	adds	r2, r7, r0
 801468e:	8812      	ldrh	r2, [r2, #0]
 8014690:	2120      	movs	r1, #32
 8014692:	404a      	eors	r2, r1
 8014694:	801a      	strh	r2, [r3, #0]
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	001a      	movs	r2, r3
 801469c:	68bb      	ldr	r3, [r7, #8]
 801469e:	781b      	ldrb	r3, [r3, #0]
 80146a0:	009b      	lsls	r3, r3, #2
 80146a2:	18d3      	adds	r3, r2, r3
 80146a4:	183a      	adds	r2, r7, r0
 80146a6:	8812      	ldrh	r2, [r2, #0]
 80146a8:	4906      	ldr	r1, [pc, #24]	@ (80146c4 <HAL_PCD_EP_DB_Transmit+0x81c>)
 80146aa:	430a      	orrs	r2, r1
 80146ac:	b292      	uxth	r2, r2
 80146ae:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80146b0:	2300      	movs	r3, #0
}
 80146b2:	0018      	movs	r0, r3
 80146b4:	46bd      	mov	sp, r7
 80146b6:	b024      	add	sp, #144	@ 0x90
 80146b8:	bd80      	pop	{r7, pc}
 80146ba:	46c0      	nop			@ (mov r8, r8)
 80146bc:	00000406 	.word	0x00000406
 80146c0:	ffff8fbf 	.word	0xffff8fbf
 80146c4:	ffff8080 	.word	0xffff8080

080146c8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80146c8:	b590      	push	{r4, r7, lr}
 80146ca:	b087      	sub	sp, #28
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	60f8      	str	r0, [r7, #12]
 80146d0:	0008      	movs	r0, r1
 80146d2:	0011      	movs	r1, r2
 80146d4:	607b      	str	r3, [r7, #4]
 80146d6:	240a      	movs	r4, #10
 80146d8:	193b      	adds	r3, r7, r4
 80146da:	1c02      	adds	r2, r0, #0
 80146dc:	801a      	strh	r2, [r3, #0]
 80146de:	2308      	movs	r3, #8
 80146e0:	18fb      	adds	r3, r7, r3
 80146e2:	1c0a      	adds	r2, r1, #0
 80146e4:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80146e6:	0021      	movs	r1, r4
 80146e8:	187b      	adds	r3, r7, r1
 80146ea:	881b      	ldrh	r3, [r3, #0]
 80146ec:	2280      	movs	r2, #128	@ 0x80
 80146ee:	4013      	ands	r3, r2
 80146f0:	b29b      	uxth	r3, r3
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d00c      	beq.n	8014710 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80146f6:	187b      	adds	r3, r7, r1
 80146f8:	881b      	ldrh	r3, [r3, #0]
 80146fa:	2207      	movs	r2, #7
 80146fc:	4013      	ands	r3, r2
 80146fe:	1c5a      	adds	r2, r3, #1
 8014700:	0013      	movs	r3, r2
 8014702:	009b      	lsls	r3, r3, #2
 8014704:	189b      	adds	r3, r3, r2
 8014706:	00db      	lsls	r3, r3, #3
 8014708:	68fa      	ldr	r2, [r7, #12]
 801470a:	18d3      	adds	r3, r2, r3
 801470c:	617b      	str	r3, [r7, #20]
 801470e:	e00b      	b.n	8014728 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8014710:	230a      	movs	r3, #10
 8014712:	18fb      	adds	r3, r7, r3
 8014714:	881a      	ldrh	r2, [r3, #0]
 8014716:	0013      	movs	r3, r2
 8014718:	009b      	lsls	r3, r3, #2
 801471a:	189b      	adds	r3, r3, r2
 801471c:	00db      	lsls	r3, r3, #3
 801471e:	3369      	adds	r3, #105	@ 0x69
 8014720:	33ff      	adds	r3, #255	@ 0xff
 8014722:	68fa      	ldr	r2, [r7, #12]
 8014724:	18d3      	adds	r3, r2, r3
 8014726:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8014728:	2308      	movs	r3, #8
 801472a:	18fb      	adds	r3, r7, r3
 801472c:	881b      	ldrh	r3, [r3, #0]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d107      	bne.n	8014742 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8014732:	697b      	ldr	r3, [r7, #20]
 8014734:	2200      	movs	r2, #0
 8014736:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	b29a      	uxth	r2, r3
 801473c:	697b      	ldr	r3, [r7, #20]
 801473e:	80da      	strh	r2, [r3, #6]
 8014740:	e00b      	b.n	801475a <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8014742:	697b      	ldr	r3, [r7, #20]
 8014744:	2201      	movs	r2, #1
 8014746:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	b29a      	uxth	r2, r3
 801474c:	697b      	ldr	r3, [r7, #20]
 801474e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	0c1b      	lsrs	r3, r3, #16
 8014754:	b29a      	uxth	r2, r3
 8014756:	697b      	ldr	r3, [r7, #20]
 8014758:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801475a:	2300      	movs	r3, #0
}
 801475c:	0018      	movs	r0, r3
 801475e:	46bd      	mov	sp, r7
 8014760:	b007      	add	sp, #28
 8014762:	bd90      	pop	{r4, r7, pc}

08014764 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b084      	sub	sp, #16
 8014768:	af00      	add	r7, sp, #0
 801476a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8014772:	687a      	ldr	r2, [r7, #4]
 8014774:	23ba      	movs	r3, #186	@ 0xba
 8014776:	009b      	lsls	r3, r3, #2
 8014778:	2101      	movs	r1, #1
 801477a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 801477c:	687a      	ldr	r2, [r7, #4]
 801477e:	23b8      	movs	r3, #184	@ 0xb8
 8014780:	009b      	lsls	r3, r3, #2
 8014782:	2100      	movs	r1, #0
 8014784:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	2254      	movs	r2, #84	@ 0x54
 801478a:	5a9b      	ldrh	r3, [r3, r2]
 801478c:	b29b      	uxth	r3, r3
 801478e:	2201      	movs	r2, #1
 8014790:	4313      	orrs	r3, r2
 8014792:	b299      	uxth	r1, r3
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	2254      	movs	r2, #84	@ 0x54
 8014798:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	2254      	movs	r2, #84	@ 0x54
 801479e:	5a9b      	ldrh	r3, [r3, r2]
 80147a0:	b29b      	uxth	r3, r3
 80147a2:	2202      	movs	r2, #2
 80147a4:	4313      	orrs	r3, r2
 80147a6:	b299      	uxth	r1, r3
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	2254      	movs	r2, #84	@ 0x54
 80147ac:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80147ae:	2300      	movs	r3, #0
}
 80147b0:	0018      	movs	r0, r3
 80147b2:	46bd      	mov	sp, r7
 80147b4:	b004      	add	sp, #16
 80147b6:	bd80      	pop	{r7, pc}

080147b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b082      	sub	sp, #8
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
 80147c0:	000a      	movs	r2, r1
 80147c2:	1cfb      	adds	r3, r7, #3
 80147c4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80147c6:	46c0      	nop			@ (mov r8, r8)
 80147c8:	46bd      	mov	sp, r7
 80147ca:	b002      	add	sp, #8
 80147cc:	bd80      	pop	{r7, pc}
	...

080147d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80147d4:	4b04      	ldr	r3, [pc, #16]	@ (80147e8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80147d6:	681a      	ldr	r2, [r3, #0]
 80147d8:	4b03      	ldr	r3, [pc, #12]	@ (80147e8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80147da:	2180      	movs	r1, #128	@ 0x80
 80147dc:	0049      	lsls	r1, r1, #1
 80147de:	430a      	orrs	r2, r1
 80147e0:	601a      	str	r2, [r3, #0]
}
 80147e2:	46c0      	nop			@ (mov r8, r8)
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}
 80147e8:	40007000 	.word	0x40007000

080147ec <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 80147f0:	4b04      	ldr	r3, [pc, #16]	@ (8014804 <HAL_PWR_DisableBkUpAccess+0x18>)
 80147f2:	681a      	ldr	r2, [r3, #0]
 80147f4:	4b03      	ldr	r3, [pc, #12]	@ (8014804 <HAL_PWR_DisableBkUpAccess+0x18>)
 80147f6:	4904      	ldr	r1, [pc, #16]	@ (8014808 <HAL_PWR_DisableBkUpAccess+0x1c>)
 80147f8:	400a      	ands	r2, r1
 80147fa:	601a      	str	r2, [r3, #0]
}
 80147fc:	46c0      	nop			@ (mov r8, r8)
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}
 8014802:	46c0      	nop			@ (mov r8, r8)
 8014804:	40007000 	.word	0x40007000
 8014808:	fffffeff 	.word	0xfffffeff

0801480c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b086      	sub	sp, #24
 8014810:	af00      	add	r7, sp, #0
 8014812:	6078      	str	r0, [r7, #4]
 8014814:	000a      	movs	r2, r1
 8014816:	1cfb      	adds	r3, r7, #3
 8014818:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801481a:	2300      	movs	r3, #0
 801481c:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801481e:	4b25      	ldr	r3, [pc, #148]	@ (80148b4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014820:	681a      	ldr	r2, [r3, #0]
 8014822:	2380      	movs	r3, #128	@ 0x80
 8014824:	009b      	lsls	r3, r3, #2
 8014826:	4013      	ands	r3, r2
 8014828:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801482a:	4b23      	ldr	r3, [pc, #140]	@ (80148b8 <HAL_PWR_EnterSTOPMode+0xac>)
 801482c:	6a1b      	ldr	r3, [r3, #32]
 801482e:	2201      	movs	r2, #1
 8014830:	4013      	ands	r3, r2
 8014832:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8014834:	693b      	ldr	r3, [r7, #16]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d008      	beq.n	801484c <HAL_PWR_EnterSTOPMode+0x40>
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d005      	beq.n	801484c <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8014840:	4b1c      	ldr	r3, [pc, #112]	@ (80148b4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014842:	681a      	ldr	r2, [r3, #0]
 8014844:	4b1b      	ldr	r3, [pc, #108]	@ (80148b4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014846:	491d      	ldr	r1, [pc, #116]	@ (80148bc <HAL_PWR_EnterSTOPMode+0xb0>)
 8014848:	400a      	ands	r2, r1
 801484a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 801484c:	4b19      	ldr	r3, [pc, #100]	@ (80148b4 <HAL_PWR_EnterSTOPMode+0xa8>)
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8014852:	697b      	ldr	r3, [r7, #20]
 8014854:	2203      	movs	r2, #3
 8014856:	4393      	bics	r3, r2
 8014858:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801485a:	697a      	ldr	r2, [r7, #20]
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	4313      	orrs	r3, r2
 8014860:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8014862:	4b14      	ldr	r3, [pc, #80]	@ (80148b4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014864:	697a      	ldr	r2, [r7, #20]
 8014866:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014868:	4b15      	ldr	r3, [pc, #84]	@ (80148c0 <HAL_PWR_EnterSTOPMode+0xb4>)
 801486a:	691a      	ldr	r2, [r3, #16]
 801486c:	4b14      	ldr	r3, [pc, #80]	@ (80148c0 <HAL_PWR_EnterSTOPMode+0xb4>)
 801486e:	2104      	movs	r1, #4
 8014870:	430a      	orrs	r2, r1
 8014872:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8014874:	1cfb      	adds	r3, r7, #3
 8014876:	781b      	ldrb	r3, [r3, #0]
 8014878:	2b01      	cmp	r3, #1
 801487a:	d101      	bne.n	8014880 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801487c:	bf30      	wfi
 801487e:	e002      	b.n	8014886 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8014880:	bf40      	sev
    __WFE();
 8014882:	bf20      	wfe
    __WFE();
 8014884:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014886:	4b0e      	ldr	r3, [pc, #56]	@ (80148c0 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014888:	691a      	ldr	r2, [r3, #16]
 801488a:	4b0d      	ldr	r3, [pc, #52]	@ (80148c0 <HAL_PWR_EnterSTOPMode+0xb4>)
 801488c:	2104      	movs	r1, #4
 801488e:	438a      	bics	r2, r1
 8014890:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8014892:	693b      	ldr	r3, [r7, #16]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d009      	beq.n	80148ac <HAL_PWR_EnterSTOPMode+0xa0>
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d006      	beq.n	80148ac <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801489e:	4b05      	ldr	r3, [pc, #20]	@ (80148b4 <HAL_PWR_EnterSTOPMode+0xa8>)
 80148a0:	681a      	ldr	r2, [r3, #0]
 80148a2:	4b04      	ldr	r3, [pc, #16]	@ (80148b4 <HAL_PWR_EnterSTOPMode+0xa8>)
 80148a4:	2180      	movs	r1, #128	@ 0x80
 80148a6:	0089      	lsls	r1, r1, #2
 80148a8:	430a      	orrs	r2, r1
 80148aa:	601a      	str	r2, [r3, #0]
  }
}
 80148ac:	46c0      	nop			@ (mov r8, r8)
 80148ae:	46bd      	mov	sp, r7
 80148b0:	b006      	add	sp, #24
 80148b2:	bd80      	pop	{r7, pc}
 80148b4:	40007000 	.word	0x40007000
 80148b8:	40010000 	.word	0x40010000
 80148bc:	fffffdff 	.word	0xfffffdff
 80148c0:	e000ed00 	.word	0xe000ed00

080148c4 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80148c8:	4b07      	ldr	r3, [pc, #28]	@ (80148e8 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80148ca:	681a      	ldr	r2, [r3, #0]
 80148cc:	4b06      	ldr	r3, [pc, #24]	@ (80148e8 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80148ce:	2102      	movs	r1, #2
 80148d0:	430a      	orrs	r2, r1
 80148d2:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80148d4:	4b05      	ldr	r3, [pc, #20]	@ (80148ec <HAL_PWR_EnterSTANDBYMode+0x28>)
 80148d6:	691a      	ldr	r2, [r3, #16]
 80148d8:	4b04      	ldr	r3, [pc, #16]	@ (80148ec <HAL_PWR_EnterSTANDBYMode+0x28>)
 80148da:	2104      	movs	r1, #4
 80148dc:	430a      	orrs	r2, r1
 80148de:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80148e0:	bf30      	wfi
}
 80148e2:	46c0      	nop			@ (mov r8, r8)
 80148e4:	46bd      	mov	sp, r7
 80148e6:	bd80      	pop	{r7, pc}
 80148e8:	40007000 	.word	0x40007000
 80148ec:	e000ed00 	.word	0xe000ed00

080148f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80148f0:	b5b0      	push	{r4, r5, r7, lr}
 80148f2:	b08a      	sub	sp, #40	@ 0x28
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d102      	bne.n	8014904 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80148fe:	2301      	movs	r3, #1
 8014900:	f000 fbbf 	bl	8015082 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014904:	4bc9      	ldr	r3, [pc, #804]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014906:	68db      	ldr	r3, [r3, #12]
 8014908:	220c      	movs	r2, #12
 801490a:	4013      	ands	r3, r2
 801490c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801490e:	4bc7      	ldr	r3, [pc, #796]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014910:	68da      	ldr	r2, [r3, #12]
 8014912:	2380      	movs	r3, #128	@ 0x80
 8014914:	025b      	lsls	r3, r3, #9
 8014916:	4013      	ands	r3, r2
 8014918:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	2201      	movs	r2, #1
 8014920:	4013      	ands	r3, r2
 8014922:	d100      	bne.n	8014926 <HAL_RCC_OscConfig+0x36>
 8014924:	e07e      	b.n	8014a24 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8014926:	69fb      	ldr	r3, [r7, #28]
 8014928:	2b08      	cmp	r3, #8
 801492a:	d007      	beq.n	801493c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801492c:	69fb      	ldr	r3, [r7, #28]
 801492e:	2b0c      	cmp	r3, #12
 8014930:	d112      	bne.n	8014958 <HAL_RCC_OscConfig+0x68>
 8014932:	69ba      	ldr	r2, [r7, #24]
 8014934:	2380      	movs	r3, #128	@ 0x80
 8014936:	025b      	lsls	r3, r3, #9
 8014938:	429a      	cmp	r2, r3
 801493a:	d10d      	bne.n	8014958 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801493c:	4bbb      	ldr	r3, [pc, #748]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 801493e:	681a      	ldr	r2, [r3, #0]
 8014940:	2380      	movs	r3, #128	@ 0x80
 8014942:	029b      	lsls	r3, r3, #10
 8014944:	4013      	ands	r3, r2
 8014946:	d100      	bne.n	801494a <HAL_RCC_OscConfig+0x5a>
 8014948:	e06b      	b.n	8014a22 <HAL_RCC_OscConfig+0x132>
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	685b      	ldr	r3, [r3, #4]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d167      	bne.n	8014a22 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8014952:	2301      	movs	r3, #1
 8014954:	f000 fb95 	bl	8015082 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	685a      	ldr	r2, [r3, #4]
 801495c:	2380      	movs	r3, #128	@ 0x80
 801495e:	025b      	lsls	r3, r3, #9
 8014960:	429a      	cmp	r2, r3
 8014962:	d107      	bne.n	8014974 <HAL_RCC_OscConfig+0x84>
 8014964:	4bb1      	ldr	r3, [pc, #708]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014966:	681a      	ldr	r2, [r3, #0]
 8014968:	4bb0      	ldr	r3, [pc, #704]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 801496a:	2180      	movs	r1, #128	@ 0x80
 801496c:	0249      	lsls	r1, r1, #9
 801496e:	430a      	orrs	r2, r1
 8014970:	601a      	str	r2, [r3, #0]
 8014972:	e027      	b.n	80149c4 <HAL_RCC_OscConfig+0xd4>
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	685a      	ldr	r2, [r3, #4]
 8014978:	23a0      	movs	r3, #160	@ 0xa0
 801497a:	02db      	lsls	r3, r3, #11
 801497c:	429a      	cmp	r2, r3
 801497e:	d10e      	bne.n	801499e <HAL_RCC_OscConfig+0xae>
 8014980:	4baa      	ldr	r3, [pc, #680]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014982:	681a      	ldr	r2, [r3, #0]
 8014984:	4ba9      	ldr	r3, [pc, #676]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014986:	2180      	movs	r1, #128	@ 0x80
 8014988:	02c9      	lsls	r1, r1, #11
 801498a:	430a      	orrs	r2, r1
 801498c:	601a      	str	r2, [r3, #0]
 801498e:	4ba7      	ldr	r3, [pc, #668]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014990:	681a      	ldr	r2, [r3, #0]
 8014992:	4ba6      	ldr	r3, [pc, #664]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014994:	2180      	movs	r1, #128	@ 0x80
 8014996:	0249      	lsls	r1, r1, #9
 8014998:	430a      	orrs	r2, r1
 801499a:	601a      	str	r2, [r3, #0]
 801499c:	e012      	b.n	80149c4 <HAL_RCC_OscConfig+0xd4>
 801499e:	4ba3      	ldr	r3, [pc, #652]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 80149a0:	681a      	ldr	r2, [r3, #0]
 80149a2:	4ba2      	ldr	r3, [pc, #648]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 80149a4:	49a2      	ldr	r1, [pc, #648]	@ (8014c30 <HAL_RCC_OscConfig+0x340>)
 80149a6:	400a      	ands	r2, r1
 80149a8:	601a      	str	r2, [r3, #0]
 80149aa:	4ba0      	ldr	r3, [pc, #640]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 80149ac:	681a      	ldr	r2, [r3, #0]
 80149ae:	2380      	movs	r3, #128	@ 0x80
 80149b0:	025b      	lsls	r3, r3, #9
 80149b2:	4013      	ands	r3, r2
 80149b4:	60fb      	str	r3, [r7, #12]
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	4b9c      	ldr	r3, [pc, #624]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 80149ba:	681a      	ldr	r2, [r3, #0]
 80149bc:	4b9b      	ldr	r3, [pc, #620]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 80149be:	499d      	ldr	r1, [pc, #628]	@ (8014c34 <HAL_RCC_OscConfig+0x344>)
 80149c0:	400a      	ands	r2, r1
 80149c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	685b      	ldr	r3, [r3, #4]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d015      	beq.n	80149f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80149cc:	f7f9 fe60 	bl	800e690 <HAL_GetTick>
 80149d0:	0003      	movs	r3, r0
 80149d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80149d4:	e009      	b.n	80149ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80149d6:	f7f9 fe5b 	bl	800e690 <HAL_GetTick>
 80149da:	0002      	movs	r2, r0
 80149dc:	697b      	ldr	r3, [r7, #20]
 80149de:	1ad3      	subs	r3, r2, r3
 80149e0:	2b64      	cmp	r3, #100	@ 0x64
 80149e2:	d902      	bls.n	80149ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80149e4:	2303      	movs	r3, #3
 80149e6:	f000 fb4c 	bl	8015082 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80149ea:	4b90      	ldr	r3, [pc, #576]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 80149ec:	681a      	ldr	r2, [r3, #0]
 80149ee:	2380      	movs	r3, #128	@ 0x80
 80149f0:	029b      	lsls	r3, r3, #10
 80149f2:	4013      	ands	r3, r2
 80149f4:	d0ef      	beq.n	80149d6 <HAL_RCC_OscConfig+0xe6>
 80149f6:	e015      	b.n	8014a24 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80149f8:	f7f9 fe4a 	bl	800e690 <HAL_GetTick>
 80149fc:	0003      	movs	r3, r0
 80149fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014a00:	e008      	b.n	8014a14 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014a02:	f7f9 fe45 	bl	800e690 <HAL_GetTick>
 8014a06:	0002      	movs	r2, r0
 8014a08:	697b      	ldr	r3, [r7, #20]
 8014a0a:	1ad3      	subs	r3, r2, r3
 8014a0c:	2b64      	cmp	r3, #100	@ 0x64
 8014a0e:	d901      	bls.n	8014a14 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8014a10:	2303      	movs	r3, #3
 8014a12:	e336      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014a14:	4b85      	ldr	r3, [pc, #532]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014a16:	681a      	ldr	r2, [r3, #0]
 8014a18:	2380      	movs	r3, #128	@ 0x80
 8014a1a:	029b      	lsls	r3, r3, #10
 8014a1c:	4013      	ands	r3, r2
 8014a1e:	d1f0      	bne.n	8014a02 <HAL_RCC_OscConfig+0x112>
 8014a20:	e000      	b.n	8014a24 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014a22:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	2202      	movs	r2, #2
 8014a2a:	4013      	ands	r3, r2
 8014a2c:	d100      	bne.n	8014a30 <HAL_RCC_OscConfig+0x140>
 8014a2e:	e099      	b.n	8014b64 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	68db      	ldr	r3, [r3, #12]
 8014a34:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8014a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a38:	2220      	movs	r2, #32
 8014a3a:	4013      	ands	r3, r2
 8014a3c:	d009      	beq.n	8014a52 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8014a3e:	4b7b      	ldr	r3, [pc, #492]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014a40:	681a      	ldr	r2, [r3, #0]
 8014a42:	4b7a      	ldr	r3, [pc, #488]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014a44:	2120      	movs	r1, #32
 8014a46:	430a      	orrs	r2, r1
 8014a48:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8014a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a4c:	2220      	movs	r2, #32
 8014a4e:	4393      	bics	r3, r2
 8014a50:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8014a52:	69fb      	ldr	r3, [r7, #28]
 8014a54:	2b04      	cmp	r3, #4
 8014a56:	d005      	beq.n	8014a64 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8014a58:	69fb      	ldr	r3, [r7, #28]
 8014a5a:	2b0c      	cmp	r3, #12
 8014a5c:	d13e      	bne.n	8014adc <HAL_RCC_OscConfig+0x1ec>
 8014a5e:	69bb      	ldr	r3, [r7, #24]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d13b      	bne.n	8014adc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8014a64:	4b71      	ldr	r3, [pc, #452]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	2204      	movs	r2, #4
 8014a6a:	4013      	ands	r3, r2
 8014a6c:	d004      	beq.n	8014a78 <HAL_RCC_OscConfig+0x188>
 8014a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d101      	bne.n	8014a78 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8014a74:	2301      	movs	r3, #1
 8014a76:	e304      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014a78:	4b6c      	ldr	r3, [pc, #432]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014a7a:	685b      	ldr	r3, [r3, #4]
 8014a7c:	4a6e      	ldr	r2, [pc, #440]	@ (8014c38 <HAL_RCC_OscConfig+0x348>)
 8014a7e:	4013      	ands	r3, r2
 8014a80:	0019      	movs	r1, r3
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	691b      	ldr	r3, [r3, #16]
 8014a86:	021a      	lsls	r2, r3, #8
 8014a88:	4b68      	ldr	r3, [pc, #416]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014a8a:	430a      	orrs	r2, r1
 8014a8c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8014a8e:	4b67      	ldr	r3, [pc, #412]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	2209      	movs	r2, #9
 8014a94:	4393      	bics	r3, r2
 8014a96:	0019      	movs	r1, r3
 8014a98:	4b64      	ldr	r3, [pc, #400]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014a9c:	430a      	orrs	r2, r1
 8014a9e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014aa0:	f000 fc42 	bl	8015328 <HAL_RCC_GetSysClockFreq>
 8014aa4:	0001      	movs	r1, r0
 8014aa6:	4b61      	ldr	r3, [pc, #388]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014aa8:	68db      	ldr	r3, [r3, #12]
 8014aaa:	091b      	lsrs	r3, r3, #4
 8014aac:	220f      	movs	r2, #15
 8014aae:	4013      	ands	r3, r2
 8014ab0:	4a62      	ldr	r2, [pc, #392]	@ (8014c3c <HAL_RCC_OscConfig+0x34c>)
 8014ab2:	5cd3      	ldrb	r3, [r2, r3]
 8014ab4:	000a      	movs	r2, r1
 8014ab6:	40da      	lsrs	r2, r3
 8014ab8:	4b61      	ldr	r3, [pc, #388]	@ (8014c40 <HAL_RCC_OscConfig+0x350>)
 8014aba:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8014abc:	4b61      	ldr	r3, [pc, #388]	@ (8014c44 <HAL_RCC_OscConfig+0x354>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	2513      	movs	r5, #19
 8014ac2:	197c      	adds	r4, r7, r5
 8014ac4:	0018      	movs	r0, r3
 8014ac6:	f7f9 fd9d 	bl	800e604 <HAL_InitTick>
 8014aca:	0003      	movs	r3, r0
 8014acc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8014ace:	197b      	adds	r3, r7, r5
 8014ad0:	781b      	ldrb	r3, [r3, #0]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d046      	beq.n	8014b64 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8014ad6:	197b      	adds	r3, r7, r5
 8014ad8:	781b      	ldrb	r3, [r3, #0]
 8014ada:	e2d2      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8014adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d027      	beq.n	8014b32 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8014ae2:	4b52      	ldr	r3, [pc, #328]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	2209      	movs	r2, #9
 8014ae8:	4393      	bics	r3, r2
 8014aea:	0019      	movs	r1, r3
 8014aec:	4b4f      	ldr	r3, [pc, #316]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014af0:	430a      	orrs	r2, r1
 8014af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014af4:	f7f9 fdcc 	bl	800e690 <HAL_GetTick>
 8014af8:	0003      	movs	r3, r0
 8014afa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014afc:	e008      	b.n	8014b10 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014afe:	f7f9 fdc7 	bl	800e690 <HAL_GetTick>
 8014b02:	0002      	movs	r2, r0
 8014b04:	697b      	ldr	r3, [r7, #20]
 8014b06:	1ad3      	subs	r3, r2, r3
 8014b08:	2b02      	cmp	r3, #2
 8014b0a:	d901      	bls.n	8014b10 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8014b0c:	2303      	movs	r3, #3
 8014b0e:	e2b8      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014b10:	4b46      	ldr	r3, [pc, #280]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	2204      	movs	r2, #4
 8014b16:	4013      	ands	r3, r2
 8014b18:	d0f1      	beq.n	8014afe <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014b1a:	4b44      	ldr	r3, [pc, #272]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014b1c:	685b      	ldr	r3, [r3, #4]
 8014b1e:	4a46      	ldr	r2, [pc, #280]	@ (8014c38 <HAL_RCC_OscConfig+0x348>)
 8014b20:	4013      	ands	r3, r2
 8014b22:	0019      	movs	r1, r3
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	691b      	ldr	r3, [r3, #16]
 8014b28:	021a      	lsls	r2, r3, #8
 8014b2a:	4b40      	ldr	r3, [pc, #256]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014b2c:	430a      	orrs	r2, r1
 8014b2e:	605a      	str	r2, [r3, #4]
 8014b30:	e018      	b.n	8014b64 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014b32:	4b3e      	ldr	r3, [pc, #248]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014b34:	681a      	ldr	r2, [r3, #0]
 8014b36:	4b3d      	ldr	r3, [pc, #244]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014b38:	2101      	movs	r1, #1
 8014b3a:	438a      	bics	r2, r1
 8014b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014b3e:	f7f9 fda7 	bl	800e690 <HAL_GetTick>
 8014b42:	0003      	movs	r3, r0
 8014b44:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8014b46:	e008      	b.n	8014b5a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014b48:	f7f9 fda2 	bl	800e690 <HAL_GetTick>
 8014b4c:	0002      	movs	r2, r0
 8014b4e:	697b      	ldr	r3, [r7, #20]
 8014b50:	1ad3      	subs	r3, r2, r3
 8014b52:	2b02      	cmp	r3, #2
 8014b54:	d901      	bls.n	8014b5a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8014b56:	2303      	movs	r3, #3
 8014b58:	e293      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8014b5a:	4b34      	ldr	r3, [pc, #208]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	2204      	movs	r2, #4
 8014b60:	4013      	ands	r3, r2
 8014b62:	d1f1      	bne.n	8014b48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	2210      	movs	r2, #16
 8014b6a:	4013      	ands	r3, r2
 8014b6c:	d100      	bne.n	8014b70 <HAL_RCC_OscConfig+0x280>
 8014b6e:	e0a2      	b.n	8014cb6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8014b70:	69fb      	ldr	r3, [r7, #28]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d140      	bne.n	8014bf8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8014b76:	4b2d      	ldr	r3, [pc, #180]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014b78:	681a      	ldr	r2, [r3, #0]
 8014b7a:	2380      	movs	r3, #128	@ 0x80
 8014b7c:	009b      	lsls	r3, r3, #2
 8014b7e:	4013      	ands	r3, r2
 8014b80:	d005      	beq.n	8014b8e <HAL_RCC_OscConfig+0x29e>
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	69db      	ldr	r3, [r3, #28]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d101      	bne.n	8014b8e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8014b8a:	2301      	movs	r3, #1
 8014b8c:	e279      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014b8e:	4b27      	ldr	r3, [pc, #156]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014b90:	685b      	ldr	r3, [r3, #4]
 8014b92:	4a2d      	ldr	r2, [pc, #180]	@ (8014c48 <HAL_RCC_OscConfig+0x358>)
 8014b94:	4013      	ands	r3, r2
 8014b96:	0019      	movs	r1, r3
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014b9c:	4b23      	ldr	r3, [pc, #140]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014b9e:	430a      	orrs	r2, r1
 8014ba0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014ba2:	4b22      	ldr	r3, [pc, #136]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014ba4:	685b      	ldr	r3, [r3, #4]
 8014ba6:	021b      	lsls	r3, r3, #8
 8014ba8:	0a19      	lsrs	r1, r3, #8
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	6a1b      	ldr	r3, [r3, #32]
 8014bae:	061a      	lsls	r2, r3, #24
 8014bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014bb2:	430a      	orrs	r2, r1
 8014bb4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014bba:	0b5b      	lsrs	r3, r3, #13
 8014bbc:	3301      	adds	r3, #1
 8014bbe:	2280      	movs	r2, #128	@ 0x80
 8014bc0:	0212      	lsls	r2, r2, #8
 8014bc2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8014bc4:	4b19      	ldr	r3, [pc, #100]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014bc6:	68db      	ldr	r3, [r3, #12]
 8014bc8:	091b      	lsrs	r3, r3, #4
 8014bca:	210f      	movs	r1, #15
 8014bcc:	400b      	ands	r3, r1
 8014bce:	491b      	ldr	r1, [pc, #108]	@ (8014c3c <HAL_RCC_OscConfig+0x34c>)
 8014bd0:	5ccb      	ldrb	r3, [r1, r3]
 8014bd2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8014bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8014c40 <HAL_RCC_OscConfig+0x350>)
 8014bd6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8014bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8014c44 <HAL_RCC_OscConfig+0x354>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	2513      	movs	r5, #19
 8014bde:	197c      	adds	r4, r7, r5
 8014be0:	0018      	movs	r0, r3
 8014be2:	f7f9 fd0f 	bl	800e604 <HAL_InitTick>
 8014be6:	0003      	movs	r3, r0
 8014be8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8014bea:	197b      	adds	r3, r7, r5
 8014bec:	781b      	ldrb	r3, [r3, #0]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d061      	beq.n	8014cb6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8014bf2:	197b      	adds	r3, r7, r5
 8014bf4:	781b      	ldrb	r3, [r3, #0]
 8014bf6:	e244      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	69db      	ldr	r3, [r3, #28]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d040      	beq.n	8014c82 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8014c00:	4b0a      	ldr	r3, [pc, #40]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014c02:	681a      	ldr	r2, [r3, #0]
 8014c04:	4b09      	ldr	r3, [pc, #36]	@ (8014c2c <HAL_RCC_OscConfig+0x33c>)
 8014c06:	2180      	movs	r1, #128	@ 0x80
 8014c08:	0049      	lsls	r1, r1, #1
 8014c0a:	430a      	orrs	r2, r1
 8014c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014c0e:	f7f9 fd3f 	bl	800e690 <HAL_GetTick>
 8014c12:	0003      	movs	r3, r0
 8014c14:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8014c16:	e019      	b.n	8014c4c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8014c18:	f7f9 fd3a 	bl	800e690 <HAL_GetTick>
 8014c1c:	0002      	movs	r2, r0
 8014c1e:	697b      	ldr	r3, [r7, #20]
 8014c20:	1ad3      	subs	r3, r2, r3
 8014c22:	2b02      	cmp	r3, #2
 8014c24:	d912      	bls.n	8014c4c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8014c26:	2303      	movs	r3, #3
 8014c28:	e22b      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
 8014c2a:	46c0      	nop			@ (mov r8, r8)
 8014c2c:	40021000 	.word	0x40021000
 8014c30:	fffeffff 	.word	0xfffeffff
 8014c34:	fffbffff 	.word	0xfffbffff
 8014c38:	ffffe0ff 	.word	0xffffe0ff
 8014c3c:	08024ce8 	.word	0x08024ce8
 8014c40:	200000cc 	.word	0x200000cc
 8014c44:	200000dc 	.word	0x200000dc
 8014c48:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8014c4c:	4bca      	ldr	r3, [pc, #808]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014c4e:	681a      	ldr	r2, [r3, #0]
 8014c50:	2380      	movs	r3, #128	@ 0x80
 8014c52:	009b      	lsls	r3, r3, #2
 8014c54:	4013      	ands	r3, r2
 8014c56:	d0df      	beq.n	8014c18 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014c58:	4bc7      	ldr	r3, [pc, #796]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014c5a:	685b      	ldr	r3, [r3, #4]
 8014c5c:	4ac7      	ldr	r2, [pc, #796]	@ (8014f7c <HAL_RCC_OscConfig+0x68c>)
 8014c5e:	4013      	ands	r3, r2
 8014c60:	0019      	movs	r1, r3
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014c66:	4bc4      	ldr	r3, [pc, #784]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014c68:	430a      	orrs	r2, r1
 8014c6a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014c6c:	4bc2      	ldr	r3, [pc, #776]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014c6e:	685b      	ldr	r3, [r3, #4]
 8014c70:	021b      	lsls	r3, r3, #8
 8014c72:	0a19      	lsrs	r1, r3, #8
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	6a1b      	ldr	r3, [r3, #32]
 8014c78:	061a      	lsls	r2, r3, #24
 8014c7a:	4bbf      	ldr	r3, [pc, #764]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014c7c:	430a      	orrs	r2, r1
 8014c7e:	605a      	str	r2, [r3, #4]
 8014c80:	e019      	b.n	8014cb6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8014c82:	4bbd      	ldr	r3, [pc, #756]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014c84:	681a      	ldr	r2, [r3, #0]
 8014c86:	4bbc      	ldr	r3, [pc, #752]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014c88:	49bd      	ldr	r1, [pc, #756]	@ (8014f80 <HAL_RCC_OscConfig+0x690>)
 8014c8a:	400a      	ands	r2, r1
 8014c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014c8e:	f7f9 fcff 	bl	800e690 <HAL_GetTick>
 8014c92:	0003      	movs	r3, r0
 8014c94:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8014c96:	e008      	b.n	8014caa <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8014c98:	f7f9 fcfa 	bl	800e690 <HAL_GetTick>
 8014c9c:	0002      	movs	r2, r0
 8014c9e:	697b      	ldr	r3, [r7, #20]
 8014ca0:	1ad3      	subs	r3, r2, r3
 8014ca2:	2b02      	cmp	r3, #2
 8014ca4:	d901      	bls.n	8014caa <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8014ca6:	2303      	movs	r3, #3
 8014ca8:	e1eb      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8014caa:	4bb3      	ldr	r3, [pc, #716]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014cac:	681a      	ldr	r2, [r3, #0]
 8014cae:	2380      	movs	r3, #128	@ 0x80
 8014cb0:	009b      	lsls	r3, r3, #2
 8014cb2:	4013      	ands	r3, r2
 8014cb4:	d1f0      	bne.n	8014c98 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	2208      	movs	r2, #8
 8014cbc:	4013      	ands	r3, r2
 8014cbe:	d036      	beq.n	8014d2e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	695b      	ldr	r3, [r3, #20]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d019      	beq.n	8014cfc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014cc8:	4bab      	ldr	r3, [pc, #684]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014cca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014ccc:	4baa      	ldr	r3, [pc, #680]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014cce:	2101      	movs	r1, #1
 8014cd0:	430a      	orrs	r2, r1
 8014cd2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014cd4:	f7f9 fcdc 	bl	800e690 <HAL_GetTick>
 8014cd8:	0003      	movs	r3, r0
 8014cda:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014cdc:	e008      	b.n	8014cf0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014cde:	f7f9 fcd7 	bl	800e690 <HAL_GetTick>
 8014ce2:	0002      	movs	r2, r0
 8014ce4:	697b      	ldr	r3, [r7, #20]
 8014ce6:	1ad3      	subs	r3, r2, r3
 8014ce8:	2b02      	cmp	r3, #2
 8014cea:	d901      	bls.n	8014cf0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8014cec:	2303      	movs	r3, #3
 8014cee:	e1c8      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014cf0:	4ba1      	ldr	r3, [pc, #644]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014cf4:	2202      	movs	r2, #2
 8014cf6:	4013      	ands	r3, r2
 8014cf8:	d0f1      	beq.n	8014cde <HAL_RCC_OscConfig+0x3ee>
 8014cfa:	e018      	b.n	8014d2e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014cfc:	4b9e      	ldr	r3, [pc, #632]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014cfe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014d00:	4b9d      	ldr	r3, [pc, #628]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014d02:	2101      	movs	r1, #1
 8014d04:	438a      	bics	r2, r1
 8014d06:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014d08:	f7f9 fcc2 	bl	800e690 <HAL_GetTick>
 8014d0c:	0003      	movs	r3, r0
 8014d0e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014d10:	e008      	b.n	8014d24 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014d12:	f7f9 fcbd 	bl	800e690 <HAL_GetTick>
 8014d16:	0002      	movs	r2, r0
 8014d18:	697b      	ldr	r3, [r7, #20]
 8014d1a:	1ad3      	subs	r3, r2, r3
 8014d1c:	2b02      	cmp	r3, #2
 8014d1e:	d901      	bls.n	8014d24 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8014d20:	2303      	movs	r3, #3
 8014d22:	e1ae      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014d24:	4b94      	ldr	r3, [pc, #592]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014d28:	2202      	movs	r2, #2
 8014d2a:	4013      	ands	r3, r2
 8014d2c:	d1f1      	bne.n	8014d12 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	2204      	movs	r2, #4
 8014d34:	4013      	ands	r3, r2
 8014d36:	d100      	bne.n	8014d3a <HAL_RCC_OscConfig+0x44a>
 8014d38:	e0ae      	b.n	8014e98 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8014d3a:	2023      	movs	r0, #35	@ 0x23
 8014d3c:	183b      	adds	r3, r7, r0
 8014d3e:	2200      	movs	r2, #0
 8014d40:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014d42:	4b8d      	ldr	r3, [pc, #564]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014d44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014d46:	2380      	movs	r3, #128	@ 0x80
 8014d48:	055b      	lsls	r3, r3, #21
 8014d4a:	4013      	ands	r3, r2
 8014d4c:	d109      	bne.n	8014d62 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014d4e:	4b8a      	ldr	r3, [pc, #552]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014d50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014d52:	4b89      	ldr	r3, [pc, #548]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014d54:	2180      	movs	r1, #128	@ 0x80
 8014d56:	0549      	lsls	r1, r1, #21
 8014d58:	430a      	orrs	r2, r1
 8014d5a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8014d5c:	183b      	adds	r3, r7, r0
 8014d5e:	2201      	movs	r2, #1
 8014d60:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014d62:	4b88      	ldr	r3, [pc, #544]	@ (8014f84 <HAL_RCC_OscConfig+0x694>)
 8014d64:	681a      	ldr	r2, [r3, #0]
 8014d66:	2380      	movs	r3, #128	@ 0x80
 8014d68:	005b      	lsls	r3, r3, #1
 8014d6a:	4013      	ands	r3, r2
 8014d6c:	d11a      	bne.n	8014da4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8014d6e:	4b85      	ldr	r3, [pc, #532]	@ (8014f84 <HAL_RCC_OscConfig+0x694>)
 8014d70:	681a      	ldr	r2, [r3, #0]
 8014d72:	4b84      	ldr	r3, [pc, #528]	@ (8014f84 <HAL_RCC_OscConfig+0x694>)
 8014d74:	2180      	movs	r1, #128	@ 0x80
 8014d76:	0049      	lsls	r1, r1, #1
 8014d78:	430a      	orrs	r2, r1
 8014d7a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014d7c:	f7f9 fc88 	bl	800e690 <HAL_GetTick>
 8014d80:	0003      	movs	r3, r0
 8014d82:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014d84:	e008      	b.n	8014d98 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014d86:	f7f9 fc83 	bl	800e690 <HAL_GetTick>
 8014d8a:	0002      	movs	r2, r0
 8014d8c:	697b      	ldr	r3, [r7, #20]
 8014d8e:	1ad3      	subs	r3, r2, r3
 8014d90:	2b64      	cmp	r3, #100	@ 0x64
 8014d92:	d901      	bls.n	8014d98 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8014d94:	2303      	movs	r3, #3
 8014d96:	e174      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014d98:	4b7a      	ldr	r3, [pc, #488]	@ (8014f84 <HAL_RCC_OscConfig+0x694>)
 8014d9a:	681a      	ldr	r2, [r3, #0]
 8014d9c:	2380      	movs	r3, #128	@ 0x80
 8014d9e:	005b      	lsls	r3, r3, #1
 8014da0:	4013      	ands	r3, r2
 8014da2:	d0f0      	beq.n	8014d86 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	689a      	ldr	r2, [r3, #8]
 8014da8:	2380      	movs	r3, #128	@ 0x80
 8014daa:	005b      	lsls	r3, r3, #1
 8014dac:	429a      	cmp	r2, r3
 8014dae:	d107      	bne.n	8014dc0 <HAL_RCC_OscConfig+0x4d0>
 8014db0:	4b71      	ldr	r3, [pc, #452]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014db2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014db4:	4b70      	ldr	r3, [pc, #448]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014db6:	2180      	movs	r1, #128	@ 0x80
 8014db8:	0049      	lsls	r1, r1, #1
 8014dba:	430a      	orrs	r2, r1
 8014dbc:	651a      	str	r2, [r3, #80]	@ 0x50
 8014dbe:	e031      	b.n	8014e24 <HAL_RCC_OscConfig+0x534>
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	689b      	ldr	r3, [r3, #8]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d10c      	bne.n	8014de2 <HAL_RCC_OscConfig+0x4f2>
 8014dc8:	4b6b      	ldr	r3, [pc, #428]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014dca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014dcc:	4b6a      	ldr	r3, [pc, #424]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014dce:	496c      	ldr	r1, [pc, #432]	@ (8014f80 <HAL_RCC_OscConfig+0x690>)
 8014dd0:	400a      	ands	r2, r1
 8014dd2:	651a      	str	r2, [r3, #80]	@ 0x50
 8014dd4:	4b68      	ldr	r3, [pc, #416]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014dd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014dd8:	4b67      	ldr	r3, [pc, #412]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014dda:	496b      	ldr	r1, [pc, #428]	@ (8014f88 <HAL_RCC_OscConfig+0x698>)
 8014ddc:	400a      	ands	r2, r1
 8014dde:	651a      	str	r2, [r3, #80]	@ 0x50
 8014de0:	e020      	b.n	8014e24 <HAL_RCC_OscConfig+0x534>
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	689a      	ldr	r2, [r3, #8]
 8014de6:	23a0      	movs	r3, #160	@ 0xa0
 8014de8:	00db      	lsls	r3, r3, #3
 8014dea:	429a      	cmp	r2, r3
 8014dec:	d10e      	bne.n	8014e0c <HAL_RCC_OscConfig+0x51c>
 8014dee:	4b62      	ldr	r3, [pc, #392]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014df0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014df2:	4b61      	ldr	r3, [pc, #388]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014df4:	2180      	movs	r1, #128	@ 0x80
 8014df6:	00c9      	lsls	r1, r1, #3
 8014df8:	430a      	orrs	r2, r1
 8014dfa:	651a      	str	r2, [r3, #80]	@ 0x50
 8014dfc:	4b5e      	ldr	r3, [pc, #376]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014dfe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014e00:	4b5d      	ldr	r3, [pc, #372]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014e02:	2180      	movs	r1, #128	@ 0x80
 8014e04:	0049      	lsls	r1, r1, #1
 8014e06:	430a      	orrs	r2, r1
 8014e08:	651a      	str	r2, [r3, #80]	@ 0x50
 8014e0a:	e00b      	b.n	8014e24 <HAL_RCC_OscConfig+0x534>
 8014e0c:	4b5a      	ldr	r3, [pc, #360]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014e0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014e10:	4b59      	ldr	r3, [pc, #356]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014e12:	495b      	ldr	r1, [pc, #364]	@ (8014f80 <HAL_RCC_OscConfig+0x690>)
 8014e14:	400a      	ands	r2, r1
 8014e16:	651a      	str	r2, [r3, #80]	@ 0x50
 8014e18:	4b57      	ldr	r3, [pc, #348]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014e1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014e1c:	4b56      	ldr	r3, [pc, #344]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014e1e:	495a      	ldr	r1, [pc, #360]	@ (8014f88 <HAL_RCC_OscConfig+0x698>)
 8014e20:	400a      	ands	r2, r1
 8014e22:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	689b      	ldr	r3, [r3, #8]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d015      	beq.n	8014e58 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014e2c:	f7f9 fc30 	bl	800e690 <HAL_GetTick>
 8014e30:	0003      	movs	r3, r0
 8014e32:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014e34:	e009      	b.n	8014e4a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014e36:	f7f9 fc2b 	bl	800e690 <HAL_GetTick>
 8014e3a:	0002      	movs	r2, r0
 8014e3c:	697b      	ldr	r3, [r7, #20]
 8014e3e:	1ad3      	subs	r3, r2, r3
 8014e40:	4a52      	ldr	r2, [pc, #328]	@ (8014f8c <HAL_RCC_OscConfig+0x69c>)
 8014e42:	4293      	cmp	r3, r2
 8014e44:	d901      	bls.n	8014e4a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8014e46:	2303      	movs	r3, #3
 8014e48:	e11b      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014e4a:	4b4b      	ldr	r3, [pc, #300]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014e4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014e4e:	2380      	movs	r3, #128	@ 0x80
 8014e50:	009b      	lsls	r3, r3, #2
 8014e52:	4013      	ands	r3, r2
 8014e54:	d0ef      	beq.n	8014e36 <HAL_RCC_OscConfig+0x546>
 8014e56:	e014      	b.n	8014e82 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014e58:	f7f9 fc1a 	bl	800e690 <HAL_GetTick>
 8014e5c:	0003      	movs	r3, r0
 8014e5e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014e60:	e009      	b.n	8014e76 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014e62:	f7f9 fc15 	bl	800e690 <HAL_GetTick>
 8014e66:	0002      	movs	r2, r0
 8014e68:	697b      	ldr	r3, [r7, #20]
 8014e6a:	1ad3      	subs	r3, r2, r3
 8014e6c:	4a47      	ldr	r2, [pc, #284]	@ (8014f8c <HAL_RCC_OscConfig+0x69c>)
 8014e6e:	4293      	cmp	r3, r2
 8014e70:	d901      	bls.n	8014e76 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8014e72:	2303      	movs	r3, #3
 8014e74:	e105      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014e76:	4b40      	ldr	r3, [pc, #256]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014e78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014e7a:	2380      	movs	r3, #128	@ 0x80
 8014e7c:	009b      	lsls	r3, r3, #2
 8014e7e:	4013      	ands	r3, r2
 8014e80:	d1ef      	bne.n	8014e62 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8014e82:	2323      	movs	r3, #35	@ 0x23
 8014e84:	18fb      	adds	r3, r7, r3
 8014e86:	781b      	ldrb	r3, [r3, #0]
 8014e88:	2b01      	cmp	r3, #1
 8014e8a:	d105      	bne.n	8014e98 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014e8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014e90:	4b39      	ldr	r3, [pc, #228]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014e92:	493f      	ldr	r1, [pc, #252]	@ (8014f90 <HAL_RCC_OscConfig+0x6a0>)
 8014e94:	400a      	ands	r2, r1
 8014e96:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	2220      	movs	r2, #32
 8014e9e:	4013      	ands	r3, r2
 8014ea0:	d049      	beq.n	8014f36 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	699b      	ldr	r3, [r3, #24]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d026      	beq.n	8014ef8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8014eaa:	4b33      	ldr	r3, [pc, #204]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014eac:	689a      	ldr	r2, [r3, #8]
 8014eae:	4b32      	ldr	r3, [pc, #200]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014eb0:	2101      	movs	r1, #1
 8014eb2:	430a      	orrs	r2, r1
 8014eb4:	609a      	str	r2, [r3, #8]
 8014eb6:	4b30      	ldr	r3, [pc, #192]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014eb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014eba:	4b2f      	ldr	r3, [pc, #188]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014ebc:	2101      	movs	r1, #1
 8014ebe:	430a      	orrs	r2, r1
 8014ec0:	635a      	str	r2, [r3, #52]	@ 0x34
 8014ec2:	4b34      	ldr	r3, [pc, #208]	@ (8014f94 <HAL_RCC_OscConfig+0x6a4>)
 8014ec4:	6a1a      	ldr	r2, [r3, #32]
 8014ec6:	4b33      	ldr	r3, [pc, #204]	@ (8014f94 <HAL_RCC_OscConfig+0x6a4>)
 8014ec8:	2180      	movs	r1, #128	@ 0x80
 8014eca:	0189      	lsls	r1, r1, #6
 8014ecc:	430a      	orrs	r2, r1
 8014ece:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014ed0:	f7f9 fbde 	bl	800e690 <HAL_GetTick>
 8014ed4:	0003      	movs	r3, r0
 8014ed6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014ed8:	e008      	b.n	8014eec <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014eda:	f7f9 fbd9 	bl	800e690 <HAL_GetTick>
 8014ede:	0002      	movs	r2, r0
 8014ee0:	697b      	ldr	r3, [r7, #20]
 8014ee2:	1ad3      	subs	r3, r2, r3
 8014ee4:	2b02      	cmp	r3, #2
 8014ee6:	d901      	bls.n	8014eec <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8014ee8:	2303      	movs	r3, #3
 8014eea:	e0ca      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014eec:	4b22      	ldr	r3, [pc, #136]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014eee:	689b      	ldr	r3, [r3, #8]
 8014ef0:	2202      	movs	r2, #2
 8014ef2:	4013      	ands	r3, r2
 8014ef4:	d0f1      	beq.n	8014eda <HAL_RCC_OscConfig+0x5ea>
 8014ef6:	e01e      	b.n	8014f36 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8014ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014efa:	689a      	ldr	r2, [r3, #8]
 8014efc:	4b1e      	ldr	r3, [pc, #120]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014efe:	2101      	movs	r1, #1
 8014f00:	438a      	bics	r2, r1
 8014f02:	609a      	str	r2, [r3, #8]
 8014f04:	4b23      	ldr	r3, [pc, #140]	@ (8014f94 <HAL_RCC_OscConfig+0x6a4>)
 8014f06:	6a1a      	ldr	r2, [r3, #32]
 8014f08:	4b22      	ldr	r3, [pc, #136]	@ (8014f94 <HAL_RCC_OscConfig+0x6a4>)
 8014f0a:	4923      	ldr	r1, [pc, #140]	@ (8014f98 <HAL_RCC_OscConfig+0x6a8>)
 8014f0c:	400a      	ands	r2, r1
 8014f0e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014f10:	f7f9 fbbe 	bl	800e690 <HAL_GetTick>
 8014f14:	0003      	movs	r3, r0
 8014f16:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014f18:	e008      	b.n	8014f2c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014f1a:	f7f9 fbb9 	bl	800e690 <HAL_GetTick>
 8014f1e:	0002      	movs	r2, r0
 8014f20:	697b      	ldr	r3, [r7, #20]
 8014f22:	1ad3      	subs	r3, r2, r3
 8014f24:	2b02      	cmp	r3, #2
 8014f26:	d901      	bls.n	8014f2c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8014f28:	2303      	movs	r3, #3
 8014f2a:	e0aa      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014f2c:	4b12      	ldr	r3, [pc, #72]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014f2e:	689b      	ldr	r3, [r3, #8]
 8014f30:	2202      	movs	r2, #2
 8014f32:	4013      	ands	r3, r2
 8014f34:	d1f1      	bne.n	8014f1a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d100      	bne.n	8014f40 <HAL_RCC_OscConfig+0x650>
 8014f3e:	e09f      	b.n	8015080 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014f40:	69fb      	ldr	r3, [r7, #28]
 8014f42:	2b0c      	cmp	r3, #12
 8014f44:	d100      	bne.n	8014f48 <HAL_RCC_OscConfig+0x658>
 8014f46:	e078      	b.n	801503a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f4c:	2b02      	cmp	r3, #2
 8014f4e:	d159      	bne.n	8015004 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014f50:	4b09      	ldr	r3, [pc, #36]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014f52:	681a      	ldr	r2, [r3, #0]
 8014f54:	4b08      	ldr	r3, [pc, #32]	@ (8014f78 <HAL_RCC_OscConfig+0x688>)
 8014f56:	4911      	ldr	r1, [pc, #68]	@ (8014f9c <HAL_RCC_OscConfig+0x6ac>)
 8014f58:	400a      	ands	r2, r1
 8014f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014f5c:	f7f9 fb98 	bl	800e690 <HAL_GetTick>
 8014f60:	0003      	movs	r3, r0
 8014f62:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014f64:	e01c      	b.n	8014fa0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014f66:	f7f9 fb93 	bl	800e690 <HAL_GetTick>
 8014f6a:	0002      	movs	r2, r0
 8014f6c:	697b      	ldr	r3, [r7, #20]
 8014f6e:	1ad3      	subs	r3, r2, r3
 8014f70:	2b02      	cmp	r3, #2
 8014f72:	d915      	bls.n	8014fa0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8014f74:	2303      	movs	r3, #3
 8014f76:	e084      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
 8014f78:	40021000 	.word	0x40021000
 8014f7c:	ffff1fff 	.word	0xffff1fff
 8014f80:	fffffeff 	.word	0xfffffeff
 8014f84:	40007000 	.word	0x40007000
 8014f88:	fffffbff 	.word	0xfffffbff
 8014f8c:	00001388 	.word	0x00001388
 8014f90:	efffffff 	.word	0xefffffff
 8014f94:	40010000 	.word	0x40010000
 8014f98:	ffffdfff 	.word	0xffffdfff
 8014f9c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014fa0:	4b3a      	ldr	r3, [pc, #232]	@ (801508c <HAL_RCC_OscConfig+0x79c>)
 8014fa2:	681a      	ldr	r2, [r3, #0]
 8014fa4:	2380      	movs	r3, #128	@ 0x80
 8014fa6:	049b      	lsls	r3, r3, #18
 8014fa8:	4013      	ands	r3, r2
 8014faa:	d1dc      	bne.n	8014f66 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014fac:	4b37      	ldr	r3, [pc, #220]	@ (801508c <HAL_RCC_OscConfig+0x79c>)
 8014fae:	68db      	ldr	r3, [r3, #12]
 8014fb0:	4a37      	ldr	r2, [pc, #220]	@ (8015090 <HAL_RCC_OscConfig+0x7a0>)
 8014fb2:	4013      	ands	r3, r2
 8014fb4:	0019      	movs	r1, r3
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014fbe:	431a      	orrs	r2, r3
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014fc4:	431a      	orrs	r2, r3
 8014fc6:	4b31      	ldr	r3, [pc, #196]	@ (801508c <HAL_RCC_OscConfig+0x79c>)
 8014fc8:	430a      	orrs	r2, r1
 8014fca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014fcc:	4b2f      	ldr	r3, [pc, #188]	@ (801508c <HAL_RCC_OscConfig+0x79c>)
 8014fce:	681a      	ldr	r2, [r3, #0]
 8014fd0:	4b2e      	ldr	r3, [pc, #184]	@ (801508c <HAL_RCC_OscConfig+0x79c>)
 8014fd2:	2180      	movs	r1, #128	@ 0x80
 8014fd4:	0449      	lsls	r1, r1, #17
 8014fd6:	430a      	orrs	r2, r1
 8014fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014fda:	f7f9 fb59 	bl	800e690 <HAL_GetTick>
 8014fde:	0003      	movs	r3, r0
 8014fe0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8014fe2:	e008      	b.n	8014ff6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014fe4:	f7f9 fb54 	bl	800e690 <HAL_GetTick>
 8014fe8:	0002      	movs	r2, r0
 8014fea:	697b      	ldr	r3, [r7, #20]
 8014fec:	1ad3      	subs	r3, r2, r3
 8014fee:	2b02      	cmp	r3, #2
 8014ff0:	d901      	bls.n	8014ff6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8014ff2:	2303      	movs	r3, #3
 8014ff4:	e045      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8014ff6:	4b25      	ldr	r3, [pc, #148]	@ (801508c <HAL_RCC_OscConfig+0x79c>)
 8014ff8:	681a      	ldr	r2, [r3, #0]
 8014ffa:	2380      	movs	r3, #128	@ 0x80
 8014ffc:	049b      	lsls	r3, r3, #18
 8014ffe:	4013      	ands	r3, r2
 8015000:	d0f0      	beq.n	8014fe4 <HAL_RCC_OscConfig+0x6f4>
 8015002:	e03d      	b.n	8015080 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015004:	4b21      	ldr	r3, [pc, #132]	@ (801508c <HAL_RCC_OscConfig+0x79c>)
 8015006:	681a      	ldr	r2, [r3, #0]
 8015008:	4b20      	ldr	r3, [pc, #128]	@ (801508c <HAL_RCC_OscConfig+0x79c>)
 801500a:	4922      	ldr	r1, [pc, #136]	@ (8015094 <HAL_RCC_OscConfig+0x7a4>)
 801500c:	400a      	ands	r2, r1
 801500e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015010:	f7f9 fb3e 	bl	800e690 <HAL_GetTick>
 8015014:	0003      	movs	r3, r0
 8015016:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015018:	e008      	b.n	801502c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801501a:	f7f9 fb39 	bl	800e690 <HAL_GetTick>
 801501e:	0002      	movs	r2, r0
 8015020:	697b      	ldr	r3, [r7, #20]
 8015022:	1ad3      	subs	r3, r2, r3
 8015024:	2b02      	cmp	r3, #2
 8015026:	d901      	bls.n	801502c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8015028:	2303      	movs	r3, #3
 801502a:	e02a      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801502c:	4b17      	ldr	r3, [pc, #92]	@ (801508c <HAL_RCC_OscConfig+0x79c>)
 801502e:	681a      	ldr	r2, [r3, #0]
 8015030:	2380      	movs	r3, #128	@ 0x80
 8015032:	049b      	lsls	r3, r3, #18
 8015034:	4013      	ands	r3, r2
 8015036:	d1f0      	bne.n	801501a <HAL_RCC_OscConfig+0x72a>
 8015038:	e022      	b.n	8015080 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801503e:	2b01      	cmp	r3, #1
 8015040:	d101      	bne.n	8015046 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8015042:	2301      	movs	r3, #1
 8015044:	e01d      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8015046:	4b11      	ldr	r3, [pc, #68]	@ (801508c <HAL_RCC_OscConfig+0x79c>)
 8015048:	68db      	ldr	r3, [r3, #12]
 801504a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801504c:	69ba      	ldr	r2, [r7, #24]
 801504e:	2380      	movs	r3, #128	@ 0x80
 8015050:	025b      	lsls	r3, r3, #9
 8015052:	401a      	ands	r2, r3
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015058:	429a      	cmp	r2, r3
 801505a:	d10f      	bne.n	801507c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801505c:	69ba      	ldr	r2, [r7, #24]
 801505e:	23f0      	movs	r3, #240	@ 0xf0
 8015060:	039b      	lsls	r3, r3, #14
 8015062:	401a      	ands	r2, r3
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015068:	429a      	cmp	r2, r3
 801506a:	d107      	bne.n	801507c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801506c:	69ba      	ldr	r2, [r7, #24]
 801506e:	23c0      	movs	r3, #192	@ 0xc0
 8015070:	041b      	lsls	r3, r3, #16
 8015072:	401a      	ands	r2, r3
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8015078:	429a      	cmp	r2, r3
 801507a:	d001      	beq.n	8015080 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801507c:	2301      	movs	r3, #1
 801507e:	e000      	b.n	8015082 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8015080:	2300      	movs	r3, #0
}
 8015082:	0018      	movs	r0, r3
 8015084:	46bd      	mov	sp, r7
 8015086:	b00a      	add	sp, #40	@ 0x28
 8015088:	bdb0      	pop	{r4, r5, r7, pc}
 801508a:	46c0      	nop			@ (mov r8, r8)
 801508c:	40021000 	.word	0x40021000
 8015090:	ff02ffff 	.word	0xff02ffff
 8015094:	feffffff 	.word	0xfeffffff

08015098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8015098:	b5b0      	push	{r4, r5, r7, lr}
 801509a:	b084      	sub	sp, #16
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
 80150a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d101      	bne.n	80150ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80150a8:	2301      	movs	r3, #1
 80150aa:	e128      	b.n	80152fe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80150ac:	4b96      	ldr	r3, [pc, #600]	@ (8015308 <HAL_RCC_ClockConfig+0x270>)
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	2201      	movs	r2, #1
 80150b2:	4013      	ands	r3, r2
 80150b4:	683a      	ldr	r2, [r7, #0]
 80150b6:	429a      	cmp	r2, r3
 80150b8:	d91e      	bls.n	80150f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80150ba:	4b93      	ldr	r3, [pc, #588]	@ (8015308 <HAL_RCC_ClockConfig+0x270>)
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	2201      	movs	r2, #1
 80150c0:	4393      	bics	r3, r2
 80150c2:	0019      	movs	r1, r3
 80150c4:	4b90      	ldr	r3, [pc, #576]	@ (8015308 <HAL_RCC_ClockConfig+0x270>)
 80150c6:	683a      	ldr	r2, [r7, #0]
 80150c8:	430a      	orrs	r2, r1
 80150ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80150cc:	f7f9 fae0 	bl	800e690 <HAL_GetTick>
 80150d0:	0003      	movs	r3, r0
 80150d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80150d4:	e009      	b.n	80150ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80150d6:	f7f9 fadb 	bl	800e690 <HAL_GetTick>
 80150da:	0002      	movs	r2, r0
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	1ad3      	subs	r3, r2, r3
 80150e0:	4a8a      	ldr	r2, [pc, #552]	@ (801530c <HAL_RCC_ClockConfig+0x274>)
 80150e2:	4293      	cmp	r3, r2
 80150e4:	d901      	bls.n	80150ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80150e6:	2303      	movs	r3, #3
 80150e8:	e109      	b.n	80152fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80150ea:	4b87      	ldr	r3, [pc, #540]	@ (8015308 <HAL_RCC_ClockConfig+0x270>)
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	2201      	movs	r2, #1
 80150f0:	4013      	ands	r3, r2
 80150f2:	683a      	ldr	r2, [r7, #0]
 80150f4:	429a      	cmp	r2, r3
 80150f6:	d1ee      	bne.n	80150d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	2202      	movs	r2, #2
 80150fe:	4013      	ands	r3, r2
 8015100:	d009      	beq.n	8015116 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015102:	4b83      	ldr	r3, [pc, #524]	@ (8015310 <HAL_RCC_ClockConfig+0x278>)
 8015104:	68db      	ldr	r3, [r3, #12]
 8015106:	22f0      	movs	r2, #240	@ 0xf0
 8015108:	4393      	bics	r3, r2
 801510a:	0019      	movs	r1, r3
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	689a      	ldr	r2, [r3, #8]
 8015110:	4b7f      	ldr	r3, [pc, #508]	@ (8015310 <HAL_RCC_ClockConfig+0x278>)
 8015112:	430a      	orrs	r2, r1
 8015114:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	2201      	movs	r2, #1
 801511c:	4013      	ands	r3, r2
 801511e:	d100      	bne.n	8015122 <HAL_RCC_ClockConfig+0x8a>
 8015120:	e089      	b.n	8015236 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	685b      	ldr	r3, [r3, #4]
 8015126:	2b02      	cmp	r3, #2
 8015128:	d107      	bne.n	801513a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801512a:	4b79      	ldr	r3, [pc, #484]	@ (8015310 <HAL_RCC_ClockConfig+0x278>)
 801512c:	681a      	ldr	r2, [r3, #0]
 801512e:	2380      	movs	r3, #128	@ 0x80
 8015130:	029b      	lsls	r3, r3, #10
 8015132:	4013      	ands	r3, r2
 8015134:	d120      	bne.n	8015178 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015136:	2301      	movs	r3, #1
 8015138:	e0e1      	b.n	80152fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	685b      	ldr	r3, [r3, #4]
 801513e:	2b03      	cmp	r3, #3
 8015140:	d107      	bne.n	8015152 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015142:	4b73      	ldr	r3, [pc, #460]	@ (8015310 <HAL_RCC_ClockConfig+0x278>)
 8015144:	681a      	ldr	r2, [r3, #0]
 8015146:	2380      	movs	r3, #128	@ 0x80
 8015148:	049b      	lsls	r3, r3, #18
 801514a:	4013      	ands	r3, r2
 801514c:	d114      	bne.n	8015178 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801514e:	2301      	movs	r3, #1
 8015150:	e0d5      	b.n	80152fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	685b      	ldr	r3, [r3, #4]
 8015156:	2b01      	cmp	r3, #1
 8015158:	d106      	bne.n	8015168 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801515a:	4b6d      	ldr	r3, [pc, #436]	@ (8015310 <HAL_RCC_ClockConfig+0x278>)
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	2204      	movs	r2, #4
 8015160:	4013      	ands	r3, r2
 8015162:	d109      	bne.n	8015178 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015164:	2301      	movs	r3, #1
 8015166:	e0ca      	b.n	80152fe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015168:	4b69      	ldr	r3, [pc, #420]	@ (8015310 <HAL_RCC_ClockConfig+0x278>)
 801516a:	681a      	ldr	r2, [r3, #0]
 801516c:	2380      	movs	r3, #128	@ 0x80
 801516e:	009b      	lsls	r3, r3, #2
 8015170:	4013      	ands	r3, r2
 8015172:	d101      	bne.n	8015178 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015174:	2301      	movs	r3, #1
 8015176:	e0c2      	b.n	80152fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8015178:	4b65      	ldr	r3, [pc, #404]	@ (8015310 <HAL_RCC_ClockConfig+0x278>)
 801517a:	68db      	ldr	r3, [r3, #12]
 801517c:	2203      	movs	r2, #3
 801517e:	4393      	bics	r3, r2
 8015180:	0019      	movs	r1, r3
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	685a      	ldr	r2, [r3, #4]
 8015186:	4b62      	ldr	r3, [pc, #392]	@ (8015310 <HAL_RCC_ClockConfig+0x278>)
 8015188:	430a      	orrs	r2, r1
 801518a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801518c:	f7f9 fa80 	bl	800e690 <HAL_GetTick>
 8015190:	0003      	movs	r3, r0
 8015192:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	685b      	ldr	r3, [r3, #4]
 8015198:	2b02      	cmp	r3, #2
 801519a:	d111      	bne.n	80151c0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801519c:	e009      	b.n	80151b2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801519e:	f7f9 fa77 	bl	800e690 <HAL_GetTick>
 80151a2:	0002      	movs	r2, r0
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	1ad3      	subs	r3, r2, r3
 80151a8:	4a58      	ldr	r2, [pc, #352]	@ (801530c <HAL_RCC_ClockConfig+0x274>)
 80151aa:	4293      	cmp	r3, r2
 80151ac:	d901      	bls.n	80151b2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80151ae:	2303      	movs	r3, #3
 80151b0:	e0a5      	b.n	80152fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80151b2:	4b57      	ldr	r3, [pc, #348]	@ (8015310 <HAL_RCC_ClockConfig+0x278>)
 80151b4:	68db      	ldr	r3, [r3, #12]
 80151b6:	220c      	movs	r2, #12
 80151b8:	4013      	ands	r3, r2
 80151ba:	2b08      	cmp	r3, #8
 80151bc:	d1ef      	bne.n	801519e <HAL_RCC_ClockConfig+0x106>
 80151be:	e03a      	b.n	8015236 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	685b      	ldr	r3, [r3, #4]
 80151c4:	2b03      	cmp	r3, #3
 80151c6:	d111      	bne.n	80151ec <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80151c8:	e009      	b.n	80151de <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80151ca:	f7f9 fa61 	bl	800e690 <HAL_GetTick>
 80151ce:	0002      	movs	r2, r0
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	1ad3      	subs	r3, r2, r3
 80151d4:	4a4d      	ldr	r2, [pc, #308]	@ (801530c <HAL_RCC_ClockConfig+0x274>)
 80151d6:	4293      	cmp	r3, r2
 80151d8:	d901      	bls.n	80151de <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80151da:	2303      	movs	r3, #3
 80151dc:	e08f      	b.n	80152fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80151de:	4b4c      	ldr	r3, [pc, #304]	@ (8015310 <HAL_RCC_ClockConfig+0x278>)
 80151e0:	68db      	ldr	r3, [r3, #12]
 80151e2:	220c      	movs	r2, #12
 80151e4:	4013      	ands	r3, r2
 80151e6:	2b0c      	cmp	r3, #12
 80151e8:	d1ef      	bne.n	80151ca <HAL_RCC_ClockConfig+0x132>
 80151ea:	e024      	b.n	8015236 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	685b      	ldr	r3, [r3, #4]
 80151f0:	2b01      	cmp	r3, #1
 80151f2:	d11b      	bne.n	801522c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80151f4:	e009      	b.n	801520a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80151f6:	f7f9 fa4b 	bl	800e690 <HAL_GetTick>
 80151fa:	0002      	movs	r2, r0
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	1ad3      	subs	r3, r2, r3
 8015200:	4a42      	ldr	r2, [pc, #264]	@ (801530c <HAL_RCC_ClockConfig+0x274>)
 8015202:	4293      	cmp	r3, r2
 8015204:	d901      	bls.n	801520a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8015206:	2303      	movs	r3, #3
 8015208:	e079      	b.n	80152fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801520a:	4b41      	ldr	r3, [pc, #260]	@ (8015310 <HAL_RCC_ClockConfig+0x278>)
 801520c:	68db      	ldr	r3, [r3, #12]
 801520e:	220c      	movs	r2, #12
 8015210:	4013      	ands	r3, r2
 8015212:	2b04      	cmp	r3, #4
 8015214:	d1ef      	bne.n	80151f6 <HAL_RCC_ClockConfig+0x15e>
 8015216:	e00e      	b.n	8015236 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015218:	f7f9 fa3a 	bl	800e690 <HAL_GetTick>
 801521c:	0002      	movs	r2, r0
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	1ad3      	subs	r3, r2, r3
 8015222:	4a3a      	ldr	r2, [pc, #232]	@ (801530c <HAL_RCC_ClockConfig+0x274>)
 8015224:	4293      	cmp	r3, r2
 8015226:	d901      	bls.n	801522c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8015228:	2303      	movs	r3, #3
 801522a:	e068      	b.n	80152fe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801522c:	4b38      	ldr	r3, [pc, #224]	@ (8015310 <HAL_RCC_ClockConfig+0x278>)
 801522e:	68db      	ldr	r3, [r3, #12]
 8015230:	220c      	movs	r2, #12
 8015232:	4013      	ands	r3, r2
 8015234:	d1f0      	bne.n	8015218 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8015236:	4b34      	ldr	r3, [pc, #208]	@ (8015308 <HAL_RCC_ClockConfig+0x270>)
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	2201      	movs	r2, #1
 801523c:	4013      	ands	r3, r2
 801523e:	683a      	ldr	r2, [r7, #0]
 8015240:	429a      	cmp	r2, r3
 8015242:	d21e      	bcs.n	8015282 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015244:	4b30      	ldr	r3, [pc, #192]	@ (8015308 <HAL_RCC_ClockConfig+0x270>)
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	2201      	movs	r2, #1
 801524a:	4393      	bics	r3, r2
 801524c:	0019      	movs	r1, r3
 801524e:	4b2e      	ldr	r3, [pc, #184]	@ (8015308 <HAL_RCC_ClockConfig+0x270>)
 8015250:	683a      	ldr	r2, [r7, #0]
 8015252:	430a      	orrs	r2, r1
 8015254:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8015256:	f7f9 fa1b 	bl	800e690 <HAL_GetTick>
 801525a:	0003      	movs	r3, r0
 801525c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801525e:	e009      	b.n	8015274 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015260:	f7f9 fa16 	bl	800e690 <HAL_GetTick>
 8015264:	0002      	movs	r2, r0
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	1ad3      	subs	r3, r2, r3
 801526a:	4a28      	ldr	r2, [pc, #160]	@ (801530c <HAL_RCC_ClockConfig+0x274>)
 801526c:	4293      	cmp	r3, r2
 801526e:	d901      	bls.n	8015274 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8015270:	2303      	movs	r3, #3
 8015272:	e044      	b.n	80152fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015274:	4b24      	ldr	r3, [pc, #144]	@ (8015308 <HAL_RCC_ClockConfig+0x270>)
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	2201      	movs	r2, #1
 801527a:	4013      	ands	r3, r2
 801527c:	683a      	ldr	r2, [r7, #0]
 801527e:	429a      	cmp	r2, r3
 8015280:	d1ee      	bne.n	8015260 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	2204      	movs	r2, #4
 8015288:	4013      	ands	r3, r2
 801528a:	d009      	beq.n	80152a0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801528c:	4b20      	ldr	r3, [pc, #128]	@ (8015310 <HAL_RCC_ClockConfig+0x278>)
 801528e:	68db      	ldr	r3, [r3, #12]
 8015290:	4a20      	ldr	r2, [pc, #128]	@ (8015314 <HAL_RCC_ClockConfig+0x27c>)
 8015292:	4013      	ands	r3, r2
 8015294:	0019      	movs	r1, r3
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	68da      	ldr	r2, [r3, #12]
 801529a:	4b1d      	ldr	r3, [pc, #116]	@ (8015310 <HAL_RCC_ClockConfig+0x278>)
 801529c:	430a      	orrs	r2, r1
 801529e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	2208      	movs	r2, #8
 80152a6:	4013      	ands	r3, r2
 80152a8:	d00a      	beq.n	80152c0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80152aa:	4b19      	ldr	r3, [pc, #100]	@ (8015310 <HAL_RCC_ClockConfig+0x278>)
 80152ac:	68db      	ldr	r3, [r3, #12]
 80152ae:	4a1a      	ldr	r2, [pc, #104]	@ (8015318 <HAL_RCC_ClockConfig+0x280>)
 80152b0:	4013      	ands	r3, r2
 80152b2:	0019      	movs	r1, r3
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	691b      	ldr	r3, [r3, #16]
 80152b8:	00da      	lsls	r2, r3, #3
 80152ba:	4b15      	ldr	r3, [pc, #84]	@ (8015310 <HAL_RCC_ClockConfig+0x278>)
 80152bc:	430a      	orrs	r2, r1
 80152be:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80152c0:	f000 f832 	bl	8015328 <HAL_RCC_GetSysClockFreq>
 80152c4:	0001      	movs	r1, r0
 80152c6:	4b12      	ldr	r3, [pc, #72]	@ (8015310 <HAL_RCC_ClockConfig+0x278>)
 80152c8:	68db      	ldr	r3, [r3, #12]
 80152ca:	091b      	lsrs	r3, r3, #4
 80152cc:	220f      	movs	r2, #15
 80152ce:	4013      	ands	r3, r2
 80152d0:	4a12      	ldr	r2, [pc, #72]	@ (801531c <HAL_RCC_ClockConfig+0x284>)
 80152d2:	5cd3      	ldrb	r3, [r2, r3]
 80152d4:	000a      	movs	r2, r1
 80152d6:	40da      	lsrs	r2, r3
 80152d8:	4b11      	ldr	r3, [pc, #68]	@ (8015320 <HAL_RCC_ClockConfig+0x288>)
 80152da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80152dc:	4b11      	ldr	r3, [pc, #68]	@ (8015324 <HAL_RCC_ClockConfig+0x28c>)
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	250b      	movs	r5, #11
 80152e2:	197c      	adds	r4, r7, r5
 80152e4:	0018      	movs	r0, r3
 80152e6:	f7f9 f98d 	bl	800e604 <HAL_InitTick>
 80152ea:	0003      	movs	r3, r0
 80152ec:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80152ee:	197b      	adds	r3, r7, r5
 80152f0:	781b      	ldrb	r3, [r3, #0]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d002      	beq.n	80152fc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80152f6:	197b      	adds	r3, r7, r5
 80152f8:	781b      	ldrb	r3, [r3, #0]
 80152fa:	e000      	b.n	80152fe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80152fc:	2300      	movs	r3, #0
}
 80152fe:	0018      	movs	r0, r3
 8015300:	46bd      	mov	sp, r7
 8015302:	b004      	add	sp, #16
 8015304:	bdb0      	pop	{r4, r5, r7, pc}
 8015306:	46c0      	nop			@ (mov r8, r8)
 8015308:	40022000 	.word	0x40022000
 801530c:	00001388 	.word	0x00001388
 8015310:	40021000 	.word	0x40021000
 8015314:	fffff8ff 	.word	0xfffff8ff
 8015318:	ffffc7ff 	.word	0xffffc7ff
 801531c:	08024ce8 	.word	0x08024ce8
 8015320:	200000cc 	.word	0x200000cc
 8015324:	200000dc 	.word	0x200000dc

08015328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015328:	b5b0      	push	{r4, r5, r7, lr}
 801532a:	b08e      	sub	sp, #56	@ 0x38
 801532c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801532e:	4b4c      	ldr	r3, [pc, #304]	@ (8015460 <HAL_RCC_GetSysClockFreq+0x138>)
 8015330:	68db      	ldr	r3, [r3, #12]
 8015332:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8015334:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015336:	230c      	movs	r3, #12
 8015338:	4013      	ands	r3, r2
 801533a:	2b0c      	cmp	r3, #12
 801533c:	d014      	beq.n	8015368 <HAL_RCC_GetSysClockFreq+0x40>
 801533e:	d900      	bls.n	8015342 <HAL_RCC_GetSysClockFreq+0x1a>
 8015340:	e07b      	b.n	801543a <HAL_RCC_GetSysClockFreq+0x112>
 8015342:	2b04      	cmp	r3, #4
 8015344:	d002      	beq.n	801534c <HAL_RCC_GetSysClockFreq+0x24>
 8015346:	2b08      	cmp	r3, #8
 8015348:	d00b      	beq.n	8015362 <HAL_RCC_GetSysClockFreq+0x3a>
 801534a:	e076      	b.n	801543a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801534c:	4b44      	ldr	r3, [pc, #272]	@ (8015460 <HAL_RCC_GetSysClockFreq+0x138>)
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	2210      	movs	r2, #16
 8015352:	4013      	ands	r3, r2
 8015354:	d002      	beq.n	801535c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8015356:	4b43      	ldr	r3, [pc, #268]	@ (8015464 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015358:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801535a:	e07c      	b.n	8015456 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801535c:	4b42      	ldr	r3, [pc, #264]	@ (8015468 <HAL_RCC_GetSysClockFreq+0x140>)
 801535e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015360:	e079      	b.n	8015456 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8015362:	4b42      	ldr	r3, [pc, #264]	@ (801546c <HAL_RCC_GetSysClockFreq+0x144>)
 8015364:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015366:	e076      	b.n	8015456 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8015368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801536a:	0c9a      	lsrs	r2, r3, #18
 801536c:	230f      	movs	r3, #15
 801536e:	401a      	ands	r2, r3
 8015370:	4b3f      	ldr	r3, [pc, #252]	@ (8015470 <HAL_RCC_GetSysClockFreq+0x148>)
 8015372:	5c9b      	ldrb	r3, [r3, r2]
 8015374:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8015376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015378:	0d9a      	lsrs	r2, r3, #22
 801537a:	2303      	movs	r3, #3
 801537c:	4013      	ands	r3, r2
 801537e:	3301      	adds	r3, #1
 8015380:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8015382:	4b37      	ldr	r3, [pc, #220]	@ (8015460 <HAL_RCC_GetSysClockFreq+0x138>)
 8015384:	68da      	ldr	r2, [r3, #12]
 8015386:	2380      	movs	r3, #128	@ 0x80
 8015388:	025b      	lsls	r3, r3, #9
 801538a:	4013      	ands	r3, r2
 801538c:	d01a      	beq.n	80153c4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801538e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015390:	61bb      	str	r3, [r7, #24]
 8015392:	2300      	movs	r3, #0
 8015394:	61fb      	str	r3, [r7, #28]
 8015396:	4a35      	ldr	r2, [pc, #212]	@ (801546c <HAL_RCC_GetSysClockFreq+0x144>)
 8015398:	2300      	movs	r3, #0
 801539a:	69b8      	ldr	r0, [r7, #24]
 801539c:	69f9      	ldr	r1, [r7, #28]
 801539e:	f7eb f90f 	bl	80005c0 <__aeabi_lmul>
 80153a2:	0002      	movs	r2, r0
 80153a4:	000b      	movs	r3, r1
 80153a6:	0010      	movs	r0, r2
 80153a8:	0019      	movs	r1, r3
 80153aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153ac:	613b      	str	r3, [r7, #16]
 80153ae:	2300      	movs	r3, #0
 80153b0:	617b      	str	r3, [r7, #20]
 80153b2:	693a      	ldr	r2, [r7, #16]
 80153b4:	697b      	ldr	r3, [r7, #20]
 80153b6:	f7eb f8e3 	bl	8000580 <__aeabi_uldivmod>
 80153ba:	0002      	movs	r2, r0
 80153bc:	000b      	movs	r3, r1
 80153be:	0013      	movs	r3, r2
 80153c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80153c2:	e037      	b.n	8015434 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80153c4:	4b26      	ldr	r3, [pc, #152]	@ (8015460 <HAL_RCC_GetSysClockFreq+0x138>)
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	2210      	movs	r2, #16
 80153ca:	4013      	ands	r3, r2
 80153cc:	d01a      	beq.n	8015404 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80153ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153d0:	60bb      	str	r3, [r7, #8]
 80153d2:	2300      	movs	r3, #0
 80153d4:	60fb      	str	r3, [r7, #12]
 80153d6:	4a23      	ldr	r2, [pc, #140]	@ (8015464 <HAL_RCC_GetSysClockFreq+0x13c>)
 80153d8:	2300      	movs	r3, #0
 80153da:	68b8      	ldr	r0, [r7, #8]
 80153dc:	68f9      	ldr	r1, [r7, #12]
 80153de:	f7eb f8ef 	bl	80005c0 <__aeabi_lmul>
 80153e2:	0002      	movs	r2, r0
 80153e4:	000b      	movs	r3, r1
 80153e6:	0010      	movs	r0, r2
 80153e8:	0019      	movs	r1, r3
 80153ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153ec:	603b      	str	r3, [r7, #0]
 80153ee:	2300      	movs	r3, #0
 80153f0:	607b      	str	r3, [r7, #4]
 80153f2:	683a      	ldr	r2, [r7, #0]
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	f7eb f8c3 	bl	8000580 <__aeabi_uldivmod>
 80153fa:	0002      	movs	r2, r0
 80153fc:	000b      	movs	r3, r1
 80153fe:	0013      	movs	r3, r2
 8015400:	637b      	str	r3, [r7, #52]	@ 0x34
 8015402:	e017      	b.n	8015434 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015406:	0018      	movs	r0, r3
 8015408:	2300      	movs	r3, #0
 801540a:	0019      	movs	r1, r3
 801540c:	4a16      	ldr	r2, [pc, #88]	@ (8015468 <HAL_RCC_GetSysClockFreq+0x140>)
 801540e:	2300      	movs	r3, #0
 8015410:	f7eb f8d6 	bl	80005c0 <__aeabi_lmul>
 8015414:	0002      	movs	r2, r0
 8015416:	000b      	movs	r3, r1
 8015418:	0010      	movs	r0, r2
 801541a:	0019      	movs	r1, r3
 801541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801541e:	001c      	movs	r4, r3
 8015420:	2300      	movs	r3, #0
 8015422:	001d      	movs	r5, r3
 8015424:	0022      	movs	r2, r4
 8015426:	002b      	movs	r3, r5
 8015428:	f7eb f8aa 	bl	8000580 <__aeabi_uldivmod>
 801542c:	0002      	movs	r2, r0
 801542e:	000b      	movs	r3, r1
 8015430:	0013      	movs	r3, r2
 8015432:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8015434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015436:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015438:	e00d      	b.n	8015456 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801543a:	4b09      	ldr	r3, [pc, #36]	@ (8015460 <HAL_RCC_GetSysClockFreq+0x138>)
 801543c:	685b      	ldr	r3, [r3, #4]
 801543e:	0b5b      	lsrs	r3, r3, #13
 8015440:	2207      	movs	r2, #7
 8015442:	4013      	ands	r3, r2
 8015444:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8015446:	6a3b      	ldr	r3, [r7, #32]
 8015448:	3301      	adds	r3, #1
 801544a:	2280      	movs	r2, #128	@ 0x80
 801544c:	0212      	lsls	r2, r2, #8
 801544e:	409a      	lsls	r2, r3
 8015450:	0013      	movs	r3, r2
 8015452:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015454:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8015456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8015458:	0018      	movs	r0, r3
 801545a:	46bd      	mov	sp, r7
 801545c:	b00e      	add	sp, #56	@ 0x38
 801545e:	bdb0      	pop	{r4, r5, r7, pc}
 8015460:	40021000 	.word	0x40021000
 8015464:	003d0900 	.word	0x003d0900
 8015468:	00f42400 	.word	0x00f42400
 801546c:	007a1200 	.word	0x007a1200
 8015470:	08024d00 	.word	0x08024d00

08015474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015474:	b580      	push	{r7, lr}
 8015476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015478:	4b02      	ldr	r3, [pc, #8]	@ (8015484 <HAL_RCC_GetHCLKFreq+0x10>)
 801547a:	681b      	ldr	r3, [r3, #0]
}
 801547c:	0018      	movs	r0, r3
 801547e:	46bd      	mov	sp, r7
 8015480:	bd80      	pop	{r7, pc}
 8015482:	46c0      	nop			@ (mov r8, r8)
 8015484:	200000cc 	.word	0x200000cc

08015488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015488:	b580      	push	{r7, lr}
 801548a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801548c:	f7ff fff2 	bl	8015474 <HAL_RCC_GetHCLKFreq>
 8015490:	0001      	movs	r1, r0
 8015492:	4b06      	ldr	r3, [pc, #24]	@ (80154ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8015494:	68db      	ldr	r3, [r3, #12]
 8015496:	0a1b      	lsrs	r3, r3, #8
 8015498:	2207      	movs	r2, #7
 801549a:	4013      	ands	r3, r2
 801549c:	4a04      	ldr	r2, [pc, #16]	@ (80154b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 801549e:	5cd3      	ldrb	r3, [r2, r3]
 80154a0:	40d9      	lsrs	r1, r3
 80154a2:	000b      	movs	r3, r1
}
 80154a4:	0018      	movs	r0, r3
 80154a6:	46bd      	mov	sp, r7
 80154a8:	bd80      	pop	{r7, pc}
 80154aa:	46c0      	nop			@ (mov r8, r8)
 80154ac:	40021000 	.word	0x40021000
 80154b0:	08024cf8 	.word	0x08024cf8

080154b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80154b8:	f7ff ffdc 	bl	8015474 <HAL_RCC_GetHCLKFreq>
 80154bc:	0001      	movs	r1, r0
 80154be:	4b06      	ldr	r3, [pc, #24]	@ (80154d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80154c0:	68db      	ldr	r3, [r3, #12]
 80154c2:	0adb      	lsrs	r3, r3, #11
 80154c4:	2207      	movs	r2, #7
 80154c6:	4013      	ands	r3, r2
 80154c8:	4a04      	ldr	r2, [pc, #16]	@ (80154dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80154ca:	5cd3      	ldrb	r3, [r2, r3]
 80154cc:	40d9      	lsrs	r1, r3
 80154ce:	000b      	movs	r3, r1
}
 80154d0:	0018      	movs	r0, r3
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd80      	pop	{r7, pc}
 80154d6:	46c0      	nop			@ (mov r8, r8)
 80154d8:	40021000 	.word	0x40021000
 80154dc:	08024cf8 	.word	0x08024cf8

080154e0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b086      	sub	sp, #24
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80154e8:	2017      	movs	r0, #23
 80154ea:	183b      	adds	r3, r7, r0
 80154ec:	2200      	movs	r2, #0
 80154ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	2220      	movs	r2, #32
 80154f6:	4013      	ands	r3, r2
 80154f8:	d100      	bne.n	80154fc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80154fa:	e0c7      	b.n	801568c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80154fc:	4b9b      	ldr	r3, [pc, #620]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80154fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015500:	2380      	movs	r3, #128	@ 0x80
 8015502:	055b      	lsls	r3, r3, #21
 8015504:	4013      	ands	r3, r2
 8015506:	d109      	bne.n	801551c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015508:	4b98      	ldr	r3, [pc, #608]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801550a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801550c:	4b97      	ldr	r3, [pc, #604]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801550e:	2180      	movs	r1, #128	@ 0x80
 8015510:	0549      	lsls	r1, r1, #21
 8015512:	430a      	orrs	r2, r1
 8015514:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015516:	183b      	adds	r3, r7, r0
 8015518:	2201      	movs	r2, #1
 801551a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801551c:	4b94      	ldr	r3, [pc, #592]	@ (8015770 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801551e:	681a      	ldr	r2, [r3, #0]
 8015520:	2380      	movs	r3, #128	@ 0x80
 8015522:	005b      	lsls	r3, r3, #1
 8015524:	4013      	ands	r3, r2
 8015526:	d11a      	bne.n	801555e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015528:	4b91      	ldr	r3, [pc, #580]	@ (8015770 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801552a:	681a      	ldr	r2, [r3, #0]
 801552c:	4b90      	ldr	r3, [pc, #576]	@ (8015770 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801552e:	2180      	movs	r1, #128	@ 0x80
 8015530:	0049      	lsls	r1, r1, #1
 8015532:	430a      	orrs	r2, r1
 8015534:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015536:	f7f9 f8ab 	bl	800e690 <HAL_GetTick>
 801553a:	0003      	movs	r3, r0
 801553c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801553e:	e008      	b.n	8015552 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015540:	f7f9 f8a6 	bl	800e690 <HAL_GetTick>
 8015544:	0002      	movs	r2, r0
 8015546:	693b      	ldr	r3, [r7, #16]
 8015548:	1ad3      	subs	r3, r2, r3
 801554a:	2b64      	cmp	r3, #100	@ 0x64
 801554c:	d901      	bls.n	8015552 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801554e:	2303      	movs	r3, #3
 8015550:	e107      	b.n	8015762 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015552:	4b87      	ldr	r3, [pc, #540]	@ (8015770 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015554:	681a      	ldr	r2, [r3, #0]
 8015556:	2380      	movs	r3, #128	@ 0x80
 8015558:	005b      	lsls	r3, r3, #1
 801555a:	4013      	ands	r3, r2
 801555c:	d0f0      	beq.n	8015540 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801555e:	4b83      	ldr	r3, [pc, #524]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015560:	681a      	ldr	r2, [r3, #0]
 8015562:	23c0      	movs	r3, #192	@ 0xc0
 8015564:	039b      	lsls	r3, r3, #14
 8015566:	4013      	ands	r3, r2
 8015568:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	685a      	ldr	r2, [r3, #4]
 801556e:	23c0      	movs	r3, #192	@ 0xc0
 8015570:	039b      	lsls	r3, r3, #14
 8015572:	4013      	ands	r3, r2
 8015574:	68fa      	ldr	r2, [r7, #12]
 8015576:	429a      	cmp	r2, r3
 8015578:	d013      	beq.n	80155a2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	685a      	ldr	r2, [r3, #4]
 801557e:	23c0      	movs	r3, #192	@ 0xc0
 8015580:	029b      	lsls	r3, r3, #10
 8015582:	401a      	ands	r2, r3
 8015584:	23c0      	movs	r3, #192	@ 0xc0
 8015586:	029b      	lsls	r3, r3, #10
 8015588:	429a      	cmp	r2, r3
 801558a:	d10a      	bne.n	80155a2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801558c:	4b77      	ldr	r3, [pc, #476]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801558e:	681a      	ldr	r2, [r3, #0]
 8015590:	2380      	movs	r3, #128	@ 0x80
 8015592:	029b      	lsls	r3, r3, #10
 8015594:	401a      	ands	r2, r3
 8015596:	2380      	movs	r3, #128	@ 0x80
 8015598:	029b      	lsls	r3, r3, #10
 801559a:	429a      	cmp	r2, r3
 801559c:	d101      	bne.n	80155a2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801559e:	2301      	movs	r3, #1
 80155a0:	e0df      	b.n	8015762 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80155a2:	4b72      	ldr	r3, [pc, #456]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80155a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80155a6:	23c0      	movs	r3, #192	@ 0xc0
 80155a8:	029b      	lsls	r3, r3, #10
 80155aa:	4013      	ands	r3, r2
 80155ac:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d03b      	beq.n	801562c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	685a      	ldr	r2, [r3, #4]
 80155b8:	23c0      	movs	r3, #192	@ 0xc0
 80155ba:	029b      	lsls	r3, r3, #10
 80155bc:	4013      	ands	r3, r2
 80155be:	68fa      	ldr	r2, [r7, #12]
 80155c0:	429a      	cmp	r2, r3
 80155c2:	d033      	beq.n	801562c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	2220      	movs	r2, #32
 80155ca:	4013      	ands	r3, r2
 80155cc:	d02e      	beq.n	801562c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80155ce:	4b67      	ldr	r3, [pc, #412]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80155d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80155d2:	4a68      	ldr	r2, [pc, #416]	@ (8015774 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80155d4:	4013      	ands	r3, r2
 80155d6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80155d8:	4b64      	ldr	r3, [pc, #400]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80155da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80155dc:	4b63      	ldr	r3, [pc, #396]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80155de:	2180      	movs	r1, #128	@ 0x80
 80155e0:	0309      	lsls	r1, r1, #12
 80155e2:	430a      	orrs	r2, r1
 80155e4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80155e6:	4b61      	ldr	r3, [pc, #388]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80155e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80155ea:	4b60      	ldr	r3, [pc, #384]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80155ec:	4962      	ldr	r1, [pc, #392]	@ (8015778 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80155ee:	400a      	ands	r2, r1
 80155f0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80155f2:	4b5e      	ldr	r3, [pc, #376]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80155f4:	68fa      	ldr	r2, [r7, #12]
 80155f6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80155f8:	68fa      	ldr	r2, [r7, #12]
 80155fa:	2380      	movs	r3, #128	@ 0x80
 80155fc:	005b      	lsls	r3, r3, #1
 80155fe:	4013      	ands	r3, r2
 8015600:	d014      	beq.n	801562c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015602:	f7f9 f845 	bl	800e690 <HAL_GetTick>
 8015606:	0003      	movs	r3, r0
 8015608:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801560a:	e009      	b.n	8015620 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801560c:	f7f9 f840 	bl	800e690 <HAL_GetTick>
 8015610:	0002      	movs	r2, r0
 8015612:	693b      	ldr	r3, [r7, #16]
 8015614:	1ad3      	subs	r3, r2, r3
 8015616:	4a59      	ldr	r2, [pc, #356]	@ (801577c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8015618:	4293      	cmp	r3, r2
 801561a:	d901      	bls.n	8015620 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801561c:	2303      	movs	r3, #3
 801561e:	e0a0      	b.n	8015762 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015620:	4b52      	ldr	r3, [pc, #328]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015622:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015624:	2380      	movs	r3, #128	@ 0x80
 8015626:	009b      	lsls	r3, r3, #2
 8015628:	4013      	ands	r3, r2
 801562a:	d0ef      	beq.n	801560c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	2220      	movs	r2, #32
 8015632:	4013      	ands	r3, r2
 8015634:	d01f      	beq.n	8015676 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	685a      	ldr	r2, [r3, #4]
 801563a:	23c0      	movs	r3, #192	@ 0xc0
 801563c:	029b      	lsls	r3, r3, #10
 801563e:	401a      	ands	r2, r3
 8015640:	23c0      	movs	r3, #192	@ 0xc0
 8015642:	029b      	lsls	r3, r3, #10
 8015644:	429a      	cmp	r2, r3
 8015646:	d10c      	bne.n	8015662 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8015648:	4b48      	ldr	r3, [pc, #288]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	4a4c      	ldr	r2, [pc, #304]	@ (8015780 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801564e:	4013      	ands	r3, r2
 8015650:	0019      	movs	r1, r3
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	685a      	ldr	r2, [r3, #4]
 8015656:	23c0      	movs	r3, #192	@ 0xc0
 8015658:	039b      	lsls	r3, r3, #14
 801565a:	401a      	ands	r2, r3
 801565c:	4b43      	ldr	r3, [pc, #268]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801565e:	430a      	orrs	r2, r1
 8015660:	601a      	str	r2, [r3, #0]
 8015662:	4b42      	ldr	r3, [pc, #264]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015664:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	685a      	ldr	r2, [r3, #4]
 801566a:	23c0      	movs	r3, #192	@ 0xc0
 801566c:	029b      	lsls	r3, r3, #10
 801566e:	401a      	ands	r2, r3
 8015670:	4b3e      	ldr	r3, [pc, #248]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015672:	430a      	orrs	r2, r1
 8015674:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015676:	2317      	movs	r3, #23
 8015678:	18fb      	adds	r3, r7, r3
 801567a:	781b      	ldrb	r3, [r3, #0]
 801567c:	2b01      	cmp	r3, #1
 801567e:	d105      	bne.n	801568c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015680:	4b3a      	ldr	r3, [pc, #232]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015682:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015684:	4b39      	ldr	r3, [pc, #228]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015686:	493f      	ldr	r1, [pc, #252]	@ (8015784 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8015688:	400a      	ands	r2, r1
 801568a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	2201      	movs	r2, #1
 8015692:	4013      	ands	r3, r2
 8015694:	d009      	beq.n	80156aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8015696:	4b35      	ldr	r3, [pc, #212]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801569a:	2203      	movs	r2, #3
 801569c:	4393      	bics	r3, r2
 801569e:	0019      	movs	r1, r3
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	689a      	ldr	r2, [r3, #8]
 80156a4:	4b31      	ldr	r3, [pc, #196]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80156a6:	430a      	orrs	r2, r1
 80156a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	2202      	movs	r2, #2
 80156b0:	4013      	ands	r3, r2
 80156b2:	d009      	beq.n	80156c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80156b4:	4b2d      	ldr	r3, [pc, #180]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80156b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80156b8:	220c      	movs	r2, #12
 80156ba:	4393      	bics	r3, r2
 80156bc:	0019      	movs	r1, r3
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	68da      	ldr	r2, [r3, #12]
 80156c2:	4b2a      	ldr	r3, [pc, #168]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80156c4:	430a      	orrs	r2, r1
 80156c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	2204      	movs	r2, #4
 80156ce:	4013      	ands	r3, r2
 80156d0:	d009      	beq.n	80156e6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80156d2:	4b26      	ldr	r3, [pc, #152]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80156d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80156d6:	4a2c      	ldr	r2, [pc, #176]	@ (8015788 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80156d8:	4013      	ands	r3, r2
 80156da:	0019      	movs	r1, r3
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	691a      	ldr	r2, [r3, #16]
 80156e0:	4b22      	ldr	r3, [pc, #136]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80156e2:	430a      	orrs	r2, r1
 80156e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	2208      	movs	r2, #8
 80156ec:	4013      	ands	r3, r2
 80156ee:	d009      	beq.n	8015704 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80156f0:	4b1e      	ldr	r3, [pc, #120]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80156f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80156f4:	4a25      	ldr	r2, [pc, #148]	@ (801578c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80156f6:	4013      	ands	r3, r2
 80156f8:	0019      	movs	r1, r3
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	695a      	ldr	r2, [r3, #20]
 80156fe:	4b1b      	ldr	r3, [pc, #108]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015700:	430a      	orrs	r2, r1
 8015702:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	681a      	ldr	r2, [r3, #0]
 8015708:	2380      	movs	r3, #128	@ 0x80
 801570a:	005b      	lsls	r3, r3, #1
 801570c:	4013      	ands	r3, r2
 801570e:	d009      	beq.n	8015724 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8015710:	4b16      	ldr	r3, [pc, #88]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015714:	4a17      	ldr	r2, [pc, #92]	@ (8015774 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015716:	4013      	ands	r3, r2
 8015718:	0019      	movs	r1, r3
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	699a      	ldr	r2, [r3, #24]
 801571e:	4b13      	ldr	r3, [pc, #76]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015720:	430a      	orrs	r2, r1
 8015722:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	2240      	movs	r2, #64	@ 0x40
 801572a:	4013      	ands	r3, r2
 801572c:	d009      	beq.n	8015742 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801572e:	4b0f      	ldr	r3, [pc, #60]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015732:	4a17      	ldr	r2, [pc, #92]	@ (8015790 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8015734:	4013      	ands	r3, r2
 8015736:	0019      	movs	r1, r3
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	6a1a      	ldr	r2, [r3, #32]
 801573c:	4b0b      	ldr	r3, [pc, #44]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801573e:	430a      	orrs	r2, r1
 8015740:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	2280      	movs	r2, #128	@ 0x80
 8015748:	4013      	ands	r3, r2
 801574a:	d009      	beq.n	8015760 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801574c:	4b07      	ldr	r3, [pc, #28]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801574e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015750:	4a10      	ldr	r2, [pc, #64]	@ (8015794 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8015752:	4013      	ands	r3, r2
 8015754:	0019      	movs	r1, r3
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	69da      	ldr	r2, [r3, #28]
 801575a:	4b04      	ldr	r3, [pc, #16]	@ (801576c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801575c:	430a      	orrs	r2, r1
 801575e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8015760:	2300      	movs	r3, #0
}
 8015762:	0018      	movs	r0, r3
 8015764:	46bd      	mov	sp, r7
 8015766:	b006      	add	sp, #24
 8015768:	bd80      	pop	{r7, pc}
 801576a:	46c0      	nop			@ (mov r8, r8)
 801576c:	40021000 	.word	0x40021000
 8015770:	40007000 	.word	0x40007000
 8015774:	fffcffff 	.word	0xfffcffff
 8015778:	fff7ffff 	.word	0xfff7ffff
 801577c:	00001388 	.word	0x00001388
 8015780:	ffcfffff 	.word	0xffcfffff
 8015784:	efffffff 	.word	0xefffffff
 8015788:	fffff3ff 	.word	0xfffff3ff
 801578c:	ffffcfff 	.word	0xffffcfff
 8015790:	fbffffff 	.word	0xfbffffff
 8015794:	fff3ffff 	.word	0xfff3ffff

08015798 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8015798:	b5b0      	push	{r4, r5, r7, lr}
 801579a:	b084      	sub	sp, #16
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80157a0:	230f      	movs	r3, #15
 80157a2:	18fb      	adds	r3, r7, r3
 80157a4:	2201      	movs	r2, #1
 80157a6:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d101      	bne.n	80157b2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80157ae:	2301      	movs	r3, #1
 80157b0:	e088      	b.n	80158c4 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	2221      	movs	r2, #33	@ 0x21
 80157b6:	5c9b      	ldrb	r3, [r3, r2]
 80157b8:	b2db      	uxtb	r3, r3
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d107      	bne.n	80157ce <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	2220      	movs	r2, #32
 80157c2:	2100      	movs	r1, #0
 80157c4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	0018      	movs	r0, r3
 80157ca:	f7f3 facb 	bl	8008d64 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	2221      	movs	r2, #33	@ 0x21
 80157d2:	2102      	movs	r1, #2
 80157d4:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	68db      	ldr	r3, [r3, #12]
 80157dc:	2210      	movs	r2, #16
 80157de:	4013      	ands	r3, r2
 80157e0:	2b10      	cmp	r3, #16
 80157e2:	d05f      	beq.n	80158a4 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	22ca      	movs	r2, #202	@ 0xca
 80157ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	2253      	movs	r2, #83	@ 0x53
 80157f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80157f4:	250f      	movs	r5, #15
 80157f6:	197c      	adds	r4, r7, r5
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	0018      	movs	r0, r3
 80157fc:	f000 fa7c 	bl	8015cf8 <RTC_EnterInitMode>
 8015800:	0003      	movs	r3, r0
 8015802:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8015804:	0028      	movs	r0, r5
 8015806:	183b      	adds	r3, r7, r0
 8015808:	781b      	ldrb	r3, [r3, #0]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d12c      	bne.n	8015868 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	689a      	ldr	r2, [r3, #8]
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	492c      	ldr	r1, [pc, #176]	@ (80158cc <HAL_RTC_Init+0x134>)
 801581a:	400a      	ands	r2, r1
 801581c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	6899      	ldr	r1, [r3, #8]
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	685a      	ldr	r2, [r3, #4]
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	691b      	ldr	r3, [r3, #16]
 801582c:	431a      	orrs	r2, r3
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	699b      	ldr	r3, [r3, #24]
 8015832:	431a      	orrs	r2, r3
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	430a      	orrs	r2, r1
 801583a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	687a      	ldr	r2, [r7, #4]
 8015842:	68d2      	ldr	r2, [r2, #12]
 8015844:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	6919      	ldr	r1, [r3, #16]
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	689b      	ldr	r3, [r3, #8]
 8015850:	041a      	lsls	r2, r3, #16
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	430a      	orrs	r2, r1
 8015858:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801585a:	183c      	adds	r4, r7, r0
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	0018      	movs	r0, r3
 8015860:	f000 fa8e 	bl	8015d80 <RTC_ExitInitMode>
 8015864:	0003      	movs	r3, r0
 8015866:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8015868:	230f      	movs	r3, #15
 801586a:	18fb      	adds	r3, r7, r3
 801586c:	781b      	ldrb	r3, [r3, #0]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d113      	bne.n	801589a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	2103      	movs	r1, #3
 801587e:	438a      	bics	r2, r1
 8015880:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	69da      	ldr	r2, [r3, #28]
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	695b      	ldr	r3, [r3, #20]
 8015890:	431a      	orrs	r2, r3
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	430a      	orrs	r2, r1
 8015898:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	22ff      	movs	r2, #255	@ 0xff
 80158a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80158a2:	e003      	b.n	80158ac <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80158a4:	230f      	movs	r3, #15
 80158a6:	18fb      	adds	r3, r7, r3
 80158a8:	2200      	movs	r2, #0
 80158aa:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80158ac:	230f      	movs	r3, #15
 80158ae:	18fb      	adds	r3, r7, r3
 80158b0:	781b      	ldrb	r3, [r3, #0]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d103      	bne.n	80158be <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	2221      	movs	r2, #33	@ 0x21
 80158ba:	2101      	movs	r1, #1
 80158bc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80158be:	230f      	movs	r3, #15
 80158c0:	18fb      	adds	r3, r7, r3
 80158c2:	781b      	ldrb	r3, [r3, #0]
}
 80158c4:	0018      	movs	r0, r3
 80158c6:	46bd      	mov	sp, r7
 80158c8:	b004      	add	sp, #16
 80158ca:	bdb0      	pop	{r4, r5, r7, pc}
 80158cc:	ff8fffbf 	.word	0xff8fffbf

080158d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80158d0:	b5b0      	push	{r4, r5, r7, lr}
 80158d2:	b086      	sub	sp, #24
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	60f8      	str	r0, [r7, #12]
 80158d8:	60b9      	str	r1, [r7, #8]
 80158da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80158dc:	2300      	movs	r3, #0
 80158de:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	2220      	movs	r2, #32
 80158e4:	5c9b      	ldrb	r3, [r3, r2]
 80158e6:	2b01      	cmp	r3, #1
 80158e8:	d101      	bne.n	80158ee <HAL_RTC_SetTime+0x1e>
 80158ea:	2302      	movs	r3, #2
 80158ec:	e092      	b.n	8015a14 <HAL_RTC_SetTime+0x144>
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	2220      	movs	r2, #32
 80158f2:	2101      	movs	r1, #1
 80158f4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	2221      	movs	r2, #33	@ 0x21
 80158fa:	2102      	movs	r1, #2
 80158fc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d125      	bne.n	8015950 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	689b      	ldr	r3, [r3, #8]
 801590a:	2240      	movs	r2, #64	@ 0x40
 801590c:	4013      	ands	r3, r2
 801590e:	d102      	bne.n	8015916 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8015910:	68bb      	ldr	r3, [r7, #8]
 8015912:	2200      	movs	r2, #0
 8015914:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015916:	68bb      	ldr	r3, [r7, #8]
 8015918:	781b      	ldrb	r3, [r3, #0]
 801591a:	0018      	movs	r0, r3
 801591c:	f000 fa5a 	bl	8015dd4 <RTC_ByteToBcd2>
 8015920:	0003      	movs	r3, r0
 8015922:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015924:	68bb      	ldr	r3, [r7, #8]
 8015926:	785b      	ldrb	r3, [r3, #1]
 8015928:	0018      	movs	r0, r3
 801592a:	f000 fa53 	bl	8015dd4 <RTC_ByteToBcd2>
 801592e:	0003      	movs	r3, r0
 8015930:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015932:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8015934:	68bb      	ldr	r3, [r7, #8]
 8015936:	789b      	ldrb	r3, [r3, #2]
 8015938:	0018      	movs	r0, r3
 801593a:	f000 fa4b 	bl	8015dd4 <RTC_ByteToBcd2>
 801593e:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015940:	0022      	movs	r2, r4
 8015942:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	78db      	ldrb	r3, [r3, #3]
 8015948:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801594a:	4313      	orrs	r3, r2
 801594c:	617b      	str	r3, [r7, #20]
 801594e:	e017      	b.n	8015980 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	689b      	ldr	r3, [r3, #8]
 8015956:	2240      	movs	r2, #64	@ 0x40
 8015958:	4013      	ands	r3, r2
 801595a:	d102      	bne.n	8015962 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801595c:	68bb      	ldr	r3, [r7, #8]
 801595e:	2200      	movs	r2, #0
 8015960:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015962:	68bb      	ldr	r3, [r7, #8]
 8015964:	781b      	ldrb	r3, [r3, #0]
 8015966:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8015968:	68bb      	ldr	r3, [r7, #8]
 801596a:	785b      	ldrb	r3, [r3, #1]
 801596c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801596e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8015970:	68ba      	ldr	r2, [r7, #8]
 8015972:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8015974:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8015976:	68bb      	ldr	r3, [r7, #8]
 8015978:	78db      	ldrb	r3, [r3, #3]
 801597a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801597c:	4313      	orrs	r3, r2
 801597e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	22ca      	movs	r2, #202	@ 0xca
 8015986:	625a      	str	r2, [r3, #36]	@ 0x24
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	2253      	movs	r2, #83	@ 0x53
 801598e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8015990:	2513      	movs	r5, #19
 8015992:	197c      	adds	r4, r7, r5
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	0018      	movs	r0, r3
 8015998:	f000 f9ae 	bl	8015cf8 <RTC_EnterInitMode>
 801599c:	0003      	movs	r3, r0
 801599e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80159a0:	0028      	movs	r0, r5
 80159a2:	183b      	adds	r3, r7, r0
 80159a4:	781b      	ldrb	r3, [r3, #0]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d120      	bne.n	80159ec <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	697a      	ldr	r2, [r7, #20]
 80159b0:	491a      	ldr	r1, [pc, #104]	@ (8015a1c <HAL_RTC_SetTime+0x14c>)
 80159b2:	400a      	ands	r2, r1
 80159b4:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	689a      	ldr	r2, [r3, #8]
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	4917      	ldr	r1, [pc, #92]	@ (8015a20 <HAL_RTC_SetTime+0x150>)
 80159c2:	400a      	ands	r2, r1
 80159c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	6899      	ldr	r1, [r3, #8]
 80159cc:	68bb      	ldr	r3, [r7, #8]
 80159ce:	68da      	ldr	r2, [r3, #12]
 80159d0:	68bb      	ldr	r3, [r7, #8]
 80159d2:	691b      	ldr	r3, [r3, #16]
 80159d4:	431a      	orrs	r2, r3
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	430a      	orrs	r2, r1
 80159dc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80159de:	183c      	adds	r4, r7, r0
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	0018      	movs	r0, r3
 80159e4:	f000 f9cc 	bl	8015d80 <RTC_ExitInitMode>
 80159e8:	0003      	movs	r3, r0
 80159ea:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80159ec:	2313      	movs	r3, #19
 80159ee:	18fb      	adds	r3, r7, r3
 80159f0:	781b      	ldrb	r3, [r3, #0]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d103      	bne.n	80159fe <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	2221      	movs	r2, #33	@ 0x21
 80159fa:	2101      	movs	r1, #1
 80159fc:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	22ff      	movs	r2, #255	@ 0xff
 8015a04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	2220      	movs	r2, #32
 8015a0a:	2100      	movs	r1, #0
 8015a0c:	5499      	strb	r1, [r3, r2]

  return status;
 8015a0e:	2313      	movs	r3, #19
 8015a10:	18fb      	adds	r3, r7, r3
 8015a12:	781b      	ldrb	r3, [r3, #0]
}
 8015a14:	0018      	movs	r0, r3
 8015a16:	46bd      	mov	sp, r7
 8015a18:	b006      	add	sp, #24
 8015a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8015a1c:	007f7f7f 	.word	0x007f7f7f
 8015a20:	fffbffff 	.word	0xfffbffff

08015a24 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b086      	sub	sp, #24
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	60f8      	str	r0, [r7, #12]
 8015a2c:	60b9      	str	r1, [r7, #8]
 8015a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8015a30:	2300      	movs	r3, #0
 8015a32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015a3a:	68bb      	ldr	r3, [r7, #8]
 8015a3c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	691b      	ldr	r3, [r3, #16]
 8015a44:	045b      	lsls	r3, r3, #17
 8015a46:	0c5a      	lsrs	r2, r3, #17
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	4a22      	ldr	r2, [pc, #136]	@ (8015adc <HAL_RTC_GetTime+0xb8>)
 8015a54:	4013      	ands	r3, r2
 8015a56:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8015a58:	697b      	ldr	r3, [r7, #20]
 8015a5a:	0c1b      	lsrs	r3, r3, #16
 8015a5c:	b2db      	uxtb	r3, r3
 8015a5e:	223f      	movs	r2, #63	@ 0x3f
 8015a60:	4013      	ands	r3, r2
 8015a62:	b2da      	uxtb	r2, r3
 8015a64:	68bb      	ldr	r3, [r7, #8]
 8015a66:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8015a68:	697b      	ldr	r3, [r7, #20]
 8015a6a:	0a1b      	lsrs	r3, r3, #8
 8015a6c:	b2db      	uxtb	r3, r3
 8015a6e:	227f      	movs	r2, #127	@ 0x7f
 8015a70:	4013      	ands	r3, r2
 8015a72:	b2da      	uxtb	r2, r3
 8015a74:	68bb      	ldr	r3, [r7, #8]
 8015a76:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8015a78:	697b      	ldr	r3, [r7, #20]
 8015a7a:	b2db      	uxtb	r3, r3
 8015a7c:	227f      	movs	r2, #127	@ 0x7f
 8015a7e:	4013      	ands	r3, r2
 8015a80:	b2da      	uxtb	r2, r3
 8015a82:	68bb      	ldr	r3, [r7, #8]
 8015a84:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8015a86:	697b      	ldr	r3, [r7, #20]
 8015a88:	0d9b      	lsrs	r3, r3, #22
 8015a8a:	b2db      	uxtb	r3, r3
 8015a8c:	2201      	movs	r2, #1
 8015a8e:	4013      	ands	r3, r2
 8015a90:	b2da      	uxtb	r2, r3
 8015a92:	68bb      	ldr	r3, [r7, #8]
 8015a94:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d11a      	bne.n	8015ad2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8015a9c:	68bb      	ldr	r3, [r7, #8]
 8015a9e:	781b      	ldrb	r3, [r3, #0]
 8015aa0:	0018      	movs	r0, r3
 8015aa2:	f000 f9b8 	bl	8015e16 <RTC_Bcd2ToByte>
 8015aa6:	0003      	movs	r3, r0
 8015aa8:	001a      	movs	r2, r3
 8015aaa:	68bb      	ldr	r3, [r7, #8]
 8015aac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8015aae:	68bb      	ldr	r3, [r7, #8]
 8015ab0:	785b      	ldrb	r3, [r3, #1]
 8015ab2:	0018      	movs	r0, r3
 8015ab4:	f000 f9af 	bl	8015e16 <RTC_Bcd2ToByte>
 8015ab8:	0003      	movs	r3, r0
 8015aba:	001a      	movs	r2, r3
 8015abc:	68bb      	ldr	r3, [r7, #8]
 8015abe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8015ac0:	68bb      	ldr	r3, [r7, #8]
 8015ac2:	789b      	ldrb	r3, [r3, #2]
 8015ac4:	0018      	movs	r0, r3
 8015ac6:	f000 f9a6 	bl	8015e16 <RTC_Bcd2ToByte>
 8015aca:	0003      	movs	r3, r0
 8015acc:	001a      	movs	r2, r3
 8015ace:	68bb      	ldr	r3, [r7, #8]
 8015ad0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8015ad2:	2300      	movs	r3, #0
}
 8015ad4:	0018      	movs	r0, r3
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	b006      	add	sp, #24
 8015ada:	bd80      	pop	{r7, pc}
 8015adc:	007f7f7f 	.word	0x007f7f7f

08015ae0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8015ae0:	b5b0      	push	{r4, r5, r7, lr}
 8015ae2:	b086      	sub	sp, #24
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	60f8      	str	r0, [r7, #12]
 8015ae8:	60b9      	str	r1, [r7, #8]
 8015aea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8015aec:	2300      	movs	r3, #0
 8015aee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	2220      	movs	r2, #32
 8015af4:	5c9b      	ldrb	r3, [r3, r2]
 8015af6:	2b01      	cmp	r3, #1
 8015af8:	d101      	bne.n	8015afe <HAL_RTC_SetDate+0x1e>
 8015afa:	2302      	movs	r3, #2
 8015afc:	e07e      	b.n	8015bfc <HAL_RTC_SetDate+0x11c>
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	2220      	movs	r2, #32
 8015b02:	2101      	movs	r1, #1
 8015b04:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	2221      	movs	r2, #33	@ 0x21
 8015b0a:	2102      	movs	r1, #2
 8015b0c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d10e      	bne.n	8015b32 <HAL_RTC_SetDate+0x52>
 8015b14:	68bb      	ldr	r3, [r7, #8]
 8015b16:	785b      	ldrb	r3, [r3, #1]
 8015b18:	001a      	movs	r2, r3
 8015b1a:	2310      	movs	r3, #16
 8015b1c:	4013      	ands	r3, r2
 8015b1e:	d008      	beq.n	8015b32 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8015b20:	68bb      	ldr	r3, [r7, #8]
 8015b22:	785b      	ldrb	r3, [r3, #1]
 8015b24:	2210      	movs	r2, #16
 8015b26:	4393      	bics	r3, r2
 8015b28:	b2db      	uxtb	r3, r3
 8015b2a:	330a      	adds	r3, #10
 8015b2c:	b2da      	uxtb	r2, r3
 8015b2e:	68bb      	ldr	r3, [r7, #8]
 8015b30:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d11c      	bne.n	8015b72 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8015b38:	68bb      	ldr	r3, [r7, #8]
 8015b3a:	78db      	ldrb	r3, [r3, #3]
 8015b3c:	0018      	movs	r0, r3
 8015b3e:	f000 f949 	bl	8015dd4 <RTC_ByteToBcd2>
 8015b42:	0003      	movs	r3, r0
 8015b44:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8015b46:	68bb      	ldr	r3, [r7, #8]
 8015b48:	785b      	ldrb	r3, [r3, #1]
 8015b4a:	0018      	movs	r0, r3
 8015b4c:	f000 f942 	bl	8015dd4 <RTC_ByteToBcd2>
 8015b50:	0003      	movs	r3, r0
 8015b52:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8015b54:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8015b56:	68bb      	ldr	r3, [r7, #8]
 8015b58:	789b      	ldrb	r3, [r3, #2]
 8015b5a:	0018      	movs	r0, r3
 8015b5c:	f000 f93a 	bl	8015dd4 <RTC_ByteToBcd2>
 8015b60:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8015b62:	0022      	movs	r2, r4
 8015b64:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8015b66:	68bb      	ldr	r3, [r7, #8]
 8015b68:	781b      	ldrb	r3, [r3, #0]
 8015b6a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8015b6c:	4313      	orrs	r3, r2
 8015b6e:	617b      	str	r3, [r7, #20]
 8015b70:	e00e      	b.n	8015b90 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8015b72:	68bb      	ldr	r3, [r7, #8]
 8015b74:	78db      	ldrb	r3, [r3, #3]
 8015b76:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8015b78:	68bb      	ldr	r3, [r7, #8]
 8015b7a:	785b      	ldrb	r3, [r3, #1]
 8015b7c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8015b7e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8015b80:	68ba      	ldr	r2, [r7, #8]
 8015b82:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8015b84:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8015b86:	68bb      	ldr	r3, [r7, #8]
 8015b88:	781b      	ldrb	r3, [r3, #0]
 8015b8a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8015b8c:	4313      	orrs	r3, r2
 8015b8e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	22ca      	movs	r2, #202	@ 0xca
 8015b96:	625a      	str	r2, [r3, #36]	@ 0x24
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	2253      	movs	r2, #83	@ 0x53
 8015b9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8015ba0:	2513      	movs	r5, #19
 8015ba2:	197c      	adds	r4, r7, r5
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	0018      	movs	r0, r3
 8015ba8:	f000 f8a6 	bl	8015cf8 <RTC_EnterInitMode>
 8015bac:	0003      	movs	r3, r0
 8015bae:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8015bb0:	0028      	movs	r0, r5
 8015bb2:	183b      	adds	r3, r7, r0
 8015bb4:	781b      	ldrb	r3, [r3, #0]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d10c      	bne.n	8015bd4 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	697a      	ldr	r2, [r7, #20]
 8015bc0:	4910      	ldr	r1, [pc, #64]	@ (8015c04 <HAL_RTC_SetDate+0x124>)
 8015bc2:	400a      	ands	r2, r1
 8015bc4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8015bc6:	183c      	adds	r4, r7, r0
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	0018      	movs	r0, r3
 8015bcc:	f000 f8d8 	bl	8015d80 <RTC_ExitInitMode>
 8015bd0:	0003      	movs	r3, r0
 8015bd2:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8015bd4:	2313      	movs	r3, #19
 8015bd6:	18fb      	adds	r3, r7, r3
 8015bd8:	781b      	ldrb	r3, [r3, #0]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d103      	bne.n	8015be6 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	2221      	movs	r2, #33	@ 0x21
 8015be2:	2101      	movs	r1, #1
 8015be4:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	22ff      	movs	r2, #255	@ 0xff
 8015bec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	2220      	movs	r2, #32
 8015bf2:	2100      	movs	r1, #0
 8015bf4:	5499      	strb	r1, [r3, r2]

  return status;
 8015bf6:	2313      	movs	r3, #19
 8015bf8:	18fb      	adds	r3, r7, r3
 8015bfa:	781b      	ldrb	r3, [r3, #0]
}
 8015bfc:	0018      	movs	r0, r3
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	b006      	add	sp, #24
 8015c02:	bdb0      	pop	{r4, r5, r7, pc}
 8015c04:	00ffff3f 	.word	0x00ffff3f

08015c08 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b086      	sub	sp, #24
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	60f8      	str	r0, [r7, #12]
 8015c10:	60b9      	str	r1, [r7, #8]
 8015c12:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8015c14:	2300      	movs	r3, #0
 8015c16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	685b      	ldr	r3, [r3, #4]
 8015c1e:	4a21      	ldr	r2, [pc, #132]	@ (8015ca4 <HAL_RTC_GetDate+0x9c>)
 8015c20:	4013      	ands	r3, r2
 8015c22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8015c24:	697b      	ldr	r3, [r7, #20]
 8015c26:	0c1b      	lsrs	r3, r3, #16
 8015c28:	b2da      	uxtb	r2, r3
 8015c2a:	68bb      	ldr	r3, [r7, #8]
 8015c2c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8015c2e:	697b      	ldr	r3, [r7, #20]
 8015c30:	0a1b      	lsrs	r3, r3, #8
 8015c32:	b2db      	uxtb	r3, r3
 8015c34:	221f      	movs	r2, #31
 8015c36:	4013      	ands	r3, r2
 8015c38:	b2da      	uxtb	r2, r3
 8015c3a:	68bb      	ldr	r3, [r7, #8]
 8015c3c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8015c3e:	697b      	ldr	r3, [r7, #20]
 8015c40:	b2db      	uxtb	r3, r3
 8015c42:	223f      	movs	r2, #63	@ 0x3f
 8015c44:	4013      	ands	r3, r2
 8015c46:	b2da      	uxtb	r2, r3
 8015c48:	68bb      	ldr	r3, [r7, #8]
 8015c4a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8015c4c:	697b      	ldr	r3, [r7, #20]
 8015c4e:	0b5b      	lsrs	r3, r3, #13
 8015c50:	b2db      	uxtb	r3, r3
 8015c52:	2207      	movs	r2, #7
 8015c54:	4013      	ands	r3, r2
 8015c56:	b2da      	uxtb	r2, r3
 8015c58:	68bb      	ldr	r3, [r7, #8]
 8015c5a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d11a      	bne.n	8015c98 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8015c62:	68bb      	ldr	r3, [r7, #8]
 8015c64:	78db      	ldrb	r3, [r3, #3]
 8015c66:	0018      	movs	r0, r3
 8015c68:	f000 f8d5 	bl	8015e16 <RTC_Bcd2ToByte>
 8015c6c:	0003      	movs	r3, r0
 8015c6e:	001a      	movs	r2, r3
 8015c70:	68bb      	ldr	r3, [r7, #8]
 8015c72:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8015c74:	68bb      	ldr	r3, [r7, #8]
 8015c76:	785b      	ldrb	r3, [r3, #1]
 8015c78:	0018      	movs	r0, r3
 8015c7a:	f000 f8cc 	bl	8015e16 <RTC_Bcd2ToByte>
 8015c7e:	0003      	movs	r3, r0
 8015c80:	001a      	movs	r2, r3
 8015c82:	68bb      	ldr	r3, [r7, #8]
 8015c84:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8015c86:	68bb      	ldr	r3, [r7, #8]
 8015c88:	789b      	ldrb	r3, [r3, #2]
 8015c8a:	0018      	movs	r0, r3
 8015c8c:	f000 f8c3 	bl	8015e16 <RTC_Bcd2ToByte>
 8015c90:	0003      	movs	r3, r0
 8015c92:	001a      	movs	r2, r3
 8015c94:	68bb      	ldr	r3, [r7, #8]
 8015c96:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8015c98:	2300      	movs	r3, #0
}
 8015c9a:	0018      	movs	r0, r3
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	b006      	add	sp, #24
 8015ca0:	bd80      	pop	{r7, pc}
 8015ca2:	46c0      	nop			@ (mov r8, r8)
 8015ca4:	00ffff3f 	.word	0x00ffff3f

08015ca8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b084      	sub	sp, #16
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8015cf4 <HAL_RTC_WaitForSynchro+0x4c>)
 8015cba:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015cbc:	f7f8 fce8 	bl	800e690 <HAL_GetTick>
 8015cc0:	0003      	movs	r3, r0
 8015cc2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8015cc4:	e00a      	b.n	8015cdc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015cc6:	f7f8 fce3 	bl	800e690 <HAL_GetTick>
 8015cca:	0002      	movs	r2, r0
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	1ad2      	subs	r2, r2, r3
 8015cd0:	23fa      	movs	r3, #250	@ 0xfa
 8015cd2:	009b      	lsls	r3, r3, #2
 8015cd4:	429a      	cmp	r2, r3
 8015cd6:	d901      	bls.n	8015cdc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8015cd8:	2303      	movs	r3, #3
 8015cda:	e006      	b.n	8015cea <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	68db      	ldr	r3, [r3, #12]
 8015ce2:	2220      	movs	r2, #32
 8015ce4:	4013      	ands	r3, r2
 8015ce6:	d0ee      	beq.n	8015cc6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8015ce8:	2300      	movs	r3, #0
}
 8015cea:	0018      	movs	r0, r3
 8015cec:	46bd      	mov	sp, r7
 8015cee:	b004      	add	sp, #16
 8015cf0:	bd80      	pop	{r7, pc}
 8015cf2:	46c0      	nop			@ (mov r8, r8)
 8015cf4:	0001ff5f 	.word	0x0001ff5f

08015cf8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b084      	sub	sp, #16
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015d00:	2300      	movs	r3, #0
 8015d02:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8015d04:	230f      	movs	r3, #15
 8015d06:	18fb      	adds	r3, r7, r3
 8015d08:	2200      	movs	r2, #0
 8015d0a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	68db      	ldr	r3, [r3, #12]
 8015d12:	2240      	movs	r2, #64	@ 0x40
 8015d14:	4013      	ands	r3, r2
 8015d16:	d12c      	bne.n	8015d72 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	68da      	ldr	r2, [r3, #12]
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	2180      	movs	r1, #128	@ 0x80
 8015d24:	430a      	orrs	r2, r1
 8015d26:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8015d28:	f7f8 fcb2 	bl	800e690 <HAL_GetTick>
 8015d2c:	0003      	movs	r3, r0
 8015d2e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8015d30:	e014      	b.n	8015d5c <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015d32:	f7f8 fcad 	bl	800e690 <HAL_GetTick>
 8015d36:	0002      	movs	r2, r0
 8015d38:	68bb      	ldr	r3, [r7, #8]
 8015d3a:	1ad2      	subs	r2, r2, r3
 8015d3c:	200f      	movs	r0, #15
 8015d3e:	183b      	adds	r3, r7, r0
 8015d40:	1839      	adds	r1, r7, r0
 8015d42:	7809      	ldrb	r1, [r1, #0]
 8015d44:	7019      	strb	r1, [r3, #0]
 8015d46:	23fa      	movs	r3, #250	@ 0xfa
 8015d48:	009b      	lsls	r3, r3, #2
 8015d4a:	429a      	cmp	r2, r3
 8015d4c:	d906      	bls.n	8015d5c <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	2221      	movs	r2, #33	@ 0x21
 8015d52:	2104      	movs	r1, #4
 8015d54:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8015d56:	183b      	adds	r3, r7, r0
 8015d58:	2201      	movs	r2, #1
 8015d5a:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	68db      	ldr	r3, [r3, #12]
 8015d62:	2240      	movs	r2, #64	@ 0x40
 8015d64:	4013      	ands	r3, r2
 8015d66:	d104      	bne.n	8015d72 <RTC_EnterInitMode+0x7a>
 8015d68:	230f      	movs	r3, #15
 8015d6a:	18fb      	adds	r3, r7, r3
 8015d6c:	781b      	ldrb	r3, [r3, #0]
 8015d6e:	2b01      	cmp	r3, #1
 8015d70:	d1df      	bne.n	8015d32 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8015d72:	230f      	movs	r3, #15
 8015d74:	18fb      	adds	r3, r7, r3
 8015d76:	781b      	ldrb	r3, [r3, #0]
}
 8015d78:	0018      	movs	r0, r3
 8015d7a:	46bd      	mov	sp, r7
 8015d7c:	b004      	add	sp, #16
 8015d7e:	bd80      	pop	{r7, pc}

08015d80 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8015d80:	b590      	push	{r4, r7, lr}
 8015d82:	b085      	sub	sp, #20
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015d88:	240f      	movs	r4, #15
 8015d8a:	193b      	adds	r3, r7, r4
 8015d8c:	2200      	movs	r2, #0
 8015d8e:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	68da      	ldr	r2, [r3, #12]
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	2180      	movs	r1, #128	@ 0x80
 8015d9c:	438a      	bics	r2, r1
 8015d9e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	689b      	ldr	r3, [r3, #8]
 8015da6:	2220      	movs	r2, #32
 8015da8:	4013      	ands	r3, r2
 8015daa:	d10c      	bne.n	8015dc6 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	0018      	movs	r0, r3
 8015db0:	f7ff ff7a 	bl	8015ca8 <HAL_RTC_WaitForSynchro>
 8015db4:	1e03      	subs	r3, r0, #0
 8015db6:	d006      	beq.n	8015dc6 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	2221      	movs	r2, #33	@ 0x21
 8015dbc:	2104      	movs	r1, #4
 8015dbe:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8015dc0:	193b      	adds	r3, r7, r4
 8015dc2:	2201      	movs	r2, #1
 8015dc4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8015dc6:	230f      	movs	r3, #15
 8015dc8:	18fb      	adds	r3, r7, r3
 8015dca:	781b      	ldrb	r3, [r3, #0]
}
 8015dcc:	0018      	movs	r0, r3
 8015dce:	46bd      	mov	sp, r7
 8015dd0:	b005      	add	sp, #20
 8015dd2:	bd90      	pop	{r4, r7, pc}

08015dd4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b084      	sub	sp, #16
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	0002      	movs	r2, r0
 8015ddc:	1dfb      	adds	r3, r7, #7
 8015dde:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8015de0:	2300      	movs	r3, #0
 8015de2:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8015de4:	e007      	b.n	8015df6 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	3301      	adds	r3, #1
 8015dea:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8015dec:	1dfb      	adds	r3, r7, #7
 8015dee:	1dfa      	adds	r2, r7, #7
 8015df0:	7812      	ldrb	r2, [r2, #0]
 8015df2:	3a0a      	subs	r2, #10
 8015df4:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8015df6:	1dfb      	adds	r3, r7, #7
 8015df8:	781b      	ldrb	r3, [r3, #0]
 8015dfa:	2b09      	cmp	r3, #9
 8015dfc:	d8f3      	bhi.n	8015de6 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	b2db      	uxtb	r3, r3
 8015e02:	011b      	lsls	r3, r3, #4
 8015e04:	b2da      	uxtb	r2, r3
 8015e06:	1dfb      	adds	r3, r7, #7
 8015e08:	781b      	ldrb	r3, [r3, #0]
 8015e0a:	4313      	orrs	r3, r2
 8015e0c:	b2db      	uxtb	r3, r3
}
 8015e0e:	0018      	movs	r0, r3
 8015e10:	46bd      	mov	sp, r7
 8015e12:	b004      	add	sp, #16
 8015e14:	bd80      	pop	{r7, pc}

08015e16 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8015e16:	b580      	push	{r7, lr}
 8015e18:	b084      	sub	sp, #16
 8015e1a:	af00      	add	r7, sp, #0
 8015e1c:	0002      	movs	r2, r0
 8015e1e:	1dfb      	adds	r3, r7, #7
 8015e20:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8015e22:	2300      	movs	r3, #0
 8015e24:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8015e26:	1dfb      	adds	r3, r7, #7
 8015e28:	781b      	ldrb	r3, [r3, #0]
 8015e2a:	091b      	lsrs	r3, r3, #4
 8015e2c:	b2db      	uxtb	r3, r3
 8015e2e:	001a      	movs	r2, r3
 8015e30:	0013      	movs	r3, r2
 8015e32:	009b      	lsls	r3, r3, #2
 8015e34:	189b      	adds	r3, r3, r2
 8015e36:	005b      	lsls	r3, r3, #1
 8015e38:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	b2da      	uxtb	r2, r3
 8015e3e:	1dfb      	adds	r3, r7, #7
 8015e40:	781b      	ldrb	r3, [r3, #0]
 8015e42:	210f      	movs	r1, #15
 8015e44:	400b      	ands	r3, r1
 8015e46:	b2db      	uxtb	r3, r3
 8015e48:	18d3      	adds	r3, r2, r3
 8015e4a:	b2db      	uxtb	r3, r3
}
 8015e4c:	0018      	movs	r0, r3
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	b004      	add	sp, #16
 8015e52:	bd80      	pop	{r7, pc}

08015e54 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8015e54:	b580      	push	{r7, lr}
 8015e56:	b086      	sub	sp, #24
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	60f8      	str	r0, [r7, #12]
 8015e5c:	60b9      	str	r1, [r7, #8]
 8015e5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8015e60:	4b64      	ldr	r3, [pc, #400]	@ (8015ff4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	22fa      	movs	r2, #250	@ 0xfa
 8015e66:	01d1      	lsls	r1, r2, #7
 8015e68:	0018      	movs	r0, r3
 8015e6a:	f7ea f99b 	bl	80001a4 <__udivsi3>
 8015e6e:	0003      	movs	r3, r0
 8015e70:	001a      	movs	r2, r3
 8015e72:	0013      	movs	r3, r2
 8015e74:	015b      	lsls	r3, r3, #5
 8015e76:	1a9b      	subs	r3, r3, r2
 8015e78:	009b      	lsls	r3, r3, #2
 8015e7a:	189b      	adds	r3, r3, r2
 8015e7c:	00db      	lsls	r3, r3, #3
 8015e7e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	2220      	movs	r2, #32
 8015e84:	5c9b      	ldrb	r3, [r3, r2]
 8015e86:	2b01      	cmp	r3, #1
 8015e88:	d101      	bne.n	8015e8e <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8015e8a:	2302      	movs	r3, #2
 8015e8c:	e0ad      	b.n	8015fea <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	2220      	movs	r2, #32
 8015e92:	2101      	movs	r1, #1
 8015e94:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	2221      	movs	r2, #33	@ 0x21
 8015e9a:	2102      	movs	r1, #2
 8015e9c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	22ca      	movs	r2, #202	@ 0xca
 8015ea4:	625a      	str	r2, [r3, #36]	@ 0x24
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	2253      	movs	r2, #83	@ 0x53
 8015eac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	689a      	ldr	r2, [r3, #8]
 8015eb4:	2380      	movs	r3, #128	@ 0x80
 8015eb6:	00db      	lsls	r3, r3, #3
 8015eb8:	4013      	ands	r3, r2
 8015eba:	d019      	beq.n	8015ef0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8015ebc:	697b      	ldr	r3, [r7, #20]
 8015ebe:	3b01      	subs	r3, #1
 8015ec0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8015ec2:	697b      	ldr	r3, [r7, #20]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d10d      	bne.n	8015ee4 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	22ff      	movs	r2, #255	@ 0xff
 8015ece:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	2221      	movs	r2, #33	@ 0x21
 8015ed4:	2103      	movs	r1, #3
 8015ed6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	2220      	movs	r2, #32
 8015edc:	2100      	movs	r1, #0
 8015ede:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8015ee0:	2303      	movs	r3, #3
 8015ee2:	e082      	b.n	8015fea <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	68db      	ldr	r3, [r3, #12]
 8015eea:	2204      	movs	r2, #4
 8015eec:	4013      	ands	r3, r2
 8015eee:	d1e5      	bne.n	8015ebc <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	689a      	ldr	r2, [r3, #8]
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	493f      	ldr	r1, [pc, #252]	@ (8015ff8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8015efc:	400a      	ands	r2, r1
 8015efe:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	68db      	ldr	r3, [r3, #12]
 8015f06:	22ff      	movs	r2, #255	@ 0xff
 8015f08:	401a      	ands	r2, r3
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	493b      	ldr	r1, [pc, #236]	@ (8015ffc <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8015f10:	430a      	orrs	r2, r1
 8015f12:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8015f14:	4b37      	ldr	r3, [pc, #220]	@ (8015ff4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	22fa      	movs	r2, #250	@ 0xfa
 8015f1a:	01d1      	lsls	r1, r2, #7
 8015f1c:	0018      	movs	r0, r3
 8015f1e:	f7ea f941 	bl	80001a4 <__udivsi3>
 8015f22:	0003      	movs	r3, r0
 8015f24:	001a      	movs	r2, r3
 8015f26:	0013      	movs	r3, r2
 8015f28:	015b      	lsls	r3, r3, #5
 8015f2a:	1a9b      	subs	r3, r3, r2
 8015f2c:	009b      	lsls	r3, r3, #2
 8015f2e:	189b      	adds	r3, r3, r2
 8015f30:	00db      	lsls	r3, r3, #3
 8015f32:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8015f34:	697b      	ldr	r3, [r7, #20]
 8015f36:	3b01      	subs	r3, #1
 8015f38:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8015f3a:	697b      	ldr	r3, [r7, #20]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d10d      	bne.n	8015f5c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	22ff      	movs	r2, #255	@ 0xff
 8015f46:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	2221      	movs	r2, #33	@ 0x21
 8015f4c:	2103      	movs	r1, #3
 8015f4e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	2220      	movs	r2, #32
 8015f54:	2100      	movs	r1, #0
 8015f56:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8015f58:	2303      	movs	r3, #3
 8015f5a:	e046      	b.n	8015fea <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	68db      	ldr	r3, [r3, #12]
 8015f62:	2204      	movs	r2, #4
 8015f64:	4013      	ands	r3, r2
 8015f66:	d0e5      	beq.n	8015f34 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	689a      	ldr	r2, [r3, #8]
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	2107      	movs	r1, #7
 8015f74:	438a      	bics	r2, r1
 8015f76:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	6899      	ldr	r1, [r3, #8]
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	687a      	ldr	r2, [r7, #4]
 8015f84:	430a      	orrs	r2, r1
 8015f86:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	68ba      	ldr	r2, [r7, #8]
 8015f8e:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8015f90:	4b1b      	ldr	r3, [pc, #108]	@ (8016000 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015f92:	681a      	ldr	r2, [r3, #0]
 8015f94:	4b1a      	ldr	r3, [pc, #104]	@ (8016000 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015f96:	2180      	movs	r1, #128	@ 0x80
 8015f98:	0349      	lsls	r1, r1, #13
 8015f9a:	430a      	orrs	r2, r1
 8015f9c:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8015f9e:	4b18      	ldr	r3, [pc, #96]	@ (8016000 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015fa0:	689a      	ldr	r2, [r3, #8]
 8015fa2:	4b17      	ldr	r3, [pc, #92]	@ (8016000 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015fa4:	2180      	movs	r1, #128	@ 0x80
 8015fa6:	0349      	lsls	r1, r1, #13
 8015fa8:	430a      	orrs	r2, r1
 8015faa:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	689a      	ldr	r2, [r3, #8]
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	2180      	movs	r1, #128	@ 0x80
 8015fb8:	01c9      	lsls	r1, r1, #7
 8015fba:	430a      	orrs	r2, r1
 8015fbc:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	689a      	ldr	r2, [r3, #8]
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	2180      	movs	r1, #128	@ 0x80
 8015fca:	00c9      	lsls	r1, r1, #3
 8015fcc:	430a      	orrs	r2, r1
 8015fce:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	22ff      	movs	r2, #255	@ 0xff
 8015fd6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	2221      	movs	r2, #33	@ 0x21
 8015fdc:	2101      	movs	r1, #1
 8015fde:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	2220      	movs	r2, #32
 8015fe4:	2100      	movs	r1, #0
 8015fe6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015fe8:	2300      	movs	r3, #0
}
 8015fea:	0018      	movs	r0, r3
 8015fec:	46bd      	mov	sp, r7
 8015fee:	b006      	add	sp, #24
 8015ff0:	bd80      	pop	{r7, pc}
 8015ff2:	46c0      	nop			@ (mov r8, r8)
 8015ff4:	200000cc 	.word	0x200000cc
 8015ff8:	fffffbff 	.word	0xfffffbff
 8015ffc:	fffffb7f 	.word	0xfffffb7f
 8016000:	40010400 	.word	0x40010400

08016004 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8016004:	b580      	push	{r7, lr}
 8016006:	b084      	sub	sp, #16
 8016008:	af00      	add	r7, sp, #0
 801600a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801600c:	2300      	movs	r3, #0
 801600e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	2220      	movs	r2, #32
 8016014:	5c9b      	ldrb	r3, [r3, r2]
 8016016:	2b01      	cmp	r3, #1
 8016018:	d101      	bne.n	801601e <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801601a:	2302      	movs	r3, #2
 801601c:	e04e      	b.n	80160bc <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	2220      	movs	r2, #32
 8016022:	2101      	movs	r1, #1
 8016024:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	2221      	movs	r2, #33	@ 0x21
 801602a:	2102      	movs	r1, #2
 801602c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	22ca      	movs	r2, #202	@ 0xca
 8016034:	625a      	str	r2, [r3, #36]	@ 0x24
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	2253      	movs	r2, #83	@ 0x53
 801603c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	689a      	ldr	r2, [r3, #8]
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	491e      	ldr	r1, [pc, #120]	@ (80160c4 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801604a:	400a      	ands	r2, r1
 801604c:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	689a      	ldr	r2, [r3, #8]
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	491b      	ldr	r1, [pc, #108]	@ (80160c8 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801605a:	400a      	ands	r2, r1
 801605c:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801605e:	f7f8 fb17 	bl	800e690 <HAL_GetTick>
 8016062:	0003      	movs	r3, r0
 8016064:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8016066:	e016      	b.n	8016096 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016068:	f7f8 fb12 	bl	800e690 <HAL_GetTick>
 801606c:	0002      	movs	r2, r0
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	1ad2      	subs	r2, r2, r3
 8016072:	23fa      	movs	r3, #250	@ 0xfa
 8016074:	009b      	lsls	r3, r3, #2
 8016076:	429a      	cmp	r2, r3
 8016078:	d90d      	bls.n	8016096 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	22ff      	movs	r2, #255	@ 0xff
 8016080:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	2221      	movs	r2, #33	@ 0x21
 8016086:	2103      	movs	r1, #3
 8016088:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	2220      	movs	r2, #32
 801608e:	2100      	movs	r1, #0
 8016090:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8016092:	2303      	movs	r3, #3
 8016094:	e012      	b.n	80160bc <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	68db      	ldr	r3, [r3, #12]
 801609c:	2204      	movs	r2, #4
 801609e:	4013      	ands	r3, r2
 80160a0:	d0e2      	beq.n	8016068 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	22ff      	movs	r2, #255	@ 0xff
 80160a8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	2221      	movs	r2, #33	@ 0x21
 80160ae:	2101      	movs	r1, #1
 80160b0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	2220      	movs	r2, #32
 80160b6:	2100      	movs	r1, #0
 80160b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80160ba:	2300      	movs	r3, #0
}
 80160bc:	0018      	movs	r0, r3
 80160be:	46bd      	mov	sp, r7
 80160c0:	b004      	add	sp, #16
 80160c2:	bd80      	pop	{r7, pc}
 80160c4:	fffffbff 	.word	0xfffffbff
 80160c8:	ffffbfff 	.word	0xffffbfff

080160cc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b082      	sub	sp, #8
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80160d4:	4b13      	ldr	r3, [pc, #76]	@ (8016124 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 80160d6:	2280      	movs	r2, #128	@ 0x80
 80160d8:	0352      	lsls	r2, r2, #13
 80160da:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	689a      	ldr	r2, [r3, #8]
 80160e2:	2380      	movs	r3, #128	@ 0x80
 80160e4:	01db      	lsls	r3, r3, #7
 80160e6:	4013      	ands	r3, r2
 80160e8:	d014      	beq.n	8016114 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	68da      	ldr	r2, [r3, #12]
 80160f0:	2380      	movs	r3, #128	@ 0x80
 80160f2:	00db      	lsls	r3, r3, #3
 80160f4:	4013      	ands	r3, r2
 80160f6:	d00d      	beq.n	8016114 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	68db      	ldr	r3, [r3, #12]
 80160fe:	22ff      	movs	r2, #255	@ 0xff
 8016100:	401a      	ands	r2, r3
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	4908      	ldr	r1, [pc, #32]	@ (8016128 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8016108:	430a      	orrs	r2, r1
 801610a:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	0018      	movs	r0, r3
 8016110:	f000 f80c 	bl	801612c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	2221      	movs	r2, #33	@ 0x21
 8016118:	2101      	movs	r1, #1
 801611a:	5499      	strb	r1, [r3, r2]
}
 801611c:	46c0      	nop			@ (mov r8, r8)
 801611e:	46bd      	mov	sp, r7
 8016120:	b002      	add	sp, #8
 8016122:	bd80      	pop	{r7, pc}
 8016124:	40010400 	.word	0x40010400
 8016128:	fffffb7f 	.word	0xfffffb7f

0801612c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801612c:	b580      	push	{r7, lr}
 801612e:	b082      	sub	sp, #8
 8016130:	af00      	add	r7, sp, #0
 8016132:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8016134:	46c0      	nop			@ (mov r8, r8)
 8016136:	46bd      	mov	sp, r7
 8016138:	b002      	add	sp, #8
 801613a:	bd80      	pop	{r7, pc}

0801613c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801613c:	b580      	push	{r7, lr}
 801613e:	b086      	sub	sp, #24
 8016140:	af00      	add	r7, sp, #0
 8016142:	60f8      	str	r0, [r7, #12]
 8016144:	60b9      	str	r1, [r7, #8]
 8016146:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8016148:	2300      	movs	r3, #0
 801614a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	3350      	adds	r3, #80	@ 0x50
 8016152:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8016154:	68bb      	ldr	r3, [r7, #8]
 8016156:	009b      	lsls	r3, r3, #2
 8016158:	697a      	ldr	r2, [r7, #20]
 801615a:	18d3      	adds	r3, r2, r3
 801615c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801615e:	697b      	ldr	r3, [r7, #20]
 8016160:	687a      	ldr	r2, [r7, #4]
 8016162:	601a      	str	r2, [r3, #0]
}
 8016164:	46c0      	nop			@ (mov r8, r8)
 8016166:	46bd      	mov	sp, r7
 8016168:	b006      	add	sp, #24
 801616a:	bd80      	pop	{r7, pc}

0801616c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801616c:	b580      	push	{r7, lr}
 801616e:	b084      	sub	sp, #16
 8016170:	af00      	add	r7, sp, #0
 8016172:	6078      	str	r0, [r7, #4]
 8016174:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8016176:	2300      	movs	r3, #0
 8016178:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	3350      	adds	r3, #80	@ 0x50
 8016180:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8016182:	683b      	ldr	r3, [r7, #0]
 8016184:	009b      	lsls	r3, r3, #2
 8016186:	68fa      	ldr	r2, [r7, #12]
 8016188:	18d3      	adds	r3, r2, r3
 801618a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	681b      	ldr	r3, [r3, #0]
}
 8016190:	0018      	movs	r0, r3
 8016192:	46bd      	mov	sp, r7
 8016194:	b004      	add	sp, #16
 8016196:	bd80      	pop	{r7, pc}

08016198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016198:	b580      	push	{r7, lr}
 801619a:	b082      	sub	sp, #8
 801619c:	af00      	add	r7, sp, #0
 801619e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d101      	bne.n	80161aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80161a6:	2301      	movs	r3, #1
 80161a8:	e032      	b.n	8016210 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	2239      	movs	r2, #57	@ 0x39
 80161ae:	5c9b      	ldrb	r3, [r3, r2]
 80161b0:	b2db      	uxtb	r3, r3
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d107      	bne.n	80161c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	2238      	movs	r2, #56	@ 0x38
 80161ba:	2100      	movs	r1, #0
 80161bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	0018      	movs	r0, r3
 80161c2:	f7f7 fb67 	bl	800d894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	2239      	movs	r2, #57	@ 0x39
 80161ca:	2102      	movs	r1, #2
 80161cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	681a      	ldr	r2, [r3, #0]
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	3304      	adds	r3, #4
 80161d6:	0019      	movs	r1, r3
 80161d8:	0010      	movs	r0, r2
 80161da:	f000 fa1d 	bl	8016618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	223e      	movs	r2, #62	@ 0x3e
 80161e2:	2101      	movs	r1, #1
 80161e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	223a      	movs	r2, #58	@ 0x3a
 80161ea:	2101      	movs	r1, #1
 80161ec:	5499      	strb	r1, [r3, r2]
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	223b      	movs	r2, #59	@ 0x3b
 80161f2:	2101      	movs	r1, #1
 80161f4:	5499      	strb	r1, [r3, r2]
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	223c      	movs	r2, #60	@ 0x3c
 80161fa:	2101      	movs	r1, #1
 80161fc:	5499      	strb	r1, [r3, r2]
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	223d      	movs	r2, #61	@ 0x3d
 8016202:	2101      	movs	r1, #1
 8016204:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	2239      	movs	r2, #57	@ 0x39
 801620a:	2101      	movs	r1, #1
 801620c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801620e:	2300      	movs	r3, #0
}
 8016210:	0018      	movs	r0, r3
 8016212:	46bd      	mov	sp, r7
 8016214:	b002      	add	sp, #8
 8016216:	bd80      	pop	{r7, pc}

08016218 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8016218:	b580      	push	{r7, lr}
 801621a:	b084      	sub	sp, #16
 801621c:	af00      	add	r7, sp, #0
 801621e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	2239      	movs	r2, #57	@ 0x39
 8016224:	5c9b      	ldrb	r3, [r3, r2]
 8016226:	b2db      	uxtb	r3, r3
 8016228:	2b01      	cmp	r3, #1
 801622a:	d001      	beq.n	8016230 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801622c:	2301      	movs	r3, #1
 801622e:	e033      	b.n	8016298 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	2239      	movs	r2, #57	@ 0x39
 8016234:	2102      	movs	r1, #2
 8016236:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	681a      	ldr	r2, [r3, #0]
 801623c:	2380      	movs	r3, #128	@ 0x80
 801623e:	05db      	lsls	r3, r3, #23
 8016240:	429a      	cmp	r2, r3
 8016242:	d00e      	beq.n	8016262 <HAL_TIM_Base_Start+0x4a>
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	4a15      	ldr	r2, [pc, #84]	@ (80162a0 <HAL_TIM_Base_Start+0x88>)
 801624a:	4293      	cmp	r3, r2
 801624c:	d009      	beq.n	8016262 <HAL_TIM_Base_Start+0x4a>
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	4a14      	ldr	r2, [pc, #80]	@ (80162a4 <HAL_TIM_Base_Start+0x8c>)
 8016254:	4293      	cmp	r3, r2
 8016256:	d004      	beq.n	8016262 <HAL_TIM_Base_Start+0x4a>
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	4a12      	ldr	r2, [pc, #72]	@ (80162a8 <HAL_TIM_Base_Start+0x90>)
 801625e:	4293      	cmp	r3, r2
 8016260:	d111      	bne.n	8016286 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	689b      	ldr	r3, [r3, #8]
 8016268:	2207      	movs	r2, #7
 801626a:	4013      	ands	r3, r2
 801626c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	2b06      	cmp	r3, #6
 8016272:	d010      	beq.n	8016296 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	681a      	ldr	r2, [r3, #0]
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	2101      	movs	r1, #1
 8016280:	430a      	orrs	r2, r1
 8016282:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016284:	e007      	b.n	8016296 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	681a      	ldr	r2, [r3, #0]
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	2101      	movs	r1, #1
 8016292:	430a      	orrs	r2, r1
 8016294:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016296:	2300      	movs	r3, #0
}
 8016298:	0018      	movs	r0, r3
 801629a:	46bd      	mov	sp, r7
 801629c:	b004      	add	sp, #16
 801629e:	bd80      	pop	{r7, pc}
 80162a0:	40000400 	.word	0x40000400
 80162a4:	40010800 	.word	0x40010800
 80162a8:	40011400 	.word	0x40011400

080162ac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b082      	sub	sp, #8
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	6a1b      	ldr	r3, [r3, #32]
 80162ba:	4a0a      	ldr	r2, [pc, #40]	@ (80162e4 <HAL_TIM_Base_Stop+0x38>)
 80162bc:	4013      	ands	r3, r2
 80162be:	d107      	bne.n	80162d0 <HAL_TIM_Base_Stop+0x24>
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	681a      	ldr	r2, [r3, #0]
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	2101      	movs	r1, #1
 80162cc:	438a      	bics	r2, r1
 80162ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	2239      	movs	r2, #57	@ 0x39
 80162d4:	2101      	movs	r1, #1
 80162d6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80162d8:	2300      	movs	r3, #0
}
 80162da:	0018      	movs	r0, r3
 80162dc:	46bd      	mov	sp, r7
 80162de:	b002      	add	sp, #8
 80162e0:	bd80      	pop	{r7, pc}
 80162e2:	46c0      	nop			@ (mov r8, r8)
 80162e4:	00001111 	.word	0x00001111

080162e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b082      	sub	sp, #8
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d101      	bne.n	80162fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80162f6:	2301      	movs	r3, #1
 80162f8:	e032      	b.n	8016360 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	2239      	movs	r2, #57	@ 0x39
 80162fe:	5c9b      	ldrb	r3, [r3, r2]
 8016300:	b2db      	uxtb	r3, r3
 8016302:	2b00      	cmp	r3, #0
 8016304:	d107      	bne.n	8016316 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	2238      	movs	r2, #56	@ 0x38
 801630a:	2100      	movs	r1, #0
 801630c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	0018      	movs	r0, r3
 8016312:	f7f7 fa9b 	bl	800d84c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	2239      	movs	r2, #57	@ 0x39
 801631a:	2102      	movs	r1, #2
 801631c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	681a      	ldr	r2, [r3, #0]
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	3304      	adds	r3, #4
 8016326:	0019      	movs	r1, r3
 8016328:	0010      	movs	r0, r2
 801632a:	f000 f975 	bl	8016618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	223e      	movs	r2, #62	@ 0x3e
 8016332:	2101      	movs	r1, #1
 8016334:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	223a      	movs	r2, #58	@ 0x3a
 801633a:	2101      	movs	r1, #1
 801633c:	5499      	strb	r1, [r3, r2]
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	223b      	movs	r2, #59	@ 0x3b
 8016342:	2101      	movs	r1, #1
 8016344:	5499      	strb	r1, [r3, r2]
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	223c      	movs	r2, #60	@ 0x3c
 801634a:	2101      	movs	r1, #1
 801634c:	5499      	strb	r1, [r3, r2]
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	223d      	movs	r2, #61	@ 0x3d
 8016352:	2101      	movs	r1, #1
 8016354:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	2239      	movs	r2, #57	@ 0x39
 801635a:	2101      	movs	r1, #1
 801635c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801635e:	2300      	movs	r3, #0
}
 8016360:	0018      	movs	r0, r3
 8016362:	46bd      	mov	sp, r7
 8016364:	b002      	add	sp, #8
 8016366:	bd80      	pop	{r7, pc}

08016368 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016368:	b580      	push	{r7, lr}
 801636a:	b084      	sub	sp, #16
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
 8016370:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8016372:	683b      	ldr	r3, [r7, #0]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d108      	bne.n	801638a <HAL_TIM_PWM_Start+0x22>
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	223a      	movs	r2, #58	@ 0x3a
 801637c:	5c9b      	ldrb	r3, [r3, r2]
 801637e:	b2db      	uxtb	r3, r3
 8016380:	3b01      	subs	r3, #1
 8016382:	1e5a      	subs	r2, r3, #1
 8016384:	4193      	sbcs	r3, r2
 8016386:	b2db      	uxtb	r3, r3
 8016388:	e01f      	b.n	80163ca <HAL_TIM_PWM_Start+0x62>
 801638a:	683b      	ldr	r3, [r7, #0]
 801638c:	2b04      	cmp	r3, #4
 801638e:	d108      	bne.n	80163a2 <HAL_TIM_PWM_Start+0x3a>
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	223b      	movs	r2, #59	@ 0x3b
 8016394:	5c9b      	ldrb	r3, [r3, r2]
 8016396:	b2db      	uxtb	r3, r3
 8016398:	3b01      	subs	r3, #1
 801639a:	1e5a      	subs	r2, r3, #1
 801639c:	4193      	sbcs	r3, r2
 801639e:	b2db      	uxtb	r3, r3
 80163a0:	e013      	b.n	80163ca <HAL_TIM_PWM_Start+0x62>
 80163a2:	683b      	ldr	r3, [r7, #0]
 80163a4:	2b08      	cmp	r3, #8
 80163a6:	d108      	bne.n	80163ba <HAL_TIM_PWM_Start+0x52>
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	223c      	movs	r2, #60	@ 0x3c
 80163ac:	5c9b      	ldrb	r3, [r3, r2]
 80163ae:	b2db      	uxtb	r3, r3
 80163b0:	3b01      	subs	r3, #1
 80163b2:	1e5a      	subs	r2, r3, #1
 80163b4:	4193      	sbcs	r3, r2
 80163b6:	b2db      	uxtb	r3, r3
 80163b8:	e007      	b.n	80163ca <HAL_TIM_PWM_Start+0x62>
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	223d      	movs	r2, #61	@ 0x3d
 80163be:	5c9b      	ldrb	r3, [r3, r2]
 80163c0:	b2db      	uxtb	r3, r3
 80163c2:	3b01      	subs	r3, #1
 80163c4:	1e5a      	subs	r2, r3, #1
 80163c6:	4193      	sbcs	r3, r2
 80163c8:	b2db      	uxtb	r3, r3
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d001      	beq.n	80163d2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80163ce:	2301      	movs	r3, #1
 80163d0:	e052      	b.n	8016478 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80163d2:	683b      	ldr	r3, [r7, #0]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d104      	bne.n	80163e2 <HAL_TIM_PWM_Start+0x7a>
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	223a      	movs	r2, #58	@ 0x3a
 80163dc:	2102      	movs	r1, #2
 80163de:	5499      	strb	r1, [r3, r2]
 80163e0:	e013      	b.n	801640a <HAL_TIM_PWM_Start+0xa2>
 80163e2:	683b      	ldr	r3, [r7, #0]
 80163e4:	2b04      	cmp	r3, #4
 80163e6:	d104      	bne.n	80163f2 <HAL_TIM_PWM_Start+0x8a>
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	223b      	movs	r2, #59	@ 0x3b
 80163ec:	2102      	movs	r1, #2
 80163ee:	5499      	strb	r1, [r3, r2]
 80163f0:	e00b      	b.n	801640a <HAL_TIM_PWM_Start+0xa2>
 80163f2:	683b      	ldr	r3, [r7, #0]
 80163f4:	2b08      	cmp	r3, #8
 80163f6:	d104      	bne.n	8016402 <HAL_TIM_PWM_Start+0x9a>
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	223c      	movs	r2, #60	@ 0x3c
 80163fc:	2102      	movs	r1, #2
 80163fe:	5499      	strb	r1, [r3, r2]
 8016400:	e003      	b.n	801640a <HAL_TIM_PWM_Start+0xa2>
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	223d      	movs	r2, #61	@ 0x3d
 8016406:	2102      	movs	r1, #2
 8016408:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	6839      	ldr	r1, [r7, #0]
 8016410:	2201      	movs	r2, #1
 8016412:	0018      	movs	r0, r3
 8016414:	f000 fa62 	bl	80168dc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	681a      	ldr	r2, [r3, #0]
 801641c:	2380      	movs	r3, #128	@ 0x80
 801641e:	05db      	lsls	r3, r3, #23
 8016420:	429a      	cmp	r2, r3
 8016422:	d00e      	beq.n	8016442 <HAL_TIM_PWM_Start+0xda>
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	4a15      	ldr	r2, [pc, #84]	@ (8016480 <HAL_TIM_PWM_Start+0x118>)
 801642a:	4293      	cmp	r3, r2
 801642c:	d009      	beq.n	8016442 <HAL_TIM_PWM_Start+0xda>
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	4a14      	ldr	r2, [pc, #80]	@ (8016484 <HAL_TIM_PWM_Start+0x11c>)
 8016434:	4293      	cmp	r3, r2
 8016436:	d004      	beq.n	8016442 <HAL_TIM_PWM_Start+0xda>
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	4a12      	ldr	r2, [pc, #72]	@ (8016488 <HAL_TIM_PWM_Start+0x120>)
 801643e:	4293      	cmp	r3, r2
 8016440:	d111      	bne.n	8016466 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	689b      	ldr	r3, [r3, #8]
 8016448:	2207      	movs	r2, #7
 801644a:	4013      	ands	r3, r2
 801644c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	2b06      	cmp	r3, #6
 8016452:	d010      	beq.n	8016476 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	681a      	ldr	r2, [r3, #0]
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	2101      	movs	r1, #1
 8016460:	430a      	orrs	r2, r1
 8016462:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016464:	e007      	b.n	8016476 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	681a      	ldr	r2, [r3, #0]
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	2101      	movs	r1, #1
 8016472:	430a      	orrs	r2, r1
 8016474:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016476:	2300      	movs	r3, #0
}
 8016478:	0018      	movs	r0, r3
 801647a:	46bd      	mov	sp, r7
 801647c:	b004      	add	sp, #16
 801647e:	bd80      	pop	{r7, pc}
 8016480:	40000400 	.word	0x40000400
 8016484:	40010800 	.word	0x40010800
 8016488:	40011400 	.word	0x40011400

0801648c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801648c:	b580      	push	{r7, lr}
 801648e:	b086      	sub	sp, #24
 8016490:	af00      	add	r7, sp, #0
 8016492:	60f8      	str	r0, [r7, #12]
 8016494:	60b9      	str	r1, [r7, #8]
 8016496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016498:	2317      	movs	r3, #23
 801649a:	18fb      	adds	r3, r7, r3
 801649c:	2200      	movs	r2, #0
 801649e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	2238      	movs	r2, #56	@ 0x38
 80164a4:	5c9b      	ldrb	r3, [r3, r2]
 80164a6:	2b01      	cmp	r3, #1
 80164a8:	d101      	bne.n	80164ae <HAL_TIM_PWM_ConfigChannel+0x22>
 80164aa:	2302      	movs	r3, #2
 80164ac:	e0ad      	b.n	801660a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	2238      	movs	r2, #56	@ 0x38
 80164b2:	2101      	movs	r1, #1
 80164b4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	2b0c      	cmp	r3, #12
 80164ba:	d100      	bne.n	80164be <HAL_TIM_PWM_ConfigChannel+0x32>
 80164bc:	e076      	b.n	80165ac <HAL_TIM_PWM_ConfigChannel+0x120>
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	2b0c      	cmp	r3, #12
 80164c2:	d900      	bls.n	80164c6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80164c4:	e095      	b.n	80165f2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	2b08      	cmp	r3, #8
 80164ca:	d04e      	beq.n	801656a <HAL_TIM_PWM_ConfigChannel+0xde>
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	2b08      	cmp	r3, #8
 80164d0:	d900      	bls.n	80164d4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80164d2:	e08e      	b.n	80165f2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d003      	beq.n	80164e2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	2b04      	cmp	r3, #4
 80164de:	d021      	beq.n	8016524 <HAL_TIM_PWM_ConfigChannel+0x98>
 80164e0:	e087      	b.n	80165f2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	68ba      	ldr	r2, [r7, #8]
 80164e8:	0011      	movs	r1, r2
 80164ea:	0018      	movs	r0, r3
 80164ec:	f000 f8f2 	bl	80166d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	699a      	ldr	r2, [r3, #24]
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	2108      	movs	r1, #8
 80164fc:	430a      	orrs	r2, r1
 80164fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	699a      	ldr	r2, [r3, #24]
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	2104      	movs	r1, #4
 801650c:	438a      	bics	r2, r1
 801650e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	6999      	ldr	r1, [r3, #24]
 8016516:	68bb      	ldr	r3, [r7, #8]
 8016518:	68da      	ldr	r2, [r3, #12]
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	430a      	orrs	r2, r1
 8016520:	619a      	str	r2, [r3, #24]
      break;
 8016522:	e06b      	b.n	80165fc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	68ba      	ldr	r2, [r7, #8]
 801652a:	0011      	movs	r1, r2
 801652c:	0018      	movs	r0, r3
 801652e:	f000 f90d 	bl	801674c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	699a      	ldr	r2, [r3, #24]
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	2180      	movs	r1, #128	@ 0x80
 801653e:	0109      	lsls	r1, r1, #4
 8016540:	430a      	orrs	r2, r1
 8016542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	699a      	ldr	r2, [r3, #24]
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	4931      	ldr	r1, [pc, #196]	@ (8016614 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016550:	400a      	ands	r2, r1
 8016552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	6999      	ldr	r1, [r3, #24]
 801655a:	68bb      	ldr	r3, [r7, #8]
 801655c:	68db      	ldr	r3, [r3, #12]
 801655e:	021a      	lsls	r2, r3, #8
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	430a      	orrs	r2, r1
 8016566:	619a      	str	r2, [r3, #24]
      break;
 8016568:	e048      	b.n	80165fc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	68ba      	ldr	r2, [r7, #8]
 8016570:	0011      	movs	r1, r2
 8016572:	0018      	movs	r0, r3
 8016574:	f000 f92c 	bl	80167d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	69da      	ldr	r2, [r3, #28]
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	2108      	movs	r1, #8
 8016584:	430a      	orrs	r2, r1
 8016586:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	69da      	ldr	r2, [r3, #28]
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	2104      	movs	r1, #4
 8016594:	438a      	bics	r2, r1
 8016596:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	69d9      	ldr	r1, [r3, #28]
 801659e:	68bb      	ldr	r3, [r7, #8]
 80165a0:	68da      	ldr	r2, [r3, #12]
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	430a      	orrs	r2, r1
 80165a8:	61da      	str	r2, [r3, #28]
      break;
 80165aa:	e027      	b.n	80165fc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	68ba      	ldr	r2, [r7, #8]
 80165b2:	0011      	movs	r1, r2
 80165b4:	0018      	movs	r0, r3
 80165b6:	f000 f94b 	bl	8016850 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	69da      	ldr	r2, [r3, #28]
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	2180      	movs	r1, #128	@ 0x80
 80165c6:	0109      	lsls	r1, r1, #4
 80165c8:	430a      	orrs	r2, r1
 80165ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	69da      	ldr	r2, [r3, #28]
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	490f      	ldr	r1, [pc, #60]	@ (8016614 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80165d8:	400a      	ands	r2, r1
 80165da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	69d9      	ldr	r1, [r3, #28]
 80165e2:	68bb      	ldr	r3, [r7, #8]
 80165e4:	68db      	ldr	r3, [r3, #12]
 80165e6:	021a      	lsls	r2, r3, #8
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	430a      	orrs	r2, r1
 80165ee:	61da      	str	r2, [r3, #28]
      break;
 80165f0:	e004      	b.n	80165fc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80165f2:	2317      	movs	r3, #23
 80165f4:	18fb      	adds	r3, r7, r3
 80165f6:	2201      	movs	r2, #1
 80165f8:	701a      	strb	r2, [r3, #0]
      break;
 80165fa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	2238      	movs	r2, #56	@ 0x38
 8016600:	2100      	movs	r1, #0
 8016602:	5499      	strb	r1, [r3, r2]

  return status;
 8016604:	2317      	movs	r3, #23
 8016606:	18fb      	adds	r3, r7, r3
 8016608:	781b      	ldrb	r3, [r3, #0]
}
 801660a:	0018      	movs	r0, r3
 801660c:	46bd      	mov	sp, r7
 801660e:	b006      	add	sp, #24
 8016610:	bd80      	pop	{r7, pc}
 8016612:	46c0      	nop			@ (mov r8, r8)
 8016614:	fffffbff 	.word	0xfffffbff

08016618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b084      	sub	sp, #16
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
 8016620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016628:	687a      	ldr	r2, [r7, #4]
 801662a:	2380      	movs	r3, #128	@ 0x80
 801662c:	05db      	lsls	r3, r3, #23
 801662e:	429a      	cmp	r2, r3
 8016630:	d00b      	beq.n	801664a <TIM_Base_SetConfig+0x32>
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	4a23      	ldr	r2, [pc, #140]	@ (80166c4 <TIM_Base_SetConfig+0xac>)
 8016636:	4293      	cmp	r3, r2
 8016638:	d007      	beq.n	801664a <TIM_Base_SetConfig+0x32>
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	4a22      	ldr	r2, [pc, #136]	@ (80166c8 <TIM_Base_SetConfig+0xb0>)
 801663e:	4293      	cmp	r3, r2
 8016640:	d003      	beq.n	801664a <TIM_Base_SetConfig+0x32>
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	4a21      	ldr	r2, [pc, #132]	@ (80166cc <TIM_Base_SetConfig+0xb4>)
 8016646:	4293      	cmp	r3, r2
 8016648:	d108      	bne.n	801665c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	2270      	movs	r2, #112	@ 0x70
 801664e:	4393      	bics	r3, r2
 8016650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016652:	683b      	ldr	r3, [r7, #0]
 8016654:	685b      	ldr	r3, [r3, #4]
 8016656:	68fa      	ldr	r2, [r7, #12]
 8016658:	4313      	orrs	r3, r2
 801665a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801665c:	687a      	ldr	r2, [r7, #4]
 801665e:	2380      	movs	r3, #128	@ 0x80
 8016660:	05db      	lsls	r3, r3, #23
 8016662:	429a      	cmp	r2, r3
 8016664:	d00b      	beq.n	801667e <TIM_Base_SetConfig+0x66>
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	4a16      	ldr	r2, [pc, #88]	@ (80166c4 <TIM_Base_SetConfig+0xac>)
 801666a:	4293      	cmp	r3, r2
 801666c:	d007      	beq.n	801667e <TIM_Base_SetConfig+0x66>
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	4a15      	ldr	r2, [pc, #84]	@ (80166c8 <TIM_Base_SetConfig+0xb0>)
 8016672:	4293      	cmp	r3, r2
 8016674:	d003      	beq.n	801667e <TIM_Base_SetConfig+0x66>
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	4a14      	ldr	r2, [pc, #80]	@ (80166cc <TIM_Base_SetConfig+0xb4>)
 801667a:	4293      	cmp	r3, r2
 801667c:	d108      	bne.n	8016690 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	4a13      	ldr	r2, [pc, #76]	@ (80166d0 <TIM_Base_SetConfig+0xb8>)
 8016682:	4013      	ands	r3, r2
 8016684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016686:	683b      	ldr	r3, [r7, #0]
 8016688:	68db      	ldr	r3, [r3, #12]
 801668a:	68fa      	ldr	r2, [r7, #12]
 801668c:	4313      	orrs	r3, r2
 801668e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	2280      	movs	r2, #128	@ 0x80
 8016694:	4393      	bics	r3, r2
 8016696:	001a      	movs	r2, r3
 8016698:	683b      	ldr	r3, [r7, #0]
 801669a:	691b      	ldr	r3, [r3, #16]
 801669c:	4313      	orrs	r3, r2
 801669e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	68fa      	ldr	r2, [r7, #12]
 80166a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80166a6:	683b      	ldr	r3, [r7, #0]
 80166a8:	689a      	ldr	r2, [r3, #8]
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80166ae:	683b      	ldr	r3, [r7, #0]
 80166b0:	681a      	ldr	r2, [r3, #0]
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	2201      	movs	r2, #1
 80166ba:	615a      	str	r2, [r3, #20]
}
 80166bc:	46c0      	nop			@ (mov r8, r8)
 80166be:	46bd      	mov	sp, r7
 80166c0:	b004      	add	sp, #16
 80166c2:	bd80      	pop	{r7, pc}
 80166c4:	40000400 	.word	0x40000400
 80166c8:	40010800 	.word	0x40010800
 80166cc:	40011400 	.word	0x40011400
 80166d0:	fffffcff 	.word	0xfffffcff

080166d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b086      	sub	sp, #24
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
 80166dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	6a1b      	ldr	r3, [r3, #32]
 80166e2:	2201      	movs	r2, #1
 80166e4:	4393      	bics	r3, r2
 80166e6:	001a      	movs	r2, r3
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	6a1b      	ldr	r3, [r3, #32]
 80166f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	685b      	ldr	r3, [r3, #4]
 80166f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	699b      	ldr	r3, [r3, #24]
 80166fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	2270      	movs	r2, #112	@ 0x70
 8016702:	4393      	bics	r3, r2
 8016704:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	2203      	movs	r2, #3
 801670a:	4393      	bics	r3, r2
 801670c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801670e:	683b      	ldr	r3, [r7, #0]
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	68fa      	ldr	r2, [r7, #12]
 8016714:	4313      	orrs	r3, r2
 8016716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016718:	697b      	ldr	r3, [r7, #20]
 801671a:	2202      	movs	r2, #2
 801671c:	4393      	bics	r3, r2
 801671e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016720:	683b      	ldr	r3, [r7, #0]
 8016722:	689b      	ldr	r3, [r3, #8]
 8016724:	697a      	ldr	r2, [r7, #20]
 8016726:	4313      	orrs	r3, r2
 8016728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	693a      	ldr	r2, [r7, #16]
 801672e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	68fa      	ldr	r2, [r7, #12]
 8016734:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016736:	683b      	ldr	r3, [r7, #0]
 8016738:	685a      	ldr	r2, [r3, #4]
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	697a      	ldr	r2, [r7, #20]
 8016742:	621a      	str	r2, [r3, #32]
}
 8016744:	46c0      	nop			@ (mov r8, r8)
 8016746:	46bd      	mov	sp, r7
 8016748:	b006      	add	sp, #24
 801674a:	bd80      	pop	{r7, pc}

0801674c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801674c:	b580      	push	{r7, lr}
 801674e:	b086      	sub	sp, #24
 8016750:	af00      	add	r7, sp, #0
 8016752:	6078      	str	r0, [r7, #4]
 8016754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	6a1b      	ldr	r3, [r3, #32]
 801675a:	2210      	movs	r2, #16
 801675c:	4393      	bics	r3, r2
 801675e:	001a      	movs	r2, r3
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	6a1b      	ldr	r3, [r3, #32]
 8016768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	685b      	ldr	r3, [r3, #4]
 801676e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	699b      	ldr	r3, [r3, #24]
 8016774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	4a13      	ldr	r2, [pc, #76]	@ (80167c8 <TIM_OC2_SetConfig+0x7c>)
 801677a:	4013      	ands	r3, r2
 801677c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	4a12      	ldr	r2, [pc, #72]	@ (80167cc <TIM_OC2_SetConfig+0x80>)
 8016782:	4013      	ands	r3, r2
 8016784:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016786:	683b      	ldr	r3, [r7, #0]
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	021b      	lsls	r3, r3, #8
 801678c:	68fa      	ldr	r2, [r7, #12]
 801678e:	4313      	orrs	r3, r2
 8016790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016792:	697b      	ldr	r3, [r7, #20]
 8016794:	2220      	movs	r2, #32
 8016796:	4393      	bics	r3, r2
 8016798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801679a:	683b      	ldr	r3, [r7, #0]
 801679c:	689b      	ldr	r3, [r3, #8]
 801679e:	011b      	lsls	r3, r3, #4
 80167a0:	697a      	ldr	r2, [r7, #20]
 80167a2:	4313      	orrs	r3, r2
 80167a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	693a      	ldr	r2, [r7, #16]
 80167aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	68fa      	ldr	r2, [r7, #12]
 80167b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80167b2:	683b      	ldr	r3, [r7, #0]
 80167b4:	685a      	ldr	r2, [r3, #4]
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	697a      	ldr	r2, [r7, #20]
 80167be:	621a      	str	r2, [r3, #32]
}
 80167c0:	46c0      	nop			@ (mov r8, r8)
 80167c2:	46bd      	mov	sp, r7
 80167c4:	b006      	add	sp, #24
 80167c6:	bd80      	pop	{r7, pc}
 80167c8:	ffff8fff 	.word	0xffff8fff
 80167cc:	fffffcff 	.word	0xfffffcff

080167d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b086      	sub	sp, #24
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
 80167d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	6a1b      	ldr	r3, [r3, #32]
 80167de:	4a1a      	ldr	r2, [pc, #104]	@ (8016848 <TIM_OC3_SetConfig+0x78>)
 80167e0:	401a      	ands	r2, r3
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	6a1b      	ldr	r3, [r3, #32]
 80167ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	685b      	ldr	r3, [r3, #4]
 80167f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	69db      	ldr	r3, [r3, #28]
 80167f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	2270      	movs	r2, #112	@ 0x70
 80167fc:	4393      	bics	r3, r2
 80167fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	2203      	movs	r2, #3
 8016804:	4393      	bics	r3, r2
 8016806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016808:	683b      	ldr	r3, [r7, #0]
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	68fa      	ldr	r2, [r7, #12]
 801680e:	4313      	orrs	r3, r2
 8016810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8016812:	697b      	ldr	r3, [r7, #20]
 8016814:	4a0d      	ldr	r2, [pc, #52]	@ (801684c <TIM_OC3_SetConfig+0x7c>)
 8016816:	4013      	ands	r3, r2
 8016818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801681a:	683b      	ldr	r3, [r7, #0]
 801681c:	689b      	ldr	r3, [r3, #8]
 801681e:	021b      	lsls	r3, r3, #8
 8016820:	697a      	ldr	r2, [r7, #20]
 8016822:	4313      	orrs	r3, r2
 8016824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	693a      	ldr	r2, [r7, #16]
 801682a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	68fa      	ldr	r2, [r7, #12]
 8016830:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016832:	683b      	ldr	r3, [r7, #0]
 8016834:	685a      	ldr	r2, [r3, #4]
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	697a      	ldr	r2, [r7, #20]
 801683e:	621a      	str	r2, [r3, #32]
}
 8016840:	46c0      	nop			@ (mov r8, r8)
 8016842:	46bd      	mov	sp, r7
 8016844:	b006      	add	sp, #24
 8016846:	bd80      	pop	{r7, pc}
 8016848:	fffffeff 	.word	0xfffffeff
 801684c:	fffffdff 	.word	0xfffffdff

08016850 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b086      	sub	sp, #24
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
 8016858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	6a1b      	ldr	r3, [r3, #32]
 801685e:	4a1b      	ldr	r2, [pc, #108]	@ (80168cc <TIM_OC4_SetConfig+0x7c>)
 8016860:	401a      	ands	r2, r3
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	6a1b      	ldr	r3, [r3, #32]
 801686a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	685b      	ldr	r3, [r3, #4]
 8016870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	69db      	ldr	r3, [r3, #28]
 8016876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	4a15      	ldr	r2, [pc, #84]	@ (80168d0 <TIM_OC4_SetConfig+0x80>)
 801687c:	4013      	ands	r3, r2
 801687e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	4a14      	ldr	r2, [pc, #80]	@ (80168d4 <TIM_OC4_SetConfig+0x84>)
 8016884:	4013      	ands	r3, r2
 8016886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016888:	683b      	ldr	r3, [r7, #0]
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	021b      	lsls	r3, r3, #8
 801688e:	68fa      	ldr	r2, [r7, #12]
 8016890:	4313      	orrs	r3, r2
 8016892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016894:	697b      	ldr	r3, [r7, #20]
 8016896:	4a10      	ldr	r2, [pc, #64]	@ (80168d8 <TIM_OC4_SetConfig+0x88>)
 8016898:	4013      	ands	r3, r2
 801689a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801689c:	683b      	ldr	r3, [r7, #0]
 801689e:	689b      	ldr	r3, [r3, #8]
 80168a0:	031b      	lsls	r3, r3, #12
 80168a2:	697a      	ldr	r2, [r7, #20]
 80168a4:	4313      	orrs	r3, r2
 80168a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	693a      	ldr	r2, [r7, #16]
 80168ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	68fa      	ldr	r2, [r7, #12]
 80168b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80168b4:	683b      	ldr	r3, [r7, #0]
 80168b6:	685a      	ldr	r2, [r3, #4]
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	697a      	ldr	r2, [r7, #20]
 80168c0:	621a      	str	r2, [r3, #32]
}
 80168c2:	46c0      	nop			@ (mov r8, r8)
 80168c4:	46bd      	mov	sp, r7
 80168c6:	b006      	add	sp, #24
 80168c8:	bd80      	pop	{r7, pc}
 80168ca:	46c0      	nop			@ (mov r8, r8)
 80168cc:	ffffefff 	.word	0xffffefff
 80168d0:	ffff8fff 	.word	0xffff8fff
 80168d4:	fffffcff 	.word	0xfffffcff
 80168d8:	ffffdfff 	.word	0xffffdfff

080168dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b086      	sub	sp, #24
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	60f8      	str	r0, [r7, #12]
 80168e4:	60b9      	str	r1, [r7, #8]
 80168e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80168e8:	68bb      	ldr	r3, [r7, #8]
 80168ea:	221f      	movs	r2, #31
 80168ec:	4013      	ands	r3, r2
 80168ee:	2201      	movs	r2, #1
 80168f0:	409a      	lsls	r2, r3
 80168f2:	0013      	movs	r3, r2
 80168f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	6a1b      	ldr	r3, [r3, #32]
 80168fa:	697a      	ldr	r2, [r7, #20]
 80168fc:	43d2      	mvns	r2, r2
 80168fe:	401a      	ands	r2, r3
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	6a1a      	ldr	r2, [r3, #32]
 8016908:	68bb      	ldr	r3, [r7, #8]
 801690a:	211f      	movs	r1, #31
 801690c:	400b      	ands	r3, r1
 801690e:	6879      	ldr	r1, [r7, #4]
 8016910:	4099      	lsls	r1, r3
 8016912:	000b      	movs	r3, r1
 8016914:	431a      	orrs	r2, r3
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	621a      	str	r2, [r3, #32]
}
 801691a:	46c0      	nop			@ (mov r8, r8)
 801691c:	46bd      	mov	sp, r7
 801691e:	b006      	add	sp, #24
 8016920:	bd80      	pop	{r7, pc}
	...

08016924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016924:	b580      	push	{r7, lr}
 8016926:	b084      	sub	sp, #16
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
 801692c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	2238      	movs	r2, #56	@ 0x38
 8016932:	5c9b      	ldrb	r3, [r3, r2]
 8016934:	2b01      	cmp	r3, #1
 8016936:	d101      	bne.n	801693c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016938:	2302      	movs	r3, #2
 801693a:	e047      	b.n	80169cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	2238      	movs	r2, #56	@ 0x38
 8016940:	2101      	movs	r1, #1
 8016942:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	2239      	movs	r2, #57	@ 0x39
 8016948:	2102      	movs	r1, #2
 801694a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	685b      	ldr	r3, [r3, #4]
 8016952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	689b      	ldr	r3, [r3, #8]
 801695a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	2270      	movs	r2, #112	@ 0x70
 8016960:	4393      	bics	r3, r2
 8016962:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8016964:	683b      	ldr	r3, [r7, #0]
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	68fa      	ldr	r2, [r7, #12]
 801696a:	4313      	orrs	r3, r2
 801696c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	68fa      	ldr	r2, [r7, #12]
 8016974:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	681a      	ldr	r2, [r3, #0]
 801697a:	2380      	movs	r3, #128	@ 0x80
 801697c:	05db      	lsls	r3, r3, #23
 801697e:	429a      	cmp	r2, r3
 8016980:	d00e      	beq.n	80169a0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	4a13      	ldr	r2, [pc, #76]	@ (80169d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8016988:	4293      	cmp	r3, r2
 801698a:	d009      	beq.n	80169a0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	4a11      	ldr	r2, [pc, #68]	@ (80169d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8016992:	4293      	cmp	r3, r2
 8016994:	d004      	beq.n	80169a0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	4a10      	ldr	r2, [pc, #64]	@ (80169dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801699c:	4293      	cmp	r3, r2
 801699e:	d10c      	bne.n	80169ba <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80169a0:	68bb      	ldr	r3, [r7, #8]
 80169a2:	2280      	movs	r2, #128	@ 0x80
 80169a4:	4393      	bics	r3, r2
 80169a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80169a8:	683b      	ldr	r3, [r7, #0]
 80169aa:	685b      	ldr	r3, [r3, #4]
 80169ac:	68ba      	ldr	r2, [r7, #8]
 80169ae:	4313      	orrs	r3, r2
 80169b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	68ba      	ldr	r2, [r7, #8]
 80169b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	2239      	movs	r2, #57	@ 0x39
 80169be:	2101      	movs	r1, #1
 80169c0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	2238      	movs	r2, #56	@ 0x38
 80169c6:	2100      	movs	r1, #0
 80169c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80169ca:	2300      	movs	r3, #0
}
 80169cc:	0018      	movs	r0, r3
 80169ce:	46bd      	mov	sp, r7
 80169d0:	b004      	add	sp, #16
 80169d2:	bd80      	pop	{r7, pc}
 80169d4:	40000400 	.word	0x40000400
 80169d8:	40010800 	.word	0x40010800
 80169dc:	40011400 	.word	0x40011400

080169e0 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80169e0:	b580      	push	{r7, lr}
 80169e2:	b082      	sub	sp, #8
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	6078      	str	r0, [r7, #4]
 80169e8:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	2238      	movs	r2, #56	@ 0x38
 80169ee:	5c9b      	ldrb	r3, [r3, r2]
 80169f0:	2b01      	cmp	r3, #1
 80169f2:	d101      	bne.n	80169f8 <HAL_TIMEx_RemapConfig+0x18>
 80169f4:	2302      	movs	r3, #2
 80169f6:	e00c      	b.n	8016a12 <HAL_TIMEx_RemapConfig+0x32>
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	2238      	movs	r2, #56	@ 0x38
 80169fc:	2101      	movs	r1, #1
 80169fe:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	683a      	ldr	r2, [r7, #0]
 8016a06:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	2238      	movs	r2, #56	@ 0x38
 8016a0c:	2100      	movs	r1, #0
 8016a0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016a10:	2300      	movs	r3, #0
}
 8016a12:	0018      	movs	r0, r3
 8016a14:	46bd      	mov	sp, r7
 8016a16:	b002      	add	sp, #8
 8016a18:	bd80      	pop	{r7, pc}
	...

08016a1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b082      	sub	sp, #8
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d101      	bne.n	8016a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8016a2a:	2301      	movs	r3, #1
 8016a2c:	e053      	b.n	8016ad6 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d116      	bne.n	8016a64 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	2278      	movs	r2, #120	@ 0x78
 8016a3a:	2100      	movs	r1, #0
 8016a3c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	0018      	movs	r0, r3
 8016a42:	f000 fd65 	bl	8017510 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	22b0      	movs	r2, #176	@ 0xb0
 8016a4a:	589b      	ldr	r3, [r3, r2]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d103      	bne.n	8016a58 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	21b0      	movs	r1, #176	@ 0xb0
 8016a54:	4a22      	ldr	r2, [pc, #136]	@ (8016ae0 <HAL_UART_Init+0xc4>)
 8016a56:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	22b0      	movs	r2, #176	@ 0xb0
 8016a5c:	589b      	ldr	r3, [r3, r2]
 8016a5e:	687a      	ldr	r2, [r7, #4]
 8016a60:	0010      	movs	r0, r2
 8016a62:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	2224      	movs	r2, #36	@ 0x24
 8016a68:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	681a      	ldr	r2, [r3, #0]
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	2101      	movs	r1, #1
 8016a76:	438a      	bics	r2, r1
 8016a78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	0018      	movs	r0, r3
 8016a7e:	f000 fd8b 	bl	8017598 <UART_SetConfig>
 8016a82:	0003      	movs	r3, r0
 8016a84:	2b01      	cmp	r3, #1
 8016a86:	d101      	bne.n	8016a8c <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8016a88:	2301      	movs	r3, #1
 8016a8a:	e024      	b.n	8016ad6 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d003      	beq.n	8016a9c <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	0018      	movs	r0, r3
 8016a98:	f001 f81c 	bl	8017ad4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	685a      	ldr	r2, [r3, #4]
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	490f      	ldr	r1, [pc, #60]	@ (8016ae4 <HAL_UART_Init+0xc8>)
 8016aa8:	400a      	ands	r2, r1
 8016aaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	689a      	ldr	r2, [r3, #8]
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	212a      	movs	r1, #42	@ 0x2a
 8016ab8:	438a      	bics	r2, r1
 8016aba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	681a      	ldr	r2, [r3, #0]
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	2101      	movs	r1, #1
 8016ac8:	430a      	orrs	r2, r1
 8016aca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	0018      	movs	r0, r3
 8016ad0:	f001 f8b4 	bl	8017c3c <UART_CheckIdleState>
 8016ad4:	0003      	movs	r3, r0
}
 8016ad6:	0018      	movs	r0, r3
 8016ad8:	46bd      	mov	sp, r7
 8016ada:	b002      	add	sp, #8
 8016adc:	bd80      	pop	{r7, pc}
 8016ade:	46c0      	nop			@ (mov r8, r8)
 8016ae0:	0800dac9 	.word	0x0800dac9
 8016ae4:	ffffb7ff 	.word	0xffffb7ff

08016ae8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b08a      	sub	sp, #40	@ 0x28
 8016aec:	af02      	add	r7, sp, #8
 8016aee:	60f8      	str	r0, [r7, #12]
 8016af0:	60b9      	str	r1, [r7, #8]
 8016af2:	603b      	str	r3, [r7, #0]
 8016af4:	1dbb      	adds	r3, r7, #6
 8016af6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016afc:	2b20      	cmp	r3, #32
 8016afe:	d000      	beq.n	8016b02 <HAL_UART_Transmit+0x1a>
 8016b00:	e08c      	b.n	8016c1c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8016b02:	68bb      	ldr	r3, [r7, #8]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d003      	beq.n	8016b10 <HAL_UART_Transmit+0x28>
 8016b08:	1dbb      	adds	r3, r7, #6
 8016b0a:	881b      	ldrh	r3, [r3, #0]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d101      	bne.n	8016b14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8016b10:	2301      	movs	r3, #1
 8016b12:	e084      	b.n	8016c1e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	689a      	ldr	r2, [r3, #8]
 8016b18:	2380      	movs	r3, #128	@ 0x80
 8016b1a:	015b      	lsls	r3, r3, #5
 8016b1c:	429a      	cmp	r2, r3
 8016b1e:	d109      	bne.n	8016b34 <HAL_UART_Transmit+0x4c>
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	691b      	ldr	r3, [r3, #16]
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d105      	bne.n	8016b34 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016b28:	68bb      	ldr	r3, [r7, #8]
 8016b2a:	2201      	movs	r2, #1
 8016b2c:	4013      	ands	r3, r2
 8016b2e:	d001      	beq.n	8016b34 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8016b30:	2301      	movs	r3, #1
 8016b32:	e074      	b.n	8016c1e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	2284      	movs	r2, #132	@ 0x84
 8016b38:	2100      	movs	r1, #0
 8016b3a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	2221      	movs	r2, #33	@ 0x21
 8016b40:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8016b42:	f7f7 fda5 	bl	800e690 <HAL_GetTick>
 8016b46:	0003      	movs	r3, r0
 8016b48:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	1dba      	adds	r2, r7, #6
 8016b4e:	2150      	movs	r1, #80	@ 0x50
 8016b50:	8812      	ldrh	r2, [r2, #0]
 8016b52:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	1dba      	adds	r2, r7, #6
 8016b58:	2152      	movs	r1, #82	@ 0x52
 8016b5a:	8812      	ldrh	r2, [r2, #0]
 8016b5c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	689a      	ldr	r2, [r3, #8]
 8016b62:	2380      	movs	r3, #128	@ 0x80
 8016b64:	015b      	lsls	r3, r3, #5
 8016b66:	429a      	cmp	r2, r3
 8016b68:	d108      	bne.n	8016b7c <HAL_UART_Transmit+0x94>
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	691b      	ldr	r3, [r3, #16]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d104      	bne.n	8016b7c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8016b72:	2300      	movs	r3, #0
 8016b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8016b76:	68bb      	ldr	r3, [r7, #8]
 8016b78:	61bb      	str	r3, [r7, #24]
 8016b7a:	e003      	b.n	8016b84 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8016b7c:	68bb      	ldr	r3, [r7, #8]
 8016b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8016b80:	2300      	movs	r3, #0
 8016b82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8016b84:	e02f      	b.n	8016be6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8016b86:	697a      	ldr	r2, [r7, #20]
 8016b88:	68f8      	ldr	r0, [r7, #12]
 8016b8a:	683b      	ldr	r3, [r7, #0]
 8016b8c:	9300      	str	r3, [sp, #0]
 8016b8e:	0013      	movs	r3, r2
 8016b90:	2200      	movs	r2, #0
 8016b92:	2180      	movs	r1, #128	@ 0x80
 8016b94:	f001 f8fa 	bl	8017d8c <UART_WaitOnFlagUntilTimeout>
 8016b98:	1e03      	subs	r3, r0, #0
 8016b9a:	d004      	beq.n	8016ba6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	2220      	movs	r2, #32
 8016ba0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8016ba2:	2303      	movs	r3, #3
 8016ba4:	e03b      	b.n	8016c1e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8016ba6:	69fb      	ldr	r3, [r7, #28]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d10b      	bne.n	8016bc4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8016bac:	69bb      	ldr	r3, [r7, #24]
 8016bae:	881b      	ldrh	r3, [r3, #0]
 8016bb0:	001a      	movs	r2, r3
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	05d2      	lsls	r2, r2, #23
 8016bb8:	0dd2      	lsrs	r2, r2, #23
 8016bba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8016bbc:	69bb      	ldr	r3, [r7, #24]
 8016bbe:	3302      	adds	r3, #2
 8016bc0:	61bb      	str	r3, [r7, #24]
 8016bc2:	e007      	b.n	8016bd4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8016bc4:	69fb      	ldr	r3, [r7, #28]
 8016bc6:	781a      	ldrb	r2, [r3, #0]
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8016bce:	69fb      	ldr	r3, [r7, #28]
 8016bd0:	3301      	adds	r3, #1
 8016bd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	2252      	movs	r2, #82	@ 0x52
 8016bd8:	5a9b      	ldrh	r3, [r3, r2]
 8016bda:	b29b      	uxth	r3, r3
 8016bdc:	3b01      	subs	r3, #1
 8016bde:	b299      	uxth	r1, r3
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	2252      	movs	r2, #82	@ 0x52
 8016be4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	2252      	movs	r2, #82	@ 0x52
 8016bea:	5a9b      	ldrh	r3, [r3, r2]
 8016bec:	b29b      	uxth	r3, r3
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d1c9      	bne.n	8016b86 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8016bf2:	697a      	ldr	r2, [r7, #20]
 8016bf4:	68f8      	ldr	r0, [r7, #12]
 8016bf6:	683b      	ldr	r3, [r7, #0]
 8016bf8:	9300      	str	r3, [sp, #0]
 8016bfa:	0013      	movs	r3, r2
 8016bfc:	2200      	movs	r2, #0
 8016bfe:	2140      	movs	r1, #64	@ 0x40
 8016c00:	f001 f8c4 	bl	8017d8c <UART_WaitOnFlagUntilTimeout>
 8016c04:	1e03      	subs	r3, r0, #0
 8016c06:	d004      	beq.n	8016c12 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	2220      	movs	r2, #32
 8016c0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8016c0e:	2303      	movs	r3, #3
 8016c10:	e005      	b.n	8016c1e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	2220      	movs	r2, #32
 8016c16:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8016c18:	2300      	movs	r3, #0
 8016c1a:	e000      	b.n	8016c1e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8016c1c:	2302      	movs	r3, #2
  }
}
 8016c1e:	0018      	movs	r0, r3
 8016c20:	46bd      	mov	sp, r7
 8016c22:	b008      	add	sp, #32
 8016c24:	bd80      	pop	{r7, pc}
	...

08016c28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	b088      	sub	sp, #32
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	60f8      	str	r0, [r7, #12]
 8016c30:	60b9      	str	r1, [r7, #8]
 8016c32:	1dbb      	adds	r3, r7, #6
 8016c34:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	2280      	movs	r2, #128	@ 0x80
 8016c3a:	589b      	ldr	r3, [r3, r2]
 8016c3c:	2b20      	cmp	r3, #32
 8016c3e:	d14a      	bne.n	8016cd6 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8016c40:	68bb      	ldr	r3, [r7, #8]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d003      	beq.n	8016c4e <HAL_UART_Receive_IT+0x26>
 8016c46:	1dbb      	adds	r3, r7, #6
 8016c48:	881b      	ldrh	r3, [r3, #0]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d101      	bne.n	8016c52 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8016c4e:	2301      	movs	r3, #1
 8016c50:	e042      	b.n	8016cd8 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	689a      	ldr	r2, [r3, #8]
 8016c56:	2380      	movs	r3, #128	@ 0x80
 8016c58:	015b      	lsls	r3, r3, #5
 8016c5a:	429a      	cmp	r2, r3
 8016c5c:	d109      	bne.n	8016c72 <HAL_UART_Receive_IT+0x4a>
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	691b      	ldr	r3, [r3, #16]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d105      	bne.n	8016c72 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016c66:	68bb      	ldr	r3, [r7, #8]
 8016c68:	2201      	movs	r2, #1
 8016c6a:	4013      	ands	r3, r2
 8016c6c:	d001      	beq.n	8016c72 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8016c6e:	2301      	movs	r3, #1
 8016c70:	e032      	b.n	8016cd8 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	2200      	movs	r2, #0
 8016c76:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	4a18      	ldr	r2, [pc, #96]	@ (8016ce0 <HAL_UART_Receive_IT+0xb8>)
 8016c7e:	4293      	cmp	r3, r2
 8016c80:	d020      	beq.n	8016cc4 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	685a      	ldr	r2, [r3, #4]
 8016c88:	2380      	movs	r3, #128	@ 0x80
 8016c8a:	041b      	lsls	r3, r3, #16
 8016c8c:	4013      	ands	r3, r2
 8016c8e:	d019      	beq.n	8016cc4 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c90:	f3ef 8310 	mrs	r3, PRIMASK
 8016c94:	613b      	str	r3, [r7, #16]
  return(result);
 8016c96:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016c98:	61fb      	str	r3, [r7, #28]
 8016c9a:	2301      	movs	r3, #1
 8016c9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c9e:	697b      	ldr	r3, [r7, #20]
 8016ca0:	f383 8810 	msr	PRIMASK, r3
}
 8016ca4:	46c0      	nop			@ (mov r8, r8)
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	681a      	ldr	r2, [r3, #0]
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	2180      	movs	r1, #128	@ 0x80
 8016cb2:	04c9      	lsls	r1, r1, #19
 8016cb4:	430a      	orrs	r2, r1
 8016cb6:	601a      	str	r2, [r3, #0]
 8016cb8:	69fb      	ldr	r3, [r7, #28]
 8016cba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016cbc:	69bb      	ldr	r3, [r7, #24]
 8016cbe:	f383 8810 	msr	PRIMASK, r3
}
 8016cc2:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8016cc4:	1dbb      	adds	r3, r7, #6
 8016cc6:	881a      	ldrh	r2, [r3, #0]
 8016cc8:	68b9      	ldr	r1, [r7, #8]
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	0018      	movs	r0, r3
 8016cce:	f001 f8c7 	bl	8017e60 <UART_Start_Receive_IT>
 8016cd2:	0003      	movs	r3, r0
 8016cd4:	e000      	b.n	8016cd8 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8016cd6:	2302      	movs	r3, #2
  }
}
 8016cd8:	0018      	movs	r0, r3
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	b008      	add	sp, #32
 8016cde:	bd80      	pop	{r7, pc}
 8016ce0:	40004800 	.word	0x40004800

08016ce4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b088      	sub	sp, #32
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	60f8      	str	r0, [r7, #12]
 8016cec:	60b9      	str	r1, [r7, #8]
 8016cee:	1dbb      	adds	r3, r7, #6
 8016cf0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016cf6:	2b20      	cmp	r3, #32
 8016cf8:	d000      	beq.n	8016cfc <HAL_UART_Transmit_DMA+0x18>
 8016cfa:	e077      	b.n	8016dec <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8016cfc:	68bb      	ldr	r3, [r7, #8]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d003      	beq.n	8016d0a <HAL_UART_Transmit_DMA+0x26>
 8016d02:	1dbb      	adds	r3, r7, #6
 8016d04:	881b      	ldrh	r3, [r3, #0]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d101      	bne.n	8016d0e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8016d0a:	2301      	movs	r3, #1
 8016d0c:	e06f      	b.n	8016dee <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	689a      	ldr	r2, [r3, #8]
 8016d12:	2380      	movs	r3, #128	@ 0x80
 8016d14:	015b      	lsls	r3, r3, #5
 8016d16:	429a      	cmp	r2, r3
 8016d18:	d109      	bne.n	8016d2e <HAL_UART_Transmit_DMA+0x4a>
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	691b      	ldr	r3, [r3, #16]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d105      	bne.n	8016d2e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016d22:	68bb      	ldr	r3, [r7, #8]
 8016d24:	2201      	movs	r2, #1
 8016d26:	4013      	ands	r3, r2
 8016d28:	d001      	beq.n	8016d2e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8016d2a:	2301      	movs	r3, #1
 8016d2c:	e05f      	b.n	8016dee <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	68ba      	ldr	r2, [r7, #8]
 8016d32:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	1dba      	adds	r2, r7, #6
 8016d38:	2150      	movs	r1, #80	@ 0x50
 8016d3a:	8812      	ldrh	r2, [r2, #0]
 8016d3c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	1dba      	adds	r2, r7, #6
 8016d42:	2152      	movs	r1, #82	@ 0x52
 8016d44:	8812      	ldrh	r2, [r2, #0]
 8016d46:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	2284      	movs	r2, #132	@ 0x84
 8016d4c:	2100      	movs	r1, #0
 8016d4e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	2221      	movs	r2, #33	@ 0x21
 8016d54:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d027      	beq.n	8016dae <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016d62:	4a25      	ldr	r2, [pc, #148]	@ (8016df8 <HAL_UART_Transmit_DMA+0x114>)
 8016d64:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016d6a:	4a24      	ldr	r2, [pc, #144]	@ (8016dfc <HAL_UART_Transmit_DMA+0x118>)
 8016d6c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016d72:	4a23      	ldr	r2, [pc, #140]	@ (8016e00 <HAL_UART_Transmit_DMA+0x11c>)
 8016d74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016d86:	0019      	movs	r1, r3
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	3328      	adds	r3, #40	@ 0x28
 8016d8e:	001a      	movs	r2, r3
 8016d90:	1dbb      	adds	r3, r7, #6
 8016d92:	881b      	ldrh	r3, [r3, #0]
 8016d94:	f7f8 f9ce 	bl	800f134 <HAL_DMA_Start_IT>
 8016d98:	1e03      	subs	r3, r0, #0
 8016d9a:	d008      	beq.n	8016dae <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	2284      	movs	r2, #132	@ 0x84
 8016da0:	2110      	movs	r1, #16
 8016da2:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	2220      	movs	r2, #32
 8016da8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8016daa:	2301      	movs	r3, #1
 8016dac:	e01f      	b.n	8016dee <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	2240      	movs	r2, #64	@ 0x40
 8016db4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016db6:	f3ef 8310 	mrs	r3, PRIMASK
 8016dba:	613b      	str	r3, [r7, #16]
  return(result);
 8016dbc:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016dbe:	61fb      	str	r3, [r7, #28]
 8016dc0:	2301      	movs	r3, #1
 8016dc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016dc4:	697b      	ldr	r3, [r7, #20]
 8016dc6:	f383 8810 	msr	PRIMASK, r3
}
 8016dca:	46c0      	nop			@ (mov r8, r8)
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	689a      	ldr	r2, [r3, #8]
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	2180      	movs	r1, #128	@ 0x80
 8016dd8:	430a      	orrs	r2, r1
 8016dda:	609a      	str	r2, [r3, #8]
 8016ddc:	69fb      	ldr	r3, [r7, #28]
 8016dde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016de0:	69bb      	ldr	r3, [r7, #24]
 8016de2:	f383 8810 	msr	PRIMASK, r3
}
 8016de6:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8016de8:	2300      	movs	r3, #0
 8016dea:	e000      	b.n	8016dee <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8016dec:	2302      	movs	r3, #2
  }
}
 8016dee:	0018      	movs	r0, r3
 8016df0:	46bd      	mov	sp, r7
 8016df2:	b008      	add	sp, #32
 8016df4:	bd80      	pop	{r7, pc}
 8016df6:	46c0      	nop			@ (mov r8, r8)
 8016df8:	08018245 	.word	0x08018245
 8016dfc:	080182e1 	.word	0x080182e1
 8016e00:	08018481 	.word	0x08018481

08016e04 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b088      	sub	sp, #32
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	60f8      	str	r0, [r7, #12]
 8016e0c:	60b9      	str	r1, [r7, #8]
 8016e0e:	1dbb      	adds	r3, r7, #6
 8016e10:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	2280      	movs	r2, #128	@ 0x80
 8016e16:	589b      	ldr	r3, [r3, r2]
 8016e18:	2b20      	cmp	r3, #32
 8016e1a:	d14a      	bne.n	8016eb2 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8016e1c:	68bb      	ldr	r3, [r7, #8]
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d003      	beq.n	8016e2a <HAL_UART_Receive_DMA+0x26>
 8016e22:	1dbb      	adds	r3, r7, #6
 8016e24:	881b      	ldrh	r3, [r3, #0]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d101      	bne.n	8016e2e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8016e2a:	2301      	movs	r3, #1
 8016e2c:	e042      	b.n	8016eb4 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	689a      	ldr	r2, [r3, #8]
 8016e32:	2380      	movs	r3, #128	@ 0x80
 8016e34:	015b      	lsls	r3, r3, #5
 8016e36:	429a      	cmp	r2, r3
 8016e38:	d109      	bne.n	8016e4e <HAL_UART_Receive_DMA+0x4a>
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	691b      	ldr	r3, [r3, #16]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d105      	bne.n	8016e4e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016e42:	68bb      	ldr	r3, [r7, #8]
 8016e44:	2201      	movs	r2, #1
 8016e46:	4013      	ands	r3, r2
 8016e48:	d001      	beq.n	8016e4e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8016e4a:	2301      	movs	r3, #1
 8016e4c:	e032      	b.n	8016eb4 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	2200      	movs	r2, #0
 8016e52:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	4a18      	ldr	r2, [pc, #96]	@ (8016ebc <HAL_UART_Receive_DMA+0xb8>)
 8016e5a:	4293      	cmp	r3, r2
 8016e5c:	d020      	beq.n	8016ea0 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	685a      	ldr	r2, [r3, #4]
 8016e64:	2380      	movs	r3, #128	@ 0x80
 8016e66:	041b      	lsls	r3, r3, #16
 8016e68:	4013      	ands	r3, r2
 8016e6a:	d019      	beq.n	8016ea0 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8016e70:	613b      	str	r3, [r7, #16]
  return(result);
 8016e72:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016e74:	61fb      	str	r3, [r7, #28]
 8016e76:	2301      	movs	r3, #1
 8016e78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e7a:	697b      	ldr	r3, [r7, #20]
 8016e7c:	f383 8810 	msr	PRIMASK, r3
}
 8016e80:	46c0      	nop			@ (mov r8, r8)
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	681a      	ldr	r2, [r3, #0]
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	2180      	movs	r1, #128	@ 0x80
 8016e8e:	04c9      	lsls	r1, r1, #19
 8016e90:	430a      	orrs	r2, r1
 8016e92:	601a      	str	r2, [r3, #0]
 8016e94:	69fb      	ldr	r3, [r7, #28]
 8016e96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e98:	69bb      	ldr	r3, [r7, #24]
 8016e9a:	f383 8810 	msr	PRIMASK, r3
}
 8016e9e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8016ea0:	1dbb      	adds	r3, r7, #6
 8016ea2:	881a      	ldrh	r2, [r3, #0]
 8016ea4:	68b9      	ldr	r1, [r7, #8]
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	0018      	movs	r0, r3
 8016eaa:	f001 f8a3 	bl	8017ff4 <UART_Start_Receive_DMA>
 8016eae:	0003      	movs	r3, r0
 8016eb0:	e000      	b.n	8016eb4 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8016eb2:	2302      	movs	r3, #2
  }
}
 8016eb4:	0018      	movs	r0, r3
 8016eb6:	46bd      	mov	sp, r7
 8016eb8:	b008      	add	sp, #32
 8016eba:	bd80      	pop	{r7, pc}
 8016ebc:	40004800 	.word	0x40004800

08016ec0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016ec0:	b590      	push	{r4, r7, lr}
 8016ec2:	b0ab      	sub	sp, #172	@ 0xac
 8016ec4:	af00      	add	r7, sp, #0
 8016ec6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	69db      	ldr	r3, [r3, #28]
 8016ece:	22a4      	movs	r2, #164	@ 0xa4
 8016ed0:	18b9      	adds	r1, r7, r2
 8016ed2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	20a0      	movs	r0, #160	@ 0xa0
 8016edc:	1839      	adds	r1, r7, r0
 8016ede:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	689b      	ldr	r3, [r3, #8]
 8016ee6:	219c      	movs	r1, #156	@ 0x9c
 8016ee8:	1879      	adds	r1, r7, r1
 8016eea:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8016eec:	0011      	movs	r1, r2
 8016eee:	18bb      	adds	r3, r7, r2
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	4a9c      	ldr	r2, [pc, #624]	@ (8017164 <HAL_UART_IRQHandler+0x2a4>)
 8016ef4:	4013      	ands	r3, r2
 8016ef6:	2298      	movs	r2, #152	@ 0x98
 8016ef8:	18bc      	adds	r4, r7, r2
 8016efa:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8016efc:	18bb      	adds	r3, r7, r2
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d114      	bne.n	8016f2e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8016f04:	187b      	adds	r3, r7, r1
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	2220      	movs	r2, #32
 8016f0a:	4013      	ands	r3, r2
 8016f0c:	d00f      	beq.n	8016f2e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8016f0e:	183b      	adds	r3, r7, r0
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	2220      	movs	r2, #32
 8016f14:	4013      	ands	r3, r2
 8016f16:	d00a      	beq.n	8016f2e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d100      	bne.n	8016f22 <HAL_UART_IRQHandler+0x62>
 8016f20:	e2aa      	b.n	8017478 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016f26:	687a      	ldr	r2, [r7, #4]
 8016f28:	0010      	movs	r0, r2
 8016f2a:	4798      	blx	r3
      }
      return;
 8016f2c:	e2a4      	b.n	8017478 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8016f2e:	2398      	movs	r3, #152	@ 0x98
 8016f30:	18fb      	adds	r3, r7, r3
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d100      	bne.n	8016f3a <HAL_UART_IRQHandler+0x7a>
 8016f38:	e11a      	b.n	8017170 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8016f3a:	239c      	movs	r3, #156	@ 0x9c
 8016f3c:	18fb      	adds	r3, r7, r3
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	2201      	movs	r2, #1
 8016f42:	4013      	ands	r3, r2
 8016f44:	d106      	bne.n	8016f54 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8016f46:	23a0      	movs	r3, #160	@ 0xa0
 8016f48:	18fb      	adds	r3, r7, r3
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	4a86      	ldr	r2, [pc, #536]	@ (8017168 <HAL_UART_IRQHandler+0x2a8>)
 8016f4e:	4013      	ands	r3, r2
 8016f50:	d100      	bne.n	8016f54 <HAL_UART_IRQHandler+0x94>
 8016f52:	e10d      	b.n	8017170 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016f54:	23a4      	movs	r3, #164	@ 0xa4
 8016f56:	18fb      	adds	r3, r7, r3
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	2201      	movs	r2, #1
 8016f5c:	4013      	ands	r3, r2
 8016f5e:	d012      	beq.n	8016f86 <HAL_UART_IRQHandler+0xc6>
 8016f60:	23a0      	movs	r3, #160	@ 0xa0
 8016f62:	18fb      	adds	r3, r7, r3
 8016f64:	681a      	ldr	r2, [r3, #0]
 8016f66:	2380      	movs	r3, #128	@ 0x80
 8016f68:	005b      	lsls	r3, r3, #1
 8016f6a:	4013      	ands	r3, r2
 8016f6c:	d00b      	beq.n	8016f86 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	2201      	movs	r2, #1
 8016f74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	2284      	movs	r2, #132	@ 0x84
 8016f7a:	589b      	ldr	r3, [r3, r2]
 8016f7c:	2201      	movs	r2, #1
 8016f7e:	431a      	orrs	r2, r3
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	2184      	movs	r1, #132	@ 0x84
 8016f84:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016f86:	23a4      	movs	r3, #164	@ 0xa4
 8016f88:	18fb      	adds	r3, r7, r3
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	2202      	movs	r2, #2
 8016f8e:	4013      	ands	r3, r2
 8016f90:	d011      	beq.n	8016fb6 <HAL_UART_IRQHandler+0xf6>
 8016f92:	239c      	movs	r3, #156	@ 0x9c
 8016f94:	18fb      	adds	r3, r7, r3
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	2201      	movs	r2, #1
 8016f9a:	4013      	ands	r3, r2
 8016f9c:	d00b      	beq.n	8016fb6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	2202      	movs	r2, #2
 8016fa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	2284      	movs	r2, #132	@ 0x84
 8016faa:	589b      	ldr	r3, [r3, r2]
 8016fac:	2204      	movs	r2, #4
 8016fae:	431a      	orrs	r2, r3
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	2184      	movs	r1, #132	@ 0x84
 8016fb4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016fb6:	23a4      	movs	r3, #164	@ 0xa4
 8016fb8:	18fb      	adds	r3, r7, r3
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	2204      	movs	r2, #4
 8016fbe:	4013      	ands	r3, r2
 8016fc0:	d011      	beq.n	8016fe6 <HAL_UART_IRQHandler+0x126>
 8016fc2:	239c      	movs	r3, #156	@ 0x9c
 8016fc4:	18fb      	adds	r3, r7, r3
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	2201      	movs	r2, #1
 8016fca:	4013      	ands	r3, r2
 8016fcc:	d00b      	beq.n	8016fe6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	2204      	movs	r2, #4
 8016fd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	2284      	movs	r2, #132	@ 0x84
 8016fda:	589b      	ldr	r3, [r3, r2]
 8016fdc:	2202      	movs	r2, #2
 8016fde:	431a      	orrs	r2, r3
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	2184      	movs	r1, #132	@ 0x84
 8016fe4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8016fe6:	23a4      	movs	r3, #164	@ 0xa4
 8016fe8:	18fb      	adds	r3, r7, r3
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	2208      	movs	r2, #8
 8016fee:	4013      	ands	r3, r2
 8016ff0:	d017      	beq.n	8017022 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016ff2:	23a0      	movs	r3, #160	@ 0xa0
 8016ff4:	18fb      	adds	r3, r7, r3
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	2220      	movs	r2, #32
 8016ffa:	4013      	ands	r3, r2
 8016ffc:	d105      	bne.n	801700a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8016ffe:	239c      	movs	r3, #156	@ 0x9c
 8017000:	18fb      	adds	r3, r7, r3
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	2201      	movs	r2, #1
 8017006:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8017008:	d00b      	beq.n	8017022 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	2208      	movs	r2, #8
 8017010:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	2284      	movs	r2, #132	@ 0x84
 8017016:	589b      	ldr	r3, [r3, r2]
 8017018:	2208      	movs	r2, #8
 801701a:	431a      	orrs	r2, r3
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	2184      	movs	r1, #132	@ 0x84
 8017020:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017022:	23a4      	movs	r3, #164	@ 0xa4
 8017024:	18fb      	adds	r3, r7, r3
 8017026:	681a      	ldr	r2, [r3, #0]
 8017028:	2380      	movs	r3, #128	@ 0x80
 801702a:	011b      	lsls	r3, r3, #4
 801702c:	4013      	ands	r3, r2
 801702e:	d013      	beq.n	8017058 <HAL_UART_IRQHandler+0x198>
 8017030:	23a0      	movs	r3, #160	@ 0xa0
 8017032:	18fb      	adds	r3, r7, r3
 8017034:	681a      	ldr	r2, [r3, #0]
 8017036:	2380      	movs	r3, #128	@ 0x80
 8017038:	04db      	lsls	r3, r3, #19
 801703a:	4013      	ands	r3, r2
 801703c:	d00c      	beq.n	8017058 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	2280      	movs	r2, #128	@ 0x80
 8017044:	0112      	lsls	r2, r2, #4
 8017046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	2284      	movs	r2, #132	@ 0x84
 801704c:	589b      	ldr	r3, [r3, r2]
 801704e:	2220      	movs	r2, #32
 8017050:	431a      	orrs	r2, r3
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	2184      	movs	r1, #132	@ 0x84
 8017056:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	2284      	movs	r2, #132	@ 0x84
 801705c:	589b      	ldr	r3, [r3, r2]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d100      	bne.n	8017064 <HAL_UART_IRQHandler+0x1a4>
 8017062:	e20b      	b.n	801747c <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8017064:	23a4      	movs	r3, #164	@ 0xa4
 8017066:	18fb      	adds	r3, r7, r3
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	2220      	movs	r2, #32
 801706c:	4013      	ands	r3, r2
 801706e:	d00e      	beq.n	801708e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8017070:	23a0      	movs	r3, #160	@ 0xa0
 8017072:	18fb      	adds	r3, r7, r3
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	2220      	movs	r2, #32
 8017078:	4013      	ands	r3, r2
 801707a:	d008      	beq.n	801708e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017080:	2b00      	cmp	r3, #0
 8017082:	d004      	beq.n	801708e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017088:	687a      	ldr	r2, [r7, #4]
 801708a:	0010      	movs	r0, r2
 801708c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	2284      	movs	r2, #132	@ 0x84
 8017092:	589b      	ldr	r3, [r3, r2]
 8017094:	2194      	movs	r1, #148	@ 0x94
 8017096:	187a      	adds	r2, r7, r1
 8017098:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	689b      	ldr	r3, [r3, #8]
 80170a0:	2240      	movs	r2, #64	@ 0x40
 80170a2:	4013      	ands	r3, r2
 80170a4:	2b40      	cmp	r3, #64	@ 0x40
 80170a6:	d004      	beq.n	80170b2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80170a8:	187b      	adds	r3, r7, r1
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	2228      	movs	r2, #40	@ 0x28
 80170ae:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80170b0:	d04b      	beq.n	801714a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	0018      	movs	r0, r3
 80170b6:	f001 f861 	bl	801817c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	689b      	ldr	r3, [r3, #8]
 80170c0:	2240      	movs	r2, #64	@ 0x40
 80170c2:	4013      	ands	r3, r2
 80170c4:	2b40      	cmp	r3, #64	@ 0x40
 80170c6:	d139      	bne.n	801713c <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80170c8:	f3ef 8310 	mrs	r3, PRIMASK
 80170cc:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80170ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80170d0:	2090      	movs	r0, #144	@ 0x90
 80170d2:	183a      	adds	r2, r7, r0
 80170d4:	6013      	str	r3, [r2, #0]
 80170d6:	2301      	movs	r3, #1
 80170d8:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80170da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80170dc:	f383 8810 	msr	PRIMASK, r3
}
 80170e0:	46c0      	nop			@ (mov r8, r8)
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	689a      	ldr	r2, [r3, #8]
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	2140      	movs	r1, #64	@ 0x40
 80170ee:	438a      	bics	r2, r1
 80170f0:	609a      	str	r2, [r3, #8]
 80170f2:	183b      	adds	r3, r7, r0
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80170f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80170fa:	f383 8810 	msr	PRIMASK, r3
}
 80170fe:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017104:	2b00      	cmp	r3, #0
 8017106:	d012      	beq.n	801712e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801710c:	4a17      	ldr	r2, [pc, #92]	@ (801716c <HAL_UART_IRQHandler+0x2ac>)
 801710e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017114:	0018      	movs	r0, r3
 8017116:	f7f8 f8b3 	bl	800f280 <HAL_DMA_Abort_IT>
 801711a:	1e03      	subs	r3, r0, #0
 801711c:	d020      	beq.n	8017160 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017122:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017128:	0018      	movs	r0, r3
 801712a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801712c:	e018      	b.n	8017160 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	2298      	movs	r2, #152	@ 0x98
 8017132:	589b      	ldr	r3, [r3, r2]
 8017134:	687a      	ldr	r2, [r7, #4]
 8017136:	0010      	movs	r0, r2
 8017138:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801713a:	e011      	b.n	8017160 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	2298      	movs	r2, #152	@ 0x98
 8017140:	589b      	ldr	r3, [r3, r2]
 8017142:	687a      	ldr	r2, [r7, #4]
 8017144:	0010      	movs	r0, r2
 8017146:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017148:	e00a      	b.n	8017160 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	2298      	movs	r2, #152	@ 0x98
 801714e:	589b      	ldr	r3, [r3, r2]
 8017150:	687a      	ldr	r2, [r7, #4]
 8017152:	0010      	movs	r0, r2
 8017154:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	2284      	movs	r2, #132	@ 0x84
 801715a:	2100      	movs	r1, #0
 801715c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801715e:	e18d      	b.n	801747c <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017160:	46c0      	nop			@ (mov r8, r8)
    return;
 8017162:	e18b      	b.n	801747c <HAL_UART_IRQHandler+0x5bc>
 8017164:	0000080f 	.word	0x0000080f
 8017168:	04000120 	.word	0x04000120
 801716c:	08018509 	.word	0x08018509

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017174:	2b01      	cmp	r3, #1
 8017176:	d000      	beq.n	801717a <HAL_UART_IRQHandler+0x2ba>
 8017178:	e13d      	b.n	80173f6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801717a:	23a4      	movs	r3, #164	@ 0xa4
 801717c:	18fb      	adds	r3, r7, r3
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	2210      	movs	r2, #16
 8017182:	4013      	ands	r3, r2
 8017184:	d100      	bne.n	8017188 <HAL_UART_IRQHandler+0x2c8>
 8017186:	e136      	b.n	80173f6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8017188:	23a0      	movs	r3, #160	@ 0xa0
 801718a:	18fb      	adds	r3, r7, r3
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	2210      	movs	r2, #16
 8017190:	4013      	ands	r3, r2
 8017192:	d100      	bne.n	8017196 <HAL_UART_IRQHandler+0x2d6>
 8017194:	e12f      	b.n	80173f6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	2210      	movs	r2, #16
 801719c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	689b      	ldr	r3, [r3, #8]
 80171a4:	2240      	movs	r2, #64	@ 0x40
 80171a6:	4013      	ands	r3, r2
 80171a8:	2b40      	cmp	r3, #64	@ 0x40
 80171aa:	d000      	beq.n	80171ae <HAL_UART_IRQHandler+0x2ee>
 80171ac:	e0a2      	b.n	80172f4 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	685a      	ldr	r2, [r3, #4]
 80171b6:	217e      	movs	r1, #126	@ 0x7e
 80171b8:	187b      	adds	r3, r7, r1
 80171ba:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80171bc:	187b      	adds	r3, r7, r1
 80171be:	881b      	ldrh	r3, [r3, #0]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d100      	bne.n	80171c6 <HAL_UART_IRQHandler+0x306>
 80171c4:	e15c      	b.n	8017480 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	2258      	movs	r2, #88	@ 0x58
 80171ca:	5a9b      	ldrh	r3, [r3, r2]
 80171cc:	187a      	adds	r2, r7, r1
 80171ce:	8812      	ldrh	r2, [r2, #0]
 80171d0:	429a      	cmp	r2, r3
 80171d2:	d300      	bcc.n	80171d6 <HAL_UART_IRQHandler+0x316>
 80171d4:	e154      	b.n	8017480 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	187a      	adds	r2, r7, r1
 80171da:	215a      	movs	r1, #90	@ 0x5a
 80171dc:	8812      	ldrh	r2, [r2, #0]
 80171de:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	2220      	movs	r2, #32
 80171ea:	4013      	ands	r3, r2
 80171ec:	d16f      	bne.n	80172ce <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80171ee:	f3ef 8310 	mrs	r3, PRIMASK
 80171f2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80171f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80171f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80171f8:	2301      	movs	r3, #1
 80171fa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80171fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171fe:	f383 8810 	msr	PRIMASK, r3
}
 8017202:	46c0      	nop			@ (mov r8, r8)
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	681a      	ldr	r2, [r3, #0]
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	49a0      	ldr	r1, [pc, #640]	@ (8017490 <HAL_UART_IRQHandler+0x5d0>)
 8017210:	400a      	ands	r2, r1
 8017212:	601a      	str	r2, [r3, #0]
 8017214:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017216:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801721a:	f383 8810 	msr	PRIMASK, r3
}
 801721e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017220:	f3ef 8310 	mrs	r3, PRIMASK
 8017224:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8017226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017228:	677b      	str	r3, [r7, #116]	@ 0x74
 801722a:	2301      	movs	r3, #1
 801722c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801722e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017230:	f383 8810 	msr	PRIMASK, r3
}
 8017234:	46c0      	nop			@ (mov r8, r8)
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	689a      	ldr	r2, [r3, #8]
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	2101      	movs	r1, #1
 8017242:	438a      	bics	r2, r1
 8017244:	609a      	str	r2, [r3, #8]
 8017246:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017248:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801724a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801724c:	f383 8810 	msr	PRIMASK, r3
}
 8017250:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017252:	f3ef 8310 	mrs	r3, PRIMASK
 8017256:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8017258:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801725a:	673b      	str	r3, [r7, #112]	@ 0x70
 801725c:	2301      	movs	r3, #1
 801725e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017262:	f383 8810 	msr	PRIMASK, r3
}
 8017266:	46c0      	nop			@ (mov r8, r8)
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	689a      	ldr	r2, [r3, #8]
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	2140      	movs	r1, #64	@ 0x40
 8017274:	438a      	bics	r2, r1
 8017276:	609a      	str	r2, [r3, #8]
 8017278:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801727a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801727c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801727e:	f383 8810 	msr	PRIMASK, r3
}
 8017282:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	2280      	movs	r2, #128	@ 0x80
 8017288:	2120      	movs	r1, #32
 801728a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	2200      	movs	r2, #0
 8017290:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017292:	f3ef 8310 	mrs	r3, PRIMASK
 8017296:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8017298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801729a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801729c:	2301      	movs	r3, #1
 801729e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80172a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80172a2:	f383 8810 	msr	PRIMASK, r3
}
 80172a6:	46c0      	nop			@ (mov r8, r8)
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	681a      	ldr	r2, [r3, #0]
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	2110      	movs	r1, #16
 80172b4:	438a      	bics	r2, r1
 80172b6:	601a      	str	r2, [r3, #0]
 80172b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80172ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80172bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80172be:	f383 8810 	msr	PRIMASK, r3
}
 80172c2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80172c8:	0018      	movs	r0, r3
 80172ca:	f7f7 ff99 	bl	800f200 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	2202      	movs	r2, #2
 80172d2:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	22ac      	movs	r2, #172	@ 0xac
 80172d8:	589b      	ldr	r3, [r3, r2]
 80172da:	687a      	ldr	r2, [r7, #4]
 80172dc:	2158      	movs	r1, #88	@ 0x58
 80172de:	5a51      	ldrh	r1, [r2, r1]
 80172e0:	687a      	ldr	r2, [r7, #4]
 80172e2:	205a      	movs	r0, #90	@ 0x5a
 80172e4:	5a12      	ldrh	r2, [r2, r0]
 80172e6:	b292      	uxth	r2, r2
 80172e8:	1a8a      	subs	r2, r1, r2
 80172ea:	b291      	uxth	r1, r2
 80172ec:	687a      	ldr	r2, [r7, #4]
 80172ee:	0010      	movs	r0, r2
 80172f0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80172f2:	e0c5      	b.n	8017480 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	2258      	movs	r2, #88	@ 0x58
 80172f8:	5a99      	ldrh	r1, [r3, r2]
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	225a      	movs	r2, #90	@ 0x5a
 80172fe:	5a9b      	ldrh	r3, [r3, r2]
 8017300:	b29a      	uxth	r2, r3
 8017302:	208e      	movs	r0, #142	@ 0x8e
 8017304:	183b      	adds	r3, r7, r0
 8017306:	1a8a      	subs	r2, r1, r2
 8017308:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	225a      	movs	r2, #90	@ 0x5a
 801730e:	5a9b      	ldrh	r3, [r3, r2]
 8017310:	b29b      	uxth	r3, r3
 8017312:	2b00      	cmp	r3, #0
 8017314:	d100      	bne.n	8017318 <HAL_UART_IRQHandler+0x458>
 8017316:	e0b5      	b.n	8017484 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8017318:	183b      	adds	r3, r7, r0
 801731a:	881b      	ldrh	r3, [r3, #0]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d100      	bne.n	8017322 <HAL_UART_IRQHandler+0x462>
 8017320:	e0b0      	b.n	8017484 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017322:	f3ef 8310 	mrs	r3, PRIMASK
 8017326:	60fb      	str	r3, [r7, #12]
  return(result);
 8017328:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801732a:	2488      	movs	r4, #136	@ 0x88
 801732c:	193a      	adds	r2, r7, r4
 801732e:	6013      	str	r3, [r2, #0]
 8017330:	2301      	movs	r3, #1
 8017332:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017334:	693b      	ldr	r3, [r7, #16]
 8017336:	f383 8810 	msr	PRIMASK, r3
}
 801733a:	46c0      	nop			@ (mov r8, r8)
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	681a      	ldr	r2, [r3, #0]
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	4953      	ldr	r1, [pc, #332]	@ (8017494 <HAL_UART_IRQHandler+0x5d4>)
 8017348:	400a      	ands	r2, r1
 801734a:	601a      	str	r2, [r3, #0]
 801734c:	193b      	adds	r3, r7, r4
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017352:	697b      	ldr	r3, [r7, #20]
 8017354:	f383 8810 	msr	PRIMASK, r3
}
 8017358:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801735a:	f3ef 8310 	mrs	r3, PRIMASK
 801735e:	61bb      	str	r3, [r7, #24]
  return(result);
 8017360:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017362:	2484      	movs	r4, #132	@ 0x84
 8017364:	193a      	adds	r2, r7, r4
 8017366:	6013      	str	r3, [r2, #0]
 8017368:	2301      	movs	r3, #1
 801736a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801736c:	69fb      	ldr	r3, [r7, #28]
 801736e:	f383 8810 	msr	PRIMASK, r3
}
 8017372:	46c0      	nop			@ (mov r8, r8)
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	689a      	ldr	r2, [r3, #8]
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	2101      	movs	r1, #1
 8017380:	438a      	bics	r2, r1
 8017382:	609a      	str	r2, [r3, #8]
 8017384:	193b      	adds	r3, r7, r4
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801738a:	6a3b      	ldr	r3, [r7, #32]
 801738c:	f383 8810 	msr	PRIMASK, r3
}
 8017390:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	2280      	movs	r2, #128	@ 0x80
 8017396:	2120      	movs	r1, #32
 8017398:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	2200      	movs	r2, #0
 801739e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	2200      	movs	r2, #0
 80173a4:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80173a6:	f3ef 8310 	mrs	r3, PRIMASK
 80173aa:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80173ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80173ae:	2480      	movs	r4, #128	@ 0x80
 80173b0:	193a      	adds	r2, r7, r4
 80173b2:	6013      	str	r3, [r2, #0]
 80173b4:	2301      	movs	r3, #1
 80173b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80173b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173ba:	f383 8810 	msr	PRIMASK, r3
}
 80173be:	46c0      	nop			@ (mov r8, r8)
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	681a      	ldr	r2, [r3, #0]
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	681b      	ldr	r3, [r3, #0]
 80173ca:	2110      	movs	r1, #16
 80173cc:	438a      	bics	r2, r1
 80173ce:	601a      	str	r2, [r3, #0]
 80173d0:	193b      	adds	r3, r7, r4
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80173d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173d8:	f383 8810 	msr	PRIMASK, r3
}
 80173dc:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	2202      	movs	r2, #2
 80173e2:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	22ac      	movs	r2, #172	@ 0xac
 80173e8:	589b      	ldr	r3, [r3, r2]
 80173ea:	183a      	adds	r2, r7, r0
 80173ec:	8811      	ldrh	r1, [r2, #0]
 80173ee:	687a      	ldr	r2, [r7, #4]
 80173f0:	0010      	movs	r0, r2
 80173f2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80173f4:	e046      	b.n	8017484 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80173f6:	23a4      	movs	r3, #164	@ 0xa4
 80173f8:	18fb      	adds	r3, r7, r3
 80173fa:	681a      	ldr	r2, [r3, #0]
 80173fc:	2380      	movs	r3, #128	@ 0x80
 80173fe:	035b      	lsls	r3, r3, #13
 8017400:	4013      	ands	r3, r2
 8017402:	d012      	beq.n	801742a <HAL_UART_IRQHandler+0x56a>
 8017404:	239c      	movs	r3, #156	@ 0x9c
 8017406:	18fb      	adds	r3, r7, r3
 8017408:	681a      	ldr	r2, [r3, #0]
 801740a:	2380      	movs	r3, #128	@ 0x80
 801740c:	03db      	lsls	r3, r3, #15
 801740e:	4013      	ands	r3, r2
 8017410:	d00b      	beq.n	801742a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	681b      	ldr	r3, [r3, #0]
 8017416:	2280      	movs	r2, #128	@ 0x80
 8017418:	0352      	lsls	r2, r2, #13
 801741a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	22a8      	movs	r2, #168	@ 0xa8
 8017420:	589b      	ldr	r3, [r3, r2]
 8017422:	687a      	ldr	r2, [r7, #4]
 8017424:	0010      	movs	r0, r2
 8017426:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017428:	e02f      	b.n	801748a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801742a:	23a4      	movs	r3, #164	@ 0xa4
 801742c:	18fb      	adds	r3, r7, r3
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	2280      	movs	r2, #128	@ 0x80
 8017432:	4013      	ands	r3, r2
 8017434:	d00f      	beq.n	8017456 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8017436:	23a0      	movs	r3, #160	@ 0xa0
 8017438:	18fb      	adds	r3, r7, r3
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	2280      	movs	r2, #128	@ 0x80
 801743e:	4013      	ands	r3, r2
 8017440:	d009      	beq.n	8017456 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017446:	2b00      	cmp	r3, #0
 8017448:	d01e      	beq.n	8017488 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801744e:	687a      	ldr	r2, [r7, #4]
 8017450:	0010      	movs	r0, r2
 8017452:	4798      	blx	r3
    }
    return;
 8017454:	e018      	b.n	8017488 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017456:	23a4      	movs	r3, #164	@ 0xa4
 8017458:	18fb      	adds	r3, r7, r3
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	2240      	movs	r2, #64	@ 0x40
 801745e:	4013      	ands	r3, r2
 8017460:	d013      	beq.n	801748a <HAL_UART_IRQHandler+0x5ca>
 8017462:	23a0      	movs	r3, #160	@ 0xa0
 8017464:	18fb      	adds	r3, r7, r3
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	2240      	movs	r2, #64	@ 0x40
 801746a:	4013      	ands	r3, r2
 801746c:	d00d      	beq.n	801748a <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	0018      	movs	r0, r3
 8017472:	f001 f862 	bl	801853a <UART_EndTransmit_IT>
    return;
 8017476:	e008      	b.n	801748a <HAL_UART_IRQHandler+0x5ca>
      return;
 8017478:	46c0      	nop			@ (mov r8, r8)
 801747a:	e006      	b.n	801748a <HAL_UART_IRQHandler+0x5ca>
    return;
 801747c:	46c0      	nop			@ (mov r8, r8)
 801747e:	e004      	b.n	801748a <HAL_UART_IRQHandler+0x5ca>
      return;
 8017480:	46c0      	nop			@ (mov r8, r8)
 8017482:	e002      	b.n	801748a <HAL_UART_IRQHandler+0x5ca>
      return;
 8017484:	46c0      	nop			@ (mov r8, r8)
 8017486:	e000      	b.n	801748a <HAL_UART_IRQHandler+0x5ca>
    return;
 8017488:	46c0      	nop			@ (mov r8, r8)
  }

}
 801748a:	46bd      	mov	sp, r7
 801748c:	b02b      	add	sp, #172	@ 0xac
 801748e:	bd90      	pop	{r4, r7, pc}
 8017490:	fffffeff 	.word	0xfffffeff
 8017494:	fffffedf 	.word	0xfffffedf

08017498 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017498:	b580      	push	{r7, lr}
 801749a:	b082      	sub	sp, #8
 801749c:	af00      	add	r7, sp, #0
 801749e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80174a0:	46c0      	nop			@ (mov r8, r8)
 80174a2:	46bd      	mov	sp, r7
 80174a4:	b002      	add	sp, #8
 80174a6:	bd80      	pop	{r7, pc}

080174a8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80174a8:	b580      	push	{r7, lr}
 80174aa:	b082      	sub	sp, #8
 80174ac:	af00      	add	r7, sp, #0
 80174ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80174b0:	46c0      	nop			@ (mov r8, r8)
 80174b2:	46bd      	mov	sp, r7
 80174b4:	b002      	add	sp, #8
 80174b6:	bd80      	pop	{r7, pc}

080174b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b082      	sub	sp, #8
 80174bc:	af00      	add	r7, sp, #0
 80174be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80174c0:	46c0      	nop			@ (mov r8, r8)
 80174c2:	46bd      	mov	sp, r7
 80174c4:	b002      	add	sp, #8
 80174c6:	bd80      	pop	{r7, pc}

080174c8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80174c8:	b580      	push	{r7, lr}
 80174ca:	b082      	sub	sp, #8
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80174d0:	46c0      	nop			@ (mov r8, r8)
 80174d2:	46bd      	mov	sp, r7
 80174d4:	b002      	add	sp, #8
 80174d6:	bd80      	pop	{r7, pc}

080174d8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b082      	sub	sp, #8
 80174dc:	af00      	add	r7, sp, #0
 80174de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80174e0:	46c0      	nop			@ (mov r8, r8)
 80174e2:	46bd      	mov	sp, r7
 80174e4:	b002      	add	sp, #8
 80174e6:	bd80      	pop	{r7, pc}

080174e8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b082      	sub	sp, #8
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80174f0:	46c0      	nop			@ (mov r8, r8)
 80174f2:	46bd      	mov	sp, r7
 80174f4:	b002      	add	sp, #8
 80174f6:	bd80      	pop	{r7, pc}

080174f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80174f8:	b580      	push	{r7, lr}
 80174fa:	b082      	sub	sp, #8
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	6078      	str	r0, [r7, #4]
 8017500:	000a      	movs	r2, r1
 8017502:	1cbb      	adds	r3, r7, #2
 8017504:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017506:	46c0      	nop			@ (mov r8, r8)
 8017508:	46bd      	mov	sp, r7
 801750a:	b002      	add	sp, #8
 801750c:	bd80      	pop	{r7, pc}
	...

08017510 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8017510:	b580      	push	{r7, lr}
 8017512:	b082      	sub	sp, #8
 8017514:	af00      	add	r7, sp, #0
 8017516:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	2188      	movs	r1, #136	@ 0x88
 801751c:	4a14      	ldr	r2, [pc, #80]	@ (8017570 <UART_InitCallbacksToDefault+0x60>)
 801751e:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	218c      	movs	r1, #140	@ 0x8c
 8017524:	4a13      	ldr	r2, [pc, #76]	@ (8017574 <UART_InitCallbacksToDefault+0x64>)
 8017526:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	2190      	movs	r1, #144	@ 0x90
 801752c:	4a12      	ldr	r2, [pc, #72]	@ (8017578 <UART_InitCallbacksToDefault+0x68>)
 801752e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	2194      	movs	r1, #148	@ 0x94
 8017534:	4a11      	ldr	r2, [pc, #68]	@ (801757c <UART_InitCallbacksToDefault+0x6c>)
 8017536:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	2198      	movs	r1, #152	@ 0x98
 801753c:	4a10      	ldr	r2, [pc, #64]	@ (8017580 <UART_InitCallbacksToDefault+0x70>)
 801753e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	219c      	movs	r1, #156	@ 0x9c
 8017544:	4a0f      	ldr	r2, [pc, #60]	@ (8017584 <UART_InitCallbacksToDefault+0x74>)
 8017546:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	21a0      	movs	r1, #160	@ 0xa0
 801754c:	4a0e      	ldr	r2, [pc, #56]	@ (8017588 <UART_InitCallbacksToDefault+0x78>)
 801754e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	21a4      	movs	r1, #164	@ 0xa4
 8017554:	4a0d      	ldr	r2, [pc, #52]	@ (801758c <UART_InitCallbacksToDefault+0x7c>)
 8017556:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	21a8      	movs	r1, #168	@ 0xa8
 801755c:	4a0c      	ldr	r2, [pc, #48]	@ (8017590 <UART_InitCallbacksToDefault+0x80>)
 801755e:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	21ac      	movs	r1, #172	@ 0xac
 8017564:	4a0b      	ldr	r2, [pc, #44]	@ (8017594 <UART_InitCallbacksToDefault+0x84>)
 8017566:	505a      	str	r2, [r3, r1]

}
 8017568:	46c0      	nop			@ (mov r8, r8)
 801756a:	46bd      	mov	sp, r7
 801756c:	b002      	add	sp, #8
 801756e:	bd80      	pop	{r7, pc}
 8017570:	080174a9 	.word	0x080174a9
 8017574:	08017499 	.word	0x08017499
 8017578:	080174b9 	.word	0x080174b9
 801757c:	08007fe5 	.word	0x08007fe5
 8017580:	08003c69 	.word	0x08003c69
 8017584:	080174c9 	.word	0x080174c9
 8017588:	080174d9 	.word	0x080174d9
 801758c:	080174e9 	.word	0x080174e9
 8017590:	0801892d 	.word	0x0801892d
 8017594:	080174f9 	.word	0x080174f9

08017598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017598:	b5b0      	push	{r4, r5, r7, lr}
 801759a:	b08e      	sub	sp, #56	@ 0x38
 801759c:	af00      	add	r7, sp, #0
 801759e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80175a0:	231a      	movs	r3, #26
 80175a2:	2218      	movs	r2, #24
 80175a4:	189b      	adds	r3, r3, r2
 80175a6:	19db      	adds	r3, r3, r7
 80175a8:	2200      	movs	r2, #0
 80175aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80175ac:	69fb      	ldr	r3, [r7, #28]
 80175ae:	689a      	ldr	r2, [r3, #8]
 80175b0:	69fb      	ldr	r3, [r7, #28]
 80175b2:	691b      	ldr	r3, [r3, #16]
 80175b4:	431a      	orrs	r2, r3
 80175b6:	69fb      	ldr	r3, [r7, #28]
 80175b8:	695b      	ldr	r3, [r3, #20]
 80175ba:	431a      	orrs	r2, r3
 80175bc:	69fb      	ldr	r3, [r7, #28]
 80175be:	69db      	ldr	r3, [r3, #28]
 80175c0:	4313      	orrs	r3, r2
 80175c2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80175c4:	69fb      	ldr	r3, [r7, #28]
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	4ac3      	ldr	r2, [pc, #780]	@ (80178d8 <UART_SetConfig+0x340>)
 80175cc:	4013      	ands	r3, r2
 80175ce:	0019      	movs	r1, r3
 80175d0:	69fb      	ldr	r3, [r7, #28]
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80175d6:	430a      	orrs	r2, r1
 80175d8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80175da:	69fb      	ldr	r3, [r7, #28]
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	685b      	ldr	r3, [r3, #4]
 80175e0:	4abe      	ldr	r2, [pc, #760]	@ (80178dc <UART_SetConfig+0x344>)
 80175e2:	4013      	ands	r3, r2
 80175e4:	0019      	movs	r1, r3
 80175e6:	69fb      	ldr	r3, [r7, #28]
 80175e8:	68da      	ldr	r2, [r3, #12]
 80175ea:	69fb      	ldr	r3, [r7, #28]
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	430a      	orrs	r2, r1
 80175f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80175f2:	69fb      	ldr	r3, [r7, #28]
 80175f4:	699b      	ldr	r3, [r3, #24]
 80175f6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80175f8:	69fb      	ldr	r3, [r7, #28]
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	4ab8      	ldr	r2, [pc, #736]	@ (80178e0 <UART_SetConfig+0x348>)
 80175fe:	4293      	cmp	r3, r2
 8017600:	d004      	beq.n	801760c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8017602:	69fb      	ldr	r3, [r7, #28]
 8017604:	6a1b      	ldr	r3, [r3, #32]
 8017606:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017608:	4313      	orrs	r3, r2
 801760a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801760c:	69fb      	ldr	r3, [r7, #28]
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	689b      	ldr	r3, [r3, #8]
 8017612:	4ab4      	ldr	r2, [pc, #720]	@ (80178e4 <UART_SetConfig+0x34c>)
 8017614:	4013      	ands	r3, r2
 8017616:	0019      	movs	r1, r3
 8017618:	69fb      	ldr	r3, [r7, #28]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801761e:	430a      	orrs	r2, r1
 8017620:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8017622:	69fb      	ldr	r3, [r7, #28]
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	4ab0      	ldr	r2, [pc, #704]	@ (80178e8 <UART_SetConfig+0x350>)
 8017628:	4293      	cmp	r3, r2
 801762a:	d131      	bne.n	8017690 <UART_SetConfig+0xf8>
 801762c:	4baf      	ldr	r3, [pc, #700]	@ (80178ec <UART_SetConfig+0x354>)
 801762e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017630:	2203      	movs	r2, #3
 8017632:	4013      	ands	r3, r2
 8017634:	2b03      	cmp	r3, #3
 8017636:	d01d      	beq.n	8017674 <UART_SetConfig+0xdc>
 8017638:	d823      	bhi.n	8017682 <UART_SetConfig+0xea>
 801763a:	2b02      	cmp	r3, #2
 801763c:	d00c      	beq.n	8017658 <UART_SetConfig+0xc0>
 801763e:	d820      	bhi.n	8017682 <UART_SetConfig+0xea>
 8017640:	2b00      	cmp	r3, #0
 8017642:	d002      	beq.n	801764a <UART_SetConfig+0xb2>
 8017644:	2b01      	cmp	r3, #1
 8017646:	d00e      	beq.n	8017666 <UART_SetConfig+0xce>
 8017648:	e01b      	b.n	8017682 <UART_SetConfig+0xea>
 801764a:	231b      	movs	r3, #27
 801764c:	2218      	movs	r2, #24
 801764e:	189b      	adds	r3, r3, r2
 8017650:	19db      	adds	r3, r3, r7
 8017652:	2201      	movs	r2, #1
 8017654:	701a      	strb	r2, [r3, #0]
 8017656:	e0b4      	b.n	80177c2 <UART_SetConfig+0x22a>
 8017658:	231b      	movs	r3, #27
 801765a:	2218      	movs	r2, #24
 801765c:	189b      	adds	r3, r3, r2
 801765e:	19db      	adds	r3, r3, r7
 8017660:	2202      	movs	r2, #2
 8017662:	701a      	strb	r2, [r3, #0]
 8017664:	e0ad      	b.n	80177c2 <UART_SetConfig+0x22a>
 8017666:	231b      	movs	r3, #27
 8017668:	2218      	movs	r2, #24
 801766a:	189b      	adds	r3, r3, r2
 801766c:	19db      	adds	r3, r3, r7
 801766e:	2204      	movs	r2, #4
 8017670:	701a      	strb	r2, [r3, #0]
 8017672:	e0a6      	b.n	80177c2 <UART_SetConfig+0x22a>
 8017674:	231b      	movs	r3, #27
 8017676:	2218      	movs	r2, #24
 8017678:	189b      	adds	r3, r3, r2
 801767a:	19db      	adds	r3, r3, r7
 801767c:	2208      	movs	r2, #8
 801767e:	701a      	strb	r2, [r3, #0]
 8017680:	e09f      	b.n	80177c2 <UART_SetConfig+0x22a>
 8017682:	231b      	movs	r3, #27
 8017684:	2218      	movs	r2, #24
 8017686:	189b      	adds	r3, r3, r2
 8017688:	19db      	adds	r3, r3, r7
 801768a:	2210      	movs	r2, #16
 801768c:	701a      	strb	r2, [r3, #0]
 801768e:	e098      	b.n	80177c2 <UART_SetConfig+0x22a>
 8017690:	69fb      	ldr	r3, [r7, #28]
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	4a96      	ldr	r2, [pc, #600]	@ (80178f0 <UART_SetConfig+0x358>)
 8017696:	4293      	cmp	r3, r2
 8017698:	d131      	bne.n	80176fe <UART_SetConfig+0x166>
 801769a:	4b94      	ldr	r3, [pc, #592]	@ (80178ec <UART_SetConfig+0x354>)
 801769c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801769e:	220c      	movs	r2, #12
 80176a0:	4013      	ands	r3, r2
 80176a2:	2b0c      	cmp	r3, #12
 80176a4:	d01d      	beq.n	80176e2 <UART_SetConfig+0x14a>
 80176a6:	d823      	bhi.n	80176f0 <UART_SetConfig+0x158>
 80176a8:	2b08      	cmp	r3, #8
 80176aa:	d00c      	beq.n	80176c6 <UART_SetConfig+0x12e>
 80176ac:	d820      	bhi.n	80176f0 <UART_SetConfig+0x158>
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d002      	beq.n	80176b8 <UART_SetConfig+0x120>
 80176b2:	2b04      	cmp	r3, #4
 80176b4:	d00e      	beq.n	80176d4 <UART_SetConfig+0x13c>
 80176b6:	e01b      	b.n	80176f0 <UART_SetConfig+0x158>
 80176b8:	231b      	movs	r3, #27
 80176ba:	2218      	movs	r2, #24
 80176bc:	189b      	adds	r3, r3, r2
 80176be:	19db      	adds	r3, r3, r7
 80176c0:	2200      	movs	r2, #0
 80176c2:	701a      	strb	r2, [r3, #0]
 80176c4:	e07d      	b.n	80177c2 <UART_SetConfig+0x22a>
 80176c6:	231b      	movs	r3, #27
 80176c8:	2218      	movs	r2, #24
 80176ca:	189b      	adds	r3, r3, r2
 80176cc:	19db      	adds	r3, r3, r7
 80176ce:	2202      	movs	r2, #2
 80176d0:	701a      	strb	r2, [r3, #0]
 80176d2:	e076      	b.n	80177c2 <UART_SetConfig+0x22a>
 80176d4:	231b      	movs	r3, #27
 80176d6:	2218      	movs	r2, #24
 80176d8:	189b      	adds	r3, r3, r2
 80176da:	19db      	adds	r3, r3, r7
 80176dc:	2204      	movs	r2, #4
 80176de:	701a      	strb	r2, [r3, #0]
 80176e0:	e06f      	b.n	80177c2 <UART_SetConfig+0x22a>
 80176e2:	231b      	movs	r3, #27
 80176e4:	2218      	movs	r2, #24
 80176e6:	189b      	adds	r3, r3, r2
 80176e8:	19db      	adds	r3, r3, r7
 80176ea:	2208      	movs	r2, #8
 80176ec:	701a      	strb	r2, [r3, #0]
 80176ee:	e068      	b.n	80177c2 <UART_SetConfig+0x22a>
 80176f0:	231b      	movs	r3, #27
 80176f2:	2218      	movs	r2, #24
 80176f4:	189b      	adds	r3, r3, r2
 80176f6:	19db      	adds	r3, r3, r7
 80176f8:	2210      	movs	r2, #16
 80176fa:	701a      	strb	r2, [r3, #0]
 80176fc:	e061      	b.n	80177c2 <UART_SetConfig+0x22a>
 80176fe:	69fb      	ldr	r3, [r7, #28]
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	4a7c      	ldr	r2, [pc, #496]	@ (80178f4 <UART_SetConfig+0x35c>)
 8017704:	4293      	cmp	r3, r2
 8017706:	d106      	bne.n	8017716 <UART_SetConfig+0x17e>
 8017708:	231b      	movs	r3, #27
 801770a:	2218      	movs	r2, #24
 801770c:	189b      	adds	r3, r3, r2
 801770e:	19db      	adds	r3, r3, r7
 8017710:	2200      	movs	r2, #0
 8017712:	701a      	strb	r2, [r3, #0]
 8017714:	e055      	b.n	80177c2 <UART_SetConfig+0x22a>
 8017716:	69fb      	ldr	r3, [r7, #28]
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	4a77      	ldr	r2, [pc, #476]	@ (80178f8 <UART_SetConfig+0x360>)
 801771c:	4293      	cmp	r3, r2
 801771e:	d106      	bne.n	801772e <UART_SetConfig+0x196>
 8017720:	231b      	movs	r3, #27
 8017722:	2218      	movs	r2, #24
 8017724:	189b      	adds	r3, r3, r2
 8017726:	19db      	adds	r3, r3, r7
 8017728:	2200      	movs	r2, #0
 801772a:	701a      	strb	r2, [r3, #0]
 801772c:	e049      	b.n	80177c2 <UART_SetConfig+0x22a>
 801772e:	69fb      	ldr	r3, [r7, #28]
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	4a6b      	ldr	r2, [pc, #428]	@ (80178e0 <UART_SetConfig+0x348>)
 8017734:	4293      	cmp	r3, r2
 8017736:	d13e      	bne.n	80177b6 <UART_SetConfig+0x21e>
 8017738:	4b6c      	ldr	r3, [pc, #432]	@ (80178ec <UART_SetConfig+0x354>)
 801773a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801773c:	23c0      	movs	r3, #192	@ 0xc0
 801773e:	011b      	lsls	r3, r3, #4
 8017740:	4013      	ands	r3, r2
 8017742:	22c0      	movs	r2, #192	@ 0xc0
 8017744:	0112      	lsls	r2, r2, #4
 8017746:	4293      	cmp	r3, r2
 8017748:	d027      	beq.n	801779a <UART_SetConfig+0x202>
 801774a:	22c0      	movs	r2, #192	@ 0xc0
 801774c:	0112      	lsls	r2, r2, #4
 801774e:	4293      	cmp	r3, r2
 8017750:	d82a      	bhi.n	80177a8 <UART_SetConfig+0x210>
 8017752:	2280      	movs	r2, #128	@ 0x80
 8017754:	0112      	lsls	r2, r2, #4
 8017756:	4293      	cmp	r3, r2
 8017758:	d011      	beq.n	801777e <UART_SetConfig+0x1e6>
 801775a:	2280      	movs	r2, #128	@ 0x80
 801775c:	0112      	lsls	r2, r2, #4
 801775e:	4293      	cmp	r3, r2
 8017760:	d822      	bhi.n	80177a8 <UART_SetConfig+0x210>
 8017762:	2b00      	cmp	r3, #0
 8017764:	d004      	beq.n	8017770 <UART_SetConfig+0x1d8>
 8017766:	2280      	movs	r2, #128	@ 0x80
 8017768:	00d2      	lsls	r2, r2, #3
 801776a:	4293      	cmp	r3, r2
 801776c:	d00e      	beq.n	801778c <UART_SetConfig+0x1f4>
 801776e:	e01b      	b.n	80177a8 <UART_SetConfig+0x210>
 8017770:	231b      	movs	r3, #27
 8017772:	2218      	movs	r2, #24
 8017774:	189b      	adds	r3, r3, r2
 8017776:	19db      	adds	r3, r3, r7
 8017778:	2200      	movs	r2, #0
 801777a:	701a      	strb	r2, [r3, #0]
 801777c:	e021      	b.n	80177c2 <UART_SetConfig+0x22a>
 801777e:	231b      	movs	r3, #27
 8017780:	2218      	movs	r2, #24
 8017782:	189b      	adds	r3, r3, r2
 8017784:	19db      	adds	r3, r3, r7
 8017786:	2202      	movs	r2, #2
 8017788:	701a      	strb	r2, [r3, #0]
 801778a:	e01a      	b.n	80177c2 <UART_SetConfig+0x22a>
 801778c:	231b      	movs	r3, #27
 801778e:	2218      	movs	r2, #24
 8017790:	189b      	adds	r3, r3, r2
 8017792:	19db      	adds	r3, r3, r7
 8017794:	2204      	movs	r2, #4
 8017796:	701a      	strb	r2, [r3, #0]
 8017798:	e013      	b.n	80177c2 <UART_SetConfig+0x22a>
 801779a:	231b      	movs	r3, #27
 801779c:	2218      	movs	r2, #24
 801779e:	189b      	adds	r3, r3, r2
 80177a0:	19db      	adds	r3, r3, r7
 80177a2:	2208      	movs	r2, #8
 80177a4:	701a      	strb	r2, [r3, #0]
 80177a6:	e00c      	b.n	80177c2 <UART_SetConfig+0x22a>
 80177a8:	231b      	movs	r3, #27
 80177aa:	2218      	movs	r2, #24
 80177ac:	189b      	adds	r3, r3, r2
 80177ae:	19db      	adds	r3, r3, r7
 80177b0:	2210      	movs	r2, #16
 80177b2:	701a      	strb	r2, [r3, #0]
 80177b4:	e005      	b.n	80177c2 <UART_SetConfig+0x22a>
 80177b6:	231b      	movs	r3, #27
 80177b8:	2218      	movs	r2, #24
 80177ba:	189b      	adds	r3, r3, r2
 80177bc:	19db      	adds	r3, r3, r7
 80177be:	2210      	movs	r2, #16
 80177c0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80177c2:	69fb      	ldr	r3, [r7, #28]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	4a46      	ldr	r2, [pc, #280]	@ (80178e0 <UART_SetConfig+0x348>)
 80177c8:	4293      	cmp	r3, r2
 80177ca:	d000      	beq.n	80177ce <UART_SetConfig+0x236>
 80177cc:	e09a      	b.n	8017904 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80177ce:	231b      	movs	r3, #27
 80177d0:	2218      	movs	r2, #24
 80177d2:	189b      	adds	r3, r3, r2
 80177d4:	19db      	adds	r3, r3, r7
 80177d6:	781b      	ldrb	r3, [r3, #0]
 80177d8:	2b08      	cmp	r3, #8
 80177da:	d01d      	beq.n	8017818 <UART_SetConfig+0x280>
 80177dc:	dc20      	bgt.n	8017820 <UART_SetConfig+0x288>
 80177de:	2b04      	cmp	r3, #4
 80177e0:	d015      	beq.n	801780e <UART_SetConfig+0x276>
 80177e2:	dc1d      	bgt.n	8017820 <UART_SetConfig+0x288>
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d002      	beq.n	80177ee <UART_SetConfig+0x256>
 80177e8:	2b02      	cmp	r3, #2
 80177ea:	d005      	beq.n	80177f8 <UART_SetConfig+0x260>
 80177ec:	e018      	b.n	8017820 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80177ee:	f7fd fe4b 	bl	8015488 <HAL_RCC_GetPCLK1Freq>
 80177f2:	0003      	movs	r3, r0
 80177f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80177f6:	e01c      	b.n	8017832 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80177f8:	4b3c      	ldr	r3, [pc, #240]	@ (80178ec <UART_SetConfig+0x354>)
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	2210      	movs	r2, #16
 80177fe:	4013      	ands	r3, r2
 8017800:	d002      	beq.n	8017808 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017802:	4b3e      	ldr	r3, [pc, #248]	@ (80178fc <UART_SetConfig+0x364>)
 8017804:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017806:	e014      	b.n	8017832 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8017808:	4b3d      	ldr	r3, [pc, #244]	@ (8017900 <UART_SetConfig+0x368>)
 801780a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801780c:	e011      	b.n	8017832 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801780e:	f7fd fd8b 	bl	8015328 <HAL_RCC_GetSysClockFreq>
 8017812:	0003      	movs	r3, r0
 8017814:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017816:	e00c      	b.n	8017832 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017818:	2380      	movs	r3, #128	@ 0x80
 801781a:	021b      	lsls	r3, r3, #8
 801781c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801781e:	e008      	b.n	8017832 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8017820:	2300      	movs	r3, #0
 8017822:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017824:	231a      	movs	r3, #26
 8017826:	2218      	movs	r2, #24
 8017828:	189b      	adds	r3, r3, r2
 801782a:	19db      	adds	r3, r3, r7
 801782c:	2201      	movs	r2, #1
 801782e:	701a      	strb	r2, [r3, #0]
        break;
 8017830:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8017832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017834:	2b00      	cmp	r3, #0
 8017836:	d100      	bne.n	801783a <UART_SetConfig+0x2a2>
 8017838:	e133      	b.n	8017aa2 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801783a:	69fb      	ldr	r3, [r7, #28]
 801783c:	685a      	ldr	r2, [r3, #4]
 801783e:	0013      	movs	r3, r2
 8017840:	005b      	lsls	r3, r3, #1
 8017842:	189b      	adds	r3, r3, r2
 8017844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017846:	429a      	cmp	r2, r3
 8017848:	d305      	bcc.n	8017856 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801784a:	69fb      	ldr	r3, [r7, #28]
 801784c:	685b      	ldr	r3, [r3, #4]
 801784e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017850:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017852:	429a      	cmp	r2, r3
 8017854:	d906      	bls.n	8017864 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8017856:	231a      	movs	r3, #26
 8017858:	2218      	movs	r2, #24
 801785a:	189b      	adds	r3, r3, r2
 801785c:	19db      	adds	r3, r3, r7
 801785e:	2201      	movs	r2, #1
 8017860:	701a      	strb	r2, [r3, #0]
 8017862:	e11e      	b.n	8017aa2 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8017864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017866:	613b      	str	r3, [r7, #16]
 8017868:	2300      	movs	r3, #0
 801786a:	617b      	str	r3, [r7, #20]
 801786c:	6939      	ldr	r1, [r7, #16]
 801786e:	697a      	ldr	r2, [r7, #20]
 8017870:	000b      	movs	r3, r1
 8017872:	0e1b      	lsrs	r3, r3, #24
 8017874:	0010      	movs	r0, r2
 8017876:	0205      	lsls	r5, r0, #8
 8017878:	431d      	orrs	r5, r3
 801787a:	000b      	movs	r3, r1
 801787c:	021c      	lsls	r4, r3, #8
 801787e:	69fb      	ldr	r3, [r7, #28]
 8017880:	685b      	ldr	r3, [r3, #4]
 8017882:	085b      	lsrs	r3, r3, #1
 8017884:	60bb      	str	r3, [r7, #8]
 8017886:	2300      	movs	r3, #0
 8017888:	60fb      	str	r3, [r7, #12]
 801788a:	68b8      	ldr	r0, [r7, #8]
 801788c:	68f9      	ldr	r1, [r7, #12]
 801788e:	1900      	adds	r0, r0, r4
 8017890:	4169      	adcs	r1, r5
 8017892:	69fb      	ldr	r3, [r7, #28]
 8017894:	685b      	ldr	r3, [r3, #4]
 8017896:	603b      	str	r3, [r7, #0]
 8017898:	2300      	movs	r3, #0
 801789a:	607b      	str	r3, [r7, #4]
 801789c:	683a      	ldr	r2, [r7, #0]
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	f7e8 fe6e 	bl	8000580 <__aeabi_uldivmod>
 80178a4:	0002      	movs	r2, r0
 80178a6:	000b      	movs	r3, r1
 80178a8:	0013      	movs	r3, r2
 80178aa:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80178ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80178ae:	23c0      	movs	r3, #192	@ 0xc0
 80178b0:	009b      	lsls	r3, r3, #2
 80178b2:	429a      	cmp	r2, r3
 80178b4:	d309      	bcc.n	80178ca <UART_SetConfig+0x332>
 80178b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80178b8:	2380      	movs	r3, #128	@ 0x80
 80178ba:	035b      	lsls	r3, r3, #13
 80178bc:	429a      	cmp	r2, r3
 80178be:	d204      	bcs.n	80178ca <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80178c0:	69fb      	ldr	r3, [r7, #28]
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80178c6:	60da      	str	r2, [r3, #12]
 80178c8:	e0eb      	b.n	8017aa2 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80178ca:	231a      	movs	r3, #26
 80178cc:	2218      	movs	r2, #24
 80178ce:	189b      	adds	r3, r3, r2
 80178d0:	19db      	adds	r3, r3, r7
 80178d2:	2201      	movs	r2, #1
 80178d4:	701a      	strb	r2, [r3, #0]
 80178d6:	e0e4      	b.n	8017aa2 <UART_SetConfig+0x50a>
 80178d8:	efff69f3 	.word	0xefff69f3
 80178dc:	ffffcfff 	.word	0xffffcfff
 80178e0:	40004800 	.word	0x40004800
 80178e4:	fffff4ff 	.word	0xfffff4ff
 80178e8:	40013800 	.word	0x40013800
 80178ec:	40021000 	.word	0x40021000
 80178f0:	40004400 	.word	0x40004400
 80178f4:	40004c00 	.word	0x40004c00
 80178f8:	40005000 	.word	0x40005000
 80178fc:	003d0900 	.word	0x003d0900
 8017900:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017904:	69fb      	ldr	r3, [r7, #28]
 8017906:	69da      	ldr	r2, [r3, #28]
 8017908:	2380      	movs	r3, #128	@ 0x80
 801790a:	021b      	lsls	r3, r3, #8
 801790c:	429a      	cmp	r2, r3
 801790e:	d000      	beq.n	8017912 <UART_SetConfig+0x37a>
 8017910:	e070      	b.n	80179f4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8017912:	231b      	movs	r3, #27
 8017914:	2218      	movs	r2, #24
 8017916:	189b      	adds	r3, r3, r2
 8017918:	19db      	adds	r3, r3, r7
 801791a:	781b      	ldrb	r3, [r3, #0]
 801791c:	2b08      	cmp	r3, #8
 801791e:	d822      	bhi.n	8017966 <UART_SetConfig+0x3ce>
 8017920:	009a      	lsls	r2, r3, #2
 8017922:	4b67      	ldr	r3, [pc, #412]	@ (8017ac0 <UART_SetConfig+0x528>)
 8017924:	18d3      	adds	r3, r2, r3
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801792a:	f7fd fdad 	bl	8015488 <HAL_RCC_GetPCLK1Freq>
 801792e:	0003      	movs	r3, r0
 8017930:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017932:	e021      	b.n	8017978 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017934:	f7fd fdbe 	bl	80154b4 <HAL_RCC_GetPCLK2Freq>
 8017938:	0003      	movs	r3, r0
 801793a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801793c:	e01c      	b.n	8017978 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801793e:	4b61      	ldr	r3, [pc, #388]	@ (8017ac4 <UART_SetConfig+0x52c>)
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	2210      	movs	r2, #16
 8017944:	4013      	ands	r3, r2
 8017946:	d002      	beq.n	801794e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017948:	4b5f      	ldr	r3, [pc, #380]	@ (8017ac8 <UART_SetConfig+0x530>)
 801794a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801794c:	e014      	b.n	8017978 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801794e:	4b5f      	ldr	r3, [pc, #380]	@ (8017acc <UART_SetConfig+0x534>)
 8017950:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017952:	e011      	b.n	8017978 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017954:	f7fd fce8 	bl	8015328 <HAL_RCC_GetSysClockFreq>
 8017958:	0003      	movs	r3, r0
 801795a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801795c:	e00c      	b.n	8017978 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801795e:	2380      	movs	r3, #128	@ 0x80
 8017960:	021b      	lsls	r3, r3, #8
 8017962:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017964:	e008      	b.n	8017978 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8017966:	2300      	movs	r3, #0
 8017968:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801796a:	231a      	movs	r3, #26
 801796c:	2218      	movs	r2, #24
 801796e:	189b      	adds	r3, r3, r2
 8017970:	19db      	adds	r3, r3, r7
 8017972:	2201      	movs	r2, #1
 8017974:	701a      	strb	r2, [r3, #0]
        break;
 8017976:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8017978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801797a:	2b00      	cmp	r3, #0
 801797c:	d100      	bne.n	8017980 <UART_SetConfig+0x3e8>
 801797e:	e090      	b.n	8017aa2 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8017980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017982:	005a      	lsls	r2, r3, #1
 8017984:	69fb      	ldr	r3, [r7, #28]
 8017986:	685b      	ldr	r3, [r3, #4]
 8017988:	085b      	lsrs	r3, r3, #1
 801798a:	18d2      	adds	r2, r2, r3
 801798c:	69fb      	ldr	r3, [r7, #28]
 801798e:	685b      	ldr	r3, [r3, #4]
 8017990:	0019      	movs	r1, r3
 8017992:	0010      	movs	r0, r2
 8017994:	f7e8 fc06 	bl	80001a4 <__udivsi3>
 8017998:	0003      	movs	r3, r0
 801799a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801799c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801799e:	2b0f      	cmp	r3, #15
 80179a0:	d921      	bls.n	80179e6 <UART_SetConfig+0x44e>
 80179a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80179a4:	2380      	movs	r3, #128	@ 0x80
 80179a6:	025b      	lsls	r3, r3, #9
 80179a8:	429a      	cmp	r2, r3
 80179aa:	d21c      	bcs.n	80179e6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80179ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179ae:	b29a      	uxth	r2, r3
 80179b0:	200e      	movs	r0, #14
 80179b2:	2418      	movs	r4, #24
 80179b4:	1903      	adds	r3, r0, r4
 80179b6:	19db      	adds	r3, r3, r7
 80179b8:	210f      	movs	r1, #15
 80179ba:	438a      	bics	r2, r1
 80179bc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80179be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179c0:	085b      	lsrs	r3, r3, #1
 80179c2:	b29b      	uxth	r3, r3
 80179c4:	2207      	movs	r2, #7
 80179c6:	4013      	ands	r3, r2
 80179c8:	b299      	uxth	r1, r3
 80179ca:	1903      	adds	r3, r0, r4
 80179cc:	19db      	adds	r3, r3, r7
 80179ce:	1902      	adds	r2, r0, r4
 80179d0:	19d2      	adds	r2, r2, r7
 80179d2:	8812      	ldrh	r2, [r2, #0]
 80179d4:	430a      	orrs	r2, r1
 80179d6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80179d8:	69fb      	ldr	r3, [r7, #28]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	1902      	adds	r2, r0, r4
 80179de:	19d2      	adds	r2, r2, r7
 80179e0:	8812      	ldrh	r2, [r2, #0]
 80179e2:	60da      	str	r2, [r3, #12]
 80179e4:	e05d      	b.n	8017aa2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80179e6:	231a      	movs	r3, #26
 80179e8:	2218      	movs	r2, #24
 80179ea:	189b      	adds	r3, r3, r2
 80179ec:	19db      	adds	r3, r3, r7
 80179ee:	2201      	movs	r2, #1
 80179f0:	701a      	strb	r2, [r3, #0]
 80179f2:	e056      	b.n	8017aa2 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80179f4:	231b      	movs	r3, #27
 80179f6:	2218      	movs	r2, #24
 80179f8:	189b      	adds	r3, r3, r2
 80179fa:	19db      	adds	r3, r3, r7
 80179fc:	781b      	ldrb	r3, [r3, #0]
 80179fe:	2b08      	cmp	r3, #8
 8017a00:	d822      	bhi.n	8017a48 <UART_SetConfig+0x4b0>
 8017a02:	009a      	lsls	r2, r3, #2
 8017a04:	4b32      	ldr	r3, [pc, #200]	@ (8017ad0 <UART_SetConfig+0x538>)
 8017a06:	18d3      	adds	r3, r2, r3
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017a0c:	f7fd fd3c 	bl	8015488 <HAL_RCC_GetPCLK1Freq>
 8017a10:	0003      	movs	r3, r0
 8017a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017a14:	e021      	b.n	8017a5a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017a16:	f7fd fd4d 	bl	80154b4 <HAL_RCC_GetPCLK2Freq>
 8017a1a:	0003      	movs	r3, r0
 8017a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017a1e:	e01c      	b.n	8017a5a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017a20:	4b28      	ldr	r3, [pc, #160]	@ (8017ac4 <UART_SetConfig+0x52c>)
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	2210      	movs	r2, #16
 8017a26:	4013      	ands	r3, r2
 8017a28:	d002      	beq.n	8017a30 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017a2a:	4b27      	ldr	r3, [pc, #156]	@ (8017ac8 <UART_SetConfig+0x530>)
 8017a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017a2e:	e014      	b.n	8017a5a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8017a30:	4b26      	ldr	r3, [pc, #152]	@ (8017acc <UART_SetConfig+0x534>)
 8017a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017a34:	e011      	b.n	8017a5a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017a36:	f7fd fc77 	bl	8015328 <HAL_RCC_GetSysClockFreq>
 8017a3a:	0003      	movs	r3, r0
 8017a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017a3e:	e00c      	b.n	8017a5a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017a40:	2380      	movs	r3, #128	@ 0x80
 8017a42:	021b      	lsls	r3, r3, #8
 8017a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017a46:	e008      	b.n	8017a5a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8017a48:	2300      	movs	r3, #0
 8017a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017a4c:	231a      	movs	r3, #26
 8017a4e:	2218      	movs	r2, #24
 8017a50:	189b      	adds	r3, r3, r2
 8017a52:	19db      	adds	r3, r3, r7
 8017a54:	2201      	movs	r2, #1
 8017a56:	701a      	strb	r2, [r3, #0]
        break;
 8017a58:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8017a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d020      	beq.n	8017aa2 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8017a60:	69fb      	ldr	r3, [r7, #28]
 8017a62:	685b      	ldr	r3, [r3, #4]
 8017a64:	085a      	lsrs	r2, r3, #1
 8017a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a68:	18d2      	adds	r2, r2, r3
 8017a6a:	69fb      	ldr	r3, [r7, #28]
 8017a6c:	685b      	ldr	r3, [r3, #4]
 8017a6e:	0019      	movs	r1, r3
 8017a70:	0010      	movs	r0, r2
 8017a72:	f7e8 fb97 	bl	80001a4 <__udivsi3>
 8017a76:	0003      	movs	r3, r0
 8017a78:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8017a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a7c:	2b0f      	cmp	r3, #15
 8017a7e:	d90a      	bls.n	8017a96 <UART_SetConfig+0x4fe>
 8017a80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017a82:	2380      	movs	r3, #128	@ 0x80
 8017a84:	025b      	lsls	r3, r3, #9
 8017a86:	429a      	cmp	r2, r3
 8017a88:	d205      	bcs.n	8017a96 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8017a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a8c:	b29a      	uxth	r2, r3
 8017a8e:	69fb      	ldr	r3, [r7, #28]
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	60da      	str	r2, [r3, #12]
 8017a94:	e005      	b.n	8017aa2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8017a96:	231a      	movs	r3, #26
 8017a98:	2218      	movs	r2, #24
 8017a9a:	189b      	adds	r3, r3, r2
 8017a9c:	19db      	adds	r3, r3, r7
 8017a9e:	2201      	movs	r2, #1
 8017aa0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8017aa2:	69fb      	ldr	r3, [r7, #28]
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8017aa8:	69fb      	ldr	r3, [r7, #28]
 8017aaa:	2200      	movs	r2, #0
 8017aac:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8017aae:	231a      	movs	r3, #26
 8017ab0:	2218      	movs	r2, #24
 8017ab2:	189b      	adds	r3, r3, r2
 8017ab4:	19db      	adds	r3, r3, r7
 8017ab6:	781b      	ldrb	r3, [r3, #0]
}
 8017ab8:	0018      	movs	r0, r3
 8017aba:	46bd      	mov	sp, r7
 8017abc:	b00e      	add	sp, #56	@ 0x38
 8017abe:	bdb0      	pop	{r4, r5, r7, pc}
 8017ac0:	08024d34 	.word	0x08024d34
 8017ac4:	40021000 	.word	0x40021000
 8017ac8:	003d0900 	.word	0x003d0900
 8017acc:	00f42400 	.word	0x00f42400
 8017ad0:	08024d58 	.word	0x08024d58

08017ad4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8017ad4:	b580      	push	{r7, lr}
 8017ad6:	b082      	sub	sp, #8
 8017ad8:	af00      	add	r7, sp, #0
 8017ada:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ae0:	2201      	movs	r2, #1
 8017ae2:	4013      	ands	r3, r2
 8017ae4:	d00b      	beq.n	8017afe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	685b      	ldr	r3, [r3, #4]
 8017aec:	4a4a      	ldr	r2, [pc, #296]	@ (8017c18 <UART_AdvFeatureConfig+0x144>)
 8017aee:	4013      	ands	r3, r2
 8017af0:	0019      	movs	r1, r3
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	430a      	orrs	r2, r1
 8017afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b02:	2202      	movs	r2, #2
 8017b04:	4013      	ands	r3, r2
 8017b06:	d00b      	beq.n	8017b20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	685b      	ldr	r3, [r3, #4]
 8017b0e:	4a43      	ldr	r2, [pc, #268]	@ (8017c1c <UART_AdvFeatureConfig+0x148>)
 8017b10:	4013      	ands	r3, r2
 8017b12:	0019      	movs	r1, r3
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	430a      	orrs	r2, r1
 8017b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b24:	2204      	movs	r2, #4
 8017b26:	4013      	ands	r3, r2
 8017b28:	d00b      	beq.n	8017b42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	685b      	ldr	r3, [r3, #4]
 8017b30:	4a3b      	ldr	r2, [pc, #236]	@ (8017c20 <UART_AdvFeatureConfig+0x14c>)
 8017b32:	4013      	ands	r3, r2
 8017b34:	0019      	movs	r1, r3
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	681b      	ldr	r3, [r3, #0]
 8017b3e:	430a      	orrs	r2, r1
 8017b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b46:	2208      	movs	r2, #8
 8017b48:	4013      	ands	r3, r2
 8017b4a:	d00b      	beq.n	8017b64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	685b      	ldr	r3, [r3, #4]
 8017b52:	4a34      	ldr	r2, [pc, #208]	@ (8017c24 <UART_AdvFeatureConfig+0x150>)
 8017b54:	4013      	ands	r3, r2
 8017b56:	0019      	movs	r1, r3
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	430a      	orrs	r2, r1
 8017b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b68:	2210      	movs	r2, #16
 8017b6a:	4013      	ands	r3, r2
 8017b6c:	d00b      	beq.n	8017b86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	689b      	ldr	r3, [r3, #8]
 8017b74:	4a2c      	ldr	r2, [pc, #176]	@ (8017c28 <UART_AdvFeatureConfig+0x154>)
 8017b76:	4013      	ands	r3, r2
 8017b78:	0019      	movs	r1, r3
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	430a      	orrs	r2, r1
 8017b84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b8a:	2220      	movs	r2, #32
 8017b8c:	4013      	ands	r3, r2
 8017b8e:	d00b      	beq.n	8017ba8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	689b      	ldr	r3, [r3, #8]
 8017b96:	4a25      	ldr	r2, [pc, #148]	@ (8017c2c <UART_AdvFeatureConfig+0x158>)
 8017b98:	4013      	ands	r3, r2
 8017b9a:	0019      	movs	r1, r3
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	430a      	orrs	r2, r1
 8017ba6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017bac:	2240      	movs	r2, #64	@ 0x40
 8017bae:	4013      	ands	r3, r2
 8017bb0:	d01d      	beq.n	8017bee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	685b      	ldr	r3, [r3, #4]
 8017bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8017c30 <UART_AdvFeatureConfig+0x15c>)
 8017bba:	4013      	ands	r3, r2
 8017bbc:	0019      	movs	r1, r3
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	430a      	orrs	r2, r1
 8017bc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017bce:	2380      	movs	r3, #128	@ 0x80
 8017bd0:	035b      	lsls	r3, r3, #13
 8017bd2:	429a      	cmp	r2, r3
 8017bd4:	d10b      	bne.n	8017bee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	685b      	ldr	r3, [r3, #4]
 8017bdc:	4a15      	ldr	r2, [pc, #84]	@ (8017c34 <UART_AdvFeatureConfig+0x160>)
 8017bde:	4013      	ands	r3, r2
 8017be0:	0019      	movs	r1, r3
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	430a      	orrs	r2, r1
 8017bec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017bf2:	2280      	movs	r2, #128	@ 0x80
 8017bf4:	4013      	ands	r3, r2
 8017bf6:	d00b      	beq.n	8017c10 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	685b      	ldr	r3, [r3, #4]
 8017bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8017c38 <UART_AdvFeatureConfig+0x164>)
 8017c00:	4013      	ands	r3, r2
 8017c02:	0019      	movs	r1, r3
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	430a      	orrs	r2, r1
 8017c0e:	605a      	str	r2, [r3, #4]
  }
}
 8017c10:	46c0      	nop			@ (mov r8, r8)
 8017c12:	46bd      	mov	sp, r7
 8017c14:	b002      	add	sp, #8
 8017c16:	bd80      	pop	{r7, pc}
 8017c18:	fffdffff 	.word	0xfffdffff
 8017c1c:	fffeffff 	.word	0xfffeffff
 8017c20:	fffbffff 	.word	0xfffbffff
 8017c24:	ffff7fff 	.word	0xffff7fff
 8017c28:	ffffefff 	.word	0xffffefff
 8017c2c:	ffffdfff 	.word	0xffffdfff
 8017c30:	ffefffff 	.word	0xffefffff
 8017c34:	ff9fffff 	.word	0xff9fffff
 8017c38:	fff7ffff 	.word	0xfff7ffff

08017c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8017c3c:	b580      	push	{r7, lr}
 8017c3e:	b092      	sub	sp, #72	@ 0x48
 8017c40:	af02      	add	r7, sp, #8
 8017c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	2284      	movs	r2, #132	@ 0x84
 8017c48:	2100      	movs	r1, #0
 8017c4a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8017c4c:	f7f6 fd20 	bl	800e690 <HAL_GetTick>
 8017c50:	0003      	movs	r3, r0
 8017c52:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	2208      	movs	r2, #8
 8017c5c:	4013      	ands	r3, r2
 8017c5e:	2b08      	cmp	r3, #8
 8017c60:	d12c      	bne.n	8017cbc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017c64:	2280      	movs	r2, #128	@ 0x80
 8017c66:	0391      	lsls	r1, r2, #14
 8017c68:	6878      	ldr	r0, [r7, #4]
 8017c6a:	4a46      	ldr	r2, [pc, #280]	@ (8017d84 <UART_CheckIdleState+0x148>)
 8017c6c:	9200      	str	r2, [sp, #0]
 8017c6e:	2200      	movs	r2, #0
 8017c70:	f000 f88c 	bl	8017d8c <UART_WaitOnFlagUntilTimeout>
 8017c74:	1e03      	subs	r3, r0, #0
 8017c76:	d021      	beq.n	8017cbc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017c78:	f3ef 8310 	mrs	r3, PRIMASK
 8017c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8017c80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017c82:	2301      	movs	r3, #1
 8017c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c88:	f383 8810 	msr	PRIMASK, r3
}
 8017c8c:	46c0      	nop			@ (mov r8, r8)
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	681a      	ldr	r2, [r3, #0]
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	2180      	movs	r1, #128	@ 0x80
 8017c9a:	438a      	bics	r2, r1
 8017c9c:	601a      	str	r2, [r3, #0]
 8017c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ca4:	f383 8810 	msr	PRIMASK, r3
}
 8017ca8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	2220      	movs	r2, #32
 8017cae:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	2278      	movs	r2, #120	@ 0x78
 8017cb4:	2100      	movs	r1, #0
 8017cb6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017cb8:	2303      	movs	r3, #3
 8017cba:	e05f      	b.n	8017d7c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	2204      	movs	r2, #4
 8017cc4:	4013      	ands	r3, r2
 8017cc6:	2b04      	cmp	r3, #4
 8017cc8:	d146      	bne.n	8017d58 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017ccc:	2280      	movs	r2, #128	@ 0x80
 8017cce:	03d1      	lsls	r1, r2, #15
 8017cd0:	6878      	ldr	r0, [r7, #4]
 8017cd2:	4a2c      	ldr	r2, [pc, #176]	@ (8017d84 <UART_CheckIdleState+0x148>)
 8017cd4:	9200      	str	r2, [sp, #0]
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	f000 f858 	bl	8017d8c <UART_WaitOnFlagUntilTimeout>
 8017cdc:	1e03      	subs	r3, r0, #0
 8017cde:	d03b      	beq.n	8017d58 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8017ce4:	60fb      	str	r3, [r7, #12]
  return(result);
 8017ce6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8017cea:	2301      	movs	r3, #1
 8017cec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017cee:	693b      	ldr	r3, [r7, #16]
 8017cf0:	f383 8810 	msr	PRIMASK, r3
}
 8017cf4:	46c0      	nop			@ (mov r8, r8)
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	681a      	ldr	r2, [r3, #0]
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	4921      	ldr	r1, [pc, #132]	@ (8017d88 <UART_CheckIdleState+0x14c>)
 8017d02:	400a      	ands	r2, r1
 8017d04:	601a      	str	r2, [r3, #0]
 8017d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d0a:	697b      	ldr	r3, [r7, #20]
 8017d0c:	f383 8810 	msr	PRIMASK, r3
}
 8017d10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d12:	f3ef 8310 	mrs	r3, PRIMASK
 8017d16:	61bb      	str	r3, [r7, #24]
  return(result);
 8017d18:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017d1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8017d1c:	2301      	movs	r3, #1
 8017d1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d20:	69fb      	ldr	r3, [r7, #28]
 8017d22:	f383 8810 	msr	PRIMASK, r3
}
 8017d26:	46c0      	nop			@ (mov r8, r8)
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	689a      	ldr	r2, [r3, #8]
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	2101      	movs	r1, #1
 8017d34:	438a      	bics	r2, r1
 8017d36:	609a      	str	r2, [r3, #8]
 8017d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d3c:	6a3b      	ldr	r3, [r7, #32]
 8017d3e:	f383 8810 	msr	PRIMASK, r3
}
 8017d42:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	2280      	movs	r2, #128	@ 0x80
 8017d48:	2120      	movs	r1, #32
 8017d4a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	2278      	movs	r2, #120	@ 0x78
 8017d50:	2100      	movs	r1, #0
 8017d52:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017d54:	2303      	movs	r3, #3
 8017d56:	e011      	b.n	8017d7c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	2220      	movs	r2, #32
 8017d5c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	2280      	movs	r2, #128	@ 0x80
 8017d62:	2120      	movs	r1, #32
 8017d64:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	2200      	movs	r2, #0
 8017d6a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	2200      	movs	r2, #0
 8017d70:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	2278      	movs	r2, #120	@ 0x78
 8017d76:	2100      	movs	r1, #0
 8017d78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017d7a:	2300      	movs	r3, #0
}
 8017d7c:	0018      	movs	r0, r3
 8017d7e:	46bd      	mov	sp, r7
 8017d80:	b010      	add	sp, #64	@ 0x40
 8017d82:	bd80      	pop	{r7, pc}
 8017d84:	01ffffff 	.word	0x01ffffff
 8017d88:	fffffedf 	.word	0xfffffedf

08017d8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b084      	sub	sp, #16
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	60f8      	str	r0, [r7, #12]
 8017d94:	60b9      	str	r1, [r7, #8]
 8017d96:	603b      	str	r3, [r7, #0]
 8017d98:	1dfb      	adds	r3, r7, #7
 8017d9a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017d9c:	e04b      	b.n	8017e36 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017d9e:	69bb      	ldr	r3, [r7, #24]
 8017da0:	3301      	adds	r3, #1
 8017da2:	d048      	beq.n	8017e36 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017da4:	f7f6 fc74 	bl	800e690 <HAL_GetTick>
 8017da8:	0002      	movs	r2, r0
 8017daa:	683b      	ldr	r3, [r7, #0]
 8017dac:	1ad3      	subs	r3, r2, r3
 8017dae:	69ba      	ldr	r2, [r7, #24]
 8017db0:	429a      	cmp	r2, r3
 8017db2:	d302      	bcc.n	8017dba <UART_WaitOnFlagUntilTimeout+0x2e>
 8017db4:	69bb      	ldr	r3, [r7, #24]
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d101      	bne.n	8017dbe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8017dba:	2303      	movs	r3, #3
 8017dbc:	e04b      	b.n	8017e56 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	2204      	movs	r2, #4
 8017dc6:	4013      	ands	r3, r2
 8017dc8:	d035      	beq.n	8017e36 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	69db      	ldr	r3, [r3, #28]
 8017dd0:	2208      	movs	r2, #8
 8017dd2:	4013      	ands	r3, r2
 8017dd4:	2b08      	cmp	r3, #8
 8017dd6:	d111      	bne.n	8017dfc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	2208      	movs	r2, #8
 8017dde:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	0018      	movs	r0, r3
 8017de4:	f000 f9ca 	bl	801817c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	2284      	movs	r2, #132	@ 0x84
 8017dec:	2108      	movs	r1, #8
 8017dee:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	2278      	movs	r2, #120	@ 0x78
 8017df4:	2100      	movs	r1, #0
 8017df6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8017df8:	2301      	movs	r3, #1
 8017dfa:	e02c      	b.n	8017e56 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	69da      	ldr	r2, [r3, #28]
 8017e02:	2380      	movs	r3, #128	@ 0x80
 8017e04:	011b      	lsls	r3, r3, #4
 8017e06:	401a      	ands	r2, r3
 8017e08:	2380      	movs	r3, #128	@ 0x80
 8017e0a:	011b      	lsls	r3, r3, #4
 8017e0c:	429a      	cmp	r2, r3
 8017e0e:	d112      	bne.n	8017e36 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	2280      	movs	r2, #128	@ 0x80
 8017e16:	0112      	lsls	r2, r2, #4
 8017e18:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	0018      	movs	r0, r3
 8017e1e:	f000 f9ad 	bl	801817c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	2284      	movs	r2, #132	@ 0x84
 8017e26:	2120      	movs	r1, #32
 8017e28:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	2278      	movs	r2, #120	@ 0x78
 8017e2e:	2100      	movs	r1, #0
 8017e30:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8017e32:	2303      	movs	r3, #3
 8017e34:	e00f      	b.n	8017e56 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	69db      	ldr	r3, [r3, #28]
 8017e3c:	68ba      	ldr	r2, [r7, #8]
 8017e3e:	4013      	ands	r3, r2
 8017e40:	68ba      	ldr	r2, [r7, #8]
 8017e42:	1ad3      	subs	r3, r2, r3
 8017e44:	425a      	negs	r2, r3
 8017e46:	4153      	adcs	r3, r2
 8017e48:	b2db      	uxtb	r3, r3
 8017e4a:	001a      	movs	r2, r3
 8017e4c:	1dfb      	adds	r3, r7, #7
 8017e4e:	781b      	ldrb	r3, [r3, #0]
 8017e50:	429a      	cmp	r2, r3
 8017e52:	d0a4      	beq.n	8017d9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017e54:	2300      	movs	r3, #0
}
 8017e56:	0018      	movs	r0, r3
 8017e58:	46bd      	mov	sp, r7
 8017e5a:	b004      	add	sp, #16
 8017e5c:	bd80      	pop	{r7, pc}
	...

08017e60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b090      	sub	sp, #64	@ 0x40
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	60f8      	str	r0, [r7, #12]
 8017e68:	60b9      	str	r1, [r7, #8]
 8017e6a:	1dbb      	adds	r3, r7, #6
 8017e6c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	68ba      	ldr	r2, [r7, #8]
 8017e72:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	1dba      	adds	r2, r7, #6
 8017e78:	2158      	movs	r1, #88	@ 0x58
 8017e7a:	8812      	ldrh	r2, [r2, #0]
 8017e7c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	1dba      	adds	r2, r7, #6
 8017e82:	215a      	movs	r1, #90	@ 0x5a
 8017e84:	8812      	ldrh	r2, [r2, #0]
 8017e86:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	689a      	ldr	r2, [r3, #8]
 8017e92:	2380      	movs	r3, #128	@ 0x80
 8017e94:	015b      	lsls	r3, r3, #5
 8017e96:	429a      	cmp	r2, r3
 8017e98:	d10d      	bne.n	8017eb6 <UART_Start_Receive_IT+0x56>
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	691b      	ldr	r3, [r3, #16]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d104      	bne.n	8017eac <UART_Start_Receive_IT+0x4c>
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	225c      	movs	r2, #92	@ 0x5c
 8017ea6:	4950      	ldr	r1, [pc, #320]	@ (8017fe8 <UART_Start_Receive_IT+0x188>)
 8017ea8:	5299      	strh	r1, [r3, r2]
 8017eaa:	e02e      	b.n	8017f0a <UART_Start_Receive_IT+0xaa>
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	225c      	movs	r2, #92	@ 0x5c
 8017eb0:	21ff      	movs	r1, #255	@ 0xff
 8017eb2:	5299      	strh	r1, [r3, r2]
 8017eb4:	e029      	b.n	8017f0a <UART_Start_Receive_IT+0xaa>
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	689b      	ldr	r3, [r3, #8]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d10d      	bne.n	8017eda <UART_Start_Receive_IT+0x7a>
 8017ebe:	68fb      	ldr	r3, [r7, #12]
 8017ec0:	691b      	ldr	r3, [r3, #16]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d104      	bne.n	8017ed0 <UART_Start_Receive_IT+0x70>
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	225c      	movs	r2, #92	@ 0x5c
 8017eca:	21ff      	movs	r1, #255	@ 0xff
 8017ecc:	5299      	strh	r1, [r3, r2]
 8017ece:	e01c      	b.n	8017f0a <UART_Start_Receive_IT+0xaa>
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	225c      	movs	r2, #92	@ 0x5c
 8017ed4:	217f      	movs	r1, #127	@ 0x7f
 8017ed6:	5299      	strh	r1, [r3, r2]
 8017ed8:	e017      	b.n	8017f0a <UART_Start_Receive_IT+0xaa>
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	689a      	ldr	r2, [r3, #8]
 8017ede:	2380      	movs	r3, #128	@ 0x80
 8017ee0:	055b      	lsls	r3, r3, #21
 8017ee2:	429a      	cmp	r2, r3
 8017ee4:	d10d      	bne.n	8017f02 <UART_Start_Receive_IT+0xa2>
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	691b      	ldr	r3, [r3, #16]
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d104      	bne.n	8017ef8 <UART_Start_Receive_IT+0x98>
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	225c      	movs	r2, #92	@ 0x5c
 8017ef2:	217f      	movs	r1, #127	@ 0x7f
 8017ef4:	5299      	strh	r1, [r3, r2]
 8017ef6:	e008      	b.n	8017f0a <UART_Start_Receive_IT+0xaa>
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	225c      	movs	r2, #92	@ 0x5c
 8017efc:	213f      	movs	r1, #63	@ 0x3f
 8017efe:	5299      	strh	r1, [r3, r2]
 8017f00:	e003      	b.n	8017f0a <UART_Start_Receive_IT+0xaa>
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	225c      	movs	r2, #92	@ 0x5c
 8017f06:	2100      	movs	r1, #0
 8017f08:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	2284      	movs	r2, #132	@ 0x84
 8017f0e:	2100      	movs	r1, #0
 8017f10:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	2280      	movs	r2, #128	@ 0x80
 8017f16:	2122      	movs	r1, #34	@ 0x22
 8017f18:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8017f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8017f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017f24:	2301      	movs	r3, #1
 8017f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f2a:	f383 8810 	msr	PRIMASK, r3
}
 8017f2e:	46c0      	nop			@ (mov r8, r8)
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	689a      	ldr	r2, [r3, #8]
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	2101      	movs	r1, #1
 8017f3c:	430a      	orrs	r2, r1
 8017f3e:	609a      	str	r2, [r3, #8]
 8017f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f42:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f46:	f383 8810 	msr	PRIMASK, r3
}
 8017f4a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	689a      	ldr	r2, [r3, #8]
 8017f50:	2380      	movs	r3, #128	@ 0x80
 8017f52:	015b      	lsls	r3, r3, #5
 8017f54:	429a      	cmp	r2, r3
 8017f56:	d107      	bne.n	8017f68 <UART_Start_Receive_IT+0x108>
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	691b      	ldr	r3, [r3, #16]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d103      	bne.n	8017f68 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	4a22      	ldr	r2, [pc, #136]	@ (8017fec <UART_Start_Receive_IT+0x18c>)
 8017f64:	669a      	str	r2, [r3, #104]	@ 0x68
 8017f66:	e002      	b.n	8017f6e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	4a21      	ldr	r2, [pc, #132]	@ (8017ff0 <UART_Start_Receive_IT+0x190>)
 8017f6c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	691b      	ldr	r3, [r3, #16]
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d019      	beq.n	8017faa <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017f76:	f3ef 8310 	mrs	r3, PRIMASK
 8017f7a:	61fb      	str	r3, [r7, #28]
  return(result);
 8017f7c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8017f7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017f80:	2301      	movs	r3, #1
 8017f82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f84:	6a3b      	ldr	r3, [r7, #32]
 8017f86:	f383 8810 	msr	PRIMASK, r3
}
 8017f8a:	46c0      	nop			@ (mov r8, r8)
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	681a      	ldr	r2, [r3, #0]
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	2190      	movs	r1, #144	@ 0x90
 8017f98:	0049      	lsls	r1, r1, #1
 8017f9a:	430a      	orrs	r2, r1
 8017f9c:	601a      	str	r2, [r3, #0]
 8017f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fa4:	f383 8810 	msr	PRIMASK, r3
}
 8017fa8:	e018      	b.n	8017fdc <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017faa:	f3ef 8310 	mrs	r3, PRIMASK
 8017fae:	613b      	str	r3, [r7, #16]
  return(result);
 8017fb0:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8017fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017fb4:	2301      	movs	r3, #1
 8017fb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fb8:	697b      	ldr	r3, [r7, #20]
 8017fba:	f383 8810 	msr	PRIMASK, r3
}
 8017fbe:	46c0      	nop			@ (mov r8, r8)
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	681a      	ldr	r2, [r3, #0]
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	2120      	movs	r1, #32
 8017fcc:	430a      	orrs	r2, r1
 8017fce:	601a      	str	r2, [r3, #0]
 8017fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fd2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fd4:	69bb      	ldr	r3, [r7, #24]
 8017fd6:	f383 8810 	msr	PRIMASK, r3
}
 8017fda:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8017fdc:	2300      	movs	r3, #0
}
 8017fde:	0018      	movs	r0, r3
 8017fe0:	46bd      	mov	sp, r7
 8017fe2:	b010      	add	sp, #64	@ 0x40
 8017fe4:	bd80      	pop	{r7, pc}
 8017fe6:	46c0      	nop			@ (mov r8, r8)
 8017fe8:	000001ff 	.word	0x000001ff
 8017fec:	08018761 	.word	0x08018761
 8017ff0:	08018595 	.word	0x08018595

08017ff4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b090      	sub	sp, #64	@ 0x40
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	60f8      	str	r0, [r7, #12]
 8017ffc:	60b9      	str	r1, [r7, #8]
 8017ffe:	1dbb      	adds	r3, r7, #6
 8018000:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	68ba      	ldr	r2, [r7, #8]
 8018006:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	1dba      	adds	r2, r7, #6
 801800c:	2158      	movs	r1, #88	@ 0x58
 801800e:	8812      	ldrh	r2, [r2, #0]
 8018010:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	2284      	movs	r2, #132	@ 0x84
 8018016:	2100      	movs	r1, #0
 8018018:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	2280      	movs	r2, #128	@ 0x80
 801801e:	2122      	movs	r1, #34	@ 0x22
 8018020:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018026:	2b00      	cmp	r3, #0
 8018028:	d028      	beq.n	801807c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801802e:	4a3e      	ldr	r2, [pc, #248]	@ (8018128 <UART_Start_Receive_DMA+0x134>)
 8018030:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018036:	4a3d      	ldr	r2, [pc, #244]	@ (801812c <UART_Start_Receive_DMA+0x138>)
 8018038:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801803e:	4a3c      	ldr	r2, [pc, #240]	@ (8018130 <UART_Start_Receive_DMA+0x13c>)
 8018040:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018046:	2200      	movs	r2, #0
 8018048:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	3324      	adds	r3, #36	@ 0x24
 8018054:	0019      	movs	r1, r3
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801805a:	001a      	movs	r2, r3
 801805c:	1dbb      	adds	r3, r7, #6
 801805e:	881b      	ldrh	r3, [r3, #0]
 8018060:	f7f7 f868 	bl	800f134 <HAL_DMA_Start_IT>
 8018064:	1e03      	subs	r3, r0, #0
 8018066:	d009      	beq.n	801807c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	2284      	movs	r2, #132	@ 0x84
 801806c:	2110      	movs	r1, #16
 801806e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	2280      	movs	r2, #128	@ 0x80
 8018074:	2120      	movs	r1, #32
 8018076:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8018078:	2301      	movs	r3, #1
 801807a:	e050      	b.n	801811e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801807c:	68fb      	ldr	r3, [r7, #12]
 801807e:	691b      	ldr	r3, [r3, #16]
 8018080:	2b00      	cmp	r3, #0
 8018082:	d019      	beq.n	80180b8 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018084:	f3ef 8310 	mrs	r3, PRIMASK
 8018088:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801808a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801808c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801808e:	2301      	movs	r3, #1
 8018090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018094:	f383 8810 	msr	PRIMASK, r3
}
 8018098:	46c0      	nop			@ (mov r8, r8)
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	681a      	ldr	r2, [r3, #0]
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	2180      	movs	r1, #128	@ 0x80
 80180a6:	0049      	lsls	r1, r1, #1
 80180a8:	430a      	orrs	r2, r1
 80180aa:	601a      	str	r2, [r3, #0]
 80180ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180ae:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80180b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180b2:	f383 8810 	msr	PRIMASK, r3
}
 80180b6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80180b8:	f3ef 8310 	mrs	r3, PRIMASK
 80180bc:	613b      	str	r3, [r7, #16]
  return(result);
 80180be:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80180c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80180c2:	2301      	movs	r3, #1
 80180c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80180c6:	697b      	ldr	r3, [r7, #20]
 80180c8:	f383 8810 	msr	PRIMASK, r3
}
 80180cc:	46c0      	nop			@ (mov r8, r8)
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	689a      	ldr	r2, [r3, #8]
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	2101      	movs	r1, #1
 80180da:	430a      	orrs	r2, r1
 80180dc:	609a      	str	r2, [r3, #8]
 80180de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80180e2:	69bb      	ldr	r3, [r7, #24]
 80180e4:	f383 8810 	msr	PRIMASK, r3
}
 80180e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80180ea:	f3ef 8310 	mrs	r3, PRIMASK
 80180ee:	61fb      	str	r3, [r7, #28]
  return(result);
 80180f0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80180f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80180f4:	2301      	movs	r3, #1
 80180f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80180f8:	6a3b      	ldr	r3, [r7, #32]
 80180fa:	f383 8810 	msr	PRIMASK, r3
}
 80180fe:	46c0      	nop			@ (mov r8, r8)
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	689a      	ldr	r2, [r3, #8]
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	2140      	movs	r1, #64	@ 0x40
 801810c:	430a      	orrs	r2, r1
 801810e:	609a      	str	r2, [r3, #8]
 8018110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018112:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018116:	f383 8810 	msr	PRIMASK, r3
}
 801811a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801811c:	2300      	movs	r3, #0
}
 801811e:	0018      	movs	r0, r3
 8018120:	46bd      	mov	sp, r7
 8018122:	b010      	add	sp, #64	@ 0x40
 8018124:	bd80      	pop	{r7, pc}
 8018126:	46c0      	nop			@ (mov r8, r8)
 8018128:	08018305 	.word	0x08018305
 801812c:	08018439 	.word	0x08018439
 8018130:	08018481 	.word	0x08018481

08018134 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8018134:	b580      	push	{r7, lr}
 8018136:	b086      	sub	sp, #24
 8018138:	af00      	add	r7, sp, #0
 801813a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801813c:	f3ef 8310 	mrs	r3, PRIMASK
 8018140:	60bb      	str	r3, [r7, #8]
  return(result);
 8018142:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8018144:	617b      	str	r3, [r7, #20]
 8018146:	2301      	movs	r3, #1
 8018148:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	f383 8810 	msr	PRIMASK, r3
}
 8018150:	46c0      	nop			@ (mov r8, r8)
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	681a      	ldr	r2, [r3, #0]
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	21c0      	movs	r1, #192	@ 0xc0
 801815e:	438a      	bics	r2, r1
 8018160:	601a      	str	r2, [r3, #0]
 8018162:	697b      	ldr	r3, [r7, #20]
 8018164:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018166:	693b      	ldr	r3, [r7, #16]
 8018168:	f383 8810 	msr	PRIMASK, r3
}
 801816c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	2220      	movs	r2, #32
 8018172:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8018174:	46c0      	nop			@ (mov r8, r8)
 8018176:	46bd      	mov	sp, r7
 8018178:	b006      	add	sp, #24
 801817a:	bd80      	pop	{r7, pc}

0801817c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801817c:	b580      	push	{r7, lr}
 801817e:	b08e      	sub	sp, #56	@ 0x38
 8018180:	af00      	add	r7, sp, #0
 8018182:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018184:	f3ef 8310 	mrs	r3, PRIMASK
 8018188:	617b      	str	r3, [r7, #20]
  return(result);
 801818a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801818c:	637b      	str	r3, [r7, #52]	@ 0x34
 801818e:	2301      	movs	r3, #1
 8018190:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018192:	69bb      	ldr	r3, [r7, #24]
 8018194:	f383 8810 	msr	PRIMASK, r3
}
 8018198:	46c0      	nop			@ (mov r8, r8)
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	681a      	ldr	r2, [r3, #0]
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	681b      	ldr	r3, [r3, #0]
 80181a4:	4926      	ldr	r1, [pc, #152]	@ (8018240 <UART_EndRxTransfer+0xc4>)
 80181a6:	400a      	ands	r2, r1
 80181a8:	601a      	str	r2, [r3, #0]
 80181aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80181ae:	69fb      	ldr	r3, [r7, #28]
 80181b0:	f383 8810 	msr	PRIMASK, r3
}
 80181b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80181b6:	f3ef 8310 	mrs	r3, PRIMASK
 80181ba:	623b      	str	r3, [r7, #32]
  return(result);
 80181bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80181be:	633b      	str	r3, [r7, #48]	@ 0x30
 80181c0:	2301      	movs	r3, #1
 80181c2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80181c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181c6:	f383 8810 	msr	PRIMASK, r3
}
 80181ca:	46c0      	nop			@ (mov r8, r8)
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	689a      	ldr	r2, [r3, #8]
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	681b      	ldr	r3, [r3, #0]
 80181d6:	2101      	movs	r1, #1
 80181d8:	438a      	bics	r2, r1
 80181da:	609a      	str	r2, [r3, #8]
 80181dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181de:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80181e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181e2:	f383 8810 	msr	PRIMASK, r3
}
 80181e6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80181ec:	2b01      	cmp	r3, #1
 80181ee:	d118      	bne.n	8018222 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80181f0:	f3ef 8310 	mrs	r3, PRIMASK
 80181f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80181f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80181f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80181fa:	2301      	movs	r3, #1
 80181fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	f383 8810 	msr	PRIMASK, r3
}
 8018204:	46c0      	nop			@ (mov r8, r8)
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	681a      	ldr	r2, [r3, #0]
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	2110      	movs	r1, #16
 8018212:	438a      	bics	r2, r1
 8018214:	601a      	str	r2, [r3, #0]
 8018216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018218:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801821a:	693b      	ldr	r3, [r7, #16]
 801821c:	f383 8810 	msr	PRIMASK, r3
}
 8018220:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	2280      	movs	r2, #128	@ 0x80
 8018226:	2120      	movs	r1, #32
 8018228:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	2200      	movs	r2, #0
 801822e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	2200      	movs	r2, #0
 8018234:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8018236:	46c0      	nop			@ (mov r8, r8)
 8018238:	46bd      	mov	sp, r7
 801823a:	b00e      	add	sp, #56	@ 0x38
 801823c:	bd80      	pop	{r7, pc}
 801823e:	46c0      	nop			@ (mov r8, r8)
 8018240:	fffffedf 	.word	0xfffffedf

08018244 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018244:	b580      	push	{r7, lr}
 8018246:	b08c      	sub	sp, #48	@ 0x30
 8018248:	af00      	add	r7, sp, #0
 801824a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018250:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	2220      	movs	r2, #32
 801825a:	4013      	ands	r3, r2
 801825c:	d135      	bne.n	80182ca <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801825e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018260:	2252      	movs	r2, #82	@ 0x52
 8018262:	2100      	movs	r1, #0
 8018264:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018266:	f3ef 8310 	mrs	r3, PRIMASK
 801826a:	60fb      	str	r3, [r7, #12]
  return(result);
 801826c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801826e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018270:	2301      	movs	r3, #1
 8018272:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018274:	693b      	ldr	r3, [r7, #16]
 8018276:	f383 8810 	msr	PRIMASK, r3
}
 801827a:	46c0      	nop			@ (mov r8, r8)
 801827c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	689a      	ldr	r2, [r3, #8]
 8018282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	2180      	movs	r1, #128	@ 0x80
 8018288:	438a      	bics	r2, r1
 801828a:	609a      	str	r2, [r3, #8]
 801828c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801828e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018290:	697b      	ldr	r3, [r7, #20]
 8018292:	f383 8810 	msr	PRIMASK, r3
}
 8018296:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018298:	f3ef 8310 	mrs	r3, PRIMASK
 801829c:	61bb      	str	r3, [r7, #24]
  return(result);
 801829e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80182a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80182a2:	2301      	movs	r3, #1
 80182a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182a6:	69fb      	ldr	r3, [r7, #28]
 80182a8:	f383 8810 	msr	PRIMASK, r3
}
 80182ac:	46c0      	nop			@ (mov r8, r8)
 80182ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	681a      	ldr	r2, [r3, #0]
 80182b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	2140      	movs	r1, #64	@ 0x40
 80182ba:	430a      	orrs	r2, r1
 80182bc:	601a      	str	r2, [r3, #0]
 80182be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182c2:	6a3b      	ldr	r3, [r7, #32]
 80182c4:	f383 8810 	msr	PRIMASK, r3
}
 80182c8:	e006      	b.n	80182d8 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 80182ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182cc:	228c      	movs	r2, #140	@ 0x8c
 80182ce:	589b      	ldr	r3, [r3, r2]
 80182d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80182d2:	0010      	movs	r0, r2
 80182d4:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80182d6:	46c0      	nop			@ (mov r8, r8)
 80182d8:	46c0      	nop			@ (mov r8, r8)
 80182da:	46bd      	mov	sp, r7
 80182dc:	b00c      	add	sp, #48	@ 0x30
 80182de:	bd80      	pop	{r7, pc}

080182e0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80182e0:	b580      	push	{r7, lr}
 80182e2:	b084      	sub	sp, #16
 80182e4:	af00      	add	r7, sp, #0
 80182e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80182ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	2288      	movs	r2, #136	@ 0x88
 80182f2:	589b      	ldr	r3, [r3, r2]
 80182f4:	68fa      	ldr	r2, [r7, #12]
 80182f6:	0010      	movs	r0, r2
 80182f8:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80182fa:	46c0      	nop			@ (mov r8, r8)
 80182fc:	46bd      	mov	sp, r7
 80182fe:	b004      	add	sp, #16
 8018300:	bd80      	pop	{r7, pc}
	...

08018304 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8018304:	b580      	push	{r7, lr}
 8018306:	b094      	sub	sp, #80	@ 0x50
 8018308:	af00      	add	r7, sp, #0
 801830a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018310:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	2220      	movs	r2, #32
 801831a:	4013      	ands	r3, r2
 801831c:	d16f      	bne.n	80183fe <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801831e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018320:	225a      	movs	r2, #90	@ 0x5a
 8018322:	2100      	movs	r1, #0
 8018324:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018326:	f3ef 8310 	mrs	r3, PRIMASK
 801832a:	61bb      	str	r3, [r7, #24]
  return(result);
 801832c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801832e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018330:	2301      	movs	r3, #1
 8018332:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018334:	69fb      	ldr	r3, [r7, #28]
 8018336:	f383 8810 	msr	PRIMASK, r3
}
 801833a:	46c0      	nop			@ (mov r8, r8)
 801833c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	681a      	ldr	r2, [r3, #0]
 8018342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	493b      	ldr	r1, [pc, #236]	@ (8018434 <UART_DMAReceiveCplt+0x130>)
 8018348:	400a      	ands	r2, r1
 801834a:	601a      	str	r2, [r3, #0]
 801834c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801834e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018350:	6a3b      	ldr	r3, [r7, #32]
 8018352:	f383 8810 	msr	PRIMASK, r3
}
 8018356:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018358:	f3ef 8310 	mrs	r3, PRIMASK
 801835c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801835e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018360:	647b      	str	r3, [r7, #68]	@ 0x44
 8018362:	2301      	movs	r3, #1
 8018364:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018368:	f383 8810 	msr	PRIMASK, r3
}
 801836c:	46c0      	nop			@ (mov r8, r8)
 801836e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	689a      	ldr	r2, [r3, #8]
 8018374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	2101      	movs	r1, #1
 801837a:	438a      	bics	r2, r1
 801837c:	609a      	str	r2, [r3, #8]
 801837e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018380:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018384:	f383 8810 	msr	PRIMASK, r3
}
 8018388:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801838a:	f3ef 8310 	mrs	r3, PRIMASK
 801838e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018392:	643b      	str	r3, [r7, #64]	@ 0x40
 8018394:	2301      	movs	r3, #1
 8018396:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801839a:	f383 8810 	msr	PRIMASK, r3
}
 801839e:	46c0      	nop			@ (mov r8, r8)
 80183a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	689a      	ldr	r2, [r3, #8]
 80183a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	2140      	movs	r1, #64	@ 0x40
 80183ac:	438a      	bics	r2, r1
 80183ae:	609a      	str	r2, [r3, #8]
 80183b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80183b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183b6:	f383 8810 	msr	PRIMASK, r3
}
 80183ba:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80183bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80183be:	2280      	movs	r2, #128	@ 0x80
 80183c0:	2120      	movs	r1, #32
 80183c2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80183c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80183c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80183c8:	2b01      	cmp	r3, #1
 80183ca:	d118      	bne.n	80183fe <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80183cc:	f3ef 8310 	mrs	r3, PRIMASK
 80183d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80183d2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80183d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80183d6:	2301      	movs	r3, #1
 80183d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183da:	693b      	ldr	r3, [r7, #16]
 80183dc:	f383 8810 	msr	PRIMASK, r3
}
 80183e0:	46c0      	nop			@ (mov r8, r8)
 80183e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	681a      	ldr	r2, [r3, #0]
 80183e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	2110      	movs	r1, #16
 80183ee:	438a      	bics	r2, r1
 80183f0:	601a      	str	r2, [r3, #0]
 80183f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80183f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183f6:	697b      	ldr	r3, [r7, #20]
 80183f8:	f383 8810 	msr	PRIMASK, r3
}
 80183fc:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80183fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018400:	2200      	movs	r2, #0
 8018402:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018408:	2b01      	cmp	r3, #1
 801840a:	d109      	bne.n	8018420 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801840c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801840e:	22ac      	movs	r2, #172	@ 0xac
 8018410:	589b      	ldr	r3, [r3, r2]
 8018412:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018414:	2158      	movs	r1, #88	@ 0x58
 8018416:	5a51      	ldrh	r1, [r2, r1]
 8018418:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801841a:	0010      	movs	r0, r2
 801841c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801841e:	e005      	b.n	801842c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8018420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018422:	2294      	movs	r2, #148	@ 0x94
 8018424:	589b      	ldr	r3, [r3, r2]
 8018426:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018428:	0010      	movs	r0, r2
 801842a:	4798      	blx	r3
}
 801842c:	46c0      	nop			@ (mov r8, r8)
 801842e:	46bd      	mov	sp, r7
 8018430:	b014      	add	sp, #80	@ 0x50
 8018432:	bd80      	pop	{r7, pc}
 8018434:	fffffeff 	.word	0xfffffeff

08018438 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b084      	sub	sp, #16
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018444:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8018446:	68fb      	ldr	r3, [r7, #12]
 8018448:	2201      	movs	r2, #1
 801844a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018450:	2b01      	cmp	r3, #1
 8018452:	d10b      	bne.n	801846c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	22ac      	movs	r2, #172	@ 0xac
 8018458:	589b      	ldr	r3, [r3, r2]
 801845a:	68fa      	ldr	r2, [r7, #12]
 801845c:	2158      	movs	r1, #88	@ 0x58
 801845e:	5a52      	ldrh	r2, [r2, r1]
 8018460:	0852      	lsrs	r2, r2, #1
 8018462:	b291      	uxth	r1, r2
 8018464:	68fa      	ldr	r2, [r7, #12]
 8018466:	0010      	movs	r0, r2
 8018468:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801846a:	e005      	b.n	8018478 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	2290      	movs	r2, #144	@ 0x90
 8018470:	589b      	ldr	r3, [r3, r2]
 8018472:	68fa      	ldr	r2, [r7, #12]
 8018474:	0010      	movs	r0, r2
 8018476:	4798      	blx	r3
}
 8018478:	46c0      	nop			@ (mov r8, r8)
 801847a:	46bd      	mov	sp, r7
 801847c:	b004      	add	sp, #16
 801847e:	bd80      	pop	{r7, pc}

08018480 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8018480:	b580      	push	{r7, lr}
 8018482:	b086      	sub	sp, #24
 8018484:	af00      	add	r7, sp, #0
 8018486:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801848c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801848e:	697b      	ldr	r3, [r7, #20]
 8018490:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018492:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8018494:	697b      	ldr	r3, [r7, #20]
 8018496:	2280      	movs	r2, #128	@ 0x80
 8018498:	589b      	ldr	r3, [r3, r2]
 801849a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801849c:	697b      	ldr	r3, [r7, #20]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	689b      	ldr	r3, [r3, #8]
 80184a2:	2280      	movs	r2, #128	@ 0x80
 80184a4:	4013      	ands	r3, r2
 80184a6:	2b80      	cmp	r3, #128	@ 0x80
 80184a8:	d10a      	bne.n	80184c0 <UART_DMAError+0x40>
 80184aa:	693b      	ldr	r3, [r7, #16]
 80184ac:	2b21      	cmp	r3, #33	@ 0x21
 80184ae:	d107      	bne.n	80184c0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80184b0:	697b      	ldr	r3, [r7, #20]
 80184b2:	2252      	movs	r2, #82	@ 0x52
 80184b4:	2100      	movs	r1, #0
 80184b6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80184b8:	697b      	ldr	r3, [r7, #20]
 80184ba:	0018      	movs	r0, r3
 80184bc:	f7ff fe3a 	bl	8018134 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80184c0:	697b      	ldr	r3, [r7, #20]
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	689b      	ldr	r3, [r3, #8]
 80184c6:	2240      	movs	r2, #64	@ 0x40
 80184c8:	4013      	ands	r3, r2
 80184ca:	2b40      	cmp	r3, #64	@ 0x40
 80184cc:	d10a      	bne.n	80184e4 <UART_DMAError+0x64>
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	2b22      	cmp	r3, #34	@ 0x22
 80184d2:	d107      	bne.n	80184e4 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80184d4:	697b      	ldr	r3, [r7, #20]
 80184d6:	225a      	movs	r2, #90	@ 0x5a
 80184d8:	2100      	movs	r1, #0
 80184da:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80184dc:	697b      	ldr	r3, [r7, #20]
 80184de:	0018      	movs	r0, r3
 80184e0:	f7ff fe4c 	bl	801817c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80184e4:	697b      	ldr	r3, [r7, #20]
 80184e6:	2284      	movs	r2, #132	@ 0x84
 80184e8:	589b      	ldr	r3, [r3, r2]
 80184ea:	2210      	movs	r2, #16
 80184ec:	431a      	orrs	r2, r3
 80184ee:	697b      	ldr	r3, [r7, #20]
 80184f0:	2184      	movs	r1, #132	@ 0x84
 80184f2:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80184f4:	697b      	ldr	r3, [r7, #20]
 80184f6:	2298      	movs	r2, #152	@ 0x98
 80184f8:	589b      	ldr	r3, [r3, r2]
 80184fa:	697a      	ldr	r2, [r7, #20]
 80184fc:	0010      	movs	r0, r2
 80184fe:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018500:	46c0      	nop			@ (mov r8, r8)
 8018502:	46bd      	mov	sp, r7
 8018504:	b006      	add	sp, #24
 8018506:	bd80      	pop	{r7, pc}

08018508 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018508:	b580      	push	{r7, lr}
 801850a:	b084      	sub	sp, #16
 801850c:	af00      	add	r7, sp, #0
 801850e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018514:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	225a      	movs	r2, #90	@ 0x5a
 801851a:	2100      	movs	r1, #0
 801851c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	2252      	movs	r2, #82	@ 0x52
 8018522:	2100      	movs	r1, #0
 8018524:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	2298      	movs	r2, #152	@ 0x98
 801852a:	589b      	ldr	r3, [r3, r2]
 801852c:	68fa      	ldr	r2, [r7, #12]
 801852e:	0010      	movs	r0, r2
 8018530:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018532:	46c0      	nop			@ (mov r8, r8)
 8018534:	46bd      	mov	sp, r7
 8018536:	b004      	add	sp, #16
 8018538:	bd80      	pop	{r7, pc}

0801853a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801853a:	b580      	push	{r7, lr}
 801853c:	b086      	sub	sp, #24
 801853e:	af00      	add	r7, sp, #0
 8018540:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018542:	f3ef 8310 	mrs	r3, PRIMASK
 8018546:	60bb      	str	r3, [r7, #8]
  return(result);
 8018548:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801854a:	617b      	str	r3, [r7, #20]
 801854c:	2301      	movs	r3, #1
 801854e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	f383 8810 	msr	PRIMASK, r3
}
 8018556:	46c0      	nop			@ (mov r8, r8)
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	681a      	ldr	r2, [r3, #0]
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	2140      	movs	r1, #64	@ 0x40
 8018564:	438a      	bics	r2, r1
 8018566:	601a      	str	r2, [r3, #0]
 8018568:	697b      	ldr	r3, [r7, #20]
 801856a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801856c:	693b      	ldr	r3, [r7, #16]
 801856e:	f383 8810 	msr	PRIMASK, r3
}
 8018572:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	2220      	movs	r2, #32
 8018578:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	2200      	movs	r2, #0
 801857e:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	228c      	movs	r2, #140	@ 0x8c
 8018584:	589b      	ldr	r3, [r3, r2]
 8018586:	687a      	ldr	r2, [r7, #4]
 8018588:	0010      	movs	r0, r2
 801858a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801858c:	46c0      	nop			@ (mov r8, r8)
 801858e:	46bd      	mov	sp, r7
 8018590:	b006      	add	sp, #24
 8018592:	bd80      	pop	{r7, pc}

08018594 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8018594:	b580      	push	{r7, lr}
 8018596:	b094      	sub	sp, #80	@ 0x50
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801859c:	204e      	movs	r0, #78	@ 0x4e
 801859e:	183b      	adds	r3, r7, r0
 80185a0:	687a      	ldr	r2, [r7, #4]
 80185a2:	215c      	movs	r1, #92	@ 0x5c
 80185a4:	5a52      	ldrh	r2, [r2, r1]
 80185a6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	2280      	movs	r2, #128	@ 0x80
 80185ac:	589b      	ldr	r3, [r3, r2]
 80185ae:	2b22      	cmp	r3, #34	@ 0x22
 80185b0:	d000      	beq.n	80185b4 <UART_RxISR_8BIT+0x20>
 80185b2:	e0c2      	b.n	801873a <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80185ba:	214c      	movs	r1, #76	@ 0x4c
 80185bc:	187b      	adds	r3, r7, r1
 80185be:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80185c0:	187b      	adds	r3, r7, r1
 80185c2:	881b      	ldrh	r3, [r3, #0]
 80185c4:	b2da      	uxtb	r2, r3
 80185c6:	183b      	adds	r3, r7, r0
 80185c8:	881b      	ldrh	r3, [r3, #0]
 80185ca:	b2d9      	uxtb	r1, r3
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80185d0:	400a      	ands	r2, r1
 80185d2:	b2d2      	uxtb	r2, r2
 80185d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80185da:	1c5a      	adds	r2, r3, #1
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	225a      	movs	r2, #90	@ 0x5a
 80185e4:	5a9b      	ldrh	r3, [r3, r2]
 80185e6:	b29b      	uxth	r3, r3
 80185e8:	3b01      	subs	r3, #1
 80185ea:	b299      	uxth	r1, r3
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	225a      	movs	r2, #90	@ 0x5a
 80185f0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	225a      	movs	r2, #90	@ 0x5a
 80185f6:	5a9b      	ldrh	r3, [r3, r2]
 80185f8:	b29b      	uxth	r3, r3
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d000      	beq.n	8018600 <UART_RxISR_8BIT+0x6c>
 80185fe:	e0a4      	b.n	801874a <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018600:	f3ef 8310 	mrs	r3, PRIMASK
 8018604:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018608:	64bb      	str	r3, [r7, #72]	@ 0x48
 801860a:	2301      	movs	r3, #1
 801860c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801860e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018610:	f383 8810 	msr	PRIMASK, r3
}
 8018614:	46c0      	nop			@ (mov r8, r8)
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	681a      	ldr	r2, [r3, #0]
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	494c      	ldr	r1, [pc, #304]	@ (8018754 <UART_RxISR_8BIT+0x1c0>)
 8018622:	400a      	ands	r2, r1
 8018624:	601a      	str	r2, [r3, #0]
 8018626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801862a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801862c:	f383 8810 	msr	PRIMASK, r3
}
 8018630:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018632:	f3ef 8310 	mrs	r3, PRIMASK
 8018636:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801863a:	647b      	str	r3, [r7, #68]	@ 0x44
 801863c:	2301      	movs	r3, #1
 801863e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018642:	f383 8810 	msr	PRIMASK, r3
}
 8018646:	46c0      	nop			@ (mov r8, r8)
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	689a      	ldr	r2, [r3, #8]
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	2101      	movs	r1, #1
 8018654:	438a      	bics	r2, r1
 8018656:	609a      	str	r2, [r3, #8]
 8018658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801865a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801865c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801865e:	f383 8810 	msr	PRIMASK, r3
}
 8018662:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	2280      	movs	r2, #128	@ 0x80
 8018668:	2120      	movs	r1, #32
 801866a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	2200      	movs	r2, #0
 8018670:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	2200      	movs	r2, #0
 8018676:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	4a36      	ldr	r2, [pc, #216]	@ (8018758 <UART_RxISR_8BIT+0x1c4>)
 801867e:	4293      	cmp	r3, r2
 8018680:	d01f      	beq.n	80186c2 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	685a      	ldr	r2, [r3, #4]
 8018688:	2380      	movs	r3, #128	@ 0x80
 801868a:	041b      	lsls	r3, r3, #16
 801868c:	4013      	ands	r3, r2
 801868e:	d018      	beq.n	80186c2 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018690:	f3ef 8310 	mrs	r3, PRIMASK
 8018694:	61bb      	str	r3, [r7, #24]
  return(result);
 8018696:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018698:	643b      	str	r3, [r7, #64]	@ 0x40
 801869a:	2301      	movs	r3, #1
 801869c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801869e:	69fb      	ldr	r3, [r7, #28]
 80186a0:	f383 8810 	msr	PRIMASK, r3
}
 80186a4:	46c0      	nop			@ (mov r8, r8)
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	681a      	ldr	r2, [r3, #0]
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	492a      	ldr	r1, [pc, #168]	@ (801875c <UART_RxISR_8BIT+0x1c8>)
 80186b2:	400a      	ands	r2, r1
 80186b4:	601a      	str	r2, [r3, #0]
 80186b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80186b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80186ba:	6a3b      	ldr	r3, [r7, #32]
 80186bc:	f383 8810 	msr	PRIMASK, r3
}
 80186c0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80186c6:	2b01      	cmp	r3, #1
 80186c8:	d130      	bne.n	801872c <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	2200      	movs	r2, #0
 80186ce:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80186d0:	f3ef 8310 	mrs	r3, PRIMASK
 80186d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80186d6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80186d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80186da:	2301      	movs	r3, #1
 80186dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80186de:	693b      	ldr	r3, [r7, #16]
 80186e0:	f383 8810 	msr	PRIMASK, r3
}
 80186e4:	46c0      	nop			@ (mov r8, r8)
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	681a      	ldr	r2, [r3, #0]
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	2110      	movs	r1, #16
 80186f2:	438a      	bics	r2, r1
 80186f4:	601a      	str	r2, [r3, #0]
 80186f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80186f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80186fa:	697b      	ldr	r3, [r7, #20]
 80186fc:	f383 8810 	msr	PRIMASK, r3
}
 8018700:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	69db      	ldr	r3, [r3, #28]
 8018708:	2210      	movs	r2, #16
 801870a:	4013      	ands	r3, r2
 801870c:	2b10      	cmp	r3, #16
 801870e:	d103      	bne.n	8018718 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	2210      	movs	r2, #16
 8018716:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	22ac      	movs	r2, #172	@ 0xac
 801871c:	589b      	ldr	r3, [r3, r2]
 801871e:	687a      	ldr	r2, [r7, #4]
 8018720:	2158      	movs	r1, #88	@ 0x58
 8018722:	5a51      	ldrh	r1, [r2, r1]
 8018724:	687a      	ldr	r2, [r7, #4]
 8018726:	0010      	movs	r0, r2
 8018728:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801872a:	e00e      	b.n	801874a <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	2294      	movs	r2, #148	@ 0x94
 8018730:	589b      	ldr	r3, [r3, r2]
 8018732:	687a      	ldr	r2, [r7, #4]
 8018734:	0010      	movs	r0, r2
 8018736:	4798      	blx	r3
}
 8018738:	e007      	b.n	801874a <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	699a      	ldr	r2, [r3, #24]
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	2108      	movs	r1, #8
 8018746:	430a      	orrs	r2, r1
 8018748:	619a      	str	r2, [r3, #24]
}
 801874a:	46c0      	nop			@ (mov r8, r8)
 801874c:	46bd      	mov	sp, r7
 801874e:	b014      	add	sp, #80	@ 0x50
 8018750:	bd80      	pop	{r7, pc}
 8018752:	46c0      	nop			@ (mov r8, r8)
 8018754:	fffffedf 	.word	0xfffffedf
 8018758:	40004800 	.word	0x40004800
 801875c:	fbffffff 	.word	0xfbffffff

08018760 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8018760:	b580      	push	{r7, lr}
 8018762:	b094      	sub	sp, #80	@ 0x50
 8018764:	af00      	add	r7, sp, #0
 8018766:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8018768:	204e      	movs	r0, #78	@ 0x4e
 801876a:	183b      	adds	r3, r7, r0
 801876c:	687a      	ldr	r2, [r7, #4]
 801876e:	215c      	movs	r1, #92	@ 0x5c
 8018770:	5a52      	ldrh	r2, [r2, r1]
 8018772:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	2280      	movs	r2, #128	@ 0x80
 8018778:	589b      	ldr	r3, [r3, r2]
 801877a:	2b22      	cmp	r3, #34	@ 0x22
 801877c:	d000      	beq.n	8018780 <UART_RxISR_16BIT+0x20>
 801877e:	e0c2      	b.n	8018906 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018786:	214c      	movs	r1, #76	@ 0x4c
 8018788:	187b      	adds	r3, r7, r1
 801878a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018790:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8018792:	187b      	adds	r3, r7, r1
 8018794:	183a      	adds	r2, r7, r0
 8018796:	881b      	ldrh	r3, [r3, #0]
 8018798:	8812      	ldrh	r2, [r2, #0]
 801879a:	4013      	ands	r3, r2
 801879c:	b29a      	uxth	r2, r3
 801879e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80187a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80187a6:	1c9a      	adds	r2, r3, #2
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	225a      	movs	r2, #90	@ 0x5a
 80187b0:	5a9b      	ldrh	r3, [r3, r2]
 80187b2:	b29b      	uxth	r3, r3
 80187b4:	3b01      	subs	r3, #1
 80187b6:	b299      	uxth	r1, r3
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	225a      	movs	r2, #90	@ 0x5a
 80187bc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	225a      	movs	r2, #90	@ 0x5a
 80187c2:	5a9b      	ldrh	r3, [r3, r2]
 80187c4:	b29b      	uxth	r3, r3
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d000      	beq.n	80187cc <UART_RxISR_16BIT+0x6c>
 80187ca:	e0a4      	b.n	8018916 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80187cc:	f3ef 8310 	mrs	r3, PRIMASK
 80187d0:	623b      	str	r3, [r7, #32]
  return(result);
 80187d2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80187d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80187d6:	2301      	movs	r3, #1
 80187d8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187dc:	f383 8810 	msr	PRIMASK, r3
}
 80187e0:	46c0      	nop			@ (mov r8, r8)
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	681a      	ldr	r2, [r3, #0]
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	494c      	ldr	r1, [pc, #304]	@ (8018920 <UART_RxISR_16BIT+0x1c0>)
 80187ee:	400a      	ands	r2, r1
 80187f0:	601a      	str	r2, [r3, #0]
 80187f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80187f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187f8:	f383 8810 	msr	PRIMASK, r3
}
 80187fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80187fe:	f3ef 8310 	mrs	r3, PRIMASK
 8018802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8018804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018806:	643b      	str	r3, [r7, #64]	@ 0x40
 8018808:	2301      	movs	r3, #1
 801880a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801880c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801880e:	f383 8810 	msr	PRIMASK, r3
}
 8018812:	46c0      	nop			@ (mov r8, r8)
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	689a      	ldr	r2, [r3, #8]
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	2101      	movs	r1, #1
 8018820:	438a      	bics	r2, r1
 8018822:	609a      	str	r2, [r3, #8]
 8018824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018826:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801882a:	f383 8810 	msr	PRIMASK, r3
}
 801882e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	2280      	movs	r2, #128	@ 0x80
 8018834:	2120      	movs	r1, #32
 8018836:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	2200      	movs	r2, #0
 801883c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	2200      	movs	r2, #0
 8018842:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	4a36      	ldr	r2, [pc, #216]	@ (8018924 <UART_RxISR_16BIT+0x1c4>)
 801884a:	4293      	cmp	r3, r2
 801884c:	d01f      	beq.n	801888e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	685a      	ldr	r2, [r3, #4]
 8018854:	2380      	movs	r3, #128	@ 0x80
 8018856:	041b      	lsls	r3, r3, #16
 8018858:	4013      	ands	r3, r2
 801885a:	d018      	beq.n	801888e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801885c:	f3ef 8310 	mrs	r3, PRIMASK
 8018860:	617b      	str	r3, [r7, #20]
  return(result);
 8018862:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018864:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018866:	2301      	movs	r3, #1
 8018868:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801886a:	69bb      	ldr	r3, [r7, #24]
 801886c:	f383 8810 	msr	PRIMASK, r3
}
 8018870:	46c0      	nop			@ (mov r8, r8)
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	681a      	ldr	r2, [r3, #0]
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	492a      	ldr	r1, [pc, #168]	@ (8018928 <UART_RxISR_16BIT+0x1c8>)
 801887e:	400a      	ands	r2, r1
 8018880:	601a      	str	r2, [r3, #0]
 8018882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018884:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018886:	69fb      	ldr	r3, [r7, #28]
 8018888:	f383 8810 	msr	PRIMASK, r3
}
 801888c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018892:	2b01      	cmp	r3, #1
 8018894:	d130      	bne.n	80188f8 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	2200      	movs	r2, #0
 801889a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801889c:	f3ef 8310 	mrs	r3, PRIMASK
 80188a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80188a2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80188a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80188a6:	2301      	movs	r3, #1
 80188a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	f383 8810 	msr	PRIMASK, r3
}
 80188b0:	46c0      	nop			@ (mov r8, r8)
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	681a      	ldr	r2, [r3, #0]
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	2110      	movs	r1, #16
 80188be:	438a      	bics	r2, r1
 80188c0:	601a      	str	r2, [r3, #0]
 80188c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80188c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188c6:	693b      	ldr	r3, [r7, #16]
 80188c8:	f383 8810 	msr	PRIMASK, r3
}
 80188cc:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	69db      	ldr	r3, [r3, #28]
 80188d4:	2210      	movs	r2, #16
 80188d6:	4013      	ands	r3, r2
 80188d8:	2b10      	cmp	r3, #16
 80188da:	d103      	bne.n	80188e4 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	2210      	movs	r2, #16
 80188e2:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	22ac      	movs	r2, #172	@ 0xac
 80188e8:	589b      	ldr	r3, [r3, r2]
 80188ea:	687a      	ldr	r2, [r7, #4]
 80188ec:	2158      	movs	r1, #88	@ 0x58
 80188ee:	5a51      	ldrh	r1, [r2, r1]
 80188f0:	687a      	ldr	r2, [r7, #4]
 80188f2:	0010      	movs	r0, r2
 80188f4:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80188f6:	e00e      	b.n	8018916 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	2294      	movs	r2, #148	@ 0x94
 80188fc:	589b      	ldr	r3, [r3, r2]
 80188fe:	687a      	ldr	r2, [r7, #4]
 8018900:	0010      	movs	r0, r2
 8018902:	4798      	blx	r3
}
 8018904:	e007      	b.n	8018916 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	699a      	ldr	r2, [r3, #24]
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	2108      	movs	r1, #8
 8018912:	430a      	orrs	r2, r1
 8018914:	619a      	str	r2, [r3, #24]
}
 8018916:	46c0      	nop			@ (mov r8, r8)
 8018918:	46bd      	mov	sp, r7
 801891a:	b014      	add	sp, #80	@ 0x50
 801891c:	bd80      	pop	{r7, pc}
 801891e:	46c0      	nop			@ (mov r8, r8)
 8018920:	fffffedf 	.word	0xfffffedf
 8018924:	40004800 	.word	0x40004800
 8018928:	fbffffff 	.word	0xfbffffff

0801892c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801892c:	b580      	push	{r7, lr}
 801892e:	b082      	sub	sp, #8
 8018930:	af00      	add	r7, sp, #0
 8018932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8018934:	46c0      	nop			@ (mov r8, r8)
 8018936:	46bd      	mov	sp, r7
 8018938:	b002      	add	sp, #8
 801893a:	bd80      	pop	{r7, pc}

0801893c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801893c:	b580      	push	{r7, lr}
 801893e:	b084      	sub	sp, #16
 8018940:	af00      	add	r7, sp, #0
 8018942:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	2244      	movs	r2, #68	@ 0x44
 8018948:	2100      	movs	r1, #0
 801894a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801894c:	4b05      	ldr	r3, [pc, #20]	@ (8018964 <USB_EnableGlobalInt+0x28>)
 801894e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	b299      	uxth	r1, r3
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	2240      	movs	r2, #64	@ 0x40
 8018958:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801895a:	2300      	movs	r3, #0
}
 801895c:	0018      	movs	r0, r3
 801895e:	46bd      	mov	sp, r7
 8018960:	b004      	add	sp, #16
 8018962:	bd80      	pop	{r7, pc}
 8018964:	0000bf80 	.word	0x0000bf80

08018968 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b084      	sub	sp, #16
 801896c:	af00      	add	r7, sp, #0
 801896e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018970:	4b09      	ldr	r3, [pc, #36]	@ (8018998 <USB_DisableGlobalInt+0x30>)
 8018972:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	2240      	movs	r2, #64	@ 0x40
 8018978:	5a9b      	ldrh	r3, [r3, r2]
 801897a:	b29b      	uxth	r3, r3
 801897c:	68fa      	ldr	r2, [r7, #12]
 801897e:	b292      	uxth	r2, r2
 8018980:	43d2      	mvns	r2, r2
 8018982:	b292      	uxth	r2, r2
 8018984:	4013      	ands	r3, r2
 8018986:	b299      	uxth	r1, r3
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	2240      	movs	r2, #64	@ 0x40
 801898c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801898e:	2300      	movs	r3, #0
}
 8018990:	0018      	movs	r0, r3
 8018992:	46bd      	mov	sp, r7
 8018994:	b004      	add	sp, #16
 8018996:	bd80      	pop	{r7, pc}
 8018998:	0000bf80 	.word	0x0000bf80

0801899c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801899c:	b084      	sub	sp, #16
 801899e:	b590      	push	{r4, r7, lr}
 80189a0:	b083      	sub	sp, #12
 80189a2:	af00      	add	r7, sp, #0
 80189a4:	6078      	str	r0, [r7, #4]
 80189a6:	2004      	movs	r0, #4
 80189a8:	2410      	movs	r4, #16
 80189aa:	1900      	adds	r0, r0, r4
 80189ac:	2408      	movs	r4, #8
 80189ae:	46a4      	mov	ip, r4
 80189b0:	44bc      	add	ip, r7
 80189b2:	4460      	add	r0, ip
 80189b4:	6001      	str	r1, [r0, #0]
 80189b6:	6042      	str	r2, [r0, #4]
 80189b8:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	2240      	movs	r2, #64	@ 0x40
 80189be:	2101      	movs	r1, #1
 80189c0:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	2240      	movs	r2, #64	@ 0x40
 80189c6:	2100      	movs	r1, #0
 80189c8:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	2244      	movs	r2, #68	@ 0x44
 80189ce:	2100      	movs	r1, #0
 80189d0:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	2250      	movs	r2, #80	@ 0x50
 80189d6:	2100      	movs	r1, #0
 80189d8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80189da:	2300      	movs	r3, #0
}
 80189dc:	0018      	movs	r0, r3
 80189de:	46bd      	mov	sp, r7
 80189e0:	b003      	add	sp, #12
 80189e2:	bc90      	pop	{r4, r7}
 80189e4:	bc08      	pop	{r3}
 80189e6:	b004      	add	sp, #16
 80189e8:	4718      	bx	r3
	...

080189ec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b09c      	sub	sp, #112	@ 0x70
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	6078      	str	r0, [r7, #4]
 80189f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80189f6:	236f      	movs	r3, #111	@ 0x6f
 80189f8:	18fb      	adds	r3, r7, r3
 80189fa:	2200      	movs	r2, #0
 80189fc:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80189fe:	687a      	ldr	r2, [r7, #4]
 8018a00:	683b      	ldr	r3, [r7, #0]
 8018a02:	781b      	ldrb	r3, [r3, #0]
 8018a04:	009b      	lsls	r3, r3, #2
 8018a06:	18d3      	adds	r3, r2, r3
 8018a08:	881b      	ldrh	r3, [r3, #0]
 8018a0a:	b29a      	uxth	r2, r3
 8018a0c:	236c      	movs	r3, #108	@ 0x6c
 8018a0e:	18fb      	adds	r3, r7, r3
 8018a10:	49a3      	ldr	r1, [pc, #652]	@ (8018ca0 <USB_ActivateEndpoint+0x2b4>)
 8018a12:	400a      	ands	r2, r1
 8018a14:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8018a16:	683b      	ldr	r3, [r7, #0]
 8018a18:	78db      	ldrb	r3, [r3, #3]
 8018a1a:	2b03      	cmp	r3, #3
 8018a1c:	d017      	beq.n	8018a4e <USB_ActivateEndpoint+0x62>
 8018a1e:	dc28      	bgt.n	8018a72 <USB_ActivateEndpoint+0x86>
 8018a20:	2b02      	cmp	r3, #2
 8018a22:	d00e      	beq.n	8018a42 <USB_ActivateEndpoint+0x56>
 8018a24:	dc25      	bgt.n	8018a72 <USB_ActivateEndpoint+0x86>
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d002      	beq.n	8018a30 <USB_ActivateEndpoint+0x44>
 8018a2a:	2b01      	cmp	r3, #1
 8018a2c:	d018      	beq.n	8018a60 <USB_ActivateEndpoint+0x74>
 8018a2e:	e020      	b.n	8018a72 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8018a30:	226c      	movs	r2, #108	@ 0x6c
 8018a32:	18bb      	adds	r3, r7, r2
 8018a34:	18ba      	adds	r2, r7, r2
 8018a36:	8812      	ldrh	r2, [r2, #0]
 8018a38:	2180      	movs	r1, #128	@ 0x80
 8018a3a:	0089      	lsls	r1, r1, #2
 8018a3c:	430a      	orrs	r2, r1
 8018a3e:	801a      	strh	r2, [r3, #0]
      break;
 8018a40:	e01c      	b.n	8018a7c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8018a42:	226c      	movs	r2, #108	@ 0x6c
 8018a44:	18bb      	adds	r3, r7, r2
 8018a46:	18ba      	adds	r2, r7, r2
 8018a48:	8812      	ldrh	r2, [r2, #0]
 8018a4a:	801a      	strh	r2, [r3, #0]
      break;
 8018a4c:	e016      	b.n	8018a7c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8018a4e:	226c      	movs	r2, #108	@ 0x6c
 8018a50:	18bb      	adds	r3, r7, r2
 8018a52:	18ba      	adds	r2, r7, r2
 8018a54:	8812      	ldrh	r2, [r2, #0]
 8018a56:	21c0      	movs	r1, #192	@ 0xc0
 8018a58:	00c9      	lsls	r1, r1, #3
 8018a5a:	430a      	orrs	r2, r1
 8018a5c:	801a      	strh	r2, [r3, #0]
      break;
 8018a5e:	e00d      	b.n	8018a7c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8018a60:	226c      	movs	r2, #108	@ 0x6c
 8018a62:	18bb      	adds	r3, r7, r2
 8018a64:	18ba      	adds	r2, r7, r2
 8018a66:	8812      	ldrh	r2, [r2, #0]
 8018a68:	2180      	movs	r1, #128	@ 0x80
 8018a6a:	00c9      	lsls	r1, r1, #3
 8018a6c:	430a      	orrs	r2, r1
 8018a6e:	801a      	strh	r2, [r3, #0]
      break;
 8018a70:	e004      	b.n	8018a7c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8018a72:	236f      	movs	r3, #111	@ 0x6f
 8018a74:	18fb      	adds	r3, r7, r3
 8018a76:	2201      	movs	r2, #1
 8018a78:	701a      	strb	r2, [r3, #0]
      break;
 8018a7a:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8018a7c:	687a      	ldr	r2, [r7, #4]
 8018a7e:	683b      	ldr	r3, [r7, #0]
 8018a80:	781b      	ldrb	r3, [r3, #0]
 8018a82:	009b      	lsls	r3, r3, #2
 8018a84:	18d3      	adds	r3, r2, r3
 8018a86:	226c      	movs	r2, #108	@ 0x6c
 8018a88:	18ba      	adds	r2, r7, r2
 8018a8a:	8812      	ldrh	r2, [r2, #0]
 8018a8c:	4985      	ldr	r1, [pc, #532]	@ (8018ca4 <USB_ActivateEndpoint+0x2b8>)
 8018a8e:	430a      	orrs	r2, r1
 8018a90:	b292      	uxth	r2, r2
 8018a92:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8018a94:	687a      	ldr	r2, [r7, #4]
 8018a96:	683b      	ldr	r3, [r7, #0]
 8018a98:	781b      	ldrb	r3, [r3, #0]
 8018a9a:	009b      	lsls	r3, r3, #2
 8018a9c:	18d3      	adds	r3, r2, r3
 8018a9e:	881b      	ldrh	r3, [r3, #0]
 8018aa0:	b29b      	uxth	r3, r3
 8018aa2:	b21b      	sxth	r3, r3
 8018aa4:	4a80      	ldr	r2, [pc, #512]	@ (8018ca8 <USB_ActivateEndpoint+0x2bc>)
 8018aa6:	4013      	ands	r3, r2
 8018aa8:	b21a      	sxth	r2, r3
 8018aaa:	683b      	ldr	r3, [r7, #0]
 8018aac:	781b      	ldrb	r3, [r3, #0]
 8018aae:	b21b      	sxth	r3, r3
 8018ab0:	4313      	orrs	r3, r2
 8018ab2:	b21a      	sxth	r2, r3
 8018ab4:	2166      	movs	r1, #102	@ 0x66
 8018ab6:	187b      	adds	r3, r7, r1
 8018ab8:	801a      	strh	r2, [r3, #0]
 8018aba:	687a      	ldr	r2, [r7, #4]
 8018abc:	683b      	ldr	r3, [r7, #0]
 8018abe:	781b      	ldrb	r3, [r3, #0]
 8018ac0:	009b      	lsls	r3, r3, #2
 8018ac2:	18d3      	adds	r3, r2, r3
 8018ac4:	187a      	adds	r2, r7, r1
 8018ac6:	8812      	ldrh	r2, [r2, #0]
 8018ac8:	4976      	ldr	r1, [pc, #472]	@ (8018ca4 <USB_ActivateEndpoint+0x2b8>)
 8018aca:	430a      	orrs	r2, r1
 8018acc:	b292      	uxth	r2, r2
 8018ace:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8018ad0:	683b      	ldr	r3, [r7, #0]
 8018ad2:	7b1b      	ldrb	r3, [r3, #12]
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d000      	beq.n	8018ada <USB_ActivateEndpoint+0xee>
 8018ad8:	e178      	b.n	8018dcc <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8018ada:	683b      	ldr	r3, [r7, #0]
 8018adc:	785b      	ldrb	r3, [r3, #1]
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	d100      	bne.n	8018ae4 <USB_ActivateEndpoint+0xf8>
 8018ae2:	e07a      	b.n	8018bda <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	61bb      	str	r3, [r7, #24]
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	2250      	movs	r2, #80	@ 0x50
 8018aec:	5a9b      	ldrh	r3, [r3, r2]
 8018aee:	b29b      	uxth	r3, r3
 8018af0:	001a      	movs	r2, r3
 8018af2:	69bb      	ldr	r3, [r7, #24]
 8018af4:	189b      	adds	r3, r3, r2
 8018af6:	61bb      	str	r3, [r7, #24]
 8018af8:	683b      	ldr	r3, [r7, #0]
 8018afa:	781b      	ldrb	r3, [r3, #0]
 8018afc:	00da      	lsls	r2, r3, #3
 8018afe:	69bb      	ldr	r3, [r7, #24]
 8018b00:	18d3      	adds	r3, r2, r3
 8018b02:	2280      	movs	r2, #128	@ 0x80
 8018b04:	00d2      	lsls	r2, r2, #3
 8018b06:	4694      	mov	ip, r2
 8018b08:	4463      	add	r3, ip
 8018b0a:	617b      	str	r3, [r7, #20]
 8018b0c:	683b      	ldr	r3, [r7, #0]
 8018b0e:	88db      	ldrh	r3, [r3, #6]
 8018b10:	085b      	lsrs	r3, r3, #1
 8018b12:	b29b      	uxth	r3, r3
 8018b14:	18db      	adds	r3, r3, r3
 8018b16:	b29a      	uxth	r2, r3
 8018b18:	697b      	ldr	r3, [r7, #20]
 8018b1a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018b1c:	687a      	ldr	r2, [r7, #4]
 8018b1e:	683b      	ldr	r3, [r7, #0]
 8018b20:	781b      	ldrb	r3, [r3, #0]
 8018b22:	009b      	lsls	r3, r3, #2
 8018b24:	18d2      	adds	r2, r2, r3
 8018b26:	2112      	movs	r1, #18
 8018b28:	187b      	adds	r3, r7, r1
 8018b2a:	8812      	ldrh	r2, [r2, #0]
 8018b2c:	801a      	strh	r2, [r3, #0]
 8018b2e:	187b      	adds	r3, r7, r1
 8018b30:	881b      	ldrh	r3, [r3, #0]
 8018b32:	2240      	movs	r2, #64	@ 0x40
 8018b34:	4013      	ands	r3, r2
 8018b36:	d016      	beq.n	8018b66 <USB_ActivateEndpoint+0x17a>
 8018b38:	687a      	ldr	r2, [r7, #4]
 8018b3a:	683b      	ldr	r3, [r7, #0]
 8018b3c:	781b      	ldrb	r3, [r3, #0]
 8018b3e:	009b      	lsls	r3, r3, #2
 8018b40:	18d3      	adds	r3, r2, r3
 8018b42:	881b      	ldrh	r3, [r3, #0]
 8018b44:	b29a      	uxth	r2, r3
 8018b46:	2010      	movs	r0, #16
 8018b48:	183b      	adds	r3, r7, r0
 8018b4a:	4957      	ldr	r1, [pc, #348]	@ (8018ca8 <USB_ActivateEndpoint+0x2bc>)
 8018b4c:	400a      	ands	r2, r1
 8018b4e:	801a      	strh	r2, [r3, #0]
 8018b50:	687a      	ldr	r2, [r7, #4]
 8018b52:	683b      	ldr	r3, [r7, #0]
 8018b54:	781b      	ldrb	r3, [r3, #0]
 8018b56:	009b      	lsls	r3, r3, #2
 8018b58:	18d3      	adds	r3, r2, r3
 8018b5a:	183a      	adds	r2, r7, r0
 8018b5c:	8812      	ldrh	r2, [r2, #0]
 8018b5e:	4953      	ldr	r1, [pc, #332]	@ (8018cac <USB_ActivateEndpoint+0x2c0>)
 8018b60:	430a      	orrs	r2, r1
 8018b62:	b292      	uxth	r2, r2
 8018b64:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8018b66:	683b      	ldr	r3, [r7, #0]
 8018b68:	78db      	ldrb	r3, [r3, #3]
 8018b6a:	2b01      	cmp	r3, #1
 8018b6c:	d01d      	beq.n	8018baa <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8018b6e:	687a      	ldr	r2, [r7, #4]
 8018b70:	683b      	ldr	r3, [r7, #0]
 8018b72:	781b      	ldrb	r3, [r3, #0]
 8018b74:	009b      	lsls	r3, r3, #2
 8018b76:	18d3      	adds	r3, r2, r3
 8018b78:	881b      	ldrh	r3, [r3, #0]
 8018b7a:	b29a      	uxth	r2, r3
 8018b7c:	200c      	movs	r0, #12
 8018b7e:	183b      	adds	r3, r7, r0
 8018b80:	494b      	ldr	r1, [pc, #300]	@ (8018cb0 <USB_ActivateEndpoint+0x2c4>)
 8018b82:	400a      	ands	r2, r1
 8018b84:	801a      	strh	r2, [r3, #0]
 8018b86:	183b      	adds	r3, r7, r0
 8018b88:	183a      	adds	r2, r7, r0
 8018b8a:	8812      	ldrh	r2, [r2, #0]
 8018b8c:	2120      	movs	r1, #32
 8018b8e:	404a      	eors	r2, r1
 8018b90:	801a      	strh	r2, [r3, #0]
 8018b92:	687a      	ldr	r2, [r7, #4]
 8018b94:	683b      	ldr	r3, [r7, #0]
 8018b96:	781b      	ldrb	r3, [r3, #0]
 8018b98:	009b      	lsls	r3, r3, #2
 8018b9a:	18d3      	adds	r3, r2, r3
 8018b9c:	183a      	adds	r2, r7, r0
 8018b9e:	8812      	ldrh	r2, [r2, #0]
 8018ba0:	4940      	ldr	r1, [pc, #256]	@ (8018ca4 <USB_ActivateEndpoint+0x2b8>)
 8018ba2:	430a      	orrs	r2, r1
 8018ba4:	b292      	uxth	r2, r2
 8018ba6:	801a      	strh	r2, [r3, #0]
 8018ba8:	e2b4      	b.n	8019114 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018baa:	687a      	ldr	r2, [r7, #4]
 8018bac:	683b      	ldr	r3, [r7, #0]
 8018bae:	781b      	ldrb	r3, [r3, #0]
 8018bb0:	009b      	lsls	r3, r3, #2
 8018bb2:	18d3      	adds	r3, r2, r3
 8018bb4:	881b      	ldrh	r3, [r3, #0]
 8018bb6:	b29a      	uxth	r2, r3
 8018bb8:	200e      	movs	r0, #14
 8018bba:	183b      	adds	r3, r7, r0
 8018bbc:	493c      	ldr	r1, [pc, #240]	@ (8018cb0 <USB_ActivateEndpoint+0x2c4>)
 8018bbe:	400a      	ands	r2, r1
 8018bc0:	801a      	strh	r2, [r3, #0]
 8018bc2:	687a      	ldr	r2, [r7, #4]
 8018bc4:	683b      	ldr	r3, [r7, #0]
 8018bc6:	781b      	ldrb	r3, [r3, #0]
 8018bc8:	009b      	lsls	r3, r3, #2
 8018bca:	18d3      	adds	r3, r2, r3
 8018bcc:	183a      	adds	r2, r7, r0
 8018bce:	8812      	ldrh	r2, [r2, #0]
 8018bd0:	4934      	ldr	r1, [pc, #208]	@ (8018ca4 <USB_ActivateEndpoint+0x2b8>)
 8018bd2:	430a      	orrs	r2, r1
 8018bd4:	b292      	uxth	r2, r2
 8018bd6:	801a      	strh	r2, [r3, #0]
 8018bd8:	e29c      	b.n	8019114 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	2250      	movs	r2, #80	@ 0x50
 8018be2:	5a9b      	ldrh	r3, [r3, r2]
 8018be4:	b29b      	uxth	r3, r3
 8018be6:	001a      	movs	r2, r3
 8018be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018bea:	189b      	adds	r3, r3, r2
 8018bec:	633b      	str	r3, [r7, #48]	@ 0x30
 8018bee:	683b      	ldr	r3, [r7, #0]
 8018bf0:	781b      	ldrb	r3, [r3, #0]
 8018bf2:	00da      	lsls	r2, r3, #3
 8018bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018bf6:	18d3      	adds	r3, r2, r3
 8018bf8:	4a2e      	ldr	r2, [pc, #184]	@ (8018cb4 <USB_ActivateEndpoint+0x2c8>)
 8018bfa:	4694      	mov	ip, r2
 8018bfc:	4463      	add	r3, ip
 8018bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018c00:	683b      	ldr	r3, [r7, #0]
 8018c02:	88db      	ldrh	r3, [r3, #6]
 8018c04:	085b      	lsrs	r3, r3, #1
 8018c06:	b29b      	uxth	r3, r3
 8018c08:	18db      	adds	r3, r3, r3
 8018c0a:	b29a      	uxth	r2, r3
 8018c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c0e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	2250      	movs	r2, #80	@ 0x50
 8018c18:	5a9b      	ldrh	r3, [r3, r2]
 8018c1a:	b29b      	uxth	r3, r3
 8018c1c:	001a      	movs	r2, r3
 8018c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c20:	189b      	adds	r3, r3, r2
 8018c22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018c24:	683b      	ldr	r3, [r7, #0]
 8018c26:	781b      	ldrb	r3, [r3, #0]
 8018c28:	00da      	lsls	r2, r3, #3
 8018c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c2c:	18d3      	adds	r3, r2, r3
 8018c2e:	4a22      	ldr	r2, [pc, #136]	@ (8018cb8 <USB_ActivateEndpoint+0x2cc>)
 8018c30:	4694      	mov	ip, r2
 8018c32:	4463      	add	r3, ip
 8018c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8018c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c38:	881b      	ldrh	r3, [r3, #0]
 8018c3a:	b29b      	uxth	r3, r3
 8018c3c:	059b      	lsls	r3, r3, #22
 8018c3e:	0d9b      	lsrs	r3, r3, #22
 8018c40:	b29a      	uxth	r2, r3
 8018c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c44:	801a      	strh	r2, [r3, #0]
 8018c46:	683b      	ldr	r3, [r7, #0]
 8018c48:	691b      	ldr	r3, [r3, #16]
 8018c4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8018c4c:	d91a      	bls.n	8018c84 <USB_ActivateEndpoint+0x298>
 8018c4e:	683b      	ldr	r3, [r7, #0]
 8018c50:	691b      	ldr	r3, [r3, #16]
 8018c52:	095b      	lsrs	r3, r3, #5
 8018c54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018c56:	683b      	ldr	r3, [r7, #0]
 8018c58:	691b      	ldr	r3, [r3, #16]
 8018c5a:	221f      	movs	r2, #31
 8018c5c:	4013      	ands	r3, r2
 8018c5e:	d102      	bne.n	8018c66 <USB_ActivateEndpoint+0x27a>
 8018c60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018c62:	3b01      	subs	r3, #1
 8018c64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c68:	881b      	ldrh	r3, [r3, #0]
 8018c6a:	b29a      	uxth	r2, r3
 8018c6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018c6e:	b29b      	uxth	r3, r3
 8018c70:	029b      	lsls	r3, r3, #10
 8018c72:	b29b      	uxth	r3, r3
 8018c74:	4313      	orrs	r3, r2
 8018c76:	b29b      	uxth	r3, r3
 8018c78:	4a10      	ldr	r2, [pc, #64]	@ (8018cbc <USB_ActivateEndpoint+0x2d0>)
 8018c7a:	4313      	orrs	r3, r2
 8018c7c:	b29a      	uxth	r2, r3
 8018c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c80:	801a      	strh	r2, [r3, #0]
 8018c82:	e034      	b.n	8018cee <USB_ActivateEndpoint+0x302>
 8018c84:	683b      	ldr	r3, [r7, #0]
 8018c86:	691b      	ldr	r3, [r3, #16]
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d119      	bne.n	8018cc0 <USB_ActivateEndpoint+0x2d4>
 8018c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c8e:	881b      	ldrh	r3, [r3, #0]
 8018c90:	b29b      	uxth	r3, r3
 8018c92:	4a0a      	ldr	r2, [pc, #40]	@ (8018cbc <USB_ActivateEndpoint+0x2d0>)
 8018c94:	4313      	orrs	r3, r2
 8018c96:	b29a      	uxth	r2, r3
 8018c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c9a:	801a      	strh	r2, [r3, #0]
 8018c9c:	e027      	b.n	8018cee <USB_ActivateEndpoint+0x302>
 8018c9e:	46c0      	nop			@ (mov r8, r8)
 8018ca0:	ffff898f 	.word	0xffff898f
 8018ca4:	ffff8080 	.word	0xffff8080
 8018ca8:	ffff8f8f 	.word	0xffff8f8f
 8018cac:	ffff80c0 	.word	0xffff80c0
 8018cb0:	ffff8fbf 	.word	0xffff8fbf
 8018cb4:	00000404 	.word	0x00000404
 8018cb8:	00000406 	.word	0x00000406
 8018cbc:	ffff8000 	.word	0xffff8000
 8018cc0:	683b      	ldr	r3, [r7, #0]
 8018cc2:	691b      	ldr	r3, [r3, #16]
 8018cc4:	085b      	lsrs	r3, r3, #1
 8018cc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018cc8:	683b      	ldr	r3, [r7, #0]
 8018cca:	691b      	ldr	r3, [r3, #16]
 8018ccc:	2201      	movs	r2, #1
 8018cce:	4013      	ands	r3, r2
 8018cd0:	d002      	beq.n	8018cd8 <USB_ActivateEndpoint+0x2ec>
 8018cd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018cd4:	3301      	adds	r3, #1
 8018cd6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cda:	881b      	ldrh	r3, [r3, #0]
 8018cdc:	b29a      	uxth	r2, r3
 8018cde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018ce0:	b29b      	uxth	r3, r3
 8018ce2:	029b      	lsls	r3, r3, #10
 8018ce4:	b29b      	uxth	r3, r3
 8018ce6:	4313      	orrs	r3, r2
 8018ce8:	b29a      	uxth	r2, r3
 8018cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018cee:	687a      	ldr	r2, [r7, #4]
 8018cf0:	683b      	ldr	r3, [r7, #0]
 8018cf2:	781b      	ldrb	r3, [r3, #0]
 8018cf4:	009b      	lsls	r3, r3, #2
 8018cf6:	18d2      	adds	r2, r2, r3
 8018cf8:	2122      	movs	r1, #34	@ 0x22
 8018cfa:	187b      	adds	r3, r7, r1
 8018cfc:	8812      	ldrh	r2, [r2, #0]
 8018cfe:	801a      	strh	r2, [r3, #0]
 8018d00:	187b      	adds	r3, r7, r1
 8018d02:	881a      	ldrh	r2, [r3, #0]
 8018d04:	2380      	movs	r3, #128	@ 0x80
 8018d06:	01db      	lsls	r3, r3, #7
 8018d08:	4013      	ands	r3, r2
 8018d0a:	d016      	beq.n	8018d3a <USB_ActivateEndpoint+0x34e>
 8018d0c:	687a      	ldr	r2, [r7, #4]
 8018d0e:	683b      	ldr	r3, [r7, #0]
 8018d10:	781b      	ldrb	r3, [r3, #0]
 8018d12:	009b      	lsls	r3, r3, #2
 8018d14:	18d3      	adds	r3, r2, r3
 8018d16:	881b      	ldrh	r3, [r3, #0]
 8018d18:	b29a      	uxth	r2, r3
 8018d1a:	2020      	movs	r0, #32
 8018d1c:	183b      	adds	r3, r7, r0
 8018d1e:	49dd      	ldr	r1, [pc, #884]	@ (8019094 <USB_ActivateEndpoint+0x6a8>)
 8018d20:	400a      	ands	r2, r1
 8018d22:	801a      	strh	r2, [r3, #0]
 8018d24:	687a      	ldr	r2, [r7, #4]
 8018d26:	683b      	ldr	r3, [r7, #0]
 8018d28:	781b      	ldrb	r3, [r3, #0]
 8018d2a:	009b      	lsls	r3, r3, #2
 8018d2c:	18d3      	adds	r3, r2, r3
 8018d2e:	183a      	adds	r2, r7, r0
 8018d30:	8812      	ldrh	r2, [r2, #0]
 8018d32:	49d9      	ldr	r1, [pc, #868]	@ (8019098 <USB_ActivateEndpoint+0x6ac>)
 8018d34:	430a      	orrs	r2, r1
 8018d36:	b292      	uxth	r2, r2
 8018d38:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8018d3a:	683b      	ldr	r3, [r7, #0]
 8018d3c:	781b      	ldrb	r3, [r3, #0]
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	d125      	bne.n	8018d8e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8018d42:	687a      	ldr	r2, [r7, #4]
 8018d44:	683b      	ldr	r3, [r7, #0]
 8018d46:	781b      	ldrb	r3, [r3, #0]
 8018d48:	009b      	lsls	r3, r3, #2
 8018d4a:	18d3      	adds	r3, r2, r3
 8018d4c:	881b      	ldrh	r3, [r3, #0]
 8018d4e:	b29a      	uxth	r2, r3
 8018d50:	201c      	movs	r0, #28
 8018d52:	183b      	adds	r3, r7, r0
 8018d54:	49d1      	ldr	r1, [pc, #836]	@ (801909c <USB_ActivateEndpoint+0x6b0>)
 8018d56:	400a      	ands	r2, r1
 8018d58:	801a      	strh	r2, [r3, #0]
 8018d5a:	183b      	adds	r3, r7, r0
 8018d5c:	183a      	adds	r2, r7, r0
 8018d5e:	8812      	ldrh	r2, [r2, #0]
 8018d60:	2180      	movs	r1, #128	@ 0x80
 8018d62:	0149      	lsls	r1, r1, #5
 8018d64:	404a      	eors	r2, r1
 8018d66:	801a      	strh	r2, [r3, #0]
 8018d68:	183b      	adds	r3, r7, r0
 8018d6a:	183a      	adds	r2, r7, r0
 8018d6c:	8812      	ldrh	r2, [r2, #0]
 8018d6e:	2180      	movs	r1, #128	@ 0x80
 8018d70:	0189      	lsls	r1, r1, #6
 8018d72:	404a      	eors	r2, r1
 8018d74:	801a      	strh	r2, [r3, #0]
 8018d76:	687a      	ldr	r2, [r7, #4]
 8018d78:	683b      	ldr	r3, [r7, #0]
 8018d7a:	781b      	ldrb	r3, [r3, #0]
 8018d7c:	009b      	lsls	r3, r3, #2
 8018d7e:	18d3      	adds	r3, r2, r3
 8018d80:	183a      	adds	r2, r7, r0
 8018d82:	8812      	ldrh	r2, [r2, #0]
 8018d84:	49c6      	ldr	r1, [pc, #792]	@ (80190a0 <USB_ActivateEndpoint+0x6b4>)
 8018d86:	430a      	orrs	r2, r1
 8018d88:	b292      	uxth	r2, r2
 8018d8a:	801a      	strh	r2, [r3, #0]
 8018d8c:	e1c2      	b.n	8019114 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8018d8e:	687a      	ldr	r2, [r7, #4]
 8018d90:	683b      	ldr	r3, [r7, #0]
 8018d92:	781b      	ldrb	r3, [r3, #0]
 8018d94:	009b      	lsls	r3, r3, #2
 8018d96:	18d3      	adds	r3, r2, r3
 8018d98:	881b      	ldrh	r3, [r3, #0]
 8018d9a:	b29a      	uxth	r2, r3
 8018d9c:	201e      	movs	r0, #30
 8018d9e:	183b      	adds	r3, r7, r0
 8018da0:	49be      	ldr	r1, [pc, #760]	@ (801909c <USB_ActivateEndpoint+0x6b0>)
 8018da2:	400a      	ands	r2, r1
 8018da4:	801a      	strh	r2, [r3, #0]
 8018da6:	183b      	adds	r3, r7, r0
 8018da8:	183a      	adds	r2, r7, r0
 8018daa:	8812      	ldrh	r2, [r2, #0]
 8018dac:	2180      	movs	r1, #128	@ 0x80
 8018dae:	0189      	lsls	r1, r1, #6
 8018db0:	404a      	eors	r2, r1
 8018db2:	801a      	strh	r2, [r3, #0]
 8018db4:	687a      	ldr	r2, [r7, #4]
 8018db6:	683b      	ldr	r3, [r7, #0]
 8018db8:	781b      	ldrb	r3, [r3, #0]
 8018dba:	009b      	lsls	r3, r3, #2
 8018dbc:	18d3      	adds	r3, r2, r3
 8018dbe:	183a      	adds	r2, r7, r0
 8018dc0:	8812      	ldrh	r2, [r2, #0]
 8018dc2:	49b7      	ldr	r1, [pc, #732]	@ (80190a0 <USB_ActivateEndpoint+0x6b4>)
 8018dc4:	430a      	orrs	r2, r1
 8018dc6:	b292      	uxth	r2, r2
 8018dc8:	801a      	strh	r2, [r3, #0]
 8018dca:	e1a3      	b.n	8019114 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8018dcc:	683b      	ldr	r3, [r7, #0]
 8018dce:	78db      	ldrb	r3, [r3, #3]
 8018dd0:	2b02      	cmp	r3, #2
 8018dd2:	d117      	bne.n	8018e04 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8018dd4:	687a      	ldr	r2, [r7, #4]
 8018dd6:	683b      	ldr	r3, [r7, #0]
 8018dd8:	781b      	ldrb	r3, [r3, #0]
 8018dda:	009b      	lsls	r3, r3, #2
 8018ddc:	18d3      	adds	r3, r2, r3
 8018dde:	881b      	ldrh	r3, [r3, #0]
 8018de0:	b29a      	uxth	r2, r3
 8018de2:	2062      	movs	r0, #98	@ 0x62
 8018de4:	183b      	adds	r3, r7, r0
 8018de6:	49ab      	ldr	r1, [pc, #684]	@ (8019094 <USB_ActivateEndpoint+0x6a8>)
 8018de8:	400a      	ands	r2, r1
 8018dea:	801a      	strh	r2, [r3, #0]
 8018dec:	687a      	ldr	r2, [r7, #4]
 8018dee:	683b      	ldr	r3, [r7, #0]
 8018df0:	781b      	ldrb	r3, [r3, #0]
 8018df2:	009b      	lsls	r3, r3, #2
 8018df4:	18d3      	adds	r3, r2, r3
 8018df6:	183a      	adds	r2, r7, r0
 8018df8:	8812      	ldrh	r2, [r2, #0]
 8018dfa:	49aa      	ldr	r1, [pc, #680]	@ (80190a4 <USB_ActivateEndpoint+0x6b8>)
 8018dfc:	430a      	orrs	r2, r1
 8018dfe:	b292      	uxth	r2, r2
 8018e00:	801a      	strh	r2, [r3, #0]
 8018e02:	e016      	b.n	8018e32 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8018e04:	687a      	ldr	r2, [r7, #4]
 8018e06:	683b      	ldr	r3, [r7, #0]
 8018e08:	781b      	ldrb	r3, [r3, #0]
 8018e0a:	009b      	lsls	r3, r3, #2
 8018e0c:	18d3      	adds	r3, r2, r3
 8018e0e:	881b      	ldrh	r3, [r3, #0]
 8018e10:	b29a      	uxth	r2, r3
 8018e12:	2064      	movs	r0, #100	@ 0x64
 8018e14:	183b      	adds	r3, r7, r0
 8018e16:	49a4      	ldr	r1, [pc, #656]	@ (80190a8 <USB_ActivateEndpoint+0x6bc>)
 8018e18:	400a      	ands	r2, r1
 8018e1a:	801a      	strh	r2, [r3, #0]
 8018e1c:	687a      	ldr	r2, [r7, #4]
 8018e1e:	683b      	ldr	r3, [r7, #0]
 8018e20:	781b      	ldrb	r3, [r3, #0]
 8018e22:	009b      	lsls	r3, r3, #2
 8018e24:	18d3      	adds	r3, r2, r3
 8018e26:	183a      	adds	r2, r7, r0
 8018e28:	8812      	ldrh	r2, [r2, #0]
 8018e2a:	499d      	ldr	r1, [pc, #628]	@ (80190a0 <USB_ActivateEndpoint+0x6b4>)
 8018e2c:	430a      	orrs	r2, r1
 8018e2e:	b292      	uxth	r2, r2
 8018e30:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	2250      	movs	r2, #80	@ 0x50
 8018e3a:	5a9b      	ldrh	r3, [r3, r2]
 8018e3c:	b29b      	uxth	r3, r3
 8018e3e:	001a      	movs	r2, r3
 8018e40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018e42:	189b      	adds	r3, r3, r2
 8018e44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018e46:	683b      	ldr	r3, [r7, #0]
 8018e48:	781b      	ldrb	r3, [r3, #0]
 8018e4a:	00da      	lsls	r2, r3, #3
 8018e4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018e4e:	18d3      	adds	r3, r2, r3
 8018e50:	2280      	movs	r2, #128	@ 0x80
 8018e52:	00d2      	lsls	r2, r2, #3
 8018e54:	4694      	mov	ip, r2
 8018e56:	4463      	add	r3, ip
 8018e58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018e5a:	683b      	ldr	r3, [r7, #0]
 8018e5c:	891b      	ldrh	r3, [r3, #8]
 8018e5e:	085b      	lsrs	r3, r3, #1
 8018e60:	b29b      	uxth	r3, r3
 8018e62:	18db      	adds	r3, r3, r3
 8018e64:	b29a      	uxth	r2, r3
 8018e66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018e68:	801a      	strh	r2, [r3, #0]
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	2250      	movs	r2, #80	@ 0x50
 8018e72:	5a9b      	ldrh	r3, [r3, r2]
 8018e74:	b29b      	uxth	r3, r3
 8018e76:	001a      	movs	r2, r3
 8018e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e7a:	189b      	adds	r3, r3, r2
 8018e7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8018e7e:	683b      	ldr	r3, [r7, #0]
 8018e80:	781b      	ldrb	r3, [r3, #0]
 8018e82:	00da      	lsls	r2, r3, #3
 8018e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e86:	18d3      	adds	r3, r2, r3
 8018e88:	4a88      	ldr	r2, [pc, #544]	@ (80190ac <USB_ActivateEndpoint+0x6c0>)
 8018e8a:	4694      	mov	ip, r2
 8018e8c:	4463      	add	r3, ip
 8018e8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8018e90:	683b      	ldr	r3, [r7, #0]
 8018e92:	895b      	ldrh	r3, [r3, #10]
 8018e94:	085b      	lsrs	r3, r3, #1
 8018e96:	b29b      	uxth	r3, r3
 8018e98:	18db      	adds	r3, r3, r3
 8018e9a:	b29a      	uxth	r2, r3
 8018e9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e9e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8018ea0:	683b      	ldr	r3, [r7, #0]
 8018ea2:	785b      	ldrb	r3, [r3, #1]
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d000      	beq.n	8018eaa <USB_ActivateEndpoint+0x4be>
 8018ea8:	e087      	b.n	8018fba <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018eaa:	687a      	ldr	r2, [r7, #4]
 8018eac:	683b      	ldr	r3, [r7, #0]
 8018eae:	781b      	ldrb	r3, [r3, #0]
 8018eb0:	009b      	lsls	r3, r3, #2
 8018eb2:	18d2      	adds	r2, r2, r3
 8018eb4:	2140      	movs	r1, #64	@ 0x40
 8018eb6:	187b      	adds	r3, r7, r1
 8018eb8:	8812      	ldrh	r2, [r2, #0]
 8018eba:	801a      	strh	r2, [r3, #0]
 8018ebc:	187b      	adds	r3, r7, r1
 8018ebe:	881a      	ldrh	r2, [r3, #0]
 8018ec0:	2380      	movs	r3, #128	@ 0x80
 8018ec2:	01db      	lsls	r3, r3, #7
 8018ec4:	4013      	ands	r3, r2
 8018ec6:	d016      	beq.n	8018ef6 <USB_ActivateEndpoint+0x50a>
 8018ec8:	687a      	ldr	r2, [r7, #4]
 8018eca:	683b      	ldr	r3, [r7, #0]
 8018ecc:	781b      	ldrb	r3, [r3, #0]
 8018ece:	009b      	lsls	r3, r3, #2
 8018ed0:	18d3      	adds	r3, r2, r3
 8018ed2:	881b      	ldrh	r3, [r3, #0]
 8018ed4:	b29a      	uxth	r2, r3
 8018ed6:	203e      	movs	r0, #62	@ 0x3e
 8018ed8:	183b      	adds	r3, r7, r0
 8018eda:	496e      	ldr	r1, [pc, #440]	@ (8019094 <USB_ActivateEndpoint+0x6a8>)
 8018edc:	400a      	ands	r2, r1
 8018ede:	801a      	strh	r2, [r3, #0]
 8018ee0:	687a      	ldr	r2, [r7, #4]
 8018ee2:	683b      	ldr	r3, [r7, #0]
 8018ee4:	781b      	ldrb	r3, [r3, #0]
 8018ee6:	009b      	lsls	r3, r3, #2
 8018ee8:	18d3      	adds	r3, r2, r3
 8018eea:	183a      	adds	r2, r7, r0
 8018eec:	8812      	ldrh	r2, [r2, #0]
 8018eee:	496a      	ldr	r1, [pc, #424]	@ (8019098 <USB_ActivateEndpoint+0x6ac>)
 8018ef0:	430a      	orrs	r2, r1
 8018ef2:	b292      	uxth	r2, r2
 8018ef4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018ef6:	687a      	ldr	r2, [r7, #4]
 8018ef8:	683b      	ldr	r3, [r7, #0]
 8018efa:	781b      	ldrb	r3, [r3, #0]
 8018efc:	009b      	lsls	r3, r3, #2
 8018efe:	18d2      	adds	r2, r2, r3
 8018f00:	213c      	movs	r1, #60	@ 0x3c
 8018f02:	187b      	adds	r3, r7, r1
 8018f04:	8812      	ldrh	r2, [r2, #0]
 8018f06:	801a      	strh	r2, [r3, #0]
 8018f08:	187b      	adds	r3, r7, r1
 8018f0a:	881b      	ldrh	r3, [r3, #0]
 8018f0c:	2240      	movs	r2, #64	@ 0x40
 8018f0e:	4013      	ands	r3, r2
 8018f10:	d016      	beq.n	8018f40 <USB_ActivateEndpoint+0x554>
 8018f12:	687a      	ldr	r2, [r7, #4]
 8018f14:	683b      	ldr	r3, [r7, #0]
 8018f16:	781b      	ldrb	r3, [r3, #0]
 8018f18:	009b      	lsls	r3, r3, #2
 8018f1a:	18d3      	adds	r3, r2, r3
 8018f1c:	881b      	ldrh	r3, [r3, #0]
 8018f1e:	b29a      	uxth	r2, r3
 8018f20:	203a      	movs	r0, #58	@ 0x3a
 8018f22:	183b      	adds	r3, r7, r0
 8018f24:	495b      	ldr	r1, [pc, #364]	@ (8019094 <USB_ActivateEndpoint+0x6a8>)
 8018f26:	400a      	ands	r2, r1
 8018f28:	801a      	strh	r2, [r3, #0]
 8018f2a:	687a      	ldr	r2, [r7, #4]
 8018f2c:	683b      	ldr	r3, [r7, #0]
 8018f2e:	781b      	ldrb	r3, [r3, #0]
 8018f30:	009b      	lsls	r3, r3, #2
 8018f32:	18d3      	adds	r3, r2, r3
 8018f34:	183a      	adds	r2, r7, r0
 8018f36:	8812      	ldrh	r2, [r2, #0]
 8018f38:	495d      	ldr	r1, [pc, #372]	@ (80190b0 <USB_ActivateEndpoint+0x6c4>)
 8018f3a:	430a      	orrs	r2, r1
 8018f3c:	b292      	uxth	r2, r2
 8018f3e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8018f40:	687a      	ldr	r2, [r7, #4]
 8018f42:	683b      	ldr	r3, [r7, #0]
 8018f44:	781b      	ldrb	r3, [r3, #0]
 8018f46:	009b      	lsls	r3, r3, #2
 8018f48:	18d3      	adds	r3, r2, r3
 8018f4a:	881b      	ldrh	r3, [r3, #0]
 8018f4c:	b29a      	uxth	r2, r3
 8018f4e:	2038      	movs	r0, #56	@ 0x38
 8018f50:	183b      	adds	r3, r7, r0
 8018f52:	4952      	ldr	r1, [pc, #328]	@ (801909c <USB_ActivateEndpoint+0x6b0>)
 8018f54:	400a      	ands	r2, r1
 8018f56:	801a      	strh	r2, [r3, #0]
 8018f58:	183b      	adds	r3, r7, r0
 8018f5a:	183a      	adds	r2, r7, r0
 8018f5c:	8812      	ldrh	r2, [r2, #0]
 8018f5e:	2180      	movs	r1, #128	@ 0x80
 8018f60:	0149      	lsls	r1, r1, #5
 8018f62:	404a      	eors	r2, r1
 8018f64:	801a      	strh	r2, [r3, #0]
 8018f66:	183b      	adds	r3, r7, r0
 8018f68:	183a      	adds	r2, r7, r0
 8018f6a:	8812      	ldrh	r2, [r2, #0]
 8018f6c:	2180      	movs	r1, #128	@ 0x80
 8018f6e:	0189      	lsls	r1, r1, #6
 8018f70:	404a      	eors	r2, r1
 8018f72:	801a      	strh	r2, [r3, #0]
 8018f74:	687a      	ldr	r2, [r7, #4]
 8018f76:	683b      	ldr	r3, [r7, #0]
 8018f78:	781b      	ldrb	r3, [r3, #0]
 8018f7a:	009b      	lsls	r3, r3, #2
 8018f7c:	18d3      	adds	r3, r2, r3
 8018f7e:	183a      	adds	r2, r7, r0
 8018f80:	8812      	ldrh	r2, [r2, #0]
 8018f82:	4947      	ldr	r1, [pc, #284]	@ (80190a0 <USB_ActivateEndpoint+0x6b4>)
 8018f84:	430a      	orrs	r2, r1
 8018f86:	b292      	uxth	r2, r2
 8018f88:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018f8a:	687a      	ldr	r2, [r7, #4]
 8018f8c:	683b      	ldr	r3, [r7, #0]
 8018f8e:	781b      	ldrb	r3, [r3, #0]
 8018f90:	009b      	lsls	r3, r3, #2
 8018f92:	18d3      	adds	r3, r2, r3
 8018f94:	881b      	ldrh	r3, [r3, #0]
 8018f96:	b29a      	uxth	r2, r3
 8018f98:	2036      	movs	r0, #54	@ 0x36
 8018f9a:	183b      	adds	r3, r7, r0
 8018f9c:	4945      	ldr	r1, [pc, #276]	@ (80190b4 <USB_ActivateEndpoint+0x6c8>)
 8018f9e:	400a      	ands	r2, r1
 8018fa0:	801a      	strh	r2, [r3, #0]
 8018fa2:	687a      	ldr	r2, [r7, #4]
 8018fa4:	683b      	ldr	r3, [r7, #0]
 8018fa6:	781b      	ldrb	r3, [r3, #0]
 8018fa8:	009b      	lsls	r3, r3, #2
 8018faa:	18d3      	adds	r3, r2, r3
 8018fac:	183a      	adds	r2, r7, r0
 8018fae:	8812      	ldrh	r2, [r2, #0]
 8018fb0:	493b      	ldr	r1, [pc, #236]	@ (80190a0 <USB_ActivateEndpoint+0x6b4>)
 8018fb2:	430a      	orrs	r2, r1
 8018fb4:	b292      	uxth	r2, r2
 8018fb6:	801a      	strh	r2, [r3, #0]
 8018fb8:	e0ac      	b.n	8019114 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018fba:	687a      	ldr	r2, [r7, #4]
 8018fbc:	683b      	ldr	r3, [r7, #0]
 8018fbe:	781b      	ldrb	r3, [r3, #0]
 8018fc0:	009b      	lsls	r3, r3, #2
 8018fc2:	18d2      	adds	r2, r2, r3
 8018fc4:	214e      	movs	r1, #78	@ 0x4e
 8018fc6:	187b      	adds	r3, r7, r1
 8018fc8:	8812      	ldrh	r2, [r2, #0]
 8018fca:	801a      	strh	r2, [r3, #0]
 8018fcc:	187b      	adds	r3, r7, r1
 8018fce:	881a      	ldrh	r2, [r3, #0]
 8018fd0:	2380      	movs	r3, #128	@ 0x80
 8018fd2:	01db      	lsls	r3, r3, #7
 8018fd4:	4013      	ands	r3, r2
 8018fd6:	d016      	beq.n	8019006 <USB_ActivateEndpoint+0x61a>
 8018fd8:	687a      	ldr	r2, [r7, #4]
 8018fda:	683b      	ldr	r3, [r7, #0]
 8018fdc:	781b      	ldrb	r3, [r3, #0]
 8018fde:	009b      	lsls	r3, r3, #2
 8018fe0:	18d3      	adds	r3, r2, r3
 8018fe2:	881b      	ldrh	r3, [r3, #0]
 8018fe4:	b29a      	uxth	r2, r3
 8018fe6:	204c      	movs	r0, #76	@ 0x4c
 8018fe8:	183b      	adds	r3, r7, r0
 8018fea:	492a      	ldr	r1, [pc, #168]	@ (8019094 <USB_ActivateEndpoint+0x6a8>)
 8018fec:	400a      	ands	r2, r1
 8018fee:	801a      	strh	r2, [r3, #0]
 8018ff0:	687a      	ldr	r2, [r7, #4]
 8018ff2:	683b      	ldr	r3, [r7, #0]
 8018ff4:	781b      	ldrb	r3, [r3, #0]
 8018ff6:	009b      	lsls	r3, r3, #2
 8018ff8:	18d3      	adds	r3, r2, r3
 8018ffa:	183a      	adds	r2, r7, r0
 8018ffc:	8812      	ldrh	r2, [r2, #0]
 8018ffe:	4926      	ldr	r1, [pc, #152]	@ (8019098 <USB_ActivateEndpoint+0x6ac>)
 8019000:	430a      	orrs	r2, r1
 8019002:	b292      	uxth	r2, r2
 8019004:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019006:	687a      	ldr	r2, [r7, #4]
 8019008:	683b      	ldr	r3, [r7, #0]
 801900a:	781b      	ldrb	r3, [r3, #0]
 801900c:	009b      	lsls	r3, r3, #2
 801900e:	18d2      	adds	r2, r2, r3
 8019010:	214a      	movs	r1, #74	@ 0x4a
 8019012:	187b      	adds	r3, r7, r1
 8019014:	8812      	ldrh	r2, [r2, #0]
 8019016:	801a      	strh	r2, [r3, #0]
 8019018:	187b      	adds	r3, r7, r1
 801901a:	881b      	ldrh	r3, [r3, #0]
 801901c:	2240      	movs	r2, #64	@ 0x40
 801901e:	4013      	ands	r3, r2
 8019020:	d016      	beq.n	8019050 <USB_ActivateEndpoint+0x664>
 8019022:	687a      	ldr	r2, [r7, #4]
 8019024:	683b      	ldr	r3, [r7, #0]
 8019026:	781b      	ldrb	r3, [r3, #0]
 8019028:	009b      	lsls	r3, r3, #2
 801902a:	18d3      	adds	r3, r2, r3
 801902c:	881b      	ldrh	r3, [r3, #0]
 801902e:	b29a      	uxth	r2, r3
 8019030:	2048      	movs	r0, #72	@ 0x48
 8019032:	183b      	adds	r3, r7, r0
 8019034:	4917      	ldr	r1, [pc, #92]	@ (8019094 <USB_ActivateEndpoint+0x6a8>)
 8019036:	400a      	ands	r2, r1
 8019038:	801a      	strh	r2, [r3, #0]
 801903a:	687a      	ldr	r2, [r7, #4]
 801903c:	683b      	ldr	r3, [r7, #0]
 801903e:	781b      	ldrb	r3, [r3, #0]
 8019040:	009b      	lsls	r3, r3, #2
 8019042:	18d3      	adds	r3, r2, r3
 8019044:	183a      	adds	r2, r7, r0
 8019046:	8812      	ldrh	r2, [r2, #0]
 8019048:	4919      	ldr	r1, [pc, #100]	@ (80190b0 <USB_ActivateEndpoint+0x6c4>)
 801904a:	430a      	orrs	r2, r1
 801904c:	b292      	uxth	r2, r2
 801904e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019050:	683b      	ldr	r3, [r7, #0]
 8019052:	78db      	ldrb	r3, [r3, #3]
 8019054:	2b01      	cmp	r3, #1
 8019056:	d02f      	beq.n	80190b8 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8019058:	687a      	ldr	r2, [r7, #4]
 801905a:	683b      	ldr	r3, [r7, #0]
 801905c:	781b      	ldrb	r3, [r3, #0]
 801905e:	009b      	lsls	r3, r3, #2
 8019060:	18d3      	adds	r3, r2, r3
 8019062:	881b      	ldrh	r3, [r3, #0]
 8019064:	b29a      	uxth	r2, r3
 8019066:	2044      	movs	r0, #68	@ 0x44
 8019068:	183b      	adds	r3, r7, r0
 801906a:	4912      	ldr	r1, [pc, #72]	@ (80190b4 <USB_ActivateEndpoint+0x6c8>)
 801906c:	400a      	ands	r2, r1
 801906e:	801a      	strh	r2, [r3, #0]
 8019070:	183b      	adds	r3, r7, r0
 8019072:	183a      	adds	r2, r7, r0
 8019074:	8812      	ldrh	r2, [r2, #0]
 8019076:	2120      	movs	r1, #32
 8019078:	404a      	eors	r2, r1
 801907a:	801a      	strh	r2, [r3, #0]
 801907c:	687a      	ldr	r2, [r7, #4]
 801907e:	683b      	ldr	r3, [r7, #0]
 8019080:	781b      	ldrb	r3, [r3, #0]
 8019082:	009b      	lsls	r3, r3, #2
 8019084:	18d3      	adds	r3, r2, r3
 8019086:	183a      	adds	r2, r7, r0
 8019088:	8812      	ldrh	r2, [r2, #0]
 801908a:	4905      	ldr	r1, [pc, #20]	@ (80190a0 <USB_ActivateEndpoint+0x6b4>)
 801908c:	430a      	orrs	r2, r1
 801908e:	b292      	uxth	r2, r2
 8019090:	801a      	strh	r2, [r3, #0]
 8019092:	e028      	b.n	80190e6 <USB_ActivateEndpoint+0x6fa>
 8019094:	ffff8f8f 	.word	0xffff8f8f
 8019098:	ffffc080 	.word	0xffffc080
 801909c:	ffffbf8f 	.word	0xffffbf8f
 80190a0:	ffff8080 	.word	0xffff8080
 80190a4:	ffff8180 	.word	0xffff8180
 80190a8:	ffff8e8f 	.word	0xffff8e8f
 80190ac:	00000404 	.word	0x00000404
 80190b0:	ffff80c0 	.word	0xffff80c0
 80190b4:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80190b8:	687a      	ldr	r2, [r7, #4]
 80190ba:	683b      	ldr	r3, [r7, #0]
 80190bc:	781b      	ldrb	r3, [r3, #0]
 80190be:	009b      	lsls	r3, r3, #2
 80190c0:	18d3      	adds	r3, r2, r3
 80190c2:	881b      	ldrh	r3, [r3, #0]
 80190c4:	b29a      	uxth	r2, r3
 80190c6:	2046      	movs	r0, #70	@ 0x46
 80190c8:	183b      	adds	r3, r7, r0
 80190ca:	4916      	ldr	r1, [pc, #88]	@ (8019124 <USB_ActivateEndpoint+0x738>)
 80190cc:	400a      	ands	r2, r1
 80190ce:	801a      	strh	r2, [r3, #0]
 80190d0:	687a      	ldr	r2, [r7, #4]
 80190d2:	683b      	ldr	r3, [r7, #0]
 80190d4:	781b      	ldrb	r3, [r3, #0]
 80190d6:	009b      	lsls	r3, r3, #2
 80190d8:	18d3      	adds	r3, r2, r3
 80190da:	183a      	adds	r2, r7, r0
 80190dc:	8812      	ldrh	r2, [r2, #0]
 80190de:	4912      	ldr	r1, [pc, #72]	@ (8019128 <USB_ActivateEndpoint+0x73c>)
 80190e0:	430a      	orrs	r2, r1
 80190e2:	b292      	uxth	r2, r2
 80190e4:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80190e6:	687a      	ldr	r2, [r7, #4]
 80190e8:	683b      	ldr	r3, [r7, #0]
 80190ea:	781b      	ldrb	r3, [r3, #0]
 80190ec:	009b      	lsls	r3, r3, #2
 80190ee:	18d3      	adds	r3, r2, r3
 80190f0:	881b      	ldrh	r3, [r3, #0]
 80190f2:	b29a      	uxth	r2, r3
 80190f4:	2042      	movs	r0, #66	@ 0x42
 80190f6:	183b      	adds	r3, r7, r0
 80190f8:	490c      	ldr	r1, [pc, #48]	@ (801912c <USB_ActivateEndpoint+0x740>)
 80190fa:	400a      	ands	r2, r1
 80190fc:	801a      	strh	r2, [r3, #0]
 80190fe:	687a      	ldr	r2, [r7, #4]
 8019100:	683b      	ldr	r3, [r7, #0]
 8019102:	781b      	ldrb	r3, [r3, #0]
 8019104:	009b      	lsls	r3, r3, #2
 8019106:	18d3      	adds	r3, r2, r3
 8019108:	183a      	adds	r2, r7, r0
 801910a:	8812      	ldrh	r2, [r2, #0]
 801910c:	4906      	ldr	r1, [pc, #24]	@ (8019128 <USB_ActivateEndpoint+0x73c>)
 801910e:	430a      	orrs	r2, r1
 8019110:	b292      	uxth	r2, r2
 8019112:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8019114:	236f      	movs	r3, #111	@ 0x6f
 8019116:	18fb      	adds	r3, r7, r3
 8019118:	781b      	ldrb	r3, [r3, #0]
}
 801911a:	0018      	movs	r0, r3
 801911c:	46bd      	mov	sp, r7
 801911e:	b01c      	add	sp, #112	@ 0x70
 8019120:	bd80      	pop	{r7, pc}
 8019122:	46c0      	nop			@ (mov r8, r8)
 8019124:	ffff8fbf 	.word	0xffff8fbf
 8019128:	ffff8080 	.word	0xffff8080
 801912c:	ffffbf8f 	.word	0xffffbf8f

08019130 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019130:	b580      	push	{r7, lr}
 8019132:	b08c      	sub	sp, #48	@ 0x30
 8019134:	af00      	add	r7, sp, #0
 8019136:	6078      	str	r0, [r7, #4]
 8019138:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801913a:	683b      	ldr	r3, [r7, #0]
 801913c:	7b1b      	ldrb	r3, [r3, #12]
 801913e:	2b00      	cmp	r3, #0
 8019140:	d000      	beq.n	8019144 <USB_DeactivateEndpoint+0x14>
 8019142:	e07e      	b.n	8019242 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8019144:	683b      	ldr	r3, [r7, #0]
 8019146:	785b      	ldrb	r3, [r3, #1]
 8019148:	2b00      	cmp	r3, #0
 801914a:	d03c      	beq.n	80191c6 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801914c:	687a      	ldr	r2, [r7, #4]
 801914e:	683b      	ldr	r3, [r7, #0]
 8019150:	781b      	ldrb	r3, [r3, #0]
 8019152:	009b      	lsls	r3, r3, #2
 8019154:	18d2      	adds	r2, r2, r3
 8019156:	210c      	movs	r1, #12
 8019158:	187b      	adds	r3, r7, r1
 801915a:	8812      	ldrh	r2, [r2, #0]
 801915c:	801a      	strh	r2, [r3, #0]
 801915e:	187b      	adds	r3, r7, r1
 8019160:	881b      	ldrh	r3, [r3, #0]
 8019162:	2240      	movs	r2, #64	@ 0x40
 8019164:	4013      	ands	r3, r2
 8019166:	d016      	beq.n	8019196 <USB_DeactivateEndpoint+0x66>
 8019168:	687a      	ldr	r2, [r7, #4]
 801916a:	683b      	ldr	r3, [r7, #0]
 801916c:	781b      	ldrb	r3, [r3, #0]
 801916e:	009b      	lsls	r3, r3, #2
 8019170:	18d3      	adds	r3, r2, r3
 8019172:	881b      	ldrh	r3, [r3, #0]
 8019174:	b29a      	uxth	r2, r3
 8019176:	200a      	movs	r0, #10
 8019178:	183b      	adds	r3, r7, r0
 801917a:	49c7      	ldr	r1, [pc, #796]	@ (8019498 <USB_DeactivateEndpoint+0x368>)
 801917c:	400a      	ands	r2, r1
 801917e:	801a      	strh	r2, [r3, #0]
 8019180:	687a      	ldr	r2, [r7, #4]
 8019182:	683b      	ldr	r3, [r7, #0]
 8019184:	781b      	ldrb	r3, [r3, #0]
 8019186:	009b      	lsls	r3, r3, #2
 8019188:	18d3      	adds	r3, r2, r3
 801918a:	183a      	adds	r2, r7, r0
 801918c:	8812      	ldrh	r2, [r2, #0]
 801918e:	49c3      	ldr	r1, [pc, #780]	@ (801949c <USB_DeactivateEndpoint+0x36c>)
 8019190:	430a      	orrs	r2, r1
 8019192:	b292      	uxth	r2, r2
 8019194:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019196:	687a      	ldr	r2, [r7, #4]
 8019198:	683b      	ldr	r3, [r7, #0]
 801919a:	781b      	ldrb	r3, [r3, #0]
 801919c:	009b      	lsls	r3, r3, #2
 801919e:	18d3      	adds	r3, r2, r3
 80191a0:	881b      	ldrh	r3, [r3, #0]
 80191a2:	b29a      	uxth	r2, r3
 80191a4:	2008      	movs	r0, #8
 80191a6:	183b      	adds	r3, r7, r0
 80191a8:	49bd      	ldr	r1, [pc, #756]	@ (80194a0 <USB_DeactivateEndpoint+0x370>)
 80191aa:	400a      	ands	r2, r1
 80191ac:	801a      	strh	r2, [r3, #0]
 80191ae:	687a      	ldr	r2, [r7, #4]
 80191b0:	683b      	ldr	r3, [r7, #0]
 80191b2:	781b      	ldrb	r3, [r3, #0]
 80191b4:	009b      	lsls	r3, r3, #2
 80191b6:	18d3      	adds	r3, r2, r3
 80191b8:	183a      	adds	r2, r7, r0
 80191ba:	8812      	ldrh	r2, [r2, #0]
 80191bc:	49b9      	ldr	r1, [pc, #740]	@ (80194a4 <USB_DeactivateEndpoint+0x374>)
 80191be:	430a      	orrs	r2, r1
 80191c0:	b292      	uxth	r2, r2
 80191c2:	801a      	strh	r2, [r3, #0]
 80191c4:	e163      	b.n	801948e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80191c6:	687a      	ldr	r2, [r7, #4]
 80191c8:	683b      	ldr	r3, [r7, #0]
 80191ca:	781b      	ldrb	r3, [r3, #0]
 80191cc:	009b      	lsls	r3, r3, #2
 80191ce:	18d2      	adds	r2, r2, r3
 80191d0:	2112      	movs	r1, #18
 80191d2:	187b      	adds	r3, r7, r1
 80191d4:	8812      	ldrh	r2, [r2, #0]
 80191d6:	801a      	strh	r2, [r3, #0]
 80191d8:	187b      	adds	r3, r7, r1
 80191da:	881a      	ldrh	r2, [r3, #0]
 80191dc:	2380      	movs	r3, #128	@ 0x80
 80191de:	01db      	lsls	r3, r3, #7
 80191e0:	4013      	ands	r3, r2
 80191e2:	d016      	beq.n	8019212 <USB_DeactivateEndpoint+0xe2>
 80191e4:	687a      	ldr	r2, [r7, #4]
 80191e6:	683b      	ldr	r3, [r7, #0]
 80191e8:	781b      	ldrb	r3, [r3, #0]
 80191ea:	009b      	lsls	r3, r3, #2
 80191ec:	18d3      	adds	r3, r2, r3
 80191ee:	881b      	ldrh	r3, [r3, #0]
 80191f0:	b29a      	uxth	r2, r3
 80191f2:	2010      	movs	r0, #16
 80191f4:	183b      	adds	r3, r7, r0
 80191f6:	49a8      	ldr	r1, [pc, #672]	@ (8019498 <USB_DeactivateEndpoint+0x368>)
 80191f8:	400a      	ands	r2, r1
 80191fa:	801a      	strh	r2, [r3, #0]
 80191fc:	687a      	ldr	r2, [r7, #4]
 80191fe:	683b      	ldr	r3, [r7, #0]
 8019200:	781b      	ldrb	r3, [r3, #0]
 8019202:	009b      	lsls	r3, r3, #2
 8019204:	18d3      	adds	r3, r2, r3
 8019206:	183a      	adds	r2, r7, r0
 8019208:	8812      	ldrh	r2, [r2, #0]
 801920a:	49a7      	ldr	r1, [pc, #668]	@ (80194a8 <USB_DeactivateEndpoint+0x378>)
 801920c:	430a      	orrs	r2, r1
 801920e:	b292      	uxth	r2, r2
 8019210:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019212:	687a      	ldr	r2, [r7, #4]
 8019214:	683b      	ldr	r3, [r7, #0]
 8019216:	781b      	ldrb	r3, [r3, #0]
 8019218:	009b      	lsls	r3, r3, #2
 801921a:	18d3      	adds	r3, r2, r3
 801921c:	881b      	ldrh	r3, [r3, #0]
 801921e:	b29a      	uxth	r2, r3
 8019220:	200e      	movs	r0, #14
 8019222:	183b      	adds	r3, r7, r0
 8019224:	49a1      	ldr	r1, [pc, #644]	@ (80194ac <USB_DeactivateEndpoint+0x37c>)
 8019226:	400a      	ands	r2, r1
 8019228:	801a      	strh	r2, [r3, #0]
 801922a:	687a      	ldr	r2, [r7, #4]
 801922c:	683b      	ldr	r3, [r7, #0]
 801922e:	781b      	ldrb	r3, [r3, #0]
 8019230:	009b      	lsls	r3, r3, #2
 8019232:	18d3      	adds	r3, r2, r3
 8019234:	183a      	adds	r2, r7, r0
 8019236:	8812      	ldrh	r2, [r2, #0]
 8019238:	499a      	ldr	r1, [pc, #616]	@ (80194a4 <USB_DeactivateEndpoint+0x374>)
 801923a:	430a      	orrs	r2, r1
 801923c:	b292      	uxth	r2, r2
 801923e:	801a      	strh	r2, [r3, #0]
 8019240:	e125      	b.n	801948e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8019242:	683b      	ldr	r3, [r7, #0]
 8019244:	785b      	ldrb	r3, [r3, #1]
 8019246:	2b00      	cmp	r3, #0
 8019248:	d000      	beq.n	801924c <USB_DeactivateEndpoint+0x11c>
 801924a:	e090      	b.n	801936e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801924c:	687a      	ldr	r2, [r7, #4]
 801924e:	683b      	ldr	r3, [r7, #0]
 8019250:	781b      	ldrb	r3, [r3, #0]
 8019252:	009b      	lsls	r3, r3, #2
 8019254:	18d2      	adds	r2, r2, r3
 8019256:	2120      	movs	r1, #32
 8019258:	187b      	adds	r3, r7, r1
 801925a:	8812      	ldrh	r2, [r2, #0]
 801925c:	801a      	strh	r2, [r3, #0]
 801925e:	187b      	adds	r3, r7, r1
 8019260:	881a      	ldrh	r2, [r3, #0]
 8019262:	2380      	movs	r3, #128	@ 0x80
 8019264:	01db      	lsls	r3, r3, #7
 8019266:	4013      	ands	r3, r2
 8019268:	d016      	beq.n	8019298 <USB_DeactivateEndpoint+0x168>
 801926a:	687a      	ldr	r2, [r7, #4]
 801926c:	683b      	ldr	r3, [r7, #0]
 801926e:	781b      	ldrb	r3, [r3, #0]
 8019270:	009b      	lsls	r3, r3, #2
 8019272:	18d3      	adds	r3, r2, r3
 8019274:	881b      	ldrh	r3, [r3, #0]
 8019276:	b29a      	uxth	r2, r3
 8019278:	201e      	movs	r0, #30
 801927a:	183b      	adds	r3, r7, r0
 801927c:	4986      	ldr	r1, [pc, #536]	@ (8019498 <USB_DeactivateEndpoint+0x368>)
 801927e:	400a      	ands	r2, r1
 8019280:	801a      	strh	r2, [r3, #0]
 8019282:	687a      	ldr	r2, [r7, #4]
 8019284:	683b      	ldr	r3, [r7, #0]
 8019286:	781b      	ldrb	r3, [r3, #0]
 8019288:	009b      	lsls	r3, r3, #2
 801928a:	18d3      	adds	r3, r2, r3
 801928c:	183a      	adds	r2, r7, r0
 801928e:	8812      	ldrh	r2, [r2, #0]
 8019290:	4985      	ldr	r1, [pc, #532]	@ (80194a8 <USB_DeactivateEndpoint+0x378>)
 8019292:	430a      	orrs	r2, r1
 8019294:	b292      	uxth	r2, r2
 8019296:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019298:	687a      	ldr	r2, [r7, #4]
 801929a:	683b      	ldr	r3, [r7, #0]
 801929c:	781b      	ldrb	r3, [r3, #0]
 801929e:	009b      	lsls	r3, r3, #2
 80192a0:	18d2      	adds	r2, r2, r3
 80192a2:	211c      	movs	r1, #28
 80192a4:	187b      	adds	r3, r7, r1
 80192a6:	8812      	ldrh	r2, [r2, #0]
 80192a8:	801a      	strh	r2, [r3, #0]
 80192aa:	187b      	adds	r3, r7, r1
 80192ac:	881b      	ldrh	r3, [r3, #0]
 80192ae:	2240      	movs	r2, #64	@ 0x40
 80192b0:	4013      	ands	r3, r2
 80192b2:	d016      	beq.n	80192e2 <USB_DeactivateEndpoint+0x1b2>
 80192b4:	687a      	ldr	r2, [r7, #4]
 80192b6:	683b      	ldr	r3, [r7, #0]
 80192b8:	781b      	ldrb	r3, [r3, #0]
 80192ba:	009b      	lsls	r3, r3, #2
 80192bc:	18d3      	adds	r3, r2, r3
 80192be:	881b      	ldrh	r3, [r3, #0]
 80192c0:	b29a      	uxth	r2, r3
 80192c2:	201a      	movs	r0, #26
 80192c4:	183b      	adds	r3, r7, r0
 80192c6:	4974      	ldr	r1, [pc, #464]	@ (8019498 <USB_DeactivateEndpoint+0x368>)
 80192c8:	400a      	ands	r2, r1
 80192ca:	801a      	strh	r2, [r3, #0]
 80192cc:	687a      	ldr	r2, [r7, #4]
 80192ce:	683b      	ldr	r3, [r7, #0]
 80192d0:	781b      	ldrb	r3, [r3, #0]
 80192d2:	009b      	lsls	r3, r3, #2
 80192d4:	18d3      	adds	r3, r2, r3
 80192d6:	183a      	adds	r2, r7, r0
 80192d8:	8812      	ldrh	r2, [r2, #0]
 80192da:	4970      	ldr	r1, [pc, #448]	@ (801949c <USB_DeactivateEndpoint+0x36c>)
 80192dc:	430a      	orrs	r2, r1
 80192de:	b292      	uxth	r2, r2
 80192e0:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80192e2:	687a      	ldr	r2, [r7, #4]
 80192e4:	683b      	ldr	r3, [r7, #0]
 80192e6:	781b      	ldrb	r3, [r3, #0]
 80192e8:	009b      	lsls	r3, r3, #2
 80192ea:	18d3      	adds	r3, r2, r3
 80192ec:	881b      	ldrh	r3, [r3, #0]
 80192ee:	b29a      	uxth	r2, r3
 80192f0:	2018      	movs	r0, #24
 80192f2:	183b      	adds	r3, r7, r0
 80192f4:	4968      	ldr	r1, [pc, #416]	@ (8019498 <USB_DeactivateEndpoint+0x368>)
 80192f6:	400a      	ands	r2, r1
 80192f8:	801a      	strh	r2, [r3, #0]
 80192fa:	687a      	ldr	r2, [r7, #4]
 80192fc:	683b      	ldr	r3, [r7, #0]
 80192fe:	781b      	ldrb	r3, [r3, #0]
 8019300:	009b      	lsls	r3, r3, #2
 8019302:	18d3      	adds	r3, r2, r3
 8019304:	183a      	adds	r2, r7, r0
 8019306:	8812      	ldrh	r2, [r2, #0]
 8019308:	4964      	ldr	r1, [pc, #400]	@ (801949c <USB_DeactivateEndpoint+0x36c>)
 801930a:	430a      	orrs	r2, r1
 801930c:	b292      	uxth	r2, r2
 801930e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019310:	687a      	ldr	r2, [r7, #4]
 8019312:	683b      	ldr	r3, [r7, #0]
 8019314:	781b      	ldrb	r3, [r3, #0]
 8019316:	009b      	lsls	r3, r3, #2
 8019318:	18d3      	adds	r3, r2, r3
 801931a:	881b      	ldrh	r3, [r3, #0]
 801931c:	b29a      	uxth	r2, r3
 801931e:	2016      	movs	r0, #22
 8019320:	183b      	adds	r3, r7, r0
 8019322:	4962      	ldr	r1, [pc, #392]	@ (80194ac <USB_DeactivateEndpoint+0x37c>)
 8019324:	400a      	ands	r2, r1
 8019326:	801a      	strh	r2, [r3, #0]
 8019328:	687a      	ldr	r2, [r7, #4]
 801932a:	683b      	ldr	r3, [r7, #0]
 801932c:	781b      	ldrb	r3, [r3, #0]
 801932e:	009b      	lsls	r3, r3, #2
 8019330:	18d3      	adds	r3, r2, r3
 8019332:	183a      	adds	r2, r7, r0
 8019334:	8812      	ldrh	r2, [r2, #0]
 8019336:	495b      	ldr	r1, [pc, #364]	@ (80194a4 <USB_DeactivateEndpoint+0x374>)
 8019338:	430a      	orrs	r2, r1
 801933a:	b292      	uxth	r2, r2
 801933c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801933e:	687a      	ldr	r2, [r7, #4]
 8019340:	683b      	ldr	r3, [r7, #0]
 8019342:	781b      	ldrb	r3, [r3, #0]
 8019344:	009b      	lsls	r3, r3, #2
 8019346:	18d3      	adds	r3, r2, r3
 8019348:	881b      	ldrh	r3, [r3, #0]
 801934a:	b29a      	uxth	r2, r3
 801934c:	2014      	movs	r0, #20
 801934e:	183b      	adds	r3, r7, r0
 8019350:	4953      	ldr	r1, [pc, #332]	@ (80194a0 <USB_DeactivateEndpoint+0x370>)
 8019352:	400a      	ands	r2, r1
 8019354:	801a      	strh	r2, [r3, #0]
 8019356:	687a      	ldr	r2, [r7, #4]
 8019358:	683b      	ldr	r3, [r7, #0]
 801935a:	781b      	ldrb	r3, [r3, #0]
 801935c:	009b      	lsls	r3, r3, #2
 801935e:	18d3      	adds	r3, r2, r3
 8019360:	183a      	adds	r2, r7, r0
 8019362:	8812      	ldrh	r2, [r2, #0]
 8019364:	494f      	ldr	r1, [pc, #316]	@ (80194a4 <USB_DeactivateEndpoint+0x374>)
 8019366:	430a      	orrs	r2, r1
 8019368:	b292      	uxth	r2, r2
 801936a:	801a      	strh	r2, [r3, #0]
 801936c:	e08f      	b.n	801948e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801936e:	687a      	ldr	r2, [r7, #4]
 8019370:	683b      	ldr	r3, [r7, #0]
 8019372:	781b      	ldrb	r3, [r3, #0]
 8019374:	009b      	lsls	r3, r3, #2
 8019376:	18d2      	adds	r2, r2, r3
 8019378:	212e      	movs	r1, #46	@ 0x2e
 801937a:	187b      	adds	r3, r7, r1
 801937c:	8812      	ldrh	r2, [r2, #0]
 801937e:	801a      	strh	r2, [r3, #0]
 8019380:	187b      	adds	r3, r7, r1
 8019382:	881a      	ldrh	r2, [r3, #0]
 8019384:	2380      	movs	r3, #128	@ 0x80
 8019386:	01db      	lsls	r3, r3, #7
 8019388:	4013      	ands	r3, r2
 801938a:	d016      	beq.n	80193ba <USB_DeactivateEndpoint+0x28a>
 801938c:	687a      	ldr	r2, [r7, #4]
 801938e:	683b      	ldr	r3, [r7, #0]
 8019390:	781b      	ldrb	r3, [r3, #0]
 8019392:	009b      	lsls	r3, r3, #2
 8019394:	18d3      	adds	r3, r2, r3
 8019396:	881b      	ldrh	r3, [r3, #0]
 8019398:	b29a      	uxth	r2, r3
 801939a:	202c      	movs	r0, #44	@ 0x2c
 801939c:	183b      	adds	r3, r7, r0
 801939e:	493e      	ldr	r1, [pc, #248]	@ (8019498 <USB_DeactivateEndpoint+0x368>)
 80193a0:	400a      	ands	r2, r1
 80193a2:	801a      	strh	r2, [r3, #0]
 80193a4:	687a      	ldr	r2, [r7, #4]
 80193a6:	683b      	ldr	r3, [r7, #0]
 80193a8:	781b      	ldrb	r3, [r3, #0]
 80193aa:	009b      	lsls	r3, r3, #2
 80193ac:	18d3      	adds	r3, r2, r3
 80193ae:	183a      	adds	r2, r7, r0
 80193b0:	8812      	ldrh	r2, [r2, #0]
 80193b2:	493d      	ldr	r1, [pc, #244]	@ (80194a8 <USB_DeactivateEndpoint+0x378>)
 80193b4:	430a      	orrs	r2, r1
 80193b6:	b292      	uxth	r2, r2
 80193b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80193ba:	687a      	ldr	r2, [r7, #4]
 80193bc:	683b      	ldr	r3, [r7, #0]
 80193be:	781b      	ldrb	r3, [r3, #0]
 80193c0:	009b      	lsls	r3, r3, #2
 80193c2:	18d2      	adds	r2, r2, r3
 80193c4:	212a      	movs	r1, #42	@ 0x2a
 80193c6:	187b      	adds	r3, r7, r1
 80193c8:	8812      	ldrh	r2, [r2, #0]
 80193ca:	801a      	strh	r2, [r3, #0]
 80193cc:	187b      	adds	r3, r7, r1
 80193ce:	881b      	ldrh	r3, [r3, #0]
 80193d0:	2240      	movs	r2, #64	@ 0x40
 80193d2:	4013      	ands	r3, r2
 80193d4:	d016      	beq.n	8019404 <USB_DeactivateEndpoint+0x2d4>
 80193d6:	687a      	ldr	r2, [r7, #4]
 80193d8:	683b      	ldr	r3, [r7, #0]
 80193da:	781b      	ldrb	r3, [r3, #0]
 80193dc:	009b      	lsls	r3, r3, #2
 80193de:	18d3      	adds	r3, r2, r3
 80193e0:	881b      	ldrh	r3, [r3, #0]
 80193e2:	b29a      	uxth	r2, r3
 80193e4:	2028      	movs	r0, #40	@ 0x28
 80193e6:	183b      	adds	r3, r7, r0
 80193e8:	492b      	ldr	r1, [pc, #172]	@ (8019498 <USB_DeactivateEndpoint+0x368>)
 80193ea:	400a      	ands	r2, r1
 80193ec:	801a      	strh	r2, [r3, #0]
 80193ee:	687a      	ldr	r2, [r7, #4]
 80193f0:	683b      	ldr	r3, [r7, #0]
 80193f2:	781b      	ldrb	r3, [r3, #0]
 80193f4:	009b      	lsls	r3, r3, #2
 80193f6:	18d3      	adds	r3, r2, r3
 80193f8:	183a      	adds	r2, r7, r0
 80193fa:	8812      	ldrh	r2, [r2, #0]
 80193fc:	4927      	ldr	r1, [pc, #156]	@ (801949c <USB_DeactivateEndpoint+0x36c>)
 80193fe:	430a      	orrs	r2, r1
 8019400:	b292      	uxth	r2, r2
 8019402:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8019404:	687a      	ldr	r2, [r7, #4]
 8019406:	683b      	ldr	r3, [r7, #0]
 8019408:	781b      	ldrb	r3, [r3, #0]
 801940a:	009b      	lsls	r3, r3, #2
 801940c:	18d3      	adds	r3, r2, r3
 801940e:	881b      	ldrh	r3, [r3, #0]
 8019410:	b29a      	uxth	r2, r3
 8019412:	2026      	movs	r0, #38	@ 0x26
 8019414:	183b      	adds	r3, r7, r0
 8019416:	4920      	ldr	r1, [pc, #128]	@ (8019498 <USB_DeactivateEndpoint+0x368>)
 8019418:	400a      	ands	r2, r1
 801941a:	801a      	strh	r2, [r3, #0]
 801941c:	687a      	ldr	r2, [r7, #4]
 801941e:	683b      	ldr	r3, [r7, #0]
 8019420:	781b      	ldrb	r3, [r3, #0]
 8019422:	009b      	lsls	r3, r3, #2
 8019424:	18d3      	adds	r3, r2, r3
 8019426:	183a      	adds	r2, r7, r0
 8019428:	8812      	ldrh	r2, [r2, #0]
 801942a:	491f      	ldr	r1, [pc, #124]	@ (80194a8 <USB_DeactivateEndpoint+0x378>)
 801942c:	430a      	orrs	r2, r1
 801942e:	b292      	uxth	r2, r2
 8019430:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019432:	687a      	ldr	r2, [r7, #4]
 8019434:	683b      	ldr	r3, [r7, #0]
 8019436:	781b      	ldrb	r3, [r3, #0]
 8019438:	009b      	lsls	r3, r3, #2
 801943a:	18d3      	adds	r3, r2, r3
 801943c:	881b      	ldrh	r3, [r3, #0]
 801943e:	b29a      	uxth	r2, r3
 8019440:	2024      	movs	r0, #36	@ 0x24
 8019442:	183b      	adds	r3, r7, r0
 8019444:	4916      	ldr	r1, [pc, #88]	@ (80194a0 <USB_DeactivateEndpoint+0x370>)
 8019446:	400a      	ands	r2, r1
 8019448:	801a      	strh	r2, [r3, #0]
 801944a:	687a      	ldr	r2, [r7, #4]
 801944c:	683b      	ldr	r3, [r7, #0]
 801944e:	781b      	ldrb	r3, [r3, #0]
 8019450:	009b      	lsls	r3, r3, #2
 8019452:	18d3      	adds	r3, r2, r3
 8019454:	183a      	adds	r2, r7, r0
 8019456:	8812      	ldrh	r2, [r2, #0]
 8019458:	4912      	ldr	r1, [pc, #72]	@ (80194a4 <USB_DeactivateEndpoint+0x374>)
 801945a:	430a      	orrs	r2, r1
 801945c:	b292      	uxth	r2, r2
 801945e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019460:	687a      	ldr	r2, [r7, #4]
 8019462:	683b      	ldr	r3, [r7, #0]
 8019464:	781b      	ldrb	r3, [r3, #0]
 8019466:	009b      	lsls	r3, r3, #2
 8019468:	18d3      	adds	r3, r2, r3
 801946a:	881b      	ldrh	r3, [r3, #0]
 801946c:	b29a      	uxth	r2, r3
 801946e:	2022      	movs	r0, #34	@ 0x22
 8019470:	183b      	adds	r3, r7, r0
 8019472:	490e      	ldr	r1, [pc, #56]	@ (80194ac <USB_DeactivateEndpoint+0x37c>)
 8019474:	400a      	ands	r2, r1
 8019476:	801a      	strh	r2, [r3, #0]
 8019478:	687a      	ldr	r2, [r7, #4]
 801947a:	683b      	ldr	r3, [r7, #0]
 801947c:	781b      	ldrb	r3, [r3, #0]
 801947e:	009b      	lsls	r3, r3, #2
 8019480:	18d3      	adds	r3, r2, r3
 8019482:	183a      	adds	r2, r7, r0
 8019484:	8812      	ldrh	r2, [r2, #0]
 8019486:	4907      	ldr	r1, [pc, #28]	@ (80194a4 <USB_DeactivateEndpoint+0x374>)
 8019488:	430a      	orrs	r2, r1
 801948a:	b292      	uxth	r2, r2
 801948c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801948e:	2300      	movs	r3, #0
}
 8019490:	0018      	movs	r0, r3
 8019492:	46bd      	mov	sp, r7
 8019494:	b00c      	add	sp, #48	@ 0x30
 8019496:	bd80      	pop	{r7, pc}
 8019498:	ffff8f8f 	.word	0xffff8f8f
 801949c:	ffff80c0 	.word	0xffff80c0
 80194a0:	ffff8fbf 	.word	0xffff8fbf
 80194a4:	ffff8080 	.word	0xffff8080
 80194a8:	ffffc080 	.word	0xffffc080
 80194ac:	ffffbf8f 	.word	0xffffbf8f

080194b0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80194b0:	b590      	push	{r4, r7, lr}
 80194b2:	b0c3      	sub	sp, #268	@ 0x10c
 80194b4:	af00      	add	r7, sp, #0
 80194b6:	6078      	str	r0, [r7, #4]
 80194b8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80194ba:	683b      	ldr	r3, [r7, #0]
 80194bc:	785b      	ldrb	r3, [r3, #1]
 80194be:	2b01      	cmp	r3, #1
 80194c0:	d001      	beq.n	80194c6 <USB_EPStartXfer+0x16>
 80194c2:	f000 fd2d 	bl	8019f20 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80194c6:	683b      	ldr	r3, [r7, #0]
 80194c8:	699a      	ldr	r2, [r3, #24]
 80194ca:	683b      	ldr	r3, [r7, #0]
 80194cc:	691b      	ldr	r3, [r3, #16]
 80194ce:	429a      	cmp	r2, r3
 80194d0:	d905      	bls.n	80194de <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80194d2:	683b      	ldr	r3, [r7, #0]
 80194d4:	691b      	ldr	r3, [r3, #16]
 80194d6:	1d7a      	adds	r2, r7, #5
 80194d8:	32ff      	adds	r2, #255	@ 0xff
 80194da:	6013      	str	r3, [r2, #0]
 80194dc:	e004      	b.n	80194e8 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80194de:	683b      	ldr	r3, [r7, #0]
 80194e0:	699b      	ldr	r3, [r3, #24]
 80194e2:	1d7a      	adds	r2, r7, #5
 80194e4:	32ff      	adds	r2, #255	@ 0xff
 80194e6:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80194e8:	683b      	ldr	r3, [r7, #0]
 80194ea:	7b1b      	ldrb	r3, [r3, #12]
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d125      	bne.n	801953c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80194f0:	683b      	ldr	r3, [r7, #0]
 80194f2:	6959      	ldr	r1, [r3, #20]
 80194f4:	683b      	ldr	r3, [r7, #0]
 80194f6:	88da      	ldrh	r2, [r3, #6]
 80194f8:	1d7b      	adds	r3, r7, #5
 80194fa:	33ff      	adds	r3, #255	@ 0xff
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	b29b      	uxth	r3, r3
 8019500:	6878      	ldr	r0, [r7, #4]
 8019502:	f001 fa47 	bl	801a994 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	613b      	str	r3, [r7, #16]
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	2250      	movs	r2, #80	@ 0x50
 801950e:	5a9b      	ldrh	r3, [r3, r2]
 8019510:	b29b      	uxth	r3, r3
 8019512:	001a      	movs	r2, r3
 8019514:	693b      	ldr	r3, [r7, #16]
 8019516:	189b      	adds	r3, r3, r2
 8019518:	613b      	str	r3, [r7, #16]
 801951a:	683b      	ldr	r3, [r7, #0]
 801951c:	781b      	ldrb	r3, [r3, #0]
 801951e:	00da      	lsls	r2, r3, #3
 8019520:	693b      	ldr	r3, [r7, #16]
 8019522:	18d3      	adds	r3, r2, r3
 8019524:	4ad7      	ldr	r2, [pc, #860]	@ (8019884 <USB_EPStartXfer+0x3d4>)
 8019526:	4694      	mov	ip, r2
 8019528:	4463      	add	r3, ip
 801952a:	60fb      	str	r3, [r7, #12]
 801952c:	1d7b      	adds	r3, r7, #5
 801952e:	33ff      	adds	r3, #255	@ 0xff
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	b29a      	uxth	r2, r3
 8019534:	68fb      	ldr	r3, [r7, #12]
 8019536:	801a      	strh	r2, [r3, #0]
 8019538:	f000 fccd 	bl	8019ed6 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801953c:	683b      	ldr	r3, [r7, #0]
 801953e:	78db      	ldrb	r3, [r3, #3]
 8019540:	2b02      	cmp	r3, #2
 8019542:	d000      	beq.n	8019546 <USB_EPStartXfer+0x96>
 8019544:	e362      	b.n	8019c0c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8019546:	683b      	ldr	r3, [r7, #0]
 8019548:	6a1a      	ldr	r2, [r3, #32]
 801954a:	683b      	ldr	r3, [r7, #0]
 801954c:	691b      	ldr	r3, [r3, #16]
 801954e:	429a      	cmp	r2, r3
 8019550:	d800      	bhi.n	8019554 <USB_EPStartXfer+0xa4>
 8019552:	e309      	b.n	8019b68 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8019554:	687a      	ldr	r2, [r7, #4]
 8019556:	683b      	ldr	r3, [r7, #0]
 8019558:	781b      	ldrb	r3, [r3, #0]
 801955a:	009b      	lsls	r3, r3, #2
 801955c:	18d3      	adds	r3, r2, r3
 801955e:	881b      	ldrh	r3, [r3, #0]
 8019560:	b29a      	uxth	r2, r3
 8019562:	2056      	movs	r0, #86	@ 0x56
 8019564:	183b      	adds	r3, r7, r0
 8019566:	49c8      	ldr	r1, [pc, #800]	@ (8019888 <USB_EPStartXfer+0x3d8>)
 8019568:	400a      	ands	r2, r1
 801956a:	801a      	strh	r2, [r3, #0]
 801956c:	687a      	ldr	r2, [r7, #4]
 801956e:	683b      	ldr	r3, [r7, #0]
 8019570:	781b      	ldrb	r3, [r3, #0]
 8019572:	009b      	lsls	r3, r3, #2
 8019574:	18d3      	adds	r3, r2, r3
 8019576:	183a      	adds	r2, r7, r0
 8019578:	8812      	ldrh	r2, [r2, #0]
 801957a:	49c4      	ldr	r1, [pc, #784]	@ (801988c <USB_EPStartXfer+0x3dc>)
 801957c:	430a      	orrs	r2, r1
 801957e:	b292      	uxth	r2, r2
 8019580:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8019582:	683b      	ldr	r3, [r7, #0]
 8019584:	6a1a      	ldr	r2, [r3, #32]
 8019586:	1d7b      	adds	r3, r7, #5
 8019588:	33ff      	adds	r3, #255	@ 0xff
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	1ad2      	subs	r2, r2, r3
 801958e:	683b      	ldr	r3, [r7, #0]
 8019590:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8019592:	687a      	ldr	r2, [r7, #4]
 8019594:	683b      	ldr	r3, [r7, #0]
 8019596:	781b      	ldrb	r3, [r3, #0]
 8019598:	009b      	lsls	r3, r3, #2
 801959a:	18d3      	adds	r3, r2, r3
 801959c:	881b      	ldrh	r3, [r3, #0]
 801959e:	b29b      	uxth	r3, r3
 80195a0:	001a      	movs	r2, r3
 80195a2:	2340      	movs	r3, #64	@ 0x40
 80195a4:	4013      	ands	r3, r2
 80195a6:	d100      	bne.n	80195aa <USB_EPStartXfer+0xfa>
 80195a8:	e176      	b.n	8019898 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80195ae:	683b      	ldr	r3, [r7, #0]
 80195b0:	785b      	ldrb	r3, [r3, #1]
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d000      	beq.n	80195b8 <USB_EPStartXfer+0x108>
 80195b6:	e074      	b.n	80196a2 <USB_EPStartXfer+0x1f2>
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	2250      	movs	r2, #80	@ 0x50
 80195c0:	5a9b      	ldrh	r3, [r3, r2]
 80195c2:	b29b      	uxth	r3, r3
 80195c4:	001a      	movs	r2, r3
 80195c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195c8:	189b      	adds	r3, r3, r2
 80195ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80195cc:	683b      	ldr	r3, [r7, #0]
 80195ce:	781b      	ldrb	r3, [r3, #0]
 80195d0:	00da      	lsls	r2, r3, #3
 80195d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195d4:	18d3      	adds	r3, r2, r3
 80195d6:	4aae      	ldr	r2, [pc, #696]	@ (8019890 <USB_EPStartXfer+0x3e0>)
 80195d8:	4694      	mov	ip, r2
 80195da:	4463      	add	r3, ip
 80195dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80195de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195e0:	881b      	ldrh	r3, [r3, #0]
 80195e2:	b29b      	uxth	r3, r3
 80195e4:	059b      	lsls	r3, r3, #22
 80195e6:	0d9b      	lsrs	r3, r3, #22
 80195e8:	b29a      	uxth	r2, r3
 80195ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195ec:	801a      	strh	r2, [r3, #0]
 80195ee:	1d7b      	adds	r3, r7, #5
 80195f0:	33ff      	adds	r3, #255	@ 0xff
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80195f6:	d924      	bls.n	8019642 <USB_EPStartXfer+0x192>
 80195f8:	1d7b      	adds	r3, r7, #5
 80195fa:	33ff      	adds	r3, #255	@ 0xff
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	095b      	lsrs	r3, r3, #5
 8019600:	1c7a      	adds	r2, r7, #1
 8019602:	32ff      	adds	r2, #255	@ 0xff
 8019604:	6013      	str	r3, [r2, #0]
 8019606:	1d7b      	adds	r3, r7, #5
 8019608:	33ff      	adds	r3, #255	@ 0xff
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	221f      	movs	r2, #31
 801960e:	4013      	ands	r3, r2
 8019610:	d106      	bne.n	8019620 <USB_EPStartXfer+0x170>
 8019612:	1c7b      	adds	r3, r7, #1
 8019614:	33ff      	adds	r3, #255	@ 0xff
 8019616:	681b      	ldr	r3, [r3, #0]
 8019618:	3b01      	subs	r3, #1
 801961a:	1c7a      	adds	r2, r7, #1
 801961c:	32ff      	adds	r2, #255	@ 0xff
 801961e:	6013      	str	r3, [r2, #0]
 8019620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019622:	881b      	ldrh	r3, [r3, #0]
 8019624:	b29a      	uxth	r2, r3
 8019626:	1c7b      	adds	r3, r7, #1
 8019628:	33ff      	adds	r3, #255	@ 0xff
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	b29b      	uxth	r3, r3
 801962e:	029b      	lsls	r3, r3, #10
 8019630:	b29b      	uxth	r3, r3
 8019632:	4313      	orrs	r3, r2
 8019634:	b29b      	uxth	r3, r3
 8019636:	4a97      	ldr	r2, [pc, #604]	@ (8019894 <USB_EPStartXfer+0x3e4>)
 8019638:	4313      	orrs	r3, r2
 801963a:	b29a      	uxth	r2, r3
 801963c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801963e:	801a      	strh	r2, [r3, #0]
 8019640:	e04a      	b.n	80196d8 <USB_EPStartXfer+0x228>
 8019642:	1d7b      	adds	r3, r7, #5
 8019644:	33ff      	adds	r3, #255	@ 0xff
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	2b00      	cmp	r3, #0
 801964a:	d108      	bne.n	801965e <USB_EPStartXfer+0x1ae>
 801964c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801964e:	881b      	ldrh	r3, [r3, #0]
 8019650:	b29b      	uxth	r3, r3
 8019652:	4a90      	ldr	r2, [pc, #576]	@ (8019894 <USB_EPStartXfer+0x3e4>)
 8019654:	4313      	orrs	r3, r2
 8019656:	b29a      	uxth	r2, r3
 8019658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801965a:	801a      	strh	r2, [r3, #0]
 801965c:	e03c      	b.n	80196d8 <USB_EPStartXfer+0x228>
 801965e:	1d7b      	adds	r3, r7, #5
 8019660:	33ff      	adds	r3, #255	@ 0xff
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	085b      	lsrs	r3, r3, #1
 8019666:	1c7a      	adds	r2, r7, #1
 8019668:	32ff      	adds	r2, #255	@ 0xff
 801966a:	6013      	str	r3, [r2, #0]
 801966c:	1d7b      	adds	r3, r7, #5
 801966e:	33ff      	adds	r3, #255	@ 0xff
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	2201      	movs	r2, #1
 8019674:	4013      	ands	r3, r2
 8019676:	d006      	beq.n	8019686 <USB_EPStartXfer+0x1d6>
 8019678:	1c7b      	adds	r3, r7, #1
 801967a:	33ff      	adds	r3, #255	@ 0xff
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	3301      	adds	r3, #1
 8019680:	1c7a      	adds	r2, r7, #1
 8019682:	32ff      	adds	r2, #255	@ 0xff
 8019684:	6013      	str	r3, [r2, #0]
 8019686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019688:	881b      	ldrh	r3, [r3, #0]
 801968a:	b29a      	uxth	r2, r3
 801968c:	1c7b      	adds	r3, r7, #1
 801968e:	33ff      	adds	r3, #255	@ 0xff
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	b29b      	uxth	r3, r3
 8019694:	029b      	lsls	r3, r3, #10
 8019696:	b29b      	uxth	r3, r3
 8019698:	4313      	orrs	r3, r2
 801969a:	b29a      	uxth	r2, r3
 801969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801969e:	801a      	strh	r2, [r3, #0]
 80196a0:	e01a      	b.n	80196d8 <USB_EPStartXfer+0x228>
 80196a2:	683b      	ldr	r3, [r7, #0]
 80196a4:	785b      	ldrb	r3, [r3, #1]
 80196a6:	2b01      	cmp	r3, #1
 80196a8:	d116      	bne.n	80196d8 <USB_EPStartXfer+0x228>
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	2250      	movs	r2, #80	@ 0x50
 80196ae:	5a9b      	ldrh	r3, [r3, r2]
 80196b0:	b29b      	uxth	r3, r3
 80196b2:	001a      	movs	r2, r3
 80196b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80196b6:	189b      	adds	r3, r3, r2
 80196b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80196ba:	683b      	ldr	r3, [r7, #0]
 80196bc:	781b      	ldrb	r3, [r3, #0]
 80196be:	00da      	lsls	r2, r3, #3
 80196c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80196c2:	18d3      	adds	r3, r2, r3
 80196c4:	4a72      	ldr	r2, [pc, #456]	@ (8019890 <USB_EPStartXfer+0x3e0>)
 80196c6:	4694      	mov	ip, r2
 80196c8:	4463      	add	r3, ip
 80196ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80196cc:	1d7b      	adds	r3, r7, #5
 80196ce:	33ff      	adds	r3, #255	@ 0xff
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	b29a      	uxth	r2, r3
 80196d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80196d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80196d8:	2076      	movs	r0, #118	@ 0x76
 80196da:	183b      	adds	r3, r7, r0
 80196dc:	683a      	ldr	r2, [r7, #0]
 80196de:	8952      	ldrh	r2, [r2, #10]
 80196e0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80196e2:	683b      	ldr	r3, [r7, #0]
 80196e4:	6959      	ldr	r1, [r3, #20]
 80196e6:	1d7b      	adds	r3, r7, #5
 80196e8:	33ff      	adds	r3, #255	@ 0xff
 80196ea:	681b      	ldr	r3, [r3, #0]
 80196ec:	b29c      	uxth	r4, r3
 80196ee:	183b      	adds	r3, r7, r0
 80196f0:	881a      	ldrh	r2, [r3, #0]
 80196f2:	6878      	ldr	r0, [r7, #4]
 80196f4:	0023      	movs	r3, r4
 80196f6:	f001 f94d 	bl	801a994 <USB_WritePMA>
            ep->xfer_buff += len;
 80196fa:	683b      	ldr	r3, [r7, #0]
 80196fc:	695a      	ldr	r2, [r3, #20]
 80196fe:	1d7b      	adds	r3, r7, #5
 8019700:	33ff      	adds	r3, #255	@ 0xff
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	18d2      	adds	r2, r2, r3
 8019706:	683b      	ldr	r3, [r7, #0]
 8019708:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801970a:	683b      	ldr	r3, [r7, #0]
 801970c:	6a1a      	ldr	r2, [r3, #32]
 801970e:	683b      	ldr	r3, [r7, #0]
 8019710:	691b      	ldr	r3, [r3, #16]
 8019712:	429a      	cmp	r2, r3
 8019714:	d908      	bls.n	8019728 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8019716:	683b      	ldr	r3, [r7, #0]
 8019718:	6a1a      	ldr	r2, [r3, #32]
 801971a:	1d7b      	adds	r3, r7, #5
 801971c:	33ff      	adds	r3, #255	@ 0xff
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	1ad2      	subs	r2, r2, r3
 8019722:	683b      	ldr	r3, [r7, #0]
 8019724:	621a      	str	r2, [r3, #32]
 8019726:	e007      	b.n	8019738 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8019728:	683b      	ldr	r3, [r7, #0]
 801972a:	6a1b      	ldr	r3, [r3, #32]
 801972c:	1d7a      	adds	r2, r7, #5
 801972e:	32ff      	adds	r2, #255	@ 0xff
 8019730:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8019732:	683b      	ldr	r3, [r7, #0]
 8019734:	2200      	movs	r2, #0
 8019736:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019738:	683b      	ldr	r3, [r7, #0]
 801973a:	785b      	ldrb	r3, [r3, #1]
 801973c:	2b00      	cmp	r3, #0
 801973e:	d000      	beq.n	8019742 <USB_EPStartXfer+0x292>
 8019740:	e070      	b.n	8019824 <USB_EPStartXfer+0x374>
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	61bb      	str	r3, [r7, #24]
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	2250      	movs	r2, #80	@ 0x50
 801974a:	5a9b      	ldrh	r3, [r3, r2]
 801974c:	b29b      	uxth	r3, r3
 801974e:	001a      	movs	r2, r3
 8019750:	69bb      	ldr	r3, [r7, #24]
 8019752:	189b      	adds	r3, r3, r2
 8019754:	61bb      	str	r3, [r7, #24]
 8019756:	683b      	ldr	r3, [r7, #0]
 8019758:	781b      	ldrb	r3, [r3, #0]
 801975a:	00da      	lsls	r2, r3, #3
 801975c:	69bb      	ldr	r3, [r7, #24]
 801975e:	18d3      	adds	r3, r2, r3
 8019760:	4a48      	ldr	r2, [pc, #288]	@ (8019884 <USB_EPStartXfer+0x3d4>)
 8019762:	4694      	mov	ip, r2
 8019764:	4463      	add	r3, ip
 8019766:	617b      	str	r3, [r7, #20]
 8019768:	697b      	ldr	r3, [r7, #20]
 801976a:	881b      	ldrh	r3, [r3, #0]
 801976c:	b29b      	uxth	r3, r3
 801976e:	059b      	lsls	r3, r3, #22
 8019770:	0d9b      	lsrs	r3, r3, #22
 8019772:	b29a      	uxth	r2, r3
 8019774:	697b      	ldr	r3, [r7, #20]
 8019776:	801a      	strh	r2, [r3, #0]
 8019778:	1d7b      	adds	r3, r7, #5
 801977a:	33ff      	adds	r3, #255	@ 0xff
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019780:	d922      	bls.n	80197c8 <USB_EPStartXfer+0x318>
 8019782:	1d7b      	adds	r3, r7, #5
 8019784:	33ff      	adds	r3, #255	@ 0xff
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	095b      	lsrs	r3, r3, #5
 801978a:	21fc      	movs	r1, #252	@ 0xfc
 801978c:	187a      	adds	r2, r7, r1
 801978e:	6013      	str	r3, [r2, #0]
 8019790:	1d7b      	adds	r3, r7, #5
 8019792:	33ff      	adds	r3, #255	@ 0xff
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	221f      	movs	r2, #31
 8019798:	4013      	ands	r3, r2
 801979a:	d104      	bne.n	80197a6 <USB_EPStartXfer+0x2f6>
 801979c:	187b      	adds	r3, r7, r1
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	3b01      	subs	r3, #1
 80197a2:	187a      	adds	r2, r7, r1
 80197a4:	6013      	str	r3, [r2, #0]
 80197a6:	697b      	ldr	r3, [r7, #20]
 80197a8:	881b      	ldrh	r3, [r3, #0]
 80197aa:	b29a      	uxth	r2, r3
 80197ac:	23fc      	movs	r3, #252	@ 0xfc
 80197ae:	18fb      	adds	r3, r7, r3
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	b29b      	uxth	r3, r3
 80197b4:	029b      	lsls	r3, r3, #10
 80197b6:	b29b      	uxth	r3, r3
 80197b8:	4313      	orrs	r3, r2
 80197ba:	b29b      	uxth	r3, r3
 80197bc:	4a35      	ldr	r2, [pc, #212]	@ (8019894 <USB_EPStartXfer+0x3e4>)
 80197be:	4313      	orrs	r3, r2
 80197c0:	b29a      	uxth	r2, r3
 80197c2:	697b      	ldr	r3, [r7, #20]
 80197c4:	801a      	strh	r2, [r3, #0]
 80197c6:	e04a      	b.n	801985e <USB_EPStartXfer+0x3ae>
 80197c8:	1d7b      	adds	r3, r7, #5
 80197ca:	33ff      	adds	r3, #255	@ 0xff
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d108      	bne.n	80197e4 <USB_EPStartXfer+0x334>
 80197d2:	697b      	ldr	r3, [r7, #20]
 80197d4:	881b      	ldrh	r3, [r3, #0]
 80197d6:	b29b      	uxth	r3, r3
 80197d8:	4a2e      	ldr	r2, [pc, #184]	@ (8019894 <USB_EPStartXfer+0x3e4>)
 80197da:	4313      	orrs	r3, r2
 80197dc:	b29a      	uxth	r2, r3
 80197de:	697b      	ldr	r3, [r7, #20]
 80197e0:	801a      	strh	r2, [r3, #0]
 80197e2:	e03c      	b.n	801985e <USB_EPStartXfer+0x3ae>
 80197e4:	1d7b      	adds	r3, r7, #5
 80197e6:	33ff      	adds	r3, #255	@ 0xff
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	085b      	lsrs	r3, r3, #1
 80197ec:	21fc      	movs	r1, #252	@ 0xfc
 80197ee:	187a      	adds	r2, r7, r1
 80197f0:	6013      	str	r3, [r2, #0]
 80197f2:	1d7b      	adds	r3, r7, #5
 80197f4:	33ff      	adds	r3, #255	@ 0xff
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	2201      	movs	r2, #1
 80197fa:	4013      	ands	r3, r2
 80197fc:	d004      	beq.n	8019808 <USB_EPStartXfer+0x358>
 80197fe:	187b      	adds	r3, r7, r1
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	3301      	adds	r3, #1
 8019804:	187a      	adds	r2, r7, r1
 8019806:	6013      	str	r3, [r2, #0]
 8019808:	697b      	ldr	r3, [r7, #20]
 801980a:	881b      	ldrh	r3, [r3, #0]
 801980c:	b29a      	uxth	r2, r3
 801980e:	23fc      	movs	r3, #252	@ 0xfc
 8019810:	18fb      	adds	r3, r7, r3
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	b29b      	uxth	r3, r3
 8019816:	029b      	lsls	r3, r3, #10
 8019818:	b29b      	uxth	r3, r3
 801981a:	4313      	orrs	r3, r2
 801981c:	b29a      	uxth	r2, r3
 801981e:	697b      	ldr	r3, [r7, #20]
 8019820:	801a      	strh	r2, [r3, #0]
 8019822:	e01c      	b.n	801985e <USB_EPStartXfer+0x3ae>
 8019824:	683b      	ldr	r3, [r7, #0]
 8019826:	785b      	ldrb	r3, [r3, #1]
 8019828:	2b01      	cmp	r3, #1
 801982a:	d118      	bne.n	801985e <USB_EPStartXfer+0x3ae>
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	623b      	str	r3, [r7, #32]
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	2250      	movs	r2, #80	@ 0x50
 8019834:	5a9b      	ldrh	r3, [r3, r2]
 8019836:	b29b      	uxth	r3, r3
 8019838:	001a      	movs	r2, r3
 801983a:	6a3b      	ldr	r3, [r7, #32]
 801983c:	189b      	adds	r3, r3, r2
 801983e:	623b      	str	r3, [r7, #32]
 8019840:	683b      	ldr	r3, [r7, #0]
 8019842:	781b      	ldrb	r3, [r3, #0]
 8019844:	00da      	lsls	r2, r3, #3
 8019846:	6a3b      	ldr	r3, [r7, #32]
 8019848:	18d3      	adds	r3, r2, r3
 801984a:	4a0e      	ldr	r2, [pc, #56]	@ (8019884 <USB_EPStartXfer+0x3d4>)
 801984c:	4694      	mov	ip, r2
 801984e:	4463      	add	r3, ip
 8019850:	61fb      	str	r3, [r7, #28]
 8019852:	1d7b      	adds	r3, r7, #5
 8019854:	33ff      	adds	r3, #255	@ 0xff
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	b29a      	uxth	r2, r3
 801985a:	69fb      	ldr	r3, [r7, #28]
 801985c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801985e:	2076      	movs	r0, #118	@ 0x76
 8019860:	183b      	adds	r3, r7, r0
 8019862:	683a      	ldr	r2, [r7, #0]
 8019864:	8912      	ldrh	r2, [r2, #8]
 8019866:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019868:	683b      	ldr	r3, [r7, #0]
 801986a:	6959      	ldr	r1, [r3, #20]
 801986c:	1d7b      	adds	r3, r7, #5
 801986e:	33ff      	adds	r3, #255	@ 0xff
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	b29c      	uxth	r4, r3
 8019874:	183b      	adds	r3, r7, r0
 8019876:	881a      	ldrh	r2, [r3, #0]
 8019878:	6878      	ldr	r0, [r7, #4]
 801987a:	0023      	movs	r3, r4
 801987c:	f001 f88a 	bl	801a994 <USB_WritePMA>
 8019880:	e329      	b.n	8019ed6 <USB_EPStartXfer+0xa26>
 8019882:	46c0      	nop			@ (mov r8, r8)
 8019884:	00000402 	.word	0x00000402
 8019888:	ffff8f8f 	.word	0xffff8f8f
 801988c:	ffff8180 	.word	0xffff8180
 8019890:	00000406 	.word	0x00000406
 8019894:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019898:	683b      	ldr	r3, [r7, #0]
 801989a:	785b      	ldrb	r3, [r3, #1]
 801989c:	2b00      	cmp	r3, #0
 801989e:	d000      	beq.n	80198a2 <USB_EPStartXfer+0x3f2>
 80198a0:	e070      	b.n	8019984 <USB_EPStartXfer+0x4d4>
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	2250      	movs	r2, #80	@ 0x50
 80198aa:	5a9b      	ldrh	r3, [r3, r2]
 80198ac:	b29b      	uxth	r3, r3
 80198ae:	001a      	movs	r2, r3
 80198b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80198b2:	189b      	adds	r3, r3, r2
 80198b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80198b6:	683b      	ldr	r3, [r7, #0]
 80198b8:	781b      	ldrb	r3, [r3, #0]
 80198ba:	00da      	lsls	r2, r3, #3
 80198bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80198be:	18d3      	adds	r3, r2, r3
 80198c0:	4acd      	ldr	r2, [pc, #820]	@ (8019bf8 <USB_EPStartXfer+0x748>)
 80198c2:	4694      	mov	ip, r2
 80198c4:	4463      	add	r3, ip
 80198c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80198c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80198ca:	881b      	ldrh	r3, [r3, #0]
 80198cc:	b29b      	uxth	r3, r3
 80198ce:	059b      	lsls	r3, r3, #22
 80198d0:	0d9b      	lsrs	r3, r3, #22
 80198d2:	b29a      	uxth	r2, r3
 80198d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80198d6:	801a      	strh	r2, [r3, #0]
 80198d8:	1d7b      	adds	r3, r7, #5
 80198da:	33ff      	adds	r3, #255	@ 0xff
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	2b3e      	cmp	r3, #62	@ 0x3e
 80198e0:	d922      	bls.n	8019928 <USB_EPStartXfer+0x478>
 80198e2:	1d7b      	adds	r3, r7, #5
 80198e4:	33ff      	adds	r3, #255	@ 0xff
 80198e6:	681b      	ldr	r3, [r3, #0]
 80198e8:	095b      	lsrs	r3, r3, #5
 80198ea:	21f8      	movs	r1, #248	@ 0xf8
 80198ec:	187a      	adds	r2, r7, r1
 80198ee:	6013      	str	r3, [r2, #0]
 80198f0:	1d7b      	adds	r3, r7, #5
 80198f2:	33ff      	adds	r3, #255	@ 0xff
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	221f      	movs	r2, #31
 80198f8:	4013      	ands	r3, r2
 80198fa:	d104      	bne.n	8019906 <USB_EPStartXfer+0x456>
 80198fc:	187b      	adds	r3, r7, r1
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	3b01      	subs	r3, #1
 8019902:	187a      	adds	r2, r7, r1
 8019904:	6013      	str	r3, [r2, #0]
 8019906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019908:	881b      	ldrh	r3, [r3, #0]
 801990a:	b29a      	uxth	r2, r3
 801990c:	23f8      	movs	r3, #248	@ 0xf8
 801990e:	18fb      	adds	r3, r7, r3
 8019910:	681b      	ldr	r3, [r3, #0]
 8019912:	b29b      	uxth	r3, r3
 8019914:	029b      	lsls	r3, r3, #10
 8019916:	b29b      	uxth	r3, r3
 8019918:	4313      	orrs	r3, r2
 801991a:	b29b      	uxth	r3, r3
 801991c:	4ab7      	ldr	r2, [pc, #732]	@ (8019bfc <USB_EPStartXfer+0x74c>)
 801991e:	4313      	orrs	r3, r2
 8019920:	b29a      	uxth	r2, r3
 8019922:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019924:	801a      	strh	r2, [r3, #0]
 8019926:	e04a      	b.n	80199be <USB_EPStartXfer+0x50e>
 8019928:	1d7b      	adds	r3, r7, #5
 801992a:	33ff      	adds	r3, #255	@ 0xff
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	2b00      	cmp	r3, #0
 8019930:	d108      	bne.n	8019944 <USB_EPStartXfer+0x494>
 8019932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019934:	881b      	ldrh	r3, [r3, #0]
 8019936:	b29b      	uxth	r3, r3
 8019938:	4ab0      	ldr	r2, [pc, #704]	@ (8019bfc <USB_EPStartXfer+0x74c>)
 801993a:	4313      	orrs	r3, r2
 801993c:	b29a      	uxth	r2, r3
 801993e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019940:	801a      	strh	r2, [r3, #0]
 8019942:	e03c      	b.n	80199be <USB_EPStartXfer+0x50e>
 8019944:	1d7b      	adds	r3, r7, #5
 8019946:	33ff      	adds	r3, #255	@ 0xff
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	085b      	lsrs	r3, r3, #1
 801994c:	21f8      	movs	r1, #248	@ 0xf8
 801994e:	187a      	adds	r2, r7, r1
 8019950:	6013      	str	r3, [r2, #0]
 8019952:	1d7b      	adds	r3, r7, #5
 8019954:	33ff      	adds	r3, #255	@ 0xff
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	2201      	movs	r2, #1
 801995a:	4013      	ands	r3, r2
 801995c:	d004      	beq.n	8019968 <USB_EPStartXfer+0x4b8>
 801995e:	187b      	adds	r3, r7, r1
 8019960:	681b      	ldr	r3, [r3, #0]
 8019962:	3301      	adds	r3, #1
 8019964:	187a      	adds	r2, r7, r1
 8019966:	6013      	str	r3, [r2, #0]
 8019968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801996a:	881b      	ldrh	r3, [r3, #0]
 801996c:	b29a      	uxth	r2, r3
 801996e:	23f8      	movs	r3, #248	@ 0xf8
 8019970:	18fb      	adds	r3, r7, r3
 8019972:	681b      	ldr	r3, [r3, #0]
 8019974:	b29b      	uxth	r3, r3
 8019976:	029b      	lsls	r3, r3, #10
 8019978:	b29b      	uxth	r3, r3
 801997a:	4313      	orrs	r3, r2
 801997c:	b29a      	uxth	r2, r3
 801997e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019980:	801a      	strh	r2, [r3, #0]
 8019982:	e01c      	b.n	80199be <USB_EPStartXfer+0x50e>
 8019984:	683b      	ldr	r3, [r7, #0]
 8019986:	785b      	ldrb	r3, [r3, #1]
 8019988:	2b01      	cmp	r3, #1
 801998a:	d118      	bne.n	80199be <USB_EPStartXfer+0x50e>
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	653b      	str	r3, [r7, #80]	@ 0x50
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	2250      	movs	r2, #80	@ 0x50
 8019994:	5a9b      	ldrh	r3, [r3, r2]
 8019996:	b29b      	uxth	r3, r3
 8019998:	001a      	movs	r2, r3
 801999a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801999c:	189b      	adds	r3, r3, r2
 801999e:	653b      	str	r3, [r7, #80]	@ 0x50
 80199a0:	683b      	ldr	r3, [r7, #0]
 80199a2:	781b      	ldrb	r3, [r3, #0]
 80199a4:	00da      	lsls	r2, r3, #3
 80199a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80199a8:	18d3      	adds	r3, r2, r3
 80199aa:	4a93      	ldr	r2, [pc, #588]	@ (8019bf8 <USB_EPStartXfer+0x748>)
 80199ac:	4694      	mov	ip, r2
 80199ae:	4463      	add	r3, ip
 80199b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80199b2:	1d7b      	adds	r3, r7, #5
 80199b4:	33ff      	adds	r3, #255	@ 0xff
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	b29a      	uxth	r2, r3
 80199ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80199bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80199be:	2076      	movs	r0, #118	@ 0x76
 80199c0:	183b      	adds	r3, r7, r0
 80199c2:	683a      	ldr	r2, [r7, #0]
 80199c4:	8912      	ldrh	r2, [r2, #8]
 80199c6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80199c8:	683b      	ldr	r3, [r7, #0]
 80199ca:	6959      	ldr	r1, [r3, #20]
 80199cc:	1d7b      	adds	r3, r7, #5
 80199ce:	33ff      	adds	r3, #255	@ 0xff
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	b29c      	uxth	r4, r3
 80199d4:	183b      	adds	r3, r7, r0
 80199d6:	881a      	ldrh	r2, [r3, #0]
 80199d8:	6878      	ldr	r0, [r7, #4]
 80199da:	0023      	movs	r3, r4
 80199dc:	f000 ffda 	bl	801a994 <USB_WritePMA>
            ep->xfer_buff += len;
 80199e0:	683b      	ldr	r3, [r7, #0]
 80199e2:	695a      	ldr	r2, [r3, #20]
 80199e4:	1d7b      	adds	r3, r7, #5
 80199e6:	33ff      	adds	r3, #255	@ 0xff
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	18d2      	adds	r2, r2, r3
 80199ec:	683b      	ldr	r3, [r7, #0]
 80199ee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80199f0:	683b      	ldr	r3, [r7, #0]
 80199f2:	6a1a      	ldr	r2, [r3, #32]
 80199f4:	683b      	ldr	r3, [r7, #0]
 80199f6:	691b      	ldr	r3, [r3, #16]
 80199f8:	429a      	cmp	r2, r3
 80199fa:	d908      	bls.n	8019a0e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80199fc:	683b      	ldr	r3, [r7, #0]
 80199fe:	6a1a      	ldr	r2, [r3, #32]
 8019a00:	1d7b      	adds	r3, r7, #5
 8019a02:	33ff      	adds	r3, #255	@ 0xff
 8019a04:	681b      	ldr	r3, [r3, #0]
 8019a06:	1ad2      	subs	r2, r2, r3
 8019a08:	683b      	ldr	r3, [r7, #0]
 8019a0a:	621a      	str	r2, [r3, #32]
 8019a0c:	e007      	b.n	8019a1e <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8019a0e:	683b      	ldr	r3, [r7, #0]
 8019a10:	6a1b      	ldr	r3, [r3, #32]
 8019a12:	1d7a      	adds	r2, r7, #5
 8019a14:	32ff      	adds	r2, #255	@ 0xff
 8019a16:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8019a18:	683b      	ldr	r3, [r7, #0]
 8019a1a:	2200      	movs	r2, #0
 8019a1c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	643b      	str	r3, [r7, #64]	@ 0x40
 8019a22:	683b      	ldr	r3, [r7, #0]
 8019a24:	785b      	ldrb	r3, [r3, #1]
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d000      	beq.n	8019a2c <USB_EPStartXfer+0x57c>
 8019a2a:	e070      	b.n	8019b0e <USB_EPStartXfer+0x65e>
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	2250      	movs	r2, #80	@ 0x50
 8019a34:	5a9b      	ldrh	r3, [r3, r2]
 8019a36:	b29b      	uxth	r3, r3
 8019a38:	001a      	movs	r2, r3
 8019a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a3c:	189b      	adds	r3, r3, r2
 8019a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019a40:	683b      	ldr	r3, [r7, #0]
 8019a42:	781b      	ldrb	r3, [r3, #0]
 8019a44:	00da      	lsls	r2, r3, #3
 8019a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a48:	18d3      	adds	r3, r2, r3
 8019a4a:	4a6d      	ldr	r2, [pc, #436]	@ (8019c00 <USB_EPStartXfer+0x750>)
 8019a4c:	4694      	mov	ip, r2
 8019a4e:	4463      	add	r3, ip
 8019a50:	637b      	str	r3, [r7, #52]	@ 0x34
 8019a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a54:	881b      	ldrh	r3, [r3, #0]
 8019a56:	b29b      	uxth	r3, r3
 8019a58:	059b      	lsls	r3, r3, #22
 8019a5a:	0d9b      	lsrs	r3, r3, #22
 8019a5c:	b29a      	uxth	r2, r3
 8019a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a60:	801a      	strh	r2, [r3, #0]
 8019a62:	1d7b      	adds	r3, r7, #5
 8019a64:	33ff      	adds	r3, #255	@ 0xff
 8019a66:	681b      	ldr	r3, [r3, #0]
 8019a68:	2b3e      	cmp	r3, #62	@ 0x3e
 8019a6a:	d922      	bls.n	8019ab2 <USB_EPStartXfer+0x602>
 8019a6c:	1d7b      	adds	r3, r7, #5
 8019a6e:	33ff      	adds	r3, #255	@ 0xff
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	095b      	lsrs	r3, r3, #5
 8019a74:	21f4      	movs	r1, #244	@ 0xf4
 8019a76:	187a      	adds	r2, r7, r1
 8019a78:	6013      	str	r3, [r2, #0]
 8019a7a:	1d7b      	adds	r3, r7, #5
 8019a7c:	33ff      	adds	r3, #255	@ 0xff
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	221f      	movs	r2, #31
 8019a82:	4013      	ands	r3, r2
 8019a84:	d104      	bne.n	8019a90 <USB_EPStartXfer+0x5e0>
 8019a86:	187b      	adds	r3, r7, r1
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	3b01      	subs	r3, #1
 8019a8c:	187a      	adds	r2, r7, r1
 8019a8e:	6013      	str	r3, [r2, #0]
 8019a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a92:	881b      	ldrh	r3, [r3, #0]
 8019a94:	b29a      	uxth	r2, r3
 8019a96:	23f4      	movs	r3, #244	@ 0xf4
 8019a98:	18fb      	adds	r3, r7, r3
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	b29b      	uxth	r3, r3
 8019a9e:	029b      	lsls	r3, r3, #10
 8019aa0:	b29b      	uxth	r3, r3
 8019aa2:	4313      	orrs	r3, r2
 8019aa4:	b29b      	uxth	r3, r3
 8019aa6:	4a55      	ldr	r2, [pc, #340]	@ (8019bfc <USB_EPStartXfer+0x74c>)
 8019aa8:	4313      	orrs	r3, r2
 8019aaa:	b29a      	uxth	r2, r3
 8019aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019aae:	801a      	strh	r2, [r3, #0]
 8019ab0:	e048      	b.n	8019b44 <USB_EPStartXfer+0x694>
 8019ab2:	1d7b      	adds	r3, r7, #5
 8019ab4:	33ff      	adds	r3, #255	@ 0xff
 8019ab6:	681b      	ldr	r3, [r3, #0]
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	d108      	bne.n	8019ace <USB_EPStartXfer+0x61e>
 8019abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019abe:	881b      	ldrh	r3, [r3, #0]
 8019ac0:	b29b      	uxth	r3, r3
 8019ac2:	4a4e      	ldr	r2, [pc, #312]	@ (8019bfc <USB_EPStartXfer+0x74c>)
 8019ac4:	4313      	orrs	r3, r2
 8019ac6:	b29a      	uxth	r2, r3
 8019ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019aca:	801a      	strh	r2, [r3, #0]
 8019acc:	e03a      	b.n	8019b44 <USB_EPStartXfer+0x694>
 8019ace:	1d7b      	adds	r3, r7, #5
 8019ad0:	33ff      	adds	r3, #255	@ 0xff
 8019ad2:	681b      	ldr	r3, [r3, #0]
 8019ad4:	085b      	lsrs	r3, r3, #1
 8019ad6:	21f4      	movs	r1, #244	@ 0xf4
 8019ad8:	187a      	adds	r2, r7, r1
 8019ada:	6013      	str	r3, [r2, #0]
 8019adc:	1d7b      	adds	r3, r7, #5
 8019ade:	33ff      	adds	r3, #255	@ 0xff
 8019ae0:	681b      	ldr	r3, [r3, #0]
 8019ae2:	2201      	movs	r2, #1
 8019ae4:	4013      	ands	r3, r2
 8019ae6:	d004      	beq.n	8019af2 <USB_EPStartXfer+0x642>
 8019ae8:	187b      	adds	r3, r7, r1
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	3301      	adds	r3, #1
 8019aee:	187a      	adds	r2, r7, r1
 8019af0:	6013      	str	r3, [r2, #0]
 8019af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019af4:	881b      	ldrh	r3, [r3, #0]
 8019af6:	b29a      	uxth	r2, r3
 8019af8:	23f4      	movs	r3, #244	@ 0xf4
 8019afa:	18fb      	adds	r3, r7, r3
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	b29b      	uxth	r3, r3
 8019b00:	029b      	lsls	r3, r3, #10
 8019b02:	b29b      	uxth	r3, r3
 8019b04:	4313      	orrs	r3, r2
 8019b06:	b29a      	uxth	r2, r3
 8019b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b0a:	801a      	strh	r2, [r3, #0]
 8019b0c:	e01a      	b.n	8019b44 <USB_EPStartXfer+0x694>
 8019b0e:	683b      	ldr	r3, [r7, #0]
 8019b10:	785b      	ldrb	r3, [r3, #1]
 8019b12:	2b01      	cmp	r3, #1
 8019b14:	d116      	bne.n	8019b44 <USB_EPStartXfer+0x694>
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	2250      	movs	r2, #80	@ 0x50
 8019b1a:	5a9b      	ldrh	r3, [r3, r2]
 8019b1c:	b29b      	uxth	r3, r3
 8019b1e:	001a      	movs	r2, r3
 8019b20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b22:	189b      	adds	r3, r3, r2
 8019b24:	643b      	str	r3, [r7, #64]	@ 0x40
 8019b26:	683b      	ldr	r3, [r7, #0]
 8019b28:	781b      	ldrb	r3, [r3, #0]
 8019b2a:	00da      	lsls	r2, r3, #3
 8019b2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b2e:	18d3      	adds	r3, r2, r3
 8019b30:	4a33      	ldr	r2, [pc, #204]	@ (8019c00 <USB_EPStartXfer+0x750>)
 8019b32:	4694      	mov	ip, r2
 8019b34:	4463      	add	r3, ip
 8019b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019b38:	1d7b      	adds	r3, r7, #5
 8019b3a:	33ff      	adds	r3, #255	@ 0xff
 8019b3c:	681b      	ldr	r3, [r3, #0]
 8019b3e:	b29a      	uxth	r2, r3
 8019b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019b42:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8019b44:	2076      	movs	r0, #118	@ 0x76
 8019b46:	183b      	adds	r3, r7, r0
 8019b48:	683a      	ldr	r2, [r7, #0]
 8019b4a:	8952      	ldrh	r2, [r2, #10]
 8019b4c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019b4e:	683b      	ldr	r3, [r7, #0]
 8019b50:	6959      	ldr	r1, [r3, #20]
 8019b52:	1d7b      	adds	r3, r7, #5
 8019b54:	33ff      	adds	r3, #255	@ 0xff
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	b29c      	uxth	r4, r3
 8019b5a:	183b      	adds	r3, r7, r0
 8019b5c:	881a      	ldrh	r2, [r3, #0]
 8019b5e:	6878      	ldr	r0, [r7, #4]
 8019b60:	0023      	movs	r3, r4
 8019b62:	f000 ff17 	bl	801a994 <USB_WritePMA>
 8019b66:	e1b6      	b.n	8019ed6 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8019b68:	683b      	ldr	r3, [r7, #0]
 8019b6a:	6a1b      	ldr	r3, [r3, #32]
 8019b6c:	1d7a      	adds	r2, r7, #5
 8019b6e:	32ff      	adds	r2, #255	@ 0xff
 8019b70:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8019b72:	687a      	ldr	r2, [r7, #4]
 8019b74:	683b      	ldr	r3, [r7, #0]
 8019b76:	781b      	ldrb	r3, [r3, #0]
 8019b78:	009b      	lsls	r3, r3, #2
 8019b7a:	18d3      	adds	r3, r2, r3
 8019b7c:	881b      	ldrh	r3, [r3, #0]
 8019b7e:	b29a      	uxth	r2, r3
 8019b80:	2062      	movs	r0, #98	@ 0x62
 8019b82:	183b      	adds	r3, r7, r0
 8019b84:	491f      	ldr	r1, [pc, #124]	@ (8019c04 <USB_EPStartXfer+0x754>)
 8019b86:	400a      	ands	r2, r1
 8019b88:	801a      	strh	r2, [r3, #0]
 8019b8a:	687a      	ldr	r2, [r7, #4]
 8019b8c:	683b      	ldr	r3, [r7, #0]
 8019b8e:	781b      	ldrb	r3, [r3, #0]
 8019b90:	009b      	lsls	r3, r3, #2
 8019b92:	18d3      	adds	r3, r2, r3
 8019b94:	183a      	adds	r2, r7, r0
 8019b96:	8812      	ldrh	r2, [r2, #0]
 8019b98:	491b      	ldr	r1, [pc, #108]	@ (8019c08 <USB_EPStartXfer+0x758>)
 8019b9a:	430a      	orrs	r2, r1
 8019b9c:	b292      	uxth	r2, r2
 8019b9e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	2250      	movs	r2, #80	@ 0x50
 8019ba8:	5a9b      	ldrh	r3, [r3, r2]
 8019baa:	b29b      	uxth	r3, r3
 8019bac:	001a      	movs	r2, r3
 8019bae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019bb0:	189b      	adds	r3, r3, r2
 8019bb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019bb4:	683b      	ldr	r3, [r7, #0]
 8019bb6:	781b      	ldrb	r3, [r3, #0]
 8019bb8:	00da      	lsls	r2, r3, #3
 8019bba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019bbc:	18d3      	adds	r3, r2, r3
 8019bbe:	4a0e      	ldr	r2, [pc, #56]	@ (8019bf8 <USB_EPStartXfer+0x748>)
 8019bc0:	4694      	mov	ip, r2
 8019bc2:	4463      	add	r3, ip
 8019bc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019bc6:	1d7b      	adds	r3, r7, #5
 8019bc8:	33ff      	adds	r3, #255	@ 0xff
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	b29a      	uxth	r2, r3
 8019bce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019bd0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8019bd2:	2076      	movs	r0, #118	@ 0x76
 8019bd4:	183b      	adds	r3, r7, r0
 8019bd6:	683a      	ldr	r2, [r7, #0]
 8019bd8:	8912      	ldrh	r2, [r2, #8]
 8019bda:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019bdc:	683b      	ldr	r3, [r7, #0]
 8019bde:	6959      	ldr	r1, [r3, #20]
 8019be0:	1d7b      	adds	r3, r7, #5
 8019be2:	33ff      	adds	r3, #255	@ 0xff
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	b29c      	uxth	r4, r3
 8019be8:	183b      	adds	r3, r7, r0
 8019bea:	881a      	ldrh	r2, [r3, #0]
 8019bec:	6878      	ldr	r0, [r7, #4]
 8019bee:	0023      	movs	r3, r4
 8019bf0:	f000 fed0 	bl	801a994 <USB_WritePMA>
 8019bf4:	e16f      	b.n	8019ed6 <USB_EPStartXfer+0xa26>
 8019bf6:	46c0      	nop			@ (mov r8, r8)
 8019bf8:	00000402 	.word	0x00000402
 8019bfc:	ffff8000 	.word	0xffff8000
 8019c00:	00000406 	.word	0x00000406
 8019c04:	ffff8e8f 	.word	0xffff8e8f
 8019c08:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8019c0c:	683b      	ldr	r3, [r7, #0]
 8019c0e:	6a1a      	ldr	r2, [r3, #32]
 8019c10:	1d7b      	adds	r3, r7, #5
 8019c12:	33ff      	adds	r3, #255	@ 0xff
 8019c14:	681b      	ldr	r3, [r3, #0]
 8019c16:	1ad2      	subs	r2, r2, r3
 8019c18:	683b      	ldr	r3, [r7, #0]
 8019c1a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8019c1c:	687a      	ldr	r2, [r7, #4]
 8019c1e:	683b      	ldr	r3, [r7, #0]
 8019c20:	781b      	ldrb	r3, [r3, #0]
 8019c22:	009b      	lsls	r3, r3, #2
 8019c24:	18d3      	adds	r3, r2, r3
 8019c26:	881b      	ldrh	r3, [r3, #0]
 8019c28:	b29b      	uxth	r3, r3
 8019c2a:	001a      	movs	r2, r3
 8019c2c:	2340      	movs	r3, #64	@ 0x40
 8019c2e:	4013      	ands	r3, r2
 8019c30:	d100      	bne.n	8019c34 <USB_EPStartXfer+0x784>
 8019c32:	e0a4      	b.n	8019d7e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	673b      	str	r3, [r7, #112]	@ 0x70
 8019c38:	683b      	ldr	r3, [r7, #0]
 8019c3a:	785b      	ldrb	r3, [r3, #1]
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d000      	beq.n	8019c42 <USB_EPStartXfer+0x792>
 8019c40:	e070      	b.n	8019d24 <USB_EPStartXfer+0x874>
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	2250      	movs	r2, #80	@ 0x50
 8019c4a:	5a9b      	ldrh	r3, [r3, r2]
 8019c4c:	b29b      	uxth	r3, r3
 8019c4e:	001a      	movs	r2, r3
 8019c50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019c52:	189b      	adds	r3, r3, r2
 8019c54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019c56:	683b      	ldr	r3, [r7, #0]
 8019c58:	781b      	ldrb	r3, [r3, #0]
 8019c5a:	00da      	lsls	r2, r3, #3
 8019c5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019c5e:	18d3      	adds	r3, r2, r3
 8019c60:	4abc      	ldr	r2, [pc, #752]	@ (8019f54 <USB_EPStartXfer+0xaa4>)
 8019c62:	4694      	mov	ip, r2
 8019c64:	4463      	add	r3, ip
 8019c66:	667b      	str	r3, [r7, #100]	@ 0x64
 8019c68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019c6a:	881b      	ldrh	r3, [r3, #0]
 8019c6c:	b29b      	uxth	r3, r3
 8019c6e:	059b      	lsls	r3, r3, #22
 8019c70:	0d9b      	lsrs	r3, r3, #22
 8019c72:	b29a      	uxth	r2, r3
 8019c74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019c76:	801a      	strh	r2, [r3, #0]
 8019c78:	1d7b      	adds	r3, r7, #5
 8019c7a:	33ff      	adds	r3, #255	@ 0xff
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019c80:	d922      	bls.n	8019cc8 <USB_EPStartXfer+0x818>
 8019c82:	1d7b      	adds	r3, r7, #5
 8019c84:	33ff      	adds	r3, #255	@ 0xff
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	095b      	lsrs	r3, r3, #5
 8019c8a:	21f0      	movs	r1, #240	@ 0xf0
 8019c8c:	187a      	adds	r2, r7, r1
 8019c8e:	6013      	str	r3, [r2, #0]
 8019c90:	1d7b      	adds	r3, r7, #5
 8019c92:	33ff      	adds	r3, #255	@ 0xff
 8019c94:	681b      	ldr	r3, [r3, #0]
 8019c96:	221f      	movs	r2, #31
 8019c98:	4013      	ands	r3, r2
 8019c9a:	d104      	bne.n	8019ca6 <USB_EPStartXfer+0x7f6>
 8019c9c:	187b      	adds	r3, r7, r1
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	3b01      	subs	r3, #1
 8019ca2:	187a      	adds	r2, r7, r1
 8019ca4:	6013      	str	r3, [r2, #0]
 8019ca6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019ca8:	881b      	ldrh	r3, [r3, #0]
 8019caa:	b29a      	uxth	r2, r3
 8019cac:	23f0      	movs	r3, #240	@ 0xf0
 8019cae:	18fb      	adds	r3, r7, r3
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	b29b      	uxth	r3, r3
 8019cb4:	029b      	lsls	r3, r3, #10
 8019cb6:	b29b      	uxth	r3, r3
 8019cb8:	4313      	orrs	r3, r2
 8019cba:	b29b      	uxth	r3, r3
 8019cbc:	4aa6      	ldr	r2, [pc, #664]	@ (8019f58 <USB_EPStartXfer+0xaa8>)
 8019cbe:	4313      	orrs	r3, r2
 8019cc0:	b29a      	uxth	r2, r3
 8019cc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019cc4:	801a      	strh	r2, [r3, #0]
 8019cc6:	e048      	b.n	8019d5a <USB_EPStartXfer+0x8aa>
 8019cc8:	1d7b      	adds	r3, r7, #5
 8019cca:	33ff      	adds	r3, #255	@ 0xff
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d108      	bne.n	8019ce4 <USB_EPStartXfer+0x834>
 8019cd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019cd4:	881b      	ldrh	r3, [r3, #0]
 8019cd6:	b29b      	uxth	r3, r3
 8019cd8:	4a9f      	ldr	r2, [pc, #636]	@ (8019f58 <USB_EPStartXfer+0xaa8>)
 8019cda:	4313      	orrs	r3, r2
 8019cdc:	b29a      	uxth	r2, r3
 8019cde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019ce0:	801a      	strh	r2, [r3, #0]
 8019ce2:	e03a      	b.n	8019d5a <USB_EPStartXfer+0x8aa>
 8019ce4:	1d7b      	adds	r3, r7, #5
 8019ce6:	33ff      	adds	r3, #255	@ 0xff
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	085b      	lsrs	r3, r3, #1
 8019cec:	21f0      	movs	r1, #240	@ 0xf0
 8019cee:	187a      	adds	r2, r7, r1
 8019cf0:	6013      	str	r3, [r2, #0]
 8019cf2:	1d7b      	adds	r3, r7, #5
 8019cf4:	33ff      	adds	r3, #255	@ 0xff
 8019cf6:	681b      	ldr	r3, [r3, #0]
 8019cf8:	2201      	movs	r2, #1
 8019cfa:	4013      	ands	r3, r2
 8019cfc:	d004      	beq.n	8019d08 <USB_EPStartXfer+0x858>
 8019cfe:	187b      	adds	r3, r7, r1
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	3301      	adds	r3, #1
 8019d04:	187a      	adds	r2, r7, r1
 8019d06:	6013      	str	r3, [r2, #0]
 8019d08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019d0a:	881b      	ldrh	r3, [r3, #0]
 8019d0c:	b29a      	uxth	r2, r3
 8019d0e:	23f0      	movs	r3, #240	@ 0xf0
 8019d10:	18fb      	adds	r3, r7, r3
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	b29b      	uxth	r3, r3
 8019d16:	029b      	lsls	r3, r3, #10
 8019d18:	b29b      	uxth	r3, r3
 8019d1a:	4313      	orrs	r3, r2
 8019d1c:	b29a      	uxth	r2, r3
 8019d1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019d20:	801a      	strh	r2, [r3, #0]
 8019d22:	e01a      	b.n	8019d5a <USB_EPStartXfer+0x8aa>
 8019d24:	683b      	ldr	r3, [r7, #0]
 8019d26:	785b      	ldrb	r3, [r3, #1]
 8019d28:	2b01      	cmp	r3, #1
 8019d2a:	d116      	bne.n	8019d5a <USB_EPStartXfer+0x8aa>
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	2250      	movs	r2, #80	@ 0x50
 8019d30:	5a9b      	ldrh	r3, [r3, r2]
 8019d32:	b29b      	uxth	r3, r3
 8019d34:	001a      	movs	r2, r3
 8019d36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019d38:	189b      	adds	r3, r3, r2
 8019d3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8019d3c:	683b      	ldr	r3, [r7, #0]
 8019d3e:	781b      	ldrb	r3, [r3, #0]
 8019d40:	00da      	lsls	r2, r3, #3
 8019d42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019d44:	18d3      	adds	r3, r2, r3
 8019d46:	4a83      	ldr	r2, [pc, #524]	@ (8019f54 <USB_EPStartXfer+0xaa4>)
 8019d48:	4694      	mov	ip, r2
 8019d4a:	4463      	add	r3, ip
 8019d4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019d4e:	1d7b      	adds	r3, r7, #5
 8019d50:	33ff      	adds	r3, #255	@ 0xff
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	b29a      	uxth	r2, r3
 8019d56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019d58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8019d5a:	2076      	movs	r0, #118	@ 0x76
 8019d5c:	183b      	adds	r3, r7, r0
 8019d5e:	683a      	ldr	r2, [r7, #0]
 8019d60:	8952      	ldrh	r2, [r2, #10]
 8019d62:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019d64:	683b      	ldr	r3, [r7, #0]
 8019d66:	6959      	ldr	r1, [r3, #20]
 8019d68:	1d7b      	adds	r3, r7, #5
 8019d6a:	33ff      	adds	r3, #255	@ 0xff
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	b29c      	uxth	r4, r3
 8019d70:	183b      	adds	r3, r7, r0
 8019d72:	881a      	ldrh	r2, [r3, #0]
 8019d74:	6878      	ldr	r0, [r7, #4]
 8019d76:	0023      	movs	r3, r4
 8019d78:	f000 fe0c 	bl	801a994 <USB_WritePMA>
 8019d7c:	e0ab      	b.n	8019ed6 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019d7e:	683b      	ldr	r3, [r7, #0]
 8019d80:	785b      	ldrb	r3, [r3, #1]
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d000      	beq.n	8019d88 <USB_EPStartXfer+0x8d8>
 8019d86:	e070      	b.n	8019e6a <USB_EPStartXfer+0x9ba>
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	2250      	movs	r2, #80	@ 0x50
 8019d90:	5a9b      	ldrh	r3, [r3, r2]
 8019d92:	b29b      	uxth	r3, r3
 8019d94:	001a      	movs	r2, r3
 8019d96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019d98:	189b      	adds	r3, r3, r2
 8019d9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019d9c:	683b      	ldr	r3, [r7, #0]
 8019d9e:	781b      	ldrb	r3, [r3, #0]
 8019da0:	00da      	lsls	r2, r3, #3
 8019da2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019da4:	18d3      	adds	r3, r2, r3
 8019da6:	4a6d      	ldr	r2, [pc, #436]	@ (8019f5c <USB_EPStartXfer+0xaac>)
 8019da8:	4694      	mov	ip, r2
 8019daa:	4463      	add	r3, ip
 8019dac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019dae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019db0:	881b      	ldrh	r3, [r3, #0]
 8019db2:	b29b      	uxth	r3, r3
 8019db4:	059b      	lsls	r3, r3, #22
 8019db6:	0d9b      	lsrs	r3, r3, #22
 8019db8:	b29a      	uxth	r2, r3
 8019dba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019dbc:	801a      	strh	r2, [r3, #0]
 8019dbe:	1d7b      	adds	r3, r7, #5
 8019dc0:	33ff      	adds	r3, #255	@ 0xff
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8019dc6:	d922      	bls.n	8019e0e <USB_EPStartXfer+0x95e>
 8019dc8:	1d7b      	adds	r3, r7, #5
 8019dca:	33ff      	adds	r3, #255	@ 0xff
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	095b      	lsrs	r3, r3, #5
 8019dd0:	21ec      	movs	r1, #236	@ 0xec
 8019dd2:	187a      	adds	r2, r7, r1
 8019dd4:	6013      	str	r3, [r2, #0]
 8019dd6:	1d7b      	adds	r3, r7, #5
 8019dd8:	33ff      	adds	r3, #255	@ 0xff
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	221f      	movs	r2, #31
 8019dde:	4013      	ands	r3, r2
 8019de0:	d104      	bne.n	8019dec <USB_EPStartXfer+0x93c>
 8019de2:	187b      	adds	r3, r7, r1
 8019de4:	681b      	ldr	r3, [r3, #0]
 8019de6:	3b01      	subs	r3, #1
 8019de8:	187a      	adds	r2, r7, r1
 8019dea:	6013      	str	r3, [r2, #0]
 8019dec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019dee:	881b      	ldrh	r3, [r3, #0]
 8019df0:	b29a      	uxth	r2, r3
 8019df2:	23ec      	movs	r3, #236	@ 0xec
 8019df4:	18fb      	adds	r3, r7, r3
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	b29b      	uxth	r3, r3
 8019dfa:	029b      	lsls	r3, r3, #10
 8019dfc:	b29b      	uxth	r3, r3
 8019dfe:	4313      	orrs	r3, r2
 8019e00:	b29b      	uxth	r3, r3
 8019e02:	4a55      	ldr	r2, [pc, #340]	@ (8019f58 <USB_EPStartXfer+0xaa8>)
 8019e04:	4313      	orrs	r3, r2
 8019e06:	b29a      	uxth	r2, r3
 8019e08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019e0a:	801a      	strh	r2, [r3, #0]
 8019e0c:	e052      	b.n	8019eb4 <USB_EPStartXfer+0xa04>
 8019e0e:	1d7b      	adds	r3, r7, #5
 8019e10:	33ff      	adds	r3, #255	@ 0xff
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	d108      	bne.n	8019e2a <USB_EPStartXfer+0x97a>
 8019e18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019e1a:	881b      	ldrh	r3, [r3, #0]
 8019e1c:	b29b      	uxth	r3, r3
 8019e1e:	4a4e      	ldr	r2, [pc, #312]	@ (8019f58 <USB_EPStartXfer+0xaa8>)
 8019e20:	4313      	orrs	r3, r2
 8019e22:	b29a      	uxth	r2, r3
 8019e24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019e26:	801a      	strh	r2, [r3, #0]
 8019e28:	e044      	b.n	8019eb4 <USB_EPStartXfer+0xa04>
 8019e2a:	1d7b      	adds	r3, r7, #5
 8019e2c:	33ff      	adds	r3, #255	@ 0xff
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	085b      	lsrs	r3, r3, #1
 8019e32:	21ec      	movs	r1, #236	@ 0xec
 8019e34:	187a      	adds	r2, r7, r1
 8019e36:	6013      	str	r3, [r2, #0]
 8019e38:	1d7b      	adds	r3, r7, #5
 8019e3a:	33ff      	adds	r3, #255	@ 0xff
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	2201      	movs	r2, #1
 8019e40:	4013      	ands	r3, r2
 8019e42:	d004      	beq.n	8019e4e <USB_EPStartXfer+0x99e>
 8019e44:	187b      	adds	r3, r7, r1
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	3301      	adds	r3, #1
 8019e4a:	187a      	adds	r2, r7, r1
 8019e4c:	6013      	str	r3, [r2, #0]
 8019e4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019e50:	881b      	ldrh	r3, [r3, #0]
 8019e52:	b29a      	uxth	r2, r3
 8019e54:	23ec      	movs	r3, #236	@ 0xec
 8019e56:	18fb      	adds	r3, r7, r3
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	b29b      	uxth	r3, r3
 8019e5c:	029b      	lsls	r3, r3, #10
 8019e5e:	b29b      	uxth	r3, r3
 8019e60:	4313      	orrs	r3, r2
 8019e62:	b29a      	uxth	r2, r3
 8019e64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019e66:	801a      	strh	r2, [r3, #0]
 8019e68:	e024      	b.n	8019eb4 <USB_EPStartXfer+0xa04>
 8019e6a:	683b      	ldr	r3, [r7, #0]
 8019e6c:	785b      	ldrb	r3, [r3, #1]
 8019e6e:	2b01      	cmp	r3, #1
 8019e70:	d120      	bne.n	8019eb4 <USB_EPStartXfer+0xa04>
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	2184      	movs	r1, #132	@ 0x84
 8019e76:	187a      	adds	r2, r7, r1
 8019e78:	6013      	str	r3, [r2, #0]
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	2250      	movs	r2, #80	@ 0x50
 8019e7e:	5a9b      	ldrh	r3, [r3, r2]
 8019e80:	b29b      	uxth	r3, r3
 8019e82:	001a      	movs	r2, r3
 8019e84:	187b      	adds	r3, r7, r1
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	189b      	adds	r3, r3, r2
 8019e8a:	187a      	adds	r2, r7, r1
 8019e8c:	6013      	str	r3, [r2, #0]
 8019e8e:	683b      	ldr	r3, [r7, #0]
 8019e90:	781b      	ldrb	r3, [r3, #0]
 8019e92:	00da      	lsls	r2, r3, #3
 8019e94:	187b      	adds	r3, r7, r1
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	18d3      	adds	r3, r2, r3
 8019e9a:	4a30      	ldr	r2, [pc, #192]	@ (8019f5c <USB_EPStartXfer+0xaac>)
 8019e9c:	4694      	mov	ip, r2
 8019e9e:	4463      	add	r3, ip
 8019ea0:	2180      	movs	r1, #128	@ 0x80
 8019ea2:	187a      	adds	r2, r7, r1
 8019ea4:	6013      	str	r3, [r2, #0]
 8019ea6:	1d7b      	adds	r3, r7, #5
 8019ea8:	33ff      	adds	r3, #255	@ 0xff
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	b29a      	uxth	r2, r3
 8019eae:	187b      	adds	r3, r7, r1
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8019eb4:	2076      	movs	r0, #118	@ 0x76
 8019eb6:	183b      	adds	r3, r7, r0
 8019eb8:	683a      	ldr	r2, [r7, #0]
 8019eba:	8912      	ldrh	r2, [r2, #8]
 8019ebc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019ebe:	683b      	ldr	r3, [r7, #0]
 8019ec0:	6959      	ldr	r1, [r3, #20]
 8019ec2:	1d7b      	adds	r3, r7, #5
 8019ec4:	33ff      	adds	r3, #255	@ 0xff
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	b29c      	uxth	r4, r3
 8019eca:	183b      	adds	r3, r7, r0
 8019ecc:	881a      	ldrh	r2, [r3, #0]
 8019ece:	6878      	ldr	r0, [r7, #4]
 8019ed0:	0023      	movs	r3, r4
 8019ed2:	f000 fd5f 	bl	801a994 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8019ed6:	687a      	ldr	r2, [r7, #4]
 8019ed8:	683b      	ldr	r3, [r7, #0]
 8019eda:	781b      	ldrb	r3, [r3, #0]
 8019edc:	009b      	lsls	r3, r3, #2
 8019ede:	18d3      	adds	r3, r2, r3
 8019ee0:	881b      	ldrh	r3, [r3, #0]
 8019ee2:	b29a      	uxth	r2, r3
 8019ee4:	200a      	movs	r0, #10
 8019ee6:	183b      	adds	r3, r7, r0
 8019ee8:	491d      	ldr	r1, [pc, #116]	@ (8019f60 <USB_EPStartXfer+0xab0>)
 8019eea:	400a      	ands	r2, r1
 8019eec:	801a      	strh	r2, [r3, #0]
 8019eee:	183b      	adds	r3, r7, r0
 8019ef0:	183a      	adds	r2, r7, r0
 8019ef2:	8812      	ldrh	r2, [r2, #0]
 8019ef4:	2110      	movs	r1, #16
 8019ef6:	404a      	eors	r2, r1
 8019ef8:	801a      	strh	r2, [r3, #0]
 8019efa:	183b      	adds	r3, r7, r0
 8019efc:	183a      	adds	r2, r7, r0
 8019efe:	8812      	ldrh	r2, [r2, #0]
 8019f00:	2120      	movs	r1, #32
 8019f02:	404a      	eors	r2, r1
 8019f04:	801a      	strh	r2, [r3, #0]
 8019f06:	687a      	ldr	r2, [r7, #4]
 8019f08:	683b      	ldr	r3, [r7, #0]
 8019f0a:	781b      	ldrb	r3, [r3, #0]
 8019f0c:	009b      	lsls	r3, r3, #2
 8019f0e:	18d3      	adds	r3, r2, r3
 8019f10:	183a      	adds	r2, r7, r0
 8019f12:	8812      	ldrh	r2, [r2, #0]
 8019f14:	4913      	ldr	r1, [pc, #76]	@ (8019f64 <USB_EPStartXfer+0xab4>)
 8019f16:	430a      	orrs	r2, r1
 8019f18:	b292      	uxth	r2, r2
 8019f1a:	801a      	strh	r2, [r3, #0]
 8019f1c:	f000 fbf4 	bl	801a708 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8019f20:	683b      	ldr	r3, [r7, #0]
 8019f22:	7b1b      	ldrb	r3, [r3, #12]
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d000      	beq.n	8019f2a <USB_EPStartXfer+0xa7a>
 8019f28:	e0a9      	b.n	801a07e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8019f2a:	683b      	ldr	r3, [r7, #0]
 8019f2c:	699a      	ldr	r2, [r3, #24]
 8019f2e:	683b      	ldr	r3, [r7, #0]
 8019f30:	691b      	ldr	r3, [r3, #16]
 8019f32:	429a      	cmp	r2, r3
 8019f34:	d918      	bls.n	8019f68 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8019f36:	683b      	ldr	r3, [r7, #0]
 8019f38:	691b      	ldr	r3, [r3, #16]
 8019f3a:	1d7a      	adds	r2, r7, #5
 8019f3c:	32ff      	adds	r2, #255	@ 0xff
 8019f3e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8019f40:	683b      	ldr	r3, [r7, #0]
 8019f42:	699a      	ldr	r2, [r3, #24]
 8019f44:	1d7b      	adds	r3, r7, #5
 8019f46:	33ff      	adds	r3, #255	@ 0xff
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	1ad2      	subs	r2, r2, r3
 8019f4c:	683b      	ldr	r3, [r7, #0]
 8019f4e:	619a      	str	r2, [r3, #24]
 8019f50:	e012      	b.n	8019f78 <USB_EPStartXfer+0xac8>
 8019f52:	46c0      	nop			@ (mov r8, r8)
 8019f54:	00000406 	.word	0x00000406
 8019f58:	ffff8000 	.word	0xffff8000
 8019f5c:	00000402 	.word	0x00000402
 8019f60:	ffff8fbf 	.word	0xffff8fbf
 8019f64:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8019f68:	683b      	ldr	r3, [r7, #0]
 8019f6a:	699b      	ldr	r3, [r3, #24]
 8019f6c:	1d7a      	adds	r2, r7, #5
 8019f6e:	32ff      	adds	r2, #255	@ 0xff
 8019f70:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8019f72:	683b      	ldr	r3, [r7, #0]
 8019f74:	2200      	movs	r2, #0
 8019f76:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	2190      	movs	r1, #144	@ 0x90
 8019f7c:	187a      	adds	r2, r7, r1
 8019f7e:	6013      	str	r3, [r2, #0]
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	2250      	movs	r2, #80	@ 0x50
 8019f84:	5a9b      	ldrh	r3, [r3, r2]
 8019f86:	b29b      	uxth	r3, r3
 8019f88:	001a      	movs	r2, r3
 8019f8a:	187b      	adds	r3, r7, r1
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	189b      	adds	r3, r3, r2
 8019f90:	187a      	adds	r2, r7, r1
 8019f92:	6013      	str	r3, [r2, #0]
 8019f94:	683b      	ldr	r3, [r7, #0]
 8019f96:	781b      	ldrb	r3, [r3, #0]
 8019f98:	00da      	lsls	r2, r3, #3
 8019f9a:	187b      	adds	r3, r7, r1
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	18d3      	adds	r3, r2, r3
 8019fa0:	4acf      	ldr	r2, [pc, #828]	@ (801a2e0 <USB_EPStartXfer+0xe30>)
 8019fa2:	4694      	mov	ip, r2
 8019fa4:	4463      	add	r3, ip
 8019fa6:	218c      	movs	r1, #140	@ 0x8c
 8019fa8:	187a      	adds	r2, r7, r1
 8019faa:	6013      	str	r3, [r2, #0]
 8019fac:	187b      	adds	r3, r7, r1
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	881b      	ldrh	r3, [r3, #0]
 8019fb2:	b29b      	uxth	r3, r3
 8019fb4:	059b      	lsls	r3, r3, #22
 8019fb6:	0d9b      	lsrs	r3, r3, #22
 8019fb8:	b29a      	uxth	r2, r3
 8019fba:	187b      	adds	r3, r7, r1
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	801a      	strh	r2, [r3, #0]
 8019fc0:	1d7b      	adds	r3, r7, #5
 8019fc2:	33ff      	adds	r3, #255	@ 0xff
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8019fc8:	d925      	bls.n	801a016 <USB_EPStartXfer+0xb66>
 8019fca:	1d7b      	adds	r3, r7, #5
 8019fcc:	33ff      	adds	r3, #255	@ 0xff
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	095b      	lsrs	r3, r3, #5
 8019fd2:	21e8      	movs	r1, #232	@ 0xe8
 8019fd4:	187a      	adds	r2, r7, r1
 8019fd6:	6013      	str	r3, [r2, #0]
 8019fd8:	1d7b      	adds	r3, r7, #5
 8019fda:	33ff      	adds	r3, #255	@ 0xff
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	221f      	movs	r2, #31
 8019fe0:	4013      	ands	r3, r2
 8019fe2:	d104      	bne.n	8019fee <USB_EPStartXfer+0xb3e>
 8019fe4:	187b      	adds	r3, r7, r1
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	3b01      	subs	r3, #1
 8019fea:	187a      	adds	r2, r7, r1
 8019fec:	6013      	str	r3, [r2, #0]
 8019fee:	218c      	movs	r1, #140	@ 0x8c
 8019ff0:	187b      	adds	r3, r7, r1
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	881b      	ldrh	r3, [r3, #0]
 8019ff6:	b29a      	uxth	r2, r3
 8019ff8:	23e8      	movs	r3, #232	@ 0xe8
 8019ffa:	18fb      	adds	r3, r7, r3
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	b29b      	uxth	r3, r3
 801a000:	029b      	lsls	r3, r3, #10
 801a002:	b29b      	uxth	r3, r3
 801a004:	4313      	orrs	r3, r2
 801a006:	b29b      	uxth	r3, r3
 801a008:	4ab6      	ldr	r2, [pc, #728]	@ (801a2e4 <USB_EPStartXfer+0xe34>)
 801a00a:	4313      	orrs	r3, r2
 801a00c:	b29a      	uxth	r2, r3
 801a00e:	187b      	adds	r3, r7, r1
 801a010:	681b      	ldr	r3, [r3, #0]
 801a012:	801a      	strh	r2, [r3, #0]
 801a014:	e353      	b.n	801a6be <USB_EPStartXfer+0x120e>
 801a016:	1d7b      	adds	r3, r7, #5
 801a018:	33ff      	adds	r3, #255	@ 0xff
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d10b      	bne.n	801a038 <USB_EPStartXfer+0xb88>
 801a020:	218c      	movs	r1, #140	@ 0x8c
 801a022:	187b      	adds	r3, r7, r1
 801a024:	681b      	ldr	r3, [r3, #0]
 801a026:	881b      	ldrh	r3, [r3, #0]
 801a028:	b29b      	uxth	r3, r3
 801a02a:	4aae      	ldr	r2, [pc, #696]	@ (801a2e4 <USB_EPStartXfer+0xe34>)
 801a02c:	4313      	orrs	r3, r2
 801a02e:	b29a      	uxth	r2, r3
 801a030:	187b      	adds	r3, r7, r1
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	801a      	strh	r2, [r3, #0]
 801a036:	e342      	b.n	801a6be <USB_EPStartXfer+0x120e>
 801a038:	1d7b      	adds	r3, r7, #5
 801a03a:	33ff      	adds	r3, #255	@ 0xff
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	085b      	lsrs	r3, r3, #1
 801a040:	21e8      	movs	r1, #232	@ 0xe8
 801a042:	187a      	adds	r2, r7, r1
 801a044:	6013      	str	r3, [r2, #0]
 801a046:	1d7b      	adds	r3, r7, #5
 801a048:	33ff      	adds	r3, #255	@ 0xff
 801a04a:	681b      	ldr	r3, [r3, #0]
 801a04c:	2201      	movs	r2, #1
 801a04e:	4013      	ands	r3, r2
 801a050:	d004      	beq.n	801a05c <USB_EPStartXfer+0xbac>
 801a052:	187b      	adds	r3, r7, r1
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	3301      	adds	r3, #1
 801a058:	187a      	adds	r2, r7, r1
 801a05a:	6013      	str	r3, [r2, #0]
 801a05c:	218c      	movs	r1, #140	@ 0x8c
 801a05e:	187b      	adds	r3, r7, r1
 801a060:	681b      	ldr	r3, [r3, #0]
 801a062:	881b      	ldrh	r3, [r3, #0]
 801a064:	b29a      	uxth	r2, r3
 801a066:	23e8      	movs	r3, #232	@ 0xe8
 801a068:	18fb      	adds	r3, r7, r3
 801a06a:	681b      	ldr	r3, [r3, #0]
 801a06c:	b29b      	uxth	r3, r3
 801a06e:	029b      	lsls	r3, r3, #10
 801a070:	b29b      	uxth	r3, r3
 801a072:	4313      	orrs	r3, r2
 801a074:	b29a      	uxth	r2, r3
 801a076:	187b      	adds	r3, r7, r1
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	801a      	strh	r2, [r3, #0]
 801a07c:	e31f      	b.n	801a6be <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801a07e:	683b      	ldr	r3, [r7, #0]
 801a080:	78db      	ldrb	r3, [r3, #3]
 801a082:	2b02      	cmp	r3, #2
 801a084:	d000      	beq.n	801a088 <USB_EPStartXfer+0xbd8>
 801a086:	e191      	b.n	801a3ac <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801a088:	683b      	ldr	r3, [r7, #0]
 801a08a:	785b      	ldrb	r3, [r3, #1]
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	d000      	beq.n	801a092 <USB_EPStartXfer+0xbe2>
 801a090:	e07c      	b.n	801a18c <USB_EPStartXfer+0xcdc>
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	21ac      	movs	r1, #172	@ 0xac
 801a096:	187a      	adds	r2, r7, r1
 801a098:	6013      	str	r3, [r2, #0]
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	2250      	movs	r2, #80	@ 0x50
 801a09e:	5a9b      	ldrh	r3, [r3, r2]
 801a0a0:	b29b      	uxth	r3, r3
 801a0a2:	001a      	movs	r2, r3
 801a0a4:	187b      	adds	r3, r7, r1
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	189b      	adds	r3, r3, r2
 801a0aa:	187a      	adds	r2, r7, r1
 801a0ac:	6013      	str	r3, [r2, #0]
 801a0ae:	683b      	ldr	r3, [r7, #0]
 801a0b0:	781b      	ldrb	r3, [r3, #0]
 801a0b2:	00da      	lsls	r2, r3, #3
 801a0b4:	187b      	adds	r3, r7, r1
 801a0b6:	681b      	ldr	r3, [r3, #0]
 801a0b8:	18d3      	adds	r3, r2, r3
 801a0ba:	4a8b      	ldr	r2, [pc, #556]	@ (801a2e8 <USB_EPStartXfer+0xe38>)
 801a0bc:	4694      	mov	ip, r2
 801a0be:	4463      	add	r3, ip
 801a0c0:	21a8      	movs	r1, #168	@ 0xa8
 801a0c2:	187a      	adds	r2, r7, r1
 801a0c4:	6013      	str	r3, [r2, #0]
 801a0c6:	187b      	adds	r3, r7, r1
 801a0c8:	681b      	ldr	r3, [r3, #0]
 801a0ca:	881b      	ldrh	r3, [r3, #0]
 801a0cc:	b29b      	uxth	r3, r3
 801a0ce:	059b      	lsls	r3, r3, #22
 801a0d0:	0d9b      	lsrs	r3, r3, #22
 801a0d2:	b29a      	uxth	r2, r3
 801a0d4:	187b      	adds	r3, r7, r1
 801a0d6:	681b      	ldr	r3, [r3, #0]
 801a0d8:	801a      	strh	r2, [r3, #0]
 801a0da:	683b      	ldr	r3, [r7, #0]
 801a0dc:	691b      	ldr	r3, [r3, #16]
 801a0de:	2b3e      	cmp	r3, #62	@ 0x3e
 801a0e0:	d923      	bls.n	801a12a <USB_EPStartXfer+0xc7a>
 801a0e2:	683b      	ldr	r3, [r7, #0]
 801a0e4:	691b      	ldr	r3, [r3, #16]
 801a0e6:	095b      	lsrs	r3, r3, #5
 801a0e8:	21e4      	movs	r1, #228	@ 0xe4
 801a0ea:	187a      	adds	r2, r7, r1
 801a0ec:	6013      	str	r3, [r2, #0]
 801a0ee:	683b      	ldr	r3, [r7, #0]
 801a0f0:	691b      	ldr	r3, [r3, #16]
 801a0f2:	221f      	movs	r2, #31
 801a0f4:	4013      	ands	r3, r2
 801a0f6:	d104      	bne.n	801a102 <USB_EPStartXfer+0xc52>
 801a0f8:	187b      	adds	r3, r7, r1
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	3b01      	subs	r3, #1
 801a0fe:	187a      	adds	r2, r7, r1
 801a100:	6013      	str	r3, [r2, #0]
 801a102:	21a8      	movs	r1, #168	@ 0xa8
 801a104:	187b      	adds	r3, r7, r1
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	881b      	ldrh	r3, [r3, #0]
 801a10a:	b29a      	uxth	r2, r3
 801a10c:	23e4      	movs	r3, #228	@ 0xe4
 801a10e:	18fb      	adds	r3, r7, r3
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	b29b      	uxth	r3, r3
 801a114:	029b      	lsls	r3, r3, #10
 801a116:	b29b      	uxth	r3, r3
 801a118:	4313      	orrs	r3, r2
 801a11a:	b29b      	uxth	r3, r3
 801a11c:	4a71      	ldr	r2, [pc, #452]	@ (801a2e4 <USB_EPStartXfer+0xe34>)
 801a11e:	4313      	orrs	r3, r2
 801a120:	b29a      	uxth	r2, r3
 801a122:	187b      	adds	r3, r7, r1
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	801a      	strh	r2, [r3, #0]
 801a128:	e054      	b.n	801a1d4 <USB_EPStartXfer+0xd24>
 801a12a:	683b      	ldr	r3, [r7, #0]
 801a12c:	691b      	ldr	r3, [r3, #16]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d10b      	bne.n	801a14a <USB_EPStartXfer+0xc9a>
 801a132:	21a8      	movs	r1, #168	@ 0xa8
 801a134:	187b      	adds	r3, r7, r1
 801a136:	681b      	ldr	r3, [r3, #0]
 801a138:	881b      	ldrh	r3, [r3, #0]
 801a13a:	b29b      	uxth	r3, r3
 801a13c:	4a69      	ldr	r2, [pc, #420]	@ (801a2e4 <USB_EPStartXfer+0xe34>)
 801a13e:	4313      	orrs	r3, r2
 801a140:	b29a      	uxth	r2, r3
 801a142:	187b      	adds	r3, r7, r1
 801a144:	681b      	ldr	r3, [r3, #0]
 801a146:	801a      	strh	r2, [r3, #0]
 801a148:	e044      	b.n	801a1d4 <USB_EPStartXfer+0xd24>
 801a14a:	683b      	ldr	r3, [r7, #0]
 801a14c:	691b      	ldr	r3, [r3, #16]
 801a14e:	085b      	lsrs	r3, r3, #1
 801a150:	21e4      	movs	r1, #228	@ 0xe4
 801a152:	187a      	adds	r2, r7, r1
 801a154:	6013      	str	r3, [r2, #0]
 801a156:	683b      	ldr	r3, [r7, #0]
 801a158:	691b      	ldr	r3, [r3, #16]
 801a15a:	2201      	movs	r2, #1
 801a15c:	4013      	ands	r3, r2
 801a15e:	d004      	beq.n	801a16a <USB_EPStartXfer+0xcba>
 801a160:	187b      	adds	r3, r7, r1
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	3301      	adds	r3, #1
 801a166:	187a      	adds	r2, r7, r1
 801a168:	6013      	str	r3, [r2, #0]
 801a16a:	21a8      	movs	r1, #168	@ 0xa8
 801a16c:	187b      	adds	r3, r7, r1
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	881b      	ldrh	r3, [r3, #0]
 801a172:	b29a      	uxth	r2, r3
 801a174:	23e4      	movs	r3, #228	@ 0xe4
 801a176:	18fb      	adds	r3, r7, r3
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	b29b      	uxth	r3, r3
 801a17c:	029b      	lsls	r3, r3, #10
 801a17e:	b29b      	uxth	r3, r3
 801a180:	4313      	orrs	r3, r2
 801a182:	b29a      	uxth	r2, r3
 801a184:	187b      	adds	r3, r7, r1
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	801a      	strh	r2, [r3, #0]
 801a18a:	e023      	b.n	801a1d4 <USB_EPStartXfer+0xd24>
 801a18c:	683b      	ldr	r3, [r7, #0]
 801a18e:	785b      	ldrb	r3, [r3, #1]
 801a190:	2b01      	cmp	r3, #1
 801a192:	d11f      	bne.n	801a1d4 <USB_EPStartXfer+0xd24>
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	21b4      	movs	r1, #180	@ 0xb4
 801a198:	187a      	adds	r2, r7, r1
 801a19a:	6013      	str	r3, [r2, #0]
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	2250      	movs	r2, #80	@ 0x50
 801a1a0:	5a9b      	ldrh	r3, [r3, r2]
 801a1a2:	b29b      	uxth	r3, r3
 801a1a4:	001a      	movs	r2, r3
 801a1a6:	187b      	adds	r3, r7, r1
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	189b      	adds	r3, r3, r2
 801a1ac:	187a      	adds	r2, r7, r1
 801a1ae:	6013      	str	r3, [r2, #0]
 801a1b0:	683b      	ldr	r3, [r7, #0]
 801a1b2:	781b      	ldrb	r3, [r3, #0]
 801a1b4:	00da      	lsls	r2, r3, #3
 801a1b6:	187b      	adds	r3, r7, r1
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	18d3      	adds	r3, r2, r3
 801a1bc:	4a4a      	ldr	r2, [pc, #296]	@ (801a2e8 <USB_EPStartXfer+0xe38>)
 801a1be:	4694      	mov	ip, r2
 801a1c0:	4463      	add	r3, ip
 801a1c2:	21b0      	movs	r1, #176	@ 0xb0
 801a1c4:	187a      	adds	r2, r7, r1
 801a1c6:	6013      	str	r3, [r2, #0]
 801a1c8:	683b      	ldr	r3, [r7, #0]
 801a1ca:	691b      	ldr	r3, [r3, #16]
 801a1cc:	b29a      	uxth	r2, r3
 801a1ce:	187b      	adds	r3, r7, r1
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	801a      	strh	r2, [r3, #0]
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	22a4      	movs	r2, #164	@ 0xa4
 801a1d8:	18ba      	adds	r2, r7, r2
 801a1da:	6013      	str	r3, [r2, #0]
 801a1dc:	683b      	ldr	r3, [r7, #0]
 801a1de:	785b      	ldrb	r3, [r3, #1]
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	d000      	beq.n	801a1e6 <USB_EPStartXfer+0xd36>
 801a1e4:	e082      	b.n	801a2ec <USB_EPStartXfer+0xe3c>
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	219c      	movs	r1, #156	@ 0x9c
 801a1ea:	187a      	adds	r2, r7, r1
 801a1ec:	6013      	str	r3, [r2, #0]
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	2250      	movs	r2, #80	@ 0x50
 801a1f2:	5a9b      	ldrh	r3, [r3, r2]
 801a1f4:	b29b      	uxth	r3, r3
 801a1f6:	001a      	movs	r2, r3
 801a1f8:	187b      	adds	r3, r7, r1
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	189b      	adds	r3, r3, r2
 801a1fe:	187a      	adds	r2, r7, r1
 801a200:	6013      	str	r3, [r2, #0]
 801a202:	683b      	ldr	r3, [r7, #0]
 801a204:	781b      	ldrb	r3, [r3, #0]
 801a206:	00da      	lsls	r2, r3, #3
 801a208:	187b      	adds	r3, r7, r1
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	18d3      	adds	r3, r2, r3
 801a20e:	4a34      	ldr	r2, [pc, #208]	@ (801a2e0 <USB_EPStartXfer+0xe30>)
 801a210:	4694      	mov	ip, r2
 801a212:	4463      	add	r3, ip
 801a214:	2198      	movs	r1, #152	@ 0x98
 801a216:	187a      	adds	r2, r7, r1
 801a218:	6013      	str	r3, [r2, #0]
 801a21a:	187b      	adds	r3, r7, r1
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	881b      	ldrh	r3, [r3, #0]
 801a220:	b29b      	uxth	r3, r3
 801a222:	059b      	lsls	r3, r3, #22
 801a224:	0d9b      	lsrs	r3, r3, #22
 801a226:	b29a      	uxth	r2, r3
 801a228:	187b      	adds	r3, r7, r1
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	801a      	strh	r2, [r3, #0]
 801a22e:	683b      	ldr	r3, [r7, #0]
 801a230:	691b      	ldr	r3, [r3, #16]
 801a232:	2b3e      	cmp	r3, #62	@ 0x3e
 801a234:	d923      	bls.n	801a27e <USB_EPStartXfer+0xdce>
 801a236:	683b      	ldr	r3, [r7, #0]
 801a238:	691b      	ldr	r3, [r3, #16]
 801a23a:	095b      	lsrs	r3, r3, #5
 801a23c:	21e0      	movs	r1, #224	@ 0xe0
 801a23e:	187a      	adds	r2, r7, r1
 801a240:	6013      	str	r3, [r2, #0]
 801a242:	683b      	ldr	r3, [r7, #0]
 801a244:	691b      	ldr	r3, [r3, #16]
 801a246:	221f      	movs	r2, #31
 801a248:	4013      	ands	r3, r2
 801a24a:	d104      	bne.n	801a256 <USB_EPStartXfer+0xda6>
 801a24c:	187b      	adds	r3, r7, r1
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	3b01      	subs	r3, #1
 801a252:	187a      	adds	r2, r7, r1
 801a254:	6013      	str	r3, [r2, #0]
 801a256:	2198      	movs	r1, #152	@ 0x98
 801a258:	187b      	adds	r3, r7, r1
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	881b      	ldrh	r3, [r3, #0]
 801a25e:	b29a      	uxth	r2, r3
 801a260:	23e0      	movs	r3, #224	@ 0xe0
 801a262:	18fb      	adds	r3, r7, r3
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	b29b      	uxth	r3, r3
 801a268:	029b      	lsls	r3, r3, #10
 801a26a:	b29b      	uxth	r3, r3
 801a26c:	4313      	orrs	r3, r2
 801a26e:	b29b      	uxth	r3, r3
 801a270:	4a1c      	ldr	r2, [pc, #112]	@ (801a2e4 <USB_EPStartXfer+0xe34>)
 801a272:	4313      	orrs	r3, r2
 801a274:	b29a      	uxth	r2, r3
 801a276:	187b      	adds	r3, r7, r1
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	801a      	strh	r2, [r3, #0]
 801a27c:	e057      	b.n	801a32e <USB_EPStartXfer+0xe7e>
 801a27e:	683b      	ldr	r3, [r7, #0]
 801a280:	691b      	ldr	r3, [r3, #16]
 801a282:	2b00      	cmp	r3, #0
 801a284:	d10b      	bne.n	801a29e <USB_EPStartXfer+0xdee>
 801a286:	2198      	movs	r1, #152	@ 0x98
 801a288:	187b      	adds	r3, r7, r1
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	881b      	ldrh	r3, [r3, #0]
 801a28e:	b29b      	uxth	r3, r3
 801a290:	4a14      	ldr	r2, [pc, #80]	@ (801a2e4 <USB_EPStartXfer+0xe34>)
 801a292:	4313      	orrs	r3, r2
 801a294:	b29a      	uxth	r2, r3
 801a296:	187b      	adds	r3, r7, r1
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	801a      	strh	r2, [r3, #0]
 801a29c:	e047      	b.n	801a32e <USB_EPStartXfer+0xe7e>
 801a29e:	683b      	ldr	r3, [r7, #0]
 801a2a0:	691b      	ldr	r3, [r3, #16]
 801a2a2:	085b      	lsrs	r3, r3, #1
 801a2a4:	21e0      	movs	r1, #224	@ 0xe0
 801a2a6:	187a      	adds	r2, r7, r1
 801a2a8:	6013      	str	r3, [r2, #0]
 801a2aa:	683b      	ldr	r3, [r7, #0]
 801a2ac:	691b      	ldr	r3, [r3, #16]
 801a2ae:	2201      	movs	r2, #1
 801a2b0:	4013      	ands	r3, r2
 801a2b2:	d004      	beq.n	801a2be <USB_EPStartXfer+0xe0e>
 801a2b4:	187b      	adds	r3, r7, r1
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	3301      	adds	r3, #1
 801a2ba:	187a      	adds	r2, r7, r1
 801a2bc:	6013      	str	r3, [r2, #0]
 801a2be:	2198      	movs	r1, #152	@ 0x98
 801a2c0:	187b      	adds	r3, r7, r1
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	881b      	ldrh	r3, [r3, #0]
 801a2c6:	b29a      	uxth	r2, r3
 801a2c8:	23e0      	movs	r3, #224	@ 0xe0
 801a2ca:	18fb      	adds	r3, r7, r3
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	b29b      	uxth	r3, r3
 801a2d0:	029b      	lsls	r3, r3, #10
 801a2d2:	b29b      	uxth	r3, r3
 801a2d4:	4313      	orrs	r3, r2
 801a2d6:	b29a      	uxth	r2, r3
 801a2d8:	187b      	adds	r3, r7, r1
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	801a      	strh	r2, [r3, #0]
 801a2de:	e026      	b.n	801a32e <USB_EPStartXfer+0xe7e>
 801a2e0:	00000406 	.word	0x00000406
 801a2e4:	ffff8000 	.word	0xffff8000
 801a2e8:	00000402 	.word	0x00000402
 801a2ec:	683b      	ldr	r3, [r7, #0]
 801a2ee:	785b      	ldrb	r3, [r3, #1]
 801a2f0:	2b01      	cmp	r3, #1
 801a2f2:	d11c      	bne.n	801a32e <USB_EPStartXfer+0xe7e>
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	2250      	movs	r2, #80	@ 0x50
 801a2f8:	5a9b      	ldrh	r3, [r3, r2]
 801a2fa:	b29b      	uxth	r3, r3
 801a2fc:	001a      	movs	r2, r3
 801a2fe:	21a4      	movs	r1, #164	@ 0xa4
 801a300:	187b      	adds	r3, r7, r1
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	189b      	adds	r3, r3, r2
 801a306:	187a      	adds	r2, r7, r1
 801a308:	6013      	str	r3, [r2, #0]
 801a30a:	683b      	ldr	r3, [r7, #0]
 801a30c:	781b      	ldrb	r3, [r3, #0]
 801a30e:	00da      	lsls	r2, r3, #3
 801a310:	187b      	adds	r3, r7, r1
 801a312:	681b      	ldr	r3, [r3, #0]
 801a314:	18d3      	adds	r3, r2, r3
 801a316:	4ad2      	ldr	r2, [pc, #840]	@ (801a660 <USB_EPStartXfer+0x11b0>)
 801a318:	4694      	mov	ip, r2
 801a31a:	4463      	add	r3, ip
 801a31c:	21a0      	movs	r1, #160	@ 0xa0
 801a31e:	187a      	adds	r2, r7, r1
 801a320:	6013      	str	r3, [r2, #0]
 801a322:	683b      	ldr	r3, [r7, #0]
 801a324:	691b      	ldr	r3, [r3, #16]
 801a326:	b29a      	uxth	r2, r3
 801a328:	187b      	adds	r3, r7, r1
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801a32e:	683b      	ldr	r3, [r7, #0]
 801a330:	69db      	ldr	r3, [r3, #28]
 801a332:	2b00      	cmp	r3, #0
 801a334:	d100      	bne.n	801a338 <USB_EPStartXfer+0xe88>
 801a336:	e1c2      	b.n	801a6be <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801a338:	687a      	ldr	r2, [r7, #4]
 801a33a:	683b      	ldr	r3, [r7, #0]
 801a33c:	781b      	ldrb	r3, [r3, #0]
 801a33e:	009b      	lsls	r3, r3, #2
 801a340:	18d2      	adds	r2, r2, r3
 801a342:	2196      	movs	r1, #150	@ 0x96
 801a344:	187b      	adds	r3, r7, r1
 801a346:	8812      	ldrh	r2, [r2, #0]
 801a348:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801a34a:	187b      	adds	r3, r7, r1
 801a34c:	881a      	ldrh	r2, [r3, #0]
 801a34e:	2380      	movs	r3, #128	@ 0x80
 801a350:	01db      	lsls	r3, r3, #7
 801a352:	4013      	ands	r3, r2
 801a354:	d004      	beq.n	801a360 <USB_EPStartXfer+0xeb0>
 801a356:	187b      	adds	r3, r7, r1
 801a358:	881b      	ldrh	r3, [r3, #0]
 801a35a:	2240      	movs	r2, #64	@ 0x40
 801a35c:	4013      	ands	r3, r2
 801a35e:	d10d      	bne.n	801a37c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801a360:	2196      	movs	r1, #150	@ 0x96
 801a362:	187b      	adds	r3, r7, r1
 801a364:	881a      	ldrh	r2, [r3, #0]
 801a366:	2380      	movs	r3, #128	@ 0x80
 801a368:	01db      	lsls	r3, r3, #7
 801a36a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801a36c:	d000      	beq.n	801a370 <USB_EPStartXfer+0xec0>
 801a36e:	e1a6      	b.n	801a6be <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801a370:	187b      	adds	r3, r7, r1
 801a372:	881b      	ldrh	r3, [r3, #0]
 801a374:	2240      	movs	r2, #64	@ 0x40
 801a376:	4013      	ands	r3, r2
 801a378:	d000      	beq.n	801a37c <USB_EPStartXfer+0xecc>
 801a37a:	e1a0      	b.n	801a6be <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801a37c:	687a      	ldr	r2, [r7, #4]
 801a37e:	683b      	ldr	r3, [r7, #0]
 801a380:	781b      	ldrb	r3, [r3, #0]
 801a382:	009b      	lsls	r3, r3, #2
 801a384:	18d3      	adds	r3, r2, r3
 801a386:	881b      	ldrh	r3, [r3, #0]
 801a388:	b29a      	uxth	r2, r3
 801a38a:	2094      	movs	r0, #148	@ 0x94
 801a38c:	183b      	adds	r3, r7, r0
 801a38e:	49b5      	ldr	r1, [pc, #724]	@ (801a664 <USB_EPStartXfer+0x11b4>)
 801a390:	400a      	ands	r2, r1
 801a392:	801a      	strh	r2, [r3, #0]
 801a394:	687a      	ldr	r2, [r7, #4]
 801a396:	683b      	ldr	r3, [r7, #0]
 801a398:	781b      	ldrb	r3, [r3, #0]
 801a39a:	009b      	lsls	r3, r3, #2
 801a39c:	18d3      	adds	r3, r2, r3
 801a39e:	183a      	adds	r2, r7, r0
 801a3a0:	8812      	ldrh	r2, [r2, #0]
 801a3a2:	49b1      	ldr	r1, [pc, #708]	@ (801a668 <USB_EPStartXfer+0x11b8>)
 801a3a4:	430a      	orrs	r2, r1
 801a3a6:	b292      	uxth	r2, r2
 801a3a8:	801a      	strh	r2, [r3, #0]
 801a3aa:	e188      	b.n	801a6be <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801a3ac:	683b      	ldr	r3, [r7, #0]
 801a3ae:	78db      	ldrb	r3, [r3, #3]
 801a3b0:	2b01      	cmp	r3, #1
 801a3b2:	d000      	beq.n	801a3b6 <USB_EPStartXfer+0xf06>
 801a3b4:	e181      	b.n	801a6ba <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801a3b6:	683b      	ldr	r3, [r7, #0]
 801a3b8:	699a      	ldr	r2, [r3, #24]
 801a3ba:	683b      	ldr	r3, [r7, #0]
 801a3bc:	691b      	ldr	r3, [r3, #16]
 801a3be:	429a      	cmp	r2, r3
 801a3c0:	d90d      	bls.n	801a3de <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801a3c2:	683b      	ldr	r3, [r7, #0]
 801a3c4:	691b      	ldr	r3, [r3, #16]
 801a3c6:	1d7a      	adds	r2, r7, #5
 801a3c8:	32ff      	adds	r2, #255	@ 0xff
 801a3ca:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801a3cc:	683b      	ldr	r3, [r7, #0]
 801a3ce:	699a      	ldr	r2, [r3, #24]
 801a3d0:	1d7b      	adds	r3, r7, #5
 801a3d2:	33ff      	adds	r3, #255	@ 0xff
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	1ad2      	subs	r2, r2, r3
 801a3d8:	683b      	ldr	r3, [r7, #0]
 801a3da:	619a      	str	r2, [r3, #24]
 801a3dc:	e007      	b.n	801a3ee <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801a3de:	683b      	ldr	r3, [r7, #0]
 801a3e0:	699b      	ldr	r3, [r3, #24]
 801a3e2:	1d7a      	adds	r2, r7, #5
 801a3e4:	32ff      	adds	r2, #255	@ 0xff
 801a3e6:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801a3e8:	683b      	ldr	r3, [r7, #0]
 801a3ea:	2200      	movs	r2, #0
 801a3ec:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801a3ee:	683b      	ldr	r3, [r7, #0]
 801a3f0:	785b      	ldrb	r3, [r3, #1]
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d000      	beq.n	801a3f8 <USB_EPStartXfer+0xf48>
 801a3f6:	e082      	b.n	801a4fe <USB_EPStartXfer+0x104e>
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	21cc      	movs	r1, #204	@ 0xcc
 801a3fc:	187a      	adds	r2, r7, r1
 801a3fe:	6013      	str	r3, [r2, #0]
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	2250      	movs	r2, #80	@ 0x50
 801a404:	5a9b      	ldrh	r3, [r3, r2]
 801a406:	b29b      	uxth	r3, r3
 801a408:	001a      	movs	r2, r3
 801a40a:	187b      	adds	r3, r7, r1
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	189b      	adds	r3, r3, r2
 801a410:	187a      	adds	r2, r7, r1
 801a412:	6013      	str	r3, [r2, #0]
 801a414:	683b      	ldr	r3, [r7, #0]
 801a416:	781b      	ldrb	r3, [r3, #0]
 801a418:	00da      	lsls	r2, r3, #3
 801a41a:	187b      	adds	r3, r7, r1
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	18d3      	adds	r3, r2, r3
 801a420:	4a92      	ldr	r2, [pc, #584]	@ (801a66c <USB_EPStartXfer+0x11bc>)
 801a422:	4694      	mov	ip, r2
 801a424:	4463      	add	r3, ip
 801a426:	21c8      	movs	r1, #200	@ 0xc8
 801a428:	187a      	adds	r2, r7, r1
 801a42a:	6013      	str	r3, [r2, #0]
 801a42c:	187b      	adds	r3, r7, r1
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	881b      	ldrh	r3, [r3, #0]
 801a432:	b29b      	uxth	r3, r3
 801a434:	059b      	lsls	r3, r3, #22
 801a436:	0d9b      	lsrs	r3, r3, #22
 801a438:	b29a      	uxth	r2, r3
 801a43a:	187b      	adds	r3, r7, r1
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	801a      	strh	r2, [r3, #0]
 801a440:	1d7b      	adds	r3, r7, #5
 801a442:	33ff      	adds	r3, #255	@ 0xff
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	2b3e      	cmp	r3, #62	@ 0x3e
 801a448:	d925      	bls.n	801a496 <USB_EPStartXfer+0xfe6>
 801a44a:	1d7b      	adds	r3, r7, #5
 801a44c:	33ff      	adds	r3, #255	@ 0xff
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	095b      	lsrs	r3, r3, #5
 801a452:	21dc      	movs	r1, #220	@ 0xdc
 801a454:	187a      	adds	r2, r7, r1
 801a456:	6013      	str	r3, [r2, #0]
 801a458:	1d7b      	adds	r3, r7, #5
 801a45a:	33ff      	adds	r3, #255	@ 0xff
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	221f      	movs	r2, #31
 801a460:	4013      	ands	r3, r2
 801a462:	d104      	bne.n	801a46e <USB_EPStartXfer+0xfbe>
 801a464:	187b      	adds	r3, r7, r1
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	3b01      	subs	r3, #1
 801a46a:	187a      	adds	r2, r7, r1
 801a46c:	6013      	str	r3, [r2, #0]
 801a46e:	21c8      	movs	r1, #200	@ 0xc8
 801a470:	187b      	adds	r3, r7, r1
 801a472:	681b      	ldr	r3, [r3, #0]
 801a474:	881b      	ldrh	r3, [r3, #0]
 801a476:	b29a      	uxth	r2, r3
 801a478:	23dc      	movs	r3, #220	@ 0xdc
 801a47a:	18fb      	adds	r3, r7, r3
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	b29b      	uxth	r3, r3
 801a480:	029b      	lsls	r3, r3, #10
 801a482:	b29b      	uxth	r3, r3
 801a484:	4313      	orrs	r3, r2
 801a486:	b29b      	uxth	r3, r3
 801a488:	4a79      	ldr	r2, [pc, #484]	@ (801a670 <USB_EPStartXfer+0x11c0>)
 801a48a:	4313      	orrs	r3, r2
 801a48c:	b29a      	uxth	r2, r3
 801a48e:	187b      	adds	r3, r7, r1
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	801a      	strh	r2, [r3, #0]
 801a494:	e058      	b.n	801a548 <USB_EPStartXfer+0x1098>
 801a496:	1d7b      	adds	r3, r7, #5
 801a498:	33ff      	adds	r3, #255	@ 0xff
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d10b      	bne.n	801a4b8 <USB_EPStartXfer+0x1008>
 801a4a0:	21c8      	movs	r1, #200	@ 0xc8
 801a4a2:	187b      	adds	r3, r7, r1
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	881b      	ldrh	r3, [r3, #0]
 801a4a8:	b29b      	uxth	r3, r3
 801a4aa:	4a71      	ldr	r2, [pc, #452]	@ (801a670 <USB_EPStartXfer+0x11c0>)
 801a4ac:	4313      	orrs	r3, r2
 801a4ae:	b29a      	uxth	r2, r3
 801a4b0:	187b      	adds	r3, r7, r1
 801a4b2:	681b      	ldr	r3, [r3, #0]
 801a4b4:	801a      	strh	r2, [r3, #0]
 801a4b6:	e047      	b.n	801a548 <USB_EPStartXfer+0x1098>
 801a4b8:	1d7b      	adds	r3, r7, #5
 801a4ba:	33ff      	adds	r3, #255	@ 0xff
 801a4bc:	681b      	ldr	r3, [r3, #0]
 801a4be:	085b      	lsrs	r3, r3, #1
 801a4c0:	21dc      	movs	r1, #220	@ 0xdc
 801a4c2:	187a      	adds	r2, r7, r1
 801a4c4:	6013      	str	r3, [r2, #0]
 801a4c6:	1d7b      	adds	r3, r7, #5
 801a4c8:	33ff      	adds	r3, #255	@ 0xff
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	2201      	movs	r2, #1
 801a4ce:	4013      	ands	r3, r2
 801a4d0:	d004      	beq.n	801a4dc <USB_EPStartXfer+0x102c>
 801a4d2:	187b      	adds	r3, r7, r1
 801a4d4:	681b      	ldr	r3, [r3, #0]
 801a4d6:	3301      	adds	r3, #1
 801a4d8:	187a      	adds	r2, r7, r1
 801a4da:	6013      	str	r3, [r2, #0]
 801a4dc:	21c8      	movs	r1, #200	@ 0xc8
 801a4de:	187b      	adds	r3, r7, r1
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	881b      	ldrh	r3, [r3, #0]
 801a4e4:	b29a      	uxth	r2, r3
 801a4e6:	23dc      	movs	r3, #220	@ 0xdc
 801a4e8:	18fb      	adds	r3, r7, r3
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	b29b      	uxth	r3, r3
 801a4ee:	029b      	lsls	r3, r3, #10
 801a4f0:	b29b      	uxth	r3, r3
 801a4f2:	4313      	orrs	r3, r2
 801a4f4:	b29a      	uxth	r2, r3
 801a4f6:	187b      	adds	r3, r7, r1
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	801a      	strh	r2, [r3, #0]
 801a4fc:	e024      	b.n	801a548 <USB_EPStartXfer+0x1098>
 801a4fe:	683b      	ldr	r3, [r7, #0]
 801a500:	785b      	ldrb	r3, [r3, #1]
 801a502:	2b01      	cmp	r3, #1
 801a504:	d120      	bne.n	801a548 <USB_EPStartXfer+0x1098>
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	21d4      	movs	r1, #212	@ 0xd4
 801a50a:	187a      	adds	r2, r7, r1
 801a50c:	6013      	str	r3, [r2, #0]
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	2250      	movs	r2, #80	@ 0x50
 801a512:	5a9b      	ldrh	r3, [r3, r2]
 801a514:	b29b      	uxth	r3, r3
 801a516:	001a      	movs	r2, r3
 801a518:	187b      	adds	r3, r7, r1
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	189b      	adds	r3, r3, r2
 801a51e:	187a      	adds	r2, r7, r1
 801a520:	6013      	str	r3, [r2, #0]
 801a522:	683b      	ldr	r3, [r7, #0]
 801a524:	781b      	ldrb	r3, [r3, #0]
 801a526:	00da      	lsls	r2, r3, #3
 801a528:	187b      	adds	r3, r7, r1
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	18d3      	adds	r3, r2, r3
 801a52e:	4a4f      	ldr	r2, [pc, #316]	@ (801a66c <USB_EPStartXfer+0x11bc>)
 801a530:	4694      	mov	ip, r2
 801a532:	4463      	add	r3, ip
 801a534:	21d0      	movs	r1, #208	@ 0xd0
 801a536:	187a      	adds	r2, r7, r1
 801a538:	6013      	str	r3, [r2, #0]
 801a53a:	1d7b      	adds	r3, r7, #5
 801a53c:	33ff      	adds	r3, #255	@ 0xff
 801a53e:	681b      	ldr	r3, [r3, #0]
 801a540:	b29a      	uxth	r2, r3
 801a542:	187b      	adds	r3, r7, r1
 801a544:	681b      	ldr	r3, [r3, #0]
 801a546:	801a      	strh	r2, [r3, #0]
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	22c4      	movs	r2, #196	@ 0xc4
 801a54c:	18ba      	adds	r2, r7, r2
 801a54e:	6013      	str	r3, [r2, #0]
 801a550:	683b      	ldr	r3, [r7, #0]
 801a552:	785b      	ldrb	r3, [r3, #1]
 801a554:	2b00      	cmp	r3, #0
 801a556:	d000      	beq.n	801a55a <USB_EPStartXfer+0x10aa>
 801a558:	e08c      	b.n	801a674 <USB_EPStartXfer+0x11c4>
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	21bc      	movs	r1, #188	@ 0xbc
 801a55e:	187a      	adds	r2, r7, r1
 801a560:	6013      	str	r3, [r2, #0]
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	2250      	movs	r2, #80	@ 0x50
 801a566:	5a9b      	ldrh	r3, [r3, r2]
 801a568:	b29b      	uxth	r3, r3
 801a56a:	001a      	movs	r2, r3
 801a56c:	187b      	adds	r3, r7, r1
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	189b      	adds	r3, r3, r2
 801a572:	187a      	adds	r2, r7, r1
 801a574:	6013      	str	r3, [r2, #0]
 801a576:	683b      	ldr	r3, [r7, #0]
 801a578:	781b      	ldrb	r3, [r3, #0]
 801a57a:	00da      	lsls	r2, r3, #3
 801a57c:	187b      	adds	r3, r7, r1
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	18d3      	adds	r3, r2, r3
 801a582:	4a37      	ldr	r2, [pc, #220]	@ (801a660 <USB_EPStartXfer+0x11b0>)
 801a584:	4694      	mov	ip, r2
 801a586:	4463      	add	r3, ip
 801a588:	21b8      	movs	r1, #184	@ 0xb8
 801a58a:	187a      	adds	r2, r7, r1
 801a58c:	6013      	str	r3, [r2, #0]
 801a58e:	187b      	adds	r3, r7, r1
 801a590:	681b      	ldr	r3, [r3, #0]
 801a592:	881b      	ldrh	r3, [r3, #0]
 801a594:	b29b      	uxth	r3, r3
 801a596:	059b      	lsls	r3, r3, #22
 801a598:	0d9b      	lsrs	r3, r3, #22
 801a59a:	b29a      	uxth	r2, r3
 801a59c:	187b      	adds	r3, r7, r1
 801a59e:	681b      	ldr	r3, [r3, #0]
 801a5a0:	801a      	strh	r2, [r3, #0]
 801a5a2:	1d7b      	adds	r3, r7, #5
 801a5a4:	33ff      	adds	r3, #255	@ 0xff
 801a5a6:	681b      	ldr	r3, [r3, #0]
 801a5a8:	2b3e      	cmp	r3, #62	@ 0x3e
 801a5aa:	d925      	bls.n	801a5f8 <USB_EPStartXfer+0x1148>
 801a5ac:	1d7b      	adds	r3, r7, #5
 801a5ae:	33ff      	adds	r3, #255	@ 0xff
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	095b      	lsrs	r3, r3, #5
 801a5b4:	21d8      	movs	r1, #216	@ 0xd8
 801a5b6:	187a      	adds	r2, r7, r1
 801a5b8:	6013      	str	r3, [r2, #0]
 801a5ba:	1d7b      	adds	r3, r7, #5
 801a5bc:	33ff      	adds	r3, #255	@ 0xff
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	221f      	movs	r2, #31
 801a5c2:	4013      	ands	r3, r2
 801a5c4:	d104      	bne.n	801a5d0 <USB_EPStartXfer+0x1120>
 801a5c6:	187b      	adds	r3, r7, r1
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	3b01      	subs	r3, #1
 801a5cc:	187a      	adds	r2, r7, r1
 801a5ce:	6013      	str	r3, [r2, #0]
 801a5d0:	21b8      	movs	r1, #184	@ 0xb8
 801a5d2:	187b      	adds	r3, r7, r1
 801a5d4:	681b      	ldr	r3, [r3, #0]
 801a5d6:	881b      	ldrh	r3, [r3, #0]
 801a5d8:	b29a      	uxth	r2, r3
 801a5da:	23d8      	movs	r3, #216	@ 0xd8
 801a5dc:	18fb      	adds	r3, r7, r3
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	b29b      	uxth	r3, r3
 801a5e2:	029b      	lsls	r3, r3, #10
 801a5e4:	b29b      	uxth	r3, r3
 801a5e6:	4313      	orrs	r3, r2
 801a5e8:	b29b      	uxth	r3, r3
 801a5ea:	4a21      	ldr	r2, [pc, #132]	@ (801a670 <USB_EPStartXfer+0x11c0>)
 801a5ec:	4313      	orrs	r3, r2
 801a5ee:	b29a      	uxth	r2, r3
 801a5f0:	187b      	adds	r3, r7, r1
 801a5f2:	681b      	ldr	r3, [r3, #0]
 801a5f4:	801a      	strh	r2, [r3, #0]
 801a5f6:	e062      	b.n	801a6be <USB_EPStartXfer+0x120e>
 801a5f8:	1d7b      	adds	r3, r7, #5
 801a5fa:	33ff      	adds	r3, #255	@ 0xff
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d10b      	bne.n	801a61a <USB_EPStartXfer+0x116a>
 801a602:	21b8      	movs	r1, #184	@ 0xb8
 801a604:	187b      	adds	r3, r7, r1
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	881b      	ldrh	r3, [r3, #0]
 801a60a:	b29b      	uxth	r3, r3
 801a60c:	4a18      	ldr	r2, [pc, #96]	@ (801a670 <USB_EPStartXfer+0x11c0>)
 801a60e:	4313      	orrs	r3, r2
 801a610:	b29a      	uxth	r2, r3
 801a612:	187b      	adds	r3, r7, r1
 801a614:	681b      	ldr	r3, [r3, #0]
 801a616:	801a      	strh	r2, [r3, #0]
 801a618:	e051      	b.n	801a6be <USB_EPStartXfer+0x120e>
 801a61a:	1d7b      	adds	r3, r7, #5
 801a61c:	33ff      	adds	r3, #255	@ 0xff
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	085b      	lsrs	r3, r3, #1
 801a622:	21d8      	movs	r1, #216	@ 0xd8
 801a624:	187a      	adds	r2, r7, r1
 801a626:	6013      	str	r3, [r2, #0]
 801a628:	1d7b      	adds	r3, r7, #5
 801a62a:	33ff      	adds	r3, #255	@ 0xff
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	2201      	movs	r2, #1
 801a630:	4013      	ands	r3, r2
 801a632:	d004      	beq.n	801a63e <USB_EPStartXfer+0x118e>
 801a634:	187b      	adds	r3, r7, r1
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	3301      	adds	r3, #1
 801a63a:	187a      	adds	r2, r7, r1
 801a63c:	6013      	str	r3, [r2, #0]
 801a63e:	21b8      	movs	r1, #184	@ 0xb8
 801a640:	187b      	adds	r3, r7, r1
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	881b      	ldrh	r3, [r3, #0]
 801a646:	b29a      	uxth	r2, r3
 801a648:	23d8      	movs	r3, #216	@ 0xd8
 801a64a:	18fb      	adds	r3, r7, r3
 801a64c:	681b      	ldr	r3, [r3, #0]
 801a64e:	b29b      	uxth	r3, r3
 801a650:	029b      	lsls	r3, r3, #10
 801a652:	b29b      	uxth	r3, r3
 801a654:	4313      	orrs	r3, r2
 801a656:	b29a      	uxth	r2, r3
 801a658:	187b      	adds	r3, r7, r1
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	801a      	strh	r2, [r3, #0]
 801a65e:	e02e      	b.n	801a6be <USB_EPStartXfer+0x120e>
 801a660:	00000406 	.word	0x00000406
 801a664:	ffff8f8f 	.word	0xffff8f8f
 801a668:	ffff80c0 	.word	0xffff80c0
 801a66c:	00000402 	.word	0x00000402
 801a670:	ffff8000 	.word	0xffff8000
 801a674:	683b      	ldr	r3, [r7, #0]
 801a676:	785b      	ldrb	r3, [r3, #1]
 801a678:	2b01      	cmp	r3, #1
 801a67a:	d120      	bne.n	801a6be <USB_EPStartXfer+0x120e>
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	2250      	movs	r2, #80	@ 0x50
 801a680:	5a9b      	ldrh	r3, [r3, r2]
 801a682:	b29b      	uxth	r3, r3
 801a684:	001a      	movs	r2, r3
 801a686:	21c4      	movs	r1, #196	@ 0xc4
 801a688:	187b      	adds	r3, r7, r1
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	189b      	adds	r3, r3, r2
 801a68e:	187a      	adds	r2, r7, r1
 801a690:	6013      	str	r3, [r2, #0]
 801a692:	683b      	ldr	r3, [r7, #0]
 801a694:	781b      	ldrb	r3, [r3, #0]
 801a696:	00da      	lsls	r2, r3, #3
 801a698:	187b      	adds	r3, r7, r1
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	18d3      	adds	r3, r2, r3
 801a69e:	4a1d      	ldr	r2, [pc, #116]	@ (801a714 <USB_EPStartXfer+0x1264>)
 801a6a0:	4694      	mov	ip, r2
 801a6a2:	4463      	add	r3, ip
 801a6a4:	21c0      	movs	r1, #192	@ 0xc0
 801a6a6:	187a      	adds	r2, r7, r1
 801a6a8:	6013      	str	r3, [r2, #0]
 801a6aa:	1d7b      	adds	r3, r7, #5
 801a6ac:	33ff      	adds	r3, #255	@ 0xff
 801a6ae:	681b      	ldr	r3, [r3, #0]
 801a6b0:	b29a      	uxth	r2, r3
 801a6b2:	187b      	adds	r3, r7, r1
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	801a      	strh	r2, [r3, #0]
 801a6b8:	e001      	b.n	801a6be <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801a6ba:	2301      	movs	r3, #1
 801a6bc:	e025      	b.n	801a70a <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801a6be:	687a      	ldr	r2, [r7, #4]
 801a6c0:	683b      	ldr	r3, [r7, #0]
 801a6c2:	781b      	ldrb	r3, [r3, #0]
 801a6c4:	009b      	lsls	r3, r3, #2
 801a6c6:	18d3      	adds	r3, r2, r3
 801a6c8:	881b      	ldrh	r3, [r3, #0]
 801a6ca:	b29a      	uxth	r2, r3
 801a6cc:	208a      	movs	r0, #138	@ 0x8a
 801a6ce:	183b      	adds	r3, r7, r0
 801a6d0:	4911      	ldr	r1, [pc, #68]	@ (801a718 <USB_EPStartXfer+0x1268>)
 801a6d2:	400a      	ands	r2, r1
 801a6d4:	801a      	strh	r2, [r3, #0]
 801a6d6:	183b      	adds	r3, r7, r0
 801a6d8:	183a      	adds	r2, r7, r0
 801a6da:	8812      	ldrh	r2, [r2, #0]
 801a6dc:	2180      	movs	r1, #128	@ 0x80
 801a6de:	0149      	lsls	r1, r1, #5
 801a6e0:	404a      	eors	r2, r1
 801a6e2:	801a      	strh	r2, [r3, #0]
 801a6e4:	183b      	adds	r3, r7, r0
 801a6e6:	183a      	adds	r2, r7, r0
 801a6e8:	8812      	ldrh	r2, [r2, #0]
 801a6ea:	2180      	movs	r1, #128	@ 0x80
 801a6ec:	0189      	lsls	r1, r1, #6
 801a6ee:	404a      	eors	r2, r1
 801a6f0:	801a      	strh	r2, [r3, #0]
 801a6f2:	687a      	ldr	r2, [r7, #4]
 801a6f4:	683b      	ldr	r3, [r7, #0]
 801a6f6:	781b      	ldrb	r3, [r3, #0]
 801a6f8:	009b      	lsls	r3, r3, #2
 801a6fa:	18d3      	adds	r3, r2, r3
 801a6fc:	183a      	adds	r2, r7, r0
 801a6fe:	8812      	ldrh	r2, [r2, #0]
 801a700:	4906      	ldr	r1, [pc, #24]	@ (801a71c <USB_EPStartXfer+0x126c>)
 801a702:	430a      	orrs	r2, r1
 801a704:	b292      	uxth	r2, r2
 801a706:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801a708:	2300      	movs	r3, #0
}
 801a70a:	0018      	movs	r0, r3
 801a70c:	46bd      	mov	sp, r7
 801a70e:	b043      	add	sp, #268	@ 0x10c
 801a710:	bd90      	pop	{r4, r7, pc}
 801a712:	46c0      	nop			@ (mov r8, r8)
 801a714:	00000406 	.word	0x00000406
 801a718:	ffffbf8f 	.word	0xffffbf8f
 801a71c:	ffff8080 	.word	0xffff8080

0801a720 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a720:	b580      	push	{r7, lr}
 801a722:	b084      	sub	sp, #16
 801a724:	af00      	add	r7, sp, #0
 801a726:	6078      	str	r0, [r7, #4]
 801a728:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801a72a:	683b      	ldr	r3, [r7, #0]
 801a72c:	785b      	ldrb	r3, [r3, #1]
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d01d      	beq.n	801a76e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801a732:	687a      	ldr	r2, [r7, #4]
 801a734:	683b      	ldr	r3, [r7, #0]
 801a736:	781b      	ldrb	r3, [r3, #0]
 801a738:	009b      	lsls	r3, r3, #2
 801a73a:	18d3      	adds	r3, r2, r3
 801a73c:	881b      	ldrh	r3, [r3, #0]
 801a73e:	b29a      	uxth	r2, r3
 801a740:	200c      	movs	r0, #12
 801a742:	183b      	adds	r3, r7, r0
 801a744:	491b      	ldr	r1, [pc, #108]	@ (801a7b4 <USB_EPSetStall+0x94>)
 801a746:	400a      	ands	r2, r1
 801a748:	801a      	strh	r2, [r3, #0]
 801a74a:	183b      	adds	r3, r7, r0
 801a74c:	183a      	adds	r2, r7, r0
 801a74e:	8812      	ldrh	r2, [r2, #0]
 801a750:	2110      	movs	r1, #16
 801a752:	404a      	eors	r2, r1
 801a754:	801a      	strh	r2, [r3, #0]
 801a756:	687a      	ldr	r2, [r7, #4]
 801a758:	683b      	ldr	r3, [r7, #0]
 801a75a:	781b      	ldrb	r3, [r3, #0]
 801a75c:	009b      	lsls	r3, r3, #2
 801a75e:	18d3      	adds	r3, r2, r3
 801a760:	183a      	adds	r2, r7, r0
 801a762:	8812      	ldrh	r2, [r2, #0]
 801a764:	4914      	ldr	r1, [pc, #80]	@ (801a7b8 <USB_EPSetStall+0x98>)
 801a766:	430a      	orrs	r2, r1
 801a768:	b292      	uxth	r2, r2
 801a76a:	801a      	strh	r2, [r3, #0]
 801a76c:	e01d      	b.n	801a7aa <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801a76e:	687a      	ldr	r2, [r7, #4]
 801a770:	683b      	ldr	r3, [r7, #0]
 801a772:	781b      	ldrb	r3, [r3, #0]
 801a774:	009b      	lsls	r3, r3, #2
 801a776:	18d3      	adds	r3, r2, r3
 801a778:	881b      	ldrh	r3, [r3, #0]
 801a77a:	b29a      	uxth	r2, r3
 801a77c:	200e      	movs	r0, #14
 801a77e:	183b      	adds	r3, r7, r0
 801a780:	490e      	ldr	r1, [pc, #56]	@ (801a7bc <USB_EPSetStall+0x9c>)
 801a782:	400a      	ands	r2, r1
 801a784:	801a      	strh	r2, [r3, #0]
 801a786:	183b      	adds	r3, r7, r0
 801a788:	183a      	adds	r2, r7, r0
 801a78a:	8812      	ldrh	r2, [r2, #0]
 801a78c:	2180      	movs	r1, #128	@ 0x80
 801a78e:	0149      	lsls	r1, r1, #5
 801a790:	404a      	eors	r2, r1
 801a792:	801a      	strh	r2, [r3, #0]
 801a794:	687a      	ldr	r2, [r7, #4]
 801a796:	683b      	ldr	r3, [r7, #0]
 801a798:	781b      	ldrb	r3, [r3, #0]
 801a79a:	009b      	lsls	r3, r3, #2
 801a79c:	18d3      	adds	r3, r2, r3
 801a79e:	183a      	adds	r2, r7, r0
 801a7a0:	8812      	ldrh	r2, [r2, #0]
 801a7a2:	4905      	ldr	r1, [pc, #20]	@ (801a7b8 <USB_EPSetStall+0x98>)
 801a7a4:	430a      	orrs	r2, r1
 801a7a6:	b292      	uxth	r2, r2
 801a7a8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801a7aa:	2300      	movs	r3, #0
}
 801a7ac:	0018      	movs	r0, r3
 801a7ae:	46bd      	mov	sp, r7
 801a7b0:	b004      	add	sp, #16
 801a7b2:	bd80      	pop	{r7, pc}
 801a7b4:	ffff8fbf 	.word	0xffff8fbf
 801a7b8:	ffff8080 	.word	0xffff8080
 801a7bc:	ffffbf8f 	.word	0xffffbf8f

0801a7c0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a7c0:	b580      	push	{r7, lr}
 801a7c2:	b086      	sub	sp, #24
 801a7c4:	af00      	add	r7, sp, #0
 801a7c6:	6078      	str	r0, [r7, #4]
 801a7c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801a7ca:	683b      	ldr	r3, [r7, #0]
 801a7cc:	7b1b      	ldrb	r3, [r3, #12]
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	d000      	beq.n	801a7d4 <USB_EPClearStall+0x14>
 801a7d2:	e095      	b.n	801a900 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801a7d4:	683b      	ldr	r3, [r7, #0]
 801a7d6:	785b      	ldrb	r3, [r3, #1]
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d046      	beq.n	801a86a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801a7dc:	687a      	ldr	r2, [r7, #4]
 801a7de:	683b      	ldr	r3, [r7, #0]
 801a7e0:	781b      	ldrb	r3, [r3, #0]
 801a7e2:	009b      	lsls	r3, r3, #2
 801a7e4:	18d2      	adds	r2, r2, r3
 801a7e6:	2110      	movs	r1, #16
 801a7e8:	187b      	adds	r3, r7, r1
 801a7ea:	8812      	ldrh	r2, [r2, #0]
 801a7ec:	801a      	strh	r2, [r3, #0]
 801a7ee:	187b      	adds	r3, r7, r1
 801a7f0:	881b      	ldrh	r3, [r3, #0]
 801a7f2:	2240      	movs	r2, #64	@ 0x40
 801a7f4:	4013      	ands	r3, r2
 801a7f6:	d016      	beq.n	801a826 <USB_EPClearStall+0x66>
 801a7f8:	687a      	ldr	r2, [r7, #4]
 801a7fa:	683b      	ldr	r3, [r7, #0]
 801a7fc:	781b      	ldrb	r3, [r3, #0]
 801a7fe:	009b      	lsls	r3, r3, #2
 801a800:	18d3      	adds	r3, r2, r3
 801a802:	881b      	ldrh	r3, [r3, #0]
 801a804:	b29a      	uxth	r2, r3
 801a806:	200e      	movs	r0, #14
 801a808:	183b      	adds	r3, r7, r0
 801a80a:	4940      	ldr	r1, [pc, #256]	@ (801a90c <USB_EPClearStall+0x14c>)
 801a80c:	400a      	ands	r2, r1
 801a80e:	801a      	strh	r2, [r3, #0]
 801a810:	687a      	ldr	r2, [r7, #4]
 801a812:	683b      	ldr	r3, [r7, #0]
 801a814:	781b      	ldrb	r3, [r3, #0]
 801a816:	009b      	lsls	r3, r3, #2
 801a818:	18d3      	adds	r3, r2, r3
 801a81a:	183a      	adds	r2, r7, r0
 801a81c:	8812      	ldrh	r2, [r2, #0]
 801a81e:	493c      	ldr	r1, [pc, #240]	@ (801a910 <USB_EPClearStall+0x150>)
 801a820:	430a      	orrs	r2, r1
 801a822:	b292      	uxth	r2, r2
 801a824:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801a826:	683b      	ldr	r3, [r7, #0]
 801a828:	78db      	ldrb	r3, [r3, #3]
 801a82a:	2b01      	cmp	r3, #1
 801a82c:	d068      	beq.n	801a900 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801a82e:	687a      	ldr	r2, [r7, #4]
 801a830:	683b      	ldr	r3, [r7, #0]
 801a832:	781b      	ldrb	r3, [r3, #0]
 801a834:	009b      	lsls	r3, r3, #2
 801a836:	18d3      	adds	r3, r2, r3
 801a838:	881b      	ldrh	r3, [r3, #0]
 801a83a:	b29a      	uxth	r2, r3
 801a83c:	200c      	movs	r0, #12
 801a83e:	183b      	adds	r3, r7, r0
 801a840:	4934      	ldr	r1, [pc, #208]	@ (801a914 <USB_EPClearStall+0x154>)
 801a842:	400a      	ands	r2, r1
 801a844:	801a      	strh	r2, [r3, #0]
 801a846:	183b      	adds	r3, r7, r0
 801a848:	183a      	adds	r2, r7, r0
 801a84a:	8812      	ldrh	r2, [r2, #0]
 801a84c:	2120      	movs	r1, #32
 801a84e:	404a      	eors	r2, r1
 801a850:	801a      	strh	r2, [r3, #0]
 801a852:	687a      	ldr	r2, [r7, #4]
 801a854:	683b      	ldr	r3, [r7, #0]
 801a856:	781b      	ldrb	r3, [r3, #0]
 801a858:	009b      	lsls	r3, r3, #2
 801a85a:	18d3      	adds	r3, r2, r3
 801a85c:	183a      	adds	r2, r7, r0
 801a85e:	8812      	ldrh	r2, [r2, #0]
 801a860:	492d      	ldr	r1, [pc, #180]	@ (801a918 <USB_EPClearStall+0x158>)
 801a862:	430a      	orrs	r2, r1
 801a864:	b292      	uxth	r2, r2
 801a866:	801a      	strh	r2, [r3, #0]
 801a868:	e04a      	b.n	801a900 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a86a:	687a      	ldr	r2, [r7, #4]
 801a86c:	683b      	ldr	r3, [r7, #0]
 801a86e:	781b      	ldrb	r3, [r3, #0]
 801a870:	009b      	lsls	r3, r3, #2
 801a872:	18d2      	adds	r2, r2, r3
 801a874:	2116      	movs	r1, #22
 801a876:	187b      	adds	r3, r7, r1
 801a878:	8812      	ldrh	r2, [r2, #0]
 801a87a:	801a      	strh	r2, [r3, #0]
 801a87c:	187b      	adds	r3, r7, r1
 801a87e:	881a      	ldrh	r2, [r3, #0]
 801a880:	2380      	movs	r3, #128	@ 0x80
 801a882:	01db      	lsls	r3, r3, #7
 801a884:	4013      	ands	r3, r2
 801a886:	d016      	beq.n	801a8b6 <USB_EPClearStall+0xf6>
 801a888:	687a      	ldr	r2, [r7, #4]
 801a88a:	683b      	ldr	r3, [r7, #0]
 801a88c:	781b      	ldrb	r3, [r3, #0]
 801a88e:	009b      	lsls	r3, r3, #2
 801a890:	18d3      	adds	r3, r2, r3
 801a892:	881b      	ldrh	r3, [r3, #0]
 801a894:	b29a      	uxth	r2, r3
 801a896:	2014      	movs	r0, #20
 801a898:	183b      	adds	r3, r7, r0
 801a89a:	491c      	ldr	r1, [pc, #112]	@ (801a90c <USB_EPClearStall+0x14c>)
 801a89c:	400a      	ands	r2, r1
 801a89e:	801a      	strh	r2, [r3, #0]
 801a8a0:	687a      	ldr	r2, [r7, #4]
 801a8a2:	683b      	ldr	r3, [r7, #0]
 801a8a4:	781b      	ldrb	r3, [r3, #0]
 801a8a6:	009b      	lsls	r3, r3, #2
 801a8a8:	18d3      	adds	r3, r2, r3
 801a8aa:	183a      	adds	r2, r7, r0
 801a8ac:	8812      	ldrh	r2, [r2, #0]
 801a8ae:	491b      	ldr	r1, [pc, #108]	@ (801a91c <USB_EPClearStall+0x15c>)
 801a8b0:	430a      	orrs	r2, r1
 801a8b2:	b292      	uxth	r2, r2
 801a8b4:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801a8b6:	687a      	ldr	r2, [r7, #4]
 801a8b8:	683b      	ldr	r3, [r7, #0]
 801a8ba:	781b      	ldrb	r3, [r3, #0]
 801a8bc:	009b      	lsls	r3, r3, #2
 801a8be:	18d3      	adds	r3, r2, r3
 801a8c0:	881b      	ldrh	r3, [r3, #0]
 801a8c2:	b29a      	uxth	r2, r3
 801a8c4:	2012      	movs	r0, #18
 801a8c6:	183b      	adds	r3, r7, r0
 801a8c8:	4915      	ldr	r1, [pc, #84]	@ (801a920 <USB_EPClearStall+0x160>)
 801a8ca:	400a      	ands	r2, r1
 801a8cc:	801a      	strh	r2, [r3, #0]
 801a8ce:	183b      	adds	r3, r7, r0
 801a8d0:	183a      	adds	r2, r7, r0
 801a8d2:	8812      	ldrh	r2, [r2, #0]
 801a8d4:	2180      	movs	r1, #128	@ 0x80
 801a8d6:	0149      	lsls	r1, r1, #5
 801a8d8:	404a      	eors	r2, r1
 801a8da:	801a      	strh	r2, [r3, #0]
 801a8dc:	183b      	adds	r3, r7, r0
 801a8de:	183a      	adds	r2, r7, r0
 801a8e0:	8812      	ldrh	r2, [r2, #0]
 801a8e2:	2180      	movs	r1, #128	@ 0x80
 801a8e4:	0189      	lsls	r1, r1, #6
 801a8e6:	404a      	eors	r2, r1
 801a8e8:	801a      	strh	r2, [r3, #0]
 801a8ea:	687a      	ldr	r2, [r7, #4]
 801a8ec:	683b      	ldr	r3, [r7, #0]
 801a8ee:	781b      	ldrb	r3, [r3, #0]
 801a8f0:	009b      	lsls	r3, r3, #2
 801a8f2:	18d3      	adds	r3, r2, r3
 801a8f4:	183a      	adds	r2, r7, r0
 801a8f6:	8812      	ldrh	r2, [r2, #0]
 801a8f8:	4907      	ldr	r1, [pc, #28]	@ (801a918 <USB_EPClearStall+0x158>)
 801a8fa:	430a      	orrs	r2, r1
 801a8fc:	b292      	uxth	r2, r2
 801a8fe:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801a900:	2300      	movs	r3, #0
}
 801a902:	0018      	movs	r0, r3
 801a904:	46bd      	mov	sp, r7
 801a906:	b006      	add	sp, #24
 801a908:	bd80      	pop	{r7, pc}
 801a90a:	46c0      	nop			@ (mov r8, r8)
 801a90c:	ffff8f8f 	.word	0xffff8f8f
 801a910:	ffff80c0 	.word	0xffff80c0
 801a914:	ffff8fbf 	.word	0xffff8fbf
 801a918:	ffff8080 	.word	0xffff8080
 801a91c:	ffffc080 	.word	0xffffc080
 801a920:	ffffbf8f 	.word	0xffffbf8f

0801a924 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801a924:	b580      	push	{r7, lr}
 801a926:	b082      	sub	sp, #8
 801a928:	af00      	add	r7, sp, #0
 801a92a:	6078      	str	r0, [r7, #4]
 801a92c:	000a      	movs	r2, r1
 801a92e:	1cfb      	adds	r3, r7, #3
 801a930:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801a932:	1cfb      	adds	r3, r7, #3
 801a934:	781b      	ldrb	r3, [r3, #0]
 801a936:	2b00      	cmp	r3, #0
 801a938:	d103      	bne.n	801a942 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	224c      	movs	r2, #76	@ 0x4c
 801a93e:	2180      	movs	r1, #128	@ 0x80
 801a940:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801a942:	2300      	movs	r3, #0
}
 801a944:	0018      	movs	r0, r3
 801a946:	46bd      	mov	sp, r7
 801a948:	b002      	add	sp, #8
 801a94a:	bd80      	pop	{r7, pc}

0801a94c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801a94c:	b580      	push	{r7, lr}
 801a94e:	b082      	sub	sp, #8
 801a950:	af00      	add	r7, sp, #0
 801a952:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	2258      	movs	r2, #88	@ 0x58
 801a958:	5a9b      	ldrh	r3, [r3, r2]
 801a95a:	b29b      	uxth	r3, r3
 801a95c:	4a05      	ldr	r2, [pc, #20]	@ (801a974 <USB_DevConnect+0x28>)
 801a95e:	4313      	orrs	r3, r2
 801a960:	b299      	uxth	r1, r3
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	2258      	movs	r2, #88	@ 0x58
 801a966:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801a968:	2300      	movs	r3, #0
}
 801a96a:	0018      	movs	r0, r3
 801a96c:	46bd      	mov	sp, r7
 801a96e:	b002      	add	sp, #8
 801a970:	bd80      	pop	{r7, pc}
 801a972:	46c0      	nop			@ (mov r8, r8)
 801a974:	ffff8000 	.word	0xffff8000

0801a978 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801a978:	b580      	push	{r7, lr}
 801a97a:	b084      	sub	sp, #16
 801a97c:	af00      	add	r7, sp, #0
 801a97e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	2244      	movs	r2, #68	@ 0x44
 801a984:	5a9b      	ldrh	r3, [r3, r2]
 801a986:	b29b      	uxth	r3, r3
 801a988:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801a98a:	68fb      	ldr	r3, [r7, #12]
}
 801a98c:	0018      	movs	r0, r3
 801a98e:	46bd      	mov	sp, r7
 801a990:	b004      	add	sp, #16
 801a992:	bd80      	pop	{r7, pc}

0801a994 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801a994:	b580      	push	{r7, lr}
 801a996:	b08a      	sub	sp, #40	@ 0x28
 801a998:	af00      	add	r7, sp, #0
 801a99a:	60f8      	str	r0, [r7, #12]
 801a99c:	60b9      	str	r1, [r7, #8]
 801a99e:	0019      	movs	r1, r3
 801a9a0:	1dbb      	adds	r3, r7, #6
 801a9a2:	801a      	strh	r2, [r3, #0]
 801a9a4:	1d3b      	adds	r3, r7, #4
 801a9a6:	1c0a      	adds	r2, r1, #0
 801a9a8:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801a9aa:	1d3b      	adds	r3, r7, #4
 801a9ac:	881b      	ldrh	r3, [r3, #0]
 801a9ae:	3301      	adds	r3, #1
 801a9b0:	085b      	lsrs	r3, r3, #1
 801a9b2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801a9b4:	68fb      	ldr	r3, [r7, #12]
 801a9b6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801a9b8:	68bb      	ldr	r3, [r7, #8]
 801a9ba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801a9bc:	1dbb      	adds	r3, r7, #6
 801a9be:	881a      	ldrh	r2, [r3, #0]
 801a9c0:	697b      	ldr	r3, [r7, #20]
 801a9c2:	18d3      	adds	r3, r2, r3
 801a9c4:	2280      	movs	r2, #128	@ 0x80
 801a9c6:	00d2      	lsls	r2, r2, #3
 801a9c8:	4694      	mov	ip, r2
 801a9ca:	4463      	add	r3, ip
 801a9cc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801a9ce:	69bb      	ldr	r3, [r7, #24]
 801a9d0:	627b      	str	r3, [r7, #36]	@ 0x24
 801a9d2:	e020      	b.n	801aa16 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801a9d4:	69fb      	ldr	r3, [r7, #28]
 801a9d6:	781a      	ldrb	r2, [r3, #0]
 801a9d8:	2112      	movs	r1, #18
 801a9da:	187b      	adds	r3, r7, r1
 801a9dc:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801a9de:	69fb      	ldr	r3, [r7, #28]
 801a9e0:	3301      	adds	r3, #1
 801a9e2:	781b      	ldrb	r3, [r3, #0]
 801a9e4:	021b      	lsls	r3, r3, #8
 801a9e6:	b21a      	sxth	r2, r3
 801a9e8:	187b      	adds	r3, r7, r1
 801a9ea:	2000      	movs	r0, #0
 801a9ec:	5e1b      	ldrsh	r3, [r3, r0]
 801a9ee:	4313      	orrs	r3, r2
 801a9f0:	b21a      	sxth	r2, r3
 801a9f2:	187b      	adds	r3, r7, r1
 801a9f4:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801a9f6:	6a3b      	ldr	r3, [r7, #32]
 801a9f8:	187a      	adds	r2, r7, r1
 801a9fa:	8812      	ldrh	r2, [r2, #0]
 801a9fc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801a9fe:	6a3b      	ldr	r3, [r7, #32]
 801aa00:	3302      	adds	r3, #2
 801aa02:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801aa04:	69fb      	ldr	r3, [r7, #28]
 801aa06:	3301      	adds	r3, #1
 801aa08:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801aa0a:	69fb      	ldr	r3, [r7, #28]
 801aa0c:	3301      	adds	r3, #1
 801aa0e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801aa10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa12:	3b01      	subs	r3, #1
 801aa14:	627b      	str	r3, [r7, #36]	@ 0x24
 801aa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d1db      	bne.n	801a9d4 <USB_WritePMA+0x40>
  }
}
 801aa1c:	46c0      	nop			@ (mov r8, r8)
 801aa1e:	46c0      	nop			@ (mov r8, r8)
 801aa20:	46bd      	mov	sp, r7
 801aa22:	b00a      	add	sp, #40	@ 0x28
 801aa24:	bd80      	pop	{r7, pc}

0801aa26 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801aa26:	b580      	push	{r7, lr}
 801aa28:	b08a      	sub	sp, #40	@ 0x28
 801aa2a:	af00      	add	r7, sp, #0
 801aa2c:	60f8      	str	r0, [r7, #12]
 801aa2e:	60b9      	str	r1, [r7, #8]
 801aa30:	0019      	movs	r1, r3
 801aa32:	1dbb      	adds	r3, r7, #6
 801aa34:	801a      	strh	r2, [r3, #0]
 801aa36:	1d3b      	adds	r3, r7, #4
 801aa38:	1c0a      	adds	r2, r1, #0
 801aa3a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801aa3c:	1d3b      	adds	r3, r7, #4
 801aa3e:	881b      	ldrh	r3, [r3, #0]
 801aa40:	085b      	lsrs	r3, r3, #1
 801aa42:	b29b      	uxth	r3, r3
 801aa44:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801aa46:	68fb      	ldr	r3, [r7, #12]
 801aa48:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801aa4a:	68bb      	ldr	r3, [r7, #8]
 801aa4c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801aa4e:	1dbb      	adds	r3, r7, #6
 801aa50:	881a      	ldrh	r2, [r3, #0]
 801aa52:	697b      	ldr	r3, [r7, #20]
 801aa54:	18d3      	adds	r3, r2, r3
 801aa56:	2280      	movs	r2, #128	@ 0x80
 801aa58:	00d2      	lsls	r2, r2, #3
 801aa5a:	4694      	mov	ip, r2
 801aa5c:	4463      	add	r3, ip
 801aa5e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801aa60:	69bb      	ldr	r3, [r7, #24]
 801aa62:	627b      	str	r3, [r7, #36]	@ 0x24
 801aa64:	e018      	b.n	801aa98 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801aa66:	6a3b      	ldr	r3, [r7, #32]
 801aa68:	881b      	ldrh	r3, [r3, #0]
 801aa6a:	b29b      	uxth	r3, r3
 801aa6c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801aa6e:	6a3b      	ldr	r3, [r7, #32]
 801aa70:	3302      	adds	r3, #2
 801aa72:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801aa74:	693b      	ldr	r3, [r7, #16]
 801aa76:	b2da      	uxtb	r2, r3
 801aa78:	69fb      	ldr	r3, [r7, #28]
 801aa7a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801aa7c:	69fb      	ldr	r3, [r7, #28]
 801aa7e:	3301      	adds	r3, #1
 801aa80:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801aa82:	693b      	ldr	r3, [r7, #16]
 801aa84:	0a1b      	lsrs	r3, r3, #8
 801aa86:	b2da      	uxtb	r2, r3
 801aa88:	69fb      	ldr	r3, [r7, #28]
 801aa8a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801aa8c:	69fb      	ldr	r3, [r7, #28]
 801aa8e:	3301      	adds	r3, #1
 801aa90:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801aa92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa94:	3b01      	subs	r3, #1
 801aa96:	627b      	str	r3, [r7, #36]	@ 0x24
 801aa98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d1e3      	bne.n	801aa66 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801aa9e:	1d3b      	adds	r3, r7, #4
 801aaa0:	881b      	ldrh	r3, [r3, #0]
 801aaa2:	2201      	movs	r2, #1
 801aaa4:	4013      	ands	r3, r2
 801aaa6:	b29b      	uxth	r3, r3
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d007      	beq.n	801aabc <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801aaac:	6a3b      	ldr	r3, [r7, #32]
 801aaae:	881b      	ldrh	r3, [r3, #0]
 801aab0:	b29b      	uxth	r3, r3
 801aab2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801aab4:	693b      	ldr	r3, [r7, #16]
 801aab6:	b2da      	uxtb	r2, r3
 801aab8:	69fb      	ldr	r3, [r7, #28]
 801aaba:	701a      	strb	r2, [r3, #0]
  }
}
 801aabc:	46c0      	nop			@ (mov r8, r8)
 801aabe:	46bd      	mov	sp, r7
 801aac0:	b00a      	add	sp, #40	@ 0x28
 801aac2:	bd80      	pop	{r7, pc}

0801aac4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801aac4:	b580      	push	{r7, lr}
 801aac6:	b084      	sub	sp, #16
 801aac8:	af00      	add	r7, sp, #0
 801aaca:	6078      	str	r0, [r7, #4]
 801aacc:	000a      	movs	r2, r1
 801aace:	1cfb      	adds	r3, r7, #3
 801aad0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801aad2:	230f      	movs	r3, #15
 801aad4:	18fb      	adds	r3, r7, r3
 801aad6:	2200      	movs	r2, #0
 801aad8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	7c1b      	ldrb	r3, [r3, #16]
 801aade:	2b00      	cmp	r3, #0
 801aae0:	d116      	bne.n	801ab10 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801aae2:	2380      	movs	r3, #128	@ 0x80
 801aae4:	009b      	lsls	r3, r3, #2
 801aae6:	6878      	ldr	r0, [r7, #4]
 801aae8:	2202      	movs	r2, #2
 801aaea:	2181      	movs	r1, #129	@ 0x81
 801aaec:	f002 f8eb 	bl	801ccc6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	2201      	movs	r2, #1
 801aaf4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801aaf6:	2380      	movs	r3, #128	@ 0x80
 801aaf8:	009b      	lsls	r3, r3, #2
 801aafa:	6878      	ldr	r0, [r7, #4]
 801aafc:	2202      	movs	r2, #2
 801aafe:	2101      	movs	r1, #1
 801ab00:	f002 f8e1 	bl	801ccc6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801ab04:	687a      	ldr	r2, [r7, #4]
 801ab06:	23b6      	movs	r3, #182	@ 0xb6
 801ab08:	005b      	lsls	r3, r3, #1
 801ab0a:	2101      	movs	r1, #1
 801ab0c:	50d1      	str	r1, [r2, r3]
 801ab0e:	e013      	b.n	801ab38 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801ab10:	6878      	ldr	r0, [r7, #4]
 801ab12:	2340      	movs	r3, #64	@ 0x40
 801ab14:	2202      	movs	r2, #2
 801ab16:	2181      	movs	r1, #129	@ 0x81
 801ab18:	f002 f8d5 	bl	801ccc6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	2201      	movs	r2, #1
 801ab20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801ab22:	6878      	ldr	r0, [r7, #4]
 801ab24:	2340      	movs	r3, #64	@ 0x40
 801ab26:	2202      	movs	r2, #2
 801ab28:	2101      	movs	r1, #1
 801ab2a:	f002 f8cc 	bl	801ccc6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801ab2e:	687a      	ldr	r2, [r7, #4]
 801ab30:	23b6      	movs	r3, #182	@ 0xb6
 801ab32:	005b      	lsls	r3, r3, #1
 801ab34:	2101      	movs	r1, #1
 801ab36:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801ab38:	6878      	ldr	r0, [r7, #4]
 801ab3a:	2308      	movs	r3, #8
 801ab3c:	2203      	movs	r2, #3
 801ab3e:	2182      	movs	r1, #130	@ 0x82
 801ab40:	f002 f8c1 	bl	801ccc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	2201      	movs	r2, #1
 801ab48:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801ab4a:	2387      	movs	r3, #135	@ 0x87
 801ab4c:	009b      	lsls	r3, r3, #2
 801ab4e:	0018      	movs	r0, r3
 801ab50:	f002 fa52 	bl	801cff8 <USBD_static_malloc>
 801ab54:	0001      	movs	r1, r0
 801ab56:	687a      	ldr	r2, [r7, #4]
 801ab58:	23ae      	movs	r3, #174	@ 0xae
 801ab5a:	009b      	lsls	r3, r3, #2
 801ab5c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801ab5e:	687a      	ldr	r2, [r7, #4]
 801ab60:	23ae      	movs	r3, #174	@ 0xae
 801ab62:	009b      	lsls	r3, r3, #2
 801ab64:	58d3      	ldr	r3, [r2, r3]
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	d104      	bne.n	801ab74 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801ab6a:	230f      	movs	r3, #15
 801ab6c:	18fb      	adds	r3, r7, r3
 801ab6e:	2201      	movs	r2, #1
 801ab70:	701a      	strb	r2, [r3, #0]
 801ab72:	e02c      	b.n	801abce <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ab74:	687a      	ldr	r2, [r7, #4]
 801ab76:	23ae      	movs	r3, #174	@ 0xae
 801ab78:	009b      	lsls	r3, r3, #2
 801ab7a:	58d3      	ldr	r3, [r2, r3]
 801ab7c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801ab7e:	687a      	ldr	r2, [r7, #4]
 801ab80:	23af      	movs	r3, #175	@ 0xaf
 801ab82:	009b      	lsls	r3, r3, #2
 801ab84:	58d3      	ldr	r3, [r2, r3]
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801ab8a:	68ba      	ldr	r2, [r7, #8]
 801ab8c:	2385      	movs	r3, #133	@ 0x85
 801ab8e:	009b      	lsls	r3, r3, #2
 801ab90:	2100      	movs	r1, #0
 801ab92:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801ab94:	68ba      	ldr	r2, [r7, #8]
 801ab96:	2386      	movs	r3, #134	@ 0x86
 801ab98:	009b      	lsls	r3, r3, #2
 801ab9a:	2100      	movs	r1, #0
 801ab9c:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	7c1b      	ldrb	r3, [r3, #16]
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d10a      	bne.n	801abbc <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801aba6:	68ba      	ldr	r2, [r7, #8]
 801aba8:	2381      	movs	r3, #129	@ 0x81
 801abaa:	009b      	lsls	r3, r3, #2
 801abac:	58d2      	ldr	r2, [r2, r3]
 801abae:	2380      	movs	r3, #128	@ 0x80
 801abb0:	009b      	lsls	r3, r3, #2
 801abb2:	6878      	ldr	r0, [r7, #4]
 801abb4:	2101      	movs	r1, #1
 801abb6:	f002 f9d1 	bl	801cf5c <USBD_LL_PrepareReceive>
 801abba:	e008      	b.n	801abce <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801abbc:	68ba      	ldr	r2, [r7, #8]
 801abbe:	2381      	movs	r3, #129	@ 0x81
 801abc0:	009b      	lsls	r3, r3, #2
 801abc2:	58d2      	ldr	r2, [r2, r3]
 801abc4:	6878      	ldr	r0, [r7, #4]
 801abc6:	2340      	movs	r3, #64	@ 0x40
 801abc8:	2101      	movs	r1, #1
 801abca:	f002 f9c7 	bl	801cf5c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801abce:	230f      	movs	r3, #15
 801abd0:	18fb      	adds	r3, r7, r3
 801abd2:	781b      	ldrb	r3, [r3, #0]
}
 801abd4:	0018      	movs	r0, r3
 801abd6:	46bd      	mov	sp, r7
 801abd8:	b004      	add	sp, #16
 801abda:	bd80      	pop	{r7, pc}

0801abdc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801abdc:	b580      	push	{r7, lr}
 801abde:	b084      	sub	sp, #16
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	6078      	str	r0, [r7, #4]
 801abe4:	000a      	movs	r2, r1
 801abe6:	1cfb      	adds	r3, r7, #3
 801abe8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801abea:	230f      	movs	r3, #15
 801abec:	18fb      	adds	r3, r7, r3
 801abee:	2200      	movs	r2, #0
 801abf0:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	2181      	movs	r1, #129	@ 0x81
 801abf6:	0018      	movs	r0, r3
 801abf8:	f002 f89c 	bl	801cd34 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	2200      	movs	r2, #0
 801ac00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	2101      	movs	r1, #1
 801ac06:	0018      	movs	r0, r3
 801ac08:	f002 f894 	bl	801cd34 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801ac0c:	687a      	ldr	r2, [r7, #4]
 801ac0e:	23b6      	movs	r3, #182	@ 0xb6
 801ac10:	005b      	lsls	r3, r3, #1
 801ac12:	2100      	movs	r1, #0
 801ac14:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	2182      	movs	r1, #130	@ 0x82
 801ac1a:	0018      	movs	r0, r3
 801ac1c:	f002 f88a 	bl	801cd34 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	2200      	movs	r2, #0
 801ac24:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801ac26:	687a      	ldr	r2, [r7, #4]
 801ac28:	23ae      	movs	r3, #174	@ 0xae
 801ac2a:	009b      	lsls	r3, r3, #2
 801ac2c:	58d3      	ldr	r3, [r2, r3]
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d011      	beq.n	801ac56 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801ac32:	687a      	ldr	r2, [r7, #4]
 801ac34:	23af      	movs	r3, #175	@ 0xaf
 801ac36:	009b      	lsls	r3, r3, #2
 801ac38:	58d3      	ldr	r3, [r2, r3]
 801ac3a:	685b      	ldr	r3, [r3, #4]
 801ac3c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801ac3e:	687a      	ldr	r2, [r7, #4]
 801ac40:	23ae      	movs	r3, #174	@ 0xae
 801ac42:	009b      	lsls	r3, r3, #2
 801ac44:	58d3      	ldr	r3, [r2, r3]
 801ac46:	0018      	movs	r0, r3
 801ac48:	f002 f9e2 	bl	801d010 <USBD_static_free>
    pdev->pClassData = NULL;
 801ac4c:	687a      	ldr	r2, [r7, #4]
 801ac4e:	23ae      	movs	r3, #174	@ 0xae
 801ac50:	009b      	lsls	r3, r3, #2
 801ac52:	2100      	movs	r1, #0
 801ac54:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801ac56:	230f      	movs	r3, #15
 801ac58:	18fb      	adds	r3, r7, r3
 801ac5a:	781b      	ldrb	r3, [r3, #0]
}
 801ac5c:	0018      	movs	r0, r3
 801ac5e:	46bd      	mov	sp, r7
 801ac60:	b004      	add	sp, #16
 801ac62:	bd80      	pop	{r7, pc}

0801ac64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801ac64:	b580      	push	{r7, lr}
 801ac66:	b086      	sub	sp, #24
 801ac68:	af00      	add	r7, sp, #0
 801ac6a:	6078      	str	r0, [r7, #4]
 801ac6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ac6e:	687a      	ldr	r2, [r7, #4]
 801ac70:	23ae      	movs	r3, #174	@ 0xae
 801ac72:	009b      	lsls	r3, r3, #2
 801ac74:	58d3      	ldr	r3, [r2, r3]
 801ac76:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801ac78:	230f      	movs	r3, #15
 801ac7a:	18fb      	adds	r3, r7, r3
 801ac7c:	2200      	movs	r2, #0
 801ac7e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801ac80:	230c      	movs	r3, #12
 801ac82:	18fb      	adds	r3, r7, r3
 801ac84:	2200      	movs	r2, #0
 801ac86:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801ac88:	2317      	movs	r3, #23
 801ac8a:	18fb      	adds	r3, r7, r3
 801ac8c:	2200      	movs	r2, #0
 801ac8e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ac90:	683b      	ldr	r3, [r7, #0]
 801ac92:	781b      	ldrb	r3, [r3, #0]
 801ac94:	001a      	movs	r2, r3
 801ac96:	2360      	movs	r3, #96	@ 0x60
 801ac98:	4013      	ands	r3, r2
 801ac9a:	d03d      	beq.n	801ad18 <USBD_CDC_Setup+0xb4>
 801ac9c:	2b20      	cmp	r3, #32
 801ac9e:	d000      	beq.n	801aca2 <USBD_CDC_Setup+0x3e>
 801aca0:	e094      	b.n	801adcc <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801aca2:	683b      	ldr	r3, [r7, #0]
 801aca4:	88db      	ldrh	r3, [r3, #6]
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d02b      	beq.n	801ad02 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801acaa:	683b      	ldr	r3, [r7, #0]
 801acac:	781b      	ldrb	r3, [r3, #0]
 801acae:	b25b      	sxtb	r3, r3
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	da12      	bge.n	801acda <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801acb4:	687a      	ldr	r2, [r7, #4]
 801acb6:	23af      	movs	r3, #175	@ 0xaf
 801acb8:	009b      	lsls	r3, r3, #2
 801acba:	58d3      	ldr	r3, [r2, r3]
 801acbc:	689b      	ldr	r3, [r3, #8]
 801acbe:	683a      	ldr	r2, [r7, #0]
 801acc0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801acc2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801acc4:	683a      	ldr	r2, [r7, #0]
 801acc6:	88d2      	ldrh	r2, [r2, #6]
 801acc8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801acca:	6939      	ldr	r1, [r7, #16]
 801accc:	683b      	ldr	r3, [r7, #0]
 801acce:	88da      	ldrh	r2, [r3, #6]
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	0018      	movs	r0, r3
 801acd4:	f001 fbaf 	bl	801c436 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801acd8:	e083      	b.n	801ade2 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801acda:	683b      	ldr	r3, [r7, #0]
 801acdc:	7859      	ldrb	r1, [r3, #1]
 801acde:	693a      	ldr	r2, [r7, #16]
 801ace0:	2380      	movs	r3, #128	@ 0x80
 801ace2:	009b      	lsls	r3, r3, #2
 801ace4:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801ace6:	683b      	ldr	r3, [r7, #0]
 801ace8:	88db      	ldrh	r3, [r3, #6]
 801acea:	b2d9      	uxtb	r1, r3
 801acec:	693b      	ldr	r3, [r7, #16]
 801acee:	4a40      	ldr	r2, [pc, #256]	@ (801adf0 <USBD_CDC_Setup+0x18c>)
 801acf0:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801acf2:	6939      	ldr	r1, [r7, #16]
 801acf4:	683b      	ldr	r3, [r7, #0]
 801acf6:	88da      	ldrh	r2, [r3, #6]
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	0018      	movs	r0, r3
 801acfc:	f001 fbce 	bl	801c49c <USBD_CtlPrepareRx>
      break;
 801ad00:	e06f      	b.n	801ade2 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801ad02:	687a      	ldr	r2, [r7, #4]
 801ad04:	23af      	movs	r3, #175	@ 0xaf
 801ad06:	009b      	lsls	r3, r3, #2
 801ad08:	58d3      	ldr	r3, [r2, r3]
 801ad0a:	689b      	ldr	r3, [r3, #8]
 801ad0c:	683a      	ldr	r2, [r7, #0]
 801ad0e:	7850      	ldrb	r0, [r2, #1]
 801ad10:	6839      	ldr	r1, [r7, #0]
 801ad12:	2200      	movs	r2, #0
 801ad14:	4798      	blx	r3
      break;
 801ad16:	e064      	b.n	801ade2 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801ad18:	683b      	ldr	r3, [r7, #0]
 801ad1a:	785b      	ldrb	r3, [r3, #1]
 801ad1c:	2b0b      	cmp	r3, #11
 801ad1e:	d037      	beq.n	801ad90 <USBD_CDC_Setup+0x12c>
 801ad20:	dc47      	bgt.n	801adb2 <USBD_CDC_Setup+0x14e>
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d002      	beq.n	801ad2c <USBD_CDC_Setup+0xc8>
 801ad26:	2b0a      	cmp	r3, #10
 801ad28:	d019      	beq.n	801ad5e <USBD_CDC_Setup+0xfa>
 801ad2a:	e042      	b.n	801adb2 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ad2c:	687a      	ldr	r2, [r7, #4]
 801ad2e:	23a7      	movs	r3, #167	@ 0xa7
 801ad30:	009b      	lsls	r3, r3, #2
 801ad32:	5cd3      	ldrb	r3, [r2, r3]
 801ad34:	2b03      	cmp	r3, #3
 801ad36:	d107      	bne.n	801ad48 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801ad38:	230c      	movs	r3, #12
 801ad3a:	18f9      	adds	r1, r7, r3
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	2202      	movs	r2, #2
 801ad40:	0018      	movs	r0, r3
 801ad42:	f001 fb78 	bl	801c436 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801ad46:	e040      	b.n	801adca <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801ad48:	683a      	ldr	r2, [r7, #0]
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	0011      	movs	r1, r2
 801ad4e:	0018      	movs	r0, r3
 801ad50:	f001 faf3 	bl	801c33a <USBD_CtlError>
            ret = USBD_FAIL;
 801ad54:	2317      	movs	r3, #23
 801ad56:	18fb      	adds	r3, r7, r3
 801ad58:	2202      	movs	r2, #2
 801ad5a:	701a      	strb	r2, [r3, #0]
          break;
 801ad5c:	e035      	b.n	801adca <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ad5e:	687a      	ldr	r2, [r7, #4]
 801ad60:	23a7      	movs	r3, #167	@ 0xa7
 801ad62:	009b      	lsls	r3, r3, #2
 801ad64:	5cd3      	ldrb	r3, [r2, r3]
 801ad66:	2b03      	cmp	r3, #3
 801ad68:	d107      	bne.n	801ad7a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801ad6a:	230f      	movs	r3, #15
 801ad6c:	18f9      	adds	r1, r7, r3
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	2201      	movs	r2, #1
 801ad72:	0018      	movs	r0, r3
 801ad74:	f001 fb5f 	bl	801c436 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801ad78:	e027      	b.n	801adca <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801ad7a:	683a      	ldr	r2, [r7, #0]
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	0011      	movs	r1, r2
 801ad80:	0018      	movs	r0, r3
 801ad82:	f001 fada 	bl	801c33a <USBD_CtlError>
            ret = USBD_FAIL;
 801ad86:	2317      	movs	r3, #23
 801ad88:	18fb      	adds	r3, r7, r3
 801ad8a:	2202      	movs	r2, #2
 801ad8c:	701a      	strb	r2, [r3, #0]
          break;
 801ad8e:	e01c      	b.n	801adca <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801ad90:	687a      	ldr	r2, [r7, #4]
 801ad92:	23a7      	movs	r3, #167	@ 0xa7
 801ad94:	009b      	lsls	r3, r3, #2
 801ad96:	5cd3      	ldrb	r3, [r2, r3]
 801ad98:	2b03      	cmp	r3, #3
 801ad9a:	d015      	beq.n	801adc8 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801ad9c:	683a      	ldr	r2, [r7, #0]
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	0011      	movs	r1, r2
 801ada2:	0018      	movs	r0, r3
 801ada4:	f001 fac9 	bl	801c33a <USBD_CtlError>
            ret = USBD_FAIL;
 801ada8:	2317      	movs	r3, #23
 801adaa:	18fb      	adds	r3, r7, r3
 801adac:	2202      	movs	r2, #2
 801adae:	701a      	strb	r2, [r3, #0]
          }
          break;
 801adb0:	e00a      	b.n	801adc8 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801adb2:	683a      	ldr	r2, [r7, #0]
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	0011      	movs	r1, r2
 801adb8:	0018      	movs	r0, r3
 801adba:	f001 fabe 	bl	801c33a <USBD_CtlError>
          ret = USBD_FAIL;
 801adbe:	2317      	movs	r3, #23
 801adc0:	18fb      	adds	r3, r7, r3
 801adc2:	2202      	movs	r2, #2
 801adc4:	701a      	strb	r2, [r3, #0]
          break;
 801adc6:	e000      	b.n	801adca <USBD_CDC_Setup+0x166>
          break;
 801adc8:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801adca:	e00a      	b.n	801ade2 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801adcc:	683a      	ldr	r2, [r7, #0]
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	0011      	movs	r1, r2
 801add2:	0018      	movs	r0, r3
 801add4:	f001 fab1 	bl	801c33a <USBD_CtlError>
      ret = USBD_FAIL;
 801add8:	2317      	movs	r3, #23
 801adda:	18fb      	adds	r3, r7, r3
 801addc:	2202      	movs	r2, #2
 801adde:	701a      	strb	r2, [r3, #0]
      break;
 801ade0:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801ade2:	2317      	movs	r3, #23
 801ade4:	18fb      	adds	r3, r7, r3
 801ade6:	781b      	ldrb	r3, [r3, #0]
}
 801ade8:	0018      	movs	r0, r3
 801adea:	46bd      	mov	sp, r7
 801adec:	b006      	add	sp, #24
 801adee:	bd80      	pop	{r7, pc}
 801adf0:	00000201 	.word	0x00000201

0801adf4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801adf4:	b580      	push	{r7, lr}
 801adf6:	b084      	sub	sp, #16
 801adf8:	af00      	add	r7, sp, #0
 801adfa:	6078      	str	r0, [r7, #4]
 801adfc:	000a      	movs	r2, r1
 801adfe:	1cfb      	adds	r3, r7, #3
 801ae00:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801ae02:	687a      	ldr	r2, [r7, #4]
 801ae04:	23ae      	movs	r3, #174	@ 0xae
 801ae06:	009b      	lsls	r3, r3, #2
 801ae08:	58d3      	ldr	r3, [r2, r3]
 801ae0a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801ae0c:	687a      	ldr	r2, [r7, #4]
 801ae0e:	23b0      	movs	r3, #176	@ 0xb0
 801ae10:	009b      	lsls	r3, r3, #2
 801ae12:	58d3      	ldr	r3, [r2, r3]
 801ae14:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801ae16:	687a      	ldr	r2, [r7, #4]
 801ae18:	23ae      	movs	r3, #174	@ 0xae
 801ae1a:	009b      	lsls	r3, r3, #2
 801ae1c:	58d3      	ldr	r3, [r2, r3]
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d03e      	beq.n	801aea0 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801ae22:	1cfb      	adds	r3, r7, #3
 801ae24:	781a      	ldrb	r2, [r3, #0]
 801ae26:	6879      	ldr	r1, [r7, #4]
 801ae28:	0013      	movs	r3, r2
 801ae2a:	009b      	lsls	r3, r3, #2
 801ae2c:	189b      	adds	r3, r3, r2
 801ae2e:	009b      	lsls	r3, r3, #2
 801ae30:	18cb      	adds	r3, r1, r3
 801ae32:	331c      	adds	r3, #28
 801ae34:	681b      	ldr	r3, [r3, #0]
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	d02b      	beq.n	801ae92 <USBD_CDC_DataIn+0x9e>
 801ae3a:	1cfb      	adds	r3, r7, #3
 801ae3c:	781a      	ldrb	r2, [r3, #0]
 801ae3e:	6879      	ldr	r1, [r7, #4]
 801ae40:	0013      	movs	r3, r2
 801ae42:	009b      	lsls	r3, r3, #2
 801ae44:	189b      	adds	r3, r3, r2
 801ae46:	009b      	lsls	r3, r3, #2
 801ae48:	18cb      	adds	r3, r1, r3
 801ae4a:	331c      	adds	r3, #28
 801ae4c:	6818      	ldr	r0, [r3, #0]
 801ae4e:	1cfb      	adds	r3, r7, #3
 801ae50:	781a      	ldrb	r2, [r3, #0]
 801ae52:	68b9      	ldr	r1, [r7, #8]
 801ae54:	0013      	movs	r3, r2
 801ae56:	009b      	lsls	r3, r3, #2
 801ae58:	189b      	adds	r3, r3, r2
 801ae5a:	00db      	lsls	r3, r3, #3
 801ae5c:	18cb      	adds	r3, r1, r3
 801ae5e:	3338      	adds	r3, #56	@ 0x38
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	0019      	movs	r1, r3
 801ae64:	f7e5 fa24 	bl	80002b0 <__aeabi_uidivmod>
 801ae68:	1e0b      	subs	r3, r1, #0
 801ae6a:	d112      	bne.n	801ae92 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801ae6c:	1cfb      	adds	r3, r7, #3
 801ae6e:	781a      	ldrb	r2, [r3, #0]
 801ae70:	6879      	ldr	r1, [r7, #4]
 801ae72:	0013      	movs	r3, r2
 801ae74:	009b      	lsls	r3, r3, #2
 801ae76:	189b      	adds	r3, r3, r2
 801ae78:	009b      	lsls	r3, r3, #2
 801ae7a:	18cb      	adds	r3, r1, r3
 801ae7c:	331c      	adds	r3, #28
 801ae7e:	2200      	movs	r2, #0
 801ae80:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801ae82:	1cfb      	adds	r3, r7, #3
 801ae84:	7819      	ldrb	r1, [r3, #0]
 801ae86:	6878      	ldr	r0, [r7, #4]
 801ae88:	2300      	movs	r3, #0
 801ae8a:	2200      	movs	r2, #0
 801ae8c:	f002 f82f 	bl	801ceee <USBD_LL_Transmit>
 801ae90:	e004      	b.n	801ae9c <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801ae92:	68fa      	ldr	r2, [r7, #12]
 801ae94:	2385      	movs	r3, #133	@ 0x85
 801ae96:	009b      	lsls	r3, r3, #2
 801ae98:	2100      	movs	r1, #0
 801ae9a:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801ae9c:	2300      	movs	r3, #0
 801ae9e:	e000      	b.n	801aea2 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801aea0:	2302      	movs	r3, #2
  }
}
 801aea2:	0018      	movs	r0, r3
 801aea4:	46bd      	mov	sp, r7
 801aea6:	b004      	add	sp, #16
 801aea8:	bd80      	pop	{r7, pc}

0801aeaa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801aeaa:	b580      	push	{r7, lr}
 801aeac:	b084      	sub	sp, #16
 801aeae:	af00      	add	r7, sp, #0
 801aeb0:	6078      	str	r0, [r7, #4]
 801aeb2:	000a      	movs	r2, r1
 801aeb4:	1cfb      	adds	r3, r7, #3
 801aeb6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801aeb8:	687a      	ldr	r2, [r7, #4]
 801aeba:	23ae      	movs	r3, #174	@ 0xae
 801aebc:	009b      	lsls	r3, r3, #2
 801aebe:	58d3      	ldr	r3, [r2, r3]
 801aec0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801aec2:	1cfb      	adds	r3, r7, #3
 801aec4:	781a      	ldrb	r2, [r3, #0]
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	0011      	movs	r1, r2
 801aeca:	0018      	movs	r0, r3
 801aecc:	f002 f87d 	bl	801cfca <USBD_LL_GetRxDataSize>
 801aed0:	0001      	movs	r1, r0
 801aed2:	68fa      	ldr	r2, [r7, #12]
 801aed4:	2383      	movs	r3, #131	@ 0x83
 801aed6:	009b      	lsls	r3, r3, #2
 801aed8:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801aeda:	687a      	ldr	r2, [r7, #4]
 801aedc:	23ae      	movs	r3, #174	@ 0xae
 801aede:	009b      	lsls	r3, r3, #2
 801aee0:	58d3      	ldr	r3, [r2, r3]
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d011      	beq.n	801af0a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801aee6:	687a      	ldr	r2, [r7, #4]
 801aee8:	23af      	movs	r3, #175	@ 0xaf
 801aeea:	009b      	lsls	r3, r3, #2
 801aeec:	58d3      	ldr	r3, [r2, r3]
 801aeee:	68da      	ldr	r2, [r3, #12]
 801aef0:	68f9      	ldr	r1, [r7, #12]
 801aef2:	2381      	movs	r3, #129	@ 0x81
 801aef4:	009b      	lsls	r3, r3, #2
 801aef6:	58c8      	ldr	r0, [r1, r3]
 801aef8:	68fb      	ldr	r3, [r7, #12]
 801aefa:	2183      	movs	r1, #131	@ 0x83
 801aefc:	0089      	lsls	r1, r1, #2
 801aefe:	468c      	mov	ip, r1
 801af00:	4463      	add	r3, ip
 801af02:	0019      	movs	r1, r3
 801af04:	4790      	blx	r2

    return USBD_OK;
 801af06:	2300      	movs	r3, #0
 801af08:	e000      	b.n	801af0c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801af0a:	2302      	movs	r3, #2
  }
}
 801af0c:	0018      	movs	r0, r3
 801af0e:	46bd      	mov	sp, r7
 801af10:	b004      	add	sp, #16
 801af12:	bd80      	pop	{r7, pc}

0801af14 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801af14:	b590      	push	{r4, r7, lr}
 801af16:	b085      	sub	sp, #20
 801af18:	af00      	add	r7, sp, #0
 801af1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801af1c:	687a      	ldr	r2, [r7, #4]
 801af1e:	23ae      	movs	r3, #174	@ 0xae
 801af20:	009b      	lsls	r3, r3, #2
 801af22:	58d3      	ldr	r3, [r2, r3]
 801af24:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801af26:	687a      	ldr	r2, [r7, #4]
 801af28:	23af      	movs	r3, #175	@ 0xaf
 801af2a:	009b      	lsls	r3, r3, #2
 801af2c:	58d3      	ldr	r3, [r2, r3]
 801af2e:	2b00      	cmp	r3, #0
 801af30:	d018      	beq.n	801af64 <USBD_CDC_EP0_RxReady+0x50>
 801af32:	68fa      	ldr	r2, [r7, #12]
 801af34:	2380      	movs	r3, #128	@ 0x80
 801af36:	009b      	lsls	r3, r3, #2
 801af38:	5cd3      	ldrb	r3, [r2, r3]
 801af3a:	2bff      	cmp	r3, #255	@ 0xff
 801af3c:	d012      	beq.n	801af64 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801af3e:	687a      	ldr	r2, [r7, #4]
 801af40:	23af      	movs	r3, #175	@ 0xaf
 801af42:	009b      	lsls	r3, r3, #2
 801af44:	58d3      	ldr	r3, [r2, r3]
 801af46:	689b      	ldr	r3, [r3, #8]
 801af48:	68f9      	ldr	r1, [r7, #12]
 801af4a:	2280      	movs	r2, #128	@ 0x80
 801af4c:	0092      	lsls	r2, r2, #2
 801af4e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801af50:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801af52:	68fa      	ldr	r2, [r7, #12]
 801af54:	4c06      	ldr	r4, [pc, #24]	@ (801af70 <USBD_CDC_EP0_RxReady+0x5c>)
 801af56:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801af58:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801af5a:	68fa      	ldr	r2, [r7, #12]
 801af5c:	2380      	movs	r3, #128	@ 0x80
 801af5e:	009b      	lsls	r3, r3, #2
 801af60:	21ff      	movs	r1, #255	@ 0xff
 801af62:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801af64:	2300      	movs	r3, #0
}
 801af66:	0018      	movs	r0, r3
 801af68:	46bd      	mov	sp, r7
 801af6a:	b005      	add	sp, #20
 801af6c:	bd90      	pop	{r4, r7, pc}
 801af6e:	46c0      	nop			@ (mov r8, r8)
 801af70:	00000201 	.word	0x00000201

0801af74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801af74:	b580      	push	{r7, lr}
 801af76:	b082      	sub	sp, #8
 801af78:	af00      	add	r7, sp, #0
 801af7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	2243      	movs	r2, #67	@ 0x43
 801af80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801af82:	4b02      	ldr	r3, [pc, #8]	@ (801af8c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801af84:	0018      	movs	r0, r3
 801af86:	46bd      	mov	sp, r7
 801af88:	b002      	add	sp, #8
 801af8a:	bd80      	pop	{r7, pc}
 801af8c:	2000016c 	.word	0x2000016c

0801af90 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801af90:	b580      	push	{r7, lr}
 801af92:	b082      	sub	sp, #8
 801af94:	af00      	add	r7, sp, #0
 801af96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	2243      	movs	r2, #67	@ 0x43
 801af9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801af9e:	4b02      	ldr	r3, [pc, #8]	@ (801afa8 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801afa0:	0018      	movs	r0, r3
 801afa2:	46bd      	mov	sp, r7
 801afa4:	b002      	add	sp, #8
 801afa6:	bd80      	pop	{r7, pc}
 801afa8:	20000128 	.word	0x20000128

0801afac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801afac:	b580      	push	{r7, lr}
 801afae:	b082      	sub	sp, #8
 801afb0:	af00      	add	r7, sp, #0
 801afb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	2243      	movs	r2, #67	@ 0x43
 801afb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801afba:	4b02      	ldr	r3, [pc, #8]	@ (801afc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801afbc:	0018      	movs	r0, r3
 801afbe:	46bd      	mov	sp, r7
 801afc0:	b002      	add	sp, #8
 801afc2:	bd80      	pop	{r7, pc}
 801afc4:	200001b0 	.word	0x200001b0

0801afc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801afc8:	b580      	push	{r7, lr}
 801afca:	b082      	sub	sp, #8
 801afcc:	af00      	add	r7, sp, #0
 801afce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	220a      	movs	r2, #10
 801afd4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801afd6:	4b02      	ldr	r3, [pc, #8]	@ (801afe0 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801afd8:	0018      	movs	r0, r3
 801afda:	46bd      	mov	sp, r7
 801afdc:	b002      	add	sp, #8
 801afde:	bd80      	pop	{r7, pc}
 801afe0:	200000e4 	.word	0x200000e4

0801afe4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801afe4:	b580      	push	{r7, lr}
 801afe6:	b084      	sub	sp, #16
 801afe8:	af00      	add	r7, sp, #0
 801afea:	6078      	str	r0, [r7, #4]
 801afec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801afee:	200f      	movs	r0, #15
 801aff0:	183b      	adds	r3, r7, r0
 801aff2:	2202      	movs	r2, #2
 801aff4:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801aff6:	683b      	ldr	r3, [r7, #0]
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d007      	beq.n	801b00c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801affc:	687a      	ldr	r2, [r7, #4]
 801affe:	23af      	movs	r3, #175	@ 0xaf
 801b000:	009b      	lsls	r3, r3, #2
 801b002:	6839      	ldr	r1, [r7, #0]
 801b004:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801b006:	183b      	adds	r3, r7, r0
 801b008:	2200      	movs	r2, #0
 801b00a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801b00c:	230f      	movs	r3, #15
 801b00e:	18fb      	adds	r3, r7, r3
 801b010:	781b      	ldrb	r3, [r3, #0]
}
 801b012:	0018      	movs	r0, r3
 801b014:	46bd      	mov	sp, r7
 801b016:	b004      	add	sp, #16
 801b018:	bd80      	pop	{r7, pc}

0801b01a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801b01a:	b580      	push	{r7, lr}
 801b01c:	b086      	sub	sp, #24
 801b01e:	af00      	add	r7, sp, #0
 801b020:	60f8      	str	r0, [r7, #12]
 801b022:	60b9      	str	r1, [r7, #8]
 801b024:	1dbb      	adds	r3, r7, #6
 801b026:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b028:	68fa      	ldr	r2, [r7, #12]
 801b02a:	23ae      	movs	r3, #174	@ 0xae
 801b02c:	009b      	lsls	r3, r3, #2
 801b02e:	58d3      	ldr	r3, [r2, r3]
 801b030:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801b032:	697a      	ldr	r2, [r7, #20]
 801b034:	2382      	movs	r3, #130	@ 0x82
 801b036:	009b      	lsls	r3, r3, #2
 801b038:	68b9      	ldr	r1, [r7, #8]
 801b03a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801b03c:	1dbb      	adds	r3, r7, #6
 801b03e:	8819      	ldrh	r1, [r3, #0]
 801b040:	697a      	ldr	r2, [r7, #20]
 801b042:	2384      	movs	r3, #132	@ 0x84
 801b044:	009b      	lsls	r3, r3, #2
 801b046:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b048:	2300      	movs	r3, #0
}
 801b04a:	0018      	movs	r0, r3
 801b04c:	46bd      	mov	sp, r7
 801b04e:	b006      	add	sp, #24
 801b050:	bd80      	pop	{r7, pc}

0801b052 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801b052:	b580      	push	{r7, lr}
 801b054:	b084      	sub	sp, #16
 801b056:	af00      	add	r7, sp, #0
 801b058:	6078      	str	r0, [r7, #4]
 801b05a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b05c:	687a      	ldr	r2, [r7, #4]
 801b05e:	23ae      	movs	r3, #174	@ 0xae
 801b060:	009b      	lsls	r3, r3, #2
 801b062:	58d3      	ldr	r3, [r2, r3]
 801b064:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801b066:	68fa      	ldr	r2, [r7, #12]
 801b068:	2381      	movs	r3, #129	@ 0x81
 801b06a:	009b      	lsls	r3, r3, #2
 801b06c:	6839      	ldr	r1, [r7, #0]
 801b06e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b070:	2300      	movs	r3, #0
}
 801b072:	0018      	movs	r0, r3
 801b074:	46bd      	mov	sp, r7
 801b076:	b004      	add	sp, #16
 801b078:	bd80      	pop	{r7, pc}

0801b07a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801b07a:	b580      	push	{r7, lr}
 801b07c:	b084      	sub	sp, #16
 801b07e:	af00      	add	r7, sp, #0
 801b080:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b082:	687a      	ldr	r2, [r7, #4]
 801b084:	23ae      	movs	r3, #174	@ 0xae
 801b086:	009b      	lsls	r3, r3, #2
 801b088:	58d3      	ldr	r3, [r2, r3]
 801b08a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801b08c:	687a      	ldr	r2, [r7, #4]
 801b08e:	23ae      	movs	r3, #174	@ 0xae
 801b090:	009b      	lsls	r3, r3, #2
 801b092:	58d3      	ldr	r3, [r2, r3]
 801b094:	2b00      	cmp	r3, #0
 801b096:	d022      	beq.n	801b0de <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801b098:	68fa      	ldr	r2, [r7, #12]
 801b09a:	2385      	movs	r3, #133	@ 0x85
 801b09c:	009b      	lsls	r3, r3, #2
 801b09e:	58d3      	ldr	r3, [r2, r3]
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	d11a      	bne.n	801b0da <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801b0a4:	68fa      	ldr	r2, [r7, #12]
 801b0a6:	2385      	movs	r3, #133	@ 0x85
 801b0a8:	009b      	lsls	r3, r3, #2
 801b0aa:	2101      	movs	r1, #1
 801b0ac:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801b0ae:	68fa      	ldr	r2, [r7, #12]
 801b0b0:	2384      	movs	r3, #132	@ 0x84
 801b0b2:	009b      	lsls	r3, r3, #2
 801b0b4:	58d2      	ldr	r2, [r2, r3]
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b0ba:	68fa      	ldr	r2, [r7, #12]
 801b0bc:	2382      	movs	r3, #130	@ 0x82
 801b0be:	009b      	lsls	r3, r3, #2
 801b0c0:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801b0c2:	68fa      	ldr	r2, [r7, #12]
 801b0c4:	2384      	movs	r3, #132	@ 0x84
 801b0c6:	009b      	lsls	r3, r3, #2
 801b0c8:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b0ca:	b29b      	uxth	r3, r3
 801b0cc:	6878      	ldr	r0, [r7, #4]
 801b0ce:	000a      	movs	r2, r1
 801b0d0:	2181      	movs	r1, #129	@ 0x81
 801b0d2:	f001 ff0c 	bl	801ceee <USBD_LL_Transmit>

      return USBD_OK;
 801b0d6:	2300      	movs	r3, #0
 801b0d8:	e002      	b.n	801b0e0 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801b0da:	2301      	movs	r3, #1
 801b0dc:	e000      	b.n	801b0e0 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801b0de:	2302      	movs	r3, #2
  }
}
 801b0e0:	0018      	movs	r0, r3
 801b0e2:	46bd      	mov	sp, r7
 801b0e4:	b004      	add	sp, #16
 801b0e6:	bd80      	pop	{r7, pc}

0801b0e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801b0e8:	b580      	push	{r7, lr}
 801b0ea:	b084      	sub	sp, #16
 801b0ec:	af00      	add	r7, sp, #0
 801b0ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b0f0:	687a      	ldr	r2, [r7, #4]
 801b0f2:	23ae      	movs	r3, #174	@ 0xae
 801b0f4:	009b      	lsls	r3, r3, #2
 801b0f6:	58d3      	ldr	r3, [r2, r3]
 801b0f8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801b0fa:	687a      	ldr	r2, [r7, #4]
 801b0fc:	23ae      	movs	r3, #174	@ 0xae
 801b0fe:	009b      	lsls	r3, r3, #2
 801b100:	58d3      	ldr	r3, [r2, r3]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d019      	beq.n	801b13a <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	7c1b      	ldrb	r3, [r3, #16]
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d10a      	bne.n	801b124 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b10e:	68fa      	ldr	r2, [r7, #12]
 801b110:	2381      	movs	r3, #129	@ 0x81
 801b112:	009b      	lsls	r3, r3, #2
 801b114:	58d2      	ldr	r2, [r2, r3]
 801b116:	2380      	movs	r3, #128	@ 0x80
 801b118:	009b      	lsls	r3, r3, #2
 801b11a:	6878      	ldr	r0, [r7, #4]
 801b11c:	2101      	movs	r1, #1
 801b11e:	f001 ff1d 	bl	801cf5c <USBD_LL_PrepareReceive>
 801b122:	e008      	b.n	801b136 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b124:	68fa      	ldr	r2, [r7, #12]
 801b126:	2381      	movs	r3, #129	@ 0x81
 801b128:	009b      	lsls	r3, r3, #2
 801b12a:	58d2      	ldr	r2, [r2, r3]
 801b12c:	6878      	ldr	r0, [r7, #4]
 801b12e:	2340      	movs	r3, #64	@ 0x40
 801b130:	2101      	movs	r1, #1
 801b132:	f001 ff13 	bl	801cf5c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801b136:	2300      	movs	r3, #0
 801b138:	e000      	b.n	801b13c <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801b13a:	2302      	movs	r3, #2
  }
}
 801b13c:	0018      	movs	r0, r3
 801b13e:	46bd      	mov	sp, r7
 801b140:	b004      	add	sp, #16
 801b142:	bd80      	pop	{r7, pc}

0801b144 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801b144:	b580      	push	{r7, lr}
 801b146:	b084      	sub	sp, #16
 801b148:	af00      	add	r7, sp, #0
 801b14a:	60f8      	str	r0, [r7, #12]
 801b14c:	60b9      	str	r1, [r7, #8]
 801b14e:	1dfb      	adds	r3, r7, #7
 801b150:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801b152:	68fb      	ldr	r3, [r7, #12]
 801b154:	2b00      	cmp	r3, #0
 801b156:	d101      	bne.n	801b15c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801b158:	2302      	movs	r3, #2
 801b15a:	e020      	b.n	801b19e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801b15c:	68fa      	ldr	r2, [r7, #12]
 801b15e:	23ad      	movs	r3, #173	@ 0xad
 801b160:	009b      	lsls	r3, r3, #2
 801b162:	58d3      	ldr	r3, [r2, r3]
 801b164:	2b00      	cmp	r3, #0
 801b166:	d004      	beq.n	801b172 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801b168:	68fa      	ldr	r2, [r7, #12]
 801b16a:	23ad      	movs	r3, #173	@ 0xad
 801b16c:	009b      	lsls	r3, r3, #2
 801b16e:	2100      	movs	r1, #0
 801b170:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801b172:	68bb      	ldr	r3, [r7, #8]
 801b174:	2b00      	cmp	r3, #0
 801b176:	d004      	beq.n	801b182 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801b178:	68fa      	ldr	r2, [r7, #12]
 801b17a:	23ac      	movs	r3, #172	@ 0xac
 801b17c:	009b      	lsls	r3, r3, #2
 801b17e:	68b9      	ldr	r1, [r7, #8]
 801b180:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b182:	68fa      	ldr	r2, [r7, #12]
 801b184:	23a7      	movs	r3, #167	@ 0xa7
 801b186:	009b      	lsls	r3, r3, #2
 801b188:	2101      	movs	r1, #1
 801b18a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801b18c:	68fb      	ldr	r3, [r7, #12]
 801b18e:	1dfa      	adds	r2, r7, #7
 801b190:	7812      	ldrb	r2, [r2, #0]
 801b192:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801b194:	68fb      	ldr	r3, [r7, #12]
 801b196:	0018      	movs	r0, r3
 801b198:	f001 fd0c 	bl	801cbb4 <USBD_LL_Init>

  return USBD_OK;
 801b19c:	2300      	movs	r3, #0
}
 801b19e:	0018      	movs	r0, r3
 801b1a0:	46bd      	mov	sp, r7
 801b1a2:	b004      	add	sp, #16
 801b1a4:	bd80      	pop	{r7, pc}

0801b1a6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801b1a6:	b580      	push	{r7, lr}
 801b1a8:	b084      	sub	sp, #16
 801b1aa:	af00      	add	r7, sp, #0
 801b1ac:	6078      	str	r0, [r7, #4]
 801b1ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801b1b0:	200f      	movs	r0, #15
 801b1b2:	183b      	adds	r3, r7, r0
 801b1b4:	2200      	movs	r2, #0
 801b1b6:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801b1b8:	683b      	ldr	r3, [r7, #0]
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d008      	beq.n	801b1d0 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801b1be:	687a      	ldr	r2, [r7, #4]
 801b1c0:	23ad      	movs	r3, #173	@ 0xad
 801b1c2:	009b      	lsls	r3, r3, #2
 801b1c4:	6839      	ldr	r1, [r7, #0]
 801b1c6:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801b1c8:	183b      	adds	r3, r7, r0
 801b1ca:	2200      	movs	r2, #0
 801b1cc:	701a      	strb	r2, [r3, #0]
 801b1ce:	e003      	b.n	801b1d8 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801b1d0:	230f      	movs	r3, #15
 801b1d2:	18fb      	adds	r3, r7, r3
 801b1d4:	2202      	movs	r2, #2
 801b1d6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801b1d8:	230f      	movs	r3, #15
 801b1da:	18fb      	adds	r3, r7, r3
 801b1dc:	781b      	ldrb	r3, [r3, #0]
}
 801b1de:	0018      	movs	r0, r3
 801b1e0:	46bd      	mov	sp, r7
 801b1e2:	b004      	add	sp, #16
 801b1e4:	bd80      	pop	{r7, pc}

0801b1e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801b1e6:	b580      	push	{r7, lr}
 801b1e8:	b082      	sub	sp, #8
 801b1ea:	af00      	add	r7, sp, #0
 801b1ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	0018      	movs	r0, r3
 801b1f2:	f001 fd43 	bl	801cc7c <USBD_LL_Start>

  return USBD_OK;
 801b1f6:	2300      	movs	r3, #0
}
 801b1f8:	0018      	movs	r0, r3
 801b1fa:	46bd      	mov	sp, r7
 801b1fc:	b002      	add	sp, #8
 801b1fe:	bd80      	pop	{r7, pc}

0801b200 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801b200:	b580      	push	{r7, lr}
 801b202:	b082      	sub	sp, #8
 801b204:	af00      	add	r7, sp, #0
 801b206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801b208:	2300      	movs	r3, #0
}
 801b20a:	0018      	movs	r0, r3
 801b20c:	46bd      	mov	sp, r7
 801b20e:	b002      	add	sp, #8
 801b210:	bd80      	pop	{r7, pc}

0801b212 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801b212:	b590      	push	{r4, r7, lr}
 801b214:	b085      	sub	sp, #20
 801b216:	af00      	add	r7, sp, #0
 801b218:	6078      	str	r0, [r7, #4]
 801b21a:	000a      	movs	r2, r1
 801b21c:	1cfb      	adds	r3, r7, #3
 801b21e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801b220:	240f      	movs	r4, #15
 801b222:	193b      	adds	r3, r7, r4
 801b224:	2202      	movs	r2, #2
 801b226:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801b228:	687a      	ldr	r2, [r7, #4]
 801b22a:	23ad      	movs	r3, #173	@ 0xad
 801b22c:	009b      	lsls	r3, r3, #2
 801b22e:	58d3      	ldr	r3, [r2, r3]
 801b230:	2b00      	cmp	r3, #0
 801b232:	d00e      	beq.n	801b252 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801b234:	687a      	ldr	r2, [r7, #4]
 801b236:	23ad      	movs	r3, #173	@ 0xad
 801b238:	009b      	lsls	r3, r3, #2
 801b23a:	58d3      	ldr	r3, [r2, r3]
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	1cfa      	adds	r2, r7, #3
 801b240:	7811      	ldrb	r1, [r2, #0]
 801b242:	687a      	ldr	r2, [r7, #4]
 801b244:	0010      	movs	r0, r2
 801b246:	4798      	blx	r3
 801b248:	1e03      	subs	r3, r0, #0
 801b24a:	d102      	bne.n	801b252 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801b24c:	193b      	adds	r3, r7, r4
 801b24e:	2200      	movs	r2, #0
 801b250:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801b252:	230f      	movs	r3, #15
 801b254:	18fb      	adds	r3, r7, r3
 801b256:	781b      	ldrb	r3, [r3, #0]
}
 801b258:	0018      	movs	r0, r3
 801b25a:	46bd      	mov	sp, r7
 801b25c:	b005      	add	sp, #20
 801b25e:	bd90      	pop	{r4, r7, pc}

0801b260 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801b260:	b580      	push	{r7, lr}
 801b262:	b082      	sub	sp, #8
 801b264:	af00      	add	r7, sp, #0
 801b266:	6078      	str	r0, [r7, #4]
 801b268:	000a      	movs	r2, r1
 801b26a:	1cfb      	adds	r3, r7, #3
 801b26c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801b26e:	687a      	ldr	r2, [r7, #4]
 801b270:	23ad      	movs	r3, #173	@ 0xad
 801b272:	009b      	lsls	r3, r3, #2
 801b274:	58d3      	ldr	r3, [r2, r3]
 801b276:	685b      	ldr	r3, [r3, #4]
 801b278:	1cfa      	adds	r2, r7, #3
 801b27a:	7811      	ldrb	r1, [r2, #0]
 801b27c:	687a      	ldr	r2, [r7, #4]
 801b27e:	0010      	movs	r0, r2
 801b280:	4798      	blx	r3

  return USBD_OK;
 801b282:	2300      	movs	r3, #0
}
 801b284:	0018      	movs	r0, r3
 801b286:	46bd      	mov	sp, r7
 801b288:	b002      	add	sp, #8
 801b28a:	bd80      	pop	{r7, pc}

0801b28c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801b28c:	b580      	push	{r7, lr}
 801b28e:	b082      	sub	sp, #8
 801b290:	af00      	add	r7, sp, #0
 801b292:	6078      	str	r0, [r7, #4]
 801b294:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	22aa      	movs	r2, #170	@ 0xaa
 801b29a:	0092      	lsls	r2, r2, #2
 801b29c:	4694      	mov	ip, r2
 801b29e:	4463      	add	r3, ip
 801b2a0:	683a      	ldr	r2, [r7, #0]
 801b2a2:	0011      	movs	r1, r2
 801b2a4:	0018      	movs	r0, r3
 801b2a6:	f001 f810 	bl	801c2ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801b2aa:	687a      	ldr	r2, [r7, #4]
 801b2ac:	23a5      	movs	r3, #165	@ 0xa5
 801b2ae:	009b      	lsls	r3, r3, #2
 801b2b0:	2101      	movs	r1, #1
 801b2b2:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	4a23      	ldr	r2, [pc, #140]	@ (801b344 <USBD_LL_SetupStage+0xb8>)
 801b2b8:	5a9b      	ldrh	r3, [r3, r2]
 801b2ba:	0019      	movs	r1, r3
 801b2bc:	687a      	ldr	r2, [r7, #4]
 801b2be:	23a6      	movs	r3, #166	@ 0xa6
 801b2c0:	009b      	lsls	r3, r3, #2
 801b2c2:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801b2c4:	687a      	ldr	r2, [r7, #4]
 801b2c6:	23aa      	movs	r3, #170	@ 0xaa
 801b2c8:	009b      	lsls	r3, r3, #2
 801b2ca:	5cd3      	ldrb	r3, [r2, r3]
 801b2cc:	001a      	movs	r2, r3
 801b2ce:	231f      	movs	r3, #31
 801b2d0:	4013      	ands	r3, r2
 801b2d2:	2b02      	cmp	r3, #2
 801b2d4:	d019      	beq.n	801b30a <USBD_LL_SetupStage+0x7e>
 801b2d6:	d822      	bhi.n	801b31e <USBD_LL_SetupStage+0x92>
 801b2d8:	2b00      	cmp	r3, #0
 801b2da:	d002      	beq.n	801b2e2 <USBD_LL_SetupStage+0x56>
 801b2dc:	2b01      	cmp	r3, #1
 801b2de:	d00a      	beq.n	801b2f6 <USBD_LL_SetupStage+0x6a>
 801b2e0:	e01d      	b.n	801b31e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	22aa      	movs	r2, #170	@ 0xaa
 801b2e6:	0092      	lsls	r2, r2, #2
 801b2e8:	189a      	adds	r2, r3, r2
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	0011      	movs	r1, r2
 801b2ee:	0018      	movs	r0, r3
 801b2f0:	f000 fa10 	bl	801b714 <USBD_StdDevReq>
      break;
 801b2f4:	e020      	b.n	801b338 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	22aa      	movs	r2, #170	@ 0xaa
 801b2fa:	0092      	lsls	r2, r2, #2
 801b2fc:	189a      	adds	r2, r3, r2
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	0011      	movs	r1, r2
 801b302:	0018      	movs	r0, r3
 801b304:	f000 fa78 	bl	801b7f8 <USBD_StdItfReq>
      break;
 801b308:	e016      	b.n	801b338 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	22aa      	movs	r2, #170	@ 0xaa
 801b30e:	0092      	lsls	r2, r2, #2
 801b310:	189a      	adds	r2, r3, r2
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	0011      	movs	r1, r2
 801b316:	0018      	movs	r0, r3
 801b318:	f000 fac5 	bl	801b8a6 <USBD_StdEPReq>
      break;
 801b31c:	e00c      	b.n	801b338 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801b31e:	687a      	ldr	r2, [r7, #4]
 801b320:	23aa      	movs	r3, #170	@ 0xaa
 801b322:	009b      	lsls	r3, r3, #2
 801b324:	5cd3      	ldrb	r3, [r2, r3]
 801b326:	227f      	movs	r2, #127	@ 0x7f
 801b328:	4393      	bics	r3, r2
 801b32a:	b2da      	uxtb	r2, r3
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	0011      	movs	r1, r2
 801b330:	0018      	movs	r0, r3
 801b332:	f001 fd2a 	bl	801cd8a <USBD_LL_StallEP>
      break;
 801b336:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801b338:	2300      	movs	r3, #0
}
 801b33a:	0018      	movs	r0, r3
 801b33c:	46bd      	mov	sp, r7
 801b33e:	b002      	add	sp, #8
 801b340:	bd80      	pop	{r7, pc}
 801b342:	46c0      	nop			@ (mov r8, r8)
 801b344:	000002ae 	.word	0x000002ae

0801b348 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801b348:	b580      	push	{r7, lr}
 801b34a:	b086      	sub	sp, #24
 801b34c:	af00      	add	r7, sp, #0
 801b34e:	60f8      	str	r0, [r7, #12]
 801b350:	607a      	str	r2, [r7, #4]
 801b352:	200b      	movs	r0, #11
 801b354:	183b      	adds	r3, r7, r0
 801b356:	1c0a      	adds	r2, r1, #0
 801b358:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801b35a:	183b      	adds	r3, r7, r0
 801b35c:	781b      	ldrb	r3, [r3, #0]
 801b35e:	2b00      	cmp	r3, #0
 801b360:	d154      	bne.n	801b40c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801b362:	68fb      	ldr	r3, [r7, #12]
 801b364:	3355      	adds	r3, #85	@ 0x55
 801b366:	33ff      	adds	r3, #255	@ 0xff
 801b368:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801b36a:	68fa      	ldr	r2, [r7, #12]
 801b36c:	23a5      	movs	r3, #165	@ 0xa5
 801b36e:	009b      	lsls	r3, r3, #2
 801b370:	58d3      	ldr	r3, [r2, r3]
 801b372:	2b03      	cmp	r3, #3
 801b374:	d139      	bne.n	801b3ea <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801b376:	697b      	ldr	r3, [r7, #20]
 801b378:	68da      	ldr	r2, [r3, #12]
 801b37a:	697b      	ldr	r3, [r7, #20]
 801b37c:	691b      	ldr	r3, [r3, #16]
 801b37e:	429a      	cmp	r2, r3
 801b380:	d919      	bls.n	801b3b6 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801b382:	697b      	ldr	r3, [r7, #20]
 801b384:	68da      	ldr	r2, [r3, #12]
 801b386:	697b      	ldr	r3, [r7, #20]
 801b388:	691b      	ldr	r3, [r3, #16]
 801b38a:	1ad2      	subs	r2, r2, r3
 801b38c:	697b      	ldr	r3, [r7, #20]
 801b38e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b390:	697b      	ldr	r3, [r7, #20]
 801b392:	68da      	ldr	r2, [r3, #12]
 801b394:	697b      	ldr	r3, [r7, #20]
 801b396:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801b398:	429a      	cmp	r2, r3
 801b39a:	d203      	bcs.n	801b3a4 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b39c:	697b      	ldr	r3, [r7, #20]
 801b39e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801b3a0:	b29b      	uxth	r3, r3
 801b3a2:	e002      	b.n	801b3aa <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b3a4:	697b      	ldr	r3, [r7, #20]
 801b3a6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801b3a8:	b29b      	uxth	r3, r3
 801b3aa:	6879      	ldr	r1, [r7, #4]
 801b3ac:	68f8      	ldr	r0, [r7, #12]
 801b3ae:	001a      	movs	r2, r3
 801b3b0:	f001 f898 	bl	801c4e4 <USBD_CtlContinueRx>
 801b3b4:	e045      	b.n	801b442 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801b3b6:	68fa      	ldr	r2, [r7, #12]
 801b3b8:	23ad      	movs	r3, #173	@ 0xad
 801b3ba:	009b      	lsls	r3, r3, #2
 801b3bc:	58d3      	ldr	r3, [r2, r3]
 801b3be:	691b      	ldr	r3, [r3, #16]
 801b3c0:	2b00      	cmp	r3, #0
 801b3c2:	d00d      	beq.n	801b3e0 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b3c4:	68fa      	ldr	r2, [r7, #12]
 801b3c6:	23a7      	movs	r3, #167	@ 0xa7
 801b3c8:	009b      	lsls	r3, r3, #2
 801b3ca:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801b3cc:	2b03      	cmp	r3, #3
 801b3ce:	d107      	bne.n	801b3e0 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801b3d0:	68fa      	ldr	r2, [r7, #12]
 801b3d2:	23ad      	movs	r3, #173	@ 0xad
 801b3d4:	009b      	lsls	r3, r3, #2
 801b3d6:	58d3      	ldr	r3, [r2, r3]
 801b3d8:	691b      	ldr	r3, [r3, #16]
 801b3da:	68fa      	ldr	r2, [r7, #12]
 801b3dc:	0010      	movs	r0, r2
 801b3de:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801b3e0:	68fb      	ldr	r3, [r7, #12]
 801b3e2:	0018      	movs	r0, r3
 801b3e4:	f001 f891 	bl	801c50a <USBD_CtlSendStatus>
 801b3e8:	e02b      	b.n	801b442 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801b3ea:	68fa      	ldr	r2, [r7, #12]
 801b3ec:	23a5      	movs	r3, #165	@ 0xa5
 801b3ee:	009b      	lsls	r3, r3, #2
 801b3f0:	58d3      	ldr	r3, [r2, r3]
 801b3f2:	2b05      	cmp	r3, #5
 801b3f4:	d125      	bne.n	801b442 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801b3f6:	68fa      	ldr	r2, [r7, #12]
 801b3f8:	23a5      	movs	r3, #165	@ 0xa5
 801b3fa:	009b      	lsls	r3, r3, #2
 801b3fc:	2100      	movs	r1, #0
 801b3fe:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801b400:	68fb      	ldr	r3, [r7, #12]
 801b402:	2100      	movs	r1, #0
 801b404:	0018      	movs	r0, r3
 801b406:	f001 fcc0 	bl	801cd8a <USBD_LL_StallEP>
 801b40a:	e01a      	b.n	801b442 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801b40c:	68fa      	ldr	r2, [r7, #12]
 801b40e:	23ad      	movs	r3, #173	@ 0xad
 801b410:	009b      	lsls	r3, r3, #2
 801b412:	58d3      	ldr	r3, [r2, r3]
 801b414:	699b      	ldr	r3, [r3, #24]
 801b416:	2b00      	cmp	r3, #0
 801b418:	d011      	beq.n	801b43e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b41a:	68fa      	ldr	r2, [r7, #12]
 801b41c:	23a7      	movs	r3, #167	@ 0xa7
 801b41e:	009b      	lsls	r3, r3, #2
 801b420:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801b422:	2b03      	cmp	r3, #3
 801b424:	d10b      	bne.n	801b43e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801b426:	68fa      	ldr	r2, [r7, #12]
 801b428:	23ad      	movs	r3, #173	@ 0xad
 801b42a:	009b      	lsls	r3, r3, #2
 801b42c:	58d3      	ldr	r3, [r2, r3]
 801b42e:	699b      	ldr	r3, [r3, #24]
 801b430:	220b      	movs	r2, #11
 801b432:	18ba      	adds	r2, r7, r2
 801b434:	7811      	ldrb	r1, [r2, #0]
 801b436:	68fa      	ldr	r2, [r7, #12]
 801b438:	0010      	movs	r0, r2
 801b43a:	4798      	blx	r3
 801b43c:	e001      	b.n	801b442 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801b43e:	2302      	movs	r3, #2
 801b440:	e000      	b.n	801b444 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801b442:	2300      	movs	r3, #0
}
 801b444:	0018      	movs	r0, r3
 801b446:	46bd      	mov	sp, r7
 801b448:	b006      	add	sp, #24
 801b44a:	bd80      	pop	{r7, pc}

0801b44c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801b44c:	b580      	push	{r7, lr}
 801b44e:	b086      	sub	sp, #24
 801b450:	af00      	add	r7, sp, #0
 801b452:	60f8      	str	r0, [r7, #12]
 801b454:	607a      	str	r2, [r7, #4]
 801b456:	200b      	movs	r0, #11
 801b458:	183b      	adds	r3, r7, r0
 801b45a:	1c0a      	adds	r2, r1, #0
 801b45c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801b45e:	183b      	adds	r3, r7, r0
 801b460:	781b      	ldrb	r3, [r3, #0]
 801b462:	2b00      	cmp	r3, #0
 801b464:	d000      	beq.n	801b468 <USBD_LL_DataInStage+0x1c>
 801b466:	e08e      	b.n	801b586 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801b468:	68fb      	ldr	r3, [r7, #12]
 801b46a:	3314      	adds	r3, #20
 801b46c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801b46e:	68fa      	ldr	r2, [r7, #12]
 801b470:	23a5      	movs	r3, #165	@ 0xa5
 801b472:	009b      	lsls	r3, r3, #2
 801b474:	58d3      	ldr	r3, [r2, r3]
 801b476:	2b02      	cmp	r3, #2
 801b478:	d164      	bne.n	801b544 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801b47a:	697b      	ldr	r3, [r7, #20]
 801b47c:	68da      	ldr	r2, [r3, #12]
 801b47e:	697b      	ldr	r3, [r7, #20]
 801b480:	691b      	ldr	r3, [r3, #16]
 801b482:	429a      	cmp	r2, r3
 801b484:	d915      	bls.n	801b4b2 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801b486:	697b      	ldr	r3, [r7, #20]
 801b488:	68da      	ldr	r2, [r3, #12]
 801b48a:	697b      	ldr	r3, [r7, #20]
 801b48c:	691b      	ldr	r3, [r3, #16]
 801b48e:	1ad2      	subs	r2, r2, r3
 801b490:	697b      	ldr	r3, [r7, #20]
 801b492:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801b494:	697b      	ldr	r3, [r7, #20]
 801b496:	68db      	ldr	r3, [r3, #12]
 801b498:	b29a      	uxth	r2, r3
 801b49a:	6879      	ldr	r1, [r7, #4]
 801b49c:	68fb      	ldr	r3, [r7, #12]
 801b49e:	0018      	movs	r0, r3
 801b4a0:	f000 ffe9 	bl	801c476 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b4a4:	68f8      	ldr	r0, [r7, #12]
 801b4a6:	2300      	movs	r3, #0
 801b4a8:	2200      	movs	r2, #0
 801b4aa:	2100      	movs	r1, #0
 801b4ac:	f001 fd56 	bl	801cf5c <USBD_LL_PrepareReceive>
 801b4b0:	e059      	b.n	801b566 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801b4b2:	697b      	ldr	r3, [r7, #20]
 801b4b4:	689a      	ldr	r2, [r3, #8]
 801b4b6:	697b      	ldr	r3, [r7, #20]
 801b4b8:	691b      	ldr	r3, [r3, #16]
 801b4ba:	0019      	movs	r1, r3
 801b4bc:	0010      	movs	r0, r2
 801b4be:	f7e4 fef7 	bl	80002b0 <__aeabi_uidivmod>
 801b4c2:	1e0b      	subs	r3, r1, #0
 801b4c4:	d11f      	bne.n	801b506 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801b4c6:	697b      	ldr	r3, [r7, #20]
 801b4c8:	689a      	ldr	r2, [r3, #8]
 801b4ca:	697b      	ldr	r3, [r7, #20]
 801b4cc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801b4ce:	429a      	cmp	r2, r3
 801b4d0:	d319      	bcc.n	801b506 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801b4d2:	697b      	ldr	r3, [r7, #20]
 801b4d4:	689a      	ldr	r2, [r3, #8]
 801b4d6:	68f9      	ldr	r1, [r7, #12]
 801b4d8:	23a6      	movs	r3, #166	@ 0xa6
 801b4da:	009b      	lsls	r3, r3, #2
 801b4dc:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801b4de:	429a      	cmp	r2, r3
 801b4e0:	d211      	bcs.n	801b506 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	2200      	movs	r2, #0
 801b4e6:	2100      	movs	r1, #0
 801b4e8:	0018      	movs	r0, r3
 801b4ea:	f000 ffc4 	bl	801c476 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801b4ee:	68fa      	ldr	r2, [r7, #12]
 801b4f0:	23a6      	movs	r3, #166	@ 0xa6
 801b4f2:	009b      	lsls	r3, r3, #2
 801b4f4:	2100      	movs	r1, #0
 801b4f6:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b4f8:	68f8      	ldr	r0, [r7, #12]
 801b4fa:	2300      	movs	r3, #0
 801b4fc:	2200      	movs	r2, #0
 801b4fe:	2100      	movs	r1, #0
 801b500:	f001 fd2c 	bl	801cf5c <USBD_LL_PrepareReceive>
 801b504:	e02f      	b.n	801b566 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801b506:	68fa      	ldr	r2, [r7, #12]
 801b508:	23ad      	movs	r3, #173	@ 0xad
 801b50a:	009b      	lsls	r3, r3, #2
 801b50c:	58d3      	ldr	r3, [r2, r3]
 801b50e:	68db      	ldr	r3, [r3, #12]
 801b510:	2b00      	cmp	r3, #0
 801b512:	d00d      	beq.n	801b530 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b514:	68fa      	ldr	r2, [r7, #12]
 801b516:	23a7      	movs	r3, #167	@ 0xa7
 801b518:	009b      	lsls	r3, r3, #2
 801b51a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801b51c:	2b03      	cmp	r3, #3
 801b51e:	d107      	bne.n	801b530 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801b520:	68fa      	ldr	r2, [r7, #12]
 801b522:	23ad      	movs	r3, #173	@ 0xad
 801b524:	009b      	lsls	r3, r3, #2
 801b526:	58d3      	ldr	r3, [r2, r3]
 801b528:	68db      	ldr	r3, [r3, #12]
 801b52a:	68fa      	ldr	r2, [r7, #12]
 801b52c:	0010      	movs	r0, r2
 801b52e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801b530:	68fb      	ldr	r3, [r7, #12]
 801b532:	2180      	movs	r1, #128	@ 0x80
 801b534:	0018      	movs	r0, r3
 801b536:	f001 fc28 	bl	801cd8a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801b53a:	68fb      	ldr	r3, [r7, #12]
 801b53c:	0018      	movs	r0, r3
 801b53e:	f000 fff8 	bl	801c532 <USBD_CtlReceiveStatus>
 801b542:	e010      	b.n	801b566 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801b544:	68fa      	ldr	r2, [r7, #12]
 801b546:	23a5      	movs	r3, #165	@ 0xa5
 801b548:	009b      	lsls	r3, r3, #2
 801b54a:	58d3      	ldr	r3, [r2, r3]
 801b54c:	2b04      	cmp	r3, #4
 801b54e:	d005      	beq.n	801b55c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801b550:	68fa      	ldr	r2, [r7, #12]
 801b552:	23a5      	movs	r3, #165	@ 0xa5
 801b554:	009b      	lsls	r3, r3, #2
 801b556:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d104      	bne.n	801b566 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801b55c:	68fb      	ldr	r3, [r7, #12]
 801b55e:	2180      	movs	r1, #128	@ 0x80
 801b560:	0018      	movs	r0, r3
 801b562:	f001 fc12 	bl	801cd8a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801b566:	68fa      	ldr	r2, [r7, #12]
 801b568:	23a8      	movs	r3, #168	@ 0xa8
 801b56a:	009b      	lsls	r3, r3, #2
 801b56c:	5cd3      	ldrb	r3, [r2, r3]
 801b56e:	2b01      	cmp	r3, #1
 801b570:	d124      	bne.n	801b5bc <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801b572:	68fb      	ldr	r3, [r7, #12]
 801b574:	0018      	movs	r0, r3
 801b576:	f7ff fe43 	bl	801b200 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801b57a:	68fa      	ldr	r2, [r7, #12]
 801b57c:	23a8      	movs	r3, #168	@ 0xa8
 801b57e:	009b      	lsls	r3, r3, #2
 801b580:	2100      	movs	r1, #0
 801b582:	54d1      	strb	r1, [r2, r3]
 801b584:	e01a      	b.n	801b5bc <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801b586:	68fa      	ldr	r2, [r7, #12]
 801b588:	23ad      	movs	r3, #173	@ 0xad
 801b58a:	009b      	lsls	r3, r3, #2
 801b58c:	58d3      	ldr	r3, [r2, r3]
 801b58e:	695b      	ldr	r3, [r3, #20]
 801b590:	2b00      	cmp	r3, #0
 801b592:	d011      	beq.n	801b5b8 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b594:	68fa      	ldr	r2, [r7, #12]
 801b596:	23a7      	movs	r3, #167	@ 0xa7
 801b598:	009b      	lsls	r3, r3, #2
 801b59a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801b59c:	2b03      	cmp	r3, #3
 801b59e:	d10b      	bne.n	801b5b8 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801b5a0:	68fa      	ldr	r2, [r7, #12]
 801b5a2:	23ad      	movs	r3, #173	@ 0xad
 801b5a4:	009b      	lsls	r3, r3, #2
 801b5a6:	58d3      	ldr	r3, [r2, r3]
 801b5a8:	695b      	ldr	r3, [r3, #20]
 801b5aa:	220b      	movs	r2, #11
 801b5ac:	18ba      	adds	r2, r7, r2
 801b5ae:	7811      	ldrb	r1, [r2, #0]
 801b5b0:	68fa      	ldr	r2, [r7, #12]
 801b5b2:	0010      	movs	r0, r2
 801b5b4:	4798      	blx	r3
 801b5b6:	e001      	b.n	801b5bc <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801b5b8:	2302      	movs	r3, #2
 801b5ba:	e000      	b.n	801b5be <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801b5bc:	2300      	movs	r3, #0
}
 801b5be:	0018      	movs	r0, r3
 801b5c0:	46bd      	mov	sp, r7
 801b5c2:	b006      	add	sp, #24
 801b5c4:	bd80      	pop	{r7, pc}

0801b5c6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801b5c6:	b580      	push	{r7, lr}
 801b5c8:	b082      	sub	sp, #8
 801b5ca:	af00      	add	r7, sp, #0
 801b5cc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801b5ce:	6878      	ldr	r0, [r7, #4]
 801b5d0:	2340      	movs	r3, #64	@ 0x40
 801b5d2:	2200      	movs	r2, #0
 801b5d4:	2100      	movs	r1, #0
 801b5d6:	f001 fb76 	bl	801ccc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801b5da:	687a      	ldr	r2, [r7, #4]
 801b5dc:	23ac      	movs	r3, #172	@ 0xac
 801b5de:	005b      	lsls	r3, r3, #1
 801b5e0:	2101      	movs	r1, #1
 801b5e2:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801b5e4:	687a      	ldr	r2, [r7, #4]
 801b5e6:	23b2      	movs	r3, #178	@ 0xb2
 801b5e8:	005b      	lsls	r3, r3, #1
 801b5ea:	2140      	movs	r1, #64	@ 0x40
 801b5ec:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801b5ee:	6878      	ldr	r0, [r7, #4]
 801b5f0:	2340      	movs	r3, #64	@ 0x40
 801b5f2:	2200      	movs	r2, #0
 801b5f4:	2180      	movs	r1, #128	@ 0x80
 801b5f6:	f001 fb66 	bl	801ccc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	2201      	movs	r2, #1
 801b5fe:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	2240      	movs	r2, #64	@ 0x40
 801b604:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b606:	687a      	ldr	r2, [r7, #4]
 801b608:	23a7      	movs	r3, #167	@ 0xa7
 801b60a:	009b      	lsls	r3, r3, #2
 801b60c:	2101      	movs	r1, #1
 801b60e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801b610:	687a      	ldr	r2, [r7, #4]
 801b612:	23a5      	movs	r3, #165	@ 0xa5
 801b614:	009b      	lsls	r3, r3, #2
 801b616:	2100      	movs	r1, #0
 801b618:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	2200      	movs	r2, #0
 801b61e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801b620:	687a      	ldr	r2, [r7, #4]
 801b622:	23a9      	movs	r3, #169	@ 0xa9
 801b624:	009b      	lsls	r3, r3, #2
 801b626:	2100      	movs	r1, #0
 801b628:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801b62a:	687a      	ldr	r2, [r7, #4]
 801b62c:	23ae      	movs	r3, #174	@ 0xae
 801b62e:	009b      	lsls	r3, r3, #2
 801b630:	58d3      	ldr	r3, [r2, r3]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d00a      	beq.n	801b64c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801b636:	687a      	ldr	r2, [r7, #4]
 801b638:	23ad      	movs	r3, #173	@ 0xad
 801b63a:	009b      	lsls	r3, r3, #2
 801b63c:	58d3      	ldr	r3, [r2, r3]
 801b63e:	685a      	ldr	r2, [r3, #4]
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	685b      	ldr	r3, [r3, #4]
 801b644:	b2d9      	uxtb	r1, r3
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	0018      	movs	r0, r3
 801b64a:	4790      	blx	r2
  }

  return USBD_OK;
 801b64c:	2300      	movs	r3, #0
}
 801b64e:	0018      	movs	r0, r3
 801b650:	46bd      	mov	sp, r7
 801b652:	b002      	add	sp, #8
 801b654:	bd80      	pop	{r7, pc}

0801b656 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801b656:	b580      	push	{r7, lr}
 801b658:	b082      	sub	sp, #8
 801b65a:	af00      	add	r7, sp, #0
 801b65c:	6078      	str	r0, [r7, #4]
 801b65e:	000a      	movs	r2, r1
 801b660:	1cfb      	adds	r3, r7, #3
 801b662:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	1cfa      	adds	r2, r7, #3
 801b668:	7812      	ldrb	r2, [r2, #0]
 801b66a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801b66c:	2300      	movs	r3, #0
}
 801b66e:	0018      	movs	r0, r3
 801b670:	46bd      	mov	sp, r7
 801b672:	b002      	add	sp, #8
 801b674:	bd80      	pop	{r7, pc}
	...

0801b678 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801b678:	b580      	push	{r7, lr}
 801b67a:	b082      	sub	sp, #8
 801b67c:	af00      	add	r7, sp, #0
 801b67e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801b680:	687a      	ldr	r2, [r7, #4]
 801b682:	23a7      	movs	r3, #167	@ 0xa7
 801b684:	009b      	lsls	r3, r3, #2
 801b686:	5cd1      	ldrb	r1, [r2, r3]
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	4a06      	ldr	r2, [pc, #24]	@ (801b6a4 <USBD_LL_Suspend+0x2c>)
 801b68c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801b68e:	687a      	ldr	r2, [r7, #4]
 801b690:	23a7      	movs	r3, #167	@ 0xa7
 801b692:	009b      	lsls	r3, r3, #2
 801b694:	2104      	movs	r1, #4
 801b696:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801b698:	2300      	movs	r3, #0
}
 801b69a:	0018      	movs	r0, r3
 801b69c:	46bd      	mov	sp, r7
 801b69e:	b002      	add	sp, #8
 801b6a0:	bd80      	pop	{r7, pc}
 801b6a2:	46c0      	nop			@ (mov r8, r8)
 801b6a4:	0000029d 	.word	0x0000029d

0801b6a8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801b6a8:	b580      	push	{r7, lr}
 801b6aa:	b082      	sub	sp, #8
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801b6b0:	687a      	ldr	r2, [r7, #4]
 801b6b2:	23a7      	movs	r3, #167	@ 0xa7
 801b6b4:	009b      	lsls	r3, r3, #2
 801b6b6:	5cd3      	ldrb	r3, [r2, r3]
 801b6b8:	2b04      	cmp	r3, #4
 801b6ba:	d106      	bne.n	801b6ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	4a05      	ldr	r2, [pc, #20]	@ (801b6d4 <USBD_LL_Resume+0x2c>)
 801b6c0:	5c99      	ldrb	r1, [r3, r2]
 801b6c2:	687a      	ldr	r2, [r7, #4]
 801b6c4:	23a7      	movs	r3, #167	@ 0xa7
 801b6c6:	009b      	lsls	r3, r3, #2
 801b6c8:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801b6ca:	2300      	movs	r3, #0
}
 801b6cc:	0018      	movs	r0, r3
 801b6ce:	46bd      	mov	sp, r7
 801b6d0:	b002      	add	sp, #8
 801b6d2:	bd80      	pop	{r7, pc}
 801b6d4:	0000029d 	.word	0x0000029d

0801b6d8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801b6d8:	b580      	push	{r7, lr}
 801b6da:	b082      	sub	sp, #8
 801b6dc:	af00      	add	r7, sp, #0
 801b6de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b6e0:	687a      	ldr	r2, [r7, #4]
 801b6e2:	23a7      	movs	r3, #167	@ 0xa7
 801b6e4:	009b      	lsls	r3, r3, #2
 801b6e6:	5cd3      	ldrb	r3, [r2, r3]
 801b6e8:	2b03      	cmp	r3, #3
 801b6ea:	d10e      	bne.n	801b70a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801b6ec:	687a      	ldr	r2, [r7, #4]
 801b6ee:	23ad      	movs	r3, #173	@ 0xad
 801b6f0:	009b      	lsls	r3, r3, #2
 801b6f2:	58d3      	ldr	r3, [r2, r3]
 801b6f4:	69db      	ldr	r3, [r3, #28]
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d007      	beq.n	801b70a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801b6fa:	687a      	ldr	r2, [r7, #4]
 801b6fc:	23ad      	movs	r3, #173	@ 0xad
 801b6fe:	009b      	lsls	r3, r3, #2
 801b700:	58d3      	ldr	r3, [r2, r3]
 801b702:	69db      	ldr	r3, [r3, #28]
 801b704:	687a      	ldr	r2, [r7, #4]
 801b706:	0010      	movs	r0, r2
 801b708:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801b70a:	2300      	movs	r3, #0
}
 801b70c:	0018      	movs	r0, r3
 801b70e:	46bd      	mov	sp, r7
 801b710:	b002      	add	sp, #8
 801b712:	bd80      	pop	{r7, pc}

0801b714 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801b714:	b580      	push	{r7, lr}
 801b716:	b084      	sub	sp, #16
 801b718:	af00      	add	r7, sp, #0
 801b71a:	6078      	str	r0, [r7, #4]
 801b71c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b71e:	230f      	movs	r3, #15
 801b720:	18fb      	adds	r3, r7, r3
 801b722:	2200      	movs	r2, #0
 801b724:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b726:	683b      	ldr	r3, [r7, #0]
 801b728:	781b      	ldrb	r3, [r3, #0]
 801b72a:	001a      	movs	r2, r3
 801b72c:	2360      	movs	r3, #96	@ 0x60
 801b72e:	4013      	ands	r3, r2
 801b730:	2b40      	cmp	r3, #64	@ 0x40
 801b732:	d004      	beq.n	801b73e <USBD_StdDevReq+0x2a>
 801b734:	d84f      	bhi.n	801b7d6 <USBD_StdDevReq+0xc2>
 801b736:	2b00      	cmp	r3, #0
 801b738:	d00b      	beq.n	801b752 <USBD_StdDevReq+0x3e>
 801b73a:	2b20      	cmp	r3, #32
 801b73c:	d14b      	bne.n	801b7d6 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801b73e:	687a      	ldr	r2, [r7, #4]
 801b740:	23ad      	movs	r3, #173	@ 0xad
 801b742:	009b      	lsls	r3, r3, #2
 801b744:	58d3      	ldr	r3, [r2, r3]
 801b746:	689b      	ldr	r3, [r3, #8]
 801b748:	6839      	ldr	r1, [r7, #0]
 801b74a:	687a      	ldr	r2, [r7, #4]
 801b74c:	0010      	movs	r0, r2
 801b74e:	4798      	blx	r3
      break;
 801b750:	e048      	b.n	801b7e4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b752:	683b      	ldr	r3, [r7, #0]
 801b754:	785b      	ldrb	r3, [r3, #1]
 801b756:	2b09      	cmp	r3, #9
 801b758:	d835      	bhi.n	801b7c6 <USBD_StdDevReq+0xb2>
 801b75a:	009a      	lsls	r2, r3, #2
 801b75c:	4b25      	ldr	r3, [pc, #148]	@ (801b7f4 <USBD_StdDevReq+0xe0>)
 801b75e:	18d3      	adds	r3, r2, r3
 801b760:	681b      	ldr	r3, [r3, #0]
 801b762:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801b764:	683a      	ldr	r2, [r7, #0]
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	0011      	movs	r1, r2
 801b76a:	0018      	movs	r0, r3
 801b76c:	f000 fa52 	bl	801bc14 <USBD_GetDescriptor>
          break;
 801b770:	e030      	b.n	801b7d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801b772:	683a      	ldr	r2, [r7, #0]
 801b774:	687b      	ldr	r3, [r7, #4]
 801b776:	0011      	movs	r1, r2
 801b778:	0018      	movs	r0, r3
 801b77a:	f000 fbfd 	bl	801bf78 <USBD_SetAddress>
          break;
 801b77e:	e029      	b.n	801b7d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801b780:	683a      	ldr	r2, [r7, #0]
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	0011      	movs	r1, r2
 801b786:	0018      	movs	r0, r3
 801b788:	f000 fc4a 	bl	801c020 <USBD_SetConfig>
          break;
 801b78c:	e022      	b.n	801b7d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801b78e:	683a      	ldr	r2, [r7, #0]
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	0011      	movs	r1, r2
 801b794:	0018      	movs	r0, r3
 801b796:	f000 fce7 	bl	801c168 <USBD_GetConfig>
          break;
 801b79a:	e01b      	b.n	801b7d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801b79c:	683a      	ldr	r2, [r7, #0]
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	0011      	movs	r1, r2
 801b7a2:	0018      	movs	r0, r3
 801b7a4:	f000 fd1b 	bl	801c1de <USBD_GetStatus>
          break;
 801b7a8:	e014      	b.n	801b7d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801b7aa:	683a      	ldr	r2, [r7, #0]
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	0011      	movs	r1, r2
 801b7b0:	0018      	movs	r0, r3
 801b7b2:	f000 fd4e 	bl	801c252 <USBD_SetFeature>
          break;
 801b7b6:	e00d      	b.n	801b7d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801b7b8:	683a      	ldr	r2, [r7, #0]
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	0011      	movs	r1, r2
 801b7be:	0018      	movs	r0, r3
 801b7c0:	f000 fd5d 	bl	801c27e <USBD_ClrFeature>
          break;
 801b7c4:	e006      	b.n	801b7d4 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801b7c6:	683a      	ldr	r2, [r7, #0]
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	0011      	movs	r1, r2
 801b7cc:	0018      	movs	r0, r3
 801b7ce:	f000 fdb4 	bl	801c33a <USBD_CtlError>
          break;
 801b7d2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b7d4:	e006      	b.n	801b7e4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801b7d6:	683a      	ldr	r2, [r7, #0]
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	0011      	movs	r1, r2
 801b7dc:	0018      	movs	r0, r3
 801b7de:	f000 fdac 	bl	801c33a <USBD_CtlError>
      break;
 801b7e2:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b7e4:	230f      	movs	r3, #15
 801b7e6:	18fb      	adds	r3, r7, r3
 801b7e8:	781b      	ldrb	r3, [r3, #0]
}
 801b7ea:	0018      	movs	r0, r3
 801b7ec:	46bd      	mov	sp, r7
 801b7ee:	b004      	add	sp, #16
 801b7f0:	bd80      	pop	{r7, pc}
 801b7f2:	46c0      	nop			@ (mov r8, r8)
 801b7f4:	08024d7c 	.word	0x08024d7c

0801b7f8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801b7f8:	b5b0      	push	{r4, r5, r7, lr}
 801b7fa:	b084      	sub	sp, #16
 801b7fc:	af00      	add	r7, sp, #0
 801b7fe:	6078      	str	r0, [r7, #4]
 801b800:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b802:	230f      	movs	r3, #15
 801b804:	18fb      	adds	r3, r7, r3
 801b806:	2200      	movs	r2, #0
 801b808:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b80a:	683b      	ldr	r3, [r7, #0]
 801b80c:	781b      	ldrb	r3, [r3, #0]
 801b80e:	001a      	movs	r2, r3
 801b810:	2360      	movs	r3, #96	@ 0x60
 801b812:	4013      	ands	r3, r2
 801b814:	2b40      	cmp	r3, #64	@ 0x40
 801b816:	d004      	beq.n	801b822 <USBD_StdItfReq+0x2a>
 801b818:	d839      	bhi.n	801b88e <USBD_StdItfReq+0x96>
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d001      	beq.n	801b822 <USBD_StdItfReq+0x2a>
 801b81e:	2b20      	cmp	r3, #32
 801b820:	d135      	bne.n	801b88e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801b822:	687a      	ldr	r2, [r7, #4]
 801b824:	23a7      	movs	r3, #167	@ 0xa7
 801b826:	009b      	lsls	r3, r3, #2
 801b828:	5cd3      	ldrb	r3, [r2, r3]
 801b82a:	3b01      	subs	r3, #1
 801b82c:	2b02      	cmp	r3, #2
 801b82e:	d825      	bhi.n	801b87c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801b830:	683b      	ldr	r3, [r7, #0]
 801b832:	889b      	ldrh	r3, [r3, #4]
 801b834:	b2db      	uxtb	r3, r3
 801b836:	2b01      	cmp	r3, #1
 801b838:	d819      	bhi.n	801b86e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801b83a:	687a      	ldr	r2, [r7, #4]
 801b83c:	23ad      	movs	r3, #173	@ 0xad
 801b83e:	009b      	lsls	r3, r3, #2
 801b840:	58d3      	ldr	r3, [r2, r3]
 801b842:	689b      	ldr	r3, [r3, #8]
 801b844:	250f      	movs	r5, #15
 801b846:	197c      	adds	r4, r7, r5
 801b848:	6839      	ldr	r1, [r7, #0]
 801b84a:	687a      	ldr	r2, [r7, #4]
 801b84c:	0010      	movs	r0, r2
 801b84e:	4798      	blx	r3
 801b850:	0003      	movs	r3, r0
 801b852:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801b854:	683b      	ldr	r3, [r7, #0]
 801b856:	88db      	ldrh	r3, [r3, #6]
 801b858:	2b00      	cmp	r3, #0
 801b85a:	d116      	bne.n	801b88a <USBD_StdItfReq+0x92>
 801b85c:	197b      	adds	r3, r7, r5
 801b85e:	781b      	ldrb	r3, [r3, #0]
 801b860:	2b00      	cmp	r3, #0
 801b862:	d112      	bne.n	801b88a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	0018      	movs	r0, r3
 801b868:	f000 fe4f 	bl	801c50a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801b86c:	e00d      	b.n	801b88a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801b86e:	683a      	ldr	r2, [r7, #0]
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	0011      	movs	r1, r2
 801b874:	0018      	movs	r0, r3
 801b876:	f000 fd60 	bl	801c33a <USBD_CtlError>
          break;
 801b87a:	e006      	b.n	801b88a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801b87c:	683a      	ldr	r2, [r7, #0]
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	0011      	movs	r1, r2
 801b882:	0018      	movs	r0, r3
 801b884:	f000 fd59 	bl	801c33a <USBD_CtlError>
          break;
 801b888:	e000      	b.n	801b88c <USBD_StdItfReq+0x94>
          break;
 801b88a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b88c:	e006      	b.n	801b89c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801b88e:	683a      	ldr	r2, [r7, #0]
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	0011      	movs	r1, r2
 801b894:	0018      	movs	r0, r3
 801b896:	f000 fd50 	bl	801c33a <USBD_CtlError>
      break;
 801b89a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801b89c:	2300      	movs	r3, #0
}
 801b89e:	0018      	movs	r0, r3
 801b8a0:	46bd      	mov	sp, r7
 801b8a2:	b004      	add	sp, #16
 801b8a4:	bdb0      	pop	{r4, r5, r7, pc}

0801b8a6 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801b8a6:	b5b0      	push	{r4, r5, r7, lr}
 801b8a8:	b084      	sub	sp, #16
 801b8aa:	af00      	add	r7, sp, #0
 801b8ac:	6078      	str	r0, [r7, #4]
 801b8ae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801b8b0:	230f      	movs	r3, #15
 801b8b2:	18fb      	adds	r3, r7, r3
 801b8b4:	2200      	movs	r2, #0
 801b8b6:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801b8b8:	683b      	ldr	r3, [r7, #0]
 801b8ba:	889a      	ldrh	r2, [r3, #4]
 801b8bc:	230e      	movs	r3, #14
 801b8be:	18fb      	adds	r3, r7, r3
 801b8c0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b8c2:	683b      	ldr	r3, [r7, #0]
 801b8c4:	781b      	ldrb	r3, [r3, #0]
 801b8c6:	001a      	movs	r2, r3
 801b8c8:	2360      	movs	r3, #96	@ 0x60
 801b8ca:	4013      	ands	r3, r2
 801b8cc:	2b40      	cmp	r3, #64	@ 0x40
 801b8ce:	d006      	beq.n	801b8de <USBD_StdEPReq+0x38>
 801b8d0:	d900      	bls.n	801b8d4 <USBD_StdEPReq+0x2e>
 801b8d2:	e190      	b.n	801bbf6 <USBD_StdEPReq+0x350>
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d00c      	beq.n	801b8f2 <USBD_StdEPReq+0x4c>
 801b8d8:	2b20      	cmp	r3, #32
 801b8da:	d000      	beq.n	801b8de <USBD_StdEPReq+0x38>
 801b8dc:	e18b      	b.n	801bbf6 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801b8de:	687a      	ldr	r2, [r7, #4]
 801b8e0:	23ad      	movs	r3, #173	@ 0xad
 801b8e2:	009b      	lsls	r3, r3, #2
 801b8e4:	58d3      	ldr	r3, [r2, r3]
 801b8e6:	689b      	ldr	r3, [r3, #8]
 801b8e8:	6839      	ldr	r1, [r7, #0]
 801b8ea:	687a      	ldr	r2, [r7, #4]
 801b8ec:	0010      	movs	r0, r2
 801b8ee:	4798      	blx	r3
      break;
 801b8f0:	e188      	b.n	801bc04 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801b8f2:	683b      	ldr	r3, [r7, #0]
 801b8f4:	781b      	ldrb	r3, [r3, #0]
 801b8f6:	001a      	movs	r2, r3
 801b8f8:	2360      	movs	r3, #96	@ 0x60
 801b8fa:	4013      	ands	r3, r2
 801b8fc:	2b20      	cmp	r3, #32
 801b8fe:	d10f      	bne.n	801b920 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801b900:	687a      	ldr	r2, [r7, #4]
 801b902:	23ad      	movs	r3, #173	@ 0xad
 801b904:	009b      	lsls	r3, r3, #2
 801b906:	58d3      	ldr	r3, [r2, r3]
 801b908:	689b      	ldr	r3, [r3, #8]
 801b90a:	250f      	movs	r5, #15
 801b90c:	197c      	adds	r4, r7, r5
 801b90e:	6839      	ldr	r1, [r7, #0]
 801b910:	687a      	ldr	r2, [r7, #4]
 801b912:	0010      	movs	r0, r2
 801b914:	4798      	blx	r3
 801b916:	0003      	movs	r3, r0
 801b918:	7023      	strb	r3, [r4, #0]

        return ret;
 801b91a:	197b      	adds	r3, r7, r5
 801b91c:	781b      	ldrb	r3, [r3, #0]
 801b91e:	e174      	b.n	801bc0a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801b920:	683b      	ldr	r3, [r7, #0]
 801b922:	785b      	ldrb	r3, [r3, #1]
 801b924:	2b03      	cmp	r3, #3
 801b926:	d007      	beq.n	801b938 <USBD_StdEPReq+0x92>
 801b928:	dd00      	ble.n	801b92c <USBD_StdEPReq+0x86>
 801b92a:	e15c      	b.n	801bbe6 <USBD_StdEPReq+0x340>
 801b92c:	2b00      	cmp	r3, #0
 801b92e:	d100      	bne.n	801b932 <USBD_StdEPReq+0x8c>
 801b930:	e092      	b.n	801ba58 <USBD_StdEPReq+0x1b2>
 801b932:	2b01      	cmp	r3, #1
 801b934:	d04b      	beq.n	801b9ce <USBD_StdEPReq+0x128>
 801b936:	e156      	b.n	801bbe6 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801b938:	687a      	ldr	r2, [r7, #4]
 801b93a:	23a7      	movs	r3, #167	@ 0xa7
 801b93c:	009b      	lsls	r3, r3, #2
 801b93e:	5cd3      	ldrb	r3, [r2, r3]
 801b940:	2b02      	cmp	r3, #2
 801b942:	d002      	beq.n	801b94a <USBD_StdEPReq+0xa4>
 801b944:	2b03      	cmp	r3, #3
 801b946:	d01d      	beq.n	801b984 <USBD_StdEPReq+0xde>
 801b948:	e039      	b.n	801b9be <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b94a:	220e      	movs	r2, #14
 801b94c:	18bb      	adds	r3, r7, r2
 801b94e:	781b      	ldrb	r3, [r3, #0]
 801b950:	2b00      	cmp	r3, #0
 801b952:	d010      	beq.n	801b976 <USBD_StdEPReq+0xd0>
 801b954:	18bb      	adds	r3, r7, r2
 801b956:	781b      	ldrb	r3, [r3, #0]
 801b958:	2b80      	cmp	r3, #128	@ 0x80
 801b95a:	d00c      	beq.n	801b976 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801b95c:	18bb      	adds	r3, r7, r2
 801b95e:	781a      	ldrb	r2, [r3, #0]
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	0011      	movs	r1, r2
 801b964:	0018      	movs	r0, r3
 801b966:	f001 fa10 	bl	801cd8a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	2180      	movs	r1, #128	@ 0x80
 801b96e:	0018      	movs	r0, r3
 801b970:	f001 fa0b 	bl	801cd8a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b974:	e02a      	b.n	801b9cc <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801b976:	683a      	ldr	r2, [r7, #0]
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	0011      	movs	r1, r2
 801b97c:	0018      	movs	r0, r3
 801b97e:	f000 fcdc 	bl	801c33a <USBD_CtlError>
              break;
 801b982:	e023      	b.n	801b9cc <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b984:	683b      	ldr	r3, [r7, #0]
 801b986:	885b      	ldrh	r3, [r3, #2]
 801b988:	2b00      	cmp	r3, #0
 801b98a:	d113      	bne.n	801b9b4 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801b98c:	220e      	movs	r2, #14
 801b98e:	18bb      	adds	r3, r7, r2
 801b990:	781b      	ldrb	r3, [r3, #0]
 801b992:	2b00      	cmp	r3, #0
 801b994:	d00e      	beq.n	801b9b4 <USBD_StdEPReq+0x10e>
 801b996:	18bb      	adds	r3, r7, r2
 801b998:	781b      	ldrb	r3, [r3, #0]
 801b99a:	2b80      	cmp	r3, #128	@ 0x80
 801b99c:	d00a      	beq.n	801b9b4 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801b99e:	683b      	ldr	r3, [r7, #0]
 801b9a0:	88db      	ldrh	r3, [r3, #6]
 801b9a2:	2b00      	cmp	r3, #0
 801b9a4:	d106      	bne.n	801b9b4 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801b9a6:	18bb      	adds	r3, r7, r2
 801b9a8:	781a      	ldrb	r2, [r3, #0]
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	0011      	movs	r1, r2
 801b9ae:	0018      	movs	r0, r3
 801b9b0:	f001 f9eb 	bl	801cd8a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	0018      	movs	r0, r3
 801b9b8:	f000 fda7 	bl	801c50a <USBD_CtlSendStatus>

              break;
 801b9bc:	e006      	b.n	801b9cc <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801b9be:	683a      	ldr	r2, [r7, #0]
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	0011      	movs	r1, r2
 801b9c4:	0018      	movs	r0, r3
 801b9c6:	f000 fcb8 	bl	801c33a <USBD_CtlError>
              break;
 801b9ca:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b9cc:	e112      	b.n	801bbf4 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801b9ce:	687a      	ldr	r2, [r7, #4]
 801b9d0:	23a7      	movs	r3, #167	@ 0xa7
 801b9d2:	009b      	lsls	r3, r3, #2
 801b9d4:	5cd3      	ldrb	r3, [r2, r3]
 801b9d6:	2b02      	cmp	r3, #2
 801b9d8:	d002      	beq.n	801b9e0 <USBD_StdEPReq+0x13a>
 801b9da:	2b03      	cmp	r3, #3
 801b9dc:	d01d      	beq.n	801ba1a <USBD_StdEPReq+0x174>
 801b9de:	e032      	b.n	801ba46 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b9e0:	220e      	movs	r2, #14
 801b9e2:	18bb      	adds	r3, r7, r2
 801b9e4:	781b      	ldrb	r3, [r3, #0]
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d010      	beq.n	801ba0c <USBD_StdEPReq+0x166>
 801b9ea:	18bb      	adds	r3, r7, r2
 801b9ec:	781b      	ldrb	r3, [r3, #0]
 801b9ee:	2b80      	cmp	r3, #128	@ 0x80
 801b9f0:	d00c      	beq.n	801ba0c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801b9f2:	18bb      	adds	r3, r7, r2
 801b9f4:	781a      	ldrb	r2, [r3, #0]
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	0011      	movs	r1, r2
 801b9fa:	0018      	movs	r0, r3
 801b9fc:	f001 f9c5 	bl	801cd8a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	2180      	movs	r1, #128	@ 0x80
 801ba04:	0018      	movs	r0, r3
 801ba06:	f001 f9c0 	bl	801cd8a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801ba0a:	e024      	b.n	801ba56 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801ba0c:	683a      	ldr	r2, [r7, #0]
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	0011      	movs	r1, r2
 801ba12:	0018      	movs	r0, r3
 801ba14:	f000 fc91 	bl	801c33a <USBD_CtlError>
              break;
 801ba18:	e01d      	b.n	801ba56 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801ba1a:	683b      	ldr	r3, [r7, #0]
 801ba1c:	885b      	ldrh	r3, [r3, #2]
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d118      	bne.n	801ba54 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801ba22:	210e      	movs	r1, #14
 801ba24:	187b      	adds	r3, r7, r1
 801ba26:	781b      	ldrb	r3, [r3, #0]
 801ba28:	227f      	movs	r2, #127	@ 0x7f
 801ba2a:	4013      	ands	r3, r2
 801ba2c:	d006      	beq.n	801ba3c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801ba2e:	187b      	adds	r3, r7, r1
 801ba30:	781a      	ldrb	r2, [r3, #0]
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	0011      	movs	r1, r2
 801ba36:	0018      	movs	r0, r3
 801ba38:	f001 f9d2 	bl	801cde0 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	0018      	movs	r0, r3
 801ba40:	f000 fd63 	bl	801c50a <USBD_CtlSendStatus>
              }
              break;
 801ba44:	e006      	b.n	801ba54 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801ba46:	683a      	ldr	r2, [r7, #0]
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	0011      	movs	r1, r2
 801ba4c:	0018      	movs	r0, r3
 801ba4e:	f000 fc74 	bl	801c33a <USBD_CtlError>
              break;
 801ba52:	e000      	b.n	801ba56 <USBD_StdEPReq+0x1b0>
              break;
 801ba54:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801ba56:	e0cd      	b.n	801bbf4 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801ba58:	687a      	ldr	r2, [r7, #4]
 801ba5a:	23a7      	movs	r3, #167	@ 0xa7
 801ba5c:	009b      	lsls	r3, r3, #2
 801ba5e:	5cd3      	ldrb	r3, [r2, r3]
 801ba60:	2b02      	cmp	r3, #2
 801ba62:	d002      	beq.n	801ba6a <USBD_StdEPReq+0x1c4>
 801ba64:	2b03      	cmp	r3, #3
 801ba66:	d03c      	beq.n	801bae2 <USBD_StdEPReq+0x23c>
 801ba68:	e0b5      	b.n	801bbd6 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801ba6a:	220e      	movs	r2, #14
 801ba6c:	18bb      	adds	r3, r7, r2
 801ba6e:	781b      	ldrb	r3, [r3, #0]
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d00a      	beq.n	801ba8a <USBD_StdEPReq+0x1e4>
 801ba74:	18bb      	adds	r3, r7, r2
 801ba76:	781b      	ldrb	r3, [r3, #0]
 801ba78:	2b80      	cmp	r3, #128	@ 0x80
 801ba7a:	d006      	beq.n	801ba8a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801ba7c:	683a      	ldr	r2, [r7, #0]
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	0011      	movs	r1, r2
 801ba82:	0018      	movs	r0, r3
 801ba84:	f000 fc59 	bl	801c33a <USBD_CtlError>
                break;
 801ba88:	e0ac      	b.n	801bbe4 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ba8a:	220e      	movs	r2, #14
 801ba8c:	18bb      	adds	r3, r7, r2
 801ba8e:	781b      	ldrb	r3, [r3, #0]
 801ba90:	b25b      	sxtb	r3, r3
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	da0c      	bge.n	801bab0 <USBD_StdEPReq+0x20a>
 801ba96:	18bb      	adds	r3, r7, r2
 801ba98:	781b      	ldrb	r3, [r3, #0]
 801ba9a:	227f      	movs	r2, #127	@ 0x7f
 801ba9c:	401a      	ands	r2, r3
 801ba9e:	0013      	movs	r3, r2
 801baa0:	009b      	lsls	r3, r3, #2
 801baa2:	189b      	adds	r3, r3, r2
 801baa4:	009b      	lsls	r3, r3, #2
 801baa6:	3310      	adds	r3, #16
 801baa8:	687a      	ldr	r2, [r7, #4]
 801baaa:	18d3      	adds	r3, r2, r3
 801baac:	3304      	adds	r3, #4
 801baae:	e00d      	b.n	801bacc <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801bab0:	230e      	movs	r3, #14
 801bab2:	18fb      	adds	r3, r7, r3
 801bab4:	781b      	ldrb	r3, [r3, #0]
 801bab6:	227f      	movs	r2, #127	@ 0x7f
 801bab8:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801baba:	0013      	movs	r3, r2
 801babc:	009b      	lsls	r3, r3, #2
 801babe:	189b      	adds	r3, r3, r2
 801bac0:	009b      	lsls	r3, r3, #2
 801bac2:	3351      	adds	r3, #81	@ 0x51
 801bac4:	33ff      	adds	r3, #255	@ 0xff
 801bac6:	687a      	ldr	r2, [r7, #4]
 801bac8:	18d3      	adds	r3, r2, r3
 801baca:	3304      	adds	r3, #4
 801bacc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801bace:	68bb      	ldr	r3, [r7, #8]
 801bad0:	2200      	movs	r2, #0
 801bad2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801bad4:	68b9      	ldr	r1, [r7, #8]
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	2202      	movs	r2, #2
 801bada:	0018      	movs	r0, r3
 801badc:	f000 fcab 	bl	801c436 <USBD_CtlSendData>
              break;
 801bae0:	e080      	b.n	801bbe4 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801bae2:	220e      	movs	r2, #14
 801bae4:	18bb      	adds	r3, r7, r2
 801bae6:	781b      	ldrb	r3, [r3, #0]
 801bae8:	b25b      	sxtb	r3, r3
 801baea:	2b00      	cmp	r3, #0
 801baec:	da14      	bge.n	801bb18 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801baee:	18bb      	adds	r3, r7, r2
 801baf0:	781b      	ldrb	r3, [r3, #0]
 801baf2:	220f      	movs	r2, #15
 801baf4:	401a      	ands	r2, r3
 801baf6:	6879      	ldr	r1, [r7, #4]
 801baf8:	0013      	movs	r3, r2
 801bafa:	009b      	lsls	r3, r3, #2
 801bafc:	189b      	adds	r3, r3, r2
 801bafe:	009b      	lsls	r3, r3, #2
 801bb00:	18cb      	adds	r3, r1, r3
 801bb02:	3318      	adds	r3, #24
 801bb04:	681b      	ldr	r3, [r3, #0]
 801bb06:	2b00      	cmp	r3, #0
 801bb08:	d11e      	bne.n	801bb48 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801bb0a:	683a      	ldr	r2, [r7, #0]
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	0011      	movs	r1, r2
 801bb10:	0018      	movs	r0, r3
 801bb12:	f000 fc12 	bl	801c33a <USBD_CtlError>
                  break;
 801bb16:	e065      	b.n	801bbe4 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801bb18:	230e      	movs	r3, #14
 801bb1a:	18fb      	adds	r3, r7, r3
 801bb1c:	781b      	ldrb	r3, [r3, #0]
 801bb1e:	220f      	movs	r2, #15
 801bb20:	401a      	ands	r2, r3
 801bb22:	6878      	ldr	r0, [r7, #4]
 801bb24:	23ac      	movs	r3, #172	@ 0xac
 801bb26:	0059      	lsls	r1, r3, #1
 801bb28:	0013      	movs	r3, r2
 801bb2a:	009b      	lsls	r3, r3, #2
 801bb2c:	189b      	adds	r3, r3, r2
 801bb2e:	009b      	lsls	r3, r3, #2
 801bb30:	18c3      	adds	r3, r0, r3
 801bb32:	185b      	adds	r3, r3, r1
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d106      	bne.n	801bb48 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801bb3a:	683a      	ldr	r2, [r7, #0]
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	0011      	movs	r1, r2
 801bb40:	0018      	movs	r0, r3
 801bb42:	f000 fbfa 	bl	801c33a <USBD_CtlError>
                  break;
 801bb46:	e04d      	b.n	801bbe4 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801bb48:	220e      	movs	r2, #14
 801bb4a:	18bb      	adds	r3, r7, r2
 801bb4c:	781b      	ldrb	r3, [r3, #0]
 801bb4e:	b25b      	sxtb	r3, r3
 801bb50:	2b00      	cmp	r3, #0
 801bb52:	da0c      	bge.n	801bb6e <USBD_StdEPReq+0x2c8>
 801bb54:	18bb      	adds	r3, r7, r2
 801bb56:	781b      	ldrb	r3, [r3, #0]
 801bb58:	227f      	movs	r2, #127	@ 0x7f
 801bb5a:	401a      	ands	r2, r3
 801bb5c:	0013      	movs	r3, r2
 801bb5e:	009b      	lsls	r3, r3, #2
 801bb60:	189b      	adds	r3, r3, r2
 801bb62:	009b      	lsls	r3, r3, #2
 801bb64:	3310      	adds	r3, #16
 801bb66:	687a      	ldr	r2, [r7, #4]
 801bb68:	18d3      	adds	r3, r2, r3
 801bb6a:	3304      	adds	r3, #4
 801bb6c:	e00d      	b.n	801bb8a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801bb6e:	230e      	movs	r3, #14
 801bb70:	18fb      	adds	r3, r7, r3
 801bb72:	781b      	ldrb	r3, [r3, #0]
 801bb74:	227f      	movs	r2, #127	@ 0x7f
 801bb76:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801bb78:	0013      	movs	r3, r2
 801bb7a:	009b      	lsls	r3, r3, #2
 801bb7c:	189b      	adds	r3, r3, r2
 801bb7e:	009b      	lsls	r3, r3, #2
 801bb80:	3351      	adds	r3, #81	@ 0x51
 801bb82:	33ff      	adds	r3, #255	@ 0xff
 801bb84:	687a      	ldr	r2, [r7, #4]
 801bb86:	18d3      	adds	r3, r2, r3
 801bb88:	3304      	adds	r3, #4
 801bb8a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801bb8c:	220e      	movs	r2, #14
 801bb8e:	18bb      	adds	r3, r7, r2
 801bb90:	781b      	ldrb	r3, [r3, #0]
 801bb92:	2b00      	cmp	r3, #0
 801bb94:	d003      	beq.n	801bb9e <USBD_StdEPReq+0x2f8>
 801bb96:	18bb      	adds	r3, r7, r2
 801bb98:	781b      	ldrb	r3, [r3, #0]
 801bb9a:	2b80      	cmp	r3, #128	@ 0x80
 801bb9c:	d103      	bne.n	801bba6 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801bb9e:	68bb      	ldr	r3, [r7, #8]
 801bba0:	2200      	movs	r2, #0
 801bba2:	601a      	str	r2, [r3, #0]
 801bba4:	e010      	b.n	801bbc8 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801bba6:	230e      	movs	r3, #14
 801bba8:	18fb      	adds	r3, r7, r3
 801bbaa:	781a      	ldrb	r2, [r3, #0]
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	0011      	movs	r1, r2
 801bbb0:	0018      	movs	r0, r3
 801bbb2:	f001 f940 	bl	801ce36 <USBD_LL_IsStallEP>
 801bbb6:	1e03      	subs	r3, r0, #0
 801bbb8:	d003      	beq.n	801bbc2 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801bbba:	68bb      	ldr	r3, [r7, #8]
 801bbbc:	2201      	movs	r2, #1
 801bbbe:	601a      	str	r2, [r3, #0]
 801bbc0:	e002      	b.n	801bbc8 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801bbc2:	68bb      	ldr	r3, [r7, #8]
 801bbc4:	2200      	movs	r2, #0
 801bbc6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801bbc8:	68b9      	ldr	r1, [r7, #8]
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	2202      	movs	r2, #2
 801bbce:	0018      	movs	r0, r3
 801bbd0:	f000 fc31 	bl	801c436 <USBD_CtlSendData>
              break;
 801bbd4:	e006      	b.n	801bbe4 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801bbd6:	683a      	ldr	r2, [r7, #0]
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	0011      	movs	r1, r2
 801bbdc:	0018      	movs	r0, r3
 801bbde:	f000 fbac 	bl	801c33a <USBD_CtlError>
              break;
 801bbe2:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801bbe4:	e006      	b.n	801bbf4 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801bbe6:	683a      	ldr	r2, [r7, #0]
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	0011      	movs	r1, r2
 801bbec:	0018      	movs	r0, r3
 801bbee:	f000 fba4 	bl	801c33a <USBD_CtlError>
          break;
 801bbf2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801bbf4:	e006      	b.n	801bc04 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801bbf6:	683a      	ldr	r2, [r7, #0]
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	0011      	movs	r1, r2
 801bbfc:	0018      	movs	r0, r3
 801bbfe:	f000 fb9c 	bl	801c33a <USBD_CtlError>
      break;
 801bc02:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801bc04:	230f      	movs	r3, #15
 801bc06:	18fb      	adds	r3, r7, r3
 801bc08:	781b      	ldrb	r3, [r3, #0]
}
 801bc0a:	0018      	movs	r0, r3
 801bc0c:	46bd      	mov	sp, r7
 801bc0e:	b004      	add	sp, #16
 801bc10:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801bc14 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801bc14:	b580      	push	{r7, lr}
 801bc16:	b084      	sub	sp, #16
 801bc18:	af00      	add	r7, sp, #0
 801bc1a:	6078      	str	r0, [r7, #4]
 801bc1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801bc1e:	2308      	movs	r3, #8
 801bc20:	18fb      	adds	r3, r7, r3
 801bc22:	2200      	movs	r2, #0
 801bc24:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801bc26:	2300      	movs	r3, #0
 801bc28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801bc2a:	230b      	movs	r3, #11
 801bc2c:	18fb      	adds	r3, r7, r3
 801bc2e:	2200      	movs	r2, #0
 801bc30:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801bc32:	683b      	ldr	r3, [r7, #0]
 801bc34:	885b      	ldrh	r3, [r3, #2]
 801bc36:	0a1b      	lsrs	r3, r3, #8
 801bc38:	b29b      	uxth	r3, r3
 801bc3a:	2b07      	cmp	r3, #7
 801bc3c:	d900      	bls.n	801bc40 <USBD_GetDescriptor+0x2c>
 801bc3e:	e159      	b.n	801bef4 <USBD_GetDescriptor+0x2e0>
 801bc40:	009a      	lsls	r2, r3, #2
 801bc42:	4bcb      	ldr	r3, [pc, #812]	@ (801bf70 <USBD_GetDescriptor+0x35c>)
 801bc44:	18d3      	adds	r3, r2, r3
 801bc46:	681b      	ldr	r3, [r3, #0]
 801bc48:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801bc4a:	687a      	ldr	r2, [r7, #4]
 801bc4c:	23ac      	movs	r3, #172	@ 0xac
 801bc4e:	009b      	lsls	r3, r3, #2
 801bc50:	58d3      	ldr	r3, [r2, r3]
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	687a      	ldr	r2, [r7, #4]
 801bc56:	7c12      	ldrb	r2, [r2, #16]
 801bc58:	2108      	movs	r1, #8
 801bc5a:	1879      	adds	r1, r7, r1
 801bc5c:	0010      	movs	r0, r2
 801bc5e:	4798      	blx	r3
 801bc60:	0003      	movs	r3, r0
 801bc62:	60fb      	str	r3, [r7, #12]
      break;
 801bc64:	e153      	b.n	801bf0e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	7c1b      	ldrb	r3, [r3, #16]
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d10f      	bne.n	801bc8e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801bc6e:	687a      	ldr	r2, [r7, #4]
 801bc70:	23ad      	movs	r3, #173	@ 0xad
 801bc72:	009b      	lsls	r3, r3, #2
 801bc74:	58d3      	ldr	r3, [r2, r3]
 801bc76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bc78:	2208      	movs	r2, #8
 801bc7a:	18ba      	adds	r2, r7, r2
 801bc7c:	0010      	movs	r0, r2
 801bc7e:	4798      	blx	r3
 801bc80:	0003      	movs	r3, r0
 801bc82:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801bc84:	68fb      	ldr	r3, [r7, #12]
 801bc86:	3301      	adds	r3, #1
 801bc88:	2202      	movs	r2, #2
 801bc8a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801bc8c:	e13f      	b.n	801bf0e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801bc8e:	687a      	ldr	r2, [r7, #4]
 801bc90:	23ad      	movs	r3, #173	@ 0xad
 801bc92:	009b      	lsls	r3, r3, #2
 801bc94:	58d3      	ldr	r3, [r2, r3]
 801bc96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bc98:	2208      	movs	r2, #8
 801bc9a:	18ba      	adds	r2, r7, r2
 801bc9c:	0010      	movs	r0, r2
 801bc9e:	4798      	blx	r3
 801bca0:	0003      	movs	r3, r0
 801bca2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801bca4:	68fb      	ldr	r3, [r7, #12]
 801bca6:	3301      	adds	r3, #1
 801bca8:	2202      	movs	r2, #2
 801bcaa:	701a      	strb	r2, [r3, #0]
      break;
 801bcac:	e12f      	b.n	801bf0e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801bcae:	683b      	ldr	r3, [r7, #0]
 801bcb0:	885b      	ldrh	r3, [r3, #2]
 801bcb2:	b2db      	uxtb	r3, r3
 801bcb4:	2b05      	cmp	r3, #5
 801bcb6:	d900      	bls.n	801bcba <USBD_GetDescriptor+0xa6>
 801bcb8:	e0d0      	b.n	801be5c <USBD_GetDescriptor+0x248>
 801bcba:	009a      	lsls	r2, r3, #2
 801bcbc:	4bad      	ldr	r3, [pc, #692]	@ (801bf74 <USBD_GetDescriptor+0x360>)
 801bcbe:	18d3      	adds	r3, r2, r3
 801bcc0:	681b      	ldr	r3, [r3, #0]
 801bcc2:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801bcc4:	687a      	ldr	r2, [r7, #4]
 801bcc6:	23ac      	movs	r3, #172	@ 0xac
 801bcc8:	009b      	lsls	r3, r3, #2
 801bcca:	58d3      	ldr	r3, [r2, r3]
 801bccc:	685b      	ldr	r3, [r3, #4]
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	d00d      	beq.n	801bcee <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801bcd2:	687a      	ldr	r2, [r7, #4]
 801bcd4:	23ac      	movs	r3, #172	@ 0xac
 801bcd6:	009b      	lsls	r3, r3, #2
 801bcd8:	58d3      	ldr	r3, [r2, r3]
 801bcda:	685b      	ldr	r3, [r3, #4]
 801bcdc:	687a      	ldr	r2, [r7, #4]
 801bcde:	7c12      	ldrb	r2, [r2, #16]
 801bce0:	2108      	movs	r1, #8
 801bce2:	1879      	adds	r1, r7, r1
 801bce4:	0010      	movs	r0, r2
 801bce6:	4798      	blx	r3
 801bce8:	0003      	movs	r3, r0
 801bcea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bcec:	e0c3      	b.n	801be76 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801bcee:	683a      	ldr	r2, [r7, #0]
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	0011      	movs	r1, r2
 801bcf4:	0018      	movs	r0, r3
 801bcf6:	f000 fb20 	bl	801c33a <USBD_CtlError>
            err++;
 801bcfa:	210b      	movs	r1, #11
 801bcfc:	187b      	adds	r3, r7, r1
 801bcfe:	781a      	ldrb	r2, [r3, #0]
 801bd00:	187b      	adds	r3, r7, r1
 801bd02:	3201      	adds	r2, #1
 801bd04:	701a      	strb	r2, [r3, #0]
          break;
 801bd06:	e0b6      	b.n	801be76 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801bd08:	687a      	ldr	r2, [r7, #4]
 801bd0a:	23ac      	movs	r3, #172	@ 0xac
 801bd0c:	009b      	lsls	r3, r3, #2
 801bd0e:	58d3      	ldr	r3, [r2, r3]
 801bd10:	689b      	ldr	r3, [r3, #8]
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d00d      	beq.n	801bd32 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801bd16:	687a      	ldr	r2, [r7, #4]
 801bd18:	23ac      	movs	r3, #172	@ 0xac
 801bd1a:	009b      	lsls	r3, r3, #2
 801bd1c:	58d3      	ldr	r3, [r2, r3]
 801bd1e:	689b      	ldr	r3, [r3, #8]
 801bd20:	687a      	ldr	r2, [r7, #4]
 801bd22:	7c12      	ldrb	r2, [r2, #16]
 801bd24:	2108      	movs	r1, #8
 801bd26:	1879      	adds	r1, r7, r1
 801bd28:	0010      	movs	r0, r2
 801bd2a:	4798      	blx	r3
 801bd2c:	0003      	movs	r3, r0
 801bd2e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bd30:	e0a1      	b.n	801be76 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801bd32:	683a      	ldr	r2, [r7, #0]
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	0011      	movs	r1, r2
 801bd38:	0018      	movs	r0, r3
 801bd3a:	f000 fafe 	bl	801c33a <USBD_CtlError>
            err++;
 801bd3e:	210b      	movs	r1, #11
 801bd40:	187b      	adds	r3, r7, r1
 801bd42:	781a      	ldrb	r2, [r3, #0]
 801bd44:	187b      	adds	r3, r7, r1
 801bd46:	3201      	adds	r2, #1
 801bd48:	701a      	strb	r2, [r3, #0]
          break;
 801bd4a:	e094      	b.n	801be76 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801bd4c:	687a      	ldr	r2, [r7, #4]
 801bd4e:	23ac      	movs	r3, #172	@ 0xac
 801bd50:	009b      	lsls	r3, r3, #2
 801bd52:	58d3      	ldr	r3, [r2, r3]
 801bd54:	68db      	ldr	r3, [r3, #12]
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d00d      	beq.n	801bd76 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801bd5a:	687a      	ldr	r2, [r7, #4]
 801bd5c:	23ac      	movs	r3, #172	@ 0xac
 801bd5e:	009b      	lsls	r3, r3, #2
 801bd60:	58d3      	ldr	r3, [r2, r3]
 801bd62:	68db      	ldr	r3, [r3, #12]
 801bd64:	687a      	ldr	r2, [r7, #4]
 801bd66:	7c12      	ldrb	r2, [r2, #16]
 801bd68:	2108      	movs	r1, #8
 801bd6a:	1879      	adds	r1, r7, r1
 801bd6c:	0010      	movs	r0, r2
 801bd6e:	4798      	blx	r3
 801bd70:	0003      	movs	r3, r0
 801bd72:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bd74:	e07f      	b.n	801be76 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801bd76:	683a      	ldr	r2, [r7, #0]
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	0011      	movs	r1, r2
 801bd7c:	0018      	movs	r0, r3
 801bd7e:	f000 fadc 	bl	801c33a <USBD_CtlError>
            err++;
 801bd82:	210b      	movs	r1, #11
 801bd84:	187b      	adds	r3, r7, r1
 801bd86:	781a      	ldrb	r2, [r3, #0]
 801bd88:	187b      	adds	r3, r7, r1
 801bd8a:	3201      	adds	r2, #1
 801bd8c:	701a      	strb	r2, [r3, #0]
          break;
 801bd8e:	e072      	b.n	801be76 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801bd90:	687a      	ldr	r2, [r7, #4]
 801bd92:	23ac      	movs	r3, #172	@ 0xac
 801bd94:	009b      	lsls	r3, r3, #2
 801bd96:	58d3      	ldr	r3, [r2, r3]
 801bd98:	691b      	ldr	r3, [r3, #16]
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d00d      	beq.n	801bdba <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801bd9e:	687a      	ldr	r2, [r7, #4]
 801bda0:	23ac      	movs	r3, #172	@ 0xac
 801bda2:	009b      	lsls	r3, r3, #2
 801bda4:	58d3      	ldr	r3, [r2, r3]
 801bda6:	691b      	ldr	r3, [r3, #16]
 801bda8:	687a      	ldr	r2, [r7, #4]
 801bdaa:	7c12      	ldrb	r2, [r2, #16]
 801bdac:	2108      	movs	r1, #8
 801bdae:	1879      	adds	r1, r7, r1
 801bdb0:	0010      	movs	r0, r2
 801bdb2:	4798      	blx	r3
 801bdb4:	0003      	movs	r3, r0
 801bdb6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bdb8:	e05d      	b.n	801be76 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801bdba:	683a      	ldr	r2, [r7, #0]
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	0011      	movs	r1, r2
 801bdc0:	0018      	movs	r0, r3
 801bdc2:	f000 faba 	bl	801c33a <USBD_CtlError>
            err++;
 801bdc6:	210b      	movs	r1, #11
 801bdc8:	187b      	adds	r3, r7, r1
 801bdca:	781a      	ldrb	r2, [r3, #0]
 801bdcc:	187b      	adds	r3, r7, r1
 801bdce:	3201      	adds	r2, #1
 801bdd0:	701a      	strb	r2, [r3, #0]
          break;
 801bdd2:	e050      	b.n	801be76 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801bdd4:	687a      	ldr	r2, [r7, #4]
 801bdd6:	23ac      	movs	r3, #172	@ 0xac
 801bdd8:	009b      	lsls	r3, r3, #2
 801bdda:	58d3      	ldr	r3, [r2, r3]
 801bddc:	695b      	ldr	r3, [r3, #20]
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d00d      	beq.n	801bdfe <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801bde2:	687a      	ldr	r2, [r7, #4]
 801bde4:	23ac      	movs	r3, #172	@ 0xac
 801bde6:	009b      	lsls	r3, r3, #2
 801bde8:	58d3      	ldr	r3, [r2, r3]
 801bdea:	695b      	ldr	r3, [r3, #20]
 801bdec:	687a      	ldr	r2, [r7, #4]
 801bdee:	7c12      	ldrb	r2, [r2, #16]
 801bdf0:	2108      	movs	r1, #8
 801bdf2:	1879      	adds	r1, r7, r1
 801bdf4:	0010      	movs	r0, r2
 801bdf6:	4798      	blx	r3
 801bdf8:	0003      	movs	r3, r0
 801bdfa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bdfc:	e03b      	b.n	801be76 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801bdfe:	683a      	ldr	r2, [r7, #0]
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	0011      	movs	r1, r2
 801be04:	0018      	movs	r0, r3
 801be06:	f000 fa98 	bl	801c33a <USBD_CtlError>
            err++;
 801be0a:	210b      	movs	r1, #11
 801be0c:	187b      	adds	r3, r7, r1
 801be0e:	781a      	ldrb	r2, [r3, #0]
 801be10:	187b      	adds	r3, r7, r1
 801be12:	3201      	adds	r2, #1
 801be14:	701a      	strb	r2, [r3, #0]
          break;
 801be16:	e02e      	b.n	801be76 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801be18:	687a      	ldr	r2, [r7, #4]
 801be1a:	23ac      	movs	r3, #172	@ 0xac
 801be1c:	009b      	lsls	r3, r3, #2
 801be1e:	58d3      	ldr	r3, [r2, r3]
 801be20:	699b      	ldr	r3, [r3, #24]
 801be22:	2b00      	cmp	r3, #0
 801be24:	d00d      	beq.n	801be42 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801be26:	687a      	ldr	r2, [r7, #4]
 801be28:	23ac      	movs	r3, #172	@ 0xac
 801be2a:	009b      	lsls	r3, r3, #2
 801be2c:	58d3      	ldr	r3, [r2, r3]
 801be2e:	699b      	ldr	r3, [r3, #24]
 801be30:	687a      	ldr	r2, [r7, #4]
 801be32:	7c12      	ldrb	r2, [r2, #16]
 801be34:	2108      	movs	r1, #8
 801be36:	1879      	adds	r1, r7, r1
 801be38:	0010      	movs	r0, r2
 801be3a:	4798      	blx	r3
 801be3c:	0003      	movs	r3, r0
 801be3e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801be40:	e019      	b.n	801be76 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801be42:	683a      	ldr	r2, [r7, #0]
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	0011      	movs	r1, r2
 801be48:	0018      	movs	r0, r3
 801be4a:	f000 fa76 	bl	801c33a <USBD_CtlError>
            err++;
 801be4e:	210b      	movs	r1, #11
 801be50:	187b      	adds	r3, r7, r1
 801be52:	781a      	ldrb	r2, [r3, #0]
 801be54:	187b      	adds	r3, r7, r1
 801be56:	3201      	adds	r2, #1
 801be58:	701a      	strb	r2, [r3, #0]
          break;
 801be5a:	e00c      	b.n	801be76 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801be5c:	683a      	ldr	r2, [r7, #0]
 801be5e:	687b      	ldr	r3, [r7, #4]
 801be60:	0011      	movs	r1, r2
 801be62:	0018      	movs	r0, r3
 801be64:	f000 fa69 	bl	801c33a <USBD_CtlError>
          err++;
 801be68:	210b      	movs	r1, #11
 801be6a:	187b      	adds	r3, r7, r1
 801be6c:	781a      	ldrb	r2, [r3, #0]
 801be6e:	187b      	adds	r3, r7, r1
 801be70:	3201      	adds	r2, #1
 801be72:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801be74:	e04b      	b.n	801bf0e <USBD_GetDescriptor+0x2fa>
 801be76:	e04a      	b.n	801bf0e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	7c1b      	ldrb	r3, [r3, #16]
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	d10b      	bne.n	801be98 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801be80:	687a      	ldr	r2, [r7, #4]
 801be82:	23ad      	movs	r3, #173	@ 0xad
 801be84:	009b      	lsls	r3, r3, #2
 801be86:	58d3      	ldr	r3, [r2, r3]
 801be88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801be8a:	2208      	movs	r2, #8
 801be8c:	18ba      	adds	r2, r7, r2
 801be8e:	0010      	movs	r0, r2
 801be90:	4798      	blx	r3
 801be92:	0003      	movs	r3, r0
 801be94:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801be96:	e03a      	b.n	801bf0e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801be98:	683a      	ldr	r2, [r7, #0]
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	0011      	movs	r1, r2
 801be9e:	0018      	movs	r0, r3
 801bea0:	f000 fa4b 	bl	801c33a <USBD_CtlError>
        err++;
 801bea4:	210b      	movs	r1, #11
 801bea6:	187b      	adds	r3, r7, r1
 801bea8:	781a      	ldrb	r2, [r3, #0]
 801beaa:	187b      	adds	r3, r7, r1
 801beac:	3201      	adds	r2, #1
 801beae:	701a      	strb	r2, [r3, #0]
      break;
 801beb0:	e02d      	b.n	801bf0e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	7c1b      	ldrb	r3, [r3, #16]
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d10f      	bne.n	801beda <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801beba:	687a      	ldr	r2, [r7, #4]
 801bebc:	23ad      	movs	r3, #173	@ 0xad
 801bebe:	009b      	lsls	r3, r3, #2
 801bec0:	58d3      	ldr	r3, [r2, r3]
 801bec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bec4:	2208      	movs	r2, #8
 801bec6:	18ba      	adds	r2, r7, r2
 801bec8:	0010      	movs	r0, r2
 801beca:	4798      	blx	r3
 801becc:	0003      	movs	r3, r0
 801bece:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801bed0:	68fb      	ldr	r3, [r7, #12]
 801bed2:	3301      	adds	r3, #1
 801bed4:	2207      	movs	r2, #7
 801bed6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801bed8:	e019      	b.n	801bf0e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801beda:	683a      	ldr	r2, [r7, #0]
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	0011      	movs	r1, r2
 801bee0:	0018      	movs	r0, r3
 801bee2:	f000 fa2a 	bl	801c33a <USBD_CtlError>
        err++;
 801bee6:	210b      	movs	r1, #11
 801bee8:	187b      	adds	r3, r7, r1
 801beea:	781a      	ldrb	r2, [r3, #0]
 801beec:	187b      	adds	r3, r7, r1
 801beee:	3201      	adds	r2, #1
 801bef0:	701a      	strb	r2, [r3, #0]
      break;
 801bef2:	e00c      	b.n	801bf0e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801bef4:	683a      	ldr	r2, [r7, #0]
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	0011      	movs	r1, r2
 801befa:	0018      	movs	r0, r3
 801befc:	f000 fa1d 	bl	801c33a <USBD_CtlError>
      err++;
 801bf00:	210b      	movs	r1, #11
 801bf02:	187b      	adds	r3, r7, r1
 801bf04:	781a      	ldrb	r2, [r3, #0]
 801bf06:	187b      	adds	r3, r7, r1
 801bf08:	3201      	adds	r2, #1
 801bf0a:	701a      	strb	r2, [r3, #0]
      break;
 801bf0c:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801bf0e:	230b      	movs	r3, #11
 801bf10:	18fb      	adds	r3, r7, r3
 801bf12:	781b      	ldrb	r3, [r3, #0]
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	d127      	bne.n	801bf68 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801bf18:	2108      	movs	r1, #8
 801bf1a:	187b      	adds	r3, r7, r1
 801bf1c:	881b      	ldrh	r3, [r3, #0]
 801bf1e:	2b00      	cmp	r3, #0
 801bf20:	d019      	beq.n	801bf56 <USBD_GetDescriptor+0x342>
 801bf22:	683b      	ldr	r3, [r7, #0]
 801bf24:	88db      	ldrh	r3, [r3, #6]
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d015      	beq.n	801bf56 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801bf2a:	683b      	ldr	r3, [r7, #0]
 801bf2c:	88da      	ldrh	r2, [r3, #6]
 801bf2e:	187b      	adds	r3, r7, r1
 801bf30:	881b      	ldrh	r3, [r3, #0]
 801bf32:	1c18      	adds	r0, r3, #0
 801bf34:	1c11      	adds	r1, r2, #0
 801bf36:	b28a      	uxth	r2, r1
 801bf38:	b283      	uxth	r3, r0
 801bf3a:	429a      	cmp	r2, r3
 801bf3c:	d900      	bls.n	801bf40 <USBD_GetDescriptor+0x32c>
 801bf3e:	1c01      	adds	r1, r0, #0
 801bf40:	b28a      	uxth	r2, r1
 801bf42:	2108      	movs	r1, #8
 801bf44:	187b      	adds	r3, r7, r1
 801bf46:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801bf48:	187b      	adds	r3, r7, r1
 801bf4a:	881a      	ldrh	r2, [r3, #0]
 801bf4c:	68f9      	ldr	r1, [r7, #12]
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	0018      	movs	r0, r3
 801bf52:	f000 fa70 	bl	801c436 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801bf56:	683b      	ldr	r3, [r7, #0]
 801bf58:	88db      	ldrh	r3, [r3, #6]
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	d105      	bne.n	801bf6a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	0018      	movs	r0, r3
 801bf62:	f000 fad2 	bl	801c50a <USBD_CtlSendStatus>
 801bf66:	e000      	b.n	801bf6a <USBD_GetDescriptor+0x356>
    return;
 801bf68:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801bf6a:	46bd      	mov	sp, r7
 801bf6c:	b004      	add	sp, #16
 801bf6e:	bd80      	pop	{r7, pc}
 801bf70:	08024da4 	.word	0x08024da4
 801bf74:	08024dc4 	.word	0x08024dc4

0801bf78 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801bf78:	b590      	push	{r4, r7, lr}
 801bf7a:	b085      	sub	sp, #20
 801bf7c:	af00      	add	r7, sp, #0
 801bf7e:	6078      	str	r0, [r7, #4]
 801bf80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801bf82:	683b      	ldr	r3, [r7, #0]
 801bf84:	889b      	ldrh	r3, [r3, #4]
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	d13d      	bne.n	801c006 <USBD_SetAddress+0x8e>
 801bf8a:	683b      	ldr	r3, [r7, #0]
 801bf8c:	88db      	ldrh	r3, [r3, #6]
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	d139      	bne.n	801c006 <USBD_SetAddress+0x8e>
 801bf92:	683b      	ldr	r3, [r7, #0]
 801bf94:	885b      	ldrh	r3, [r3, #2]
 801bf96:	2b7f      	cmp	r3, #127	@ 0x7f
 801bf98:	d835      	bhi.n	801c006 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801bf9a:	683b      	ldr	r3, [r7, #0]
 801bf9c:	885b      	ldrh	r3, [r3, #2]
 801bf9e:	b2da      	uxtb	r2, r3
 801bfa0:	230f      	movs	r3, #15
 801bfa2:	18fb      	adds	r3, r7, r3
 801bfa4:	217f      	movs	r1, #127	@ 0x7f
 801bfa6:	400a      	ands	r2, r1
 801bfa8:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bfaa:	687a      	ldr	r2, [r7, #4]
 801bfac:	23a7      	movs	r3, #167	@ 0xa7
 801bfae:	009b      	lsls	r3, r3, #2
 801bfb0:	5cd3      	ldrb	r3, [r2, r3]
 801bfb2:	2b03      	cmp	r3, #3
 801bfb4:	d106      	bne.n	801bfc4 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801bfb6:	683a      	ldr	r2, [r7, #0]
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	0011      	movs	r1, r2
 801bfbc:	0018      	movs	r0, r3
 801bfbe:	f000 f9bc 	bl	801c33a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bfc2:	e027      	b.n	801c014 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	240f      	movs	r4, #15
 801bfc8:	193a      	adds	r2, r7, r4
 801bfca:	4914      	ldr	r1, [pc, #80]	@ (801c01c <USBD_SetAddress+0xa4>)
 801bfcc:	7812      	ldrb	r2, [r2, #0]
 801bfce:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801bfd0:	193b      	adds	r3, r7, r4
 801bfd2:	781a      	ldrb	r2, [r3, #0]
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	0011      	movs	r1, r2
 801bfd8:	0018      	movs	r0, r3
 801bfda:	f000 ff5d 	bl	801ce98 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	0018      	movs	r0, r3
 801bfe2:	f000 fa92 	bl	801c50a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801bfe6:	193b      	adds	r3, r7, r4
 801bfe8:	781b      	ldrb	r3, [r3, #0]
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	d005      	beq.n	801bffa <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801bfee:	687a      	ldr	r2, [r7, #4]
 801bff0:	23a7      	movs	r3, #167	@ 0xa7
 801bff2:	009b      	lsls	r3, r3, #2
 801bff4:	2102      	movs	r1, #2
 801bff6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bff8:	e00c      	b.n	801c014 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801bffa:	687a      	ldr	r2, [r7, #4]
 801bffc:	23a7      	movs	r3, #167	@ 0xa7
 801bffe:	009b      	lsls	r3, r3, #2
 801c000:	2101      	movs	r1, #1
 801c002:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c004:	e006      	b.n	801c014 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801c006:	683a      	ldr	r2, [r7, #0]
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	0011      	movs	r1, r2
 801c00c:	0018      	movs	r0, r3
 801c00e:	f000 f994 	bl	801c33a <USBD_CtlError>
  }
}
 801c012:	46c0      	nop			@ (mov r8, r8)
 801c014:	46c0      	nop			@ (mov r8, r8)
 801c016:	46bd      	mov	sp, r7
 801c018:	b005      	add	sp, #20
 801c01a:	bd90      	pop	{r4, r7, pc}
 801c01c:	0000029e 	.word	0x0000029e

0801c020 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c020:	b580      	push	{r7, lr}
 801c022:	b082      	sub	sp, #8
 801c024:	af00      	add	r7, sp, #0
 801c026:	6078      	str	r0, [r7, #4]
 801c028:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801c02a:	683b      	ldr	r3, [r7, #0]
 801c02c:	885b      	ldrh	r3, [r3, #2]
 801c02e:	b2da      	uxtb	r2, r3
 801c030:	4b4c      	ldr	r3, [pc, #304]	@ (801c164 <USBD_SetConfig+0x144>)
 801c032:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801c034:	4b4b      	ldr	r3, [pc, #300]	@ (801c164 <USBD_SetConfig+0x144>)
 801c036:	781b      	ldrb	r3, [r3, #0]
 801c038:	2b01      	cmp	r3, #1
 801c03a:	d906      	bls.n	801c04a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801c03c:	683a      	ldr	r2, [r7, #0]
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	0011      	movs	r1, r2
 801c042:	0018      	movs	r0, r3
 801c044:	f000 f979 	bl	801c33a <USBD_CtlError>
 801c048:	e088      	b.n	801c15c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801c04a:	687a      	ldr	r2, [r7, #4]
 801c04c:	23a7      	movs	r3, #167	@ 0xa7
 801c04e:	009b      	lsls	r3, r3, #2
 801c050:	5cd3      	ldrb	r3, [r2, r3]
 801c052:	2b02      	cmp	r3, #2
 801c054:	d002      	beq.n	801c05c <USBD_SetConfig+0x3c>
 801c056:	2b03      	cmp	r3, #3
 801c058:	d029      	beq.n	801c0ae <USBD_SetConfig+0x8e>
 801c05a:	e071      	b.n	801c140 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801c05c:	4b41      	ldr	r3, [pc, #260]	@ (801c164 <USBD_SetConfig+0x144>)
 801c05e:	781b      	ldrb	r3, [r3, #0]
 801c060:	2b00      	cmp	r3, #0
 801c062:	d01f      	beq.n	801c0a4 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801c064:	4b3f      	ldr	r3, [pc, #252]	@ (801c164 <USBD_SetConfig+0x144>)
 801c066:	781b      	ldrb	r3, [r3, #0]
 801c068:	001a      	movs	r2, r3
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801c06e:	687a      	ldr	r2, [r7, #4]
 801c070:	23a7      	movs	r3, #167	@ 0xa7
 801c072:	009b      	lsls	r3, r3, #2
 801c074:	2103      	movs	r1, #3
 801c076:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c078:	4b3a      	ldr	r3, [pc, #232]	@ (801c164 <USBD_SetConfig+0x144>)
 801c07a:	781a      	ldrb	r2, [r3, #0]
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	0011      	movs	r1, r2
 801c080:	0018      	movs	r0, r3
 801c082:	f7ff f8c6 	bl	801b212 <USBD_SetClassConfig>
 801c086:	0003      	movs	r3, r0
 801c088:	2b02      	cmp	r3, #2
 801c08a:	d106      	bne.n	801c09a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801c08c:	683a      	ldr	r2, [r7, #0]
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	0011      	movs	r1, r2
 801c092:	0018      	movs	r0, r3
 801c094:	f000 f951 	bl	801c33a <USBD_CtlError>
            return;
 801c098:	e060      	b.n	801c15c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	0018      	movs	r0, r3
 801c09e:	f000 fa34 	bl	801c50a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c0a2:	e05b      	b.n	801c15c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	0018      	movs	r0, r3
 801c0a8:	f000 fa2f 	bl	801c50a <USBD_CtlSendStatus>
        break;
 801c0ac:	e056      	b.n	801c15c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801c0ae:	4b2d      	ldr	r3, [pc, #180]	@ (801c164 <USBD_SetConfig+0x144>)
 801c0b0:	781b      	ldrb	r3, [r3, #0]
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	d115      	bne.n	801c0e2 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801c0b6:	687a      	ldr	r2, [r7, #4]
 801c0b8:	23a7      	movs	r3, #167	@ 0xa7
 801c0ba:	009b      	lsls	r3, r3, #2
 801c0bc:	2102      	movs	r1, #2
 801c0be:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801c0c0:	4b28      	ldr	r3, [pc, #160]	@ (801c164 <USBD_SetConfig+0x144>)
 801c0c2:	781b      	ldrb	r3, [r3, #0]
 801c0c4:	001a      	movs	r2, r3
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801c0ca:	4b26      	ldr	r3, [pc, #152]	@ (801c164 <USBD_SetConfig+0x144>)
 801c0cc:	781a      	ldrb	r2, [r3, #0]
 801c0ce:	687b      	ldr	r3, [r7, #4]
 801c0d0:	0011      	movs	r1, r2
 801c0d2:	0018      	movs	r0, r3
 801c0d4:	f7ff f8c4 	bl	801b260 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801c0d8:	687b      	ldr	r3, [r7, #4]
 801c0da:	0018      	movs	r0, r3
 801c0dc:	f000 fa15 	bl	801c50a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c0e0:	e03c      	b.n	801c15c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801c0e2:	4b20      	ldr	r3, [pc, #128]	@ (801c164 <USBD_SetConfig+0x144>)
 801c0e4:	781b      	ldrb	r3, [r3, #0]
 801c0e6:	001a      	movs	r2, r3
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	685b      	ldr	r3, [r3, #4]
 801c0ec:	429a      	cmp	r2, r3
 801c0ee:	d022      	beq.n	801c136 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	685b      	ldr	r3, [r3, #4]
 801c0f4:	b2da      	uxtb	r2, r3
 801c0f6:	687b      	ldr	r3, [r7, #4]
 801c0f8:	0011      	movs	r1, r2
 801c0fa:	0018      	movs	r0, r3
 801c0fc:	f7ff f8b0 	bl	801b260 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801c100:	4b18      	ldr	r3, [pc, #96]	@ (801c164 <USBD_SetConfig+0x144>)
 801c102:	781b      	ldrb	r3, [r3, #0]
 801c104:	001a      	movs	r2, r3
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c10a:	4b16      	ldr	r3, [pc, #88]	@ (801c164 <USBD_SetConfig+0x144>)
 801c10c:	781a      	ldrb	r2, [r3, #0]
 801c10e:	687b      	ldr	r3, [r7, #4]
 801c110:	0011      	movs	r1, r2
 801c112:	0018      	movs	r0, r3
 801c114:	f7ff f87d 	bl	801b212 <USBD_SetClassConfig>
 801c118:	0003      	movs	r3, r0
 801c11a:	2b02      	cmp	r3, #2
 801c11c:	d106      	bne.n	801c12c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801c11e:	683a      	ldr	r2, [r7, #0]
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	0011      	movs	r1, r2
 801c124:	0018      	movs	r0, r3
 801c126:	f000 f908 	bl	801c33a <USBD_CtlError>
            return;
 801c12a:	e017      	b.n	801c15c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	0018      	movs	r0, r3
 801c130:	f000 f9eb 	bl	801c50a <USBD_CtlSendStatus>
        break;
 801c134:	e012      	b.n	801c15c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	0018      	movs	r0, r3
 801c13a:	f000 f9e6 	bl	801c50a <USBD_CtlSendStatus>
        break;
 801c13e:	e00d      	b.n	801c15c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801c140:	683a      	ldr	r2, [r7, #0]
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	0011      	movs	r1, r2
 801c146:	0018      	movs	r0, r3
 801c148:	f000 f8f7 	bl	801c33a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801c14c:	4b05      	ldr	r3, [pc, #20]	@ (801c164 <USBD_SetConfig+0x144>)
 801c14e:	781a      	ldrb	r2, [r3, #0]
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	0011      	movs	r1, r2
 801c154:	0018      	movs	r0, r3
 801c156:	f7ff f883 	bl	801b260 <USBD_ClrClassConfig>
        break;
 801c15a:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801c15c:	46bd      	mov	sp, r7
 801c15e:	b002      	add	sp, #8
 801c160:	bd80      	pop	{r7, pc}
 801c162:	46c0      	nop			@ (mov r8, r8)
 801c164:	200025bc 	.word	0x200025bc

0801c168 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c168:	b580      	push	{r7, lr}
 801c16a:	b082      	sub	sp, #8
 801c16c:	af00      	add	r7, sp, #0
 801c16e:	6078      	str	r0, [r7, #4]
 801c170:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801c172:	683b      	ldr	r3, [r7, #0]
 801c174:	88db      	ldrh	r3, [r3, #6]
 801c176:	2b01      	cmp	r3, #1
 801c178:	d006      	beq.n	801c188 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801c17a:	683a      	ldr	r2, [r7, #0]
 801c17c:	687b      	ldr	r3, [r7, #4]
 801c17e:	0011      	movs	r1, r2
 801c180:	0018      	movs	r0, r3
 801c182:	f000 f8da 	bl	801c33a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801c186:	e026      	b.n	801c1d6 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801c188:	687a      	ldr	r2, [r7, #4]
 801c18a:	23a7      	movs	r3, #167	@ 0xa7
 801c18c:	009b      	lsls	r3, r3, #2
 801c18e:	5cd3      	ldrb	r3, [r2, r3]
 801c190:	2b02      	cmp	r3, #2
 801c192:	dc02      	bgt.n	801c19a <USBD_GetConfig+0x32>
 801c194:	2b00      	cmp	r3, #0
 801c196:	dc03      	bgt.n	801c1a0 <USBD_GetConfig+0x38>
 801c198:	e016      	b.n	801c1c8 <USBD_GetConfig+0x60>
 801c19a:	2b03      	cmp	r3, #3
 801c19c:	d00c      	beq.n	801c1b8 <USBD_GetConfig+0x50>
 801c19e:	e013      	b.n	801c1c8 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	2200      	movs	r2, #0
 801c1a4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	3308      	adds	r3, #8
 801c1aa:	0019      	movs	r1, r3
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	2201      	movs	r2, #1
 801c1b0:	0018      	movs	r0, r3
 801c1b2:	f000 f940 	bl	801c436 <USBD_CtlSendData>
        break;
 801c1b6:	e00e      	b.n	801c1d6 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	1d19      	adds	r1, r3, #4
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	2201      	movs	r2, #1
 801c1c0:	0018      	movs	r0, r3
 801c1c2:	f000 f938 	bl	801c436 <USBD_CtlSendData>
        break;
 801c1c6:	e006      	b.n	801c1d6 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801c1c8:	683a      	ldr	r2, [r7, #0]
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	0011      	movs	r1, r2
 801c1ce:	0018      	movs	r0, r3
 801c1d0:	f000 f8b3 	bl	801c33a <USBD_CtlError>
        break;
 801c1d4:	46c0      	nop			@ (mov r8, r8)
}
 801c1d6:	46c0      	nop			@ (mov r8, r8)
 801c1d8:	46bd      	mov	sp, r7
 801c1da:	b002      	add	sp, #8
 801c1dc:	bd80      	pop	{r7, pc}

0801c1de <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c1de:	b580      	push	{r7, lr}
 801c1e0:	b082      	sub	sp, #8
 801c1e2:	af00      	add	r7, sp, #0
 801c1e4:	6078      	str	r0, [r7, #4]
 801c1e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c1e8:	687a      	ldr	r2, [r7, #4]
 801c1ea:	23a7      	movs	r3, #167	@ 0xa7
 801c1ec:	009b      	lsls	r3, r3, #2
 801c1ee:	5cd3      	ldrb	r3, [r2, r3]
 801c1f0:	3b01      	subs	r3, #1
 801c1f2:	2b02      	cmp	r3, #2
 801c1f4:	d822      	bhi.n	801c23c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801c1f6:	683b      	ldr	r3, [r7, #0]
 801c1f8:	88db      	ldrh	r3, [r3, #6]
 801c1fa:	2b02      	cmp	r3, #2
 801c1fc:	d006      	beq.n	801c20c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801c1fe:	683a      	ldr	r2, [r7, #0]
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	0011      	movs	r1, r2
 801c204:	0018      	movs	r0, r3
 801c206:	f000 f898 	bl	801c33a <USBD_CtlError>
        break;
 801c20a:	e01e      	b.n	801c24a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	2201      	movs	r2, #1
 801c210:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801c212:	687a      	ldr	r2, [r7, #4]
 801c214:	23a9      	movs	r3, #169	@ 0xa9
 801c216:	009b      	lsls	r3, r3, #2
 801c218:	58d3      	ldr	r3, [r2, r3]
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d005      	beq.n	801c22a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	68db      	ldr	r3, [r3, #12]
 801c222:	2202      	movs	r2, #2
 801c224:	431a      	orrs	r2, r3
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801c22a:	687b      	ldr	r3, [r7, #4]
 801c22c:	330c      	adds	r3, #12
 801c22e:	0019      	movs	r1, r3
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	2202      	movs	r2, #2
 801c234:	0018      	movs	r0, r3
 801c236:	f000 f8fe 	bl	801c436 <USBD_CtlSendData>
      break;
 801c23a:	e006      	b.n	801c24a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801c23c:	683a      	ldr	r2, [r7, #0]
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	0011      	movs	r1, r2
 801c242:	0018      	movs	r0, r3
 801c244:	f000 f879 	bl	801c33a <USBD_CtlError>
      break;
 801c248:	46c0      	nop			@ (mov r8, r8)
  }
}
 801c24a:	46c0      	nop			@ (mov r8, r8)
 801c24c:	46bd      	mov	sp, r7
 801c24e:	b002      	add	sp, #8
 801c250:	bd80      	pop	{r7, pc}

0801c252 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c252:	b580      	push	{r7, lr}
 801c254:	b082      	sub	sp, #8
 801c256:	af00      	add	r7, sp, #0
 801c258:	6078      	str	r0, [r7, #4]
 801c25a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801c25c:	683b      	ldr	r3, [r7, #0]
 801c25e:	885b      	ldrh	r3, [r3, #2]
 801c260:	2b01      	cmp	r3, #1
 801c262:	d108      	bne.n	801c276 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801c264:	687a      	ldr	r2, [r7, #4]
 801c266:	23a9      	movs	r3, #169	@ 0xa9
 801c268:	009b      	lsls	r3, r3, #2
 801c26a:	2101      	movs	r1, #1
 801c26c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	0018      	movs	r0, r3
 801c272:	f000 f94a 	bl	801c50a <USBD_CtlSendStatus>
  }
}
 801c276:	46c0      	nop			@ (mov r8, r8)
 801c278:	46bd      	mov	sp, r7
 801c27a:	b002      	add	sp, #8
 801c27c:	bd80      	pop	{r7, pc}

0801c27e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c27e:	b580      	push	{r7, lr}
 801c280:	b082      	sub	sp, #8
 801c282:	af00      	add	r7, sp, #0
 801c284:	6078      	str	r0, [r7, #4]
 801c286:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c288:	687a      	ldr	r2, [r7, #4]
 801c28a:	23a7      	movs	r3, #167	@ 0xa7
 801c28c:	009b      	lsls	r3, r3, #2
 801c28e:	5cd3      	ldrb	r3, [r2, r3]
 801c290:	3b01      	subs	r3, #1
 801c292:	2b02      	cmp	r3, #2
 801c294:	d80d      	bhi.n	801c2b2 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801c296:	683b      	ldr	r3, [r7, #0]
 801c298:	885b      	ldrh	r3, [r3, #2]
 801c29a:	2b01      	cmp	r3, #1
 801c29c:	d110      	bne.n	801c2c0 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801c29e:	687a      	ldr	r2, [r7, #4]
 801c2a0:	23a9      	movs	r3, #169	@ 0xa9
 801c2a2:	009b      	lsls	r3, r3, #2
 801c2a4:	2100      	movs	r1, #0
 801c2a6:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801c2a8:	687b      	ldr	r3, [r7, #4]
 801c2aa:	0018      	movs	r0, r3
 801c2ac:	f000 f92d 	bl	801c50a <USBD_CtlSendStatus>
      }
      break;
 801c2b0:	e006      	b.n	801c2c0 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801c2b2:	683a      	ldr	r2, [r7, #0]
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	0011      	movs	r1, r2
 801c2b8:	0018      	movs	r0, r3
 801c2ba:	f000 f83e 	bl	801c33a <USBD_CtlError>
      break;
 801c2be:	e000      	b.n	801c2c2 <USBD_ClrFeature+0x44>
      break;
 801c2c0:	46c0      	nop			@ (mov r8, r8)
  }
}
 801c2c2:	46c0      	nop			@ (mov r8, r8)
 801c2c4:	46bd      	mov	sp, r7
 801c2c6:	b002      	add	sp, #8
 801c2c8:	bd80      	pop	{r7, pc}

0801c2ca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801c2ca:	b580      	push	{r7, lr}
 801c2cc:	b082      	sub	sp, #8
 801c2ce:	af00      	add	r7, sp, #0
 801c2d0:	6078      	str	r0, [r7, #4]
 801c2d2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801c2d4:	683b      	ldr	r3, [r7, #0]
 801c2d6:	781a      	ldrb	r2, [r3, #0]
 801c2d8:	687b      	ldr	r3, [r7, #4]
 801c2da:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801c2dc:	683b      	ldr	r3, [r7, #0]
 801c2de:	785a      	ldrb	r2, [r3, #1]
 801c2e0:	687b      	ldr	r3, [r7, #4]
 801c2e2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801c2e4:	683b      	ldr	r3, [r7, #0]
 801c2e6:	3302      	adds	r3, #2
 801c2e8:	781b      	ldrb	r3, [r3, #0]
 801c2ea:	001a      	movs	r2, r3
 801c2ec:	683b      	ldr	r3, [r7, #0]
 801c2ee:	3303      	adds	r3, #3
 801c2f0:	781b      	ldrb	r3, [r3, #0]
 801c2f2:	021b      	lsls	r3, r3, #8
 801c2f4:	b29b      	uxth	r3, r3
 801c2f6:	18d3      	adds	r3, r2, r3
 801c2f8:	b29a      	uxth	r2, r3
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801c2fe:	683b      	ldr	r3, [r7, #0]
 801c300:	3304      	adds	r3, #4
 801c302:	781b      	ldrb	r3, [r3, #0]
 801c304:	001a      	movs	r2, r3
 801c306:	683b      	ldr	r3, [r7, #0]
 801c308:	3305      	adds	r3, #5
 801c30a:	781b      	ldrb	r3, [r3, #0]
 801c30c:	021b      	lsls	r3, r3, #8
 801c30e:	b29b      	uxth	r3, r3
 801c310:	18d3      	adds	r3, r2, r3
 801c312:	b29a      	uxth	r2, r3
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801c318:	683b      	ldr	r3, [r7, #0]
 801c31a:	3306      	adds	r3, #6
 801c31c:	781b      	ldrb	r3, [r3, #0]
 801c31e:	001a      	movs	r2, r3
 801c320:	683b      	ldr	r3, [r7, #0]
 801c322:	3307      	adds	r3, #7
 801c324:	781b      	ldrb	r3, [r3, #0]
 801c326:	021b      	lsls	r3, r3, #8
 801c328:	b29b      	uxth	r3, r3
 801c32a:	18d3      	adds	r3, r2, r3
 801c32c:	b29a      	uxth	r2, r3
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	80da      	strh	r2, [r3, #6]

}
 801c332:	46c0      	nop			@ (mov r8, r8)
 801c334:	46bd      	mov	sp, r7
 801c336:	b002      	add	sp, #8
 801c338:	bd80      	pop	{r7, pc}

0801c33a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801c33a:	b580      	push	{r7, lr}
 801c33c:	b082      	sub	sp, #8
 801c33e:	af00      	add	r7, sp, #0
 801c340:	6078      	str	r0, [r7, #4]
 801c342:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	2180      	movs	r1, #128	@ 0x80
 801c348:	0018      	movs	r0, r3
 801c34a:	f000 fd1e 	bl	801cd8a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	2100      	movs	r1, #0
 801c352:	0018      	movs	r0, r3
 801c354:	f000 fd19 	bl	801cd8a <USBD_LL_StallEP>
}
 801c358:	46c0      	nop			@ (mov r8, r8)
 801c35a:	46bd      	mov	sp, r7
 801c35c:	b002      	add	sp, #8
 801c35e:	bd80      	pop	{r7, pc}

0801c360 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801c360:	b590      	push	{r4, r7, lr}
 801c362:	b087      	sub	sp, #28
 801c364:	af00      	add	r7, sp, #0
 801c366:	60f8      	str	r0, [r7, #12]
 801c368:	60b9      	str	r1, [r7, #8]
 801c36a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801c36c:	2417      	movs	r4, #23
 801c36e:	193b      	adds	r3, r7, r4
 801c370:	2200      	movs	r2, #0
 801c372:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801c374:	68fb      	ldr	r3, [r7, #12]
 801c376:	2b00      	cmp	r3, #0
 801c378:	d03c      	beq.n	801c3f4 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801c37a:	68fb      	ldr	r3, [r7, #12]
 801c37c:	0018      	movs	r0, r3
 801c37e:	f000 f83d 	bl	801c3fc <USBD_GetLen>
 801c382:	0003      	movs	r3, r0
 801c384:	3301      	adds	r3, #1
 801c386:	b29b      	uxth	r3, r3
 801c388:	18db      	adds	r3, r3, r3
 801c38a:	b29a      	uxth	r2, r3
 801c38c:	687b      	ldr	r3, [r7, #4]
 801c38e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801c390:	193b      	adds	r3, r7, r4
 801c392:	781b      	ldrb	r3, [r3, #0]
 801c394:	193a      	adds	r2, r7, r4
 801c396:	1c59      	adds	r1, r3, #1
 801c398:	7011      	strb	r1, [r2, #0]
 801c39a:	001a      	movs	r2, r3
 801c39c:	68bb      	ldr	r3, [r7, #8]
 801c39e:	189b      	adds	r3, r3, r2
 801c3a0:	687a      	ldr	r2, [r7, #4]
 801c3a2:	7812      	ldrb	r2, [r2, #0]
 801c3a4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801c3a6:	193b      	adds	r3, r7, r4
 801c3a8:	781b      	ldrb	r3, [r3, #0]
 801c3aa:	193a      	adds	r2, r7, r4
 801c3ac:	1c59      	adds	r1, r3, #1
 801c3ae:	7011      	strb	r1, [r2, #0]
 801c3b0:	001a      	movs	r2, r3
 801c3b2:	68bb      	ldr	r3, [r7, #8]
 801c3b4:	189b      	adds	r3, r3, r2
 801c3b6:	2203      	movs	r2, #3
 801c3b8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801c3ba:	e017      	b.n	801c3ec <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801c3bc:	68fb      	ldr	r3, [r7, #12]
 801c3be:	1c5a      	adds	r2, r3, #1
 801c3c0:	60fa      	str	r2, [r7, #12]
 801c3c2:	2417      	movs	r4, #23
 801c3c4:	193a      	adds	r2, r7, r4
 801c3c6:	7812      	ldrb	r2, [r2, #0]
 801c3c8:	1939      	adds	r1, r7, r4
 801c3ca:	1c50      	adds	r0, r2, #1
 801c3cc:	7008      	strb	r0, [r1, #0]
 801c3ce:	0011      	movs	r1, r2
 801c3d0:	68ba      	ldr	r2, [r7, #8]
 801c3d2:	1852      	adds	r2, r2, r1
 801c3d4:	781b      	ldrb	r3, [r3, #0]
 801c3d6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801c3d8:	193b      	adds	r3, r7, r4
 801c3da:	781b      	ldrb	r3, [r3, #0]
 801c3dc:	193a      	adds	r2, r7, r4
 801c3de:	1c59      	adds	r1, r3, #1
 801c3e0:	7011      	strb	r1, [r2, #0]
 801c3e2:	001a      	movs	r2, r3
 801c3e4:	68bb      	ldr	r3, [r7, #8]
 801c3e6:	189b      	adds	r3, r3, r2
 801c3e8:	2200      	movs	r2, #0
 801c3ea:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801c3ec:	68fb      	ldr	r3, [r7, #12]
 801c3ee:	781b      	ldrb	r3, [r3, #0]
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	d1e3      	bne.n	801c3bc <USBD_GetString+0x5c>
    }
  }
}
 801c3f4:	46c0      	nop			@ (mov r8, r8)
 801c3f6:	46bd      	mov	sp, r7
 801c3f8:	b007      	add	sp, #28
 801c3fa:	bd90      	pop	{r4, r7, pc}

0801c3fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801c3fc:	b580      	push	{r7, lr}
 801c3fe:	b084      	sub	sp, #16
 801c400:	af00      	add	r7, sp, #0
 801c402:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801c404:	230f      	movs	r3, #15
 801c406:	18fb      	adds	r3, r7, r3
 801c408:	2200      	movs	r2, #0
 801c40a:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801c40c:	e008      	b.n	801c420 <USBD_GetLen+0x24>
  {
    len++;
 801c40e:	210f      	movs	r1, #15
 801c410:	187b      	adds	r3, r7, r1
 801c412:	781a      	ldrb	r2, [r3, #0]
 801c414:	187b      	adds	r3, r7, r1
 801c416:	3201      	adds	r2, #1
 801c418:	701a      	strb	r2, [r3, #0]
    buf++;
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	3301      	adds	r3, #1
 801c41e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801c420:	687b      	ldr	r3, [r7, #4]
 801c422:	781b      	ldrb	r3, [r3, #0]
 801c424:	2b00      	cmp	r3, #0
 801c426:	d1f2      	bne.n	801c40e <USBD_GetLen+0x12>
  }

  return len;
 801c428:	230f      	movs	r3, #15
 801c42a:	18fb      	adds	r3, r7, r3
 801c42c:	781b      	ldrb	r3, [r3, #0]
}
 801c42e:	0018      	movs	r0, r3
 801c430:	46bd      	mov	sp, r7
 801c432:	b004      	add	sp, #16
 801c434:	bd80      	pop	{r7, pc}

0801c436 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801c436:	b580      	push	{r7, lr}
 801c438:	b084      	sub	sp, #16
 801c43a:	af00      	add	r7, sp, #0
 801c43c:	60f8      	str	r0, [r7, #12]
 801c43e:	60b9      	str	r1, [r7, #8]
 801c440:	1dbb      	adds	r3, r7, #6
 801c442:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801c444:	68fa      	ldr	r2, [r7, #12]
 801c446:	23a5      	movs	r3, #165	@ 0xa5
 801c448:	009b      	lsls	r3, r3, #2
 801c44a:	2102      	movs	r1, #2
 801c44c:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801c44e:	1dbb      	adds	r3, r7, #6
 801c450:	881a      	ldrh	r2, [r3, #0]
 801c452:	68fb      	ldr	r3, [r7, #12]
 801c454:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801c456:	1dbb      	adds	r3, r7, #6
 801c458:	881a      	ldrh	r2, [r3, #0]
 801c45a:	68fb      	ldr	r3, [r7, #12]
 801c45c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c45e:	1dbb      	adds	r3, r7, #6
 801c460:	881b      	ldrh	r3, [r3, #0]
 801c462:	68ba      	ldr	r2, [r7, #8]
 801c464:	68f8      	ldr	r0, [r7, #12]
 801c466:	2100      	movs	r1, #0
 801c468:	f000 fd41 	bl	801ceee <USBD_LL_Transmit>

  return USBD_OK;
 801c46c:	2300      	movs	r3, #0
}
 801c46e:	0018      	movs	r0, r3
 801c470:	46bd      	mov	sp, r7
 801c472:	b004      	add	sp, #16
 801c474:	bd80      	pop	{r7, pc}

0801c476 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801c476:	b580      	push	{r7, lr}
 801c478:	b084      	sub	sp, #16
 801c47a:	af00      	add	r7, sp, #0
 801c47c:	60f8      	str	r0, [r7, #12]
 801c47e:	60b9      	str	r1, [r7, #8]
 801c480:	1dbb      	adds	r3, r7, #6
 801c482:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c484:	1dbb      	adds	r3, r7, #6
 801c486:	881b      	ldrh	r3, [r3, #0]
 801c488:	68ba      	ldr	r2, [r7, #8]
 801c48a:	68f8      	ldr	r0, [r7, #12]
 801c48c:	2100      	movs	r1, #0
 801c48e:	f000 fd2e 	bl	801ceee <USBD_LL_Transmit>

  return USBD_OK;
 801c492:	2300      	movs	r3, #0
}
 801c494:	0018      	movs	r0, r3
 801c496:	46bd      	mov	sp, r7
 801c498:	b004      	add	sp, #16
 801c49a:	bd80      	pop	{r7, pc}

0801c49c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801c49c:	b580      	push	{r7, lr}
 801c49e:	b084      	sub	sp, #16
 801c4a0:	af00      	add	r7, sp, #0
 801c4a2:	60f8      	str	r0, [r7, #12]
 801c4a4:	60b9      	str	r1, [r7, #8]
 801c4a6:	1dbb      	adds	r3, r7, #6
 801c4a8:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801c4aa:	68fa      	ldr	r2, [r7, #12]
 801c4ac:	23a5      	movs	r3, #165	@ 0xa5
 801c4ae:	009b      	lsls	r3, r3, #2
 801c4b0:	2103      	movs	r1, #3
 801c4b2:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801c4b4:	1dbb      	adds	r3, r7, #6
 801c4b6:	8819      	ldrh	r1, [r3, #0]
 801c4b8:	68fa      	ldr	r2, [r7, #12]
 801c4ba:	23ae      	movs	r3, #174	@ 0xae
 801c4bc:	005b      	lsls	r3, r3, #1
 801c4be:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801c4c0:	1dbb      	adds	r3, r7, #6
 801c4c2:	8819      	ldrh	r1, [r3, #0]
 801c4c4:	68fa      	ldr	r2, [r7, #12]
 801c4c6:	23b0      	movs	r3, #176	@ 0xb0
 801c4c8:	005b      	lsls	r3, r3, #1
 801c4ca:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801c4cc:	1dbb      	adds	r3, r7, #6
 801c4ce:	881b      	ldrh	r3, [r3, #0]
 801c4d0:	68ba      	ldr	r2, [r7, #8]
 801c4d2:	68f8      	ldr	r0, [r7, #12]
 801c4d4:	2100      	movs	r1, #0
 801c4d6:	f000 fd41 	bl	801cf5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c4da:	2300      	movs	r3, #0
}
 801c4dc:	0018      	movs	r0, r3
 801c4de:	46bd      	mov	sp, r7
 801c4e0:	b004      	add	sp, #16
 801c4e2:	bd80      	pop	{r7, pc}

0801c4e4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801c4e4:	b580      	push	{r7, lr}
 801c4e6:	b084      	sub	sp, #16
 801c4e8:	af00      	add	r7, sp, #0
 801c4ea:	60f8      	str	r0, [r7, #12]
 801c4ec:	60b9      	str	r1, [r7, #8]
 801c4ee:	1dbb      	adds	r3, r7, #6
 801c4f0:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801c4f2:	1dbb      	adds	r3, r7, #6
 801c4f4:	881b      	ldrh	r3, [r3, #0]
 801c4f6:	68ba      	ldr	r2, [r7, #8]
 801c4f8:	68f8      	ldr	r0, [r7, #12]
 801c4fa:	2100      	movs	r1, #0
 801c4fc:	f000 fd2e 	bl	801cf5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c500:	2300      	movs	r3, #0
}
 801c502:	0018      	movs	r0, r3
 801c504:	46bd      	mov	sp, r7
 801c506:	b004      	add	sp, #16
 801c508:	bd80      	pop	{r7, pc}

0801c50a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801c50a:	b580      	push	{r7, lr}
 801c50c:	b082      	sub	sp, #8
 801c50e:	af00      	add	r7, sp, #0
 801c510:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801c512:	687a      	ldr	r2, [r7, #4]
 801c514:	23a5      	movs	r3, #165	@ 0xa5
 801c516:	009b      	lsls	r3, r3, #2
 801c518:	2104      	movs	r1, #4
 801c51a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801c51c:	6878      	ldr	r0, [r7, #4]
 801c51e:	2300      	movs	r3, #0
 801c520:	2200      	movs	r2, #0
 801c522:	2100      	movs	r1, #0
 801c524:	f000 fce3 	bl	801ceee <USBD_LL_Transmit>

  return USBD_OK;
 801c528:	2300      	movs	r3, #0
}
 801c52a:	0018      	movs	r0, r3
 801c52c:	46bd      	mov	sp, r7
 801c52e:	b002      	add	sp, #8
 801c530:	bd80      	pop	{r7, pc}

0801c532 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801c532:	b580      	push	{r7, lr}
 801c534:	b082      	sub	sp, #8
 801c536:	af00      	add	r7, sp, #0
 801c538:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801c53a:	687a      	ldr	r2, [r7, #4]
 801c53c:	23a5      	movs	r3, #165	@ 0xa5
 801c53e:	009b      	lsls	r3, r3, #2
 801c540:	2105      	movs	r1, #5
 801c542:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c544:	6878      	ldr	r0, [r7, #4]
 801c546:	2300      	movs	r3, #0
 801c548:	2200      	movs	r2, #0
 801c54a:	2100      	movs	r1, #0
 801c54c:	f000 fd06 	bl	801cf5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c550:	2300      	movs	r3, #0
}
 801c552:	0018      	movs	r0, r3
 801c554:	46bd      	mov	sp, r7
 801c556:	b002      	add	sp, #8
 801c558:	bd80      	pop	{r7, pc}
	...

0801c55c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801c55c:	b580      	push	{r7, lr}
 801c55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801c560:	4914      	ldr	r1, [pc, #80]	@ (801c5b4 <MX_USB_DEVICE_Init+0x58>)
 801c562:	4b15      	ldr	r3, [pc, #84]	@ (801c5b8 <MX_USB_DEVICE_Init+0x5c>)
 801c564:	2200      	movs	r2, #0
 801c566:	0018      	movs	r0, r3
 801c568:	f7fe fdec 	bl	801b144 <USBD_Init>
 801c56c:	1e03      	subs	r3, r0, #0
 801c56e:	d001      	beq.n	801c574 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801c570:	f7eb fdec 	bl	800814c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801c574:	4a11      	ldr	r2, [pc, #68]	@ (801c5bc <MX_USB_DEVICE_Init+0x60>)
 801c576:	4b10      	ldr	r3, [pc, #64]	@ (801c5b8 <MX_USB_DEVICE_Init+0x5c>)
 801c578:	0011      	movs	r1, r2
 801c57a:	0018      	movs	r0, r3
 801c57c:	f7fe fe13 	bl	801b1a6 <USBD_RegisterClass>
 801c580:	1e03      	subs	r3, r0, #0
 801c582:	d001      	beq.n	801c588 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801c584:	f7eb fde2 	bl	800814c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801c588:	4a0d      	ldr	r2, [pc, #52]	@ (801c5c0 <MX_USB_DEVICE_Init+0x64>)
 801c58a:	4b0b      	ldr	r3, [pc, #44]	@ (801c5b8 <MX_USB_DEVICE_Init+0x5c>)
 801c58c:	0011      	movs	r1, r2
 801c58e:	0018      	movs	r0, r3
 801c590:	f7fe fd28 	bl	801afe4 <USBD_CDC_RegisterInterface>
 801c594:	1e03      	subs	r3, r0, #0
 801c596:	d001      	beq.n	801c59c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801c598:	f7eb fdd8 	bl	800814c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801c59c:	4b06      	ldr	r3, [pc, #24]	@ (801c5b8 <MX_USB_DEVICE_Init+0x5c>)
 801c59e:	0018      	movs	r0, r3
 801c5a0:	f7fe fe21 	bl	801b1e6 <USBD_Start>
 801c5a4:	1e03      	subs	r3, r0, #0
 801c5a6:	d001      	beq.n	801c5ac <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801c5a8:	f7eb fdd0 	bl	800814c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801c5ac:	46c0      	nop			@ (mov r8, r8)
 801c5ae:	46bd      	mov	sp, r7
 801c5b0:	bd80      	pop	{r7, pc}
 801c5b2:	46c0      	nop			@ (mov r8, r8)
 801c5b4:	20000204 	.word	0x20000204
 801c5b8:	200025c0 	.word	0x200025c0
 801c5bc:	200000f0 	.word	0x200000f0
 801c5c0:	200001f4 	.word	0x200001f4

0801c5c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801c5c4:	b580      	push	{r7, lr}
 801c5c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801c5c8:	4907      	ldr	r1, [pc, #28]	@ (801c5e8 <CDC_Init_FS+0x24>)
 801c5ca:	4b08      	ldr	r3, [pc, #32]	@ (801c5ec <CDC_Init_FS+0x28>)
 801c5cc:	2200      	movs	r2, #0
 801c5ce:	0018      	movs	r0, r3
 801c5d0:	f7fe fd23 	bl	801b01a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801c5d4:	4a06      	ldr	r2, [pc, #24]	@ (801c5f0 <CDC_Init_FS+0x2c>)
 801c5d6:	4b05      	ldr	r3, [pc, #20]	@ (801c5ec <CDC_Init_FS+0x28>)
 801c5d8:	0011      	movs	r1, r2
 801c5da:	0018      	movs	r0, r3
 801c5dc:	f7fe fd39 	bl	801b052 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801c5e0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801c5e2:	0018      	movs	r0, r3
 801c5e4:	46bd      	mov	sp, r7
 801c5e6:	bd80      	pop	{r7, pc}
 801c5e8:	20002d44 	.word	0x20002d44
 801c5ec:	200025c0 	.word	0x200025c0
 801c5f0:	20002944 	.word	0x20002944

0801c5f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801c5f4:	b580      	push	{r7, lr}
 801c5f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801c5f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801c5fa:	0018      	movs	r0, r3
 801c5fc:	46bd      	mov	sp, r7
 801c5fe:	bd80      	pop	{r7, pc}

0801c600 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801c600:	b580      	push	{r7, lr}
 801c602:	b082      	sub	sp, #8
 801c604:	af00      	add	r7, sp, #0
 801c606:	6039      	str	r1, [r7, #0]
 801c608:	0011      	movs	r1, r2
 801c60a:	1dfb      	adds	r3, r7, #7
 801c60c:	1c02      	adds	r2, r0, #0
 801c60e:	701a      	strb	r2, [r3, #0]
 801c610:	1d3b      	adds	r3, r7, #4
 801c612:	1c0a      	adds	r2, r1, #0
 801c614:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801c616:	1dfb      	adds	r3, r7, #7
 801c618:	781b      	ldrb	r3, [r3, #0]
 801c61a:	2b23      	cmp	r3, #35	@ 0x23
 801c61c:	d804      	bhi.n	801c628 <CDC_Control_FS+0x28>
 801c61e:	009a      	lsls	r2, r3, #2
 801c620:	4b04      	ldr	r3, [pc, #16]	@ (801c634 <CDC_Control_FS+0x34>)
 801c622:	18d3      	adds	r3, r2, r3
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801c628:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801c62a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801c62c:	0018      	movs	r0, r3
 801c62e:	46bd      	mov	sp, r7
 801c630:	b002      	add	sp, #8
 801c632:	bd80      	pop	{r7, pc}
 801c634:	08024ddc 	.word	0x08024ddc

0801c638 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801c638:	b580      	push	{r7, lr}
 801c63a:	b082      	sub	sp, #8
 801c63c:	af00      	add	r7, sp, #0
 801c63e:	6078      	str	r0, [r7, #4]
 801c640:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801c642:	4b12      	ldr	r3, [pc, #72]	@ (801c68c <CDC_Receive_FS+0x54>)
 801c644:	781b      	ldrb	r3, [r3, #0]
 801c646:	2b00      	cmp	r3, #0
 801c648:	d013      	beq.n	801c672 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801c64a:	683b      	ldr	r3, [r7, #0]
 801c64c:	681b      	ldr	r3, [r3, #0]
 801c64e:	b29a      	uxth	r2, r3
 801c650:	2301      	movs	r3, #1
 801c652:	425b      	negs	r3, r3
 801c654:	6879      	ldr	r1, [r7, #4]
 801c656:	480e      	ldr	r0, [pc, #56]	@ (801c690 <CDC_Receive_FS+0x58>)
 801c658:	f7fa fa46 	bl	8016ae8 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801c65c:	687a      	ldr	r2, [r7, #4]
 801c65e:	4b0d      	ldr	r3, [pc, #52]	@ (801c694 <CDC_Receive_FS+0x5c>)
 801c660:	0011      	movs	r1, r2
 801c662:	0018      	movs	r0, r3
 801c664:	f7fe fcf5 	bl	801b052 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c668:	4b0a      	ldr	r3, [pc, #40]	@ (801c694 <CDC_Receive_FS+0x5c>)
 801c66a:	0018      	movs	r0, r3
 801c66c:	f7fe fd3c 	bl	801b0e8 <USBD_CDC_ReceivePacket>
 801c670:	e006      	b.n	801c680 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 801c672:	683b      	ldr	r3, [r7, #0]
 801c674:	681a      	ldr	r2, [r3, #0]
 801c676:	4b08      	ldr	r3, [pc, #32]	@ (801c698 <CDC_Receive_FS+0x60>)
 801c678:	681b      	ldr	r3, [r3, #0]
 801c67a:	18d2      	adds	r2, r2, r3
 801c67c:	4b06      	ldr	r3, [pc, #24]	@ (801c698 <CDC_Receive_FS+0x60>)
 801c67e:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801c680:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801c682:	0018      	movs	r0, r3
 801c684:	46bd      	mov	sp, r7
 801c686:	b002      	add	sp, #8
 801c688:	bd80      	pop	{r7, pc}
 801c68a:	46c0      	nop			@ (mov r8, r8)
 801c68c:	20002884 	.word	0x20002884
 801c690:	20002888 	.word	0x20002888
 801c694:	200025c0 	.word	0x200025c0
 801c698:	20002940 	.word	0x20002940

0801c69c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801c69c:	b5b0      	push	{r4, r5, r7, lr}
 801c69e:	b084      	sub	sp, #16
 801c6a0:	af00      	add	r7, sp, #0
 801c6a2:	6078      	str	r0, [r7, #4]
 801c6a4:	000a      	movs	r2, r1
 801c6a6:	1cbb      	adds	r3, r7, #2
 801c6a8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801c6aa:	230f      	movs	r3, #15
 801c6ac:	18fb      	adds	r3, r7, r3
 801c6ae:	2200      	movs	r2, #0
 801c6b0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801c6b2:	4a11      	ldr	r2, [pc, #68]	@ (801c6f8 <CDC_Transmit_FS+0x5c>)
 801c6b4:	23ae      	movs	r3, #174	@ 0xae
 801c6b6:	009b      	lsls	r3, r3, #2
 801c6b8:	58d3      	ldr	r3, [r2, r3]
 801c6ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801c6bc:	68ba      	ldr	r2, [r7, #8]
 801c6be:	2385      	movs	r3, #133	@ 0x85
 801c6c0:	009b      	lsls	r3, r3, #2
 801c6c2:	58d3      	ldr	r3, [r2, r3]
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d001      	beq.n	801c6cc <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801c6c8:	2301      	movs	r3, #1
 801c6ca:	e010      	b.n	801c6ee <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801c6cc:	1cbb      	adds	r3, r7, #2
 801c6ce:	881a      	ldrh	r2, [r3, #0]
 801c6d0:	6879      	ldr	r1, [r7, #4]
 801c6d2:	4b09      	ldr	r3, [pc, #36]	@ (801c6f8 <CDC_Transmit_FS+0x5c>)
 801c6d4:	0018      	movs	r0, r3
 801c6d6:	f7fe fca0 	bl	801b01a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801c6da:	250f      	movs	r5, #15
 801c6dc:	197c      	adds	r4, r7, r5
 801c6de:	4b06      	ldr	r3, [pc, #24]	@ (801c6f8 <CDC_Transmit_FS+0x5c>)
 801c6e0:	0018      	movs	r0, r3
 801c6e2:	f7fe fcca 	bl	801b07a <USBD_CDC_TransmitPacket>
 801c6e6:	0003      	movs	r3, r0
 801c6e8:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801c6ea:	197b      	adds	r3, r7, r5
 801c6ec:	781b      	ldrb	r3, [r3, #0]
}
 801c6ee:	0018      	movs	r0, r3
 801c6f0:	46bd      	mov	sp, r7
 801c6f2:	b004      	add	sp, #16
 801c6f4:	bdb0      	pop	{r4, r5, r7, pc}
 801c6f6:	46c0      	nop			@ (mov r8, r8)
 801c6f8:	200025c0 	.word	0x200025c0

0801c6fc <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801c6fc:	b580      	push	{r7, lr}
 801c6fe:	af00      	add	r7, sp, #0
  ESPProg = true;
 801c700:	4b02      	ldr	r3, [pc, #8]	@ (801c70c <EnableESPProg+0x10>)
 801c702:	2201      	movs	r2, #1
 801c704:	701a      	strb	r2, [r3, #0]
}
 801c706:	46c0      	nop			@ (mov r8, r8)
 801c708:	46bd      	mov	sp, r7
 801c70a:	bd80      	pop	{r7, pc}
 801c70c:	20002884 	.word	0x20002884

0801c710 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801c710:	b580      	push	{r7, lr}
 801c712:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801c714:	4b01      	ldr	r3, [pc, #4]	@ (801c71c <GetUsbRxPointer+0xc>)
}
 801c716:	0018      	movs	r0, r3
 801c718:	46bd      	mov	sp, r7
 801c71a:	bd80      	pop	{r7, pc}
 801c71c:	20002944 	.word	0x20002944

0801c720 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801c720:	b580      	push	{r7, lr}
 801c722:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801c724:	4b07      	ldr	r3, [pc, #28]	@ (801c744 <ResetUsbRxDataSize+0x24>)
 801c726:	2200      	movs	r2, #0
 801c728:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801c72a:	4a07      	ldr	r2, [pc, #28]	@ (801c748 <ResetUsbRxDataSize+0x28>)
 801c72c:	4b07      	ldr	r3, [pc, #28]	@ (801c74c <ResetUsbRxDataSize+0x2c>)
 801c72e:	0011      	movs	r1, r2
 801c730:	0018      	movs	r0, r3
 801c732:	f7fe fc8e 	bl	801b052 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c736:	4b05      	ldr	r3, [pc, #20]	@ (801c74c <ResetUsbRxDataSize+0x2c>)
 801c738:	0018      	movs	r0, r3
 801c73a:	f7fe fcd5 	bl	801b0e8 <USBD_CDC_ReceivePacket>
}
 801c73e:	46c0      	nop			@ (mov r8, r8)
 801c740:	46bd      	mov	sp, r7
 801c742:	bd80      	pop	{r7, pc}
 801c744:	20002940 	.word	0x20002940
 801c748:	20002944 	.word	0x20002944
 801c74c:	200025c0 	.word	0x200025c0

0801c750 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801c750:	b580      	push	{r7, lr}
 801c752:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801c754:	4b02      	ldr	r3, [pc, #8]	@ (801c760 <GetUsbRxDataSize+0x10>)
 801c756:	681b      	ldr	r3, [r3, #0]
}
 801c758:	0018      	movs	r0, r3
 801c75a:	46bd      	mov	sp, r7
 801c75c:	bd80      	pop	{r7, pc}
 801c75e:	46c0      	nop			@ (mov r8, r8)
 801c760:	20002940 	.word	0x20002940

0801c764 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801c764:	b580      	push	{r7, lr}
 801c766:	b082      	sub	sp, #8
 801c768:	af00      	add	r7, sp, #0
 801c76a:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801c76c:	687a      	ldr	r2, [r7, #4]
 801c76e:	4b07      	ldr	r3, [pc, #28]	@ (801c78c <GetUsbRxNextChunk+0x28>)
 801c770:	18d2      	adds	r2, r2, r3
 801c772:	4b07      	ldr	r3, [pc, #28]	@ (801c790 <GetUsbRxNextChunk+0x2c>)
 801c774:	0011      	movs	r1, r2
 801c776:	0018      	movs	r0, r3
 801c778:	f7fe fc6b 	bl	801b052 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c77c:	4b04      	ldr	r3, [pc, #16]	@ (801c790 <GetUsbRxNextChunk+0x2c>)
 801c77e:	0018      	movs	r0, r3
 801c780:	f7fe fcb2 	bl	801b0e8 <USBD_CDC_ReceivePacket>
}
 801c784:	46c0      	nop			@ (mov r8, r8)
 801c786:	46bd      	mov	sp, r7
 801c788:	b002      	add	sp, #8
 801c78a:	bd80      	pop	{r7, pc}
 801c78c:	20002944 	.word	0x20002944
 801c790:	200025c0 	.word	0x200025c0

0801c794 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c794:	b580      	push	{r7, lr}
 801c796:	b082      	sub	sp, #8
 801c798:	af00      	add	r7, sp, #0
 801c79a:	0002      	movs	r2, r0
 801c79c:	6039      	str	r1, [r7, #0]
 801c79e:	1dfb      	adds	r3, r7, #7
 801c7a0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801c7a2:	683b      	ldr	r3, [r7, #0]
 801c7a4:	2212      	movs	r2, #18
 801c7a6:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801c7a8:	4b02      	ldr	r3, [pc, #8]	@ (801c7b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 801c7aa:	0018      	movs	r0, r3
 801c7ac:	46bd      	mov	sp, r7
 801c7ae:	b002      	add	sp, #8
 801c7b0:	bd80      	pop	{r7, pc}
 801c7b2:	46c0      	nop			@ (mov r8, r8)
 801c7b4:	20000220 	.word	0x20000220

0801c7b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c7b8:	b580      	push	{r7, lr}
 801c7ba:	b082      	sub	sp, #8
 801c7bc:	af00      	add	r7, sp, #0
 801c7be:	0002      	movs	r2, r0
 801c7c0:	6039      	str	r1, [r7, #0]
 801c7c2:	1dfb      	adds	r3, r7, #7
 801c7c4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801c7c6:	683b      	ldr	r3, [r7, #0]
 801c7c8:	2204      	movs	r2, #4
 801c7ca:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801c7cc:	4b02      	ldr	r3, [pc, #8]	@ (801c7d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801c7ce:	0018      	movs	r0, r3
 801c7d0:	46bd      	mov	sp, r7
 801c7d2:	b002      	add	sp, #8
 801c7d4:	bd80      	pop	{r7, pc}
 801c7d6:	46c0      	nop			@ (mov r8, r8)
 801c7d8:	20000234 	.word	0x20000234

0801c7dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c7dc:	b580      	push	{r7, lr}
 801c7de:	b082      	sub	sp, #8
 801c7e0:	af00      	add	r7, sp, #0
 801c7e2:	0002      	movs	r2, r0
 801c7e4:	6039      	str	r1, [r7, #0]
 801c7e6:	1dfb      	adds	r3, r7, #7
 801c7e8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801c7ea:	1dfb      	adds	r3, r7, #7
 801c7ec:	781b      	ldrb	r3, [r3, #0]
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d106      	bne.n	801c800 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c7f2:	683a      	ldr	r2, [r7, #0]
 801c7f4:	4908      	ldr	r1, [pc, #32]	@ (801c818 <USBD_FS_ProductStrDescriptor+0x3c>)
 801c7f6:	4b09      	ldr	r3, [pc, #36]	@ (801c81c <USBD_FS_ProductStrDescriptor+0x40>)
 801c7f8:	0018      	movs	r0, r3
 801c7fa:	f7ff fdb1 	bl	801c360 <USBD_GetString>
 801c7fe:	e005      	b.n	801c80c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c800:	683a      	ldr	r2, [r7, #0]
 801c802:	4905      	ldr	r1, [pc, #20]	@ (801c818 <USBD_FS_ProductStrDescriptor+0x3c>)
 801c804:	4b05      	ldr	r3, [pc, #20]	@ (801c81c <USBD_FS_ProductStrDescriptor+0x40>)
 801c806:	0018      	movs	r0, r3
 801c808:	f7ff fdaa 	bl	801c360 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c80c:	4b02      	ldr	r3, [pc, #8]	@ (801c818 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801c80e:	0018      	movs	r0, r3
 801c810:	46bd      	mov	sp, r7
 801c812:	b002      	add	sp, #8
 801c814:	bd80      	pop	{r7, pc}
 801c816:	46c0      	nop			@ (mov r8, r8)
 801c818:	20003144 	.word	0x20003144
 801c81c:	08024868 	.word	0x08024868

0801c820 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c820:	b580      	push	{r7, lr}
 801c822:	b082      	sub	sp, #8
 801c824:	af00      	add	r7, sp, #0
 801c826:	0002      	movs	r2, r0
 801c828:	6039      	str	r1, [r7, #0]
 801c82a:	1dfb      	adds	r3, r7, #7
 801c82c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801c82e:	683a      	ldr	r2, [r7, #0]
 801c830:	4904      	ldr	r1, [pc, #16]	@ (801c844 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801c832:	4b05      	ldr	r3, [pc, #20]	@ (801c848 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801c834:	0018      	movs	r0, r3
 801c836:	f7ff fd93 	bl	801c360 <USBD_GetString>
  return USBD_StrDesc;
 801c83a:	4b02      	ldr	r3, [pc, #8]	@ (801c844 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801c83c:	0018      	movs	r0, r3
 801c83e:	46bd      	mov	sp, r7
 801c840:	b002      	add	sp, #8
 801c842:	bd80      	pop	{r7, pc}
 801c844:	20003144 	.word	0x20003144
 801c848:	08024880 	.word	0x08024880

0801c84c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c84c:	b580      	push	{r7, lr}
 801c84e:	b082      	sub	sp, #8
 801c850:	af00      	add	r7, sp, #0
 801c852:	0002      	movs	r2, r0
 801c854:	6039      	str	r1, [r7, #0]
 801c856:	1dfb      	adds	r3, r7, #7
 801c858:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801c85a:	683b      	ldr	r3, [r7, #0]
 801c85c:	221a      	movs	r2, #26
 801c85e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801c860:	f000 f84c 	bl	801c8fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801c864:	4b02      	ldr	r3, [pc, #8]	@ (801c870 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801c866:	0018      	movs	r0, r3
 801c868:	46bd      	mov	sp, r7
 801c86a:	b002      	add	sp, #8
 801c86c:	bd80      	pop	{r7, pc}
 801c86e:	46c0      	nop			@ (mov r8, r8)
 801c870:	20000238 	.word	0x20000238

0801c874 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c874:	b580      	push	{r7, lr}
 801c876:	b082      	sub	sp, #8
 801c878:	af00      	add	r7, sp, #0
 801c87a:	0002      	movs	r2, r0
 801c87c:	6039      	str	r1, [r7, #0]
 801c87e:	1dfb      	adds	r3, r7, #7
 801c880:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801c882:	1dfb      	adds	r3, r7, #7
 801c884:	781b      	ldrb	r3, [r3, #0]
 801c886:	2b00      	cmp	r3, #0
 801c888:	d106      	bne.n	801c898 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c88a:	683a      	ldr	r2, [r7, #0]
 801c88c:	4908      	ldr	r1, [pc, #32]	@ (801c8b0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801c88e:	4b09      	ldr	r3, [pc, #36]	@ (801c8b4 <USBD_FS_ConfigStrDescriptor+0x40>)
 801c890:	0018      	movs	r0, r3
 801c892:	f7ff fd65 	bl	801c360 <USBD_GetString>
 801c896:	e005      	b.n	801c8a4 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c898:	683a      	ldr	r2, [r7, #0]
 801c89a:	4905      	ldr	r1, [pc, #20]	@ (801c8b0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801c89c:	4b05      	ldr	r3, [pc, #20]	@ (801c8b4 <USBD_FS_ConfigStrDescriptor+0x40>)
 801c89e:	0018      	movs	r0, r3
 801c8a0:	f7ff fd5e 	bl	801c360 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c8a4:	4b02      	ldr	r3, [pc, #8]	@ (801c8b0 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801c8a6:	0018      	movs	r0, r3
 801c8a8:	46bd      	mov	sp, r7
 801c8aa:	b002      	add	sp, #8
 801c8ac:	bd80      	pop	{r7, pc}
 801c8ae:	46c0      	nop			@ (mov r8, r8)
 801c8b0:	20003144 	.word	0x20003144
 801c8b4:	08024894 	.word	0x08024894

0801c8b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c8b8:	b580      	push	{r7, lr}
 801c8ba:	b082      	sub	sp, #8
 801c8bc:	af00      	add	r7, sp, #0
 801c8be:	0002      	movs	r2, r0
 801c8c0:	6039      	str	r1, [r7, #0]
 801c8c2:	1dfb      	adds	r3, r7, #7
 801c8c4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801c8c6:	1dfb      	adds	r3, r7, #7
 801c8c8:	781b      	ldrb	r3, [r3, #0]
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	d106      	bne.n	801c8dc <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c8ce:	683a      	ldr	r2, [r7, #0]
 801c8d0:	4908      	ldr	r1, [pc, #32]	@ (801c8f4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801c8d2:	4b09      	ldr	r3, [pc, #36]	@ (801c8f8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801c8d4:	0018      	movs	r0, r3
 801c8d6:	f7ff fd43 	bl	801c360 <USBD_GetString>
 801c8da:	e005      	b.n	801c8e8 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c8dc:	683a      	ldr	r2, [r7, #0]
 801c8de:	4905      	ldr	r1, [pc, #20]	@ (801c8f4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801c8e0:	4b05      	ldr	r3, [pc, #20]	@ (801c8f8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801c8e2:	0018      	movs	r0, r3
 801c8e4:	f7ff fd3c 	bl	801c360 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c8e8:	4b02      	ldr	r3, [pc, #8]	@ (801c8f4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801c8ea:	0018      	movs	r0, r3
 801c8ec:	46bd      	mov	sp, r7
 801c8ee:	b002      	add	sp, #8
 801c8f0:	bd80      	pop	{r7, pc}
 801c8f2:	46c0      	nop			@ (mov r8, r8)
 801c8f4:	20003144 	.word	0x20003144
 801c8f8:	080248a0 	.word	0x080248a0

0801c8fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801c8fc:	b580      	push	{r7, lr}
 801c8fe:	b084      	sub	sp, #16
 801c900:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801c902:	4b10      	ldr	r3, [pc, #64]	@ (801c944 <Get_SerialNum+0x48>)
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801c908:	4b0f      	ldr	r3, [pc, #60]	@ (801c948 <Get_SerialNum+0x4c>)
 801c90a:	681b      	ldr	r3, [r3, #0]
 801c90c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801c90e:	4b0f      	ldr	r3, [pc, #60]	@ (801c94c <Get_SerialNum+0x50>)
 801c910:	681b      	ldr	r3, [r3, #0]
 801c912:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801c914:	68fa      	ldr	r2, [r7, #12]
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	18d3      	adds	r3, r2, r3
 801c91a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801c91c:	68fb      	ldr	r3, [r7, #12]
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d00b      	beq.n	801c93a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801c922:	490b      	ldr	r1, [pc, #44]	@ (801c950 <Get_SerialNum+0x54>)
 801c924:	68fb      	ldr	r3, [r7, #12]
 801c926:	2208      	movs	r2, #8
 801c928:	0018      	movs	r0, r3
 801c92a:	f000 f815 	bl	801c958 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801c92e:	4909      	ldr	r1, [pc, #36]	@ (801c954 <Get_SerialNum+0x58>)
 801c930:	68bb      	ldr	r3, [r7, #8]
 801c932:	2204      	movs	r2, #4
 801c934:	0018      	movs	r0, r3
 801c936:	f000 f80f 	bl	801c958 <IntToUnicode>
  }
}
 801c93a:	46c0      	nop			@ (mov r8, r8)
 801c93c:	46bd      	mov	sp, r7
 801c93e:	b004      	add	sp, #16
 801c940:	bd80      	pop	{r7, pc}
 801c942:	46c0      	nop			@ (mov r8, r8)
 801c944:	1ff80050 	.word	0x1ff80050
 801c948:	1ff80054 	.word	0x1ff80054
 801c94c:	1ff80058 	.word	0x1ff80058
 801c950:	2000023a 	.word	0x2000023a
 801c954:	2000024a 	.word	0x2000024a

0801c958 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801c958:	b580      	push	{r7, lr}
 801c95a:	b086      	sub	sp, #24
 801c95c:	af00      	add	r7, sp, #0
 801c95e:	60f8      	str	r0, [r7, #12]
 801c960:	60b9      	str	r1, [r7, #8]
 801c962:	1dfb      	adds	r3, r7, #7
 801c964:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801c966:	2117      	movs	r1, #23
 801c968:	187b      	adds	r3, r7, r1
 801c96a:	2200      	movs	r2, #0
 801c96c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801c96e:	187b      	adds	r3, r7, r1
 801c970:	2200      	movs	r2, #0
 801c972:	701a      	strb	r2, [r3, #0]
 801c974:	e02f      	b.n	801c9d6 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801c976:	68fb      	ldr	r3, [r7, #12]
 801c978:	0f1b      	lsrs	r3, r3, #28
 801c97a:	2b09      	cmp	r3, #9
 801c97c:	d80d      	bhi.n	801c99a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801c97e:	68fb      	ldr	r3, [r7, #12]
 801c980:	0f1b      	lsrs	r3, r3, #28
 801c982:	b2da      	uxtb	r2, r3
 801c984:	2317      	movs	r3, #23
 801c986:	18fb      	adds	r3, r7, r3
 801c988:	781b      	ldrb	r3, [r3, #0]
 801c98a:	005b      	lsls	r3, r3, #1
 801c98c:	0019      	movs	r1, r3
 801c98e:	68bb      	ldr	r3, [r7, #8]
 801c990:	185b      	adds	r3, r3, r1
 801c992:	3230      	adds	r2, #48	@ 0x30
 801c994:	b2d2      	uxtb	r2, r2
 801c996:	701a      	strb	r2, [r3, #0]
 801c998:	e00c      	b.n	801c9b4 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801c99a:	68fb      	ldr	r3, [r7, #12]
 801c99c:	0f1b      	lsrs	r3, r3, #28
 801c99e:	b2da      	uxtb	r2, r3
 801c9a0:	2317      	movs	r3, #23
 801c9a2:	18fb      	adds	r3, r7, r3
 801c9a4:	781b      	ldrb	r3, [r3, #0]
 801c9a6:	005b      	lsls	r3, r3, #1
 801c9a8:	0019      	movs	r1, r3
 801c9aa:	68bb      	ldr	r3, [r7, #8]
 801c9ac:	185b      	adds	r3, r3, r1
 801c9ae:	3237      	adds	r2, #55	@ 0x37
 801c9b0:	b2d2      	uxtb	r2, r2
 801c9b2:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801c9b4:	68fb      	ldr	r3, [r7, #12]
 801c9b6:	011b      	lsls	r3, r3, #4
 801c9b8:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801c9ba:	2117      	movs	r1, #23
 801c9bc:	187b      	adds	r3, r7, r1
 801c9be:	781b      	ldrb	r3, [r3, #0]
 801c9c0:	005b      	lsls	r3, r3, #1
 801c9c2:	3301      	adds	r3, #1
 801c9c4:	68ba      	ldr	r2, [r7, #8]
 801c9c6:	18d3      	adds	r3, r2, r3
 801c9c8:	2200      	movs	r2, #0
 801c9ca:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801c9cc:	187b      	adds	r3, r7, r1
 801c9ce:	781a      	ldrb	r2, [r3, #0]
 801c9d0:	187b      	adds	r3, r7, r1
 801c9d2:	3201      	adds	r2, #1
 801c9d4:	701a      	strb	r2, [r3, #0]
 801c9d6:	2317      	movs	r3, #23
 801c9d8:	18fa      	adds	r2, r7, r3
 801c9da:	1dfb      	adds	r3, r7, #7
 801c9dc:	7812      	ldrb	r2, [r2, #0]
 801c9de:	781b      	ldrb	r3, [r3, #0]
 801c9e0:	429a      	cmp	r2, r3
 801c9e2:	d3c8      	bcc.n	801c976 <IntToUnicode+0x1e>
  }
}
 801c9e4:	46c0      	nop			@ (mov r8, r8)
 801c9e6:	46c0      	nop			@ (mov r8, r8)
 801c9e8:	46bd      	mov	sp, r7
 801c9ea:	b006      	add	sp, #24
 801c9ec:	bd80      	pop	{r7, pc}
	...

0801c9f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801c9f0:	b580      	push	{r7, lr}
 801c9f2:	b082      	sub	sp, #8
 801c9f4:	af00      	add	r7, sp, #0
 801c9f6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801c9f8:	687b      	ldr	r3, [r7, #4]
 801c9fa:	681b      	ldr	r3, [r3, #0]
 801c9fc:	4a0a      	ldr	r2, [pc, #40]	@ (801ca28 <HAL_PCD_MspInit+0x38>)
 801c9fe:	4293      	cmp	r3, r2
 801ca00:	d10e      	bne.n	801ca20 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801ca02:	4b0a      	ldr	r3, [pc, #40]	@ (801ca2c <HAL_PCD_MspInit+0x3c>)
 801ca04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ca06:	4b09      	ldr	r3, [pc, #36]	@ (801ca2c <HAL_PCD_MspInit+0x3c>)
 801ca08:	2180      	movs	r1, #128	@ 0x80
 801ca0a:	0409      	lsls	r1, r1, #16
 801ca0c:	430a      	orrs	r2, r1
 801ca0e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801ca10:	2200      	movs	r2, #0
 801ca12:	2100      	movs	r1, #0
 801ca14:	201f      	movs	r0, #31
 801ca16:	f7f2 fadf 	bl	800efd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801ca1a:	201f      	movs	r0, #31
 801ca1c:	f7f2 faf1 	bl	800f002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801ca20:	46c0      	nop			@ (mov r8, r8)
 801ca22:	46bd      	mov	sp, r7
 801ca24:	b002      	add	sp, #8
 801ca26:	bd80      	pop	{r7, pc}
 801ca28:	40005c00 	.word	0x40005c00
 801ca2c:	40021000 	.word	0x40021000

0801ca30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ca30:	b580      	push	{r7, lr}
 801ca32:	b082      	sub	sp, #8
 801ca34:	af00      	add	r7, sp, #0
 801ca36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801ca38:	687a      	ldr	r2, [r7, #4]
 801ca3a:	23bc      	movs	r3, #188	@ 0xbc
 801ca3c:	009b      	lsls	r3, r3, #2
 801ca3e:	58d2      	ldr	r2, [r2, r3]
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	21ac      	movs	r1, #172	@ 0xac
 801ca44:	0089      	lsls	r1, r1, #2
 801ca46:	468c      	mov	ip, r1
 801ca48:	4463      	add	r3, ip
 801ca4a:	0019      	movs	r1, r3
 801ca4c:	0010      	movs	r0, r2
 801ca4e:	f7fe fc1d 	bl	801b28c <USBD_LL_SetupStage>
}
 801ca52:	46c0      	nop			@ (mov r8, r8)
 801ca54:	46bd      	mov	sp, r7
 801ca56:	b002      	add	sp, #8
 801ca58:	bd80      	pop	{r7, pc}

0801ca5a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ca5a:	b590      	push	{r4, r7, lr}
 801ca5c:	b083      	sub	sp, #12
 801ca5e:	af00      	add	r7, sp, #0
 801ca60:	6078      	str	r0, [r7, #4]
 801ca62:	000a      	movs	r2, r1
 801ca64:	1cfb      	adds	r3, r7, #3
 801ca66:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801ca68:	687a      	ldr	r2, [r7, #4]
 801ca6a:	23bc      	movs	r3, #188	@ 0xbc
 801ca6c:	009b      	lsls	r3, r3, #2
 801ca6e:	58d4      	ldr	r4, [r2, r3]
 801ca70:	1cfb      	adds	r3, r7, #3
 801ca72:	781a      	ldrb	r2, [r3, #0]
 801ca74:	6878      	ldr	r0, [r7, #4]
 801ca76:	23be      	movs	r3, #190	@ 0xbe
 801ca78:	0059      	lsls	r1, r3, #1
 801ca7a:	0013      	movs	r3, r2
 801ca7c:	009b      	lsls	r3, r3, #2
 801ca7e:	189b      	adds	r3, r3, r2
 801ca80:	00db      	lsls	r3, r3, #3
 801ca82:	18c3      	adds	r3, r0, r3
 801ca84:	185b      	adds	r3, r3, r1
 801ca86:	681a      	ldr	r2, [r3, #0]
 801ca88:	1cfb      	adds	r3, r7, #3
 801ca8a:	781b      	ldrb	r3, [r3, #0]
 801ca8c:	0019      	movs	r1, r3
 801ca8e:	0020      	movs	r0, r4
 801ca90:	f7fe fc5a 	bl	801b348 <USBD_LL_DataOutStage>
}
 801ca94:	46c0      	nop			@ (mov r8, r8)
 801ca96:	46bd      	mov	sp, r7
 801ca98:	b003      	add	sp, #12
 801ca9a:	bd90      	pop	{r4, r7, pc}

0801ca9c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ca9c:	b580      	push	{r7, lr}
 801ca9e:	b082      	sub	sp, #8
 801caa0:	af00      	add	r7, sp, #0
 801caa2:	6078      	str	r0, [r7, #4]
 801caa4:	000a      	movs	r2, r1
 801caa6:	1cfb      	adds	r3, r7, #3
 801caa8:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801caaa:	687a      	ldr	r2, [r7, #4]
 801caac:	23bc      	movs	r3, #188	@ 0xbc
 801caae:	009b      	lsls	r3, r3, #2
 801cab0:	58d0      	ldr	r0, [r2, r3]
 801cab2:	1cfb      	adds	r3, r7, #3
 801cab4:	781a      	ldrb	r2, [r3, #0]
 801cab6:	6879      	ldr	r1, [r7, #4]
 801cab8:	0013      	movs	r3, r2
 801caba:	009b      	lsls	r3, r3, #2
 801cabc:	189b      	adds	r3, r3, r2
 801cabe:	00db      	lsls	r3, r3, #3
 801cac0:	18cb      	adds	r3, r1, r3
 801cac2:	333c      	adds	r3, #60	@ 0x3c
 801cac4:	681a      	ldr	r2, [r3, #0]
 801cac6:	1cfb      	adds	r3, r7, #3
 801cac8:	781b      	ldrb	r3, [r3, #0]
 801caca:	0019      	movs	r1, r3
 801cacc:	f7fe fcbe 	bl	801b44c <USBD_LL_DataInStage>
}
 801cad0:	46c0      	nop			@ (mov r8, r8)
 801cad2:	46bd      	mov	sp, r7
 801cad4:	b002      	add	sp, #8
 801cad6:	bd80      	pop	{r7, pc}

0801cad8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cad8:	b580      	push	{r7, lr}
 801cada:	b082      	sub	sp, #8
 801cadc:	af00      	add	r7, sp, #0
 801cade:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801cae0:	687a      	ldr	r2, [r7, #4]
 801cae2:	23bc      	movs	r3, #188	@ 0xbc
 801cae4:	009b      	lsls	r3, r3, #2
 801cae6:	58d3      	ldr	r3, [r2, r3]
 801cae8:	0018      	movs	r0, r3
 801caea:	f7fe fdf5 	bl	801b6d8 <USBD_LL_SOF>
}
 801caee:	46c0      	nop			@ (mov r8, r8)
 801caf0:	46bd      	mov	sp, r7
 801caf2:	b002      	add	sp, #8
 801caf4:	bd80      	pop	{r7, pc}

0801caf6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801caf6:	b580      	push	{r7, lr}
 801caf8:	b084      	sub	sp, #16
 801cafa:	af00      	add	r7, sp, #0
 801cafc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801cafe:	230f      	movs	r3, #15
 801cb00:	18fb      	adds	r3, r7, r3
 801cb02:	2201      	movs	r2, #1
 801cb04:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	689b      	ldr	r3, [r3, #8]
 801cb0a:	2b02      	cmp	r3, #2
 801cb0c:	d001      	beq.n	801cb12 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801cb0e:	f7eb fb1d 	bl	800814c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801cb12:	687a      	ldr	r2, [r7, #4]
 801cb14:	23bc      	movs	r3, #188	@ 0xbc
 801cb16:	009b      	lsls	r3, r3, #2
 801cb18:	58d2      	ldr	r2, [r2, r3]
 801cb1a:	230f      	movs	r3, #15
 801cb1c:	18fb      	adds	r3, r7, r3
 801cb1e:	781b      	ldrb	r3, [r3, #0]
 801cb20:	0019      	movs	r1, r3
 801cb22:	0010      	movs	r0, r2
 801cb24:	f7fe fd97 	bl	801b656 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801cb28:	687a      	ldr	r2, [r7, #4]
 801cb2a:	23bc      	movs	r3, #188	@ 0xbc
 801cb2c:	009b      	lsls	r3, r3, #2
 801cb2e:	58d3      	ldr	r3, [r2, r3]
 801cb30:	0018      	movs	r0, r3
 801cb32:	f7fe fd48 	bl	801b5c6 <USBD_LL_Reset>
}
 801cb36:	46c0      	nop			@ (mov r8, r8)
 801cb38:	46bd      	mov	sp, r7
 801cb3a:	b004      	add	sp, #16
 801cb3c:	bd80      	pop	{r7, pc}
	...

0801cb40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cb40:	b580      	push	{r7, lr}
 801cb42:	b082      	sub	sp, #8
 801cb44:	af00      	add	r7, sp, #0
 801cb46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801cb48:	687a      	ldr	r2, [r7, #4]
 801cb4a:	23bc      	movs	r3, #188	@ 0xbc
 801cb4c:	009b      	lsls	r3, r3, #2
 801cb4e:	58d3      	ldr	r3, [r2, r3]
 801cb50:	0018      	movs	r0, r3
 801cb52:	f7fe fd91 	bl	801b678 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801cb56:	687b      	ldr	r3, [r7, #4]
 801cb58:	699b      	ldr	r3, [r3, #24]
 801cb5a:	2b00      	cmp	r3, #0
 801cb5c:	d005      	beq.n	801cb6a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801cb5e:	4b05      	ldr	r3, [pc, #20]	@ (801cb74 <HAL_PCD_SuspendCallback+0x34>)
 801cb60:	691a      	ldr	r2, [r3, #16]
 801cb62:	4b04      	ldr	r3, [pc, #16]	@ (801cb74 <HAL_PCD_SuspendCallback+0x34>)
 801cb64:	2106      	movs	r1, #6
 801cb66:	430a      	orrs	r2, r1
 801cb68:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801cb6a:	46c0      	nop			@ (mov r8, r8)
 801cb6c:	46bd      	mov	sp, r7
 801cb6e:	b002      	add	sp, #8
 801cb70:	bd80      	pop	{r7, pc}
 801cb72:	46c0      	nop			@ (mov r8, r8)
 801cb74:	e000ed00 	.word	0xe000ed00

0801cb78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cb78:	b580      	push	{r7, lr}
 801cb7a:	b082      	sub	sp, #8
 801cb7c:	af00      	add	r7, sp, #0
 801cb7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	699b      	ldr	r3, [r3, #24]
 801cb84:	2b00      	cmp	r3, #0
 801cb86:	d007      	beq.n	801cb98 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801cb88:	4b09      	ldr	r3, [pc, #36]	@ (801cbb0 <HAL_PCD_ResumeCallback+0x38>)
 801cb8a:	691a      	ldr	r2, [r3, #16]
 801cb8c:	4b08      	ldr	r3, [pc, #32]	@ (801cbb0 <HAL_PCD_ResumeCallback+0x38>)
 801cb8e:	2106      	movs	r1, #6
 801cb90:	438a      	bics	r2, r1
 801cb92:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801cb94:	f000 fa44 	bl	801d020 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801cb98:	687a      	ldr	r2, [r7, #4]
 801cb9a:	23bc      	movs	r3, #188	@ 0xbc
 801cb9c:	009b      	lsls	r3, r3, #2
 801cb9e:	58d3      	ldr	r3, [r2, r3]
 801cba0:	0018      	movs	r0, r3
 801cba2:	f7fe fd81 	bl	801b6a8 <USBD_LL_Resume>
}
 801cba6:	46c0      	nop			@ (mov r8, r8)
 801cba8:	46bd      	mov	sp, r7
 801cbaa:	b002      	add	sp, #8
 801cbac:	bd80      	pop	{r7, pc}
 801cbae:	46c0      	nop			@ (mov r8, r8)
 801cbb0:	e000ed00 	.word	0xe000ed00

0801cbb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801cbb4:	b580      	push	{r7, lr}
 801cbb6:	b082      	sub	sp, #8
 801cbb8:	af00      	add	r7, sp, #0
 801cbba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801cbbc:	4a2d      	ldr	r2, [pc, #180]	@ (801cc74 <USBD_LL_Init+0xc0>)
 801cbbe:	23bc      	movs	r3, #188	@ 0xbc
 801cbc0:	009b      	lsls	r3, r3, #2
 801cbc2:	6879      	ldr	r1, [r7, #4]
 801cbc4:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801cbc6:	687a      	ldr	r2, [r7, #4]
 801cbc8:	23b0      	movs	r3, #176	@ 0xb0
 801cbca:	009b      	lsls	r3, r3, #2
 801cbcc:	4929      	ldr	r1, [pc, #164]	@ (801cc74 <USBD_LL_Init+0xc0>)
 801cbce:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801cbd0:	4b28      	ldr	r3, [pc, #160]	@ (801cc74 <USBD_LL_Init+0xc0>)
 801cbd2:	4a29      	ldr	r2, [pc, #164]	@ (801cc78 <USBD_LL_Init+0xc4>)
 801cbd4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801cbd6:	4b27      	ldr	r3, [pc, #156]	@ (801cc74 <USBD_LL_Init+0xc0>)
 801cbd8:	2208      	movs	r2, #8
 801cbda:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801cbdc:	4b25      	ldr	r3, [pc, #148]	@ (801cc74 <USBD_LL_Init+0xc0>)
 801cbde:	2202      	movs	r2, #2
 801cbe0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801cbe2:	4b24      	ldr	r3, [pc, #144]	@ (801cc74 <USBD_LL_Init+0xc0>)
 801cbe4:	2202      	movs	r2, #2
 801cbe6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801cbe8:	4b22      	ldr	r3, [pc, #136]	@ (801cc74 <USBD_LL_Init+0xc0>)
 801cbea:	2200      	movs	r2, #0
 801cbec:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801cbee:	4b21      	ldr	r3, [pc, #132]	@ (801cc74 <USBD_LL_Init+0xc0>)
 801cbf0:	2200      	movs	r2, #0
 801cbf2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801cbf4:	4b1f      	ldr	r3, [pc, #124]	@ (801cc74 <USBD_LL_Init+0xc0>)
 801cbf6:	2200      	movs	r2, #0
 801cbf8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801cbfa:	4b1e      	ldr	r3, [pc, #120]	@ (801cc74 <USBD_LL_Init+0xc0>)
 801cbfc:	0018      	movs	r0, r3
 801cbfe:	f7f5 ff95 	bl	8012b2c <HAL_PCD_Init>
 801cc02:	1e03      	subs	r3, r0, #0
 801cc04:	d001      	beq.n	801cc0a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801cc06:	f7eb faa1 	bl	800814c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801cc0a:	687a      	ldr	r2, [r7, #4]
 801cc0c:	23b0      	movs	r3, #176	@ 0xb0
 801cc0e:	009b      	lsls	r3, r3, #2
 801cc10:	58d0      	ldr	r0, [r2, r3]
 801cc12:	2318      	movs	r3, #24
 801cc14:	2200      	movs	r2, #0
 801cc16:	2100      	movs	r1, #0
 801cc18:	f7f7 fd56 	bl	80146c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801cc1c:	687a      	ldr	r2, [r7, #4]
 801cc1e:	23b0      	movs	r3, #176	@ 0xb0
 801cc20:	009b      	lsls	r3, r3, #2
 801cc22:	58d0      	ldr	r0, [r2, r3]
 801cc24:	2358      	movs	r3, #88	@ 0x58
 801cc26:	2200      	movs	r2, #0
 801cc28:	2180      	movs	r1, #128	@ 0x80
 801cc2a:	f7f7 fd4d 	bl	80146c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801cc2e:	687a      	ldr	r2, [r7, #4]
 801cc30:	23b0      	movs	r3, #176	@ 0xb0
 801cc32:	009b      	lsls	r3, r3, #2
 801cc34:	58d0      	ldr	r0, [r2, r3]
 801cc36:	23c0      	movs	r3, #192	@ 0xc0
 801cc38:	2200      	movs	r2, #0
 801cc3a:	2181      	movs	r1, #129	@ 0x81
 801cc3c:	f7f7 fd44 	bl	80146c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801cc40:	687a      	ldr	r2, [r7, #4]
 801cc42:	23b0      	movs	r3, #176	@ 0xb0
 801cc44:	009b      	lsls	r3, r3, #2
 801cc46:	58d0      	ldr	r0, [r2, r3]
 801cc48:	2388      	movs	r3, #136	@ 0x88
 801cc4a:	005b      	lsls	r3, r3, #1
 801cc4c:	2200      	movs	r2, #0
 801cc4e:	2101      	movs	r1, #1
 801cc50:	f7f7 fd3a 	bl	80146c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801cc54:	687a      	ldr	r2, [r7, #4]
 801cc56:	23b0      	movs	r3, #176	@ 0xb0
 801cc58:	009b      	lsls	r3, r3, #2
 801cc5a:	58d0      	ldr	r0, [r2, r3]
 801cc5c:	2380      	movs	r3, #128	@ 0x80
 801cc5e:	005b      	lsls	r3, r3, #1
 801cc60:	2200      	movs	r2, #0
 801cc62:	2182      	movs	r1, #130	@ 0x82
 801cc64:	f7f7 fd30 	bl	80146c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801cc68:	2300      	movs	r3, #0
}
 801cc6a:	0018      	movs	r0, r3
 801cc6c:	46bd      	mov	sp, r7
 801cc6e:	b002      	add	sp, #8
 801cc70:	bd80      	pop	{r7, pc}
 801cc72:	46c0      	nop			@ (mov r8, r8)
 801cc74:	20003344 	.word	0x20003344
 801cc78:	40005c00 	.word	0x40005c00

0801cc7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801cc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc7e:	b085      	sub	sp, #20
 801cc80:	af00      	add	r7, sp, #0
 801cc82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cc84:	210f      	movs	r1, #15
 801cc86:	187b      	adds	r3, r7, r1
 801cc88:	2200      	movs	r2, #0
 801cc8a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cc8c:	260e      	movs	r6, #14
 801cc8e:	19bb      	adds	r3, r7, r6
 801cc90:	2200      	movs	r2, #0
 801cc92:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801cc94:	687a      	ldr	r2, [r7, #4]
 801cc96:	23b0      	movs	r3, #176	@ 0xb0
 801cc98:	009b      	lsls	r3, r3, #2
 801cc9a:	58d3      	ldr	r3, [r2, r3]
 801cc9c:	000d      	movs	r5, r1
 801cc9e:	187c      	adds	r4, r7, r1
 801cca0:	0018      	movs	r0, r3
 801cca2:	f7f6 f843 	bl	8012d2c <HAL_PCD_Start>
 801cca6:	0003      	movs	r3, r0
 801cca8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ccaa:	19bc      	adds	r4, r7, r6
 801ccac:	197b      	adds	r3, r7, r5
 801ccae:	781b      	ldrb	r3, [r3, #0]
 801ccb0:	0018      	movs	r0, r3
 801ccb2:	f000 f9bc 	bl	801d02e <USBD_Get_USB_Status>
 801ccb6:	0003      	movs	r3, r0
 801ccb8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801ccba:	19bb      	adds	r3, r7, r6
 801ccbc:	781b      	ldrb	r3, [r3, #0]
}
 801ccbe:	0018      	movs	r0, r3
 801ccc0:	46bd      	mov	sp, r7
 801ccc2:	b005      	add	sp, #20
 801ccc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ccc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801ccc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ccc8:	b085      	sub	sp, #20
 801ccca:	af00      	add	r7, sp, #0
 801cccc:	6078      	str	r0, [r7, #4]
 801ccce:	000c      	movs	r4, r1
 801ccd0:	0010      	movs	r0, r2
 801ccd2:	0019      	movs	r1, r3
 801ccd4:	1cfb      	adds	r3, r7, #3
 801ccd6:	1c22      	adds	r2, r4, #0
 801ccd8:	701a      	strb	r2, [r3, #0]
 801ccda:	1cbb      	adds	r3, r7, #2
 801ccdc:	1c02      	adds	r2, r0, #0
 801ccde:	701a      	strb	r2, [r3, #0]
 801cce0:	003b      	movs	r3, r7
 801cce2:	1c0a      	adds	r2, r1, #0
 801cce4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cce6:	260f      	movs	r6, #15
 801cce8:	19bb      	adds	r3, r7, r6
 801ccea:	2200      	movs	r2, #0
 801ccec:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ccee:	250e      	movs	r5, #14
 801ccf0:	197b      	adds	r3, r7, r5
 801ccf2:	2200      	movs	r2, #0
 801ccf4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801ccf6:	687a      	ldr	r2, [r7, #4]
 801ccf8:	23b0      	movs	r3, #176	@ 0xb0
 801ccfa:	009b      	lsls	r3, r3, #2
 801ccfc:	58d0      	ldr	r0, [r2, r3]
 801ccfe:	19bc      	adds	r4, r7, r6
 801cd00:	1cbb      	adds	r3, r7, #2
 801cd02:	781d      	ldrb	r5, [r3, #0]
 801cd04:	003b      	movs	r3, r7
 801cd06:	881a      	ldrh	r2, [r3, #0]
 801cd08:	1cfb      	adds	r3, r7, #3
 801cd0a:	7819      	ldrb	r1, [r3, #0]
 801cd0c:	002b      	movs	r3, r5
 801cd0e:	f7f6 f9a2 	bl	8013056 <HAL_PCD_EP_Open>
 801cd12:	0003      	movs	r3, r0
 801cd14:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cd16:	250e      	movs	r5, #14
 801cd18:	197c      	adds	r4, r7, r5
 801cd1a:	19bb      	adds	r3, r7, r6
 801cd1c:	781b      	ldrb	r3, [r3, #0]
 801cd1e:	0018      	movs	r0, r3
 801cd20:	f000 f985 	bl	801d02e <USBD_Get_USB_Status>
 801cd24:	0003      	movs	r3, r0
 801cd26:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cd28:	197b      	adds	r3, r7, r5
 801cd2a:	781b      	ldrb	r3, [r3, #0]
}
 801cd2c:	0018      	movs	r0, r3
 801cd2e:	46bd      	mov	sp, r7
 801cd30:	b005      	add	sp, #20
 801cd32:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cd34 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cd34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd36:	b085      	sub	sp, #20
 801cd38:	af00      	add	r7, sp, #0
 801cd3a:	6078      	str	r0, [r7, #4]
 801cd3c:	000a      	movs	r2, r1
 801cd3e:	1cfb      	adds	r3, r7, #3
 801cd40:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cd42:	210f      	movs	r1, #15
 801cd44:	187b      	adds	r3, r7, r1
 801cd46:	2200      	movs	r2, #0
 801cd48:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cd4a:	260e      	movs	r6, #14
 801cd4c:	19bb      	adds	r3, r7, r6
 801cd4e:	2200      	movs	r2, #0
 801cd50:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801cd52:	687a      	ldr	r2, [r7, #4]
 801cd54:	23b0      	movs	r3, #176	@ 0xb0
 801cd56:	009b      	lsls	r3, r3, #2
 801cd58:	58d2      	ldr	r2, [r2, r3]
 801cd5a:	000d      	movs	r5, r1
 801cd5c:	187c      	adds	r4, r7, r1
 801cd5e:	1cfb      	adds	r3, r7, #3
 801cd60:	781b      	ldrb	r3, [r3, #0]
 801cd62:	0019      	movs	r1, r3
 801cd64:	0010      	movs	r0, r2
 801cd66:	f7f6 f9e5 	bl	8013134 <HAL_PCD_EP_Close>
 801cd6a:	0003      	movs	r3, r0
 801cd6c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cd6e:	19bc      	adds	r4, r7, r6
 801cd70:	197b      	adds	r3, r7, r5
 801cd72:	781b      	ldrb	r3, [r3, #0]
 801cd74:	0018      	movs	r0, r3
 801cd76:	f000 f95a 	bl	801d02e <USBD_Get_USB_Status>
 801cd7a:	0003      	movs	r3, r0
 801cd7c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cd7e:	19bb      	adds	r3, r7, r6
 801cd80:	781b      	ldrb	r3, [r3, #0]
}
 801cd82:	0018      	movs	r0, r3
 801cd84:	46bd      	mov	sp, r7
 801cd86:	b005      	add	sp, #20
 801cd88:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cd8a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cd8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd8c:	b085      	sub	sp, #20
 801cd8e:	af00      	add	r7, sp, #0
 801cd90:	6078      	str	r0, [r7, #4]
 801cd92:	000a      	movs	r2, r1
 801cd94:	1cfb      	adds	r3, r7, #3
 801cd96:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cd98:	210f      	movs	r1, #15
 801cd9a:	187b      	adds	r3, r7, r1
 801cd9c:	2200      	movs	r2, #0
 801cd9e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cda0:	260e      	movs	r6, #14
 801cda2:	19bb      	adds	r3, r7, r6
 801cda4:	2200      	movs	r2, #0
 801cda6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801cda8:	687a      	ldr	r2, [r7, #4]
 801cdaa:	23b0      	movs	r3, #176	@ 0xb0
 801cdac:	009b      	lsls	r3, r3, #2
 801cdae:	58d2      	ldr	r2, [r2, r3]
 801cdb0:	000d      	movs	r5, r1
 801cdb2:	187c      	adds	r4, r7, r1
 801cdb4:	1cfb      	adds	r3, r7, #3
 801cdb6:	781b      	ldrb	r3, [r3, #0]
 801cdb8:	0019      	movs	r1, r3
 801cdba:	0010      	movs	r0, r2
 801cdbc:	f7f6 fa97 	bl	80132ee <HAL_PCD_EP_SetStall>
 801cdc0:	0003      	movs	r3, r0
 801cdc2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cdc4:	19bc      	adds	r4, r7, r6
 801cdc6:	197b      	adds	r3, r7, r5
 801cdc8:	781b      	ldrb	r3, [r3, #0]
 801cdca:	0018      	movs	r0, r3
 801cdcc:	f000 f92f 	bl	801d02e <USBD_Get_USB_Status>
 801cdd0:	0003      	movs	r3, r0
 801cdd2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cdd4:	19bb      	adds	r3, r7, r6
 801cdd6:	781b      	ldrb	r3, [r3, #0]
}
 801cdd8:	0018      	movs	r0, r3
 801cdda:	46bd      	mov	sp, r7
 801cddc:	b005      	add	sp, #20
 801cdde:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cde0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cde0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cde2:	b085      	sub	sp, #20
 801cde4:	af00      	add	r7, sp, #0
 801cde6:	6078      	str	r0, [r7, #4]
 801cde8:	000a      	movs	r2, r1
 801cdea:	1cfb      	adds	r3, r7, #3
 801cdec:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cdee:	210f      	movs	r1, #15
 801cdf0:	187b      	adds	r3, r7, r1
 801cdf2:	2200      	movs	r2, #0
 801cdf4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cdf6:	260e      	movs	r6, #14
 801cdf8:	19bb      	adds	r3, r7, r6
 801cdfa:	2200      	movs	r2, #0
 801cdfc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801cdfe:	687a      	ldr	r2, [r7, #4]
 801ce00:	23b0      	movs	r3, #176	@ 0xb0
 801ce02:	009b      	lsls	r3, r3, #2
 801ce04:	58d2      	ldr	r2, [r2, r3]
 801ce06:	000d      	movs	r5, r1
 801ce08:	187c      	adds	r4, r7, r1
 801ce0a:	1cfb      	adds	r3, r7, #3
 801ce0c:	781b      	ldrb	r3, [r3, #0]
 801ce0e:	0019      	movs	r1, r3
 801ce10:	0010      	movs	r0, r2
 801ce12:	f7f6 fac8 	bl	80133a6 <HAL_PCD_EP_ClrStall>
 801ce16:	0003      	movs	r3, r0
 801ce18:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ce1a:	19bc      	adds	r4, r7, r6
 801ce1c:	197b      	adds	r3, r7, r5
 801ce1e:	781b      	ldrb	r3, [r3, #0]
 801ce20:	0018      	movs	r0, r3
 801ce22:	f000 f904 	bl	801d02e <USBD_Get_USB_Status>
 801ce26:	0003      	movs	r3, r0
 801ce28:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801ce2a:	19bb      	adds	r3, r7, r6
 801ce2c:	781b      	ldrb	r3, [r3, #0]
}
 801ce2e:	0018      	movs	r0, r3
 801ce30:	46bd      	mov	sp, r7
 801ce32:	b005      	add	sp, #20
 801ce34:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ce36 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ce36:	b580      	push	{r7, lr}
 801ce38:	b084      	sub	sp, #16
 801ce3a:	af00      	add	r7, sp, #0
 801ce3c:	6078      	str	r0, [r7, #4]
 801ce3e:	000a      	movs	r2, r1
 801ce40:	1cfb      	adds	r3, r7, #3
 801ce42:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ce44:	687a      	ldr	r2, [r7, #4]
 801ce46:	23b0      	movs	r3, #176	@ 0xb0
 801ce48:	009b      	lsls	r3, r3, #2
 801ce4a:	58d3      	ldr	r3, [r2, r3]
 801ce4c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801ce4e:	1cfb      	adds	r3, r7, #3
 801ce50:	781b      	ldrb	r3, [r3, #0]
 801ce52:	b25b      	sxtb	r3, r3
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	da0d      	bge.n	801ce74 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801ce58:	1cfb      	adds	r3, r7, #3
 801ce5a:	781b      	ldrb	r3, [r3, #0]
 801ce5c:	227f      	movs	r2, #127	@ 0x7f
 801ce5e:	4013      	ands	r3, r2
 801ce60:	68f9      	ldr	r1, [r7, #12]
 801ce62:	1c5a      	adds	r2, r3, #1
 801ce64:	0013      	movs	r3, r2
 801ce66:	009b      	lsls	r3, r3, #2
 801ce68:	189b      	adds	r3, r3, r2
 801ce6a:	00db      	lsls	r3, r3, #3
 801ce6c:	18cb      	adds	r3, r1, r3
 801ce6e:	3302      	adds	r3, #2
 801ce70:	781b      	ldrb	r3, [r3, #0]
 801ce72:	e00d      	b.n	801ce90 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ce74:	1cfb      	adds	r3, r7, #3
 801ce76:	781b      	ldrb	r3, [r3, #0]
 801ce78:	227f      	movs	r2, #127	@ 0x7f
 801ce7a:	401a      	ands	r2, r3
 801ce7c:	68f8      	ldr	r0, [r7, #12]
 801ce7e:	23b5      	movs	r3, #181	@ 0xb5
 801ce80:	0059      	lsls	r1, r3, #1
 801ce82:	0013      	movs	r3, r2
 801ce84:	009b      	lsls	r3, r3, #2
 801ce86:	189b      	adds	r3, r3, r2
 801ce88:	00db      	lsls	r3, r3, #3
 801ce8a:	18c3      	adds	r3, r0, r3
 801ce8c:	185b      	adds	r3, r3, r1
 801ce8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ce90:	0018      	movs	r0, r3
 801ce92:	46bd      	mov	sp, r7
 801ce94:	b004      	add	sp, #16
 801ce96:	bd80      	pop	{r7, pc}

0801ce98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ce98:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce9a:	b085      	sub	sp, #20
 801ce9c:	af00      	add	r7, sp, #0
 801ce9e:	6078      	str	r0, [r7, #4]
 801cea0:	000a      	movs	r2, r1
 801cea2:	1cfb      	adds	r3, r7, #3
 801cea4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cea6:	210f      	movs	r1, #15
 801cea8:	187b      	adds	r3, r7, r1
 801ceaa:	2200      	movs	r2, #0
 801ceac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ceae:	260e      	movs	r6, #14
 801ceb0:	19bb      	adds	r3, r7, r6
 801ceb2:	2200      	movs	r2, #0
 801ceb4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ceb6:	687a      	ldr	r2, [r7, #4]
 801ceb8:	23b0      	movs	r3, #176	@ 0xb0
 801ceba:	009b      	lsls	r3, r3, #2
 801cebc:	58d2      	ldr	r2, [r2, r3]
 801cebe:	000d      	movs	r5, r1
 801cec0:	187c      	adds	r4, r7, r1
 801cec2:	1cfb      	adds	r3, r7, #3
 801cec4:	781b      	ldrb	r3, [r3, #0]
 801cec6:	0019      	movs	r1, r3
 801cec8:	0010      	movs	r0, r2
 801ceca:	f7f6 f899 	bl	8013000 <HAL_PCD_SetAddress>
 801cece:	0003      	movs	r3, r0
 801ced0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ced2:	19bc      	adds	r4, r7, r6
 801ced4:	197b      	adds	r3, r7, r5
 801ced6:	781b      	ldrb	r3, [r3, #0]
 801ced8:	0018      	movs	r0, r3
 801ceda:	f000 f8a8 	bl	801d02e <USBD_Get_USB_Status>
 801cede:	0003      	movs	r3, r0
 801cee0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cee2:	19bb      	adds	r3, r7, r6
 801cee4:	781b      	ldrb	r3, [r3, #0]
}
 801cee6:	0018      	movs	r0, r3
 801cee8:	46bd      	mov	sp, r7
 801ceea:	b005      	add	sp, #20
 801ceec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ceee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801ceee:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cef0:	b087      	sub	sp, #28
 801cef2:	af00      	add	r7, sp, #0
 801cef4:	60f8      	str	r0, [r7, #12]
 801cef6:	0008      	movs	r0, r1
 801cef8:	607a      	str	r2, [r7, #4]
 801cefa:	0019      	movs	r1, r3
 801cefc:	230b      	movs	r3, #11
 801cefe:	18fb      	adds	r3, r7, r3
 801cf00:	1c02      	adds	r2, r0, #0
 801cf02:	701a      	strb	r2, [r3, #0]
 801cf04:	2408      	movs	r4, #8
 801cf06:	193b      	adds	r3, r7, r4
 801cf08:	1c0a      	adds	r2, r1, #0
 801cf0a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cf0c:	2117      	movs	r1, #23
 801cf0e:	187b      	adds	r3, r7, r1
 801cf10:	2200      	movs	r2, #0
 801cf12:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cf14:	2516      	movs	r5, #22
 801cf16:	197b      	adds	r3, r7, r5
 801cf18:	2200      	movs	r2, #0
 801cf1a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801cf1c:	68fa      	ldr	r2, [r7, #12]
 801cf1e:	23b0      	movs	r3, #176	@ 0xb0
 801cf20:	009b      	lsls	r3, r3, #2
 801cf22:	58d0      	ldr	r0, [r2, r3]
 801cf24:	193b      	adds	r3, r7, r4
 801cf26:	881d      	ldrh	r5, [r3, #0]
 801cf28:	000e      	movs	r6, r1
 801cf2a:	187c      	adds	r4, r7, r1
 801cf2c:	687a      	ldr	r2, [r7, #4]
 801cf2e:	230b      	movs	r3, #11
 801cf30:	18fb      	adds	r3, r7, r3
 801cf32:	7819      	ldrb	r1, [r3, #0]
 801cf34:	002b      	movs	r3, r5
 801cf36:	f7f6 f99e 	bl	8013276 <HAL_PCD_EP_Transmit>
 801cf3a:	0003      	movs	r3, r0
 801cf3c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cf3e:	2516      	movs	r5, #22
 801cf40:	197c      	adds	r4, r7, r5
 801cf42:	19bb      	adds	r3, r7, r6
 801cf44:	781b      	ldrb	r3, [r3, #0]
 801cf46:	0018      	movs	r0, r3
 801cf48:	f000 f871 	bl	801d02e <USBD_Get_USB_Status>
 801cf4c:	0003      	movs	r3, r0
 801cf4e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cf50:	197b      	adds	r3, r7, r5
 801cf52:	781b      	ldrb	r3, [r3, #0]
}
 801cf54:	0018      	movs	r0, r3
 801cf56:	46bd      	mov	sp, r7
 801cf58:	b007      	add	sp, #28
 801cf5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cf5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801cf5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf5e:	b087      	sub	sp, #28
 801cf60:	af00      	add	r7, sp, #0
 801cf62:	60f8      	str	r0, [r7, #12]
 801cf64:	0008      	movs	r0, r1
 801cf66:	607a      	str	r2, [r7, #4]
 801cf68:	0019      	movs	r1, r3
 801cf6a:	230b      	movs	r3, #11
 801cf6c:	18fb      	adds	r3, r7, r3
 801cf6e:	1c02      	adds	r2, r0, #0
 801cf70:	701a      	strb	r2, [r3, #0]
 801cf72:	2408      	movs	r4, #8
 801cf74:	193b      	adds	r3, r7, r4
 801cf76:	1c0a      	adds	r2, r1, #0
 801cf78:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cf7a:	2117      	movs	r1, #23
 801cf7c:	187b      	adds	r3, r7, r1
 801cf7e:	2200      	movs	r2, #0
 801cf80:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cf82:	2516      	movs	r5, #22
 801cf84:	197b      	adds	r3, r7, r5
 801cf86:	2200      	movs	r2, #0
 801cf88:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801cf8a:	68fa      	ldr	r2, [r7, #12]
 801cf8c:	23b0      	movs	r3, #176	@ 0xb0
 801cf8e:	009b      	lsls	r3, r3, #2
 801cf90:	58d0      	ldr	r0, [r2, r3]
 801cf92:	193b      	adds	r3, r7, r4
 801cf94:	881d      	ldrh	r5, [r3, #0]
 801cf96:	000e      	movs	r6, r1
 801cf98:	187c      	adds	r4, r7, r1
 801cf9a:	687a      	ldr	r2, [r7, #4]
 801cf9c:	230b      	movs	r3, #11
 801cf9e:	18fb      	adds	r3, r7, r3
 801cfa0:	7819      	ldrb	r1, [r3, #0]
 801cfa2:	002b      	movs	r3, r5
 801cfa4:	f7f6 f917 	bl	80131d6 <HAL_PCD_EP_Receive>
 801cfa8:	0003      	movs	r3, r0
 801cfaa:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cfac:	2516      	movs	r5, #22
 801cfae:	197c      	adds	r4, r7, r5
 801cfb0:	19bb      	adds	r3, r7, r6
 801cfb2:	781b      	ldrb	r3, [r3, #0]
 801cfb4:	0018      	movs	r0, r3
 801cfb6:	f000 f83a 	bl	801d02e <USBD_Get_USB_Status>
 801cfba:	0003      	movs	r3, r0
 801cfbc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cfbe:	197b      	adds	r3, r7, r5
 801cfc0:	781b      	ldrb	r3, [r3, #0]
}
 801cfc2:	0018      	movs	r0, r3
 801cfc4:	46bd      	mov	sp, r7
 801cfc6:	b007      	add	sp, #28
 801cfc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cfca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cfca:	b580      	push	{r7, lr}
 801cfcc:	b082      	sub	sp, #8
 801cfce:	af00      	add	r7, sp, #0
 801cfd0:	6078      	str	r0, [r7, #4]
 801cfd2:	000a      	movs	r2, r1
 801cfd4:	1cfb      	adds	r3, r7, #3
 801cfd6:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801cfd8:	687a      	ldr	r2, [r7, #4]
 801cfda:	23b0      	movs	r3, #176	@ 0xb0
 801cfdc:	009b      	lsls	r3, r3, #2
 801cfde:	58d2      	ldr	r2, [r2, r3]
 801cfe0:	1cfb      	adds	r3, r7, #3
 801cfe2:	781b      	ldrb	r3, [r3, #0]
 801cfe4:	0019      	movs	r1, r3
 801cfe6:	0010      	movs	r0, r2
 801cfe8:	f7f6 f92c 	bl	8013244 <HAL_PCD_EP_GetRxCount>
 801cfec:	0003      	movs	r3, r0
}
 801cfee:	0018      	movs	r0, r3
 801cff0:	46bd      	mov	sp, r7
 801cff2:	b002      	add	sp, #8
 801cff4:	bd80      	pop	{r7, pc}
	...

0801cff8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801cff8:	b580      	push	{r7, lr}
 801cffa:	b082      	sub	sp, #8
 801cffc:	af00      	add	r7, sp, #0
 801cffe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d000:	4b02      	ldr	r3, [pc, #8]	@ (801d00c <USBD_static_malloc+0x14>)
}
 801d002:	0018      	movs	r0, r3
 801d004:	46bd      	mov	sp, r7
 801d006:	b002      	add	sp, #8
 801d008:	bd80      	pop	{r7, pc}
 801d00a:	46c0      	nop			@ (mov r8, r8)
 801d00c:	20003638 	.word	0x20003638

0801d010 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d010:	b580      	push	{r7, lr}
 801d012:	b082      	sub	sp, #8
 801d014:	af00      	add	r7, sp, #0
 801d016:	6078      	str	r0, [r7, #4]

}
 801d018:	46c0      	nop			@ (mov r8, r8)
 801d01a:	46bd      	mov	sp, r7
 801d01c:	b002      	add	sp, #8
 801d01e:	bd80      	pop	{r7, pc}

0801d020 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801d020:	b580      	push	{r7, lr}
 801d022:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801d024:	f7ea ff3c 	bl	8007ea0 <SystemClock_Config>
}
 801d028:	46c0      	nop			@ (mov r8, r8)
 801d02a:	46bd      	mov	sp, r7
 801d02c:	bd80      	pop	{r7, pc}

0801d02e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d02e:	b580      	push	{r7, lr}
 801d030:	b084      	sub	sp, #16
 801d032:	af00      	add	r7, sp, #0
 801d034:	0002      	movs	r2, r0
 801d036:	1dfb      	adds	r3, r7, #7
 801d038:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d03a:	230f      	movs	r3, #15
 801d03c:	18fb      	adds	r3, r7, r3
 801d03e:	2200      	movs	r2, #0
 801d040:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801d042:	1dfb      	adds	r3, r7, #7
 801d044:	781b      	ldrb	r3, [r3, #0]
 801d046:	2b03      	cmp	r3, #3
 801d048:	d017      	beq.n	801d07a <USBD_Get_USB_Status+0x4c>
 801d04a:	dc1b      	bgt.n	801d084 <USBD_Get_USB_Status+0x56>
 801d04c:	2b02      	cmp	r3, #2
 801d04e:	d00f      	beq.n	801d070 <USBD_Get_USB_Status+0x42>
 801d050:	dc18      	bgt.n	801d084 <USBD_Get_USB_Status+0x56>
 801d052:	2b00      	cmp	r3, #0
 801d054:	d002      	beq.n	801d05c <USBD_Get_USB_Status+0x2e>
 801d056:	2b01      	cmp	r3, #1
 801d058:	d005      	beq.n	801d066 <USBD_Get_USB_Status+0x38>
 801d05a:	e013      	b.n	801d084 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d05c:	230f      	movs	r3, #15
 801d05e:	18fb      	adds	r3, r7, r3
 801d060:	2200      	movs	r2, #0
 801d062:	701a      	strb	r2, [r3, #0]
    break;
 801d064:	e013      	b.n	801d08e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d066:	230f      	movs	r3, #15
 801d068:	18fb      	adds	r3, r7, r3
 801d06a:	2202      	movs	r2, #2
 801d06c:	701a      	strb	r2, [r3, #0]
    break;
 801d06e:	e00e      	b.n	801d08e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d070:	230f      	movs	r3, #15
 801d072:	18fb      	adds	r3, r7, r3
 801d074:	2201      	movs	r2, #1
 801d076:	701a      	strb	r2, [r3, #0]
    break;
 801d078:	e009      	b.n	801d08e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d07a:	230f      	movs	r3, #15
 801d07c:	18fb      	adds	r3, r7, r3
 801d07e:	2202      	movs	r2, #2
 801d080:	701a      	strb	r2, [r3, #0]
    break;
 801d082:	e004      	b.n	801d08e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801d084:	230f      	movs	r3, #15
 801d086:	18fb      	adds	r3, r7, r3
 801d088:	2202      	movs	r2, #2
 801d08a:	701a      	strb	r2, [r3, #0]
    break;
 801d08c:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801d08e:	230f      	movs	r3, #15
 801d090:	18fb      	adds	r3, r7, r3
 801d092:	781b      	ldrb	r3, [r3, #0]
}
 801d094:	0018      	movs	r0, r3
 801d096:	46bd      	mov	sp, r7
 801d098:	b004      	add	sp, #16
 801d09a:	bd80      	pop	{r7, pc}

0801d09c <arm_cfft_radix4by2_q31>:
 801d09c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d09e:	465f      	mov	r7, fp
 801d0a0:	4656      	mov	r6, sl
 801d0a2:	464d      	mov	r5, r9
 801d0a4:	4644      	mov	r4, r8
 801d0a6:	000b      	movs	r3, r1
 801d0a8:	b4f0      	push	{r4, r5, r6, r7}
 801d0aa:	085b      	lsrs	r3, r3, #1
 801d0ac:	b08f      	sub	sp, #60	@ 0x3c
 801d0ae:	910a      	str	r1, [sp, #40]	@ 0x28
 801d0b0:	0007      	movs	r7, r0
 801d0b2:	9009      	str	r0, [sp, #36]	@ 0x24
 801d0b4:	0011      	movs	r1, r2
 801d0b6:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d0b8:	930c      	str	r3, [sp, #48]	@ 0x30
 801d0ba:	2b00      	cmp	r3, #0
 801d0bc:	d100      	bne.n	801d0c0 <arm_cfft_radix4by2_q31+0x24>
 801d0be:	e0a0      	b.n	801d202 <arm_cfft_radix4by2_q31+0x166>
 801d0c0:	0002      	movs	r2, r0
 801d0c2:	00db      	lsls	r3, r3, #3
 801d0c4:	3204      	adds	r2, #4
 801d0c6:	4691      	mov	r9, r2
 801d0c8:	4698      	mov	r8, r3
 801d0ca:	000a      	movs	r2, r1
 801d0cc:	464e      	mov	r6, r9
 801d0ce:	4442      	add	r2, r8
 801d0d0:	4699      	mov	r9, r3
 801d0d2:	4688      	mov	r8, r1
 801d0d4:	9208      	str	r2, [sp, #32]
 801d0d6:	900d      	str	r0, [sp, #52]	@ 0x34
 801d0d8:	4643      	mov	r3, r8
 801d0da:	681b      	ldr	r3, [r3, #0]
 801d0dc:	469b      	mov	fp, r3
 801d0de:	4643      	mov	r3, r8
 801d0e0:	685b      	ldr	r3, [r3, #4]
 801d0e2:	469a      	mov	sl, r3
 801d0e4:	683b      	ldr	r3, [r7, #0]
 801d0e6:	109c      	asrs	r4, r3, #2
 801d0e8:	464b      	mov	r3, r9
 801d0ea:	58fb      	ldr	r3, [r7, r3]
 801d0ec:	109a      	asrs	r2, r3, #2
 801d0ee:	18a3      	adds	r3, r4, r2
 801d0f0:	603b      	str	r3, [r7, #0]
 801d0f2:	6833      	ldr	r3, [r6, #0]
 801d0f4:	1aa4      	subs	r4, r4, r2
 801d0f6:	109d      	asrs	r5, r3, #2
 801d0f8:	464b      	mov	r3, r9
 801d0fa:	58f3      	ldr	r3, [r6, r3]
 801d0fc:	17e2      	asrs	r2, r4, #31
 801d0fe:	109b      	asrs	r3, r3, #2
 801d100:	18e9      	adds	r1, r5, r3
 801d102:	6031      	str	r1, [r6, #0]
 801d104:	0011      	movs	r1, r2
 801d106:	465a      	mov	r2, fp
 801d108:	17d2      	asrs	r2, r2, #31
 801d10a:	0010      	movs	r0, r2
 801d10c:	4652      	mov	r2, sl
 801d10e:	1aed      	subs	r5, r5, r3
 801d110:	17eb      	asrs	r3, r5, #31
 801d112:	17d2      	asrs	r2, r2, #31
 801d114:	9307      	str	r3, [sp, #28]
 801d116:	9204      	str	r2, [sp, #16]
 801d118:	0003      	movs	r3, r0
 801d11a:	465a      	mov	r2, fp
 801d11c:	9006      	str	r0, [sp, #24]
 801d11e:	0020      	movs	r0, r4
 801d120:	9105      	str	r1, [sp, #20]
 801d122:	f7e3 fa4d 	bl	80005c0 <__aeabi_lmul>
 801d126:	2280      	movs	r2, #128	@ 0x80
 801d128:	2300      	movs	r3, #0
 801d12a:	0612      	lsls	r2, r2, #24
 801d12c:	1880      	adds	r0, r0, r2
 801d12e:	4159      	adcs	r1, r3
 801d130:	2300      	movs	r3, #0
 801d132:	9101      	str	r1, [sp, #4]
 801d134:	9300      	str	r3, [sp, #0]
 801d136:	4652      	mov	r2, sl
 801d138:	9b04      	ldr	r3, [sp, #16]
 801d13a:	0028      	movs	r0, r5
 801d13c:	17e9      	asrs	r1, r5, #31
 801d13e:	f7e3 fa3f 	bl	80005c0 <__aeabi_lmul>
 801d142:	9a00      	ldr	r2, [sp, #0]
 801d144:	9b01      	ldr	r3, [sp, #4]
 801d146:	1880      	adds	r0, r0, r2
 801d148:	4159      	adcs	r1, r3
 801d14a:	2280      	movs	r2, #128	@ 0x80
 801d14c:	2300      	movs	r3, #0
 801d14e:	0612      	lsls	r2, r2, #24
 801d150:	1880      	adds	r0, r0, r2
 801d152:	4159      	adcs	r1, r3
 801d154:	464a      	mov	r2, r9
 801d156:	004b      	lsls	r3, r1, #1
 801d158:	50bb      	str	r3, [r7, r2]
 801d15a:	4658      	mov	r0, fp
 801d15c:	002a      	movs	r2, r5
 801d15e:	9b07      	ldr	r3, [sp, #28]
 801d160:	9906      	ldr	r1, [sp, #24]
 801d162:	f7e3 fa2d 	bl	80005c0 <__aeabi_lmul>
 801d166:	2280      	movs	r2, #128	@ 0x80
 801d168:	2300      	movs	r3, #0
 801d16a:	0612      	lsls	r2, r2, #24
 801d16c:	1880      	adds	r0, r0, r2
 801d16e:	4159      	adcs	r1, r3
 801d170:	2000      	movs	r0, #0
 801d172:	9103      	str	r1, [sp, #12]
 801d174:	9002      	str	r0, [sp, #8]
 801d176:	4652      	mov	r2, sl
 801d178:	9b04      	ldr	r3, [sp, #16]
 801d17a:	0020      	movs	r0, r4
 801d17c:	9905      	ldr	r1, [sp, #20]
 801d17e:	f7e3 fa1f 	bl	80005c0 <__aeabi_lmul>
 801d182:	9a02      	ldr	r2, [sp, #8]
 801d184:	9b03      	ldr	r3, [sp, #12]
 801d186:	1a12      	subs	r2, r2, r0
 801d188:	418b      	sbcs	r3, r1
 801d18a:	2080      	movs	r0, #128	@ 0x80
 801d18c:	2100      	movs	r1, #0
 801d18e:	0600      	lsls	r0, r0, #24
 801d190:	1812      	adds	r2, r2, r0
 801d192:	414b      	adcs	r3, r1
 801d194:	464a      	mov	r2, r9
 801d196:	005b      	lsls	r3, r3, #1
 801d198:	50b3      	str	r3, [r6, r2]
 801d19a:	2308      	movs	r3, #8
 801d19c:	469c      	mov	ip, r3
 801d19e:	9b08      	ldr	r3, [sp, #32]
 801d1a0:	44e0      	add	r8, ip
 801d1a2:	3708      	adds	r7, #8
 801d1a4:	3608      	adds	r6, #8
 801d1a6:	4598      	cmp	r8, r3
 801d1a8:	d196      	bne.n	801d0d8 <arm_cfft_radix4by2_q31+0x3c>
 801d1aa:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d1ac:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d1ae:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d1b0:	2302      	movs	r3, #2
 801d1b2:	003a      	movs	r2, r7
 801d1b4:	0029      	movs	r1, r5
 801d1b6:	0020      	movs	r0, r4
 801d1b8:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801d1ba:	f000 f957 	bl	801d46c <arm_radix4_butterfly_q31>
 801d1be:	46a4      	mov	ip, r4
 801d1c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d1c2:	2302      	movs	r3, #2
 801d1c4:	0088      	lsls	r0, r1, #2
 801d1c6:	4460      	add	r0, ip
 801d1c8:	003a      	movs	r2, r7
 801d1ca:	0029      	movs	r1, r5
 801d1cc:	f000 f94e 	bl	801d46c <arm_radix4_butterfly_q31>
 801d1d0:	46a4      	mov	ip, r4
 801d1d2:	0128      	lsls	r0, r5, #4
 801d1d4:	4460      	add	r0, ip
 801d1d6:	6833      	ldr	r3, [r6, #0]
 801d1d8:	005b      	lsls	r3, r3, #1
 801d1da:	6033      	str	r3, [r6, #0]
 801d1dc:	6873      	ldr	r3, [r6, #4]
 801d1de:	005b      	lsls	r3, r3, #1
 801d1e0:	6073      	str	r3, [r6, #4]
 801d1e2:	68b3      	ldr	r3, [r6, #8]
 801d1e4:	005b      	lsls	r3, r3, #1
 801d1e6:	60b3      	str	r3, [r6, #8]
 801d1e8:	68f3      	ldr	r3, [r6, #12]
 801d1ea:	005b      	lsls	r3, r3, #1
 801d1ec:	60f3      	str	r3, [r6, #12]
 801d1ee:	3610      	adds	r6, #16
 801d1f0:	42b0      	cmp	r0, r6
 801d1f2:	d1f0      	bne.n	801d1d6 <arm_cfft_radix4by2_q31+0x13a>
 801d1f4:	b00f      	add	sp, #60	@ 0x3c
 801d1f6:	bc3c      	pop	{r2, r3, r4, r5}
 801d1f8:	4690      	mov	r8, r2
 801d1fa:	4699      	mov	r9, r3
 801d1fc:	46a2      	mov	sl, r4
 801d1fe:	46ab      	mov	fp, r5
 801d200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d202:	2302      	movs	r3, #2
 801d204:	2100      	movs	r1, #0
 801d206:	0015      	movs	r5, r2
 801d208:	f000 f930 	bl	801d46c <arm_radix4_butterfly_q31>
 801d20c:	46bc      	mov	ip, r7
 801d20e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d210:	002a      	movs	r2, r5
 801d212:	0098      	lsls	r0, r3, #2
 801d214:	4460      	add	r0, ip
 801d216:	2302      	movs	r3, #2
 801d218:	2100      	movs	r1, #0
 801d21a:	f000 f927 	bl	801d46c <arm_radix4_butterfly_q31>
 801d21e:	e7e9      	b.n	801d1f4 <arm_cfft_radix4by2_q31+0x158>

0801d220 <arm_cfft_radix4by2_inverse_q31>:
 801d220:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d222:	465f      	mov	r7, fp
 801d224:	4656      	mov	r6, sl
 801d226:	464d      	mov	r5, r9
 801d228:	4644      	mov	r4, r8
 801d22a:	000b      	movs	r3, r1
 801d22c:	b4f0      	push	{r4, r5, r6, r7}
 801d22e:	085b      	lsrs	r3, r3, #1
 801d230:	b08f      	sub	sp, #60	@ 0x3c
 801d232:	910a      	str	r1, [sp, #40]	@ 0x28
 801d234:	0007      	movs	r7, r0
 801d236:	9009      	str	r0, [sp, #36]	@ 0x24
 801d238:	0011      	movs	r1, r2
 801d23a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d23c:	930c      	str	r3, [sp, #48]	@ 0x30
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d100      	bne.n	801d244 <arm_cfft_radix4by2_inverse_q31+0x24>
 801d242:	e0a0      	b.n	801d386 <arm_cfft_radix4by2_inverse_q31+0x166>
 801d244:	0002      	movs	r2, r0
 801d246:	00db      	lsls	r3, r3, #3
 801d248:	3204      	adds	r2, #4
 801d24a:	4691      	mov	r9, r2
 801d24c:	4698      	mov	r8, r3
 801d24e:	000a      	movs	r2, r1
 801d250:	464e      	mov	r6, r9
 801d252:	4442      	add	r2, r8
 801d254:	4699      	mov	r9, r3
 801d256:	4688      	mov	r8, r1
 801d258:	9208      	str	r2, [sp, #32]
 801d25a:	900d      	str	r0, [sp, #52]	@ 0x34
 801d25c:	4643      	mov	r3, r8
 801d25e:	681b      	ldr	r3, [r3, #0]
 801d260:	469b      	mov	fp, r3
 801d262:	4643      	mov	r3, r8
 801d264:	685b      	ldr	r3, [r3, #4]
 801d266:	469a      	mov	sl, r3
 801d268:	683b      	ldr	r3, [r7, #0]
 801d26a:	109c      	asrs	r4, r3, #2
 801d26c:	464b      	mov	r3, r9
 801d26e:	58fb      	ldr	r3, [r7, r3]
 801d270:	109a      	asrs	r2, r3, #2
 801d272:	18a3      	adds	r3, r4, r2
 801d274:	603b      	str	r3, [r7, #0]
 801d276:	6833      	ldr	r3, [r6, #0]
 801d278:	1aa4      	subs	r4, r4, r2
 801d27a:	109d      	asrs	r5, r3, #2
 801d27c:	464b      	mov	r3, r9
 801d27e:	58f3      	ldr	r3, [r6, r3]
 801d280:	17e2      	asrs	r2, r4, #31
 801d282:	109b      	asrs	r3, r3, #2
 801d284:	18e9      	adds	r1, r5, r3
 801d286:	6031      	str	r1, [r6, #0]
 801d288:	0011      	movs	r1, r2
 801d28a:	465a      	mov	r2, fp
 801d28c:	17d2      	asrs	r2, r2, #31
 801d28e:	0010      	movs	r0, r2
 801d290:	4652      	mov	r2, sl
 801d292:	1aed      	subs	r5, r5, r3
 801d294:	17eb      	asrs	r3, r5, #31
 801d296:	17d2      	asrs	r2, r2, #31
 801d298:	9307      	str	r3, [sp, #28]
 801d29a:	9204      	str	r2, [sp, #16]
 801d29c:	0003      	movs	r3, r0
 801d29e:	465a      	mov	r2, fp
 801d2a0:	9006      	str	r0, [sp, #24]
 801d2a2:	0020      	movs	r0, r4
 801d2a4:	9105      	str	r1, [sp, #20]
 801d2a6:	f7e3 f98b 	bl	80005c0 <__aeabi_lmul>
 801d2aa:	2280      	movs	r2, #128	@ 0x80
 801d2ac:	2300      	movs	r3, #0
 801d2ae:	0612      	lsls	r2, r2, #24
 801d2b0:	1880      	adds	r0, r0, r2
 801d2b2:	4159      	adcs	r1, r3
 801d2b4:	2300      	movs	r3, #0
 801d2b6:	9101      	str	r1, [sp, #4]
 801d2b8:	9300      	str	r3, [sp, #0]
 801d2ba:	4652      	mov	r2, sl
 801d2bc:	9b04      	ldr	r3, [sp, #16]
 801d2be:	0028      	movs	r0, r5
 801d2c0:	17e9      	asrs	r1, r5, #31
 801d2c2:	f7e3 f97d 	bl	80005c0 <__aeabi_lmul>
 801d2c6:	9a00      	ldr	r2, [sp, #0]
 801d2c8:	9b01      	ldr	r3, [sp, #4]
 801d2ca:	1a12      	subs	r2, r2, r0
 801d2cc:	418b      	sbcs	r3, r1
 801d2ce:	2080      	movs	r0, #128	@ 0x80
 801d2d0:	2100      	movs	r1, #0
 801d2d2:	0600      	lsls	r0, r0, #24
 801d2d4:	1812      	adds	r2, r2, r0
 801d2d6:	414b      	adcs	r3, r1
 801d2d8:	464a      	mov	r2, r9
 801d2da:	005b      	lsls	r3, r3, #1
 801d2dc:	50bb      	str	r3, [r7, r2]
 801d2de:	4658      	mov	r0, fp
 801d2e0:	002a      	movs	r2, r5
 801d2e2:	9b07      	ldr	r3, [sp, #28]
 801d2e4:	9906      	ldr	r1, [sp, #24]
 801d2e6:	f7e3 f96b 	bl	80005c0 <__aeabi_lmul>
 801d2ea:	2280      	movs	r2, #128	@ 0x80
 801d2ec:	2300      	movs	r3, #0
 801d2ee:	0612      	lsls	r2, r2, #24
 801d2f0:	1880      	adds	r0, r0, r2
 801d2f2:	4159      	adcs	r1, r3
 801d2f4:	2000      	movs	r0, #0
 801d2f6:	9103      	str	r1, [sp, #12]
 801d2f8:	9002      	str	r0, [sp, #8]
 801d2fa:	4652      	mov	r2, sl
 801d2fc:	9b04      	ldr	r3, [sp, #16]
 801d2fe:	0020      	movs	r0, r4
 801d300:	9905      	ldr	r1, [sp, #20]
 801d302:	f7e3 f95d 	bl	80005c0 <__aeabi_lmul>
 801d306:	9b02      	ldr	r3, [sp, #8]
 801d308:	9c03      	ldr	r4, [sp, #12]
 801d30a:	18c0      	adds	r0, r0, r3
 801d30c:	4161      	adcs	r1, r4
 801d30e:	2380      	movs	r3, #128	@ 0x80
 801d310:	2400      	movs	r4, #0
 801d312:	061b      	lsls	r3, r3, #24
 801d314:	18c0      	adds	r0, r0, r3
 801d316:	4161      	adcs	r1, r4
 801d318:	464a      	mov	r2, r9
 801d31a:	004b      	lsls	r3, r1, #1
 801d31c:	50b3      	str	r3, [r6, r2]
 801d31e:	2308      	movs	r3, #8
 801d320:	469c      	mov	ip, r3
 801d322:	9b08      	ldr	r3, [sp, #32]
 801d324:	44e0      	add	r8, ip
 801d326:	3708      	adds	r7, #8
 801d328:	3608      	adds	r6, #8
 801d32a:	4598      	cmp	r8, r3
 801d32c:	d196      	bne.n	801d25c <arm_cfft_radix4by2_inverse_q31+0x3c>
 801d32e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d330:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d332:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d334:	2302      	movs	r3, #2
 801d336:	003a      	movs	r2, r7
 801d338:	0029      	movs	r1, r5
 801d33a:	0020      	movs	r0, r4
 801d33c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801d33e:	f000 fb3b 	bl	801d9b8 <arm_radix4_butterfly_inverse_q31>
 801d342:	46a4      	mov	ip, r4
 801d344:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d346:	2302      	movs	r3, #2
 801d348:	0088      	lsls	r0, r1, #2
 801d34a:	4460      	add	r0, ip
 801d34c:	003a      	movs	r2, r7
 801d34e:	0029      	movs	r1, r5
 801d350:	f000 fb32 	bl	801d9b8 <arm_radix4_butterfly_inverse_q31>
 801d354:	46a4      	mov	ip, r4
 801d356:	0128      	lsls	r0, r5, #4
 801d358:	4460      	add	r0, ip
 801d35a:	6833      	ldr	r3, [r6, #0]
 801d35c:	005b      	lsls	r3, r3, #1
 801d35e:	6033      	str	r3, [r6, #0]
 801d360:	6873      	ldr	r3, [r6, #4]
 801d362:	005b      	lsls	r3, r3, #1
 801d364:	6073      	str	r3, [r6, #4]
 801d366:	68b3      	ldr	r3, [r6, #8]
 801d368:	005b      	lsls	r3, r3, #1
 801d36a:	60b3      	str	r3, [r6, #8]
 801d36c:	68f3      	ldr	r3, [r6, #12]
 801d36e:	005b      	lsls	r3, r3, #1
 801d370:	60f3      	str	r3, [r6, #12]
 801d372:	3610      	adds	r6, #16
 801d374:	42b0      	cmp	r0, r6
 801d376:	d1f0      	bne.n	801d35a <arm_cfft_radix4by2_inverse_q31+0x13a>
 801d378:	b00f      	add	sp, #60	@ 0x3c
 801d37a:	bc3c      	pop	{r2, r3, r4, r5}
 801d37c:	4690      	mov	r8, r2
 801d37e:	4699      	mov	r9, r3
 801d380:	46a2      	mov	sl, r4
 801d382:	46ab      	mov	fp, r5
 801d384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d386:	2302      	movs	r3, #2
 801d388:	2100      	movs	r1, #0
 801d38a:	0015      	movs	r5, r2
 801d38c:	f000 fb14 	bl	801d9b8 <arm_radix4_butterfly_inverse_q31>
 801d390:	46bc      	mov	ip, r7
 801d392:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d394:	002a      	movs	r2, r5
 801d396:	0098      	lsls	r0, r3, #2
 801d398:	4460      	add	r0, ip
 801d39a:	2302      	movs	r3, #2
 801d39c:	2100      	movs	r1, #0
 801d39e:	f000 fb0b 	bl	801d9b8 <arm_radix4_butterfly_inverse_q31>
 801d3a2:	e7e9      	b.n	801d378 <arm_cfft_radix4by2_inverse_q31+0x158>

0801d3a4 <arm_cfft_q31>:
 801d3a4:	b570      	push	{r4, r5, r6, lr}
 801d3a6:	001e      	movs	r6, r3
 801d3a8:	2380      	movs	r3, #128	@ 0x80
 801d3aa:	000d      	movs	r5, r1
 801d3ac:	0004      	movs	r4, r0
 801d3ae:	8801      	ldrh	r1, [r0, #0]
 801d3b0:	005b      	lsls	r3, r3, #1
 801d3b2:	2a01      	cmp	r2, #1
 801d3b4:	d028      	beq.n	801d408 <arm_cfft_q31+0x64>
 801d3b6:	4299      	cmp	r1, r3
 801d3b8:	d020      	beq.n	801d3fc <arm_cfft_q31+0x58>
 801d3ba:	d812      	bhi.n	801d3e2 <arm_cfft_q31+0x3e>
 801d3bc:	2920      	cmp	r1, #32
 801d3be:	d004      	beq.n	801d3ca <arm_cfft_q31+0x26>
 801d3c0:	d949      	bls.n	801d456 <arm_cfft_q31+0xb2>
 801d3c2:	2940      	cmp	r1, #64	@ 0x40
 801d3c4:	d01a      	beq.n	801d3fc <arm_cfft_q31+0x58>
 801d3c6:	2980      	cmp	r1, #128	@ 0x80
 801d3c8:	d103      	bne.n	801d3d2 <arm_cfft_q31+0x2e>
 801d3ca:	6862      	ldr	r2, [r4, #4]
 801d3cc:	0028      	movs	r0, r5
 801d3ce:	f7ff fe65 	bl	801d09c <arm_cfft_radix4by2_q31>
 801d3d2:	2e00      	cmp	r6, #0
 801d3d4:	d004      	beq.n	801d3e0 <arm_cfft_q31+0x3c>
 801d3d6:	68a2      	ldr	r2, [r4, #8]
 801d3d8:	89a1      	ldrh	r1, [r4, #12]
 801d3da:	0028      	movs	r0, r5
 801d3dc:	f7e2 fe94 	bl	8000108 <arm_bitreversal_32>
 801d3e0:	bd70      	pop	{r4, r5, r6, pc}
 801d3e2:	2380      	movs	r3, #128	@ 0x80
 801d3e4:	00db      	lsls	r3, r3, #3
 801d3e6:	4299      	cmp	r1, r3
 801d3e8:	d008      	beq.n	801d3fc <arm_cfft_q31+0x58>
 801d3ea:	d92f      	bls.n	801d44c <arm_cfft_q31+0xa8>
 801d3ec:	2380      	movs	r3, #128	@ 0x80
 801d3ee:	011b      	lsls	r3, r3, #4
 801d3f0:	4299      	cmp	r1, r3
 801d3f2:	d0ea      	beq.n	801d3ca <arm_cfft_q31+0x26>
 801d3f4:	2380      	movs	r3, #128	@ 0x80
 801d3f6:	015b      	lsls	r3, r3, #5
 801d3f8:	4299      	cmp	r1, r3
 801d3fa:	d1ea      	bne.n	801d3d2 <arm_cfft_q31+0x2e>
 801d3fc:	2301      	movs	r3, #1
 801d3fe:	6862      	ldr	r2, [r4, #4]
 801d400:	0028      	movs	r0, r5
 801d402:	f000 f833 	bl	801d46c <arm_radix4_butterfly_q31>
 801d406:	e7e4      	b.n	801d3d2 <arm_cfft_q31+0x2e>
 801d408:	4299      	cmp	r1, r3
 801d40a:	d019      	beq.n	801d440 <arm_cfft_q31+0x9c>
 801d40c:	d80b      	bhi.n	801d426 <arm_cfft_q31+0x82>
 801d40e:	2920      	cmp	r1, #32
 801d410:	d004      	beq.n	801d41c <arm_cfft_q31+0x78>
 801d412:	d928      	bls.n	801d466 <arm_cfft_q31+0xc2>
 801d414:	2940      	cmp	r1, #64	@ 0x40
 801d416:	d013      	beq.n	801d440 <arm_cfft_q31+0x9c>
 801d418:	2980      	cmp	r1, #128	@ 0x80
 801d41a:	d1da      	bne.n	801d3d2 <arm_cfft_q31+0x2e>
 801d41c:	6862      	ldr	r2, [r4, #4]
 801d41e:	0028      	movs	r0, r5
 801d420:	f7ff fefe 	bl	801d220 <arm_cfft_radix4by2_inverse_q31>
 801d424:	e7d5      	b.n	801d3d2 <arm_cfft_q31+0x2e>
 801d426:	2380      	movs	r3, #128	@ 0x80
 801d428:	00db      	lsls	r3, r3, #3
 801d42a:	4299      	cmp	r1, r3
 801d42c:	d008      	beq.n	801d440 <arm_cfft_q31+0x9c>
 801d42e:	d915      	bls.n	801d45c <arm_cfft_q31+0xb8>
 801d430:	2380      	movs	r3, #128	@ 0x80
 801d432:	011b      	lsls	r3, r3, #4
 801d434:	4299      	cmp	r1, r3
 801d436:	d0f1      	beq.n	801d41c <arm_cfft_q31+0x78>
 801d438:	2380      	movs	r3, #128	@ 0x80
 801d43a:	015b      	lsls	r3, r3, #5
 801d43c:	4299      	cmp	r1, r3
 801d43e:	d1c8      	bne.n	801d3d2 <arm_cfft_q31+0x2e>
 801d440:	2301      	movs	r3, #1
 801d442:	6862      	ldr	r2, [r4, #4]
 801d444:	0028      	movs	r0, r5
 801d446:	f000 fab7 	bl	801d9b8 <arm_radix4_butterfly_inverse_q31>
 801d44a:	e7c2      	b.n	801d3d2 <arm_cfft_q31+0x2e>
 801d44c:	2380      	movs	r3, #128	@ 0x80
 801d44e:	009b      	lsls	r3, r3, #2
 801d450:	4299      	cmp	r1, r3
 801d452:	d0ba      	beq.n	801d3ca <arm_cfft_q31+0x26>
 801d454:	e7bd      	b.n	801d3d2 <arm_cfft_q31+0x2e>
 801d456:	2910      	cmp	r1, #16
 801d458:	d1bb      	bne.n	801d3d2 <arm_cfft_q31+0x2e>
 801d45a:	e7cf      	b.n	801d3fc <arm_cfft_q31+0x58>
 801d45c:	2380      	movs	r3, #128	@ 0x80
 801d45e:	009b      	lsls	r3, r3, #2
 801d460:	4299      	cmp	r1, r3
 801d462:	d0db      	beq.n	801d41c <arm_cfft_q31+0x78>
 801d464:	e7b5      	b.n	801d3d2 <arm_cfft_q31+0x2e>
 801d466:	2910      	cmp	r1, #16
 801d468:	d1b3      	bne.n	801d3d2 <arm_cfft_q31+0x2e>
 801d46a:	e7e9      	b.n	801d440 <arm_cfft_q31+0x9c>

0801d46c <arm_radix4_butterfly_q31>:
 801d46c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d46e:	464d      	mov	r5, r9
 801d470:	4644      	mov	r4, r8
 801d472:	465f      	mov	r7, fp
 801d474:	4656      	mov	r6, sl
 801d476:	469c      	mov	ip, r3
 801d478:	b4f0      	push	{r4, r5, r6, r7}
 801d47a:	b0a7      	sub	sp, #156	@ 0x9c
 801d47c:	9114      	str	r1, [sp, #80]	@ 0x50
 801d47e:	0889      	lsrs	r1, r1, #2
 801d480:	9310      	str	r3, [sp, #64]	@ 0x40
 801d482:	00cb      	lsls	r3, r1, #3
 801d484:	0015      	movs	r5, r2
 801d486:	9223      	str	r2, [sp, #140]	@ 0x8c
 801d488:	18c2      	adds	r2, r0, r3
 801d48a:	000c      	movs	r4, r1
 801d48c:	469a      	mov	sl, r3
 801d48e:	9124      	str	r1, [sp, #144]	@ 0x90
 801d490:	18d1      	adds	r1, r2, r3
 801d492:	4663      	mov	r3, ip
 801d494:	468b      	mov	fp, r1
 801d496:	0119      	lsls	r1, r3, #4
 801d498:	910d      	str	r1, [sp, #52]	@ 0x34
 801d49a:	00d9      	lsls	r1, r3, #3
 801d49c:	005b      	lsls	r3, r3, #1
 801d49e:	4463      	add	r3, ip
 801d4a0:	910e      	str	r1, [sp, #56]	@ 0x38
 801d4a2:	00d9      	lsls	r1, r3, #3
 801d4a4:	465b      	mov	r3, fp
 801d4a6:	44da      	add	sl, fp
 801d4a8:	4690      	mov	r8, r2
 801d4aa:	4683      	mov	fp, r0
 801d4ac:	4699      	mov	r9, r3
 801d4ae:	9022      	str	r0, [sp, #136]	@ 0x88
 801d4b0:	9025      	str	r0, [sp, #148]	@ 0x94
 801d4b2:	910f      	str	r1, [sp, #60]	@ 0x3c
 801d4b4:	9502      	str	r5, [sp, #8]
 801d4b6:	9500      	str	r5, [sp, #0]
 801d4b8:	9501      	str	r5, [sp, #4]
 801d4ba:	9407      	str	r4, [sp, #28]
 801d4bc:	465b      	mov	r3, fp
 801d4be:	681b      	ldr	r3, [r3, #0]
 801d4c0:	4642      	mov	r2, r8
 801d4c2:	111c      	asrs	r4, r3, #4
 801d4c4:	464b      	mov	r3, r9
 801d4c6:	4658      	mov	r0, fp
 801d4c8:	681b      	ldr	r3, [r3, #0]
 801d4ca:	6812      	ldr	r2, [r2, #0]
 801d4cc:	111b      	asrs	r3, r3, #4
 801d4ce:	18e7      	adds	r7, r4, r3
 801d4d0:	1ae3      	subs	r3, r4, r3
 801d4d2:	1114      	asrs	r4, r2, #4
 801d4d4:	4652      	mov	r2, sl
 801d4d6:	6840      	ldr	r0, [r0, #4]
 801d4d8:	6812      	ldr	r2, [r2, #0]
 801d4da:	1105      	asrs	r5, r0, #4
 801d4dc:	4648      	mov	r0, r9
 801d4de:	9303      	str	r3, [sp, #12]
 801d4e0:	1113      	asrs	r3, r2, #4
 801d4e2:	18e2      	adds	r2, r4, r3
 801d4e4:	465c      	mov	r4, fp
 801d4e6:	6840      	ldr	r0, [r0, #4]
 801d4e8:	1103      	asrs	r3, r0, #4
 801d4ea:	18ee      	adds	r6, r5, r3
 801d4ec:	1ae8      	subs	r0, r5, r3
 801d4ee:	18bb      	adds	r3, r7, r2
 801d4f0:	6023      	str	r3, [r4, #0]
 801d4f2:	4644      	mov	r4, r8
 801d4f4:	6864      	ldr	r4, [r4, #4]
 801d4f6:	9004      	str	r0, [sp, #16]
 801d4f8:	1125      	asrs	r5, r4, #4
 801d4fa:	4654      	mov	r4, sl
 801d4fc:	6864      	ldr	r4, [r4, #4]
 801d4fe:	1123      	asrs	r3, r4, #4
 801d500:	465c      	mov	r4, fp
 801d502:	18eb      	adds	r3, r5, r3
 801d504:	18f1      	adds	r1, r6, r3
 801d506:	6061      	str	r1, [r4, #4]
 801d508:	4655      	mov	r5, sl
 801d50a:	4644      	mov	r4, r8
 801d50c:	686d      	ldr	r5, [r5, #4]
 801d50e:	6864      	ldr	r4, [r4, #4]
 801d510:	1129      	asrs	r1, r5, #4
 801d512:	1124      	asrs	r4, r4, #4
 801d514:	1a64      	subs	r4, r4, r1
 801d516:	4641      	mov	r1, r8
 801d518:	6809      	ldr	r1, [r1, #0]
 801d51a:	9405      	str	r4, [sp, #20]
 801d51c:	1108      	asrs	r0, r1, #4
 801d51e:	4651      	mov	r1, sl
 801d520:	6809      	ldr	r1, [r1, #0]
 801d522:	1abc      	subs	r4, r7, r2
 801d524:	1109      	asrs	r1, r1, #4
 801d526:	1a41      	subs	r1, r0, r1
 801d528:	17e2      	asrs	r2, r4, #31
 801d52a:	9106      	str	r1, [sp, #24]
 801d52c:	0011      	movs	r1, r2
 801d52e:	9a01      	ldr	r2, [sp, #4]
 801d530:	9108      	str	r1, [sp, #32]
 801d532:	6817      	ldr	r7, [r2, #0]
 801d534:	17fd      	asrs	r5, r7, #31
 801d536:	0028      	movs	r0, r5
 801d538:	1af5      	subs	r5, r6, r3
 801d53a:	17ee      	asrs	r6, r5, #31
 801d53c:	960a      	str	r6, [sp, #40]	@ 0x28
 801d53e:	6856      	ldr	r6, [r2, #4]
 801d540:	9009      	str	r0, [sp, #36]	@ 0x24
 801d542:	17f3      	asrs	r3, r6, #31
 801d544:	003a      	movs	r2, r7
 801d546:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d548:	0003      	movs	r3, r0
 801d54a:	0020      	movs	r0, r4
 801d54c:	f7e3 f838 	bl	80005c0 <__aeabi_lmul>
 801d550:	0032      	movs	r2, r6
 801d552:	17f3      	asrs	r3, r6, #31
 801d554:	910c      	str	r1, [sp, #48]	@ 0x30
 801d556:	0028      	movs	r0, r5
 801d558:	17e9      	asrs	r1, r5, #31
 801d55a:	f7e3 f831 	bl	80005c0 <__aeabi_lmul>
 801d55e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801d560:	002a      	movs	r2, r5
 801d562:	4684      	mov	ip, r0
 801d564:	4640      	mov	r0, r8
 801d566:	4461      	add	r1, ip
 801d568:	0049      	lsls	r1, r1, #1
 801d56a:	6001      	str	r1, [r0, #0]
 801d56c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d56e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d570:	0038      	movs	r0, r7
 801d572:	f7e3 f825 	bl	80005c0 <__aeabi_lmul>
 801d576:	0032      	movs	r2, r6
 801d578:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d57a:	000d      	movs	r5, r1
 801d57c:	0020      	movs	r0, r4
 801d57e:	9908      	ldr	r1, [sp, #32]
 801d580:	f7e3 f81e 	bl	80005c0 <__aeabi_lmul>
 801d584:	4646      	mov	r6, r8
 801d586:	1a6d      	subs	r5, r5, r1
 801d588:	006d      	lsls	r5, r5, #1
 801d58a:	6075      	str	r5, [r6, #4]
 801d58c:	9903      	ldr	r1, [sp, #12]
 801d58e:	9d05      	ldr	r5, [sp, #20]
 801d590:	000c      	movs	r4, r1
 801d592:	46ac      	mov	ip, r5
 801d594:	4464      	add	r4, ip
 801d596:	17e6      	asrs	r6, r4, #31
 801d598:	0031      	movs	r1, r6
 801d59a:	9b00      	ldr	r3, [sp, #0]
 801d59c:	9804      	ldr	r0, [sp, #16]
 801d59e:	681e      	ldr	r6, [r3, #0]
 801d5a0:	17f7      	asrs	r7, r6, #31
 801d5a2:	9709      	str	r7, [sp, #36]	@ 0x24
 801d5a4:	9f06      	ldr	r7, [sp, #24]
 801d5a6:	0032      	movs	r2, r6
 801d5a8:	1bc7      	subs	r7, r0, r7
 801d5aa:	17fd      	asrs	r5, r7, #31
 801d5ac:	950a      	str	r5, [sp, #40]	@ 0x28
 801d5ae:	685d      	ldr	r5, [r3, #4]
 801d5b0:	17f3      	asrs	r3, r6, #31
 801d5b2:	17e8      	asrs	r0, r5, #31
 801d5b4:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d5b6:	0020      	movs	r0, r4
 801d5b8:	9108      	str	r1, [sp, #32]
 801d5ba:	f7e3 f801 	bl	80005c0 <__aeabi_lmul>
 801d5be:	002a      	movs	r2, r5
 801d5c0:	17eb      	asrs	r3, r5, #31
 801d5c2:	910c      	str	r1, [sp, #48]	@ 0x30
 801d5c4:	0038      	movs	r0, r7
 801d5c6:	17f9      	asrs	r1, r7, #31
 801d5c8:	f7e2 fffa 	bl	80005c0 <__aeabi_lmul>
 801d5cc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801d5ce:	003a      	movs	r2, r7
 801d5d0:	4684      	mov	ip, r0
 801d5d2:	4648      	mov	r0, r9
 801d5d4:	4461      	add	r1, ip
 801d5d6:	0049      	lsls	r1, r1, #1
 801d5d8:	6001      	str	r1, [r0, #0]
 801d5da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d5dc:	0030      	movs	r0, r6
 801d5de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d5e0:	f7e2 ffee 	bl	80005c0 <__aeabi_lmul>
 801d5e4:	002a      	movs	r2, r5
 801d5e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d5e8:	000e      	movs	r6, r1
 801d5ea:	0020      	movs	r0, r4
 801d5ec:	9908      	ldr	r1, [sp, #32]
 801d5ee:	f7e2 ffe7 	bl	80005c0 <__aeabi_lmul>
 801d5f2:	464c      	mov	r4, r9
 801d5f4:	9d05      	ldr	r5, [sp, #20]
 801d5f6:	1a76      	subs	r6, r6, r1
 801d5f8:	9903      	ldr	r1, [sp, #12]
 801d5fa:	0076      	lsls	r6, r6, #1
 801d5fc:	6066      	str	r6, [r4, #4]
 801d5fe:	1b4c      	subs	r4, r1, r5
 801d600:	9e06      	ldr	r6, [sp, #24]
 801d602:	17e1      	asrs	r1, r4, #31
 801d604:	9103      	str	r1, [sp, #12]
 801d606:	9902      	ldr	r1, [sp, #8]
 801d608:	46b4      	mov	ip, r6
 801d60a:	680f      	ldr	r7, [r1, #0]
 801d60c:	9804      	ldr	r0, [sp, #16]
 801d60e:	17fd      	asrs	r5, r7, #31
 801d610:	002b      	movs	r3, r5
 801d612:	684e      	ldr	r6, [r1, #4]
 801d614:	4460      	add	r0, ip
 801d616:	0005      	movs	r5, r0
 801d618:	17c0      	asrs	r0, r0, #31
 801d61a:	9005      	str	r0, [sp, #20]
 801d61c:	17f0      	asrs	r0, r6, #31
 801d61e:	9006      	str	r0, [sp, #24]
 801d620:	003a      	movs	r2, r7
 801d622:	0020      	movs	r0, r4
 801d624:	17e1      	asrs	r1, r4, #31
 801d626:	9304      	str	r3, [sp, #16]
 801d628:	f7e2 ffca 	bl	80005c0 <__aeabi_lmul>
 801d62c:	0032      	movs	r2, r6
 801d62e:	9108      	str	r1, [sp, #32]
 801d630:	17f3      	asrs	r3, r6, #31
 801d632:	0028      	movs	r0, r5
 801d634:	17e9      	asrs	r1, r5, #31
 801d636:	f7e2 ffc3 	bl	80005c0 <__aeabi_lmul>
 801d63a:	9808      	ldr	r0, [sp, #32]
 801d63c:	002a      	movs	r2, r5
 801d63e:	4684      	mov	ip, r0
 801d640:	4650      	mov	r0, sl
 801d642:	4461      	add	r1, ip
 801d644:	0049      	lsls	r1, r1, #1
 801d646:	6001      	str	r1, [r0, #0]
 801d648:	9b05      	ldr	r3, [sp, #20]
 801d64a:	9904      	ldr	r1, [sp, #16]
 801d64c:	0038      	movs	r0, r7
 801d64e:	f7e2 ffb7 	bl	80005c0 <__aeabi_lmul>
 801d652:	0020      	movs	r0, r4
 801d654:	2408      	movs	r4, #8
 801d656:	000d      	movs	r5, r1
 801d658:	0032      	movs	r2, r6
 801d65a:	9b06      	ldr	r3, [sp, #24]
 801d65c:	9903      	ldr	r1, [sp, #12]
 801d65e:	f7e2 ffaf 	bl	80005c0 <__aeabi_lmul>
 801d662:	46a4      	mov	ip, r4
 801d664:	4650      	mov	r0, sl
 801d666:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d668:	44e3      	add	fp, ip
 801d66a:	44e0      	add	r8, ip
 801d66c:	44e1      	add	r9, ip
 801d66e:	44e2      	add	sl, ip
 801d670:	46a4      	mov	ip, r4
 801d672:	1a6d      	subs	r5, r5, r1
 801d674:	006d      	lsls	r5, r5, #1
 801d676:	9a01      	ldr	r2, [sp, #4]
 801d678:	6045      	str	r5, [r0, #4]
 801d67a:	9807      	ldr	r0, [sp, #28]
 801d67c:	4462      	add	r2, ip
 801d67e:	3801      	subs	r0, #1
 801d680:	9201      	str	r2, [sp, #4]
 801d682:	9007      	str	r0, [sp, #28]
 801d684:	9b00      	ldr	r3, [sp, #0]
 801d686:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d688:	9902      	ldr	r1, [sp, #8]
 801d68a:	4694      	mov	ip, r2
 801d68c:	4463      	add	r3, ip
 801d68e:	9300      	str	r3, [sp, #0]
 801d690:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d692:	469c      	mov	ip, r3
 801d694:	4461      	add	r1, ip
 801d696:	9102      	str	r1, [sp, #8]
 801d698:	2800      	cmp	r0, #0
 801d69a:	d000      	beq.n	801d69e <arm_radix4_butterfly_q31+0x232>
 801d69c:	e70e      	b.n	801d4bc <arm_radix4_butterfly_q31+0x50>
 801d69e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d6a0:	009b      	lsls	r3, r3, #2
 801d6a2:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d6a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d6a6:	9320      	str	r3, [sp, #128]	@ 0x80
 801d6a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d6aa:	2b04      	cmp	r3, #4
 801d6ac:	d800      	bhi.n	801d6b0 <arm_radix4_butterfly_q31+0x244>
 801d6ae:	e180      	b.n	801d9b2 <arm_radix4_butterfly_q31+0x546>
 801d6b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d6b2:	0893      	lsrs	r3, r2, #2
 801d6b4:	1e59      	subs	r1, r3, #1
 801d6b6:	9321      	str	r3, [sp, #132]	@ 0x84
 801d6b8:	00db      	lsls	r3, r3, #3
 801d6ba:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d6bc:	00d3      	lsls	r3, r2, #3
 801d6be:	9300      	str	r3, [sp, #0]
 801d6c0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d6c2:	911a      	str	r1, [sp, #104]	@ 0x68
 801d6c4:	00da      	lsls	r2, r3, #3
 801d6c6:	921e      	str	r2, [sp, #120]	@ 0x78
 801d6c8:	011a      	lsls	r2, r3, #4
 801d6ca:	921d      	str	r2, [sp, #116]	@ 0x74
 801d6cc:	001a      	movs	r2, r3
 801d6ce:	4694      	mov	ip, r2
 801d6d0:	005b      	lsls	r3, r3, #1
 801d6d2:	4463      	add	r3, ip
 801d6d4:	00db      	lsls	r3, r3, #3
 801d6d6:	931c      	str	r3, [sp, #112]	@ 0x70
 801d6d8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d6da:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d6dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d6de:	9318      	str	r3, [sp, #96]	@ 0x60
 801d6e0:	9319      	str	r3, [sp, #100]	@ 0x64
 801d6e2:	9316      	str	r3, [sp, #88]	@ 0x58
 801d6e4:	2300      	movs	r3, #0
 801d6e6:	9315      	str	r3, [sp, #84]	@ 0x54
 801d6e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d6ea:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d6ec:	681a      	ldr	r2, [r3, #0]
 801d6ee:	685b      	ldr	r3, [r3, #4]
 801d6f0:	9205      	str	r2, [sp, #20]
 801d6f2:	9306      	str	r3, [sp, #24]
 801d6f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d6f6:	468c      	mov	ip, r1
 801d6f8:	681a      	ldr	r2, [r3, #0]
 801d6fa:	685b      	ldr	r3, [r3, #4]
 801d6fc:	9207      	str	r2, [sp, #28]
 801d6fe:	9308      	str	r3, [sp, #32]
 801d700:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d702:	681a      	ldr	r2, [r3, #0]
 801d704:	685b      	ldr	r3, [r3, #4]
 801d706:	9209      	str	r2, [sp, #36]	@ 0x24
 801d708:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d70a:	930a      	str	r3, [sp, #40]	@ 0x28
 801d70c:	0013      	movs	r3, r2
 801d70e:	4463      	add	r3, ip
 801d710:	4698      	mov	r8, r3
 801d712:	0013      	movs	r3, r2
 801d714:	4442      	add	r2, r8
 801d716:	4691      	mov	r9, r2
 801d718:	001a      	movs	r2, r3
 801d71a:	444a      	add	r2, r9
 801d71c:	4692      	mov	sl, r2
 801d71e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d720:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d722:	4293      	cmp	r3, r2
 801d724:	d800      	bhi.n	801d728 <arm_radix4_butterfly_q31+0x2bc>
 801d726:	e0dd      	b.n	801d8e4 <arm_radix4_butterfly_q31+0x478>
 801d728:	4694      	mov	ip, r2
 801d72a:	468b      	mov	fp, r1
 801d72c:	4644      	mov	r4, r8
 801d72e:	4655      	mov	r5, sl
 801d730:	9b07      	ldr	r3, [sp, #28]
 801d732:	17db      	asrs	r3, r3, #31
 801d734:	930c      	str	r3, [sp, #48]	@ 0x30
 801d736:	9b08      	ldr	r3, [sp, #32]
 801d738:	17db      	asrs	r3, r3, #31
 801d73a:	930d      	str	r3, [sp, #52]	@ 0x34
 801d73c:	9b05      	ldr	r3, [sp, #20]
 801d73e:	17db      	asrs	r3, r3, #31
 801d740:	930e      	str	r3, [sp, #56]	@ 0x38
 801d742:	9b06      	ldr	r3, [sp, #24]
 801d744:	17db      	asrs	r3, r3, #31
 801d746:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d74a:	17db      	asrs	r3, r3, #31
 801d74c:	9310      	str	r3, [sp, #64]	@ 0x40
 801d74e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d750:	17db      	asrs	r3, r3, #31
 801d752:	9311      	str	r3, [sp, #68]	@ 0x44
 801d754:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d756:	4463      	add	r3, ip
 801d758:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d75a:	465b      	mov	r3, fp
 801d75c:	4659      	mov	r1, fp
 801d75e:	681a      	ldr	r2, [r3, #0]
 801d760:	464b      	mov	r3, r9
 801d762:	684f      	ldr	r7, [r1, #4]
 801d764:	4649      	mov	r1, r9
 801d766:	681b      	ldr	r3, [r3, #0]
 801d768:	18d6      	adds	r6, r2, r3
 801d76a:	1ad3      	subs	r3, r2, r3
 801d76c:	9301      	str	r3, [sp, #4]
 801d76e:	684b      	ldr	r3, [r1, #4]
 801d770:	18f8      	adds	r0, r7, r3
 801d772:	1af9      	subs	r1, r7, r3
 801d774:	6827      	ldr	r7, [r4, #0]
 801d776:	9102      	str	r1, [sp, #8]
 801d778:	003a      	movs	r2, r7
 801d77a:	682f      	ldr	r7, [r5, #0]
 801d77c:	46bc      	mov	ip, r7
 801d77e:	465f      	mov	r7, fp
 801d780:	4462      	add	r2, ip
 801d782:	18b3      	adds	r3, r6, r2
 801d784:	109b      	asrs	r3, r3, #2
 801d786:	603b      	str	r3, [r7, #0]
 801d788:	6867      	ldr	r7, [r4, #4]
 801d78a:	1ab6      	subs	r6, r6, r2
 801d78c:	46b8      	mov	r8, r7
 801d78e:	686f      	ldr	r7, [r5, #4]
 801d790:	17f2      	asrs	r2, r6, #31
 801d792:	46bc      	mov	ip, r7
 801d794:	44e0      	add	r8, ip
 801d796:	4643      	mov	r3, r8
 801d798:	465f      	mov	r7, fp
 801d79a:	18c1      	adds	r1, r0, r3
 801d79c:	1089      	asrs	r1, r1, #2
 801d79e:	6079      	str	r1, [r7, #4]
 801d7a0:	9900      	ldr	r1, [sp, #0]
 801d7a2:	4690      	mov	r8, r2
 801d7a4:	468c      	mov	ip, r1
 801d7a6:	6867      	ldr	r7, [r4, #4]
 801d7a8:	6869      	ldr	r1, [r5, #4]
 801d7aa:	44e3      	add	fp, ip
 801d7ac:	1a7f      	subs	r7, r7, r1
 801d7ae:	9703      	str	r7, [sp, #12]
 801d7b0:	6829      	ldr	r1, [r5, #0]
 801d7b2:	6827      	ldr	r7, [r4, #0]
 801d7b4:	1a7f      	subs	r7, r7, r1
 801d7b6:	9704      	str	r7, [sp, #16]
 801d7b8:	1ac7      	subs	r7, r0, r3
 801d7ba:	17fa      	asrs	r2, r7, #31
 801d7bc:	4692      	mov	sl, r2
 801d7be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d7c0:	9a07      	ldr	r2, [sp, #28]
 801d7c2:	0030      	movs	r0, r6
 801d7c4:	4641      	mov	r1, r8
 801d7c6:	f7e2 fefb 	bl	80005c0 <__aeabi_lmul>
 801d7ca:	9a08      	ldr	r2, [sp, #32]
 801d7cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d7ce:	9112      	str	r1, [sp, #72]	@ 0x48
 801d7d0:	0038      	movs	r0, r7
 801d7d2:	4651      	mov	r1, sl
 801d7d4:	f7e2 fef4 	bl	80005c0 <__aeabi_lmul>
 801d7d8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d7da:	9a07      	ldr	r2, [sp, #28]
 801d7dc:	4684      	mov	ip, r0
 801d7de:	4461      	add	r1, ip
 801d7e0:	1049      	asrs	r1, r1, #1
 801d7e2:	6021      	str	r1, [r4, #0]
 801d7e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d7e6:	0038      	movs	r0, r7
 801d7e8:	4651      	mov	r1, sl
 801d7ea:	f7e2 fee9 	bl	80005c0 <__aeabi_lmul>
 801d7ee:	9a08      	ldr	r2, [sp, #32]
 801d7f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d7f2:	000f      	movs	r7, r1
 801d7f4:	0030      	movs	r0, r6
 801d7f6:	4641      	mov	r1, r8
 801d7f8:	f7e2 fee2 	bl	80005c0 <__aeabi_lmul>
 801d7fc:	9b00      	ldr	r3, [sp, #0]
 801d7fe:	9a01      	ldr	r2, [sp, #4]
 801d800:	469c      	mov	ip, r3
 801d802:	9803      	ldr	r0, [sp, #12]
 801d804:	1a7f      	subs	r7, r7, r1
 801d806:	107f      	asrs	r7, r7, #1
 801d808:	6067      	str	r7, [r4, #4]
 801d80a:	0016      	movs	r6, r2
 801d80c:	4464      	add	r4, ip
 801d80e:	4684      	mov	ip, r0
 801d810:	4466      	add	r6, ip
 801d812:	17f2      	asrs	r2, r6, #31
 801d814:	4690      	mov	r8, r2
 801d816:	9902      	ldr	r1, [sp, #8]
 801d818:	9f04      	ldr	r7, [sp, #16]
 801d81a:	0030      	movs	r0, r6
 801d81c:	1bcf      	subs	r7, r1, r7
 801d81e:	17fa      	asrs	r2, r7, #31
 801d820:	4692      	mov	sl, r2
 801d822:	4641      	mov	r1, r8
 801d824:	9a05      	ldr	r2, [sp, #20]
 801d826:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d828:	f7e2 feca 	bl	80005c0 <__aeabi_lmul>
 801d82c:	9a06      	ldr	r2, [sp, #24]
 801d82e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d830:	9112      	str	r1, [sp, #72]	@ 0x48
 801d832:	0038      	movs	r0, r7
 801d834:	4651      	mov	r1, sl
 801d836:	f7e2 fec3 	bl	80005c0 <__aeabi_lmul>
 801d83a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d83c:	9a05      	ldr	r2, [sp, #20]
 801d83e:	4684      	mov	ip, r0
 801d840:	4648      	mov	r0, r9
 801d842:	4461      	add	r1, ip
 801d844:	1049      	asrs	r1, r1, #1
 801d846:	6001      	str	r1, [r0, #0]
 801d848:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d84a:	0038      	movs	r0, r7
 801d84c:	4651      	mov	r1, sl
 801d84e:	f7e2 feb7 	bl	80005c0 <__aeabi_lmul>
 801d852:	9a06      	ldr	r2, [sp, #24]
 801d854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d856:	000f      	movs	r7, r1
 801d858:	0030      	movs	r0, r6
 801d85a:	4641      	mov	r1, r8
 801d85c:	f7e2 feb0 	bl	80005c0 <__aeabi_lmul>
 801d860:	464e      	mov	r6, r9
 801d862:	9a00      	ldr	r2, [sp, #0]
 801d864:	9b01      	ldr	r3, [sp, #4]
 801d866:	4694      	mov	ip, r2
 801d868:	9803      	ldr	r0, [sp, #12]
 801d86a:	1a7f      	subs	r7, r7, r1
 801d86c:	107f      	asrs	r7, r7, #1
 801d86e:	6077      	str	r7, [r6, #4]
 801d870:	1a1e      	subs	r6, r3, r0
 801d872:	9b04      	ldr	r3, [sp, #16]
 801d874:	44e1      	add	r9, ip
 801d876:	469c      	mov	ip, r3
 801d878:	17f0      	asrs	r0, r6, #31
 801d87a:	4680      	mov	r8, r0
 801d87c:	9902      	ldr	r1, [sp, #8]
 801d87e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d880:	4461      	add	r1, ip
 801d882:	17cb      	asrs	r3, r1, #31
 801d884:	000f      	movs	r7, r1
 801d886:	469a      	mov	sl, r3
 801d888:	0030      	movs	r0, r6
 801d88a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d88c:	4641      	mov	r1, r8
 801d88e:	f7e2 fe97 	bl	80005c0 <__aeabi_lmul>
 801d892:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d894:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d896:	9101      	str	r1, [sp, #4]
 801d898:	0038      	movs	r0, r7
 801d89a:	4651      	mov	r1, sl
 801d89c:	f7e2 fe90 	bl	80005c0 <__aeabi_lmul>
 801d8a0:	9801      	ldr	r0, [sp, #4]
 801d8a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d8a4:	4684      	mov	ip, r0
 801d8a6:	4461      	add	r1, ip
 801d8a8:	1049      	asrs	r1, r1, #1
 801d8aa:	6029      	str	r1, [r5, #0]
 801d8ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d8ae:	0038      	movs	r0, r7
 801d8b0:	4651      	mov	r1, sl
 801d8b2:	f7e2 fe85 	bl	80005c0 <__aeabi_lmul>
 801d8b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d8b8:	000f      	movs	r7, r1
 801d8ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d8bc:	0030      	movs	r0, r6
 801d8be:	4641      	mov	r1, r8
 801d8c0:	f7e2 fe7e 	bl	80005c0 <__aeabi_lmul>
 801d8c4:	1a7f      	subs	r7, r7, r1
 801d8c6:	107f      	asrs	r7, r7, #1
 801d8c8:	606f      	str	r7, [r5, #4]
 801d8ca:	9a00      	ldr	r2, [sp, #0]
 801d8cc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801d8ce:	4694      	mov	ip, r2
 801d8d0:	4465      	add	r5, ip
 801d8d2:	468c      	mov	ip, r1
 801d8d4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d8d6:	0013      	movs	r3, r2
 801d8d8:	4462      	add	r2, ip
 801d8da:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d8dc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d8de:	429a      	cmp	r2, r3
 801d8e0:	d900      	bls.n	801d8e4 <arm_radix4_butterfly_q31+0x478>
 801d8e2:	e73a      	b.n	801d75a <arm_radix4_butterfly_q31+0x2ee>
 801d8e4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d8e6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d8e8:	468c      	mov	ip, r1
 801d8ea:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801d8ec:	4462      	add	r2, ip
 801d8ee:	468c      	mov	ip, r1
 801d8f0:	9216      	str	r2, [sp, #88]	@ 0x58
 801d8f2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801d8f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d8f6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d8f8:	4462      	add	r2, ip
 801d8fa:	468c      	mov	ip, r1
 801d8fc:	9219      	str	r2, [sp, #100]	@ 0x64
 801d8fe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d900:	3301      	adds	r3, #1
 801d902:	4462      	add	r2, ip
 801d904:	9218      	str	r2, [sp, #96]	@ 0x60
 801d906:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801d908:	9315      	str	r3, [sp, #84]	@ 0x54
 801d90a:	3208      	adds	r2, #8
 801d90c:	9217      	str	r2, [sp, #92]	@ 0x5c
 801d90e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d910:	4293      	cmp	r3, r2
 801d912:	d800      	bhi.n	801d916 <arm_radix4_butterfly_q31+0x4aa>
 801d914:	e6e8      	b.n	801d6e8 <arm_radix4_butterfly_q31+0x27c>
 801d916:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d918:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d91a:	009b      	lsls	r3, r3, #2
 801d91c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d91e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d920:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d922:	089b      	lsrs	r3, r3, #2
 801d924:	9320      	str	r3, [sp, #128]	@ 0x80
 801d926:	2b04      	cmp	r3, #4
 801d928:	d900      	bls.n	801d92c <arm_radix4_butterfly_q31+0x4c0>
 801d92a:	e6c1      	b.n	801d6b0 <arm_radix4_butterfly_q31+0x244>
 801d92c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d92e:	469a      	mov	sl, r3
 801d930:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d932:	691c      	ldr	r4, [r3, #16]
 801d934:	685a      	ldr	r2, [r3, #4]
 801d936:	46a1      	mov	r9, r4
 801d938:	4690      	mov	r8, r2
 801d93a:	6819      	ldr	r1, [r3, #0]
 801d93c:	689a      	ldr	r2, [r3, #8]
 801d93e:	699f      	ldr	r7, [r3, #24]
 801d940:	188d      	adds	r5, r1, r2
 801d942:	444d      	add	r5, r9
 801d944:	19ed      	adds	r5, r5, r7
 801d946:	69de      	ldr	r6, [r3, #28]
 801d948:	601d      	str	r5, [r3, #0]
 801d94a:	4645      	mov	r5, r8
 801d94c:	46b4      	mov	ip, r6
 801d94e:	68d8      	ldr	r0, [r3, #12]
 801d950:	695c      	ldr	r4, [r3, #20]
 801d952:	182d      	adds	r5, r5, r0
 801d954:	192d      	adds	r5, r5, r4
 801d956:	4465      	add	r5, ip
 801d958:	605d      	str	r5, [r3, #4]
 801d95a:	1a8d      	subs	r5, r1, r2
 801d95c:	444d      	add	r5, r9
 801d95e:	1bed      	subs	r5, r5, r7
 801d960:	609d      	str	r5, [r3, #8]
 801d962:	4645      	mov	r5, r8
 801d964:	1a2d      	subs	r5, r5, r0
 801d966:	192d      	adds	r5, r5, r4
 801d968:	1bad      	subs	r5, r5, r6
 801d96a:	464e      	mov	r6, r9
 801d96c:	60dd      	str	r5, [r3, #12]
 801d96e:	180d      	adds	r5, r1, r0
 801d970:	1bad      	subs	r5, r5, r6
 801d972:	4666      	mov	r6, ip
 801d974:	1bad      	subs	r5, r5, r6
 801d976:	611d      	str	r5, [r3, #16]
 801d978:	4645      	mov	r5, r8
 801d97a:	1aad      	subs	r5, r5, r2
 801d97c:	4442      	add	r2, r8
 801d97e:	1b12      	subs	r2, r2, r4
 801d980:	1bd2      	subs	r2, r2, r7
 801d982:	1a08      	subs	r0, r1, r0
 801d984:	61da      	str	r2, [r3, #28]
 801d986:	4649      	mov	r1, r9
 801d988:	2201      	movs	r2, #1
 801d98a:	1a41      	subs	r1, r0, r1
 801d98c:	4252      	negs	r2, r2
 801d98e:	4461      	add	r1, ip
 801d990:	4694      	mov	ip, r2
 801d992:	44e2      	add	sl, ip
 801d994:	4652      	mov	r2, sl
 801d996:	1b2d      	subs	r5, r5, r4
 801d998:	19ed      	adds	r5, r5, r7
 801d99a:	615d      	str	r5, [r3, #20]
 801d99c:	6199      	str	r1, [r3, #24]
 801d99e:	3320      	adds	r3, #32
 801d9a0:	2a00      	cmp	r2, #0
 801d9a2:	d1c6      	bne.n	801d932 <arm_radix4_butterfly_q31+0x4c6>
 801d9a4:	b027      	add	sp, #156	@ 0x9c
 801d9a6:	bc3c      	pop	{r2, r3, r4, r5}
 801d9a8:	4690      	mov	r8, r2
 801d9aa:	4699      	mov	r9, r3
 801d9ac:	46a2      	mov	sl, r4
 801d9ae:	46ab      	mov	fp, r5
 801d9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d9b2:	469a      	mov	sl, r3
 801d9b4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d9b6:	e7bc      	b.n	801d932 <arm_radix4_butterfly_q31+0x4c6>

0801d9b8 <arm_radix4_butterfly_inverse_q31>:
 801d9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9ba:	464d      	mov	r5, r9
 801d9bc:	4644      	mov	r4, r8
 801d9be:	465f      	mov	r7, fp
 801d9c0:	4656      	mov	r6, sl
 801d9c2:	b4f0      	push	{r4, r5, r6, r7}
 801d9c4:	b0a7      	sub	sp, #156	@ 0x9c
 801d9c6:	469c      	mov	ip, r3
 801d9c8:	9114      	str	r1, [sp, #80]	@ 0x50
 801d9ca:	0889      	lsrs	r1, r1, #2
 801d9cc:	9310      	str	r3, [sp, #64]	@ 0x40
 801d9ce:	00cb      	lsls	r3, r1, #3
 801d9d0:	0015      	movs	r5, r2
 801d9d2:	9223      	str	r2, [sp, #140]	@ 0x8c
 801d9d4:	18c2      	adds	r2, r0, r3
 801d9d6:	000c      	movs	r4, r1
 801d9d8:	9124      	str	r1, [sp, #144]	@ 0x90
 801d9da:	18d1      	adds	r1, r2, r3
 801d9dc:	468b      	mov	fp, r1
 801d9de:	469a      	mov	sl, r3
 801d9e0:	4663      	mov	r3, ip
 801d9e2:	44da      	add	sl, fp
 801d9e4:	46d0      	mov	r8, sl
 801d9e6:	4681      	mov	r9, r0
 801d9e8:	4692      	mov	sl, r2
 801d9ea:	0119      	lsls	r1, r3, #4
 801d9ec:	910d      	str	r1, [sp, #52]	@ 0x34
 801d9ee:	00d9      	lsls	r1, r3, #3
 801d9f0:	005b      	lsls	r3, r3, #1
 801d9f2:	4463      	add	r3, ip
 801d9f4:	910e      	str	r1, [sp, #56]	@ 0x38
 801d9f6:	00d9      	lsls	r1, r3, #3
 801d9f8:	9022      	str	r0, [sp, #136]	@ 0x88
 801d9fa:	9025      	str	r0, [sp, #148]	@ 0x94
 801d9fc:	910f      	str	r1, [sp, #60]	@ 0x3c
 801d9fe:	9502      	str	r5, [sp, #8]
 801da00:	9500      	str	r5, [sp, #0]
 801da02:	9501      	str	r5, [sp, #4]
 801da04:	9409      	str	r4, [sp, #36]	@ 0x24
 801da06:	464b      	mov	r3, r9
 801da08:	681b      	ldr	r3, [r3, #0]
 801da0a:	4652      	mov	r2, sl
 801da0c:	111c      	asrs	r4, r3, #4
 801da0e:	465b      	mov	r3, fp
 801da10:	4648      	mov	r0, r9
 801da12:	681b      	ldr	r3, [r3, #0]
 801da14:	6812      	ldr	r2, [r2, #0]
 801da16:	6840      	ldr	r0, [r0, #4]
 801da18:	111b      	asrs	r3, r3, #4
 801da1a:	18e7      	adds	r7, r4, r3
 801da1c:	1ae3      	subs	r3, r4, r3
 801da1e:	1114      	asrs	r4, r2, #4
 801da20:	4642      	mov	r2, r8
 801da22:	1105      	asrs	r5, r0, #4
 801da24:	4658      	mov	r0, fp
 801da26:	6812      	ldr	r2, [r2, #0]
 801da28:	6840      	ldr	r0, [r0, #4]
 801da2a:	9303      	str	r3, [sp, #12]
 801da2c:	1113      	asrs	r3, r2, #4
 801da2e:	18e2      	adds	r2, r4, r3
 801da30:	1103      	asrs	r3, r0, #4
 801da32:	18ee      	adds	r6, r5, r3
 801da34:	1ae8      	subs	r0, r5, r3
 801da36:	464d      	mov	r5, r9
 801da38:	18bb      	adds	r3, r7, r2
 801da3a:	602b      	str	r3, [r5, #0]
 801da3c:	4641      	mov	r1, r8
 801da3e:	4655      	mov	r5, sl
 801da40:	6849      	ldr	r1, [r1, #4]
 801da42:	686d      	ldr	r5, [r5, #4]
 801da44:	110b      	asrs	r3, r1, #4
 801da46:	112d      	asrs	r5, r5, #4
 801da48:	18eb      	adds	r3, r5, r3
 801da4a:	464d      	mov	r5, r9
 801da4c:	18f1      	adds	r1, r6, r3
 801da4e:	6069      	str	r1, [r5, #4]
 801da50:	4655      	mov	r5, sl
 801da52:	686d      	ldr	r5, [r5, #4]
 801da54:	9004      	str	r0, [sp, #16]
 801da56:	112c      	asrs	r4, r5, #4
 801da58:	4645      	mov	r5, r8
 801da5a:	686d      	ldr	r5, [r5, #4]
 801da5c:	1129      	asrs	r1, r5, #4
 801da5e:	1a65      	subs	r5, r4, r1
 801da60:	4651      	mov	r1, sl
 801da62:	6809      	ldr	r1, [r1, #0]
 801da64:	1abc      	subs	r4, r7, r2
 801da66:	1108      	asrs	r0, r1, #4
 801da68:	4641      	mov	r1, r8
 801da6a:	17e2      	asrs	r2, r4, #31
 801da6c:	6809      	ldr	r1, [r1, #0]
 801da6e:	9207      	str	r2, [sp, #28]
 801da70:	9a01      	ldr	r2, [sp, #4]
 801da72:	1109      	asrs	r1, r1, #4
 801da74:	6817      	ldr	r7, [r2, #0]
 801da76:	1a41      	subs	r1, r0, r1
 801da78:	9106      	str	r1, [sp, #24]
 801da7a:	0039      	movs	r1, r7
 801da7c:	17ff      	asrs	r7, r7, #31
 801da7e:	0038      	movs	r0, r7
 801da80:	9505      	str	r5, [sp, #20]
 801da82:	1af5      	subs	r5, r6, r3
 801da84:	17ef      	asrs	r7, r5, #31
 801da86:	970b      	str	r7, [sp, #44]	@ 0x2c
 801da88:	6857      	ldr	r7, [r2, #4]
 801da8a:	0003      	movs	r3, r0
 801da8c:	17fe      	asrs	r6, r7, #31
 801da8e:	000a      	movs	r2, r1
 801da90:	9108      	str	r1, [sp, #32]
 801da92:	900a      	str	r0, [sp, #40]	@ 0x28
 801da94:	17e1      	asrs	r1, r4, #31
 801da96:	0020      	movs	r0, r4
 801da98:	960c      	str	r6, [sp, #48]	@ 0x30
 801da9a:	f7e2 fd91 	bl	80005c0 <__aeabi_lmul>
 801da9e:	003a      	movs	r2, r7
 801daa0:	17fb      	asrs	r3, r7, #31
 801daa2:	000e      	movs	r6, r1
 801daa4:	0028      	movs	r0, r5
 801daa6:	17e9      	asrs	r1, r5, #31
 801daa8:	f7e2 fd8a 	bl	80005c0 <__aeabi_lmul>
 801daac:	4653      	mov	r3, sl
 801daae:	1a76      	subs	r6, r6, r1
 801dab0:	0076      	lsls	r6, r6, #1
 801dab2:	601e      	str	r6, [r3, #0]
 801dab4:	002a      	movs	r2, r5
 801dab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dab8:	9808      	ldr	r0, [sp, #32]
 801daba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dabc:	f7e2 fd80 	bl	80005c0 <__aeabi_lmul>
 801dac0:	003a      	movs	r2, r7
 801dac2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dac4:	000d      	movs	r5, r1
 801dac6:	0020      	movs	r0, r4
 801dac8:	9907      	ldr	r1, [sp, #28]
 801daca:	f7e2 fd79 	bl	80005c0 <__aeabi_lmul>
 801dace:	4657      	mov	r7, sl
 801dad0:	186d      	adds	r5, r5, r1
 801dad2:	006d      	lsls	r5, r5, #1
 801dad4:	607d      	str	r5, [r7, #4]
 801dad6:	9b03      	ldr	r3, [sp, #12]
 801dad8:	9e06      	ldr	r6, [sp, #24]
 801dada:	9d05      	ldr	r5, [sp, #20]
 801dadc:	46b4      	mov	ip, r6
 801dade:	1b5d      	subs	r5, r3, r5
 801dae0:	9b00      	ldr	r3, [sp, #0]
 801dae2:	17ef      	asrs	r7, r5, #31
 801dae4:	0039      	movs	r1, r7
 801dae6:	681f      	ldr	r7, [r3, #0]
 801dae8:	17fc      	asrs	r4, r7, #31
 801daea:	0020      	movs	r0, r4
 801daec:	9c04      	ldr	r4, [sp, #16]
 801daee:	4464      	add	r4, ip
 801daf0:	17e6      	asrs	r6, r4, #31
 801daf2:	9407      	str	r4, [sp, #28]
 801daf4:	9608      	str	r6, [sp, #32]
 801daf6:	685e      	ldr	r6, [r3, #4]
 801daf8:	900b      	str	r0, [sp, #44]	@ 0x2c
 801dafa:	17f2      	asrs	r2, r6, #31
 801dafc:	0003      	movs	r3, r0
 801dafe:	920c      	str	r2, [sp, #48]	@ 0x30
 801db00:	0028      	movs	r0, r5
 801db02:	003a      	movs	r2, r7
 801db04:	910a      	str	r1, [sp, #40]	@ 0x28
 801db06:	f7e2 fd5b 	bl	80005c0 <__aeabi_lmul>
 801db0a:	0032      	movs	r2, r6
 801db0c:	17f3      	asrs	r3, r6, #31
 801db0e:	9807      	ldr	r0, [sp, #28]
 801db10:	000c      	movs	r4, r1
 801db12:	9908      	ldr	r1, [sp, #32]
 801db14:	f7e2 fd54 	bl	80005c0 <__aeabi_lmul>
 801db18:	4658      	mov	r0, fp
 801db1a:	1a64      	subs	r4, r4, r1
 801db1c:	0064      	lsls	r4, r4, #1
 801db1e:	9a07      	ldr	r2, [sp, #28]
 801db20:	6004      	str	r4, [r0, #0]
 801db22:	9b08      	ldr	r3, [sp, #32]
 801db24:	0038      	movs	r0, r7
 801db26:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801db28:	f7e2 fd4a 	bl	80005c0 <__aeabi_lmul>
 801db2c:	0032      	movs	r2, r6
 801db2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801db30:	000c      	movs	r4, r1
 801db32:	0028      	movs	r0, r5
 801db34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801db36:	f7e2 fd43 	bl	80005c0 <__aeabi_lmul>
 801db3a:	9d05      	ldr	r5, [sp, #20]
 801db3c:	465f      	mov	r7, fp
 801db3e:	46ac      	mov	ip, r5
 801db40:	1864      	adds	r4, r4, r1
 801db42:	9903      	ldr	r1, [sp, #12]
 801db44:	0064      	lsls	r4, r4, #1
 801db46:	4461      	add	r1, ip
 801db48:	607c      	str	r4, [r7, #4]
 801db4a:	000c      	movs	r4, r1
 801db4c:	17c9      	asrs	r1, r1, #31
 801db4e:	9105      	str	r1, [sp, #20]
 801db50:	9902      	ldr	r1, [sp, #8]
 801db52:	9804      	ldr	r0, [sp, #16]
 801db54:	680d      	ldr	r5, [r1, #0]
 801db56:	9e06      	ldr	r6, [sp, #24]
 801db58:	002b      	movs	r3, r5
 801db5a:	17ed      	asrs	r5, r5, #31
 801db5c:	684f      	ldr	r7, [r1, #4]
 801db5e:	9503      	str	r5, [sp, #12]
 801db60:	1b85      	subs	r5, r0, r6
 801db62:	17e8      	asrs	r0, r5, #31
 801db64:	001a      	movs	r2, r3
 801db66:	9006      	str	r0, [sp, #24]
 801db68:	17fe      	asrs	r6, r7, #31
 801db6a:	9304      	str	r3, [sp, #16]
 801db6c:	0020      	movs	r0, r4
 801db6e:	9b03      	ldr	r3, [sp, #12]
 801db70:	17e1      	asrs	r1, r4, #31
 801db72:	9607      	str	r6, [sp, #28]
 801db74:	f7e2 fd24 	bl	80005c0 <__aeabi_lmul>
 801db78:	003a      	movs	r2, r7
 801db7a:	000e      	movs	r6, r1
 801db7c:	17fb      	asrs	r3, r7, #31
 801db7e:	0028      	movs	r0, r5
 801db80:	17e9      	asrs	r1, r5, #31
 801db82:	f7e2 fd1d 	bl	80005c0 <__aeabi_lmul>
 801db86:	4640      	mov	r0, r8
 801db88:	1a76      	subs	r6, r6, r1
 801db8a:	0076      	lsls	r6, r6, #1
 801db8c:	002a      	movs	r2, r5
 801db8e:	9b06      	ldr	r3, [sp, #24]
 801db90:	6006      	str	r6, [r0, #0]
 801db92:	9903      	ldr	r1, [sp, #12]
 801db94:	9804      	ldr	r0, [sp, #16]
 801db96:	f7e2 fd13 	bl	80005c0 <__aeabi_lmul>
 801db9a:	0020      	movs	r0, r4
 801db9c:	2408      	movs	r4, #8
 801db9e:	9b07      	ldr	r3, [sp, #28]
 801dba0:	000d      	movs	r5, r1
 801dba2:	003a      	movs	r2, r7
 801dba4:	9905      	ldr	r1, [sp, #20]
 801dba6:	f7e2 fd0b 	bl	80005c0 <__aeabi_lmul>
 801dbaa:	4640      	mov	r0, r8
 801dbac:	46a4      	mov	ip, r4
 801dbae:	186d      	adds	r5, r5, r1
 801dbb0:	006d      	lsls	r5, r5, #1
 801dbb2:	6045      	str	r5, [r0, #4]
 801dbb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dbb6:	44e1      	add	r9, ip
 801dbb8:	3801      	subs	r0, #1
 801dbba:	9009      	str	r0, [sp, #36]	@ 0x24
 801dbbc:	9a01      	ldr	r2, [sp, #4]
 801dbbe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801dbc0:	44e2      	add	sl, ip
 801dbc2:	44e3      	add	fp, ip
 801dbc4:	44e0      	add	r8, ip
 801dbc6:	46a4      	mov	ip, r4
 801dbc8:	4462      	add	r2, ip
 801dbca:	9201      	str	r2, [sp, #4]
 801dbcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dbce:	9b00      	ldr	r3, [sp, #0]
 801dbd0:	4694      	mov	ip, r2
 801dbd2:	4463      	add	r3, ip
 801dbd4:	9300      	str	r3, [sp, #0]
 801dbd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dbd8:	9902      	ldr	r1, [sp, #8]
 801dbda:	469c      	mov	ip, r3
 801dbdc:	4461      	add	r1, ip
 801dbde:	9102      	str	r1, [sp, #8]
 801dbe0:	2800      	cmp	r0, #0
 801dbe2:	d000      	beq.n	801dbe6 <arm_radix4_butterfly_inverse_q31+0x22e>
 801dbe4:	e70f      	b.n	801da06 <arm_radix4_butterfly_inverse_q31+0x4e>
 801dbe6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dbe8:	009b      	lsls	r3, r3, #2
 801dbea:	931f      	str	r3, [sp, #124]	@ 0x7c
 801dbec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dbee:	9320      	str	r3, [sp, #128]	@ 0x80
 801dbf0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801dbf2:	2b04      	cmp	r3, #4
 801dbf4:	d800      	bhi.n	801dbf8 <arm_radix4_butterfly_inverse_q31+0x240>
 801dbf6:	e17c      	b.n	801def2 <arm_radix4_butterfly_inverse_q31+0x53a>
 801dbf8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dbfa:	0893      	lsrs	r3, r2, #2
 801dbfc:	1e59      	subs	r1, r3, #1
 801dbfe:	9321      	str	r3, [sp, #132]	@ 0x84
 801dc00:	00db      	lsls	r3, r3, #3
 801dc02:	931b      	str	r3, [sp, #108]	@ 0x6c
 801dc04:	00d3      	lsls	r3, r2, #3
 801dc06:	9300      	str	r3, [sp, #0]
 801dc08:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801dc0a:	911a      	str	r1, [sp, #104]	@ 0x68
 801dc0c:	00da      	lsls	r2, r3, #3
 801dc0e:	921e      	str	r2, [sp, #120]	@ 0x78
 801dc10:	011a      	lsls	r2, r3, #4
 801dc12:	921d      	str	r2, [sp, #116]	@ 0x74
 801dc14:	001a      	movs	r2, r3
 801dc16:	4694      	mov	ip, r2
 801dc18:	005b      	lsls	r3, r3, #1
 801dc1a:	4463      	add	r3, ip
 801dc1c:	00db      	lsls	r3, r3, #3
 801dc1e:	931c      	str	r3, [sp, #112]	@ 0x70
 801dc20:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801dc22:	9317      	str	r3, [sp, #92]	@ 0x5c
 801dc24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801dc26:	9318      	str	r3, [sp, #96]	@ 0x60
 801dc28:	9319      	str	r3, [sp, #100]	@ 0x64
 801dc2a:	9316      	str	r3, [sp, #88]	@ 0x58
 801dc2c:	2300      	movs	r3, #0
 801dc2e:	9315      	str	r3, [sp, #84]	@ 0x54
 801dc30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dc32:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801dc34:	681a      	ldr	r2, [r3, #0]
 801dc36:	685b      	ldr	r3, [r3, #4]
 801dc38:	9205      	str	r2, [sp, #20]
 801dc3a:	9306      	str	r3, [sp, #24]
 801dc3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dc3e:	468c      	mov	ip, r1
 801dc40:	681a      	ldr	r2, [r3, #0]
 801dc42:	685b      	ldr	r3, [r3, #4]
 801dc44:	9207      	str	r2, [sp, #28]
 801dc46:	9308      	str	r3, [sp, #32]
 801dc48:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801dc4a:	681a      	ldr	r2, [r3, #0]
 801dc4c:	685b      	ldr	r3, [r3, #4]
 801dc4e:	9209      	str	r2, [sp, #36]	@ 0x24
 801dc50:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801dc52:	930a      	str	r3, [sp, #40]	@ 0x28
 801dc54:	0013      	movs	r3, r2
 801dc56:	4463      	add	r3, ip
 801dc58:	4698      	mov	r8, r3
 801dc5a:	0013      	movs	r3, r2
 801dc5c:	4442      	add	r2, r8
 801dc5e:	4691      	mov	r9, r2
 801dc60:	001a      	movs	r2, r3
 801dc62:	444a      	add	r2, r9
 801dc64:	4692      	mov	sl, r2
 801dc66:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801dc68:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801dc6a:	4293      	cmp	r3, r2
 801dc6c:	d800      	bhi.n	801dc70 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801dc6e:	e0d9      	b.n	801de24 <arm_radix4_butterfly_inverse_q31+0x46c>
 801dc70:	4694      	mov	ip, r2
 801dc72:	4644      	mov	r4, r8
 801dc74:	4655      	mov	r5, sl
 801dc76:	4688      	mov	r8, r1
 801dc78:	9b07      	ldr	r3, [sp, #28]
 801dc7a:	17db      	asrs	r3, r3, #31
 801dc7c:	930c      	str	r3, [sp, #48]	@ 0x30
 801dc7e:	9b08      	ldr	r3, [sp, #32]
 801dc80:	17db      	asrs	r3, r3, #31
 801dc82:	930d      	str	r3, [sp, #52]	@ 0x34
 801dc84:	9b05      	ldr	r3, [sp, #20]
 801dc86:	17db      	asrs	r3, r3, #31
 801dc88:	930e      	str	r3, [sp, #56]	@ 0x38
 801dc8a:	9b06      	ldr	r3, [sp, #24]
 801dc8c:	17db      	asrs	r3, r3, #31
 801dc8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dc90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc92:	17db      	asrs	r3, r3, #31
 801dc94:	9310      	str	r3, [sp, #64]	@ 0x40
 801dc96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dc98:	17db      	asrs	r3, r3, #31
 801dc9a:	9311      	str	r3, [sp, #68]	@ 0x44
 801dc9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dc9e:	4463      	add	r3, ip
 801dca0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dca2:	4643      	mov	r3, r8
 801dca4:	4641      	mov	r1, r8
 801dca6:	681a      	ldr	r2, [r3, #0]
 801dca8:	464b      	mov	r3, r9
 801dcaa:	684f      	ldr	r7, [r1, #4]
 801dcac:	4649      	mov	r1, r9
 801dcae:	681b      	ldr	r3, [r3, #0]
 801dcb0:	18d6      	adds	r6, r2, r3
 801dcb2:	1ad3      	subs	r3, r2, r3
 801dcb4:	9301      	str	r3, [sp, #4]
 801dcb6:	684b      	ldr	r3, [r1, #4]
 801dcb8:	1af9      	subs	r1, r7, r3
 801dcba:	9102      	str	r1, [sp, #8]
 801dcbc:	6829      	ldr	r1, [r5, #0]
 801dcbe:	18f8      	adds	r0, r7, r3
 801dcc0:	468c      	mov	ip, r1
 801dcc2:	6827      	ldr	r7, [r4, #0]
 801dcc4:	4467      	add	r7, ip
 801dcc6:	003a      	movs	r2, r7
 801dcc8:	19f3      	adds	r3, r6, r7
 801dcca:	4647      	mov	r7, r8
 801dccc:	109b      	asrs	r3, r3, #2
 801dcce:	603b      	str	r3, [r7, #0]
 801dcd0:	6869      	ldr	r1, [r5, #4]
 801dcd2:	6867      	ldr	r7, [r4, #4]
 801dcd4:	468c      	mov	ip, r1
 801dcd6:	4467      	add	r7, ip
 801dcd8:	003b      	movs	r3, r7
 801dcda:	19c1      	adds	r1, r0, r7
 801dcdc:	4647      	mov	r7, r8
 801dcde:	1ab6      	subs	r6, r6, r2
 801dce0:	1089      	asrs	r1, r1, #2
 801dce2:	6079      	str	r1, [r7, #4]
 801dce4:	17f2      	asrs	r2, r6, #31
 801dce6:	9900      	ldr	r1, [sp, #0]
 801dce8:	4692      	mov	sl, r2
 801dcea:	468c      	mov	ip, r1
 801dcec:	6867      	ldr	r7, [r4, #4]
 801dcee:	6869      	ldr	r1, [r5, #4]
 801dcf0:	44e0      	add	r8, ip
 801dcf2:	1a7f      	subs	r7, r7, r1
 801dcf4:	9703      	str	r7, [sp, #12]
 801dcf6:	6821      	ldr	r1, [r4, #0]
 801dcf8:	682f      	ldr	r7, [r5, #0]
 801dcfa:	1bc9      	subs	r1, r1, r7
 801dcfc:	1ac7      	subs	r7, r0, r3
 801dcfe:	17fa      	asrs	r2, r7, #31
 801dd00:	4693      	mov	fp, r2
 801dd02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dd04:	9a07      	ldr	r2, [sp, #28]
 801dd06:	9104      	str	r1, [sp, #16]
 801dd08:	0030      	movs	r0, r6
 801dd0a:	4651      	mov	r1, sl
 801dd0c:	f7e2 fc58 	bl	80005c0 <__aeabi_lmul>
 801dd10:	9a08      	ldr	r2, [sp, #32]
 801dd12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dd14:	9112      	str	r1, [sp, #72]	@ 0x48
 801dd16:	0038      	movs	r0, r7
 801dd18:	4659      	mov	r1, fp
 801dd1a:	f7e2 fc51 	bl	80005c0 <__aeabi_lmul>
 801dd1e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801dd20:	9a07      	ldr	r2, [sp, #28]
 801dd22:	1a41      	subs	r1, r0, r1
 801dd24:	1049      	asrs	r1, r1, #1
 801dd26:	6021      	str	r1, [r4, #0]
 801dd28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dd2a:	0038      	movs	r0, r7
 801dd2c:	4659      	mov	r1, fp
 801dd2e:	f7e2 fc47 	bl	80005c0 <__aeabi_lmul>
 801dd32:	9a08      	ldr	r2, [sp, #32]
 801dd34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dd36:	000f      	movs	r7, r1
 801dd38:	0030      	movs	r0, r6
 801dd3a:	4651      	mov	r1, sl
 801dd3c:	f7e2 fc40 	bl	80005c0 <__aeabi_lmul>
 801dd40:	9b00      	ldr	r3, [sp, #0]
 801dd42:	187f      	adds	r7, r7, r1
 801dd44:	469c      	mov	ip, r3
 801dd46:	107f      	asrs	r7, r7, #1
 801dd48:	6067      	str	r7, [r4, #4]
 801dd4a:	9a01      	ldr	r2, [sp, #4]
 801dd4c:	9f03      	ldr	r7, [sp, #12]
 801dd4e:	9802      	ldr	r0, [sp, #8]
 801dd50:	1bd7      	subs	r7, r2, r7
 801dd52:	17fe      	asrs	r6, r7, #31
 801dd54:	0031      	movs	r1, r6
 801dd56:	9e04      	ldr	r6, [sp, #16]
 801dd58:	4682      	mov	sl, r0
 801dd5a:	4464      	add	r4, ip
 801dd5c:	46b4      	mov	ip, r6
 801dd5e:	44e2      	add	sl, ip
 801dd60:	4652      	mov	r2, sl
 801dd62:	17d2      	asrs	r2, r2, #31
 801dd64:	4693      	mov	fp, r2
 801dd66:	0038      	movs	r0, r7
 801dd68:	9a05      	ldr	r2, [sp, #20]
 801dd6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dd6c:	9112      	str	r1, [sp, #72]	@ 0x48
 801dd6e:	f7e2 fc27 	bl	80005c0 <__aeabi_lmul>
 801dd72:	9a06      	ldr	r2, [sp, #24]
 801dd74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dd76:	000e      	movs	r6, r1
 801dd78:	4650      	mov	r0, sl
 801dd7a:	4659      	mov	r1, fp
 801dd7c:	f7e2 fc20 	bl	80005c0 <__aeabi_lmul>
 801dd80:	4648      	mov	r0, r9
 801dd82:	1a76      	subs	r6, r6, r1
 801dd84:	1076      	asrs	r6, r6, #1
 801dd86:	6006      	str	r6, [r0, #0]
 801dd88:	9a05      	ldr	r2, [sp, #20]
 801dd8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dd8c:	4650      	mov	r0, sl
 801dd8e:	4659      	mov	r1, fp
 801dd90:	f7e2 fc16 	bl	80005c0 <__aeabi_lmul>
 801dd94:	9a06      	ldr	r2, [sp, #24]
 801dd96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dd98:	000e      	movs	r6, r1
 801dd9a:	0038      	movs	r0, r7
 801dd9c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801dd9e:	f7e2 fc0f 	bl	80005c0 <__aeabi_lmul>
 801dda2:	9a00      	ldr	r2, [sp, #0]
 801dda4:	9f03      	ldr	r7, [sp, #12]
 801dda6:	4694      	mov	ip, r2
 801dda8:	1876      	adds	r6, r6, r1
 801ddaa:	4649      	mov	r1, r9
 801ddac:	44e1      	add	r9, ip
 801ddae:	46bc      	mov	ip, r7
 801ddb0:	9b01      	ldr	r3, [sp, #4]
 801ddb2:	1076      	asrs	r6, r6, #1
 801ddb4:	4463      	add	r3, ip
 801ddb6:	17df      	asrs	r7, r3, #31
 801ddb8:	604e      	str	r6, [r1, #4]
 801ddba:	46ba      	mov	sl, r7
 801ddbc:	001e      	movs	r6, r3
 801ddbe:	9802      	ldr	r0, [sp, #8]
 801ddc0:	9b04      	ldr	r3, [sp, #16]
 801ddc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ddc4:	1ac7      	subs	r7, r0, r3
 801ddc6:	17fb      	asrs	r3, r7, #31
 801ddc8:	469b      	mov	fp, r3
 801ddca:	0030      	movs	r0, r6
 801ddcc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ddce:	4651      	mov	r1, sl
 801ddd0:	f7e2 fbf6 	bl	80005c0 <__aeabi_lmul>
 801ddd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ddd6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ddd8:	9101      	str	r1, [sp, #4]
 801ddda:	0038      	movs	r0, r7
 801dddc:	4659      	mov	r1, fp
 801ddde:	f7e2 fbef 	bl	80005c0 <__aeabi_lmul>
 801dde2:	9801      	ldr	r0, [sp, #4]
 801dde4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dde6:	1a41      	subs	r1, r0, r1
 801dde8:	1049      	asrs	r1, r1, #1
 801ddea:	6029      	str	r1, [r5, #0]
 801ddec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ddee:	0038      	movs	r0, r7
 801ddf0:	4659      	mov	r1, fp
 801ddf2:	f7e2 fbe5 	bl	80005c0 <__aeabi_lmul>
 801ddf6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ddf8:	000f      	movs	r7, r1
 801ddfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ddfc:	0030      	movs	r0, r6
 801ddfe:	4651      	mov	r1, sl
 801de00:	f7e2 fbde 	bl	80005c0 <__aeabi_lmul>
 801de04:	187f      	adds	r7, r7, r1
 801de06:	107f      	asrs	r7, r7, #1
 801de08:	606f      	str	r7, [r5, #4]
 801de0a:	9a00      	ldr	r2, [sp, #0]
 801de0c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801de0e:	4694      	mov	ip, r2
 801de10:	4465      	add	r5, ip
 801de12:	468c      	mov	ip, r1
 801de14:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801de16:	0013      	movs	r3, r2
 801de18:	4462      	add	r2, ip
 801de1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801de1c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801de1e:	429a      	cmp	r2, r3
 801de20:	d900      	bls.n	801de24 <arm_radix4_butterfly_inverse_q31+0x46c>
 801de22:	e73e      	b.n	801dca2 <arm_radix4_butterfly_inverse_q31+0x2ea>
 801de24:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801de26:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801de28:	468c      	mov	ip, r1
 801de2a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801de2c:	4462      	add	r2, ip
 801de2e:	468c      	mov	ip, r1
 801de30:	9216      	str	r2, [sp, #88]	@ 0x58
 801de32:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801de34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801de36:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801de38:	4462      	add	r2, ip
 801de3a:	468c      	mov	ip, r1
 801de3c:	9219      	str	r2, [sp, #100]	@ 0x64
 801de3e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801de40:	3301      	adds	r3, #1
 801de42:	4462      	add	r2, ip
 801de44:	9218      	str	r2, [sp, #96]	@ 0x60
 801de46:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801de48:	9315      	str	r3, [sp, #84]	@ 0x54
 801de4a:	3208      	adds	r2, #8
 801de4c:	9217      	str	r2, [sp, #92]	@ 0x5c
 801de4e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801de50:	4293      	cmp	r3, r2
 801de52:	d800      	bhi.n	801de56 <arm_radix4_butterfly_inverse_q31+0x49e>
 801de54:	e6ec      	b.n	801dc30 <arm_radix4_butterfly_inverse_q31+0x278>
 801de56:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801de58:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801de5a:	009b      	lsls	r3, r3, #2
 801de5c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801de5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801de60:	9213      	str	r2, [sp, #76]	@ 0x4c
 801de62:	089b      	lsrs	r3, r3, #2
 801de64:	9320      	str	r3, [sp, #128]	@ 0x80
 801de66:	2b04      	cmp	r3, #4
 801de68:	d900      	bls.n	801de6c <arm_radix4_butterfly_inverse_q31+0x4b4>
 801de6a:	e6c5      	b.n	801dbf8 <arm_radix4_butterfly_inverse_q31+0x240>
 801de6c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801de6e:	469a      	mov	sl, r3
 801de70:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801de72:	681a      	ldr	r2, [r3, #0]
 801de74:	6918      	ldr	r0, [r3, #16]
 801de76:	4691      	mov	r9, r2
 801de78:	464c      	mov	r4, r9
 801de7a:	4680      	mov	r8, r0
 801de7c:	69de      	ldr	r6, [r3, #28]
 801de7e:	689d      	ldr	r5, [r3, #8]
 801de80:	46b4      	mov	ip, r6
 801de82:	6998      	ldr	r0, [r3, #24]
 801de84:	1964      	adds	r4, r4, r5
 801de86:	6859      	ldr	r1, [r3, #4]
 801de88:	68da      	ldr	r2, [r3, #12]
 801de8a:	4444      	add	r4, r8
 801de8c:	695f      	ldr	r7, [r3, #20]
 801de8e:	1824      	adds	r4, r4, r0
 801de90:	601c      	str	r4, [r3, #0]
 801de92:	188c      	adds	r4, r1, r2
 801de94:	19e4      	adds	r4, r4, r7
 801de96:	4464      	add	r4, ip
 801de98:	605c      	str	r4, [r3, #4]
 801de9a:	464c      	mov	r4, r9
 801de9c:	1b64      	subs	r4, r4, r5
 801de9e:	4444      	add	r4, r8
 801dea0:	1a24      	subs	r4, r4, r0
 801dea2:	609c      	str	r4, [r3, #8]
 801dea4:	1a8c      	subs	r4, r1, r2
 801dea6:	19e4      	adds	r4, r4, r7
 801dea8:	1ba4      	subs	r4, r4, r6
 801deaa:	60dc      	str	r4, [r3, #12]
 801deac:	464c      	mov	r4, r9
 801deae:	4646      	mov	r6, r8
 801deb0:	1aa4      	subs	r4, r4, r2
 801deb2:	1ba4      	subs	r4, r4, r6
 801deb4:	4464      	add	r4, ip
 801deb6:	611c      	str	r4, [r3, #16]
 801deb8:	194c      	adds	r4, r1, r5
 801deba:	1be4      	subs	r4, r4, r7
 801debc:	1a24      	subs	r4, r4, r0
 801debe:	615c      	str	r4, [r3, #20]
 801dec0:	4644      	mov	r4, r8
 801dec2:	4666      	mov	r6, ip
 801dec4:	444a      	add	r2, r9
 801dec6:	1b12      	subs	r2, r2, r4
 801dec8:	1b92      	subs	r2, r2, r6
 801deca:	619a      	str	r2, [r3, #24]
 801decc:	1b4a      	subs	r2, r1, r5
 801dece:	1bd1      	subs	r1, r2, r7
 801ded0:	2201      	movs	r2, #1
 801ded2:	4252      	negs	r2, r2
 801ded4:	4694      	mov	ip, r2
 801ded6:	44e2      	add	sl, ip
 801ded8:	4652      	mov	r2, sl
 801deda:	1809      	adds	r1, r1, r0
 801dedc:	61d9      	str	r1, [r3, #28]
 801dede:	3320      	adds	r3, #32
 801dee0:	2a00      	cmp	r2, #0
 801dee2:	d1c6      	bne.n	801de72 <arm_radix4_butterfly_inverse_q31+0x4ba>
 801dee4:	b027      	add	sp, #156	@ 0x9c
 801dee6:	bc3c      	pop	{r2, r3, r4, r5}
 801dee8:	4690      	mov	r8, r2
 801deea:	4699      	mov	r9, r3
 801deec:	46a2      	mov	sl, r4
 801deee:	46ab      	mov	fp, r5
 801def0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801def2:	469a      	mov	sl, r3
 801def4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801def6:	e7bc      	b.n	801de72 <arm_radix4_butterfly_inverse_q31+0x4ba>

0801def8 <arm_cmplx_mag_squared_q31>:
 801def8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801defa:	464f      	mov	r7, r9
 801defc:	4646      	mov	r6, r8
 801defe:	0004      	movs	r4, r0
 801df00:	b4c0      	push	{r6, r7}
 801df02:	0016      	movs	r6, r2
 801df04:	000f      	movs	r7, r1
 801df06:	2a00      	cmp	r2, #0
 801df08:	d018      	beq.n	801df3c <arm_cmplx_mag_squared_q31+0x44>
 801df0a:	6823      	ldr	r3, [r4, #0]
 801df0c:	6822      	ldr	r2, [r4, #0]
 801df0e:	17d9      	asrs	r1, r3, #31
 801df10:	6863      	ldr	r3, [r4, #4]
 801df12:	0010      	movs	r0, r2
 801df14:	4698      	mov	r8, r3
 801df16:	17db      	asrs	r3, r3, #31
 801df18:	4699      	mov	r9, r3
 801df1a:	000b      	movs	r3, r1
 801df1c:	f7e2 fb50 	bl	80005c0 <__aeabi_lmul>
 801df20:	4642      	mov	r2, r8
 801df22:	104d      	asrs	r5, r1, #1
 801df24:	464b      	mov	r3, r9
 801df26:	4640      	mov	r0, r8
 801df28:	4649      	mov	r1, r9
 801df2a:	f7e2 fb49 	bl	80005c0 <__aeabi_lmul>
 801df2e:	1049      	asrs	r1, r1, #1
 801df30:	1869      	adds	r1, r5, r1
 801df32:	3e01      	subs	r6, #1
 801df34:	c702      	stmia	r7!, {r1}
 801df36:	3408      	adds	r4, #8
 801df38:	2e00      	cmp	r6, #0
 801df3a:	d1e6      	bne.n	801df0a <arm_cmplx_mag_squared_q31+0x12>
 801df3c:	bc0c      	pop	{r2, r3}
 801df3e:	4690      	mov	r8, r2
 801df40:	4699      	mov	r9, r3
 801df42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801df44 <arm_mult_q31>:
 801df44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df46:	4646      	mov	r6, r8
 801df48:	464f      	mov	r7, r9
 801df4a:	4690      	mov	r8, r2
 801df4c:	b4c0      	push	{r6, r7}
 801df4e:	001d      	movs	r5, r3
 801df50:	0006      	movs	r6, r0
 801df52:	000f      	movs	r7, r1
 801df54:	2400      	movs	r4, #0
 801df56:	2b00      	cmp	r3, #0
 801df58:	d020      	beq.n	801df9c <arm_mult_q31+0x58>
 801df5a:	4b12      	ldr	r3, [pc, #72]	@ (801dfa4 <arm_mult_q31+0x60>)
 801df5c:	4699      	mov	r9, r3
 801df5e:	e007      	b.n	801df70 <arm_mult_q31+0x2c>
 801df60:	464b      	mov	r3, r9
 801df62:	4059      	eors	r1, r3
 801df64:	4643      	mov	r3, r8
 801df66:	3d01      	subs	r5, #1
 801df68:	5119      	str	r1, [r3, r4]
 801df6a:	3404      	adds	r4, #4
 801df6c:	2d00      	cmp	r5, #0
 801df6e:	d015      	beq.n	801df9c <arm_mult_q31+0x58>
 801df70:	5933      	ldr	r3, [r6, r4]
 801df72:	593a      	ldr	r2, [r7, r4]
 801df74:	17d9      	asrs	r1, r3, #31
 801df76:	593b      	ldr	r3, [r7, r4]
 801df78:	5930      	ldr	r0, [r6, r4]
 801df7a:	17db      	asrs	r3, r3, #31
 801df7c:	f7e2 fb20 	bl	80005c0 <__aeabi_lmul>
 801df80:	004b      	lsls	r3, r1, #1
 801df82:	0fc0      	lsrs	r0, r0, #31
 801df84:	4318      	orrs	r0, r3
 801df86:	17c9      	asrs	r1, r1, #31
 801df88:	17c3      	asrs	r3, r0, #31
 801df8a:	428b      	cmp	r3, r1
 801df8c:	d1e8      	bne.n	801df60 <arm_mult_q31+0x1c>
 801df8e:	0001      	movs	r1, r0
 801df90:	4643      	mov	r3, r8
 801df92:	3d01      	subs	r5, #1
 801df94:	5119      	str	r1, [r3, r4]
 801df96:	3404      	adds	r4, #4
 801df98:	2d00      	cmp	r5, #0
 801df9a:	d1e9      	bne.n	801df70 <arm_mult_q31+0x2c>
 801df9c:	bc0c      	pop	{r2, r3}
 801df9e:	4690      	mov	r8, r2
 801dfa0:	4699      	mov	r9, r3
 801dfa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dfa4:	7fffffff 	.word	0x7fffffff

0801dfa8 <arm_add_q31>:
 801dfa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfaa:	465f      	mov	r7, fp
 801dfac:	4656      	mov	r6, sl
 801dfae:	464d      	mov	r5, r9
 801dfb0:	4644      	mov	r4, r8
 801dfb2:	b4f0      	push	{r4, r5, r6, r7}
 801dfb4:	4693      	mov	fp, r2
 801dfb6:	b083      	sub	sp, #12
 801dfb8:	4681      	mov	r9, r0
 801dfba:	468a      	mov	sl, r1
 801dfbc:	4698      	mov	r8, r3
 801dfbe:	2200      	movs	r2, #0
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	d020      	beq.n	801e006 <arm_add_q31+0x5e>
 801dfc4:	4649      	mov	r1, r9
 801dfc6:	4653      	mov	r3, sl
 801dfc8:	588e      	ldr	r6, [r1, r2]
 801dfca:	589b      	ldr	r3, [r3, r2]
 801dfcc:	17f7      	asrs	r7, r6, #31
 801dfce:	001c      	movs	r4, r3
 801dfd0:	0030      	movs	r0, r6
 801dfd2:	0039      	movs	r1, r7
 801dfd4:	17dd      	asrs	r5, r3, #31
 801dfd6:	46b4      	mov	ip, r6
 801dfd8:	1900      	adds	r0, r0, r4
 801dfda:	4169      	adcs	r1, r5
 801dfdc:	4463      	add	r3, ip
 801dfde:	9000      	str	r0, [sp, #0]
 801dfe0:	9101      	str	r1, [sp, #4]
 801dfe2:	17d9      	asrs	r1, r3, #31
 801dfe4:	468c      	mov	ip, r1
 801dfe6:	9901      	ldr	r1, [sp, #4]
 801dfe8:	458c      	cmp	ip, r1
 801dfea:	d002      	beq.n	801dff2 <arm_add_q31+0x4a>
 801dfec:	17cb      	asrs	r3, r1, #31
 801dfee:	4909      	ldr	r1, [pc, #36]	@ (801e014 <arm_add_q31+0x6c>)
 801dff0:	404b      	eors	r3, r1
 801dff2:	4659      	mov	r1, fp
 801dff4:	508b      	str	r3, [r1, r2]
 801dff6:	2301      	movs	r3, #1
 801dff8:	425b      	negs	r3, r3
 801dffa:	469c      	mov	ip, r3
 801dffc:	44e0      	add	r8, ip
 801dffe:	4643      	mov	r3, r8
 801e000:	3204      	adds	r2, #4
 801e002:	2b00      	cmp	r3, #0
 801e004:	d1de      	bne.n	801dfc4 <arm_add_q31+0x1c>
 801e006:	b003      	add	sp, #12
 801e008:	bc3c      	pop	{r2, r3, r4, r5}
 801e00a:	4690      	mov	r8, r2
 801e00c:	4699      	mov	r9, r3
 801e00e:	46a2      	mov	sl, r4
 801e010:	46ab      	mov	fp, r5
 801e012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e014:	7fffffff 	.word	0x7fffffff

0801e018 <atof>:
 801e018:	b510      	push	{r4, lr}
 801e01a:	2100      	movs	r1, #0
 801e01c:	f000 fe12 	bl	801ec44 <strtod>
 801e020:	bd10      	pop	{r4, pc}

0801e022 <atoi>:
 801e022:	b510      	push	{r4, lr}
 801e024:	220a      	movs	r2, #10
 801e026:	2100      	movs	r1, #0
 801e028:	f000 fea4 	bl	801ed74 <strtol>
 801e02c:	bd10      	pop	{r4, pc}
	...

0801e030 <sulp>:
 801e030:	b570      	push	{r4, r5, r6, lr}
 801e032:	0016      	movs	r6, r2
 801e034:	000d      	movs	r5, r1
 801e036:	f003 fcf3 	bl	8021a20 <__ulp>
 801e03a:	2e00      	cmp	r6, #0
 801e03c:	d00d      	beq.n	801e05a <sulp+0x2a>
 801e03e:	236b      	movs	r3, #107	@ 0x6b
 801e040:	006a      	lsls	r2, r5, #1
 801e042:	0d52      	lsrs	r2, r2, #21
 801e044:	1a9b      	subs	r3, r3, r2
 801e046:	2b00      	cmp	r3, #0
 801e048:	dd07      	ble.n	801e05a <sulp+0x2a>
 801e04a:	2400      	movs	r4, #0
 801e04c:	4a03      	ldr	r2, [pc, #12]	@ (801e05c <sulp+0x2c>)
 801e04e:	051b      	lsls	r3, r3, #20
 801e050:	189d      	adds	r5, r3, r2
 801e052:	002b      	movs	r3, r5
 801e054:	0022      	movs	r2, r4
 801e056:	f7e4 faf1 	bl	800263c <__aeabi_dmul>
 801e05a:	bd70      	pop	{r4, r5, r6, pc}
 801e05c:	3ff00000 	.word	0x3ff00000

0801e060 <_strtod_l>:
 801e060:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e062:	b0a3      	sub	sp, #140	@ 0x8c
 801e064:	921b      	str	r2, [sp, #108]	@ 0x6c
 801e066:	2200      	movs	r2, #0
 801e068:	2600      	movs	r6, #0
 801e06a:	2700      	movs	r7, #0
 801e06c:	9005      	str	r0, [sp, #20]
 801e06e:	9109      	str	r1, [sp, #36]	@ 0x24
 801e070:	921e      	str	r2, [sp, #120]	@ 0x78
 801e072:	911d      	str	r1, [sp, #116]	@ 0x74
 801e074:	780a      	ldrb	r2, [r1, #0]
 801e076:	2a2b      	cmp	r2, #43	@ 0x2b
 801e078:	d053      	beq.n	801e122 <_strtod_l+0xc2>
 801e07a:	d83f      	bhi.n	801e0fc <_strtod_l+0x9c>
 801e07c:	2a0d      	cmp	r2, #13
 801e07e:	d839      	bhi.n	801e0f4 <_strtod_l+0x94>
 801e080:	2a08      	cmp	r2, #8
 801e082:	d839      	bhi.n	801e0f8 <_strtod_l+0x98>
 801e084:	2a00      	cmp	r2, #0
 801e086:	d042      	beq.n	801e10e <_strtod_l+0xae>
 801e088:	2200      	movs	r2, #0
 801e08a:	9212      	str	r2, [sp, #72]	@ 0x48
 801e08c:	2100      	movs	r1, #0
 801e08e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801e090:	910c      	str	r1, [sp, #48]	@ 0x30
 801e092:	782a      	ldrb	r2, [r5, #0]
 801e094:	2a30      	cmp	r2, #48	@ 0x30
 801e096:	d000      	beq.n	801e09a <_strtod_l+0x3a>
 801e098:	e083      	b.n	801e1a2 <_strtod_l+0x142>
 801e09a:	786a      	ldrb	r2, [r5, #1]
 801e09c:	3120      	adds	r1, #32
 801e09e:	438a      	bics	r2, r1
 801e0a0:	2a58      	cmp	r2, #88	@ 0x58
 801e0a2:	d000      	beq.n	801e0a6 <_strtod_l+0x46>
 801e0a4:	e073      	b.n	801e18e <_strtod_l+0x12e>
 801e0a6:	9302      	str	r3, [sp, #8]
 801e0a8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e0aa:	4a95      	ldr	r2, [pc, #596]	@ (801e300 <_strtod_l+0x2a0>)
 801e0ac:	9301      	str	r3, [sp, #4]
 801e0ae:	ab1e      	add	r3, sp, #120	@ 0x78
 801e0b0:	9300      	str	r3, [sp, #0]
 801e0b2:	9805      	ldr	r0, [sp, #20]
 801e0b4:	ab1f      	add	r3, sp, #124	@ 0x7c
 801e0b6:	a91d      	add	r1, sp, #116	@ 0x74
 801e0b8:	f002 fd62 	bl	8020b80 <__gethex>
 801e0bc:	230f      	movs	r3, #15
 801e0be:	0002      	movs	r2, r0
 801e0c0:	401a      	ands	r2, r3
 801e0c2:	0004      	movs	r4, r0
 801e0c4:	9206      	str	r2, [sp, #24]
 801e0c6:	4218      	tst	r0, r3
 801e0c8:	d005      	beq.n	801e0d6 <_strtod_l+0x76>
 801e0ca:	2a06      	cmp	r2, #6
 801e0cc:	d12b      	bne.n	801e126 <_strtod_l+0xc6>
 801e0ce:	2300      	movs	r3, #0
 801e0d0:	3501      	adds	r5, #1
 801e0d2:	951d      	str	r5, [sp, #116]	@ 0x74
 801e0d4:	9312      	str	r3, [sp, #72]	@ 0x48
 801e0d6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e0d8:	2b00      	cmp	r3, #0
 801e0da:	d002      	beq.n	801e0e2 <_strtod_l+0x82>
 801e0dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e0de:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e0e0:	6013      	str	r3, [r2, #0]
 801e0e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e0e4:	2b00      	cmp	r3, #0
 801e0e6:	d019      	beq.n	801e11c <_strtod_l+0xbc>
 801e0e8:	2380      	movs	r3, #128	@ 0x80
 801e0ea:	0030      	movs	r0, r6
 801e0ec:	061b      	lsls	r3, r3, #24
 801e0ee:	18f9      	adds	r1, r7, r3
 801e0f0:	b023      	add	sp, #140	@ 0x8c
 801e0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e0f4:	2a20      	cmp	r2, #32
 801e0f6:	d1c7      	bne.n	801e088 <_strtod_l+0x28>
 801e0f8:	3101      	adds	r1, #1
 801e0fa:	e7ba      	b.n	801e072 <_strtod_l+0x12>
 801e0fc:	2a2d      	cmp	r2, #45	@ 0x2d
 801e0fe:	d1c3      	bne.n	801e088 <_strtod_l+0x28>
 801e100:	3a2c      	subs	r2, #44	@ 0x2c
 801e102:	9212      	str	r2, [sp, #72]	@ 0x48
 801e104:	1c4a      	adds	r2, r1, #1
 801e106:	921d      	str	r2, [sp, #116]	@ 0x74
 801e108:	784a      	ldrb	r2, [r1, #1]
 801e10a:	2a00      	cmp	r2, #0
 801e10c:	d1be      	bne.n	801e08c <_strtod_l+0x2c>
 801e10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e110:	931d      	str	r3, [sp, #116]	@ 0x74
 801e112:	2300      	movs	r3, #0
 801e114:	9312      	str	r3, [sp, #72]	@ 0x48
 801e116:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e118:	2b00      	cmp	r3, #0
 801e11a:	d1df      	bne.n	801e0dc <_strtod_l+0x7c>
 801e11c:	0030      	movs	r0, r6
 801e11e:	0039      	movs	r1, r7
 801e120:	e7e6      	b.n	801e0f0 <_strtod_l+0x90>
 801e122:	2200      	movs	r2, #0
 801e124:	e7ed      	b.n	801e102 <_strtod_l+0xa2>
 801e126:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e128:	2a00      	cmp	r2, #0
 801e12a:	d007      	beq.n	801e13c <_strtod_l+0xdc>
 801e12c:	2135      	movs	r1, #53	@ 0x35
 801e12e:	a820      	add	r0, sp, #128	@ 0x80
 801e130:	f003 fd6c 	bl	8021c0c <__copybits>
 801e134:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e136:	9805      	ldr	r0, [sp, #20]
 801e138:	f003 f926 	bl	8021388 <_Bfree>
 801e13c:	9806      	ldr	r0, [sp, #24]
 801e13e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e140:	3801      	subs	r0, #1
 801e142:	2804      	cmp	r0, #4
 801e144:	d806      	bhi.n	801e154 <_strtod_l+0xf4>
 801e146:	f7e2 f819 	bl	800017c <__gnu_thumb1_case_uqi>
 801e14a:	0312      	.short	0x0312
 801e14c:	1e1c      	.short	0x1e1c
 801e14e:	12          	.byte	0x12
 801e14f:	00          	.byte	0x00
 801e150:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e152:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801e154:	05e4      	lsls	r4, r4, #23
 801e156:	d502      	bpl.n	801e15e <_strtod_l+0xfe>
 801e158:	2380      	movs	r3, #128	@ 0x80
 801e15a:	061b      	lsls	r3, r3, #24
 801e15c:	431f      	orrs	r7, r3
 801e15e:	4b69      	ldr	r3, [pc, #420]	@ (801e304 <_strtod_l+0x2a4>)
 801e160:	423b      	tst	r3, r7
 801e162:	d1b8      	bne.n	801e0d6 <_strtod_l+0x76>
 801e164:	f001 fd90 	bl	801fc88 <__errno>
 801e168:	2322      	movs	r3, #34	@ 0x22
 801e16a:	6003      	str	r3, [r0, #0]
 801e16c:	e7b3      	b.n	801e0d6 <_strtod_l+0x76>
 801e16e:	4966      	ldr	r1, [pc, #408]	@ (801e308 <_strtod_l+0x2a8>)
 801e170:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e172:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e174:	400a      	ands	r2, r1
 801e176:	4965      	ldr	r1, [pc, #404]	@ (801e30c <_strtod_l+0x2ac>)
 801e178:	185b      	adds	r3, r3, r1
 801e17a:	051b      	lsls	r3, r3, #20
 801e17c:	431a      	orrs	r2, r3
 801e17e:	0017      	movs	r7, r2
 801e180:	e7e8      	b.n	801e154 <_strtod_l+0xf4>
 801e182:	4f60      	ldr	r7, [pc, #384]	@ (801e304 <_strtod_l+0x2a4>)
 801e184:	e7e6      	b.n	801e154 <_strtod_l+0xf4>
 801e186:	2601      	movs	r6, #1
 801e188:	4f61      	ldr	r7, [pc, #388]	@ (801e310 <_strtod_l+0x2b0>)
 801e18a:	4276      	negs	r6, r6
 801e18c:	e7e2      	b.n	801e154 <_strtod_l+0xf4>
 801e18e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e190:	1c5a      	adds	r2, r3, #1
 801e192:	921d      	str	r2, [sp, #116]	@ 0x74
 801e194:	785b      	ldrb	r3, [r3, #1]
 801e196:	2b30      	cmp	r3, #48	@ 0x30
 801e198:	d0f9      	beq.n	801e18e <_strtod_l+0x12e>
 801e19a:	2b00      	cmp	r3, #0
 801e19c:	d09b      	beq.n	801e0d6 <_strtod_l+0x76>
 801e19e:	2301      	movs	r3, #1
 801e1a0:	930c      	str	r3, [sp, #48]	@ 0x30
 801e1a2:	2500      	movs	r5, #0
 801e1a4:	220a      	movs	r2, #10
 801e1a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e1a8:	950d      	str	r5, [sp, #52]	@ 0x34
 801e1aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e1ac:	9508      	str	r5, [sp, #32]
 801e1ae:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801e1b0:	7804      	ldrb	r4, [r0, #0]
 801e1b2:	0023      	movs	r3, r4
 801e1b4:	3b30      	subs	r3, #48	@ 0x30
 801e1b6:	b2d9      	uxtb	r1, r3
 801e1b8:	2909      	cmp	r1, #9
 801e1ba:	d927      	bls.n	801e20c <_strtod_l+0x1ac>
 801e1bc:	2201      	movs	r2, #1
 801e1be:	4955      	ldr	r1, [pc, #340]	@ (801e314 <_strtod_l+0x2b4>)
 801e1c0:	f001 fcd4 	bl	801fb6c <strncmp>
 801e1c4:	2800      	cmp	r0, #0
 801e1c6:	d031      	beq.n	801e22c <_strtod_l+0x1cc>
 801e1c8:	2000      	movs	r0, #0
 801e1ca:	0023      	movs	r3, r4
 801e1cc:	4684      	mov	ip, r0
 801e1ce:	9a08      	ldr	r2, [sp, #32]
 801e1d0:	900e      	str	r0, [sp, #56]	@ 0x38
 801e1d2:	9206      	str	r2, [sp, #24]
 801e1d4:	2220      	movs	r2, #32
 801e1d6:	0019      	movs	r1, r3
 801e1d8:	4391      	bics	r1, r2
 801e1da:	000a      	movs	r2, r1
 801e1dc:	2100      	movs	r1, #0
 801e1de:	9107      	str	r1, [sp, #28]
 801e1e0:	2a45      	cmp	r2, #69	@ 0x45
 801e1e2:	d000      	beq.n	801e1e6 <_strtod_l+0x186>
 801e1e4:	e0c0      	b.n	801e368 <_strtod_l+0x308>
 801e1e6:	9b06      	ldr	r3, [sp, #24]
 801e1e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e1ea:	4303      	orrs	r3, r0
 801e1ec:	4313      	orrs	r3, r2
 801e1ee:	428b      	cmp	r3, r1
 801e1f0:	d08d      	beq.n	801e10e <_strtod_l+0xae>
 801e1f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e1f4:	9309      	str	r3, [sp, #36]	@ 0x24
 801e1f6:	3301      	adds	r3, #1
 801e1f8:	931d      	str	r3, [sp, #116]	@ 0x74
 801e1fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e1fc:	785b      	ldrb	r3, [r3, #1]
 801e1fe:	2b2b      	cmp	r3, #43	@ 0x2b
 801e200:	d070      	beq.n	801e2e4 <_strtod_l+0x284>
 801e202:	000c      	movs	r4, r1
 801e204:	2b2d      	cmp	r3, #45	@ 0x2d
 801e206:	d173      	bne.n	801e2f0 <_strtod_l+0x290>
 801e208:	2401      	movs	r4, #1
 801e20a:	e06c      	b.n	801e2e6 <_strtod_l+0x286>
 801e20c:	9908      	ldr	r1, [sp, #32]
 801e20e:	2908      	cmp	r1, #8
 801e210:	dc09      	bgt.n	801e226 <_strtod_l+0x1c6>
 801e212:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e214:	4351      	muls	r1, r2
 801e216:	185b      	adds	r3, r3, r1
 801e218:	930d      	str	r3, [sp, #52]	@ 0x34
 801e21a:	9b08      	ldr	r3, [sp, #32]
 801e21c:	3001      	adds	r0, #1
 801e21e:	3301      	adds	r3, #1
 801e220:	9308      	str	r3, [sp, #32]
 801e222:	901d      	str	r0, [sp, #116]	@ 0x74
 801e224:	e7c3      	b.n	801e1ae <_strtod_l+0x14e>
 801e226:	4355      	muls	r5, r2
 801e228:	195d      	adds	r5, r3, r5
 801e22a:	e7f6      	b.n	801e21a <_strtod_l+0x1ba>
 801e22c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e22e:	1c5a      	adds	r2, r3, #1
 801e230:	921d      	str	r2, [sp, #116]	@ 0x74
 801e232:	9a08      	ldr	r2, [sp, #32]
 801e234:	785b      	ldrb	r3, [r3, #1]
 801e236:	2a00      	cmp	r2, #0
 801e238:	d03a      	beq.n	801e2b0 <_strtod_l+0x250>
 801e23a:	900e      	str	r0, [sp, #56]	@ 0x38
 801e23c:	9206      	str	r2, [sp, #24]
 801e23e:	001a      	movs	r2, r3
 801e240:	3a30      	subs	r2, #48	@ 0x30
 801e242:	2a09      	cmp	r2, #9
 801e244:	d912      	bls.n	801e26c <_strtod_l+0x20c>
 801e246:	2201      	movs	r2, #1
 801e248:	4694      	mov	ip, r2
 801e24a:	e7c3      	b.n	801e1d4 <_strtod_l+0x174>
 801e24c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e24e:	3001      	adds	r0, #1
 801e250:	1c5a      	adds	r2, r3, #1
 801e252:	921d      	str	r2, [sp, #116]	@ 0x74
 801e254:	785b      	ldrb	r3, [r3, #1]
 801e256:	2b30      	cmp	r3, #48	@ 0x30
 801e258:	d0f8      	beq.n	801e24c <_strtod_l+0x1ec>
 801e25a:	001a      	movs	r2, r3
 801e25c:	3a31      	subs	r2, #49	@ 0x31
 801e25e:	2a08      	cmp	r2, #8
 801e260:	d83b      	bhi.n	801e2da <_strtod_l+0x27a>
 801e262:	900e      	str	r0, [sp, #56]	@ 0x38
 801e264:	2000      	movs	r0, #0
 801e266:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801e268:	9006      	str	r0, [sp, #24]
 801e26a:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e26c:	001a      	movs	r2, r3
 801e26e:	1c41      	adds	r1, r0, #1
 801e270:	3a30      	subs	r2, #48	@ 0x30
 801e272:	2b30      	cmp	r3, #48	@ 0x30
 801e274:	d016      	beq.n	801e2a4 <_strtod_l+0x244>
 801e276:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e278:	185b      	adds	r3, r3, r1
 801e27a:	930e      	str	r3, [sp, #56]	@ 0x38
 801e27c:	9b06      	ldr	r3, [sp, #24]
 801e27e:	210a      	movs	r1, #10
 801e280:	469c      	mov	ip, r3
 801e282:	4484      	add	ip, r0
 801e284:	459c      	cmp	ip, r3
 801e286:	d115      	bne.n	801e2b4 <_strtod_l+0x254>
 801e288:	9906      	ldr	r1, [sp, #24]
 801e28a:	9b06      	ldr	r3, [sp, #24]
 801e28c:	3101      	adds	r1, #1
 801e28e:	1809      	adds	r1, r1, r0
 801e290:	181b      	adds	r3, r3, r0
 801e292:	9106      	str	r1, [sp, #24]
 801e294:	2b08      	cmp	r3, #8
 801e296:	dc19      	bgt.n	801e2cc <_strtod_l+0x26c>
 801e298:	230a      	movs	r3, #10
 801e29a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e29c:	434b      	muls	r3, r1
 801e29e:	2100      	movs	r1, #0
 801e2a0:	18d3      	adds	r3, r2, r3
 801e2a2:	930d      	str	r3, [sp, #52]	@ 0x34
 801e2a4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e2a6:	0008      	movs	r0, r1
 801e2a8:	1c5a      	adds	r2, r3, #1
 801e2aa:	921d      	str	r2, [sp, #116]	@ 0x74
 801e2ac:	785b      	ldrb	r3, [r3, #1]
 801e2ae:	e7c6      	b.n	801e23e <_strtod_l+0x1de>
 801e2b0:	9808      	ldr	r0, [sp, #32]
 801e2b2:	e7d0      	b.n	801e256 <_strtod_l+0x1f6>
 801e2b4:	1c5c      	adds	r4, r3, #1
 801e2b6:	2b08      	cmp	r3, #8
 801e2b8:	dc04      	bgt.n	801e2c4 <_strtod_l+0x264>
 801e2ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e2bc:	434b      	muls	r3, r1
 801e2be:	930d      	str	r3, [sp, #52]	@ 0x34
 801e2c0:	0023      	movs	r3, r4
 801e2c2:	e7df      	b.n	801e284 <_strtod_l+0x224>
 801e2c4:	2c10      	cmp	r4, #16
 801e2c6:	dcfb      	bgt.n	801e2c0 <_strtod_l+0x260>
 801e2c8:	434d      	muls	r5, r1
 801e2ca:	e7f9      	b.n	801e2c0 <_strtod_l+0x260>
 801e2cc:	2100      	movs	r1, #0
 801e2ce:	2b0f      	cmp	r3, #15
 801e2d0:	dce8      	bgt.n	801e2a4 <_strtod_l+0x244>
 801e2d2:	230a      	movs	r3, #10
 801e2d4:	435d      	muls	r5, r3
 801e2d6:	1955      	adds	r5, r2, r5
 801e2d8:	e7e4      	b.n	801e2a4 <_strtod_l+0x244>
 801e2da:	2200      	movs	r2, #0
 801e2dc:	920e      	str	r2, [sp, #56]	@ 0x38
 801e2de:	9206      	str	r2, [sp, #24]
 801e2e0:	3201      	adds	r2, #1
 801e2e2:	e7b1      	b.n	801e248 <_strtod_l+0x1e8>
 801e2e4:	2400      	movs	r4, #0
 801e2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e2e8:	3302      	adds	r3, #2
 801e2ea:	931d      	str	r3, [sp, #116]	@ 0x74
 801e2ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e2ee:	789b      	ldrb	r3, [r3, #2]
 801e2f0:	001a      	movs	r2, r3
 801e2f2:	3a30      	subs	r2, #48	@ 0x30
 801e2f4:	2a09      	cmp	r2, #9
 801e2f6:	d913      	bls.n	801e320 <_strtod_l+0x2c0>
 801e2f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e2fa:	921d      	str	r2, [sp, #116]	@ 0x74
 801e2fc:	2200      	movs	r2, #0
 801e2fe:	e032      	b.n	801e366 <_strtod_l+0x306>
 801e300:	08025274 	.word	0x08025274
 801e304:	7ff00000 	.word	0x7ff00000
 801e308:	ffefffff 	.word	0xffefffff
 801e30c:	00000433 	.word	0x00000433
 801e310:	7fffffff 	.word	0x7fffffff
 801e314:	0802525c 	.word	0x0802525c
 801e318:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e31a:	1c5a      	adds	r2, r3, #1
 801e31c:	921d      	str	r2, [sp, #116]	@ 0x74
 801e31e:	785b      	ldrb	r3, [r3, #1]
 801e320:	2b30      	cmp	r3, #48	@ 0x30
 801e322:	d0f9      	beq.n	801e318 <_strtod_l+0x2b8>
 801e324:	2200      	movs	r2, #0
 801e326:	9207      	str	r2, [sp, #28]
 801e328:	001a      	movs	r2, r3
 801e32a:	3a31      	subs	r2, #49	@ 0x31
 801e32c:	2a08      	cmp	r2, #8
 801e32e:	d81b      	bhi.n	801e368 <_strtod_l+0x308>
 801e330:	3b30      	subs	r3, #48	@ 0x30
 801e332:	9310      	str	r3, [sp, #64]	@ 0x40
 801e334:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e336:	9307      	str	r3, [sp, #28]
 801e338:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e33a:	1c59      	adds	r1, r3, #1
 801e33c:	911d      	str	r1, [sp, #116]	@ 0x74
 801e33e:	785b      	ldrb	r3, [r3, #1]
 801e340:	001a      	movs	r2, r3
 801e342:	3a30      	subs	r2, #48	@ 0x30
 801e344:	2a09      	cmp	r2, #9
 801e346:	d93a      	bls.n	801e3be <_strtod_l+0x35e>
 801e348:	9a07      	ldr	r2, [sp, #28]
 801e34a:	1a8a      	subs	r2, r1, r2
 801e34c:	49b4      	ldr	r1, [pc, #720]	@ (801e620 <_strtod_l+0x5c0>)
 801e34e:	9107      	str	r1, [sp, #28]
 801e350:	2a08      	cmp	r2, #8
 801e352:	dc04      	bgt.n	801e35e <_strtod_l+0x2fe>
 801e354:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e356:	9207      	str	r2, [sp, #28]
 801e358:	428a      	cmp	r2, r1
 801e35a:	dd00      	ble.n	801e35e <_strtod_l+0x2fe>
 801e35c:	9107      	str	r1, [sp, #28]
 801e35e:	2c00      	cmp	r4, #0
 801e360:	d002      	beq.n	801e368 <_strtod_l+0x308>
 801e362:	9a07      	ldr	r2, [sp, #28]
 801e364:	4252      	negs	r2, r2
 801e366:	9207      	str	r2, [sp, #28]
 801e368:	9a06      	ldr	r2, [sp, #24]
 801e36a:	2a00      	cmp	r2, #0
 801e36c:	d14d      	bne.n	801e40a <_strtod_l+0x3aa>
 801e36e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e370:	4310      	orrs	r0, r2
 801e372:	d000      	beq.n	801e376 <_strtod_l+0x316>
 801e374:	e6af      	b.n	801e0d6 <_strtod_l+0x76>
 801e376:	4662      	mov	r2, ip
 801e378:	2a00      	cmp	r2, #0
 801e37a:	d000      	beq.n	801e37e <_strtod_l+0x31e>
 801e37c:	e6c7      	b.n	801e10e <_strtod_l+0xae>
 801e37e:	2b69      	cmp	r3, #105	@ 0x69
 801e380:	d027      	beq.n	801e3d2 <_strtod_l+0x372>
 801e382:	dc23      	bgt.n	801e3cc <_strtod_l+0x36c>
 801e384:	2b49      	cmp	r3, #73	@ 0x49
 801e386:	d024      	beq.n	801e3d2 <_strtod_l+0x372>
 801e388:	2b4e      	cmp	r3, #78	@ 0x4e
 801e38a:	d000      	beq.n	801e38e <_strtod_l+0x32e>
 801e38c:	e6bf      	b.n	801e10e <_strtod_l+0xae>
 801e38e:	49a5      	ldr	r1, [pc, #660]	@ (801e624 <_strtod_l+0x5c4>)
 801e390:	a81d      	add	r0, sp, #116	@ 0x74
 801e392:	f002 fe2b 	bl	8020fec <__match>
 801e396:	2800      	cmp	r0, #0
 801e398:	d100      	bne.n	801e39c <_strtod_l+0x33c>
 801e39a:	e6b8      	b.n	801e10e <_strtod_l+0xae>
 801e39c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e39e:	781b      	ldrb	r3, [r3, #0]
 801e3a0:	2b28      	cmp	r3, #40	@ 0x28
 801e3a2:	d12c      	bne.n	801e3fe <_strtod_l+0x39e>
 801e3a4:	49a0      	ldr	r1, [pc, #640]	@ (801e628 <_strtod_l+0x5c8>)
 801e3a6:	aa20      	add	r2, sp, #128	@ 0x80
 801e3a8:	a81d      	add	r0, sp, #116	@ 0x74
 801e3aa:	f002 fe33 	bl	8021014 <__hexnan>
 801e3ae:	2805      	cmp	r0, #5
 801e3b0:	d125      	bne.n	801e3fe <_strtod_l+0x39e>
 801e3b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e3b4:	4a9d      	ldr	r2, [pc, #628]	@ (801e62c <_strtod_l+0x5cc>)
 801e3b6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e3b8:	431a      	orrs	r2, r3
 801e3ba:	0017      	movs	r7, r2
 801e3bc:	e68b      	b.n	801e0d6 <_strtod_l+0x76>
 801e3be:	220a      	movs	r2, #10
 801e3c0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e3c2:	434a      	muls	r2, r1
 801e3c4:	18d2      	adds	r2, r2, r3
 801e3c6:	3a30      	subs	r2, #48	@ 0x30
 801e3c8:	9210      	str	r2, [sp, #64]	@ 0x40
 801e3ca:	e7b5      	b.n	801e338 <_strtod_l+0x2d8>
 801e3cc:	2b6e      	cmp	r3, #110	@ 0x6e
 801e3ce:	d0de      	beq.n	801e38e <_strtod_l+0x32e>
 801e3d0:	e69d      	b.n	801e10e <_strtod_l+0xae>
 801e3d2:	4997      	ldr	r1, [pc, #604]	@ (801e630 <_strtod_l+0x5d0>)
 801e3d4:	a81d      	add	r0, sp, #116	@ 0x74
 801e3d6:	f002 fe09 	bl	8020fec <__match>
 801e3da:	2800      	cmp	r0, #0
 801e3dc:	d100      	bne.n	801e3e0 <_strtod_l+0x380>
 801e3de:	e696      	b.n	801e10e <_strtod_l+0xae>
 801e3e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e3e2:	4994      	ldr	r1, [pc, #592]	@ (801e634 <_strtod_l+0x5d4>)
 801e3e4:	3b01      	subs	r3, #1
 801e3e6:	a81d      	add	r0, sp, #116	@ 0x74
 801e3e8:	931d      	str	r3, [sp, #116]	@ 0x74
 801e3ea:	f002 fdff 	bl	8020fec <__match>
 801e3ee:	2800      	cmp	r0, #0
 801e3f0:	d102      	bne.n	801e3f8 <_strtod_l+0x398>
 801e3f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e3f4:	3301      	adds	r3, #1
 801e3f6:	931d      	str	r3, [sp, #116]	@ 0x74
 801e3f8:	2600      	movs	r6, #0
 801e3fa:	4f8c      	ldr	r7, [pc, #560]	@ (801e62c <_strtod_l+0x5cc>)
 801e3fc:	e66b      	b.n	801e0d6 <_strtod_l+0x76>
 801e3fe:	488e      	ldr	r0, [pc, #568]	@ (801e638 <_strtod_l+0x5d8>)
 801e400:	f001 fc84 	bl	801fd0c <nan>
 801e404:	0006      	movs	r6, r0
 801e406:	000f      	movs	r7, r1
 801e408:	e665      	b.n	801e0d6 <_strtod_l+0x76>
 801e40a:	9b07      	ldr	r3, [sp, #28]
 801e40c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e40e:	1a9b      	subs	r3, r3, r2
 801e410:	930c      	str	r3, [sp, #48]	@ 0x30
 801e412:	9b08      	ldr	r3, [sp, #32]
 801e414:	2b00      	cmp	r3, #0
 801e416:	d101      	bne.n	801e41c <_strtod_l+0x3bc>
 801e418:	9b06      	ldr	r3, [sp, #24]
 801e41a:	9308      	str	r3, [sp, #32]
 801e41c:	9c06      	ldr	r4, [sp, #24]
 801e41e:	2c10      	cmp	r4, #16
 801e420:	dd00      	ble.n	801e424 <_strtod_l+0x3c4>
 801e422:	2410      	movs	r4, #16
 801e424:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e426:	f7e4 fff9 	bl	800341c <__aeabi_ui2d>
 801e42a:	9b06      	ldr	r3, [sp, #24]
 801e42c:	0006      	movs	r6, r0
 801e42e:	000f      	movs	r7, r1
 801e430:	2b09      	cmp	r3, #9
 801e432:	dc13      	bgt.n	801e45c <_strtod_l+0x3fc>
 801e434:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e436:	2b00      	cmp	r3, #0
 801e438:	d100      	bne.n	801e43c <_strtod_l+0x3dc>
 801e43a:	e64c      	b.n	801e0d6 <_strtod_l+0x76>
 801e43c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e43e:	2b00      	cmp	r3, #0
 801e440:	dc00      	bgt.n	801e444 <_strtod_l+0x3e4>
 801e442:	e07e      	b.n	801e542 <_strtod_l+0x4e2>
 801e444:	2b16      	cmp	r3, #22
 801e446:	dc63      	bgt.n	801e510 <_strtod_l+0x4b0>
 801e448:	497c      	ldr	r1, [pc, #496]	@ (801e63c <_strtod_l+0x5dc>)
 801e44a:	00db      	lsls	r3, r3, #3
 801e44c:	18c9      	adds	r1, r1, r3
 801e44e:	0032      	movs	r2, r6
 801e450:	6808      	ldr	r0, [r1, #0]
 801e452:	6849      	ldr	r1, [r1, #4]
 801e454:	003b      	movs	r3, r7
 801e456:	f7e4 f8f1 	bl	800263c <__aeabi_dmul>
 801e45a:	e7d3      	b.n	801e404 <_strtod_l+0x3a4>
 801e45c:	0022      	movs	r2, r4
 801e45e:	4b77      	ldr	r3, [pc, #476]	@ (801e63c <_strtod_l+0x5dc>)
 801e460:	3a09      	subs	r2, #9
 801e462:	00d2      	lsls	r2, r2, #3
 801e464:	189b      	adds	r3, r3, r2
 801e466:	681a      	ldr	r2, [r3, #0]
 801e468:	685b      	ldr	r3, [r3, #4]
 801e46a:	f7e4 f8e7 	bl	800263c <__aeabi_dmul>
 801e46e:	0006      	movs	r6, r0
 801e470:	0028      	movs	r0, r5
 801e472:	000f      	movs	r7, r1
 801e474:	f7e4 ffd2 	bl	800341c <__aeabi_ui2d>
 801e478:	000b      	movs	r3, r1
 801e47a:	0002      	movs	r2, r0
 801e47c:	0039      	movs	r1, r7
 801e47e:	0030      	movs	r0, r6
 801e480:	f7e3 f934 	bl	80016ec <__aeabi_dadd>
 801e484:	9b06      	ldr	r3, [sp, #24]
 801e486:	0006      	movs	r6, r0
 801e488:	000f      	movs	r7, r1
 801e48a:	2b0f      	cmp	r3, #15
 801e48c:	ddd2      	ble.n	801e434 <_strtod_l+0x3d4>
 801e48e:	9b06      	ldr	r3, [sp, #24]
 801e490:	1b1c      	subs	r4, r3, r4
 801e492:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e494:	18e4      	adds	r4, r4, r3
 801e496:	2c00      	cmp	r4, #0
 801e498:	dc00      	bgt.n	801e49c <_strtod_l+0x43c>
 801e49a:	e09b      	b.n	801e5d4 <_strtod_l+0x574>
 801e49c:	220f      	movs	r2, #15
 801e49e:	0023      	movs	r3, r4
 801e4a0:	4013      	ands	r3, r2
 801e4a2:	4214      	tst	r4, r2
 801e4a4:	d00a      	beq.n	801e4bc <_strtod_l+0x45c>
 801e4a6:	4965      	ldr	r1, [pc, #404]	@ (801e63c <_strtod_l+0x5dc>)
 801e4a8:	00db      	lsls	r3, r3, #3
 801e4aa:	18c9      	adds	r1, r1, r3
 801e4ac:	0032      	movs	r2, r6
 801e4ae:	6808      	ldr	r0, [r1, #0]
 801e4b0:	6849      	ldr	r1, [r1, #4]
 801e4b2:	003b      	movs	r3, r7
 801e4b4:	f7e4 f8c2 	bl	800263c <__aeabi_dmul>
 801e4b8:	0006      	movs	r6, r0
 801e4ba:	000f      	movs	r7, r1
 801e4bc:	230f      	movs	r3, #15
 801e4be:	439c      	bics	r4, r3
 801e4c0:	d073      	beq.n	801e5aa <_strtod_l+0x54a>
 801e4c2:	3326      	adds	r3, #38	@ 0x26
 801e4c4:	33ff      	adds	r3, #255	@ 0xff
 801e4c6:	429c      	cmp	r4, r3
 801e4c8:	dd4b      	ble.n	801e562 <_strtod_l+0x502>
 801e4ca:	2300      	movs	r3, #0
 801e4cc:	9306      	str	r3, [sp, #24]
 801e4ce:	9307      	str	r3, [sp, #28]
 801e4d0:	930d      	str	r3, [sp, #52]	@ 0x34
 801e4d2:	9308      	str	r3, [sp, #32]
 801e4d4:	2322      	movs	r3, #34	@ 0x22
 801e4d6:	2600      	movs	r6, #0
 801e4d8:	9a05      	ldr	r2, [sp, #20]
 801e4da:	4f54      	ldr	r7, [pc, #336]	@ (801e62c <_strtod_l+0x5cc>)
 801e4dc:	6013      	str	r3, [r2, #0]
 801e4de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e4e0:	42b3      	cmp	r3, r6
 801e4e2:	d100      	bne.n	801e4e6 <_strtod_l+0x486>
 801e4e4:	e5f7      	b.n	801e0d6 <_strtod_l+0x76>
 801e4e6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e4e8:	9805      	ldr	r0, [sp, #20]
 801e4ea:	f002 ff4d 	bl	8021388 <_Bfree>
 801e4ee:	9908      	ldr	r1, [sp, #32]
 801e4f0:	9805      	ldr	r0, [sp, #20]
 801e4f2:	f002 ff49 	bl	8021388 <_Bfree>
 801e4f6:	9907      	ldr	r1, [sp, #28]
 801e4f8:	9805      	ldr	r0, [sp, #20]
 801e4fa:	f002 ff45 	bl	8021388 <_Bfree>
 801e4fe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e500:	9805      	ldr	r0, [sp, #20]
 801e502:	f002 ff41 	bl	8021388 <_Bfree>
 801e506:	9906      	ldr	r1, [sp, #24]
 801e508:	9805      	ldr	r0, [sp, #20]
 801e50a:	f002 ff3d 	bl	8021388 <_Bfree>
 801e50e:	e5e2      	b.n	801e0d6 <_strtod_l+0x76>
 801e510:	2325      	movs	r3, #37	@ 0x25
 801e512:	9a06      	ldr	r2, [sp, #24]
 801e514:	1a9b      	subs	r3, r3, r2
 801e516:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e518:	4293      	cmp	r3, r2
 801e51a:	dbb8      	blt.n	801e48e <_strtod_l+0x42e>
 801e51c:	240f      	movs	r4, #15
 801e51e:	9b06      	ldr	r3, [sp, #24]
 801e520:	4d46      	ldr	r5, [pc, #280]	@ (801e63c <_strtod_l+0x5dc>)
 801e522:	1ae4      	subs	r4, r4, r3
 801e524:	00e1      	lsls	r1, r4, #3
 801e526:	1869      	adds	r1, r5, r1
 801e528:	0032      	movs	r2, r6
 801e52a:	6808      	ldr	r0, [r1, #0]
 801e52c:	6849      	ldr	r1, [r1, #4]
 801e52e:	003b      	movs	r3, r7
 801e530:	f7e4 f884 	bl	800263c <__aeabi_dmul>
 801e534:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e536:	1b1c      	subs	r4, r3, r4
 801e538:	00e4      	lsls	r4, r4, #3
 801e53a:	192d      	adds	r5, r5, r4
 801e53c:	682a      	ldr	r2, [r5, #0]
 801e53e:	686b      	ldr	r3, [r5, #4]
 801e540:	e789      	b.n	801e456 <_strtod_l+0x3f6>
 801e542:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e544:	3316      	adds	r3, #22
 801e546:	dba2      	blt.n	801e48e <_strtod_l+0x42e>
 801e548:	9907      	ldr	r1, [sp, #28]
 801e54a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e54c:	4b3b      	ldr	r3, [pc, #236]	@ (801e63c <_strtod_l+0x5dc>)
 801e54e:	1a52      	subs	r2, r2, r1
 801e550:	00d2      	lsls	r2, r2, #3
 801e552:	189b      	adds	r3, r3, r2
 801e554:	0030      	movs	r0, r6
 801e556:	681a      	ldr	r2, [r3, #0]
 801e558:	685b      	ldr	r3, [r3, #4]
 801e55a:	0039      	movs	r1, r7
 801e55c:	f7e3 fc2a 	bl	8001db4 <__aeabi_ddiv>
 801e560:	e750      	b.n	801e404 <_strtod_l+0x3a4>
 801e562:	2300      	movs	r3, #0
 801e564:	0030      	movs	r0, r6
 801e566:	0039      	movs	r1, r7
 801e568:	4d35      	ldr	r5, [pc, #212]	@ (801e640 <_strtod_l+0x5e0>)
 801e56a:	1124      	asrs	r4, r4, #4
 801e56c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e56e:	2c01      	cmp	r4, #1
 801e570:	dc1e      	bgt.n	801e5b0 <_strtod_l+0x550>
 801e572:	2b00      	cmp	r3, #0
 801e574:	d001      	beq.n	801e57a <_strtod_l+0x51a>
 801e576:	0006      	movs	r6, r0
 801e578:	000f      	movs	r7, r1
 801e57a:	4b32      	ldr	r3, [pc, #200]	@ (801e644 <_strtod_l+0x5e4>)
 801e57c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e57e:	18ff      	adds	r7, r7, r3
 801e580:	4b2f      	ldr	r3, [pc, #188]	@ (801e640 <_strtod_l+0x5e0>)
 801e582:	00d5      	lsls	r5, r2, #3
 801e584:	195d      	adds	r5, r3, r5
 801e586:	0032      	movs	r2, r6
 801e588:	6828      	ldr	r0, [r5, #0]
 801e58a:	6869      	ldr	r1, [r5, #4]
 801e58c:	003b      	movs	r3, r7
 801e58e:	f7e4 f855 	bl	800263c <__aeabi_dmul>
 801e592:	4b26      	ldr	r3, [pc, #152]	@ (801e62c <_strtod_l+0x5cc>)
 801e594:	4a2c      	ldr	r2, [pc, #176]	@ (801e648 <_strtod_l+0x5e8>)
 801e596:	0006      	movs	r6, r0
 801e598:	400b      	ands	r3, r1
 801e59a:	4293      	cmp	r3, r2
 801e59c:	d895      	bhi.n	801e4ca <_strtod_l+0x46a>
 801e59e:	4a2b      	ldr	r2, [pc, #172]	@ (801e64c <_strtod_l+0x5ec>)
 801e5a0:	4293      	cmp	r3, r2
 801e5a2:	d913      	bls.n	801e5cc <_strtod_l+0x56c>
 801e5a4:	2601      	movs	r6, #1
 801e5a6:	4f2a      	ldr	r7, [pc, #168]	@ (801e650 <_strtod_l+0x5f0>)
 801e5a8:	4276      	negs	r6, r6
 801e5aa:	2300      	movs	r3, #0
 801e5ac:	9309      	str	r3, [sp, #36]	@ 0x24
 801e5ae:	e086      	b.n	801e6be <_strtod_l+0x65e>
 801e5b0:	2201      	movs	r2, #1
 801e5b2:	4214      	tst	r4, r2
 801e5b4:	d004      	beq.n	801e5c0 <_strtod_l+0x560>
 801e5b6:	682a      	ldr	r2, [r5, #0]
 801e5b8:	686b      	ldr	r3, [r5, #4]
 801e5ba:	f7e4 f83f 	bl	800263c <__aeabi_dmul>
 801e5be:	2301      	movs	r3, #1
 801e5c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e5c2:	1064      	asrs	r4, r4, #1
 801e5c4:	3201      	adds	r2, #1
 801e5c6:	9209      	str	r2, [sp, #36]	@ 0x24
 801e5c8:	3508      	adds	r5, #8
 801e5ca:	e7d0      	b.n	801e56e <_strtod_l+0x50e>
 801e5cc:	23d4      	movs	r3, #212	@ 0xd4
 801e5ce:	049b      	lsls	r3, r3, #18
 801e5d0:	18cf      	adds	r7, r1, r3
 801e5d2:	e7ea      	b.n	801e5aa <_strtod_l+0x54a>
 801e5d4:	2c00      	cmp	r4, #0
 801e5d6:	d0e8      	beq.n	801e5aa <_strtod_l+0x54a>
 801e5d8:	4264      	negs	r4, r4
 801e5da:	230f      	movs	r3, #15
 801e5dc:	0022      	movs	r2, r4
 801e5de:	401a      	ands	r2, r3
 801e5e0:	421c      	tst	r4, r3
 801e5e2:	d00a      	beq.n	801e5fa <_strtod_l+0x59a>
 801e5e4:	4b15      	ldr	r3, [pc, #84]	@ (801e63c <_strtod_l+0x5dc>)
 801e5e6:	00d2      	lsls	r2, r2, #3
 801e5e8:	189b      	adds	r3, r3, r2
 801e5ea:	0030      	movs	r0, r6
 801e5ec:	681a      	ldr	r2, [r3, #0]
 801e5ee:	685b      	ldr	r3, [r3, #4]
 801e5f0:	0039      	movs	r1, r7
 801e5f2:	f7e3 fbdf 	bl	8001db4 <__aeabi_ddiv>
 801e5f6:	0006      	movs	r6, r0
 801e5f8:	000f      	movs	r7, r1
 801e5fa:	1124      	asrs	r4, r4, #4
 801e5fc:	d0d5      	beq.n	801e5aa <_strtod_l+0x54a>
 801e5fe:	2c1f      	cmp	r4, #31
 801e600:	dd28      	ble.n	801e654 <_strtod_l+0x5f4>
 801e602:	2300      	movs	r3, #0
 801e604:	9306      	str	r3, [sp, #24]
 801e606:	9307      	str	r3, [sp, #28]
 801e608:	930d      	str	r3, [sp, #52]	@ 0x34
 801e60a:	9308      	str	r3, [sp, #32]
 801e60c:	2322      	movs	r3, #34	@ 0x22
 801e60e:	9a05      	ldr	r2, [sp, #20]
 801e610:	2600      	movs	r6, #0
 801e612:	6013      	str	r3, [r2, #0]
 801e614:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e616:	2700      	movs	r7, #0
 801e618:	2b00      	cmp	r3, #0
 801e61a:	d000      	beq.n	801e61e <_strtod_l+0x5be>
 801e61c:	e763      	b.n	801e4e6 <_strtod_l+0x486>
 801e61e:	e55a      	b.n	801e0d6 <_strtod_l+0x76>
 801e620:	00004e1f 	.word	0x00004e1f
 801e624:	080253be 	.word	0x080253be
 801e628:	08025260 	.word	0x08025260
 801e62c:	7ff00000 	.word	0x7ff00000
 801e630:	080253b6 	.word	0x080253b6
 801e634:	080253f0 	.word	0x080253f0
 801e638:	0802567c 	.word	0x0802567c
 801e63c:	08025568 	.word	0x08025568
 801e640:	08025540 	.word	0x08025540
 801e644:	fcb00000 	.word	0xfcb00000
 801e648:	7ca00000 	.word	0x7ca00000
 801e64c:	7c900000 	.word	0x7c900000
 801e650:	7fefffff 	.word	0x7fefffff
 801e654:	2310      	movs	r3, #16
 801e656:	0022      	movs	r2, r4
 801e658:	401a      	ands	r2, r3
 801e65a:	9209      	str	r2, [sp, #36]	@ 0x24
 801e65c:	421c      	tst	r4, r3
 801e65e:	d001      	beq.n	801e664 <_strtod_l+0x604>
 801e660:	335a      	adds	r3, #90	@ 0x5a
 801e662:	9309      	str	r3, [sp, #36]	@ 0x24
 801e664:	0030      	movs	r0, r6
 801e666:	0039      	movs	r1, r7
 801e668:	2300      	movs	r3, #0
 801e66a:	4dbf      	ldr	r5, [pc, #764]	@ (801e968 <_strtod_l+0x908>)
 801e66c:	2201      	movs	r2, #1
 801e66e:	4214      	tst	r4, r2
 801e670:	d004      	beq.n	801e67c <_strtod_l+0x61c>
 801e672:	682a      	ldr	r2, [r5, #0]
 801e674:	686b      	ldr	r3, [r5, #4]
 801e676:	f7e3 ffe1 	bl	800263c <__aeabi_dmul>
 801e67a:	2301      	movs	r3, #1
 801e67c:	1064      	asrs	r4, r4, #1
 801e67e:	3508      	adds	r5, #8
 801e680:	2c00      	cmp	r4, #0
 801e682:	d1f3      	bne.n	801e66c <_strtod_l+0x60c>
 801e684:	2b00      	cmp	r3, #0
 801e686:	d001      	beq.n	801e68c <_strtod_l+0x62c>
 801e688:	0006      	movs	r6, r0
 801e68a:	000f      	movs	r7, r1
 801e68c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e68e:	2b00      	cmp	r3, #0
 801e690:	d00d      	beq.n	801e6ae <_strtod_l+0x64e>
 801e692:	236b      	movs	r3, #107	@ 0x6b
 801e694:	007a      	lsls	r2, r7, #1
 801e696:	0d52      	lsrs	r2, r2, #21
 801e698:	0039      	movs	r1, r7
 801e69a:	1a9b      	subs	r3, r3, r2
 801e69c:	2b00      	cmp	r3, #0
 801e69e:	dd06      	ble.n	801e6ae <_strtod_l+0x64e>
 801e6a0:	2b1f      	cmp	r3, #31
 801e6a2:	dd5a      	ble.n	801e75a <_strtod_l+0x6fa>
 801e6a4:	2600      	movs	r6, #0
 801e6a6:	2b34      	cmp	r3, #52	@ 0x34
 801e6a8:	dd50      	ble.n	801e74c <_strtod_l+0x6ec>
 801e6aa:	27dc      	movs	r7, #220	@ 0xdc
 801e6ac:	04bf      	lsls	r7, r7, #18
 801e6ae:	2200      	movs	r2, #0
 801e6b0:	2300      	movs	r3, #0
 801e6b2:	0030      	movs	r0, r6
 801e6b4:	0039      	movs	r1, r7
 801e6b6:	f7e1 fefb 	bl	80004b0 <__aeabi_dcmpeq>
 801e6ba:	2800      	cmp	r0, #0
 801e6bc:	d1a1      	bne.n	801e602 <_strtod_l+0x5a2>
 801e6be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e6c0:	9a08      	ldr	r2, [sp, #32]
 801e6c2:	9300      	str	r3, [sp, #0]
 801e6c4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e6c6:	9b06      	ldr	r3, [sp, #24]
 801e6c8:	9805      	ldr	r0, [sp, #20]
 801e6ca:	f002 fec5 	bl	8021458 <__s2b>
 801e6ce:	900d      	str	r0, [sp, #52]	@ 0x34
 801e6d0:	2800      	cmp	r0, #0
 801e6d2:	d100      	bne.n	801e6d6 <_strtod_l+0x676>
 801e6d4:	e6f9      	b.n	801e4ca <_strtod_l+0x46a>
 801e6d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e6d8:	9907      	ldr	r1, [sp, #28]
 801e6da:	17da      	asrs	r2, r3, #31
 801e6dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e6de:	1a5b      	subs	r3, r3, r1
 801e6e0:	401a      	ands	r2, r3
 801e6e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e6e4:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e6e6:	43db      	mvns	r3, r3
 801e6e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e6ea:	17db      	asrs	r3, r3, #31
 801e6ec:	401a      	ands	r2, r3
 801e6ee:	2300      	movs	r3, #0
 801e6f0:	921a      	str	r2, [sp, #104]	@ 0x68
 801e6f2:	9306      	str	r3, [sp, #24]
 801e6f4:	9307      	str	r3, [sp, #28]
 801e6f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e6f8:	9805      	ldr	r0, [sp, #20]
 801e6fa:	6859      	ldr	r1, [r3, #4]
 801e6fc:	f002 fe00 	bl	8021300 <_Balloc>
 801e700:	9008      	str	r0, [sp, #32]
 801e702:	2800      	cmp	r0, #0
 801e704:	d100      	bne.n	801e708 <_strtod_l+0x6a8>
 801e706:	e6e5      	b.n	801e4d4 <_strtod_l+0x474>
 801e708:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e70a:	300c      	adds	r0, #12
 801e70c:	0019      	movs	r1, r3
 801e70e:	691a      	ldr	r2, [r3, #16]
 801e710:	310c      	adds	r1, #12
 801e712:	3202      	adds	r2, #2
 801e714:	0092      	lsls	r2, r2, #2
 801e716:	f001 faef 	bl	801fcf8 <memcpy>
 801e71a:	ab20      	add	r3, sp, #128	@ 0x80
 801e71c:	9301      	str	r3, [sp, #4]
 801e71e:	ab1f      	add	r3, sp, #124	@ 0x7c
 801e720:	9300      	str	r3, [sp, #0]
 801e722:	0032      	movs	r2, r6
 801e724:	003b      	movs	r3, r7
 801e726:	9805      	ldr	r0, [sp, #20]
 801e728:	9610      	str	r6, [sp, #64]	@ 0x40
 801e72a:	9711      	str	r7, [sp, #68]	@ 0x44
 801e72c:	f003 f9e4 	bl	8021af8 <__d2b>
 801e730:	901e      	str	r0, [sp, #120]	@ 0x78
 801e732:	2800      	cmp	r0, #0
 801e734:	d100      	bne.n	801e738 <_strtod_l+0x6d8>
 801e736:	e6cd      	b.n	801e4d4 <_strtod_l+0x474>
 801e738:	2101      	movs	r1, #1
 801e73a:	9805      	ldr	r0, [sp, #20]
 801e73c:	f002 ff28 	bl	8021590 <__i2b>
 801e740:	9007      	str	r0, [sp, #28]
 801e742:	2800      	cmp	r0, #0
 801e744:	d10e      	bne.n	801e764 <_strtod_l+0x704>
 801e746:	2300      	movs	r3, #0
 801e748:	9307      	str	r3, [sp, #28]
 801e74a:	e6c3      	b.n	801e4d4 <_strtod_l+0x474>
 801e74c:	234b      	movs	r3, #75	@ 0x4b
 801e74e:	1a9a      	subs	r2, r3, r2
 801e750:	3b4c      	subs	r3, #76	@ 0x4c
 801e752:	4093      	lsls	r3, r2
 801e754:	4019      	ands	r1, r3
 801e756:	000f      	movs	r7, r1
 801e758:	e7a9      	b.n	801e6ae <_strtod_l+0x64e>
 801e75a:	2201      	movs	r2, #1
 801e75c:	4252      	negs	r2, r2
 801e75e:	409a      	lsls	r2, r3
 801e760:	4016      	ands	r6, r2
 801e762:	e7a4      	b.n	801e6ae <_strtod_l+0x64e>
 801e764:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e766:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e768:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801e76a:	1ad4      	subs	r4, r2, r3
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	db01      	blt.n	801e774 <_strtod_l+0x714>
 801e770:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801e772:	195d      	adds	r5, r3, r5
 801e774:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e776:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801e778:	1a5b      	subs	r3, r3, r1
 801e77a:	2136      	movs	r1, #54	@ 0x36
 801e77c:	189b      	adds	r3, r3, r2
 801e77e:	1a8a      	subs	r2, r1, r2
 801e780:	497a      	ldr	r1, [pc, #488]	@ (801e96c <_strtod_l+0x90c>)
 801e782:	2001      	movs	r0, #1
 801e784:	468c      	mov	ip, r1
 801e786:	2100      	movs	r1, #0
 801e788:	3b01      	subs	r3, #1
 801e78a:	9116      	str	r1, [sp, #88]	@ 0x58
 801e78c:	9014      	str	r0, [sp, #80]	@ 0x50
 801e78e:	4563      	cmp	r3, ip
 801e790:	da06      	bge.n	801e7a0 <_strtod_l+0x740>
 801e792:	4661      	mov	r1, ip
 801e794:	1ac9      	subs	r1, r1, r3
 801e796:	1a52      	subs	r2, r2, r1
 801e798:	291f      	cmp	r1, #31
 801e79a:	dc3f      	bgt.n	801e81c <_strtod_l+0x7bc>
 801e79c:	4088      	lsls	r0, r1
 801e79e:	9014      	str	r0, [sp, #80]	@ 0x50
 801e7a0:	18ab      	adds	r3, r5, r2
 801e7a2:	930e      	str	r3, [sp, #56]	@ 0x38
 801e7a4:	18a4      	adds	r4, r4, r2
 801e7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e7a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e7aa:	191c      	adds	r4, r3, r4
 801e7ac:	002b      	movs	r3, r5
 801e7ae:	4295      	cmp	r5, r2
 801e7b0:	dd00      	ble.n	801e7b4 <_strtod_l+0x754>
 801e7b2:	0013      	movs	r3, r2
 801e7b4:	42a3      	cmp	r3, r4
 801e7b6:	dd00      	ble.n	801e7ba <_strtod_l+0x75a>
 801e7b8:	0023      	movs	r3, r4
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	dd04      	ble.n	801e7c8 <_strtod_l+0x768>
 801e7be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e7c0:	1ae4      	subs	r4, r4, r3
 801e7c2:	1ad2      	subs	r2, r2, r3
 801e7c4:	920e      	str	r2, [sp, #56]	@ 0x38
 801e7c6:	1aed      	subs	r5, r5, r3
 801e7c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e7ca:	2b00      	cmp	r3, #0
 801e7cc:	dd16      	ble.n	801e7fc <_strtod_l+0x79c>
 801e7ce:	001a      	movs	r2, r3
 801e7d0:	9907      	ldr	r1, [sp, #28]
 801e7d2:	9805      	ldr	r0, [sp, #20]
 801e7d4:	f002 ffa6 	bl	8021724 <__pow5mult>
 801e7d8:	9007      	str	r0, [sp, #28]
 801e7da:	2800      	cmp	r0, #0
 801e7dc:	d0b3      	beq.n	801e746 <_strtod_l+0x6e6>
 801e7de:	0001      	movs	r1, r0
 801e7e0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e7e2:	9805      	ldr	r0, [sp, #20]
 801e7e4:	f002 feec 	bl	80215c0 <__multiply>
 801e7e8:	9013      	str	r0, [sp, #76]	@ 0x4c
 801e7ea:	2800      	cmp	r0, #0
 801e7ec:	d100      	bne.n	801e7f0 <_strtod_l+0x790>
 801e7ee:	e671      	b.n	801e4d4 <_strtod_l+0x474>
 801e7f0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e7f2:	9805      	ldr	r0, [sp, #20]
 801e7f4:	f002 fdc8 	bl	8021388 <_Bfree>
 801e7f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e7fa:	931e      	str	r3, [sp, #120]	@ 0x78
 801e7fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	dc12      	bgt.n	801e828 <_strtod_l+0x7c8>
 801e802:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e804:	2b00      	cmp	r3, #0
 801e806:	dd18      	ble.n	801e83a <_strtod_l+0x7da>
 801e808:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e80a:	9908      	ldr	r1, [sp, #32]
 801e80c:	9805      	ldr	r0, [sp, #20]
 801e80e:	f002 ff89 	bl	8021724 <__pow5mult>
 801e812:	9008      	str	r0, [sp, #32]
 801e814:	2800      	cmp	r0, #0
 801e816:	d110      	bne.n	801e83a <_strtod_l+0x7da>
 801e818:	2300      	movs	r3, #0
 801e81a:	e65a      	b.n	801e4d2 <_strtod_l+0x472>
 801e81c:	4954      	ldr	r1, [pc, #336]	@ (801e970 <_strtod_l+0x910>)
 801e81e:	1acb      	subs	r3, r1, r3
 801e820:	0001      	movs	r1, r0
 801e822:	4099      	lsls	r1, r3
 801e824:	9116      	str	r1, [sp, #88]	@ 0x58
 801e826:	e7ba      	b.n	801e79e <_strtod_l+0x73e>
 801e828:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e82a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e82c:	9805      	ldr	r0, [sp, #20]
 801e82e:	f002 ffd5 	bl	80217dc <__lshift>
 801e832:	901e      	str	r0, [sp, #120]	@ 0x78
 801e834:	2800      	cmp	r0, #0
 801e836:	d1e4      	bne.n	801e802 <_strtod_l+0x7a2>
 801e838:	e64c      	b.n	801e4d4 <_strtod_l+0x474>
 801e83a:	2c00      	cmp	r4, #0
 801e83c:	dd07      	ble.n	801e84e <_strtod_l+0x7ee>
 801e83e:	0022      	movs	r2, r4
 801e840:	9908      	ldr	r1, [sp, #32]
 801e842:	9805      	ldr	r0, [sp, #20]
 801e844:	f002 ffca 	bl	80217dc <__lshift>
 801e848:	9008      	str	r0, [sp, #32]
 801e84a:	2800      	cmp	r0, #0
 801e84c:	d0e4      	beq.n	801e818 <_strtod_l+0x7b8>
 801e84e:	2d00      	cmp	r5, #0
 801e850:	dd08      	ble.n	801e864 <_strtod_l+0x804>
 801e852:	002a      	movs	r2, r5
 801e854:	9907      	ldr	r1, [sp, #28]
 801e856:	9805      	ldr	r0, [sp, #20]
 801e858:	f002 ffc0 	bl	80217dc <__lshift>
 801e85c:	9007      	str	r0, [sp, #28]
 801e85e:	2800      	cmp	r0, #0
 801e860:	d100      	bne.n	801e864 <_strtod_l+0x804>
 801e862:	e637      	b.n	801e4d4 <_strtod_l+0x474>
 801e864:	9a08      	ldr	r2, [sp, #32]
 801e866:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e868:	9805      	ldr	r0, [sp, #20]
 801e86a:	f003 f83f 	bl	80218ec <__mdiff>
 801e86e:	9006      	str	r0, [sp, #24]
 801e870:	2800      	cmp	r0, #0
 801e872:	d100      	bne.n	801e876 <_strtod_l+0x816>
 801e874:	e62e      	b.n	801e4d4 <_strtod_l+0x474>
 801e876:	68c3      	ldr	r3, [r0, #12]
 801e878:	9907      	ldr	r1, [sp, #28]
 801e87a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e87c:	2300      	movs	r3, #0
 801e87e:	60c3      	str	r3, [r0, #12]
 801e880:	f003 f818 	bl	80218b4 <__mcmp>
 801e884:	2800      	cmp	r0, #0
 801e886:	da3b      	bge.n	801e900 <_strtod_l+0x8a0>
 801e888:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e88a:	4333      	orrs	r3, r6
 801e88c:	d167      	bne.n	801e95e <_strtod_l+0x8fe>
 801e88e:	033b      	lsls	r3, r7, #12
 801e890:	d165      	bne.n	801e95e <_strtod_l+0x8fe>
 801e892:	22d6      	movs	r2, #214	@ 0xd6
 801e894:	4b37      	ldr	r3, [pc, #220]	@ (801e974 <_strtod_l+0x914>)
 801e896:	04d2      	lsls	r2, r2, #19
 801e898:	403b      	ands	r3, r7
 801e89a:	4293      	cmp	r3, r2
 801e89c:	d95f      	bls.n	801e95e <_strtod_l+0x8fe>
 801e89e:	9b06      	ldr	r3, [sp, #24]
 801e8a0:	695b      	ldr	r3, [r3, #20]
 801e8a2:	2b00      	cmp	r3, #0
 801e8a4:	d103      	bne.n	801e8ae <_strtod_l+0x84e>
 801e8a6:	9b06      	ldr	r3, [sp, #24]
 801e8a8:	691b      	ldr	r3, [r3, #16]
 801e8aa:	2b01      	cmp	r3, #1
 801e8ac:	dd57      	ble.n	801e95e <_strtod_l+0x8fe>
 801e8ae:	9906      	ldr	r1, [sp, #24]
 801e8b0:	2201      	movs	r2, #1
 801e8b2:	9805      	ldr	r0, [sp, #20]
 801e8b4:	f002 ff92 	bl	80217dc <__lshift>
 801e8b8:	9907      	ldr	r1, [sp, #28]
 801e8ba:	9006      	str	r0, [sp, #24]
 801e8bc:	f002 fffa 	bl	80218b4 <__mcmp>
 801e8c0:	2800      	cmp	r0, #0
 801e8c2:	dd4c      	ble.n	801e95e <_strtod_l+0x8fe>
 801e8c4:	4b2b      	ldr	r3, [pc, #172]	@ (801e974 <_strtod_l+0x914>)
 801e8c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e8c8:	403b      	ands	r3, r7
 801e8ca:	2a00      	cmp	r2, #0
 801e8cc:	d074      	beq.n	801e9b8 <_strtod_l+0x958>
 801e8ce:	22d6      	movs	r2, #214	@ 0xd6
 801e8d0:	04d2      	lsls	r2, r2, #19
 801e8d2:	4293      	cmp	r3, r2
 801e8d4:	d870      	bhi.n	801e9b8 <_strtod_l+0x958>
 801e8d6:	22dc      	movs	r2, #220	@ 0xdc
 801e8d8:	0492      	lsls	r2, r2, #18
 801e8da:	4293      	cmp	r3, r2
 801e8dc:	d800      	bhi.n	801e8e0 <_strtod_l+0x880>
 801e8de:	e695      	b.n	801e60c <_strtod_l+0x5ac>
 801e8e0:	0030      	movs	r0, r6
 801e8e2:	0039      	movs	r1, r7
 801e8e4:	4b24      	ldr	r3, [pc, #144]	@ (801e978 <_strtod_l+0x918>)
 801e8e6:	2200      	movs	r2, #0
 801e8e8:	f7e3 fea8 	bl	800263c <__aeabi_dmul>
 801e8ec:	4b21      	ldr	r3, [pc, #132]	@ (801e974 <_strtod_l+0x914>)
 801e8ee:	0006      	movs	r6, r0
 801e8f0:	000f      	movs	r7, r1
 801e8f2:	420b      	tst	r3, r1
 801e8f4:	d000      	beq.n	801e8f8 <_strtod_l+0x898>
 801e8f6:	e5f6      	b.n	801e4e6 <_strtod_l+0x486>
 801e8f8:	2322      	movs	r3, #34	@ 0x22
 801e8fa:	9a05      	ldr	r2, [sp, #20]
 801e8fc:	6013      	str	r3, [r2, #0]
 801e8fe:	e5f2      	b.n	801e4e6 <_strtod_l+0x486>
 801e900:	970e      	str	r7, [sp, #56]	@ 0x38
 801e902:	2800      	cmp	r0, #0
 801e904:	d175      	bne.n	801e9f2 <_strtod_l+0x992>
 801e906:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e908:	033b      	lsls	r3, r7, #12
 801e90a:	0b1b      	lsrs	r3, r3, #12
 801e90c:	2a00      	cmp	r2, #0
 801e90e:	d039      	beq.n	801e984 <_strtod_l+0x924>
 801e910:	4a1a      	ldr	r2, [pc, #104]	@ (801e97c <_strtod_l+0x91c>)
 801e912:	4293      	cmp	r3, r2
 801e914:	d138      	bne.n	801e988 <_strtod_l+0x928>
 801e916:	2101      	movs	r1, #1
 801e918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e91a:	4249      	negs	r1, r1
 801e91c:	0032      	movs	r2, r6
 801e91e:	0008      	movs	r0, r1
 801e920:	2b00      	cmp	r3, #0
 801e922:	d00b      	beq.n	801e93c <_strtod_l+0x8dc>
 801e924:	24d4      	movs	r4, #212	@ 0xd4
 801e926:	4b13      	ldr	r3, [pc, #76]	@ (801e974 <_strtod_l+0x914>)
 801e928:	0008      	movs	r0, r1
 801e92a:	403b      	ands	r3, r7
 801e92c:	04e4      	lsls	r4, r4, #19
 801e92e:	42a3      	cmp	r3, r4
 801e930:	d804      	bhi.n	801e93c <_strtod_l+0x8dc>
 801e932:	306c      	adds	r0, #108	@ 0x6c
 801e934:	0d1b      	lsrs	r3, r3, #20
 801e936:	1ac3      	subs	r3, r0, r3
 801e938:	4099      	lsls	r1, r3
 801e93a:	0008      	movs	r0, r1
 801e93c:	4282      	cmp	r2, r0
 801e93e:	d123      	bne.n	801e988 <_strtod_l+0x928>
 801e940:	4b0f      	ldr	r3, [pc, #60]	@ (801e980 <_strtod_l+0x920>)
 801e942:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e944:	4299      	cmp	r1, r3
 801e946:	d102      	bne.n	801e94e <_strtod_l+0x8ee>
 801e948:	3201      	adds	r2, #1
 801e94a:	d100      	bne.n	801e94e <_strtod_l+0x8ee>
 801e94c:	e5c2      	b.n	801e4d4 <_strtod_l+0x474>
 801e94e:	4b09      	ldr	r3, [pc, #36]	@ (801e974 <_strtod_l+0x914>)
 801e950:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e952:	2600      	movs	r6, #0
 801e954:	401a      	ands	r2, r3
 801e956:	0013      	movs	r3, r2
 801e958:	2280      	movs	r2, #128	@ 0x80
 801e95a:	0352      	lsls	r2, r2, #13
 801e95c:	189f      	adds	r7, r3, r2
 801e95e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e960:	2b00      	cmp	r3, #0
 801e962:	d1bd      	bne.n	801e8e0 <_strtod_l+0x880>
 801e964:	e5bf      	b.n	801e4e6 <_strtod_l+0x486>
 801e966:	46c0      	nop			@ (mov r8, r8)
 801e968:	08025288 	.word	0x08025288
 801e96c:	fffffc02 	.word	0xfffffc02
 801e970:	fffffbe2 	.word	0xfffffbe2
 801e974:	7ff00000 	.word	0x7ff00000
 801e978:	39500000 	.word	0x39500000
 801e97c:	000fffff 	.word	0x000fffff
 801e980:	7fefffff 	.word	0x7fefffff
 801e984:	4333      	orrs	r3, r6
 801e986:	d09d      	beq.n	801e8c4 <_strtod_l+0x864>
 801e988:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e98a:	2b00      	cmp	r3, #0
 801e98c:	d01c      	beq.n	801e9c8 <_strtod_l+0x968>
 801e98e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e990:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e992:	4213      	tst	r3, r2
 801e994:	d0e3      	beq.n	801e95e <_strtod_l+0x8fe>
 801e996:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e998:	0030      	movs	r0, r6
 801e99a:	0039      	movs	r1, r7
 801e99c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e99e:	2b00      	cmp	r3, #0
 801e9a0:	d016      	beq.n	801e9d0 <_strtod_l+0x970>
 801e9a2:	f7ff fb45 	bl	801e030 <sulp>
 801e9a6:	0002      	movs	r2, r0
 801e9a8:	000b      	movs	r3, r1
 801e9aa:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e9ac:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e9ae:	f7e2 fe9d 	bl	80016ec <__aeabi_dadd>
 801e9b2:	0006      	movs	r6, r0
 801e9b4:	000f      	movs	r7, r1
 801e9b6:	e7d2      	b.n	801e95e <_strtod_l+0x8fe>
 801e9b8:	2601      	movs	r6, #1
 801e9ba:	4a92      	ldr	r2, [pc, #584]	@ (801ec04 <_strtod_l+0xba4>)
 801e9bc:	4276      	negs	r6, r6
 801e9be:	189b      	adds	r3, r3, r2
 801e9c0:	4a91      	ldr	r2, [pc, #580]	@ (801ec08 <_strtod_l+0xba8>)
 801e9c2:	431a      	orrs	r2, r3
 801e9c4:	0017      	movs	r7, r2
 801e9c6:	e7ca      	b.n	801e95e <_strtod_l+0x8fe>
 801e9c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e9ca:	4233      	tst	r3, r6
 801e9cc:	d0c7      	beq.n	801e95e <_strtod_l+0x8fe>
 801e9ce:	e7e2      	b.n	801e996 <_strtod_l+0x936>
 801e9d0:	f7ff fb2e 	bl	801e030 <sulp>
 801e9d4:	0002      	movs	r2, r0
 801e9d6:	000b      	movs	r3, r1
 801e9d8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e9da:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e9dc:	f7e4 f8f6 	bl	8002bcc <__aeabi_dsub>
 801e9e0:	2200      	movs	r2, #0
 801e9e2:	2300      	movs	r3, #0
 801e9e4:	0006      	movs	r6, r0
 801e9e6:	000f      	movs	r7, r1
 801e9e8:	f7e1 fd62 	bl	80004b0 <__aeabi_dcmpeq>
 801e9ec:	2800      	cmp	r0, #0
 801e9ee:	d0b6      	beq.n	801e95e <_strtod_l+0x8fe>
 801e9f0:	e60c      	b.n	801e60c <_strtod_l+0x5ac>
 801e9f2:	9907      	ldr	r1, [sp, #28]
 801e9f4:	9806      	ldr	r0, [sp, #24]
 801e9f6:	f003 f8df 	bl	8021bb8 <__ratio>
 801e9fa:	2380      	movs	r3, #128	@ 0x80
 801e9fc:	2200      	movs	r2, #0
 801e9fe:	05db      	lsls	r3, r3, #23
 801ea00:	0004      	movs	r4, r0
 801ea02:	000d      	movs	r5, r1
 801ea04:	f7e1 fd64 	bl	80004d0 <__aeabi_dcmple>
 801ea08:	2800      	cmp	r0, #0
 801ea0a:	d06c      	beq.n	801eae6 <_strtod_l+0xa86>
 801ea0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ea0e:	2b00      	cmp	r3, #0
 801ea10:	d177      	bne.n	801eb02 <_strtod_l+0xaa2>
 801ea12:	2e00      	cmp	r6, #0
 801ea14:	d157      	bne.n	801eac6 <_strtod_l+0xa66>
 801ea16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ea18:	031b      	lsls	r3, r3, #12
 801ea1a:	d15a      	bne.n	801ead2 <_strtod_l+0xa72>
 801ea1c:	2200      	movs	r2, #0
 801ea1e:	0020      	movs	r0, r4
 801ea20:	0029      	movs	r1, r5
 801ea22:	4b7a      	ldr	r3, [pc, #488]	@ (801ec0c <_strtod_l+0xbac>)
 801ea24:	f7e1 fd4a 	bl	80004bc <__aeabi_dcmplt>
 801ea28:	2800      	cmp	r0, #0
 801ea2a:	d159      	bne.n	801eae0 <_strtod_l+0xa80>
 801ea2c:	0020      	movs	r0, r4
 801ea2e:	0029      	movs	r1, r5
 801ea30:	2200      	movs	r2, #0
 801ea32:	4b77      	ldr	r3, [pc, #476]	@ (801ec10 <_strtod_l+0xbb0>)
 801ea34:	f7e3 fe02 	bl	800263c <__aeabi_dmul>
 801ea38:	0004      	movs	r4, r0
 801ea3a:	000d      	movs	r5, r1
 801ea3c:	2380      	movs	r3, #128	@ 0x80
 801ea3e:	061b      	lsls	r3, r3, #24
 801ea40:	18eb      	adds	r3, r5, r3
 801ea42:	940a      	str	r4, [sp, #40]	@ 0x28
 801ea44:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ea46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ea48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ea4a:	9214      	str	r2, [sp, #80]	@ 0x50
 801ea4c:	9315      	str	r3, [sp, #84]	@ 0x54
 801ea4e:	4a71      	ldr	r2, [pc, #452]	@ (801ec14 <_strtod_l+0xbb4>)
 801ea50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ea52:	4013      	ands	r3, r2
 801ea54:	9316      	str	r3, [sp, #88]	@ 0x58
 801ea56:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ea58:	4b6f      	ldr	r3, [pc, #444]	@ (801ec18 <_strtod_l+0xbb8>)
 801ea5a:	429a      	cmp	r2, r3
 801ea5c:	d000      	beq.n	801ea60 <_strtod_l+0xa00>
 801ea5e:	e087      	b.n	801eb70 <_strtod_l+0xb10>
 801ea60:	4a6e      	ldr	r2, [pc, #440]	@ (801ec1c <_strtod_l+0xbbc>)
 801ea62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ea64:	4694      	mov	ip, r2
 801ea66:	4463      	add	r3, ip
 801ea68:	001f      	movs	r7, r3
 801ea6a:	0030      	movs	r0, r6
 801ea6c:	0019      	movs	r1, r3
 801ea6e:	f002 ffd7 	bl	8021a20 <__ulp>
 801ea72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ea74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ea76:	f7e3 fde1 	bl	800263c <__aeabi_dmul>
 801ea7a:	0032      	movs	r2, r6
 801ea7c:	003b      	movs	r3, r7
 801ea7e:	f7e2 fe35 	bl	80016ec <__aeabi_dadd>
 801ea82:	4a64      	ldr	r2, [pc, #400]	@ (801ec14 <_strtod_l+0xbb4>)
 801ea84:	4b66      	ldr	r3, [pc, #408]	@ (801ec20 <_strtod_l+0xbc0>)
 801ea86:	0006      	movs	r6, r0
 801ea88:	400a      	ands	r2, r1
 801ea8a:	429a      	cmp	r2, r3
 801ea8c:	d940      	bls.n	801eb10 <_strtod_l+0xab0>
 801ea8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ea90:	4a64      	ldr	r2, [pc, #400]	@ (801ec24 <_strtod_l+0xbc4>)
 801ea92:	4293      	cmp	r3, r2
 801ea94:	d103      	bne.n	801ea9e <_strtod_l+0xa3e>
 801ea96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ea98:	3301      	adds	r3, #1
 801ea9a:	d100      	bne.n	801ea9e <_strtod_l+0xa3e>
 801ea9c:	e51a      	b.n	801e4d4 <_strtod_l+0x474>
 801ea9e:	2601      	movs	r6, #1
 801eaa0:	4f60      	ldr	r7, [pc, #384]	@ (801ec24 <_strtod_l+0xbc4>)
 801eaa2:	4276      	negs	r6, r6
 801eaa4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801eaa6:	9805      	ldr	r0, [sp, #20]
 801eaa8:	f002 fc6e 	bl	8021388 <_Bfree>
 801eaac:	9908      	ldr	r1, [sp, #32]
 801eaae:	9805      	ldr	r0, [sp, #20]
 801eab0:	f002 fc6a 	bl	8021388 <_Bfree>
 801eab4:	9907      	ldr	r1, [sp, #28]
 801eab6:	9805      	ldr	r0, [sp, #20]
 801eab8:	f002 fc66 	bl	8021388 <_Bfree>
 801eabc:	9906      	ldr	r1, [sp, #24]
 801eabe:	9805      	ldr	r0, [sp, #20]
 801eac0:	f002 fc62 	bl	8021388 <_Bfree>
 801eac4:	e617      	b.n	801e6f6 <_strtod_l+0x696>
 801eac6:	2e01      	cmp	r6, #1
 801eac8:	d103      	bne.n	801ead2 <_strtod_l+0xa72>
 801eaca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eacc:	2b00      	cmp	r3, #0
 801eace:	d100      	bne.n	801ead2 <_strtod_l+0xa72>
 801ead0:	e59c      	b.n	801e60c <_strtod_l+0x5ac>
 801ead2:	2300      	movs	r3, #0
 801ead4:	4c54      	ldr	r4, [pc, #336]	@ (801ec28 <_strtod_l+0xbc8>)
 801ead6:	4d4d      	ldr	r5, [pc, #308]	@ (801ec0c <_strtod_l+0xbac>)
 801ead8:	930a      	str	r3, [sp, #40]	@ 0x28
 801eada:	940b      	str	r4, [sp, #44]	@ 0x2c
 801eadc:	2400      	movs	r4, #0
 801eade:	e7b2      	b.n	801ea46 <_strtod_l+0x9e6>
 801eae0:	2400      	movs	r4, #0
 801eae2:	4d4b      	ldr	r5, [pc, #300]	@ (801ec10 <_strtod_l+0xbb0>)
 801eae4:	e7aa      	b.n	801ea3c <_strtod_l+0x9dc>
 801eae6:	0020      	movs	r0, r4
 801eae8:	0029      	movs	r1, r5
 801eaea:	4b49      	ldr	r3, [pc, #292]	@ (801ec10 <_strtod_l+0xbb0>)
 801eaec:	2200      	movs	r2, #0
 801eaee:	f7e3 fda5 	bl	800263c <__aeabi_dmul>
 801eaf2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eaf4:	0004      	movs	r4, r0
 801eaf6:	000d      	movs	r5, r1
 801eaf8:	2b00      	cmp	r3, #0
 801eafa:	d09f      	beq.n	801ea3c <_strtod_l+0x9dc>
 801eafc:	940a      	str	r4, [sp, #40]	@ 0x28
 801eafe:	950b      	str	r5, [sp, #44]	@ 0x2c
 801eb00:	e7a1      	b.n	801ea46 <_strtod_l+0x9e6>
 801eb02:	2300      	movs	r3, #0
 801eb04:	4c41      	ldr	r4, [pc, #260]	@ (801ec0c <_strtod_l+0xbac>)
 801eb06:	0025      	movs	r5, r4
 801eb08:	930a      	str	r3, [sp, #40]	@ 0x28
 801eb0a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801eb0c:	001c      	movs	r4, r3
 801eb0e:	e79a      	b.n	801ea46 <_strtod_l+0x9e6>
 801eb10:	23d4      	movs	r3, #212	@ 0xd4
 801eb12:	049b      	lsls	r3, r3, #18
 801eb14:	18cf      	adds	r7, r1, r3
 801eb16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb18:	9710      	str	r7, [sp, #64]	@ 0x40
 801eb1a:	2b00      	cmp	r3, #0
 801eb1c:	d1c2      	bne.n	801eaa4 <_strtod_l+0xa44>
 801eb1e:	4b3d      	ldr	r3, [pc, #244]	@ (801ec14 <_strtod_l+0xbb4>)
 801eb20:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801eb22:	403b      	ands	r3, r7
 801eb24:	429a      	cmp	r2, r3
 801eb26:	d1bd      	bne.n	801eaa4 <_strtod_l+0xa44>
 801eb28:	0020      	movs	r0, r4
 801eb2a:	0029      	movs	r1, r5
 801eb2c:	f7e1 fdac 	bl	8000688 <__aeabi_d2lz>
 801eb30:	f7e1 fde4 	bl	80006fc <__aeabi_l2d>
 801eb34:	0002      	movs	r2, r0
 801eb36:	000b      	movs	r3, r1
 801eb38:	0020      	movs	r0, r4
 801eb3a:	0029      	movs	r1, r5
 801eb3c:	f7e4 f846 	bl	8002bcc <__aeabi_dsub>
 801eb40:	033c      	lsls	r4, r7, #12
 801eb42:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eb44:	0b24      	lsrs	r4, r4, #12
 801eb46:	4334      	orrs	r4, r6
 801eb48:	900e      	str	r0, [sp, #56]	@ 0x38
 801eb4a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801eb4c:	4a37      	ldr	r2, [pc, #220]	@ (801ec2c <_strtod_l+0xbcc>)
 801eb4e:	431c      	orrs	r4, r3
 801eb50:	d052      	beq.n	801ebf8 <_strtod_l+0xb98>
 801eb52:	4b37      	ldr	r3, [pc, #220]	@ (801ec30 <_strtod_l+0xbd0>)
 801eb54:	f7e1 fcb2 	bl	80004bc <__aeabi_dcmplt>
 801eb58:	2800      	cmp	r0, #0
 801eb5a:	d000      	beq.n	801eb5e <_strtod_l+0xafe>
 801eb5c:	e4c3      	b.n	801e4e6 <_strtod_l+0x486>
 801eb5e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801eb60:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801eb62:	4a34      	ldr	r2, [pc, #208]	@ (801ec34 <_strtod_l+0xbd4>)
 801eb64:	4b2a      	ldr	r3, [pc, #168]	@ (801ec10 <_strtod_l+0xbb0>)
 801eb66:	f7e1 fcbd 	bl	80004e4 <__aeabi_dcmpgt>
 801eb6a:	2800      	cmp	r0, #0
 801eb6c:	d09a      	beq.n	801eaa4 <_strtod_l+0xa44>
 801eb6e:	e4ba      	b.n	801e4e6 <_strtod_l+0x486>
 801eb70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb72:	2b00      	cmp	r3, #0
 801eb74:	d02a      	beq.n	801ebcc <_strtod_l+0xb6c>
 801eb76:	23d4      	movs	r3, #212	@ 0xd4
 801eb78:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801eb7a:	04db      	lsls	r3, r3, #19
 801eb7c:	429a      	cmp	r2, r3
 801eb7e:	d825      	bhi.n	801ebcc <_strtod_l+0xb6c>
 801eb80:	0020      	movs	r0, r4
 801eb82:	0029      	movs	r1, r5
 801eb84:	4a2c      	ldr	r2, [pc, #176]	@ (801ec38 <_strtod_l+0xbd8>)
 801eb86:	4b2d      	ldr	r3, [pc, #180]	@ (801ec3c <_strtod_l+0xbdc>)
 801eb88:	f7e1 fca2 	bl	80004d0 <__aeabi_dcmple>
 801eb8c:	2800      	cmp	r0, #0
 801eb8e:	d016      	beq.n	801ebbe <_strtod_l+0xb5e>
 801eb90:	0020      	movs	r0, r4
 801eb92:	0029      	movs	r1, r5
 801eb94:	f7e1 fd5a 	bl	800064c <__aeabi_d2uiz>
 801eb98:	2800      	cmp	r0, #0
 801eb9a:	d100      	bne.n	801eb9e <_strtod_l+0xb3e>
 801eb9c:	3001      	adds	r0, #1
 801eb9e:	f7e4 fc3d 	bl	800341c <__aeabi_ui2d>
 801eba2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eba4:	0004      	movs	r4, r0
 801eba6:	000d      	movs	r5, r1
 801eba8:	2b00      	cmp	r3, #0
 801ebaa:	d122      	bne.n	801ebf2 <_strtod_l+0xb92>
 801ebac:	2380      	movs	r3, #128	@ 0x80
 801ebae:	061b      	lsls	r3, r3, #24
 801ebb0:	18cb      	adds	r3, r1, r3
 801ebb2:	9018      	str	r0, [sp, #96]	@ 0x60
 801ebb4:	9319      	str	r3, [sp, #100]	@ 0x64
 801ebb6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ebb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ebba:	9214      	str	r2, [sp, #80]	@ 0x50
 801ebbc:	9315      	str	r3, [sp, #84]	@ 0x54
 801ebbe:	22d6      	movs	r2, #214	@ 0xd6
 801ebc0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ebc2:	04d2      	lsls	r2, r2, #19
 801ebc4:	189b      	adds	r3, r3, r2
 801ebc6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ebc8:	1a9b      	subs	r3, r3, r2
 801ebca:	9315      	str	r3, [sp, #84]	@ 0x54
 801ebcc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ebce:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ebd0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801ebd2:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801ebd4:	f002 ff24 	bl	8021a20 <__ulp>
 801ebd8:	0002      	movs	r2, r0
 801ebda:	000b      	movs	r3, r1
 801ebdc:	0030      	movs	r0, r6
 801ebde:	0039      	movs	r1, r7
 801ebe0:	f7e3 fd2c 	bl	800263c <__aeabi_dmul>
 801ebe4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ebe6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ebe8:	f7e2 fd80 	bl	80016ec <__aeabi_dadd>
 801ebec:	0006      	movs	r6, r0
 801ebee:	000f      	movs	r7, r1
 801ebf0:	e791      	b.n	801eb16 <_strtod_l+0xab6>
 801ebf2:	9418      	str	r4, [sp, #96]	@ 0x60
 801ebf4:	9519      	str	r5, [sp, #100]	@ 0x64
 801ebf6:	e7de      	b.n	801ebb6 <_strtod_l+0xb56>
 801ebf8:	4b11      	ldr	r3, [pc, #68]	@ (801ec40 <_strtod_l+0xbe0>)
 801ebfa:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801ebfc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801ebfe:	f7e1 fc5d 	bl	80004bc <__aeabi_dcmplt>
 801ec02:	e7b2      	b.n	801eb6a <_strtod_l+0xb0a>
 801ec04:	fff00000 	.word	0xfff00000
 801ec08:	000fffff 	.word	0x000fffff
 801ec0c:	3ff00000 	.word	0x3ff00000
 801ec10:	3fe00000 	.word	0x3fe00000
 801ec14:	7ff00000 	.word	0x7ff00000
 801ec18:	7fe00000 	.word	0x7fe00000
 801ec1c:	fcb00000 	.word	0xfcb00000
 801ec20:	7c9fffff 	.word	0x7c9fffff
 801ec24:	7fefffff 	.word	0x7fefffff
 801ec28:	bff00000 	.word	0xbff00000
 801ec2c:	94a03595 	.word	0x94a03595
 801ec30:	3fdfffff 	.word	0x3fdfffff
 801ec34:	35afe535 	.word	0x35afe535
 801ec38:	ffc00000 	.word	0xffc00000
 801ec3c:	41dfffff 	.word	0x41dfffff
 801ec40:	3fcfffff 	.word	0x3fcfffff

0801ec44 <strtod>:
 801ec44:	b510      	push	{r4, lr}
 801ec46:	4c04      	ldr	r4, [pc, #16]	@ (801ec58 <strtod+0x14>)
 801ec48:	000a      	movs	r2, r1
 801ec4a:	0001      	movs	r1, r0
 801ec4c:	4b03      	ldr	r3, [pc, #12]	@ (801ec5c <strtod+0x18>)
 801ec4e:	6820      	ldr	r0, [r4, #0]
 801ec50:	f7ff fa06 	bl	801e060 <_strtod_l>
 801ec54:	bd10      	pop	{r4, pc}
 801ec56:	46c0      	nop			@ (mov r8, r8)
 801ec58:	200003cc 	.word	0x200003cc
 801ec5c:	20000260 	.word	0x20000260

0801ec60 <_strtol_l.constprop.0>:
 801ec60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ec62:	b085      	sub	sp, #20
 801ec64:	0017      	movs	r7, r2
 801ec66:	001e      	movs	r6, r3
 801ec68:	9003      	str	r0, [sp, #12]
 801ec6a:	9101      	str	r1, [sp, #4]
 801ec6c:	2b24      	cmp	r3, #36	@ 0x24
 801ec6e:	d844      	bhi.n	801ecfa <_strtol_l.constprop.0+0x9a>
 801ec70:	000c      	movs	r4, r1
 801ec72:	2b01      	cmp	r3, #1
 801ec74:	d041      	beq.n	801ecfa <_strtol_l.constprop.0+0x9a>
 801ec76:	4b3d      	ldr	r3, [pc, #244]	@ (801ed6c <_strtol_l.constprop.0+0x10c>)
 801ec78:	2208      	movs	r2, #8
 801ec7a:	469c      	mov	ip, r3
 801ec7c:	0023      	movs	r3, r4
 801ec7e:	4661      	mov	r1, ip
 801ec80:	781d      	ldrb	r5, [r3, #0]
 801ec82:	3401      	adds	r4, #1
 801ec84:	5d48      	ldrb	r0, [r1, r5]
 801ec86:	0001      	movs	r1, r0
 801ec88:	4011      	ands	r1, r2
 801ec8a:	4210      	tst	r0, r2
 801ec8c:	d1f6      	bne.n	801ec7c <_strtol_l.constprop.0+0x1c>
 801ec8e:	2d2d      	cmp	r5, #45	@ 0x2d
 801ec90:	d13a      	bne.n	801ed08 <_strtol_l.constprop.0+0xa8>
 801ec92:	7825      	ldrb	r5, [r4, #0]
 801ec94:	1c9c      	adds	r4, r3, #2
 801ec96:	2301      	movs	r3, #1
 801ec98:	9300      	str	r3, [sp, #0]
 801ec9a:	2210      	movs	r2, #16
 801ec9c:	0033      	movs	r3, r6
 801ec9e:	4393      	bics	r3, r2
 801eca0:	d109      	bne.n	801ecb6 <_strtol_l.constprop.0+0x56>
 801eca2:	2d30      	cmp	r5, #48	@ 0x30
 801eca4:	d136      	bne.n	801ed14 <_strtol_l.constprop.0+0xb4>
 801eca6:	2120      	movs	r1, #32
 801eca8:	7823      	ldrb	r3, [r4, #0]
 801ecaa:	438b      	bics	r3, r1
 801ecac:	2b58      	cmp	r3, #88	@ 0x58
 801ecae:	d131      	bne.n	801ed14 <_strtol_l.constprop.0+0xb4>
 801ecb0:	0016      	movs	r6, r2
 801ecb2:	7865      	ldrb	r5, [r4, #1]
 801ecb4:	3402      	adds	r4, #2
 801ecb6:	4a2e      	ldr	r2, [pc, #184]	@ (801ed70 <_strtol_l.constprop.0+0x110>)
 801ecb8:	9b00      	ldr	r3, [sp, #0]
 801ecba:	4694      	mov	ip, r2
 801ecbc:	4463      	add	r3, ip
 801ecbe:	0031      	movs	r1, r6
 801ecc0:	0018      	movs	r0, r3
 801ecc2:	9302      	str	r3, [sp, #8]
 801ecc4:	f7e1 faf4 	bl	80002b0 <__aeabi_uidivmod>
 801ecc8:	2200      	movs	r2, #0
 801ecca:	4684      	mov	ip, r0
 801eccc:	0010      	movs	r0, r2
 801ecce:	002b      	movs	r3, r5
 801ecd0:	3b30      	subs	r3, #48	@ 0x30
 801ecd2:	2b09      	cmp	r3, #9
 801ecd4:	d825      	bhi.n	801ed22 <_strtol_l.constprop.0+0xc2>
 801ecd6:	001d      	movs	r5, r3
 801ecd8:	42ae      	cmp	r6, r5
 801ecda:	dd31      	ble.n	801ed40 <_strtol_l.constprop.0+0xe0>
 801ecdc:	1c53      	adds	r3, r2, #1
 801ecde:	d009      	beq.n	801ecf4 <_strtol_l.constprop.0+0x94>
 801ece0:	2201      	movs	r2, #1
 801ece2:	4252      	negs	r2, r2
 801ece4:	4584      	cmp	ip, r0
 801ece6:	d305      	bcc.n	801ecf4 <_strtol_l.constprop.0+0x94>
 801ece8:	d101      	bne.n	801ecee <_strtol_l.constprop.0+0x8e>
 801ecea:	42a9      	cmp	r1, r5
 801ecec:	db25      	blt.n	801ed3a <_strtol_l.constprop.0+0xda>
 801ecee:	2201      	movs	r2, #1
 801ecf0:	4370      	muls	r0, r6
 801ecf2:	1828      	adds	r0, r5, r0
 801ecf4:	7825      	ldrb	r5, [r4, #0]
 801ecf6:	3401      	adds	r4, #1
 801ecf8:	e7e9      	b.n	801ecce <_strtol_l.constprop.0+0x6e>
 801ecfa:	f000 ffc5 	bl	801fc88 <__errno>
 801ecfe:	2316      	movs	r3, #22
 801ed00:	6003      	str	r3, [r0, #0]
 801ed02:	2000      	movs	r0, #0
 801ed04:	b005      	add	sp, #20
 801ed06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ed08:	9100      	str	r1, [sp, #0]
 801ed0a:	2d2b      	cmp	r5, #43	@ 0x2b
 801ed0c:	d1c5      	bne.n	801ec9a <_strtol_l.constprop.0+0x3a>
 801ed0e:	7825      	ldrb	r5, [r4, #0]
 801ed10:	1c9c      	adds	r4, r3, #2
 801ed12:	e7c2      	b.n	801ec9a <_strtol_l.constprop.0+0x3a>
 801ed14:	2e00      	cmp	r6, #0
 801ed16:	d1ce      	bne.n	801ecb6 <_strtol_l.constprop.0+0x56>
 801ed18:	3608      	adds	r6, #8
 801ed1a:	2d30      	cmp	r5, #48	@ 0x30
 801ed1c:	d0cb      	beq.n	801ecb6 <_strtol_l.constprop.0+0x56>
 801ed1e:	3602      	adds	r6, #2
 801ed20:	e7c9      	b.n	801ecb6 <_strtol_l.constprop.0+0x56>
 801ed22:	002b      	movs	r3, r5
 801ed24:	3b41      	subs	r3, #65	@ 0x41
 801ed26:	2b19      	cmp	r3, #25
 801ed28:	d801      	bhi.n	801ed2e <_strtol_l.constprop.0+0xce>
 801ed2a:	3d37      	subs	r5, #55	@ 0x37
 801ed2c:	e7d4      	b.n	801ecd8 <_strtol_l.constprop.0+0x78>
 801ed2e:	002b      	movs	r3, r5
 801ed30:	3b61      	subs	r3, #97	@ 0x61
 801ed32:	2b19      	cmp	r3, #25
 801ed34:	d804      	bhi.n	801ed40 <_strtol_l.constprop.0+0xe0>
 801ed36:	3d57      	subs	r5, #87	@ 0x57
 801ed38:	e7ce      	b.n	801ecd8 <_strtol_l.constprop.0+0x78>
 801ed3a:	2201      	movs	r2, #1
 801ed3c:	4252      	negs	r2, r2
 801ed3e:	e7d9      	b.n	801ecf4 <_strtol_l.constprop.0+0x94>
 801ed40:	1c53      	adds	r3, r2, #1
 801ed42:	d108      	bne.n	801ed56 <_strtol_l.constprop.0+0xf6>
 801ed44:	2322      	movs	r3, #34	@ 0x22
 801ed46:	9a03      	ldr	r2, [sp, #12]
 801ed48:	9802      	ldr	r0, [sp, #8]
 801ed4a:	6013      	str	r3, [r2, #0]
 801ed4c:	2f00      	cmp	r7, #0
 801ed4e:	d0d9      	beq.n	801ed04 <_strtol_l.constprop.0+0xa4>
 801ed50:	1e63      	subs	r3, r4, #1
 801ed52:	9301      	str	r3, [sp, #4]
 801ed54:	e007      	b.n	801ed66 <_strtol_l.constprop.0+0x106>
 801ed56:	9b00      	ldr	r3, [sp, #0]
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	d000      	beq.n	801ed5e <_strtol_l.constprop.0+0xfe>
 801ed5c:	4240      	negs	r0, r0
 801ed5e:	2f00      	cmp	r7, #0
 801ed60:	d0d0      	beq.n	801ed04 <_strtol_l.constprop.0+0xa4>
 801ed62:	2a00      	cmp	r2, #0
 801ed64:	d1f4      	bne.n	801ed50 <_strtol_l.constprop.0+0xf0>
 801ed66:	9b01      	ldr	r3, [sp, #4]
 801ed68:	603b      	str	r3, [r7, #0]
 801ed6a:	e7cb      	b.n	801ed04 <_strtol_l.constprop.0+0xa4>
 801ed6c:	080252b1 	.word	0x080252b1
 801ed70:	7fffffff 	.word	0x7fffffff

0801ed74 <strtol>:
 801ed74:	b510      	push	{r4, lr}
 801ed76:	4c04      	ldr	r4, [pc, #16]	@ (801ed88 <strtol+0x14>)
 801ed78:	0013      	movs	r3, r2
 801ed7a:	000a      	movs	r2, r1
 801ed7c:	0001      	movs	r1, r0
 801ed7e:	6820      	ldr	r0, [r4, #0]
 801ed80:	f7ff ff6e 	bl	801ec60 <_strtol_l.constprop.0>
 801ed84:	bd10      	pop	{r4, pc}
 801ed86:	46c0      	nop			@ (mov r8, r8)
 801ed88:	200003cc 	.word	0x200003cc

0801ed8c <__cvt>:
 801ed8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ed8e:	001f      	movs	r7, r3
 801ed90:	2300      	movs	r3, #0
 801ed92:	0016      	movs	r6, r2
 801ed94:	b08b      	sub	sp, #44	@ 0x2c
 801ed96:	429f      	cmp	r7, r3
 801ed98:	da04      	bge.n	801eda4 <__cvt+0x18>
 801ed9a:	2180      	movs	r1, #128	@ 0x80
 801ed9c:	0609      	lsls	r1, r1, #24
 801ed9e:	187b      	adds	r3, r7, r1
 801eda0:	001f      	movs	r7, r3
 801eda2:	232d      	movs	r3, #45	@ 0x2d
 801eda4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801eda6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801eda8:	7013      	strb	r3, [r2, #0]
 801edaa:	2320      	movs	r3, #32
 801edac:	2203      	movs	r2, #3
 801edae:	439d      	bics	r5, r3
 801edb0:	2d46      	cmp	r5, #70	@ 0x46
 801edb2:	d007      	beq.n	801edc4 <__cvt+0x38>
 801edb4:	002b      	movs	r3, r5
 801edb6:	3b45      	subs	r3, #69	@ 0x45
 801edb8:	4259      	negs	r1, r3
 801edba:	414b      	adcs	r3, r1
 801edbc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801edbe:	3a01      	subs	r2, #1
 801edc0:	18cb      	adds	r3, r1, r3
 801edc2:	9310      	str	r3, [sp, #64]	@ 0x40
 801edc4:	ab09      	add	r3, sp, #36	@ 0x24
 801edc6:	9304      	str	r3, [sp, #16]
 801edc8:	ab08      	add	r3, sp, #32
 801edca:	9303      	str	r3, [sp, #12]
 801edcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801edce:	9200      	str	r2, [sp, #0]
 801edd0:	9302      	str	r3, [sp, #8]
 801edd2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801edd4:	0032      	movs	r2, r6
 801edd6:	9301      	str	r3, [sp, #4]
 801edd8:	003b      	movs	r3, r7
 801edda:	f001 f82b 	bl	801fe34 <_dtoa_r>
 801edde:	0004      	movs	r4, r0
 801ede0:	2d47      	cmp	r5, #71	@ 0x47
 801ede2:	d11b      	bne.n	801ee1c <__cvt+0x90>
 801ede4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ede6:	07db      	lsls	r3, r3, #31
 801ede8:	d511      	bpl.n	801ee0e <__cvt+0x82>
 801edea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801edec:	18c3      	adds	r3, r0, r3
 801edee:	9307      	str	r3, [sp, #28]
 801edf0:	2200      	movs	r2, #0
 801edf2:	2300      	movs	r3, #0
 801edf4:	0030      	movs	r0, r6
 801edf6:	0039      	movs	r1, r7
 801edf8:	f7e1 fb5a 	bl	80004b0 <__aeabi_dcmpeq>
 801edfc:	2800      	cmp	r0, #0
 801edfe:	d001      	beq.n	801ee04 <__cvt+0x78>
 801ee00:	9b07      	ldr	r3, [sp, #28]
 801ee02:	9309      	str	r3, [sp, #36]	@ 0x24
 801ee04:	2230      	movs	r2, #48	@ 0x30
 801ee06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee08:	9907      	ldr	r1, [sp, #28]
 801ee0a:	428b      	cmp	r3, r1
 801ee0c:	d320      	bcc.n	801ee50 <__cvt+0xc4>
 801ee0e:	0020      	movs	r0, r4
 801ee10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee12:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801ee14:	1b1b      	subs	r3, r3, r4
 801ee16:	6013      	str	r3, [r2, #0]
 801ee18:	b00b      	add	sp, #44	@ 0x2c
 801ee1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ee1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ee1e:	18c3      	adds	r3, r0, r3
 801ee20:	9307      	str	r3, [sp, #28]
 801ee22:	2d46      	cmp	r5, #70	@ 0x46
 801ee24:	d1e4      	bne.n	801edf0 <__cvt+0x64>
 801ee26:	7803      	ldrb	r3, [r0, #0]
 801ee28:	2b30      	cmp	r3, #48	@ 0x30
 801ee2a:	d10c      	bne.n	801ee46 <__cvt+0xba>
 801ee2c:	2200      	movs	r2, #0
 801ee2e:	2300      	movs	r3, #0
 801ee30:	0030      	movs	r0, r6
 801ee32:	0039      	movs	r1, r7
 801ee34:	f7e1 fb3c 	bl	80004b0 <__aeabi_dcmpeq>
 801ee38:	2800      	cmp	r0, #0
 801ee3a:	d104      	bne.n	801ee46 <__cvt+0xba>
 801ee3c:	2301      	movs	r3, #1
 801ee3e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ee40:	1a9b      	subs	r3, r3, r2
 801ee42:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ee44:	6013      	str	r3, [r2, #0]
 801ee46:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ee48:	9a07      	ldr	r2, [sp, #28]
 801ee4a:	681b      	ldr	r3, [r3, #0]
 801ee4c:	18d3      	adds	r3, r2, r3
 801ee4e:	e7ce      	b.n	801edee <__cvt+0x62>
 801ee50:	1c59      	adds	r1, r3, #1
 801ee52:	9109      	str	r1, [sp, #36]	@ 0x24
 801ee54:	701a      	strb	r2, [r3, #0]
 801ee56:	e7d6      	b.n	801ee06 <__cvt+0x7a>

0801ee58 <__exponent>:
 801ee58:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee5a:	232b      	movs	r3, #43	@ 0x2b
 801ee5c:	0005      	movs	r5, r0
 801ee5e:	000c      	movs	r4, r1
 801ee60:	b085      	sub	sp, #20
 801ee62:	7002      	strb	r2, [r0, #0]
 801ee64:	2900      	cmp	r1, #0
 801ee66:	da01      	bge.n	801ee6c <__exponent+0x14>
 801ee68:	424c      	negs	r4, r1
 801ee6a:	3302      	adds	r3, #2
 801ee6c:	706b      	strb	r3, [r5, #1]
 801ee6e:	2c09      	cmp	r4, #9
 801ee70:	dd2c      	ble.n	801eecc <__exponent+0x74>
 801ee72:	ab02      	add	r3, sp, #8
 801ee74:	1dde      	adds	r6, r3, #7
 801ee76:	0020      	movs	r0, r4
 801ee78:	210a      	movs	r1, #10
 801ee7a:	f7e1 fb03 	bl	8000484 <__aeabi_idivmod>
 801ee7e:	0037      	movs	r7, r6
 801ee80:	3130      	adds	r1, #48	@ 0x30
 801ee82:	3e01      	subs	r6, #1
 801ee84:	0020      	movs	r0, r4
 801ee86:	7031      	strb	r1, [r6, #0]
 801ee88:	210a      	movs	r1, #10
 801ee8a:	9401      	str	r4, [sp, #4]
 801ee8c:	f7e1 fa14 	bl	80002b8 <__divsi3>
 801ee90:	9b01      	ldr	r3, [sp, #4]
 801ee92:	0004      	movs	r4, r0
 801ee94:	2b63      	cmp	r3, #99	@ 0x63
 801ee96:	dcee      	bgt.n	801ee76 <__exponent+0x1e>
 801ee98:	1eba      	subs	r2, r7, #2
 801ee9a:	1ca8      	adds	r0, r5, #2
 801ee9c:	0001      	movs	r1, r0
 801ee9e:	0013      	movs	r3, r2
 801eea0:	3430      	adds	r4, #48	@ 0x30
 801eea2:	7014      	strb	r4, [r2, #0]
 801eea4:	ac02      	add	r4, sp, #8
 801eea6:	3407      	adds	r4, #7
 801eea8:	429c      	cmp	r4, r3
 801eeaa:	d80a      	bhi.n	801eec2 <__exponent+0x6a>
 801eeac:	2300      	movs	r3, #0
 801eeae:	42a2      	cmp	r2, r4
 801eeb0:	d803      	bhi.n	801eeba <__exponent+0x62>
 801eeb2:	3309      	adds	r3, #9
 801eeb4:	aa02      	add	r2, sp, #8
 801eeb6:	189b      	adds	r3, r3, r2
 801eeb8:	1bdb      	subs	r3, r3, r7
 801eeba:	18c0      	adds	r0, r0, r3
 801eebc:	1b40      	subs	r0, r0, r5
 801eebe:	b005      	add	sp, #20
 801eec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eec2:	781c      	ldrb	r4, [r3, #0]
 801eec4:	3301      	adds	r3, #1
 801eec6:	700c      	strb	r4, [r1, #0]
 801eec8:	3101      	adds	r1, #1
 801eeca:	e7eb      	b.n	801eea4 <__exponent+0x4c>
 801eecc:	2330      	movs	r3, #48	@ 0x30
 801eece:	18e4      	adds	r4, r4, r3
 801eed0:	70ab      	strb	r3, [r5, #2]
 801eed2:	1d28      	adds	r0, r5, #4
 801eed4:	70ec      	strb	r4, [r5, #3]
 801eed6:	e7f1      	b.n	801eebc <__exponent+0x64>

0801eed8 <_printf_float>:
 801eed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eeda:	b097      	sub	sp, #92	@ 0x5c
 801eedc:	000d      	movs	r5, r1
 801eede:	920a      	str	r2, [sp, #40]	@ 0x28
 801eee0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801eee2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801eee4:	9009      	str	r0, [sp, #36]	@ 0x24
 801eee6:	f000 fe7d 	bl	801fbe4 <_localeconv_r>
 801eeea:	6803      	ldr	r3, [r0, #0]
 801eeec:	0018      	movs	r0, r3
 801eeee:	930d      	str	r3, [sp, #52]	@ 0x34
 801eef0:	f7e1 f93c 	bl	800016c <strlen>
 801eef4:	2300      	movs	r3, #0
 801eef6:	900f      	str	r0, [sp, #60]	@ 0x3c
 801eef8:	9314      	str	r3, [sp, #80]	@ 0x50
 801eefa:	7e2b      	ldrb	r3, [r5, #24]
 801eefc:	2207      	movs	r2, #7
 801eefe:	930c      	str	r3, [sp, #48]	@ 0x30
 801ef00:	682b      	ldr	r3, [r5, #0]
 801ef02:	930e      	str	r3, [sp, #56]	@ 0x38
 801ef04:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ef06:	6823      	ldr	r3, [r4, #0]
 801ef08:	05c9      	lsls	r1, r1, #23
 801ef0a:	d545      	bpl.n	801ef98 <_printf_float+0xc0>
 801ef0c:	189b      	adds	r3, r3, r2
 801ef0e:	4393      	bics	r3, r2
 801ef10:	001a      	movs	r2, r3
 801ef12:	3208      	adds	r2, #8
 801ef14:	6022      	str	r2, [r4, #0]
 801ef16:	2201      	movs	r2, #1
 801ef18:	681e      	ldr	r6, [r3, #0]
 801ef1a:	685f      	ldr	r7, [r3, #4]
 801ef1c:	007b      	lsls	r3, r7, #1
 801ef1e:	085b      	lsrs	r3, r3, #1
 801ef20:	9311      	str	r3, [sp, #68]	@ 0x44
 801ef22:	9610      	str	r6, [sp, #64]	@ 0x40
 801ef24:	64ae      	str	r6, [r5, #72]	@ 0x48
 801ef26:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801ef28:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ef2a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ef2c:	4ba7      	ldr	r3, [pc, #668]	@ (801f1cc <_printf_float+0x2f4>)
 801ef2e:	4252      	negs	r2, r2
 801ef30:	f7e4 f9e8 	bl	8003304 <__aeabi_dcmpun>
 801ef34:	2800      	cmp	r0, #0
 801ef36:	d131      	bne.n	801ef9c <_printf_float+0xc4>
 801ef38:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ef3a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ef3c:	2201      	movs	r2, #1
 801ef3e:	4ba3      	ldr	r3, [pc, #652]	@ (801f1cc <_printf_float+0x2f4>)
 801ef40:	4252      	negs	r2, r2
 801ef42:	f7e1 fac5 	bl	80004d0 <__aeabi_dcmple>
 801ef46:	2800      	cmp	r0, #0
 801ef48:	d128      	bne.n	801ef9c <_printf_float+0xc4>
 801ef4a:	2200      	movs	r2, #0
 801ef4c:	2300      	movs	r3, #0
 801ef4e:	0030      	movs	r0, r6
 801ef50:	0039      	movs	r1, r7
 801ef52:	f7e1 fab3 	bl	80004bc <__aeabi_dcmplt>
 801ef56:	2800      	cmp	r0, #0
 801ef58:	d003      	beq.n	801ef62 <_printf_float+0x8a>
 801ef5a:	002b      	movs	r3, r5
 801ef5c:	222d      	movs	r2, #45	@ 0x2d
 801ef5e:	3343      	adds	r3, #67	@ 0x43
 801ef60:	701a      	strb	r2, [r3, #0]
 801ef62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef64:	4f9a      	ldr	r7, [pc, #616]	@ (801f1d0 <_printf_float+0x2f8>)
 801ef66:	2b47      	cmp	r3, #71	@ 0x47
 801ef68:	d900      	bls.n	801ef6c <_printf_float+0x94>
 801ef6a:	4f9a      	ldr	r7, [pc, #616]	@ (801f1d4 <_printf_float+0x2fc>)
 801ef6c:	2303      	movs	r3, #3
 801ef6e:	2400      	movs	r4, #0
 801ef70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ef72:	612b      	str	r3, [r5, #16]
 801ef74:	3301      	adds	r3, #1
 801ef76:	439a      	bics	r2, r3
 801ef78:	602a      	str	r2, [r5, #0]
 801ef7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ef7c:	0029      	movs	r1, r5
 801ef7e:	9300      	str	r3, [sp, #0]
 801ef80:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ef84:	aa15      	add	r2, sp, #84	@ 0x54
 801ef86:	f000 f9e5 	bl	801f354 <_printf_common>
 801ef8a:	3001      	adds	r0, #1
 801ef8c:	d000      	beq.n	801ef90 <_printf_float+0xb8>
 801ef8e:	e09f      	b.n	801f0d0 <_printf_float+0x1f8>
 801ef90:	2001      	movs	r0, #1
 801ef92:	4240      	negs	r0, r0
 801ef94:	b017      	add	sp, #92	@ 0x5c
 801ef96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef98:	3307      	adds	r3, #7
 801ef9a:	e7b8      	b.n	801ef0e <_printf_float+0x36>
 801ef9c:	0032      	movs	r2, r6
 801ef9e:	003b      	movs	r3, r7
 801efa0:	0030      	movs	r0, r6
 801efa2:	0039      	movs	r1, r7
 801efa4:	f7e4 f9ae 	bl	8003304 <__aeabi_dcmpun>
 801efa8:	2800      	cmp	r0, #0
 801efaa:	d00b      	beq.n	801efc4 <_printf_float+0xec>
 801efac:	2f00      	cmp	r7, #0
 801efae:	da03      	bge.n	801efb8 <_printf_float+0xe0>
 801efb0:	002b      	movs	r3, r5
 801efb2:	222d      	movs	r2, #45	@ 0x2d
 801efb4:	3343      	adds	r3, #67	@ 0x43
 801efb6:	701a      	strb	r2, [r3, #0]
 801efb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801efba:	4f87      	ldr	r7, [pc, #540]	@ (801f1d8 <_printf_float+0x300>)
 801efbc:	2b47      	cmp	r3, #71	@ 0x47
 801efbe:	d9d5      	bls.n	801ef6c <_printf_float+0x94>
 801efc0:	4f86      	ldr	r7, [pc, #536]	@ (801f1dc <_printf_float+0x304>)
 801efc2:	e7d3      	b.n	801ef6c <_printf_float+0x94>
 801efc4:	2220      	movs	r2, #32
 801efc6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801efc8:	686b      	ldr	r3, [r5, #4]
 801efca:	4394      	bics	r4, r2
 801efcc:	1c5a      	adds	r2, r3, #1
 801efce:	d146      	bne.n	801f05e <_printf_float+0x186>
 801efd0:	3307      	adds	r3, #7
 801efd2:	606b      	str	r3, [r5, #4]
 801efd4:	2380      	movs	r3, #128	@ 0x80
 801efd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801efd8:	00db      	lsls	r3, r3, #3
 801efda:	4313      	orrs	r3, r2
 801efdc:	2200      	movs	r2, #0
 801efde:	602b      	str	r3, [r5, #0]
 801efe0:	9206      	str	r2, [sp, #24]
 801efe2:	aa14      	add	r2, sp, #80	@ 0x50
 801efe4:	9205      	str	r2, [sp, #20]
 801efe6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801efe8:	a90a      	add	r1, sp, #40	@ 0x28
 801efea:	9204      	str	r2, [sp, #16]
 801efec:	aa13      	add	r2, sp, #76	@ 0x4c
 801efee:	9203      	str	r2, [sp, #12]
 801eff0:	2223      	movs	r2, #35	@ 0x23
 801eff2:	1852      	adds	r2, r2, r1
 801eff4:	9202      	str	r2, [sp, #8]
 801eff6:	9301      	str	r3, [sp, #4]
 801eff8:	686b      	ldr	r3, [r5, #4]
 801effa:	0032      	movs	r2, r6
 801effc:	9300      	str	r3, [sp, #0]
 801effe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f000:	003b      	movs	r3, r7
 801f002:	f7ff fec3 	bl	801ed8c <__cvt>
 801f006:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f008:	0007      	movs	r7, r0
 801f00a:	2c47      	cmp	r4, #71	@ 0x47
 801f00c:	d12d      	bne.n	801f06a <_printf_float+0x192>
 801f00e:	1cd3      	adds	r3, r2, #3
 801f010:	db02      	blt.n	801f018 <_printf_float+0x140>
 801f012:	686b      	ldr	r3, [r5, #4]
 801f014:	429a      	cmp	r2, r3
 801f016:	dd48      	ble.n	801f0aa <_printf_float+0x1d2>
 801f018:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f01a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f01c:	3b02      	subs	r3, #2
 801f01e:	b2db      	uxtb	r3, r3
 801f020:	930c      	str	r3, [sp, #48]	@ 0x30
 801f022:	0028      	movs	r0, r5
 801f024:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f026:	3901      	subs	r1, #1
 801f028:	3050      	adds	r0, #80	@ 0x50
 801f02a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f02c:	f7ff ff14 	bl	801ee58 <__exponent>
 801f030:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f032:	0004      	movs	r4, r0
 801f034:	1813      	adds	r3, r2, r0
 801f036:	612b      	str	r3, [r5, #16]
 801f038:	2a01      	cmp	r2, #1
 801f03a:	dc02      	bgt.n	801f042 <_printf_float+0x16a>
 801f03c:	682a      	ldr	r2, [r5, #0]
 801f03e:	07d2      	lsls	r2, r2, #31
 801f040:	d501      	bpl.n	801f046 <_printf_float+0x16e>
 801f042:	3301      	adds	r3, #1
 801f044:	612b      	str	r3, [r5, #16]
 801f046:	2323      	movs	r3, #35	@ 0x23
 801f048:	aa0a      	add	r2, sp, #40	@ 0x28
 801f04a:	189b      	adds	r3, r3, r2
 801f04c:	781b      	ldrb	r3, [r3, #0]
 801f04e:	2b00      	cmp	r3, #0
 801f050:	d100      	bne.n	801f054 <_printf_float+0x17c>
 801f052:	e792      	b.n	801ef7a <_printf_float+0xa2>
 801f054:	002b      	movs	r3, r5
 801f056:	222d      	movs	r2, #45	@ 0x2d
 801f058:	3343      	adds	r3, #67	@ 0x43
 801f05a:	701a      	strb	r2, [r3, #0]
 801f05c:	e78d      	b.n	801ef7a <_printf_float+0xa2>
 801f05e:	2c47      	cmp	r4, #71	@ 0x47
 801f060:	d1b8      	bne.n	801efd4 <_printf_float+0xfc>
 801f062:	2b00      	cmp	r3, #0
 801f064:	d1b6      	bne.n	801efd4 <_printf_float+0xfc>
 801f066:	3301      	adds	r3, #1
 801f068:	e7b3      	b.n	801efd2 <_printf_float+0xfa>
 801f06a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f06c:	0011      	movs	r1, r2
 801f06e:	2b65      	cmp	r3, #101	@ 0x65
 801f070:	d9d7      	bls.n	801f022 <_printf_float+0x14a>
 801f072:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f074:	2b66      	cmp	r3, #102	@ 0x66
 801f076:	d11a      	bne.n	801f0ae <_printf_float+0x1d6>
 801f078:	686b      	ldr	r3, [r5, #4]
 801f07a:	2a00      	cmp	r2, #0
 801f07c:	dd09      	ble.n	801f092 <_printf_float+0x1ba>
 801f07e:	612a      	str	r2, [r5, #16]
 801f080:	2b00      	cmp	r3, #0
 801f082:	d102      	bne.n	801f08a <_printf_float+0x1b2>
 801f084:	6829      	ldr	r1, [r5, #0]
 801f086:	07c9      	lsls	r1, r1, #31
 801f088:	d50b      	bpl.n	801f0a2 <_printf_float+0x1ca>
 801f08a:	3301      	adds	r3, #1
 801f08c:	189b      	adds	r3, r3, r2
 801f08e:	612b      	str	r3, [r5, #16]
 801f090:	e007      	b.n	801f0a2 <_printf_float+0x1ca>
 801f092:	2b00      	cmp	r3, #0
 801f094:	d103      	bne.n	801f09e <_printf_float+0x1c6>
 801f096:	2201      	movs	r2, #1
 801f098:	6829      	ldr	r1, [r5, #0]
 801f09a:	4211      	tst	r1, r2
 801f09c:	d000      	beq.n	801f0a0 <_printf_float+0x1c8>
 801f09e:	1c9a      	adds	r2, r3, #2
 801f0a0:	612a      	str	r2, [r5, #16]
 801f0a2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f0a4:	2400      	movs	r4, #0
 801f0a6:	65ab      	str	r3, [r5, #88]	@ 0x58
 801f0a8:	e7cd      	b.n	801f046 <_printf_float+0x16e>
 801f0aa:	2367      	movs	r3, #103	@ 0x67
 801f0ac:	930c      	str	r3, [sp, #48]	@ 0x30
 801f0ae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f0b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f0b2:	4299      	cmp	r1, r3
 801f0b4:	db06      	blt.n	801f0c4 <_printf_float+0x1ec>
 801f0b6:	682b      	ldr	r3, [r5, #0]
 801f0b8:	6129      	str	r1, [r5, #16]
 801f0ba:	07db      	lsls	r3, r3, #31
 801f0bc:	d5f1      	bpl.n	801f0a2 <_printf_float+0x1ca>
 801f0be:	3101      	adds	r1, #1
 801f0c0:	6129      	str	r1, [r5, #16]
 801f0c2:	e7ee      	b.n	801f0a2 <_printf_float+0x1ca>
 801f0c4:	2201      	movs	r2, #1
 801f0c6:	2900      	cmp	r1, #0
 801f0c8:	dce0      	bgt.n	801f08c <_printf_float+0x1b4>
 801f0ca:	1892      	adds	r2, r2, r2
 801f0cc:	1a52      	subs	r2, r2, r1
 801f0ce:	e7dd      	b.n	801f08c <_printf_float+0x1b4>
 801f0d0:	682a      	ldr	r2, [r5, #0]
 801f0d2:	0553      	lsls	r3, r2, #21
 801f0d4:	d408      	bmi.n	801f0e8 <_printf_float+0x210>
 801f0d6:	692b      	ldr	r3, [r5, #16]
 801f0d8:	003a      	movs	r2, r7
 801f0da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f0dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f0de:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f0e0:	47a0      	blx	r4
 801f0e2:	3001      	adds	r0, #1
 801f0e4:	d129      	bne.n	801f13a <_printf_float+0x262>
 801f0e6:	e753      	b.n	801ef90 <_printf_float+0xb8>
 801f0e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f0ea:	2b65      	cmp	r3, #101	@ 0x65
 801f0ec:	d800      	bhi.n	801f0f0 <_printf_float+0x218>
 801f0ee:	e0da      	b.n	801f2a6 <_printf_float+0x3ce>
 801f0f0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801f0f2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801f0f4:	2200      	movs	r2, #0
 801f0f6:	2300      	movs	r3, #0
 801f0f8:	f7e1 f9da 	bl	80004b0 <__aeabi_dcmpeq>
 801f0fc:	2800      	cmp	r0, #0
 801f0fe:	d033      	beq.n	801f168 <_printf_float+0x290>
 801f100:	2301      	movs	r3, #1
 801f102:	4a37      	ldr	r2, [pc, #220]	@ (801f1e0 <_printf_float+0x308>)
 801f104:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f106:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f108:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f10a:	47a0      	blx	r4
 801f10c:	3001      	adds	r0, #1
 801f10e:	d100      	bne.n	801f112 <_printf_float+0x23a>
 801f110:	e73e      	b.n	801ef90 <_printf_float+0xb8>
 801f112:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f114:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f116:	42b3      	cmp	r3, r6
 801f118:	db02      	blt.n	801f120 <_printf_float+0x248>
 801f11a:	682b      	ldr	r3, [r5, #0]
 801f11c:	07db      	lsls	r3, r3, #31
 801f11e:	d50c      	bpl.n	801f13a <_printf_float+0x262>
 801f120:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f122:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f124:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f126:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f128:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f12a:	47a0      	blx	r4
 801f12c:	2400      	movs	r4, #0
 801f12e:	3001      	adds	r0, #1
 801f130:	d100      	bne.n	801f134 <_printf_float+0x25c>
 801f132:	e72d      	b.n	801ef90 <_printf_float+0xb8>
 801f134:	1e73      	subs	r3, r6, #1
 801f136:	42a3      	cmp	r3, r4
 801f138:	dc0a      	bgt.n	801f150 <_printf_float+0x278>
 801f13a:	682b      	ldr	r3, [r5, #0]
 801f13c:	079b      	lsls	r3, r3, #30
 801f13e:	d500      	bpl.n	801f142 <_printf_float+0x26a>
 801f140:	e105      	b.n	801f34e <_printf_float+0x476>
 801f142:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f144:	68e8      	ldr	r0, [r5, #12]
 801f146:	4298      	cmp	r0, r3
 801f148:	db00      	blt.n	801f14c <_printf_float+0x274>
 801f14a:	e723      	b.n	801ef94 <_printf_float+0xbc>
 801f14c:	0018      	movs	r0, r3
 801f14e:	e721      	b.n	801ef94 <_printf_float+0xbc>
 801f150:	002a      	movs	r2, r5
 801f152:	2301      	movs	r3, #1
 801f154:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f158:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f15a:	321a      	adds	r2, #26
 801f15c:	47b8      	blx	r7
 801f15e:	3001      	adds	r0, #1
 801f160:	d100      	bne.n	801f164 <_printf_float+0x28c>
 801f162:	e715      	b.n	801ef90 <_printf_float+0xb8>
 801f164:	3401      	adds	r4, #1
 801f166:	e7e5      	b.n	801f134 <_printf_float+0x25c>
 801f168:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f16a:	2b00      	cmp	r3, #0
 801f16c:	dc3a      	bgt.n	801f1e4 <_printf_float+0x30c>
 801f16e:	2301      	movs	r3, #1
 801f170:	4a1b      	ldr	r2, [pc, #108]	@ (801f1e0 <_printf_float+0x308>)
 801f172:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f174:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f176:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f178:	47a0      	blx	r4
 801f17a:	3001      	adds	r0, #1
 801f17c:	d100      	bne.n	801f180 <_printf_float+0x2a8>
 801f17e:	e707      	b.n	801ef90 <_printf_float+0xb8>
 801f180:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f182:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f184:	4333      	orrs	r3, r6
 801f186:	d102      	bne.n	801f18e <_printf_float+0x2b6>
 801f188:	682b      	ldr	r3, [r5, #0]
 801f18a:	07db      	lsls	r3, r3, #31
 801f18c:	d5d5      	bpl.n	801f13a <_printf_float+0x262>
 801f18e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f190:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f192:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f194:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f196:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f198:	47a0      	blx	r4
 801f19a:	2300      	movs	r3, #0
 801f19c:	3001      	adds	r0, #1
 801f19e:	d100      	bne.n	801f1a2 <_printf_float+0x2ca>
 801f1a0:	e6f6      	b.n	801ef90 <_printf_float+0xb8>
 801f1a2:	930c      	str	r3, [sp, #48]	@ 0x30
 801f1a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f1a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f1a8:	425b      	negs	r3, r3
 801f1aa:	4293      	cmp	r3, r2
 801f1ac:	dc01      	bgt.n	801f1b2 <_printf_float+0x2da>
 801f1ae:	0033      	movs	r3, r6
 801f1b0:	e792      	b.n	801f0d8 <_printf_float+0x200>
 801f1b2:	002a      	movs	r2, r5
 801f1b4:	2301      	movs	r3, #1
 801f1b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f1b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f1ba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f1bc:	321a      	adds	r2, #26
 801f1be:	47a0      	blx	r4
 801f1c0:	3001      	adds	r0, #1
 801f1c2:	d100      	bne.n	801f1c6 <_printf_float+0x2ee>
 801f1c4:	e6e4      	b.n	801ef90 <_printf_float+0xb8>
 801f1c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f1c8:	3301      	adds	r3, #1
 801f1ca:	e7ea      	b.n	801f1a2 <_printf_float+0x2ca>
 801f1cc:	7fefffff 	.word	0x7fefffff
 801f1d0:	080253b1 	.word	0x080253b1
 801f1d4:	080253b5 	.word	0x080253b5
 801f1d8:	080253b9 	.word	0x080253b9
 801f1dc:	080253bd 	.word	0x080253bd
 801f1e0:	080253c1 	.word	0x080253c1
 801f1e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f1e6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801f1e8:	930c      	str	r3, [sp, #48]	@ 0x30
 801f1ea:	429e      	cmp	r6, r3
 801f1ec:	dd00      	ble.n	801f1f0 <_printf_float+0x318>
 801f1ee:	001e      	movs	r6, r3
 801f1f0:	2e00      	cmp	r6, #0
 801f1f2:	dc31      	bgt.n	801f258 <_printf_float+0x380>
 801f1f4:	43f3      	mvns	r3, r6
 801f1f6:	2400      	movs	r4, #0
 801f1f8:	17db      	asrs	r3, r3, #31
 801f1fa:	4033      	ands	r3, r6
 801f1fc:	930e      	str	r3, [sp, #56]	@ 0x38
 801f1fe:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801f200:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f202:	1af3      	subs	r3, r6, r3
 801f204:	42a3      	cmp	r3, r4
 801f206:	dc30      	bgt.n	801f26a <_printf_float+0x392>
 801f208:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f20a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f20c:	429a      	cmp	r2, r3
 801f20e:	dc38      	bgt.n	801f282 <_printf_float+0x3aa>
 801f210:	682b      	ldr	r3, [r5, #0]
 801f212:	07db      	lsls	r3, r3, #31
 801f214:	d435      	bmi.n	801f282 <_printf_float+0x3aa>
 801f216:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f218:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f21a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f21c:	1b9b      	subs	r3, r3, r6
 801f21e:	1b14      	subs	r4, r2, r4
 801f220:	429c      	cmp	r4, r3
 801f222:	dd00      	ble.n	801f226 <_printf_float+0x34e>
 801f224:	001c      	movs	r4, r3
 801f226:	2c00      	cmp	r4, #0
 801f228:	dc34      	bgt.n	801f294 <_printf_float+0x3bc>
 801f22a:	43e3      	mvns	r3, r4
 801f22c:	2600      	movs	r6, #0
 801f22e:	17db      	asrs	r3, r3, #31
 801f230:	401c      	ands	r4, r3
 801f232:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f234:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f236:	1ad3      	subs	r3, r2, r3
 801f238:	1b1b      	subs	r3, r3, r4
 801f23a:	42b3      	cmp	r3, r6
 801f23c:	dc00      	bgt.n	801f240 <_printf_float+0x368>
 801f23e:	e77c      	b.n	801f13a <_printf_float+0x262>
 801f240:	002a      	movs	r2, r5
 801f242:	2301      	movs	r3, #1
 801f244:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f248:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f24a:	321a      	adds	r2, #26
 801f24c:	47b8      	blx	r7
 801f24e:	3001      	adds	r0, #1
 801f250:	d100      	bne.n	801f254 <_printf_float+0x37c>
 801f252:	e69d      	b.n	801ef90 <_printf_float+0xb8>
 801f254:	3601      	adds	r6, #1
 801f256:	e7ec      	b.n	801f232 <_printf_float+0x35a>
 801f258:	0033      	movs	r3, r6
 801f25a:	003a      	movs	r2, r7
 801f25c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f25e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f260:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f262:	47a0      	blx	r4
 801f264:	3001      	adds	r0, #1
 801f266:	d1c5      	bne.n	801f1f4 <_printf_float+0x31c>
 801f268:	e692      	b.n	801ef90 <_printf_float+0xb8>
 801f26a:	002a      	movs	r2, r5
 801f26c:	2301      	movs	r3, #1
 801f26e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f270:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f272:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f274:	321a      	adds	r2, #26
 801f276:	47b0      	blx	r6
 801f278:	3001      	adds	r0, #1
 801f27a:	d100      	bne.n	801f27e <_printf_float+0x3a6>
 801f27c:	e688      	b.n	801ef90 <_printf_float+0xb8>
 801f27e:	3401      	adds	r4, #1
 801f280:	e7bd      	b.n	801f1fe <_printf_float+0x326>
 801f282:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f284:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f286:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f288:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f28a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f28c:	47a0      	blx	r4
 801f28e:	3001      	adds	r0, #1
 801f290:	d1c1      	bne.n	801f216 <_printf_float+0x33e>
 801f292:	e67d      	b.n	801ef90 <_printf_float+0xb8>
 801f294:	19ba      	adds	r2, r7, r6
 801f296:	0023      	movs	r3, r4
 801f298:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f29a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f29c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f29e:	47b0      	blx	r6
 801f2a0:	3001      	adds	r0, #1
 801f2a2:	d1c2      	bne.n	801f22a <_printf_float+0x352>
 801f2a4:	e674      	b.n	801ef90 <_printf_float+0xb8>
 801f2a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f2a8:	930c      	str	r3, [sp, #48]	@ 0x30
 801f2aa:	2b01      	cmp	r3, #1
 801f2ac:	dc02      	bgt.n	801f2b4 <_printf_float+0x3dc>
 801f2ae:	2301      	movs	r3, #1
 801f2b0:	421a      	tst	r2, r3
 801f2b2:	d039      	beq.n	801f328 <_printf_float+0x450>
 801f2b4:	2301      	movs	r3, #1
 801f2b6:	003a      	movs	r2, r7
 801f2b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f2ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f2bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f2be:	47b0      	blx	r6
 801f2c0:	3001      	adds	r0, #1
 801f2c2:	d100      	bne.n	801f2c6 <_printf_float+0x3ee>
 801f2c4:	e664      	b.n	801ef90 <_printf_float+0xb8>
 801f2c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f2c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f2ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f2cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f2ce:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f2d0:	47b0      	blx	r6
 801f2d2:	3001      	adds	r0, #1
 801f2d4:	d100      	bne.n	801f2d8 <_printf_float+0x400>
 801f2d6:	e65b      	b.n	801ef90 <_printf_float+0xb8>
 801f2d8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801f2da:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801f2dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f2de:	2200      	movs	r2, #0
 801f2e0:	3b01      	subs	r3, #1
 801f2e2:	930c      	str	r3, [sp, #48]	@ 0x30
 801f2e4:	2300      	movs	r3, #0
 801f2e6:	f7e1 f8e3 	bl	80004b0 <__aeabi_dcmpeq>
 801f2ea:	2800      	cmp	r0, #0
 801f2ec:	d11a      	bne.n	801f324 <_printf_float+0x44c>
 801f2ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f2f0:	1c7a      	adds	r2, r7, #1
 801f2f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f2f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f2f6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f2f8:	47b0      	blx	r6
 801f2fa:	3001      	adds	r0, #1
 801f2fc:	d10e      	bne.n	801f31c <_printf_float+0x444>
 801f2fe:	e647      	b.n	801ef90 <_printf_float+0xb8>
 801f300:	002a      	movs	r2, r5
 801f302:	2301      	movs	r3, #1
 801f304:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f306:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f308:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f30a:	321a      	adds	r2, #26
 801f30c:	47b8      	blx	r7
 801f30e:	3001      	adds	r0, #1
 801f310:	d100      	bne.n	801f314 <_printf_float+0x43c>
 801f312:	e63d      	b.n	801ef90 <_printf_float+0xb8>
 801f314:	3601      	adds	r6, #1
 801f316:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f318:	429e      	cmp	r6, r3
 801f31a:	dbf1      	blt.n	801f300 <_printf_float+0x428>
 801f31c:	002a      	movs	r2, r5
 801f31e:	0023      	movs	r3, r4
 801f320:	3250      	adds	r2, #80	@ 0x50
 801f322:	e6da      	b.n	801f0da <_printf_float+0x202>
 801f324:	2600      	movs	r6, #0
 801f326:	e7f6      	b.n	801f316 <_printf_float+0x43e>
 801f328:	003a      	movs	r2, r7
 801f32a:	e7e2      	b.n	801f2f2 <_printf_float+0x41a>
 801f32c:	002a      	movs	r2, r5
 801f32e:	2301      	movs	r3, #1
 801f330:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f334:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f336:	3219      	adds	r2, #25
 801f338:	47b0      	blx	r6
 801f33a:	3001      	adds	r0, #1
 801f33c:	d100      	bne.n	801f340 <_printf_float+0x468>
 801f33e:	e627      	b.n	801ef90 <_printf_float+0xb8>
 801f340:	3401      	adds	r4, #1
 801f342:	68eb      	ldr	r3, [r5, #12]
 801f344:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f346:	1a9b      	subs	r3, r3, r2
 801f348:	42a3      	cmp	r3, r4
 801f34a:	dcef      	bgt.n	801f32c <_printf_float+0x454>
 801f34c:	e6f9      	b.n	801f142 <_printf_float+0x26a>
 801f34e:	2400      	movs	r4, #0
 801f350:	e7f7      	b.n	801f342 <_printf_float+0x46a>
 801f352:	46c0      	nop			@ (mov r8, r8)

0801f354 <_printf_common>:
 801f354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f356:	0016      	movs	r6, r2
 801f358:	9301      	str	r3, [sp, #4]
 801f35a:	688a      	ldr	r2, [r1, #8]
 801f35c:	690b      	ldr	r3, [r1, #16]
 801f35e:	000c      	movs	r4, r1
 801f360:	9000      	str	r0, [sp, #0]
 801f362:	4293      	cmp	r3, r2
 801f364:	da00      	bge.n	801f368 <_printf_common+0x14>
 801f366:	0013      	movs	r3, r2
 801f368:	0022      	movs	r2, r4
 801f36a:	6033      	str	r3, [r6, #0]
 801f36c:	3243      	adds	r2, #67	@ 0x43
 801f36e:	7812      	ldrb	r2, [r2, #0]
 801f370:	2a00      	cmp	r2, #0
 801f372:	d001      	beq.n	801f378 <_printf_common+0x24>
 801f374:	3301      	adds	r3, #1
 801f376:	6033      	str	r3, [r6, #0]
 801f378:	6823      	ldr	r3, [r4, #0]
 801f37a:	069b      	lsls	r3, r3, #26
 801f37c:	d502      	bpl.n	801f384 <_printf_common+0x30>
 801f37e:	6833      	ldr	r3, [r6, #0]
 801f380:	3302      	adds	r3, #2
 801f382:	6033      	str	r3, [r6, #0]
 801f384:	6822      	ldr	r2, [r4, #0]
 801f386:	2306      	movs	r3, #6
 801f388:	0015      	movs	r5, r2
 801f38a:	401d      	ands	r5, r3
 801f38c:	421a      	tst	r2, r3
 801f38e:	d027      	beq.n	801f3e0 <_printf_common+0x8c>
 801f390:	0023      	movs	r3, r4
 801f392:	3343      	adds	r3, #67	@ 0x43
 801f394:	781b      	ldrb	r3, [r3, #0]
 801f396:	1e5a      	subs	r2, r3, #1
 801f398:	4193      	sbcs	r3, r2
 801f39a:	6822      	ldr	r2, [r4, #0]
 801f39c:	0692      	lsls	r2, r2, #26
 801f39e:	d430      	bmi.n	801f402 <_printf_common+0xae>
 801f3a0:	0022      	movs	r2, r4
 801f3a2:	9901      	ldr	r1, [sp, #4]
 801f3a4:	9800      	ldr	r0, [sp, #0]
 801f3a6:	9d08      	ldr	r5, [sp, #32]
 801f3a8:	3243      	adds	r2, #67	@ 0x43
 801f3aa:	47a8      	blx	r5
 801f3ac:	3001      	adds	r0, #1
 801f3ae:	d025      	beq.n	801f3fc <_printf_common+0xa8>
 801f3b0:	2206      	movs	r2, #6
 801f3b2:	6823      	ldr	r3, [r4, #0]
 801f3b4:	2500      	movs	r5, #0
 801f3b6:	4013      	ands	r3, r2
 801f3b8:	2b04      	cmp	r3, #4
 801f3ba:	d105      	bne.n	801f3c8 <_printf_common+0x74>
 801f3bc:	6833      	ldr	r3, [r6, #0]
 801f3be:	68e5      	ldr	r5, [r4, #12]
 801f3c0:	1aed      	subs	r5, r5, r3
 801f3c2:	43eb      	mvns	r3, r5
 801f3c4:	17db      	asrs	r3, r3, #31
 801f3c6:	401d      	ands	r5, r3
 801f3c8:	68a3      	ldr	r3, [r4, #8]
 801f3ca:	6922      	ldr	r2, [r4, #16]
 801f3cc:	4293      	cmp	r3, r2
 801f3ce:	dd01      	ble.n	801f3d4 <_printf_common+0x80>
 801f3d0:	1a9b      	subs	r3, r3, r2
 801f3d2:	18ed      	adds	r5, r5, r3
 801f3d4:	2600      	movs	r6, #0
 801f3d6:	42b5      	cmp	r5, r6
 801f3d8:	d120      	bne.n	801f41c <_printf_common+0xc8>
 801f3da:	2000      	movs	r0, #0
 801f3dc:	e010      	b.n	801f400 <_printf_common+0xac>
 801f3de:	3501      	adds	r5, #1
 801f3e0:	68e3      	ldr	r3, [r4, #12]
 801f3e2:	6832      	ldr	r2, [r6, #0]
 801f3e4:	1a9b      	subs	r3, r3, r2
 801f3e6:	42ab      	cmp	r3, r5
 801f3e8:	ddd2      	ble.n	801f390 <_printf_common+0x3c>
 801f3ea:	0022      	movs	r2, r4
 801f3ec:	2301      	movs	r3, #1
 801f3ee:	9901      	ldr	r1, [sp, #4]
 801f3f0:	9800      	ldr	r0, [sp, #0]
 801f3f2:	9f08      	ldr	r7, [sp, #32]
 801f3f4:	3219      	adds	r2, #25
 801f3f6:	47b8      	blx	r7
 801f3f8:	3001      	adds	r0, #1
 801f3fa:	d1f0      	bne.n	801f3de <_printf_common+0x8a>
 801f3fc:	2001      	movs	r0, #1
 801f3fe:	4240      	negs	r0, r0
 801f400:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f402:	2030      	movs	r0, #48	@ 0x30
 801f404:	18e1      	adds	r1, r4, r3
 801f406:	3143      	adds	r1, #67	@ 0x43
 801f408:	7008      	strb	r0, [r1, #0]
 801f40a:	0021      	movs	r1, r4
 801f40c:	1c5a      	adds	r2, r3, #1
 801f40e:	3145      	adds	r1, #69	@ 0x45
 801f410:	7809      	ldrb	r1, [r1, #0]
 801f412:	18a2      	adds	r2, r4, r2
 801f414:	3243      	adds	r2, #67	@ 0x43
 801f416:	3302      	adds	r3, #2
 801f418:	7011      	strb	r1, [r2, #0]
 801f41a:	e7c1      	b.n	801f3a0 <_printf_common+0x4c>
 801f41c:	0022      	movs	r2, r4
 801f41e:	2301      	movs	r3, #1
 801f420:	9901      	ldr	r1, [sp, #4]
 801f422:	9800      	ldr	r0, [sp, #0]
 801f424:	9f08      	ldr	r7, [sp, #32]
 801f426:	321a      	adds	r2, #26
 801f428:	47b8      	blx	r7
 801f42a:	3001      	adds	r0, #1
 801f42c:	d0e6      	beq.n	801f3fc <_printf_common+0xa8>
 801f42e:	3601      	adds	r6, #1
 801f430:	e7d1      	b.n	801f3d6 <_printf_common+0x82>
	...

0801f434 <_printf_i>:
 801f434:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f436:	b08b      	sub	sp, #44	@ 0x2c
 801f438:	9206      	str	r2, [sp, #24]
 801f43a:	000a      	movs	r2, r1
 801f43c:	3243      	adds	r2, #67	@ 0x43
 801f43e:	9307      	str	r3, [sp, #28]
 801f440:	9005      	str	r0, [sp, #20]
 801f442:	9203      	str	r2, [sp, #12]
 801f444:	7e0a      	ldrb	r2, [r1, #24]
 801f446:	000c      	movs	r4, r1
 801f448:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f44a:	2a78      	cmp	r2, #120	@ 0x78
 801f44c:	d809      	bhi.n	801f462 <_printf_i+0x2e>
 801f44e:	2a62      	cmp	r2, #98	@ 0x62
 801f450:	d80b      	bhi.n	801f46a <_printf_i+0x36>
 801f452:	2a00      	cmp	r2, #0
 801f454:	d100      	bne.n	801f458 <_printf_i+0x24>
 801f456:	e0bc      	b.n	801f5d2 <_printf_i+0x19e>
 801f458:	497b      	ldr	r1, [pc, #492]	@ (801f648 <_printf_i+0x214>)
 801f45a:	9104      	str	r1, [sp, #16]
 801f45c:	2a58      	cmp	r2, #88	@ 0x58
 801f45e:	d100      	bne.n	801f462 <_printf_i+0x2e>
 801f460:	e090      	b.n	801f584 <_printf_i+0x150>
 801f462:	0025      	movs	r5, r4
 801f464:	3542      	adds	r5, #66	@ 0x42
 801f466:	702a      	strb	r2, [r5, #0]
 801f468:	e022      	b.n	801f4b0 <_printf_i+0x7c>
 801f46a:	0010      	movs	r0, r2
 801f46c:	3863      	subs	r0, #99	@ 0x63
 801f46e:	2815      	cmp	r0, #21
 801f470:	d8f7      	bhi.n	801f462 <_printf_i+0x2e>
 801f472:	f7e0 fe8d 	bl	8000190 <__gnu_thumb1_case_shi>
 801f476:	0016      	.short	0x0016
 801f478:	fff6001f 	.word	0xfff6001f
 801f47c:	fff6fff6 	.word	0xfff6fff6
 801f480:	001ffff6 	.word	0x001ffff6
 801f484:	fff6fff6 	.word	0xfff6fff6
 801f488:	fff6fff6 	.word	0xfff6fff6
 801f48c:	003600a1 	.word	0x003600a1
 801f490:	fff60080 	.word	0xfff60080
 801f494:	00b2fff6 	.word	0x00b2fff6
 801f498:	0036fff6 	.word	0x0036fff6
 801f49c:	fff6fff6 	.word	0xfff6fff6
 801f4a0:	0084      	.short	0x0084
 801f4a2:	0025      	movs	r5, r4
 801f4a4:	681a      	ldr	r2, [r3, #0]
 801f4a6:	3542      	adds	r5, #66	@ 0x42
 801f4a8:	1d11      	adds	r1, r2, #4
 801f4aa:	6019      	str	r1, [r3, #0]
 801f4ac:	6813      	ldr	r3, [r2, #0]
 801f4ae:	702b      	strb	r3, [r5, #0]
 801f4b0:	2301      	movs	r3, #1
 801f4b2:	e0a0      	b.n	801f5f6 <_printf_i+0x1c2>
 801f4b4:	6818      	ldr	r0, [r3, #0]
 801f4b6:	6809      	ldr	r1, [r1, #0]
 801f4b8:	1d02      	adds	r2, r0, #4
 801f4ba:	060d      	lsls	r5, r1, #24
 801f4bc:	d50b      	bpl.n	801f4d6 <_printf_i+0xa2>
 801f4be:	6806      	ldr	r6, [r0, #0]
 801f4c0:	601a      	str	r2, [r3, #0]
 801f4c2:	2e00      	cmp	r6, #0
 801f4c4:	da03      	bge.n	801f4ce <_printf_i+0x9a>
 801f4c6:	232d      	movs	r3, #45	@ 0x2d
 801f4c8:	9a03      	ldr	r2, [sp, #12]
 801f4ca:	4276      	negs	r6, r6
 801f4cc:	7013      	strb	r3, [r2, #0]
 801f4ce:	4b5e      	ldr	r3, [pc, #376]	@ (801f648 <_printf_i+0x214>)
 801f4d0:	270a      	movs	r7, #10
 801f4d2:	9304      	str	r3, [sp, #16]
 801f4d4:	e018      	b.n	801f508 <_printf_i+0xd4>
 801f4d6:	6806      	ldr	r6, [r0, #0]
 801f4d8:	601a      	str	r2, [r3, #0]
 801f4da:	0649      	lsls	r1, r1, #25
 801f4dc:	d5f1      	bpl.n	801f4c2 <_printf_i+0x8e>
 801f4de:	b236      	sxth	r6, r6
 801f4e0:	e7ef      	b.n	801f4c2 <_printf_i+0x8e>
 801f4e2:	6808      	ldr	r0, [r1, #0]
 801f4e4:	6819      	ldr	r1, [r3, #0]
 801f4e6:	c940      	ldmia	r1!, {r6}
 801f4e8:	0605      	lsls	r5, r0, #24
 801f4ea:	d402      	bmi.n	801f4f2 <_printf_i+0xbe>
 801f4ec:	0640      	lsls	r0, r0, #25
 801f4ee:	d500      	bpl.n	801f4f2 <_printf_i+0xbe>
 801f4f0:	b2b6      	uxth	r6, r6
 801f4f2:	6019      	str	r1, [r3, #0]
 801f4f4:	4b54      	ldr	r3, [pc, #336]	@ (801f648 <_printf_i+0x214>)
 801f4f6:	270a      	movs	r7, #10
 801f4f8:	9304      	str	r3, [sp, #16]
 801f4fa:	2a6f      	cmp	r2, #111	@ 0x6f
 801f4fc:	d100      	bne.n	801f500 <_printf_i+0xcc>
 801f4fe:	3f02      	subs	r7, #2
 801f500:	0023      	movs	r3, r4
 801f502:	2200      	movs	r2, #0
 801f504:	3343      	adds	r3, #67	@ 0x43
 801f506:	701a      	strb	r2, [r3, #0]
 801f508:	6863      	ldr	r3, [r4, #4]
 801f50a:	60a3      	str	r3, [r4, #8]
 801f50c:	2b00      	cmp	r3, #0
 801f50e:	db03      	blt.n	801f518 <_printf_i+0xe4>
 801f510:	2104      	movs	r1, #4
 801f512:	6822      	ldr	r2, [r4, #0]
 801f514:	438a      	bics	r2, r1
 801f516:	6022      	str	r2, [r4, #0]
 801f518:	2e00      	cmp	r6, #0
 801f51a:	d102      	bne.n	801f522 <_printf_i+0xee>
 801f51c:	9d03      	ldr	r5, [sp, #12]
 801f51e:	2b00      	cmp	r3, #0
 801f520:	d00c      	beq.n	801f53c <_printf_i+0x108>
 801f522:	9d03      	ldr	r5, [sp, #12]
 801f524:	0030      	movs	r0, r6
 801f526:	0039      	movs	r1, r7
 801f528:	f7e0 fec2 	bl	80002b0 <__aeabi_uidivmod>
 801f52c:	9b04      	ldr	r3, [sp, #16]
 801f52e:	3d01      	subs	r5, #1
 801f530:	5c5b      	ldrb	r3, [r3, r1]
 801f532:	702b      	strb	r3, [r5, #0]
 801f534:	0033      	movs	r3, r6
 801f536:	0006      	movs	r6, r0
 801f538:	429f      	cmp	r7, r3
 801f53a:	d9f3      	bls.n	801f524 <_printf_i+0xf0>
 801f53c:	2f08      	cmp	r7, #8
 801f53e:	d109      	bne.n	801f554 <_printf_i+0x120>
 801f540:	6823      	ldr	r3, [r4, #0]
 801f542:	07db      	lsls	r3, r3, #31
 801f544:	d506      	bpl.n	801f554 <_printf_i+0x120>
 801f546:	6862      	ldr	r2, [r4, #4]
 801f548:	6923      	ldr	r3, [r4, #16]
 801f54a:	429a      	cmp	r2, r3
 801f54c:	dc02      	bgt.n	801f554 <_printf_i+0x120>
 801f54e:	2330      	movs	r3, #48	@ 0x30
 801f550:	3d01      	subs	r5, #1
 801f552:	702b      	strb	r3, [r5, #0]
 801f554:	9b03      	ldr	r3, [sp, #12]
 801f556:	1b5b      	subs	r3, r3, r5
 801f558:	6123      	str	r3, [r4, #16]
 801f55a:	9b07      	ldr	r3, [sp, #28]
 801f55c:	0021      	movs	r1, r4
 801f55e:	9300      	str	r3, [sp, #0]
 801f560:	9805      	ldr	r0, [sp, #20]
 801f562:	9b06      	ldr	r3, [sp, #24]
 801f564:	aa09      	add	r2, sp, #36	@ 0x24
 801f566:	f7ff fef5 	bl	801f354 <_printf_common>
 801f56a:	3001      	adds	r0, #1
 801f56c:	d148      	bne.n	801f600 <_printf_i+0x1cc>
 801f56e:	2001      	movs	r0, #1
 801f570:	4240      	negs	r0, r0
 801f572:	b00b      	add	sp, #44	@ 0x2c
 801f574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f576:	2220      	movs	r2, #32
 801f578:	6809      	ldr	r1, [r1, #0]
 801f57a:	430a      	orrs	r2, r1
 801f57c:	6022      	str	r2, [r4, #0]
 801f57e:	2278      	movs	r2, #120	@ 0x78
 801f580:	4932      	ldr	r1, [pc, #200]	@ (801f64c <_printf_i+0x218>)
 801f582:	9104      	str	r1, [sp, #16]
 801f584:	0021      	movs	r1, r4
 801f586:	3145      	adds	r1, #69	@ 0x45
 801f588:	700a      	strb	r2, [r1, #0]
 801f58a:	6819      	ldr	r1, [r3, #0]
 801f58c:	6822      	ldr	r2, [r4, #0]
 801f58e:	c940      	ldmia	r1!, {r6}
 801f590:	0610      	lsls	r0, r2, #24
 801f592:	d402      	bmi.n	801f59a <_printf_i+0x166>
 801f594:	0650      	lsls	r0, r2, #25
 801f596:	d500      	bpl.n	801f59a <_printf_i+0x166>
 801f598:	b2b6      	uxth	r6, r6
 801f59a:	6019      	str	r1, [r3, #0]
 801f59c:	07d3      	lsls	r3, r2, #31
 801f59e:	d502      	bpl.n	801f5a6 <_printf_i+0x172>
 801f5a0:	2320      	movs	r3, #32
 801f5a2:	4313      	orrs	r3, r2
 801f5a4:	6023      	str	r3, [r4, #0]
 801f5a6:	2e00      	cmp	r6, #0
 801f5a8:	d001      	beq.n	801f5ae <_printf_i+0x17a>
 801f5aa:	2710      	movs	r7, #16
 801f5ac:	e7a8      	b.n	801f500 <_printf_i+0xcc>
 801f5ae:	2220      	movs	r2, #32
 801f5b0:	6823      	ldr	r3, [r4, #0]
 801f5b2:	4393      	bics	r3, r2
 801f5b4:	6023      	str	r3, [r4, #0]
 801f5b6:	e7f8      	b.n	801f5aa <_printf_i+0x176>
 801f5b8:	681a      	ldr	r2, [r3, #0]
 801f5ba:	680d      	ldr	r5, [r1, #0]
 801f5bc:	1d10      	adds	r0, r2, #4
 801f5be:	6949      	ldr	r1, [r1, #20]
 801f5c0:	6018      	str	r0, [r3, #0]
 801f5c2:	6813      	ldr	r3, [r2, #0]
 801f5c4:	062e      	lsls	r6, r5, #24
 801f5c6:	d501      	bpl.n	801f5cc <_printf_i+0x198>
 801f5c8:	6019      	str	r1, [r3, #0]
 801f5ca:	e002      	b.n	801f5d2 <_printf_i+0x19e>
 801f5cc:	066d      	lsls	r5, r5, #25
 801f5ce:	d5fb      	bpl.n	801f5c8 <_printf_i+0x194>
 801f5d0:	8019      	strh	r1, [r3, #0]
 801f5d2:	2300      	movs	r3, #0
 801f5d4:	9d03      	ldr	r5, [sp, #12]
 801f5d6:	6123      	str	r3, [r4, #16]
 801f5d8:	e7bf      	b.n	801f55a <_printf_i+0x126>
 801f5da:	681a      	ldr	r2, [r3, #0]
 801f5dc:	1d11      	adds	r1, r2, #4
 801f5de:	6019      	str	r1, [r3, #0]
 801f5e0:	6815      	ldr	r5, [r2, #0]
 801f5e2:	2100      	movs	r1, #0
 801f5e4:	0028      	movs	r0, r5
 801f5e6:	6862      	ldr	r2, [r4, #4]
 801f5e8:	f000 fb7b 	bl	801fce2 <memchr>
 801f5ec:	2800      	cmp	r0, #0
 801f5ee:	d001      	beq.n	801f5f4 <_printf_i+0x1c0>
 801f5f0:	1b40      	subs	r0, r0, r5
 801f5f2:	6060      	str	r0, [r4, #4]
 801f5f4:	6863      	ldr	r3, [r4, #4]
 801f5f6:	6123      	str	r3, [r4, #16]
 801f5f8:	2300      	movs	r3, #0
 801f5fa:	9a03      	ldr	r2, [sp, #12]
 801f5fc:	7013      	strb	r3, [r2, #0]
 801f5fe:	e7ac      	b.n	801f55a <_printf_i+0x126>
 801f600:	002a      	movs	r2, r5
 801f602:	6923      	ldr	r3, [r4, #16]
 801f604:	9906      	ldr	r1, [sp, #24]
 801f606:	9805      	ldr	r0, [sp, #20]
 801f608:	9d07      	ldr	r5, [sp, #28]
 801f60a:	47a8      	blx	r5
 801f60c:	3001      	adds	r0, #1
 801f60e:	d0ae      	beq.n	801f56e <_printf_i+0x13a>
 801f610:	6823      	ldr	r3, [r4, #0]
 801f612:	079b      	lsls	r3, r3, #30
 801f614:	d415      	bmi.n	801f642 <_printf_i+0x20e>
 801f616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f618:	68e0      	ldr	r0, [r4, #12]
 801f61a:	4298      	cmp	r0, r3
 801f61c:	daa9      	bge.n	801f572 <_printf_i+0x13e>
 801f61e:	0018      	movs	r0, r3
 801f620:	e7a7      	b.n	801f572 <_printf_i+0x13e>
 801f622:	0022      	movs	r2, r4
 801f624:	2301      	movs	r3, #1
 801f626:	9906      	ldr	r1, [sp, #24]
 801f628:	9805      	ldr	r0, [sp, #20]
 801f62a:	9e07      	ldr	r6, [sp, #28]
 801f62c:	3219      	adds	r2, #25
 801f62e:	47b0      	blx	r6
 801f630:	3001      	adds	r0, #1
 801f632:	d09c      	beq.n	801f56e <_printf_i+0x13a>
 801f634:	3501      	adds	r5, #1
 801f636:	68e3      	ldr	r3, [r4, #12]
 801f638:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f63a:	1a9b      	subs	r3, r3, r2
 801f63c:	42ab      	cmp	r3, r5
 801f63e:	dcf0      	bgt.n	801f622 <_printf_i+0x1ee>
 801f640:	e7e9      	b.n	801f616 <_printf_i+0x1e2>
 801f642:	2500      	movs	r5, #0
 801f644:	e7f7      	b.n	801f636 <_printf_i+0x202>
 801f646:	46c0      	nop			@ (mov r8, r8)
 801f648:	080253c3 	.word	0x080253c3
 801f64c:	080253d4 	.word	0x080253d4

0801f650 <std>:
 801f650:	2300      	movs	r3, #0
 801f652:	b510      	push	{r4, lr}
 801f654:	0004      	movs	r4, r0
 801f656:	6003      	str	r3, [r0, #0]
 801f658:	6043      	str	r3, [r0, #4]
 801f65a:	6083      	str	r3, [r0, #8]
 801f65c:	8181      	strh	r1, [r0, #12]
 801f65e:	6643      	str	r3, [r0, #100]	@ 0x64
 801f660:	81c2      	strh	r2, [r0, #14]
 801f662:	6103      	str	r3, [r0, #16]
 801f664:	6143      	str	r3, [r0, #20]
 801f666:	6183      	str	r3, [r0, #24]
 801f668:	0019      	movs	r1, r3
 801f66a:	2208      	movs	r2, #8
 801f66c:	305c      	adds	r0, #92	@ 0x5c
 801f66e:	f000 fa67 	bl	801fb40 <memset>
 801f672:	4b0b      	ldr	r3, [pc, #44]	@ (801f6a0 <std+0x50>)
 801f674:	6224      	str	r4, [r4, #32]
 801f676:	6263      	str	r3, [r4, #36]	@ 0x24
 801f678:	4b0a      	ldr	r3, [pc, #40]	@ (801f6a4 <std+0x54>)
 801f67a:	62a3      	str	r3, [r4, #40]	@ 0x28
 801f67c:	4b0a      	ldr	r3, [pc, #40]	@ (801f6a8 <std+0x58>)
 801f67e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801f680:	4b0a      	ldr	r3, [pc, #40]	@ (801f6ac <std+0x5c>)
 801f682:	6323      	str	r3, [r4, #48]	@ 0x30
 801f684:	4b0a      	ldr	r3, [pc, #40]	@ (801f6b0 <std+0x60>)
 801f686:	429c      	cmp	r4, r3
 801f688:	d005      	beq.n	801f696 <std+0x46>
 801f68a:	4b0a      	ldr	r3, [pc, #40]	@ (801f6b4 <std+0x64>)
 801f68c:	429c      	cmp	r4, r3
 801f68e:	d002      	beq.n	801f696 <std+0x46>
 801f690:	4b09      	ldr	r3, [pc, #36]	@ (801f6b8 <std+0x68>)
 801f692:	429c      	cmp	r4, r3
 801f694:	d103      	bne.n	801f69e <std+0x4e>
 801f696:	0020      	movs	r0, r4
 801f698:	3058      	adds	r0, #88	@ 0x58
 801f69a:	f000 fb1f 	bl	801fcdc <__retarget_lock_init_recursive>
 801f69e:	bd10      	pop	{r4, pc}
 801f6a0:	0801f8f9 	.word	0x0801f8f9
 801f6a4:	0801f921 	.word	0x0801f921
 801f6a8:	0801f959 	.word	0x0801f959
 801f6ac:	0801f985 	.word	0x0801f985
 801f6b0:	20003858 	.word	0x20003858
 801f6b4:	200038c0 	.word	0x200038c0
 801f6b8:	20003928 	.word	0x20003928

0801f6bc <stdio_exit_handler>:
 801f6bc:	b510      	push	{r4, lr}
 801f6be:	4a03      	ldr	r2, [pc, #12]	@ (801f6cc <stdio_exit_handler+0x10>)
 801f6c0:	4903      	ldr	r1, [pc, #12]	@ (801f6d0 <stdio_exit_handler+0x14>)
 801f6c2:	4804      	ldr	r0, [pc, #16]	@ (801f6d4 <stdio_exit_handler+0x18>)
 801f6c4:	f000 f86c 	bl	801f7a0 <_fwalk_sglue>
 801f6c8:	bd10      	pop	{r4, pc}
 801f6ca:	46c0      	nop			@ (mov r8, r8)
 801f6cc:	20000254 	.word	0x20000254
 801f6d0:	08022301 	.word	0x08022301
 801f6d4:	200003d0 	.word	0x200003d0

0801f6d8 <cleanup_stdio>:
 801f6d8:	6841      	ldr	r1, [r0, #4]
 801f6da:	4b0b      	ldr	r3, [pc, #44]	@ (801f708 <cleanup_stdio+0x30>)
 801f6dc:	b510      	push	{r4, lr}
 801f6de:	0004      	movs	r4, r0
 801f6e0:	4299      	cmp	r1, r3
 801f6e2:	d001      	beq.n	801f6e8 <cleanup_stdio+0x10>
 801f6e4:	f002 fe0c 	bl	8022300 <_fflush_r>
 801f6e8:	68a1      	ldr	r1, [r4, #8]
 801f6ea:	4b08      	ldr	r3, [pc, #32]	@ (801f70c <cleanup_stdio+0x34>)
 801f6ec:	4299      	cmp	r1, r3
 801f6ee:	d002      	beq.n	801f6f6 <cleanup_stdio+0x1e>
 801f6f0:	0020      	movs	r0, r4
 801f6f2:	f002 fe05 	bl	8022300 <_fflush_r>
 801f6f6:	68e1      	ldr	r1, [r4, #12]
 801f6f8:	4b05      	ldr	r3, [pc, #20]	@ (801f710 <cleanup_stdio+0x38>)
 801f6fa:	4299      	cmp	r1, r3
 801f6fc:	d002      	beq.n	801f704 <cleanup_stdio+0x2c>
 801f6fe:	0020      	movs	r0, r4
 801f700:	f002 fdfe 	bl	8022300 <_fflush_r>
 801f704:	bd10      	pop	{r4, pc}
 801f706:	46c0      	nop			@ (mov r8, r8)
 801f708:	20003858 	.word	0x20003858
 801f70c:	200038c0 	.word	0x200038c0
 801f710:	20003928 	.word	0x20003928

0801f714 <global_stdio_init.part.0>:
 801f714:	b510      	push	{r4, lr}
 801f716:	4b09      	ldr	r3, [pc, #36]	@ (801f73c <global_stdio_init.part.0+0x28>)
 801f718:	4a09      	ldr	r2, [pc, #36]	@ (801f740 <global_stdio_init.part.0+0x2c>)
 801f71a:	2104      	movs	r1, #4
 801f71c:	601a      	str	r2, [r3, #0]
 801f71e:	4809      	ldr	r0, [pc, #36]	@ (801f744 <global_stdio_init.part.0+0x30>)
 801f720:	2200      	movs	r2, #0
 801f722:	f7ff ff95 	bl	801f650 <std>
 801f726:	2201      	movs	r2, #1
 801f728:	2109      	movs	r1, #9
 801f72a:	4807      	ldr	r0, [pc, #28]	@ (801f748 <global_stdio_init.part.0+0x34>)
 801f72c:	f7ff ff90 	bl	801f650 <std>
 801f730:	2202      	movs	r2, #2
 801f732:	2112      	movs	r1, #18
 801f734:	4805      	ldr	r0, [pc, #20]	@ (801f74c <global_stdio_init.part.0+0x38>)
 801f736:	f7ff ff8b 	bl	801f650 <std>
 801f73a:	bd10      	pop	{r4, pc}
 801f73c:	20003990 	.word	0x20003990
 801f740:	0801f6bd 	.word	0x0801f6bd
 801f744:	20003858 	.word	0x20003858
 801f748:	200038c0 	.word	0x200038c0
 801f74c:	20003928 	.word	0x20003928

0801f750 <__sfp_lock_acquire>:
 801f750:	b510      	push	{r4, lr}
 801f752:	4802      	ldr	r0, [pc, #8]	@ (801f75c <__sfp_lock_acquire+0xc>)
 801f754:	f000 fac3 	bl	801fcde <__retarget_lock_acquire_recursive>
 801f758:	bd10      	pop	{r4, pc}
 801f75a:	46c0      	nop			@ (mov r8, r8)
 801f75c:	20003999 	.word	0x20003999

0801f760 <__sfp_lock_release>:
 801f760:	b510      	push	{r4, lr}
 801f762:	4802      	ldr	r0, [pc, #8]	@ (801f76c <__sfp_lock_release+0xc>)
 801f764:	f000 fabc 	bl	801fce0 <__retarget_lock_release_recursive>
 801f768:	bd10      	pop	{r4, pc}
 801f76a:	46c0      	nop			@ (mov r8, r8)
 801f76c:	20003999 	.word	0x20003999

0801f770 <__sinit>:
 801f770:	b510      	push	{r4, lr}
 801f772:	0004      	movs	r4, r0
 801f774:	f7ff ffec 	bl	801f750 <__sfp_lock_acquire>
 801f778:	6a23      	ldr	r3, [r4, #32]
 801f77a:	2b00      	cmp	r3, #0
 801f77c:	d002      	beq.n	801f784 <__sinit+0x14>
 801f77e:	f7ff ffef 	bl	801f760 <__sfp_lock_release>
 801f782:	bd10      	pop	{r4, pc}
 801f784:	4b04      	ldr	r3, [pc, #16]	@ (801f798 <__sinit+0x28>)
 801f786:	6223      	str	r3, [r4, #32]
 801f788:	4b04      	ldr	r3, [pc, #16]	@ (801f79c <__sinit+0x2c>)
 801f78a:	681b      	ldr	r3, [r3, #0]
 801f78c:	2b00      	cmp	r3, #0
 801f78e:	d1f6      	bne.n	801f77e <__sinit+0xe>
 801f790:	f7ff ffc0 	bl	801f714 <global_stdio_init.part.0>
 801f794:	e7f3      	b.n	801f77e <__sinit+0xe>
 801f796:	46c0      	nop			@ (mov r8, r8)
 801f798:	0801f6d9 	.word	0x0801f6d9
 801f79c:	20003990 	.word	0x20003990

0801f7a0 <_fwalk_sglue>:
 801f7a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f7a2:	0014      	movs	r4, r2
 801f7a4:	2600      	movs	r6, #0
 801f7a6:	9000      	str	r0, [sp, #0]
 801f7a8:	9101      	str	r1, [sp, #4]
 801f7aa:	68a5      	ldr	r5, [r4, #8]
 801f7ac:	6867      	ldr	r7, [r4, #4]
 801f7ae:	3f01      	subs	r7, #1
 801f7b0:	d504      	bpl.n	801f7bc <_fwalk_sglue+0x1c>
 801f7b2:	6824      	ldr	r4, [r4, #0]
 801f7b4:	2c00      	cmp	r4, #0
 801f7b6:	d1f8      	bne.n	801f7aa <_fwalk_sglue+0xa>
 801f7b8:	0030      	movs	r0, r6
 801f7ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f7bc:	89ab      	ldrh	r3, [r5, #12]
 801f7be:	2b01      	cmp	r3, #1
 801f7c0:	d908      	bls.n	801f7d4 <_fwalk_sglue+0x34>
 801f7c2:	220e      	movs	r2, #14
 801f7c4:	5eab      	ldrsh	r3, [r5, r2]
 801f7c6:	3301      	adds	r3, #1
 801f7c8:	d004      	beq.n	801f7d4 <_fwalk_sglue+0x34>
 801f7ca:	0029      	movs	r1, r5
 801f7cc:	9800      	ldr	r0, [sp, #0]
 801f7ce:	9b01      	ldr	r3, [sp, #4]
 801f7d0:	4798      	blx	r3
 801f7d2:	4306      	orrs	r6, r0
 801f7d4:	3568      	adds	r5, #104	@ 0x68
 801f7d6:	e7ea      	b.n	801f7ae <_fwalk_sglue+0xe>

0801f7d8 <iprintf>:
 801f7d8:	b40f      	push	{r0, r1, r2, r3}
 801f7da:	b507      	push	{r0, r1, r2, lr}
 801f7dc:	4905      	ldr	r1, [pc, #20]	@ (801f7f4 <iprintf+0x1c>)
 801f7de:	ab04      	add	r3, sp, #16
 801f7e0:	6808      	ldr	r0, [r1, #0]
 801f7e2:	cb04      	ldmia	r3!, {r2}
 801f7e4:	6881      	ldr	r1, [r0, #8]
 801f7e6:	9301      	str	r3, [sp, #4]
 801f7e8:	f002 fbe8 	bl	8021fbc <_vfiprintf_r>
 801f7ec:	b003      	add	sp, #12
 801f7ee:	bc08      	pop	{r3}
 801f7f0:	b004      	add	sp, #16
 801f7f2:	4718      	bx	r3
 801f7f4:	200003cc 	.word	0x200003cc

0801f7f8 <_puts_r>:
 801f7f8:	6a03      	ldr	r3, [r0, #32]
 801f7fa:	b570      	push	{r4, r5, r6, lr}
 801f7fc:	0005      	movs	r5, r0
 801f7fe:	000e      	movs	r6, r1
 801f800:	6884      	ldr	r4, [r0, #8]
 801f802:	2b00      	cmp	r3, #0
 801f804:	d101      	bne.n	801f80a <_puts_r+0x12>
 801f806:	f7ff ffb3 	bl	801f770 <__sinit>
 801f80a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f80c:	07db      	lsls	r3, r3, #31
 801f80e:	d405      	bmi.n	801f81c <_puts_r+0x24>
 801f810:	89a3      	ldrh	r3, [r4, #12]
 801f812:	059b      	lsls	r3, r3, #22
 801f814:	d402      	bmi.n	801f81c <_puts_r+0x24>
 801f816:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f818:	f000 fa61 	bl	801fcde <__retarget_lock_acquire_recursive>
 801f81c:	89a3      	ldrh	r3, [r4, #12]
 801f81e:	071b      	lsls	r3, r3, #28
 801f820:	d502      	bpl.n	801f828 <_puts_r+0x30>
 801f822:	6923      	ldr	r3, [r4, #16]
 801f824:	2b00      	cmp	r3, #0
 801f826:	d11f      	bne.n	801f868 <_puts_r+0x70>
 801f828:	0021      	movs	r1, r4
 801f82a:	0028      	movs	r0, r5
 801f82c:	f000 f92a 	bl	801fa84 <__swsetup_r>
 801f830:	2800      	cmp	r0, #0
 801f832:	d019      	beq.n	801f868 <_puts_r+0x70>
 801f834:	2501      	movs	r5, #1
 801f836:	426d      	negs	r5, r5
 801f838:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f83a:	07db      	lsls	r3, r3, #31
 801f83c:	d405      	bmi.n	801f84a <_puts_r+0x52>
 801f83e:	89a3      	ldrh	r3, [r4, #12]
 801f840:	059b      	lsls	r3, r3, #22
 801f842:	d402      	bmi.n	801f84a <_puts_r+0x52>
 801f844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f846:	f000 fa4b 	bl	801fce0 <__retarget_lock_release_recursive>
 801f84a:	0028      	movs	r0, r5
 801f84c:	bd70      	pop	{r4, r5, r6, pc}
 801f84e:	3601      	adds	r6, #1
 801f850:	60a3      	str	r3, [r4, #8]
 801f852:	2b00      	cmp	r3, #0
 801f854:	da04      	bge.n	801f860 <_puts_r+0x68>
 801f856:	69a2      	ldr	r2, [r4, #24]
 801f858:	429a      	cmp	r2, r3
 801f85a:	dc16      	bgt.n	801f88a <_puts_r+0x92>
 801f85c:	290a      	cmp	r1, #10
 801f85e:	d014      	beq.n	801f88a <_puts_r+0x92>
 801f860:	6823      	ldr	r3, [r4, #0]
 801f862:	1c5a      	adds	r2, r3, #1
 801f864:	6022      	str	r2, [r4, #0]
 801f866:	7019      	strb	r1, [r3, #0]
 801f868:	68a3      	ldr	r3, [r4, #8]
 801f86a:	7831      	ldrb	r1, [r6, #0]
 801f86c:	3b01      	subs	r3, #1
 801f86e:	2900      	cmp	r1, #0
 801f870:	d1ed      	bne.n	801f84e <_puts_r+0x56>
 801f872:	60a3      	str	r3, [r4, #8]
 801f874:	2b00      	cmp	r3, #0
 801f876:	da0f      	bge.n	801f898 <_puts_r+0xa0>
 801f878:	0022      	movs	r2, r4
 801f87a:	0028      	movs	r0, r5
 801f87c:	310a      	adds	r1, #10
 801f87e:	f000 f8bf 	bl	801fa00 <__swbuf_r>
 801f882:	3001      	adds	r0, #1
 801f884:	d0d6      	beq.n	801f834 <_puts_r+0x3c>
 801f886:	250a      	movs	r5, #10
 801f888:	e7d6      	b.n	801f838 <_puts_r+0x40>
 801f88a:	0022      	movs	r2, r4
 801f88c:	0028      	movs	r0, r5
 801f88e:	f000 f8b7 	bl	801fa00 <__swbuf_r>
 801f892:	3001      	adds	r0, #1
 801f894:	d1e8      	bne.n	801f868 <_puts_r+0x70>
 801f896:	e7cd      	b.n	801f834 <_puts_r+0x3c>
 801f898:	6823      	ldr	r3, [r4, #0]
 801f89a:	1c5a      	adds	r2, r3, #1
 801f89c:	6022      	str	r2, [r4, #0]
 801f89e:	220a      	movs	r2, #10
 801f8a0:	701a      	strb	r2, [r3, #0]
 801f8a2:	e7f0      	b.n	801f886 <_puts_r+0x8e>

0801f8a4 <puts>:
 801f8a4:	b510      	push	{r4, lr}
 801f8a6:	4b03      	ldr	r3, [pc, #12]	@ (801f8b4 <puts+0x10>)
 801f8a8:	0001      	movs	r1, r0
 801f8aa:	6818      	ldr	r0, [r3, #0]
 801f8ac:	f7ff ffa4 	bl	801f7f8 <_puts_r>
 801f8b0:	bd10      	pop	{r4, pc}
 801f8b2:	46c0      	nop			@ (mov r8, r8)
 801f8b4:	200003cc 	.word	0x200003cc

0801f8b8 <siprintf>:
 801f8b8:	b40e      	push	{r1, r2, r3}
 801f8ba:	b500      	push	{lr}
 801f8bc:	490b      	ldr	r1, [pc, #44]	@ (801f8ec <siprintf+0x34>)
 801f8be:	b09c      	sub	sp, #112	@ 0x70
 801f8c0:	ab1d      	add	r3, sp, #116	@ 0x74
 801f8c2:	9002      	str	r0, [sp, #8]
 801f8c4:	9006      	str	r0, [sp, #24]
 801f8c6:	9107      	str	r1, [sp, #28]
 801f8c8:	9104      	str	r1, [sp, #16]
 801f8ca:	4809      	ldr	r0, [pc, #36]	@ (801f8f0 <siprintf+0x38>)
 801f8cc:	4909      	ldr	r1, [pc, #36]	@ (801f8f4 <siprintf+0x3c>)
 801f8ce:	cb04      	ldmia	r3!, {r2}
 801f8d0:	9105      	str	r1, [sp, #20]
 801f8d2:	6800      	ldr	r0, [r0, #0]
 801f8d4:	a902      	add	r1, sp, #8
 801f8d6:	9301      	str	r3, [sp, #4]
 801f8d8:	f002 fa4a 	bl	8021d70 <_svfiprintf_r>
 801f8dc:	2200      	movs	r2, #0
 801f8de:	9b02      	ldr	r3, [sp, #8]
 801f8e0:	701a      	strb	r2, [r3, #0]
 801f8e2:	b01c      	add	sp, #112	@ 0x70
 801f8e4:	bc08      	pop	{r3}
 801f8e6:	b003      	add	sp, #12
 801f8e8:	4718      	bx	r3
 801f8ea:	46c0      	nop			@ (mov r8, r8)
 801f8ec:	7fffffff 	.word	0x7fffffff
 801f8f0:	200003cc 	.word	0x200003cc
 801f8f4:	ffff0208 	.word	0xffff0208

0801f8f8 <__sread>:
 801f8f8:	b570      	push	{r4, r5, r6, lr}
 801f8fa:	000c      	movs	r4, r1
 801f8fc:	250e      	movs	r5, #14
 801f8fe:	5f49      	ldrsh	r1, [r1, r5]
 801f900:	f000 f99a 	bl	801fc38 <_read_r>
 801f904:	2800      	cmp	r0, #0
 801f906:	db03      	blt.n	801f910 <__sread+0x18>
 801f908:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801f90a:	181b      	adds	r3, r3, r0
 801f90c:	6563      	str	r3, [r4, #84]	@ 0x54
 801f90e:	bd70      	pop	{r4, r5, r6, pc}
 801f910:	89a3      	ldrh	r3, [r4, #12]
 801f912:	4a02      	ldr	r2, [pc, #8]	@ (801f91c <__sread+0x24>)
 801f914:	4013      	ands	r3, r2
 801f916:	81a3      	strh	r3, [r4, #12]
 801f918:	e7f9      	b.n	801f90e <__sread+0x16>
 801f91a:	46c0      	nop			@ (mov r8, r8)
 801f91c:	ffffefff 	.word	0xffffefff

0801f920 <__swrite>:
 801f920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f922:	001f      	movs	r7, r3
 801f924:	898b      	ldrh	r3, [r1, #12]
 801f926:	0005      	movs	r5, r0
 801f928:	000c      	movs	r4, r1
 801f92a:	0016      	movs	r6, r2
 801f92c:	05db      	lsls	r3, r3, #23
 801f92e:	d505      	bpl.n	801f93c <__swrite+0x1c>
 801f930:	230e      	movs	r3, #14
 801f932:	5ec9      	ldrsh	r1, [r1, r3]
 801f934:	2200      	movs	r2, #0
 801f936:	2302      	movs	r3, #2
 801f938:	f000 f96a 	bl	801fc10 <_lseek_r>
 801f93c:	89a3      	ldrh	r3, [r4, #12]
 801f93e:	4a05      	ldr	r2, [pc, #20]	@ (801f954 <__swrite+0x34>)
 801f940:	0028      	movs	r0, r5
 801f942:	4013      	ands	r3, r2
 801f944:	81a3      	strh	r3, [r4, #12]
 801f946:	0032      	movs	r2, r6
 801f948:	230e      	movs	r3, #14
 801f94a:	5ee1      	ldrsh	r1, [r4, r3]
 801f94c:	003b      	movs	r3, r7
 801f94e:	f000 f987 	bl	801fc60 <_write_r>
 801f952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f954:	ffffefff 	.word	0xffffefff

0801f958 <__sseek>:
 801f958:	b570      	push	{r4, r5, r6, lr}
 801f95a:	000c      	movs	r4, r1
 801f95c:	250e      	movs	r5, #14
 801f95e:	5f49      	ldrsh	r1, [r1, r5]
 801f960:	f000 f956 	bl	801fc10 <_lseek_r>
 801f964:	89a3      	ldrh	r3, [r4, #12]
 801f966:	1c42      	adds	r2, r0, #1
 801f968:	d103      	bne.n	801f972 <__sseek+0x1a>
 801f96a:	4a05      	ldr	r2, [pc, #20]	@ (801f980 <__sseek+0x28>)
 801f96c:	4013      	ands	r3, r2
 801f96e:	81a3      	strh	r3, [r4, #12]
 801f970:	bd70      	pop	{r4, r5, r6, pc}
 801f972:	2280      	movs	r2, #128	@ 0x80
 801f974:	0152      	lsls	r2, r2, #5
 801f976:	4313      	orrs	r3, r2
 801f978:	81a3      	strh	r3, [r4, #12]
 801f97a:	6560      	str	r0, [r4, #84]	@ 0x54
 801f97c:	e7f8      	b.n	801f970 <__sseek+0x18>
 801f97e:	46c0      	nop			@ (mov r8, r8)
 801f980:	ffffefff 	.word	0xffffefff

0801f984 <__sclose>:
 801f984:	b510      	push	{r4, lr}
 801f986:	230e      	movs	r3, #14
 801f988:	5ec9      	ldrsh	r1, [r1, r3]
 801f98a:	f000 f92f 	bl	801fbec <_close_r>
 801f98e:	bd10      	pop	{r4, pc}

0801f990 <_vsniprintf_r>:
 801f990:	b530      	push	{r4, r5, lr}
 801f992:	0014      	movs	r4, r2
 801f994:	0005      	movs	r5, r0
 801f996:	001a      	movs	r2, r3
 801f998:	b09b      	sub	sp, #108	@ 0x6c
 801f99a:	2c00      	cmp	r4, #0
 801f99c:	da05      	bge.n	801f9aa <_vsniprintf_r+0x1a>
 801f99e:	238b      	movs	r3, #139	@ 0x8b
 801f9a0:	6003      	str	r3, [r0, #0]
 801f9a2:	2001      	movs	r0, #1
 801f9a4:	4240      	negs	r0, r0
 801f9a6:	b01b      	add	sp, #108	@ 0x6c
 801f9a8:	bd30      	pop	{r4, r5, pc}
 801f9aa:	2382      	movs	r3, #130	@ 0x82
 801f9ac:	4668      	mov	r0, sp
 801f9ae:	009b      	lsls	r3, r3, #2
 801f9b0:	8183      	strh	r3, [r0, #12]
 801f9b2:	2300      	movs	r3, #0
 801f9b4:	9100      	str	r1, [sp, #0]
 801f9b6:	9104      	str	r1, [sp, #16]
 801f9b8:	429c      	cmp	r4, r3
 801f9ba:	d000      	beq.n	801f9be <_vsniprintf_r+0x2e>
 801f9bc:	1e63      	subs	r3, r4, #1
 801f9be:	9302      	str	r3, [sp, #8]
 801f9c0:	9305      	str	r3, [sp, #20]
 801f9c2:	2301      	movs	r3, #1
 801f9c4:	4669      	mov	r1, sp
 801f9c6:	425b      	negs	r3, r3
 801f9c8:	81cb      	strh	r3, [r1, #14]
 801f9ca:	0028      	movs	r0, r5
 801f9cc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f9ce:	f002 f9cf 	bl	8021d70 <_svfiprintf_r>
 801f9d2:	1c43      	adds	r3, r0, #1
 801f9d4:	da01      	bge.n	801f9da <_vsniprintf_r+0x4a>
 801f9d6:	238b      	movs	r3, #139	@ 0x8b
 801f9d8:	602b      	str	r3, [r5, #0]
 801f9da:	2c00      	cmp	r4, #0
 801f9dc:	d0e3      	beq.n	801f9a6 <_vsniprintf_r+0x16>
 801f9de:	2200      	movs	r2, #0
 801f9e0:	9b00      	ldr	r3, [sp, #0]
 801f9e2:	701a      	strb	r2, [r3, #0]
 801f9e4:	e7df      	b.n	801f9a6 <_vsniprintf_r+0x16>
	...

0801f9e8 <vsniprintf>:
 801f9e8:	b513      	push	{r0, r1, r4, lr}
 801f9ea:	4c04      	ldr	r4, [pc, #16]	@ (801f9fc <vsniprintf+0x14>)
 801f9ec:	9300      	str	r3, [sp, #0]
 801f9ee:	0013      	movs	r3, r2
 801f9f0:	000a      	movs	r2, r1
 801f9f2:	0001      	movs	r1, r0
 801f9f4:	6820      	ldr	r0, [r4, #0]
 801f9f6:	f7ff ffcb 	bl	801f990 <_vsniprintf_r>
 801f9fa:	bd16      	pop	{r1, r2, r4, pc}
 801f9fc:	200003cc 	.word	0x200003cc

0801fa00 <__swbuf_r>:
 801fa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa02:	0006      	movs	r6, r0
 801fa04:	000d      	movs	r5, r1
 801fa06:	0014      	movs	r4, r2
 801fa08:	2800      	cmp	r0, #0
 801fa0a:	d004      	beq.n	801fa16 <__swbuf_r+0x16>
 801fa0c:	6a03      	ldr	r3, [r0, #32]
 801fa0e:	2b00      	cmp	r3, #0
 801fa10:	d101      	bne.n	801fa16 <__swbuf_r+0x16>
 801fa12:	f7ff fead 	bl	801f770 <__sinit>
 801fa16:	69a3      	ldr	r3, [r4, #24]
 801fa18:	60a3      	str	r3, [r4, #8]
 801fa1a:	89a3      	ldrh	r3, [r4, #12]
 801fa1c:	071b      	lsls	r3, r3, #28
 801fa1e:	d502      	bpl.n	801fa26 <__swbuf_r+0x26>
 801fa20:	6923      	ldr	r3, [r4, #16]
 801fa22:	2b00      	cmp	r3, #0
 801fa24:	d109      	bne.n	801fa3a <__swbuf_r+0x3a>
 801fa26:	0021      	movs	r1, r4
 801fa28:	0030      	movs	r0, r6
 801fa2a:	f000 f82b 	bl	801fa84 <__swsetup_r>
 801fa2e:	2800      	cmp	r0, #0
 801fa30:	d003      	beq.n	801fa3a <__swbuf_r+0x3a>
 801fa32:	2501      	movs	r5, #1
 801fa34:	426d      	negs	r5, r5
 801fa36:	0028      	movs	r0, r5
 801fa38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fa3a:	6923      	ldr	r3, [r4, #16]
 801fa3c:	6820      	ldr	r0, [r4, #0]
 801fa3e:	b2ef      	uxtb	r7, r5
 801fa40:	1ac0      	subs	r0, r0, r3
 801fa42:	6963      	ldr	r3, [r4, #20]
 801fa44:	b2ed      	uxtb	r5, r5
 801fa46:	4283      	cmp	r3, r0
 801fa48:	dc05      	bgt.n	801fa56 <__swbuf_r+0x56>
 801fa4a:	0021      	movs	r1, r4
 801fa4c:	0030      	movs	r0, r6
 801fa4e:	f002 fc57 	bl	8022300 <_fflush_r>
 801fa52:	2800      	cmp	r0, #0
 801fa54:	d1ed      	bne.n	801fa32 <__swbuf_r+0x32>
 801fa56:	68a3      	ldr	r3, [r4, #8]
 801fa58:	3001      	adds	r0, #1
 801fa5a:	3b01      	subs	r3, #1
 801fa5c:	60a3      	str	r3, [r4, #8]
 801fa5e:	6823      	ldr	r3, [r4, #0]
 801fa60:	1c5a      	adds	r2, r3, #1
 801fa62:	6022      	str	r2, [r4, #0]
 801fa64:	701f      	strb	r7, [r3, #0]
 801fa66:	6963      	ldr	r3, [r4, #20]
 801fa68:	4283      	cmp	r3, r0
 801fa6a:	d004      	beq.n	801fa76 <__swbuf_r+0x76>
 801fa6c:	89a3      	ldrh	r3, [r4, #12]
 801fa6e:	07db      	lsls	r3, r3, #31
 801fa70:	d5e1      	bpl.n	801fa36 <__swbuf_r+0x36>
 801fa72:	2d0a      	cmp	r5, #10
 801fa74:	d1df      	bne.n	801fa36 <__swbuf_r+0x36>
 801fa76:	0021      	movs	r1, r4
 801fa78:	0030      	movs	r0, r6
 801fa7a:	f002 fc41 	bl	8022300 <_fflush_r>
 801fa7e:	2800      	cmp	r0, #0
 801fa80:	d0d9      	beq.n	801fa36 <__swbuf_r+0x36>
 801fa82:	e7d6      	b.n	801fa32 <__swbuf_r+0x32>

0801fa84 <__swsetup_r>:
 801fa84:	4b2d      	ldr	r3, [pc, #180]	@ (801fb3c <__swsetup_r+0xb8>)
 801fa86:	b570      	push	{r4, r5, r6, lr}
 801fa88:	0005      	movs	r5, r0
 801fa8a:	6818      	ldr	r0, [r3, #0]
 801fa8c:	000c      	movs	r4, r1
 801fa8e:	2800      	cmp	r0, #0
 801fa90:	d004      	beq.n	801fa9c <__swsetup_r+0x18>
 801fa92:	6a03      	ldr	r3, [r0, #32]
 801fa94:	2b00      	cmp	r3, #0
 801fa96:	d101      	bne.n	801fa9c <__swsetup_r+0x18>
 801fa98:	f7ff fe6a 	bl	801f770 <__sinit>
 801fa9c:	230c      	movs	r3, #12
 801fa9e:	5ee2      	ldrsh	r2, [r4, r3]
 801faa0:	0713      	lsls	r3, r2, #28
 801faa2:	d423      	bmi.n	801faec <__swsetup_r+0x68>
 801faa4:	06d3      	lsls	r3, r2, #27
 801faa6:	d407      	bmi.n	801fab8 <__swsetup_r+0x34>
 801faa8:	2309      	movs	r3, #9
 801faaa:	602b      	str	r3, [r5, #0]
 801faac:	2340      	movs	r3, #64	@ 0x40
 801faae:	2001      	movs	r0, #1
 801fab0:	4313      	orrs	r3, r2
 801fab2:	81a3      	strh	r3, [r4, #12]
 801fab4:	4240      	negs	r0, r0
 801fab6:	e03a      	b.n	801fb2e <__swsetup_r+0xaa>
 801fab8:	0752      	lsls	r2, r2, #29
 801faba:	d513      	bpl.n	801fae4 <__swsetup_r+0x60>
 801fabc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801fabe:	2900      	cmp	r1, #0
 801fac0:	d008      	beq.n	801fad4 <__swsetup_r+0x50>
 801fac2:	0023      	movs	r3, r4
 801fac4:	3344      	adds	r3, #68	@ 0x44
 801fac6:	4299      	cmp	r1, r3
 801fac8:	d002      	beq.n	801fad0 <__swsetup_r+0x4c>
 801faca:	0028      	movs	r0, r5
 801facc:	f000 ffa6 	bl	8020a1c <_free_r>
 801fad0:	2300      	movs	r3, #0
 801fad2:	6363      	str	r3, [r4, #52]	@ 0x34
 801fad4:	2224      	movs	r2, #36	@ 0x24
 801fad6:	89a3      	ldrh	r3, [r4, #12]
 801fad8:	4393      	bics	r3, r2
 801fada:	81a3      	strh	r3, [r4, #12]
 801fadc:	2300      	movs	r3, #0
 801fade:	6063      	str	r3, [r4, #4]
 801fae0:	6923      	ldr	r3, [r4, #16]
 801fae2:	6023      	str	r3, [r4, #0]
 801fae4:	2308      	movs	r3, #8
 801fae6:	89a2      	ldrh	r2, [r4, #12]
 801fae8:	4313      	orrs	r3, r2
 801faea:	81a3      	strh	r3, [r4, #12]
 801faec:	6923      	ldr	r3, [r4, #16]
 801faee:	2b00      	cmp	r3, #0
 801faf0:	d10b      	bne.n	801fb0a <__swsetup_r+0x86>
 801faf2:	21a0      	movs	r1, #160	@ 0xa0
 801faf4:	2280      	movs	r2, #128	@ 0x80
 801faf6:	89a3      	ldrh	r3, [r4, #12]
 801faf8:	0089      	lsls	r1, r1, #2
 801fafa:	0092      	lsls	r2, r2, #2
 801fafc:	400b      	ands	r3, r1
 801fafe:	4293      	cmp	r3, r2
 801fb00:	d003      	beq.n	801fb0a <__swsetup_r+0x86>
 801fb02:	0021      	movs	r1, r4
 801fb04:	0028      	movs	r0, r5
 801fb06:	f002 fc51 	bl	80223ac <__smakebuf_r>
 801fb0a:	230c      	movs	r3, #12
 801fb0c:	5ee2      	ldrsh	r2, [r4, r3]
 801fb0e:	2101      	movs	r1, #1
 801fb10:	0013      	movs	r3, r2
 801fb12:	400b      	ands	r3, r1
 801fb14:	420a      	tst	r2, r1
 801fb16:	d00b      	beq.n	801fb30 <__swsetup_r+0xac>
 801fb18:	2300      	movs	r3, #0
 801fb1a:	60a3      	str	r3, [r4, #8]
 801fb1c:	6963      	ldr	r3, [r4, #20]
 801fb1e:	425b      	negs	r3, r3
 801fb20:	61a3      	str	r3, [r4, #24]
 801fb22:	2000      	movs	r0, #0
 801fb24:	6923      	ldr	r3, [r4, #16]
 801fb26:	4283      	cmp	r3, r0
 801fb28:	d101      	bne.n	801fb2e <__swsetup_r+0xaa>
 801fb2a:	0613      	lsls	r3, r2, #24
 801fb2c:	d4be      	bmi.n	801faac <__swsetup_r+0x28>
 801fb2e:	bd70      	pop	{r4, r5, r6, pc}
 801fb30:	0791      	lsls	r1, r2, #30
 801fb32:	d400      	bmi.n	801fb36 <__swsetup_r+0xb2>
 801fb34:	6963      	ldr	r3, [r4, #20]
 801fb36:	60a3      	str	r3, [r4, #8]
 801fb38:	e7f3      	b.n	801fb22 <__swsetup_r+0x9e>
 801fb3a:	46c0      	nop			@ (mov r8, r8)
 801fb3c:	200003cc 	.word	0x200003cc

0801fb40 <memset>:
 801fb40:	0003      	movs	r3, r0
 801fb42:	1882      	adds	r2, r0, r2
 801fb44:	4293      	cmp	r3, r2
 801fb46:	d100      	bne.n	801fb4a <memset+0xa>
 801fb48:	4770      	bx	lr
 801fb4a:	7019      	strb	r1, [r3, #0]
 801fb4c:	3301      	adds	r3, #1
 801fb4e:	e7f9      	b.n	801fb44 <memset+0x4>

0801fb50 <strchr>:
 801fb50:	b2c9      	uxtb	r1, r1
 801fb52:	7803      	ldrb	r3, [r0, #0]
 801fb54:	2b00      	cmp	r3, #0
 801fb56:	d004      	beq.n	801fb62 <strchr+0x12>
 801fb58:	428b      	cmp	r3, r1
 801fb5a:	d100      	bne.n	801fb5e <strchr+0xe>
 801fb5c:	4770      	bx	lr
 801fb5e:	3001      	adds	r0, #1
 801fb60:	e7f7      	b.n	801fb52 <strchr+0x2>
 801fb62:	424b      	negs	r3, r1
 801fb64:	4159      	adcs	r1, r3
 801fb66:	4249      	negs	r1, r1
 801fb68:	4008      	ands	r0, r1
 801fb6a:	e7f7      	b.n	801fb5c <strchr+0xc>

0801fb6c <strncmp>:
 801fb6c:	b530      	push	{r4, r5, lr}
 801fb6e:	0005      	movs	r5, r0
 801fb70:	1e10      	subs	r0, r2, #0
 801fb72:	d00b      	beq.n	801fb8c <strncmp+0x20>
 801fb74:	2400      	movs	r4, #0
 801fb76:	3a01      	subs	r2, #1
 801fb78:	5d2b      	ldrb	r3, [r5, r4]
 801fb7a:	5d08      	ldrb	r0, [r1, r4]
 801fb7c:	4283      	cmp	r3, r0
 801fb7e:	d104      	bne.n	801fb8a <strncmp+0x1e>
 801fb80:	42a2      	cmp	r2, r4
 801fb82:	d002      	beq.n	801fb8a <strncmp+0x1e>
 801fb84:	3401      	adds	r4, #1
 801fb86:	2b00      	cmp	r3, #0
 801fb88:	d1f6      	bne.n	801fb78 <strncmp+0xc>
 801fb8a:	1a18      	subs	r0, r3, r0
 801fb8c:	bd30      	pop	{r4, r5, pc}

0801fb8e <strncpy>:
 801fb8e:	0003      	movs	r3, r0
 801fb90:	b530      	push	{r4, r5, lr}
 801fb92:	001d      	movs	r5, r3
 801fb94:	2a00      	cmp	r2, #0
 801fb96:	d006      	beq.n	801fba6 <strncpy+0x18>
 801fb98:	780c      	ldrb	r4, [r1, #0]
 801fb9a:	3a01      	subs	r2, #1
 801fb9c:	3301      	adds	r3, #1
 801fb9e:	702c      	strb	r4, [r5, #0]
 801fba0:	3101      	adds	r1, #1
 801fba2:	2c00      	cmp	r4, #0
 801fba4:	d1f5      	bne.n	801fb92 <strncpy+0x4>
 801fba6:	2100      	movs	r1, #0
 801fba8:	189a      	adds	r2, r3, r2
 801fbaa:	4293      	cmp	r3, r2
 801fbac:	d100      	bne.n	801fbb0 <strncpy+0x22>
 801fbae:	bd30      	pop	{r4, r5, pc}
 801fbb0:	7019      	strb	r1, [r3, #0]
 801fbb2:	3301      	adds	r3, #1
 801fbb4:	e7f9      	b.n	801fbaa <strncpy+0x1c>

0801fbb6 <strstr>:
 801fbb6:	780a      	ldrb	r2, [r1, #0]
 801fbb8:	b530      	push	{r4, r5, lr}
 801fbba:	2a00      	cmp	r2, #0
 801fbbc:	d10c      	bne.n	801fbd8 <strstr+0x22>
 801fbbe:	bd30      	pop	{r4, r5, pc}
 801fbc0:	429a      	cmp	r2, r3
 801fbc2:	d108      	bne.n	801fbd6 <strstr+0x20>
 801fbc4:	2301      	movs	r3, #1
 801fbc6:	5ccc      	ldrb	r4, [r1, r3]
 801fbc8:	2c00      	cmp	r4, #0
 801fbca:	d0f8      	beq.n	801fbbe <strstr+0x8>
 801fbcc:	5cc5      	ldrb	r5, [r0, r3]
 801fbce:	42a5      	cmp	r5, r4
 801fbd0:	d101      	bne.n	801fbd6 <strstr+0x20>
 801fbd2:	3301      	adds	r3, #1
 801fbd4:	e7f7      	b.n	801fbc6 <strstr+0x10>
 801fbd6:	3001      	adds	r0, #1
 801fbd8:	7803      	ldrb	r3, [r0, #0]
 801fbda:	2b00      	cmp	r3, #0
 801fbdc:	d1f0      	bne.n	801fbc0 <strstr+0xa>
 801fbde:	0018      	movs	r0, r3
 801fbe0:	e7ed      	b.n	801fbbe <strstr+0x8>
	...

0801fbe4 <_localeconv_r>:
 801fbe4:	4800      	ldr	r0, [pc, #0]	@ (801fbe8 <_localeconv_r+0x4>)
 801fbe6:	4770      	bx	lr
 801fbe8:	20000350 	.word	0x20000350

0801fbec <_close_r>:
 801fbec:	2300      	movs	r3, #0
 801fbee:	b570      	push	{r4, r5, r6, lr}
 801fbf0:	4d06      	ldr	r5, [pc, #24]	@ (801fc0c <_close_r+0x20>)
 801fbf2:	0004      	movs	r4, r0
 801fbf4:	0008      	movs	r0, r1
 801fbf6:	602b      	str	r3, [r5, #0]
 801fbf8:	f7ed fc92 	bl	800d520 <_close>
 801fbfc:	1c43      	adds	r3, r0, #1
 801fbfe:	d103      	bne.n	801fc08 <_close_r+0x1c>
 801fc00:	682b      	ldr	r3, [r5, #0]
 801fc02:	2b00      	cmp	r3, #0
 801fc04:	d000      	beq.n	801fc08 <_close_r+0x1c>
 801fc06:	6023      	str	r3, [r4, #0]
 801fc08:	bd70      	pop	{r4, r5, r6, pc}
 801fc0a:	46c0      	nop			@ (mov r8, r8)
 801fc0c:	20003994 	.word	0x20003994

0801fc10 <_lseek_r>:
 801fc10:	b570      	push	{r4, r5, r6, lr}
 801fc12:	0004      	movs	r4, r0
 801fc14:	0008      	movs	r0, r1
 801fc16:	0011      	movs	r1, r2
 801fc18:	001a      	movs	r2, r3
 801fc1a:	2300      	movs	r3, #0
 801fc1c:	4d05      	ldr	r5, [pc, #20]	@ (801fc34 <_lseek_r+0x24>)
 801fc1e:	602b      	str	r3, [r5, #0]
 801fc20:	f7ed fc9f 	bl	800d562 <_lseek>
 801fc24:	1c43      	adds	r3, r0, #1
 801fc26:	d103      	bne.n	801fc30 <_lseek_r+0x20>
 801fc28:	682b      	ldr	r3, [r5, #0]
 801fc2a:	2b00      	cmp	r3, #0
 801fc2c:	d000      	beq.n	801fc30 <_lseek_r+0x20>
 801fc2e:	6023      	str	r3, [r4, #0]
 801fc30:	bd70      	pop	{r4, r5, r6, pc}
 801fc32:	46c0      	nop			@ (mov r8, r8)
 801fc34:	20003994 	.word	0x20003994

0801fc38 <_read_r>:
 801fc38:	b570      	push	{r4, r5, r6, lr}
 801fc3a:	0004      	movs	r4, r0
 801fc3c:	0008      	movs	r0, r1
 801fc3e:	0011      	movs	r1, r2
 801fc40:	001a      	movs	r2, r3
 801fc42:	2300      	movs	r3, #0
 801fc44:	4d05      	ldr	r5, [pc, #20]	@ (801fc5c <_read_r+0x24>)
 801fc46:	602b      	str	r3, [r5, #0]
 801fc48:	f7ed fc4d 	bl	800d4e6 <_read>
 801fc4c:	1c43      	adds	r3, r0, #1
 801fc4e:	d103      	bne.n	801fc58 <_read_r+0x20>
 801fc50:	682b      	ldr	r3, [r5, #0]
 801fc52:	2b00      	cmp	r3, #0
 801fc54:	d000      	beq.n	801fc58 <_read_r+0x20>
 801fc56:	6023      	str	r3, [r4, #0]
 801fc58:	bd70      	pop	{r4, r5, r6, pc}
 801fc5a:	46c0      	nop			@ (mov r8, r8)
 801fc5c:	20003994 	.word	0x20003994

0801fc60 <_write_r>:
 801fc60:	b570      	push	{r4, r5, r6, lr}
 801fc62:	0004      	movs	r4, r0
 801fc64:	0008      	movs	r0, r1
 801fc66:	0011      	movs	r1, r2
 801fc68:	001a      	movs	r2, r3
 801fc6a:	2300      	movs	r3, #0
 801fc6c:	4d05      	ldr	r5, [pc, #20]	@ (801fc84 <_write_r+0x24>)
 801fc6e:	602b      	str	r3, [r5, #0]
 801fc70:	f7ee f90e 	bl	800de90 <_write>
 801fc74:	1c43      	adds	r3, r0, #1
 801fc76:	d103      	bne.n	801fc80 <_write_r+0x20>
 801fc78:	682b      	ldr	r3, [r5, #0]
 801fc7a:	2b00      	cmp	r3, #0
 801fc7c:	d000      	beq.n	801fc80 <_write_r+0x20>
 801fc7e:	6023      	str	r3, [r4, #0]
 801fc80:	bd70      	pop	{r4, r5, r6, pc}
 801fc82:	46c0      	nop			@ (mov r8, r8)
 801fc84:	20003994 	.word	0x20003994

0801fc88 <__errno>:
 801fc88:	4b01      	ldr	r3, [pc, #4]	@ (801fc90 <__errno+0x8>)
 801fc8a:	6818      	ldr	r0, [r3, #0]
 801fc8c:	4770      	bx	lr
 801fc8e:	46c0      	nop			@ (mov r8, r8)
 801fc90:	200003cc 	.word	0x200003cc

0801fc94 <__libc_init_array>:
 801fc94:	b570      	push	{r4, r5, r6, lr}
 801fc96:	2600      	movs	r6, #0
 801fc98:	4c0c      	ldr	r4, [pc, #48]	@ (801fccc <__libc_init_array+0x38>)
 801fc9a:	4d0d      	ldr	r5, [pc, #52]	@ (801fcd0 <__libc_init_array+0x3c>)
 801fc9c:	1b64      	subs	r4, r4, r5
 801fc9e:	10a4      	asrs	r4, r4, #2
 801fca0:	42a6      	cmp	r6, r4
 801fca2:	d109      	bne.n	801fcb8 <__libc_init_array+0x24>
 801fca4:	2600      	movs	r6, #0
 801fca6:	f002 fee9 	bl	8022a7c <_init>
 801fcaa:	4c0a      	ldr	r4, [pc, #40]	@ (801fcd4 <__libc_init_array+0x40>)
 801fcac:	4d0a      	ldr	r5, [pc, #40]	@ (801fcd8 <__libc_init_array+0x44>)
 801fcae:	1b64      	subs	r4, r4, r5
 801fcb0:	10a4      	asrs	r4, r4, #2
 801fcb2:	42a6      	cmp	r6, r4
 801fcb4:	d105      	bne.n	801fcc2 <__libc_init_array+0x2e>
 801fcb6:	bd70      	pop	{r4, r5, r6, pc}
 801fcb8:	00b3      	lsls	r3, r6, #2
 801fcba:	58eb      	ldr	r3, [r5, r3]
 801fcbc:	4798      	blx	r3
 801fcbe:	3601      	adds	r6, #1
 801fcc0:	e7ee      	b.n	801fca0 <__libc_init_array+0xc>
 801fcc2:	00b3      	lsls	r3, r6, #2
 801fcc4:	58eb      	ldr	r3, [r5, r3]
 801fcc6:	4798      	blx	r3
 801fcc8:	3601      	adds	r6, #1
 801fcca:	e7f2      	b.n	801fcb2 <__libc_init_array+0x1e>
 801fccc:	080256a0 	.word	0x080256a0
 801fcd0:	080256a0 	.word	0x080256a0
 801fcd4:	080256a4 	.word	0x080256a4
 801fcd8:	080256a0 	.word	0x080256a0

0801fcdc <__retarget_lock_init_recursive>:
 801fcdc:	4770      	bx	lr

0801fcde <__retarget_lock_acquire_recursive>:
 801fcde:	4770      	bx	lr

0801fce0 <__retarget_lock_release_recursive>:
 801fce0:	4770      	bx	lr

0801fce2 <memchr>:
 801fce2:	b2c9      	uxtb	r1, r1
 801fce4:	1882      	adds	r2, r0, r2
 801fce6:	4290      	cmp	r0, r2
 801fce8:	d101      	bne.n	801fcee <memchr+0xc>
 801fcea:	2000      	movs	r0, #0
 801fcec:	4770      	bx	lr
 801fcee:	7803      	ldrb	r3, [r0, #0]
 801fcf0:	428b      	cmp	r3, r1
 801fcf2:	d0fb      	beq.n	801fcec <memchr+0xa>
 801fcf4:	3001      	adds	r0, #1
 801fcf6:	e7f6      	b.n	801fce6 <memchr+0x4>

0801fcf8 <memcpy>:
 801fcf8:	2300      	movs	r3, #0
 801fcfa:	b510      	push	{r4, lr}
 801fcfc:	429a      	cmp	r2, r3
 801fcfe:	d100      	bne.n	801fd02 <memcpy+0xa>
 801fd00:	bd10      	pop	{r4, pc}
 801fd02:	5ccc      	ldrb	r4, [r1, r3]
 801fd04:	54c4      	strb	r4, [r0, r3]
 801fd06:	3301      	adds	r3, #1
 801fd08:	e7f8      	b.n	801fcfc <memcpy+0x4>
	...

0801fd0c <nan>:
 801fd0c:	2000      	movs	r0, #0
 801fd0e:	4901      	ldr	r1, [pc, #4]	@ (801fd14 <nan+0x8>)
 801fd10:	4770      	bx	lr
 801fd12:	46c0      	nop			@ (mov r8, r8)
 801fd14:	7ff80000 	.word	0x7ff80000

0801fd18 <quorem>:
 801fd18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fd1a:	6902      	ldr	r2, [r0, #16]
 801fd1c:	690f      	ldr	r7, [r1, #16]
 801fd1e:	b087      	sub	sp, #28
 801fd20:	0006      	movs	r6, r0
 801fd22:	000b      	movs	r3, r1
 801fd24:	2000      	movs	r0, #0
 801fd26:	9102      	str	r1, [sp, #8]
 801fd28:	42ba      	cmp	r2, r7
 801fd2a:	db6d      	blt.n	801fe08 <quorem+0xf0>
 801fd2c:	3f01      	subs	r7, #1
 801fd2e:	00bc      	lsls	r4, r7, #2
 801fd30:	3314      	adds	r3, #20
 801fd32:	9305      	str	r3, [sp, #20]
 801fd34:	191b      	adds	r3, r3, r4
 801fd36:	9303      	str	r3, [sp, #12]
 801fd38:	0033      	movs	r3, r6
 801fd3a:	3314      	adds	r3, #20
 801fd3c:	191c      	adds	r4, r3, r4
 801fd3e:	9301      	str	r3, [sp, #4]
 801fd40:	6823      	ldr	r3, [r4, #0]
 801fd42:	9304      	str	r3, [sp, #16]
 801fd44:	9b03      	ldr	r3, [sp, #12]
 801fd46:	9804      	ldr	r0, [sp, #16]
 801fd48:	681d      	ldr	r5, [r3, #0]
 801fd4a:	3501      	adds	r5, #1
 801fd4c:	0029      	movs	r1, r5
 801fd4e:	f7e0 fa29 	bl	80001a4 <__udivsi3>
 801fd52:	9b04      	ldr	r3, [sp, #16]
 801fd54:	9000      	str	r0, [sp, #0]
 801fd56:	42ab      	cmp	r3, r5
 801fd58:	d32b      	bcc.n	801fdb2 <quorem+0x9a>
 801fd5a:	9b05      	ldr	r3, [sp, #20]
 801fd5c:	9d01      	ldr	r5, [sp, #4]
 801fd5e:	469c      	mov	ip, r3
 801fd60:	2300      	movs	r3, #0
 801fd62:	9305      	str	r3, [sp, #20]
 801fd64:	9304      	str	r3, [sp, #16]
 801fd66:	4662      	mov	r2, ip
 801fd68:	ca08      	ldmia	r2!, {r3}
 801fd6a:	6828      	ldr	r0, [r5, #0]
 801fd6c:	4694      	mov	ip, r2
 801fd6e:	9a00      	ldr	r2, [sp, #0]
 801fd70:	b299      	uxth	r1, r3
 801fd72:	4351      	muls	r1, r2
 801fd74:	9a05      	ldr	r2, [sp, #20]
 801fd76:	0c1b      	lsrs	r3, r3, #16
 801fd78:	1889      	adds	r1, r1, r2
 801fd7a:	9a00      	ldr	r2, [sp, #0]
 801fd7c:	4353      	muls	r3, r2
 801fd7e:	0c0a      	lsrs	r2, r1, #16
 801fd80:	189b      	adds	r3, r3, r2
 801fd82:	0c1a      	lsrs	r2, r3, #16
 801fd84:	b289      	uxth	r1, r1
 801fd86:	9205      	str	r2, [sp, #20]
 801fd88:	b282      	uxth	r2, r0
 801fd8a:	1a52      	subs	r2, r2, r1
 801fd8c:	9904      	ldr	r1, [sp, #16]
 801fd8e:	0c00      	lsrs	r0, r0, #16
 801fd90:	1852      	adds	r2, r2, r1
 801fd92:	b29b      	uxth	r3, r3
 801fd94:	1411      	asrs	r1, r2, #16
 801fd96:	1ac3      	subs	r3, r0, r3
 801fd98:	185b      	adds	r3, r3, r1
 801fd9a:	1419      	asrs	r1, r3, #16
 801fd9c:	b292      	uxth	r2, r2
 801fd9e:	041b      	lsls	r3, r3, #16
 801fda0:	431a      	orrs	r2, r3
 801fda2:	9b03      	ldr	r3, [sp, #12]
 801fda4:	9104      	str	r1, [sp, #16]
 801fda6:	c504      	stmia	r5!, {r2}
 801fda8:	4563      	cmp	r3, ip
 801fdaa:	d2dc      	bcs.n	801fd66 <quorem+0x4e>
 801fdac:	6823      	ldr	r3, [r4, #0]
 801fdae:	2b00      	cmp	r3, #0
 801fdb0:	d030      	beq.n	801fe14 <quorem+0xfc>
 801fdb2:	0030      	movs	r0, r6
 801fdb4:	9902      	ldr	r1, [sp, #8]
 801fdb6:	f001 fd7d 	bl	80218b4 <__mcmp>
 801fdba:	2800      	cmp	r0, #0
 801fdbc:	db23      	blt.n	801fe06 <quorem+0xee>
 801fdbe:	0034      	movs	r4, r6
 801fdc0:	2500      	movs	r5, #0
 801fdc2:	9902      	ldr	r1, [sp, #8]
 801fdc4:	3414      	adds	r4, #20
 801fdc6:	3114      	adds	r1, #20
 801fdc8:	6823      	ldr	r3, [r4, #0]
 801fdca:	c901      	ldmia	r1!, {r0}
 801fdcc:	9302      	str	r3, [sp, #8]
 801fdce:	466b      	mov	r3, sp
 801fdd0:	891b      	ldrh	r3, [r3, #8]
 801fdd2:	b282      	uxth	r2, r0
 801fdd4:	1a9a      	subs	r2, r3, r2
 801fdd6:	9b02      	ldr	r3, [sp, #8]
 801fdd8:	1952      	adds	r2, r2, r5
 801fdda:	0c00      	lsrs	r0, r0, #16
 801fddc:	0c1b      	lsrs	r3, r3, #16
 801fdde:	1a1b      	subs	r3, r3, r0
 801fde0:	1410      	asrs	r0, r2, #16
 801fde2:	181b      	adds	r3, r3, r0
 801fde4:	141d      	asrs	r5, r3, #16
 801fde6:	b292      	uxth	r2, r2
 801fde8:	041b      	lsls	r3, r3, #16
 801fdea:	431a      	orrs	r2, r3
 801fdec:	9b03      	ldr	r3, [sp, #12]
 801fdee:	c404      	stmia	r4!, {r2}
 801fdf0:	428b      	cmp	r3, r1
 801fdf2:	d2e9      	bcs.n	801fdc8 <quorem+0xb0>
 801fdf4:	9a01      	ldr	r2, [sp, #4]
 801fdf6:	00bb      	lsls	r3, r7, #2
 801fdf8:	18d3      	adds	r3, r2, r3
 801fdfa:	681a      	ldr	r2, [r3, #0]
 801fdfc:	2a00      	cmp	r2, #0
 801fdfe:	d013      	beq.n	801fe28 <quorem+0x110>
 801fe00:	9b00      	ldr	r3, [sp, #0]
 801fe02:	3301      	adds	r3, #1
 801fe04:	9300      	str	r3, [sp, #0]
 801fe06:	9800      	ldr	r0, [sp, #0]
 801fe08:	b007      	add	sp, #28
 801fe0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fe0c:	6823      	ldr	r3, [r4, #0]
 801fe0e:	2b00      	cmp	r3, #0
 801fe10:	d104      	bne.n	801fe1c <quorem+0x104>
 801fe12:	3f01      	subs	r7, #1
 801fe14:	9b01      	ldr	r3, [sp, #4]
 801fe16:	3c04      	subs	r4, #4
 801fe18:	42a3      	cmp	r3, r4
 801fe1a:	d3f7      	bcc.n	801fe0c <quorem+0xf4>
 801fe1c:	6137      	str	r7, [r6, #16]
 801fe1e:	e7c8      	b.n	801fdb2 <quorem+0x9a>
 801fe20:	681a      	ldr	r2, [r3, #0]
 801fe22:	2a00      	cmp	r2, #0
 801fe24:	d104      	bne.n	801fe30 <quorem+0x118>
 801fe26:	3f01      	subs	r7, #1
 801fe28:	9a01      	ldr	r2, [sp, #4]
 801fe2a:	3b04      	subs	r3, #4
 801fe2c:	429a      	cmp	r2, r3
 801fe2e:	d3f7      	bcc.n	801fe20 <quorem+0x108>
 801fe30:	6137      	str	r7, [r6, #16]
 801fe32:	e7e5      	b.n	801fe00 <quorem+0xe8>

0801fe34 <_dtoa_r>:
 801fe34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe36:	0014      	movs	r4, r2
 801fe38:	001d      	movs	r5, r3
 801fe3a:	69c6      	ldr	r6, [r0, #28]
 801fe3c:	b09d      	sub	sp, #116	@ 0x74
 801fe3e:	940a      	str	r4, [sp, #40]	@ 0x28
 801fe40:	950b      	str	r5, [sp, #44]	@ 0x2c
 801fe42:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801fe44:	9003      	str	r0, [sp, #12]
 801fe46:	2e00      	cmp	r6, #0
 801fe48:	d10f      	bne.n	801fe6a <_dtoa_r+0x36>
 801fe4a:	2010      	movs	r0, #16
 801fe4c:	f001 f98a 	bl	8021164 <malloc>
 801fe50:	9b03      	ldr	r3, [sp, #12]
 801fe52:	1e02      	subs	r2, r0, #0
 801fe54:	61d8      	str	r0, [r3, #28]
 801fe56:	d104      	bne.n	801fe62 <_dtoa_r+0x2e>
 801fe58:	21ef      	movs	r1, #239	@ 0xef
 801fe5a:	4bc7      	ldr	r3, [pc, #796]	@ (8020178 <_dtoa_r+0x344>)
 801fe5c:	48c7      	ldr	r0, [pc, #796]	@ (802017c <_dtoa_r+0x348>)
 801fe5e:	f002 fb2f 	bl	80224c0 <__assert_func>
 801fe62:	6046      	str	r6, [r0, #4]
 801fe64:	6086      	str	r6, [r0, #8]
 801fe66:	6006      	str	r6, [r0, #0]
 801fe68:	60c6      	str	r6, [r0, #12]
 801fe6a:	9b03      	ldr	r3, [sp, #12]
 801fe6c:	69db      	ldr	r3, [r3, #28]
 801fe6e:	6819      	ldr	r1, [r3, #0]
 801fe70:	2900      	cmp	r1, #0
 801fe72:	d00b      	beq.n	801fe8c <_dtoa_r+0x58>
 801fe74:	685a      	ldr	r2, [r3, #4]
 801fe76:	2301      	movs	r3, #1
 801fe78:	4093      	lsls	r3, r2
 801fe7a:	604a      	str	r2, [r1, #4]
 801fe7c:	608b      	str	r3, [r1, #8]
 801fe7e:	9803      	ldr	r0, [sp, #12]
 801fe80:	f001 fa82 	bl	8021388 <_Bfree>
 801fe84:	2200      	movs	r2, #0
 801fe86:	9b03      	ldr	r3, [sp, #12]
 801fe88:	69db      	ldr	r3, [r3, #28]
 801fe8a:	601a      	str	r2, [r3, #0]
 801fe8c:	2d00      	cmp	r5, #0
 801fe8e:	da1e      	bge.n	801fece <_dtoa_r+0x9a>
 801fe90:	2301      	movs	r3, #1
 801fe92:	603b      	str	r3, [r7, #0]
 801fe94:	006b      	lsls	r3, r5, #1
 801fe96:	085b      	lsrs	r3, r3, #1
 801fe98:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fe9a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fe9c:	4bb8      	ldr	r3, [pc, #736]	@ (8020180 <_dtoa_r+0x34c>)
 801fe9e:	4ab8      	ldr	r2, [pc, #736]	@ (8020180 <_dtoa_r+0x34c>)
 801fea0:	403b      	ands	r3, r7
 801fea2:	4293      	cmp	r3, r2
 801fea4:	d116      	bne.n	801fed4 <_dtoa_r+0xa0>
 801fea6:	4bb7      	ldr	r3, [pc, #732]	@ (8020184 <_dtoa_r+0x350>)
 801fea8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801feaa:	6013      	str	r3, [r2, #0]
 801feac:	033b      	lsls	r3, r7, #12
 801feae:	0b1b      	lsrs	r3, r3, #12
 801feb0:	4323      	orrs	r3, r4
 801feb2:	d101      	bne.n	801feb8 <_dtoa_r+0x84>
 801feb4:	f000 fd83 	bl	80209be <_dtoa_r+0xb8a>
 801feb8:	4bb3      	ldr	r3, [pc, #716]	@ (8020188 <_dtoa_r+0x354>)
 801feba:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801febc:	9308      	str	r3, [sp, #32]
 801febe:	2a00      	cmp	r2, #0
 801fec0:	d002      	beq.n	801fec8 <_dtoa_r+0x94>
 801fec2:	4bb2      	ldr	r3, [pc, #712]	@ (802018c <_dtoa_r+0x358>)
 801fec4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801fec6:	6013      	str	r3, [r2, #0]
 801fec8:	9808      	ldr	r0, [sp, #32]
 801feca:	b01d      	add	sp, #116	@ 0x74
 801fecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fece:	2300      	movs	r3, #0
 801fed0:	603b      	str	r3, [r7, #0]
 801fed2:	e7e2      	b.n	801fe9a <_dtoa_r+0x66>
 801fed4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fed6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fed8:	9212      	str	r2, [sp, #72]	@ 0x48
 801feda:	9313      	str	r3, [sp, #76]	@ 0x4c
 801fedc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fede:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fee0:	2200      	movs	r2, #0
 801fee2:	2300      	movs	r3, #0
 801fee4:	f7e0 fae4 	bl	80004b0 <__aeabi_dcmpeq>
 801fee8:	1e06      	subs	r6, r0, #0
 801feea:	d00b      	beq.n	801ff04 <_dtoa_r+0xd0>
 801feec:	2301      	movs	r3, #1
 801feee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801fef0:	6013      	str	r3, [r2, #0]
 801fef2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fef4:	2b00      	cmp	r3, #0
 801fef6:	d002      	beq.n	801fefe <_dtoa_r+0xca>
 801fef8:	4ba5      	ldr	r3, [pc, #660]	@ (8020190 <_dtoa_r+0x35c>)
 801fefa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801fefc:	6013      	str	r3, [r2, #0]
 801fefe:	4ba5      	ldr	r3, [pc, #660]	@ (8020194 <_dtoa_r+0x360>)
 801ff00:	9308      	str	r3, [sp, #32]
 801ff02:	e7e1      	b.n	801fec8 <_dtoa_r+0x94>
 801ff04:	ab1a      	add	r3, sp, #104	@ 0x68
 801ff06:	9301      	str	r3, [sp, #4]
 801ff08:	ab1b      	add	r3, sp, #108	@ 0x6c
 801ff0a:	9300      	str	r3, [sp, #0]
 801ff0c:	9803      	ldr	r0, [sp, #12]
 801ff0e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ff10:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ff12:	f001 fdf1 	bl	8021af8 <__d2b>
 801ff16:	007a      	lsls	r2, r7, #1
 801ff18:	9005      	str	r0, [sp, #20]
 801ff1a:	0d52      	lsrs	r2, r2, #21
 801ff1c:	d100      	bne.n	801ff20 <_dtoa_r+0xec>
 801ff1e:	e07b      	b.n	8020018 <_dtoa_r+0x1e4>
 801ff20:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ff22:	9618      	str	r6, [sp, #96]	@ 0x60
 801ff24:	0319      	lsls	r1, r3, #12
 801ff26:	4b9c      	ldr	r3, [pc, #624]	@ (8020198 <_dtoa_r+0x364>)
 801ff28:	0b09      	lsrs	r1, r1, #12
 801ff2a:	430b      	orrs	r3, r1
 801ff2c:	499b      	ldr	r1, [pc, #620]	@ (802019c <_dtoa_r+0x368>)
 801ff2e:	1857      	adds	r7, r2, r1
 801ff30:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ff32:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ff34:	0019      	movs	r1, r3
 801ff36:	2200      	movs	r2, #0
 801ff38:	4b99      	ldr	r3, [pc, #612]	@ (80201a0 <_dtoa_r+0x36c>)
 801ff3a:	f7e2 fe47 	bl	8002bcc <__aeabi_dsub>
 801ff3e:	4a99      	ldr	r2, [pc, #612]	@ (80201a4 <_dtoa_r+0x370>)
 801ff40:	4b99      	ldr	r3, [pc, #612]	@ (80201a8 <_dtoa_r+0x374>)
 801ff42:	f7e2 fb7b 	bl	800263c <__aeabi_dmul>
 801ff46:	4a99      	ldr	r2, [pc, #612]	@ (80201ac <_dtoa_r+0x378>)
 801ff48:	4b99      	ldr	r3, [pc, #612]	@ (80201b0 <_dtoa_r+0x37c>)
 801ff4a:	f7e1 fbcf 	bl	80016ec <__aeabi_dadd>
 801ff4e:	0004      	movs	r4, r0
 801ff50:	0038      	movs	r0, r7
 801ff52:	000d      	movs	r5, r1
 801ff54:	f7e3 fa34 	bl	80033c0 <__aeabi_i2d>
 801ff58:	4a96      	ldr	r2, [pc, #600]	@ (80201b4 <_dtoa_r+0x380>)
 801ff5a:	4b97      	ldr	r3, [pc, #604]	@ (80201b8 <_dtoa_r+0x384>)
 801ff5c:	f7e2 fb6e 	bl	800263c <__aeabi_dmul>
 801ff60:	0002      	movs	r2, r0
 801ff62:	000b      	movs	r3, r1
 801ff64:	0020      	movs	r0, r4
 801ff66:	0029      	movs	r1, r5
 801ff68:	f7e1 fbc0 	bl	80016ec <__aeabi_dadd>
 801ff6c:	0004      	movs	r4, r0
 801ff6e:	000d      	movs	r5, r1
 801ff70:	f7e3 f9ea 	bl	8003348 <__aeabi_d2iz>
 801ff74:	2200      	movs	r2, #0
 801ff76:	9004      	str	r0, [sp, #16]
 801ff78:	2300      	movs	r3, #0
 801ff7a:	0020      	movs	r0, r4
 801ff7c:	0029      	movs	r1, r5
 801ff7e:	f7e0 fa9d 	bl	80004bc <__aeabi_dcmplt>
 801ff82:	2800      	cmp	r0, #0
 801ff84:	d00b      	beq.n	801ff9e <_dtoa_r+0x16a>
 801ff86:	9804      	ldr	r0, [sp, #16]
 801ff88:	f7e3 fa1a 	bl	80033c0 <__aeabi_i2d>
 801ff8c:	002b      	movs	r3, r5
 801ff8e:	0022      	movs	r2, r4
 801ff90:	f7e0 fa8e 	bl	80004b0 <__aeabi_dcmpeq>
 801ff94:	4243      	negs	r3, r0
 801ff96:	4158      	adcs	r0, r3
 801ff98:	9b04      	ldr	r3, [sp, #16]
 801ff9a:	1a1b      	subs	r3, r3, r0
 801ff9c:	9304      	str	r3, [sp, #16]
 801ff9e:	2301      	movs	r3, #1
 801ffa0:	9315      	str	r3, [sp, #84]	@ 0x54
 801ffa2:	9b04      	ldr	r3, [sp, #16]
 801ffa4:	2b16      	cmp	r3, #22
 801ffa6:	d810      	bhi.n	801ffca <_dtoa_r+0x196>
 801ffa8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ffaa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ffac:	9a04      	ldr	r2, [sp, #16]
 801ffae:	4b83      	ldr	r3, [pc, #524]	@ (80201bc <_dtoa_r+0x388>)
 801ffb0:	00d2      	lsls	r2, r2, #3
 801ffb2:	189b      	adds	r3, r3, r2
 801ffb4:	681a      	ldr	r2, [r3, #0]
 801ffb6:	685b      	ldr	r3, [r3, #4]
 801ffb8:	f7e0 fa80 	bl	80004bc <__aeabi_dcmplt>
 801ffbc:	2800      	cmp	r0, #0
 801ffbe:	d047      	beq.n	8020050 <_dtoa_r+0x21c>
 801ffc0:	9b04      	ldr	r3, [sp, #16]
 801ffc2:	3b01      	subs	r3, #1
 801ffc4:	9304      	str	r3, [sp, #16]
 801ffc6:	2300      	movs	r3, #0
 801ffc8:	9315      	str	r3, [sp, #84]	@ 0x54
 801ffca:	2200      	movs	r2, #0
 801ffcc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801ffce:	9206      	str	r2, [sp, #24]
 801ffd0:	1bdb      	subs	r3, r3, r7
 801ffd2:	1e5a      	subs	r2, r3, #1
 801ffd4:	d53e      	bpl.n	8020054 <_dtoa_r+0x220>
 801ffd6:	2201      	movs	r2, #1
 801ffd8:	1ad3      	subs	r3, r2, r3
 801ffda:	9306      	str	r3, [sp, #24]
 801ffdc:	2300      	movs	r3, #0
 801ffde:	930d      	str	r3, [sp, #52]	@ 0x34
 801ffe0:	9b04      	ldr	r3, [sp, #16]
 801ffe2:	2b00      	cmp	r3, #0
 801ffe4:	db38      	blt.n	8020058 <_dtoa_r+0x224>
 801ffe6:	9a04      	ldr	r2, [sp, #16]
 801ffe8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ffea:	4694      	mov	ip, r2
 801ffec:	4463      	add	r3, ip
 801ffee:	930d      	str	r3, [sp, #52]	@ 0x34
 801fff0:	2300      	movs	r3, #0
 801fff2:	9214      	str	r2, [sp, #80]	@ 0x50
 801fff4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fff6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fff8:	2401      	movs	r4, #1
 801fffa:	2b09      	cmp	r3, #9
 801fffc:	d867      	bhi.n	80200ce <_dtoa_r+0x29a>
 801fffe:	2b05      	cmp	r3, #5
 8020000:	dd02      	ble.n	8020008 <_dtoa_r+0x1d4>
 8020002:	2400      	movs	r4, #0
 8020004:	3b04      	subs	r3, #4
 8020006:	9322      	str	r3, [sp, #136]	@ 0x88
 8020008:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802000a:	1e98      	subs	r0, r3, #2
 802000c:	2803      	cmp	r0, #3
 802000e:	d867      	bhi.n	80200e0 <_dtoa_r+0x2ac>
 8020010:	f7e0 f8b4 	bl	800017c <__gnu_thumb1_case_uqi>
 8020014:	5b383a2b 	.word	0x5b383a2b
 8020018:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802001a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 802001c:	18f6      	adds	r6, r6, r3
 802001e:	4b68      	ldr	r3, [pc, #416]	@ (80201c0 <_dtoa_r+0x38c>)
 8020020:	18f2      	adds	r2, r6, r3
 8020022:	2a20      	cmp	r2, #32
 8020024:	dd0f      	ble.n	8020046 <_dtoa_r+0x212>
 8020026:	2340      	movs	r3, #64	@ 0x40
 8020028:	1a9b      	subs	r3, r3, r2
 802002a:	409f      	lsls	r7, r3
 802002c:	4b65      	ldr	r3, [pc, #404]	@ (80201c4 <_dtoa_r+0x390>)
 802002e:	0038      	movs	r0, r7
 8020030:	18f3      	adds	r3, r6, r3
 8020032:	40dc      	lsrs	r4, r3
 8020034:	4320      	orrs	r0, r4
 8020036:	f7e3 f9f1 	bl	800341c <__aeabi_ui2d>
 802003a:	2201      	movs	r2, #1
 802003c:	4b62      	ldr	r3, [pc, #392]	@ (80201c8 <_dtoa_r+0x394>)
 802003e:	1e77      	subs	r7, r6, #1
 8020040:	18cb      	adds	r3, r1, r3
 8020042:	9218      	str	r2, [sp, #96]	@ 0x60
 8020044:	e776      	b.n	801ff34 <_dtoa_r+0x100>
 8020046:	2320      	movs	r3, #32
 8020048:	0020      	movs	r0, r4
 802004a:	1a9b      	subs	r3, r3, r2
 802004c:	4098      	lsls	r0, r3
 802004e:	e7f2      	b.n	8020036 <_dtoa_r+0x202>
 8020050:	9015      	str	r0, [sp, #84]	@ 0x54
 8020052:	e7ba      	b.n	801ffca <_dtoa_r+0x196>
 8020054:	920d      	str	r2, [sp, #52]	@ 0x34
 8020056:	e7c3      	b.n	801ffe0 <_dtoa_r+0x1ac>
 8020058:	9b06      	ldr	r3, [sp, #24]
 802005a:	9a04      	ldr	r2, [sp, #16]
 802005c:	1a9b      	subs	r3, r3, r2
 802005e:	9306      	str	r3, [sp, #24]
 8020060:	4253      	negs	r3, r2
 8020062:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020064:	2300      	movs	r3, #0
 8020066:	9314      	str	r3, [sp, #80]	@ 0x50
 8020068:	e7c5      	b.n	801fff6 <_dtoa_r+0x1c2>
 802006a:	2300      	movs	r3, #0
 802006c:	9310      	str	r3, [sp, #64]	@ 0x40
 802006e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020070:	930e      	str	r3, [sp, #56]	@ 0x38
 8020072:	9309      	str	r3, [sp, #36]	@ 0x24
 8020074:	2b00      	cmp	r3, #0
 8020076:	dc13      	bgt.n	80200a0 <_dtoa_r+0x26c>
 8020078:	2301      	movs	r3, #1
 802007a:	001a      	movs	r2, r3
 802007c:	930e      	str	r3, [sp, #56]	@ 0x38
 802007e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020080:	9223      	str	r2, [sp, #140]	@ 0x8c
 8020082:	e00d      	b.n	80200a0 <_dtoa_r+0x26c>
 8020084:	2301      	movs	r3, #1
 8020086:	e7f1      	b.n	802006c <_dtoa_r+0x238>
 8020088:	2300      	movs	r3, #0
 802008a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802008c:	9310      	str	r3, [sp, #64]	@ 0x40
 802008e:	4694      	mov	ip, r2
 8020090:	9b04      	ldr	r3, [sp, #16]
 8020092:	4463      	add	r3, ip
 8020094:	930e      	str	r3, [sp, #56]	@ 0x38
 8020096:	3301      	adds	r3, #1
 8020098:	9309      	str	r3, [sp, #36]	@ 0x24
 802009a:	2b00      	cmp	r3, #0
 802009c:	dc00      	bgt.n	80200a0 <_dtoa_r+0x26c>
 802009e:	2301      	movs	r3, #1
 80200a0:	9a03      	ldr	r2, [sp, #12]
 80200a2:	2100      	movs	r1, #0
 80200a4:	69d0      	ldr	r0, [r2, #28]
 80200a6:	2204      	movs	r2, #4
 80200a8:	0015      	movs	r5, r2
 80200aa:	3514      	adds	r5, #20
 80200ac:	429d      	cmp	r5, r3
 80200ae:	d91b      	bls.n	80200e8 <_dtoa_r+0x2b4>
 80200b0:	6041      	str	r1, [r0, #4]
 80200b2:	9803      	ldr	r0, [sp, #12]
 80200b4:	f001 f924 	bl	8021300 <_Balloc>
 80200b8:	9008      	str	r0, [sp, #32]
 80200ba:	2800      	cmp	r0, #0
 80200bc:	d117      	bne.n	80200ee <_dtoa_r+0x2ba>
 80200be:	21b0      	movs	r1, #176	@ 0xb0
 80200c0:	4b42      	ldr	r3, [pc, #264]	@ (80201cc <_dtoa_r+0x398>)
 80200c2:	482e      	ldr	r0, [pc, #184]	@ (802017c <_dtoa_r+0x348>)
 80200c4:	9a08      	ldr	r2, [sp, #32]
 80200c6:	31ff      	adds	r1, #255	@ 0xff
 80200c8:	e6c9      	b.n	801fe5e <_dtoa_r+0x2a>
 80200ca:	2301      	movs	r3, #1
 80200cc:	e7dd      	b.n	802008a <_dtoa_r+0x256>
 80200ce:	2300      	movs	r3, #0
 80200d0:	9410      	str	r4, [sp, #64]	@ 0x40
 80200d2:	9322      	str	r3, [sp, #136]	@ 0x88
 80200d4:	3b01      	subs	r3, #1
 80200d6:	930e      	str	r3, [sp, #56]	@ 0x38
 80200d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80200da:	2200      	movs	r2, #0
 80200dc:	3313      	adds	r3, #19
 80200de:	e7cf      	b.n	8020080 <_dtoa_r+0x24c>
 80200e0:	2301      	movs	r3, #1
 80200e2:	9310      	str	r3, [sp, #64]	@ 0x40
 80200e4:	3b02      	subs	r3, #2
 80200e6:	e7f6      	b.n	80200d6 <_dtoa_r+0x2a2>
 80200e8:	3101      	adds	r1, #1
 80200ea:	0052      	lsls	r2, r2, #1
 80200ec:	e7dc      	b.n	80200a8 <_dtoa_r+0x274>
 80200ee:	9b03      	ldr	r3, [sp, #12]
 80200f0:	9a08      	ldr	r2, [sp, #32]
 80200f2:	69db      	ldr	r3, [r3, #28]
 80200f4:	601a      	str	r2, [r3, #0]
 80200f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80200f8:	2b0e      	cmp	r3, #14
 80200fa:	d900      	bls.n	80200fe <_dtoa_r+0x2ca>
 80200fc:	e0d9      	b.n	80202b2 <_dtoa_r+0x47e>
 80200fe:	2c00      	cmp	r4, #0
 8020100:	d100      	bne.n	8020104 <_dtoa_r+0x2d0>
 8020102:	e0d6      	b.n	80202b2 <_dtoa_r+0x47e>
 8020104:	9b04      	ldr	r3, [sp, #16]
 8020106:	2b00      	cmp	r3, #0
 8020108:	dd64      	ble.n	80201d4 <_dtoa_r+0x3a0>
 802010a:	210f      	movs	r1, #15
 802010c:	9a04      	ldr	r2, [sp, #16]
 802010e:	4b2b      	ldr	r3, [pc, #172]	@ (80201bc <_dtoa_r+0x388>)
 8020110:	400a      	ands	r2, r1
 8020112:	00d2      	lsls	r2, r2, #3
 8020114:	189b      	adds	r3, r3, r2
 8020116:	681e      	ldr	r6, [r3, #0]
 8020118:	685f      	ldr	r7, [r3, #4]
 802011a:	9b04      	ldr	r3, [sp, #16]
 802011c:	2402      	movs	r4, #2
 802011e:	111d      	asrs	r5, r3, #4
 8020120:	05db      	lsls	r3, r3, #23
 8020122:	d50a      	bpl.n	802013a <_dtoa_r+0x306>
 8020124:	4b2a      	ldr	r3, [pc, #168]	@ (80201d0 <_dtoa_r+0x39c>)
 8020126:	400d      	ands	r5, r1
 8020128:	6a1a      	ldr	r2, [r3, #32]
 802012a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802012c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802012e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020130:	f7e1 fe40 	bl	8001db4 <__aeabi_ddiv>
 8020134:	900a      	str	r0, [sp, #40]	@ 0x28
 8020136:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020138:	3401      	adds	r4, #1
 802013a:	4b25      	ldr	r3, [pc, #148]	@ (80201d0 <_dtoa_r+0x39c>)
 802013c:	930c      	str	r3, [sp, #48]	@ 0x30
 802013e:	2d00      	cmp	r5, #0
 8020140:	d108      	bne.n	8020154 <_dtoa_r+0x320>
 8020142:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020144:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020146:	0032      	movs	r2, r6
 8020148:	003b      	movs	r3, r7
 802014a:	f7e1 fe33 	bl	8001db4 <__aeabi_ddiv>
 802014e:	900a      	str	r0, [sp, #40]	@ 0x28
 8020150:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020152:	e05a      	b.n	802020a <_dtoa_r+0x3d6>
 8020154:	2301      	movs	r3, #1
 8020156:	421d      	tst	r5, r3
 8020158:	d009      	beq.n	802016e <_dtoa_r+0x33a>
 802015a:	18e4      	adds	r4, r4, r3
 802015c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802015e:	0030      	movs	r0, r6
 8020160:	681a      	ldr	r2, [r3, #0]
 8020162:	685b      	ldr	r3, [r3, #4]
 8020164:	0039      	movs	r1, r7
 8020166:	f7e2 fa69 	bl	800263c <__aeabi_dmul>
 802016a:	0006      	movs	r6, r0
 802016c:	000f      	movs	r7, r1
 802016e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020170:	106d      	asrs	r5, r5, #1
 8020172:	3308      	adds	r3, #8
 8020174:	e7e2      	b.n	802013c <_dtoa_r+0x308>
 8020176:	46c0      	nop			@ (mov r8, r8)
 8020178:	080253fa 	.word	0x080253fa
 802017c:	08025411 	.word	0x08025411
 8020180:	7ff00000 	.word	0x7ff00000
 8020184:	0000270f 	.word	0x0000270f
 8020188:	080253f6 	.word	0x080253f6
 802018c:	080253f9 	.word	0x080253f9
 8020190:	080253c2 	.word	0x080253c2
 8020194:	080253c1 	.word	0x080253c1
 8020198:	3ff00000 	.word	0x3ff00000
 802019c:	fffffc01 	.word	0xfffffc01
 80201a0:	3ff80000 	.word	0x3ff80000
 80201a4:	636f4361 	.word	0x636f4361
 80201a8:	3fd287a7 	.word	0x3fd287a7
 80201ac:	8b60c8b3 	.word	0x8b60c8b3
 80201b0:	3fc68a28 	.word	0x3fc68a28
 80201b4:	509f79fb 	.word	0x509f79fb
 80201b8:	3fd34413 	.word	0x3fd34413
 80201bc:	08025568 	.word	0x08025568
 80201c0:	00000432 	.word	0x00000432
 80201c4:	00000412 	.word	0x00000412
 80201c8:	fe100000 	.word	0xfe100000
 80201cc:	08025469 	.word	0x08025469
 80201d0:	08025540 	.word	0x08025540
 80201d4:	9b04      	ldr	r3, [sp, #16]
 80201d6:	2402      	movs	r4, #2
 80201d8:	2b00      	cmp	r3, #0
 80201da:	d016      	beq.n	802020a <_dtoa_r+0x3d6>
 80201dc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80201de:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80201e0:	220f      	movs	r2, #15
 80201e2:	425d      	negs	r5, r3
 80201e4:	402a      	ands	r2, r5
 80201e6:	4bd7      	ldr	r3, [pc, #860]	@ (8020544 <_dtoa_r+0x710>)
 80201e8:	00d2      	lsls	r2, r2, #3
 80201ea:	189b      	adds	r3, r3, r2
 80201ec:	681a      	ldr	r2, [r3, #0]
 80201ee:	685b      	ldr	r3, [r3, #4]
 80201f0:	f7e2 fa24 	bl	800263c <__aeabi_dmul>
 80201f4:	2701      	movs	r7, #1
 80201f6:	2300      	movs	r3, #0
 80201f8:	900a      	str	r0, [sp, #40]	@ 0x28
 80201fa:	910b      	str	r1, [sp, #44]	@ 0x2c
 80201fc:	4ed2      	ldr	r6, [pc, #840]	@ (8020548 <_dtoa_r+0x714>)
 80201fe:	112d      	asrs	r5, r5, #4
 8020200:	2d00      	cmp	r5, #0
 8020202:	d000      	beq.n	8020206 <_dtoa_r+0x3d2>
 8020204:	e0ba      	b.n	802037c <_dtoa_r+0x548>
 8020206:	2b00      	cmp	r3, #0
 8020208:	d1a1      	bne.n	802014e <_dtoa_r+0x31a>
 802020a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802020c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802020e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020210:	2b00      	cmp	r3, #0
 8020212:	d100      	bne.n	8020216 <_dtoa_r+0x3e2>
 8020214:	e0bd      	b.n	8020392 <_dtoa_r+0x55e>
 8020216:	2200      	movs	r2, #0
 8020218:	0030      	movs	r0, r6
 802021a:	0039      	movs	r1, r7
 802021c:	4bcb      	ldr	r3, [pc, #812]	@ (802054c <_dtoa_r+0x718>)
 802021e:	f7e0 f94d 	bl	80004bc <__aeabi_dcmplt>
 8020222:	2800      	cmp	r0, #0
 8020224:	d100      	bne.n	8020228 <_dtoa_r+0x3f4>
 8020226:	e0b4      	b.n	8020392 <_dtoa_r+0x55e>
 8020228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802022a:	2b00      	cmp	r3, #0
 802022c:	d100      	bne.n	8020230 <_dtoa_r+0x3fc>
 802022e:	e0b0      	b.n	8020392 <_dtoa_r+0x55e>
 8020230:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020232:	2b00      	cmp	r3, #0
 8020234:	dd39      	ble.n	80202aa <_dtoa_r+0x476>
 8020236:	9b04      	ldr	r3, [sp, #16]
 8020238:	2200      	movs	r2, #0
 802023a:	3b01      	subs	r3, #1
 802023c:	930c      	str	r3, [sp, #48]	@ 0x30
 802023e:	0030      	movs	r0, r6
 8020240:	4bc3      	ldr	r3, [pc, #780]	@ (8020550 <_dtoa_r+0x71c>)
 8020242:	0039      	movs	r1, r7
 8020244:	f7e2 f9fa 	bl	800263c <__aeabi_dmul>
 8020248:	900a      	str	r0, [sp, #40]	@ 0x28
 802024a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802024c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802024e:	3401      	adds	r4, #1
 8020250:	0020      	movs	r0, r4
 8020252:	9311      	str	r3, [sp, #68]	@ 0x44
 8020254:	f7e3 f8b4 	bl	80033c0 <__aeabi_i2d>
 8020258:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802025a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802025c:	f7e2 f9ee 	bl	800263c <__aeabi_dmul>
 8020260:	4bbc      	ldr	r3, [pc, #752]	@ (8020554 <_dtoa_r+0x720>)
 8020262:	2200      	movs	r2, #0
 8020264:	f7e1 fa42 	bl	80016ec <__aeabi_dadd>
 8020268:	4bbb      	ldr	r3, [pc, #748]	@ (8020558 <_dtoa_r+0x724>)
 802026a:	0006      	movs	r6, r0
 802026c:	18cf      	adds	r7, r1, r3
 802026e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020270:	2b00      	cmp	r3, #0
 8020272:	d000      	beq.n	8020276 <_dtoa_r+0x442>
 8020274:	e091      	b.n	802039a <_dtoa_r+0x566>
 8020276:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020278:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802027a:	2200      	movs	r2, #0
 802027c:	4bb7      	ldr	r3, [pc, #732]	@ (802055c <_dtoa_r+0x728>)
 802027e:	f7e2 fca5 	bl	8002bcc <__aeabi_dsub>
 8020282:	0032      	movs	r2, r6
 8020284:	003b      	movs	r3, r7
 8020286:	0004      	movs	r4, r0
 8020288:	000d      	movs	r5, r1
 802028a:	f7e0 f92b 	bl	80004e4 <__aeabi_dcmpgt>
 802028e:	2800      	cmp	r0, #0
 8020290:	d000      	beq.n	8020294 <_dtoa_r+0x460>
 8020292:	e29d      	b.n	80207d0 <_dtoa_r+0x99c>
 8020294:	2180      	movs	r1, #128	@ 0x80
 8020296:	0609      	lsls	r1, r1, #24
 8020298:	187b      	adds	r3, r7, r1
 802029a:	0032      	movs	r2, r6
 802029c:	0020      	movs	r0, r4
 802029e:	0029      	movs	r1, r5
 80202a0:	f7e0 f90c 	bl	80004bc <__aeabi_dcmplt>
 80202a4:	2800      	cmp	r0, #0
 80202a6:	d000      	beq.n	80202aa <_dtoa_r+0x476>
 80202a8:	e130      	b.n	802050c <_dtoa_r+0x6d8>
 80202aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80202ac:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80202ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80202b0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80202b2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80202b4:	2b00      	cmp	r3, #0
 80202b6:	da00      	bge.n	80202ba <_dtoa_r+0x486>
 80202b8:	e177      	b.n	80205aa <_dtoa_r+0x776>
 80202ba:	9a04      	ldr	r2, [sp, #16]
 80202bc:	2a0e      	cmp	r2, #14
 80202be:	dd00      	ble.n	80202c2 <_dtoa_r+0x48e>
 80202c0:	e173      	b.n	80205aa <_dtoa_r+0x776>
 80202c2:	4ba0      	ldr	r3, [pc, #640]	@ (8020544 <_dtoa_r+0x710>)
 80202c4:	00d2      	lsls	r2, r2, #3
 80202c6:	189b      	adds	r3, r3, r2
 80202c8:	685c      	ldr	r4, [r3, #4]
 80202ca:	681b      	ldr	r3, [r3, #0]
 80202cc:	9306      	str	r3, [sp, #24]
 80202ce:	9407      	str	r4, [sp, #28]
 80202d0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80202d2:	2b00      	cmp	r3, #0
 80202d4:	da03      	bge.n	80202de <_dtoa_r+0x4aa>
 80202d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80202d8:	2b00      	cmp	r3, #0
 80202da:	dc00      	bgt.n	80202de <_dtoa_r+0x4aa>
 80202dc:	e106      	b.n	80204ec <_dtoa_r+0x6b8>
 80202de:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80202e0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80202e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80202e4:	9d08      	ldr	r5, [sp, #32]
 80202e6:	3b01      	subs	r3, #1
 80202e8:	195b      	adds	r3, r3, r5
 80202ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80202ec:	9a06      	ldr	r2, [sp, #24]
 80202ee:	9b07      	ldr	r3, [sp, #28]
 80202f0:	0030      	movs	r0, r6
 80202f2:	0039      	movs	r1, r7
 80202f4:	f7e1 fd5e 	bl	8001db4 <__aeabi_ddiv>
 80202f8:	f7e3 f826 	bl	8003348 <__aeabi_d2iz>
 80202fc:	9009      	str	r0, [sp, #36]	@ 0x24
 80202fe:	f7e3 f85f 	bl	80033c0 <__aeabi_i2d>
 8020302:	9a06      	ldr	r2, [sp, #24]
 8020304:	9b07      	ldr	r3, [sp, #28]
 8020306:	f7e2 f999 	bl	800263c <__aeabi_dmul>
 802030a:	0002      	movs	r2, r0
 802030c:	000b      	movs	r3, r1
 802030e:	0030      	movs	r0, r6
 8020310:	0039      	movs	r1, r7
 8020312:	f7e2 fc5b 	bl	8002bcc <__aeabi_dsub>
 8020316:	002b      	movs	r3, r5
 8020318:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802031a:	3501      	adds	r5, #1
 802031c:	3230      	adds	r2, #48	@ 0x30
 802031e:	701a      	strb	r2, [r3, #0]
 8020320:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020322:	002c      	movs	r4, r5
 8020324:	429a      	cmp	r2, r3
 8020326:	d000      	beq.n	802032a <_dtoa_r+0x4f6>
 8020328:	e131      	b.n	802058e <_dtoa_r+0x75a>
 802032a:	0002      	movs	r2, r0
 802032c:	000b      	movs	r3, r1
 802032e:	f7e1 f9dd 	bl	80016ec <__aeabi_dadd>
 8020332:	9a06      	ldr	r2, [sp, #24]
 8020334:	9b07      	ldr	r3, [sp, #28]
 8020336:	0006      	movs	r6, r0
 8020338:	000f      	movs	r7, r1
 802033a:	f7e0 f8d3 	bl	80004e4 <__aeabi_dcmpgt>
 802033e:	2800      	cmp	r0, #0
 8020340:	d000      	beq.n	8020344 <_dtoa_r+0x510>
 8020342:	e10f      	b.n	8020564 <_dtoa_r+0x730>
 8020344:	9a06      	ldr	r2, [sp, #24]
 8020346:	9b07      	ldr	r3, [sp, #28]
 8020348:	0030      	movs	r0, r6
 802034a:	0039      	movs	r1, r7
 802034c:	f7e0 f8b0 	bl	80004b0 <__aeabi_dcmpeq>
 8020350:	2800      	cmp	r0, #0
 8020352:	d003      	beq.n	802035c <_dtoa_r+0x528>
 8020354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020356:	07dd      	lsls	r5, r3, #31
 8020358:	d500      	bpl.n	802035c <_dtoa_r+0x528>
 802035a:	e103      	b.n	8020564 <_dtoa_r+0x730>
 802035c:	9905      	ldr	r1, [sp, #20]
 802035e:	9803      	ldr	r0, [sp, #12]
 8020360:	f001 f812 	bl	8021388 <_Bfree>
 8020364:	2300      	movs	r3, #0
 8020366:	7023      	strb	r3, [r4, #0]
 8020368:	9b04      	ldr	r3, [sp, #16]
 802036a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802036c:	3301      	adds	r3, #1
 802036e:	6013      	str	r3, [r2, #0]
 8020370:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020372:	2b00      	cmp	r3, #0
 8020374:	d100      	bne.n	8020378 <_dtoa_r+0x544>
 8020376:	e5a7      	b.n	801fec8 <_dtoa_r+0x94>
 8020378:	601c      	str	r4, [r3, #0]
 802037a:	e5a5      	b.n	801fec8 <_dtoa_r+0x94>
 802037c:	423d      	tst	r5, r7
 802037e:	d005      	beq.n	802038c <_dtoa_r+0x558>
 8020380:	6832      	ldr	r2, [r6, #0]
 8020382:	6873      	ldr	r3, [r6, #4]
 8020384:	f7e2 f95a 	bl	800263c <__aeabi_dmul>
 8020388:	003b      	movs	r3, r7
 802038a:	3401      	adds	r4, #1
 802038c:	106d      	asrs	r5, r5, #1
 802038e:	3608      	adds	r6, #8
 8020390:	e736      	b.n	8020200 <_dtoa_r+0x3cc>
 8020392:	9b04      	ldr	r3, [sp, #16]
 8020394:	930c      	str	r3, [sp, #48]	@ 0x30
 8020396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020398:	e75a      	b.n	8020250 <_dtoa_r+0x41c>
 802039a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802039c:	4b69      	ldr	r3, [pc, #420]	@ (8020544 <_dtoa_r+0x710>)
 802039e:	3a01      	subs	r2, #1
 80203a0:	00d2      	lsls	r2, r2, #3
 80203a2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80203a4:	189b      	adds	r3, r3, r2
 80203a6:	681a      	ldr	r2, [r3, #0]
 80203a8:	685b      	ldr	r3, [r3, #4]
 80203aa:	2900      	cmp	r1, #0
 80203ac:	d04c      	beq.n	8020448 <_dtoa_r+0x614>
 80203ae:	2000      	movs	r0, #0
 80203b0:	496b      	ldr	r1, [pc, #428]	@ (8020560 <_dtoa_r+0x72c>)
 80203b2:	f7e1 fcff 	bl	8001db4 <__aeabi_ddiv>
 80203b6:	0032      	movs	r2, r6
 80203b8:	003b      	movs	r3, r7
 80203ba:	f7e2 fc07 	bl	8002bcc <__aeabi_dsub>
 80203be:	9a08      	ldr	r2, [sp, #32]
 80203c0:	0006      	movs	r6, r0
 80203c2:	4694      	mov	ip, r2
 80203c4:	000f      	movs	r7, r1
 80203c6:	9b08      	ldr	r3, [sp, #32]
 80203c8:	9316      	str	r3, [sp, #88]	@ 0x58
 80203ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80203cc:	4463      	add	r3, ip
 80203ce:	9311      	str	r3, [sp, #68]	@ 0x44
 80203d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80203d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80203d4:	f7e2 ffb8 	bl	8003348 <__aeabi_d2iz>
 80203d8:	0005      	movs	r5, r0
 80203da:	f7e2 fff1 	bl	80033c0 <__aeabi_i2d>
 80203de:	0002      	movs	r2, r0
 80203e0:	000b      	movs	r3, r1
 80203e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80203e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80203e6:	f7e2 fbf1 	bl	8002bcc <__aeabi_dsub>
 80203ea:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80203ec:	3530      	adds	r5, #48	@ 0x30
 80203ee:	1c5c      	adds	r4, r3, #1
 80203f0:	701d      	strb	r5, [r3, #0]
 80203f2:	0032      	movs	r2, r6
 80203f4:	003b      	movs	r3, r7
 80203f6:	900a      	str	r0, [sp, #40]	@ 0x28
 80203f8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80203fa:	f7e0 f85f 	bl	80004bc <__aeabi_dcmplt>
 80203fe:	2800      	cmp	r0, #0
 8020400:	d16a      	bne.n	80204d8 <_dtoa_r+0x6a4>
 8020402:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020404:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020406:	2000      	movs	r0, #0
 8020408:	4950      	ldr	r1, [pc, #320]	@ (802054c <_dtoa_r+0x718>)
 802040a:	f7e2 fbdf 	bl	8002bcc <__aeabi_dsub>
 802040e:	0032      	movs	r2, r6
 8020410:	003b      	movs	r3, r7
 8020412:	f7e0 f853 	bl	80004bc <__aeabi_dcmplt>
 8020416:	2800      	cmp	r0, #0
 8020418:	d000      	beq.n	802041c <_dtoa_r+0x5e8>
 802041a:	e0a5      	b.n	8020568 <_dtoa_r+0x734>
 802041c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802041e:	42a3      	cmp	r3, r4
 8020420:	d100      	bne.n	8020424 <_dtoa_r+0x5f0>
 8020422:	e742      	b.n	80202aa <_dtoa_r+0x476>
 8020424:	2200      	movs	r2, #0
 8020426:	0030      	movs	r0, r6
 8020428:	0039      	movs	r1, r7
 802042a:	4b49      	ldr	r3, [pc, #292]	@ (8020550 <_dtoa_r+0x71c>)
 802042c:	f7e2 f906 	bl	800263c <__aeabi_dmul>
 8020430:	2200      	movs	r2, #0
 8020432:	0006      	movs	r6, r0
 8020434:	000f      	movs	r7, r1
 8020436:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020438:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802043a:	4b45      	ldr	r3, [pc, #276]	@ (8020550 <_dtoa_r+0x71c>)
 802043c:	f7e2 f8fe 	bl	800263c <__aeabi_dmul>
 8020440:	9416      	str	r4, [sp, #88]	@ 0x58
 8020442:	900a      	str	r0, [sp, #40]	@ 0x28
 8020444:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020446:	e7c3      	b.n	80203d0 <_dtoa_r+0x59c>
 8020448:	0030      	movs	r0, r6
 802044a:	0039      	movs	r1, r7
 802044c:	f7e2 f8f6 	bl	800263c <__aeabi_dmul>
 8020450:	9d08      	ldr	r5, [sp, #32]
 8020452:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020454:	002b      	movs	r3, r5
 8020456:	4694      	mov	ip, r2
 8020458:	9016      	str	r0, [sp, #88]	@ 0x58
 802045a:	9117      	str	r1, [sp, #92]	@ 0x5c
 802045c:	4463      	add	r3, ip
 802045e:	9319      	str	r3, [sp, #100]	@ 0x64
 8020460:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020462:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020464:	f7e2 ff70 	bl	8003348 <__aeabi_d2iz>
 8020468:	0004      	movs	r4, r0
 802046a:	f7e2 ffa9 	bl	80033c0 <__aeabi_i2d>
 802046e:	000b      	movs	r3, r1
 8020470:	0002      	movs	r2, r0
 8020472:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020474:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020476:	f7e2 fba9 	bl	8002bcc <__aeabi_dsub>
 802047a:	3430      	adds	r4, #48	@ 0x30
 802047c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802047e:	702c      	strb	r4, [r5, #0]
 8020480:	3501      	adds	r5, #1
 8020482:	0006      	movs	r6, r0
 8020484:	000f      	movs	r7, r1
 8020486:	42ab      	cmp	r3, r5
 8020488:	d129      	bne.n	80204de <_dtoa_r+0x6aa>
 802048a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802048c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802048e:	9b08      	ldr	r3, [sp, #32]
 8020490:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020492:	469c      	mov	ip, r3
 8020494:	2200      	movs	r2, #0
 8020496:	4b32      	ldr	r3, [pc, #200]	@ (8020560 <_dtoa_r+0x72c>)
 8020498:	4464      	add	r4, ip
 802049a:	f7e1 f927 	bl	80016ec <__aeabi_dadd>
 802049e:	0002      	movs	r2, r0
 80204a0:	000b      	movs	r3, r1
 80204a2:	0030      	movs	r0, r6
 80204a4:	0039      	movs	r1, r7
 80204a6:	f7e0 f81d 	bl	80004e4 <__aeabi_dcmpgt>
 80204aa:	2800      	cmp	r0, #0
 80204ac:	d15c      	bne.n	8020568 <_dtoa_r+0x734>
 80204ae:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80204b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80204b2:	2000      	movs	r0, #0
 80204b4:	492a      	ldr	r1, [pc, #168]	@ (8020560 <_dtoa_r+0x72c>)
 80204b6:	f7e2 fb89 	bl	8002bcc <__aeabi_dsub>
 80204ba:	0002      	movs	r2, r0
 80204bc:	000b      	movs	r3, r1
 80204be:	0030      	movs	r0, r6
 80204c0:	0039      	movs	r1, r7
 80204c2:	f7df fffb 	bl	80004bc <__aeabi_dcmplt>
 80204c6:	2800      	cmp	r0, #0
 80204c8:	d100      	bne.n	80204cc <_dtoa_r+0x698>
 80204ca:	e6ee      	b.n	80202aa <_dtoa_r+0x476>
 80204cc:	0023      	movs	r3, r4
 80204ce:	3c01      	subs	r4, #1
 80204d0:	7822      	ldrb	r2, [r4, #0]
 80204d2:	2a30      	cmp	r2, #48	@ 0x30
 80204d4:	d0fa      	beq.n	80204cc <_dtoa_r+0x698>
 80204d6:	001c      	movs	r4, r3
 80204d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80204da:	9304      	str	r3, [sp, #16]
 80204dc:	e73e      	b.n	802035c <_dtoa_r+0x528>
 80204de:	2200      	movs	r2, #0
 80204e0:	4b1b      	ldr	r3, [pc, #108]	@ (8020550 <_dtoa_r+0x71c>)
 80204e2:	f7e2 f8ab 	bl	800263c <__aeabi_dmul>
 80204e6:	900a      	str	r0, [sp, #40]	@ 0x28
 80204e8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80204ea:	e7b9      	b.n	8020460 <_dtoa_r+0x62c>
 80204ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80204ee:	2b00      	cmp	r3, #0
 80204f0:	d10c      	bne.n	802050c <_dtoa_r+0x6d8>
 80204f2:	9806      	ldr	r0, [sp, #24]
 80204f4:	9907      	ldr	r1, [sp, #28]
 80204f6:	2200      	movs	r2, #0
 80204f8:	4b18      	ldr	r3, [pc, #96]	@ (802055c <_dtoa_r+0x728>)
 80204fa:	f7e2 f89f 	bl	800263c <__aeabi_dmul>
 80204fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020500:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020502:	f7df fff9 	bl	80004f8 <__aeabi_dcmpge>
 8020506:	2800      	cmp	r0, #0
 8020508:	d100      	bne.n	802050c <_dtoa_r+0x6d8>
 802050a:	e164      	b.n	80207d6 <_dtoa_r+0x9a2>
 802050c:	2600      	movs	r6, #0
 802050e:	0037      	movs	r7, r6
 8020510:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020512:	9c08      	ldr	r4, [sp, #32]
 8020514:	43db      	mvns	r3, r3
 8020516:	930c      	str	r3, [sp, #48]	@ 0x30
 8020518:	2300      	movs	r3, #0
 802051a:	9304      	str	r3, [sp, #16]
 802051c:	0031      	movs	r1, r6
 802051e:	9803      	ldr	r0, [sp, #12]
 8020520:	f000 ff32 	bl	8021388 <_Bfree>
 8020524:	2f00      	cmp	r7, #0
 8020526:	d0d7      	beq.n	80204d8 <_dtoa_r+0x6a4>
 8020528:	9b04      	ldr	r3, [sp, #16]
 802052a:	2b00      	cmp	r3, #0
 802052c:	d005      	beq.n	802053a <_dtoa_r+0x706>
 802052e:	42bb      	cmp	r3, r7
 8020530:	d003      	beq.n	802053a <_dtoa_r+0x706>
 8020532:	0019      	movs	r1, r3
 8020534:	9803      	ldr	r0, [sp, #12]
 8020536:	f000 ff27 	bl	8021388 <_Bfree>
 802053a:	0039      	movs	r1, r7
 802053c:	9803      	ldr	r0, [sp, #12]
 802053e:	f000 ff23 	bl	8021388 <_Bfree>
 8020542:	e7c9      	b.n	80204d8 <_dtoa_r+0x6a4>
 8020544:	08025568 	.word	0x08025568
 8020548:	08025540 	.word	0x08025540
 802054c:	3ff00000 	.word	0x3ff00000
 8020550:	40240000 	.word	0x40240000
 8020554:	401c0000 	.word	0x401c0000
 8020558:	fcc00000 	.word	0xfcc00000
 802055c:	40140000 	.word	0x40140000
 8020560:	3fe00000 	.word	0x3fe00000
 8020564:	9b04      	ldr	r3, [sp, #16]
 8020566:	930c      	str	r3, [sp, #48]	@ 0x30
 8020568:	0023      	movs	r3, r4
 802056a:	001c      	movs	r4, r3
 802056c:	3b01      	subs	r3, #1
 802056e:	781a      	ldrb	r2, [r3, #0]
 8020570:	2a39      	cmp	r2, #57	@ 0x39
 8020572:	d108      	bne.n	8020586 <_dtoa_r+0x752>
 8020574:	9a08      	ldr	r2, [sp, #32]
 8020576:	429a      	cmp	r2, r3
 8020578:	d1f7      	bne.n	802056a <_dtoa_r+0x736>
 802057a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802057c:	9908      	ldr	r1, [sp, #32]
 802057e:	3201      	adds	r2, #1
 8020580:	920c      	str	r2, [sp, #48]	@ 0x30
 8020582:	2230      	movs	r2, #48	@ 0x30
 8020584:	700a      	strb	r2, [r1, #0]
 8020586:	781a      	ldrb	r2, [r3, #0]
 8020588:	3201      	adds	r2, #1
 802058a:	701a      	strb	r2, [r3, #0]
 802058c:	e7a4      	b.n	80204d8 <_dtoa_r+0x6a4>
 802058e:	2200      	movs	r2, #0
 8020590:	4bc6      	ldr	r3, [pc, #792]	@ (80208ac <_dtoa_r+0xa78>)
 8020592:	f7e2 f853 	bl	800263c <__aeabi_dmul>
 8020596:	2200      	movs	r2, #0
 8020598:	2300      	movs	r3, #0
 802059a:	0006      	movs	r6, r0
 802059c:	000f      	movs	r7, r1
 802059e:	f7df ff87 	bl	80004b0 <__aeabi_dcmpeq>
 80205a2:	2800      	cmp	r0, #0
 80205a4:	d100      	bne.n	80205a8 <_dtoa_r+0x774>
 80205a6:	e6a1      	b.n	80202ec <_dtoa_r+0x4b8>
 80205a8:	e6d8      	b.n	802035c <_dtoa_r+0x528>
 80205aa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80205ac:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80205ae:	9c06      	ldr	r4, [sp, #24]
 80205b0:	2f00      	cmp	r7, #0
 80205b2:	d014      	beq.n	80205de <_dtoa_r+0x7aa>
 80205b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80205b6:	2a01      	cmp	r2, #1
 80205b8:	dd00      	ble.n	80205bc <_dtoa_r+0x788>
 80205ba:	e0c8      	b.n	802074e <_dtoa_r+0x91a>
 80205bc:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80205be:	2a00      	cmp	r2, #0
 80205c0:	d100      	bne.n	80205c4 <_dtoa_r+0x790>
 80205c2:	e0be      	b.n	8020742 <_dtoa_r+0x90e>
 80205c4:	4aba      	ldr	r2, [pc, #744]	@ (80208b0 <_dtoa_r+0xa7c>)
 80205c6:	189b      	adds	r3, r3, r2
 80205c8:	9a06      	ldr	r2, [sp, #24]
 80205ca:	2101      	movs	r1, #1
 80205cc:	18d2      	adds	r2, r2, r3
 80205ce:	9206      	str	r2, [sp, #24]
 80205d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80205d2:	9803      	ldr	r0, [sp, #12]
 80205d4:	18d3      	adds	r3, r2, r3
 80205d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80205d8:	f000 ffda 	bl	8021590 <__i2b>
 80205dc:	0007      	movs	r7, r0
 80205de:	2c00      	cmp	r4, #0
 80205e0:	d00e      	beq.n	8020600 <_dtoa_r+0x7cc>
 80205e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80205e4:	2b00      	cmp	r3, #0
 80205e6:	dd0b      	ble.n	8020600 <_dtoa_r+0x7cc>
 80205e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80205ea:	0023      	movs	r3, r4
 80205ec:	4294      	cmp	r4, r2
 80205ee:	dd00      	ble.n	80205f2 <_dtoa_r+0x7be>
 80205f0:	0013      	movs	r3, r2
 80205f2:	9a06      	ldr	r2, [sp, #24]
 80205f4:	1ae4      	subs	r4, r4, r3
 80205f6:	1ad2      	subs	r2, r2, r3
 80205f8:	9206      	str	r2, [sp, #24]
 80205fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80205fc:	1ad3      	subs	r3, r2, r3
 80205fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8020600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020602:	2b00      	cmp	r3, #0
 8020604:	d01f      	beq.n	8020646 <_dtoa_r+0x812>
 8020606:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020608:	2b00      	cmp	r3, #0
 802060a:	d100      	bne.n	802060e <_dtoa_r+0x7da>
 802060c:	e0b5      	b.n	802077a <_dtoa_r+0x946>
 802060e:	2d00      	cmp	r5, #0
 8020610:	d010      	beq.n	8020634 <_dtoa_r+0x800>
 8020612:	0039      	movs	r1, r7
 8020614:	002a      	movs	r2, r5
 8020616:	9803      	ldr	r0, [sp, #12]
 8020618:	f001 f884 	bl	8021724 <__pow5mult>
 802061c:	9a05      	ldr	r2, [sp, #20]
 802061e:	0001      	movs	r1, r0
 8020620:	0007      	movs	r7, r0
 8020622:	9803      	ldr	r0, [sp, #12]
 8020624:	f000 ffcc 	bl	80215c0 <__multiply>
 8020628:	0006      	movs	r6, r0
 802062a:	9905      	ldr	r1, [sp, #20]
 802062c:	9803      	ldr	r0, [sp, #12]
 802062e:	f000 feab 	bl	8021388 <_Bfree>
 8020632:	9605      	str	r6, [sp, #20]
 8020634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020636:	1b5a      	subs	r2, r3, r5
 8020638:	42ab      	cmp	r3, r5
 802063a:	d004      	beq.n	8020646 <_dtoa_r+0x812>
 802063c:	9905      	ldr	r1, [sp, #20]
 802063e:	9803      	ldr	r0, [sp, #12]
 8020640:	f001 f870 	bl	8021724 <__pow5mult>
 8020644:	9005      	str	r0, [sp, #20]
 8020646:	2101      	movs	r1, #1
 8020648:	9803      	ldr	r0, [sp, #12]
 802064a:	f000 ffa1 	bl	8021590 <__i2b>
 802064e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020650:	0006      	movs	r6, r0
 8020652:	2b00      	cmp	r3, #0
 8020654:	d100      	bne.n	8020658 <_dtoa_r+0x824>
 8020656:	e1bc      	b.n	80209d2 <_dtoa_r+0xb9e>
 8020658:	001a      	movs	r2, r3
 802065a:	0001      	movs	r1, r0
 802065c:	9803      	ldr	r0, [sp, #12]
 802065e:	f001 f861 	bl	8021724 <__pow5mult>
 8020662:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020664:	0006      	movs	r6, r0
 8020666:	2500      	movs	r5, #0
 8020668:	2b01      	cmp	r3, #1
 802066a:	dc16      	bgt.n	802069a <_dtoa_r+0x866>
 802066c:	2500      	movs	r5, #0
 802066e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020670:	42ab      	cmp	r3, r5
 8020672:	d10e      	bne.n	8020692 <_dtoa_r+0x85e>
 8020674:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020676:	031b      	lsls	r3, r3, #12
 8020678:	42ab      	cmp	r3, r5
 802067a:	d10a      	bne.n	8020692 <_dtoa_r+0x85e>
 802067c:	4b8d      	ldr	r3, [pc, #564]	@ (80208b4 <_dtoa_r+0xa80>)
 802067e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020680:	4213      	tst	r3, r2
 8020682:	d006      	beq.n	8020692 <_dtoa_r+0x85e>
 8020684:	9b06      	ldr	r3, [sp, #24]
 8020686:	3501      	adds	r5, #1
 8020688:	3301      	adds	r3, #1
 802068a:	9306      	str	r3, [sp, #24]
 802068c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802068e:	3301      	adds	r3, #1
 8020690:	930d      	str	r3, [sp, #52]	@ 0x34
 8020692:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020694:	2001      	movs	r0, #1
 8020696:	2b00      	cmp	r3, #0
 8020698:	d008      	beq.n	80206ac <_dtoa_r+0x878>
 802069a:	6933      	ldr	r3, [r6, #16]
 802069c:	3303      	adds	r3, #3
 802069e:	009b      	lsls	r3, r3, #2
 80206a0:	18f3      	adds	r3, r6, r3
 80206a2:	6858      	ldr	r0, [r3, #4]
 80206a4:	f000 ff24 	bl	80214f0 <__hi0bits>
 80206a8:	2320      	movs	r3, #32
 80206aa:	1a18      	subs	r0, r3, r0
 80206ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80206ae:	1818      	adds	r0, r3, r0
 80206b0:	0002      	movs	r2, r0
 80206b2:	231f      	movs	r3, #31
 80206b4:	401a      	ands	r2, r3
 80206b6:	4218      	tst	r0, r3
 80206b8:	d065      	beq.n	8020786 <_dtoa_r+0x952>
 80206ba:	3301      	adds	r3, #1
 80206bc:	1a9b      	subs	r3, r3, r2
 80206be:	2b04      	cmp	r3, #4
 80206c0:	dd5d      	ble.n	802077e <_dtoa_r+0x94a>
 80206c2:	231c      	movs	r3, #28
 80206c4:	1a9b      	subs	r3, r3, r2
 80206c6:	9a06      	ldr	r2, [sp, #24]
 80206c8:	18e4      	adds	r4, r4, r3
 80206ca:	18d2      	adds	r2, r2, r3
 80206cc:	9206      	str	r2, [sp, #24]
 80206ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80206d0:	18d3      	adds	r3, r2, r3
 80206d2:	930d      	str	r3, [sp, #52]	@ 0x34
 80206d4:	9b06      	ldr	r3, [sp, #24]
 80206d6:	2b00      	cmp	r3, #0
 80206d8:	dd05      	ble.n	80206e6 <_dtoa_r+0x8b2>
 80206da:	001a      	movs	r2, r3
 80206dc:	9905      	ldr	r1, [sp, #20]
 80206de:	9803      	ldr	r0, [sp, #12]
 80206e0:	f001 f87c 	bl	80217dc <__lshift>
 80206e4:	9005      	str	r0, [sp, #20]
 80206e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80206e8:	2b00      	cmp	r3, #0
 80206ea:	dd05      	ble.n	80206f8 <_dtoa_r+0x8c4>
 80206ec:	0031      	movs	r1, r6
 80206ee:	001a      	movs	r2, r3
 80206f0:	9803      	ldr	r0, [sp, #12]
 80206f2:	f001 f873 	bl	80217dc <__lshift>
 80206f6:	0006      	movs	r6, r0
 80206f8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80206fa:	2b00      	cmp	r3, #0
 80206fc:	d045      	beq.n	802078a <_dtoa_r+0x956>
 80206fe:	0031      	movs	r1, r6
 8020700:	9805      	ldr	r0, [sp, #20]
 8020702:	f001 f8d7 	bl	80218b4 <__mcmp>
 8020706:	2800      	cmp	r0, #0
 8020708:	da3f      	bge.n	802078a <_dtoa_r+0x956>
 802070a:	9b04      	ldr	r3, [sp, #16]
 802070c:	220a      	movs	r2, #10
 802070e:	3b01      	subs	r3, #1
 8020710:	930c      	str	r3, [sp, #48]	@ 0x30
 8020712:	9905      	ldr	r1, [sp, #20]
 8020714:	2300      	movs	r3, #0
 8020716:	9803      	ldr	r0, [sp, #12]
 8020718:	f000 fe5a 	bl	80213d0 <__multadd>
 802071c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802071e:	9005      	str	r0, [sp, #20]
 8020720:	2b00      	cmp	r3, #0
 8020722:	d100      	bne.n	8020726 <_dtoa_r+0x8f2>
 8020724:	e15c      	b.n	80209e0 <_dtoa_r+0xbac>
 8020726:	2300      	movs	r3, #0
 8020728:	0039      	movs	r1, r7
 802072a:	220a      	movs	r2, #10
 802072c:	9803      	ldr	r0, [sp, #12]
 802072e:	f000 fe4f 	bl	80213d0 <__multadd>
 8020732:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020734:	0007      	movs	r7, r0
 8020736:	2b00      	cmp	r3, #0
 8020738:	dc55      	bgt.n	80207e6 <_dtoa_r+0x9b2>
 802073a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802073c:	2b02      	cmp	r3, #2
 802073e:	dc2d      	bgt.n	802079c <_dtoa_r+0x968>
 8020740:	e051      	b.n	80207e6 <_dtoa_r+0x9b2>
 8020742:	2336      	movs	r3, #54	@ 0x36
 8020744:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020746:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020748:	9c06      	ldr	r4, [sp, #24]
 802074a:	1a9b      	subs	r3, r3, r2
 802074c:	e73c      	b.n	80205c8 <_dtoa_r+0x794>
 802074e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020750:	1e5d      	subs	r5, r3, #1
 8020752:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020754:	42ab      	cmp	r3, r5
 8020756:	db08      	blt.n	802076a <_dtoa_r+0x936>
 8020758:	1b5d      	subs	r5, r3, r5
 802075a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802075c:	9c06      	ldr	r4, [sp, #24]
 802075e:	2b00      	cmp	r3, #0
 8020760:	db00      	blt.n	8020764 <_dtoa_r+0x930>
 8020762:	e731      	b.n	80205c8 <_dtoa_r+0x794>
 8020764:	1ae4      	subs	r4, r4, r3
 8020766:	2300      	movs	r3, #0
 8020768:	e72e      	b.n	80205c8 <_dtoa_r+0x794>
 802076a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802076c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802076e:	1aeb      	subs	r3, r5, r3
 8020770:	18d3      	adds	r3, r2, r3
 8020772:	950f      	str	r5, [sp, #60]	@ 0x3c
 8020774:	9314      	str	r3, [sp, #80]	@ 0x50
 8020776:	2500      	movs	r5, #0
 8020778:	e7ef      	b.n	802075a <_dtoa_r+0x926>
 802077a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802077c:	e75e      	b.n	802063c <_dtoa_r+0x808>
 802077e:	2b04      	cmp	r3, #4
 8020780:	d0a8      	beq.n	80206d4 <_dtoa_r+0x8a0>
 8020782:	331c      	adds	r3, #28
 8020784:	e79f      	b.n	80206c6 <_dtoa_r+0x892>
 8020786:	0013      	movs	r3, r2
 8020788:	e7fb      	b.n	8020782 <_dtoa_r+0x94e>
 802078a:	9b04      	ldr	r3, [sp, #16]
 802078c:	930c      	str	r3, [sp, #48]	@ 0x30
 802078e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020790:	930e      	str	r3, [sp, #56]	@ 0x38
 8020792:	2b00      	cmp	r3, #0
 8020794:	dc23      	bgt.n	80207de <_dtoa_r+0x9aa>
 8020796:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020798:	2b02      	cmp	r3, #2
 802079a:	dd20      	ble.n	80207de <_dtoa_r+0x9aa>
 802079c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802079e:	2b00      	cmp	r3, #0
 80207a0:	d000      	beq.n	80207a4 <_dtoa_r+0x970>
 80207a2:	e6b5      	b.n	8020510 <_dtoa_r+0x6dc>
 80207a4:	0031      	movs	r1, r6
 80207a6:	2205      	movs	r2, #5
 80207a8:	9803      	ldr	r0, [sp, #12]
 80207aa:	f000 fe11 	bl	80213d0 <__multadd>
 80207ae:	0006      	movs	r6, r0
 80207b0:	0001      	movs	r1, r0
 80207b2:	9805      	ldr	r0, [sp, #20]
 80207b4:	f001 f87e 	bl	80218b4 <__mcmp>
 80207b8:	2800      	cmp	r0, #0
 80207ba:	dc00      	bgt.n	80207be <_dtoa_r+0x98a>
 80207bc:	e6a8      	b.n	8020510 <_dtoa_r+0x6dc>
 80207be:	9b08      	ldr	r3, [sp, #32]
 80207c0:	9a08      	ldr	r2, [sp, #32]
 80207c2:	1c5c      	adds	r4, r3, #1
 80207c4:	2331      	movs	r3, #49	@ 0x31
 80207c6:	7013      	strb	r3, [r2, #0]
 80207c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80207ca:	3301      	adds	r3, #1
 80207cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80207ce:	e6a3      	b.n	8020518 <_dtoa_r+0x6e4>
 80207d0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80207d2:	0037      	movs	r7, r6
 80207d4:	e7f3      	b.n	80207be <_dtoa_r+0x98a>
 80207d6:	9b04      	ldr	r3, [sp, #16]
 80207d8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80207da:	930c      	str	r3, [sp, #48]	@ 0x30
 80207dc:	e7f9      	b.n	80207d2 <_dtoa_r+0x99e>
 80207de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80207e0:	2b00      	cmp	r3, #0
 80207e2:	d100      	bne.n	80207e6 <_dtoa_r+0x9b2>
 80207e4:	e100      	b.n	80209e8 <_dtoa_r+0xbb4>
 80207e6:	2c00      	cmp	r4, #0
 80207e8:	dd05      	ble.n	80207f6 <_dtoa_r+0x9c2>
 80207ea:	0039      	movs	r1, r7
 80207ec:	0022      	movs	r2, r4
 80207ee:	9803      	ldr	r0, [sp, #12]
 80207f0:	f000 fff4 	bl	80217dc <__lshift>
 80207f4:	0007      	movs	r7, r0
 80207f6:	0038      	movs	r0, r7
 80207f8:	2d00      	cmp	r5, #0
 80207fa:	d018      	beq.n	802082e <_dtoa_r+0x9fa>
 80207fc:	6879      	ldr	r1, [r7, #4]
 80207fe:	9803      	ldr	r0, [sp, #12]
 8020800:	f000 fd7e 	bl	8021300 <_Balloc>
 8020804:	1e04      	subs	r4, r0, #0
 8020806:	d105      	bne.n	8020814 <_dtoa_r+0x9e0>
 8020808:	0022      	movs	r2, r4
 802080a:	4b2b      	ldr	r3, [pc, #172]	@ (80208b8 <_dtoa_r+0xa84>)
 802080c:	482b      	ldr	r0, [pc, #172]	@ (80208bc <_dtoa_r+0xa88>)
 802080e:	492c      	ldr	r1, [pc, #176]	@ (80208c0 <_dtoa_r+0xa8c>)
 8020810:	f7ff fb25 	bl	801fe5e <_dtoa_r+0x2a>
 8020814:	0039      	movs	r1, r7
 8020816:	693a      	ldr	r2, [r7, #16]
 8020818:	310c      	adds	r1, #12
 802081a:	3202      	adds	r2, #2
 802081c:	0092      	lsls	r2, r2, #2
 802081e:	300c      	adds	r0, #12
 8020820:	f7ff fa6a 	bl	801fcf8 <memcpy>
 8020824:	2201      	movs	r2, #1
 8020826:	0021      	movs	r1, r4
 8020828:	9803      	ldr	r0, [sp, #12]
 802082a:	f000 ffd7 	bl	80217dc <__lshift>
 802082e:	9b08      	ldr	r3, [sp, #32]
 8020830:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020832:	9306      	str	r3, [sp, #24]
 8020834:	3b01      	subs	r3, #1
 8020836:	189b      	adds	r3, r3, r2
 8020838:	2201      	movs	r2, #1
 802083a:	9704      	str	r7, [sp, #16]
 802083c:	0007      	movs	r7, r0
 802083e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020842:	4013      	ands	r3, r2
 8020844:	930e      	str	r3, [sp, #56]	@ 0x38
 8020846:	0031      	movs	r1, r6
 8020848:	9805      	ldr	r0, [sp, #20]
 802084a:	f7ff fa65 	bl	801fd18 <quorem>
 802084e:	9904      	ldr	r1, [sp, #16]
 8020850:	0005      	movs	r5, r0
 8020852:	900a      	str	r0, [sp, #40]	@ 0x28
 8020854:	9805      	ldr	r0, [sp, #20]
 8020856:	f001 f82d 	bl	80218b4 <__mcmp>
 802085a:	003a      	movs	r2, r7
 802085c:	900d      	str	r0, [sp, #52]	@ 0x34
 802085e:	0031      	movs	r1, r6
 8020860:	9803      	ldr	r0, [sp, #12]
 8020862:	f001 f843 	bl	80218ec <__mdiff>
 8020866:	2201      	movs	r2, #1
 8020868:	68c3      	ldr	r3, [r0, #12]
 802086a:	0004      	movs	r4, r0
 802086c:	3530      	adds	r5, #48	@ 0x30
 802086e:	9209      	str	r2, [sp, #36]	@ 0x24
 8020870:	2b00      	cmp	r3, #0
 8020872:	d104      	bne.n	802087e <_dtoa_r+0xa4a>
 8020874:	0001      	movs	r1, r0
 8020876:	9805      	ldr	r0, [sp, #20]
 8020878:	f001 f81c 	bl	80218b4 <__mcmp>
 802087c:	9009      	str	r0, [sp, #36]	@ 0x24
 802087e:	0021      	movs	r1, r4
 8020880:	9803      	ldr	r0, [sp, #12]
 8020882:	f000 fd81 	bl	8021388 <_Bfree>
 8020886:	9b06      	ldr	r3, [sp, #24]
 8020888:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802088a:	1c5c      	adds	r4, r3, #1
 802088c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802088e:	4313      	orrs	r3, r2
 8020890:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020892:	4313      	orrs	r3, r2
 8020894:	d116      	bne.n	80208c4 <_dtoa_r+0xa90>
 8020896:	2d39      	cmp	r5, #57	@ 0x39
 8020898:	d02f      	beq.n	80208fa <_dtoa_r+0xac6>
 802089a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802089c:	2b00      	cmp	r3, #0
 802089e:	dd01      	ble.n	80208a4 <_dtoa_r+0xa70>
 80208a0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80208a2:	3531      	adds	r5, #49	@ 0x31
 80208a4:	9b06      	ldr	r3, [sp, #24]
 80208a6:	701d      	strb	r5, [r3, #0]
 80208a8:	e638      	b.n	802051c <_dtoa_r+0x6e8>
 80208aa:	46c0      	nop			@ (mov r8, r8)
 80208ac:	40240000 	.word	0x40240000
 80208b0:	00000433 	.word	0x00000433
 80208b4:	7ff00000 	.word	0x7ff00000
 80208b8:	08025469 	.word	0x08025469
 80208bc:	08025411 	.word	0x08025411
 80208c0:	000002ef 	.word	0x000002ef
 80208c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80208c6:	2b00      	cmp	r3, #0
 80208c8:	db04      	blt.n	80208d4 <_dtoa_r+0xaa0>
 80208ca:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80208cc:	4313      	orrs	r3, r2
 80208ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80208d0:	4313      	orrs	r3, r2
 80208d2:	d11e      	bne.n	8020912 <_dtoa_r+0xade>
 80208d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80208d6:	2b00      	cmp	r3, #0
 80208d8:	dde4      	ble.n	80208a4 <_dtoa_r+0xa70>
 80208da:	9905      	ldr	r1, [sp, #20]
 80208dc:	2201      	movs	r2, #1
 80208de:	9803      	ldr	r0, [sp, #12]
 80208e0:	f000 ff7c 	bl	80217dc <__lshift>
 80208e4:	0031      	movs	r1, r6
 80208e6:	9005      	str	r0, [sp, #20]
 80208e8:	f000 ffe4 	bl	80218b4 <__mcmp>
 80208ec:	2800      	cmp	r0, #0
 80208ee:	dc02      	bgt.n	80208f6 <_dtoa_r+0xac2>
 80208f0:	d1d8      	bne.n	80208a4 <_dtoa_r+0xa70>
 80208f2:	07eb      	lsls	r3, r5, #31
 80208f4:	d5d6      	bpl.n	80208a4 <_dtoa_r+0xa70>
 80208f6:	2d39      	cmp	r5, #57	@ 0x39
 80208f8:	d1d2      	bne.n	80208a0 <_dtoa_r+0xa6c>
 80208fa:	2339      	movs	r3, #57	@ 0x39
 80208fc:	9a06      	ldr	r2, [sp, #24]
 80208fe:	7013      	strb	r3, [r2, #0]
 8020900:	0023      	movs	r3, r4
 8020902:	001c      	movs	r4, r3
 8020904:	3b01      	subs	r3, #1
 8020906:	781a      	ldrb	r2, [r3, #0]
 8020908:	2a39      	cmp	r2, #57	@ 0x39
 802090a:	d04f      	beq.n	80209ac <_dtoa_r+0xb78>
 802090c:	3201      	adds	r2, #1
 802090e:	701a      	strb	r2, [r3, #0]
 8020910:	e604      	b.n	802051c <_dtoa_r+0x6e8>
 8020912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020914:	2b00      	cmp	r3, #0
 8020916:	dd03      	ble.n	8020920 <_dtoa_r+0xaec>
 8020918:	2d39      	cmp	r5, #57	@ 0x39
 802091a:	d0ee      	beq.n	80208fa <_dtoa_r+0xac6>
 802091c:	3501      	adds	r5, #1
 802091e:	e7c1      	b.n	80208a4 <_dtoa_r+0xa70>
 8020920:	9b06      	ldr	r3, [sp, #24]
 8020922:	9a06      	ldr	r2, [sp, #24]
 8020924:	701d      	strb	r5, [r3, #0]
 8020926:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020928:	4293      	cmp	r3, r2
 802092a:	d02a      	beq.n	8020982 <_dtoa_r+0xb4e>
 802092c:	2300      	movs	r3, #0
 802092e:	220a      	movs	r2, #10
 8020930:	9905      	ldr	r1, [sp, #20]
 8020932:	9803      	ldr	r0, [sp, #12]
 8020934:	f000 fd4c 	bl	80213d0 <__multadd>
 8020938:	9b04      	ldr	r3, [sp, #16]
 802093a:	9005      	str	r0, [sp, #20]
 802093c:	42bb      	cmp	r3, r7
 802093e:	d109      	bne.n	8020954 <_dtoa_r+0xb20>
 8020940:	2300      	movs	r3, #0
 8020942:	220a      	movs	r2, #10
 8020944:	9904      	ldr	r1, [sp, #16]
 8020946:	9803      	ldr	r0, [sp, #12]
 8020948:	f000 fd42 	bl	80213d0 <__multadd>
 802094c:	9004      	str	r0, [sp, #16]
 802094e:	0007      	movs	r7, r0
 8020950:	9406      	str	r4, [sp, #24]
 8020952:	e778      	b.n	8020846 <_dtoa_r+0xa12>
 8020954:	9904      	ldr	r1, [sp, #16]
 8020956:	2300      	movs	r3, #0
 8020958:	220a      	movs	r2, #10
 802095a:	9803      	ldr	r0, [sp, #12]
 802095c:	f000 fd38 	bl	80213d0 <__multadd>
 8020960:	2300      	movs	r3, #0
 8020962:	9004      	str	r0, [sp, #16]
 8020964:	220a      	movs	r2, #10
 8020966:	0039      	movs	r1, r7
 8020968:	9803      	ldr	r0, [sp, #12]
 802096a:	f000 fd31 	bl	80213d0 <__multadd>
 802096e:	e7ee      	b.n	802094e <_dtoa_r+0xb1a>
 8020970:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020972:	2401      	movs	r4, #1
 8020974:	2b00      	cmp	r3, #0
 8020976:	dd00      	ble.n	802097a <_dtoa_r+0xb46>
 8020978:	001c      	movs	r4, r3
 802097a:	9b08      	ldr	r3, [sp, #32]
 802097c:	191c      	adds	r4, r3, r4
 802097e:	2300      	movs	r3, #0
 8020980:	9304      	str	r3, [sp, #16]
 8020982:	9905      	ldr	r1, [sp, #20]
 8020984:	2201      	movs	r2, #1
 8020986:	9803      	ldr	r0, [sp, #12]
 8020988:	f000 ff28 	bl	80217dc <__lshift>
 802098c:	0031      	movs	r1, r6
 802098e:	9005      	str	r0, [sp, #20]
 8020990:	f000 ff90 	bl	80218b4 <__mcmp>
 8020994:	2800      	cmp	r0, #0
 8020996:	dcb3      	bgt.n	8020900 <_dtoa_r+0xacc>
 8020998:	d101      	bne.n	802099e <_dtoa_r+0xb6a>
 802099a:	07ed      	lsls	r5, r5, #31
 802099c:	d4b0      	bmi.n	8020900 <_dtoa_r+0xacc>
 802099e:	0023      	movs	r3, r4
 80209a0:	001c      	movs	r4, r3
 80209a2:	3b01      	subs	r3, #1
 80209a4:	781a      	ldrb	r2, [r3, #0]
 80209a6:	2a30      	cmp	r2, #48	@ 0x30
 80209a8:	d0fa      	beq.n	80209a0 <_dtoa_r+0xb6c>
 80209aa:	e5b7      	b.n	802051c <_dtoa_r+0x6e8>
 80209ac:	9a08      	ldr	r2, [sp, #32]
 80209ae:	429a      	cmp	r2, r3
 80209b0:	d1a7      	bne.n	8020902 <_dtoa_r+0xace>
 80209b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80209b4:	3301      	adds	r3, #1
 80209b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80209b8:	2331      	movs	r3, #49	@ 0x31
 80209ba:	7013      	strb	r3, [r2, #0]
 80209bc:	e5ae      	b.n	802051c <_dtoa_r+0x6e8>
 80209be:	4b15      	ldr	r3, [pc, #84]	@ (8020a14 <_dtoa_r+0xbe0>)
 80209c0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80209c2:	9308      	str	r3, [sp, #32]
 80209c4:	4b14      	ldr	r3, [pc, #80]	@ (8020a18 <_dtoa_r+0xbe4>)
 80209c6:	2a00      	cmp	r2, #0
 80209c8:	d001      	beq.n	80209ce <_dtoa_r+0xb9a>
 80209ca:	f7ff fa7b 	bl	801fec4 <_dtoa_r+0x90>
 80209ce:	f7ff fa7b 	bl	801fec8 <_dtoa_r+0x94>
 80209d2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80209d4:	2b01      	cmp	r3, #1
 80209d6:	dc00      	bgt.n	80209da <_dtoa_r+0xba6>
 80209d8:	e648      	b.n	802066c <_dtoa_r+0x838>
 80209da:	2001      	movs	r0, #1
 80209dc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80209de:	e665      	b.n	80206ac <_dtoa_r+0x878>
 80209e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80209e2:	2b00      	cmp	r3, #0
 80209e4:	dc00      	bgt.n	80209e8 <_dtoa_r+0xbb4>
 80209e6:	e6d6      	b.n	8020796 <_dtoa_r+0x962>
 80209e8:	2400      	movs	r4, #0
 80209ea:	0031      	movs	r1, r6
 80209ec:	9805      	ldr	r0, [sp, #20]
 80209ee:	f7ff f993 	bl	801fd18 <quorem>
 80209f2:	9b08      	ldr	r3, [sp, #32]
 80209f4:	3030      	adds	r0, #48	@ 0x30
 80209f6:	5518      	strb	r0, [r3, r4]
 80209f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80209fa:	3401      	adds	r4, #1
 80209fc:	0005      	movs	r5, r0
 80209fe:	429c      	cmp	r4, r3
 8020a00:	dab6      	bge.n	8020970 <_dtoa_r+0xb3c>
 8020a02:	2300      	movs	r3, #0
 8020a04:	220a      	movs	r2, #10
 8020a06:	9905      	ldr	r1, [sp, #20]
 8020a08:	9803      	ldr	r0, [sp, #12]
 8020a0a:	f000 fce1 	bl	80213d0 <__multadd>
 8020a0e:	9005      	str	r0, [sp, #20]
 8020a10:	e7eb      	b.n	80209ea <_dtoa_r+0xbb6>
 8020a12:	46c0      	nop			@ (mov r8, r8)
 8020a14:	080253ed 	.word	0x080253ed
 8020a18:	080253f5 	.word	0x080253f5

08020a1c <_free_r>:
 8020a1c:	b570      	push	{r4, r5, r6, lr}
 8020a1e:	0005      	movs	r5, r0
 8020a20:	1e0c      	subs	r4, r1, #0
 8020a22:	d010      	beq.n	8020a46 <_free_r+0x2a>
 8020a24:	3c04      	subs	r4, #4
 8020a26:	6823      	ldr	r3, [r4, #0]
 8020a28:	2b00      	cmp	r3, #0
 8020a2a:	da00      	bge.n	8020a2e <_free_r+0x12>
 8020a2c:	18e4      	adds	r4, r4, r3
 8020a2e:	0028      	movs	r0, r5
 8020a30:	f000 fc56 	bl	80212e0 <__malloc_lock>
 8020a34:	4a1d      	ldr	r2, [pc, #116]	@ (8020aac <_free_r+0x90>)
 8020a36:	6813      	ldr	r3, [r2, #0]
 8020a38:	2b00      	cmp	r3, #0
 8020a3a:	d105      	bne.n	8020a48 <_free_r+0x2c>
 8020a3c:	6063      	str	r3, [r4, #4]
 8020a3e:	6014      	str	r4, [r2, #0]
 8020a40:	0028      	movs	r0, r5
 8020a42:	f000 fc55 	bl	80212f0 <__malloc_unlock>
 8020a46:	bd70      	pop	{r4, r5, r6, pc}
 8020a48:	42a3      	cmp	r3, r4
 8020a4a:	d908      	bls.n	8020a5e <_free_r+0x42>
 8020a4c:	6820      	ldr	r0, [r4, #0]
 8020a4e:	1821      	adds	r1, r4, r0
 8020a50:	428b      	cmp	r3, r1
 8020a52:	d1f3      	bne.n	8020a3c <_free_r+0x20>
 8020a54:	6819      	ldr	r1, [r3, #0]
 8020a56:	685b      	ldr	r3, [r3, #4]
 8020a58:	1809      	adds	r1, r1, r0
 8020a5a:	6021      	str	r1, [r4, #0]
 8020a5c:	e7ee      	b.n	8020a3c <_free_r+0x20>
 8020a5e:	001a      	movs	r2, r3
 8020a60:	685b      	ldr	r3, [r3, #4]
 8020a62:	2b00      	cmp	r3, #0
 8020a64:	d001      	beq.n	8020a6a <_free_r+0x4e>
 8020a66:	42a3      	cmp	r3, r4
 8020a68:	d9f9      	bls.n	8020a5e <_free_r+0x42>
 8020a6a:	6811      	ldr	r1, [r2, #0]
 8020a6c:	1850      	adds	r0, r2, r1
 8020a6e:	42a0      	cmp	r0, r4
 8020a70:	d10b      	bne.n	8020a8a <_free_r+0x6e>
 8020a72:	6820      	ldr	r0, [r4, #0]
 8020a74:	1809      	adds	r1, r1, r0
 8020a76:	1850      	adds	r0, r2, r1
 8020a78:	6011      	str	r1, [r2, #0]
 8020a7a:	4283      	cmp	r3, r0
 8020a7c:	d1e0      	bne.n	8020a40 <_free_r+0x24>
 8020a7e:	6818      	ldr	r0, [r3, #0]
 8020a80:	685b      	ldr	r3, [r3, #4]
 8020a82:	1841      	adds	r1, r0, r1
 8020a84:	6011      	str	r1, [r2, #0]
 8020a86:	6053      	str	r3, [r2, #4]
 8020a88:	e7da      	b.n	8020a40 <_free_r+0x24>
 8020a8a:	42a0      	cmp	r0, r4
 8020a8c:	d902      	bls.n	8020a94 <_free_r+0x78>
 8020a8e:	230c      	movs	r3, #12
 8020a90:	602b      	str	r3, [r5, #0]
 8020a92:	e7d5      	b.n	8020a40 <_free_r+0x24>
 8020a94:	6820      	ldr	r0, [r4, #0]
 8020a96:	1821      	adds	r1, r4, r0
 8020a98:	428b      	cmp	r3, r1
 8020a9a:	d103      	bne.n	8020aa4 <_free_r+0x88>
 8020a9c:	6819      	ldr	r1, [r3, #0]
 8020a9e:	685b      	ldr	r3, [r3, #4]
 8020aa0:	1809      	adds	r1, r1, r0
 8020aa2:	6021      	str	r1, [r4, #0]
 8020aa4:	6063      	str	r3, [r4, #4]
 8020aa6:	6054      	str	r4, [r2, #4]
 8020aa8:	e7ca      	b.n	8020a40 <_free_r+0x24>
 8020aaa:	46c0      	nop			@ (mov r8, r8)
 8020aac:	200039a0 	.word	0x200039a0

08020ab0 <rshift>:
 8020ab0:	0002      	movs	r2, r0
 8020ab2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020ab4:	6904      	ldr	r4, [r0, #16]
 8020ab6:	b085      	sub	sp, #20
 8020ab8:	3214      	adds	r2, #20
 8020aba:	114b      	asrs	r3, r1, #5
 8020abc:	0016      	movs	r6, r2
 8020abe:	9302      	str	r3, [sp, #8]
 8020ac0:	429c      	cmp	r4, r3
 8020ac2:	dd31      	ble.n	8020b28 <rshift+0x78>
 8020ac4:	261f      	movs	r6, #31
 8020ac6:	000f      	movs	r7, r1
 8020ac8:	009b      	lsls	r3, r3, #2
 8020aca:	00a5      	lsls	r5, r4, #2
 8020acc:	18d3      	adds	r3, r2, r3
 8020ace:	4037      	ands	r7, r6
 8020ad0:	1955      	adds	r5, r2, r5
 8020ad2:	9300      	str	r3, [sp, #0]
 8020ad4:	9701      	str	r7, [sp, #4]
 8020ad6:	4231      	tst	r1, r6
 8020ad8:	d10d      	bne.n	8020af6 <rshift+0x46>
 8020ada:	0016      	movs	r6, r2
 8020adc:	0019      	movs	r1, r3
 8020ade:	428d      	cmp	r5, r1
 8020ae0:	d836      	bhi.n	8020b50 <rshift+0xa0>
 8020ae2:	9b00      	ldr	r3, [sp, #0]
 8020ae4:	2600      	movs	r6, #0
 8020ae6:	3b03      	subs	r3, #3
 8020ae8:	429d      	cmp	r5, r3
 8020aea:	d302      	bcc.n	8020af2 <rshift+0x42>
 8020aec:	9b02      	ldr	r3, [sp, #8]
 8020aee:	1ae4      	subs	r4, r4, r3
 8020af0:	00a6      	lsls	r6, r4, #2
 8020af2:	1996      	adds	r6, r2, r6
 8020af4:	e018      	b.n	8020b28 <rshift+0x78>
 8020af6:	2120      	movs	r1, #32
 8020af8:	9e01      	ldr	r6, [sp, #4]
 8020afa:	9f01      	ldr	r7, [sp, #4]
 8020afc:	1b89      	subs	r1, r1, r6
 8020afe:	9e00      	ldr	r6, [sp, #0]
 8020b00:	9103      	str	r1, [sp, #12]
 8020b02:	ce02      	ldmia	r6!, {r1}
 8020b04:	4694      	mov	ip, r2
 8020b06:	40f9      	lsrs	r1, r7
 8020b08:	42b5      	cmp	r5, r6
 8020b0a:	d816      	bhi.n	8020b3a <rshift+0x8a>
 8020b0c:	9b00      	ldr	r3, [sp, #0]
 8020b0e:	2600      	movs	r6, #0
 8020b10:	3301      	adds	r3, #1
 8020b12:	429d      	cmp	r5, r3
 8020b14:	d303      	bcc.n	8020b1e <rshift+0x6e>
 8020b16:	9b02      	ldr	r3, [sp, #8]
 8020b18:	1ae4      	subs	r4, r4, r3
 8020b1a:	00a6      	lsls	r6, r4, #2
 8020b1c:	3e04      	subs	r6, #4
 8020b1e:	1996      	adds	r6, r2, r6
 8020b20:	6031      	str	r1, [r6, #0]
 8020b22:	2900      	cmp	r1, #0
 8020b24:	d000      	beq.n	8020b28 <rshift+0x78>
 8020b26:	3604      	adds	r6, #4
 8020b28:	1ab1      	subs	r1, r6, r2
 8020b2a:	1089      	asrs	r1, r1, #2
 8020b2c:	6101      	str	r1, [r0, #16]
 8020b2e:	4296      	cmp	r6, r2
 8020b30:	d101      	bne.n	8020b36 <rshift+0x86>
 8020b32:	2300      	movs	r3, #0
 8020b34:	6143      	str	r3, [r0, #20]
 8020b36:	b005      	add	sp, #20
 8020b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020b3a:	6837      	ldr	r7, [r6, #0]
 8020b3c:	9b03      	ldr	r3, [sp, #12]
 8020b3e:	409f      	lsls	r7, r3
 8020b40:	430f      	orrs	r7, r1
 8020b42:	4661      	mov	r1, ip
 8020b44:	c180      	stmia	r1!, {r7}
 8020b46:	468c      	mov	ip, r1
 8020b48:	9b01      	ldr	r3, [sp, #4]
 8020b4a:	ce02      	ldmia	r6!, {r1}
 8020b4c:	40d9      	lsrs	r1, r3
 8020b4e:	e7db      	b.n	8020b08 <rshift+0x58>
 8020b50:	c980      	ldmia	r1!, {r7}
 8020b52:	c680      	stmia	r6!, {r7}
 8020b54:	e7c3      	b.n	8020ade <rshift+0x2e>

08020b56 <__hexdig_fun>:
 8020b56:	0002      	movs	r2, r0
 8020b58:	3a30      	subs	r2, #48	@ 0x30
 8020b5a:	0003      	movs	r3, r0
 8020b5c:	2a09      	cmp	r2, #9
 8020b5e:	d802      	bhi.n	8020b66 <__hexdig_fun+0x10>
 8020b60:	3b20      	subs	r3, #32
 8020b62:	b2d8      	uxtb	r0, r3
 8020b64:	4770      	bx	lr
 8020b66:	0002      	movs	r2, r0
 8020b68:	3a61      	subs	r2, #97	@ 0x61
 8020b6a:	2a05      	cmp	r2, #5
 8020b6c:	d801      	bhi.n	8020b72 <__hexdig_fun+0x1c>
 8020b6e:	3b47      	subs	r3, #71	@ 0x47
 8020b70:	e7f7      	b.n	8020b62 <__hexdig_fun+0xc>
 8020b72:	001a      	movs	r2, r3
 8020b74:	3a41      	subs	r2, #65	@ 0x41
 8020b76:	2000      	movs	r0, #0
 8020b78:	2a05      	cmp	r2, #5
 8020b7a:	d8f3      	bhi.n	8020b64 <__hexdig_fun+0xe>
 8020b7c:	3b27      	subs	r3, #39	@ 0x27
 8020b7e:	e7f0      	b.n	8020b62 <__hexdig_fun+0xc>

08020b80 <__gethex>:
 8020b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020b82:	b089      	sub	sp, #36	@ 0x24
 8020b84:	9307      	str	r3, [sp, #28]
 8020b86:	680b      	ldr	r3, [r1, #0]
 8020b88:	9201      	str	r2, [sp, #4]
 8020b8a:	9003      	str	r0, [sp, #12]
 8020b8c:	9106      	str	r1, [sp, #24]
 8020b8e:	1c9a      	adds	r2, r3, #2
 8020b90:	0011      	movs	r1, r2
 8020b92:	3201      	adds	r2, #1
 8020b94:	1e50      	subs	r0, r2, #1
 8020b96:	7800      	ldrb	r0, [r0, #0]
 8020b98:	2830      	cmp	r0, #48	@ 0x30
 8020b9a:	d0f9      	beq.n	8020b90 <__gethex+0x10>
 8020b9c:	1acb      	subs	r3, r1, r3
 8020b9e:	3b02      	subs	r3, #2
 8020ba0:	9305      	str	r3, [sp, #20]
 8020ba2:	9100      	str	r1, [sp, #0]
 8020ba4:	f7ff ffd7 	bl	8020b56 <__hexdig_fun>
 8020ba8:	2300      	movs	r3, #0
 8020baa:	001d      	movs	r5, r3
 8020bac:	9302      	str	r3, [sp, #8]
 8020bae:	4298      	cmp	r0, r3
 8020bb0:	d11e      	bne.n	8020bf0 <__gethex+0x70>
 8020bb2:	2201      	movs	r2, #1
 8020bb4:	49a6      	ldr	r1, [pc, #664]	@ (8020e50 <__gethex+0x2d0>)
 8020bb6:	9800      	ldr	r0, [sp, #0]
 8020bb8:	f7fe ffd8 	bl	801fb6c <strncmp>
 8020bbc:	0007      	movs	r7, r0
 8020bbe:	42a8      	cmp	r0, r5
 8020bc0:	d000      	beq.n	8020bc4 <__gethex+0x44>
 8020bc2:	e06a      	b.n	8020c9a <__gethex+0x11a>
 8020bc4:	9b00      	ldr	r3, [sp, #0]
 8020bc6:	7858      	ldrb	r0, [r3, #1]
 8020bc8:	1c5c      	adds	r4, r3, #1
 8020bca:	f7ff ffc4 	bl	8020b56 <__hexdig_fun>
 8020bce:	2301      	movs	r3, #1
 8020bd0:	9302      	str	r3, [sp, #8]
 8020bd2:	42a8      	cmp	r0, r5
 8020bd4:	d02f      	beq.n	8020c36 <__gethex+0xb6>
 8020bd6:	9400      	str	r4, [sp, #0]
 8020bd8:	9b00      	ldr	r3, [sp, #0]
 8020bda:	7818      	ldrb	r0, [r3, #0]
 8020bdc:	2830      	cmp	r0, #48	@ 0x30
 8020bde:	d009      	beq.n	8020bf4 <__gethex+0x74>
 8020be0:	f7ff ffb9 	bl	8020b56 <__hexdig_fun>
 8020be4:	4242      	negs	r2, r0
 8020be6:	4142      	adcs	r2, r0
 8020be8:	2301      	movs	r3, #1
 8020bea:	0025      	movs	r5, r4
 8020bec:	9202      	str	r2, [sp, #8]
 8020bee:	9305      	str	r3, [sp, #20]
 8020bf0:	9c00      	ldr	r4, [sp, #0]
 8020bf2:	e004      	b.n	8020bfe <__gethex+0x7e>
 8020bf4:	9b00      	ldr	r3, [sp, #0]
 8020bf6:	3301      	adds	r3, #1
 8020bf8:	9300      	str	r3, [sp, #0]
 8020bfa:	e7ed      	b.n	8020bd8 <__gethex+0x58>
 8020bfc:	3401      	adds	r4, #1
 8020bfe:	7820      	ldrb	r0, [r4, #0]
 8020c00:	f7ff ffa9 	bl	8020b56 <__hexdig_fun>
 8020c04:	1e07      	subs	r7, r0, #0
 8020c06:	d1f9      	bne.n	8020bfc <__gethex+0x7c>
 8020c08:	2201      	movs	r2, #1
 8020c0a:	0020      	movs	r0, r4
 8020c0c:	4990      	ldr	r1, [pc, #576]	@ (8020e50 <__gethex+0x2d0>)
 8020c0e:	f7fe ffad 	bl	801fb6c <strncmp>
 8020c12:	2800      	cmp	r0, #0
 8020c14:	d10d      	bne.n	8020c32 <__gethex+0xb2>
 8020c16:	2d00      	cmp	r5, #0
 8020c18:	d106      	bne.n	8020c28 <__gethex+0xa8>
 8020c1a:	3401      	adds	r4, #1
 8020c1c:	0025      	movs	r5, r4
 8020c1e:	7820      	ldrb	r0, [r4, #0]
 8020c20:	f7ff ff99 	bl	8020b56 <__hexdig_fun>
 8020c24:	2800      	cmp	r0, #0
 8020c26:	d102      	bne.n	8020c2e <__gethex+0xae>
 8020c28:	1b2d      	subs	r5, r5, r4
 8020c2a:	00af      	lsls	r7, r5, #2
 8020c2c:	e003      	b.n	8020c36 <__gethex+0xb6>
 8020c2e:	3401      	adds	r4, #1
 8020c30:	e7f5      	b.n	8020c1e <__gethex+0x9e>
 8020c32:	2d00      	cmp	r5, #0
 8020c34:	d1f8      	bne.n	8020c28 <__gethex+0xa8>
 8020c36:	2220      	movs	r2, #32
 8020c38:	7823      	ldrb	r3, [r4, #0]
 8020c3a:	0026      	movs	r6, r4
 8020c3c:	4393      	bics	r3, r2
 8020c3e:	2b50      	cmp	r3, #80	@ 0x50
 8020c40:	d11d      	bne.n	8020c7e <__gethex+0xfe>
 8020c42:	7863      	ldrb	r3, [r4, #1]
 8020c44:	2b2b      	cmp	r3, #43	@ 0x2b
 8020c46:	d02d      	beq.n	8020ca4 <__gethex+0x124>
 8020c48:	2b2d      	cmp	r3, #45	@ 0x2d
 8020c4a:	d02f      	beq.n	8020cac <__gethex+0x12c>
 8020c4c:	2300      	movs	r3, #0
 8020c4e:	1c66      	adds	r6, r4, #1
 8020c50:	9304      	str	r3, [sp, #16]
 8020c52:	7830      	ldrb	r0, [r6, #0]
 8020c54:	f7ff ff7f 	bl	8020b56 <__hexdig_fun>
 8020c58:	1e43      	subs	r3, r0, #1
 8020c5a:	b2db      	uxtb	r3, r3
 8020c5c:	0005      	movs	r5, r0
 8020c5e:	2b18      	cmp	r3, #24
 8020c60:	d82a      	bhi.n	8020cb8 <__gethex+0x138>
 8020c62:	7870      	ldrb	r0, [r6, #1]
 8020c64:	f7ff ff77 	bl	8020b56 <__hexdig_fun>
 8020c68:	1e43      	subs	r3, r0, #1
 8020c6a:	b2db      	uxtb	r3, r3
 8020c6c:	3601      	adds	r6, #1
 8020c6e:	3d10      	subs	r5, #16
 8020c70:	2b18      	cmp	r3, #24
 8020c72:	d91d      	bls.n	8020cb0 <__gethex+0x130>
 8020c74:	9b04      	ldr	r3, [sp, #16]
 8020c76:	2b00      	cmp	r3, #0
 8020c78:	d000      	beq.n	8020c7c <__gethex+0xfc>
 8020c7a:	426d      	negs	r5, r5
 8020c7c:	197f      	adds	r7, r7, r5
 8020c7e:	9b06      	ldr	r3, [sp, #24]
 8020c80:	601e      	str	r6, [r3, #0]
 8020c82:	9b02      	ldr	r3, [sp, #8]
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	d019      	beq.n	8020cbc <__gethex+0x13c>
 8020c88:	9b05      	ldr	r3, [sp, #20]
 8020c8a:	2606      	movs	r6, #6
 8020c8c:	425a      	negs	r2, r3
 8020c8e:	4153      	adcs	r3, r2
 8020c90:	425b      	negs	r3, r3
 8020c92:	401e      	ands	r6, r3
 8020c94:	0030      	movs	r0, r6
 8020c96:	b009      	add	sp, #36	@ 0x24
 8020c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020c9a:	2301      	movs	r3, #1
 8020c9c:	2700      	movs	r7, #0
 8020c9e:	9c00      	ldr	r4, [sp, #0]
 8020ca0:	9302      	str	r3, [sp, #8]
 8020ca2:	e7c8      	b.n	8020c36 <__gethex+0xb6>
 8020ca4:	2300      	movs	r3, #0
 8020ca6:	9304      	str	r3, [sp, #16]
 8020ca8:	1ca6      	adds	r6, r4, #2
 8020caa:	e7d2      	b.n	8020c52 <__gethex+0xd2>
 8020cac:	2301      	movs	r3, #1
 8020cae:	e7fa      	b.n	8020ca6 <__gethex+0x126>
 8020cb0:	230a      	movs	r3, #10
 8020cb2:	435d      	muls	r5, r3
 8020cb4:	182d      	adds	r5, r5, r0
 8020cb6:	e7d4      	b.n	8020c62 <__gethex+0xe2>
 8020cb8:	0026      	movs	r6, r4
 8020cba:	e7e0      	b.n	8020c7e <__gethex+0xfe>
 8020cbc:	9b00      	ldr	r3, [sp, #0]
 8020cbe:	9902      	ldr	r1, [sp, #8]
 8020cc0:	1ae3      	subs	r3, r4, r3
 8020cc2:	3b01      	subs	r3, #1
 8020cc4:	2b07      	cmp	r3, #7
 8020cc6:	dc0a      	bgt.n	8020cde <__gethex+0x15e>
 8020cc8:	9803      	ldr	r0, [sp, #12]
 8020cca:	f000 fb19 	bl	8021300 <_Balloc>
 8020cce:	1e05      	subs	r5, r0, #0
 8020cd0:	d108      	bne.n	8020ce4 <__gethex+0x164>
 8020cd2:	002a      	movs	r2, r5
 8020cd4:	21e4      	movs	r1, #228	@ 0xe4
 8020cd6:	4b5f      	ldr	r3, [pc, #380]	@ (8020e54 <__gethex+0x2d4>)
 8020cd8:	485f      	ldr	r0, [pc, #380]	@ (8020e58 <__gethex+0x2d8>)
 8020cda:	f001 fbf1 	bl	80224c0 <__assert_func>
 8020cde:	3101      	adds	r1, #1
 8020ce0:	105b      	asrs	r3, r3, #1
 8020ce2:	e7ef      	b.n	8020cc4 <__gethex+0x144>
 8020ce4:	0003      	movs	r3, r0
 8020ce6:	3314      	adds	r3, #20
 8020ce8:	9302      	str	r3, [sp, #8]
 8020cea:	9305      	str	r3, [sp, #20]
 8020cec:	2300      	movs	r3, #0
 8020cee:	001e      	movs	r6, r3
 8020cf0:	9304      	str	r3, [sp, #16]
 8020cf2:	9b00      	ldr	r3, [sp, #0]
 8020cf4:	42a3      	cmp	r3, r4
 8020cf6:	d338      	bcc.n	8020d6a <__gethex+0x1ea>
 8020cf8:	9c05      	ldr	r4, [sp, #20]
 8020cfa:	9b02      	ldr	r3, [sp, #8]
 8020cfc:	c440      	stmia	r4!, {r6}
 8020cfe:	1ae4      	subs	r4, r4, r3
 8020d00:	10a4      	asrs	r4, r4, #2
 8020d02:	0030      	movs	r0, r6
 8020d04:	612c      	str	r4, [r5, #16]
 8020d06:	f000 fbf3 	bl	80214f0 <__hi0bits>
 8020d0a:	9b01      	ldr	r3, [sp, #4]
 8020d0c:	0164      	lsls	r4, r4, #5
 8020d0e:	681b      	ldr	r3, [r3, #0]
 8020d10:	1a26      	subs	r6, r4, r0
 8020d12:	9300      	str	r3, [sp, #0]
 8020d14:	429e      	cmp	r6, r3
 8020d16:	dd52      	ble.n	8020dbe <__gethex+0x23e>
 8020d18:	1af6      	subs	r6, r6, r3
 8020d1a:	0031      	movs	r1, r6
 8020d1c:	0028      	movs	r0, r5
 8020d1e:	f000 ff96 	bl	8021c4e <__any_on>
 8020d22:	1e04      	subs	r4, r0, #0
 8020d24:	d00f      	beq.n	8020d46 <__gethex+0x1c6>
 8020d26:	2401      	movs	r4, #1
 8020d28:	231f      	movs	r3, #31
 8020d2a:	0020      	movs	r0, r4
 8020d2c:	1e72      	subs	r2, r6, #1
 8020d2e:	4013      	ands	r3, r2
 8020d30:	4098      	lsls	r0, r3
 8020d32:	0003      	movs	r3, r0
 8020d34:	1151      	asrs	r1, r2, #5
 8020d36:	9802      	ldr	r0, [sp, #8]
 8020d38:	0089      	lsls	r1, r1, #2
 8020d3a:	5809      	ldr	r1, [r1, r0]
 8020d3c:	4219      	tst	r1, r3
 8020d3e:	d002      	beq.n	8020d46 <__gethex+0x1c6>
 8020d40:	42a2      	cmp	r2, r4
 8020d42:	dc34      	bgt.n	8020dae <__gethex+0x22e>
 8020d44:	2402      	movs	r4, #2
 8020d46:	0031      	movs	r1, r6
 8020d48:	0028      	movs	r0, r5
 8020d4a:	f7ff feb1 	bl	8020ab0 <rshift>
 8020d4e:	19bf      	adds	r7, r7, r6
 8020d50:	9b01      	ldr	r3, [sp, #4]
 8020d52:	689b      	ldr	r3, [r3, #8]
 8020d54:	42bb      	cmp	r3, r7
 8020d56:	da42      	bge.n	8020dde <__gethex+0x25e>
 8020d58:	0029      	movs	r1, r5
 8020d5a:	9803      	ldr	r0, [sp, #12]
 8020d5c:	f000 fb14 	bl	8021388 <_Bfree>
 8020d60:	2300      	movs	r3, #0
 8020d62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020d64:	26a3      	movs	r6, #163	@ 0xa3
 8020d66:	6013      	str	r3, [r2, #0]
 8020d68:	e794      	b.n	8020c94 <__gethex+0x114>
 8020d6a:	3c01      	subs	r4, #1
 8020d6c:	7823      	ldrb	r3, [r4, #0]
 8020d6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8020d70:	d012      	beq.n	8020d98 <__gethex+0x218>
 8020d72:	9b04      	ldr	r3, [sp, #16]
 8020d74:	2b20      	cmp	r3, #32
 8020d76:	d104      	bne.n	8020d82 <__gethex+0x202>
 8020d78:	9b05      	ldr	r3, [sp, #20]
 8020d7a:	c340      	stmia	r3!, {r6}
 8020d7c:	2600      	movs	r6, #0
 8020d7e:	9305      	str	r3, [sp, #20]
 8020d80:	9604      	str	r6, [sp, #16]
 8020d82:	7820      	ldrb	r0, [r4, #0]
 8020d84:	f7ff fee7 	bl	8020b56 <__hexdig_fun>
 8020d88:	230f      	movs	r3, #15
 8020d8a:	4018      	ands	r0, r3
 8020d8c:	9b04      	ldr	r3, [sp, #16]
 8020d8e:	4098      	lsls	r0, r3
 8020d90:	3304      	adds	r3, #4
 8020d92:	4306      	orrs	r6, r0
 8020d94:	9304      	str	r3, [sp, #16]
 8020d96:	e7ac      	b.n	8020cf2 <__gethex+0x172>
 8020d98:	9b00      	ldr	r3, [sp, #0]
 8020d9a:	42a3      	cmp	r3, r4
 8020d9c:	d8e9      	bhi.n	8020d72 <__gethex+0x1f2>
 8020d9e:	2201      	movs	r2, #1
 8020da0:	0020      	movs	r0, r4
 8020da2:	492b      	ldr	r1, [pc, #172]	@ (8020e50 <__gethex+0x2d0>)
 8020da4:	f7fe fee2 	bl	801fb6c <strncmp>
 8020da8:	2800      	cmp	r0, #0
 8020daa:	d1e2      	bne.n	8020d72 <__gethex+0x1f2>
 8020dac:	e7a1      	b.n	8020cf2 <__gethex+0x172>
 8020dae:	0028      	movs	r0, r5
 8020db0:	1eb1      	subs	r1, r6, #2
 8020db2:	f000 ff4c 	bl	8021c4e <__any_on>
 8020db6:	2800      	cmp	r0, #0
 8020db8:	d0c4      	beq.n	8020d44 <__gethex+0x1c4>
 8020dba:	2403      	movs	r4, #3
 8020dbc:	e7c3      	b.n	8020d46 <__gethex+0x1c6>
 8020dbe:	9b00      	ldr	r3, [sp, #0]
 8020dc0:	2400      	movs	r4, #0
 8020dc2:	429e      	cmp	r6, r3
 8020dc4:	dac4      	bge.n	8020d50 <__gethex+0x1d0>
 8020dc6:	1b9e      	subs	r6, r3, r6
 8020dc8:	0029      	movs	r1, r5
 8020dca:	0032      	movs	r2, r6
 8020dcc:	9803      	ldr	r0, [sp, #12]
 8020dce:	f000 fd05 	bl	80217dc <__lshift>
 8020dd2:	0003      	movs	r3, r0
 8020dd4:	3314      	adds	r3, #20
 8020dd6:	0005      	movs	r5, r0
 8020dd8:	1bbf      	subs	r7, r7, r6
 8020dda:	9302      	str	r3, [sp, #8]
 8020ddc:	e7b8      	b.n	8020d50 <__gethex+0x1d0>
 8020dde:	9b01      	ldr	r3, [sp, #4]
 8020de0:	685e      	ldr	r6, [r3, #4]
 8020de2:	42be      	cmp	r6, r7
 8020de4:	dd6f      	ble.n	8020ec6 <__gethex+0x346>
 8020de6:	9b00      	ldr	r3, [sp, #0]
 8020de8:	1bf6      	subs	r6, r6, r7
 8020dea:	42b3      	cmp	r3, r6
 8020dec:	dc36      	bgt.n	8020e5c <__gethex+0x2dc>
 8020dee:	9b01      	ldr	r3, [sp, #4]
 8020df0:	68db      	ldr	r3, [r3, #12]
 8020df2:	2b02      	cmp	r3, #2
 8020df4:	d024      	beq.n	8020e40 <__gethex+0x2c0>
 8020df6:	2b03      	cmp	r3, #3
 8020df8:	d026      	beq.n	8020e48 <__gethex+0x2c8>
 8020dfa:	2b01      	cmp	r3, #1
 8020dfc:	d117      	bne.n	8020e2e <__gethex+0x2ae>
 8020dfe:	9b00      	ldr	r3, [sp, #0]
 8020e00:	42b3      	cmp	r3, r6
 8020e02:	d114      	bne.n	8020e2e <__gethex+0x2ae>
 8020e04:	2b01      	cmp	r3, #1
 8020e06:	d10b      	bne.n	8020e20 <__gethex+0x2a0>
 8020e08:	9b01      	ldr	r3, [sp, #4]
 8020e0a:	9a07      	ldr	r2, [sp, #28]
 8020e0c:	685b      	ldr	r3, [r3, #4]
 8020e0e:	2662      	movs	r6, #98	@ 0x62
 8020e10:	6013      	str	r3, [r2, #0]
 8020e12:	2301      	movs	r3, #1
 8020e14:	9a02      	ldr	r2, [sp, #8]
 8020e16:	612b      	str	r3, [r5, #16]
 8020e18:	6013      	str	r3, [r2, #0]
 8020e1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020e1c:	601d      	str	r5, [r3, #0]
 8020e1e:	e739      	b.n	8020c94 <__gethex+0x114>
 8020e20:	9900      	ldr	r1, [sp, #0]
 8020e22:	0028      	movs	r0, r5
 8020e24:	3901      	subs	r1, #1
 8020e26:	f000 ff12 	bl	8021c4e <__any_on>
 8020e2a:	2800      	cmp	r0, #0
 8020e2c:	d1ec      	bne.n	8020e08 <__gethex+0x288>
 8020e2e:	0029      	movs	r1, r5
 8020e30:	9803      	ldr	r0, [sp, #12]
 8020e32:	f000 faa9 	bl	8021388 <_Bfree>
 8020e36:	2300      	movs	r3, #0
 8020e38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020e3a:	2650      	movs	r6, #80	@ 0x50
 8020e3c:	6013      	str	r3, [r2, #0]
 8020e3e:	e729      	b.n	8020c94 <__gethex+0x114>
 8020e40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e42:	2b00      	cmp	r3, #0
 8020e44:	d1f3      	bne.n	8020e2e <__gethex+0x2ae>
 8020e46:	e7df      	b.n	8020e08 <__gethex+0x288>
 8020e48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e4a:	2b00      	cmp	r3, #0
 8020e4c:	d1dc      	bne.n	8020e08 <__gethex+0x288>
 8020e4e:	e7ee      	b.n	8020e2e <__gethex+0x2ae>
 8020e50:	0802525c 	.word	0x0802525c
 8020e54:	08025469 	.word	0x08025469
 8020e58:	0802547a 	.word	0x0802547a
 8020e5c:	1e77      	subs	r7, r6, #1
 8020e5e:	2c00      	cmp	r4, #0
 8020e60:	d12f      	bne.n	8020ec2 <__gethex+0x342>
 8020e62:	2f00      	cmp	r7, #0
 8020e64:	d004      	beq.n	8020e70 <__gethex+0x2f0>
 8020e66:	0039      	movs	r1, r7
 8020e68:	0028      	movs	r0, r5
 8020e6a:	f000 fef0 	bl	8021c4e <__any_on>
 8020e6e:	0004      	movs	r4, r0
 8020e70:	231f      	movs	r3, #31
 8020e72:	117a      	asrs	r2, r7, #5
 8020e74:	401f      	ands	r7, r3
 8020e76:	3b1e      	subs	r3, #30
 8020e78:	40bb      	lsls	r3, r7
 8020e7a:	9902      	ldr	r1, [sp, #8]
 8020e7c:	0092      	lsls	r2, r2, #2
 8020e7e:	5852      	ldr	r2, [r2, r1]
 8020e80:	421a      	tst	r2, r3
 8020e82:	d001      	beq.n	8020e88 <__gethex+0x308>
 8020e84:	2302      	movs	r3, #2
 8020e86:	431c      	orrs	r4, r3
 8020e88:	9b00      	ldr	r3, [sp, #0]
 8020e8a:	0031      	movs	r1, r6
 8020e8c:	1b9b      	subs	r3, r3, r6
 8020e8e:	2602      	movs	r6, #2
 8020e90:	0028      	movs	r0, r5
 8020e92:	9300      	str	r3, [sp, #0]
 8020e94:	f7ff fe0c 	bl	8020ab0 <rshift>
 8020e98:	9b01      	ldr	r3, [sp, #4]
 8020e9a:	685f      	ldr	r7, [r3, #4]
 8020e9c:	2c00      	cmp	r4, #0
 8020e9e:	d03f      	beq.n	8020f20 <__gethex+0x3a0>
 8020ea0:	9b01      	ldr	r3, [sp, #4]
 8020ea2:	68db      	ldr	r3, [r3, #12]
 8020ea4:	2b02      	cmp	r3, #2
 8020ea6:	d010      	beq.n	8020eca <__gethex+0x34a>
 8020ea8:	2b03      	cmp	r3, #3
 8020eaa:	d012      	beq.n	8020ed2 <__gethex+0x352>
 8020eac:	2b01      	cmp	r3, #1
 8020eae:	d106      	bne.n	8020ebe <__gethex+0x33e>
 8020eb0:	07a2      	lsls	r2, r4, #30
 8020eb2:	d504      	bpl.n	8020ebe <__gethex+0x33e>
 8020eb4:	9a02      	ldr	r2, [sp, #8]
 8020eb6:	6812      	ldr	r2, [r2, #0]
 8020eb8:	4314      	orrs	r4, r2
 8020eba:	421c      	tst	r4, r3
 8020ebc:	d10c      	bne.n	8020ed8 <__gethex+0x358>
 8020ebe:	2310      	movs	r3, #16
 8020ec0:	e02d      	b.n	8020f1e <__gethex+0x39e>
 8020ec2:	2401      	movs	r4, #1
 8020ec4:	e7d4      	b.n	8020e70 <__gethex+0x2f0>
 8020ec6:	2601      	movs	r6, #1
 8020ec8:	e7e8      	b.n	8020e9c <__gethex+0x31c>
 8020eca:	2301      	movs	r3, #1
 8020ecc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020ece:	1a9b      	subs	r3, r3, r2
 8020ed0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020ed2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020ed4:	2b00      	cmp	r3, #0
 8020ed6:	d0f2      	beq.n	8020ebe <__gethex+0x33e>
 8020ed8:	692b      	ldr	r3, [r5, #16]
 8020eda:	2000      	movs	r0, #0
 8020edc:	9302      	str	r3, [sp, #8]
 8020ede:	009b      	lsls	r3, r3, #2
 8020ee0:	9304      	str	r3, [sp, #16]
 8020ee2:	002b      	movs	r3, r5
 8020ee4:	9a04      	ldr	r2, [sp, #16]
 8020ee6:	3314      	adds	r3, #20
 8020ee8:	1899      	adds	r1, r3, r2
 8020eea:	681a      	ldr	r2, [r3, #0]
 8020eec:	1c54      	adds	r4, r2, #1
 8020eee:	d01c      	beq.n	8020f2a <__gethex+0x3aa>
 8020ef0:	3201      	adds	r2, #1
 8020ef2:	601a      	str	r2, [r3, #0]
 8020ef4:	002b      	movs	r3, r5
 8020ef6:	3314      	adds	r3, #20
 8020ef8:	2e02      	cmp	r6, #2
 8020efa:	d13f      	bne.n	8020f7c <__gethex+0x3fc>
 8020efc:	9a01      	ldr	r2, [sp, #4]
 8020efe:	9900      	ldr	r1, [sp, #0]
 8020f00:	6812      	ldr	r2, [r2, #0]
 8020f02:	3a01      	subs	r2, #1
 8020f04:	428a      	cmp	r2, r1
 8020f06:	d109      	bne.n	8020f1c <__gethex+0x39c>
 8020f08:	000a      	movs	r2, r1
 8020f0a:	201f      	movs	r0, #31
 8020f0c:	4010      	ands	r0, r2
 8020f0e:	2201      	movs	r2, #1
 8020f10:	4082      	lsls	r2, r0
 8020f12:	1149      	asrs	r1, r1, #5
 8020f14:	0089      	lsls	r1, r1, #2
 8020f16:	58cb      	ldr	r3, [r1, r3]
 8020f18:	4213      	tst	r3, r2
 8020f1a:	d13d      	bne.n	8020f98 <__gethex+0x418>
 8020f1c:	2320      	movs	r3, #32
 8020f1e:	431e      	orrs	r6, r3
 8020f20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020f22:	601d      	str	r5, [r3, #0]
 8020f24:	9b07      	ldr	r3, [sp, #28]
 8020f26:	601f      	str	r7, [r3, #0]
 8020f28:	e6b4      	b.n	8020c94 <__gethex+0x114>
 8020f2a:	c301      	stmia	r3!, {r0}
 8020f2c:	4299      	cmp	r1, r3
 8020f2e:	d8dc      	bhi.n	8020eea <__gethex+0x36a>
 8020f30:	68ab      	ldr	r3, [r5, #8]
 8020f32:	9a02      	ldr	r2, [sp, #8]
 8020f34:	429a      	cmp	r2, r3
 8020f36:	db18      	blt.n	8020f6a <__gethex+0x3ea>
 8020f38:	6869      	ldr	r1, [r5, #4]
 8020f3a:	9803      	ldr	r0, [sp, #12]
 8020f3c:	3101      	adds	r1, #1
 8020f3e:	f000 f9df 	bl	8021300 <_Balloc>
 8020f42:	1e04      	subs	r4, r0, #0
 8020f44:	d104      	bne.n	8020f50 <__gethex+0x3d0>
 8020f46:	0022      	movs	r2, r4
 8020f48:	2184      	movs	r1, #132	@ 0x84
 8020f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8020fc0 <__gethex+0x440>)
 8020f4c:	481d      	ldr	r0, [pc, #116]	@ (8020fc4 <__gethex+0x444>)
 8020f4e:	e6c4      	b.n	8020cda <__gethex+0x15a>
 8020f50:	0029      	movs	r1, r5
 8020f52:	692a      	ldr	r2, [r5, #16]
 8020f54:	310c      	adds	r1, #12
 8020f56:	3202      	adds	r2, #2
 8020f58:	0092      	lsls	r2, r2, #2
 8020f5a:	300c      	adds	r0, #12
 8020f5c:	f7fe fecc 	bl	801fcf8 <memcpy>
 8020f60:	0029      	movs	r1, r5
 8020f62:	9803      	ldr	r0, [sp, #12]
 8020f64:	f000 fa10 	bl	8021388 <_Bfree>
 8020f68:	0025      	movs	r5, r4
 8020f6a:	692b      	ldr	r3, [r5, #16]
 8020f6c:	1c5a      	adds	r2, r3, #1
 8020f6e:	612a      	str	r2, [r5, #16]
 8020f70:	2201      	movs	r2, #1
 8020f72:	3304      	adds	r3, #4
 8020f74:	009b      	lsls	r3, r3, #2
 8020f76:	18eb      	adds	r3, r5, r3
 8020f78:	605a      	str	r2, [r3, #4]
 8020f7a:	e7bb      	b.n	8020ef4 <__gethex+0x374>
 8020f7c:	692a      	ldr	r2, [r5, #16]
 8020f7e:	9902      	ldr	r1, [sp, #8]
 8020f80:	428a      	cmp	r2, r1
 8020f82:	dd0b      	ble.n	8020f9c <__gethex+0x41c>
 8020f84:	2101      	movs	r1, #1
 8020f86:	0028      	movs	r0, r5
 8020f88:	f7ff fd92 	bl	8020ab0 <rshift>
 8020f8c:	9b01      	ldr	r3, [sp, #4]
 8020f8e:	3701      	adds	r7, #1
 8020f90:	689b      	ldr	r3, [r3, #8]
 8020f92:	42bb      	cmp	r3, r7
 8020f94:	da00      	bge.n	8020f98 <__gethex+0x418>
 8020f96:	e6df      	b.n	8020d58 <__gethex+0x1d8>
 8020f98:	2601      	movs	r6, #1
 8020f9a:	e7bf      	b.n	8020f1c <__gethex+0x39c>
 8020f9c:	221f      	movs	r2, #31
 8020f9e:	9c00      	ldr	r4, [sp, #0]
 8020fa0:	9900      	ldr	r1, [sp, #0]
 8020fa2:	4014      	ands	r4, r2
 8020fa4:	4211      	tst	r1, r2
 8020fa6:	d0f7      	beq.n	8020f98 <__gethex+0x418>
 8020fa8:	9a04      	ldr	r2, [sp, #16]
 8020faa:	189b      	adds	r3, r3, r2
 8020fac:	3b04      	subs	r3, #4
 8020fae:	6818      	ldr	r0, [r3, #0]
 8020fb0:	f000 fa9e 	bl	80214f0 <__hi0bits>
 8020fb4:	2320      	movs	r3, #32
 8020fb6:	1b1b      	subs	r3, r3, r4
 8020fb8:	4298      	cmp	r0, r3
 8020fba:	dbe3      	blt.n	8020f84 <__gethex+0x404>
 8020fbc:	e7ec      	b.n	8020f98 <__gethex+0x418>
 8020fbe:	46c0      	nop			@ (mov r8, r8)
 8020fc0:	08025469 	.word	0x08025469
 8020fc4:	0802547a 	.word	0x0802547a

08020fc8 <L_shift>:
 8020fc8:	2308      	movs	r3, #8
 8020fca:	b570      	push	{r4, r5, r6, lr}
 8020fcc:	2520      	movs	r5, #32
 8020fce:	1a9a      	subs	r2, r3, r2
 8020fd0:	0092      	lsls	r2, r2, #2
 8020fd2:	1aad      	subs	r5, r5, r2
 8020fd4:	6843      	ldr	r3, [r0, #4]
 8020fd6:	6804      	ldr	r4, [r0, #0]
 8020fd8:	001e      	movs	r6, r3
 8020fda:	40ae      	lsls	r6, r5
 8020fdc:	40d3      	lsrs	r3, r2
 8020fde:	4334      	orrs	r4, r6
 8020fe0:	6004      	str	r4, [r0, #0]
 8020fe2:	6043      	str	r3, [r0, #4]
 8020fe4:	3004      	adds	r0, #4
 8020fe6:	4288      	cmp	r0, r1
 8020fe8:	d3f4      	bcc.n	8020fd4 <L_shift+0xc>
 8020fea:	bd70      	pop	{r4, r5, r6, pc}

08020fec <__match>:
 8020fec:	b530      	push	{r4, r5, lr}
 8020fee:	6803      	ldr	r3, [r0, #0]
 8020ff0:	780c      	ldrb	r4, [r1, #0]
 8020ff2:	3301      	adds	r3, #1
 8020ff4:	2c00      	cmp	r4, #0
 8020ff6:	d102      	bne.n	8020ffe <__match+0x12>
 8020ff8:	6003      	str	r3, [r0, #0]
 8020ffa:	2001      	movs	r0, #1
 8020ffc:	bd30      	pop	{r4, r5, pc}
 8020ffe:	781a      	ldrb	r2, [r3, #0]
 8021000:	0015      	movs	r5, r2
 8021002:	3d41      	subs	r5, #65	@ 0x41
 8021004:	2d19      	cmp	r5, #25
 8021006:	d800      	bhi.n	802100a <__match+0x1e>
 8021008:	3220      	adds	r2, #32
 802100a:	3101      	adds	r1, #1
 802100c:	42a2      	cmp	r2, r4
 802100e:	d0ef      	beq.n	8020ff0 <__match+0x4>
 8021010:	2000      	movs	r0, #0
 8021012:	e7f3      	b.n	8020ffc <__match+0x10>

08021014 <__hexnan>:
 8021014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021016:	680b      	ldr	r3, [r1, #0]
 8021018:	b08b      	sub	sp, #44	@ 0x2c
 802101a:	9201      	str	r2, [sp, #4]
 802101c:	9901      	ldr	r1, [sp, #4]
 802101e:	115a      	asrs	r2, r3, #5
 8021020:	0092      	lsls	r2, r2, #2
 8021022:	188a      	adds	r2, r1, r2
 8021024:	9202      	str	r2, [sp, #8]
 8021026:	0019      	movs	r1, r3
 8021028:	221f      	movs	r2, #31
 802102a:	4011      	ands	r1, r2
 802102c:	9008      	str	r0, [sp, #32]
 802102e:	9106      	str	r1, [sp, #24]
 8021030:	4213      	tst	r3, r2
 8021032:	d002      	beq.n	802103a <__hexnan+0x26>
 8021034:	9b02      	ldr	r3, [sp, #8]
 8021036:	3304      	adds	r3, #4
 8021038:	9302      	str	r3, [sp, #8]
 802103a:	9b02      	ldr	r3, [sp, #8]
 802103c:	2500      	movs	r5, #0
 802103e:	1f1f      	subs	r7, r3, #4
 8021040:	003e      	movs	r6, r7
 8021042:	003c      	movs	r4, r7
 8021044:	9b08      	ldr	r3, [sp, #32]
 8021046:	603d      	str	r5, [r7, #0]
 8021048:	681b      	ldr	r3, [r3, #0]
 802104a:	9507      	str	r5, [sp, #28]
 802104c:	9305      	str	r3, [sp, #20]
 802104e:	9503      	str	r5, [sp, #12]
 8021050:	9b05      	ldr	r3, [sp, #20]
 8021052:	3301      	adds	r3, #1
 8021054:	9309      	str	r3, [sp, #36]	@ 0x24
 8021056:	9b05      	ldr	r3, [sp, #20]
 8021058:	785b      	ldrb	r3, [r3, #1]
 802105a:	9304      	str	r3, [sp, #16]
 802105c:	2b00      	cmp	r3, #0
 802105e:	d028      	beq.n	80210b2 <__hexnan+0x9e>
 8021060:	9804      	ldr	r0, [sp, #16]
 8021062:	f7ff fd78 	bl	8020b56 <__hexdig_fun>
 8021066:	2800      	cmp	r0, #0
 8021068:	d155      	bne.n	8021116 <__hexnan+0x102>
 802106a:	9b04      	ldr	r3, [sp, #16]
 802106c:	2b20      	cmp	r3, #32
 802106e:	d819      	bhi.n	80210a4 <__hexnan+0x90>
 8021070:	9b03      	ldr	r3, [sp, #12]
 8021072:	9a07      	ldr	r2, [sp, #28]
 8021074:	4293      	cmp	r3, r2
 8021076:	dd12      	ble.n	802109e <__hexnan+0x8a>
 8021078:	42b4      	cmp	r4, r6
 802107a:	d206      	bcs.n	802108a <__hexnan+0x76>
 802107c:	2d07      	cmp	r5, #7
 802107e:	dc04      	bgt.n	802108a <__hexnan+0x76>
 8021080:	002a      	movs	r2, r5
 8021082:	0031      	movs	r1, r6
 8021084:	0020      	movs	r0, r4
 8021086:	f7ff ff9f 	bl	8020fc8 <L_shift>
 802108a:	9b01      	ldr	r3, [sp, #4]
 802108c:	2508      	movs	r5, #8
 802108e:	429c      	cmp	r4, r3
 8021090:	d905      	bls.n	802109e <__hexnan+0x8a>
 8021092:	1f26      	subs	r6, r4, #4
 8021094:	2500      	movs	r5, #0
 8021096:	0034      	movs	r4, r6
 8021098:	9b03      	ldr	r3, [sp, #12]
 802109a:	6035      	str	r5, [r6, #0]
 802109c:	9307      	str	r3, [sp, #28]
 802109e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80210a0:	9305      	str	r3, [sp, #20]
 80210a2:	e7d5      	b.n	8021050 <__hexnan+0x3c>
 80210a4:	9b04      	ldr	r3, [sp, #16]
 80210a6:	2b29      	cmp	r3, #41	@ 0x29
 80210a8:	d15a      	bne.n	8021160 <__hexnan+0x14c>
 80210aa:	9b05      	ldr	r3, [sp, #20]
 80210ac:	9a08      	ldr	r2, [sp, #32]
 80210ae:	3302      	adds	r3, #2
 80210b0:	6013      	str	r3, [r2, #0]
 80210b2:	9b03      	ldr	r3, [sp, #12]
 80210b4:	2b00      	cmp	r3, #0
 80210b6:	d053      	beq.n	8021160 <__hexnan+0x14c>
 80210b8:	42b4      	cmp	r4, r6
 80210ba:	d206      	bcs.n	80210ca <__hexnan+0xb6>
 80210bc:	2d07      	cmp	r5, #7
 80210be:	dc04      	bgt.n	80210ca <__hexnan+0xb6>
 80210c0:	002a      	movs	r2, r5
 80210c2:	0031      	movs	r1, r6
 80210c4:	0020      	movs	r0, r4
 80210c6:	f7ff ff7f 	bl	8020fc8 <L_shift>
 80210ca:	9b01      	ldr	r3, [sp, #4]
 80210cc:	429c      	cmp	r4, r3
 80210ce:	d936      	bls.n	802113e <__hexnan+0x12a>
 80210d0:	001a      	movs	r2, r3
 80210d2:	0023      	movs	r3, r4
 80210d4:	cb02      	ldmia	r3!, {r1}
 80210d6:	c202      	stmia	r2!, {r1}
 80210d8:	429f      	cmp	r7, r3
 80210da:	d2fb      	bcs.n	80210d4 <__hexnan+0xc0>
 80210dc:	9b02      	ldr	r3, [sp, #8]
 80210de:	1c61      	adds	r1, r4, #1
 80210e0:	1eda      	subs	r2, r3, #3
 80210e2:	2304      	movs	r3, #4
 80210e4:	4291      	cmp	r1, r2
 80210e6:	d805      	bhi.n	80210f4 <__hexnan+0xe0>
 80210e8:	9b02      	ldr	r3, [sp, #8]
 80210ea:	3b04      	subs	r3, #4
 80210ec:	1b1b      	subs	r3, r3, r4
 80210ee:	089b      	lsrs	r3, r3, #2
 80210f0:	3301      	adds	r3, #1
 80210f2:	009b      	lsls	r3, r3, #2
 80210f4:	9a01      	ldr	r2, [sp, #4]
 80210f6:	18d3      	adds	r3, r2, r3
 80210f8:	2200      	movs	r2, #0
 80210fa:	c304      	stmia	r3!, {r2}
 80210fc:	429f      	cmp	r7, r3
 80210fe:	d2fc      	bcs.n	80210fa <__hexnan+0xe6>
 8021100:	683b      	ldr	r3, [r7, #0]
 8021102:	2b00      	cmp	r3, #0
 8021104:	d104      	bne.n	8021110 <__hexnan+0xfc>
 8021106:	9b01      	ldr	r3, [sp, #4]
 8021108:	429f      	cmp	r7, r3
 802110a:	d127      	bne.n	802115c <__hexnan+0x148>
 802110c:	2301      	movs	r3, #1
 802110e:	603b      	str	r3, [r7, #0]
 8021110:	2005      	movs	r0, #5
 8021112:	b00b      	add	sp, #44	@ 0x2c
 8021114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021116:	9b03      	ldr	r3, [sp, #12]
 8021118:	3501      	adds	r5, #1
 802111a:	3301      	adds	r3, #1
 802111c:	9303      	str	r3, [sp, #12]
 802111e:	2d08      	cmp	r5, #8
 8021120:	dd06      	ble.n	8021130 <__hexnan+0x11c>
 8021122:	9b01      	ldr	r3, [sp, #4]
 8021124:	429c      	cmp	r4, r3
 8021126:	d9ba      	bls.n	802109e <__hexnan+0x8a>
 8021128:	2300      	movs	r3, #0
 802112a:	2501      	movs	r5, #1
 802112c:	3c04      	subs	r4, #4
 802112e:	6023      	str	r3, [r4, #0]
 8021130:	220f      	movs	r2, #15
 8021132:	6823      	ldr	r3, [r4, #0]
 8021134:	4010      	ands	r0, r2
 8021136:	011b      	lsls	r3, r3, #4
 8021138:	4303      	orrs	r3, r0
 802113a:	6023      	str	r3, [r4, #0]
 802113c:	e7af      	b.n	802109e <__hexnan+0x8a>
 802113e:	9b06      	ldr	r3, [sp, #24]
 8021140:	2b00      	cmp	r3, #0
 8021142:	d0dd      	beq.n	8021100 <__hexnan+0xec>
 8021144:	2320      	movs	r3, #32
 8021146:	9a06      	ldr	r2, [sp, #24]
 8021148:	9902      	ldr	r1, [sp, #8]
 802114a:	1a9b      	subs	r3, r3, r2
 802114c:	2201      	movs	r2, #1
 802114e:	4252      	negs	r2, r2
 8021150:	40da      	lsrs	r2, r3
 8021152:	3904      	subs	r1, #4
 8021154:	680b      	ldr	r3, [r1, #0]
 8021156:	4013      	ands	r3, r2
 8021158:	600b      	str	r3, [r1, #0]
 802115a:	e7d1      	b.n	8021100 <__hexnan+0xec>
 802115c:	3f04      	subs	r7, #4
 802115e:	e7cf      	b.n	8021100 <__hexnan+0xec>
 8021160:	2004      	movs	r0, #4
 8021162:	e7d6      	b.n	8021112 <__hexnan+0xfe>

08021164 <malloc>:
 8021164:	b510      	push	{r4, lr}
 8021166:	4b03      	ldr	r3, [pc, #12]	@ (8021174 <malloc+0x10>)
 8021168:	0001      	movs	r1, r0
 802116a:	6818      	ldr	r0, [r3, #0]
 802116c:	f000 f826 	bl	80211bc <_malloc_r>
 8021170:	bd10      	pop	{r4, pc}
 8021172:	46c0      	nop			@ (mov r8, r8)
 8021174:	200003cc 	.word	0x200003cc

08021178 <sbrk_aligned>:
 8021178:	b570      	push	{r4, r5, r6, lr}
 802117a:	4e0f      	ldr	r6, [pc, #60]	@ (80211b8 <sbrk_aligned+0x40>)
 802117c:	000d      	movs	r5, r1
 802117e:	6831      	ldr	r1, [r6, #0]
 8021180:	0004      	movs	r4, r0
 8021182:	2900      	cmp	r1, #0
 8021184:	d102      	bne.n	802118c <sbrk_aligned+0x14>
 8021186:	f001 f989 	bl	802249c <_sbrk_r>
 802118a:	6030      	str	r0, [r6, #0]
 802118c:	0029      	movs	r1, r5
 802118e:	0020      	movs	r0, r4
 8021190:	f001 f984 	bl	802249c <_sbrk_r>
 8021194:	1c43      	adds	r3, r0, #1
 8021196:	d103      	bne.n	80211a0 <sbrk_aligned+0x28>
 8021198:	2501      	movs	r5, #1
 802119a:	426d      	negs	r5, r5
 802119c:	0028      	movs	r0, r5
 802119e:	bd70      	pop	{r4, r5, r6, pc}
 80211a0:	2303      	movs	r3, #3
 80211a2:	1cc5      	adds	r5, r0, #3
 80211a4:	439d      	bics	r5, r3
 80211a6:	42a8      	cmp	r0, r5
 80211a8:	d0f8      	beq.n	802119c <sbrk_aligned+0x24>
 80211aa:	1a29      	subs	r1, r5, r0
 80211ac:	0020      	movs	r0, r4
 80211ae:	f001 f975 	bl	802249c <_sbrk_r>
 80211b2:	3001      	adds	r0, #1
 80211b4:	d1f2      	bne.n	802119c <sbrk_aligned+0x24>
 80211b6:	e7ef      	b.n	8021198 <sbrk_aligned+0x20>
 80211b8:	2000399c 	.word	0x2000399c

080211bc <_malloc_r>:
 80211bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80211be:	2203      	movs	r2, #3
 80211c0:	1ccb      	adds	r3, r1, #3
 80211c2:	4393      	bics	r3, r2
 80211c4:	3308      	adds	r3, #8
 80211c6:	0005      	movs	r5, r0
 80211c8:	001f      	movs	r7, r3
 80211ca:	2b0c      	cmp	r3, #12
 80211cc:	d234      	bcs.n	8021238 <_malloc_r+0x7c>
 80211ce:	270c      	movs	r7, #12
 80211d0:	42b9      	cmp	r1, r7
 80211d2:	d833      	bhi.n	802123c <_malloc_r+0x80>
 80211d4:	0028      	movs	r0, r5
 80211d6:	f000 f883 	bl	80212e0 <__malloc_lock>
 80211da:	4e37      	ldr	r6, [pc, #220]	@ (80212b8 <_malloc_r+0xfc>)
 80211dc:	6833      	ldr	r3, [r6, #0]
 80211de:	001c      	movs	r4, r3
 80211e0:	2c00      	cmp	r4, #0
 80211e2:	d12f      	bne.n	8021244 <_malloc_r+0x88>
 80211e4:	0039      	movs	r1, r7
 80211e6:	0028      	movs	r0, r5
 80211e8:	f7ff ffc6 	bl	8021178 <sbrk_aligned>
 80211ec:	0004      	movs	r4, r0
 80211ee:	1c43      	adds	r3, r0, #1
 80211f0:	d15f      	bne.n	80212b2 <_malloc_r+0xf6>
 80211f2:	6834      	ldr	r4, [r6, #0]
 80211f4:	9400      	str	r4, [sp, #0]
 80211f6:	9b00      	ldr	r3, [sp, #0]
 80211f8:	2b00      	cmp	r3, #0
 80211fa:	d14a      	bne.n	8021292 <_malloc_r+0xd6>
 80211fc:	2c00      	cmp	r4, #0
 80211fe:	d052      	beq.n	80212a6 <_malloc_r+0xea>
 8021200:	6823      	ldr	r3, [r4, #0]
 8021202:	0028      	movs	r0, r5
 8021204:	18e3      	adds	r3, r4, r3
 8021206:	9900      	ldr	r1, [sp, #0]
 8021208:	9301      	str	r3, [sp, #4]
 802120a:	f001 f947 	bl	802249c <_sbrk_r>
 802120e:	9b01      	ldr	r3, [sp, #4]
 8021210:	4283      	cmp	r3, r0
 8021212:	d148      	bne.n	80212a6 <_malloc_r+0xea>
 8021214:	6823      	ldr	r3, [r4, #0]
 8021216:	0028      	movs	r0, r5
 8021218:	1aff      	subs	r7, r7, r3
 802121a:	0039      	movs	r1, r7
 802121c:	f7ff ffac 	bl	8021178 <sbrk_aligned>
 8021220:	3001      	adds	r0, #1
 8021222:	d040      	beq.n	80212a6 <_malloc_r+0xea>
 8021224:	6823      	ldr	r3, [r4, #0]
 8021226:	19db      	adds	r3, r3, r7
 8021228:	6023      	str	r3, [r4, #0]
 802122a:	6833      	ldr	r3, [r6, #0]
 802122c:	685a      	ldr	r2, [r3, #4]
 802122e:	2a00      	cmp	r2, #0
 8021230:	d133      	bne.n	802129a <_malloc_r+0xde>
 8021232:	9b00      	ldr	r3, [sp, #0]
 8021234:	6033      	str	r3, [r6, #0]
 8021236:	e019      	b.n	802126c <_malloc_r+0xb0>
 8021238:	2b00      	cmp	r3, #0
 802123a:	dac9      	bge.n	80211d0 <_malloc_r+0x14>
 802123c:	230c      	movs	r3, #12
 802123e:	602b      	str	r3, [r5, #0]
 8021240:	2000      	movs	r0, #0
 8021242:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021244:	6821      	ldr	r1, [r4, #0]
 8021246:	1bc9      	subs	r1, r1, r7
 8021248:	d420      	bmi.n	802128c <_malloc_r+0xd0>
 802124a:	290b      	cmp	r1, #11
 802124c:	d90a      	bls.n	8021264 <_malloc_r+0xa8>
 802124e:	19e2      	adds	r2, r4, r7
 8021250:	6027      	str	r7, [r4, #0]
 8021252:	42a3      	cmp	r3, r4
 8021254:	d104      	bne.n	8021260 <_malloc_r+0xa4>
 8021256:	6032      	str	r2, [r6, #0]
 8021258:	6863      	ldr	r3, [r4, #4]
 802125a:	6011      	str	r1, [r2, #0]
 802125c:	6053      	str	r3, [r2, #4]
 802125e:	e005      	b.n	802126c <_malloc_r+0xb0>
 8021260:	605a      	str	r2, [r3, #4]
 8021262:	e7f9      	b.n	8021258 <_malloc_r+0x9c>
 8021264:	6862      	ldr	r2, [r4, #4]
 8021266:	42a3      	cmp	r3, r4
 8021268:	d10e      	bne.n	8021288 <_malloc_r+0xcc>
 802126a:	6032      	str	r2, [r6, #0]
 802126c:	0028      	movs	r0, r5
 802126e:	f000 f83f 	bl	80212f0 <__malloc_unlock>
 8021272:	0020      	movs	r0, r4
 8021274:	2207      	movs	r2, #7
 8021276:	300b      	adds	r0, #11
 8021278:	1d23      	adds	r3, r4, #4
 802127a:	4390      	bics	r0, r2
 802127c:	1ac2      	subs	r2, r0, r3
 802127e:	4298      	cmp	r0, r3
 8021280:	d0df      	beq.n	8021242 <_malloc_r+0x86>
 8021282:	1a1b      	subs	r3, r3, r0
 8021284:	50a3      	str	r3, [r4, r2]
 8021286:	e7dc      	b.n	8021242 <_malloc_r+0x86>
 8021288:	605a      	str	r2, [r3, #4]
 802128a:	e7ef      	b.n	802126c <_malloc_r+0xb0>
 802128c:	0023      	movs	r3, r4
 802128e:	6864      	ldr	r4, [r4, #4]
 8021290:	e7a6      	b.n	80211e0 <_malloc_r+0x24>
 8021292:	9c00      	ldr	r4, [sp, #0]
 8021294:	6863      	ldr	r3, [r4, #4]
 8021296:	9300      	str	r3, [sp, #0]
 8021298:	e7ad      	b.n	80211f6 <_malloc_r+0x3a>
 802129a:	001a      	movs	r2, r3
 802129c:	685b      	ldr	r3, [r3, #4]
 802129e:	42a3      	cmp	r3, r4
 80212a0:	d1fb      	bne.n	802129a <_malloc_r+0xde>
 80212a2:	2300      	movs	r3, #0
 80212a4:	e7da      	b.n	802125c <_malloc_r+0xa0>
 80212a6:	230c      	movs	r3, #12
 80212a8:	0028      	movs	r0, r5
 80212aa:	602b      	str	r3, [r5, #0]
 80212ac:	f000 f820 	bl	80212f0 <__malloc_unlock>
 80212b0:	e7c6      	b.n	8021240 <_malloc_r+0x84>
 80212b2:	6007      	str	r7, [r0, #0]
 80212b4:	e7da      	b.n	802126c <_malloc_r+0xb0>
 80212b6:	46c0      	nop			@ (mov r8, r8)
 80212b8:	200039a0 	.word	0x200039a0

080212bc <__ascii_mbtowc>:
 80212bc:	b082      	sub	sp, #8
 80212be:	2900      	cmp	r1, #0
 80212c0:	d100      	bne.n	80212c4 <__ascii_mbtowc+0x8>
 80212c2:	a901      	add	r1, sp, #4
 80212c4:	1e10      	subs	r0, r2, #0
 80212c6:	d006      	beq.n	80212d6 <__ascii_mbtowc+0x1a>
 80212c8:	2b00      	cmp	r3, #0
 80212ca:	d006      	beq.n	80212da <__ascii_mbtowc+0x1e>
 80212cc:	7813      	ldrb	r3, [r2, #0]
 80212ce:	600b      	str	r3, [r1, #0]
 80212d0:	7810      	ldrb	r0, [r2, #0]
 80212d2:	1e43      	subs	r3, r0, #1
 80212d4:	4198      	sbcs	r0, r3
 80212d6:	b002      	add	sp, #8
 80212d8:	4770      	bx	lr
 80212da:	2002      	movs	r0, #2
 80212dc:	4240      	negs	r0, r0
 80212de:	e7fa      	b.n	80212d6 <__ascii_mbtowc+0x1a>

080212e0 <__malloc_lock>:
 80212e0:	b510      	push	{r4, lr}
 80212e2:	4802      	ldr	r0, [pc, #8]	@ (80212ec <__malloc_lock+0xc>)
 80212e4:	f7fe fcfb 	bl	801fcde <__retarget_lock_acquire_recursive>
 80212e8:	bd10      	pop	{r4, pc}
 80212ea:	46c0      	nop			@ (mov r8, r8)
 80212ec:	20003998 	.word	0x20003998

080212f0 <__malloc_unlock>:
 80212f0:	b510      	push	{r4, lr}
 80212f2:	4802      	ldr	r0, [pc, #8]	@ (80212fc <__malloc_unlock+0xc>)
 80212f4:	f7fe fcf4 	bl	801fce0 <__retarget_lock_release_recursive>
 80212f8:	bd10      	pop	{r4, pc}
 80212fa:	46c0      	nop			@ (mov r8, r8)
 80212fc:	20003998 	.word	0x20003998

08021300 <_Balloc>:
 8021300:	b570      	push	{r4, r5, r6, lr}
 8021302:	69c5      	ldr	r5, [r0, #28]
 8021304:	0006      	movs	r6, r0
 8021306:	000c      	movs	r4, r1
 8021308:	2d00      	cmp	r5, #0
 802130a:	d10e      	bne.n	802132a <_Balloc+0x2a>
 802130c:	2010      	movs	r0, #16
 802130e:	f7ff ff29 	bl	8021164 <malloc>
 8021312:	1e02      	subs	r2, r0, #0
 8021314:	61f0      	str	r0, [r6, #28]
 8021316:	d104      	bne.n	8021322 <_Balloc+0x22>
 8021318:	216b      	movs	r1, #107	@ 0x6b
 802131a:	4b19      	ldr	r3, [pc, #100]	@ (8021380 <_Balloc+0x80>)
 802131c:	4819      	ldr	r0, [pc, #100]	@ (8021384 <_Balloc+0x84>)
 802131e:	f001 f8cf 	bl	80224c0 <__assert_func>
 8021322:	6045      	str	r5, [r0, #4]
 8021324:	6085      	str	r5, [r0, #8]
 8021326:	6005      	str	r5, [r0, #0]
 8021328:	60c5      	str	r5, [r0, #12]
 802132a:	69f5      	ldr	r5, [r6, #28]
 802132c:	68eb      	ldr	r3, [r5, #12]
 802132e:	2b00      	cmp	r3, #0
 8021330:	d013      	beq.n	802135a <_Balloc+0x5a>
 8021332:	69f3      	ldr	r3, [r6, #28]
 8021334:	00a2      	lsls	r2, r4, #2
 8021336:	68db      	ldr	r3, [r3, #12]
 8021338:	189b      	adds	r3, r3, r2
 802133a:	6818      	ldr	r0, [r3, #0]
 802133c:	2800      	cmp	r0, #0
 802133e:	d118      	bne.n	8021372 <_Balloc+0x72>
 8021340:	2101      	movs	r1, #1
 8021342:	000d      	movs	r5, r1
 8021344:	40a5      	lsls	r5, r4
 8021346:	1d6a      	adds	r2, r5, #5
 8021348:	0030      	movs	r0, r6
 802134a:	0092      	lsls	r2, r2, #2
 802134c:	f001 f8d6 	bl	80224fc <_calloc_r>
 8021350:	2800      	cmp	r0, #0
 8021352:	d00c      	beq.n	802136e <_Balloc+0x6e>
 8021354:	6044      	str	r4, [r0, #4]
 8021356:	6085      	str	r5, [r0, #8]
 8021358:	e00d      	b.n	8021376 <_Balloc+0x76>
 802135a:	2221      	movs	r2, #33	@ 0x21
 802135c:	2104      	movs	r1, #4
 802135e:	0030      	movs	r0, r6
 8021360:	f001 f8cc 	bl	80224fc <_calloc_r>
 8021364:	69f3      	ldr	r3, [r6, #28]
 8021366:	60e8      	str	r0, [r5, #12]
 8021368:	68db      	ldr	r3, [r3, #12]
 802136a:	2b00      	cmp	r3, #0
 802136c:	d1e1      	bne.n	8021332 <_Balloc+0x32>
 802136e:	2000      	movs	r0, #0
 8021370:	bd70      	pop	{r4, r5, r6, pc}
 8021372:	6802      	ldr	r2, [r0, #0]
 8021374:	601a      	str	r2, [r3, #0]
 8021376:	2300      	movs	r3, #0
 8021378:	6103      	str	r3, [r0, #16]
 802137a:	60c3      	str	r3, [r0, #12]
 802137c:	e7f8      	b.n	8021370 <_Balloc+0x70>
 802137e:	46c0      	nop			@ (mov r8, r8)
 8021380:	080253fa 	.word	0x080253fa
 8021384:	080254da 	.word	0x080254da

08021388 <_Bfree>:
 8021388:	b570      	push	{r4, r5, r6, lr}
 802138a:	69c6      	ldr	r6, [r0, #28]
 802138c:	0005      	movs	r5, r0
 802138e:	000c      	movs	r4, r1
 8021390:	2e00      	cmp	r6, #0
 8021392:	d10e      	bne.n	80213b2 <_Bfree+0x2a>
 8021394:	2010      	movs	r0, #16
 8021396:	f7ff fee5 	bl	8021164 <malloc>
 802139a:	1e02      	subs	r2, r0, #0
 802139c:	61e8      	str	r0, [r5, #28]
 802139e:	d104      	bne.n	80213aa <_Bfree+0x22>
 80213a0:	218f      	movs	r1, #143	@ 0x8f
 80213a2:	4b09      	ldr	r3, [pc, #36]	@ (80213c8 <_Bfree+0x40>)
 80213a4:	4809      	ldr	r0, [pc, #36]	@ (80213cc <_Bfree+0x44>)
 80213a6:	f001 f88b 	bl	80224c0 <__assert_func>
 80213aa:	6046      	str	r6, [r0, #4]
 80213ac:	6086      	str	r6, [r0, #8]
 80213ae:	6006      	str	r6, [r0, #0]
 80213b0:	60c6      	str	r6, [r0, #12]
 80213b2:	2c00      	cmp	r4, #0
 80213b4:	d007      	beq.n	80213c6 <_Bfree+0x3e>
 80213b6:	69eb      	ldr	r3, [r5, #28]
 80213b8:	6862      	ldr	r2, [r4, #4]
 80213ba:	68db      	ldr	r3, [r3, #12]
 80213bc:	0092      	lsls	r2, r2, #2
 80213be:	189b      	adds	r3, r3, r2
 80213c0:	681a      	ldr	r2, [r3, #0]
 80213c2:	6022      	str	r2, [r4, #0]
 80213c4:	601c      	str	r4, [r3, #0]
 80213c6:	bd70      	pop	{r4, r5, r6, pc}
 80213c8:	080253fa 	.word	0x080253fa
 80213cc:	080254da 	.word	0x080254da

080213d0 <__multadd>:
 80213d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80213d2:	000f      	movs	r7, r1
 80213d4:	9001      	str	r0, [sp, #4]
 80213d6:	000c      	movs	r4, r1
 80213d8:	001e      	movs	r6, r3
 80213da:	2000      	movs	r0, #0
 80213dc:	690d      	ldr	r5, [r1, #16]
 80213de:	3714      	adds	r7, #20
 80213e0:	683b      	ldr	r3, [r7, #0]
 80213e2:	3001      	adds	r0, #1
 80213e4:	b299      	uxth	r1, r3
 80213e6:	4351      	muls	r1, r2
 80213e8:	0c1b      	lsrs	r3, r3, #16
 80213ea:	4353      	muls	r3, r2
 80213ec:	1989      	adds	r1, r1, r6
 80213ee:	0c0e      	lsrs	r6, r1, #16
 80213f0:	199b      	adds	r3, r3, r6
 80213f2:	0c1e      	lsrs	r6, r3, #16
 80213f4:	b289      	uxth	r1, r1
 80213f6:	041b      	lsls	r3, r3, #16
 80213f8:	185b      	adds	r3, r3, r1
 80213fa:	c708      	stmia	r7!, {r3}
 80213fc:	4285      	cmp	r5, r0
 80213fe:	dcef      	bgt.n	80213e0 <__multadd+0x10>
 8021400:	2e00      	cmp	r6, #0
 8021402:	d022      	beq.n	802144a <__multadd+0x7a>
 8021404:	68a3      	ldr	r3, [r4, #8]
 8021406:	42ab      	cmp	r3, r5
 8021408:	dc19      	bgt.n	802143e <__multadd+0x6e>
 802140a:	6861      	ldr	r1, [r4, #4]
 802140c:	9801      	ldr	r0, [sp, #4]
 802140e:	3101      	adds	r1, #1
 8021410:	f7ff ff76 	bl	8021300 <_Balloc>
 8021414:	1e07      	subs	r7, r0, #0
 8021416:	d105      	bne.n	8021424 <__multadd+0x54>
 8021418:	003a      	movs	r2, r7
 802141a:	21ba      	movs	r1, #186	@ 0xba
 802141c:	4b0c      	ldr	r3, [pc, #48]	@ (8021450 <__multadd+0x80>)
 802141e:	480d      	ldr	r0, [pc, #52]	@ (8021454 <__multadd+0x84>)
 8021420:	f001 f84e 	bl	80224c0 <__assert_func>
 8021424:	0021      	movs	r1, r4
 8021426:	6922      	ldr	r2, [r4, #16]
 8021428:	310c      	adds	r1, #12
 802142a:	3202      	adds	r2, #2
 802142c:	0092      	lsls	r2, r2, #2
 802142e:	300c      	adds	r0, #12
 8021430:	f7fe fc62 	bl	801fcf8 <memcpy>
 8021434:	0021      	movs	r1, r4
 8021436:	9801      	ldr	r0, [sp, #4]
 8021438:	f7ff ffa6 	bl	8021388 <_Bfree>
 802143c:	003c      	movs	r4, r7
 802143e:	1d2b      	adds	r3, r5, #4
 8021440:	009b      	lsls	r3, r3, #2
 8021442:	18e3      	adds	r3, r4, r3
 8021444:	3501      	adds	r5, #1
 8021446:	605e      	str	r6, [r3, #4]
 8021448:	6125      	str	r5, [r4, #16]
 802144a:	0020      	movs	r0, r4
 802144c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802144e:	46c0      	nop			@ (mov r8, r8)
 8021450:	08025469 	.word	0x08025469
 8021454:	080254da 	.word	0x080254da

08021458 <__s2b>:
 8021458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802145a:	0007      	movs	r7, r0
 802145c:	0018      	movs	r0, r3
 802145e:	000c      	movs	r4, r1
 8021460:	3008      	adds	r0, #8
 8021462:	2109      	movs	r1, #9
 8021464:	9301      	str	r3, [sp, #4]
 8021466:	0015      	movs	r5, r2
 8021468:	f7de ff26 	bl	80002b8 <__divsi3>
 802146c:	2301      	movs	r3, #1
 802146e:	2100      	movs	r1, #0
 8021470:	4283      	cmp	r3, r0
 8021472:	db0a      	blt.n	802148a <__s2b+0x32>
 8021474:	0038      	movs	r0, r7
 8021476:	f7ff ff43 	bl	8021300 <_Balloc>
 802147a:	1e01      	subs	r1, r0, #0
 802147c:	d108      	bne.n	8021490 <__s2b+0x38>
 802147e:	000a      	movs	r2, r1
 8021480:	4b19      	ldr	r3, [pc, #100]	@ (80214e8 <__s2b+0x90>)
 8021482:	481a      	ldr	r0, [pc, #104]	@ (80214ec <__s2b+0x94>)
 8021484:	31d3      	adds	r1, #211	@ 0xd3
 8021486:	f001 f81b 	bl	80224c0 <__assert_func>
 802148a:	005b      	lsls	r3, r3, #1
 802148c:	3101      	adds	r1, #1
 802148e:	e7ef      	b.n	8021470 <__s2b+0x18>
 8021490:	9b08      	ldr	r3, [sp, #32]
 8021492:	6143      	str	r3, [r0, #20]
 8021494:	2301      	movs	r3, #1
 8021496:	6103      	str	r3, [r0, #16]
 8021498:	2d09      	cmp	r5, #9
 802149a:	dd18      	ble.n	80214ce <__s2b+0x76>
 802149c:	0023      	movs	r3, r4
 802149e:	3309      	adds	r3, #9
 80214a0:	001e      	movs	r6, r3
 80214a2:	9300      	str	r3, [sp, #0]
 80214a4:	1964      	adds	r4, r4, r5
 80214a6:	7833      	ldrb	r3, [r6, #0]
 80214a8:	220a      	movs	r2, #10
 80214aa:	0038      	movs	r0, r7
 80214ac:	3b30      	subs	r3, #48	@ 0x30
 80214ae:	f7ff ff8f 	bl	80213d0 <__multadd>
 80214b2:	3601      	adds	r6, #1
 80214b4:	0001      	movs	r1, r0
 80214b6:	42a6      	cmp	r6, r4
 80214b8:	d1f5      	bne.n	80214a6 <__s2b+0x4e>
 80214ba:	002c      	movs	r4, r5
 80214bc:	9b00      	ldr	r3, [sp, #0]
 80214be:	3c08      	subs	r4, #8
 80214c0:	191c      	adds	r4, r3, r4
 80214c2:	002e      	movs	r6, r5
 80214c4:	9b01      	ldr	r3, [sp, #4]
 80214c6:	429e      	cmp	r6, r3
 80214c8:	db04      	blt.n	80214d4 <__s2b+0x7c>
 80214ca:	0008      	movs	r0, r1
 80214cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80214ce:	2509      	movs	r5, #9
 80214d0:	340a      	adds	r4, #10
 80214d2:	e7f6      	b.n	80214c2 <__s2b+0x6a>
 80214d4:	1b63      	subs	r3, r4, r5
 80214d6:	5d9b      	ldrb	r3, [r3, r6]
 80214d8:	220a      	movs	r2, #10
 80214da:	0038      	movs	r0, r7
 80214dc:	3b30      	subs	r3, #48	@ 0x30
 80214de:	f7ff ff77 	bl	80213d0 <__multadd>
 80214e2:	3601      	adds	r6, #1
 80214e4:	0001      	movs	r1, r0
 80214e6:	e7ed      	b.n	80214c4 <__s2b+0x6c>
 80214e8:	08025469 	.word	0x08025469
 80214ec:	080254da 	.word	0x080254da

080214f0 <__hi0bits>:
 80214f0:	2280      	movs	r2, #128	@ 0x80
 80214f2:	0003      	movs	r3, r0
 80214f4:	0252      	lsls	r2, r2, #9
 80214f6:	2000      	movs	r0, #0
 80214f8:	4293      	cmp	r3, r2
 80214fa:	d201      	bcs.n	8021500 <__hi0bits+0x10>
 80214fc:	041b      	lsls	r3, r3, #16
 80214fe:	3010      	adds	r0, #16
 8021500:	2280      	movs	r2, #128	@ 0x80
 8021502:	0452      	lsls	r2, r2, #17
 8021504:	4293      	cmp	r3, r2
 8021506:	d201      	bcs.n	802150c <__hi0bits+0x1c>
 8021508:	3008      	adds	r0, #8
 802150a:	021b      	lsls	r3, r3, #8
 802150c:	2280      	movs	r2, #128	@ 0x80
 802150e:	0552      	lsls	r2, r2, #21
 8021510:	4293      	cmp	r3, r2
 8021512:	d201      	bcs.n	8021518 <__hi0bits+0x28>
 8021514:	3004      	adds	r0, #4
 8021516:	011b      	lsls	r3, r3, #4
 8021518:	2280      	movs	r2, #128	@ 0x80
 802151a:	05d2      	lsls	r2, r2, #23
 802151c:	4293      	cmp	r3, r2
 802151e:	d201      	bcs.n	8021524 <__hi0bits+0x34>
 8021520:	3002      	adds	r0, #2
 8021522:	009b      	lsls	r3, r3, #2
 8021524:	2b00      	cmp	r3, #0
 8021526:	db03      	blt.n	8021530 <__hi0bits+0x40>
 8021528:	3001      	adds	r0, #1
 802152a:	4213      	tst	r3, r2
 802152c:	d100      	bne.n	8021530 <__hi0bits+0x40>
 802152e:	2020      	movs	r0, #32
 8021530:	4770      	bx	lr

08021532 <__lo0bits>:
 8021532:	6803      	ldr	r3, [r0, #0]
 8021534:	0001      	movs	r1, r0
 8021536:	2207      	movs	r2, #7
 8021538:	0018      	movs	r0, r3
 802153a:	4010      	ands	r0, r2
 802153c:	4213      	tst	r3, r2
 802153e:	d00d      	beq.n	802155c <__lo0bits+0x2a>
 8021540:	3a06      	subs	r2, #6
 8021542:	2000      	movs	r0, #0
 8021544:	4213      	tst	r3, r2
 8021546:	d105      	bne.n	8021554 <__lo0bits+0x22>
 8021548:	3002      	adds	r0, #2
 802154a:	4203      	tst	r3, r0
 802154c:	d003      	beq.n	8021556 <__lo0bits+0x24>
 802154e:	40d3      	lsrs	r3, r2
 8021550:	0010      	movs	r0, r2
 8021552:	600b      	str	r3, [r1, #0]
 8021554:	4770      	bx	lr
 8021556:	089b      	lsrs	r3, r3, #2
 8021558:	600b      	str	r3, [r1, #0]
 802155a:	e7fb      	b.n	8021554 <__lo0bits+0x22>
 802155c:	b29a      	uxth	r2, r3
 802155e:	2a00      	cmp	r2, #0
 8021560:	d101      	bne.n	8021566 <__lo0bits+0x34>
 8021562:	2010      	movs	r0, #16
 8021564:	0c1b      	lsrs	r3, r3, #16
 8021566:	b2da      	uxtb	r2, r3
 8021568:	2a00      	cmp	r2, #0
 802156a:	d101      	bne.n	8021570 <__lo0bits+0x3e>
 802156c:	3008      	adds	r0, #8
 802156e:	0a1b      	lsrs	r3, r3, #8
 8021570:	071a      	lsls	r2, r3, #28
 8021572:	d101      	bne.n	8021578 <__lo0bits+0x46>
 8021574:	3004      	adds	r0, #4
 8021576:	091b      	lsrs	r3, r3, #4
 8021578:	079a      	lsls	r2, r3, #30
 802157a:	d101      	bne.n	8021580 <__lo0bits+0x4e>
 802157c:	3002      	adds	r0, #2
 802157e:	089b      	lsrs	r3, r3, #2
 8021580:	07da      	lsls	r2, r3, #31
 8021582:	d4e9      	bmi.n	8021558 <__lo0bits+0x26>
 8021584:	3001      	adds	r0, #1
 8021586:	085b      	lsrs	r3, r3, #1
 8021588:	d1e6      	bne.n	8021558 <__lo0bits+0x26>
 802158a:	2020      	movs	r0, #32
 802158c:	e7e2      	b.n	8021554 <__lo0bits+0x22>
	...

08021590 <__i2b>:
 8021590:	b510      	push	{r4, lr}
 8021592:	000c      	movs	r4, r1
 8021594:	2101      	movs	r1, #1
 8021596:	f7ff feb3 	bl	8021300 <_Balloc>
 802159a:	2800      	cmp	r0, #0
 802159c:	d107      	bne.n	80215ae <__i2b+0x1e>
 802159e:	2146      	movs	r1, #70	@ 0x46
 80215a0:	4c05      	ldr	r4, [pc, #20]	@ (80215b8 <__i2b+0x28>)
 80215a2:	0002      	movs	r2, r0
 80215a4:	4b05      	ldr	r3, [pc, #20]	@ (80215bc <__i2b+0x2c>)
 80215a6:	0020      	movs	r0, r4
 80215a8:	31ff      	adds	r1, #255	@ 0xff
 80215aa:	f000 ff89 	bl	80224c0 <__assert_func>
 80215ae:	2301      	movs	r3, #1
 80215b0:	6144      	str	r4, [r0, #20]
 80215b2:	6103      	str	r3, [r0, #16]
 80215b4:	bd10      	pop	{r4, pc}
 80215b6:	46c0      	nop			@ (mov r8, r8)
 80215b8:	080254da 	.word	0x080254da
 80215bc:	08025469 	.word	0x08025469

080215c0 <__multiply>:
 80215c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80215c2:	0014      	movs	r4, r2
 80215c4:	690a      	ldr	r2, [r1, #16]
 80215c6:	6923      	ldr	r3, [r4, #16]
 80215c8:	000d      	movs	r5, r1
 80215ca:	b08b      	sub	sp, #44	@ 0x2c
 80215cc:	429a      	cmp	r2, r3
 80215ce:	db02      	blt.n	80215d6 <__multiply+0x16>
 80215d0:	0023      	movs	r3, r4
 80215d2:	000c      	movs	r4, r1
 80215d4:	001d      	movs	r5, r3
 80215d6:	6927      	ldr	r7, [r4, #16]
 80215d8:	692e      	ldr	r6, [r5, #16]
 80215da:	6861      	ldr	r1, [r4, #4]
 80215dc:	19bb      	adds	r3, r7, r6
 80215de:	9303      	str	r3, [sp, #12]
 80215e0:	68a3      	ldr	r3, [r4, #8]
 80215e2:	19ba      	adds	r2, r7, r6
 80215e4:	4293      	cmp	r3, r2
 80215e6:	da00      	bge.n	80215ea <__multiply+0x2a>
 80215e8:	3101      	adds	r1, #1
 80215ea:	f7ff fe89 	bl	8021300 <_Balloc>
 80215ee:	9002      	str	r0, [sp, #8]
 80215f0:	2800      	cmp	r0, #0
 80215f2:	d106      	bne.n	8021602 <__multiply+0x42>
 80215f4:	21b1      	movs	r1, #177	@ 0xb1
 80215f6:	4b49      	ldr	r3, [pc, #292]	@ (802171c <__multiply+0x15c>)
 80215f8:	4849      	ldr	r0, [pc, #292]	@ (8021720 <__multiply+0x160>)
 80215fa:	9a02      	ldr	r2, [sp, #8]
 80215fc:	0049      	lsls	r1, r1, #1
 80215fe:	f000 ff5f 	bl	80224c0 <__assert_func>
 8021602:	9b02      	ldr	r3, [sp, #8]
 8021604:	2200      	movs	r2, #0
 8021606:	3314      	adds	r3, #20
 8021608:	469c      	mov	ip, r3
 802160a:	19bb      	adds	r3, r7, r6
 802160c:	009b      	lsls	r3, r3, #2
 802160e:	4463      	add	r3, ip
 8021610:	9304      	str	r3, [sp, #16]
 8021612:	4663      	mov	r3, ip
 8021614:	9904      	ldr	r1, [sp, #16]
 8021616:	428b      	cmp	r3, r1
 8021618:	d32a      	bcc.n	8021670 <__multiply+0xb0>
 802161a:	0023      	movs	r3, r4
 802161c:	00bf      	lsls	r7, r7, #2
 802161e:	3314      	adds	r3, #20
 8021620:	3514      	adds	r5, #20
 8021622:	9308      	str	r3, [sp, #32]
 8021624:	00b6      	lsls	r6, r6, #2
 8021626:	19db      	adds	r3, r3, r7
 8021628:	9305      	str	r3, [sp, #20]
 802162a:	19ab      	adds	r3, r5, r6
 802162c:	9309      	str	r3, [sp, #36]	@ 0x24
 802162e:	2304      	movs	r3, #4
 8021630:	9306      	str	r3, [sp, #24]
 8021632:	0023      	movs	r3, r4
 8021634:	9a05      	ldr	r2, [sp, #20]
 8021636:	3315      	adds	r3, #21
 8021638:	9501      	str	r5, [sp, #4]
 802163a:	429a      	cmp	r2, r3
 802163c:	d305      	bcc.n	802164a <__multiply+0x8a>
 802163e:	1b13      	subs	r3, r2, r4
 8021640:	3b15      	subs	r3, #21
 8021642:	089b      	lsrs	r3, r3, #2
 8021644:	3301      	adds	r3, #1
 8021646:	009b      	lsls	r3, r3, #2
 8021648:	9306      	str	r3, [sp, #24]
 802164a:	9b01      	ldr	r3, [sp, #4]
 802164c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802164e:	4293      	cmp	r3, r2
 8021650:	d310      	bcc.n	8021674 <__multiply+0xb4>
 8021652:	9b03      	ldr	r3, [sp, #12]
 8021654:	2b00      	cmp	r3, #0
 8021656:	dd05      	ble.n	8021664 <__multiply+0xa4>
 8021658:	9b04      	ldr	r3, [sp, #16]
 802165a:	3b04      	subs	r3, #4
 802165c:	9304      	str	r3, [sp, #16]
 802165e:	681b      	ldr	r3, [r3, #0]
 8021660:	2b00      	cmp	r3, #0
 8021662:	d056      	beq.n	8021712 <__multiply+0x152>
 8021664:	9b02      	ldr	r3, [sp, #8]
 8021666:	9a03      	ldr	r2, [sp, #12]
 8021668:	0018      	movs	r0, r3
 802166a:	611a      	str	r2, [r3, #16]
 802166c:	b00b      	add	sp, #44	@ 0x2c
 802166e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021670:	c304      	stmia	r3!, {r2}
 8021672:	e7cf      	b.n	8021614 <__multiply+0x54>
 8021674:	9b01      	ldr	r3, [sp, #4]
 8021676:	6818      	ldr	r0, [r3, #0]
 8021678:	b280      	uxth	r0, r0
 802167a:	2800      	cmp	r0, #0
 802167c:	d01e      	beq.n	80216bc <__multiply+0xfc>
 802167e:	4667      	mov	r7, ip
 8021680:	2500      	movs	r5, #0
 8021682:	9e08      	ldr	r6, [sp, #32]
 8021684:	ce02      	ldmia	r6!, {r1}
 8021686:	683b      	ldr	r3, [r7, #0]
 8021688:	9307      	str	r3, [sp, #28]
 802168a:	b28b      	uxth	r3, r1
 802168c:	4343      	muls	r3, r0
 802168e:	001a      	movs	r2, r3
 8021690:	466b      	mov	r3, sp
 8021692:	0c09      	lsrs	r1, r1, #16
 8021694:	8b9b      	ldrh	r3, [r3, #28]
 8021696:	4341      	muls	r1, r0
 8021698:	18d3      	adds	r3, r2, r3
 802169a:	9a07      	ldr	r2, [sp, #28]
 802169c:	195b      	adds	r3, r3, r5
 802169e:	0c12      	lsrs	r2, r2, #16
 80216a0:	1889      	adds	r1, r1, r2
 80216a2:	0c1a      	lsrs	r2, r3, #16
 80216a4:	188a      	adds	r2, r1, r2
 80216a6:	b29b      	uxth	r3, r3
 80216a8:	0c15      	lsrs	r5, r2, #16
 80216aa:	0412      	lsls	r2, r2, #16
 80216ac:	431a      	orrs	r2, r3
 80216ae:	9b05      	ldr	r3, [sp, #20]
 80216b0:	c704      	stmia	r7!, {r2}
 80216b2:	42b3      	cmp	r3, r6
 80216b4:	d8e6      	bhi.n	8021684 <__multiply+0xc4>
 80216b6:	4663      	mov	r3, ip
 80216b8:	9a06      	ldr	r2, [sp, #24]
 80216ba:	509d      	str	r5, [r3, r2]
 80216bc:	9b01      	ldr	r3, [sp, #4]
 80216be:	6818      	ldr	r0, [r3, #0]
 80216c0:	0c00      	lsrs	r0, r0, #16
 80216c2:	d020      	beq.n	8021706 <__multiply+0x146>
 80216c4:	4663      	mov	r3, ip
 80216c6:	0025      	movs	r5, r4
 80216c8:	4661      	mov	r1, ip
 80216ca:	2700      	movs	r7, #0
 80216cc:	681b      	ldr	r3, [r3, #0]
 80216ce:	3514      	adds	r5, #20
 80216d0:	682a      	ldr	r2, [r5, #0]
 80216d2:	680e      	ldr	r6, [r1, #0]
 80216d4:	b292      	uxth	r2, r2
 80216d6:	4342      	muls	r2, r0
 80216d8:	0c36      	lsrs	r6, r6, #16
 80216da:	1992      	adds	r2, r2, r6
 80216dc:	19d2      	adds	r2, r2, r7
 80216de:	0416      	lsls	r6, r2, #16
 80216e0:	b29b      	uxth	r3, r3
 80216e2:	431e      	orrs	r6, r3
 80216e4:	600e      	str	r6, [r1, #0]
 80216e6:	cd40      	ldmia	r5!, {r6}
 80216e8:	684b      	ldr	r3, [r1, #4]
 80216ea:	0c36      	lsrs	r6, r6, #16
 80216ec:	4346      	muls	r6, r0
 80216ee:	b29b      	uxth	r3, r3
 80216f0:	0c12      	lsrs	r2, r2, #16
 80216f2:	18f3      	adds	r3, r6, r3
 80216f4:	189b      	adds	r3, r3, r2
 80216f6:	9a05      	ldr	r2, [sp, #20]
 80216f8:	0c1f      	lsrs	r7, r3, #16
 80216fa:	3104      	adds	r1, #4
 80216fc:	42aa      	cmp	r2, r5
 80216fe:	d8e7      	bhi.n	80216d0 <__multiply+0x110>
 8021700:	4662      	mov	r2, ip
 8021702:	9906      	ldr	r1, [sp, #24]
 8021704:	5053      	str	r3, [r2, r1]
 8021706:	9b01      	ldr	r3, [sp, #4]
 8021708:	3304      	adds	r3, #4
 802170a:	9301      	str	r3, [sp, #4]
 802170c:	2304      	movs	r3, #4
 802170e:	449c      	add	ip, r3
 8021710:	e79b      	b.n	802164a <__multiply+0x8a>
 8021712:	9b03      	ldr	r3, [sp, #12]
 8021714:	3b01      	subs	r3, #1
 8021716:	9303      	str	r3, [sp, #12]
 8021718:	e79b      	b.n	8021652 <__multiply+0x92>
 802171a:	46c0      	nop			@ (mov r8, r8)
 802171c:	08025469 	.word	0x08025469
 8021720:	080254da 	.word	0x080254da

08021724 <__pow5mult>:
 8021724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021726:	2303      	movs	r3, #3
 8021728:	0015      	movs	r5, r2
 802172a:	0007      	movs	r7, r0
 802172c:	000e      	movs	r6, r1
 802172e:	401a      	ands	r2, r3
 8021730:	421d      	tst	r5, r3
 8021732:	d008      	beq.n	8021746 <__pow5mult+0x22>
 8021734:	4925      	ldr	r1, [pc, #148]	@ (80217cc <__pow5mult+0xa8>)
 8021736:	3a01      	subs	r2, #1
 8021738:	0092      	lsls	r2, r2, #2
 802173a:	5852      	ldr	r2, [r2, r1]
 802173c:	2300      	movs	r3, #0
 802173e:	0031      	movs	r1, r6
 8021740:	f7ff fe46 	bl	80213d0 <__multadd>
 8021744:	0006      	movs	r6, r0
 8021746:	10ad      	asrs	r5, r5, #2
 8021748:	d03d      	beq.n	80217c6 <__pow5mult+0xa2>
 802174a:	69fc      	ldr	r4, [r7, #28]
 802174c:	2c00      	cmp	r4, #0
 802174e:	d10f      	bne.n	8021770 <__pow5mult+0x4c>
 8021750:	2010      	movs	r0, #16
 8021752:	f7ff fd07 	bl	8021164 <malloc>
 8021756:	1e02      	subs	r2, r0, #0
 8021758:	61f8      	str	r0, [r7, #28]
 802175a:	d105      	bne.n	8021768 <__pow5mult+0x44>
 802175c:	21b4      	movs	r1, #180	@ 0xb4
 802175e:	4b1c      	ldr	r3, [pc, #112]	@ (80217d0 <__pow5mult+0xac>)
 8021760:	481c      	ldr	r0, [pc, #112]	@ (80217d4 <__pow5mult+0xb0>)
 8021762:	31ff      	adds	r1, #255	@ 0xff
 8021764:	f000 feac 	bl	80224c0 <__assert_func>
 8021768:	6044      	str	r4, [r0, #4]
 802176a:	6084      	str	r4, [r0, #8]
 802176c:	6004      	str	r4, [r0, #0]
 802176e:	60c4      	str	r4, [r0, #12]
 8021770:	69fb      	ldr	r3, [r7, #28]
 8021772:	689c      	ldr	r4, [r3, #8]
 8021774:	9301      	str	r3, [sp, #4]
 8021776:	2c00      	cmp	r4, #0
 8021778:	d108      	bne.n	802178c <__pow5mult+0x68>
 802177a:	0038      	movs	r0, r7
 802177c:	4916      	ldr	r1, [pc, #88]	@ (80217d8 <__pow5mult+0xb4>)
 802177e:	f7ff ff07 	bl	8021590 <__i2b>
 8021782:	9b01      	ldr	r3, [sp, #4]
 8021784:	0004      	movs	r4, r0
 8021786:	6098      	str	r0, [r3, #8]
 8021788:	2300      	movs	r3, #0
 802178a:	6003      	str	r3, [r0, #0]
 802178c:	2301      	movs	r3, #1
 802178e:	421d      	tst	r5, r3
 8021790:	d00a      	beq.n	80217a8 <__pow5mult+0x84>
 8021792:	0031      	movs	r1, r6
 8021794:	0022      	movs	r2, r4
 8021796:	0038      	movs	r0, r7
 8021798:	f7ff ff12 	bl	80215c0 <__multiply>
 802179c:	0031      	movs	r1, r6
 802179e:	9001      	str	r0, [sp, #4]
 80217a0:	0038      	movs	r0, r7
 80217a2:	f7ff fdf1 	bl	8021388 <_Bfree>
 80217a6:	9e01      	ldr	r6, [sp, #4]
 80217a8:	106d      	asrs	r5, r5, #1
 80217aa:	d00c      	beq.n	80217c6 <__pow5mult+0xa2>
 80217ac:	6820      	ldr	r0, [r4, #0]
 80217ae:	2800      	cmp	r0, #0
 80217b0:	d107      	bne.n	80217c2 <__pow5mult+0x9e>
 80217b2:	0022      	movs	r2, r4
 80217b4:	0021      	movs	r1, r4
 80217b6:	0038      	movs	r0, r7
 80217b8:	f7ff ff02 	bl	80215c0 <__multiply>
 80217bc:	2300      	movs	r3, #0
 80217be:	6020      	str	r0, [r4, #0]
 80217c0:	6003      	str	r3, [r0, #0]
 80217c2:	0004      	movs	r4, r0
 80217c4:	e7e2      	b.n	802178c <__pow5mult+0x68>
 80217c6:	0030      	movs	r0, r6
 80217c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80217ca:	46c0      	nop			@ (mov r8, r8)
 80217cc:	08025534 	.word	0x08025534
 80217d0:	080253fa 	.word	0x080253fa
 80217d4:	080254da 	.word	0x080254da
 80217d8:	00000271 	.word	0x00000271

080217dc <__lshift>:
 80217dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80217de:	000c      	movs	r4, r1
 80217e0:	0016      	movs	r6, r2
 80217e2:	6923      	ldr	r3, [r4, #16]
 80217e4:	1157      	asrs	r7, r2, #5
 80217e6:	b085      	sub	sp, #20
 80217e8:	18fb      	adds	r3, r7, r3
 80217ea:	9301      	str	r3, [sp, #4]
 80217ec:	3301      	adds	r3, #1
 80217ee:	9300      	str	r3, [sp, #0]
 80217f0:	6849      	ldr	r1, [r1, #4]
 80217f2:	68a3      	ldr	r3, [r4, #8]
 80217f4:	9002      	str	r0, [sp, #8]
 80217f6:	9a00      	ldr	r2, [sp, #0]
 80217f8:	4293      	cmp	r3, r2
 80217fa:	db10      	blt.n	802181e <__lshift+0x42>
 80217fc:	9802      	ldr	r0, [sp, #8]
 80217fe:	f7ff fd7f 	bl	8021300 <_Balloc>
 8021802:	2300      	movs	r3, #0
 8021804:	0001      	movs	r1, r0
 8021806:	0005      	movs	r5, r0
 8021808:	001a      	movs	r2, r3
 802180a:	3114      	adds	r1, #20
 802180c:	4298      	cmp	r0, r3
 802180e:	d10c      	bne.n	802182a <__lshift+0x4e>
 8021810:	21ef      	movs	r1, #239	@ 0xef
 8021812:	002a      	movs	r2, r5
 8021814:	4b25      	ldr	r3, [pc, #148]	@ (80218ac <__lshift+0xd0>)
 8021816:	4826      	ldr	r0, [pc, #152]	@ (80218b0 <__lshift+0xd4>)
 8021818:	0049      	lsls	r1, r1, #1
 802181a:	f000 fe51 	bl	80224c0 <__assert_func>
 802181e:	3101      	adds	r1, #1
 8021820:	005b      	lsls	r3, r3, #1
 8021822:	e7e8      	b.n	80217f6 <__lshift+0x1a>
 8021824:	0098      	lsls	r0, r3, #2
 8021826:	500a      	str	r2, [r1, r0]
 8021828:	3301      	adds	r3, #1
 802182a:	42bb      	cmp	r3, r7
 802182c:	dbfa      	blt.n	8021824 <__lshift+0x48>
 802182e:	43fb      	mvns	r3, r7
 8021830:	17db      	asrs	r3, r3, #31
 8021832:	401f      	ands	r7, r3
 8021834:	00bf      	lsls	r7, r7, #2
 8021836:	0023      	movs	r3, r4
 8021838:	201f      	movs	r0, #31
 802183a:	19c9      	adds	r1, r1, r7
 802183c:	0037      	movs	r7, r6
 802183e:	6922      	ldr	r2, [r4, #16]
 8021840:	3314      	adds	r3, #20
 8021842:	0092      	lsls	r2, r2, #2
 8021844:	189a      	adds	r2, r3, r2
 8021846:	4007      	ands	r7, r0
 8021848:	4206      	tst	r6, r0
 802184a:	d029      	beq.n	80218a0 <__lshift+0xc4>
 802184c:	3001      	adds	r0, #1
 802184e:	1bc0      	subs	r0, r0, r7
 8021850:	9003      	str	r0, [sp, #12]
 8021852:	468c      	mov	ip, r1
 8021854:	2000      	movs	r0, #0
 8021856:	681e      	ldr	r6, [r3, #0]
 8021858:	40be      	lsls	r6, r7
 802185a:	4306      	orrs	r6, r0
 802185c:	4660      	mov	r0, ip
 802185e:	c040      	stmia	r0!, {r6}
 8021860:	4684      	mov	ip, r0
 8021862:	9e03      	ldr	r6, [sp, #12]
 8021864:	cb01      	ldmia	r3!, {r0}
 8021866:	40f0      	lsrs	r0, r6
 8021868:	429a      	cmp	r2, r3
 802186a:	d8f4      	bhi.n	8021856 <__lshift+0x7a>
 802186c:	0026      	movs	r6, r4
 802186e:	3615      	adds	r6, #21
 8021870:	2304      	movs	r3, #4
 8021872:	42b2      	cmp	r2, r6
 8021874:	d304      	bcc.n	8021880 <__lshift+0xa4>
 8021876:	1b13      	subs	r3, r2, r4
 8021878:	3b15      	subs	r3, #21
 802187a:	089b      	lsrs	r3, r3, #2
 802187c:	3301      	adds	r3, #1
 802187e:	009b      	lsls	r3, r3, #2
 8021880:	50c8      	str	r0, [r1, r3]
 8021882:	2800      	cmp	r0, #0
 8021884:	d002      	beq.n	802188c <__lshift+0xb0>
 8021886:	9b01      	ldr	r3, [sp, #4]
 8021888:	3302      	adds	r3, #2
 802188a:	9300      	str	r3, [sp, #0]
 802188c:	9b00      	ldr	r3, [sp, #0]
 802188e:	9802      	ldr	r0, [sp, #8]
 8021890:	3b01      	subs	r3, #1
 8021892:	0021      	movs	r1, r4
 8021894:	612b      	str	r3, [r5, #16]
 8021896:	f7ff fd77 	bl	8021388 <_Bfree>
 802189a:	0028      	movs	r0, r5
 802189c:	b005      	add	sp, #20
 802189e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80218a0:	cb01      	ldmia	r3!, {r0}
 80218a2:	c101      	stmia	r1!, {r0}
 80218a4:	429a      	cmp	r2, r3
 80218a6:	d8fb      	bhi.n	80218a0 <__lshift+0xc4>
 80218a8:	e7f0      	b.n	802188c <__lshift+0xb0>
 80218aa:	46c0      	nop			@ (mov r8, r8)
 80218ac:	08025469 	.word	0x08025469
 80218b0:	080254da 	.word	0x080254da

080218b4 <__mcmp>:
 80218b4:	b530      	push	{r4, r5, lr}
 80218b6:	690b      	ldr	r3, [r1, #16]
 80218b8:	6904      	ldr	r4, [r0, #16]
 80218ba:	0002      	movs	r2, r0
 80218bc:	1ae0      	subs	r0, r4, r3
 80218be:	429c      	cmp	r4, r3
 80218c0:	d10f      	bne.n	80218e2 <__mcmp+0x2e>
 80218c2:	3214      	adds	r2, #20
 80218c4:	009b      	lsls	r3, r3, #2
 80218c6:	3114      	adds	r1, #20
 80218c8:	0014      	movs	r4, r2
 80218ca:	18c9      	adds	r1, r1, r3
 80218cc:	18d2      	adds	r2, r2, r3
 80218ce:	3a04      	subs	r2, #4
 80218d0:	3904      	subs	r1, #4
 80218d2:	6815      	ldr	r5, [r2, #0]
 80218d4:	680b      	ldr	r3, [r1, #0]
 80218d6:	429d      	cmp	r5, r3
 80218d8:	d004      	beq.n	80218e4 <__mcmp+0x30>
 80218da:	2001      	movs	r0, #1
 80218dc:	429d      	cmp	r5, r3
 80218de:	d200      	bcs.n	80218e2 <__mcmp+0x2e>
 80218e0:	3802      	subs	r0, #2
 80218e2:	bd30      	pop	{r4, r5, pc}
 80218e4:	4294      	cmp	r4, r2
 80218e6:	d3f2      	bcc.n	80218ce <__mcmp+0x1a>
 80218e8:	e7fb      	b.n	80218e2 <__mcmp+0x2e>
	...

080218ec <__mdiff>:
 80218ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80218ee:	000c      	movs	r4, r1
 80218f0:	b087      	sub	sp, #28
 80218f2:	9000      	str	r0, [sp, #0]
 80218f4:	0011      	movs	r1, r2
 80218f6:	0020      	movs	r0, r4
 80218f8:	0017      	movs	r7, r2
 80218fa:	f7ff ffdb 	bl	80218b4 <__mcmp>
 80218fe:	1e05      	subs	r5, r0, #0
 8021900:	d110      	bne.n	8021924 <__mdiff+0x38>
 8021902:	0001      	movs	r1, r0
 8021904:	9800      	ldr	r0, [sp, #0]
 8021906:	f7ff fcfb 	bl	8021300 <_Balloc>
 802190a:	1e02      	subs	r2, r0, #0
 802190c:	d104      	bne.n	8021918 <__mdiff+0x2c>
 802190e:	4b40      	ldr	r3, [pc, #256]	@ (8021a10 <__mdiff+0x124>)
 8021910:	4840      	ldr	r0, [pc, #256]	@ (8021a14 <__mdiff+0x128>)
 8021912:	4941      	ldr	r1, [pc, #260]	@ (8021a18 <__mdiff+0x12c>)
 8021914:	f000 fdd4 	bl	80224c0 <__assert_func>
 8021918:	2301      	movs	r3, #1
 802191a:	6145      	str	r5, [r0, #20]
 802191c:	6103      	str	r3, [r0, #16]
 802191e:	0010      	movs	r0, r2
 8021920:	b007      	add	sp, #28
 8021922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021924:	2600      	movs	r6, #0
 8021926:	42b0      	cmp	r0, r6
 8021928:	da03      	bge.n	8021932 <__mdiff+0x46>
 802192a:	0023      	movs	r3, r4
 802192c:	003c      	movs	r4, r7
 802192e:	001f      	movs	r7, r3
 8021930:	3601      	adds	r6, #1
 8021932:	6861      	ldr	r1, [r4, #4]
 8021934:	9800      	ldr	r0, [sp, #0]
 8021936:	f7ff fce3 	bl	8021300 <_Balloc>
 802193a:	1e02      	subs	r2, r0, #0
 802193c:	d103      	bne.n	8021946 <__mdiff+0x5a>
 802193e:	4b34      	ldr	r3, [pc, #208]	@ (8021a10 <__mdiff+0x124>)
 8021940:	4834      	ldr	r0, [pc, #208]	@ (8021a14 <__mdiff+0x128>)
 8021942:	4936      	ldr	r1, [pc, #216]	@ (8021a1c <__mdiff+0x130>)
 8021944:	e7e6      	b.n	8021914 <__mdiff+0x28>
 8021946:	6923      	ldr	r3, [r4, #16]
 8021948:	3414      	adds	r4, #20
 802194a:	9300      	str	r3, [sp, #0]
 802194c:	009b      	lsls	r3, r3, #2
 802194e:	18e3      	adds	r3, r4, r3
 8021950:	0021      	movs	r1, r4
 8021952:	9401      	str	r4, [sp, #4]
 8021954:	003c      	movs	r4, r7
 8021956:	9302      	str	r3, [sp, #8]
 8021958:	693b      	ldr	r3, [r7, #16]
 802195a:	3414      	adds	r4, #20
 802195c:	009b      	lsls	r3, r3, #2
 802195e:	18e3      	adds	r3, r4, r3
 8021960:	9303      	str	r3, [sp, #12]
 8021962:	0003      	movs	r3, r0
 8021964:	60c6      	str	r6, [r0, #12]
 8021966:	468c      	mov	ip, r1
 8021968:	2000      	movs	r0, #0
 802196a:	3314      	adds	r3, #20
 802196c:	9304      	str	r3, [sp, #16]
 802196e:	9305      	str	r3, [sp, #20]
 8021970:	4663      	mov	r3, ip
 8021972:	cb20      	ldmia	r3!, {r5}
 8021974:	b2a9      	uxth	r1, r5
 8021976:	000e      	movs	r6, r1
 8021978:	469c      	mov	ip, r3
 802197a:	cc08      	ldmia	r4!, {r3}
 802197c:	0c2d      	lsrs	r5, r5, #16
 802197e:	b299      	uxth	r1, r3
 8021980:	1a71      	subs	r1, r6, r1
 8021982:	1809      	adds	r1, r1, r0
 8021984:	0c1b      	lsrs	r3, r3, #16
 8021986:	1408      	asrs	r0, r1, #16
 8021988:	1aeb      	subs	r3, r5, r3
 802198a:	181b      	adds	r3, r3, r0
 802198c:	1418      	asrs	r0, r3, #16
 802198e:	b289      	uxth	r1, r1
 8021990:	041b      	lsls	r3, r3, #16
 8021992:	4319      	orrs	r1, r3
 8021994:	9b05      	ldr	r3, [sp, #20]
 8021996:	c302      	stmia	r3!, {r1}
 8021998:	9305      	str	r3, [sp, #20]
 802199a:	9b03      	ldr	r3, [sp, #12]
 802199c:	42a3      	cmp	r3, r4
 802199e:	d8e7      	bhi.n	8021970 <__mdiff+0x84>
 80219a0:	0039      	movs	r1, r7
 80219a2:	9c03      	ldr	r4, [sp, #12]
 80219a4:	3115      	adds	r1, #21
 80219a6:	2304      	movs	r3, #4
 80219a8:	428c      	cmp	r4, r1
 80219aa:	d304      	bcc.n	80219b6 <__mdiff+0xca>
 80219ac:	1be3      	subs	r3, r4, r7
 80219ae:	3b15      	subs	r3, #21
 80219b0:	089b      	lsrs	r3, r3, #2
 80219b2:	3301      	adds	r3, #1
 80219b4:	009b      	lsls	r3, r3, #2
 80219b6:	9901      	ldr	r1, [sp, #4]
 80219b8:	18cd      	adds	r5, r1, r3
 80219ba:	9904      	ldr	r1, [sp, #16]
 80219bc:	002e      	movs	r6, r5
 80219be:	18cb      	adds	r3, r1, r3
 80219c0:	001f      	movs	r7, r3
 80219c2:	9902      	ldr	r1, [sp, #8]
 80219c4:	428e      	cmp	r6, r1
 80219c6:	d311      	bcc.n	80219ec <__mdiff+0x100>
 80219c8:	9c02      	ldr	r4, [sp, #8]
 80219ca:	1ee9      	subs	r1, r5, #3
 80219cc:	2000      	movs	r0, #0
 80219ce:	428c      	cmp	r4, r1
 80219d0:	d304      	bcc.n	80219dc <__mdiff+0xf0>
 80219d2:	0021      	movs	r1, r4
 80219d4:	3103      	adds	r1, #3
 80219d6:	1b49      	subs	r1, r1, r5
 80219d8:	0889      	lsrs	r1, r1, #2
 80219da:	0088      	lsls	r0, r1, #2
 80219dc:	181b      	adds	r3, r3, r0
 80219de:	3b04      	subs	r3, #4
 80219e0:	6819      	ldr	r1, [r3, #0]
 80219e2:	2900      	cmp	r1, #0
 80219e4:	d010      	beq.n	8021a08 <__mdiff+0x11c>
 80219e6:	9b00      	ldr	r3, [sp, #0]
 80219e8:	6113      	str	r3, [r2, #16]
 80219ea:	e798      	b.n	802191e <__mdiff+0x32>
 80219ec:	4684      	mov	ip, r0
 80219ee:	ce02      	ldmia	r6!, {r1}
 80219f0:	b288      	uxth	r0, r1
 80219f2:	4460      	add	r0, ip
 80219f4:	1400      	asrs	r0, r0, #16
 80219f6:	0c0c      	lsrs	r4, r1, #16
 80219f8:	1904      	adds	r4, r0, r4
 80219fa:	4461      	add	r1, ip
 80219fc:	1420      	asrs	r0, r4, #16
 80219fe:	b289      	uxth	r1, r1
 8021a00:	0424      	lsls	r4, r4, #16
 8021a02:	4321      	orrs	r1, r4
 8021a04:	c702      	stmia	r7!, {r1}
 8021a06:	e7dc      	b.n	80219c2 <__mdiff+0xd6>
 8021a08:	9900      	ldr	r1, [sp, #0]
 8021a0a:	3901      	subs	r1, #1
 8021a0c:	9100      	str	r1, [sp, #0]
 8021a0e:	e7e6      	b.n	80219de <__mdiff+0xf2>
 8021a10:	08025469 	.word	0x08025469
 8021a14:	080254da 	.word	0x080254da
 8021a18:	00000237 	.word	0x00000237
 8021a1c:	00000245 	.word	0x00000245

08021a20 <__ulp>:
 8021a20:	b510      	push	{r4, lr}
 8021a22:	2400      	movs	r4, #0
 8021a24:	4b0c      	ldr	r3, [pc, #48]	@ (8021a58 <__ulp+0x38>)
 8021a26:	4a0d      	ldr	r2, [pc, #52]	@ (8021a5c <__ulp+0x3c>)
 8021a28:	400b      	ands	r3, r1
 8021a2a:	189b      	adds	r3, r3, r2
 8021a2c:	42a3      	cmp	r3, r4
 8021a2e:	dc06      	bgt.n	8021a3e <__ulp+0x1e>
 8021a30:	425b      	negs	r3, r3
 8021a32:	151a      	asrs	r2, r3, #20
 8021a34:	2a13      	cmp	r2, #19
 8021a36:	dc05      	bgt.n	8021a44 <__ulp+0x24>
 8021a38:	2380      	movs	r3, #128	@ 0x80
 8021a3a:	031b      	lsls	r3, r3, #12
 8021a3c:	4113      	asrs	r3, r2
 8021a3e:	0019      	movs	r1, r3
 8021a40:	0020      	movs	r0, r4
 8021a42:	bd10      	pop	{r4, pc}
 8021a44:	3a14      	subs	r2, #20
 8021a46:	2401      	movs	r4, #1
 8021a48:	2a1e      	cmp	r2, #30
 8021a4a:	dc02      	bgt.n	8021a52 <__ulp+0x32>
 8021a4c:	2480      	movs	r4, #128	@ 0x80
 8021a4e:	0624      	lsls	r4, r4, #24
 8021a50:	40d4      	lsrs	r4, r2
 8021a52:	2300      	movs	r3, #0
 8021a54:	e7f3      	b.n	8021a3e <__ulp+0x1e>
 8021a56:	46c0      	nop			@ (mov r8, r8)
 8021a58:	7ff00000 	.word	0x7ff00000
 8021a5c:	fcc00000 	.word	0xfcc00000

08021a60 <__b2d>:
 8021a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021a62:	0006      	movs	r6, r0
 8021a64:	6903      	ldr	r3, [r0, #16]
 8021a66:	3614      	adds	r6, #20
 8021a68:	009b      	lsls	r3, r3, #2
 8021a6a:	18f3      	adds	r3, r6, r3
 8021a6c:	1f1d      	subs	r5, r3, #4
 8021a6e:	682c      	ldr	r4, [r5, #0]
 8021a70:	000f      	movs	r7, r1
 8021a72:	0020      	movs	r0, r4
 8021a74:	9301      	str	r3, [sp, #4]
 8021a76:	f7ff fd3b 	bl	80214f0 <__hi0bits>
 8021a7a:	2220      	movs	r2, #32
 8021a7c:	1a12      	subs	r2, r2, r0
 8021a7e:	603a      	str	r2, [r7, #0]
 8021a80:	0003      	movs	r3, r0
 8021a82:	4a1c      	ldr	r2, [pc, #112]	@ (8021af4 <__b2d+0x94>)
 8021a84:	280a      	cmp	r0, #10
 8021a86:	dc15      	bgt.n	8021ab4 <__b2d+0x54>
 8021a88:	210b      	movs	r1, #11
 8021a8a:	0027      	movs	r7, r4
 8021a8c:	1a09      	subs	r1, r1, r0
 8021a8e:	40cf      	lsrs	r7, r1
 8021a90:	433a      	orrs	r2, r7
 8021a92:	468c      	mov	ip, r1
 8021a94:	0011      	movs	r1, r2
 8021a96:	2200      	movs	r2, #0
 8021a98:	42ae      	cmp	r6, r5
 8021a9a:	d202      	bcs.n	8021aa2 <__b2d+0x42>
 8021a9c:	9a01      	ldr	r2, [sp, #4]
 8021a9e:	3a08      	subs	r2, #8
 8021aa0:	6812      	ldr	r2, [r2, #0]
 8021aa2:	3315      	adds	r3, #21
 8021aa4:	409c      	lsls	r4, r3
 8021aa6:	4663      	mov	r3, ip
 8021aa8:	0027      	movs	r7, r4
 8021aaa:	40da      	lsrs	r2, r3
 8021aac:	4317      	orrs	r7, r2
 8021aae:	0038      	movs	r0, r7
 8021ab0:	b003      	add	sp, #12
 8021ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021ab4:	2700      	movs	r7, #0
 8021ab6:	42ae      	cmp	r6, r5
 8021ab8:	d202      	bcs.n	8021ac0 <__b2d+0x60>
 8021aba:	9d01      	ldr	r5, [sp, #4]
 8021abc:	3d08      	subs	r5, #8
 8021abe:	682f      	ldr	r7, [r5, #0]
 8021ac0:	210b      	movs	r1, #11
 8021ac2:	4249      	negs	r1, r1
 8021ac4:	468c      	mov	ip, r1
 8021ac6:	449c      	add	ip, r3
 8021ac8:	2b0b      	cmp	r3, #11
 8021aca:	d010      	beq.n	8021aee <__b2d+0x8e>
 8021acc:	4661      	mov	r1, ip
 8021ace:	2320      	movs	r3, #32
 8021ad0:	408c      	lsls	r4, r1
 8021ad2:	1a5b      	subs	r3, r3, r1
 8021ad4:	0039      	movs	r1, r7
 8021ad6:	40d9      	lsrs	r1, r3
 8021ad8:	430c      	orrs	r4, r1
 8021ada:	4322      	orrs	r2, r4
 8021adc:	0011      	movs	r1, r2
 8021ade:	2200      	movs	r2, #0
 8021ae0:	42b5      	cmp	r5, r6
 8021ae2:	d901      	bls.n	8021ae8 <__b2d+0x88>
 8021ae4:	3d04      	subs	r5, #4
 8021ae6:	682a      	ldr	r2, [r5, #0]
 8021ae8:	4664      	mov	r4, ip
 8021aea:	40a7      	lsls	r7, r4
 8021aec:	e7dd      	b.n	8021aaa <__b2d+0x4a>
 8021aee:	4322      	orrs	r2, r4
 8021af0:	0011      	movs	r1, r2
 8021af2:	e7dc      	b.n	8021aae <__b2d+0x4e>
 8021af4:	3ff00000 	.word	0x3ff00000

08021af8 <__d2b>:
 8021af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021afa:	2101      	movs	r1, #1
 8021afc:	0016      	movs	r6, r2
 8021afe:	001f      	movs	r7, r3
 8021b00:	f7ff fbfe 	bl	8021300 <_Balloc>
 8021b04:	1e04      	subs	r4, r0, #0
 8021b06:	d105      	bne.n	8021b14 <__d2b+0x1c>
 8021b08:	0022      	movs	r2, r4
 8021b0a:	4b25      	ldr	r3, [pc, #148]	@ (8021ba0 <__d2b+0xa8>)
 8021b0c:	4825      	ldr	r0, [pc, #148]	@ (8021ba4 <__d2b+0xac>)
 8021b0e:	4926      	ldr	r1, [pc, #152]	@ (8021ba8 <__d2b+0xb0>)
 8021b10:	f000 fcd6 	bl	80224c0 <__assert_func>
 8021b14:	033b      	lsls	r3, r7, #12
 8021b16:	007d      	lsls	r5, r7, #1
 8021b18:	0b1b      	lsrs	r3, r3, #12
 8021b1a:	0d6d      	lsrs	r5, r5, #21
 8021b1c:	d002      	beq.n	8021b24 <__d2b+0x2c>
 8021b1e:	2280      	movs	r2, #128	@ 0x80
 8021b20:	0352      	lsls	r2, r2, #13
 8021b22:	4313      	orrs	r3, r2
 8021b24:	9301      	str	r3, [sp, #4]
 8021b26:	2e00      	cmp	r6, #0
 8021b28:	d025      	beq.n	8021b76 <__d2b+0x7e>
 8021b2a:	4668      	mov	r0, sp
 8021b2c:	9600      	str	r6, [sp, #0]
 8021b2e:	f7ff fd00 	bl	8021532 <__lo0bits>
 8021b32:	9b01      	ldr	r3, [sp, #4]
 8021b34:	9900      	ldr	r1, [sp, #0]
 8021b36:	2800      	cmp	r0, #0
 8021b38:	d01b      	beq.n	8021b72 <__d2b+0x7a>
 8021b3a:	2220      	movs	r2, #32
 8021b3c:	001e      	movs	r6, r3
 8021b3e:	1a12      	subs	r2, r2, r0
 8021b40:	4096      	lsls	r6, r2
 8021b42:	0032      	movs	r2, r6
 8021b44:	40c3      	lsrs	r3, r0
 8021b46:	430a      	orrs	r2, r1
 8021b48:	6162      	str	r2, [r4, #20]
 8021b4a:	9301      	str	r3, [sp, #4]
 8021b4c:	9e01      	ldr	r6, [sp, #4]
 8021b4e:	61a6      	str	r6, [r4, #24]
 8021b50:	1e73      	subs	r3, r6, #1
 8021b52:	419e      	sbcs	r6, r3
 8021b54:	3601      	adds	r6, #1
 8021b56:	6126      	str	r6, [r4, #16]
 8021b58:	2d00      	cmp	r5, #0
 8021b5a:	d014      	beq.n	8021b86 <__d2b+0x8e>
 8021b5c:	2635      	movs	r6, #53	@ 0x35
 8021b5e:	4b13      	ldr	r3, [pc, #76]	@ (8021bac <__d2b+0xb4>)
 8021b60:	18ed      	adds	r5, r5, r3
 8021b62:	9b08      	ldr	r3, [sp, #32]
 8021b64:	182d      	adds	r5, r5, r0
 8021b66:	601d      	str	r5, [r3, #0]
 8021b68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b6a:	1a36      	subs	r6, r6, r0
 8021b6c:	601e      	str	r6, [r3, #0]
 8021b6e:	0020      	movs	r0, r4
 8021b70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021b72:	6161      	str	r1, [r4, #20]
 8021b74:	e7ea      	b.n	8021b4c <__d2b+0x54>
 8021b76:	a801      	add	r0, sp, #4
 8021b78:	f7ff fcdb 	bl	8021532 <__lo0bits>
 8021b7c:	9b01      	ldr	r3, [sp, #4]
 8021b7e:	2601      	movs	r6, #1
 8021b80:	6163      	str	r3, [r4, #20]
 8021b82:	3020      	adds	r0, #32
 8021b84:	e7e7      	b.n	8021b56 <__d2b+0x5e>
 8021b86:	4b0a      	ldr	r3, [pc, #40]	@ (8021bb0 <__d2b+0xb8>)
 8021b88:	18c0      	adds	r0, r0, r3
 8021b8a:	9b08      	ldr	r3, [sp, #32]
 8021b8c:	6018      	str	r0, [r3, #0]
 8021b8e:	4b09      	ldr	r3, [pc, #36]	@ (8021bb4 <__d2b+0xbc>)
 8021b90:	18f3      	adds	r3, r6, r3
 8021b92:	009b      	lsls	r3, r3, #2
 8021b94:	18e3      	adds	r3, r4, r3
 8021b96:	6958      	ldr	r0, [r3, #20]
 8021b98:	f7ff fcaa 	bl	80214f0 <__hi0bits>
 8021b9c:	0176      	lsls	r6, r6, #5
 8021b9e:	e7e3      	b.n	8021b68 <__d2b+0x70>
 8021ba0:	08025469 	.word	0x08025469
 8021ba4:	080254da 	.word	0x080254da
 8021ba8:	0000030f 	.word	0x0000030f
 8021bac:	fffffbcd 	.word	0xfffffbcd
 8021bb0:	fffffbce 	.word	0xfffffbce
 8021bb4:	3fffffff 	.word	0x3fffffff

08021bb8 <__ratio>:
 8021bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021bba:	b087      	sub	sp, #28
 8021bbc:	000f      	movs	r7, r1
 8021bbe:	a904      	add	r1, sp, #16
 8021bc0:	0006      	movs	r6, r0
 8021bc2:	f7ff ff4d 	bl	8021a60 <__b2d>
 8021bc6:	9000      	str	r0, [sp, #0]
 8021bc8:	9101      	str	r1, [sp, #4]
 8021bca:	9b00      	ldr	r3, [sp, #0]
 8021bcc:	9c01      	ldr	r4, [sp, #4]
 8021bce:	0038      	movs	r0, r7
 8021bd0:	a905      	add	r1, sp, #20
 8021bd2:	9302      	str	r3, [sp, #8]
 8021bd4:	9403      	str	r4, [sp, #12]
 8021bd6:	f7ff ff43 	bl	8021a60 <__b2d>
 8021bda:	000d      	movs	r5, r1
 8021bdc:	0002      	movs	r2, r0
 8021bde:	000b      	movs	r3, r1
 8021be0:	6930      	ldr	r0, [r6, #16]
 8021be2:	6939      	ldr	r1, [r7, #16]
 8021be4:	9e04      	ldr	r6, [sp, #16]
 8021be6:	1a40      	subs	r0, r0, r1
 8021be8:	9905      	ldr	r1, [sp, #20]
 8021bea:	0140      	lsls	r0, r0, #5
 8021bec:	1a71      	subs	r1, r6, r1
 8021bee:	1841      	adds	r1, r0, r1
 8021bf0:	0508      	lsls	r0, r1, #20
 8021bf2:	2900      	cmp	r1, #0
 8021bf4:	dd08      	ble.n	8021c08 <__ratio+0x50>
 8021bf6:	9901      	ldr	r1, [sp, #4]
 8021bf8:	1841      	adds	r1, r0, r1
 8021bfa:	9103      	str	r1, [sp, #12]
 8021bfc:	9802      	ldr	r0, [sp, #8]
 8021bfe:	9903      	ldr	r1, [sp, #12]
 8021c00:	f7e0 f8d8 	bl	8001db4 <__aeabi_ddiv>
 8021c04:	b007      	add	sp, #28
 8021c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021c08:	1a2b      	subs	r3, r5, r0
 8021c0a:	e7f7      	b.n	8021bfc <__ratio+0x44>

08021c0c <__copybits>:
 8021c0c:	b570      	push	{r4, r5, r6, lr}
 8021c0e:	0014      	movs	r4, r2
 8021c10:	0005      	movs	r5, r0
 8021c12:	3901      	subs	r1, #1
 8021c14:	6913      	ldr	r3, [r2, #16]
 8021c16:	1149      	asrs	r1, r1, #5
 8021c18:	3101      	adds	r1, #1
 8021c1a:	0089      	lsls	r1, r1, #2
 8021c1c:	3414      	adds	r4, #20
 8021c1e:	009b      	lsls	r3, r3, #2
 8021c20:	1841      	adds	r1, r0, r1
 8021c22:	18e3      	adds	r3, r4, r3
 8021c24:	42a3      	cmp	r3, r4
 8021c26:	d80d      	bhi.n	8021c44 <__copybits+0x38>
 8021c28:	0014      	movs	r4, r2
 8021c2a:	3411      	adds	r4, #17
 8021c2c:	2500      	movs	r5, #0
 8021c2e:	429c      	cmp	r4, r3
 8021c30:	d803      	bhi.n	8021c3a <__copybits+0x2e>
 8021c32:	1a9b      	subs	r3, r3, r2
 8021c34:	3b11      	subs	r3, #17
 8021c36:	089b      	lsrs	r3, r3, #2
 8021c38:	009d      	lsls	r5, r3, #2
 8021c3a:	2300      	movs	r3, #0
 8021c3c:	1940      	adds	r0, r0, r5
 8021c3e:	4281      	cmp	r1, r0
 8021c40:	d803      	bhi.n	8021c4a <__copybits+0x3e>
 8021c42:	bd70      	pop	{r4, r5, r6, pc}
 8021c44:	cc40      	ldmia	r4!, {r6}
 8021c46:	c540      	stmia	r5!, {r6}
 8021c48:	e7ec      	b.n	8021c24 <__copybits+0x18>
 8021c4a:	c008      	stmia	r0!, {r3}
 8021c4c:	e7f7      	b.n	8021c3e <__copybits+0x32>

08021c4e <__any_on>:
 8021c4e:	0002      	movs	r2, r0
 8021c50:	6900      	ldr	r0, [r0, #16]
 8021c52:	b510      	push	{r4, lr}
 8021c54:	3214      	adds	r2, #20
 8021c56:	114b      	asrs	r3, r1, #5
 8021c58:	4298      	cmp	r0, r3
 8021c5a:	db13      	blt.n	8021c84 <__any_on+0x36>
 8021c5c:	dd0c      	ble.n	8021c78 <__any_on+0x2a>
 8021c5e:	241f      	movs	r4, #31
 8021c60:	0008      	movs	r0, r1
 8021c62:	4020      	ands	r0, r4
 8021c64:	4221      	tst	r1, r4
 8021c66:	d007      	beq.n	8021c78 <__any_on+0x2a>
 8021c68:	0099      	lsls	r1, r3, #2
 8021c6a:	588c      	ldr	r4, [r1, r2]
 8021c6c:	0021      	movs	r1, r4
 8021c6e:	40c1      	lsrs	r1, r0
 8021c70:	4081      	lsls	r1, r0
 8021c72:	2001      	movs	r0, #1
 8021c74:	428c      	cmp	r4, r1
 8021c76:	d104      	bne.n	8021c82 <__any_on+0x34>
 8021c78:	009b      	lsls	r3, r3, #2
 8021c7a:	18d3      	adds	r3, r2, r3
 8021c7c:	4293      	cmp	r3, r2
 8021c7e:	d803      	bhi.n	8021c88 <__any_on+0x3a>
 8021c80:	2000      	movs	r0, #0
 8021c82:	bd10      	pop	{r4, pc}
 8021c84:	0003      	movs	r3, r0
 8021c86:	e7f7      	b.n	8021c78 <__any_on+0x2a>
 8021c88:	3b04      	subs	r3, #4
 8021c8a:	6819      	ldr	r1, [r3, #0]
 8021c8c:	2900      	cmp	r1, #0
 8021c8e:	d0f5      	beq.n	8021c7c <__any_on+0x2e>
 8021c90:	2001      	movs	r0, #1
 8021c92:	e7f6      	b.n	8021c82 <__any_on+0x34>

08021c94 <__ascii_wctomb>:
 8021c94:	0003      	movs	r3, r0
 8021c96:	1e08      	subs	r0, r1, #0
 8021c98:	d005      	beq.n	8021ca6 <__ascii_wctomb+0x12>
 8021c9a:	2aff      	cmp	r2, #255	@ 0xff
 8021c9c:	d904      	bls.n	8021ca8 <__ascii_wctomb+0x14>
 8021c9e:	228a      	movs	r2, #138	@ 0x8a
 8021ca0:	2001      	movs	r0, #1
 8021ca2:	601a      	str	r2, [r3, #0]
 8021ca4:	4240      	negs	r0, r0
 8021ca6:	4770      	bx	lr
 8021ca8:	2001      	movs	r0, #1
 8021caa:	700a      	strb	r2, [r1, #0]
 8021cac:	e7fb      	b.n	8021ca6 <__ascii_wctomb+0x12>
	...

08021cb0 <__ssputs_r>:
 8021cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021cb2:	688e      	ldr	r6, [r1, #8]
 8021cb4:	b085      	sub	sp, #20
 8021cb6:	001f      	movs	r7, r3
 8021cb8:	000c      	movs	r4, r1
 8021cba:	680b      	ldr	r3, [r1, #0]
 8021cbc:	9002      	str	r0, [sp, #8]
 8021cbe:	9203      	str	r2, [sp, #12]
 8021cc0:	42be      	cmp	r6, r7
 8021cc2:	d830      	bhi.n	8021d26 <__ssputs_r+0x76>
 8021cc4:	210c      	movs	r1, #12
 8021cc6:	5e62      	ldrsh	r2, [r4, r1]
 8021cc8:	2190      	movs	r1, #144	@ 0x90
 8021cca:	00c9      	lsls	r1, r1, #3
 8021ccc:	420a      	tst	r2, r1
 8021cce:	d028      	beq.n	8021d22 <__ssputs_r+0x72>
 8021cd0:	2003      	movs	r0, #3
 8021cd2:	6921      	ldr	r1, [r4, #16]
 8021cd4:	1a5b      	subs	r3, r3, r1
 8021cd6:	9301      	str	r3, [sp, #4]
 8021cd8:	6963      	ldr	r3, [r4, #20]
 8021cda:	4343      	muls	r3, r0
 8021cdc:	9801      	ldr	r0, [sp, #4]
 8021cde:	0fdd      	lsrs	r5, r3, #31
 8021ce0:	18ed      	adds	r5, r5, r3
 8021ce2:	1c7b      	adds	r3, r7, #1
 8021ce4:	181b      	adds	r3, r3, r0
 8021ce6:	106d      	asrs	r5, r5, #1
 8021ce8:	42ab      	cmp	r3, r5
 8021cea:	d900      	bls.n	8021cee <__ssputs_r+0x3e>
 8021cec:	001d      	movs	r5, r3
 8021cee:	0552      	lsls	r2, r2, #21
 8021cf0:	d528      	bpl.n	8021d44 <__ssputs_r+0x94>
 8021cf2:	0029      	movs	r1, r5
 8021cf4:	9802      	ldr	r0, [sp, #8]
 8021cf6:	f7ff fa61 	bl	80211bc <_malloc_r>
 8021cfa:	1e06      	subs	r6, r0, #0
 8021cfc:	d02c      	beq.n	8021d58 <__ssputs_r+0xa8>
 8021cfe:	9a01      	ldr	r2, [sp, #4]
 8021d00:	6921      	ldr	r1, [r4, #16]
 8021d02:	f7fd fff9 	bl	801fcf8 <memcpy>
 8021d06:	89a2      	ldrh	r2, [r4, #12]
 8021d08:	4b18      	ldr	r3, [pc, #96]	@ (8021d6c <__ssputs_r+0xbc>)
 8021d0a:	401a      	ands	r2, r3
 8021d0c:	2380      	movs	r3, #128	@ 0x80
 8021d0e:	4313      	orrs	r3, r2
 8021d10:	81a3      	strh	r3, [r4, #12]
 8021d12:	9b01      	ldr	r3, [sp, #4]
 8021d14:	6126      	str	r6, [r4, #16]
 8021d16:	18f6      	adds	r6, r6, r3
 8021d18:	6026      	str	r6, [r4, #0]
 8021d1a:	003e      	movs	r6, r7
 8021d1c:	6165      	str	r5, [r4, #20]
 8021d1e:	1aed      	subs	r5, r5, r3
 8021d20:	60a5      	str	r5, [r4, #8]
 8021d22:	42be      	cmp	r6, r7
 8021d24:	d900      	bls.n	8021d28 <__ssputs_r+0x78>
 8021d26:	003e      	movs	r6, r7
 8021d28:	0032      	movs	r2, r6
 8021d2a:	9903      	ldr	r1, [sp, #12]
 8021d2c:	6820      	ldr	r0, [r4, #0]
 8021d2e:	f000 fb7e 	bl	802242e <memmove>
 8021d32:	2000      	movs	r0, #0
 8021d34:	68a3      	ldr	r3, [r4, #8]
 8021d36:	1b9b      	subs	r3, r3, r6
 8021d38:	60a3      	str	r3, [r4, #8]
 8021d3a:	6823      	ldr	r3, [r4, #0]
 8021d3c:	199b      	adds	r3, r3, r6
 8021d3e:	6023      	str	r3, [r4, #0]
 8021d40:	b005      	add	sp, #20
 8021d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021d44:	002a      	movs	r2, r5
 8021d46:	9802      	ldr	r0, [sp, #8]
 8021d48:	f000 fc05 	bl	8022556 <_realloc_r>
 8021d4c:	1e06      	subs	r6, r0, #0
 8021d4e:	d1e0      	bne.n	8021d12 <__ssputs_r+0x62>
 8021d50:	6921      	ldr	r1, [r4, #16]
 8021d52:	9802      	ldr	r0, [sp, #8]
 8021d54:	f7fe fe62 	bl	8020a1c <_free_r>
 8021d58:	230c      	movs	r3, #12
 8021d5a:	2001      	movs	r0, #1
 8021d5c:	9a02      	ldr	r2, [sp, #8]
 8021d5e:	4240      	negs	r0, r0
 8021d60:	6013      	str	r3, [r2, #0]
 8021d62:	89a2      	ldrh	r2, [r4, #12]
 8021d64:	3334      	adds	r3, #52	@ 0x34
 8021d66:	4313      	orrs	r3, r2
 8021d68:	81a3      	strh	r3, [r4, #12]
 8021d6a:	e7e9      	b.n	8021d40 <__ssputs_r+0x90>
 8021d6c:	fffffb7f 	.word	0xfffffb7f

08021d70 <_svfiprintf_r>:
 8021d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021d72:	b0a1      	sub	sp, #132	@ 0x84
 8021d74:	9003      	str	r0, [sp, #12]
 8021d76:	001d      	movs	r5, r3
 8021d78:	898b      	ldrh	r3, [r1, #12]
 8021d7a:	000f      	movs	r7, r1
 8021d7c:	0016      	movs	r6, r2
 8021d7e:	061b      	lsls	r3, r3, #24
 8021d80:	d511      	bpl.n	8021da6 <_svfiprintf_r+0x36>
 8021d82:	690b      	ldr	r3, [r1, #16]
 8021d84:	2b00      	cmp	r3, #0
 8021d86:	d10e      	bne.n	8021da6 <_svfiprintf_r+0x36>
 8021d88:	2140      	movs	r1, #64	@ 0x40
 8021d8a:	f7ff fa17 	bl	80211bc <_malloc_r>
 8021d8e:	6038      	str	r0, [r7, #0]
 8021d90:	6138      	str	r0, [r7, #16]
 8021d92:	2800      	cmp	r0, #0
 8021d94:	d105      	bne.n	8021da2 <_svfiprintf_r+0x32>
 8021d96:	230c      	movs	r3, #12
 8021d98:	9a03      	ldr	r2, [sp, #12]
 8021d9a:	6013      	str	r3, [r2, #0]
 8021d9c:	2001      	movs	r0, #1
 8021d9e:	4240      	negs	r0, r0
 8021da0:	e0cf      	b.n	8021f42 <_svfiprintf_r+0x1d2>
 8021da2:	2340      	movs	r3, #64	@ 0x40
 8021da4:	617b      	str	r3, [r7, #20]
 8021da6:	2300      	movs	r3, #0
 8021da8:	ac08      	add	r4, sp, #32
 8021daa:	6163      	str	r3, [r4, #20]
 8021dac:	3320      	adds	r3, #32
 8021dae:	7663      	strb	r3, [r4, #25]
 8021db0:	3310      	adds	r3, #16
 8021db2:	76a3      	strb	r3, [r4, #26]
 8021db4:	9507      	str	r5, [sp, #28]
 8021db6:	0035      	movs	r5, r6
 8021db8:	782b      	ldrb	r3, [r5, #0]
 8021dba:	2b00      	cmp	r3, #0
 8021dbc:	d001      	beq.n	8021dc2 <_svfiprintf_r+0x52>
 8021dbe:	2b25      	cmp	r3, #37	@ 0x25
 8021dc0:	d148      	bne.n	8021e54 <_svfiprintf_r+0xe4>
 8021dc2:	1bab      	subs	r3, r5, r6
 8021dc4:	9305      	str	r3, [sp, #20]
 8021dc6:	42b5      	cmp	r5, r6
 8021dc8:	d00b      	beq.n	8021de2 <_svfiprintf_r+0x72>
 8021dca:	0032      	movs	r2, r6
 8021dcc:	0039      	movs	r1, r7
 8021dce:	9803      	ldr	r0, [sp, #12]
 8021dd0:	f7ff ff6e 	bl	8021cb0 <__ssputs_r>
 8021dd4:	3001      	adds	r0, #1
 8021dd6:	d100      	bne.n	8021dda <_svfiprintf_r+0x6a>
 8021dd8:	e0ae      	b.n	8021f38 <_svfiprintf_r+0x1c8>
 8021dda:	6963      	ldr	r3, [r4, #20]
 8021ddc:	9a05      	ldr	r2, [sp, #20]
 8021dde:	189b      	adds	r3, r3, r2
 8021de0:	6163      	str	r3, [r4, #20]
 8021de2:	782b      	ldrb	r3, [r5, #0]
 8021de4:	2b00      	cmp	r3, #0
 8021de6:	d100      	bne.n	8021dea <_svfiprintf_r+0x7a>
 8021de8:	e0a6      	b.n	8021f38 <_svfiprintf_r+0x1c8>
 8021dea:	2201      	movs	r2, #1
 8021dec:	2300      	movs	r3, #0
 8021dee:	4252      	negs	r2, r2
 8021df0:	6062      	str	r2, [r4, #4]
 8021df2:	a904      	add	r1, sp, #16
 8021df4:	3254      	adds	r2, #84	@ 0x54
 8021df6:	1852      	adds	r2, r2, r1
 8021df8:	1c6e      	adds	r6, r5, #1
 8021dfa:	6023      	str	r3, [r4, #0]
 8021dfc:	60e3      	str	r3, [r4, #12]
 8021dfe:	60a3      	str	r3, [r4, #8]
 8021e00:	7013      	strb	r3, [r2, #0]
 8021e02:	65a3      	str	r3, [r4, #88]	@ 0x58
 8021e04:	4b54      	ldr	r3, [pc, #336]	@ (8021f58 <_svfiprintf_r+0x1e8>)
 8021e06:	2205      	movs	r2, #5
 8021e08:	0018      	movs	r0, r3
 8021e0a:	7831      	ldrb	r1, [r6, #0]
 8021e0c:	9305      	str	r3, [sp, #20]
 8021e0e:	f7fd ff68 	bl	801fce2 <memchr>
 8021e12:	1c75      	adds	r5, r6, #1
 8021e14:	2800      	cmp	r0, #0
 8021e16:	d11f      	bne.n	8021e58 <_svfiprintf_r+0xe8>
 8021e18:	6822      	ldr	r2, [r4, #0]
 8021e1a:	06d3      	lsls	r3, r2, #27
 8021e1c:	d504      	bpl.n	8021e28 <_svfiprintf_r+0xb8>
 8021e1e:	2353      	movs	r3, #83	@ 0x53
 8021e20:	a904      	add	r1, sp, #16
 8021e22:	185b      	adds	r3, r3, r1
 8021e24:	2120      	movs	r1, #32
 8021e26:	7019      	strb	r1, [r3, #0]
 8021e28:	0713      	lsls	r3, r2, #28
 8021e2a:	d504      	bpl.n	8021e36 <_svfiprintf_r+0xc6>
 8021e2c:	2353      	movs	r3, #83	@ 0x53
 8021e2e:	a904      	add	r1, sp, #16
 8021e30:	185b      	adds	r3, r3, r1
 8021e32:	212b      	movs	r1, #43	@ 0x2b
 8021e34:	7019      	strb	r1, [r3, #0]
 8021e36:	7833      	ldrb	r3, [r6, #0]
 8021e38:	2b2a      	cmp	r3, #42	@ 0x2a
 8021e3a:	d016      	beq.n	8021e6a <_svfiprintf_r+0xfa>
 8021e3c:	0035      	movs	r5, r6
 8021e3e:	2100      	movs	r1, #0
 8021e40:	200a      	movs	r0, #10
 8021e42:	68e3      	ldr	r3, [r4, #12]
 8021e44:	782a      	ldrb	r2, [r5, #0]
 8021e46:	1c6e      	adds	r6, r5, #1
 8021e48:	3a30      	subs	r2, #48	@ 0x30
 8021e4a:	2a09      	cmp	r2, #9
 8021e4c:	d950      	bls.n	8021ef0 <_svfiprintf_r+0x180>
 8021e4e:	2900      	cmp	r1, #0
 8021e50:	d111      	bne.n	8021e76 <_svfiprintf_r+0x106>
 8021e52:	e017      	b.n	8021e84 <_svfiprintf_r+0x114>
 8021e54:	3501      	adds	r5, #1
 8021e56:	e7af      	b.n	8021db8 <_svfiprintf_r+0x48>
 8021e58:	9b05      	ldr	r3, [sp, #20]
 8021e5a:	6822      	ldr	r2, [r4, #0]
 8021e5c:	1ac0      	subs	r0, r0, r3
 8021e5e:	2301      	movs	r3, #1
 8021e60:	4083      	lsls	r3, r0
 8021e62:	4313      	orrs	r3, r2
 8021e64:	002e      	movs	r6, r5
 8021e66:	6023      	str	r3, [r4, #0]
 8021e68:	e7cc      	b.n	8021e04 <_svfiprintf_r+0x94>
 8021e6a:	9b07      	ldr	r3, [sp, #28]
 8021e6c:	1d19      	adds	r1, r3, #4
 8021e6e:	681b      	ldr	r3, [r3, #0]
 8021e70:	9107      	str	r1, [sp, #28]
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	db01      	blt.n	8021e7a <_svfiprintf_r+0x10a>
 8021e76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021e78:	e004      	b.n	8021e84 <_svfiprintf_r+0x114>
 8021e7a:	425b      	negs	r3, r3
 8021e7c:	60e3      	str	r3, [r4, #12]
 8021e7e:	2302      	movs	r3, #2
 8021e80:	4313      	orrs	r3, r2
 8021e82:	6023      	str	r3, [r4, #0]
 8021e84:	782b      	ldrb	r3, [r5, #0]
 8021e86:	2b2e      	cmp	r3, #46	@ 0x2e
 8021e88:	d10c      	bne.n	8021ea4 <_svfiprintf_r+0x134>
 8021e8a:	786b      	ldrb	r3, [r5, #1]
 8021e8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8021e8e:	d134      	bne.n	8021efa <_svfiprintf_r+0x18a>
 8021e90:	9b07      	ldr	r3, [sp, #28]
 8021e92:	3502      	adds	r5, #2
 8021e94:	1d1a      	adds	r2, r3, #4
 8021e96:	681b      	ldr	r3, [r3, #0]
 8021e98:	9207      	str	r2, [sp, #28]
 8021e9a:	2b00      	cmp	r3, #0
 8021e9c:	da01      	bge.n	8021ea2 <_svfiprintf_r+0x132>
 8021e9e:	2301      	movs	r3, #1
 8021ea0:	425b      	negs	r3, r3
 8021ea2:	9309      	str	r3, [sp, #36]	@ 0x24
 8021ea4:	4e2d      	ldr	r6, [pc, #180]	@ (8021f5c <_svfiprintf_r+0x1ec>)
 8021ea6:	2203      	movs	r2, #3
 8021ea8:	0030      	movs	r0, r6
 8021eaa:	7829      	ldrb	r1, [r5, #0]
 8021eac:	f7fd ff19 	bl	801fce2 <memchr>
 8021eb0:	2800      	cmp	r0, #0
 8021eb2:	d006      	beq.n	8021ec2 <_svfiprintf_r+0x152>
 8021eb4:	2340      	movs	r3, #64	@ 0x40
 8021eb6:	1b80      	subs	r0, r0, r6
 8021eb8:	4083      	lsls	r3, r0
 8021eba:	6822      	ldr	r2, [r4, #0]
 8021ebc:	3501      	adds	r5, #1
 8021ebe:	4313      	orrs	r3, r2
 8021ec0:	6023      	str	r3, [r4, #0]
 8021ec2:	7829      	ldrb	r1, [r5, #0]
 8021ec4:	2206      	movs	r2, #6
 8021ec6:	4826      	ldr	r0, [pc, #152]	@ (8021f60 <_svfiprintf_r+0x1f0>)
 8021ec8:	1c6e      	adds	r6, r5, #1
 8021eca:	7621      	strb	r1, [r4, #24]
 8021ecc:	f7fd ff09 	bl	801fce2 <memchr>
 8021ed0:	2800      	cmp	r0, #0
 8021ed2:	d038      	beq.n	8021f46 <_svfiprintf_r+0x1d6>
 8021ed4:	4b23      	ldr	r3, [pc, #140]	@ (8021f64 <_svfiprintf_r+0x1f4>)
 8021ed6:	2b00      	cmp	r3, #0
 8021ed8:	d122      	bne.n	8021f20 <_svfiprintf_r+0x1b0>
 8021eda:	2207      	movs	r2, #7
 8021edc:	9b07      	ldr	r3, [sp, #28]
 8021ede:	3307      	adds	r3, #7
 8021ee0:	4393      	bics	r3, r2
 8021ee2:	3308      	adds	r3, #8
 8021ee4:	9307      	str	r3, [sp, #28]
 8021ee6:	6963      	ldr	r3, [r4, #20]
 8021ee8:	9a04      	ldr	r2, [sp, #16]
 8021eea:	189b      	adds	r3, r3, r2
 8021eec:	6163      	str	r3, [r4, #20]
 8021eee:	e762      	b.n	8021db6 <_svfiprintf_r+0x46>
 8021ef0:	4343      	muls	r3, r0
 8021ef2:	0035      	movs	r5, r6
 8021ef4:	2101      	movs	r1, #1
 8021ef6:	189b      	adds	r3, r3, r2
 8021ef8:	e7a4      	b.n	8021e44 <_svfiprintf_r+0xd4>
 8021efa:	2300      	movs	r3, #0
 8021efc:	200a      	movs	r0, #10
 8021efe:	0019      	movs	r1, r3
 8021f00:	3501      	adds	r5, #1
 8021f02:	6063      	str	r3, [r4, #4]
 8021f04:	782a      	ldrb	r2, [r5, #0]
 8021f06:	1c6e      	adds	r6, r5, #1
 8021f08:	3a30      	subs	r2, #48	@ 0x30
 8021f0a:	2a09      	cmp	r2, #9
 8021f0c:	d903      	bls.n	8021f16 <_svfiprintf_r+0x1a6>
 8021f0e:	2b00      	cmp	r3, #0
 8021f10:	d0c8      	beq.n	8021ea4 <_svfiprintf_r+0x134>
 8021f12:	9109      	str	r1, [sp, #36]	@ 0x24
 8021f14:	e7c6      	b.n	8021ea4 <_svfiprintf_r+0x134>
 8021f16:	4341      	muls	r1, r0
 8021f18:	0035      	movs	r5, r6
 8021f1a:	2301      	movs	r3, #1
 8021f1c:	1889      	adds	r1, r1, r2
 8021f1e:	e7f1      	b.n	8021f04 <_svfiprintf_r+0x194>
 8021f20:	aa07      	add	r2, sp, #28
 8021f22:	9200      	str	r2, [sp, #0]
 8021f24:	0021      	movs	r1, r4
 8021f26:	003a      	movs	r2, r7
 8021f28:	4b0f      	ldr	r3, [pc, #60]	@ (8021f68 <_svfiprintf_r+0x1f8>)
 8021f2a:	9803      	ldr	r0, [sp, #12]
 8021f2c:	f7fc ffd4 	bl	801eed8 <_printf_float>
 8021f30:	9004      	str	r0, [sp, #16]
 8021f32:	9b04      	ldr	r3, [sp, #16]
 8021f34:	3301      	adds	r3, #1
 8021f36:	d1d6      	bne.n	8021ee6 <_svfiprintf_r+0x176>
 8021f38:	89bb      	ldrh	r3, [r7, #12]
 8021f3a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021f3c:	065b      	lsls	r3, r3, #25
 8021f3e:	d500      	bpl.n	8021f42 <_svfiprintf_r+0x1d2>
 8021f40:	e72c      	b.n	8021d9c <_svfiprintf_r+0x2c>
 8021f42:	b021      	add	sp, #132	@ 0x84
 8021f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021f46:	aa07      	add	r2, sp, #28
 8021f48:	9200      	str	r2, [sp, #0]
 8021f4a:	0021      	movs	r1, r4
 8021f4c:	003a      	movs	r2, r7
 8021f4e:	4b06      	ldr	r3, [pc, #24]	@ (8021f68 <_svfiprintf_r+0x1f8>)
 8021f50:	9803      	ldr	r0, [sp, #12]
 8021f52:	f7fd fa6f 	bl	801f434 <_printf_i>
 8021f56:	e7eb      	b.n	8021f30 <_svfiprintf_r+0x1c0>
 8021f58:	08025630 	.word	0x08025630
 8021f5c:	08025636 	.word	0x08025636
 8021f60:	0802563a 	.word	0x0802563a
 8021f64:	0801eed9 	.word	0x0801eed9
 8021f68:	08021cb1 	.word	0x08021cb1

08021f6c <__sfputc_r>:
 8021f6c:	6893      	ldr	r3, [r2, #8]
 8021f6e:	b510      	push	{r4, lr}
 8021f70:	3b01      	subs	r3, #1
 8021f72:	6093      	str	r3, [r2, #8]
 8021f74:	2b00      	cmp	r3, #0
 8021f76:	da04      	bge.n	8021f82 <__sfputc_r+0x16>
 8021f78:	6994      	ldr	r4, [r2, #24]
 8021f7a:	42a3      	cmp	r3, r4
 8021f7c:	db07      	blt.n	8021f8e <__sfputc_r+0x22>
 8021f7e:	290a      	cmp	r1, #10
 8021f80:	d005      	beq.n	8021f8e <__sfputc_r+0x22>
 8021f82:	6813      	ldr	r3, [r2, #0]
 8021f84:	1c58      	adds	r0, r3, #1
 8021f86:	6010      	str	r0, [r2, #0]
 8021f88:	7019      	strb	r1, [r3, #0]
 8021f8a:	0008      	movs	r0, r1
 8021f8c:	bd10      	pop	{r4, pc}
 8021f8e:	f7fd fd37 	bl	801fa00 <__swbuf_r>
 8021f92:	0001      	movs	r1, r0
 8021f94:	e7f9      	b.n	8021f8a <__sfputc_r+0x1e>

08021f96 <__sfputs_r>:
 8021f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021f98:	0006      	movs	r6, r0
 8021f9a:	000f      	movs	r7, r1
 8021f9c:	0014      	movs	r4, r2
 8021f9e:	18d5      	adds	r5, r2, r3
 8021fa0:	42ac      	cmp	r4, r5
 8021fa2:	d101      	bne.n	8021fa8 <__sfputs_r+0x12>
 8021fa4:	2000      	movs	r0, #0
 8021fa6:	e007      	b.n	8021fb8 <__sfputs_r+0x22>
 8021fa8:	7821      	ldrb	r1, [r4, #0]
 8021faa:	003a      	movs	r2, r7
 8021fac:	0030      	movs	r0, r6
 8021fae:	f7ff ffdd 	bl	8021f6c <__sfputc_r>
 8021fb2:	3401      	adds	r4, #1
 8021fb4:	1c43      	adds	r3, r0, #1
 8021fb6:	d1f3      	bne.n	8021fa0 <__sfputs_r+0xa>
 8021fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021fbc <_vfiprintf_r>:
 8021fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021fbe:	b0a1      	sub	sp, #132	@ 0x84
 8021fc0:	000f      	movs	r7, r1
 8021fc2:	0015      	movs	r5, r2
 8021fc4:	001e      	movs	r6, r3
 8021fc6:	9003      	str	r0, [sp, #12]
 8021fc8:	2800      	cmp	r0, #0
 8021fca:	d004      	beq.n	8021fd6 <_vfiprintf_r+0x1a>
 8021fcc:	6a03      	ldr	r3, [r0, #32]
 8021fce:	2b00      	cmp	r3, #0
 8021fd0:	d101      	bne.n	8021fd6 <_vfiprintf_r+0x1a>
 8021fd2:	f7fd fbcd 	bl	801f770 <__sinit>
 8021fd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021fd8:	07db      	lsls	r3, r3, #31
 8021fda:	d405      	bmi.n	8021fe8 <_vfiprintf_r+0x2c>
 8021fdc:	89bb      	ldrh	r3, [r7, #12]
 8021fde:	059b      	lsls	r3, r3, #22
 8021fe0:	d402      	bmi.n	8021fe8 <_vfiprintf_r+0x2c>
 8021fe2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021fe4:	f7fd fe7b 	bl	801fcde <__retarget_lock_acquire_recursive>
 8021fe8:	89bb      	ldrh	r3, [r7, #12]
 8021fea:	071b      	lsls	r3, r3, #28
 8021fec:	d502      	bpl.n	8021ff4 <_vfiprintf_r+0x38>
 8021fee:	693b      	ldr	r3, [r7, #16]
 8021ff0:	2b00      	cmp	r3, #0
 8021ff2:	d113      	bne.n	802201c <_vfiprintf_r+0x60>
 8021ff4:	0039      	movs	r1, r7
 8021ff6:	9803      	ldr	r0, [sp, #12]
 8021ff8:	f7fd fd44 	bl	801fa84 <__swsetup_r>
 8021ffc:	2800      	cmp	r0, #0
 8021ffe:	d00d      	beq.n	802201c <_vfiprintf_r+0x60>
 8022000:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022002:	07db      	lsls	r3, r3, #31
 8022004:	d503      	bpl.n	802200e <_vfiprintf_r+0x52>
 8022006:	2001      	movs	r0, #1
 8022008:	4240      	negs	r0, r0
 802200a:	b021      	add	sp, #132	@ 0x84
 802200c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802200e:	89bb      	ldrh	r3, [r7, #12]
 8022010:	059b      	lsls	r3, r3, #22
 8022012:	d4f8      	bmi.n	8022006 <_vfiprintf_r+0x4a>
 8022014:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022016:	f7fd fe63 	bl	801fce0 <__retarget_lock_release_recursive>
 802201a:	e7f4      	b.n	8022006 <_vfiprintf_r+0x4a>
 802201c:	2300      	movs	r3, #0
 802201e:	ac08      	add	r4, sp, #32
 8022020:	6163      	str	r3, [r4, #20]
 8022022:	3320      	adds	r3, #32
 8022024:	7663      	strb	r3, [r4, #25]
 8022026:	3310      	adds	r3, #16
 8022028:	76a3      	strb	r3, [r4, #26]
 802202a:	9607      	str	r6, [sp, #28]
 802202c:	002e      	movs	r6, r5
 802202e:	7833      	ldrb	r3, [r6, #0]
 8022030:	2b00      	cmp	r3, #0
 8022032:	d001      	beq.n	8022038 <_vfiprintf_r+0x7c>
 8022034:	2b25      	cmp	r3, #37	@ 0x25
 8022036:	d148      	bne.n	80220ca <_vfiprintf_r+0x10e>
 8022038:	1b73      	subs	r3, r6, r5
 802203a:	9305      	str	r3, [sp, #20]
 802203c:	42ae      	cmp	r6, r5
 802203e:	d00b      	beq.n	8022058 <_vfiprintf_r+0x9c>
 8022040:	002a      	movs	r2, r5
 8022042:	0039      	movs	r1, r7
 8022044:	9803      	ldr	r0, [sp, #12]
 8022046:	f7ff ffa6 	bl	8021f96 <__sfputs_r>
 802204a:	3001      	adds	r0, #1
 802204c:	d100      	bne.n	8022050 <_vfiprintf_r+0x94>
 802204e:	e0ae      	b.n	80221ae <_vfiprintf_r+0x1f2>
 8022050:	6963      	ldr	r3, [r4, #20]
 8022052:	9a05      	ldr	r2, [sp, #20]
 8022054:	189b      	adds	r3, r3, r2
 8022056:	6163      	str	r3, [r4, #20]
 8022058:	7833      	ldrb	r3, [r6, #0]
 802205a:	2b00      	cmp	r3, #0
 802205c:	d100      	bne.n	8022060 <_vfiprintf_r+0xa4>
 802205e:	e0a6      	b.n	80221ae <_vfiprintf_r+0x1f2>
 8022060:	2201      	movs	r2, #1
 8022062:	2300      	movs	r3, #0
 8022064:	4252      	negs	r2, r2
 8022066:	6062      	str	r2, [r4, #4]
 8022068:	a904      	add	r1, sp, #16
 802206a:	3254      	adds	r2, #84	@ 0x54
 802206c:	1852      	adds	r2, r2, r1
 802206e:	1c75      	adds	r5, r6, #1
 8022070:	6023      	str	r3, [r4, #0]
 8022072:	60e3      	str	r3, [r4, #12]
 8022074:	60a3      	str	r3, [r4, #8]
 8022076:	7013      	strb	r3, [r2, #0]
 8022078:	65a3      	str	r3, [r4, #88]	@ 0x58
 802207a:	4b59      	ldr	r3, [pc, #356]	@ (80221e0 <_vfiprintf_r+0x224>)
 802207c:	2205      	movs	r2, #5
 802207e:	0018      	movs	r0, r3
 8022080:	7829      	ldrb	r1, [r5, #0]
 8022082:	9305      	str	r3, [sp, #20]
 8022084:	f7fd fe2d 	bl	801fce2 <memchr>
 8022088:	1c6e      	adds	r6, r5, #1
 802208a:	2800      	cmp	r0, #0
 802208c:	d11f      	bne.n	80220ce <_vfiprintf_r+0x112>
 802208e:	6822      	ldr	r2, [r4, #0]
 8022090:	06d3      	lsls	r3, r2, #27
 8022092:	d504      	bpl.n	802209e <_vfiprintf_r+0xe2>
 8022094:	2353      	movs	r3, #83	@ 0x53
 8022096:	a904      	add	r1, sp, #16
 8022098:	185b      	adds	r3, r3, r1
 802209a:	2120      	movs	r1, #32
 802209c:	7019      	strb	r1, [r3, #0]
 802209e:	0713      	lsls	r3, r2, #28
 80220a0:	d504      	bpl.n	80220ac <_vfiprintf_r+0xf0>
 80220a2:	2353      	movs	r3, #83	@ 0x53
 80220a4:	a904      	add	r1, sp, #16
 80220a6:	185b      	adds	r3, r3, r1
 80220a8:	212b      	movs	r1, #43	@ 0x2b
 80220aa:	7019      	strb	r1, [r3, #0]
 80220ac:	782b      	ldrb	r3, [r5, #0]
 80220ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80220b0:	d016      	beq.n	80220e0 <_vfiprintf_r+0x124>
 80220b2:	002e      	movs	r6, r5
 80220b4:	2100      	movs	r1, #0
 80220b6:	200a      	movs	r0, #10
 80220b8:	68e3      	ldr	r3, [r4, #12]
 80220ba:	7832      	ldrb	r2, [r6, #0]
 80220bc:	1c75      	adds	r5, r6, #1
 80220be:	3a30      	subs	r2, #48	@ 0x30
 80220c0:	2a09      	cmp	r2, #9
 80220c2:	d950      	bls.n	8022166 <_vfiprintf_r+0x1aa>
 80220c4:	2900      	cmp	r1, #0
 80220c6:	d111      	bne.n	80220ec <_vfiprintf_r+0x130>
 80220c8:	e017      	b.n	80220fa <_vfiprintf_r+0x13e>
 80220ca:	3601      	adds	r6, #1
 80220cc:	e7af      	b.n	802202e <_vfiprintf_r+0x72>
 80220ce:	9b05      	ldr	r3, [sp, #20]
 80220d0:	6822      	ldr	r2, [r4, #0]
 80220d2:	1ac0      	subs	r0, r0, r3
 80220d4:	2301      	movs	r3, #1
 80220d6:	4083      	lsls	r3, r0
 80220d8:	4313      	orrs	r3, r2
 80220da:	0035      	movs	r5, r6
 80220dc:	6023      	str	r3, [r4, #0]
 80220de:	e7cc      	b.n	802207a <_vfiprintf_r+0xbe>
 80220e0:	9b07      	ldr	r3, [sp, #28]
 80220e2:	1d19      	adds	r1, r3, #4
 80220e4:	681b      	ldr	r3, [r3, #0]
 80220e6:	9107      	str	r1, [sp, #28]
 80220e8:	2b00      	cmp	r3, #0
 80220ea:	db01      	blt.n	80220f0 <_vfiprintf_r+0x134>
 80220ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80220ee:	e004      	b.n	80220fa <_vfiprintf_r+0x13e>
 80220f0:	425b      	negs	r3, r3
 80220f2:	60e3      	str	r3, [r4, #12]
 80220f4:	2302      	movs	r3, #2
 80220f6:	4313      	orrs	r3, r2
 80220f8:	6023      	str	r3, [r4, #0]
 80220fa:	7833      	ldrb	r3, [r6, #0]
 80220fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80220fe:	d10c      	bne.n	802211a <_vfiprintf_r+0x15e>
 8022100:	7873      	ldrb	r3, [r6, #1]
 8022102:	2b2a      	cmp	r3, #42	@ 0x2a
 8022104:	d134      	bne.n	8022170 <_vfiprintf_r+0x1b4>
 8022106:	9b07      	ldr	r3, [sp, #28]
 8022108:	3602      	adds	r6, #2
 802210a:	1d1a      	adds	r2, r3, #4
 802210c:	681b      	ldr	r3, [r3, #0]
 802210e:	9207      	str	r2, [sp, #28]
 8022110:	2b00      	cmp	r3, #0
 8022112:	da01      	bge.n	8022118 <_vfiprintf_r+0x15c>
 8022114:	2301      	movs	r3, #1
 8022116:	425b      	negs	r3, r3
 8022118:	9309      	str	r3, [sp, #36]	@ 0x24
 802211a:	4d32      	ldr	r5, [pc, #200]	@ (80221e4 <_vfiprintf_r+0x228>)
 802211c:	2203      	movs	r2, #3
 802211e:	0028      	movs	r0, r5
 8022120:	7831      	ldrb	r1, [r6, #0]
 8022122:	f7fd fdde 	bl	801fce2 <memchr>
 8022126:	2800      	cmp	r0, #0
 8022128:	d006      	beq.n	8022138 <_vfiprintf_r+0x17c>
 802212a:	2340      	movs	r3, #64	@ 0x40
 802212c:	1b40      	subs	r0, r0, r5
 802212e:	4083      	lsls	r3, r0
 8022130:	6822      	ldr	r2, [r4, #0]
 8022132:	3601      	adds	r6, #1
 8022134:	4313      	orrs	r3, r2
 8022136:	6023      	str	r3, [r4, #0]
 8022138:	7831      	ldrb	r1, [r6, #0]
 802213a:	2206      	movs	r2, #6
 802213c:	482a      	ldr	r0, [pc, #168]	@ (80221e8 <_vfiprintf_r+0x22c>)
 802213e:	1c75      	adds	r5, r6, #1
 8022140:	7621      	strb	r1, [r4, #24]
 8022142:	f7fd fdce 	bl	801fce2 <memchr>
 8022146:	2800      	cmp	r0, #0
 8022148:	d040      	beq.n	80221cc <_vfiprintf_r+0x210>
 802214a:	4b28      	ldr	r3, [pc, #160]	@ (80221ec <_vfiprintf_r+0x230>)
 802214c:	2b00      	cmp	r3, #0
 802214e:	d122      	bne.n	8022196 <_vfiprintf_r+0x1da>
 8022150:	2207      	movs	r2, #7
 8022152:	9b07      	ldr	r3, [sp, #28]
 8022154:	3307      	adds	r3, #7
 8022156:	4393      	bics	r3, r2
 8022158:	3308      	adds	r3, #8
 802215a:	9307      	str	r3, [sp, #28]
 802215c:	6963      	ldr	r3, [r4, #20]
 802215e:	9a04      	ldr	r2, [sp, #16]
 8022160:	189b      	adds	r3, r3, r2
 8022162:	6163      	str	r3, [r4, #20]
 8022164:	e762      	b.n	802202c <_vfiprintf_r+0x70>
 8022166:	4343      	muls	r3, r0
 8022168:	002e      	movs	r6, r5
 802216a:	2101      	movs	r1, #1
 802216c:	189b      	adds	r3, r3, r2
 802216e:	e7a4      	b.n	80220ba <_vfiprintf_r+0xfe>
 8022170:	2300      	movs	r3, #0
 8022172:	200a      	movs	r0, #10
 8022174:	0019      	movs	r1, r3
 8022176:	3601      	adds	r6, #1
 8022178:	6063      	str	r3, [r4, #4]
 802217a:	7832      	ldrb	r2, [r6, #0]
 802217c:	1c75      	adds	r5, r6, #1
 802217e:	3a30      	subs	r2, #48	@ 0x30
 8022180:	2a09      	cmp	r2, #9
 8022182:	d903      	bls.n	802218c <_vfiprintf_r+0x1d0>
 8022184:	2b00      	cmp	r3, #0
 8022186:	d0c8      	beq.n	802211a <_vfiprintf_r+0x15e>
 8022188:	9109      	str	r1, [sp, #36]	@ 0x24
 802218a:	e7c6      	b.n	802211a <_vfiprintf_r+0x15e>
 802218c:	4341      	muls	r1, r0
 802218e:	002e      	movs	r6, r5
 8022190:	2301      	movs	r3, #1
 8022192:	1889      	adds	r1, r1, r2
 8022194:	e7f1      	b.n	802217a <_vfiprintf_r+0x1be>
 8022196:	aa07      	add	r2, sp, #28
 8022198:	9200      	str	r2, [sp, #0]
 802219a:	0021      	movs	r1, r4
 802219c:	003a      	movs	r2, r7
 802219e:	4b14      	ldr	r3, [pc, #80]	@ (80221f0 <_vfiprintf_r+0x234>)
 80221a0:	9803      	ldr	r0, [sp, #12]
 80221a2:	f7fc fe99 	bl	801eed8 <_printf_float>
 80221a6:	9004      	str	r0, [sp, #16]
 80221a8:	9b04      	ldr	r3, [sp, #16]
 80221aa:	3301      	adds	r3, #1
 80221ac:	d1d6      	bne.n	802215c <_vfiprintf_r+0x1a0>
 80221ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80221b0:	07db      	lsls	r3, r3, #31
 80221b2:	d405      	bmi.n	80221c0 <_vfiprintf_r+0x204>
 80221b4:	89bb      	ldrh	r3, [r7, #12]
 80221b6:	059b      	lsls	r3, r3, #22
 80221b8:	d402      	bmi.n	80221c0 <_vfiprintf_r+0x204>
 80221ba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80221bc:	f7fd fd90 	bl	801fce0 <__retarget_lock_release_recursive>
 80221c0:	89bb      	ldrh	r3, [r7, #12]
 80221c2:	065b      	lsls	r3, r3, #25
 80221c4:	d500      	bpl.n	80221c8 <_vfiprintf_r+0x20c>
 80221c6:	e71e      	b.n	8022006 <_vfiprintf_r+0x4a>
 80221c8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80221ca:	e71e      	b.n	802200a <_vfiprintf_r+0x4e>
 80221cc:	aa07      	add	r2, sp, #28
 80221ce:	9200      	str	r2, [sp, #0]
 80221d0:	0021      	movs	r1, r4
 80221d2:	003a      	movs	r2, r7
 80221d4:	4b06      	ldr	r3, [pc, #24]	@ (80221f0 <_vfiprintf_r+0x234>)
 80221d6:	9803      	ldr	r0, [sp, #12]
 80221d8:	f7fd f92c 	bl	801f434 <_printf_i>
 80221dc:	e7e3      	b.n	80221a6 <_vfiprintf_r+0x1ea>
 80221de:	46c0      	nop			@ (mov r8, r8)
 80221e0:	08025630 	.word	0x08025630
 80221e4:	08025636 	.word	0x08025636
 80221e8:	0802563a 	.word	0x0802563a
 80221ec:	0801eed9 	.word	0x0801eed9
 80221f0:	08021f97 	.word	0x08021f97

080221f4 <__sflush_r>:
 80221f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80221f6:	220c      	movs	r2, #12
 80221f8:	5e8b      	ldrsh	r3, [r1, r2]
 80221fa:	0005      	movs	r5, r0
 80221fc:	000c      	movs	r4, r1
 80221fe:	071a      	lsls	r2, r3, #28
 8022200:	d456      	bmi.n	80222b0 <__sflush_r+0xbc>
 8022202:	684a      	ldr	r2, [r1, #4]
 8022204:	2a00      	cmp	r2, #0
 8022206:	dc02      	bgt.n	802220e <__sflush_r+0x1a>
 8022208:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 802220a:	2a00      	cmp	r2, #0
 802220c:	dd4e      	ble.n	80222ac <__sflush_r+0xb8>
 802220e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022210:	2f00      	cmp	r7, #0
 8022212:	d04b      	beq.n	80222ac <__sflush_r+0xb8>
 8022214:	2200      	movs	r2, #0
 8022216:	2080      	movs	r0, #128	@ 0x80
 8022218:	682e      	ldr	r6, [r5, #0]
 802221a:	602a      	str	r2, [r5, #0]
 802221c:	001a      	movs	r2, r3
 802221e:	0140      	lsls	r0, r0, #5
 8022220:	6a21      	ldr	r1, [r4, #32]
 8022222:	4002      	ands	r2, r0
 8022224:	4203      	tst	r3, r0
 8022226:	d033      	beq.n	8022290 <__sflush_r+0x9c>
 8022228:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802222a:	89a3      	ldrh	r3, [r4, #12]
 802222c:	075b      	lsls	r3, r3, #29
 802222e:	d506      	bpl.n	802223e <__sflush_r+0x4a>
 8022230:	6863      	ldr	r3, [r4, #4]
 8022232:	1ad2      	subs	r2, r2, r3
 8022234:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022236:	2b00      	cmp	r3, #0
 8022238:	d001      	beq.n	802223e <__sflush_r+0x4a>
 802223a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802223c:	1ad2      	subs	r2, r2, r3
 802223e:	2300      	movs	r3, #0
 8022240:	0028      	movs	r0, r5
 8022242:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022244:	6a21      	ldr	r1, [r4, #32]
 8022246:	47b8      	blx	r7
 8022248:	89a2      	ldrh	r2, [r4, #12]
 802224a:	1c43      	adds	r3, r0, #1
 802224c:	d106      	bne.n	802225c <__sflush_r+0x68>
 802224e:	6829      	ldr	r1, [r5, #0]
 8022250:	291d      	cmp	r1, #29
 8022252:	d846      	bhi.n	80222e2 <__sflush_r+0xee>
 8022254:	4b29      	ldr	r3, [pc, #164]	@ (80222fc <__sflush_r+0x108>)
 8022256:	410b      	asrs	r3, r1
 8022258:	07db      	lsls	r3, r3, #31
 802225a:	d442      	bmi.n	80222e2 <__sflush_r+0xee>
 802225c:	2300      	movs	r3, #0
 802225e:	6063      	str	r3, [r4, #4]
 8022260:	6923      	ldr	r3, [r4, #16]
 8022262:	6023      	str	r3, [r4, #0]
 8022264:	04d2      	lsls	r2, r2, #19
 8022266:	d505      	bpl.n	8022274 <__sflush_r+0x80>
 8022268:	1c43      	adds	r3, r0, #1
 802226a:	d102      	bne.n	8022272 <__sflush_r+0x7e>
 802226c:	682b      	ldr	r3, [r5, #0]
 802226e:	2b00      	cmp	r3, #0
 8022270:	d100      	bne.n	8022274 <__sflush_r+0x80>
 8022272:	6560      	str	r0, [r4, #84]	@ 0x54
 8022274:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022276:	602e      	str	r6, [r5, #0]
 8022278:	2900      	cmp	r1, #0
 802227a:	d017      	beq.n	80222ac <__sflush_r+0xb8>
 802227c:	0023      	movs	r3, r4
 802227e:	3344      	adds	r3, #68	@ 0x44
 8022280:	4299      	cmp	r1, r3
 8022282:	d002      	beq.n	802228a <__sflush_r+0x96>
 8022284:	0028      	movs	r0, r5
 8022286:	f7fe fbc9 	bl	8020a1c <_free_r>
 802228a:	2300      	movs	r3, #0
 802228c:	6363      	str	r3, [r4, #52]	@ 0x34
 802228e:	e00d      	b.n	80222ac <__sflush_r+0xb8>
 8022290:	2301      	movs	r3, #1
 8022292:	0028      	movs	r0, r5
 8022294:	47b8      	blx	r7
 8022296:	0002      	movs	r2, r0
 8022298:	1c43      	adds	r3, r0, #1
 802229a:	d1c6      	bne.n	802222a <__sflush_r+0x36>
 802229c:	682b      	ldr	r3, [r5, #0]
 802229e:	2b00      	cmp	r3, #0
 80222a0:	d0c3      	beq.n	802222a <__sflush_r+0x36>
 80222a2:	2b1d      	cmp	r3, #29
 80222a4:	d001      	beq.n	80222aa <__sflush_r+0xb6>
 80222a6:	2b16      	cmp	r3, #22
 80222a8:	d11a      	bne.n	80222e0 <__sflush_r+0xec>
 80222aa:	602e      	str	r6, [r5, #0]
 80222ac:	2000      	movs	r0, #0
 80222ae:	e01e      	b.n	80222ee <__sflush_r+0xfa>
 80222b0:	690e      	ldr	r6, [r1, #16]
 80222b2:	2e00      	cmp	r6, #0
 80222b4:	d0fa      	beq.n	80222ac <__sflush_r+0xb8>
 80222b6:	680f      	ldr	r7, [r1, #0]
 80222b8:	600e      	str	r6, [r1, #0]
 80222ba:	1bba      	subs	r2, r7, r6
 80222bc:	9201      	str	r2, [sp, #4]
 80222be:	2200      	movs	r2, #0
 80222c0:	079b      	lsls	r3, r3, #30
 80222c2:	d100      	bne.n	80222c6 <__sflush_r+0xd2>
 80222c4:	694a      	ldr	r2, [r1, #20]
 80222c6:	60a2      	str	r2, [r4, #8]
 80222c8:	9b01      	ldr	r3, [sp, #4]
 80222ca:	2b00      	cmp	r3, #0
 80222cc:	ddee      	ble.n	80222ac <__sflush_r+0xb8>
 80222ce:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80222d0:	0032      	movs	r2, r6
 80222d2:	001f      	movs	r7, r3
 80222d4:	0028      	movs	r0, r5
 80222d6:	9b01      	ldr	r3, [sp, #4]
 80222d8:	6a21      	ldr	r1, [r4, #32]
 80222da:	47b8      	blx	r7
 80222dc:	2800      	cmp	r0, #0
 80222de:	dc07      	bgt.n	80222f0 <__sflush_r+0xfc>
 80222e0:	89a2      	ldrh	r2, [r4, #12]
 80222e2:	2340      	movs	r3, #64	@ 0x40
 80222e4:	2001      	movs	r0, #1
 80222e6:	4313      	orrs	r3, r2
 80222e8:	b21b      	sxth	r3, r3
 80222ea:	81a3      	strh	r3, [r4, #12]
 80222ec:	4240      	negs	r0, r0
 80222ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80222f0:	9b01      	ldr	r3, [sp, #4]
 80222f2:	1836      	adds	r6, r6, r0
 80222f4:	1a1b      	subs	r3, r3, r0
 80222f6:	9301      	str	r3, [sp, #4]
 80222f8:	e7e6      	b.n	80222c8 <__sflush_r+0xd4>
 80222fa:	46c0      	nop			@ (mov r8, r8)
 80222fc:	dfbffffe 	.word	0xdfbffffe

08022300 <_fflush_r>:
 8022300:	690b      	ldr	r3, [r1, #16]
 8022302:	b570      	push	{r4, r5, r6, lr}
 8022304:	0005      	movs	r5, r0
 8022306:	000c      	movs	r4, r1
 8022308:	2b00      	cmp	r3, #0
 802230a:	d102      	bne.n	8022312 <_fflush_r+0x12>
 802230c:	2500      	movs	r5, #0
 802230e:	0028      	movs	r0, r5
 8022310:	bd70      	pop	{r4, r5, r6, pc}
 8022312:	2800      	cmp	r0, #0
 8022314:	d004      	beq.n	8022320 <_fflush_r+0x20>
 8022316:	6a03      	ldr	r3, [r0, #32]
 8022318:	2b00      	cmp	r3, #0
 802231a:	d101      	bne.n	8022320 <_fflush_r+0x20>
 802231c:	f7fd fa28 	bl	801f770 <__sinit>
 8022320:	220c      	movs	r2, #12
 8022322:	5ea3      	ldrsh	r3, [r4, r2]
 8022324:	2b00      	cmp	r3, #0
 8022326:	d0f1      	beq.n	802230c <_fflush_r+0xc>
 8022328:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802232a:	07d2      	lsls	r2, r2, #31
 802232c:	d404      	bmi.n	8022338 <_fflush_r+0x38>
 802232e:	059b      	lsls	r3, r3, #22
 8022330:	d402      	bmi.n	8022338 <_fflush_r+0x38>
 8022332:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022334:	f7fd fcd3 	bl	801fcde <__retarget_lock_acquire_recursive>
 8022338:	0028      	movs	r0, r5
 802233a:	0021      	movs	r1, r4
 802233c:	f7ff ff5a 	bl	80221f4 <__sflush_r>
 8022340:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022342:	0005      	movs	r5, r0
 8022344:	07db      	lsls	r3, r3, #31
 8022346:	d4e2      	bmi.n	802230e <_fflush_r+0xe>
 8022348:	89a3      	ldrh	r3, [r4, #12]
 802234a:	059b      	lsls	r3, r3, #22
 802234c:	d4df      	bmi.n	802230e <_fflush_r+0xe>
 802234e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022350:	f7fd fcc6 	bl	801fce0 <__retarget_lock_release_recursive>
 8022354:	e7db      	b.n	802230e <_fflush_r+0xe>
	...

08022358 <__swhatbuf_r>:
 8022358:	b570      	push	{r4, r5, r6, lr}
 802235a:	000e      	movs	r6, r1
 802235c:	001d      	movs	r5, r3
 802235e:	230e      	movs	r3, #14
 8022360:	5ec9      	ldrsh	r1, [r1, r3]
 8022362:	0014      	movs	r4, r2
 8022364:	b096      	sub	sp, #88	@ 0x58
 8022366:	2900      	cmp	r1, #0
 8022368:	da0c      	bge.n	8022384 <__swhatbuf_r+0x2c>
 802236a:	89b2      	ldrh	r2, [r6, #12]
 802236c:	2380      	movs	r3, #128	@ 0x80
 802236e:	0011      	movs	r1, r2
 8022370:	4019      	ands	r1, r3
 8022372:	421a      	tst	r2, r3
 8022374:	d114      	bne.n	80223a0 <__swhatbuf_r+0x48>
 8022376:	2380      	movs	r3, #128	@ 0x80
 8022378:	00db      	lsls	r3, r3, #3
 802237a:	2000      	movs	r0, #0
 802237c:	6029      	str	r1, [r5, #0]
 802237e:	6023      	str	r3, [r4, #0]
 8022380:	b016      	add	sp, #88	@ 0x58
 8022382:	bd70      	pop	{r4, r5, r6, pc}
 8022384:	466a      	mov	r2, sp
 8022386:	f000 f865 	bl	8022454 <_fstat_r>
 802238a:	2800      	cmp	r0, #0
 802238c:	dbed      	blt.n	802236a <__swhatbuf_r+0x12>
 802238e:	23f0      	movs	r3, #240	@ 0xf0
 8022390:	9901      	ldr	r1, [sp, #4]
 8022392:	021b      	lsls	r3, r3, #8
 8022394:	4019      	ands	r1, r3
 8022396:	4b04      	ldr	r3, [pc, #16]	@ (80223a8 <__swhatbuf_r+0x50>)
 8022398:	18c9      	adds	r1, r1, r3
 802239a:	424b      	negs	r3, r1
 802239c:	4159      	adcs	r1, r3
 802239e:	e7ea      	b.n	8022376 <__swhatbuf_r+0x1e>
 80223a0:	2100      	movs	r1, #0
 80223a2:	2340      	movs	r3, #64	@ 0x40
 80223a4:	e7e9      	b.n	802237a <__swhatbuf_r+0x22>
 80223a6:	46c0      	nop			@ (mov r8, r8)
 80223a8:	ffffe000 	.word	0xffffe000

080223ac <__smakebuf_r>:
 80223ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80223ae:	2602      	movs	r6, #2
 80223b0:	898b      	ldrh	r3, [r1, #12]
 80223b2:	0005      	movs	r5, r0
 80223b4:	000c      	movs	r4, r1
 80223b6:	b085      	sub	sp, #20
 80223b8:	4233      	tst	r3, r6
 80223ba:	d007      	beq.n	80223cc <__smakebuf_r+0x20>
 80223bc:	0023      	movs	r3, r4
 80223be:	3347      	adds	r3, #71	@ 0x47
 80223c0:	6023      	str	r3, [r4, #0]
 80223c2:	6123      	str	r3, [r4, #16]
 80223c4:	2301      	movs	r3, #1
 80223c6:	6163      	str	r3, [r4, #20]
 80223c8:	b005      	add	sp, #20
 80223ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80223cc:	ab03      	add	r3, sp, #12
 80223ce:	aa02      	add	r2, sp, #8
 80223d0:	f7ff ffc2 	bl	8022358 <__swhatbuf_r>
 80223d4:	9f02      	ldr	r7, [sp, #8]
 80223d6:	9001      	str	r0, [sp, #4]
 80223d8:	0039      	movs	r1, r7
 80223da:	0028      	movs	r0, r5
 80223dc:	f7fe feee 	bl	80211bc <_malloc_r>
 80223e0:	2800      	cmp	r0, #0
 80223e2:	d108      	bne.n	80223f6 <__smakebuf_r+0x4a>
 80223e4:	220c      	movs	r2, #12
 80223e6:	5ea3      	ldrsh	r3, [r4, r2]
 80223e8:	059a      	lsls	r2, r3, #22
 80223ea:	d4ed      	bmi.n	80223c8 <__smakebuf_r+0x1c>
 80223ec:	2203      	movs	r2, #3
 80223ee:	4393      	bics	r3, r2
 80223f0:	431e      	orrs	r6, r3
 80223f2:	81a6      	strh	r6, [r4, #12]
 80223f4:	e7e2      	b.n	80223bc <__smakebuf_r+0x10>
 80223f6:	2380      	movs	r3, #128	@ 0x80
 80223f8:	89a2      	ldrh	r2, [r4, #12]
 80223fa:	6020      	str	r0, [r4, #0]
 80223fc:	4313      	orrs	r3, r2
 80223fe:	81a3      	strh	r3, [r4, #12]
 8022400:	9b03      	ldr	r3, [sp, #12]
 8022402:	6120      	str	r0, [r4, #16]
 8022404:	6167      	str	r7, [r4, #20]
 8022406:	2b00      	cmp	r3, #0
 8022408:	d00c      	beq.n	8022424 <__smakebuf_r+0x78>
 802240a:	0028      	movs	r0, r5
 802240c:	230e      	movs	r3, #14
 802240e:	5ee1      	ldrsh	r1, [r4, r3]
 8022410:	f000 f832 	bl	8022478 <_isatty_r>
 8022414:	2800      	cmp	r0, #0
 8022416:	d005      	beq.n	8022424 <__smakebuf_r+0x78>
 8022418:	2303      	movs	r3, #3
 802241a:	89a2      	ldrh	r2, [r4, #12]
 802241c:	439a      	bics	r2, r3
 802241e:	3b02      	subs	r3, #2
 8022420:	4313      	orrs	r3, r2
 8022422:	81a3      	strh	r3, [r4, #12]
 8022424:	89a3      	ldrh	r3, [r4, #12]
 8022426:	9a01      	ldr	r2, [sp, #4]
 8022428:	4313      	orrs	r3, r2
 802242a:	81a3      	strh	r3, [r4, #12]
 802242c:	e7cc      	b.n	80223c8 <__smakebuf_r+0x1c>

0802242e <memmove>:
 802242e:	b510      	push	{r4, lr}
 8022430:	4288      	cmp	r0, r1
 8022432:	d806      	bhi.n	8022442 <memmove+0x14>
 8022434:	2300      	movs	r3, #0
 8022436:	429a      	cmp	r2, r3
 8022438:	d008      	beq.n	802244c <memmove+0x1e>
 802243a:	5ccc      	ldrb	r4, [r1, r3]
 802243c:	54c4      	strb	r4, [r0, r3]
 802243e:	3301      	adds	r3, #1
 8022440:	e7f9      	b.n	8022436 <memmove+0x8>
 8022442:	188b      	adds	r3, r1, r2
 8022444:	4298      	cmp	r0, r3
 8022446:	d2f5      	bcs.n	8022434 <memmove+0x6>
 8022448:	3a01      	subs	r2, #1
 802244a:	d200      	bcs.n	802244e <memmove+0x20>
 802244c:	bd10      	pop	{r4, pc}
 802244e:	5c8b      	ldrb	r3, [r1, r2]
 8022450:	5483      	strb	r3, [r0, r2]
 8022452:	e7f9      	b.n	8022448 <memmove+0x1a>

08022454 <_fstat_r>:
 8022454:	2300      	movs	r3, #0
 8022456:	b570      	push	{r4, r5, r6, lr}
 8022458:	4d06      	ldr	r5, [pc, #24]	@ (8022474 <_fstat_r+0x20>)
 802245a:	0004      	movs	r4, r0
 802245c:	0008      	movs	r0, r1
 802245e:	0011      	movs	r1, r2
 8022460:	602b      	str	r3, [r5, #0]
 8022462:	f7eb f867 	bl	800d534 <_fstat>
 8022466:	1c43      	adds	r3, r0, #1
 8022468:	d103      	bne.n	8022472 <_fstat_r+0x1e>
 802246a:	682b      	ldr	r3, [r5, #0]
 802246c:	2b00      	cmp	r3, #0
 802246e:	d000      	beq.n	8022472 <_fstat_r+0x1e>
 8022470:	6023      	str	r3, [r4, #0]
 8022472:	bd70      	pop	{r4, r5, r6, pc}
 8022474:	20003994 	.word	0x20003994

08022478 <_isatty_r>:
 8022478:	2300      	movs	r3, #0
 802247a:	b570      	push	{r4, r5, r6, lr}
 802247c:	4d06      	ldr	r5, [pc, #24]	@ (8022498 <_isatty_r+0x20>)
 802247e:	0004      	movs	r4, r0
 8022480:	0008      	movs	r0, r1
 8022482:	602b      	str	r3, [r5, #0]
 8022484:	f7eb f864 	bl	800d550 <_isatty>
 8022488:	1c43      	adds	r3, r0, #1
 802248a:	d103      	bne.n	8022494 <_isatty_r+0x1c>
 802248c:	682b      	ldr	r3, [r5, #0]
 802248e:	2b00      	cmp	r3, #0
 8022490:	d000      	beq.n	8022494 <_isatty_r+0x1c>
 8022492:	6023      	str	r3, [r4, #0]
 8022494:	bd70      	pop	{r4, r5, r6, pc}
 8022496:	46c0      	nop			@ (mov r8, r8)
 8022498:	20003994 	.word	0x20003994

0802249c <_sbrk_r>:
 802249c:	2300      	movs	r3, #0
 802249e:	b570      	push	{r4, r5, r6, lr}
 80224a0:	4d06      	ldr	r5, [pc, #24]	@ (80224bc <_sbrk_r+0x20>)
 80224a2:	0004      	movs	r4, r0
 80224a4:	0008      	movs	r0, r1
 80224a6:	602b      	str	r3, [r5, #0]
 80224a8:	f7eb f866 	bl	800d578 <_sbrk>
 80224ac:	1c43      	adds	r3, r0, #1
 80224ae:	d103      	bne.n	80224b8 <_sbrk_r+0x1c>
 80224b0:	682b      	ldr	r3, [r5, #0]
 80224b2:	2b00      	cmp	r3, #0
 80224b4:	d000      	beq.n	80224b8 <_sbrk_r+0x1c>
 80224b6:	6023      	str	r3, [r4, #0]
 80224b8:	bd70      	pop	{r4, r5, r6, pc}
 80224ba:	46c0      	nop			@ (mov r8, r8)
 80224bc:	20003994 	.word	0x20003994

080224c0 <__assert_func>:
 80224c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80224c2:	0014      	movs	r4, r2
 80224c4:	001a      	movs	r2, r3
 80224c6:	4b09      	ldr	r3, [pc, #36]	@ (80224ec <__assert_func+0x2c>)
 80224c8:	0005      	movs	r5, r0
 80224ca:	681b      	ldr	r3, [r3, #0]
 80224cc:	000e      	movs	r6, r1
 80224ce:	68d8      	ldr	r0, [r3, #12]
 80224d0:	4b07      	ldr	r3, [pc, #28]	@ (80224f0 <__assert_func+0x30>)
 80224d2:	2c00      	cmp	r4, #0
 80224d4:	d101      	bne.n	80224da <__assert_func+0x1a>
 80224d6:	4b07      	ldr	r3, [pc, #28]	@ (80224f4 <__assert_func+0x34>)
 80224d8:	001c      	movs	r4, r3
 80224da:	4907      	ldr	r1, [pc, #28]	@ (80224f8 <__assert_func+0x38>)
 80224dc:	9301      	str	r3, [sp, #4]
 80224de:	9402      	str	r4, [sp, #8]
 80224e0:	002b      	movs	r3, r5
 80224e2:	9600      	str	r6, [sp, #0]
 80224e4:	f000 f866 	bl	80225b4 <fiprintf>
 80224e8:	f000 f874 	bl	80225d4 <abort>
 80224ec:	200003cc 	.word	0x200003cc
 80224f0:	08025641 	.word	0x08025641
 80224f4:	0802567c 	.word	0x0802567c
 80224f8:	0802564e 	.word	0x0802564e

080224fc <_calloc_r>:
 80224fc:	b570      	push	{r4, r5, r6, lr}
 80224fe:	0c0b      	lsrs	r3, r1, #16
 8022500:	0c15      	lsrs	r5, r2, #16
 8022502:	2b00      	cmp	r3, #0
 8022504:	d11e      	bne.n	8022544 <_calloc_r+0x48>
 8022506:	2d00      	cmp	r5, #0
 8022508:	d10c      	bne.n	8022524 <_calloc_r+0x28>
 802250a:	b289      	uxth	r1, r1
 802250c:	b294      	uxth	r4, r2
 802250e:	434c      	muls	r4, r1
 8022510:	0021      	movs	r1, r4
 8022512:	f7fe fe53 	bl	80211bc <_malloc_r>
 8022516:	1e05      	subs	r5, r0, #0
 8022518:	d01a      	beq.n	8022550 <_calloc_r+0x54>
 802251a:	0022      	movs	r2, r4
 802251c:	2100      	movs	r1, #0
 802251e:	f7fd fb0f 	bl	801fb40 <memset>
 8022522:	e016      	b.n	8022552 <_calloc_r+0x56>
 8022524:	1c2b      	adds	r3, r5, #0
 8022526:	1c0c      	adds	r4, r1, #0
 8022528:	b289      	uxth	r1, r1
 802252a:	b292      	uxth	r2, r2
 802252c:	434a      	muls	r2, r1
 802252e:	b29b      	uxth	r3, r3
 8022530:	b2a1      	uxth	r1, r4
 8022532:	4359      	muls	r1, r3
 8022534:	0c14      	lsrs	r4, r2, #16
 8022536:	190c      	adds	r4, r1, r4
 8022538:	0c23      	lsrs	r3, r4, #16
 802253a:	d107      	bne.n	802254c <_calloc_r+0x50>
 802253c:	0424      	lsls	r4, r4, #16
 802253e:	b292      	uxth	r2, r2
 8022540:	4314      	orrs	r4, r2
 8022542:	e7e5      	b.n	8022510 <_calloc_r+0x14>
 8022544:	2d00      	cmp	r5, #0
 8022546:	d101      	bne.n	802254c <_calloc_r+0x50>
 8022548:	1c14      	adds	r4, r2, #0
 802254a:	e7ed      	b.n	8022528 <_calloc_r+0x2c>
 802254c:	230c      	movs	r3, #12
 802254e:	6003      	str	r3, [r0, #0]
 8022550:	2500      	movs	r5, #0
 8022552:	0028      	movs	r0, r5
 8022554:	bd70      	pop	{r4, r5, r6, pc}

08022556 <_realloc_r>:
 8022556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022558:	0006      	movs	r6, r0
 802255a:	000c      	movs	r4, r1
 802255c:	0015      	movs	r5, r2
 802255e:	2900      	cmp	r1, #0
 8022560:	d105      	bne.n	802256e <_realloc_r+0x18>
 8022562:	0011      	movs	r1, r2
 8022564:	f7fe fe2a 	bl	80211bc <_malloc_r>
 8022568:	0004      	movs	r4, r0
 802256a:	0020      	movs	r0, r4
 802256c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802256e:	2a00      	cmp	r2, #0
 8022570:	d103      	bne.n	802257a <_realloc_r+0x24>
 8022572:	f7fe fa53 	bl	8020a1c <_free_r>
 8022576:	2400      	movs	r4, #0
 8022578:	e7f7      	b.n	802256a <_realloc_r+0x14>
 802257a:	f000 f832 	bl	80225e2 <_malloc_usable_size_r>
 802257e:	0007      	movs	r7, r0
 8022580:	4285      	cmp	r5, r0
 8022582:	d802      	bhi.n	802258a <_realloc_r+0x34>
 8022584:	0843      	lsrs	r3, r0, #1
 8022586:	42ab      	cmp	r3, r5
 8022588:	d3ef      	bcc.n	802256a <_realloc_r+0x14>
 802258a:	0029      	movs	r1, r5
 802258c:	0030      	movs	r0, r6
 802258e:	f7fe fe15 	bl	80211bc <_malloc_r>
 8022592:	9001      	str	r0, [sp, #4]
 8022594:	2800      	cmp	r0, #0
 8022596:	d0ee      	beq.n	8022576 <_realloc_r+0x20>
 8022598:	002a      	movs	r2, r5
 802259a:	42bd      	cmp	r5, r7
 802259c:	d900      	bls.n	80225a0 <_realloc_r+0x4a>
 802259e:	003a      	movs	r2, r7
 80225a0:	0021      	movs	r1, r4
 80225a2:	9801      	ldr	r0, [sp, #4]
 80225a4:	f7fd fba8 	bl	801fcf8 <memcpy>
 80225a8:	0021      	movs	r1, r4
 80225aa:	0030      	movs	r0, r6
 80225ac:	f7fe fa36 	bl	8020a1c <_free_r>
 80225b0:	9c01      	ldr	r4, [sp, #4]
 80225b2:	e7da      	b.n	802256a <_realloc_r+0x14>

080225b4 <fiprintf>:
 80225b4:	b40e      	push	{r1, r2, r3}
 80225b6:	b517      	push	{r0, r1, r2, r4, lr}
 80225b8:	4c05      	ldr	r4, [pc, #20]	@ (80225d0 <fiprintf+0x1c>)
 80225ba:	ab05      	add	r3, sp, #20
 80225bc:	cb04      	ldmia	r3!, {r2}
 80225be:	0001      	movs	r1, r0
 80225c0:	6820      	ldr	r0, [r4, #0]
 80225c2:	9301      	str	r3, [sp, #4]
 80225c4:	f7ff fcfa 	bl	8021fbc <_vfiprintf_r>
 80225c8:	bc1e      	pop	{r1, r2, r3, r4}
 80225ca:	bc08      	pop	{r3}
 80225cc:	b003      	add	sp, #12
 80225ce:	4718      	bx	r3
 80225d0:	200003cc 	.word	0x200003cc

080225d4 <abort>:
 80225d4:	2006      	movs	r0, #6
 80225d6:	b510      	push	{r4, lr}
 80225d8:	f000 f834 	bl	8022644 <raise>
 80225dc:	2001      	movs	r0, #1
 80225de:	f7ea ff75 	bl	800d4cc <_exit>

080225e2 <_malloc_usable_size_r>:
 80225e2:	1f0b      	subs	r3, r1, #4
 80225e4:	681b      	ldr	r3, [r3, #0]
 80225e6:	1f18      	subs	r0, r3, #4
 80225e8:	2b00      	cmp	r3, #0
 80225ea:	da01      	bge.n	80225f0 <_malloc_usable_size_r+0xe>
 80225ec:	580b      	ldr	r3, [r1, r0]
 80225ee:	18c0      	adds	r0, r0, r3
 80225f0:	4770      	bx	lr

080225f2 <_raise_r>:
 80225f2:	b570      	push	{r4, r5, r6, lr}
 80225f4:	0004      	movs	r4, r0
 80225f6:	000d      	movs	r5, r1
 80225f8:	291f      	cmp	r1, #31
 80225fa:	d904      	bls.n	8022606 <_raise_r+0x14>
 80225fc:	2316      	movs	r3, #22
 80225fe:	6003      	str	r3, [r0, #0]
 8022600:	2001      	movs	r0, #1
 8022602:	4240      	negs	r0, r0
 8022604:	bd70      	pop	{r4, r5, r6, pc}
 8022606:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8022608:	2b00      	cmp	r3, #0
 802260a:	d004      	beq.n	8022616 <_raise_r+0x24>
 802260c:	008a      	lsls	r2, r1, #2
 802260e:	189b      	adds	r3, r3, r2
 8022610:	681a      	ldr	r2, [r3, #0]
 8022612:	2a00      	cmp	r2, #0
 8022614:	d108      	bne.n	8022628 <_raise_r+0x36>
 8022616:	0020      	movs	r0, r4
 8022618:	f000 f830 	bl	802267c <_getpid_r>
 802261c:	002a      	movs	r2, r5
 802261e:	0001      	movs	r1, r0
 8022620:	0020      	movs	r0, r4
 8022622:	f000 f819 	bl	8022658 <_kill_r>
 8022626:	e7ed      	b.n	8022604 <_raise_r+0x12>
 8022628:	2a01      	cmp	r2, #1
 802262a:	d009      	beq.n	8022640 <_raise_r+0x4e>
 802262c:	1c51      	adds	r1, r2, #1
 802262e:	d103      	bne.n	8022638 <_raise_r+0x46>
 8022630:	2316      	movs	r3, #22
 8022632:	6003      	str	r3, [r0, #0]
 8022634:	2001      	movs	r0, #1
 8022636:	e7e5      	b.n	8022604 <_raise_r+0x12>
 8022638:	2100      	movs	r1, #0
 802263a:	0028      	movs	r0, r5
 802263c:	6019      	str	r1, [r3, #0]
 802263e:	4790      	blx	r2
 8022640:	2000      	movs	r0, #0
 8022642:	e7df      	b.n	8022604 <_raise_r+0x12>

08022644 <raise>:
 8022644:	b510      	push	{r4, lr}
 8022646:	4b03      	ldr	r3, [pc, #12]	@ (8022654 <raise+0x10>)
 8022648:	0001      	movs	r1, r0
 802264a:	6818      	ldr	r0, [r3, #0]
 802264c:	f7ff ffd1 	bl	80225f2 <_raise_r>
 8022650:	bd10      	pop	{r4, pc}
 8022652:	46c0      	nop			@ (mov r8, r8)
 8022654:	200003cc 	.word	0x200003cc

08022658 <_kill_r>:
 8022658:	2300      	movs	r3, #0
 802265a:	b570      	push	{r4, r5, r6, lr}
 802265c:	4d06      	ldr	r5, [pc, #24]	@ (8022678 <_kill_r+0x20>)
 802265e:	0004      	movs	r4, r0
 8022660:	0008      	movs	r0, r1
 8022662:	0011      	movs	r1, r2
 8022664:	602b      	str	r3, [r5, #0]
 8022666:	f7ea ff21 	bl	800d4ac <_kill>
 802266a:	1c43      	adds	r3, r0, #1
 802266c:	d103      	bne.n	8022676 <_kill_r+0x1e>
 802266e:	682b      	ldr	r3, [r5, #0]
 8022670:	2b00      	cmp	r3, #0
 8022672:	d000      	beq.n	8022676 <_kill_r+0x1e>
 8022674:	6023      	str	r3, [r4, #0]
 8022676:	bd70      	pop	{r4, r5, r6, pc}
 8022678:	20003994 	.word	0x20003994

0802267c <_getpid_r>:
 802267c:	b510      	push	{r4, lr}
 802267e:	f7ea ff0f 	bl	800d4a0 <_getpid>
 8022682:	bd10      	pop	{r4, pc}

08022684 <expf>:
 8022684:	b570      	push	{r4, r5, r6, lr}
 8022686:	1c04      	adds	r4, r0, #0
 8022688:	f000 f8e6 	bl	8022858 <__ieee754_expf>
 802268c:	1c05      	adds	r5, r0, #0
 802268e:	1c20      	adds	r0, r4, #0
 8022690:	f000 f83c 	bl	802270c <finitef>
 8022694:	2800      	cmp	r0, #0
 8022696:	d00b      	beq.n	80226b0 <expf+0x2c>
 8022698:	490c      	ldr	r1, [pc, #48]	@ (80226cc <expf+0x48>)
 802269a:	1c20      	adds	r0, r4, #0
 802269c:	f7dd ff5c 	bl	8000558 <__aeabi_fcmpgt>
 80226a0:	2800      	cmp	r0, #0
 80226a2:	d007      	beq.n	80226b4 <expf+0x30>
 80226a4:	f7fd faf0 	bl	801fc88 <__errno>
 80226a8:	25ff      	movs	r5, #255	@ 0xff
 80226aa:	2322      	movs	r3, #34	@ 0x22
 80226ac:	05ed      	lsls	r5, r5, #23
 80226ae:	6003      	str	r3, [r0, #0]
 80226b0:	1c28      	adds	r0, r5, #0
 80226b2:	bd70      	pop	{r4, r5, r6, pc}
 80226b4:	4906      	ldr	r1, [pc, #24]	@ (80226d0 <expf+0x4c>)
 80226b6:	1c20      	adds	r0, r4, #0
 80226b8:	f7dd ff3a 	bl	8000530 <__aeabi_fcmplt>
 80226bc:	2800      	cmp	r0, #0
 80226be:	d0f7      	beq.n	80226b0 <expf+0x2c>
 80226c0:	f7fd fae2 	bl	801fc88 <__errno>
 80226c4:	2322      	movs	r3, #34	@ 0x22
 80226c6:	2500      	movs	r5, #0
 80226c8:	6003      	str	r3, [r0, #0]
 80226ca:	e7f1      	b.n	80226b0 <expf+0x2c>
 80226cc:	42b17217 	.word	0x42b17217
 80226d0:	c2cff1b5 	.word	0xc2cff1b5

080226d4 <sqrtf>:
 80226d4:	b570      	push	{r4, r5, r6, lr}
 80226d6:	1c05      	adds	r5, r0, #0
 80226d8:	f000 f822 	bl	8022720 <__ieee754_sqrtf>
 80226dc:	1c29      	adds	r1, r5, #0
 80226de:	1c04      	adds	r4, r0, #0
 80226e0:	1c28      	adds	r0, r5, #0
 80226e2:	f7de ff3f 	bl	8001564 <__aeabi_fcmpun>
 80226e6:	2800      	cmp	r0, #0
 80226e8:	d10e      	bne.n	8022708 <sqrtf+0x34>
 80226ea:	2100      	movs	r1, #0
 80226ec:	1c28      	adds	r0, r5, #0
 80226ee:	f7dd ff1f 	bl	8000530 <__aeabi_fcmplt>
 80226f2:	2800      	cmp	r0, #0
 80226f4:	d008      	beq.n	8022708 <sqrtf+0x34>
 80226f6:	f7fd fac7 	bl	801fc88 <__errno>
 80226fa:	2321      	movs	r3, #33	@ 0x21
 80226fc:	2100      	movs	r1, #0
 80226fe:	6003      	str	r3, [r0, #0]
 8022700:	1c08      	adds	r0, r1, #0
 8022702:	f7de fa67 	bl	8000bd4 <__aeabi_fdiv>
 8022706:	1c04      	adds	r4, r0, #0
 8022708:	1c20      	adds	r0, r4, #0
 802270a:	bd70      	pop	{r4, r5, r6, pc}

0802270c <finitef>:
 802270c:	22ff      	movs	r2, #255	@ 0xff
 802270e:	0043      	lsls	r3, r0, #1
 8022710:	085b      	lsrs	r3, r3, #1
 8022712:	2001      	movs	r0, #1
 8022714:	05d2      	lsls	r2, r2, #23
 8022716:	4293      	cmp	r3, r2
 8022718:	db00      	blt.n	802271c <finitef+0x10>
 802271a:	2000      	movs	r0, #0
 802271c:	4770      	bx	lr
	...

08022720 <__ieee754_sqrtf>:
 8022720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022722:	0003      	movs	r3, r0
 8022724:	0042      	lsls	r2, r0, #1
 8022726:	1c04      	adds	r4, r0, #0
 8022728:	20ff      	movs	r0, #255	@ 0xff
 802272a:	0852      	lsrs	r2, r2, #1
 802272c:	05c0      	lsls	r0, r0, #23
 802272e:	4282      	cmp	r2, r0
 8022730:	d30a      	bcc.n	8022748 <__ieee754_sqrtf+0x28>
 8022732:	1c21      	adds	r1, r4, #0
 8022734:	1c20      	adds	r0, r4, #0
 8022736:	f7de fc33 	bl	8000fa0 <__aeabi_fmul>
 802273a:	1c01      	adds	r1, r0, #0
 802273c:	1c20      	adds	r0, r4, #0
 802273e:	f7de f8bf 	bl	80008c0 <__aeabi_fadd>
 8022742:	1c04      	adds	r4, r0, #0
 8022744:	1c20      	adds	r0, r4, #0
 8022746:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022748:	2a00      	cmp	r2, #0
 802274a:	d0fb      	beq.n	8022744 <__ieee754_sqrtf+0x24>
 802274c:	2c00      	cmp	r4, #0
 802274e:	da07      	bge.n	8022760 <__ieee754_sqrtf+0x40>
 8022750:	1c21      	adds	r1, r4, #0
 8022752:	1c20      	adds	r0, r4, #0
 8022754:	f7de fd62 	bl	800121c <__aeabi_fsub>
 8022758:	1c01      	adds	r1, r0, #0
 802275a:	f7de fa3b 	bl	8000bd4 <__aeabi_fdiv>
 802275e:	e7f0      	b.n	8022742 <__ieee754_sqrtf+0x22>
 8022760:	0022      	movs	r2, r4
 8022762:	15e1      	asrs	r1, r4, #23
 8022764:	4002      	ands	r2, r0
 8022766:	4204      	tst	r4, r0
 8022768:	d046      	beq.n	80227f8 <__ieee754_sqrtf+0xd8>
 802276a:	2280      	movs	r2, #128	@ 0x80
 802276c:	000f      	movs	r7, r1
 802276e:	025b      	lsls	r3, r3, #9
 8022770:	0a5b      	lsrs	r3, r3, #9
 8022772:	0412      	lsls	r2, r2, #16
 8022774:	3f7f      	subs	r7, #127	@ 0x7f
 8022776:	4313      	orrs	r3, r2
 8022778:	07c9      	lsls	r1, r1, #31
 802277a:	d400      	bmi.n	802277e <__ieee754_sqrtf+0x5e>
 802277c:	005b      	lsls	r3, r3, #1
 802277e:	2400      	movs	r4, #0
 8022780:	2180      	movs	r1, #128	@ 0x80
 8022782:	2019      	movs	r0, #25
 8022784:	0026      	movs	r6, r4
 8022786:	107f      	asrs	r7, r7, #1
 8022788:	005b      	lsls	r3, r3, #1
 802278a:	0449      	lsls	r1, r1, #17
 802278c:	1875      	adds	r5, r6, r1
 802278e:	001a      	movs	r2, r3
 8022790:	429d      	cmp	r5, r3
 8022792:	dc02      	bgt.n	802279a <__ieee754_sqrtf+0x7a>
 8022794:	186e      	adds	r6, r5, r1
 8022796:	1b5a      	subs	r2, r3, r5
 8022798:	1864      	adds	r4, r4, r1
 802279a:	3801      	subs	r0, #1
 802279c:	0053      	lsls	r3, r2, #1
 802279e:	0849      	lsrs	r1, r1, #1
 80227a0:	2800      	cmp	r0, #0
 80227a2:	d1f3      	bne.n	802278c <__ieee754_sqrtf+0x6c>
 80227a4:	2a00      	cmp	r2, #0
 80227a6:	d019      	beq.n	80227dc <__ieee754_sqrtf+0xbc>
 80227a8:	4d17      	ldr	r5, [pc, #92]	@ (8022808 <__ieee754_sqrtf+0xe8>)
 80227aa:	4e18      	ldr	r6, [pc, #96]	@ (802280c <__ieee754_sqrtf+0xec>)
 80227ac:	6828      	ldr	r0, [r5, #0]
 80227ae:	6831      	ldr	r1, [r6, #0]
 80227b0:	682b      	ldr	r3, [r5, #0]
 80227b2:	9301      	str	r3, [sp, #4]
 80227b4:	f7de fd32 	bl	800121c <__aeabi_fsub>
 80227b8:	1c01      	adds	r1, r0, #0
 80227ba:	9801      	ldr	r0, [sp, #4]
 80227bc:	f7dd fec2 	bl	8000544 <__aeabi_fcmple>
 80227c0:	2800      	cmp	r0, #0
 80227c2:	d00b      	beq.n	80227dc <__ieee754_sqrtf+0xbc>
 80227c4:	6828      	ldr	r0, [r5, #0]
 80227c6:	6831      	ldr	r1, [r6, #0]
 80227c8:	f7de f87a 	bl	80008c0 <__aeabi_fadd>
 80227cc:	682d      	ldr	r5, [r5, #0]
 80227ce:	1c01      	adds	r1, r0, #0
 80227d0:	1c28      	adds	r0, r5, #0
 80227d2:	f7dd fead 	bl	8000530 <__aeabi_fcmplt>
 80227d6:	2800      	cmp	r0, #0
 80227d8:	d011      	beq.n	80227fe <__ieee754_sqrtf+0xde>
 80227da:	3402      	adds	r4, #2
 80227dc:	23fc      	movs	r3, #252	@ 0xfc
 80227de:	1064      	asrs	r4, r4, #1
 80227e0:	059b      	lsls	r3, r3, #22
 80227e2:	18e3      	adds	r3, r4, r3
 80227e4:	05fc      	lsls	r4, r7, #23
 80227e6:	18e4      	adds	r4, r4, r3
 80227e8:	e7ac      	b.n	8022744 <__ieee754_sqrtf+0x24>
 80227ea:	005b      	lsls	r3, r3, #1
 80227ec:	3201      	adds	r2, #1
 80227ee:	4203      	tst	r3, r0
 80227f0:	d0fb      	beq.n	80227ea <__ieee754_sqrtf+0xca>
 80227f2:	3a01      	subs	r2, #1
 80227f4:	1a89      	subs	r1, r1, r2
 80227f6:	e7b8      	b.n	802276a <__ieee754_sqrtf+0x4a>
 80227f8:	2080      	movs	r0, #128	@ 0x80
 80227fa:	0400      	lsls	r0, r0, #16
 80227fc:	e7f7      	b.n	80227ee <__ieee754_sqrtf+0xce>
 80227fe:	2301      	movs	r3, #1
 8022800:	3401      	adds	r4, #1
 8022802:	439c      	bics	r4, r3
 8022804:	e7ea      	b.n	80227dc <__ieee754_sqrtf+0xbc>
 8022806:	46c0      	nop			@ (mov r8, r8)
 8022808:	20000420 	.word	0x20000420
 802280c:	2000041c 	.word	0x2000041c

08022810 <roundf>:
 8022810:	0dc3      	lsrs	r3, r0, #23
 8022812:	b2db      	uxtb	r3, r3
 8022814:	3b7f      	subs	r3, #127	@ 0x7f
 8022816:	0002      	movs	r2, r0
 8022818:	b510      	push	{r4, lr}
 802281a:	2b16      	cmp	r3, #22
 802281c:	dc13      	bgt.n	8022846 <roundf+0x36>
 802281e:	2b00      	cmp	r3, #0
 8022820:	da07      	bge.n	8022832 <roundf+0x22>
 8022822:	0fc2      	lsrs	r2, r0, #31
 8022824:	07d0      	lsls	r0, r2, #31
 8022826:	3301      	adds	r3, #1
 8022828:	d102      	bne.n	8022830 <roundf+0x20>
 802282a:	23fe      	movs	r3, #254	@ 0xfe
 802282c:	059b      	lsls	r3, r3, #22
 802282e:	4318      	orrs	r0, r3
 8022830:	bd10      	pop	{r4, pc}
 8022832:	4908      	ldr	r1, [pc, #32]	@ (8022854 <roundf+0x44>)
 8022834:	4119      	asrs	r1, r3
 8022836:	4208      	tst	r0, r1
 8022838:	d0fa      	beq.n	8022830 <roundf+0x20>
 802283a:	2080      	movs	r0, #128	@ 0x80
 802283c:	03c0      	lsls	r0, r0, #15
 802283e:	4118      	asrs	r0, r3
 8022840:	1880      	adds	r0, r0, r2
 8022842:	4388      	bics	r0, r1
 8022844:	e7f4      	b.n	8022830 <roundf+0x20>
 8022846:	2b80      	cmp	r3, #128	@ 0x80
 8022848:	d1f2      	bne.n	8022830 <roundf+0x20>
 802284a:	1c01      	adds	r1, r0, #0
 802284c:	f7de f838 	bl	80008c0 <__aeabi_fadd>
 8022850:	e7ee      	b.n	8022830 <roundf+0x20>
 8022852:	46c0      	nop			@ (mov r8, r8)
 8022854:	007fffff 	.word	0x007fffff

08022858 <__ieee754_expf>:
 8022858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802285a:	21ff      	movs	r1, #255	@ 0xff
 802285c:	0043      	lsls	r3, r0, #1
 802285e:	1c04      	adds	r4, r0, #0
 8022860:	085b      	lsrs	r3, r3, #1
 8022862:	05c9      	lsls	r1, r1, #23
 8022864:	428b      	cmp	r3, r1
 8022866:	d904      	bls.n	8022872 <__ieee754_expf+0x1a>
 8022868:	1c01      	adds	r1, r0, #0
 802286a:	1c20      	adds	r0, r4, #0
 802286c:	f7de f828 	bl	80008c0 <__aeabi_fadd>
 8022870:	e00d      	b.n	802288e <__ieee754_expf+0x36>
 8022872:	0fc6      	lsrs	r6, r0, #31
 8022874:	428b      	cmp	r3, r1
 8022876:	d104      	bne.n	8022882 <__ieee754_expf+0x2a>
 8022878:	2e00      	cmp	r6, #0
 802287a:	d000      	beq.n	802287e <__ieee754_expf+0x26>
 802287c:	e0ba      	b.n	80229f4 <__ieee754_expf+0x19c>
 802287e:	1c20      	adds	r0, r4, #0
 8022880:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022882:	495d      	ldr	r1, [pc, #372]	@ (80229f8 <__ieee754_expf+0x1a0>)
 8022884:	4288      	cmp	r0, r1
 8022886:	dd04      	ble.n	8022892 <__ieee754_expf+0x3a>
 8022888:	2000      	movs	r0, #0
 802288a:	f000 f8f1 	bl	8022a70 <__math_oflowf>
 802288e:	1c04      	adds	r4, r0, #0
 8022890:	e7f5      	b.n	802287e <__ieee754_expf+0x26>
 8022892:	2800      	cmp	r0, #0
 8022894:	da06      	bge.n	80228a4 <__ieee754_expf+0x4c>
 8022896:	4a59      	ldr	r2, [pc, #356]	@ (80229fc <__ieee754_expf+0x1a4>)
 8022898:	4293      	cmp	r3, r2
 802289a:	d903      	bls.n	80228a4 <__ieee754_expf+0x4c>
 802289c:	2000      	movs	r0, #0
 802289e:	f000 f8e1 	bl	8022a64 <__math_uflowf>
 80228a2:	e7f4      	b.n	802288e <__ieee754_expf+0x36>
 80228a4:	4a56      	ldr	r2, [pc, #344]	@ (8022a00 <__ieee754_expf+0x1a8>)
 80228a6:	4293      	cmp	r3, r2
 80228a8:	d96e      	bls.n	8022988 <__ieee754_expf+0x130>
 80228aa:	4a56      	ldr	r2, [pc, #344]	@ (8022a04 <__ieee754_expf+0x1ac>)
 80228ac:	00b5      	lsls	r5, r6, #2
 80228ae:	4293      	cmp	r3, r2
 80228b0:	d84e      	bhi.n	8022950 <__ieee754_expf+0xf8>
 80228b2:	4b55      	ldr	r3, [pc, #340]	@ (8022a08 <__ieee754_expf+0x1b0>)
 80228b4:	1c20      	adds	r0, r4, #0
 80228b6:	5959      	ldr	r1, [r3, r5]
 80228b8:	f7de fcb0 	bl	800121c <__aeabi_fsub>
 80228bc:	4b53      	ldr	r3, [pc, #332]	@ (8022a0c <__ieee754_expf+0x1b4>)
 80228be:	1c07      	adds	r7, r0, #0
 80228c0:	595b      	ldr	r3, [r3, r5]
 80228c2:	2501      	movs	r5, #1
 80228c4:	1bad      	subs	r5, r5, r6
 80228c6:	9300      	str	r3, [sp, #0]
 80228c8:	1bad      	subs	r5, r5, r6
 80228ca:	9900      	ldr	r1, [sp, #0]
 80228cc:	1c38      	adds	r0, r7, #0
 80228ce:	f7de fca5 	bl	800121c <__aeabi_fsub>
 80228d2:	1c04      	adds	r4, r0, #0
 80228d4:	1c21      	adds	r1, r4, #0
 80228d6:	1c20      	adds	r0, r4, #0
 80228d8:	f7de fb62 	bl	8000fa0 <__aeabi_fmul>
 80228dc:	494c      	ldr	r1, [pc, #304]	@ (8022a10 <__ieee754_expf+0x1b8>)
 80228de:	1c06      	adds	r6, r0, #0
 80228e0:	f7de fb5e 	bl	8000fa0 <__aeabi_fmul>
 80228e4:	494b      	ldr	r1, [pc, #300]	@ (8022a14 <__ieee754_expf+0x1bc>)
 80228e6:	f7de fc99 	bl	800121c <__aeabi_fsub>
 80228ea:	1c31      	adds	r1, r6, #0
 80228ec:	f7de fb58 	bl	8000fa0 <__aeabi_fmul>
 80228f0:	4949      	ldr	r1, [pc, #292]	@ (8022a18 <__ieee754_expf+0x1c0>)
 80228f2:	f7dd ffe5 	bl	80008c0 <__aeabi_fadd>
 80228f6:	1c31      	adds	r1, r6, #0
 80228f8:	f7de fb52 	bl	8000fa0 <__aeabi_fmul>
 80228fc:	4947      	ldr	r1, [pc, #284]	@ (8022a1c <__ieee754_expf+0x1c4>)
 80228fe:	f7de fc8d 	bl	800121c <__aeabi_fsub>
 8022902:	1c31      	adds	r1, r6, #0
 8022904:	f7de fb4c 	bl	8000fa0 <__aeabi_fmul>
 8022908:	4945      	ldr	r1, [pc, #276]	@ (8022a20 <__ieee754_expf+0x1c8>)
 802290a:	f7dd ffd9 	bl	80008c0 <__aeabi_fadd>
 802290e:	1c31      	adds	r1, r6, #0
 8022910:	f7de fb46 	bl	8000fa0 <__aeabi_fmul>
 8022914:	1c01      	adds	r1, r0, #0
 8022916:	1c20      	adds	r0, r4, #0
 8022918:	f7de fc80 	bl	800121c <__aeabi_fsub>
 802291c:	1c01      	adds	r1, r0, #0
 802291e:	1c06      	adds	r6, r0, #0
 8022920:	1c20      	adds	r0, r4, #0
 8022922:	f7de fb3d 	bl	8000fa0 <__aeabi_fmul>
 8022926:	9001      	str	r0, [sp, #4]
 8022928:	2d00      	cmp	r5, #0
 802292a:	d140      	bne.n	80229ae <__ieee754_expf+0x156>
 802292c:	2180      	movs	r1, #128	@ 0x80
 802292e:	1c30      	adds	r0, r6, #0
 8022930:	05c9      	lsls	r1, r1, #23
 8022932:	f7de fc73 	bl	800121c <__aeabi_fsub>
 8022936:	1c01      	adds	r1, r0, #0
 8022938:	9801      	ldr	r0, [sp, #4]
 802293a:	f7de f94b 	bl	8000bd4 <__aeabi_fdiv>
 802293e:	1c21      	adds	r1, r4, #0
 8022940:	f7de fc6c 	bl	800121c <__aeabi_fsub>
 8022944:	1c01      	adds	r1, r0, #0
 8022946:	20fe      	movs	r0, #254	@ 0xfe
 8022948:	0580      	lsls	r0, r0, #22
 802294a:	f7de fc67 	bl	800121c <__aeabi_fsub>
 802294e:	e79e      	b.n	802288e <__ieee754_expf+0x36>
 8022950:	4934      	ldr	r1, [pc, #208]	@ (8022a24 <__ieee754_expf+0x1cc>)
 8022952:	1c20      	adds	r0, r4, #0
 8022954:	f7de fb24 	bl	8000fa0 <__aeabi_fmul>
 8022958:	4b33      	ldr	r3, [pc, #204]	@ (8022a28 <__ieee754_expf+0x1d0>)
 802295a:	5959      	ldr	r1, [r3, r5]
 802295c:	f7dd ffb0 	bl	80008c0 <__aeabi_fadd>
 8022960:	f7de fe16 	bl	8001590 <__aeabi_f2iz>
 8022964:	0005      	movs	r5, r0
 8022966:	f7de fe33 	bl	80015d0 <__aeabi_i2f>
 802296a:	4930      	ldr	r1, [pc, #192]	@ (8022a2c <__ieee754_expf+0x1d4>)
 802296c:	1c06      	adds	r6, r0, #0
 802296e:	f7de fb17 	bl	8000fa0 <__aeabi_fmul>
 8022972:	1c01      	adds	r1, r0, #0
 8022974:	1c20      	adds	r0, r4, #0
 8022976:	f7de fc51 	bl	800121c <__aeabi_fsub>
 802297a:	492d      	ldr	r1, [pc, #180]	@ (8022a30 <__ieee754_expf+0x1d8>)
 802297c:	1c07      	adds	r7, r0, #0
 802297e:	1c30      	adds	r0, r6, #0
 8022980:	f7de fb0e 	bl	8000fa0 <__aeabi_fmul>
 8022984:	9000      	str	r0, [sp, #0]
 8022986:	e7a0      	b.n	80228ca <__ieee754_expf+0x72>
 8022988:	22d0      	movs	r2, #208	@ 0xd0
 802298a:	0592      	lsls	r2, r2, #22
 802298c:	4293      	cmp	r3, r2
 802298e:	d20c      	bcs.n	80229aa <__ieee754_expf+0x152>
 8022990:	4928      	ldr	r1, [pc, #160]	@ (8022a34 <__ieee754_expf+0x1dc>)
 8022992:	1c20      	adds	r0, r4, #0
 8022994:	f7dd ff94 	bl	80008c0 <__aeabi_fadd>
 8022998:	21fe      	movs	r1, #254	@ 0xfe
 802299a:	0589      	lsls	r1, r1, #22
 802299c:	f7dd fddc 	bl	8000558 <__aeabi_fcmpgt>
 80229a0:	1e05      	subs	r5, r0, #0
 80229a2:	d097      	beq.n	80228d4 <__ieee754_expf+0x7c>
 80229a4:	21fe      	movs	r1, #254	@ 0xfe
 80229a6:	0589      	lsls	r1, r1, #22
 80229a8:	e75f      	b.n	802286a <__ieee754_expf+0x12>
 80229aa:	2500      	movs	r5, #0
 80229ac:	e792      	b.n	80228d4 <__ieee754_expf+0x7c>
 80229ae:	2080      	movs	r0, #128	@ 0x80
 80229b0:	1c31      	adds	r1, r6, #0
 80229b2:	05c0      	lsls	r0, r0, #23
 80229b4:	f7de fc32 	bl	800121c <__aeabi_fsub>
 80229b8:	1c01      	adds	r1, r0, #0
 80229ba:	9801      	ldr	r0, [sp, #4]
 80229bc:	f7de f90a 	bl	8000bd4 <__aeabi_fdiv>
 80229c0:	1c01      	adds	r1, r0, #0
 80229c2:	9800      	ldr	r0, [sp, #0]
 80229c4:	f7de fc2a 	bl	800121c <__aeabi_fsub>
 80229c8:	1c39      	adds	r1, r7, #0
 80229ca:	f7de fc27 	bl	800121c <__aeabi_fsub>
 80229ce:	1c01      	adds	r1, r0, #0
 80229d0:	20fe      	movs	r0, #254	@ 0xfe
 80229d2:	0580      	lsls	r0, r0, #22
 80229d4:	f7de fc22 	bl	800121c <__aeabi_fsub>
 80229d8:	002b      	movs	r3, r5
 80229da:	337d      	adds	r3, #125	@ 0x7d
 80229dc:	db02      	blt.n	80229e4 <__ieee754_expf+0x18c>
 80229de:	05ec      	lsls	r4, r5, #23
 80229e0:	1824      	adds	r4, r4, r0
 80229e2:	e74c      	b.n	802287e <__ieee754_expf+0x26>
 80229e4:	21d8      	movs	r1, #216	@ 0xd8
 80229e6:	3564      	adds	r5, #100	@ 0x64
 80229e8:	05ed      	lsls	r5, r5, #23
 80229ea:	1828      	adds	r0, r5, r0
 80229ec:	0509      	lsls	r1, r1, #20
 80229ee:	f7de fad7 	bl	8000fa0 <__aeabi_fmul>
 80229f2:	e74c      	b.n	802288e <__ieee754_expf+0x36>
 80229f4:	2400      	movs	r4, #0
 80229f6:	e742      	b.n	802287e <__ieee754_expf+0x26>
 80229f8:	42b17217 	.word	0x42b17217
 80229fc:	42cff1b5 	.word	0x42cff1b5
 8022a00:	3eb17218 	.word	0x3eb17218
 8022a04:	3f851591 	.word	0x3f851591
 8022a08:	08025688 	.word	0x08025688
 8022a0c:	08025680 	.word	0x08025680
 8022a10:	3331bb4c 	.word	0x3331bb4c
 8022a14:	35ddea0e 	.word	0x35ddea0e
 8022a18:	388ab355 	.word	0x388ab355
 8022a1c:	3b360b61 	.word	0x3b360b61
 8022a20:	3e2aaaab 	.word	0x3e2aaaab
 8022a24:	3fb8aa3b 	.word	0x3fb8aa3b
 8022a28:	08025690 	.word	0x08025690
 8022a2c:	3f317180 	.word	0x3f317180
 8022a30:	3717f7d1 	.word	0x3717f7d1
 8022a34:	7149f2ca 	.word	0x7149f2ca

08022a38 <with_errnof>:
 8022a38:	b570      	push	{r4, r5, r6, lr}
 8022a3a:	000d      	movs	r5, r1
 8022a3c:	1c04      	adds	r4, r0, #0
 8022a3e:	f7fd f923 	bl	801fc88 <__errno>
 8022a42:	6005      	str	r5, [r0, #0]
 8022a44:	1c20      	adds	r0, r4, #0
 8022a46:	bd70      	pop	{r4, r5, r6, pc}

08022a48 <xflowf>:
 8022a48:	b510      	push	{r4, lr}
 8022a4a:	1c0b      	adds	r3, r1, #0
 8022a4c:	2800      	cmp	r0, #0
 8022a4e:	d002      	beq.n	8022a56 <xflowf+0xe>
 8022a50:	2380      	movs	r3, #128	@ 0x80
 8022a52:	061b      	lsls	r3, r3, #24
 8022a54:	18cb      	adds	r3, r1, r3
 8022a56:	1c18      	adds	r0, r3, #0
 8022a58:	f7de faa2 	bl	8000fa0 <__aeabi_fmul>
 8022a5c:	2122      	movs	r1, #34	@ 0x22
 8022a5e:	f7ff ffeb 	bl	8022a38 <with_errnof>
 8022a62:	bd10      	pop	{r4, pc}

08022a64 <__math_uflowf>:
 8022a64:	2180      	movs	r1, #128	@ 0x80
 8022a66:	b510      	push	{r4, lr}
 8022a68:	0549      	lsls	r1, r1, #21
 8022a6a:	f7ff ffed 	bl	8022a48 <xflowf>
 8022a6e:	bd10      	pop	{r4, pc}

08022a70 <__math_oflowf>:
 8022a70:	21e0      	movs	r1, #224	@ 0xe0
 8022a72:	b510      	push	{r4, lr}
 8022a74:	05c9      	lsls	r1, r1, #23
 8022a76:	f7ff ffe7 	bl	8022a48 <xflowf>
 8022a7a:	bd10      	pop	{r4, pc}

08022a7c <_init>:
 8022a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022a7e:	46c0      	nop			@ (mov r8, r8)
 8022a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022a82:	bc08      	pop	{r3}
 8022a84:	469e      	mov	lr, r3
 8022a86:	4770      	bx	lr

08022a88 <_fini>:
 8022a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022a8a:	46c0      	nop			@ (mov r8, r8)
 8022a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022a8e:	bc08      	pop	{r3}
 8022a90:	469e      	mov	lr, r3
 8022a92:	4770      	bx	lr
